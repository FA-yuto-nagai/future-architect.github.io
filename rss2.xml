<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Fri, 14 Apr 2023 09:29:36 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Vertex AI Model MonitoringとEvidently AIで運用中のモデル・データを監視する【Output Metrics編】</title>
      <link>https://future-architect.github.io/articles/20230414a/</link>
      <guid>https://future-architect.github.io/articles/20230414a/</guid>
      <pubDate>Thu, 13 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;1-はじめに&quot;&gt;&lt;a href=&quot;#1-はじめに&quot; class=&quot;headerlink&quot; title=&quot;1. はじめに&quot;&gt;&lt;/a&gt;1.</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-はじめに"><a href="#1-はじめに" class="headerlink" title="1. はじめに"></a>1. はじめに</h1><p>こんにちは、フューチャーでアルバイトをしている板野です。</p><p>データ&#x2F;モデル監視ツールであるVertex AI Model MonitoringとEvidently AIを利用して両者を様々な観点で検証していきます。</p><p>本記事は、前回の記事：<a href="/articles/20230413a/">Vertex AI Model MonitoringとEvidently AIで運用中のモデル・データを監視する【Input Metrics編】</a>の続きです。</p><p>データ&#x2F;モデルの監視項目については主に<strong>Input Metrics</strong>と<strong>Output Metrics</strong>があることを前回の記事でお伝えし、Input Metricsの監視について検証しました。</p><p>今回は、Vertex AIとEvidently AIのそれぞれにおける<strong>Output Metrics</strong>の監視について検証します。</p><p>※データ&#x2F;モデル監視の基本については、以前に投稿された記事：<a href="/articles/20230412a/">MLシステムにおけるモデル・データの監視【概要編】</a>をご参照ください。</p><h1 id="2-Output-Metricsの監視項目"><a href="#2-Output-Metricsの監視項目" class="headerlink" title="2. Output Metricsの監視項目"></a>2. Output Metricsの監視項目</h1><p>Output Metricsを監視するには<strong>モデルからの出力</strong>が必要となります。</p><p>主に以下の項目を監視します。</p><ul><li>①モデル精度<ul><li>モデルの性能をダイレクトに把握できる指標<ul><li>回帰モデル：決定係数(R^2), 二乗平均平方根誤差(RMSE), 平均絶対誤差(MAE), 等</li><li>分類モデル：正解率(Accuracy), 適合率(Precision), ROC, AUC, 等</li></ul></li></ul></li><li>②特徴量寄与率<ul><li>各特徴量がどの程度モデルの予測結果に対してどの程度影響を与えているかを示す指標<ul><li>各説明変数-目的変数間の相関係数, Shapley値, 等</li></ul></li><li>特徴量寄与率が変化した場合、モデルの精度に影響を与えることがあるため、監視する</li><li>AIモデルの説明性が必要となるケースも多々ある<ul><li>例）なぜこの薬が処方されたか？等</li><li>「説明性の保証」のため、特徴量寄与率が変化していないか監視する</li></ul></li></ul></li><li>③予測結果の偏り<ul><li>予測結果の偏りが大きくなってしまうこと<ul><li>例）予測結果の分布が時間とともに大きく変化した等</li></ul></li></ul></li></ul><p>「モデル精度」については正解データが必要なため、ユースケースによっては指標が出るまでに遅れがあります。<br>例えば、人力で正解ラベルを付与しなければならない場合はその分待たなくてはなりません。</p><h1 id="3-前提条件"><a href="#3-前提条件" class="headerlink" title="3. 前提条件"></a>3. 前提条件</h1><p><a href="/articles/20230413a/">前回の記事</a>の<code>今回想定するユースケース</code>の部分と合わせてあるので、詳細は割愛しますが、以下の前提条件で検証を行います。</p><ul><li>天気や気温等の特徴からその日のシェアバイク利用数を予測する<strong>回帰モデル</strong>を構築している</li><li>Vertex AIのAutoML(表形式)で訓練している</li></ul><h1 id="4-Vertex-AIでOutput-Metricsを監視"><a href="#4-Vertex-AIでOutput-Metricsを監視" class="headerlink" title="4. Vertex AIでOutput Metricsを監視"></a>4. Vertex AIでOutput Metricsを監視</h1><p>Vertex AI自体にバージョンの概念はありませんが、2023&#x2F;3&#x2F;29時点の操作画面となります。</p><h2 id="4-1-監視できる項目"><a href="#4-1-監視できる項目" class="headerlink" title="4.1. 監視できる項目"></a>4.1. 監視できる項目</h2><p>Vertex AIでは、以下のような指標を監視することができます。</p><ul><li>①モデル精度<ul><li>MAE：平均絶対値誤差</li><li>MAPE：平均絶対パーセント誤差</li><li>RMSE：二乗平均平方根誤差</li><li>RMSLE：対数平均平方二乗誤差</li><li>R^2：決定係数（説明変数が目的変数をどれくらい説明できるかを示す値）</li></ul></li><li>②特徴量寄与率<ul><li>Shapleyのサンプリング近似値（<a href="https://cloud.google.com/ai-platform/prediction/docs/ai-explanations/overview?hl=ja#compare-methods">詳細</a>）</li></ul></li></ul><h2 id="4-2-監視設定と監視結果"><a href="#4-2-監視設定と監視結果" class="headerlink" title="4.2. 監視設定と監視結果"></a>4.2. 監視設定と監視結果</h2><h3 id="4-2-1-必要なもの"><a href="#4-2-1-必要なもの" class="headerlink" title="4.2.1. 必要なもの"></a>4.2.1. 必要なもの</h3><ul><li>[★1] 説明変数列（特徴量データの列）, 目的変数列（正解データの列）を含むデータ<ul><li>Google Cloud Strage上のCSVファイル or BigQuery上のデータ であること</li></ul></li></ul><h3 id="4-2-2-手順"><a href="#4-2-2-手順" class="headerlink" title="4.2.2. 手順"></a>4.2.2. 手順</h3><p>Moder Registryから作成したモデル・バージョンの詳細画面に行き、「評価を作成」をクリックします。</p><img src="/images/20230414a/2023-04-03-09-41-52.png" alt="" width="1200" height="464" loading="lazy"><p>設定項目がいくつか出てくるので、ターゲット列、ソース（[★1]）、バッチ予測の出力先を指定します。</p><p>説明可能性のオプションで、「モデル特徴量の重要度を有効にする」にチェックを入れたら「②特徴量寄与率」も監視できます。</p><p>今回は、以下の画像のように設定します。</p><img src="/images/20230414a/2023-04-03-09-53-15.png" alt="" width="764" height="1834" loading="lazy"><p>評価を開始すると、内部でバッチ予測ジョブが自動的に開始され、約20分ほどで評価が完了します。</p><p>評価や特徴量寄与率計算のための予測（推論）はここで動いています。</p><h3 id="4-2-3-監視結果"><a href="#4-2-3-監視結果" class="headerlink" title="4.2.3. 監視結果"></a>4.2.3. 監視結果</h3><p>評価の結果は以下のように見ることができます。特徴量の重要度もヒストグラムで確認することができます。</p><img src="/images/20230414a/2023-04-03-09-47-27.png" alt="" width="1200" height="730" loading="lazy"><h3 id="4-2-4-自動化とアラート"><a href="#4-2-4-自動化とアラート" class="headerlink" title="4.2.4. 自動化とアラート"></a>4.2.4. 自動化とアラート</h3><p>今回の記事には含まれていませんが、以上の手順を自動化する場合、<a href="https://cloud.google.com/vertex-ai/docs/tabular-data/forecasting/evaluate-model?hl=ja#api">Vertex AI API</a>を利用して自動で定期実行することができると考えられます。</p><p>Vertex AI自体に、評価結果が悪くなった際のアラート発生機能はありませんが、REST APIの結果を受け取り、前回の評価結果と比較するシステムを構築すればアラートを発生させることも可能と考えられます。</p><h2 id="4-3-コスト"><a href="#4-3-コスト" class="headerlink" title="4.3. コスト"></a>4.3. コスト</h2><ul><li>実装コスト<ul><li>評価を行うこと自体はVertex AIのコンソール画面から設定できるのでほぼ実装コストは掛かりません</li><li>自動化する場合は、Vertex AI APIを使って処理を実装する必要があります</li></ul></li><li>金銭的コスト<ul><li>評価ジョブ自体にどのくらいのノード時間を費やしているか不明ですが、少なくとも評価ジョブに含まれるバッチ予測ジョブには<a href="https://cloud.google.com/vertex-ai/pricing?hl=ja#prediction-prices">こちら</a>に示されている費用が掛かると考えられます</li><li>Vertex AI APIを動かすサーバ・関数等のコストが掛かります</li></ul></li></ul><h1 id="5-Evidently-AIでOutput-Metricsを監視"><a href="#5-Evidently-AIでOutput-Metricsを監視" class="headerlink" title="5. Evidently AIでOutput Metricsを監視"></a>5. Evidently AIでOutput Metricsを監視</h1><p>Evidently AIのバージョンは<code>0.2.6</code>を使用しています。</p><h2 id="5-1-監視できる項目"><a href="#5-1-監視できる項目" class="headerlink" title="5.1. 監視できる項目"></a>5.1. 監視できる項目</h2><p>Evidently AIでは、以下のような指標を監視することができます。</p><ul><li>①モデル精度<ul><li>ME：平均誤差</li><li>MAE：平均絶対値誤差</li><li>MAPE：平均絶対パーセント誤差</li></ul></li><li>②特徴量寄与率<ul><li>各説明変数-目的変数間の相関係数</li></ul></li><li>③予測結果の偏り<ul><li>過去の予測結果と現在の予測結果の分布の違い</li></ul></li></ul><p>また、Evidently AIでは視覚的にモデルの精度変化を把握できるようなグラフも出力することができます。</p><h2 id="5-2-監視設定と監視結果"><a href="#5-2-監視設定と監視結果" class="headerlink" title="5.2. 監視設定と監視結果"></a>5.2. 監視設定と監視結果</h2><h3 id="5-2-1-必要なもの"><a href="#5-2-1-必要なもの" class="headerlink" title="5.2.1 必要なもの"></a>5.2.1 必要なもの</h3><ul><li>[★2] 説明変数列（特徴量データの列）, 正解データ列(<code>target</code>), 予測結果データ列(<code>prediction</code>) を含むデータ<ul><li>DataFrame型として読み取れる形式</li><li>予測結果データ列はVertex AIで手動でバッチ予測を行い、その結果を新たに<code>prediction</code>列として追加する</li><li>すなわち、予測（推論）処理はこのデータを用意する段階で行う</li></ul></li></ul><p>※[★2]について「②特徴量寄与率」を算出しなくて良い場合は、以下のように、<code>target</code>列と<code>prediction</code>列があればよい</p><img src="/images/20230414a/2023-03-22-14-50-10.png" alt="" width="199" height="197" loading="lazy"><h3 id="5-2-2-手順"><a href="#5-2-2-手順" class="headerlink" title="5.2.2. 手順"></a>5.2.2. 手順</h3><p>Evidently AIのライブラリが入っている環境下で以下のコードを実行する。</p><p>備考：</p><ul><li>過去・現在の2つのデータで評価して結果をを比較したい場合は[★3]と[★4]ように別のCSVファイルを指定する</li><li>現在の1つのデータのみで評価したい場合は[★5]のメソッドで<code>reference_data = None</code>とする</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_california_housing</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> evidently <span class="keyword">import</span> ColumnMapping</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> evidently.report <span class="keyword">import</span> Report</span><br><span class="line"><span class="keyword">from</span> evidently.metrics.base_metric <span class="keyword">import</span> generate_column_metrics</span><br><span class="line"><span class="keyword">from</span> evidently.metric_preset <span class="keyword">import</span> DataDriftPreset, TargetDriftPreset</span><br><span class="line"><span class="keyword">from</span> evidently.metrics <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> evidently.test_suite <span class="keyword">import</span> TestSuite</span><br><span class="line"><span class="keyword">from</span> evidently.tests.base_test <span class="keyword">import</span> generate_column_tests</span><br><span class="line"><span class="keyword">from</span> evidently.test_preset <span class="keyword">import</span> DataStabilityTestPreset, NoTargetPerformanceTestPreset</span><br><span class="line"><span class="keyword">from</span> evidently.tests <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">df1 = pd.read_csv(<span class="string">&#x27;hour-2011-target-pred.csv&#x27;</span>) <span class="comment">#[★3]</span></span><br><span class="line">df2 = pd.read_csv(<span class="string">&#x27;hour-2012-target-pred.csv&#x27;</span>) <span class="comment">#[★4]</span></span><br><span class="line"></span><br><span class="line">report = Report(metrics=[</span><br><span class="line">    RegressionQualityMetric(),<span class="comment"># ①モデル精度（数値指標の表示）</span></span><br><span class="line">    ColumnCorrelationsMetric(column_name=<span class="string">&#x27;target&#x27;</span>), <span class="comment"># ②特徴量寄与率（相関係数の表示）</span></span><br><span class="line">    ColumnDistributionMetric(column_name=<span class="string">&quot;prediction&quot;</span>), <span class="comment"># ③予測結果の偏り（予測結果の分布表示）</span></span><br><span class="line">    RegressionPredictedVsActualScatter(), <span class="comment"># 予測結果と正解データの分布表示</span></span><br><span class="line">    RegressionErrorPlot(), <span class="comment"># 誤差の時間的推移を視覚的に表示</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">report.run(current_data=df2, reference_data=df1,column_mapping=<span class="literal">None</span>) <span class="comment">#[★5]</span></span><br><span class="line">report.show(mode=<span class="string">&#x27;inline&#x27;</span>) <span class="comment"># Notebookのセル出力で結果を表示する</span></span><br></pre></td></tr></table></figure><h3 id="5-2-3-監視結果"><a href="#5-2-3-監視結果" class="headerlink" title="5.2.3. 監視結果"></a>5.2.3. 監視結果</h3><p>「①モデル精度」として、以下のようにMAE等の基本的な数値指標を出力することができます。</p><img src="/images/20230414a/2023-03-22-14-57-34.png" alt="" width="1200" height="556" loading="lazy"><p>※以降、赤色と灰色のグラフが出てきますが、次のような区別です。</p><ul><li>current（赤色）：訓練に使ったものとは違うデータ(評価用データ)をモデルに入力した場合の予測結果</li><li>reference（灰色）：訓練に使ったデータをモデルに入力した場合の予測結果</li></ul><p>「②特徴量寄与率」として、以下のように各説明変数-目的変数(target列)間の相関係数を出力することができます。<br>説明変数-目的変数間の相関係数が大きいほど特徴量寄与率が大きいことを示します。</p><img src="/images/20230414a/2023-04-05-09-36-51.png" alt="" width="1200" height="669" loading="lazy"><p>「③予測結果の偏り」として、以下のように予測結果の分布表示をすることができます。</p><p>訓練用データに対する予測結果(reference)と評価用データに対する予測結果(current)の分布を表示したものです。</p><p>両者の分布を比較することで、予測結果の偏りを監視することができます。</p><img src="/images/20230414a/2023-04-03-14-15-06.png" alt="" width="1200" height="559" loading="lazy"><p>加えて、Evidently AIでは以下のような視覚的出力もできます。</p><p>次の画像は、予測結果と正解データの分布表示を表しています。</p><p>直線に近い見た目になるほど高精度であることを視覚的に示します。</p><img src="/images/20230414a/2023-03-22-14-58-19.png" alt="" width="1200" height="421" loading="lazy"><p>また、誤差の時間的推移を視覚的に表示することもできます。</p><img src="/images/20230414a/2023-03-22-15-03-00.png" alt="" width="1200" height="426" loading="lazy"><p>今回出力したグラフは一例ですが、Evidently AIでは他にも様々なグラフを出力することができます。<br>詳しくは<a href="https://docs.evidentlyai.com/reference/all-metrics#regression">公式ドキュメント</a>を参照してください。</p><h3 id="5-2-4-自動化とアラート"><a href="#5-2-4-自動化とアラート" class="headerlink" title="5.2.4. 自動化とアラート"></a>5.2.4. 自動化とアラート</h3><p>以上の手順を自動化するための実装コストは大きいと考えられます。<br>まず、<a href="https://cloud.google.com/vertex-ai/docs/tabular-data/classification-regression/get-batch-predictions?hl=ja#api:-csv">Vertex AI API</a>からバッチ予測をリクエストし、その結果をCSVファイル形式等で受け取ります。<br>受け取ったCSVファイルから、予測結果データ列(prediction)を取り出し、 正解データ列(target)と合わせたテーブルを作成し、Evidently AIに入力します。</p><p>アラートについて、Evidently AIのTestの結果はJSON形式で受け取れるため、<br>その結果を受け取り、前回の評価結果と比較するシステムを構築すればアラートを発生させることが可能と考えられます。<br>※Evidently AIのTestについては<a href="%E2%98%85%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%8A%E9%A1%98%E3%81%84%E3%81%97%E3%81%BE%E3%81%99">前回の記事</a>に詳細があります。</p><h2 id="5-3-コスト"><a href="#5-3-コスト" class="headerlink" title="5.3. コスト"></a>5.3. コスト</h2><ul><li>実装コスト<ul><li>ユースケースに合わせてPythonコードを実装する必要がありますが、コードは単純でドキュメントも分かりやすく、評価自体はローコードで実装可能です</li><li>自動化する場合、Vertex AI APIを駆使する必要があり、実装コストは大きいです</li></ul></li><li>金銭的コスト<ul><li>Evidently AIを動かすサーバ・関数等のコストが掛かります</li></ul></li></ul><h2 id="6-まとめ"><a href="#6-まとめ" class="headerlink" title="6. まとめ"></a>6. まとめ</h2><p>本記事ではVertex AIとEvidently AIを用いたOutput Metrics監視の検証を行いました。<br>検証の結果を以下の表にまとめます。様々な観点で両者を比較しているので、ご参考になれば幸いです。</p><div class="scroll"><table><thead><tr><th>比較の観点</th><th>Vertex AI</th><th>Evidently AI</th></tr></thead><tbody><tr><td>①モデル精度</td><td>◎（5種の評価指標）</td><td>〇（3種の評価指標）</td></tr><tr><td>②特徴量寄与率</td><td>〇（Shaplay値）</td><td>〇（相関係数）</td></tr><tr><td>③予測の偏り</td><td>機能は提供されていない</td><td>〇 （予測結果の分布を比較）</td></tr><tr><td>実装コスト</td><td>ノーコードで実装可能</td><td>ローコードで実装可能。一部手作業</td></tr><tr><td>金銭的コスト</td><td>VertexAIのバッチ予測 + 評価のコスト</td><td>VertexAIのバッチ予測のコストのみ</td></tr><tr><td>メリット</td><td>モデルと連携して特徴量寄与率を算出可能</td><td>可視化機能が充実している</td></tr><tr><td>デメリット</td><td>可視化機能が充実していない</td><td>手動でVertex AIのバッチ予測を行う必要がある</td></tr></tbody></table></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/MLOps/">MLOps</category>
      
      <category domain="https://future-architect.github.io/tags/Evidently-AI/">Evidently AI</category>
      
      <category domain="https://future-architect.github.io/tags/Vertex-AI-Model-Monitoring/">Vertex AI Model Monitoring</category>
      
      <category domain="https://future-architect.github.io/tags/AI%E7%9B%A3%E8%A6%96/">AI監視</category>
      
      
      <comments>https://future-architect.github.io/articles/20230414a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vertex AI Model MonitoringとEvidently AIで運用中のモデル・データを監視する【Input Metrics編】</title>
      <link>https://future-architect.github.io/articles/20230413a/</link>
      <guid>https://future-architect.github.io/articles/20230413a/</guid>
      <pubDate>Wed, 12 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;1-はじめに&quot;&gt;&lt;a href=&quot;#1-はじめに&quot; class=&quot;headerlink&quot; title=&quot;1. はじめに&quot;&gt;&lt;/a&gt;1.</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-はじめに"><a href="#1-はじめに" class="headerlink" title="1. はじめに"></a>1. はじめに</h1><p>こんにちは、フューチャーでアルバイトをしている板野です。</p><p>今回は、データ&#x2F;モデル監視ツールであるVertex AI Model MonitoringとEvidently AIを利用し、両者を様々な観点で検証していきたいと思います。</p><p><strong>Vertex AIのAutoMLで作成した回帰モデルの監視を想定</strong>し、ユースケースを交えて両者をそれぞれ検証していきます。オープンデータを用いてモデルを学習させ、それに対して監視設定をして運用を試してみたので、その一連の手順と検証結果を記載します。</p><p>データ&#x2F;モデル監視の基本については、以前に投稿された記事：<a href="/articles/20230412a/">MLシステムにおけるモデル・データの監視（概要編）</a>をご参照ください。</p><h1 id="2-監視の必要性"><a href="#2-監視の必要性" class="headerlink" title="2. 監視の必要性"></a>2. 監視の必要性</h1><p>データ&#x2F;モデルを監視するモチベーションとして、例えば以下のような事項が挙げられます。</p><ul><li>刻々と変わる世界の中で、モデルが期待通りに動作し続けるようにしたい</li><li>モデルが出す結果の精度の変化にいち早く気づきたい</li><li>定期的にモデルの更新が必要だと思うがそのタイミングが分からない</li></ul><p>※モデルとは、機械学習システムにおいて、訓練データを用いて訓練したAIモデルのことを指します。</p><h1 id="3-今回想定するユースケース"><a href="#3-今回想定するユースケース" class="headerlink" title="3. 今回想定するユースケース"></a>3. 今回想定するユースケース</h1><p>上記の監視の必要性に対するソリューション例を示すため、具体的なユースケースを想定します。<br>今回は、<strong>天気や気温等の特徴からその日のシェアバイク利用数を予測する回帰モデルを構築する</strong>ことを想定します。</p><h2 id="3-1-監視の背景"><a href="#3-1-監視の背景" class="headerlink" title="3.1. 監視の背景"></a>3.1. 監視の背景</h2><p>シェアバイク屋さんは精度の高い利用数予測モデルを導入し、業務の効率化に役立てたいと考えています。</p><p>しかし、季節やトレンドの時季的な変化は必ず訪れるため、同じモデルを使い続けていると精度は低下していきます。また、機能や仕様の変更でデータの形式が変わり、モデルが役に立たなくなることもあります。</p><p>このようにモデルの精度を低下させる要因は様々あります。</p><p>そこで、モデルを監視することにより精度の低下を防ぐソリューションを考えます。</p><h2 id="3-2-監視項目"><a href="#3-2-監視項目" class="headerlink" title="3.2. 監視項目"></a>3.2. 監視項目</h2><p>では、一体何を監視すれば良いのでしょうか。</p><p>監視の対象は様々ありますが、大きく以下の2つに分かれます。</p><ul><li>Output Metrics<ul><li>出力データに関する監視</li><li>例）精度・特徴量寄与率・予測の偏り等</li></ul></li><li>Input Metrics<ul><li>入力データに関する監視</li><li>例）データドリフト・外れ値・データ数の極端な低下等</li></ul></li></ul><p>精度の低下を直接監視するにはOutput Metricsを見れば良いのですが、モデルの予測結果を評価するための正解データが必要な場合があります。実運用では正解データが手に入るまでにはラグがあるので、Output Metricsではモデルの精度低下に気づくのが遅れる恐れがあります。</p><p>一方、Input Metricsはモデルに入力されるデータに異常や傾向の変化が無いかを確認し、間接的にモデルの精度低下を監視します。この場合、モデルの出力や正解データを待たずとも精度低下の予兆に気づくことができます。</p><p>今回は<strong>Input Metrics</strong>を監視するツールを検証し、AI運用にどのように役に立つのか検証していきます。</p><p>Output Metricsについては、本記事を読んだ上で、こちらの記事：[Vertex AI Model MonitoringとEvidently AIで運用中のモデル・データを監視する【Output Metrics編】(※2023.4.13公開予定)]をご覧ください。</p><h4 id="補足：データドリフトとは？"><a href="#補足：データドリフトとは？" class="headerlink" title="補足：データドリフトとは？"></a>補足：データドリフトとは？</h4><p>データドリフトとは、主に「データの傾向が時間の経過とともに変化すること」を表します。訓練データと推論データの性質が違い、本番で良い精度が発揮できない場合や、最初は良い精度でもデータの性質変化により徐々に精度が下がっていく場合があります。</p><h1 id="4-事前準備-データ準備・モデル構築"><a href="#4-事前準備-データ準備・モデル構築" class="headerlink" title="4. 事前準備: データ準備・モデル構築"></a>4. 事前準備: データ準備・モデル構築</h1><p>監視ツールを比較検証するための事前準備として、Vertex AIのAutoMLを使用して回帰モデルを作成します。<br>※本章はAI監視とは関係ありません。既にVertex AIでモデルのエンドポイントを作成している場合はこの章を飛ばすことができます。</p><h2 id="4-1-使用するデータセット"><a href="#4-1-使用するデータセット" class="headerlink" title="4.1. 使用するデータセット"></a>4.1. 使用するデータセット</h2><p>データセットは<a href="https://archive.ics.uci.edu/ml/datasets/bike+sharing+dataset">Bike Sharing Dataset</a>を利用します。<br>このデータセットには2011年と2012年のシェアバイク利用データが入っており、以下のファイルが含まれています。</p><ul><li><code>day.csv</code>: 日ごとのシェアバイク利用者数が記録されている（全731行）</li><li><code>hour.csv</code>: 時間ごとのシェアバイク利用者数が記録されている（全17379行）</li></ul><p><code>day.csv</code>ではデータ数が少ないので、<code>hour.csv</code>を使うことにします。<br>データの内容は以下のようになっています。（最初の5行のみ表示）</p><img src="/images/20230413a/image.png" alt="" width="1200" height="107" loading="lazy"><p>主な説明変数として、気温(tmp), 湿度(hum), 風速(windspeed)等があります。目的変数はその時間のシェアバイク利用数(cnt)です。</p><p>今回は2011年分のデータのみで学習し、2012年のデータを入れたときの挙動を確かめます。</p><p>hour.csvには2011~2012年のデータがまとめて入っているので以下のように分割したcsvファイルを手作業で作成します。</p><ul><li>hour-2011.csv: 2011年の時間毎シェアバイク利用者数（全8645行）</li><li>hour-2012.csv: 2012年の時間毎シェアバイク利用者数（全8734行）</li></ul><p>更に、月毎に特徴量の分布も変わってくるため、推論に使う2012年のデータについては以下のように月毎に分けたデータも作成しておきました。</p><ul><li>hour-2012-01.csv: 2012年1月の時間毎シェアバイク利用者数（全741行）</li><li>hour-2012-02.csv: 2012年2月の時間毎シェアバイク利用者数（全692行）<br>︙</li></ul><h2 id="4-2-Vertex-AIのデータセットを作成する"><a href="#4-2-Vertex-AIのデータセットを作成する" class="headerlink" title="4.2. Vertex AIのデータセットを作成する"></a>4.2. Vertex AIのデータセットを作成する</h2><p>AutoMLで学習するためにはデータセットを作成する必要があります。<br>左メニューの「データセット」から作成できます。</p><img src="/images/20230413a/image_2.png" alt="" width="1200" height="821" loading="lazy"><p>次に、いずれかの方法でCSVファイルをアップロードします。<br>BigQueryのデータをそのままデータセットにすることもできます。</p><img src="/images/20230413a/image_3.png" alt="" width="1200" height="547" loading="lazy"><p>これでVertex AIのデータセット作成は完了です。</p><h2 id="4-3-AutoMLでモデルの学習を行う"><a href="#4-3-AutoMLでモデルの学習を行う" class="headerlink" title="4.3. AutoMLでモデルの学習を行う"></a>4.3. AutoMLでモデルの学習を行う</h2><p>作成したデータセット（2011年の時間毎シェアバイク利用者数のデータ）で学習を行います。<br>左メニューの「トレーニング」からAutoMLでの学習設定ができます。</p><img src="/images/20230413a/image_4.png" alt="" width="1200" height="690" loading="lazy"><p>モデルの名前は適宜設定し、Target columnには<code>cnt(INTEGER)</code>を選択します。<br>目的変数はシェアバイク利用数(cnt)だからです。</p><img src="/images/20230413a/image_5.png" alt="" width="1200" height="637" loading="lazy"><p>AutoMLでは学習に使う特徴量（説明変数）を選択するといった前処理のようなことができます。<br>今回入手したデータセットには必要のない特徴量もあるため、この画面で特徴量選択しておきます。</p><img src="/images/20230413a/image_6.png" alt="" width="1200" height="702" loading="lazy"><p>最後に、トレーニングに費やす予算を設定します。</p><p>Vertex AIではこの予算の単位には「トレーニング時間」というものが使われています。</p><p>1トレーニング時間当たり2000~3000円掛かります。（<a href="https://cloud.google.com/vertex-ai/pricing?_ga=2.100859905.-1083087641.1678234233&_gac=1.161532622.1678234235.CjwKCAiA3pugBhAwEiwAWFzwdV87TWSYMsS7XAUXked_GSRNHRLhPL2skos9L6jwACckfFioeizOvBoCVf0QAvD_BwE&hl=ja#automl_models">参考</a>）</p><img src="/images/20230413a/image_7.png" alt="" width="1200" height="449" loading="lazy"><p>約2時間程で学習が完了し、モデルが完成します。</p><h2 id="4-4-エンドポイントの作成"><a href="#4-4-エンドポイントの作成" class="headerlink" title="4.4. エンドポイントの作成"></a>4.4. エンドポイントの作成</h2><p>モデルは完成しましたが、そのモデルを使って予測を行う窓口（エンドポイント）を作成する必要があります。<br>左メニューの「エンドポイント」よりエンドポイントを作成することができます。</p><img src="/images/20230413a/image_8.png" alt="" width="1200" height="651" loading="lazy"><p>モデルの設定は以下の通りにします。</p><p>エンドポイントを設定すると、オンライン予測のリクエストを受け付けるので、マシンを常時起動し続けることになります（課金されます！！）。</p><p>従って、まずは最も低スペックのマシンタイプを選択することをお勧めします。</p><img src="/images/20230413a/image_9.png" alt="" width="1200" height="1475" loading="lazy"><p>モデルのモニタリングは後で設定できるので、事前準備中の今は設定しません。</p><img src="/images/20230413a/image_10.png" alt="" width="1196" height="458" loading="lazy"><p>「作成」を押すと、10分程待てばエンドポイントが作成されます。</p><p><a href="https://github.com/googleapis/python-aiplatform/blob/main/samples/snippets/prediction_service/predict_tabular_classification_sample.py">こちら</a>のPythonソースコードを参考にし、試しにエンドポイントにリクエストを投げてみます。<br>※リクエストの投げ方については割愛</p><img src="/images/20230413a/image_11.png" alt="" width="1200" height="85" loading="lazy"><p>上画像のように予測結果が辞書型（REST API経由でリクエストしたらJSON型）で返ってきます。<br>※モデルを実運用している現場ではこのような予測リクエストを大量に投げることになります。</p><p>これで事前準備は完了です。</p><h1 id="5-Vertex-AI-Model-Monitoringでの監視"><a href="#5-Vertex-AI-Model-Monitoringでの監視" class="headerlink" title="5. Vertex AI Model Monitoringでの監視"></a>5. Vertex AI Model Monitoringでの監視</h1><p><a href="https://cloud.google.com/vertex-ai/docs/model-monitoring/overview?hl=ja">Vertex AI Model Monitoring</a>は、AutoML等で訓練したモデルの監視をVertex AI内で完結できるサービスです。</p><p>コンソール画面から監視設定ができ、ノーコードで実現できることが特徴です。</p><p>Vertex AI自体にバージョンの概念はありませんが、<code>2023/3/29</code>時点の操作画面となります。</p><h2 id="5-1-監視できること"><a href="#5-1-監視できること" class="headerlink" title="5.1. 監視できること"></a>5.1. 監視できること</h2><p>Vertex AIではInput Metricsとして<strong>トレーニング &#x2F; サービング スキュー</strong>と<strong>予測ドリフト</strong>を検出することができます。</p><p>Vertex AIでは二者を以下のように定義しています。（<a href="https://cloud.google.com/vertex-ai/docs/model-monitoring/overview?hl=ja">公式サイト</a>）</p><ul><li>トレーニング &#x2F; サービング スキュー（スキュー）<ul><li>訓練データと推論データ間で特徴の分布が異なること</li><li>訓練データの特徴の分布情報が必要</li></ul></li><li>予測ドリフト（ドリフト）<ul><li>推論データの特徴の分布が時間の経過とともに変化すること</li><li>訓練データの特徴の分布情報は不要</li></ul></li></ul><p><a href="https://cloud.google.com/vertex-ai/docs/model-monitoring/overview?hl=ja#calculating-skew-and-drift">公式サイト</a>によると、分布間の距離は以下のアルゴリズムにより計算されます。</p><blockquote><p>カテゴリ特徴の場合、距離スコアはチェビシェフ距離を使用して計算されます。<br>数値特徴の場合、距離スコアはジェンセン・シャノン ダイバージェンスを使用して計算されます。</p></blockquote><h2 id="5-2-監視設定と監視結果"><a href="#5-2-監視設定と監視結果" class="headerlink" title="5.2. 監視設定と監視結果"></a>5.2. 監視設定と監視結果</h2><h3 id="5-2-1-スキューを監視する"><a href="#5-2-1-スキューを監視する" class="headerlink" title="5.2.1. スキューを監視する"></a>5.2.1. スキューを監視する</h3><p>トレーニング &#x2F; サービングスキューを監視するために、エンドポイントの設定を変更します。<br>「このエンドポイントのモデルのモニタリングを有効にする」をオンにして設定していきます。以下は設定項目です。</p><ul><li>モニタリング間隔<ul><li>モニタリングを実行する時間間隔</li><li>短いほど計算リソースを使うため、あまりデータの変化に敏感にならなくて良い場合は長めに設定</li><li>今回は検証のため、かなり短めの1時間に設定</li></ul></li><li>モニタリング データ時間<ul><li>モニタリングを実行するタイミングからどの程度リクエストを遡るか</li><li>例えば1時間に設定すると、モニタリングを実行する1時間前からのリクエストデータを収集し、特徴量分布の計算等を行い、訓練データと比較してスキューがあるか調べる。</li><li>予測リクエストの履歴は自動でBigQueryに保存されているため、このような機能が実現できているようです。</li></ul></li><li>通知メール<ul><li>スキューを検出した際にアラートを出すメールアドレスを複数指定できる</li><li>Slack等への通知はできない</li></ul></li><li>サンプリングレート<ul><li>「モニタリング データ時間」の間に溜まった予測リクエスト履歴のうち何パーセントを特徴量分布の計算に利用するか</li><li>大量の予測リクエストが来る環境下では低めに設定</li></ul></li></ul><img src="/images/20230413a/image_12.png" alt="" width="1200" height="1137" loading="lazy"><p>モニタリングの目的は「トレーニング サービングスキューの検出」を選択します。<br>トレーニング データソースにはモデルの訓練に使用したデータを選択します。<br>Cloud Strage上のCSVファイル、BigQueryテーブル、Vertex AIデータセットの中から選べます。</p><img src="/images/20230413a/image_13.png" alt="" width="1200" height="1478" loading="lazy"><p>「更新」をクリックすると、モニタリングが有効になります。</p><p>試しに、1時間ごとに2012年のひと月分のデータを予測リクエストとして投げてみました。</p><p>すると、いくつかアラートが発生したようです。</p><p>訓練データ分布との距離が大きく開いているため、アラートが発生しています。</p><img src="/images/20230413a/image_14.png" alt="" width="1200" height="388" loading="lazy"><p>特徴量のうち、temp(気温)をクリックしてみると、分布を可視化できます。</p><p>以下は2011年の1~12月の気温の分布（訓練データ）と、2012年のとあるひと月の分布（推論データ）が違っていることを表しています。</p><p>※今回はこのようにスキューが起こるように意図的にデータの与え方を工夫しています。</p><img src="/images/20230413a/image_15.png" alt="" width="1200" height="1289" loading="lazy"><p>アラートが発生すると以下のようなメールが届きます。</p><img src="/images/20230413a/image_16.png" alt="" width="1200" height="591" loading="lazy"><h3 id="5-2-2-ドリフトを監視する"><a href="#5-2-2-ドリフトを監視する" class="headerlink" title="5.2.2. ドリフトを監視する"></a>5.2.2. ドリフトを監視する</h3><p>予測ドリフトを監視するために、エンドポイントの設定を変更します。</p><p>といっても、<code>5.2. トレーニング / サービング スキューを監視する</code>で行った設定とほぼ同じです。</p><p>モニタリングの目的で「予測ドリフト検出」を選択して「更新」ボタンを押すだけです。</p><p>※比較用の訓練データを指定する必要はありません。</p><img src="/images/20230413a/image_17.png" alt="" width="1200" height="866" loading="lazy"><p>先程と同様、1時間ごとに2012年のひと月分のデータを予測リクエストとして投げてみました。</p><p>すると以下画像のようにアラートが確認できます。</p><p>1時間前にリクエストされたデータの分布との距離が大きく開いているため、アラートが発生しています。</p><img src="/images/20230413a/image_18.png" alt="" width="1200" height="391" loading="lazy"><p>スキュー検出と同様に、特徴量のうちtemp(気温)をクリックすると、分布を可視化できます。</p><p>ただし、予測ドリフト検出の場合は比較対象は訓練データではなく、以前の推論データとなります。</p><p>このため、トレーニング統計の分布は表示されていません。</p><p>右側にモニタリングが実施された時間が表示されており、クリックすることで各時間の分布を表示することができます。</p><img src="/images/20230413a/image_19.png" alt="" width="1200" height="918" loading="lazy"><h2 id="5-3-コスト"><a href="#5-3-コスト" class="headerlink" title="5.3. コスト"></a>5.3. コスト</h2><p>監視設定はVertex AIのコンソール画面から設定できるので、<strong>実装コスト</strong>はほぼ必要ないと言ってもいいでしょう。<br>また、モニタリングも自動で定期的に行ってくれるため、<strong>運用コスト</strong>も必要ありません。</p><p>ただし、Vertex AI Model Monitoringを使用するには以下の<strong>金銭的コスト</strong>が発生します。（<a href="https://cloud.google.com/vertex-ai/pricing?hl=ja#modelmonitoring">引用元</a>）<br>大規模なデータを扱う時には金銭的コストに注意が必要です。</p><blockquote><ul><li>Vertex AI Model Monitoring を使用すると、以下に対して課金されます。</li><li>BigQuery テーブルに記録されたトレーニング データと予測データを含め、分析するすべてのデータに対して <strong>1 GB あたり $3.50</strong>。</li><li>アトリビューション モニタリングが有効にされている場合、BigQuery Monitoring や Batch Explain など、Model Monitoring で使用する他の Google Cloud プロダクトに対する課金。</li></ul></blockquote><h1 id="6-Evidently-AIでの監視"><a href="#6-Evidently-AIでの監視" class="headerlink" title="6. Evidently AIでの監視"></a>6. Evidently AIでの監視</h1><p><a href="https://docs.evidentlyai.com/">Evidently AI</a>はオープンソースのPythonライブラリで、ML監視に関わるあらゆる機能を提供してくれます。<br>監視の結果はHTMLファイルやJSONファイルで確認することができます。</p><p>Input Metricsだけでなく、Output Metricsの監視まで支援してくれる機能もありますが、<br>今回はInput Metricsに限定して紹介します。</p><p>Evidently AIのバージョンは<code>0.2.6</code>を使用しています。</p><h2 id="6-1-監視できること"><a href="#6-1-監視できること" class="headerlink" title="6.1. 監視できること"></a>6.1. 監視できること</h2><p>Evidently AIでの監視はVertex AI Model Monitoringのようにノーコードで実現することはできませんが、<br>以下のような、より多くの項目を監視できます。</p><ul><li>ドリフト</li><li>スキュー</li><li>欠損値</li><li>外れ値</li><li>値が正常な範囲内か</li><li>列の不足は無いか</li><li>列(特徴量)同士の相関</li></ul><p>Evidently AIには大きく以下の2種類の機能があります。<br>両者とも監視項目としては似ていますが、その結果の扱い方に違いがあります。</p><ul><li>Report<ul><li>データの品質調査の結果を可視化することができる</li><li>データの傾向を分析したいときに活用</li><li>例）ドリフト検出にて特徴量分布を可視化して傾向を分析する</li></ul></li><li>Test<ul><li>データ品質の異常をテストすることができる</li><li>予め基準を定めておき、それを満たすか否か自動で判別したいときに活用</li><li>例）ドリフト検出にて自動で異常を検知してアラートを発する</li></ul></li></ul><h2 id="6-2-監視設定と監視結果"><a href="#6-2-監視設定と監視結果" class="headerlink" title="6.2. 監視設定と監視結果"></a>6.2. 監視設定と監視結果</h2><h3 id="6-2-1-Evidently-AIのインストール"><a href="#6-2-1-Evidently-AIのインストール" class="headerlink" title="6.2.1. Evidently AIのインストール"></a>6.2.1. Evidently AIのインストール</h3><p>まずはpipコマンドでEvidently AIをインストールします。</p><p><code>pip install evidently</code></p><p>また、Notebook上で使用する場合は次の2つのコマンドを打つとセル出力から直接結果を表示できるようになります。<br>※Notebookを使用しない場合はHTMLファイルを出力することになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jupyter nbextension install --sys-prefix --symlink --overwrite --py evidently</span><br><span class="line">jupyter nbextension <span class="built_in">enable</span> evidently --py --sys-prefix</span><br></pre></td></tr></table></figure><h3 id="6-2-2-データの準備"><a href="#6-2-2-データの準備" class="headerlink" title="6.2.2. データの準備"></a>6.2.2. データの準備</h3><p>Evidently AIを使うのに大きな準備は必要ありません。</p><p>Input Metricsの監視では2つの異なるデータセット間の分布を調べるため、2つのデータを用意するだけです。</p><p>Evidently AIはPandasのDataFrame形式でデータを渡す必要があります。したがって、DataFrameで読み取れる形式のデータならどのようなデータソースでも大丈夫です。ただし、大規模データを扱う際は処理に時間やリソースを要する可能性があります。</p><p>CSVファイルならそのまま読み取るだけ、BigQueryならAPIを使ってDataFrameとして読み込むこともできます。</p><p>ここでは、2012年1月分と2月分の時間毎シェアバイク利用者数のデータを利用しました。</p><h3 id="6-2-3-Reportを使う"><a href="#6-2-3-Reportを使う" class="headerlink" title="6.2.3. Reportを使う"></a>6.2.3. Reportを使う</h3><p><a href="https://docs.evidentlyai.com/get-started/hello-world">公式のBasic Example</a>を参考に、以下のコードを作成し、Notebook上で実行してみました。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> evidently.report <span class="keyword">import</span> Report</span><br><span class="line"><span class="keyword">from</span> evidently.metric_preset <span class="keyword">import</span> DataDriftPreset, DataQualityPreset</span><br><span class="line"></span><br><span class="line">data1 = pd.read_csv(<span class="string">&#x27;hour-2012-01.csv&#x27;</span>) <span class="comment"># 比較する1つ目のデータ</span></span><br><span class="line">data2 = pd.read_csv(<span class="string">&#x27;hour-2012-02.csv&#x27;</span>) <span class="comment"># 比較する2つ目のデータ</span></span><br><span class="line"></span><br><span class="line">report = Report(metrics=[</span><br><span class="line">    DataDriftPreset(), <span class="comment"># [★1]ここは適宜変更可能</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">report.run(current_data=data1, reference_data=data2, column_mapping=<span class="literal">None</span>)</span><br><span class="line">report.show(mode=<span class="string">&#x27;inline&#x27;</span>) <span class="comment"># Notebookのセル出力で結果を表示する</span></span><br><span class="line"><span class="comment"># report.save_html(&#x27;report.html&#x27;) # HTML形式で出力したい場合</span></span><br></pre></td></tr></table></figure><p>すると、以下のように各特徴量の分布が可視化されたものが出力されます。</p><p>一度に複数の特徴量分布の差を比較できる、分かりやすいレポートです。分布間の距離計算アルゴリズムは、データの数や種類に応じて適切なものを自動で選択しているようです。（<a href="https://docs.evidentlyai.com/reference/data-drift-algorithm">公式の解説</a>）</p><img src="/images/20230413a/image_20.png" alt="" width="1200" height="934" loading="lazy"><p>今回は、ソースコードの<code>[★1]</code>の部分に<code>DataDriftPreset()</code>を入れてレポートを出力しました。<br><code>DataDriftPreset()</code>は、データのドリフトを検出するためのプリセットであり、これをReportで出力しました。<br>Evidently AIではこのようなプリセットが複数用意されてあります。</p><p>試しに、<code>DataDriftPreset()</code>を<code>DataQualityPreset()</code>に書き換えてみると、次のようなレポートが得られます。<br>データの統計的情報が可視化されていることが分かります。</p><img src="/images/20230413a/image_21.png" alt="" width="1200" height="560" loading="lazy"><img src="/images/20230413a/image_22.png" alt="" width="1200" height="580" loading="lazy"><p>他に用意されているプリセットなど、詳しくは<a href="https://docs.evidentlyai.com/reference/all-metrics">公式ドキュメント</a>をご覧ください。</p><h3 id="6-2-4-Testを使う"><a href="#6-2-4-Testを使う" class="headerlink" title="6.2.4. Testを使う"></a>6.2.4. Testを使う</h3><p><code>6.2.3. Reportを使ってみる</code>と似ていますが、以下のコードを作成し、実行してみました。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> evidently.test_suite <span class="keyword">import</span> TestSuite</span><br><span class="line"><span class="keyword">from</span> evidently.test_preset <span class="keyword">import</span> DataStabilityTestPreset</span><br><span class="line"></span><br><span class="line">data1 = pd.read_csv(<span class="string">&#x27;hour-2012-01.csv&#x27;</span>) <span class="comment"># 比較する1つ目のデータ</span></span><br><span class="line">data2 = pd.read_csv(<span class="string">&#x27;hour-2012-02.csv&#x27;</span>) <span class="comment"># 比較する2つ目のデータ</span></span><br><span class="line"></span><br><span class="line">test = TestSuite(tests=[</span><br><span class="line">    DataStabilityTestPreset(), <span class="comment"># [★2]ここは適宜変更可能</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">test.run(current_data=data1, reference_data=data2, column_mapping=<span class="literal">None</span>)</span><br><span class="line">test.show(mode=<span class="string">&#x27;inline&#x27;</span>) <span class="comment"># Notebookのセル出力で結果を表示する</span></span><br><span class="line"><span class="comment"># test.save_html(&#x27;test.html&#x27;) # HTML形式で出力したい場合</span></span><br></pre></td></tr></table></figure><p>すると、以下のようなテスト結果が返ってきます。<br>今回は53個のテスト項目があり、そのうち42件が合格、11件が不合格だったようです。</p><img src="/images/20230413a/image_23.png" alt="" width="1200" height="946" loading="lazy"><p>Share of Out-of-Range Values（範囲外の値が含まれる割合が一定値を超えていた）という理由で不合格でした。</p><img src="/images/20230413a/image_24.png" alt="" width="1200" height="368" loading="lazy"><p>今回は<code>[★2]</code>で<code>DataStabilityTestPreset()</code>を指定しただけで、「完全お任せでテストして！」と言っているようなものなのでいくつか不合格が出てきました。もちろん、使用状況に合わせて合格と不合格の閾値などはカスタマイズできます。</p><p>また、今回はHTMLファイル（or Notebookのセル出力）でTestの結果を表示しましたが、結果をJSONファイルとして出力することもできます。</p><p>JSONファイルはソースコードで処理しやすいのでアラート通知の仕方や通知先は自由自在です。</p><p>詳しくは<a href="https://docs.evidentlyai.com/reference/all-tests">公式ドキュメント</a>をご覧ください。</p><h2 id="6-3-コスト"><a href="#6-3-コスト" class="headerlink" title="6.3. コスト"></a>6.3. コスト</h2><p>Evidently AIは、クラウドやオンプレミスの環境での自己運用型Pythonライブラリで、OSSとして提供されます。</p><p>このため、ソフトウェアを利用するライセンス料は発生しません。Evidently AIにかかる<strong>金銭的コスト</strong>は、定期的にモニタリングジョブを動かすマシンの料金です。</p><p>Evidently AIは、Vertex AI Model Monitoringのようにノーコードで実現することはできません。簡素ではありますが、Pythonコードを書く<strong>実装コスト</strong>、及び定期的にモニタリングを実行する仕組み（<strong>運用コスト</strong>）が必要です。</p><h1 id="7-まとめ"><a href="#7-まとめ" class="headerlink" title="7. まとめ"></a>7. まとめ</h1><p>本記事では、Vertex AIのAutoMLで学習したモデルを監視することを前提に、<br>AI監視ツールである、Vertex AI Model Monitoring及びEvidently AIを具体的に利用し、その使用感を検証しました。</p><p>以下に両者の特徴をまとめました。</p><div class="scroll"><table><thead><tr><th>比較ポイント</th><th>Vertex AI Model Monitoring</th><th>Evidently AI</th></tr></thead><tbody><tr><td>監視項目の範囲</td><td>スキュー&#x2F;ドリフトのみ</td><td>スキュー&#x2F;ドリフトに加え、データ品質まで</td></tr><tr><td>実装コスト</td><td>ノーコードで実現可能</td><td>Pythonコードを書く</td></tr><tr><td>運用コスト</td><td>設定するだけでほぼ掛からない</td><td>モニタリングを定期的に実行する仕組みの構築が必要</td></tr><tr><td>金銭的コスト</td><td>1 GB のデータあたり $3.50の課金</td><td>モニタリングジョブを動かすマシンの料金</td></tr><tr><td>アラートの拡張性</td><td>メール通知のみ</td><td>JSON形式を読み取って通知をカスタマイズ</td></tr><tr><td>大規模データの注意点</td><td>金銭的コストの増加</td><td>処理の遅れ・マシンのリソース不足</td></tr></tbody></table></div><p>両者とも機械学習モデルのパフォーマンスを監視するためのプラットフォームですが、Vertex AI Model MonitoringはGoogle Cloud上で提供されるマネージドサービスの一部であり、Googleが提供する機械学習インフラストラクチャの一部です。</p><p>一方、Evidently AIは、クラウドやオンプレミスの環境で自己運用型のOSSとして提供されます。</p><p>Vertex AI Model Monitoringは、ドリフト&#x2F;スキューを監視することができますが、Evidently AIは、ドリフト&#x2F;スキューだけでなく、入力データの品質等、より広範な指標を監視することができます。</p><p>Vertex AI Model Monitoringよりも幅広い項目を監視したいと思う場合、Evidently AIを検討することをおすすめします。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/MLOps/">MLOps</category>
      
      <category domain="https://future-architect.github.io/tags/Evidently-AI/">Evidently AI</category>
      
      <category domain="https://future-architect.github.io/tags/Vertex-AI-Model-Monitoring/">Vertex AI Model Monitoring</category>
      
      <category domain="https://future-architect.github.io/tags/AI%E7%9B%A3%E8%A6%96/">AI監視</category>
      
      
      <comments>https://future-architect.github.io/articles/20230413a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MLシステムにおけるモデル・データの監視【概要編】</title>
      <link>https://future-architect.github.io/articles/20230412a/</link>
      <guid>https://future-architect.github.io/articles/20230412a/</guid>
      <pubDate>Tue, 11 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、フューチャーでアルバイトをしている平野です。</p><p>今回は「モデル・データの監視」について、なぜ監視が必要なのか、監視するべき項目は何か、監視するにはどのようなツールがあるのかについてご紹介します。</p><p>注意点として、今回のブログでのツールの紹介は、「各ツールでどのようなことができるのか」について書いているので、各ツールの使い方などは各公式サイトなどをご参照ください。</p><p>Vertex AI Model MonitoringとEvidently AIについては、<a href="/articles/20230413a/">Vertex AI Model MonitoringとEvidently AIで運用中のモデル・データを監視する【Input Metrics編】</a>で具体的な使い方まで解説しているため、ご覧いただけると幸いです。</p><h1 id="なぜ監視するのか"><a href="#なぜ監視するのか" class="headerlink" title="なぜ監視するのか"></a>なぜ監視するのか</h1><p>モデルの学習が完了し、そのモデルを本番環境にデプロイし、運用が開始されればそれでミッション完了といえるのでしょうか？答えはNOです。なぜなら、モデルが本番環境で期待通り稼働するか分からないからです。</p><p>例えば、学習データと本番データが大きく乖離している場合、モデルの予測は大きく外れてしまう可能性があります。また、現実世界は時々刻々と変化します。そのため、運用開始時には想定通りの本番データが得られていたのに、徐々に学習データと乖離していくことも考えられます。</p><p>この場合、運用開始時には期待通りに稼働していたのに、時間が経つにつれてモデルの精度が低下していくことになります。定期的にモデルを再学習させることによってこの状況を回避することもできますが、モデルの再学習には時間やコストがかかるため、再学習の回数は可能な限り少なく抑えたい所です。</p><p>そこで、<strong>本番環境でモデルが期待通りに稼働しているかを監視</strong>する必要が出てきます。本番環境での入力データやモデルのパフォーマンスを監視し、入力データが学習データと大きく乖離した場合やモデルの精度が大きく低下した場合にモデルを更新することで、モデルを常に期待通りに稼働させつつ、再学習のコストを下げることができます。</p><h1 id="監視する項目"><a href="#監視する項目" class="headerlink" title="監視する項目"></a>監視する項目</h1><p>監視すべき項目はモデルに求める精度や運用状況によって変わるとは思いますが、ここでは一般的に監視する必要があると考えられる項目を紹介します。</p><ol><li>Software Metrics<br> リソースの使用率やデータ量、データの更新頻度などです。リソースの使用率が100%に近い場合、リソースのスケールを考える必要があります。また、そもそもMLシステムが正しく稼働できているかを確認するため、システムログも監視する必要があります。<div class="scroll"><table><thead><tr><th align="left">項目</th><th align="left">説明</th></tr></thead><tbody><tr><td align="left">リソース使用率</td><td align="left">メモリ・CPU・GPUなどのハードウェアリソースの使用率</td></tr><tr><td align="left">リクエスト数</td><td align="left">予測リクエストの頻度など</td></tr><tr><td align="left">レスポンスタイム</td><td align="left">予測リクエストから予測を返すまでの時間やその平均など</td></tr><tr><td align="left">更新頻度</td><td align="left">データが定期的に入ってくるか</td></tr><tr><td align="left">データ量</td><td align="left">更新時に想定通りの量のデータが入ってきているか</td></tr></tbody></table></div></li><li>Input Metrics<br> モデルのパフォーマンスを監視するためには次に紹介するOutput metricsを監視することが重要なのですが、本番環境では入力データに対する正解データがすぐには手に入らない場合が多くあります。そこで入力データを監視することで間接的にモデル精度の低下を検出します。<div class="scroll"><table><thead><tr><th align="left">項目</th><th align="left">説明</th></tr></thead><tbody><tr><td align="left">欠損値</td><td align="left">欠損値が含まれているかや欠損値の割合など</td></tr><tr><td align="left">値が範囲内か</td><td align="left">正の値が来るべきところに負の値が来ているなど</td></tr><tr><td align="left">columnが増減していないか</td><td align="left">アップデートなどで入力形式が変わっていないかなど</td></tr><tr><td align="left">統計量が範囲内か</td><td align="left">平均、分散などの統計量が期待する範囲内に収まっているか</td></tr><tr><td align="left">ドリフト</td><td align="left">入力データの分布が時間とともに変化していないか</td></tr><tr><td align="left">スキュー</td><td align="left">学習データの分布と本番環境でのデータの分布に乖離がないか</td></tr><tr><td align="left">外れ値</td><td align="left">平均から標準偏差の3倍以上離れているなど</td></tr><tr><td align="left">列同士の相関</td><td align="left">学習データでの相関と本番環境のデータでの相関に違いがみられないかなど</td></tr></tbody></table></div></li><li>Output Metrics<br> 正解データが手に入る場合にはモデルの予測の正解率を監視することで、精度の低下を検出できます。また、入力と出力の関係（特徴量寄与率）や予測の偏りなども監視することで、より正確にモデルの再学習のタイミングを計ることができます。<div class="scroll"><table><thead><tr><th align="left">項目</th><th align="left">説明</th></tr></thead><tbody><tr><td align="left">モデル精度</td><td align="left">Accuracy、Precision、ROC AUCなど</td></tr><tr><td align="left">予測の偏り</td><td align="left">歪度、尖度など。学習時と本番環境時で予測の分布に変化がある場合には、学習データセットが本番環境でのデータをうまく再現できていない可能性がある。</td></tr><tr><td align="left">特徴量寄与率</td><td align="left">入出力の相関やShapleyなど。特徴量寄与率が時間経過とともに変化している場合には、精度が低下している可能性がある。</td></tr><tr><td align="left">ビジネス指標</td><td align="left">CTRやCVRなど</td></tr></tbody></table></div></li></ol><h1 id="ツールの紹介"><a href="#ツールの紹介" class="headerlink" title="ツールの紹介"></a>ツールの紹介</h1><h2 id="Great-Expectations"><a href="#Great-Expectations" class="headerlink" title="Great Expectations"></a>Great Expectations</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>Great Expectationsは、ユーザー独自のデータ品質テストの作成、テストの実行、テスト結果の可視化を可能とするOSS Pythonライブラリです。<strong>用意されているテストが豊富でデータの品質チェックに特化している</strong>ことが特徴です（<a href="https://greatexpectations.io/expectations/">用意されているテスト一覧</a>）。</p><h3 id="監視できる項目例"><a href="#監視できる項目例" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Input Metrics<br>  欠損値、各値が範囲内か、columnの増減、統計値が範囲内か、データドリフト&#x2F;スキュー、外れ値など</li></ul><h3 id="詳細"><a href="#詳細" class="headerlink" title="詳細"></a>詳細</h3><p>データの品質テスト（テストのことをexpectation）、エラーの文章化（html形式でどのテストをパスし、どのテストでエラーを起こしたかが見れる）、プロファイリング（統計量の計算）が可能となっています。</p><p><img src="https://docs.greatexpectations.io/assets/images/datadocs-8d8bc71d8aec770a38656ce60cc1e073.png" alt="Great Expectations"></p><p>※<a href="https://docs.greatexpectations.io/docs/">Great Expectations 公式Docs</a>より画像引用</p><p>懸念点としては、モデル精度の監視や特徴量寄与率などのOutput Metricsについては監視ができないと思われます。また、テストの定期的な実行やリアルタイム監視などもGreat Expectations単体では難しいと思われます。</p><h2 id="whylogs"><a href="#whylogs" class="headerlink" title="whylogs"></a>whylogs</h2><h3 id="概要-1"><a href="#概要-1" class="headerlink" title="概要"></a>概要</h3><p>whylogsは、データベースに保存されているデータに対してスキーマチェック、ドリフト&#x2F;スキュー検出、解析を可能とするOSS Pythonライブラリです。<strong>テーブルデータやテキストデータ以外に画像や埋め込み表現も扱うことができる</strong>のが特徴です。</p><h3 id="監視できる項目例-1"><a href="#監視できる項目例-1" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Input Metrics<br>  欠損値、各値が範囲内か、統計値が範囲内か、データドリフト&#x2F;スキューなど</li></ul><h3 id="詳細-1"><a href="#詳細-1" class="headerlink" title="詳細"></a>詳細</h3><p>データの統計値の計算、条件を満たしているかのテスト、分布の可視化、別データセットとの比較が可能です。profileと呼ばれる統計値のセット（カスタマイズ可能）を作成し、それをもとに可視化や条件を満たすかのテストを行うという流れになります。また、有償のWhyLabsと組み合わせれば、データの自動監視も可能となります。</p><p><img src="https://github.com/whylabs/whylogs/blob/assets/images/NotebookProfileVisualizer.gif?raw=true" alt="WhyLogs"></p><p>※<a href="https://github.com/whylabs/whylogs">whylogs GitHub</a>より画像引用</p><p>懸念点としては、WhyLabsを用いない場合には、Notebookを使うことでしか可視化ができないと思われます。また、profileを保存することができるのですが、現状ではローカル、AWS S3、WhyLabsへ保存する機能しか提供されていない点も懸念点となり得そうです。</p><h2 id="Alibi-Detect"><a href="#Alibi-Detect" class="headerlink" title="Alibi Detect"></a>Alibi Detect</h2><h3 id="概要-2"><a href="#概要-2" class="headerlink" title="概要"></a>概要</h3><p>Alibi Detectは、モデルの学習に用いたデータセットや本番データをDetectorに学習させ、Detectorに外れ値、Adversarial Example、ドリフト検出をさせるOSS Pythonライブラリです。<strong>用意されているアルゴリズムが多く、複数のアルゴリズムを併用して検出精度を上げたい場合</strong>などに有用です。また、機械学習モデルを用いて監視するため、単純な統計量からは検出できないような異常を検出したい場合などにも使えそうです。</p><h3 id="監視できる項目例-2"><a href="#監視できる項目例-2" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Input Metrics<br>  データドリフト&#x2F;スキュー、外れ値など</li></ul><h3 id="詳細-2"><a href="#詳細-2" class="headerlink" title="詳細"></a>詳細</h3><p>バックエンドにPyTorch、TensorFlowが使われており、機械学習のモデルを使って外れ値、Adversarial Example、データドリフトを検出できます。また、公式のドキュメントにサンプルが豊富に用意されているため、使いやすさは高そうです。</p><p>一方で、機械学習モデルを使った検出方法となるため、検出精度と速度のトレードオフや、学習に用いるデータセットの質によって精度が変化することが考えられます。また、Pythonライブラリであるため、他に紹介しているツールのような、GUIやコマンドですぐに監視を始めるといったことはできず、しっかりとコードを書く必要があります（<a href="https://github.com/SeldonIO/alibi-detect/blob/40f4121ce6df2e11451036f1edc2976c63fed1fe/doc/source/examples/od_ae_cifar10.ipynb">コード例</a>）。またPythonを実行して初めて検出結果が得られるため、定期実行やリアルタイム監視といったことはAlibi Detect単体では難しく、これらを行いたい場合には別のツールと併用する必要があると思われます。</p><h2 id="Monte-Carlo"><a href="#Monte-Carlo" class="headerlink" title="Monte Carlo"></a>Monte Carlo</h2><h3 id="概要-3"><a href="#概要-3" class="headerlink" title="概要"></a>概要</h3><p>Monte Carloは、データベースに接続することで、自動でデータベースの異常検知、通知を行い、また原因解明のためのツールを提供するプラットフォームです。<strong>機械学習を利用してデータを解析してくれるので、ユーザー側で詳細な設定やコーディングをせずとも、データの監視が可能です。</strong></p><h3 id="監視できる項目例-3"><a href="#監視できる項目例-3" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Software Metrics<br>  データ量、更新頻度など</li><li>Input Metrics<br>  欠損値、columnの増減、データドリフト&#x2F;スキュー、外れ値など</li></ul><h3 id="詳細-3"><a href="#詳細-3" class="headerlink" title="詳細"></a>詳細</h3><p>利用を開始した時点で、データの更新頻度、データ量（どの程度追加&#x2F;削除&#x2F;更新されたか）、スキーマが自動でチェックされます。そのほか、<a href="https://docs.getmontecarlo.com/docs/field-health-metrics#field-health-monitor-metrics">こちら</a>に記載されている項目の監視も追加で行うことができます。また、ユーザーが独自の設定を行うことも可能で、SQLでルールを設定することで特定の条件でのデータを監視したり、APIやSDKで監視を設定したりできます。</p><p><img src="https://files.readme.io/bea0e38-Screen_Shot_2021-07-22_at_9.53.02_PM.png" alt="Monte Carlo"></p><p>※<a href="https://docs.getmontecarlo.com/docs/quick-start-guide">Monte Carlo 公式Docs</a>より画像引用</p><p>懸念点としては、Great Expectationsと同様にOutput Metricsについては監視できないと思われます。Intput Metricsについての監視で十分な場合にMonte Carloは使えるかと思います。</p><h2 id="Evidently-AI"><a href="#Evidently-AI" class="headerlink" title="Evidently AI"></a>Evidently AI</h2><h3 id="概要-4"><a href="#概要-4" class="headerlink" title="概要"></a>概要</h3><p>Evidently AIは50以上の用意されたテスト（スキーマチェックからドリフト&#x2F;スキュー検出まで）からテストセットを作成、作成したテストセットでデータを検証、検証結果の可視化、本番環境のモデルのリアルタイム監視を可能とするOSS Pythonライブラリです。<strong>OSSでありながら、データの品質チェック、ドリフト&#x2F;スキュー検出、可視化、リアルタイム監視が可能となっています。</strong></p><p><img src="https://2040421098-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FeE67gM4508ESQxkbpOxj%2Fuploads%2Fgit-blob-a8ab3ebb39a6dc1e624db45cde83454ab00bd79d%2Fevidently_reports_main-min.png?alt=media" alt="Evidently AI"></p><p>※<a href="https://docs.evidentlyai.com/">Evidently AI 公式Docs</a>より画像引用</p><h3 id="監視できる項目例-4"><a href="#監視できる項目例-4" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Input Metrics<br>  欠損値、各値が範囲内か、columnの増減、統計値が範囲内か、データドリフト&#x2F;スキュー、相関係数など</li><li>Output Metrics<br>  モデル精度、特徴量寄与率など</li></ul><h3 id="詳細-4"><a href="#詳細-4" class="headerlink" title="詳細"></a>詳細</h3><p>TestとReportの2つがあり、Testでは条件を設定することでデータがその条件を満たしているかのチェックができます。Testは50以上のものが用意されており、それらを組み合わせたり、プリセットを利用することができます。notebookで実行することでテスト結果を可視化することができます。</p><p>Reportではデータの統計値や分布、ドリフト、モデルのパフォーマンスを可視化することができます。結果はHTML形式、json形式、Pythonの辞書型で出力可能で、HTML形式の場合、ダッシュボード上からGUIでいろいろと操作することが可能です。また、Grafana dashboardを使って本番環境で稼働しているモデルを監視することもできます。</p><p>ただし、HTML形式の場合、インタラクティブな処理に対応するために、全データを取り込んでおく必要があり、大規模なデータセットの場合、ロードに時間がかかってしまうようです。</p><blockquote><p>HTML reports may take time to load. This is because they store some of the data inside the HTML to generate the interactive plots. The exact limitation depends on your infrastructure (e.g., memory).</p></blockquote><h2 id="Citadel-AI"><a href="#Citadel-AI" class="headerlink" title="Citadel AI"></a>Citadel AI</h2><h3 id="概要-5"><a href="#概要-5" class="headerlink" title="概要"></a>概要</h3><p>Citadel AIは、モデル開発のサポート（モデルの診断レポート、検証、弱点の原因解明と改善）を行うCitadel Lensと、本番環境での監視（モニタリング、異常入力のフィルタリング、モデルの判断根拠の可視化）を行ってくれるCitadel Radarの2つの機能を提供しています。<br><strong>モデル開発から本番環境までを1つのサービスでカバーすることができます。</strong></p><h3 id="監視できる項目例-5"><a href="#監視できる項目例-5" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Input Metrics<br>  欠損値、データドリフト&#x2F;スキュー、外れ値など</li><li>Output Metrics<br>  特徴量寄与率など</li></ul><h3 id="詳細-5"><a href="#詳細-5" class="headerlink" title="詳細"></a>詳細</h3><ol><li>Citadel Lens<br> モデル開発時やPoCにおいて、モデルのテストを行い、モデルの即時診断レポートを生成してくれます。数値データを扱うモデルや画像を扱うモデルなど様々なモデルに適用することができ、バージョンの異なるモデルの性能比較や原因分析が可能です。</li></ol><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2842903/36e437bf-2742-4ea0-41cc-d4fa1fc37635.gif" alt="citadel_lens.gif"></p><p>※<a href="https://www.citadel.co.jp/">Citadel AIの公式ページ</a>より動画引用</p><ol start="2"><li>Citadel Radar<br> 本番環境のデータを常時モニタリングすることで、データドリフトやスキューをリアルタイムに検知してくれます。また、入出力データをテストし、不正データや異常値、Adversarial Attackなどをブロックしたり、タグ付けしたりなども可能です。特徴量寄与率や反実仮想分析などでモデルの判断根拠の可視化も可能となっています。</li></ol><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2842903/2542cc65-03a3-d60f-9462-936cf7be4039.gif" alt="citadel_radar.gif"></p><p>※<a href="https://www.citadel.co.jp/">Citadel AIの公式ページ</a>より動画引用</p><p>懸念点としては、製品であるため、検証するためにはフォームの登録かEmailでの連絡が必要そうな点です。</p><h2 id="TensorFlow-Data-Validation"><a href="#TensorFlow-Data-Validation" class="headerlink" title="TensorFlow Data Validation"></a>TensorFlow Data Validation</h2><h3 id="概要-6"><a href="#概要-6" class="headerlink" title="概要"></a>概要</h3><p>Tensorflow Data Validationは学習データ&#x2F;本番データの統計量計算、スキーマチェック、ドリフト&#x2F;スキューの検知を可能とするOSS Pythonライブラリです。内部でApache Beamが使われているため、<strong>データ量に応じてスケーリングが可能で、大量のデータに対して監視したい場合や監視したいデータの量が変化する可能性がある場合に使えそうです。</strong></p><img src="/images/20230412a/Tensorflow_Data_Validation.png" alt="Tensorflow_Data_Validation" width="1124" height="531" loading="lazy"><blockquote><p><a href="https://www.tensorflow.org/tfx/data_validation/get_started">Tensorflowデータ検証を開始する</a>より画像引用</p></blockquote><h3 id="監視できる項目例-6"><a href="#監視できる項目例-6" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Input Metrics<br>  欠損値、各値が範囲内か、columnの増減、統計値が範囲内か、データドリフト&#x2F;スキュー、外れ値など</li><li>Output Metrics<br>  モデル精度など</li></ul><h3 id="詳細-6"><a href="#詳細-6" class="headerlink" title="詳細"></a>詳細</h3><p>統計量の計算、データのスキーマチェック、ドリフト・スキュー検出、可視化&#x2F;比較などが可能です。<br>学習データをもとに統計量のベースライン、各特徴量の型（スキーマ）を推論してくれ、本番データをそれらと比較することでドリフト・スキュー検出、型チェックを行います。スキーマは学習データから自動で作成されますが、変更することも可能です。また、MLパイプラインの中にTensorFlow Data Validationの機能を組み込むことが可能で、例えば、データ生成パイプラインの最後に統計計算を付け加えることなどができます。</p><p>懸念点としては、利用のためにはApache BeamとApache Arrowが必要で、スケーリングの利点を活かそうと思うと、少々コーディングが必要となってしまう点がありそうです。<a href="https://www.tensorflow.org/tfx/data_validation/get_started?hl=ja#running_on_google_cloud">こちら</a>はTensorFlow Data ValidationをGCPで利用する場合の例ですが、GUIからスケーリングの設定や監視項目の変更などはできず、コードを変更する必要がありそうです。</p><h2 id="Vertex-AI-Model-Monitoring"><a href="#Vertex-AI-Model-Monitoring" class="headerlink" title="Vertex AI Model Monitoring"></a>Vertex AI Model Monitoring</h2><h3 id="概要-7"><a href="#概要-7" class="headerlink" title="概要"></a>概要</h3><p>Vertex AI Model MonitoringはGCPのサービスであるVertex AIの機能の1つで、コードを書くことなく、モデルの予測入力データをモニタリングし、特徴量のスキューとドリフトをモニタリングするための機能です。<strong>GCPでMLシステムを運用している場合に、最も手軽に導入できる監視システムです。</strong></p><p><img src="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/show_distro_skews.gif" alt="Vertex AI Model Monitoring demo"></p><p>※<a href="https://cloud.google.com/blog/topics/developers-practitioners/monitor-models-training-serving-skew-vertex-ai?hl=en">Google Could Blog: Monitor models for training-serving skew with Vertex AI</a>より画像引用</p><h3 id="監視できる項目例-7"><a href="#監視できる項目例-7" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Input Metrics<br>  データドリフト&#x2F;スキューなど</li><li>Output Metrics<br>  モデル精度、特徴量寄与率など</li></ul><h3 id="詳細-7"><a href="#詳細-7" class="headerlink" title="詳細"></a>詳細</h3><p>本番環境の入力データをサンプリングしてベースライン（トレーニングデータや直近の本番環境入力データ）と比較し、閾値を超えるとスキューやドリフトとみなします。</p><p>また、Vertex AIの別の機能であるVertex Explainable AIと組み合わせることで特徴アトリビューション（上でいう特徴量寄与率）を監視することができます。</p><p><img src="https://cloud.google.com/static/vertex-ai/docs/explainable-ai/images/expl_bike.png?hl=ja" alt="Vertex Explainable AI"></p><p>※<a href="https://cloud.google.com/vertex-ai/docs/explainable-ai/overview?hl=ja">Vertex Explainable AI の概要</a>より画像引用</p><p>また、Model Registoryの機能では、MAE, MAPE, RMSEなどといったモデル精度を監視できます。</p><p>一方で、モニタリングのカスタマイズ性（例えば、ドリフト検出のアルゴリズムを変えるなど）は低く、現状では検出の閾値を変える程度しかできなさそうです。通知の機能も現状ではメール通知、Cloud Loggingのアラートだけのようで、単独ではSlackへの通知などは難しそうです。</p><p>しかし、<a href="https://cloud.google.com/blog/topics/developers-practitioners/monitor-models-training-serving-skew-vertex-ai?hl=en">Google Cloud Blog</a>に以下のような記述があったため、今後はメール通知やCloud Loggingのアラート以外の通知やドリフト&#x2F;スキュー検出をトリガーにモデルの再学習を自動でスタートさせることも可能になるかもしれません。</p><blockquote><p>When skew is detected for a feature, an alert is sent via email. (More ways of receiving alerts will be added in the near future, including mechanisms to trigger a model retraining pipeline).</p></blockquote><h2 id="Amazon-SageMaker"><a href="#Amazon-SageMaker" class="headerlink" title="Amazon SageMaker"></a>Amazon SageMaker</h2><h3 id="概要-8"><a href="#概要-8" class="headerlink" title="概要"></a>概要</h3><p>Amazon SageMakerはAWSのサービスで、MLシステムの監視の機能として以下の2つを提供しています。<strong>AWSでMLシステムを運用している場合に、最も手軽に導入できる監視システムです。</strong></p><h3 id="監視できる項目例-8"><a href="#監視できる項目例-8" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Input Metrics<br>  欠損値、各値が範囲内か、データドリフト&#x2F;スキューなど</li><li>Output Metrics<br>  特徴量寄与率、予測の偏りなど</li></ul><h3 id="詳細-8"><a href="#詳細-8" class="headerlink" title="詳細"></a>詳細</h3><ol><li>SageMaker Model Monitor<br>  コードを書くことなく、予測入力データの品質チェック、入力データおよびモデル出力の分析、ドリフト&#x2F;スキューの検出が可能となっています。監視のタイミングはスケジュールすることができ、定期的に監視ジョブを走らせることができます。異常を検知すれば通知、モデルの再トレーニングやデータの監査などの修正アクションを実行できます。各データはAmazon SageMaker Studioで可視化することができますし、そのほか、Tensorboard、Amazon QuickSight、Tableau などの他の可視化ツールも使うことができます。 <img src="/images/20230412a/Amazon_SageMaker_Model_Monitor.png" alt="Amazon_SageMaker_Model_Monitor" width="910" height="597" loading="lazy"> ※<a href="https://aws.amazon.com/jp/sagemaker/model-monitor/">Amazon SageMaker Model Monitor</a> より画像引用</li><li>SageMaker Clarify<br>  データのバイアス（特定の年齢層のデータが少ないなど）やモデルのバイアス（あるグループに対して他のグループよりも否定的な結果を出すことが多いなど）の特定・確認や特徴量寄与率のリアルタイムな監視などが可能となっています。こちらもAmazon SageMaker Studioと組み合わせることで各データを見やすい形でまとめることができます。 <img src="/images/20230412a/Amazon_SageMaker_Clarify.png" alt="Amazon_SageMaker_Clarify" width="1200" height="706" loading="lazy"> ※<a href="https://aws.amazon.com/jp/sagemaker/clarify/?sagemaker-data-wrangler-whats-new.sort-by=item.additionalFields.postDateTime&sagemaker-data-wrangler-whats-new.sort-order=desc">Amazon SageMaker Clarify</a> より画像引用</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><div class="scroll"><table><thead><tr><th>ツール名</th><th>リンク集</th></tr></thead><tbody><tr><td>Great Expectations</td><td><a href="https://greatexpectations.io/">公式サイト</a>・<a href="https://docs.greatexpectations.io/docs/">Docs</a>・<a href="https://github.com/great-expectations/great_expectations">GitHub</a></td></tr><tr><td>whylogs</td><td><a href="https://whylabs.ai/whylogs">公式サイト</a>・<a href="https://whylogs.readthedocs.io/en/latest/">Docs</a>・<a href="https://github.com/whylabs/whylogs">GitHub</a></td></tr><tr><td>Alibi Detect</td><td><a href="https://docs.seldon.io/projects/alibi-detect/en/stable/">Docs</a>・<a href="https://github.com/SeldonIO/alibi-detect">GitHub</a></td></tr><tr><td>Monte Carlo</td><td><a href="https://www.montecarlodata.com/">公式サイト</a>・<a href="https://docs.getmontecarlo.com/docs">Docs</a></td></tr><tr><td>Evidently AI</td><td><a href="https://www.evidentlyai.com/">公式サイト</a>・<a href="https://docs.evidentlyai.com/">Docs</a>・<a href="https://github.com/evidentlyai/evidently">GitHub</a></td></tr><tr><td>Citadel AI</td><td><a href="https://www.citadel.co.jp/">公式サイト</a></td></tr><tr><td>TensorFlow Data Validation</td><td><a href="https://www.tensorflow.org/tfx/guide/tfdv?hl=ja">Docs</a>・<a href="https://github.com/tensorflow/data-validation">GitHub</a></td></tr><tr><td>Vertex AI Model Monitoring</td><td><a href="https://cloud.google.com/vertex-ai/docs/model-monitoring?hl=ja">Docs</a></td></tr><tr><td>Amazon SageMaker</td><td><a href="https://aws.amazon.com/jp/sagemaker/">公式サイト</a></td></tr></tbody></table></div><h1 id="各課題に対するおすすめツール"><a href="#各課題に対するおすすめツール" class="headerlink" title="各課題に対するおすすめツール"></a>各課題に対するおすすめツール</h1><p>ここでは、いくつかの例を想定して、その場合におけるツールの組わせの例を紹介します。</p><h2 id="まずクイックに監視を開始したい場合"><a href="#まずクイックに監視を開始したい場合" class="headerlink" title="まずクイックに監視を開始したい場合"></a>まずクイックに監視を開始したい場合</h2><p>GCPやAWSのクラウドサービスを用いてMLシステムを運用している場合には、まずは各クラウドサービスに用意されている監視サービス（Vertex AI Model MonitoringやAmazon SageMakerなど）を利用するのが簡単です。この場合にはGUIから利用を開始することができるため、コーディングの必要もなく、素早く監視を開始できます。その上で足りない部分を他のツールで補っていく形が良いかと思います。</p><p>例えば、GCPでMLシステムを運用している場合にInput Metricsを監視したいとなれば、Great ExpectationsやMonte Carloなどを追加で使うことでInput Metricsについても監視できるようになります。</p><p>OSSのツールのみで監視を済ませたい場合には、Evidently AIが良いかと思います。Evidently AI単体で、Input Metrics、Output Metricsの監視が可能で、プリセットも用意されているため、監視を容易に開始することができます。可視化やリアルタイム監視にも対応しているため、監視の結果も簡単に把握することができます。</p><h2 id="監視の設定を細かく指定・作り込みたい場合"><a href="#監視の設定を細かく指定・作り込みたい場合" class="headerlink" title="監視の設定を細かく指定・作り込みたい場合"></a>監視の設定を細かく指定・作り込みたい場合</h2><p>Great Expectations、whylogs、Evidently AI、TensorFlow Data Validationなどが良いかと思います。</p><p>Input Metricsのみの監視で十分な場合には、Great Expectationsやwhylogsがおすすめです。どちらもテストが豊富に用意されており、また、独自のテストを作成することも可能なため、カスタマイズ性は高いかと思います。</p><p>Apache Beam等でパイプラインを組んでいる場合には、TensorFlow Data Validationが良いかと思います。TensorFlow Data Validationはパイプラインの中に組み込むことができるため、パイプラインの中間データの監視や監視結果に応じてパイプライン処理を分岐させるといった使い方が考えられます。</p><p>Evidently AIは上の「手っ取り早く監視を開始したい場合」でもおすすめしましたが、独自のテストやメトリクスの作成や、ドリフト検知の手法をカスタマイズすることなども可能なため、監視設定を細かく設定したい場合にも十分用いることができます。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回は、モデル・データ監視について、監視の必要性、監視項目、ツールの紹介をしました。<br>各ツールの使い方については説明できていませんが、Vertex AI Model MonitoringおよびEvidently AIは、<a href="/articles/20230413a/">Vertex AI Model MonitoringとEvidently AIで運用中のモデル・データを監視する【Input Metrics編】</a>で解説されています。</p><p>ご参考になれば幸いです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/MLOps/">MLOps</category>
      
      <category domain="https://future-architect.github.io/tags/Great-Expectations/">Great Expectations</category>
      
      <category domain="https://future-architect.github.io/tags/whylogs/">whylogs</category>
      
      <category domain="https://future-architect.github.io/tags/Alibi-Detect/">Alibi Detect</category>
      
      <category domain="https://future-architect.github.io/tags/Monte-Carlo/">Monte Carlo</category>
      
      <category domain="https://future-architect.github.io/tags/Evidently-AI/">Evidently AI</category>
      
      <category domain="https://future-architect.github.io/tags/Citadel-AI/">Citadel AI</category>
      
      <category domain="https://future-architect.github.io/tags/TensorFlow-Data-Validation/">TensorFlow Data Validation</category>
      
      <category domain="https://future-architect.github.io/tags/Vertex-AI-Model-Monitoring/">Vertex AI Model Monitoring</category>
      
      <category domain="https://future-architect.github.io/tags/Amazon-SageMaker/">Amazon SageMaker</category>
      
      <category domain="https://future-architect.github.io/tags/AI%E7%9B%A3%E8%A6%96/">AI監視</category>
      
      
      <comments>https://future-architect.github.io/articles/20230412a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RDS Proxy環境下でpg_hint_planを導入する際の注意点</title>
      <link>https://future-architect.github.io/articles/20230411a/</link>
      <guid>https://future-architect.github.io/articles/20230411a/</guid>
      <pubDate>Mon, 10 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;Technogoly Innovation Group 辻です。&lt;/p&gt;
&lt;p&gt;PostgreSQL</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Technogoly Innovation Group 辻です。</p><p>PostgreSQL を使用する際、最適な実行計画が選択されず、クエリの速度が遅くなることがあります。オプティマイザが最適な実行計画を選択できない理由はいくつかありますが、たとえばバッチ処理で大量のデータを投入した直後、統計情報と実データの乖離により、少ないデータに適した計画が大量のデータでは不適切になることがあります。このような場合、PostgreSQL の拡張モジュールである <a href="https://pghintplan.osdn.jp/pg_hint_plan-ja.html"><code>pg_hint_plan</code></a> を用いた SQL ヒントや <a href="https://pgdbmsstats.osdn.jp/pg_dbms_stats-ja.html"><code>pg_dbms_stats</code></a> により実行計画を固定することで、チューニングが可能です。</p><p>私たちのユースケースでは <code>pg_hint_plan</code> を使った SQL ヒントによりクエリをチューニングしましたが、 Aurora PostgreSQL と RDS Proxy を使っている環境下で <code>pg_hint_plan</code> を導入する際にいくつかの問題が発生しました。本記事では <a href="https://aws.amazon.com/jp/rds/aurora/">Amazon Aurora for PostgreSQL</a> と <a href="https://aws.amazon.com/jp/rds/proxy/">Amazon RDS Proxy</a> 環境下で <code>pg_hint_plan</code> を導入した際の問題点、原因とその解決方法について紹介します。</p><p>以下に説明する環境の概要を示します。PostgreSQL のバージョンは 13.7 、<code>pg_hint_plan</code> のバージョンは 1.3.7 です。なお、Aurora インスタンス上に構築したデータベースは <code>sampledb</code> としています。</p><img src="/images/20230411a/image.png" alt="image.png" width="600" height="208" loading="lazy"><h2 id="pg-hint-plan-の導入方法"><a href="#pg-hint-plan-の導入方法" class="headerlink" title="pg_hint_plan の導入方法"></a><code>pg_hint_plan</code> の導入方法</h2><p>導入方法は<a href="https://pghintplan.osdn.jp/pg_hint_plan-ja.html#install">pg_hint_plan 日本語マニュアルのインストール</a>に記載がある手順が基本ですが、Aurora PostgreSQL 環境ではいくつか手順が異なります。以下の手順で <code>pg_hint_plan</code> を利用できるようにしました。</p><p>1.マスターユーザーで <code>sampledb</code> データベースにログインし、<code>pg_hint_plan</code> の拡張を有効にする</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql <span class="operator">-</span>h $&#123;接続先インスタンス名&#125; <span class="operator">-</span>U $&#123;マスターユーザー名&#125; <span class="operator">-</span>d sampledb <span class="operator">-</span>c &quot;CREATE EXTENSION pg_hint_plan;&quot;</span><br></pre></td></tr></table></figure><p>2.DBインスタンスのパラメータグループで以下のパラメータを設定する</p><div class="scroll"><table><thead><tr><th>パラメータ</th><th>設定値</th></tr></thead><tbody><tr><td>pg_hint_plan.enable_hint</td><td>1</td></tr><tr><td>pg_hint_plan.enable_hint_table</td><td>1</td></tr><tr><td>pg_hint_plan.parse_messages</td><td>info</td></tr><tr><td>pg_hint_plan.message_level</td><td>info</td></tr><tr><td>pg_hint_plan.debug_print</td><td>on</td></tr><tr><td>shared_preload_libraries</td><td>pg_stat_statements<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>,pg_hint_plan</td></tr></tbody></table></div><p>なお shared_preload_libraries の設定値の反映はDBインスタンスの再起動が必要です。その他のパラメータは起動したまま順次反映されます。</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><h3 id="発生した事象"><a href="#発生した事象" class="headerlink" title="発生した事象"></a>発生した事象</h3><p><code>pg_hint_plan.enable_hint</code> などのパラメータを <code>1</code> にして有効にした直後から、データベースに接続できなくなる事象が発生しました。リソースモニター上からは接続数が突如10000を超えていました。</p><img src="/images/20230411a/image_2.png" alt="image.png" width="706" height="280" loading="lazy"><p>また、PostgreSQL のサーバーログを確認すると、以下のようなログが大量に出力されていました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2023-03-15 09:01:27 UTC:10.182.44.174(15965):rdsproxyadmin@postgres:[1095]:ERROR:  relation &quot;hint_plan.hints&quot; does not exist at character 21</span><br><span class="line">2023-03-15 09:01:27 UTC:10.182.44.174(15965):rdsproxyadmin@postgres:[1095]:QUERY:  SELECT hints   FROM hint_plan.hints  WHERE norm_query_string = $1    AND ( application_name = $2     OR application_name = &#x27;&#x27; )  ORDER BY application_name DESC</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">2023-03-15 09:17:28 UTC:10.182.46.151(47361):rdsproxyadmin@postgres:[16740]:ERROR:  relation &quot;hint_plan.hints&quot; does not exist at character 21</span><br><span class="line">2023-03-15 09:17:28 UTC:10.182.46.151(47361):rdsproxyadmin@postgres:[16740]:QUERY:  SELECT hints   FROM hint_plan.hints  WHERE norm_query_string = $1    AND ( application_name = $2     OR application_name = &#x27;&#x27; )  ORDER BY application_name DESC</span><br></pre></td></tr></table></figure><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>社内の有識者から、<strong>RDS Proxy が DB インスタンスの <code>postgres</code> データベースにも接続する仕組みになっている</strong>、と教えていただきました。たしかに上記のログからも <code>rdsproxyadmin</code> ユーザーで <code>postgres</code> データベースで実行しているクエリがエラーになっていることがわかります<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p><img src="/images/20230411a/image_3.png" alt="image.png" width="926" height="318" loading="lazy"><h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><p><code>postgres</code> データベースに接続して <code>pg_hint_plan</code> の拡張を有効にします。以下のコマンドを実行します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql <span class="operator">-</span>h $&#123;接続先インスタンス名&#125; <span class="operator">-</span>U $&#123;マスターユーザー名&#125; <span class="operator">-</span>d postgres <span class="operator">-</span>c &quot;CREATE EXTENSION pg_hint_plan;&quot;</span><br></pre></td></tr></table></figure><p>このコマンドを実行後に <code>pg_hint_plan.enable_hint</code> などのパラメータを <code>1</code> などにして機能を有効にしたら、エラーなく <code>pg_hint_plan</code> のヒントが利用できるようになりました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Aurora PostgreSQL と RDS Proxy の環境で <code>pg_hint_plan</code> 拡張を利用する際に遭遇した問題、その原因、そして解決方法を説明しました。ポイントは、<code>postgres</code> データベースにも <code>pg_hint_plan</code> の拡張を適用することが必要である、ということです。Aurora PostgreSQL と RDS Proxy の環境下で SQL ヒントを利用するために <code>pg_hint_plan</code> の拡張を導入する方の参考になれば幸いです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">pg_stat_statements はデフォルトで設定されています</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">実際、このエラーはデータベースに <code>pg_hint_plan</code> の拡張が登録されていないときに発生します。<a href="https://pghintplan.osdn.jp/pg_hint_plan-ja.html#install">https://pghintplan.osdn.jp/pg_hint_plan-ja.html#install</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/RDS/">RDS</category>
      
      <category domain="https://future-architect.github.io/tags/RDSProxy/">RDSProxy</category>
      
      
      <comments>https://future-architect.github.io/articles/20230411a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Terraform v1.4のリリースノートを眺める</title>
      <link>https://future-architect.github.io/articles/20230407a/</link>
      <guid>https://future-architect.github.io/articles/20230407a/</guid>
      <pubDate>Thu, 06 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230407a/top.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;239&quot;&gt;

&lt;p&gt;こんにちは。TIGの伊藤です。&lt;/p&gt;
&lt;p&gt;本記事は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230407a/top.png" alt="" width="700" height="239"><p>こんにちは。TIGの伊藤です。</p><p>本記事は<a href="/articles/20230327a/">Terraform連載2023</a>の9リソース目です。</p><p>Terraformのv1.0が出て約2年弱、ついにv1.4までやってきました。v0.xの時代に比べて、バージョンアップ時の検討内容も比較的少なくなっており、日々継続的に運用する身としては非常に嬉しい限りです。また、機能追加も日々されて、使いやすくなってきてもいます。</p><p>とはいえ、リリースノートを見るたび、「ユースケースがわからない」から斜め読みになって自分の対象外としてしまった、など本来的には使えるものまで見逃していることも私自身は少なくないので、今回はTerraformのv1.4のリリースノートの、<code>ENHANCEMENT</code>のうち、私個人が特に気になった機能を見つつ、ユースケースが考えられるものについて探れればと思います。</p><p>なお、本連載でもいくつかテーマとしている記事がありますので、その内容については割愛します。</p><h2 id="null-resourceに変わるビルトインリソースができた"><a href="#null-resourceに変わるビルトインリソースができた" class="headerlink" title="null_resourceに変わるビルトインリソースができた"></a>null_resourceに変わるビルトインリソースができた</h2><p><code>null_resource</code>は、実行するホストマシンでシェルコマンドを実行したり、するために取り入れられているリソースですが、これがもう少し汎用性が高まる形で<code>terraform_data</code>というビルトインリソースができました。</p><p>ビルトインということもあって、本来の機能からは逸れますが、<code>terraform init</code>コマンドをそれぞれ利用する前提で実行した時にinitにかかる時間や、実際の<code>terraform init</code>の中で行われている内容に違いが現れています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># null_resourceを扱う時</span></span><br><span class="line">$ terraform init</span><br><span class="line"></span><br><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">- Finding latest version of hashicorp/null...</span><br><span class="line">- Installing hashicorp/null v3.2.1...</span><br><span class="line">- Installed hashicorp/null v3.2.1 (signed by HashiCorp)</span><br><span class="line"></span><br><span class="line">Terraform has created a lock file .terraform.lock.hcl to record the provider</span><br><span class="line">selections it made above. Include this file <span class="keyword">in</span> your version control repository</span><br><span class="line">so that Terraform can guarantee to make the same selections by default when</span><br><span class="line">you run <span class="string">&quot;terraform init&quot;</span> <span class="keyword">in</span> the future.</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># terraform_dataを扱う時</span></span><br><span class="line">$ terraform init</span><br><span class="line"></span><br><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">- terraform.io/builtin/terraform is built <span class="keyword">in</span> to Terraform</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>こんな形で、<code>terraform_data</code>を利用するときはProviderを取りにいっていないことがわかります。</p><p>さて、本題に戻り、<code>null_resource</code>と重複する部分が多い機能として<code>terraform_data</code>が出たのか、機能の違いについて考えます。<br>まず、リソースとして利用できるパラメータです。各々何があるかみていきましょう。</p><p><strong><code>null_resource</code></strong></p><div class="scroll"><table><thead><tr><th>パラメータ名</th><th>型</th><th>説明</th></tr></thead><tbody><tr><td>triggers</td><td>map</td><td>Mapで渡している文字列に変更が入ると、リソース内部に記述されているprovisionersを再実行する</td></tr></tbody></table></div><p><strong><code>terraform_data</code></strong></p><div class="scroll"><table><thead><tr><th>パラメータ名</th><th>型</th><th>説明</th></tr></thead><tbody><tr><td>input</td><td>any</td><td>inputパラメータとして渡された値を保存し、outputとして利用する時にapply後に再利用できる</td></tr><tr><td>triggers_replace</td><td>list</td><td>定義された値に変更があったらリソースを再作成する</td></tr></tbody></table></div><p><code>null_resource</code>でいう<code>triggers</code>が<code>terraform_data</code>では<code>list</code>になりました。どちらも、渡されたパラメータに対して変更が入った場合はトリガーとしてリソースが再作成になる、という点ではないので、ここはmapで扱った方が取り回しやすいのか、　listが良いのか分かれてくるように感じました。<br>例えば、<code>terraform_data</code>でLambdaに利用するPythonスクリプトのライブラリを都度更新する形を考えてみます。<br>以下の方に、<code>main.py</code>に変更が入った場合には自動的に<code>terraform_data</code>が再作成され、<code>pip install</code>コマンドが再実行されるようになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;terraform_data&quot;</span> <span class="string">&quot;pip_install&quot;</span> &#123;</span><br><span class="line">  triggers_replace = [filesha256(<span class="string">&quot;lambda_functions/sample/main.py&quot;</span>)]</span><br><span class="line"></span><br><span class="line">  provisioner <span class="string">&quot;local-exec&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">command</span> = <span class="string">&quot;pip install -r lambda_functions/sampple/requirements.txt -t lambda_functions/sampple/site-packages&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="terraform-workspace-selectコマンドにオプションが追加"><a href="#terraform-workspace-selectコマンドにオプションが追加" class="headerlink" title="terraform workspace selectコマンドにオプションが追加"></a><code>terraform workspace select</code>コマンドにオプションが追加</h2><p><code>terraform workspace select</code>に新しいオプションとして<code>-or-create</code>というオプションが使えるようになりました。実際にhelpを実行しても見えるようになりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ terraform workspace select --<span class="built_in">help</span></span><br><span class="line">Usage: terraform [global options] workspace select NAME</span><br><span class="line"></span><br><span class="line">  Select a different Terraform workspace.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">    -or-create=<span class="literal">false</span>    Create the Terraform workspace <span class="keyword">if</span> it doesn<span class="string">&#x27;t exist.</span></span><br></pre></td></tr></table></figure><p>helpを読んでみると、<code>terraform workspace select</code>コマンドで指定したworkspaceがない時にこのオプションを渡すことで作成してくれるようです。<br>例えば、以下のように、<code>dev</code>、<code>stg</code>というworkspaceがあったとします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ terraform workspace list</span><br><span class="line">  default</span><br><span class="line">  dev</span><br><span class="line">* stg</span><br></pre></td></tr></table></figure><p>ここに、さらに<code>prd</code>というworkspaceを選択して、本番環境を作成するとしましょう。現在であれば、<code>terraform workspace select</code>コマンドはないworkspaceを指定するので、エラーになってしまいます。しかし、<code>-or-create</code>オプションがあることで、ない場合でもエラーにならずに、新しいworkspaceが作成されるようになります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># オプションがない時</span></span><br><span class="line">$ terraform workspace select prd</span><br><span class="line"></span><br><span class="line">Workspace <span class="string">&quot;prd&quot;</span> doesn<span class="string">&#x27;t exist.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">You can create this workspace with the &quot;new&quot; subcommand</span></span><br><span class="line"><span class="string">or include the &quot;-or-create&quot; flag with the &quot;select&quot; subcommand.</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># オプションがある時</span></span><br><span class="line">terraform workspace select -or-create prd</span><br><span class="line">Created and switched to workspace <span class="string">&quot;prd&quot;</span>!</span><br><span class="line"></span><br><span class="line">You<span class="string">&#x27;re now on a new, empty workspace. Workspaces isolate their state,</span></span><br><span class="line"><span class="string">so if you run &quot;terraform plan&quot; Terraform will not see any existing state</span></span><br><span class="line"><span class="string">for this configuration.</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workspaceがあるか確認</span></span><br><span class="line">terraform workspace list</span><br><span class="line">  default</span><br><span class="line">  dev</span><br><span class="line">* prd</span><br><span class="line">  stg</span><br></pre></td></tr></table></figure><p>このアップデートのユースケースを考えてみると、上記の例のように、実際に人が実行するパターンではなく、CIでテストする場合に有効かなと思います。</p><p>実際のIssue(<a href="https://github.com/hashicorp/terraform/pull/31633">#31633</a>)には以下のような一文がありました。</p><blockquote><p>We currently get this behavior using the following script: <code>terraform workspace select test || terraform workspace new test</code>; however, this does not work well when attempting to use the official terraform docker image as it does not handle shell scripts by design.</p></blockquote><p>既存で存在するTerraformコンテナにおいては <code>terraform workspace select test || terraform workspace new test</code>が実行できない問題があること、また、CIでworkspaceを新規作成する時に上記コマンドを実行することに不都合が生じる、というケースの解決を目的としているようです。</p><h2 id="terraform-showのメッセージ"><a href="#terraform-showのメッセージ" class="headerlink" title="terraform showのメッセージ"></a><code>terraform show</code>のメッセージ</h2><p><code>teraform show</code>コマンドは、そのStateで管理されているリソースを全て展開して表示してくれるコマンドですが、そのStateで管理しているリソースがない場合もあり得ます。この時に、「なぜ何も表示されないのか」をメッセージとして表示してくれるようになりました。<br>従来では、Stateがそもそもないときはコメントが返ってくるものの、Stateはある状態で中身がないときは何もでませんでした。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Stateがない時</span></span><br><span class="line">$ terraform show</span><br><span class="line">No state.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Stateはある時</span></span><br><span class="line">$ terraform show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 何も出力されない</span></span><br></pre></td></tr></table></figure><p>後者のStateはあって、リソースがないケースについて、メッセージが出るようになりました。　</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform show</span><br><span class="line">The state file is empty. No resources are represented.</span><br></pre></td></tr></table></figure><p>上記は、一度<code>terraform apply</code>コマンドでリソースを作った後に、<code>terraform destroy</code>コマンドでリソースを全て削除した後に実行しました。そのため、表示される文章としても「表示するリソースがない」というものになります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回は、Terraform v1.4のリリース内容の一部をかいつまんで紹介しました。今回はすごく大きな変更、影響があるものは少ないものの、細かい要求に対してフィットしたような印象でした。今回紹介した機能追加も、「あると嬉しい」だったと感じているので、今後もより使いやすくなればと思います。</p><p>その他のリリース内容</p><ul><li><a href="/articles/20230327b/">Terraform 1.4 Update:Private Service Connectを利用したbackend&#x2F;gcsへのアクセス</a></li><li><a href="/articles/20230331a/">Terraformでの機密情報の取り扱い on Google Cloud</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform1-4/">Terraform1.4</category>
      
      
      <comments>https://future-architect.github.io/articles/20230407a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Terraformに入門して1ヶ月経ったので、初心者が気をつけるべきポイントを書いてみる</title>
      <link>https://future-architect.github.io/articles/20230406a/</link>
      <guid>https://future-architect.github.io/articles/20230406a/</guid>
      <pubDate>Wed, 05 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230406a/top.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;286&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230406a/top.png" alt="" width="500" height="286"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="/articles/20230327a/">Terraform連載2023</a> の8リソース目の記事は、Terraform初心者向けの記事です！</p><p>こんにちは、TIG DXユニット所属の大岩と申します。</p><p>去年の7月に新卒で入社し、新卒研修を終えた後、実際のプロジェクトに配属されました。このプロジェクトでは、Terraformを使ってAWSのインフラ構築を自動化する業務に携わりました。これまでTerraformはおろか、インフラもネットワークの知識もほとんど無い未経験の状態からのスタートです。日々インフラの知識を脳に叩き込み、それをコードの形でアウトプットしていく、なんとも目まぐるしい毎日を過ごしております。</p><p>当記事では、初心者がTerraformを扱う際に気をつけるべきポイントについて、自分が1ヶ月間みっちりTerraformを触った経験をもとに紹介します。</p><p>動作環境は以下のとおりです。</p><ul><li>Terraform v1.4.1</li><li>terraform-provider-aws v4.60.0</li><li>Windows 10 Pro 21H2(19044.2728)</li><li>Ubuntu 20.04.6 LTS on WSL2</li></ul><h2 id="気をつけるべきポイント4選"><a href="#気をつけるべきポイント4選" class="headerlink" title="気をつけるべきポイント4選"></a>気をつけるべきポイント4選</h2><ol><li>何よりまずは公式ドキュメントを読もう</li><li><code>terraform</code> コマンドを使いこなそう</li><li>効率よく書こう</li><li>これはバグ？と思ったらIssueを見に行こう</li></ol><h3 id="1-何よりまずは公式ドキュメントを読もう"><a href="#1-何よりまずは公式ドキュメントを読もう" class="headerlink" title="1. 何よりまずは公式ドキュメントを読もう"></a>1. 何よりまずは公式ドキュメントを読もう</h3><p>これはTerraformに限った話ではないのですが、 <strong>まずは公式ドキュメントをしっかり読むこと</strong> を挙げたいと思います。</p><p>Terraformの公式サイトには、プロパイダごとのドキュメントが非常に丁寧に記載されています。各 <code>resource</code> ごとにページが分けられており、使い方や各引数のリファレンス、実装例などが記載されています。</p><p><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs">AWSプロパイダのドキュメント</a></p><h4 id="Terraformのドキュメントはすべて英語"><a href="#Terraformのドキュメントはすべて英語" class="headerlink" title="Terraformのドキュメントはすべて英語"></a>Terraformのドキュメントはすべて英語</h4><p>初心者にとって一番取っ付きにくく感じてしまう原因が言語の壁です。残念ながら、Terraform公式サイトのドキュメントはすべてが英語です。専門用語も多く、機械翻訳に通しても綺麗な日本語に翻訳してくれないため、読む気が削がれがちです。</p><p>ここはもう頑張って英語を読む、というのが解決策になってしまいます。今から紹介する「Note」をしっかり読むことは特に重要です。</p><h4 id="Noteを見逃さない"><a href="#Noteを見逃さない" class="headerlink" title="Noteを見逃さない"></a>Noteを見逃さない</h4><p>Terraformのドキュメントには、至るところに黄背景の「Note」が記載されており、これを見逃すとエラーが発生したり、上手く構築できないことが多くありました。これは私の失敗談をもとに紹介します。</p><p>LambdaにアタッチするIAMロールを用意する際、自分が書いたJSONによるIAMポリシーと、AWSのマネージドポリシーである <code>AWSLambdaVPCAccessExecutionRole</code> ポリシーの両方をアタッチしたい場面がありました。そこで、以下のように記載しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_iam_role&quot;</span> <span class="string">&quot;lambda&quot;</span> &#123;</span><br><span class="line">  name                = <span class="string">&quot;iam_role-lambda&quot;</span></span><br><span class="line">  assume_role_policy  = templatefile(<span class="string">&quot;./lambda_assume_role.json&quot;</span>, &#123;&#125;)</span><br><span class="line">  managed_policy_arns = [<span class="string">&quot;arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole&quot;</span>] <span class="comment"># マネージドポリシーのアタッチ</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_iam_policy&quot;</span> <span class="string">&quot;lambda&quot;</span> &#123;</span><br><span class="line">  name   = <span class="string">&quot;iam_policy-lambda&quot;</span></span><br><span class="line">  policy = templatefile(<span class="string">&quot;./lambda.json&quot;</span>, &#123;&#125;) <span class="comment"># 自分で書いたカスタマー管理ポリシーを読み込む</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_iam_role_policy_attachment&quot;</span> <span class="string">&quot;lambda&quot;</span> &#123; <span class="comment"># カスタマー管理ポリシーのアタッチ</span></span><br><span class="line">  role       = aws_iam_role.lambda.name</span><br><span class="line">  policy_arn = aws_iam_policy.lambda.arn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda側のリソースにIAMロールをアタッチして、 <code>terraform plan</code> および <code>terraform apply</code> を実施します。初回は正常に完了するように見えるのですが、再度 <code>terraform plan</code> をしてみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the</span><br><span class="line">following symbols:</span><br><span class="line">  ~ update in-place</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># module.iam_role_lambda.aws_iam_role.lambda will be updated in-place</span></span><br><span class="line">  ~ resource <span class="string">&quot;aws_iam_role&quot;</span> <span class="string">&quot;lambda&quot;</span> &#123;</span><br><span class="line">        <span class="built_in">id</span>                    = <span class="string">&quot;iam_role-lambda&quot;</span></span><br><span class="line">      ~ managed_policy_arns   = [</span><br><span class="line">          - <span class="string">&quot;arn:aws:iam::xxxxxxxxxxxx:policy/iam_policy-lambda&quot;</span>,</span><br><span class="line">            <span class="comment"># (1 unchanged element hidden)</span></span><br><span class="line">        ]</span><br><span class="line">        name                  = <span class="string">&quot;iam_role-lambda&quot;</span></span><br><span class="line">        tags                  = &#123;&#125;</span><br><span class="line">        <span class="comment"># (8 unchanged attributes hidden)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 0 to add, 1 to change, 0 to destroy.</span><br></pre></td></tr></table></figure><p>本来 <code>terraform apply</code> 直後に <code>terraform plan</code> を実行すると、変更差分無し（<code>No changes</code>）になるべきです。しかし、 <code>managed_policy_arns</code> から、アタッチしたカスタマー管理ポリシーが削除される変更が生じています。</p><p>このまま <code>terraform apply</code> を実行すると、たしかにAWSマネージドポリシーである <code>AWSLambdaVPCAccessExecutionRole</code> のみがアタッチされている状態となってしまいます。</p><img src="/images/20230406a/image.png" alt="" width="1200" height="583" loading="lazy"><p>ここで公式ドキュメントの記述を見てみましょう。<a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_role">aws_iam_role</a>のページ冒頭に、黄色で「NOTE」が書かれているようです。</p><img src="/images/20230406a/image_2.png" alt="" width="750" height="259" loading="lazy"><blockquote><p>NOTE:<br>If you use this resource’s managed_policy_arns argument or inline_policy configuration blocks, this resource will take over exclusive management of the role’s respective policy types (e.g., both policy types if both arguments are used).<br>These arguments are incompatible with other ways of managing a role’s policies, such as aws_iam_policy_attachment, aws_iam_role_policy_attachment, and aws_iam_role_policy. If you attempt to manage a role’s policies by multiple means, you will get resource cycling and&#x2F;or errors.<br><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_role#:~:text=If%20you%20use,and/or%20errors.">引用元</a></p></blockquote><p>DeepLに日本語訳してもらいます。</p><p>「このリソースの <code>managed_policy_arns</code> 引数または <code>inline_policy</code> 設定ブロックを使用すると、このリソースはロールのそれぞれのポリシータイプ（例えば、両方の引数を使用した場合は両方のポリシータイプ）の排他的管理を引き受けます。これらの引数は、<code>aws_iam_policy_attachment</code> 、<code>aws_iam_role_policy_attachment</code> 、<code>aws_iam_role_policy</code> といったロールのポリシーを管理する他の方法と互換性がありません。複数の手段でロールのポリシーを管理しようとすると、リソースの循環やエラーが発生します。」</p><p>確かに今回の例では、 <code>aws_iam_role</code> リソースの引数として <code>managed_policy_arns</code> を設定し <code>AWSLambdaVPCAccessExecutionRole</code> ポリシーをアタッチすると同時に、 <code>aws_iam_role_policy_attachment</code> リソースも記述し、カスタマー管理ポリシーをアタッチしようとしています。まさに、「<strong>複数の手段でロールのポリシーを管理しようとすると、リソースの循環やエラーが発生します。</strong>」という部分に該当します。</p><p>初回apply時は <code>aws_iam_role</code> リソースと <code>aws_iam_role_policy_attachment</code> リソースを両方とも作成するため、2つのポリシーが正常に紐付きます。しかし再度planを実施すると、今度は <code>aws_iam_role</code> リソースの <code>managed_policy_arns</code> を見てカスタマー管理ポリシーは不必要であると判定し、AWSマネージドポリシーのみになるよう修正を加えてしまいます。結果、想定していない変更が生じてしまいます。要するに、ロールのポリシーを管理する方法を1つに絞りなさい、という警告でした。</p><p>今回の場合は、 <code>AWSLambdaVPCAccessExecutionRole</code> をアタッチするのではなく、 <code>managed_policy_arns</code> を削除し、<code>AWSLambdaVPCAccessExecutionRole</code> の中身をカスタマー管理ポリシーの中に記載してしまうことで解決しました。解決するまでに色々なサイトを渡り歩き、1時間ほど無駄にしてしまいました。もっと早く気づいていれば……と後悔しました。</p><p>ポイント: <strong>公式ドキュメントは英語でもしっかり読むべし。特にNOTEに気をつけろ！</strong></p><h3 id="2-terraform-コマンドを使いこなそう"><a href="#2-terraform-コマンドを使いこなそう" class="headerlink" title="2. terraform コマンドを使いこなそう"></a>2. <code>terraform</code> コマンドを使いこなそう</h3><p><code>terraform</code> コマンドでよく使うのは、 <code>plan</code> 、 <code>apply</code> 、 <code>destroy</code> の3つだと思います。それぞれのコマンドには多数のオプションがあることをご存知でしょうか？ここでは、私が1ヶ月間の間に非常にお世話になったコマンド・オプションを3つピックアップして紹介します。</p><h4 id="terraform-apply-target-リソース名"><a href="#terraform-apply-target-リソース名" class="headerlink" title="terraform apply -target=(リソース名)"></a><code>terraform apply -target=(リソース名)</code></h4><p><a href="https://developer.hashicorp.com/terraform/tutorials/state/resource-targeting">https://developer.hashicorp.com/terraform/tutorials/state/resource-targeting</a></p><p><code>plan</code> 、 <code>apply</code> 、 <code>destroy</code> ともに、 <code>-target</code> オプションをつけると、指定したリソースのみを対象として各操作を実施できます。例えば、 <code>terraform apply -target=aws_s3_bucket.hoge</code> コマンドを実施することで、 <code>hoge</code> という名前のS3バケットのみをapplyできます。</p><p>複数のリソースを指定したい場合は、一つずつ <code>-target</code> 引数を追加するか、 <code>&#123;&#125;</code> の中にコンマ区切りで指定します。例えば、 <code>fuga</code> と <code>piyo</code> という名前のS3バケットのみをdestroyしたい場合は、このように記載します。</p><ul><li><code>terraform destroy -target=aws_s3_bucket.fuga -target=aws_s3_bucket.piyo</code></li><li><code>terraform destroy -target=&#123;aws_s3_bucket.fuga,aws_s3_bucket.piyo&#125;</code></li></ul><p>このオプションは開発時に特定のリソースのみを作り直したり、引数を変更して試したいときなどに便利です。しかしTerraform公式では、 <code>target</code> オプションを通常のユースケースで用いることはおすすめしていません。</p><blockquote><p>Targeting individual resources can be useful for troubleshooting errors, but should not be part of your normal workflow.<br><a href="https://developer.hashicorp.com/terraform/tutorials/state/resource-targeting#:~:text=Targeting%20individual%20resources%20can%20be%20useful%20for%20troubleshooting%20errors%2C%20but%20should%20not%20be%20part%20of%20your%20normal%20workflow.">引用元</a></p></blockquote><p>また、Terraform連載3リソース目の宮永さんが、<a href="https://github.com/future-architect/tftarget/releases">tftarget</a>というCLIツールを開発されています。このツールを使うことで、ターゲットの対象とするリソースをチェックを入れるように選択できるため、より簡単に・ミスなく指定できるようになります。こちらの記事もぜひご覧ください！</p><ul><li><a href="https://future-architect.github.io/articles/20230329a/">tftarget:Terraformターゲットを選択的に実行するためのGo製CLIツール</a></li></ul><h4 id="terraform-apply-parallelism-並列実行数"><a href="#terraform-apply-parallelism-並列実行数" class="headerlink" title="terraform apply -parallelism=(並列実行数)"></a><code>terraform apply -parallelism=(並列実行数)</code></h4><p><a href="https://developer.hashicorp.com/terraform/cli/commands/apply#parallelism-n">https://developer.hashicorp.com/terraform/cli/commands/apply#parallelism-n</a></p><p>リソースを構築する際の実行を並列にするオプションです。デフォルトは <code>10</code> のため、この数字を増やすことで、applyやdestroyの速度を上げる事ができます。とはいえ、apply完了までの時間はリソース同士の依存関係やリソースの構築時間にもよるので、よっぽど大量のリソースを構築する場合でなければ、そこまで恩恵は得られないと思います。</p><h4 id="terraform-fmt-recursive"><a href="#terraform-fmt-recursive" class="headerlink" title="terraform fmt -recursive"></a><code>terraform fmt -recursive</code></h4><p><a href="https://developer.hashicorp.com/terraform/cli/commands/fmt#usage">https://developer.hashicorp.com/terraform/cli/commands/fmt#usage</a></p><p><code>fmt</code> コマンドはその名の通り、記述のコード整形を行うコマンドですが、そのオプションに <code>-recursive</code> というものがあります。オプションなしではカレントディレクトリ内のファイルのみを対象としますが、 <code>-recursive</code> をつけることで、サブディレクトリも含め、再帰的にフォーマットを実行してくれます。</p><p>私の携わっていたプロジェクトでは、CI&#x2F;CDにて <code>terraform fmt -recursive -check</code> を実施し、pushされたものが全ファイルフォーマットされていなければエラーとして弾くWorkflowを構築していました。複数人でTerraformを記載する際にコードの一貫性を担保するためにも、ぜひ導入しておきましょう。</p><p>（TerraformとDevOps・CI&#x2F;CDに関しては、<a href="https://future-architect.github.io/articles/20230403a/">Terraform連載6リソース目の川口さんの記事</a>や、<a href="https://future-architect.github.io/articles/20230405a/">7リソース目の前原さんの記事</a>をご覧ください！）</p><p>ポイント: <strong>terraformのコマンドは便利なオプションも知って、開発を効率よく進めよう！</strong></p><h3 id="3-効率よく書こう"><a href="#3-効率よく書こう" class="headerlink" title="3. 効率よく書こう"></a>3. 効率よく書こう</h3><p>Terraformの記法として、 <code>for_each</code> や <code>count</code> を利用して、複数のリソースを1回の記述で作成できます。</p><p>私がプロジェクトで初めて提出したPRは、「利用するサービス分のVPCエンドポイントを構築する」TerraformのPRでした。私は愚直にも一つ一つ丁寧に <code>aws_vpc_endpoint</code> リソースをサービス分作成しており、レビュアーである<a href="https://future-architect.github.io/authors/%E5%89%8D%E5%8E%9F%E5%BF%9C%E5%85%89/">ゆるふわエンジニア前原さん</a>から「 <code>for_each</code> を使おうね！」と諭されてしまいました。</p><p>具体例を見てみましょう。今回は、S3とSecrets ManagerのVPC Endpointに接続するための、Interface型のVPC Endpointを構築します。</p><h4 id="for-each-を使わない例"><a href="#for-each-を使わない例" class="headerlink" title="for_each を使わない例"></a><code>for_each</code> を使わない例</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_vpc_endpoint&quot;</span> <span class="string">&quot;s3&quot;</span> &#123;</span><br><span class="line">  vpc_id             = aws_vpc.api_service.id</span><br><span class="line">  service_name       = <span class="string">&quot;com.amazonaws.ap-northeast-1.s3&quot;</span></span><br><span class="line">  vpc_endpoint_type  = <span class="string">&quot;Interface&quot;</span></span><br><span class="line">  subnet_ids         = local.subnet_ids.private <span class="comment"># local変数に記載</span></span><br><span class="line">  security_group_ids = [</span><br><span class="line">    aws_security_group.vpc_endpoint.id, <span class="comment"># Security Groupの記載は割愛します</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_vpc_endpoint&quot;</span> <span class="string">&quot;secrets_manager&quot;</span> &#123;</span><br><span class="line">  vpc_id             = aws_vpc.api_service.id</span><br><span class="line">  service_name       = <span class="string">&quot;com.amazonaws.ap-northeast-1.secretsmanager&quot;</span></span><br><span class="line">  vpc_endpoint_type  = <span class="string">&quot;Interface&quot;</span></span><br><span class="line">  subnet_ids         = local.subnet_ids.private <span class="comment"># local変数に記載</span></span><br><span class="line">  security_group_ids = [</span><br><span class="line">    aws_security_group.vpc_endpoint.id, <span class="comment"># Security Groupの記載は割愛します</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>確かに2つぐらいでしたらそこまで煩雑ではないのですが、10個・20個というレベルになると大分厳しいです。</p><h4 id="for-each-を使う例"><a href="#for-each-を使う例" class="headerlink" title="for_each を使う例"></a><code>for_each</code> を使う例</h4><p>まずは、Local変数(Local Value)に使うサービスを、 <code>map</code> の形式で列挙しておきます。Keyにはそのサービスの識別子となる文字列を、Valueにはサービス名を記載します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  vpc_endpoints = &#123;</span><br><span class="line">    <span class="string">&quot;s3&quot;</span>  = <span class="string">&quot;com.amazonaws.ap-northeast-1.s3&quot;</span></span><br><span class="line">    <span class="string">&quot;asm&quot;</span> = <span class="string">&quot;com.amazonaws.ap-northeast-1.secretsmanager&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを <code>for_each</code> を使って展開します。KeyとValueは、それぞれ <code>each.key</code> と <code>each.value</code> で取得できます。ここでは、 <code>service_name</code> に、Valueとして格納したサービス名を指定したいため、 <code>each.value</code> を指定しています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_vpc_endpoint&quot;</span> <span class="string">&quot;vpc_endpoints&quot;</span> &#123;</span><br><span class="line">  for_each = local.vpc_endpoints</span><br><span class="line"></span><br><span class="line">  vpc_id             = aws_vpc.api_service.id</span><br><span class="line">  service_name       = each.value</span><br><span class="line">  vpc_endpoint_type  = <span class="string">&quot;Interface&quot;</span></span><br><span class="line">  subnet_ids         = local.subnet_ids.private <span class="comment"># local変数に記載</span></span><br><span class="line">  security_group_ids = [</span><br><span class="line">    aws_security_group.vpc_endpoint.id, <span class="comment"># Security Groupの記載は割愛します</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これまで2つリソースを記載していた部分が、1回の記述のみで済みました。このように、繰り返し同じものを作成する場合などは、Local変数に値を切り出して <code>for_each</code> を利用して効率よく記載することで、単純なミスや視認性の悪化を防ぐなどのメリットがあります。</p><p>ポイント: <strong>エンジニアなら楽すべし！ <code>for_each</code> を使いこなそう！</strong></p><h3 id="4-これはバグ？と思ったらIssueを見に行こう"><a href="#4-これはバグ？と思ったらIssueを見に行こう" class="headerlink" title="4. これはバグ？と思ったらIssueを見に行こう"></a>4. これはバグ？と思ったらIssueを見に行こう</h3><p>Terraform本体や、各サービスのプロバイダーはOSSとして公開されています。日々世界中の有志の開発者たちによって、各種クラウド環境のアップデートへの追従や、コードの改善が繰り返されています。</p><p>移り変わりが激しい業界であるからこそ、最新仕様への追従の遅れや、バグを踏み抜いて動作しないという場面に多く出くわします。正しく書いたことは間違いないのに正常に動作しない、謎のエラーが出るときは、一度GitHub上のIssueページを覗いてみましょう。以下、自分の経験を記載します。</p><p>AWS Pinpointを構築するリソースを作成し、apply・動作確認が完了したため、destroyしました。すると、Pinpoint自体は削除されているものの、Terraformは以下のエラーが出て終了しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: deleting Pinpoint Application (xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx): %!s(&lt;nil&gt;)</span><br></pre></td></tr></table></figure><p>普段は <code>%!s(&lt;nil&gt;)</code> の部分にエラーメッセージが表示されるはずですが、このメッセージでは <code>nil</code> と書かれています。Terraform自体はGolangで書かれているので、 <code>nil</code> はメッセージとなる文字列が正常に渡されなかったと推測できます。つまりこれはバグであると判断しました。</p><p>terraform-provider-aws のGitHubにアクセスし、Issueの検索から<a href="https://github.com/hashicorp/terraform-provider-aws/issues?q=pinpoint+nil">「pinpoint nil」で検索します</a>。すると……ヒットしました！すでにCloseされていましたが、<a href="https://github.com/hashicorp/terraform-provider-aws/issues/29341">「[Bug]: Unable to delete Application PinPoint, destroy command error」</a> というタイトルのIssueを発見しました。</p><img src="/images/20230406a/image_3.png" alt="image.png" width="1200" height="664" loading="lazy"><p>一番下を見ると、<a href="https://github.com/hashicorp/terraform-provider-aws/pull/30101">MergedとなっているPR</a>があることが分かります。</p><img src="/images/20230406a/image_4.png" alt="image.png" width="1077" height="160" loading="lazy"><p>さらにその先には、<code>v4.60.0</code> で修正がリリースされるとの文言がありました。記事執筆時点で2週間前となっていますが、このバグを踏んで調べた時点ではまだ数日しか経っていない、修正したての出来事でした。</p><blockquote><p>This functionality has been released in v4.60.0 of the Terraform AWS Provider.</p></blockquote><img src="/images/20230406a/image_5.png" alt="" width="1155" height="298" loading="lazy"><p>すぐにterraform-provider-awsのバージョンをv4.60.0に上げ、<code>terraform init -upgrade</code> を実施し、apply・destroyを実施すると、今度はエラーを出さずに正常終了しました。</p><p>実はその前にも<a href="https://github.com/hashicorp/terraform-provider-aws/issues/29236">Security Groupの削除中にプログラムがクラッシュするバグ</a>にあたり、その時もIssueを見つけ、バージョンアップで解決したことがありました。世界中の開発者がバグを報告し、リアルタイムに修正していく様子を見ることができるOSSの強みを自分の開発にも取り入れていけば、バグの解決のために数時間をネットサーフィンに費やす失態を無くすことができるでしょう。</p><p>また、もし起票されていないバグを発見したら、自分でIssueを起票しましょう！</p><p>ポイント: <strong>バグを踏んだらまずIssueを見よ！世界中の開発者たちに感謝しつつ、最新情報をキャッチせよ！</strong></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>いかがだったでしょうか。ほとんどTerraformに限らない話だったかもしれませんが、この記事が少しでも私と同じTerraform初心者のお役に立つことができれば幸いです。<br>私もまだまだ勉強中の身であるので、間違ったことを言っているようでしたら、優しくご指摘ください！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      
      <comments>https://future-architect.github.io/articles/20230406a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Terraform とGitHub Actions</title>
      <link>https://future-architect.github.io/articles/20230405a/</link>
      <guid>https://future-architect.github.io/articles/20230405a/</guid>
      <pubDate>Tue, 04 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20230327a/">Terraform連載</a>の7リソース目です。</p><p>こんにちは。TIG DX チームのゆるふわエンジニアの前原です。</p><p>今までは、GitLab でTerraform を利用する機会が多かったのですが、今回は、GitHub Actions を利用することになりました。</p><p>そこで実施した内容をこの記事に書いていきたいと思います。</p><h1 id="GitHub-Actions-の設定"><a href="#GitHub-Actions-の設定" class="headerlink" title="GitHub Actions の設定"></a>GitHub Actions の設定</h1><p>GitHub Actions などを利用してAWS リソースを操作する場合にクレデンシャルを利用してきた方が多いのではないでしょうか。<br>クレデンシャル利用は便利ですが、何かとリスクを抱えています。<br>そこで一時的なトークンを受け取りGitHub Actions を実行する環境を作りたいと思います。</p><h2 id="OIDC-プロバイダの設定"><a href="#OIDC-プロバイダの設定" class="headerlink" title="OIDC プロバイダの設定"></a>OIDC プロバイダの設定</h2><p>OIDC プロバイダの追加をTerraform で行います。</p><ul><li>プロバイダタイプ: OpenID Connect</li><li>プロバイダ URL: <a href="https://token.actions.githubusercontent.com/">https://token.actions.githubusercontent.com</a></li><li>対象者: sts.amazonaws.com</li></ul><p>参考: <a href="https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services">Configuring OpenID Connect in Amazon Web Services</a></p><figure class="highlight sh"><figcaption><span>openid_connect_provider.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data <span class="string">&quot;http&quot;</span> <span class="string">&quot;github_actions_openid_configuration&quot;</span> &#123;</span><br><span class="line">  url = <span class="string">&quot;https://token.actions.githubusercontent.com/.well-known/openid-configuration&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">&quot;tls_certificate&quot;</span> <span class="string">&quot;github_actions&quot;</span> &#123;</span><br><span class="line">  url = jsondecode(data.http.github_actions_openid_configuration.body).jwks_uri</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_iam_openid_connect_provider&quot;</span> <span class="string">&quot;github_actions&quot;</span> &#123;</span><br><span class="line">  url             = <span class="string">&quot;https://token.actions.githubusercontent.com&quot;</span></span><br><span class="line">  client_id_list  = [<span class="string">&quot;sts.amazonaws.com&quot;</span>]</span><br><span class="line">  thumbprint_list = [data.tls_certificate.github_actions.certificates[0].sha1_fingerprint]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Terraform 実行後、IAM コンソールにアクセスします。<br>ID プロバイダ設定をクリックし、追加されていることを確認します。</p><img src="/images/20230405a/image.png" alt="image.png" width="1200" height="659" loading="lazy"><h2 id="IAM-Role-追加"><a href="#IAM-Role-追加" class="headerlink" title="IAM Role 追加"></a>IAM Role 追加</h2><p>次にGitHub Actions に割り当てるIAM Role を作成します。<br>ここではサンプル的に作成しておりますので、管理者権限を付与しています。<br>実際には、運用に合わせてポリシの設定をして頂ければと思います。</p><figure class="highlight sh"><figcaption><span>module_iam_github_actions.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module <span class="string">&quot;iam_role_github_actions&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;&#123;任意の場所指定&#125;/modules/github_actions&quot;</span></span><br><span class="line"></span><br><span class="line">  project_name = local.project_name</span><br><span class="line">  account_id   = data.aws_caller_identity.current.account_id</span><br><span class="line">  github_org   = local.github_org</span><br><span class="line">  github_repo  = local.github_repo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">variable <span class="string">&quot;project_name&quot;</span> &#123;&#125;</span><br><span class="line">variable <span class="string">&quot;account_id&quot;</span> &#123;&#125;</span><br><span class="line">variable <span class="string">&quot;github_org&quot;</span> &#123;&#125;</span><br><span class="line">variable <span class="string">&quot;github_repo&quot;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_iam_role&quot;</span> <span class="string">&quot;github_actions&quot;</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;var.project_name&#125;</span>-github-actions&quot;</span></span><br><span class="line">  assume_role_policy = templatefile(<span class="string">&quot;&#123;任意の場所指定&#125;/assume_role.json&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      account_id  = var.account_id,</span><br><span class="line">      github_org  = var.github_org,</span><br><span class="line">      github_repo = var.github_repo</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_iam_policy&quot;</span> <span class="string">&quot;github_actions&quot;</span> &#123;</span><br><span class="line">  name   = <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;var.project_name&#125;</span>-github-actions&quot;</span></span><br><span class="line">  policy = templatefile(<span class="string">&quot;&#123;任意の場所指定&#125;/administrator.json&quot;</span>, &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_iam_role_policy_attachment&quot;</span> <span class="string">&quot;github_actions&quot;</span> &#123;</span><br><span class="line">  role       = aws_iam_role.github_actions.name</span><br><span class="line">  policy_arn = aws_iam_policy.github_actions.arn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>assume_role.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Statement&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Principal&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Federated&quot;</span>: <span class="string">&quot;arn:aws:iam::<span class="variable">$&#123;account_id&#125;</span>:oidc-provider/token.actions.githubusercontent.com&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;sts:AssumeRoleWithWebIdentity&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Condition&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;StringLike&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;token.actions.githubusercontent.com:sub&quot;</span>: <span class="string">&quot;repo:<span class="variable">$&#123;github_org&#125;</span>/<span class="variable">$&#123;github_repo&#125;</span>:*&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>administrator.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Statement&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">          <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">          <span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="シークレット変数の設定"><a href="#シークレット変数の設定" class="headerlink" title="シークレット変数の設定"></a>シークレット変数の設定</h2><p>GitHub の[Settings] &gt; [Secrets and variables]からシークレット変数を設定します。</p><ul><li>Name: AWS_IAM_ROLE_ARN</li><li>Secret: {IAM_ROLE_ARN}</li></ul><img src="/images/20230405a/image_2.png" alt="image.png" width="1200" height="658" loading="lazy"><p>これで設定が完了です。</p><h1 id="Terraform-実行用のワークフロー"><a href="#Terraform-実行用のワークフロー" class="headerlink" title="Terraform 実行用のワークフロー"></a>Terraform 実行用のワークフロー</h1><p>ここでは実際にワークフローを作成していきます。<br>以下のディレクトリ構成とします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">terraform</span><br><span class="line">├── network</span><br><span class="line">│   ├── backend.tf</span><br><span class="line">│   ├── local.tf</span><br><span class="line">│   ├── hoge.tf</span><br><span class="line">│   └── versions.tf</span><br><span class="line">└── main</span><br><span class="line">    ├── backend.tf</span><br><span class="line">    ├── local.tf</span><br><span class="line">    ├── fuga.tf</span><br><span class="line">    └── versions.tf</span><br></pre></td></tr></table></figure><p>以下にサンプルコードを記載します。</p><figure class="highlight yaml"><figcaption><span>workflow_tf.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">workflow</span> <span class="string">terraform</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">terraform/*</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TF_VERSION:</span> <span class="number">1.4</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">AWS_REGION:</span> <span class="string">ap-northeast-1</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">terraform:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">terraform</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">workdir:</span> [<span class="string">terraform/main</span>, <span class="string">terraform/network</span>]</span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">id-token:</span> <span class="string">write</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">read</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">aws-actions/configure-aws-credentials@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">role-to-assume:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.AWS_IAM_ROLE_ARN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">aws-region:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.AWS_REGION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">terraform</span> <span class="string">setup</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">hashicorp/setup-terraform@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">terraform_version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.TF_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">init</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Terraform</span> <span class="string">fmt</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">fmt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plan:</span> <span class="string">Terraform</span> <span class="string">plan</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">plan</span> <span class="string">-no-color</span></span><br></pre></td></tr></table></figure><p>上記のワークフローは、Terraform validate, init, plan までを実行するワークフローです。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">push:</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">terraform/*</span></span><br></pre></td></tr></table></figure><p>Push 時に<code>terraform/*</code>でファイルの変更があった際にワークフローが実行されます。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">strategy:</span></span><br><span class="line">  <span class="attr">matrix:</span></span><br><span class="line">    <span class="attr">workdir:</span> [<span class="string">terraform/main</span>, <span class="string">terraform/network</span>]</span><br></pre></td></tr></table></figure><p><code>workdir</code>は、実行したいディレクトリを指定します。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">aws-actions/configure-aws-credentials@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">role-to-assume:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.AWS_IAM_ROLE_ARN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">aws-region:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.AWS_REGION</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p><code>aws-actions/configure-aws-credentials</code>を利用し、クレデンシャルを取得します。<br>先ほど設定したシークレット変数を<code>secrets.AWS_IAM_ROLE_ARN</code>で取得します。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">terraform</span> <span class="string">setup</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">hashicorp/setup-terraform@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">terraform_version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.TF_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">init</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Terraform</span> <span class="string">fmt</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">fmt</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">plan:</span> <span class="string">Terraform</span> <span class="string">plan</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">plan</span> <span class="string">-no-color</span></span><br></pre></td></tr></table></figure><p>Terraform を実行する際には、<a href="https://github.com/hashicorp/setup-terraform">setup-terraform</a>を利用することで容易に実行することができます。<br>ここでは、Terraform の実行内容を簡略化して記載しています。</p><h2 id="ワークフロー手動実行"><a href="#ワークフロー手動実行" class="headerlink" title="ワークフロー手動実行"></a>ワークフロー手動実行</h2><p><code>Terraform apply</code>を自動実行するのは怖いと思う方はいると思います。<br>そこで、手動で実行するための方法を記載したいと思います。</p><figure class="highlight yaml"><figcaption><span>workflow_tf.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">network:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">        <span class="attr">default:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">description:</span> <span class="number">1.</span><span class="string">network</span></span><br><span class="line">      <span class="attr">main:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">        <span class="attr">default:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">description:</span> <span class="number">2.</span><span class="string">main</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TF_VERSION:</span> <span class="number">1.4</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">AWS_REGION:</span> <span class="string">ap-northeast-1</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">network:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">inputs.api_service_network</span> <span class="string">==</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api_service_network</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">workdir:</span> [<span class="string">terraform/network</span>]</span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">id-token:</span> <span class="string">write</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">read</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">aws-actions/configure-aws-credentials@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">role-to-assume:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.AWS_IAM_ROLE_ARN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">aws-region:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.AWS_REGION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">terraform</span> <span class="string">setup</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">hashicorp/setup-terraform@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">terraform_version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.TF_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">init</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plan:</span> <span class="string">Terraform</span> <span class="string">plan</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">plan</span> <span class="string">-no-color</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plan:</span> <span class="string">Terraform</span> <span class="string">apply</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">apply</span> <span class="string">-auto-approve</span> <span class="string">-no-color</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">inputs.main</span> <span class="string">==</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">main</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">network</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">workdir:</span> [<span class="string">terraform/api_services/main</span>]</span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">id-token:</span> <span class="string">write</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">read</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">aws-actions/configure-aws-credentials@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">role-to-assume:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.AWS_IAM_ROLE_ARN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">aws-region:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.AWS_REGION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">terraform</span> <span class="string">setup</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">hashicorp/setup-terraform@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">terraform_version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.TF_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">init</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plan:</span> <span class="string">Terraform</span> <span class="string">plan</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">plan</span> <span class="string">-no-color</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plan:</span> <span class="string">Terraform</span> <span class="string">apply</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">apply</span> <span class="string">-auto-approve</span> <span class="string">-no-color</span></span><br></pre></td></tr></table></figure><p>手動実行する際は、<a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows">workflow_dispatch</a>を利用します。<br>Input タイプは、string、choice、boolean、environment　などが存在します。</p><ul><li>参考: <a href="https://docs.github.com/en/actions/learn-github-actions/contexts#inputs-context">GitHub Actions: Input types for manual workflows</a></li></ul><p>ワークフローを手動実行する際に<code>env</code>を指定したい場合は、<code>environment</code>を利用します。<br>利用する際は、事前に[Settings] &gt; [Environments]で設定を行います。</p><img src="/images/20230405a/image_3.png" alt="image.png" width="1200" height="658" loading="lazy"><p>注意点として手動実行は、デフォルトブランチでのみ実行可能です。<br>ただし、CLI を利用することでデフォルトブランチ以外でも実行が可能です。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">  <span class="attr">default:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">description:</span> <span class="number">1.</span><span class="string">network</span></span><br><span class="line"><span class="attr">main:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">  <span class="attr">default:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">description:</span> <span class="number">2.</span><span class="string">main</span></span><br></pre></td></tr></table></figure><p>タイプを<code>boolean</code>とすることでチェックボックスで実行するジョブを選択できます。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">main:</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">inputs.main</span> <span class="string">==</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">needs:</span> <span class="string">network</span></span><br></pre></td></tr></table></figure><p><code>if: inputs.main == true</code>で手動実行時にチェックを入れた場合は、実行するという条件にしています。<br>また、<code>needs: network</code>とすることで、<code>network</code>ジョブが実行されていないとスキップする条件としています。<br>この設定をする理由は、<code>network</code>ディレクトリ内のリソースを作成しないと<code>main</code>ディレクトリ内のリソースを作成できないと言った依存関係が発生している場合に利用するケースです。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>GitHub Actions を利用することでTerraform の実行環境を容易に作成できるかと思います。</p><p>また、ここで説明した内容以外にもたくさんの方法があるので色々試して頂ければ幸いです。</p><p>ありがとうございました！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/CI-CD/">CI/CD</category>
      
      <category domain="https://future-architect.github.io/tags/GitHubActions/">GitHubActions</category>
      
      
      <comments>https://future-architect.github.io/articles/20230405a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ChatGPTなどの大規模言語モデルが労働市場に与える影響の分析</title>
      <link>https://future-architect.github.io/articles/20230404a/</link>
      <guid>https://future-architect.github.io/articles/20230404a/</guid>
      <pubDate>Mon, 03 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニットの村上です。<br>世界中で話題となっているChatGPTですが、その開発元であるOpenAIから大規模言語モデル(LLM)が労働市場に与える影響について分析した論文が公開されました。</p><p><a href="https://arxiv.org/abs/2303.10130">https://arxiv.org/abs/2303.10130</a></p><p>この論文ではLLMの影響度を評価する方法を提案し、それによって評価した結果を分析しています。</p><p>今回はこの論文で述べられたLLMの影響についてご紹介したいと思います。これから世界の労働市場がAIによってどのように変わっていくのか、自分は一人の労働者としてどのように動くべきかを考える参考なれば幸いです。</p><h1 id="主要な結果"><a href="#主要な結果" class="headerlink" title="主要な結果"></a>主要な結果</h1><p>先に主要な結果を掲載します。<br>以下の表はLLMの影響を受けない可能性の高い職種です。逆にこれら以外の職種は少なからず影響を受けると考えられます。</p><img src="/images/20230404a/image.png" alt="" width="737" height="1004" loading="lazy"><p>影響を職種全体で集計すると以下のようになります。</p><ul><li>米国の労働者の約80%がLLMの導入により少なくとも10%の業務に影響を受ける可能性がある</li><li>約19%の労働者は少なくとも50%の業務に影響を受ける可能性がある</li><li>高所得の職種ほどLLMの機能やLLMを搭載したプロダクトに触れる機会が多くなる可能性がある</li><li>米国の労働者の全タスクの約15%が同じ品質で大幅に早く完了できる可能性がある。LLMのさらに上に構築したシステムを用いる場合はこの割合が47%~56%に増加する</li></ul><h1 id="LLMの影響の評価方法"><a href="#LLMの影響の評価方法" class="headerlink" title="LLMの影響の評価方法"></a>LLMの影響の評価方法</h1><p>本論文では評価方法の提案が主要な内容の一つになります。前提とする条件から順に見ていきたいと思います。</p><h2 id="用語の定義"><a href="#用語の定義" class="headerlink" title="用語の定義"></a>用語の定義</h2><ul><li>論文では <strong>「品質を保った状態でタスクを完了するのにかかる時間を50%削減できる可能性があること」</strong> を <strong>「LLMの影響がある」</strong> と定義しています。実際にはもう少し削減率が減少すると考えて大きめの値で設定したという背景があるようです。</li><li><strong>「品質を保った状態」</strong> とは、<strong>「人間が自力で完成させたのか、LLMの支援を受けて完成させたのか、レビューする人が見わけがつかない」</strong> ことを指します。</li></ul><h2 id="想定するLLMの仕様"><a href="#想定するLLMの仕様" class="headerlink" title="想定するLLMの仕様"></a>想定するLLMの仕様</h2><ul><li>テキストの入力と出力が存在し、入力には最大2000語を与えることができる</li><li>モデルの獲得している知識には直近1年以内のものが存在しないが、入力に直近1年以内の情報を含めることでそれを考慮した処理を行うことはできる</li></ul><h2 id="想定する労働者"><a href="#想定する労働者" class="headerlink" title="想定する労働者"></a>想定する労働者</h2><ul><li>与えられたタスクを完了するために必要なスキルを平均的なレベルで習得済み</li><li>LLMとタスクで必要とされるあらゆる道具を利用することができる</li><li>一般的なノートパソコンに備わっているマイクやスピーカーなどのハードウェアを利用することができる</li><li>上記以外の物理的な道具は用いることができない</li></ul><h2 id="タスクのカテゴリ分け"><a href="#タスクのカテゴリ分け" class="headerlink" title="タスクのカテゴリ分け"></a>タスクのカテゴリ分け</h2><p>LLMとそれに付随するシステムを仮定し、LLMの影響を受けるかどうかで分類を行います。</p><div class="scroll"><table><thead><tr><th>カテゴリ</th><th>概要</th><th>タスクの例</th></tr></thead><tbody><tr><td>E1</td><td>LLMのみで影響を与える</td><td>仕様に沿ったソースコードの編集や生成、テキスト翻訳や文章の要約など</td></tr><tr><td>E2</td><td>LLMだけでは影響を与えることはないが、LLMを搭載したアプリケーションなら影響を与える</td><td>プレゼンテーション資料の作成、データベース管理など</td></tr><tr><td>E3</td><td>LLMに加えて画像の閲覧、説明、生成ができるシステムを利用可能であれば影響を与えることができる</td><td>PDFからテキストを読み取る、指示に従って画像の編集や生成を行うなど</td></tr><tr><td>E0</td><td>上記のいずれのカテゴリにも該当しないタスク。どのカテゴリか迷った場合はこれになる</td><td>ハードウェアの修理や清掃、雇用の決定や試験の採点など</td></tr></tbody></table></div><p>E0の例について補足します。雇用の決定や試験の採点など、人間の人生を大きく左右するようなタスクには影響があってはならないという考えが導入されています。LLMはあくまで推奨にとどまり、最終的な決定を行うのは人間であるべきという考え方です。</p><h2 id="評価方法"><a href="#評価方法" class="headerlink" title="評価方法"></a>評価方法</h2><p>OpenAIの誇る人間のアノテーターと分類器としてのGPT-4を用意し、それぞれにE0~E3のカテゴリ分けを行ってもらい、人間とGPT-4の分類結果をもとに影響の有無を分析していきます。人間だけのカテゴリ分けではその作業者の主観が少なからず反映されてしまうため、GPT-4のカテゴリ分けも合わせて考慮します。</p><h2 id="データセット"><a href="#データセット" class="headerlink" title="データセット"></a>データセット</h2><p>米国の職業とタスクのデータを用います。データソースはO*NETデータベースです。このデータセットには職業に関する情報とその職業のあるタスクを完了するための包括的な行動が含まれています。<br>また、職業データに加えて賃金、雇用、人口統計のデータも利用します。このデータセットには各職の労働者数や職で必要とされる教育、OJTなどの情報が含まれています。</p><h1 id="LLMによる影響の分析結果"><a href="#LLMによる影響の分析結果" class="headerlink" title="LLMによる影響の分析結果"></a>LLMによる影響の分析結果</h1><p>この章ではLLMやそれを搭載したアプリケーションによる影響の分析結果を解説します。</p><h2 id="人間とGPT-4の評価結果の比較"><a href="#人間とGPT-4の評価結果の比較" class="headerlink" title="人間とGPT-4の評価結果の比較"></a>人間とGPT-4の評価結果の比較</h2><p>人間とGPT-4の評価結果を比較してみると、両者で高い一致率を示しました。</p><img src="/images/20230404a/image_2.png" alt="" width="750" height="340" loading="lazy"><p>表の<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.229ex" height="1.486ex" role="img" focusable="false" viewBox="0 -441 543 657"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g></g></g></svg></mjx-container>の列の説明は以下です。</p><div class="scroll"><table><thead><tr><th><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.229ex" height="1.486ex" role="img" focusable="false" viewBox="0 -441 543 657"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g></g></g></svg></mjx-container></th><th>説明</th></tr></thead><tbody><tr><td><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container></td><td>E1だけの評価</td></tr><tr><td><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 566 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container></td><td>E1に加えてE2を半分考慮した評価</td></tr><tr><td><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="1.066ex" height="2.054ex" role="img" focusable="false" viewBox="0 -704 471 908"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D701" d="M296 643Q298 704 324 704Q342 704 342 687Q342 682 339 664T336 633Q336 623 337 618T338 611Q339 612 341 612Q343 614 354 616T374 618L384 619H394Q471 619 471 586Q467 548 386 546H372Q338 546 320 564L311 558Q235 506 175 398T114 190Q114 171 116 155T125 127T137 104T153 86T171 72T192 61T213 53T235 46T256 39L322 16Q389 -10 389 -80Q389 -119 364 -154T300 -202Q292 -204 274 -204Q247 -204 225 -196Q210 -192 193 -182T172 -167Q167 -159 173 -148Q180 -139 191 -139Q195 -139 221 -153T283 -168Q298 -166 310 -152T322 -117Q322 -91 302 -75T250 -51T183 -29T116 4T65 62T44 160Q44 287 121 410T293 590L302 595Q296 613 296 643Z"></path></g></g></g></svg></mjx-container></td><td>E1とE2の両方を考慮した評価</td></tr></tbody></table></div><p>Agreementの項目に注目すると、人間とGPT-4の評価の一致率が高いことが分かります。<br>ピアソンの相関係数も正の値を示しているため、全体的な傾向として人間とGPT-4が同じような評価をしていることが分かります。</p><h2 id="賃金と影響の関係"><a href="#賃金と影響の関係" class="headerlink" title="賃金と影響の関係"></a>賃金と影響の関係</h2><p>賃金と影響の関係は以下のような結果になりました。</p><img src="/images/20230404a/賃金とLLM影響度の関係.png" alt="賃金とLLM影響度の関係" width="1200" height="495" loading="lazy"><p>横軸が賃金(logスケール)、縦軸が影響度です。<br>人間、GPT-4ともに賃金が高くなるにつれて影響が大きいと判断しています。</p><h2 id="ジョブゾーンごとの影響分析"><a href="#ジョブゾーンごとの影響分析" class="headerlink" title="ジョブゾーンごとの影響分析"></a>ジョブゾーンごとの影響分析</h2><p>ジョブゾーンとは以下の観点に従って職種をグループ分けしたものになります。</p><ul><li>その職業に就くために必要な教育レベル</li><li>その職業に就くために必要な経験</li><li>その仕事をこなせるようになるために必要なOJTの量</li></ul><p>O*NETデータセットではジョブゾーンが5段階に分類されており、ジョブゾーン1からジョブゾーン5にかけて上記3点の必要量が増加します。つまり、ジョブゾーン5が最も求められる知識や能力が高く、参入障壁の高い職業であるということになります。</p><img src="/images/20230404a/image_3.png" alt="" width="1200" height="610" loading="lazy"><p>こちらのグラフはジョブゾーンごとに見た影響度を示しています。縦軸がジョブゾーンごとの職業の割合、横軸が影響を受けるタスクの割合の最小値です。つまり、右に行くほどLLMの影響を受けるタスクの割合が多いことになります。</p><p>基本的にジョブゾーンの数値が大きくなるほど（参入障壁の高い職種ほど）影響を受けるということになりますが、ジョブゾーン5はジョブゾーン4よりも影響が小さいという結果になりました。</p><h2 id="特に影響を受ける職業の分析"><a href="#特に影響を受ける職業の分析" class="headerlink" title="特に影響を受ける職業の分析"></a>特に影響を受ける職業の分析</h2><p>各カテゴリで特に影響を受ける職業のリストは以下になります。</p><img src="/images/20230404a/特にLLM影響を受ける職業リスト.png" alt="特にLLM影響を受ける職業リスト" width="754" height="1039" loading="lazy"><p>これらはあくまで「影響がある」の定義に特に当てはまることを示しており、その職業のタスクが完全に人間からLLMに代替されることを示唆しているわけではありません。</p><h2 id="その他論文で示唆された事実"><a href="#その他論文で示唆された事実" class="headerlink" title="その他論文で示唆された事実"></a>その他論文で示唆された事実</h2><ul><li>科学やクリティカルシンキングスキルは影響を受けにくい</li><li>プログラミングとライティングのスキルは強く影響を受ける</li><li>IT業界は影響が大きい</li><li>製造業、農業、鉱業は影響が小さい</li></ul><h1 id="現在のLLMの課題と補完技術の重要性"><a href="#現在のLLMの課題と補完技術の重要性" class="headerlink" title="現在のLLMの課題と補完技術の重要性"></a>現在のLLMの課題と補完技術の重要性</h1><p>現在のLLMには以下のような特徴が存在することで、総じて信憑性の観点で課題が残っています。</p><ul><li>LLMが不正確な事実を知識として獲得する可能性がある</li><li>RLHFの性質上、少なからずバイアスが存在する</li><li>プライバシー周りが整っていない</li><li>LLMが意図的な偽情報をつかまされる可能性がある</li></ul><p>上記考察から、これらの課題を補完する技術を組み合わせることは非常に重要であり、LLMの影響を飛躍的に拡大することにつながります。</p><h1 id="GPTはGPTなのか"><a href="#GPTはGPTなのか" class="headerlink" title="GPTはGPTなのか"></a>GPTはGPTなのか</h1><p>最後に論文のタイトルでもある「Generative Pre-trained Transformers (GPT) は General Purpose Technology (GPT) なのか」という観点の考察です。</p><p>ここまでの議論からLLMは労働市場に多大な影響を与えることが分かったため、総合的に見て <strong>Generative Pre-trained Transformers は General Purpose Technologyである</strong> と著者らは結論付けています。</p><p>また、<a href="https://mackinstitute.wharton.upenn.edu/wp-content/uploads/2021/03/Teodoridis-Florenta-Goldfarb-Avi-and-Taska-Bledi_Could-machine-learning-be-a-general-purpose-technology.pdf">Goldfarbらの研究</a>では広義の意味での機械学習は汎用技術である可能性が高いと主張していますが、今回の研究はそれを支持する結果となりました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>最後まで読んでいただきありがとうございました！</p><p>確かに今回の研究でGPT-4を分類器として機能させたことは汎用技術という主張の材料になりますので、納得感がありました。事前学習済みモデルの威力が発揮された形です。</p><p>また、確かにもともと機械学習はどちらかと言うとある特定領域に特化したモデルで人間を代替することを期待されていた節があるため、本研究によって機械学習が汎用技術になりうると主張することには意義があるように思いました。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://arxiv.org/abs/2303.10130">GPTs are GPTs: An Early Look at the Labor Market Impact Potential of Large Language Models</a></li><li><a href="https://mackinstitute.wharton.upenn.edu/wp-content/uploads/2021/03/Teodoridis-Florenta-Goldfarb-Avi-and-Taska-Bledi_Could-machine-learning-be-a-general-purpose-technology.pdf">Could machine learning be a general purpose technology? A comparison of emerging technologies using data from online job postings</a></li><li><a href="https://www.soumu.go.jp/johotsusintokei/whitepaper/ja/h30/html/nd121120.html#:~:text=%E7%B5%84%E7%B9%94%E3%82%84%E5%88%B6%E5%BA%A6%E3%81%AE%E6%94%B9%E9%9D%A9,%E3%81%A8%E5%91%BC%E3%81%B0%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%80%82">第1部　特集　人口減少時代のICTによる持続的成長</a></li><li><a href="https://arxiv.org/pdf/2203.02155.pdf">Training language models to follow instructions with human feedback</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/">機械学習</category>
      
      <category domain="https://future-architect.github.io/tags/NLP/">NLP</category>
      
      <category domain="https://future-architect.github.io/tags/OpenAI/">OpenAI</category>
      
      <category domain="https://future-architect.github.io/tags/ChatGPT/">ChatGPT</category>
      
      <category domain="https://future-architect.github.io/tags/LLM/">LLM</category>
      
      
      <comments>https://future-architect.github.io/articles/20230404a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Terraform x GitOps</title>
      <link>https://future-architect.github.io/articles/20230403a/</link>
      <guid>https://future-architect.github.io/articles/20230403a/</guid>
      <pubDate>Sun, 02 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは！TIG コアテクの川口です。&lt;/p&gt;
&lt;p&gt;こちらは、 &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！TIG コアテクの川口です。</p><p>こちらは、 <a href="/articles/20230327a/">Terraform 連載</a> の6日目の記事になります！<br>今回は <strong>Terraform x GitOps</strong> について調査しました。</p><h2 id="Terraform-x-GitOps"><a href="#Terraform-x-GitOps" class="headerlink" title="Terraform x GitOps?"></a>Terraform x GitOps?</h2><p>そもそも <strong>Terraform x GitOps</strong> とはなんぞやということからですが。<br>まず <strong>GitOps</strong> という概念は、 <a href="https://www.weave.works/technologies/gitops/">Weaveworks 社によってはじめに提唱されたもの</a> です。</p><p>主に Kubernetes リソースを管理する文脈で登場した概念で、4つの主要な原則として以下のように定義しています。</p><blockquote><p><strong>#1. Declarative: The entire system has to be described declaratively</strong><br>~ システム全体を宣言的に記述する。~<br><strong>#2. Versioned and immutable: The canonical desired system state is versioned in Git</strong><br>~ 望ましいシステムの基準の状態は、Git でバージョン管理されてイミュータブルとする。 ~<br><strong>#3. Pulled automatically: Approved changes are automatically applied to the system</strong><br>~ 承認された変更はシステムに自動的に適用される。 ~<br><strong>#4. Continuously reconciled: Software agents to ensure correctness and alert on divergence</strong><br>~ 正確性を確保して、相違点を警告するソフトウェアエージェント。 ~</p></blockquote><p>今回は、Terraform 連載ということで Terraform を運用するうえでこのような考え方を取り入れる方法について述べていきます。</p><h2 id="利用するサービス"><a href="#利用するサービス" class="headerlink" title="利用するサービス"></a>利用するサービス</h2><p>それでは早速 GitOps を実現するうえで利用するサービスについて考えていきます。</p><h2 id="一般的な-CI-x2F-CD-サービス"><a href="#一般的な-CI-x2F-CD-サービス" class="headerlink" title="一般的な CI&#x2F;CD サービス"></a>一般的な CI&#x2F;CD サービス</h2><p>一般的なとは？というお話ですが…。「後述の2つのものとは違うよ。」といった意味合いで用いています。<br>具体的なものでいうと以下のようなものを指しています。</p><ul><li><strong>GitHub Actions</strong></li><li><strong>Jenkins</strong> （<a href="https://future-architect.github.io/articles/20230330a/">4日目の渡邉さんの記事</a>でも詳細に紹介されていましたね！）</li><li><strong>GitLab CI&#x2F;CD</strong></li><li><strong>CircleCI</strong></li><li><strong>Travis CI</strong></li><li><strong>Google Cloud Build</strong></li><li><strong>AWS CodePipeline</strong></li><li><strong>Azure DevOps Pipelines</strong></li><li>…</li></ul><p>今回の記事でどれを取り上げるか悩みましたが、広く利用されている <strong>GitHub Actions</strong> を取り上げようと思います。</p><h3 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions?"></a>GitHub Actions?</h3><p><strong>GitHub Actions</strong> とは、GitHub上で自動化されたワークフローを作成・実行できる機能です。GitHub を開発時に利用している場合には、扱いやすさの観点で採用されやすいサービスだと個人的には思っています。</p><p>また、<a href="https://docs.github.com/en/actions/using-workflows/triggering-a-workflow#using-filters-to-target-specific-paths-for-pull-request-or-push-events">変更されたファイルをもとにイベントを発火する</a> 機能はなかなかユニークだなーとなった記憶があります。（最近だと、他サービスも拡張機能等で実現できるようにしていそうですが。）</p><p>GitHub Actions でいうところのいわゆる拡張機能は、<strong>Actions</strong> と呼ばれるもので様々な開発者が提供してくれています。どのようなものがあるかを調べるには、<a href="https://github.com/marketplace?type=actions">こちら</a> の <strong>Actions MarcketPlace</strong> が参考になると思います。その他詳細に関しては、 <a href="https://docs.github.com/en/actions">ドキュメント</a> を参照してください。</p><h3 id="GitOps-に特化した-CD-サービス"><a href="#GitOps-に特化した-CD-サービス" class="headerlink" title="GitOps に特化した CD サービス"></a>GitOps に特化した CD サービス</h3><p>次に GitOps に特化した CD サービスということで以下のようなサービスを対象とします。</p><p>以下は、Kubernetes リソースを管理する際によく名前にあがるものかなと思いますが、Terraform の各種リソースに関しても管理ができるように対応されているようです。</p><ul><li><strong><a href="https://pipecd.dev/docs/user-guide/managing-application/defining-app-configuration/terraform/">PipeCD（Terraform x GitOps）</a></strong></li><li><strong><a href="https://fluxcd.io/blog/2022/09/how-to-gitops-your-terraform/">FluxCD（Terraform x GitOps）</a></strong></li><li>…</li></ul><p>今回の記事では Terraform x GitOps をやるうえで、その周辺の開発が最も進んでいそうな <strong>PipeCD</strong> を取り上げてみようと思います！</p><h2 id="PipeCD"><a href="#PipeCD" class="headerlink" title="PipeCD?"></a>PipeCD?</h2><p><strong>PipeCD</strong> とは、GitOps を実現するための CD ツールの1つです。Kubernetes x GitOps の文脈で見かけることが多いかなと思っています。他 GitOps CD ツールとの差異としては、Kubernetes リソースの他に、各種クラウドサービス（Cloud Run, Amazon ECS, AWS Lambda）を利用できることと <a href="https://pipecd.dev/docs-dev/faq/">しているよう</a>  です。</p><p>また、下記のように GitOps という用語が説明にあるサービスなだけあって上記の GitOps の原則を守るための機能は一通り有しているようです。</p><blockquote><p>A GitOps style continuous delivery platform that provides<br>consistent deployment and operations experience for any applications</p></blockquote><p>詳細は、 <a href="https://pipecd.dev/">ドキュメント</a> を参照してください。</p><h2 id="Terraform-管理に特化したサービス"><a href="#Terraform-管理に特化したサービス" class="headerlink" title="Terraform 管理に特化したサービス"></a>Terraform 管理に特化したサービス</h2><p>最後は Terraform 管理に特化したサービスということで以下のようなサービスを対象とします。</p><ul><li><strong><a href="https://developer.hashicorp.com/terraform/cloud-docs">Terraform Cloud</a></strong></li><li><strong><a href="https://www.runatlantis.io/">Atlantis</a></strong></li><li>…</li></ul><p>今回の記事ではこちらの2つのサービス <strong>Terraform Cloud</strong> と <strong>Atlantis</strong> を取り上げてみようと思います！</p><h2 id="Terraform-Cloud"><a href="#Terraform-Cloud" class="headerlink" title="Terraform Cloud?"></a>Terraform Cloud?</h2><p><strong>Terraform Cloud</strong> とは、Terraform をクラウド上で管理するためのツールです。<br>plan, apply 等の各種作業をクラウド上でできるようになります。</p><p>それだと GitOps は？といったことになりそうですが、様々な <a href="https://developer.hashicorp.com/terraform/cloud-docs/vcs">VCS Integration</a> を提供しているため、こちらを使えば実現できます。<br>ただし、ユーザー数や利用する機能によっては <a href="https://www.hashicorp.com/products/terraform/pricing">有料になる</a> ためそこには注意が必要そうです。</p><p>ドキュメントは、 <a href="https://developer.hashicorp.com/terraform/cloud-docs">こちら</a> になります。</p><h2 id="Atlantis"><a href="#Atlantis" class="headerlink" title="Atlantis?"></a>Atlantis?</h2><p>最後に取り上げるのは <strong>Atlantis</strong> です。<a href="https://www.runatlantis.io/guide/#enable-collaboration-with-everyone">こちら</a> でわかりやすく概念等について述べられていました。</p><p>イメージとしては Git の PR 上で ChatOps 的に <a href="https://www.runatlantis.io/docs/using-atlantis.html">plan, apply 等</a> の実行を行えるツールといったものになりそうですかね！<br>個人的には、plan には成功したけれど apply で失敗する…。といったこともまあまあ起こりうるのかなーと思っているので、main に merge されたら apply するというよりかは、PR 上で apply まで担保できるようにするといった運用が取れるのはなかなか良さそうなのカナーと思いました。</p><p>さらに <a href="https://www.runatlantis.io/docs/locking.html">独自のロックの機構</a> も持っているようで、この機能によりチーム単位で修正を行う際でも安全に plan や apply を行えそうです。<br>このロックは、もちろんリポジトリ単位ではなくディレクトリ単位や Terraform Workspace 単位でロックがかかるようになっているようです。（そもそもどのようなディレクトリ構成の Terraform を扱えるかは <a href="https://www.runatlantis.io/docs/requirements.html#repository-structure">こちら</a> に記載があります。）<br>GitHub Actions 等でもいわゆる ChatOps 的な運用を実現することは可能ではあるのですが、なかなかここまで厳密なロックの機構を実現するのは難しそうなのかなと思います。</p><p>その他詳細は、<a href="https://www.runatlantis.io/docs/">ドキュメント</a> を参照してください。</p><h1 id="GitOps-やっていき！"><a href="#GitOps-やっていき！" class="headerlink" title="GitOps やっていき！"></a>GitOps やっていき！</h1><p>それでは早速上述のサービスについて触れていきます。</p><p>今回は Git ホスティングサービスとしては、 <strong>GitHub</strong> を対象とします。<br>また Terraform の管理対象としては <strong>Google Cloud の各種リソース</strong> とします。</p><p>改めてですが GitOps の原則に忠実に則るということであれば、<strong>「コンソール等からシステムの状態・構成を変更するような作業は一切禁止とする。」</strong> ことにも注意です。上述の #1, #2 の原則に反するからですね！</p><h1 id="GitHub-Actions-を使った-GitOps"><a href="#GitHub-Actions-を使った-GitOps" class="headerlink" title="GitHub Actions を使った GitOps"></a>GitHub Actions を使った GitOps</h1><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p><a href="https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners"><strong>Self Hosted Runners</strong></a>（ランナーを自分でホスティングする） を使わずに、 <a href="https://docs.github.com/ja/actions/using-github-hosted-runners/about-github-hosted-runners"><strong>GitHub Hosted Runners</strong></a>（ランナーを GitHub にホスティングしてもらう）を使うということであれば、特にインストール作業は必要にはなりません。</p><p>これらの違いに関しては、 <a href="https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners#differences-between-github-hosted-and-self-hosted-runners">こちら</a> にわかりやすくまとめられていました。他サービスの類似概念とほぼ同様かなと思いますが、主にメンテナンスコスト・カスタマイズ性・プライシングの面で差異があるようです。</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>上述の通りに GitHub Actions では様々な Actions が公開されており、 Terraform を管理するためのものもありました。<br>基本的に今回の用途であれば、以下の二つの Actions を使用してワークフローを組むとよさそうです。</p><ul><li><a href="https://github.com/hashicorp/setup-terraform">setup terraform</a>: Terraform をよしなに扱えるようにする Action。</li><li><a href="https://github.com/google-github-actions/auth">google auth</a>: Google Cloud の認証を行う Action。（Wokload Identity による認証とサービスアカウントのキーを使った認証のどちらにも対応している様子。）</li></ul><p>GitHub Actions では、<a href="https://docs.github.com/en/actions/using-workflows/triggering-a-workflow">こちら</a> のように様々なトリガーが設定できます。また、先ほどのパスの概念も用いれば柔軟に運用はできそうですね！</p><p>原則 #4 に従うとなるとなかなか難しそうですが、厳密に相違点が出た場合に検知したいということであれば、 <a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule">schedule workflow</a> を使ってチェックする感じですかね。（そこまで厳密にやらなければならないケースがあるかは悩ましいところですが。）</p><p>また、排他制御に関しても、<a href="https://docs.github.com/en/actions/using-jobs/using-concurrency">concurrency</a> という概念がある程度利用できそうです。</p><h1 id="PipeCD-を使った-GitOps"><a href="#PipeCD-を使った-GitOps" class="headerlink" title="PipeCD を使った GitOps"></a>PipeCD を使った GitOps</h1><h2 id="Install-1"><a href="#Install-1" class="headerlink" title="Install"></a>Install</h2><p>PipeCD を扱うためには、 <strong>Control Plane</strong> と <strong>Piped</strong> を <a href="https://pipecd.dev/docs-dev/installation">インストールする必要があります</a>。そもそも Control Plane とは？ Piped とは？といったところは <a href="https://pipecd.dev/docs-dev/concepts/">PipeCD の Concepts</a> に記載されています。</p><p>イメージとしては、Control Plane が集中管理用のコンポーネント（Web コンソール等を含む）でおおよそ組織単位で1つできるもの。Piped が GitOps を行いたい各種対象と疎通をするためのステートレスエージェントでおおよそ開発環境単位で1つできるものといったものになるのかなと思います。（諸々運用によっては変わりそうではありそうな気配はありますが、本筋から逸れるのでそこまでは言及しません！）</p><p>以下は上記リンクに記載がありました概念図になります。</p><img src="/images/20230403a/image.png" alt="" width="1200" height="761" loading="lazy"><p>Control Plane をインストールするには状態を永続化する必要があるため、Kubernetes Cluster の他に <strong><a href="https://pipecd.dev/docs-dev/user-guide/managing-controlplane/architecture-overview/#data-store">Data Store（Firestore, MySQL etc…）</a>, <a href="https://pipecd.dev/docs-dev/user-guide/managing-controlplane/architecture-overview/#file-store">File Store（GCS, S3, Minio etc…）</a></strong> が <a href="https://pipecd.dev/docs-dev/installation/install-controlplane/">必要のようです</a>。他にも Web コンソールに円滑にアクセスしようとなった場合には、いくつかのネットワークの設定（静的IP アドレスの付与や DNS の設定 etc…）もする必要がありそうですね！</p><p>Piped のインストールは Piped 自体がステートレスなエージェントということで、そこまで複雑ではなさそうです。Kubernetes Cluster に helm でインストールする他にも、 <a href="https://pipecd.dev/docs-dev/installation/install-piped">いくつか方法がある</a> ようです。</p><h2 id="Setup-1"><a href="#Setup-1" class="headerlink" title="Setup"></a>Setup</h2><p>上記の手順が完了したら、PipeCD を実際に試せる状態になっているはずです。ただ実際に、Terraform リソースを扱おうとなった場合には、さらに以下の手順を実行することになります。</p><h3 id="Terraform-Application-の作成"><a href="#Terraform-Application-の作成" class="headerlink" title="Terraform Application の作成"></a>Terraform Application の作成</h3><p>はじめにやることは Terraform Application の作成です。そもそも Application とは？といったところも、 <a href="https://pipecd.dev/docs-dev/concepts/#application">Concepts</a> に記載がありました。</p><p><a href="https://pipecd.dev/docs-dev/user-guide/managing-application/adding-an-application">https://pipecd.dev/docs-dev/user-guide/managing-application/adding-an-application</a></p><p>こちらを作成することにより、PipeCD と Git リポジトリの対応するディレクトリとのマッピングを行っているのですね。</p><p>またそのディレクトリ内に、 <code>app.pipecd.yaml</code> というファイルを配置することにより、<a href="https://pipecd.dev/docs/user-guide/managing-application/defining-app-configuration/terraform/">詳細な CD の手順を組んでいく</a> ようです。</p><p>Terraform を設定する際の example もいくつか <a href="https://github.com/pipe-cd/examples/tree/master/terraform">公開されていました</a>。また GitOps を謳っているサービスなだけあって、<a href="https://pipecd.dev/docs-dev/user-guide/managing-application/configuration-drift-detection/">Application のドリフト検出</a> が提供されているのはよいですね！</p><h3 id="Secret-Management-の設定"><a href="#Secret-Management-の設定" class="headerlink" title="Secret Management の設定"></a>Secret Management の設定</h3><p>次にやることは、 <a href="https://pipecd.dev/docs-dev/user-guide/managing-application/secret-management/">Secret Management の設定</a> です。Secret Management とは、各種秘匿情報を Git 上で管理できるようにするための機能です。</p><p>上記の Terraform Application の例を参照すると、 <a href="https://github.com/pipe-cd/examples/tree/master/terraform/simple/.credentials">credentials ディレクトリ</a> があり、そこでコマンド実行用の Service Account のキー配置を行っているようですね。ただセキュリティの観点からそのままキーを Git の管理下に置くことはできないため、この Secret Management の機能を利用して適切に暗号化の処理を行なっているようです。</p><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><p>その他の設定として必須ではないにせよ、やると便利そうなこととしては以下がありそうでした。</p><ul><li><strong>Slack 通知の設定:</strong> <a href="https://pipecd.dev/docs-dev/user-guide/managing-piped/configuring-notifications">https://pipecd.dev/docs-dev/user-guide/managing-piped/configuring-notifications</a><ul><li>いくつかのイベントを Slack 通知してくれる機能です。</li></ul></li><li><strong>GitHub 上での Plan Preview の設定:</strong> <a href="https://pipecd.dev/docs-dev/user-guide/plan-preview">https://pipecd.dev/docs-dev/user-guide/plan-preview</a><ul><li>PR 上で、Plan の Preview を行ってくれる機能です。（GitHub Actions にも、公式の <a href="https://github.com/pipe-cd/actions-plan-preview">Actions</a> が公開されているようでした。）</li></ul></li></ul><h1 id="Terraform-Cloud-を使った-GitOps"><a href="#Terraform-Cloud-を使った-GitOps" class="headerlink" title="Terraform Cloud を使った GitOps"></a>Terraform Cloud を使った GitOps</h1><h2 id="Install-2"><a href="#Install-2" class="headerlink" title="Install"></a>Install</h2><p>すべてクラウド上で管理できるようになっているため、特別何かをインストールする必要はありません。（ただし GitHub と連携する際に、GitHub Actions を使用することになるため、先述の Self Hosted Runner を使う場合にはその設定が必要になります。）</p><h2 id="Setup-2"><a href="#Setup-2" class="headerlink" title="Setup"></a>Setup</h2><p>GitHub と連携する際の各種セットアップに関しては、 <a href="https://developer.hashicorp.com/terraform/tutorials/automation/github-actions">こちら</a> にチュートリアルとして記載がありました。<br>このセットアップ手順により構築できる運用フローは以下のようなものになりそうで、わかりやすいですね！</p><img src="/images/20230403a/image_2.png" alt="" width="1006" height="265" loading="lazy"><p>PR 上でのプレビューもあり、運用のイメージもしやすいです。</p><img src="/images/20230403a/assets.gif" alt="" width="800" height="599" loading="lazy"><p>もちろん履歴は、Terraform Cloud 上から（この場合だと GitHub Actions 上からも。）わかりやすく確認できるようになっています。</p><p>その他 Terraform Cloud のユニークな機能について、下記にあげておきます。</p><h3 id="Policy-Enforcemnt"><a href="#Policy-Enforcemnt" class="headerlink" title="Policy Enforcemnt"></a>Policy Enforcemnt</h3><p><a href="https://developer.hashicorp.com/terraform/cloud-docs/policy-enforcement"><strong>Policy Enforcement</strong></a> は、あらかじめ設定したポリシーを実行時に適用してセキュリティルールやベストプラクティスに準拠できているかを検証する機能です。<br>※ 現在 Cloud Team &amp; Governance 以上のプランでのみ使える機能です。</p><p>以下の2つの policy-as-code フレームワークを用いることができます。</p><ul><li><strong><a href="https://docs.hashicorp.com/sentinel/concepts/language">Sentinel</a></strong></li><li><strong><a href="https://www.openpolicyagent.org/docs/latest/policy-language/">OPA</a></strong></li></ul><h3 id="Cost-Estimation"><a href="#Cost-Estimation" class="headerlink" title="Cost Estimation"></a>Cost Estimation</h3><p><a href="https://developer.hashicorp.com/terraform/cloud-docs/cost-estimation"><strong>Cost Estimation</strong></a> は、コストの見積もりを行い、可視化する機能です。<br>※ 現在 Cloud Team &amp; Governance 以上のプランでのみ使える機能です。</p><p>なかなか魅力的な機能ではありそうですが、<strong>サポートされるリソースに関しては、<a href="https://developer.hashicorp.com/terraform/cloud-docs/cost-estimation#supported-resources">制限があるよう</a> なのでそちらは注意が必要そうです。</strong></p><h3 id="Drift-Detection"><a href="#Drift-Detection" class="headerlink" title="Drift Detection"></a>Drift Detection</h3><p><a href="https://www.hashicorp.com/campaign/drift-detection-for-terraform-cloud"><strong>Drift Detection</strong></a> は、差分検知を行い、差分があれば可視化、必要に応じて通知を飛ばせる機能です。（GitOps の原則 #4 を実現するための機能とも言えますね！）<br>※ 現在 Cloud Business 以上のプランでのみ使える機能です。</p><h1 id="Atlantis-を使った-GitOps"><a href="#Atlantis-を使った-GitOps" class="headerlink" title="Atlantis を使った GitOps"></a>Atlantis を使った GitOps</h1><h2 id="Install-Setup"><a href="#Install-Setup" class="headerlink" title="Install, Setup"></a>Install, Setup</h2><p>Atlantis のインストールや各種セットアップは、<a href="https://www.runatlantis.io/docs/installation-guide.html">こちら</a> にわかりやすくまとめられていました。</p><p>Atlantis も PipeCD と同じように自身で Atlantis の各種コンポーネントを <a href="https://www.runatlantis.io/docs/deployment.html">デプロイする必要</a> があります。デプロイの方法には様々なやり方があるようですが、すでに Kubernetes Cluster を飼っている場合には、Helm で一気にインストールできそうなのでそこまで負担もなさそうかなと思いました。</p><p>基本的なセットアップを行ったのちの運用イメージとしては、ホーム画面にプレビューがありました。</p><img src="/images/20230403a/image_3.png" alt="image.png" width="1200" height="2412" loading="lazy"><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回は、<strong>Terraform x GitOps</strong> を実現するにあたっていくつかの手法について調査をしてみました。</p><p>いくつかのサービスの所感としては以下のようになります。</p><ul><li><strong>GitHub Actions:</strong><ul><li>他のサービスと比べて、取り入れやすい。（すでに取り入れられているケースも多そう。）</li><li>任意のスクリプトが実行できて、かつ様々なトリガーを設定できるのでカスタマイズ性は豊富。</li><li>ただし、詳細なワークフローは自身で記載する必要があるので GitHub Actions そのものや、利用する Actions、各種 Terraform コマンドについての詳細な理解が必要になる。</li></ul></li><li><strong>PipeCD:</strong><ul><li>やや取り入れやすさは他と比べると見劣りしそう。ただし、すでに Kubernetes Cluster がある場合や、Kubernetes リソースを管理するサービスを探している場合には十分候補に上がりそう。</li><li>GitOps を忠実に再現できるところはメリット。</li></ul></li><li><strong>Terraform Cloud:</strong><ul><li>特別にインストール等の手順が必要なわけではないので取り入れやすくはあるが、ユーザー数や利用する機能によって有料になる点が注意。（マシン代等はかかるので、他のものが厳密に無料でできるということでもないですが。）</li><li>基本的な機能の他、Policy Enforcement や、Cost Estimation、Drift Detection 等のユニークな機能を有している。</li></ul></li><li><strong>Atlantis</strong><ul><li>様々なデプロイの方法があるとはいったもののデプロイの手間は一定かかってしまいそう。</li><li>ChatOps による運用ができる点や、独自のロック機能は個人的には魅力。</li></ul></li></ul><p>次は棚井さんの記事になりますー！お楽しみに〜！！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/GitOps/">GitOps</category>
      
      <category domain="https://future-architect.github.io/tags/CI-CD/">CI/CD</category>
      
      <category domain="https://future-architect.github.io/tags/GitHubActions/">GitHubActions</category>
      
      <category domain="https://future-architect.github.io/tags/PipeCD/">PipeCD</category>
      
      <category domain="https://future-architect.github.io/tags/TerraformCloud/">TerraformCloud</category>
      
      <category domain="https://future-architect.github.io/tags/Atlantis/">Atlantis</category>
      
      
      <comments>https://future-architect.github.io/articles/20230403a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Terraformでの機密情報の取り扱い on Google Cloud</title>
      <link>https://future-architect.github.io/articles/20230331a/</link>
      <guid>https://future-architect.github.io/articles/20230331a/</guid>
      <pubDate>Thu, 30 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230331a/mozillasops.png&quot; alt=&quot;&quot; width=&quot;711&quot; height=&quot;411&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230331a/mozillasops.png" alt="" width="711" height="411"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG岸下です。<a href="/articles/20230327a/">Terraform連載</a>の5リソース目の記事です。</p><h2 id="Terraform-v1-4-Release🎉"><a href="#Terraform-v1-4-Release🎉" class="headerlink" title="Terraform v1.4 Release🎉"></a>Terraform v1.4 Release🎉</h2><p>Terraformのv1.4が今月リリースされました。<br><a href="https://github.com/hashicorp/terraform/releases/tag/v1.4.0">https://github.com/hashicorp/terraform/releases/tag/v1.4.0</a></p><p>最近、Terraform内での機密情報の取り扱いについて触れることがあり、</p><blockquote><p>Interactive input for sensitive variables is now masked in the UI <a href="https://github.com/hashicorp/terraform/issues/29520">(#29520)</a></p></blockquote><p>こちらのENHANCEMENTを取り上げつつ、Terraform環境上での機密情報の取り扱いについて記載します。</p><h3 id="sensitive指定されたvariableの取り扱い"><a href="#sensitive指定されたvariableの取り扱い" class="headerlink" title="sensitive指定されたvariableの取り扱い"></a>sensitive指定されたvariableの取り扱い</h3><p>plan&#x2F;apply時にインタラクティブに入力を求めることができるvariableですが、以下のように<code>sensitive</code>フラグを指定することができます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_sql_user&quot;</span> <span class="string">&quot;test_user&quot;</span> &#123;</span><br><span class="line">  project  = google_project.project_one.project_id</span><br><span class="line">  name     = <span class="string">&quot;test-user&quot;</span></span><br><span class="line">  instance = google_sql_database_instance.test_db.name</span><br><span class="line">  host     = <span class="string">&quot;%&quot;</span></span><br><span class="line">  password = var.db_password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable <span class="string">&quot;db_password&quot;</span> &#123;</span><br><span class="line">  description = <span class="string">&quot;Database user password&quot;</span></span><br><span class="line">  <span class="built_in">type</span>        = string</span><br><span class="line">  sensitive   = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回のリリースにて<code>sensitive=true</code>にされたvariableは、入力する際にターミナル上で表示されなくなりました。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># これまで</span></span><br><span class="line">$ terraform apply</span><br><span class="line">var.db_password</span><br><span class="line">  Database user password</span><br><span class="line"></span><br><span class="line">  Enter a value:abcdefg</span><br><span class="line"></span><br><span class="line"><span class="comment"># Terraoform v1.4以降</span></span><br><span class="line">$ terraform apply</span><br><span class="line">var.db_password</span><br><span class="line">  Database user password</span><br><span class="line"></span><br><span class="line">  Enter a value:</span><br></pre></td></tr></table></figure><p>これまでのsensitive機能はapply&#x2F;plan結果やtfstateファイル内のマスキングのみでしたが、今回のリリースにて入力時にもマスキングされるようになった形です。</p><figure class="highlight sh"><figcaption><span>plan/apply結果やtfstateが(sensitive value)でマスキングされる（これまでの機能）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># google_sql_user.photo_app will be created</span></span><br><span class="line">  + resource <span class="string">&quot;google_sql_user&quot;</span> <span class="string">&quot;test_user&quot;</span> &#123;</span><br><span class="line">      + host                    = <span class="string">&quot;%&quot;</span></span><br><span class="line">      + <span class="built_in">id</span>                      = (known after apply)</span><br><span class="line">      + instance                = <span class="string">&quot;test-db&quot;</span></span><br><span class="line">      + name                    = <span class="string">&quot;test-user&quot;</span></span><br><span class="line">      + password                = (sensitive value)</span><br><span class="line">      + project                 = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">      + sql_server_user_details = (known after apply)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 1 to add, 0 to change, 0 to destroy.</span><br></pre></td></tr></table></figure><h2 id="実運用での機密情報の取り扱い"><a href="#実運用での機密情報の取り扱い" class="headerlink" title="実運用での機密情報の取り扱い"></a>実運用での機密情報の取り扱い</h2><p>ただ、このインタラクティブマスキング機能はあまり日の目を見ないかもしれません…😢<br>（plan&#x2F;apply時に毎回入力しないといけないのは面倒…）</p><p>実運用上では、<strong>関係者のみに閲覧権限の与えられたプライベートリポジトリを前提</strong>としてDBの認証情報やAPI key、証明書など共有リポジトリ上に置いておきたい機密情報があると思います。</p><p>その場合は、sopsを使って暗号化します。</p><h3 id="sops"><a href="#sops" class="headerlink" title="sops"></a>sops</h3><p>sopsはmozillaが開発している暗号化ツールです。</p><p><a href="https://github.com/mozilla/sops">https://github.com/mozilla/sops</a></p><p>YAML、JSON、ENV、INI、BINARYフォーマットに対応し、Google CLoud KMS、AWS KMS、Azure Key Vault、age、PGPにて利用することが可能です。</p><h3 id="sops-provider"><a href="#sops-provider" class="headerlink" title="sops-provider"></a>sops-provider</h3><p>また、Terraformではsopsのproviderを公開されており、こちらを利用することで暗号化されたファイルをplan&#x2F;apply時に自動で復号化してくれます。<br><a href="https://github.com/carlpett/terraform-provider-sops">https://github.com/carlpett/terraform-provider-sops</a></p><p>また、復号化した内容も先ほど取り上げた<code>(sensitive value)</code>として自動でマスキングしてくれるので、安心して取り扱うことができます。<br><strong>※(sensitive value)として自動でマスキングしてくれる機能はTerraform v0.15以上での対応となります。</strong></p><h3 id="Cloud-Key-Management-Service-Cloud-KMS"><a href="#Cloud-Key-Management-Service-Cloud-KMS" class="headerlink" title="Cloud Key Management Service(Cloud KMS)"></a>Cloud Key Management Service(Cloud KMS)</h3><p><a href="https://cloud.google.com/kms/docs/key-management-service?hl=ja">Cloud Key Management Service（Cloud KMS）</a>はGoogle Cloudの鍵作成・管理サービスで、鍵を生成したり、既存の鍵をCloud KMSへインポートして管理することができます。<br>また暗号化するための鍵をキーリングという形でグルーピングして管理することができます。</p><p>今回はsopsの暗号化に利用する鍵にKMSの鍵を利用します。<br>また、暗号化・復号化には以下のIAMロールが必要となります。</p><ul><li>roles&#x2F;cloudkms.cryptoKeyEncrypterDecrypter</li></ul><figure class="highlight sh"><figcaption><span>kms.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_kms_key_ring&quot;</span> <span class="string">&quot;key_ring&quot;</span> &#123;</span><br><span class="line">  project  = google_project.project_one.project_id</span><br><span class="line">  name     = <span class="string">&quot;test-key-ring&quot;</span></span><br><span class="line">  location = <span class="string">&quot;global&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_kms_crypto_key&quot;</span> <span class="string">&quot;test_key&quot;</span> &#123;</span><br><span class="line">  name     = <span class="string">&quot;test-key&quot;</span></span><br><span class="line">  key_ring = google_kms_key_ring.key_ring.id</span><br><span class="line">  purpose  = <span class="string">&quot;ENCRYPT_DECRYPT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">&quot;google_iam_policy&quot;</span> <span class="string">&quot;encrypter_and_decrypter&quot;</span> &#123;</span><br><span class="line">  binding &#123;</span><br><span class="line">    role    = <span class="string">&quot;roles/cloudkms.cryptoKeyEncrypterDecrypter&quot;</span></span><br><span class="line">    members = [<span class="string">&quot;user:xxx@test.com&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_kms_key_ring_iam_policy&quot;</span> <span class="string">&quot;key_ring_iam&quot;</span> &#123;</span><br><span class="line">  key_ring_id = google_kms_key_ring.key_ring.id</span><br><span class="line">  policy_data = data.google_iam_policy.encrypter_and_decrypter.policy_data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>リソース作成後、テスト用のAPI key（test-apikey.json）を用意しておき、sopsにて暗号化を行います。</p><figure class="highlight json"><figcaption><span>secrets/test-apikey.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span><span class="string">&quot;aaa&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>（sopsのインストールは公式のgoを利用した方法ではうまくいかず、<a href="https://docs.technotim.live/posts/install-mozilla-sops/">こちら</a>を参考にバイナリからインストールしました。）</p><figure class="highlight sh"><figcaption><span>sopsによる暗号化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sops --input-type json --encrypt --gcp-kms projects/&lt;PROJECT_ID&gt;/locations/global/keyRings/test-key-ring/cryptoKeys/test-key secrets/test-apikey.json &gt; secrets/test-apikey_encrypted.json</span><br></pre></td></tr></table></figure><p>今回、sops-providerを利用して自動で復号化を行うため、providerの追加を行います（terraform initを忘れずに）。</p><figure class="highlight sh"><figcaption><span>versions.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    google = &#123;</span><br><span class="line">      <span class="built_in">source</span>  = <span class="string">&quot;hashicorp/google&quot;</span></span><br><span class="line">      version = <span class="string">&quot;~&gt; 4.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># sopsを追加</span></span><br><span class="line">    sops = &#123;</span><br><span class="line">      <span class="built_in">source</span>  = <span class="string">&quot;carlpett/sops&quot;</span></span><br><span class="line">      version = <span class="string">&quot;~&gt; 0.7&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで準備が整ったので、API Keyを使うCloud Functionを書いてみます。</p><figure class="highlight sh"><figcaption><span>cloud_function.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_cloudfunctions_function&quot;</span> <span class="string">&quot;test-fnc&quot;</span> &#123;</span><br><span class="line">  project     = google_project.project_one.project_id</span><br><span class="line">  name        = <span class="string">&quot;test-fnc&quot;</span></span><br><span class="line">  region      = <span class="string">&quot;asia-northeast1&quot;</span></span><br><span class="line">  description = <span class="string">&quot;test function&quot;</span></span><br><span class="line"></span><br><span class="line">  runtime      = <span class="string">&quot;go119&quot;</span></span><br><span class="line">  <span class="built_in">timeout</span>      = 120</span><br><span class="line">  entry_point  = <span class="string">&quot;TEST&quot;</span></span><br><span class="line">  trigger_http = <span class="literal">true</span></span><br><span class="line">  source_archive_bucket = google_storage_bucket.bucket.name</span><br><span class="line">  source_archive_object = google_storage_bucket_object.archive.name</span><br><span class="line"></span><br><span class="line">  environment_variables = &#123;</span><br><span class="line">    APIKEY = data.sops_file.api_key.data[<span class="string">&quot;test&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">&quot;sops_file&quot;</span> <span class="string">&quot;api_key&quot;</span> &#123;</span><br><span class="line">  source_file = <span class="string">&quot;./secrets/test-apikey_encrypted.json&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>terraform planを打ってみると、</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># google_cloudfunctions_function.test-fnc will be created</span></span><br><span class="line">  + resource <span class="string">&quot;google_cloudfunctions_function&quot;</span> <span class="string">&quot;test-fnc&quot;</span> &#123;</span><br><span class="line">      + available_memory_mb           = 256</span><br><span class="line">      + description                   = <span class="string">&quot;test function&quot;</span></span><br><span class="line">      + docker_registry               = (known after apply)</span><br><span class="line">      + entry_point                   = <span class="string">&quot;TEST&quot;</span></span><br><span class="line">      + environment_variables         = &#123;</span><br><span class="line">          + <span class="string">&quot;APIKEY&quot;</span> = (sensitive value)</span><br><span class="line">        &#125;</span><br><span class="line">      + https_trigger_security_level  = (known after apply)</span><br><span class="line">      + https_trigger_url             = (known after apply)</span><br><span class="line">      + <span class="built_in">id</span>                            = (known after apply)</span><br><span class="line">      + ingress_settings              = <span class="string">&quot;ALLOW_ALL&quot;</span></span><br><span class="line">      + max_instances                 = 0</span><br><span class="line">      + name                          = <span class="string">&quot;test-fnc&quot;</span></span><br><span class="line">      + project                       = <span class="string">&quot;ksst-project-one&quot;</span></span><br><span class="line">      + region                        = <span class="string">&quot;asia-northeast1&quot;</span></span><br><span class="line">      + runtime                       = <span class="string">&quot;go119&quot;</span></span><br><span class="line">      + service_account_email         = (known after apply)</span><br><span class="line">      + source_archive_bucket         = <span class="string">&quot;go-test-function-bucket&quot;</span></span><br><span class="line">      + source_archive_object         = <span class="string">&quot;test.zip&quot;</span></span><br><span class="line">      + <span class="built_in">timeout</span>                       = 120</span><br><span class="line">      + trigger_http                  = <span class="literal">true</span></span><br><span class="line">      + vpc_connector_egress_settings = (known after apply)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>APIKEY</code>の箇所が<code>(sensitive value)</code>でマスキングされていることがわかります。</p><p>また、コンソールから復号化されたAPIKEYがちゃんと入っているかどうかも確認してみると、ちゃんと入ってますね🎊</p><img src="/images/20230331a/d02d879d-a94b-e788-ccc0-cffad344e32c.png" alt="" width="628" height="218" loading="lazy"><p>このようにCloud KMSを利用することで、機密情報を一々入力する必要がなくなり、更に機密情報の内容は追加した本人のみしか知らない状態でTerraform上の運用が可能になります。</p><p>ここでくれぐれも気を付けたいのが、<strong>暗号化前のファイルをgitでpushしないようにしましょう</strong>。暗号化はGitのリポジトリ内でやらないなどの運用ルール作りが大切です。</p><p>また、Google CloudのSDKが利用な環境であればSecret Managerを使うなど、<strong>できる限りGitには機密情報をあげないようにして運用する工夫</strong>は大切です。</p><p>明日は川口さんの<a href="/articles/20230403a/">Terraform x GitOps</a>です。お楽しみに！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Security/">Security</category>
      
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform1-4/">Terraform1.4</category>
      
      <category domain="https://future-architect.github.io/tags/sops/">sops</category>
      
      
      <comments>https://future-architect.github.io/articles/20230331a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JenkinsでのTerraform CI/CD</title>
      <link>https://future-architect.github.io/articles/20230330a/</link>
      <guid>https://future-architect.github.io/articles/20230330a/</guid>
      <pubDate>Wed, 29 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>こんにちは！筋肉エンジニアのTIG渡邉です。最近ヘルニアになってしまい筋トレが思うようにできずくすぶっています。</p><p><a href="/articles/20230327a/">Terraform連載</a> の4リソース目の記事になります！</p><p>さて、今回はプロジェクトでJenikisを利用する機会があり、初めてJenkinsfileでTerraformのCI&#x2F;CD環境を構築する機会があったので記事に残そうと思います。クラウドを使っているとAWSではCodeBuild、Google CloudではCloudBuildのサービスをCI&#x2F;CD環境として利用するのでyamlでのCI&#x2F;CDスクリプトには慣れていましたが、今回はJenkinsでCI&#x2F;CDを構築する要件でしたのでJenkinsfileでCI&#x2F;CDスクリプトには苦戦しました。</p><p>以下、今回利用したクラウドやTerraform、Jenkinsのバージョンを記載しておきます。</p><ul><li>クラウド：Google Cloud</li><li>Terraform : 1.4.0</li><li>Jenkins : 2.375.3</li></ul><h1 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h1><p>今回のアーキテクチャ図は以下の通りです。</p><img src="/images/20230330a/architecture.drawio.png" alt="architecture.drawio.png" width="1200" height="492" loading="lazy"><p>まず、JenkinsサーバやJenkinsサーバに付随するリソース（Cloud Load Balancing&#x2F;Cloud Armorなど）はローカルPCからTerraformを実行して作成していきます。Jenkinsサーバを構築後、諸々Jenkinsの設定を終えたのちはJenkins Consoleからボタンポチポチでterraform planからterraform applyを実行してほかのGoogle Cloudのリソースたちを構築することができるようになります。</p><h1 id="Jenkinsサーバを構築するTerraformコード"><a href="#Jenkinsサーバを構築するTerraformコード" class="headerlink" title="Jenkinsサーバを構築するTerraformコード"></a>Jenkinsサーバを構築するTerraformコード</h1><p>ローカルPCからJenkinsサーバを構築するためのTerraformコードを記載します。<br>前提としてGoogle CloudのプロジェクトやVPC、Subnetなどのネットワークリソースはすでに構築されているものとします。</p><h2 id="ディレクトリ構成"><a href="#ディレクトリ構成" class="headerlink" title="ディレクトリ構成"></a>ディレクトリ構成</h2><p>本ディレクトリ構成は以下の通りです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── backend.tf</span><br><span class="line">├── build</span><br><span class="line">│   ├── Jenkinsfile.deploy</span><br><span class="line">│   └── Jenkinsfile.<span class="built_in">test</span></span><br><span class="line">├── compute_engine.tf</span><br><span class="line">├── compute_firewall.tf</span><br><span class="line">├── compute_network.tf</span><br><span class="line">├── locals.tf</span><br><span class="line">├── project_iam_member.tf</span><br><span class="line">├── provider.tf</span><br><span class="line">├── security_policy.tf</span><br><span class="line">├── service_account.tf</span><br><span class="line">├── startup-scripts</span><br><span class="line">│   └── jenkins.sh</span><br><span class="line">└── versions.tf</span><br></pre></td></tr></table></figure><p>locals.tfの中身はGoogle Cloudのプロジェクト名や、自宅外部IPが含まれるので省略させていただきます。また、GCEのStartup Scriptを利用してGCEの構築時にJenkinsのインストールやGKEを操作するためのkubectlなどの諸々の設定も行っています（今回はGKEについては記載しませんがkubectlのインストールだけは一緒に行っています。）。</p><details><summary>backend.tf</summary><figure class="highlight sh"><figcaption><span>backend.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line"> backend <span class="string">&quot;gcs&quot;</span> &#123;</span><br><span class="line">   bucket  = <span class="string">&quot;xxxxxxxxxxxxx&quot;</span></span><br><span class="line">   prefix  = <span class="string">&quot;terraform/state&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>comute_engine.tf</summary><figure class="highlight sh"><figcaption><span>comute_engine.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_compute_instance&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name         = local.jenkins.name</span><br><span class="line">  machine_type = local.jenkins.machine_type</span><br><span class="line">  zone         = local.jenkins.zone</span><br><span class="line"></span><br><span class="line">  tags = local.jenkins.tags</span><br><span class="line"></span><br><span class="line">  metadata = &#123;</span><br><span class="line">    <span class="string">&quot;enable-oslogin&quot;</span> = <span class="string">&quot;TRUE&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  boot_disk &#123;</span><br><span class="line">    initialize_params &#123;</span><br><span class="line">      image = <span class="string">&quot;ubuntu-os-cloud/ubuntu-2204-lts&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  network_interface &#123;</span><br><span class="line">    subnetwork = data.google_compute_subnetwork.pri.self_link</span><br><span class="line">    access_config &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  service_account &#123;</span><br><span class="line">    email  = google_service_account.jenkins.email</span><br><span class="line">    scopes = [<span class="string">&quot;cloud-platform&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  metadata_startup_script = file(<span class="string">&quot;./startup-scripts/jenkins.sh&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_instance_group&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name        = local.jenkins.name</span><br><span class="line">  description = local.jenkins.instance_group_description</span><br><span class="line"></span><br><span class="line">  instances = [</span><br><span class="line">    google_compute_instance.jenkins.id</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  named_port &#123;</span><br><span class="line">    name = local.jenkins.name</span><br><span class="line">    port = local.jenkins.instance_group_port</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  zone = local.jenkins.zone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_http_health_check&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name         = local.jenkins.name</span><br><span class="line">  request_path = <span class="string">&quot;/login&quot;</span></span><br><span class="line">  port         = 8080</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_backend_service&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name                  = local.jenkins.name</span><br><span class="line">  protocol              = <span class="string">&quot;HTTP&quot;</span></span><br><span class="line">  port_name             = local.jenkins.name</span><br><span class="line">  load_balancing_scheme = <span class="string">&quot;EXTERNAL&quot;</span></span><br><span class="line">  timeout_sec           = 10</span><br><span class="line">  health_checks         = [google_compute_http_health_check.jenkins.id]</span><br><span class="line">  security_policy       = google_compute_security_policy.jenkins.id</span><br><span class="line">  backend &#123;</span><br><span class="line">    group           = google_compute_instance_group.jenkins.id</span><br><span class="line">    balancing_mode  = <span class="string">&quot;UTILIZATION&quot;</span></span><br><span class="line">    max_utilization = 1.0</span><br><span class="line">    capacity_scaler = 1.0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_url_map&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name            = local.jenkins.name</span><br><span class="line">  default_service = google_compute_backend_service.jenkins.id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_target_https_proxy&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name             = local.jenkins.name</span><br><span class="line">  url_map          = google_compute_url_map.jenkins.id</span><br><span class="line">  ssl_certificates = [google_compute_managed_ssl_certificate.jenkins.id]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">&quot;google_compute_global_address&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name = local.jenkins.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_global_forwarding_rule&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name                  = local.jenkins.name</span><br><span class="line">  ip_protocol           = <span class="string">&quot;TCP&quot;</span></span><br><span class="line">  load_balancing_scheme = <span class="string">&quot;EXTERNAL&quot;</span></span><br><span class="line">  port_range            = <span class="string">&quot;443&quot;</span></span><br><span class="line">  target                = google_compute_target_https_proxy.jenkins.id</span><br><span class="line">  ip_address            = data.google_compute_global_address.jenkins.address</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_managed_ssl_certificate&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name = local.jenkins.name</span><br><span class="line"></span><br><span class="line">  managed &#123;</span><br><span class="line">    domains = [<span class="string">&quot;<span class="variable">$&#123;data.google_compute_global_address.jenkins.address&#125;</span>.nip.io&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>comute_firewall.tf</summary><figure class="highlight sh"><figcaption><span>comute_firewall.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_compute_firewall&quot;</span> <span class="string">&quot;jenkins_iap&quot;</span> &#123;</span><br><span class="line">  name    = <span class="string">&quot;allow-iap-jenkins-instance-ssh&quot;</span></span><br><span class="line">  network = data.google_compute_network.vpc.self_link</span><br><span class="line"></span><br><span class="line">  allow &#123;</span><br><span class="line">    protocol = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">    ports    = [<span class="string">&quot;22&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  direction     = <span class="string">&quot;INGRESS&quot;</span></span><br><span class="line">  priority      = 1000</span><br><span class="line">  target_tags   = [<span class="string">&quot;jenkins&quot;</span>]</span><br><span class="line">  source_ranges = [<span class="string">&quot;35.235.240.0/20&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_firewall&quot;</span> <span class="string">&quot;jenkins_health&quot;</span> &#123;</span><br><span class="line">  name    = <span class="string">&quot;allow-jenkins-health-check&quot;</span></span><br><span class="line">  network = data.google_compute_network.vpc.self_link</span><br><span class="line"></span><br><span class="line">  allow &#123;</span><br><span class="line">    protocol = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  direction     = <span class="string">&quot;INGRESS&quot;</span></span><br><span class="line">  priority      = 1000</span><br><span class="line">  target_tags   = [<span class="string">&quot;jenkins&quot;</span>]</span><br><span class="line">  source_ranges = [<span class="string">&quot;35.191.0.0/16&quot;</span>, <span class="string">&quot;130.211.0.0/22&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>comute_network.tf</summary><figure class="highlight sh"><figcaption><span>comute_network.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data <span class="string">&quot;google_compute_network&quot;</span> <span class="string">&quot;vpc&quot;</span> &#123;</span><br><span class="line">  name = local.vpc_name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">&quot;google_compute_subnetwork&quot;</span> <span class="string">&quot;pub&quot;</span> &#123;</span><br><span class="line">  name   = local.subnet.pub.name</span><br><span class="line">  region = local.region_name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">&quot;google_compute_subnetwork&quot;</span> <span class="string">&quot;pri&quot;</span> &#123;</span><br><span class="line">  name   = local.subnet.pri.name</span><br><span class="line">  region = local.region_name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>project_iam_member.tf</summary><figure class="highlight sh"><figcaption><span>project_iam_member.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_project_iam_member&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  project = local.project.project_id</span><br><span class="line">  for_each = toset([</span><br><span class="line">    <span class="string">&quot;roles/owner&quot;</span>,</span><br><span class="line">  ])</span><br><span class="line">  role   = each.value</span><br><span class="line">  member = <span class="string">&quot;serviceAccount:<span class="variable">$&#123;google_service_account.jenkins.email&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>security_policy.tf</summary><figure class="highlight sh"><figcaption><span>security_policy.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_compute_security_policy&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name = local.jenkins.name</span><br><span class="line"></span><br><span class="line">  rule &#123;</span><br><span class="line">    action   = <span class="string">&quot;allow&quot;</span></span><br><span class="line">    priority = <span class="string">&quot;10&quot;</span></span><br><span class="line">    match &#123;</span><br><span class="line">      versioned_expr = <span class="string">&quot;SRC_IPS_V1&quot;</span></span><br><span class="line">      config &#123;</span><br><span class="line">        src_ip_ranges = [local.security_policy.home_ip]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    description = <span class="string">&quot;allow home ip address&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  rule &#123;</span><br><span class="line">    action   = <span class="string">&quot;deny(403)&quot;</span></span><br><span class="line">    priority = <span class="string">&quot;2147483647&quot;</span></span><br><span class="line">    match &#123;</span><br><span class="line">      versioned_expr = <span class="string">&quot;SRC_IPS_V1&quot;</span></span><br><span class="line">      config &#123;</span><br><span class="line">        src_ip_ranges = [<span class="string">&quot;*&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    description = <span class="string">&quot;deny all ip address except home ip&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>service_account.tf</summary><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_service_account&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  account_id   = <span class="string">&quot;tky-jenkins-sa&quot;</span></span><br><span class="line">  display_name = <span class="string">&quot;tky-jenkins-sa&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>versions.tf</summary><figure class="highlight sh"><figcaption><span>versions.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_version = <span class="string">&quot;~&gt; 1.4.0&quot;</span></span><br><span class="line">  required_providers &#123;</span><br><span class="line">    google = &#123;</span><br><span class="line">      version = <span class="string">&quot;~&gt; 4.47.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>provider.tf</summary><figure class="highlight sh"><figcaption><span>provider.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">provider <span class="string">&quot;google&quot;</span> &#123;</span><br><span class="line">  project = local.project.name</span><br><span class="line">  region  = local.region_name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">&quot;google-beta&quot;</span> &#123;</span><br><span class="line">  project = local.project.name</span><br><span class="line">  region  = local.region_name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details></details><details><summary>startup-scripts/jenkins.sh</summary><figure class="highlight sh"><figcaption><span>startup-scripts/jenkins.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line">apt update -y</span><br><span class="line">apt install -y git apt-transport-https ca-certificates software-properties-common gnupg</span><br><span class="line">apt install -y openjdk-17-jdk openjdk-17-jre</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Kubectl</span></span><br><span class="line">curl -LO <span class="string">&quot;https://storage.googleapis.com/kubernetes-release/release/<span class="subst">$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)</span>/bin/linux/amd64/kubectl&quot;</span></span><br><span class="line"><span class="built_in">chmod</span> +x ./kubectl</span><br><span class="line"><span class="built_in">mv</span> ./kubectl /usr/local/bin/kubectl</span><br><span class="line">kubectl version</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install google-cloud-sdk-gke-gcloud-auth-plugin</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/apt/sources.list.d/google-cloud-sdk.list</span><br><span class="line">curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install google-cloud-cli</span><br><span class="line">apt-get install google-cloud-sdk-gke-gcloud-auth-plugin</span><br><span class="line"><span class="built_in">export</span> USE_GKE_GCLOUD_AUTH_PLUGIN=True</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Jenkins</span></span><br><span class="line">curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | <span class="built_in">tee</span> /usr/share/keyrings/jenkins-keyring.asc &gt; /dev/null</span><br><span class="line"><span class="built_in">echo</span> deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ | <span class="built_in">tee</span> /etc/apt/sources.list.d/jenkins.list &gt; /dev/null</span><br><span class="line">apt update -y</span><br><span class="line">apt install -y jenkins</span><br><span class="line">sed -i -e <span class="string">&#x27;s/JENKINS_ENABLE_ACCESS_LOG=&quot;no&quot;/JENKINS_ENABLE_ACCESS_LOG=&quot;yes&quot;/g&#x27;</span> /etc/default/jenkins</span><br><span class="line">systemctl restart jenkins</span><br><span class="line">systemctl <span class="built_in">enable</span> jenkins</span><br></pre></td></tr></table></figure></details><h1 id="Jenkins初期設定"><a href="#Jenkins初期設定" class="headerlink" title="Jenkins初期設定"></a>Jenkins初期設定</h1><p>Jenkinsサーバが構築出来たら、ローカルPCからCloud Load Balancingに設定されたURLからJenkins Consoleにアクセスします。</p><p>初回アクセス時にAdministrator passwordを求められるのでJenkinsサーバにSSHで入り、以下のコマンドを実行してAdministrator passwardを確認して画面に入力します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cat</span> /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><img src="/images/20230330a/jenkins_setting_1.png" alt="" width="991" height="911" loading="lazy"><p>次にJenkins Pluginの設定を求められるので、Jenkinsが推奨している「Install suggested plugins」を選択します。</p><img src="/images/20230330a/jenkins_setting_2.png" alt="" width="995" height="910" loading="lazy"><p>Jenkinsが推奨しているPluginをインストールされるまで待ちます。<br><img src="/images/20230330a/jenkins_setting_3.png" alt="" width="993" height="915" loading="lazy"></p><p>次に、Jenkins初期Admin Userの設定を求められるので</p><ul><li>ユーザ名</li><li>パスワード</li><li>パスワードの確認</li><li>フルネーム</li><li>メールアドレス</li></ul><p>を入力して「Save and Continue」をクリックします。<br><img src="/images/20230330a/jenkins_setting_4.png" alt="" width="987" height="911" loading="lazy"></p><p>Jenkins ルートURLの確認が求められるので、変更がなければ「Save and Finish」をクリックします。<br><img src="/images/20230330a/jenkins_setting_5.png" alt="" width="994" height="909" loading="lazy"></p><p>これでJenkinsの初期設定が完了したので、「Start using Jenkins」をクリックします。</p><img src="/images/20230330a/jenkins_setting_6.png" alt="" width="992" height="912" loading="lazy"><p>その後、Jenkins Consoleの画面にアクセスできるようになります。</p><img src="/images/20230330a/jenkins_setting_7.png" alt="" width="1200" height="890" loading="lazy"><h1 id="Terraform-x2F-AnsiColor-プラグインのインストール"><a href="#Terraform-x2F-AnsiColor-プラグインのインストール" class="headerlink" title="Terraform&#x2F;AnsiColor プラグインのインストール"></a>Terraform&#x2F;AnsiColor プラグインのインストール</h1><p>「Jenkinsの管理」をクリックし、「プライグインの管理」をクリックします。<br><img src="/images/20230330a/global_tool_configuration_1.png" alt="" width="1200" height="895" loading="lazy"></p><p>JenkinsからTerraformを実行するためにTerraformをインストールします。</p><p>「Availavle plugins」をクリックし、検索欄から「terraform」を入力、Installにチェックし、「Download now and install after restart」をクリックします。</p><p>Jenkins実行ログに色を付けたいので、AnsiColorをインストールします。</p><p>「Availavle plugins」をクリックし、検索欄から「AnsiColor」を入力、Installにチェックし、「Download now and install after restart」をクリックします。</p><img src="/images/20230330a/global_tool_configuration_2.png" alt="" width="1200" height="890" loading="lazy"><img src="/images/20230330a/global_tool_configuration_8.png" alt="" width="1200" height="893" loading="lazy"><p>その後、「Installed plugins」をクリックし、「ジョブが実行中でなければ再起動」をクリックし、Jenkinsサーバを再起動します。</p><img src="/images/20230330a/global_tool_configuration_4.png" alt="" width="1200" height="892" loading="lazy"><p>再起動すると、再度ログインが求められるのでログイン情報を入力し、ログインします。</p><img src="/images/20230330a/global_tool_configuration_5.png" alt="" width="1200" height="896" loading="lazy"><h1 id="Global-Tool-Configurationの設定"><a href="#Global-Tool-Configurationの設定" class="headerlink" title="Global Tool Configurationの設定"></a>Global Tool Configurationの設定</h1><p>「Jenkinsの管理」をクリックし、「Global Tool Configuration」をクリックします。</p><img src="/images/20230330a/image.png" alt="" width="1200" height="899" loading="lazy"><p>Terraformプラグインをインストールしている状態だと、Global Tool ConfigurationにTerraformが表示されるので、設定します。</p><ul><li>Name : Terraform-1.4.0　（Jenkinsfileで使用するためこの名前にします）</li><li>install from bintray.com：バージョン（Terraform 1.4.0 linux (amd64)）</li></ul><p>を設定し、「Save」をクリックします。</p><img src="/images/20230330a/image_2.png" alt="" width="1200" height="899" loading="lazy"><h1 id="Terraform-Plan-x2F-Applyジョブの作成"><a href="#Terraform-Plan-x2F-Applyジョブの作成" class="headerlink" title="Terraform Plan&#x2F;Applyジョブの作成"></a>Terraform Plan&#x2F;Applyジョブの作成</h1><h2 id="Terraformジョブ管理フォルダの作成"><a href="#Terraformジョブ管理フォルダの作成" class="headerlink" title="Terraformジョブ管理フォルダの作成"></a>Terraformジョブ管理フォルダの作成</h2><p>ここまでの設定で、Jenkins上でTerraformを実行する環境が整ったので、Terraform実行ジョブ管理フォルダの作成を行っていきます。</p><p>「新規ジョブ作成」をクリックします。</p><img src="/images/20230330a/jenkins_job_setting_1.png" alt="" width="1200" height="893" loading="lazy"><p>まず、Terraformジョブをまとめるフォルダを作成します。<br>ジョブ名「terraform」と入力し、「フォルダ」を選択し、「OK」を入力します。<br><img src="/images/20230330a/jenkins_job_setting_8.png" alt="" width="1200" height="893" loading="lazy"></p><p>ConfigurationでGeneralから</p><ul><li>表示名：terraform</li><li>説明：terraform planジョブとterraform applyジョブを管理します</li></ul><p>と入力し「保存」をクリックします。<br><img src="/images/20230330a/jenkins_job_setting_9.png" alt="" width="1200" height="895" loading="lazy"></p><h2 id="Terraform-planジョブの作成"><a href="#Terraform-planジョブの作成" class="headerlink" title="Terraform planジョブの作成"></a>Terraform planジョブの作成</h2><p>terraformフォルダが作成されたので、terraform planジョブの作成を行っていきます。<br>「新規アイテムの作成」をクリックします。<br><img src="/images/20230330a/jenkins_job_setting_10.png" alt="" width="1200" height="894" loading="lazy"></p><p>ジョブ名「terraform-plan」と入力し、「Multibranch Pipeline」を選択し、「OK」と入力します。<br><img src="/images/20230330a/jenkins_job_setting_2.png" alt="" width="1200" height="894" loading="lazy"></p><p>ConfigurationでGeneralから</p><ul><li>表示名：terraform-plan</li><li>説明：terraform planを実行するジョブです。</li></ul><img src="/images/20230330a/jenkins_job_setting_3.png" alt="jenkins_job_setting_3.png" width="923" height="410" loading="lazy"><p>Branch SorucesでGitHubとの連携の設定を行っていきます。<br>Credentialsから「追加」をクリックし、GitHub認証情報の設定を行います。</p><img src="/images/20230330a/jenkins_job_setting_4.png" alt="jenkins_job_setting_4.png" width="849" height="608" loading="lazy"><p>Folder Credentials Providerで</p><ul><li>Domain：グローバルドメイン</li><li>種類：ユーザ名とパスワード</li><li>ユーザ名：GitHubのユーザ名</li><li>パスワード：GitHubのPersonal Access Token</li></ul><p>を入力します。</p><img src="/images/20230330a/jenkins_job_setting_5.png" alt="" width="948" height="712" loading="lazy"><p>上記設定後、Credentialsに設定したCredentialが表示されるので選択します。<br>Repository Scan - Deprecated Visualization　から</p><ul><li>Owner：Githubユーザ名</li><li>Repository：対象リポジトリ</li></ul><p>を選択します。</p><p>Behavioursは</p><ul><li>Strategy：All branches</li></ul><p>を選択します。</p><img src="/images/20230330a/jenkins_job_setting_6.png" alt="" width="888" height="845" loading="lazy"><p>Build Configurationから</p><ul><li>Mode：by Jenkinsfile</li><li>script Path：Jenkinsfileが存在するパス<br>を入力して「保存」をクリックします。</li></ul><img src="/images/20230330a/jenkins_job_setting_7.png" alt="" width="908" height="291" loading="lazy"><p>設定後、terraform-planジョブが作成されます。<br><img src="/images/20230330a/jenkins_job_setting_12.png" alt="" width="1200" height="903" loading="lazy"><br>実際のJenkinsfileはこちらです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    // 環境変数を定義</span><br><span class="line">    environment &#123;</span><br><span class="line">        TERRAFORM_PATH = tool(name: <span class="string">&#x27;terraform-1.4.0&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;org.jenkinsci.plugins.terraform.TerraformInstallation&#x27;</span>)</span><br><span class="line">        PATH = <span class="string">&quot;<span class="variable">$&#123;TERRAFORM_PATH&#125;</span>:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">        TERRAFORM_HOME = <span class="string">&quot;gcp/jenkins&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ansiエスケープシーケンスでログに色をつける</span><br><span class="line">    options &#123;</span><br><span class="line">        ansiColor(<span class="string">&#x27;xterm&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Initialize&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // terraformコードがあるディレクトリで処理</span><br><span class="line">                <span class="built_in">dir</span>(TERRAFORM_HOME) &#123;</span><br><span class="line">                    script &#123;</span><br><span class="line">                        // terraformのバージョン確認</span><br><span class="line">                        sh <span class="string">&quot;terraform -v&quot;</span></span><br><span class="line">                        // 前回のジョブ実行時のファイルを削除</span><br><span class="line">                        <span class="keyword">if</span> (fileExists(<span class="string">&quot;.terraform/terraform.tfstate&quot;</span>)) &#123;</span><br><span class="line">                            sh <span class="string">&quot;rm -rf .terraform/terraform.tfstate&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (fileExists(<span class="string">&quot;.terraform.lock.hcl&quot;</span>)) &#123;</span><br><span class="line">                            sh <span class="string">&quot;rm -rf .terraform.lock.hcl&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (fileExists(<span class="string">&quot;status&quot;</span>)) &#123;</span><br><span class="line">                            sh <span class="string">&quot;rm status&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        // terraform initの実行</span><br><span class="line">                        sh <span class="string">&quot;terraform init&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;plan&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // terraformコードがあるディレクトリで処理</span><br><span class="line">                <span class="built_in">dir</span>(TERRAFORM_HOME) &#123;</span><br><span class="line">                    script &#123;</span><br><span class="line">                        // terraform planの実行</span><br><span class="line">                        sh <span class="string">&quot;set +e; terraform plan -out=plan.out -detailed-exitcode; echo \$? &gt; status&quot;</span></span><br><span class="line">                        def exitcode = readFile(<span class="string">&#x27;status&#x27;</span>).trim()</span><br><span class="line">                        <span class="built_in">echo</span> <span class="string">&quot;Terraform Plan Exit Code: <span class="variable">$&#123;exitcode&#125;</span>&quot;</span></span><br><span class="line">                        // 成功時</span><br><span class="line">                        <span class="keyword">if</span> (exitcode == <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">                            currentBuild.result = <span class="string">&#x27;SUCCESS&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        // 失敗時</span><br><span class="line">                        <span class="keyword">if</span> (exitcode == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">                            currentBuild.result = <span class="string">&#x27;FAILURE&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Terraform-Applyジョブの作成"><a href="#Terraform-Applyジョブの作成" class="headerlink" title="Terraform Applyジョブの作成"></a>Terraform Applyジョブの作成</h2><p>terraform-planジョブが作成できたので、同様の設定でterraform-applyジョブを作成していきます。</p><img src="/images/20230330a/jenkins_job_setting_13.png" alt="" width="1200" height="895" loading="lazy"><p>実際のJenkinsfileはこちらです。</p><figure class="highlight sh"><figcaption><span>Jenkinsfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">// 変数を定義</span><br><span class="line">def apply = <span class="string">&quot;0&quot;</span></span><br><span class="line">def planExitCode</span><br><span class="line">def applyExitCode</span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    // 環境変数を定義</span><br><span class="line">    environment &#123;</span><br><span class="line">        TERRAFORM_PATH = tool(name: <span class="string">&#x27;terraform-1.4.0&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;org.jenkinsci.plugins.terraform.TerraformInstallation&#x27;</span>)</span><br><span class="line">        PATH = <span class="string">&quot;<span class="variable">$&#123;TERRAFORM_PATH&#125;</span>:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">        TERRAFORM_HOME = <span class="string">&quot;gcp/jenkins&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ansiエスケープシーケンスでログに色をつける</span><br><span class="line">    options &#123;</span><br><span class="line">        ansiColor(<span class="string">&#x27;xterm&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Initialize&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // terraformコードがあるディレクトリで処理</span><br><span class="line">                <span class="built_in">dir</span>(TERRAFORM_HOME) &#123;</span><br><span class="line">                    script &#123;</span><br><span class="line">                        // terraformのバージョン確認</span><br><span class="line">                        sh <span class="string">&quot;terraform -v&quot;</span></span><br><span class="line">                        // 前回のジョブ実行時のファイルを削除</span><br><span class="line">                        <span class="keyword">if</span> (fileExists(<span class="string">&quot;.terraform/terraform.tfstate&quot;</span>)) &#123;</span><br><span class="line">                            sh <span class="string">&quot;rm -rf .terraform/terraform.tfstate&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (fileExists(<span class="string">&quot;.terraform.lock.hcl&quot;</span>)) &#123;</span><br><span class="line">                            sh <span class="string">&quot;rm -rf .terraform.lock.hcl&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (fileExists(<span class="string">&quot;status&quot;</span>)) &#123;</span><br><span class="line">                            sh <span class="string">&quot;rm status&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        // terraform initの実行</span><br><span class="line">                        sh <span class="string">&quot;terraform init&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;plan&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // terraformコードがあるディレクトリで処理</span><br><span class="line">                <span class="built_in">dir</span>(TERRAFORM_HOME) &#123;</span><br><span class="line">                    script &#123;</span><br><span class="line">                        // terraform planの実行</span><br><span class="line">                        sh <span class="string">&quot;set +e; terraform plan -out=plan.out -detailed-exitcode; echo \$? &gt; status&quot;</span></span><br><span class="line">                        planExitCode = readFile(<span class="string">&#x27;status&#x27;</span>).trim()</span><br><span class="line">                        println <span class="string">&quot;Terraform Plan Exit Code: <span class="variable">$&#123;planExitCode&#125;</span>&quot;</span></span><br><span class="line">                        // plan成功時かつ差分がない場合</span><br><span class="line">                        <span class="keyword">if</span> (planExitCode == <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">                            currentBuild.result = <span class="string">&#x27;SUCCESS&#x27;</span></span><br><span class="line">                            apply = <span class="string">&quot;0&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        // plan失敗時</span><br><span class="line">                        <span class="keyword">if</span> (planExitCode == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">                            currentBuild.result = <span class="string">&#x27;FAILURE&#x27;</span></span><br><span class="line">                            apply = <span class="string">&quot;0&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        // plan成功時かつ差分がある場合</span><br><span class="line">                        <span class="keyword">if</span> (planExitCode == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">                            stash name: <span class="string">&quot;plan&quot;</span>, includes: <span class="string">&quot;plan.out&quot;</span></span><br><span class="line">                            try &#123;</span><br><span class="line">                                // 承認フェーズ</span><br><span class="line">                                <span class="keyword">if</span> (apply != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">                                    input message: <span class="string">&#x27;Apply Plan?&#x27;</span>, ok: <span class="string">&#x27;Apply&#x27;</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                apply = <span class="string">&quot;1&quot;</span></span><br><span class="line">                            &#125; catch (err) &#123;</span><br><span class="line">                                currentBuild.result = <span class="string">&#x27;UNSTABLE&#x27;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;Apply&#x27;</span>) &#123;</span><br><span class="line">            // apply変数が1の場合、apply実行</span><br><span class="line">            when &#123;</span><br><span class="line">                expression &#123; apply == <span class="string">&quot;1&quot;</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // terraformコードがあるディレクトリで処理</span><br><span class="line">                <span class="built_in">dir</span>(TERRAFORM_HOME) &#123;</span><br><span class="line">                    script &#123;</span><br><span class="line">                        unstash <span class="string">&#x27;plan&#x27;</span></span><br><span class="line">                        // 前回のジョブ実行時のファイルを削除</span><br><span class="line">                        <span class="keyword">if</span> (fileExists(<span class="string">&quot;status.apply&quot;</span>)) &#123;</span><br><span class="line">                            sh <span class="string">&quot;rm status.apply&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        // terraform applyの実行</span><br><span class="line">                        ansiColor(<span class="string">&#x27;xterm&#x27;</span>) &#123;</span><br><span class="line">                            sh <span class="string">&quot;set +e; terraform apply plan.out; echo \$? &gt; status.apply&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        applyExitCode = readFile(<span class="string">&#x27;status.apply&#x27;</span>).trim()</span><br><span class="line">                        println <span class="string">&quot;applyExit Code: &quot;</span> + applyExitCode</span><br><span class="line">                        // apply成功時</span><br><span class="line">                        <span class="keyword">if</span> (applyExitCode == <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">                            currentBuild.result = <span class="string">&#x27;SUCCESS&#x27;</span></span><br><span class="line">                        &#125; // apply失敗時</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            currentBuild.result = <span class="string">&#x27;FAILURE&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        println <span class="string">&quot;currentBuild.result :&quot;</span> + currentBuild.result</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>terraform plan実行時に、-detailed-exitcodeオプションをつけることでexit codeで処理の分岐を実現しています。</p><ul><li>exit code 0 : No changesでplanが成功</li><li>exit code 1 : planがError</li><li>exit code 2 : 差分ありでplanが成功</li></ul><h1 id="Terraform-Plan-x2F-Applyジョブの実行"><a href="#Terraform-Plan-x2F-Applyジョブの実行" class="headerlink" title="Terraform Plan&#x2F;Applyジョブの実行"></a>Terraform Plan&#x2F;Applyジョブの実行</h1><p>Terraform Plan&#x2F;Applyジョブが作成できたので、ジョブを実際に実行していきます。<br>gcsバケットを作成するtfファイルを準備して、commit、リポジトリにpushします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_storage_bucket&quot;</span> <span class="string">&quot;bucket&quot;</span> &#123;</span><br><span class="line">  name          = <span class="string">&quot;test-bucket0101&quot;</span></span><br><span class="line">  location      = <span class="string">&quot;ASIA&quot;</span></span><br><span class="line">  force_destroy = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  public_access_prevention = <span class="string">&quot;enforced&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Terraform-Planジョブの実行"><a href="#Terraform-Planジョブの実行" class="headerlink" title="Terraform Planジョブの実行"></a>Terraform Planジョブの実行</h2><p>作成したTerraform Planジョブを実行してみましょう。<br>「ビルド実行」をクリックします。</p><img src="/images/20230330a/image_3.png" alt="" width="1200" height="901" loading="lazy"><p>ジョブが実行されています。<br><img src="/images/20230330a/image_4.png" alt="" width="1200" height="893" loading="lazy"></p><p>ジョブが正常終了したので、ログを確認するとplan結果が表示されています。<br>事前準備でgcsバケットを作成するtfファイルを準備したので、plan結果に「1 to add」と表示されました。<br><img src="/images/20230330a/plan.png" alt="" width="1200" height="904" loading="lazy"></p><h2 id="Terraform-Applyジョブの実行"><a href="#Terraform-Applyジョブの実行" class="headerlink" title="Terraform Applyジョブの実行"></a>Terraform Applyジョブの実行</h2><p>次に、作成したTerraform Applyジョブを実行してみましょう。</p><p>「ビルド実行」をクリックします。</p><img src="/images/20230330a/image_5.png" alt="" width="1200" height="907" loading="lazy"><p>ジョブが実行されています。</p><img src="/images/20230330a/image_6.png" alt="" width="1200" height="904" loading="lazy"><p>planフェーズでジョブが一時停止し、Apply Plan？と表示されます。</p><img src="/images/20230330a/image_7.png" alt="" width="772" height="236" loading="lazy"><p>ここでジョブのログを確認しに行き、Applyする前の内容を確認し、問題ないければ「Apply」をクリックしてTerraform Applyを実行します。もし、ここで問題があれば「Abort」をクリックすればジョブはTerraform Applyを実行することなく停止します。</p><img src="/images/20230330a/image_8.png" alt="" width="1200" height="858" loading="lazy"><p>「Apply」をクリックしてジョブが正常終了しました。<br><img src="/images/20230330a/image_9.png" alt="" width="782" height="222" loading="lazy"></p><p>ここでジョブのログを確認しに行くと「Apply complete! Resources: 1 added, 0 changed, 0 destroyed.」と表示され、正常終了したことが確認できました。<br><img src="/images/20230330a/image_10.png" alt="" width="1200" height="899" loading="lazy"></p><p>Google Cloudのコンソール画面を確認すると、Terraform Applyを実行したときに作成されたGCSバケットが確認できました。<br><img src="/images/20230330a/image_11.png" alt="png" width="1200" height="846" loading="lazy"></p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>JenkinsでのTerraform CI&#x2F;CDの記事を書きました。Jenkinsの設定や、Jenkinsfileを書くことも初めてだったので、Jenkins自体やJenkinsfileの文法などいろいろ勉強になりました。</p><p>各Cloud Providerのマネージドサービス（AWS CodeBuild &#x2F; Google Cloud Build）にJenkinsのビルド実行環境を委譲することが主流になっていますが、まだまだJenkinsを利用することもあると思いますので参考になれば幸いです。</p><p>次は岸下さんの<a href="/articles/20230331a/">Terraformでの機密情報の取り扱い on Google Cloud</a>記事です。</p><p>お楽しみを！！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/CI-CD/">CI/CD</category>
      
      <category domain="https://future-architect.github.io/tags/Jenkins/">Jenkins</category>
      
      
      <comments>https://future-architect.github.io/articles/20230330a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>tftarget:Terraformターゲットを選択的に実行するためのGo製CLIツール</title>
      <link>https://future-architect.github.io/articles/20230329a/</link>
      <guid>https://future-architect.github.io/articles/20230329a/</guid>
      <pubDate>Tue, 28 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230329a/tftarget-eyecatch.jpg&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;540&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;1-はじめに&quot;&gt;&lt;a href=&quot;#1-はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230329a/tftarget-eyecatch.jpg" alt="" width="960" height="540" loading="lazy"><h1 id="1-はじめに"><a href="#1-はじめに" class="headerlink" title="1 はじめに"></a>1 はじめに</h1><p>こんにちは。フューチャーアーキテクト株式会社のTIG&#x2F;EXユニット所属、宮永です。</p><p><a href="/articles/20230327a/">Terraform連載2023</a>の3リソース目の記事です</p><p>本記事では、Terraformのtargetオプションを簡単に実行するためのCLIツールを紹介します。<br>また、このCLIツールを開発するきっかけとなった経緯もご紹介します。</p><h2 id="Terraformのtarget指定に関する課題"><a href="#Terraformのtarget指定に関する課題" class="headerlink" title="Terraformのtarget指定に関する課題"></a>Terraformのtarget指定に関する課題</h2><p>チームで開発を行っている際、Terraformのtargetオプションを使ってリソースを適用するケースはしばしばあるかと思います。</p><p>私のチームでは、環境を本番環境、検証環境、開発環境の3つに分けています。本番環境と検証環境では、差分が出ないようにtargetオプションを使用せず、常にクラウド環境とTerraformの記述が同期された状態に保っています。</p><p>一方で、開発環境ではtargetオプションを頻繁に利用します。機能開発時に開発者それぞれがTerraformのmainブランチからブランチを切って開発を進めるため、クラウドの開発環境にはそれぞれの.tfファイルに定義されていないリソースが生成されるからです。</p><p>この状況下で、各開発者が無条件で<code>terraform apply</code>を実行すると、リソースが突然消えることがあります。</p><p>▼開発環境における各人の開発の様子<br><img src="/images/20230329a/image.png" alt="" width="1200" height="826" loading="lazy"></p><p>そこで、新しい機能を作成する際は、まず<code>terraform plan</code>を実行し、自分の変更点以外の差分が出た場合は<code>terraform apply -target=</code>コマンドを用意するようにしていました。</p><p>特定のリソースにのみapplyをしたいだけなのに、自分の差分だけをgrepして<code>terraform apply -target=</code>コマンドを準備するのは大変です。terraformのtargetオプションを簡単に実行したいとSlackで呟いたところ、共感を得たため、今回CLIツールとして開発することにしました。</p><h2 id="tftargetの紹介"><a href="#tftargetの紹介" class="headerlink" title="tftargetの紹介"></a>tftargetの紹介</h2><p>作成したツールはtftargetと命名し、こちらで公開しています。</p><p><a href="https://github.com/future-architect/tftarget/releases">https://github.com/future-architect/tftarget/releases</a></p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span>このCLIツールはTerraformコマンドのラッパーであり、内部でTerraformコマンドを呼び出しています。そのため、TerraformのCLIコマンドのインストールが必須です。</div><h1 id="2-tftargetの概要"><a href="#2-tftargetの概要" class="headerlink" title="2 tftargetの概要"></a>2 tftargetの概要</h1><h2 id="Terraformターゲットを選択的に実行する機能"><a href="#Terraformターゲットを選択的に実行する機能" class="headerlink" title="Terraformターゲットを選択的に実行する機能"></a>Terraformターゲットを選択的に実行する機能</h2><p>動作を直接見る方がわかりやすいと思いますので、tftargetを利用して<code>terraform apply</code>を実行するデモ画像を添付します。</p><img src="/images/20230329a/tftarget-apply.gif" alt="tftarget-apply.gif" width="854" height="431" loading="lazy"><p><code>terraform apply</code>の代わりに<code>tftarget apply</code>を実行します。<br>実行後、しばらく待つと<code>terraform plan</code>によって出力された差分がリソース名とアクション（<code>create</code>や<code>destroy</code>など）ともに表示されます。ユーザーは、<code>terraform apply</code>を適用したいリソースにチェックを入れてEnterを押すことで、選択的に<code>terraform apply</code>を実行できます。</p><p><code>apply</code>だけではなく、<code>plan</code>と<code>destroy</code>にも対応しています。</p><h2 id="どのようなシチュエーションで役立つか"><a href="#どのようなシチュエーションで役立つか" class="headerlink" title="どのようなシチュエーションで役立つか"></a>どのようなシチュエーションで役立つか</h2><p>冒頭で述べたように、複数人で開発を行い、各人が個別に定義したリソースに影響を与えずに開発を進める際に役立ちます。<code>terraform target</code>を簡単に実行したい場面全般で利用価値があるおもいます。</p><div class="note alert" style="background: #feebee; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-times-circle"></span>動作検証はAWS環境でしか行っていないため、GCPやAzure環境で利用する際は事前に動作確認をお願いします。</div><h1 id="3-tftargetのインストール方法"><a href="#3-tftargetのインストール方法" class="headerlink" title="3 tftargetのインストール方法"></a>3 tftargetのインストール方法</h1><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><p>Go製のCLIツールであるtftargetは、<code>go install</code>コマンドを使ってインストールできます。次のコマンドを実行してください。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/future-architect/tftarget@latest</span><br></pre></td></tr></table></figure><h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>Homebrewを利用している場合も、tftargetをインストールできます。以下のコマンドでインストールできます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install future-architect/tap/tftarget</span><br></pre></td></tr></table></figure><h2 id="マニュアルインストール"><a href="#マニュアルインストール" class="headerlink" title="マニュアルインストール"></a>マニュアルインストール</h2><p>各OS向けのバイナリファイルも提供されています。以下のリンクから、適切なシステムに対応するバイナリをダウンロードし、パスを設定して利用できます。</p><p><a href="https://github.com/future-architect/tftarget/releases">https://github.com/future-architect/tftarget/releases</a></p><h1 id="4-tftargetの使い方"><a href="#4-tftargetの使い方" class="headerlink" title="4 tftargetの使い方"></a>4 tftargetの使い方</h1><h2 id="基本的なコマンドの紹介"><a href="#基本的なコマンドの紹介" class="headerlink" title="基本的なコマンドの紹介"></a>基本的なコマンドの紹介</h2><p>tftargetには、<code>plan</code>、<code>apply</code>、<code>destroy</code>の3つのコマンドが用意されています。基本的な使い方は、これらのコマンドに共通しています。まず、<code>plan</code>コマンドの使い方を紹介します。</p><h3 id="tftarget-plan"><a href="#tftarget-plan" class="headerlink" title="tftarget plan"></a>tftarget plan</h3><p>通常の<code>plan</code>と同様に、以下のコマンドを実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tftarget plan</span><br></pre></td></tr></table></figure><p>しばらく待つと、チェックボックスが表示されます。これは、<code>terraform plan</code>を実行した結果をリソース名とアクションとして表示したものです。</p><img src="/images/20230329a/simple-usage-1.png" alt="simple-usage-1.png" width="1079" height="297" loading="lazy"><p>Spaceキーを押すことでチェックを付けることができます。右方向キーで全選択、左方向キーで選択解除ができます。上下方向キーとスペースキーで、<code>plan</code>を実行したいリソースを選択してください。</p><p>赤字で示しているexitのチェックを選択すると、何も実行せずに処理が終了します。</p><img src="/images/20230329a/simple-usage-2.png" alt="simple-usage-2.png" width="1079" height="297" loading="lazy"><p>リソースの選択が完了したら、Enterキーを押して処理を進めます。</p><img src="/images/20230329a/simple-usage-3.png" alt="simple-usage-3.png" width="1074" height="165" loading="lazy"><p><code>plan</code>の場合は、<code>terraform plan</code>の実行だけが行われます。そのため、処理はここで終了します。通常の<code>terraform plan</code>を実行した際の出力結果と共に、最後に選択したリソースのサマリが表示されます。</p><p>このサマリは、後述する<code>--summary</code>オプションを<code>false</code>に設定することで非表示にすることもできます。</p><p><code>tftarget plan</code>の説明は以上です。次に、<code>tftarget apply</code>について説明します。</p><h3 id="tftarget-apply"><a href="#tftarget-apply" class="headerlink" title="tftarget apply"></a>tftarget apply</h3><p><code>tftarget plan</code>とリソース選択する部分までは同じです。</p><p>リソースを選択してEnterキーを押すと、通常の<code>terraform apply</code>のように実行確認のプロンプトが表示されます。内容に問題がなければ、<code>yes</code>を選択してください。<br><img src="/images/20230329a/simple-usage-4.png" alt="simple-usage-4.png" width="1074" height="134" loading="lazy"></p><p><code>apply</code>が成功すると、<code>plan</code>の時と同様に、通常の<code>terraform apply</code>の出力結果に加えて、以下のようなサマリが出力されます。</p><img src="/images/20230329a/simple-usage-5.png" alt="simple-usage-5.png" width="1074" height="147" loading="lazy"><h3 id="tftarget-destroy"><a href="#tftarget-destroy" class="headerlink" title="tftarget destroy"></a>tftarget destroy</h3><p><code>tftarget apply</code>と利用方法は全く同じですので、ここでは説明を省略します。</p><h2 id="オプション"><a href="#オプション" class="headerlink" title="オプション"></a>オプション</h2><p>それぞれのコマンドには、以下のオプションが用意されています。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Flags:</span><br><span class="line">  -f, --filter string   filter by action. You can select create, destroy, update, or replace</span><br><span class="line">  -i, --items int       check box item size (default 25)</span><br><span class="line">  -p, --parallel int    limit the number of concurrent operations (default 10)</span><br><span class="line">  -s, --summary         summary of selected items (default true)</span><br></pre></td></tr></table></figure><h3 id="–filter-f"><a href="#–filter-f" class="headerlink" title="–filter, -f"></a>–filter, -f</h3><p><code>--filter</code>オプションでは、最初の選択肢表示画面でアクション別にフィルタリングを追加できます。例えば、新規作成のリソースの場合、<code>create</code>と指定することで選択肢に<code>create</code>のリソースのみを表示できます。利用可能なアクションは、<code>create</code>、<code>destroy</code>、<code>update</code>、<code>replace</code>の4つです。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tftarget apply -f create</span><br></pre></td></tr></table></figure><p>このオプションは、複数のアクションを指定することはできません。そのため、以下のようなコマンドはエラーとなります。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tftarget apply -f create destroy</span><br></pre></td></tr></table></figure><h3 id="–items-i"><a href="#–items-i" class="headerlink" title="–items, -i"></a>–items, -i</h3><p><code>--items</code>オプションでは、チェックボックスの表示数を指定できます。デフォルトでは25個のリソースが表示されますが、このオプションを使用して表示数を増減させることができます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tftarget apply -i 50</span><br></pre></td></tr></table></figure><p>このコマンドは、最初の選択肢表示画面で最大50個のリソースが表示されるように設定します。</p><h3 id="–parallel-p"><a href="#–parallel-p" class="headerlink" title="–parallel, -p"></a>–parallel, -p</h3><p><code>--parallel</code>オプションはTerraform CLIで実装されている<code>-parallelism</code>に並列数を渡すためのオプションです。デフォルトでは10が設定されています。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tftarget apply -p 30</span><br></pre></td></tr></table></figure><h3 id="–summary-s"><a href="#–summary-s" class="headerlink" title="–summary, -s"></a>–summary, -s</h3><p><code>--summary</code>オプションでは、選択したリソースのサマリ表示を有効または無効にすることができます。デフォルトでは、<code>plan</code>や<code>apply</code>の結果にサマリが表示されますが、このオプションを使用してサマリ表示をオフにすることができます。</p><img src="/images/20230329a/simple-usage-5_2.png" alt="simple-usage-5.png" width="1074" height="147" loading="lazy"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tftarget apply -s false</span><br></pre></td></tr></table></figure><p>このコマンドは、<code>apply</code>の結果にサマリが表示されないように設定します。</p><p>以上で、tftargetの使い方についての説明を終了します。</p><h1 id="5-バグ報告や機能提案の受付方法"><a href="#5-バグ報告や機能提案の受付方法" class="headerlink" title="5 バグ報告や機能提案の受付方法"></a>5 バグ報告や機能提案の受付方法</h1><p>開発してまだ日が浅いのでバグや機能提案がある際はこちらに起票のほどよろしくお願いします。</p><p><a href="https://github.com/future-architect/tftarget/issues">https://github.com/future-architect/tftarget/issues</a></p><h1 id="6-まとめ"><a href="#6-まとめ" class="headerlink" title="6 まとめ"></a>6 まとめ</h1><h2 id="tftargetが解決する問題点"><a href="#tftargetが解決する問題点" class="headerlink" title="tftargetが解決する問題点"></a>tftargetが解決する問題点</h2><p>tftargetを使用することで、簡単に<code>terraform target</code>を実行できます。特に、複数のメンバーが開発を行う際、各メンバーが定義したリソースを破壊することなく、安全に運用できるようになります。</p><h2 id="今後の展望やアップデート予定"><a href="#今後の展望やアップデート予定" class="headerlink" title="今後の展望やアップデート予定"></a>今後の展望やアップデート予定</h2><p>現在、tftargetはAWS環境でのみ動作検証が行われています。今後は、GCPやAzureでの動作確認や改善を行っていく予定です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      
      <comments>https://future-architect.github.io/articles/20230329a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TerraCurl でProviderがサポートしていないリソースを作成する</title>
      <link>https://future-architect.github.io/articles/20230328a/</link>
      <guid>https://future-architect.github.io/articles/20230328a/</guid>
      <pubDate>Mon, 27 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230328a/top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;356&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230328a/top.png" alt="" width="600" height="356" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Terraformがv1.4のリリースおめでとうございます。<a href="/articles/20230327a/">Terraform連載2023</a> の2リソース目の記事です。</p><p>v1.4リリースとは関係ないですが、<a href="https://registry.terraform.io/providers/devops-rob/terracurl/latest/docs">TerraCurl</a>というツールが面白そうだったので触ってみました。TerraCurlは以下の2023.2.22 のHashiCorpさんのブログで紹介されています。</p><ul><li><a href="https://www.hashicorp.com/blog/writing-terraform-for-unsupported-resources">Writing Terraform for unsupported resources - HashiCorp Blog</a></li></ul><p>リポジトリは<a href="https://github.com/devops-rob/terraform-provider-terracurl">devops-rob&#x2F;terraform-provider-terracurl</a>です。</p><h2 id="TerraCurlの使いどころ"><a href="#TerraCurlの使いどころ" class="headerlink" title="TerraCurlの使いどころ"></a>TerraCurlの使いどころ</h2><p>AWS、Google Cloud、Azureなど、日進月歩で新しいサービス、新機能が追加されています。例えば以下は <a href="https://www.itmedia.co.jp/enterprise/articles/2103/08/news067.html">ITmediaさんのページ</a> から引用した、AWSの機能追加の推移ですがその勢いは加速しています。</p><img src="/images/20230328a/kz_wk220322_02_MASK.jpg" alt="kz_wk220322_02_MASK.jpg" width="590" height="333" loading="lazy"><p>クラウドベンダー、SaaSサービス側の機能追加に合わせて、Terraform Provider側の開発が進むので、新しい機能を利用しようとしても、まだ対応していない、といった場面がまれに発生します。Provider側へPull Requestを出しOSSコントリビュートして推進に関与するというのがあるべきアプローチの1つだと思いますが、業務スケジュール上、できるだけ急ぎで対応したいということが多いでしょう。</p><p>こういった場面で役立つのが今回紹介するTerraCurlです。</p><h2 id="local-exec"><a href="#local-exec" class="headerlink" title="local-exec"></a>local-exec</h2><p>従来、Providerが対応していないとか、そもそもProviderが存在しないリソースを管理したい時、頼りにしていたのは <a href="https://developer.hashicorp.com/terraform/language/resources/provisioners/local-exec#example-usage">local-exec</a> Provisioner でした。Provisionerというのは、Terraform側が用意した脱出ハッチのような仕組みで、任意のスクリプトをTerraformコマンド経由で呼び出せる機能です<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。<a href="https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax#provisioners-are-a-last-resort">ドキュメント</a>にも a Last Resort（最終手段）と書いてある奥の手です。</p><p>通常は <code>terraform apply</code>で呼ばれるスクリプトを定義できますが、 <code>when=destory</code> と合わせると <code>terraform destroy</code> に対応させることもできます。さらにがんばるなら <code>null_resource</code>の<code>triggers</code> で実行スクリプトなどのハッシュ値を管理しておくことで、実行スクリプトに更新をトリガーにすることもできます（もちろん、実行スクリプトは冪等に作る必要があります）。書き出してみると複雑に見えますが、大部分は <code>local-exec</code> で初期作成時に呼び出すスクリプトを作れば事足りることが多いため、こだわらず簡易的にリソースをTerraform管理下に置くときは、よく使われると思います。</p><figure class="highlight sh"><figcaption><span>local-execイメージ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;my_custom_resource&quot;</span> &#123;</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">  triggers = &#123;</span><br><span class="line">    my_custom_resource_id = <span class="string">&quot;<span class="variable">$&#123;sha256(file(&quot;my_custom_resource.sh&quot;))&#125;</span>&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  provisioner <span class="string">&quot;local-exec&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">command</span> = <span class="string">&quot;./my_custom_resource.sh create&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  provisioner <span class="string">&quot;local-exec&quot;</span> &#123;</span><br><span class="line">    when    = destroy</span><br><span class="line">    <span class="built_in">command</span> = <span class="string">&quot;./my_custom_resource.sh destroy&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>私の観測上、よく見るやり方としては、<code>local-exec</code> で一時的にしのぎ（AWSであれば<code>awscli</code>をラップしたシェルスクリプトを用意して）、Providerが新機能の追加されたタイミングで <code>local-exec</code> から Providerが提供する機能に置き換えていくというものです。GUIや個別のスクリプトを用意する方法と違い、 <code>terraform apply</code> で書く環境にリリースできるため、CI&#x2F;CD定義もシンプルに、オペミスも減らせるということでした。</p><p>今回紹介するTerraCurlも、上記で説明した脱出ハッチ的な <code>local-exec</code>の使い方と似たようなユースケースになります。ネイティブのProviderではサポートされていないけど、サービス側のAPIではサポートされている場合に利用します。Provider側ですでにリソース作成が提供されていればTerraCurlを使う必要はありません。</p><h2 id="TerraCurlでAPI呼び出し"><a href="#TerraCurlでAPI呼び出し" class="headerlink" title="TerraCurlでAPI呼び出し"></a>TerraCurlでAPI呼び出し</h2><p><a href="https://registry.terraform.io/providers/devops-rob/terracurl/latest/docs/resources/request">TerraCurlドキュメントのExcample</a> を元に、Qiita APIを用いてダミーの記事を作成しています。Qiita記事をTerraform管理する対象したいユースケースは皆無だと思います。TerraCurlを使うという1点のみが理由です。</p><p>利用しているトークンは<a href="https://qiita.com/settings/tokens/new">アクセストークンの発行</a>ページから取得します。<code>write_qiita</code> のスコープも必要です。</p><p>取得したQiitaトークンは環境変数にセットして参照できるようにしておきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> TF_VAR_qiita_token=xxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    terracurl = &#123;</span><br><span class="line">      <span class="built_in">source</span>  = <span class="string">&quot;devops-rob/terracurl&quot;</span></span><br><span class="line">      version = <span class="string">&quot;1.1.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">&quot;terracurl&quot;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">variable <span class="string">&quot;qiita_token&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">type</span>      = string</span><br><span class="line">  sensitive = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;terracurl_request&quot;</span> <span class="string">&quot;qiita_article&quot;</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;qiita-article&quot;</span></span><br><span class="line"></span><br><span class="line">  url          = <span class="string">&quot;https://qiita.com/api/v2/items&quot;</span></span><br><span class="line">  method       = <span class="string">&quot;POST&quot;</span></span><br><span class="line">  request_body = &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;&quot;title&quot;:&quot;TerraCurl投稿テスト2023.3.27&quot;, &quot;body&quot;:&quot;# Example\nTerraCurlやってみた&quot;, &quot;private&quot;:true, &quot;tags&quot;:[&#123;&quot;name&quot;:&quot;TerraCurl&quot;&#125;]&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">  headers = &#123;</span><br><span class="line">    Authorization = <span class="string">&quot;Bearer <span class="variable">$&#123;var.qiita_token&#125;</span>&quot;</span></span><br><span class="line">    Content-Type  = <span class="string">&quot;application/json&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  response_codes = [</span><br><span class="line">    201</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output <span class="string">&quot;qiita_article_response&quot;</span> &#123;</span><br><span class="line">  value = <span class="built_in">basename</span>(jsondecode(terracurl_request.qiita_article.response).url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行すると最後に output の内容が表示されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">$ terraform apply</span><br><span class="line">2023-03-27T10:59:30.450+0900 [INFO]  Terraform version: 1.3.3</span><br><span class="line">2023-03-27T10:59:30.522+0900 [INFO]  Go runtime version: go1.19.1</span><br><span class="line">2023-03-27T10:59:30.527+0900 [INFO]  CLI args: []string&#123;<span class="string">&quot;terraform&quot;</span>, <span class="string">&quot;apply&quot;</span>&#125;</span><br><span class="line">(中略)</span><br><span class="line"></span><br><span class="line">Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:</span><br><span class="line">  + create</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># terracurl_request.qiita_article will be created</span></span><br><span class="line">  + resource <span class="string">&quot;terracurl_request&quot;</span> <span class="string">&quot;qiita_article&quot;</span> &#123;</span><br><span class="line">      + destroy_retry_interval = 10</span><br><span class="line">      + headers                = &#123;</span><br><span class="line">          + <span class="string">&quot;Authorization&quot;</span> = (sensitive)</span><br><span class="line">          + <span class="string">&quot;Content-Type&quot;</span>  = <span class="string">&quot;application/json&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      + <span class="built_in">id</span>                     = (known after apply)</span><br><span class="line">      + method                 = <span class="string">&quot;POST&quot;</span></span><br><span class="line">      + name                   = <span class="string">&quot;qiita-article&quot;</span></span><br><span class="line">      + request_body           = jsonencode(</span><br><span class="line">            &#123;</span><br><span class="line">              + body    = &lt;&lt;-<span class="string">EOT</span></span><br><span class="line"><span class="string">                    # Example</span></span><br><span class="line"><span class="string">                    TerraCurlやってみた</span></span><br><span class="line"><span class="string">                EOT</span></span><br><span class="line">              + private = <span class="literal">true</span></span><br><span class="line">              + tags    = [</span><br><span class="line">                  + &#123;</span><br><span class="line">                      + name = <span class="string">&quot;TerraCurl&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">              + title   = <span class="string">&quot;TerraCurl投稿テスト2023.3.27&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">      + request_url_string     = (known after apply)</span><br><span class="line">      + response               = (known after apply)</span><br><span class="line">      + response_codes         = [</span><br><span class="line">          + <span class="string">&quot;201&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">      + retry_interval         = 10</span><br><span class="line">      + status_code            = (known after apply)</span><br><span class="line">      + url                    = <span class="string">&quot;https://qiita.com/api/v2/items&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 1 to add, 0 to change, 0 to destroy.</span><br><span class="line"></span><br><span class="line">Changes to Outputs:</span><br><span class="line">  + qiita_article_response = (known after apply)</span><br><span class="line"></span><br><span class="line">Do you want to perform these actions?</span><br><span class="line">  Terraform will perform the actions described above.</span><br><span class="line">  Only <span class="string">&#x27;yes&#x27;</span> will be accepted to approve.</span><br><span class="line"></span><br><span class="line">  Enter a value: <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">Apply complete! Resources: 1 added, 0 changed, 0 destroyed.</span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line"></span><br><span class="line">qiita_article_response = <span class="string">&quot;6410f22e585d0907005e&quot;</span></span><br></pre></td></tr></table></figure><p>限定公開で記事を作成したのでブラウザで確認します。URLのIDが出力された値と一致していることがわかります。</p><img src="/images/20230328a/response.png" alt="" width="1200" height="924" loading="lazy"><p>※URLまでキャプチャに載せていますが、テスト投稿した記事は削除済みです</p><h2 id="Destoryする時どうするの？"><a href="#Destoryする時どうするの？" class="headerlink" title="Destoryする時どうするの？"></a>Destoryする時どうするの？</h2><p>Qiita APIの記事投稿に関して、IDは公開後に分かります（APIで指定すれば固定できるかも知れませんが）。そのため、以下のような <code>output</code> で取得した値を、<code>destory_url</code> に指定できると良いのですが、これは <code>terraform apply</code> に決定する値ですので、循環参照となり指定できません。このあたりはどうするか一工夫が必要そうです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;terracurl_request&quot;</span> <span class="string">&quot;qiita_article&quot;</span> &#123;</span><br><span class="line">  <span class="comment"># 中略</span></span><br><span class="line"></span><br><span class="line">  destroy_url    = <span class="string">&quot;https://qiita.com/api/v2/items/<span class="variable">$&#123;output.qiita_article_response.value&#125;</span>&quot;</span> // ★これが使えたら良いが..</span><br><span class="line">  destroy_method = <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">  destroy_headers = &#123;</span><br><span class="line">      Authorization = <span class="string">&quot;Bearer <span class="variable">$&#123;var.qiita_token&#125;</span>&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="TerraCurl所感"><a href="#TerraCurl所感" class="headerlink" title="TerraCurl所感"></a>TerraCurl所感</h2><p>ドキュメントを見ると、相互TLS認証やリトライなど作り込みが良さそうな部分が見られ、フィットするのであれば非常に有用そうでした。</p><p>一方で、ことAWSに関しては、 <code>awscli</code> が対応していない部分を探すのが難しく、<code>awscli</code> がサポートしているなら若干の移植性は下がるものの、 <code>local-exec</code> 経由で<code>awscli</code> を利用するほうが保守性が高まりそうだなと思いました。一方で、プラットフォーム側が意図的にサポートしない機能（ブログではVault Providerはあえて、クラスタのunsealコマンドをサポートしていないとある）の場合は、有用だなと思いました。</p><p>また、前章のDestoryにも書きましたが作成時のレスポンスに含まれる値を保持したいときの取り扱いは面倒そうと思います。Createだけの限定された条件とか、Destory時のURLやパラメータが apply する前に分かるのであれば便利そうだという印象です。</p><p>もし、上記に一致するような条件で、従来 <code>local-exec</code> で実行していたけど、内部的には <code>curl</code> コマンドだけだった場合には、 <code>tf</code> ファイルで完結するので素晴らしいツールだと思います。スクリプトを別途用意しなくてよいのは開発、保守的にも嬉しいと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>TerraCurlを使ってみました。ツールの命名が素晴らしくcurlで済ませられるようなリソースに関してはシンデレラフィットしそうなProviderです。</p><p>作成時のレスポンスの値を、Destory時などに使いまわしたい場合などは少し取り回しが難しそうなので、取り扱いに注意して導入したいと思います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">他にも <code>file</code> や <code>remote-exec</code> のProvisionerがあります。過去にはChef、Habitat、Puppet、Salt Masterless のProvisionerがあったようですが、 Terraform v0.15.0で削除されたようです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/TerraCurl/">TerraCurl</category>
      
      
      <comments>https://future-architect.github.io/articles/20230328a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Terraform 1.4 Update:Private Service Connectを利用したbackend/gcsへのアクセス</title>
      <link>https://future-architect.github.io/articles/20230327b/</link>
      <guid>https://future-architect.github.io/articles/20230327b/</guid>
      <pubDate>Sun, 26 Mar 2023 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot; title=&quot;初めに&quot;&gt;&lt;/a&gt;初めに&lt;/h1&gt;&lt;p&gt;こんにちは！筋肉エンジニアのTIG渡邉です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>こんにちは！筋肉エンジニアのTIG渡邉です。<a href="/articles/20230327a/">Terraform連載2023</a> の1リソース目の記事です。</p><p>Terraform 1.4.0の<code>ENHANCEMENTS</code>で以下の機能が追加されました。</p><blockquote><p>backend&#x2F;gcs: Add storage_custom_endpoint argument, to allow communication with the backend via a Private Service Connect endpoint.</p></blockquote><p>内容はtfstateが保存されているGCSへのアクセスがインターネット経由ではなく、Private Service Connectエンドポイントを利用したプライベートネットワーク経由でbackendに指定したGCSへアクセスすることができる機能です。今回はこの機能を検証します。</p><p>以下のリソースは構築済みとします。</p><ul><li>Google Cloud Project</li><li>Network系リソース（VPC&#x2F;Subnet&#x2F;Cloud Nat&#x2F;Cloud Router&#x2F;Firewall）</li><li>GCE</li><li>GCS</li></ul><h1 id="Private-Service-Connectを利用しない構成"><a href="#Private-Service-Connectを利用しない構成" class="headerlink" title="Private Service Connectを利用しない構成"></a>Private Service Connectを利用しない構成</h1><p>Private Service Connectを利用しない構成はこちらです。</p><p>GCEにTerraformをインストールし、Terraform Serverとしています。Terraform Serverでterraform initを実行するとVPCに構築済みのCloud Nat&#x2F;インターネット経由でGCSへアクセスされます。</p><p>この構成は皆さんお使いのいつもの構成だと思います。</p><img src="/images/20230327b/architecture01.drawio.png" alt="" width="772" height="591" loading="lazy"><h1 id="Private-Service-Connectを利用した構成"><a href="#Private-Service-Connectを利用した構成" class="headerlink" title="Private Service Connectを利用した構成"></a>Private Service Connectを利用した構成</h1><p>Private Service Connectを利用した構成はこちらになります。</p><p>こちらもGCEにTerraformをインストールし、Terraform Serverとしています。Terraform Serverでterraform initを実行するとVPCに構築済みのCloud Nat&#x2F;インターネットを経由するのではなく、Private Service Connect Endpoint(10.0.3.0)を経由してGCSへアクセスされます。</p><p>今回はこの構成を検証します。</p><img src="/images/20230327b/architecture02.drawio.png" alt="architecture02.drawio.png" width="772" height="591" loading="lazy"><h2 id="Private-Service-Connectとは"><a href="#Private-Service-Connectとは" class="headerlink" title="Private Service Connectとは"></a>Private Service Connectとは</h2><p>Private Service Connectとは一言でいうと、Google Cloud API にプライベートネットワーク経由でアクセスするための機能になります。</p><p>詳しくはG-genの杉村さんの技術ブログがすごくわかりやすくまとまっているのでこちらを参照ください。</p><ul><li><a href="https://blog.g-gen.co.jp/entry/google-api-private-service-connect-explained">https://blog.g-gen.co.jp/entry/google-api-private-service-connect-explained</a></li></ul><h2 id="Private-Service-Connectの作成"><a href="#Private-Service-Connectの作成" class="headerlink" title="Private Service Connectの作成"></a>Private Service Connectの作成</h2><p>以下公式ドキュメントを参考にPrivate Service Connectを作成します。</p><p><a href="https://cloud.google.com/vpc/docs/configure-private-service-connect-apis?hl=ja#console_1">https://cloud.google.com/vpc/docs/configure-private-service-connect-apis?hl=ja#console_1</a></p><p>ネットワークサービス→Private Service Connectをクリックします。<br>Private Service Connectから「エンドポイントを接続」をクリックします。</p><img src="/images/20230327b/image.png" alt="" width="1200" height="856" loading="lazy"><ul><li>対象：すべてのGoogle API</li><li>エンドポイント名：sampleendpoint</li><li>ネットワーク：my-stg-environment01-vpc</li><li>sample-endpoint-ip (10.0.3.0)</li><li>リージョン：asia-northeast1</li><li>名前空間：自動割り当て済みのものを設定</li></ul><p>を設定し、「エンドポイントを追加」をクリックします。</p><img src="/images/20230327b/image_2.png" alt="" width="1200" height="847" loading="lazy"><p>するとPrivate Service Connectの接続エンドポイントが作成されます。</p><img src="/images/20230327b/image_3.png" alt="" width="1200" height="855" loading="lazy"><p>Service Directoryも作成されています。</p><img src="/images/20230327b/image_4.png" alt="" width="1200" height="851" loading="lazy"><p>限定公開DNSゾーンも作成されています。<br><img src="/images/20230327b/image_5.png" alt="" width="1200" height="852" loading="lazy"></p><p>ここまででPrivate Service Connectの設定は完了です。</p><p>Private Service Connectエンドポイントが正しく機能しているかを確認するために、GCEへSSHしてcurlコマンドを実行してエンドポイントへアクセスします。</p><p>エンドポイントが機能している場合は、HTTP 204 レスポンス コードが表示されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ curl -v 10.0.3.0/generate_204</span><br><span class="line">*   Trying 10.0.3.0:80...</span><br><span class="line">* TCP_NODELAY <span class="built_in">set</span></span><br><span class="line">* Connected to 10.0.3.0 (10.0.3.0) port 80 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET /generate_204 HTTP/1.1</span><br><span class="line">&gt; Host: 10.0.3.0</span><br><span class="line">&gt; User-Agent: curl/7.68.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">* Mark bundle as not supporting multiuse</span><br><span class="line">&lt; HTTP/1.1 204 No Content　★204のレスポンスを確認</span><br><span class="line">&lt; Content-Length: 0</span><br><span class="line">&lt; Cross-Origin-Resource-Policy: cross-origin</span><br><span class="line">&lt; Date: Sat, 25 Mar 2023 05:02:30 GMT</span><br><span class="line">&lt;</span><br><span class="line">* Connection <span class="comment">#0 to host 10.0.3.0 left intact</span></span><br></pre></td></tr></table></figure><h2 id="Terraform-の設定"><a href="#Terraform-の設定" class="headerlink" title="Terraform の設定"></a>Terraform の設定</h2><p>準備ができたのでTerraform 1.4.0の追加機能を検証していきます。<br>Terraform公式ドキュメント(1.4.0)のBackend&#x2F;gcsにstorage_custom_endpointが追加されていることが確認できます。</p><p><a href="https://developer.hashicorp.com/terraform/language/settings/backends/gcs">https://developer.hashicorp.com/terraform/language/settings/backends/gcs</a></p><blockquote><p>storage_custom_endpoint &#x2F; GOOGLE_BACKEND_STORAGE_CUSTOM_ENDPOINT &#x2F; GOOGLE_STORAGE_CUSTOM_ENDPOINT - (Optional) A URL containing three parts: the protocol, the DNS name pointing to a Private Service Connect endpoint, and the path for the Cloud Storage API (&#x2F;storage&#x2F;v1&#x2F;b, see here). You can either use a DNS name automatically made by the Service Directory or a custom DNS name made by you. For example, if you create an endpoint called xyz and want to use the automatically-created DNS name, you should set the field value as <a href="https://storage-xyz.p.googleapis.com/storage/v1/b">https://storage-xyz.p.googleapis.com/storage/v1/b</a>. For help creating a Private Service Connect endpoint using Terraform, see this guide.</p></blockquote><h2 id="Private-Service-Connect経由のGCSアクセス確認"><a href="#Private-Service-Connect経由のGCSアクセス確認" class="headerlink" title="Private Service Connect経由のGCSアクセス確認"></a>Private Service Connect経由のGCSアクセス確認</h2><h3 id="Terraform-Backendの設定"><a href="#Terraform-Backendの設定" class="headerlink" title="Terraform Backendの設定"></a>Terraform Backendの設定</h3><p>backend.tfにterraform 1.4で追加された<code>storage_custom_endpoint</code>を追加してみます。</p><p>こちらの設定を追加することで、tfstateが保存されているbackendのGCSへのアクセスをPrivate Service Connectのエンドポイント経由にすることができます。<br><code>https://storage-xyz.p.googleapis.com/storage/v1/b</code>をベースに値の置き換えをします。</p><ul><li>xyz→sampleendpoint（Private Service Connectのエンドポイント名）</li></ul><figure class="highlight plaintext"><figcaption><span>backend.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  backend &quot;gcs&quot; &#123;</span><br><span class="line">    bucket                  = &quot;xxxxxxxxxxxxxxxxx&quot;</span><br><span class="line">    prefix                  = &quot;terraform/state&quot;</span><br><span class="line">    storage_custom_endpoint = &quot;https://storage-sampleendpoint.p.googleapis.com/storage/v1/b&quot; ★追加</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tcpdumpを利用したPrivate-Service-Connect経由のGCSアクセス確認"><a href="#tcpdumpを利用したPrivate-Service-Connect経由のGCSアクセス確認" class="headerlink" title="tcpdumpを利用したPrivate Service Connect経由のGCSアクセス確認"></a>tcpdumpを利用したPrivate Service Connect経由のGCSアクセス確認</h3><p>tcpdumpを利用してPrivate Service Connectのエンドポイント(10.0.3.0)を経由してbackendのgcsへアクセスできていることを確認します。</p><p>コンソールを2つ開きます。</p><ul><li>terraform initを実行するコンソール</li><li>tcpdumpを実行するコンソール</li></ul><p>先にtcpdumpを実行するコンソールからtcpdumpコマンド<code>sudo tcpdump dst 10.0.3.0</code>を実行し、Private Service Connectのエンドポイント(10.0.3.0)を経由するパケットをキャプチャする準備をします。</p><p>tcpdumpコマンドを実行後に、terraform initを実行するコンソールからterraform initを実行するとPrivate Service Connectのエンドポイント(10.0.3.0)を経由するパケットがキャプチャされていることが確認できました。Private Service Connectのエンドポイント(10.0.3.0)を経由して無事GCSにアクセスできたようです。</p><figure class="highlight bash"><figcaption><span>terraform init実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ <span class="built_in">date</span> &amp;&amp; terraform init</span><br><span class="line">Sat Mar 25 02:13:50 UTC 2023</span><br><span class="line"></span><br><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">- Reusing previous version of hashicorp/google from the dependency lock file</span><br><span class="line">- Using previously-installed hashicorp/google v4.57.0</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br><span class="line"></span><br><span class="line">You may now begin working with Terraform. Try running <span class="string">&quot;terraform plan&quot;</span> to see</span><br><span class="line">any changes that are required <span class="keyword">for</span> your infrastructure. All Terraform commands</span><br><span class="line">should now work.</span><br><span class="line"></span><br><span class="line">If you ever <span class="built_in">set</span> or change modules or backend configuration <span class="keyword">for</span> Terraform,</span><br><span class="line">rerun this <span class="built_in">command</span> to reinitialize your working directory. If you forget, other</span><br><span class="line">commands will detect it and remind you to <span class="keyword">do</span> so <span class="keyword">if</span> necessary.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>tcpdumpの実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~$ <span class="built_in">date</span> &amp;&amp; sudo tcpdump dst 10.0.3.0</span><br><span class="line">Sat Mar 25 02:13:49 UTC 2023</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on ens4, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">02:13:50.920469 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [S], <span class="built_in">seq</span> 665228907, win 65320, options [mss 1420,sackOK,TS val 3343093648 ecr 0,nop,wscale 7], length 0</span><br><span class="line">02:13:50.921158 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 692049395, win 511, options [nop,nop,TS val 3343093649 ecr 2560562916], length 0</span><br><span class="line">02:13:50.921387 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 0:305, ack 1, win 511, options [nop,nop,TS val 3343093649 ecr 2560562916], length 305</span><br><span class="line">02:13:50.959772 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 7041, win 479, options [nop,nop,TS val 3343093687 ecr 2560562955], length 0</span><br><span class="line">02:13:50.959781 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 9820, win 467, options [nop,nop,TS val 3343093687 ecr 2560562955], length 0</span><br><span class="line">02:13:50.975543 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 305:369, ack 9820, win 501, options [nop,nop,TS val 3343093703 ecr 2560562955], length 64</span><br><span class="line">02:13:50.975657 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 369:455, ack 9820, win 501, options [nop,nop,TS val 3343093703 ecr 2560562955], length 86</span><br><span class="line">02:13:50.975798 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 9913, win 501, options [nop,nop,TS val 3343093703 ecr 2560562971], length 0</span><br><span class="line">02:13:50.975857 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 455:1659, ack 9913, win 501, options [nop,nop,TS val 3343093703 ecr 2560562971], length 1204</span><br><span class="line">02:13:50.976394 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 1659:1690, ack 9913, win 501, options [nop,nop,TS val 3343093704 ecr 2560562971], length 31</span><br><span class="line">02:13:50.993635 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 11081, win 501, options [nop,nop,TS val 3343093721 ecr 2560562989], length 0</span><br><span class="line">02:13:50.993983 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 11151, win 501, options [nop,nop,TS val 3343093722 ecr 2560562989], length 0</span><br><span class="line">02:13:50.994012 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 1690:1729, ack 11151, win 501, options [nop,nop,TS val 3343093722 ecr 2560562989], length 39</span><br><span class="line">02:13:51.194072 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 1729:1854, ack 11151, win 501, options [nop,nop,TS val 3343093922 ecr 2560562994], length 125</span><br><span class="line">02:13:51.213234 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 11863, win 501, options [nop,nop,TS val 3343093941 ecr 2560563208], length 0</span><br><span class="line">02:13:51.213423 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 1854:1893, ack 11863, win 501, options [nop,nop,TS val 3343093941 ecr 2560563208], length 39</span><br><span class="line">02:13:51.213662 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 1893:2137, ack 11863, win 501, options [nop,nop,TS val 3343093941 ecr 2560563208], length 244</span><br><span class="line">02:13:51.237109 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 12963, win 501, options [nop,nop,TS val 3343093965 ecr 2560563232], length 0</span><br><span class="line">02:13:51.237265 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 2137:2176, ack 12963, win 501, options [nop,nop,TS val 3343093965 ecr 2560563232], length 39</span><br><span class="line">02:13:51.237810 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 2176:2256, ack 12963, win 501, options [nop,nop,TS val 3343093965 ecr 2560563232], length 80</span><br><span class="line">02:13:51.257360 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 13326, win 501, options [nop,nop,TS val 3343093985 ecr 2560563253], length 0</span><br><span class="line">02:13:51.257569 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 13396, win 501, options [nop,nop,TS val 3343093985 ecr 2560563253], length 0</span><br><span class="line">02:13:51.257665 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 2256:2295, ack 13396, win 501, options [nop,nop,TS val 3343093985 ecr 2560563253], length 39</span><br><span class="line">02:13:51.257755 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 2295:2450, ack 13396, win 501, options [nop,nop,TS val 3343093985 ecr 2560563253], length 155</span><br><span class="line">02:13:51.273998 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 14405, win 501, options [nop,nop,TS val 3343094002 ecr 2560563269], length 0</span><br><span class="line">02:13:51.274108 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 14475, win 501, options [nop,nop,TS val 3343094002 ecr 2560563269], length 0</span><br><span class="line">02:13:51.274127 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 2450:2489, ack 14475, win 501, options [nop,nop,TS val 3343094002 ecr 2560563269], length 39</span><br><span class="line">02:13:51.707967 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [F.], <span class="built_in">seq</span> 2489, ack 14475, win 501, options [nop,nop,TS val 3343094436 ecr 2560563274], length 0</span><br><span class="line">02:13:51.708100 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 14476, win 501, options [nop,nop,TS val 3343094436 ecr 2560563703], length 0</span><br></pre></td></tr></table></figure><p>また、nslookupコマンドでbackend.tfのstorage_custom_endpointに設定している<code>storage-sampleendpoint.p.googleapis.com</code>を指定して実行すると10.0.3.0で名前解決されることも確認できました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ nslookup storage-sampleendpoint.p.googleapis.com</span><br><span class="line">Server:         127.0.0.53</span><br><span class="line">Address:        127.0.0.53<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:   storage-sampleendpoint.p.googleapis.com</span><br><span class="line">Address: 10.0.3.0</span><br></pre></td></tr></table></figure><h1 id="余談"><a href="#余談" class="headerlink" title="余談"></a>余談</h1><p>余談ですが、<code>tcpdump -n -vv dst port 443</code>コマンドを実行してterraform initを実施し、GCEから443ポートへアクセスしたパケットをキャプチャしてみました。</p><figure class="highlight bash"><figcaption><span>tcpdump -n -vv dst port 443コマンド実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ sudo tcpdump -n -vv dst port 443</span><br><span class="line">tcpdump: listening on ens4, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">05:14:59.618319 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11848, offset 0, flags [DF], proto TCP (6), length 60)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [S], <span class="built_in">cksum</span> 0x1730 (incorrect -&gt; 0xad7d), <span class="built_in">seq</span> 1890652633, win 65320, options [mss 1420,sackOK,TS val 3353962346 ecr 0,nop,wscale 7], length 0</span><br><span class="line">05:14:59.618778 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11849, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x3d3b), <span class="built_in">seq</span> 1890652634, ack 3216389491, win 511, options [nop,nop,TS val 3353962346 ecr 1133339465], length 0</span><br><span class="line">05:14:59.619011 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11850, offset 0, flags [DF], proto TCP (6), length 357)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x1859 (incorrect -&gt; 0x80b7), <span class="built_in">seq</span> 0:305, ack 1, win 511, options [nop,nop,TS val 3353962347 ecr 1133339465], length 305</span><br><span class="line">05:14:59.655194 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11851, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x2063), <span class="built_in">seq</span> 305, ack 7041, win 477, options [nop,nop,TS val 3353962383 ecr 1133339501], length 0</span><br><span class="line">05:14:59.655208 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11852, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x1596), <span class="built_in">seq</span> 305, ack 9822, win 461, options [nop,nop,TS val 3353962383 ecr 1133339501], length 0</span><br><span class="line">05:14:59.671136 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11853, offset 0, flags [DF], proto TCP (6), length 116)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x1768 (incorrect -&gt; 0x3471), <span class="built_in">seq</span> 305:369, ack 9822, win 501, options [nop,nop,TS val 3353962399 ecr 1133339501], length 64</span><br><span class="line">05:14:59.671287 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11854, offset 0, flags [DF], proto TCP (6), length 138)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x177e (incorrect -&gt; 0x3286), <span class="built_in">seq</span> 369:455, ack 9822, win 501, options [nop,nop,TS val 3353962399 ecr 1133339501], length 86</span><br><span class="line">05:14:59.671463 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11855, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x145b), <span class="built_in">seq</span> 455, ack 9915, win 501, options [nop,nop,TS val 3353962399 ecr 1133339517], length 0</span><br><span class="line">05:14:59.671615 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11856, offset 0, flags [DF], proto TCP (6), length 1246)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x1bd2 (incorrect -&gt; 0xb465), <span class="built_in">seq</span> 455:1649, ack 9915, win 501, options [nop,nop,TS val 3353962399 ecr 1133339517], length 1194</span><br><span class="line">05:14:59.671989 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11857, offset 0, flags [DF], proto TCP (6), length 83)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x1747 (incorrect -&gt; 0xfb7a), <span class="built_in">seq</span> 1649:1680, ack 9915, win 501, options [nop,nop,TS val 3353962400 ecr 1133339517], length 31</span><br><span class="line">05:14:59.695902 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11858, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x0ab2), <span class="built_in">seq</span> 1680, ack 11114, win 501, options [nop,nop,TS val 3353962423 ecr 1133339542], length 0</span><br><span class="line">05:14:59.696324 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11859, offset 0, flags [DF], proto TCP (6), length 91)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x174f (incorrect -&gt; 0x000a), <span class="built_in">seq</span> 1680:1719, ack 11153, win 501, options [nop,nop,TS val 3353962424 ecr 1133339542], length 39</span><br><span class="line">05:14:59.896847 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11860, offset 0, flags [DF], proto TCP (6), length 177)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x17a5 (incorrect -&gt; 0x7c61), <span class="built_in">seq</span> 1719:1844, ack 11153, win 501, options [nop,nop,TS val 3353962624 ecr 1133339548], length 125</span><br><span class="line">05:14:59.919871 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11861, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x0577), <span class="built_in">seq</span> 1844, ack 11841, win 501, options [nop,nop,TS val 3353962647 ecr 1133339766], length 0</span><br><span class="line">05:14:59.920025 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11862, offset 0, flags [DF], proto TCP (6), length 91)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x174f (incorrect -&gt; 0xf0a1), <span class="built_in">seq</span> 1844:1883, ack 11841, win 501, options [nop,nop,TS val 3353962648 ecr 1133339766], length 39</span><br><span class="line">05:14:59.920303 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11863, offset 0, flags [DF], proto TCP (6), length 296)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x181c (incorrect -&gt; 0x465c), <span class="built_in">seq</span> 1883:2127, ack 11841, win 501, options [nop,nop,TS val 3353962648 ecr 1133339766], length 244</span><br><span class="line">05:14:59.935230 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11864, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x001d), <span class="built_in">seq</span> 2127, ack 12897, win 501, options [nop,nop,TS val 3353962663 ecr 1133339781], length 0</span><br><span class="line">05:14:59.935406 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11865, offset 0, flags [DF], proto TCP (6), length 91)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x174f (incorrect -&gt; 0x01e6), <span class="built_in">seq</span> 2127:2166, ack 12936, win 501, options [nop,nop,TS val 3353962663 ecr 1133339781], length 39</span><br><span class="line">05:14:59.935919 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11866, offset 0, flags [DF], proto TCP (6), length 133)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x1779 (incorrect -&gt; 0x2c27), <span class="built_in">seq</span> 2166:2247, ack 12936, win 501, options [nop,nop,TS val 3353962663 ecr 1133339781], length 81</span><br><span class="line">05:14:59.959617 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11867, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0xfde0), <span class="built_in">seq</span> 2247, ack 13300, win 501, options [nop,nop,TS val 3353962687 ecr 1133339806], length 0</span><br><span class="line">05:14:59.959735 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11868, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0xfd9a), <span class="built_in">seq</span> 2247, ack 13370, win 501, options [nop,nop,TS val 3353962687 ecr 1133339806], length 0</span><br><span class="line">05:14:59.959759 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11869, offset 0, flags [DF], proto TCP (6), length 91)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x174f (incorrect -&gt; 0x5782), <span class="built_in">seq</span> 2247:2286, ack 13370, win 501, options [nop,nop,TS val 3353962687 ecr 1133339806], length 39</span><br><span class="line">05:14:59.959992 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11870, offset 0, flags [DF], proto TCP (6), length 208)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x17c4 (incorrect -&gt; 0x4db0), <span class="built_in">seq</span> 2286:2442, ack 13370, win 501, options [nop,nop,TS val 3353962688 ecr 1133339806], length 156</span><br><span class="line">05:14:59.975804 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11871, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0xf8ac), <span class="built_in">seq</span> 2442, ack 14405, win 501, options [nop,nop,TS val 3353962703 ecr 1133339822], length 0</span><br><span class="line">05:14:59.975974 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11872, offset 0, flags [DF], proto TCP (6), length 91)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x174f (incorrect -&gt; 0x1781), <span class="built_in">seq</span> 2442:2481, ack 14444, win 501, options [nop,nop,TS val 3353962704 ecr 1133339822], length 39</span><br><span class="line">05:14:59.990384 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49768, offset 0, flags [DF], proto TCP (6), length 60)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [S], <span class="built_in">cksum</span> 0xe6c8 (incorrect -&gt; 0x3154), <span class="built_in">seq</span> 804049769, win 65320, options [mss 1420,sackOK,TS val 118988064 ecr 0,nop,wscale 7], length 0</span><br><span class="line">05:14:59.992174 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49769, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x36cd), <span class="built_in">seq</span> 804049770, ack 2881392399, win 511, options [nop,nop,TS val 118988066 ecr 3287754621], length 0</span><br><span class="line">05:14:59.992465 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49770, offset 0, flags [DF], proto TCP (6), length 339)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [P.], <span class="built_in">cksum</span> 0xe7df (incorrect -&gt; 0xcbaf), <span class="built_in">seq</span> 0:287, ack 1, win 511, options [nop,nop,TS val 118988066 ecr 3287754621], length 287</span><br><span class="line">05:14:59.994083 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49771, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x1fc4), <span class="built_in">seq</span> 287, ack 5633, win 485, options [nop,nop,TS val 118988068 ecr 3287754623], length 0</span><br><span class="line">05:14:59.995701 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49772, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x1dd9), <span class="built_in">seq</span> 287, ack 6105, win 501, options [nop,nop,TS val 118988069 ecr 3287754625], length 0</span><br><span class="line">05:14:59.996879 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49773, offset 0, flags [DF], proto TCP (6), length 116)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [P.], <span class="built_in">cksum</span> 0xe700 (incorrect -&gt; 0x0739), <span class="built_in">seq</span> 287:351, ack 6105, win 501, options [nop,nop,TS val 118988070 ecr 3287754625], length 64</span><br><span class="line">05:14:59.996970 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49774, offset 0, flags [DF], proto TCP (6), length 138)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [P.], <span class="built_in">cksum</span> 0xe716 (incorrect -&gt; 0x6424), <span class="built_in">seq</span> 351:437, ack 6105, win 501, options [nop,nop,TS val 118988071 ecr 3287754625], length 86</span><br><span class="line">05:14:59.997049 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49775, offset 0, flags [DF], proto TCP (6), length 184)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [P.], <span class="built_in">cksum</span> 0xe744 (incorrect -&gt; 0xeaa5), <span class="built_in">seq</span> 437:569, ack 6105, win 501, options [nop,nop,TS val 118988071 ecr 3287754625], length 132</span><br><span class="line">05:14:59.998619 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49776, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x1be0), <span class="built_in">seq</span> 569, ack 6322, win 501, options [nop,nop,TS val 118988072 ecr 3287754628], length 0</span><br><span class="line">05:14:59.998648 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49777, offset 0, flags [DF], proto TCP (6), length 83)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [P.], <span class="built_in">cksum</span> 0xe6df (incorrect -&gt; 0x4699), <span class="built_in">seq</span> 569:600, ack 6322, win 501, options [nop,nop,TS val 118988072 ecr 3287754628], length 31</span><br><span class="line">05:15:00.001052 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27837, offset 0, flags [DF], proto TCP (6), length 60)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [S], <span class="built_in">cksum</span> 0xe6d1 (incorrect -&gt; 0xe0d7), <span class="built_in">seq</span> 4293780694, win 65320, options [mss 1420,sackOK,TS val 2768777777 ecr 0,nop,wscale 7], length 0</span><br><span class="line">05:15:00.002878 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27838, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x5b53), <span class="built_in">seq</span> 4293780695, ack 1618472241, win 511, options [nop,nop,TS val 2768777778 ecr 4104875756], length 0</span><br><span class="line">05:15:00.003079 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27839, offset 0, flags [DF], proto TCP (6), length 339)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe7e8 (incorrect -&gt; 0xa7d9), <span class="built_in">seq</span> 0:287, ack 1, win 511, options [nop,nop,TS val 2768777779 ecr 4104875756], length 287</span><br><span class="line">05:15:00.015189 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27840, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x4435), <span class="built_in">seq</span> 287, ack 5633, win 485, options [nop,nop,TS val 2768777791 ecr 4104875768], length 0</span><br><span class="line">05:15:00.019172 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27841, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x4245), <span class="built_in">seq</span> 287, ack 6105, win 501, options [nop,nop,TS val 2768777795 ecr 4104875772], length 0</span><br><span class="line">05:15:00.020132 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27842, offset 0, flags [DF], proto TCP (6), length 116)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe709 (incorrect -&gt; 0x4fa9), <span class="built_in">seq</span> 287:351, ack 6105, win 501, options [nop,nop,TS val 2768777796 ecr 4104875772], length 64</span><br><span class="line">05:15:00.020226 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27843, offset 0, flags [DF], proto TCP (6), length 138)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe71f (incorrect -&gt; 0xbc63), <span class="built_in">seq</span> 351:437, ack 6105, win 501, options [nop,nop,TS val 2768777796 ecr 4104875772], length 86</span><br><span class="line">05:15:00.020313 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27844, offset 0, flags [DF], proto TCP (6), length 171)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe740 (incorrect -&gt; 0x1e38), <span class="built_in">seq</span> 437:556, ack 6105, win 501, options [nop,nop,TS val 2768777796 ecr 4104875772], length 119</span><br><span class="line">05:15:00.025659 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27845, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x4052), <span class="built_in">seq</span> 556, ack 6322, win 501, options [nop,nop,TS val 2768777801 ecr 4104875779], length 0</span><br><span class="line">05:15:00.025711 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27846, offset 0, flags [DF], proto TCP (6), length 83)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe6e8 (incorrect -&gt; 0xd5e8), <span class="built_in">seq</span> 556:587, ack 6322, win 501, options [nop,nop,TS val 2768777801 ecr 4104875779], length 31</span><br><span class="line">05:15:00.043638 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49778, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x1665), <span class="built_in">seq</span> 600, ack 7648, win 501, options [nop,nop,TS val 118988117 ecr 3287754629], length 0</span><br><span class="line">05:15:00.233601 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27847, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x2bd4), <span class="built_in">seq</span> 587, ack 11121, win 501, options [nop,nop,TS val 2768778009 ecr 4104875987], length 0</span><br><span class="line">05:15:00.234626 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27848, offset 0, flags [DF], proto TCP (6), length 87)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe6ec (incorrect -&gt; 0x6bac), <span class="built_in">seq</span> 587:622, ack 11152, win 501, options [nop,nop,TS val 2768778010 ecr 4104875987], length 35</span><br><span class="line">05:15:00.434281 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27849, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [F.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x2ac5), <span class="built_in">seq</span> 622, ack 11152, win 501, options [nop,nop,TS val 2768778210 ecr 4104875990], length 0</span><br><span class="line">05:15:00.434304 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49779, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [F.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x14dd), <span class="built_in">seq</span> 600, ack 7648, win 501, options [nop,nop,TS val 118988508 ecr 3287754629], length 0</span><br><span class="line">05:15:00.434314 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11873, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [F.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0xf68d), <span class="built_in">seq</span> 2481, ack 14444, win 501, options [nop,nop,TS val 3353963162 ecr 1133339827], length 0</span><br><span class="line">05:15:00.434467 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11874, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0xf4c6), <span class="built_in">seq</span> 2482, ack 14445, win 501, options [nop,nop,TS val 3353963162 ecr 1133340281], length 0</span><br><span class="line">05:15:00.436252 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27850, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x29fb), <span class="built_in">seq</span> 623, ack 11153, win 501, options [nop,nop,TS val 2768778212 ecr 4104876189], length 0</span><br><span class="line">05:15:00.436271 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49780, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x1325), <span class="built_in">seq</span> 601, ack 7649, win 501, options [nop,nop,TS val 118988510 ecr 3287755066], length 0</span><br></pre></td></tr></table></figure><p>以下はGCE(10.0.0.2)からPrivate Service Connectエンドポイント(10.0.3.0)へのアクセスしてGCSへアクセスしているパケットのキャプチャだと思います。</p><blockquote><p>05:14:59.618319 IP (tos 0x0, ttl 64, id 11848, offset 0, flags [DF], proto TCP (6), length 60)<br>    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [S], cksum 0x1730 (incorrect -&gt; 0xad7d), seq 1890652633, win 65320, options [mss 1420,sackOK,TS val 3353962346 ecr 0,nop,wscale 7], length 0</p></blockquote><p>もう一つterraform init時にGCE(10.0.0.2)から18.65.202.87へアクセスしているパケットをキャプチャすることができました。</p><blockquote><p>05:15:00.436271 IP (tos 0x0, ttl 64, id 49780, offset 0, flags [DF], proto TCP (6), length 52)<br>    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], cksum 0xe6c0 (incorrect -&gt; 0x1325), seq 601, ack 7649, win 501, options [nop,nop,TS val 118988510 ecr 3287755066], length 0</p></blockquote><p>こちらについてもう少し調べてみます。<br>tcpdump -n -vv dst port 53コマンドを実行してterraform initを実施し、GCEから53ポートへアクセスしたパケットをキャプチャしてみました。</p><figure class="highlight bash"><figcaption><span>tcpdump -n -vv dst port 53コマンド実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ sudo tcpdump -n -vv dst port 53</span><br><span class="line">tcpdump: listening on ens4, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">05:28:31.201384 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 52411, offset 0, flags [DF], proto UDP (17), length 96)</span><br><span class="line">    10.0.0.2.59890 &gt; 169.254.169.254.53: [bad udp <span class="built_in">cksum</span> 0x5e5c -&gt; 0xa496!] 31699+ [1au] AAAA? storage-sampleendpoint.p.googleapis.com. ar: . OPT UDPsize=512 (68)</span><br><span class="line">05:28:31.201482 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 37003, offset 0, flags [DF], proto UDP (17), length 96)</span><br><span class="line">    10.0.0.2.52697 &gt; 169.254.169.254.53: [bad udp <span class="built_in">cksum</span> 0x5e5c -&gt; 0x3727!] 8284+ [1au] A? storage-sampleendpoint.p.googleapis.com. ar: . OPT UDPsize=512 (68)</span><br><span class="line">05:28:31.596564 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 831, offset 0, flags [DF], proto UDP (17), length 78)</span><br><span class="line">    10.0.0.2.43466 &gt; 169.254.169.254.53: [bad udp <span class="built_in">cksum</span> 0x5e4a -&gt; 0x143a!] 35627+ [1au] A? registry.terraform.io. ar: . OPT UDPsize=512 (50)</span><br><span class="line">05:28:31.596653 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27444, offset 0, flags [DF], proto UDP (17), length 78)</span><br><span class="line">    10.0.0.2.58257 &gt; 169.254.169.254.53: [bad udp <span class="built_in">cksum</span> 0x5e4a -&gt; 0x126e!] 14384+ [1au] AAAA? registry.terraform.io. ar: . OPT UDPsize=512 (50)</span><br></pre></td></tr></table></figure><p>すると、<code>storage-sampleendpoint.p.googleapis.com</code>のほかに<code>registry.terraform.io</code>を名前解決していることがわかりました。</p><blockquote><p>05:28:31.596564 IP (tos 0x0, ttl 64, id 831, offset 0, flags [DF], proto UDP (17), length 78)<br>    10.0.0.2.43466 &gt; 169.254.169.254.53: [bad udp cksum 0x5e4a -&gt; 0x143a!] 35627+ [1au] A? registry.terraform.io. ar: . OPT UDPsize&#x3D;512 (50)<br>05:28:31.596653 IP (tos 0x0, ttl 64, id 27444, offset 0, flags [DF], proto UDP (17), length 78)<br>    10.0.0.2.58257 &gt; 169.254.169.254.53: [bad udp cksum 0x5e4a -&gt; 0x126e!] 14384+ [1au] AAAA? registry.terraform.io. ar: . OPT UDPsize&#x3D;512 (50</p></blockquote><p>今度はdigコマンドを利用して<code>registry.terraform.io</code>を名前解決してみます。<br>すると先ほどの<code>tcpdump -n -vv dst port 443</code>コマンドを実行して出力されたIPアドレス<code>18.65.202.87</code>が存在することがわかりました。<br>registry.terraform.io(18.65.202.87)への通信はCloud Nat&#x2F;インターネット経由でアクセスしています。</p><figure class="highlight bash"><figcaption><span>dig registry.terraform.ioコマンド実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ dig registry.terraform.io</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; registry.terraform.io</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 7463</span></span><br><span class="line"><span class="string">;; flags: qr rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 65494</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;registry.terraform.io.         IN      A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">registry.terraform.io.  80      IN      CNAME   d3rdzqodp6w8cx.cloudfront.net.</span></span><br><span class="line"><span class="string">d3rdzqodp6w8cx.cloudfront.net. 60 IN    A       18.65.202.96</span></span><br><span class="line"><span class="string">d3rdzqodp6w8cx.cloudfront.net. 60 IN    A       18.65.202.27</span></span><br><span class="line"><span class="string">d3rdzqodp6w8cx.cloudfront.net. 60 IN    A       18.65.202.107</span></span><br><span class="line"><span class="string">d3rdzqodp6w8cx.cloudfront.net. 60 IN    A       18.65.202.87　★該当IPアドレス</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 52 msec</span></span><br><span class="line"><span class="string">;; SERVER: 127.0.0.53#53(127.0.0.53)</span></span><br><span class="line"><span class="string">;; WHEN: Sat Mar 25 05:32:10 UTC 2023</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 157</span></span><br></pre></td></tr></table></figure><p>このことからTerraform 1.4.0で追加されたPrivate Service Connectを利用したbackend&#x2F;gcsへのアクセスの機能を利用してもbackendのGCSへの通信のみプライベート接続され、Terraformのgoogle providerなどを利用するためにregistry.terraform.ioへのインターネットアクセスは避けられず完全プライベートではterraformは利用できないことが分かりました（当たり前か…）</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回はTerraform 1.4で追加されたPrivate Service Connectエンドポイント経由でbackendに指定したGCSへアクセスできることができる機能を検証しました。</p><p>Private Service Connect自体も実務で使用したことがなかったので、勉強になりました。Private Service Connectを利用しプライベートネットワーク経由で backendのGCSへアクセスすることは確認できましたが、結局Terraformを利用するためには、インターネットへ接続できることが条件なので、Private Service Connectの構築・運用コストを考えるとよほどのセキュリティ要件がなければ通常のインターネット経由でbackendのGCSへアクセスする構成が無難かと思いました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform1-4/">Terraform1.4</category>
      
      
      <comments>https://future-architect.github.io/articles/20230327b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Terraform連載2023を開始します</title>
      <link>https://future-architect.github.io/articles/20230327a/</link>
      <guid>https://future-architect.github.io/articles/20230327a/</guid>
      <pubDate>Sun, 26 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230327a/terraform.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;418&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230327a/terraform.png" alt="" width="800" height="418" loading="lazy"><p>こんにちは。TIGの伊藤太斉です。</p><p>Terraform連載のインデックス記事です。</p><h2 id="最近の社内-Terraform-事情について"><a href="#最近の社内-Terraform-事情について" class="headerlink" title="最近の社内 Terraform 事情について"></a>最近の社内 Terraform 事情について</h2><p>最近では当社も前提としてクラウドを利用する案件が増えてきました。その際に利用するツールとしては</p><ul><li>Terraform</li><li>CloudFormation</li><li>Serverless Framework</li></ul><p>と、マネージドのも含めて広く利用しているように感じております。ことにTerraformについては対象とするサービスもAWS、Google Cloudだけでなく、Auth0などのSaaSに対して管理対象としたり、管理を検討しているプロジェクトなどもあります。</p><h2 id="テーマについて"><a href="#テーマについて" class="headerlink" title="テーマについて"></a>テーマについて</h2><p>きっかけは、Terraformがv1.4になったことから始まりました。<br><a href="https://github.com/hashicorp/terraform/releases/tag/v1.4.0">https://github.com/hashicorp/terraform/releases/tag/v1.4.0</a></p><p>元々、社内でパブリッククラウドを利用する際に、多くの案件でIaC化されていたり、Terraformも利用されることが多いことから、連載企画やろう、という声はありました。そして、先日Terraformのv1.4がリリースされたことから、この機会に連載を募集、開始することになりました。</p><p>今回、連載を募集するに当たり、以下の内容で募集しました。</p><ul><li>v1.4のリリース内容</li><li>これまでTerraformを触ってきたノウハウ、Tips</li><li>エコシステムについての調査、学習</li></ul><p>など、Terraformを含む内容はOKとしています。</p><h2 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h2><p>スケジュールは以下の形で進んでいきます。TBDになっているところも随時埋まっていきますので、お楽しみにしてください。<br>順番が前後したり、内容が変更になる可能性がございますが、ご了承ください。</p><div class="scroll"><table><thead><tr><th>日付</th><th>投稿者</th><th>テーマ</th></tr></thead><tbody><tr><td>3&#x2F;27(月)</td><td>伊藤太斉</td><td>本インデックス記事</td></tr><tr><td></td><td>渡邉光</td><td><a href="/articles/20230327b/">Terraform 1.4 Update:Private Service Connectを利用したbackend&#x2F;gcsへのアクセス</a></td></tr><tr><td>3&#x2F;28(火)</td><td>真野隼記</td><td><a href="/articles/20230328a/">TerraCurl でProviderがサポートしていないリソースを作成する</a></td></tr><tr><td>3&#x2F;29(水)</td><td>宮永崇史</td><td><a href="/articles/20230329a/">tftarget:Terraformターゲットを選択的に実行するためのGo製CLIツール</a></td></tr><tr><td>3&#x2F;30(木)</td><td>渡邉光</td><td><a href="/articles/20230330a/">JenkinsでのTerraform CI&#x2F;CD</a></td></tr><tr><td>3&#x2F;31(金)</td><td>岸下優介</td><td><a href="/articles/20230331a/">Terraformでの機密情報の取り扱い on Google Cloud</a></td></tr><tr><td>4&#x2F;3(月)</td><td>川口翔大</td><td><a href="/articles/20230403a/">Terraform x GitOps</a></td></tr><tr><td>4&#x2F;5(水)</td><td>前原応光</td><td><a href="/articles/20230405a/">Terraform とGitHub Actions</a></td></tr><tr><td>4&#x2F;6(木)</td><td>大岩潤矢</td><td><a href="/articles/20230406a/">Terraformに入門して1ヶ月経ったので、初心者が気をつけるべきポイントを書いてみる</a></td></tr><tr><td>4&#x2F;7(金)</td><td>伊藤太斉</td><td><a href="/articles/20230407a/">Terraform 1.4 リリース周り</a></td></tr></tbody></table></div><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>Terraform連載は今回が初の試みとなりますが、多くの社員が参加表明してくれました。<br>どんな内容が出てくるか非常に楽しみです！</p><p>他の連載やこれまでのTerraform記事もぜひご覧ください。</p><ul><li><a href="/articles/20230314a/">2023年 フューチャー技術ブログ連載の企画スケジュール</a></li><li><a href="/tags/Terraform/">Terraformタグの記事</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform1-4/">Terraform1.4</category>
      
      
      <comments>https://future-architect.github.io/articles/20230327a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>究極の？トランザクションスクリプト用言語Verse</title>
      <link>https://future-architect.github.io/articles/20230324a/</link>
      <guid>https://future-architect.github.io/articles/20230324a/</guid>
      <pubDate>Thu, 23 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;Unreal Engineで有名なEpic Gamesが、現在開催中のGDC（Game Developer Conference)でVerseの詳細を解説しており、その動画が公開されています。&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>Unreal Engineで有名なEpic Gamesが、現在開催中のGDC（Game Developer Conference)でVerseの詳細を解説しており、その動画が公開されています。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/teTroOAGZjM?start=22486" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>ドキュメントもすでに公開されています。</p><p><a href="https://dev.epicgames.com/documentation/en-us/uefn/verse-language-reference">https://dev.epicgames.com/documentation/en-us/uefn/verse-language-reference</a></p><p>現在処理系は、Unreal Editor for Fortnite(UEFN)の中に組み込まれているようですが、Windowsにしか対応していません。ちょろっと動かした程度で、まだコードをしっかり書いてはなくて、プレゼンを見た感想で書いているので、いろいろ間違ったところとかもあるかもしれませんが、そういうのはご指摘いただいたり、Pull Request（ブログの上の鉛筆アイコンで送れます)を出してもらえれば、と思います。</p><img src="/images/20230324a/image.png" alt="image.png" width="1200" height="505" loading="lazy"><p>UEFNのVerseボタンを押すと、こんな感じでVSCodeがぴょこっと起動します。</p><img src="/images/20230324a/スクリーンショット_2023-03-23_18.57.26.png" alt="スクリーンショット_2023-03-23_18.57.26.png" width="1200" height="804" loading="lazy"><p>Verseはメタバース用の言語です。メタバースではすでにある3Dの空間の上に、いろいろな企業や個人がコンテンツを作っていきます。一般的なゲームと違い、どのような3Dモデルがあるか、どういう動き（プログラム）があるかは事前には決まらず、後から追加されたコンテンツをロードしてユーザーが実行するという、スクリプト言語が必要であり、そのために作られた、とあります。</p><p>将来的にはオープンソースになり、ブラウザでも動くことを目指しているようです。</p><p>10億人規模のユーザーがプレイしている、今まさに動いている環境に後から100万人規模の開発者がコンテンツを作っていくという、そういう世界観です。ある意味、Smalltalkが目指していた世界のさらに先、という感じですね(おっさんにしか伝わらない例）。</p><h1 id="基本的な言語設計"><a href="#基本的な言語設計" class="headerlink" title="基本的な言語設計"></a>基本的な言語設計</h1><p>関数型言語、オブジェクト指向、命令型のエッセンスを集めて作られた言語となっています。12月に発表されたときは関数型言語、というのを押し出した感じの紹介になっていて、特に追いかけてなかったのですが、色んなパラダイムをバランスよく取り入れている感じがしました。</p><p>基本的な設計は今時の言語っぽい感じです。</p><ul><li>mutable&#x2F;immutable</li><li>静的型つけ(TypeScript的な後置)</li><li>構造体</li><li>クラス、インタフェース(継承も)</li><li>ジェネリクス(クラス、関数)</li><li>Pathと呼ばれるネームスペース（Javaのpackageっぽい)</li></ul><p>タプルとかもあるし、配列、辞書もあって、タプルで関数の引数をまとめて渡したり、デフォルト引数があったり。</p><h2 id="関数型っぽい要素"><a href="#関数型っぽい要素" class="headerlink" title="関数型っぽい要素"></a>関数型っぽい要素</h2><p>forループ構文は、他の言語にも良くある構文に一見見えますが、forとは見ないで、C#のLINQだったり、Javaのストリームだったり、汎用リスト処理っぽいもの、と考えた方が良さそうです。</p><p>シンプルな例としては、配列の中の要素に対するループだけど、追加でフィルタを指定できたりするところは面白いですね。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (X : SomeArray; X &lt;&gt; <span class="number">100</span>):</span><br><span class="line">    Print(X)</span><br></pre></td></tr></table></figure><p>なんかすごいループの例がこれです。マインスイーパの隣接するセルの爆弾の数のカウントを1つのループでするそうな。<code>Y-&gt;CellRow:Cells</code>はループごとに、インデックスを<code>Y</code>に、値を<code>CellRow</code>にアサインするようです。その下の<code>X-&gt;Cell:CellRow</code>はそれを<code>X</code>と<code>Cell</code>にやっていて2重ループになります。そのX, Yに対して隣接する9つのX, Y（それぞれ-1から1のオフセット)の組みを次の2行で作り出しており、4重ループになりました。その後は<code>Cell&lt;&gt;AdjacentCell</code>で自分自身をのぞき、　<code>AdjacentCell.Mined?</code>で爆弾があるセルだけにフィルタリングするという・・・値からリストを作り出したりしつつ多重ループをしていくという流れですね。このあたりは関数型を意識した機能になっているように見えます。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>:</span><br><span class="line">    Y-&gt;CellRow:Cells</span><br><span class="line">    X-&gt;Cell:CellRow</span><br><span class="line">    AdjacentX:=X<span class="number">-1.</span>.X+<span class="number">1</span></span><br><span class="line">    AdjacentY:=Y<span class="number">-1.</span>.Y+<span class="number">1</span></span><br><span class="line">    AdjacentCell := Cells[AdjacentY][AdjacentX]</span><br><span class="line">    Cell&lt;&gt;AdjacentCell</span><br><span class="line">    AdjacentCell.Mined?</span><br><span class="line"><span class="keyword">do</span>:</span><br><span class="line">    <span class="built_in">set</span> Cell.AdjacentMines += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Fail"><a href="#Fail" class="headerlink" title="Fail"></a>Fail</h2><p>if文も他の言語とちょっと違っていて、成功・失敗の可能性のある式に対して適用する、ということになっています。次の式は、インデックスが配列の範囲に入っていて成功したときだけ後ろが実行される、という感じです。今時の他の言語だと、null安全とかで、「nullになっていない」という条件を媒介にして「失敗しないコード」を書きますが、Verseだと、失敗した場合は、関数型言語でいうところの空配列に対してリスト処理する（実行されない）ぐらいの軽い感覚で、アプローチは違いますが、安全なコードをシンプルに書けます。こういう割り切りは面白いな、と思いました。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Element := MyArray[Index]): Log(Element)</span><br></pre></td></tr></table></figure><p>これらに近いのは、Reactの<code>Suspense</code>とか<code>ErrorBoundary</code>ですかね。正常ケースで書いていくが、未ロード時とか失敗時にはこれらのコンポーネントが拾ってフォールバックします。</p><h1 id="トランザクション"><a href="#トランザクション" class="headerlink" title="トランザクション"></a>トランザクション</h1><p>ifは他の言語と違うと紹介しましたが、前のFailはまだまだ序の口です。これには述語的な条件文が書けます。この場合、実行後にこの条件にマッチしないと、それまでに行った操作が巻き戻るらしいです。ドキュメントによると、ファイルI&#x2F;Oやログ出力などの言語の外へのインタラクションとか、no_rollbackがついた処理以外にはこれが適用されるとのことです。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>:</span><br><span class="line">    DoSomeEffect()</span><br><span class="line">    X &lt; <span class="number">100</span></span><br><span class="line">then:</span><br><span class="line">    SomethingElse()</span><br></pre></td></tr></table></figure><p>これはプレゼンテーションで紹介された言語の基盤となるアイディアの2番目にも書かれています。100万人規模の開発者が並行性を管理する唯一の方法とあります。確かに、絶対成功するのであれば、Goで採用されているCSP(Communicating Sequential Process)はパフォーマンスを維持しつつ並行処理を進めるには最適です。あるいは、やりとりの方向性が一方通行であっても問題はないでしょう。しかし、失敗時のロールバックを別のプロセスに依頼というをミスなく組み込むのは困難です。</p><img src="/images/20230324a/スクリーンショット_2023-03-23_18.11.04.png" alt="スクリーンショット_2023-03-23_18.11.04.png" width="1200" height="716" loading="lazy"><p>ゲームの場合は、たくさんのオブジェクトが並行で動いていて相互に複雑にインタラクションしますので、こういう方向性になっているんじゃないかと思います。ゲームは速度が命、と思われるかもしれませんが、「ボタンを押した」「物体同士がぶつかった」「ビヘイビアツリーの思考ルーチンで何かやることを決めた」みたいなイベントはそれほど多くは起きません。そして、それらによって決まったアクションを毎フレーム実行する（たくさんの破片が回転しながら飛んでいくなど）部分では大量に並行で動作します。このトランザクションは前者のコントロールフロー部分で使い、後者の大量にCPU使って効率を上げられるところはエンジン内部で・・・みたいな使い分けなんじゃないかと思います。</p><h1 id="非同期周りの機能が面白い"><a href="#非同期周りの機能が面白い" class="headerlink" title="非同期周りの機能が面白い"></a>非同期周りの機能が面白い</h1><p>ゲームだと、同時に発生するさまざまな事象を同時に扱う必要があります。格闘ゲームの開始前のシーケンスを見ても、1P側のキャラクターのアニメーションが再生されて、その後2P側のアニメーションも再生されるが、ボタンを押すとスキップできるよ、とか、ゲージ類が移動アニメーションしながら画面にカットインするとか、そういうやつです。フレームを跨いで処理を記述する必要があり、たいていゲームエンジンには、直列だったり並列のイベントを扱う仕組みがあったりします（以下はCocos2d-xの例）。</p><img src="/images/20230324a/スクリーンショット_2023-03-23_15.23.46.png" alt="スクリーンショット_2023-03-23_15.23.46.png" width="1200" height="678" loading="lazy"><p>Verseでは同期のblockも含めて、5つの制御構文があります。JavaScriptの<code>Promise</code>と一部似ていますね。<code>sync</code>は<code>Promise.all()</code>相当です。<code>Promise.race()</code>相当は<code>rush</code>で、<code>race</code>は別物な点は要注意です。</p><p>先ほどのFail&#x2F;トランザクションとの組み合わせでゲームのコンテンツを作る事例が動画にあります。1本のスクリプトだけど、プレーヤーが特定のエリアに行ったら敵がでる、火が燃える、安全なエリアに到達したら敵を削除、ヘリに乗ったらアニメーション再生して完了など、ユーザーの体験に従ったスクリプトになっています。この複雑なユーザー体験を駆動する部分に、これらの非同期のブロックが活用されています。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/teTroOAGZjM?start=24695" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>Cypressのテストコードがこれに近いものを目指していますが、JavaScriptの上に作り上げているので通常の構文と組み合わせられなくて変数の取り扱いがちょっと不便だったりしますが、これは最初からこの非同期をうまく使うことを考慮しているので、なんかエレガントですね。</p><h1 id="トランザクションスクリプト"><a href="#トランザクションスクリプト" class="headerlink" title="トランザクションスクリプト"></a>トランザクションスクリプト</h1><p>エリック・エヴァンスのDDD本では、オブジェクト指向型のドメインモデルと対比してトランザクションスクリプトはダメだ、と言っています。</p><blockquote><p>利口なUIについて議論したのは、レイヤ化アーキテクチャのようなパターンが、ドメイン層を隔離するために必要になる理由と、それがどういう時なのかを明確にするためだけだ。利口なUIとレイヤ化アーキテクチャとの中間には、他にも解決策がある。例えば、Fowler（2002）が説明しているトランザクションスクリプト（TRANSACTIONSCRIPT）は、ユーザインタフェースをアプリケーションから分離はするが、オブジェクトモデルは提供しない。<br>:<br>他の開発スタイルにもそれなりの存在意義があるが、複雑さと柔軟性において、さまざまな限界があることを認めなければならない。ドメインの設計を分離し損ねると、状況によっては実に悲惨なことになりかねない。アプリケーションが複雑で、モデル駆動設計に取り組むつもりなら、歯を食いしばり、必要な専門家をそろえた上で、利口なUIを避けるべきである。</p><p>Eric Evans. エリック・エヴァンスのドメイン駆動設計 (Japanese Edition) (pp.76-77). Kindle 版.</p></blockquote><p>オブジェクト指向はそれぞれのオブジェクトが責務を果たせば、すべてのタスクが正しく完了するという考え方です。センサーオブジェクトが何か信号を得たら、それをオブザーバーオブジェクトが検知して、異常かどうか判定するストラテジーオブジェクトが状態を・・・というように、責務ごとに分担します。DDDはこれを推しています。しっかりしたモデルができれば、新しい機能を追加しようとした場合に、オブジェクトが勝手にやってくれる（ようにすでにプログラミングされている）ので、少ないコードで重複を減らせる、みたいな考えなんじゃないかと思います。</p><p>ですが、業務はまずみんなフローで考えます。オブジェクトにしてしまうと、そのフローは複数のメソッドに分かれてしまいます。ステートによって条件分岐が変わるとすると、そのステートが変わるイベントも探して、1本の業務フローがようやく見つけられる、ということになります。</p><p>現在の世の中も、ウェブフロントエンドの関数型を取り入れたUIフレームワークが流行ったりして、オブジェクト指向でモデリングというのとは別の流れを作っています。もちろん、オブジェクト指向は有用なことには変わりはないのですが、どちらかというと、配列クラスとか、リクエストクラスとか、便利な部品を作るところがオブジェクト指向で、それらを活用してアプリケーションの流れを作る、変化が大きい部分に関数型や、手続型を組み合わせる、という流れが一般的になってきているように思います。</p><p>エンプラ開発でも、フレームワーク的なレイヤーや共通部品はオブジェクト指向で作っても、SQLを使ってDBの読み書きをして、それをもとに別のクエリーを発行するとか、DBが中心でオブジェクト指向でモデルってあんまり作らないですよね。オブジェクトを作って元気にN+1してもいいんですけど。</p><p>Verseは他の言語などをしっかり研究している、とプレゼンの最初の説明にもありましたが、まさに今の世の中が目指していて既存の言語の上に作られたフローをゼロベースから最適な形で実現した言語と言えます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Unreal Engineは、新しいビジョンを作り出し、それを実現するための機能を載せてきます。１２月の発表では、このVerseはOSSであり、Unityなどの別のゲームエンジンでも使えるオープンな標準にしていこう、としています。とはいえ、おそらく業務システムに使えるようになるかどうかというと、そういう未来はすぐには来ないかもしれません。ですが、Verseが解決しようとしている問題とか、それに対するアプローチは、ゲーム業界ではない人にも刺激があるんじゃないでしょうか？少なくとも、僕はかなり刺激を受けました。今までの言語とかフレームワークでちょっといまいちだな？と思っていた部分も鮮やかに解決されていたりして、別の言語の開発でも参考にしたくなりますよね？（トランザクションは難しいですが）。今後もちょくちょく追いかけてみようと思います。</p><img src="/images/20230324a/スクリーンショット_2023-03-23_19.52.29.png" alt="スクリーンショット_2023-03-23_19.52.29.png" width="1200" height="626" loading="lazy"><ul><li>参考: Haskellのイベントで発表された言語の紹介</li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/832JF1o7Ck8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Verse/">Verse</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/">トランザクションスクリプト</category>
      
      
      <comments>https://future-architect.github.io/articles/20230324a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>数字と振り返るフューチャー技術ブログ（2022年）</title>
      <link>https://future-architect.github.io/articles/20230320a/</link>
      <guid>https://future-architect.github.io/articles/20230320a/</guid>
      <pubDate>Sun, 19 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230320a/graph-gee8b181db_640.png&quot; alt=&quot;graph-gee8b181db_640.png&quot; width=&quot;640&quot; height=&quot;363&quot; loading=&quot;lazy&quot;&gt;


&lt;h2</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230320a/graph-gee8b181db_640.png" alt="graph-gee8b181db_640.png" width="640" height="363" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>技術ブログ運営の真野です。桜のつぼみが芽吹く時期ですが、<a href="/articles/20201127/">2020年</a>、<a href="/articles/20220120a/">2021年</a>に引き続き2022年の技術ブログ振り返りをお届けします。</p><h2 id="キーメトリクスについて"><a href="#キーメトリクスについて" class="headerlink" title="キーメトリクスについて"></a>キーメトリクスについて</h2><p>この技術ブログ運営の指標としてPVやSNSでのリアクション数などは追っていません。理由は次です。</p><ol><li>PV数向上のみを目的にすると、タイトル釣りやエッセー的な内容を増やしたくなり、趣旨であるフューチャーのITコンサルティング業務を通して得た知見を共有するという趣旨が薄まる恐れがある</li><li>ITコンサルティングや自社サービス運営を通して、自分たちの知見・ナレッジを公開するというアウトプット文化醸造の目的をもっと強化したい</li><li>PVが少なくても、特定の領域を追っている人に刺さる記事は重要であると認識していること</li><li>一般ウケしない記事を書いてしまっても次回作以降で、バズる記事を書いてくれる人もいる。あまりそこに囚われないようにしたい</li><li>運営上、PVやSNSでのリアクションを追わないけど、バズった場合はチームで礼賛すれば良い</li></ol><p>そのため、このブログで気にしているのは以下です。</p><ol><li>投稿数</li><li>寄稿者のユニークユーザ（UU）数</li><li>1本目を踏み出してくれた新しい寄稿者数&#x2F;年</li><li>連載企画数、それぞれの参加人数</li></ol><p>投稿数がある程度活発であれば、IT技術組織的な活動がある一面ではヘルシーに行われていると思うからです。さらに寄稿者UUですが、寄稿者が増えれば増えるほど様々な観点の記事が増えるためユニークな媒体になると考えており、広く当社の技術的な成果を伝えられるのでは？と考えています。連載企画も発信内容の偏りを意思入れで散らすことや、単発だと出てこないようなテーマを拾い上げるキッカケにしたいため、企画本数やそこに参加しているメンバーの数にはこだわっていきたいと思っていました。</p><p>また、企業技術ブログだとどうしても寄稿者が同じ顔ぶれに偏りがちだと思います。これはある意味、避けようがないと考えていますが、一方で新しい参画者が増えないと尻すぼみするのも事実だと思います。持続可能性も考慮し、新しく寄稿してくれた人の数もウォッチし、適切に運営できているか見ようとしています。</p><h2 id="2022年の結果"><a href="#2022年の結果" class="headerlink" title="2022年の結果"></a>2022年の結果</h2><h3 id="投稿数"><a href="#投稿数" class="headerlink" title="投稿数"></a>投稿数</h3><p>2022年は207本でした。2021年が現時点でピークとなる281本でした。なおこの記事を書いている2023年3月時点で合計850を超える記事を公開しています。</p><p>投稿推移としては以下です。2021年には負けるものの、200本前後の公開ができたのである程度、ブログでナレッジを公開するという慣習が、組織に少しずつ定着し始めているのかなと思います。</p><img src="/images/20230320a/2016年～2022年の推移.png" alt="2016年～2022年の推移" width="1200" height="245" loading="lazy"><p>こちらが2022年の月別投稿数です。12月の落ち込みはアドベントカレンダーで、基本的には個人アカウントのQiita側に投稿してしまうため、本技術ブログとしては記事数が減ります。月平均で17本以上なので、平日は大概、1つ以上記事を公開していたというかたちです。5月はGWで大型連休にする人が多かったから減ったのでしょうか。</p><img src="/images/20230320a/2022年の月別投稿数.png" alt="2022年の月別投稿数.png" width="1200" height="359" loading="lazy"><p>SNSの良いねやシェア数はキーメトリクスとして数値を追っていないと話していましたが、集計自体はしています。2021年は総シェア数が <code>30652</code> と2022年の倍以上に突出しており成長していない？と思いますが、<a href="/articles/20210621a/">HTML5記事</a>がずば抜けたノイズなので、それを除くと平年並みといった具合です。</p><h3 id="寄稿者のユニークユーザ（UU）数"><a href="#寄稿者のユニークユーザ（UU）数" class="headerlink" title="寄稿者のユニークユーザ（UU）数"></a>寄稿者のユニークユーザ（UU）数</h3><p>寄稿者のUU数ですが、2021名が105名と突出し、2022年は73名と低調でした。目標が130名だったので未達ず、やり方を変えないとまずいと認識しています。</p><img src="/images/20230320a/寄稿者数.png" alt="寄稿者数" width="1200" height="217" loading="lazy"><p>社員数も増えていることと、世間的にもリスキリング・自己研鑽の風潮が来ており、技術ブログ執筆は良い機会だと思いますので、流れを味方にしていきます。</p><h3 id="1本目を踏み出してくれた新しい寄稿者数"><a href="#1本目を踏み出してくれた新しい寄稿者数" class="headerlink" title="1本目を踏み出してくれた新しい寄稿者数"></a>1本目を踏み出してくれた新しい寄稿者数</h3><p>新規寄稿者数は25名でした。34%の人が2022年に初めてフューチャー技術ブログに寄稿してくれたということで割合は思ったより高い状態です。</p><p>課題としては、むしろ2021年以前に寄稿してくれた人が継続してくれなかった、という点にあると思いますので、継続するような仕掛けづくりが必要だなと再認識しました。</p><p>2023年はすでに投稿してくれた人に対して、継続して投稿してくれるような仕組みづくりや、きっかけづくりが必要だと考えています。今期はメトリクスとしてウォッチしたほうが良さそうです。</p><h3 id="連載企画数"><a href="#連載企画数" class="headerlink" title="連載企画数"></a>連載企画数</h3><p><a href="/articles/20220117a/">2022年のブログ連載予定を発表します</a> にまとめている通り、アドベントカレンダーを除き12本でした。2021年は14本からは少し減りましたが、底堅く運営はできているかなと思います。</p><h3 id="（おまけ）PV数"><a href="#（おまけ）PV数" class="headerlink" title="（おまけ）PV数"></a>（おまけ）PV数</h3><p>PVを追っていないと言いながらも共有です。上がると嬉しいですね。6月はスパイクして32万PV&#x2F;月を声、2021年下期は12～14万PV&#x2F;月でした。2020年と比較すると、記事のストック効果もあり1~2割成長しているのかな？と思っています。月当たりのピークは6月の18万PV、最も低いのは2月の12万PVでした。</p><img src="/images/20230320a/PV.png" alt="PV" width="1200" height="338" loading="lazy"><p>定期的に寄稿してくださる社員のみなさまに助けられた結果かなと思います。</p><h2 id="べすぶろ"><a href="#べすぶろ" class="headerlink" title="べすぶろ"></a>べすぶろ</h2><p>Best Blogger of the Year（べすぶろ）は、社外に影響を与えた記事を執筆した人を表彰する2020年より開催している仕組みです。詳細は<a href="/articles/20220121a/">Best Blogger of the Year 2021 受賞者を発表します </a>を参照ください。2022年も讃えさせていただきました。選抜したのは3名です。</p><ul><li>青柳雄登さん<ul><li><a href="/articles/20220107a/">Future社員が使っているWindows便利ツール（新人さん向け）</a></li><li>「新人時代を思い返しながらフューチャーの方が使っている便利ツールをまとめてみたきじで、予想以上に多くの方に読んで頂くことができ驚いています」</li></ul></li><li>原木翔さん<ul><li><a href="/articles/20220518a/">OpenSLOについて</a></li><li>「自分がフューチャーに入ったのも技術ブログで名前を知ったことがきっかけでした。自分の記事がまた、どこかのエンジニアの助けやきっかけになれば幸いです。」</li></ul></li><li>澁川喜規さん　🏅3年連続受賞・殿堂入り🏅<ul><li><a href="https://future-architect.github.io/articles/20210611a/">サーバーアプリ開発環境(Python／FastAPI)</a></li><li>「今年も選定していただきありがとうございます。フォロワーシップを発揮してフューチャーを盛り上げようという気持ちでコンテンツ提供側として活動しています。来年も引き続き活動していこうと思いますが、他の人の投稿を増やす貢献もしたいので、ネタをお持ちの方とか、書いてみたいけどネタがない、という方はぜひお気軽にDMで相談を投げていただければと思います」</li></ul></li></ul><p>最後の澁川さんは、べすぶろができてから3年連続で選ばれ、最速で殿堂入りということになりました。感謝です。</p><h2 id="YouTube動画"><a href="#YouTube動画" class="headerlink" title="YouTube動画"></a>YouTube動画</h2><p>ブログではないですが、キャリア採用チームと協力して行っているIT勉強会もYouTubeに動画をアップロードするようにしました。</p><ul><li><a href="https://www.youtube.com/watch?v=6_C-GnwIz3U">Future Tech Night #17 「embeddingの活用」と「MLOps」のAI勉強会</a></li><li><a href="https://www.youtube.com/watch?v=rpT4VVOL2qQ">Future Tech Night #18 Go 1.18 Release Notes みんなで読む会</a></li><li><a href="https://www.youtube.com/watch?v=YuDTNGW-wZY">Future Tech Night #19 AWS CodePipelineと新聞向けCMS構築事例</a></li><li><a href="https://www.youtube.com/watch?v=fpSAwLWnfFo">Future Tech Night #20 Terraform State縛りの勉強会</a></li><li><a href="https://www.youtube.com/watch?v=o0oZnX1Ai-k">Future Tech Night #21 Google Cloud: データエンジニア＋MLOps</a></li></ul><p>ポッドキャストと同様に、それぞれのチャネルに適したコンテンツを増やしつつ、技術ブログと相乗効果を出せたらなと考えています。</p><h2 id="ブログ記事から執筆へ"><a href="#ブログ記事から執筆へ" class="headerlink" title="ブログ記事から執筆へ"></a>ブログ記事から執筆へ</h2><p>Software Designさんに、フューチャー技術ブログがキッカケで寄稿の流れができました。運営冥利に尽きます。</p><ul><li><a href="https://gihyo.jp/magazine/SD/archive/2022/202201">Software Design 2022年1月号</a><ul><li>Cypressで作る“消耗しない”E2Eテスト環境 【1】Cypressで快適なテストライフを（木戸さん）</li><li>木戸さんの<a href="/articles/20211218a/">紹介記事</a></li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2022/202202">Software Design 2022年2月号</a><ul><li>Cypressで作る“消耗しない”E2Eテスト環境 【2】実運用に効くコードの書き方＆便利な機能（枇榔さん）</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2022/202203">Software Design 2022年3月号</a><ul><li>［短期連載］Cypressで作る“消耗しない”E2Eテスト環境 【3】ソフトウェアの品質をアップさせるテストの書き方…… 渋川 よしき</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2022/202204">Software Design 2022年4月号</a><ul><li>【最終回】［短期連載］Cypressで作る“消耗しない”E2Eテスト環境【4】アドバンストな機能を使いこなす…… 渋川 よしき，枇榔 晃裕</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2022/202208">Software Design 2022年8月号</a><ul><li>第4章：OpenAPIを使ったWeb API開発の実際 スキーマファーストで効果的に開発するコツ（武田さん，宮崎さん，大岩さん）</li></ul></li></ul><h2 id="記事・寄稿者を増やす取り込み"><a href="#記事・寄稿者を増やす取り込み" class="headerlink" title="記事・寄稿者を増やす取り込み"></a>記事・寄稿者を増やす取り込み</h2><p>IT技術以外にも、マネジメントや業界ドメイン知識を増やそう連載など、幅広いテーマを扱うようになりました。ITコンサルティングをはじめとした、フューチャーの開発現場で得たナレッジを共有するという目的を大事にしながら、皆様に少しでも役立つ内容を、進化しつつより推進していきたいと思っています。</p><p>また、社内のオンサイト（ハイブリッド）イベントとしてはFriday Night Barや、BPYに技術広報メンバーが参加し、運営アピールや寄稿のメリットをプッシュしたりしました。認知度は上がっているはず！</p><h2 id="2023年に向けて"><a href="#2023年に向けて" class="headerlink" title="2023年に向けて"></a>2023年に向けて</h2><p>業界ドメイン知識を増やすようなビジネス記事は昨年以上に広げていければと考えています。また、新人研修リーダー観点での記事など、面白いネタがあることも分かってきたので、運営でできる範囲で寄稿をお願いしていこうと思います。</p><ul><li><a href="/articles/20230306a/">GitLab CIを新人研修に導入した話</a></li></ul><p>個人的には、AWSインフラ命名規約、OpenAPISpecfication規約、PlantUML規約などを進めるタスクフォースを始めました。このあたりのある程度の規模におけるチーム開発で必須となるベースライン系の力点を入れようと思います。</p><p>技術ブログ運営も技術広報と名前を変えたようで、体制も微妙に増えてきたので、記事を書くか迷っているメンバーの背中をそっと押したり、ときには伴奏して引き上げていきたいと考えています。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>2022年のフューチャー技術ブログの振り返りを行いました。フィーバーした2021年超えは残念ながら未達ですが、1年で200本を超えた記事を公開することができました。</p><p>注視しているメトリクスから不足している面も見えてきたため、継続して執筆依頼を行って行きたいと思います。</p><p>アイキャッチはImage by <a href="https://pixabay.com/users/wallusy-7300500/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=6249047">Yvette W</a> from <a href="https://pixabay.com//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=6249047">Pixabay</a>を使わせていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/TechBlog/">TechBlog</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/">運営</category>
      
      <category domain="https://future-architect.github.io/tags/PV/">PV</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%99%E3%82%B9%E3%83%96%E3%83%AD/">ベスブロ</category>
      
      
      <comments>https://future-architect.github.io/articles/20230320a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>データライフサイクルとトレードオフ</title>
      <link>https://future-architect.github.io/articles/20230317a/</link>
      <guid>https://future-architect.github.io/articles/20230317a/</guid>
      <pubDate>Thu, 16 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;ソフトウェアの中身を大きく2つに分解すると、プログラムとデータに分かれます。コードコンプリートやA Philosophy of Software</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>ソフトウェアの中身を大きく2つに分解すると、プログラムとデータに分かれます。コードコンプリートやA Philosophy of Software Designなど、評判の良いソフトウェア設計の本はいくつかありますが、それらはどれもプログラムの説明がメインでデータのライフサイクルについての説明はなかったと思います。しかし、データの表現にもいくつもの方針があって、それによるトレードオフがあるな、というのはもやもやと考えていたので、その考えをまとめて文章にしてみました。</p><p>データといっても、処理中の短期間の間では変わらない、いわゆるマスターデータ的なデータです。ジャーナルというか、トランザクション的なデータはここでは触れません。</p><p>この記事では、それぞれのトレードオフについて考えていきます。</p><ul><li>即値（リテラル）</li><li>定数</li><li>コマンドライン引数</li><li>環境変数</li><li>設定ファイル</li><li>ダウンロードコンテンツ</li><li>オンラインデータベース</li></ul><p>データの扱い方が決まると、それを扱うソフトウェアの設計も決まります。むしろ、外部設計に影響を強く与える部分なので、クラス分けをどうしようとか、そういうレベルの話よりも、設計におけるプライオリティはこちらの方が上です。起動時にどこかの情報をパースして読み込むのか、リアルタイムの更新を扱う必要があるのかなど、ソースコードへの影響も大きくなります。</p><h1 id="データの表現方式"><a href="#データの表現方式" class="headerlink" title="データの表現方式"></a>データの表現方式</h1><h2 id="即値（リテラル）"><a href="#即値（リテラル）" class="headerlink" title="即値（リテラル）"></a>即値（リテラル）</h2><p>一番簡単なものはこれでしょう。ソースコード中の利用する箇所に直接データを設定します。ブール型、整数、浮動小数点数、文字列など、プログラミング言語でサポートされているプリミティブ型を入れるのがわかりやすいでしょう。言語によっては構造体リテラルや複合リテラルといった機能があり、複雑なオブジェクトや配列を使った深いデータもリテラルで書けるものもあります。</p><p>たとえば、華氏の温度を摂氏に変換するコードを考えてみましょう。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ftoc</span>(<span class="params">f</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (f - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`w 0 -&gt; c <span class="subst">$&#123;ftoc(<span class="number">0</span>)&#125;</span>`</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`f 70 -&gt; c <span class="subst">$&#123;ftoc(<span class="number">70</span>)&#125;</span>`</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`f 100 -&gt; c <span class="subst">$&#123;ftoc(<span class="number">100</span>)&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p>32や1.8という定数がでていますが、温度の定義が変わるまではここが変化することはありません。プログラム全体を見回して1度しかでてこないのであれば即値でハードコードしても問題ありません。</p><p>少し変わり種でいえば、アノテーションの引数やGoの構造体のタグなどもこれに該当します。以下のようなクラスを定義があったとします。ここでは、ウェブサーバーのパスと、クッキーの名前が文字列リテラルで即値でハードコードされています。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"> <span class="meta">@PostMapping(&quot;/hello-world&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">doService</span><span class="params">(<span class="meta">@CookieValue(&quot;last-login&quot;)</span> String rank)</span> &#123;</span><br><span class="line">   <span class="comment">// 何かしらのロジック</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Goの構造体はJSONなどのデータから読み込んで初期化するときのメタデータをタグとしてバッククオートで書きます。この中もキーの名前もハードコードされていて、後から変更はできないため、即値でのハードコードと変わりません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line"> name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line"> age <span class="type">int</span>     <span class="string">`json:&quot;int&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即値でハードコードというのを聞くと原始的な文明のないコードに思えるかもしれませんが、設定ファイルのキーなど、動的に変わるものがないのであればテクニックに走る必要はありませんし、プリミティブや構造体のタグなどのようにAPIの仕様としてハードコードしかできないケースもあります。</p><h2 id="定数"><a href="#定数" class="headerlink" title="定数"></a>定数</h2><p>プログラミングを学んだ人が最初に触れる「ソフトウェアエンジニアリング」の要素がこの定数でしょう。リテラルで全部書いても良いのすが、「あとからまとめて変更することや読みやすさを考慮して定数にしましょう」といった感じの文脈で説明されることがよくあります。</p><p>多くの言語には一度代入したら変更できない「定数」が機能として提供されています。Javaには <code>final</code> 修飾子がありますし、JavaScript&#x2F;TypeScript&#x2F;C&#x2F;C++には<code>const</code>があります。C++にはさらにコンパイル時に確定し、テンプレート引数にも渡せる <code>constexpr</code> もあります。C言語やC++では、マクロとして実現する手段があります。ただし、プリミティブ型であれば再代入を禁止するだけで問題ありませんが、言語によってはオブジェクト自体の変更を禁止できないこともあります。ゲッターだけを用意してセッターを公開しない、JavaScriptの<code>Object.freeze()</code>、TypeScriptの<code>readonly</code>などを利用するなど、言語によっていくつか選択肢があります。</p><p>ソースコード中で何度も参照される場合は即値よりもこちらを使うべきでしょう。基本的にはコンパイルの段階で値が決まってしまい、実行時に変更はできません。円周率みたいなものは定数化するのは良いのですが、たとえば、消費税率などのパラメータなどはルール変更によって後から変わる可能性がありますし、基本的に定数は使わないでしょう。より動的に変更できる方針が必要とされます。</p><p><code>const</code>や<code>final</code>などは、処理途中のデータを保持するのにも使われますが本エントリーはあくまでもマスター的なデータであり、関数の外のパッケージグローバル定義だったり、クラスの静的フィールドだったりのものを想定しています。</p><p>言語によっては、コンパイル時にいくつかの定数セットを環境によって切り替えられる機構を持っているものもあります。C&#x2F;C++などの条件コンパイル、GoのBuild Constraintsなどがあります。定数宣言はこれらの機能と組み合わせると、環境ごとのデータセットの切り替えが実現できます。</p><h2 id="コマンドライン引数"><a href="#コマンドライン引数" class="headerlink" title="コマンドライン引数"></a>コマンドライン引数</h2><p>CLIやサーバーに外部から値を設定するよくある方法としては、コマンドライン引数があります。これまでの2つと異なり、実行時に値が決まります。同じプログラムでもコンパイルせずに利用者が自由にデータを入れられ、柔軟性が得られます。</p><p>各種コマンドラインパーサを使った引数の解釈の実装が必要となります。大量のデータを入れようとすると少々入れにくいなどがありますが、シェルスクリプトなどを使ってまとめておくこともできます。</p><p>なお、柔軟であるということはデメリットもあり、要素の有無がコンパイル時には確定しないという問題があります。これ以降に紹介するものではエラーハンドリングの実装が必要となります。デフォルト値を持たせておき、何も設定しない場合にも適当な値を使って動くようにしておくことで致命的なエラーを回避することは可能でしょう。ただし、設定がなかったり、間違った値が設定されるのはデプロイプロセスのバグであり、デフォルト値は発覚を遅らせるし、致命的なエラーとして扱うべき、という考えもあります。ちょっとした開発用ミドルウェアがぱっと起動するのは便利だったりするので、少ない設定で開発者モードでは起動できる、ぐらいが落とし所でしょうか？</p><h2 id="環境変数"><a href="#環境変数" class="headerlink" title="環境変数"></a>環境変数</h2><p>以前からも使われてきましたが、クラウド時代になってさらに活発に利用されるようになったのが環境変数です。クラウドネイティブなアプリケーションの設計指針の<a href="https://12factor.net/ja/">The 12 Factor App</a>でも利用が推奨されています。</p><p>環境変数は完全に設定を外部から与えられるのが保証されています。設定をすべて環境変数で与えられるようなコンテナイメージやEC2などのイメージを作っておけば、1つのイメージが、開発環境、ステージング、本番環境のどの環境にも使えるようになります。この場合、ファイルシステム上に設定値が残らず重要情報を保持している場所が限定されるようになるため、イメージを見られても重要な情報が漏洩しにくくなるなるというおまけ付きです。</p><p>本番環境用、ステージング用などの設定を外部ファイル化し、その選択だけ環境変数で行うといった少し自由度が下がる方法もよく使われています（が、The 12 Factor Appではこれは推奨していない)。</p><h2 id="設定ファイル"><a href="#設定ファイル" class="headerlink" title="設定ファイル"></a>設定ファイル</h2><p>設定ファイルをアプリケーションとは完全に別のファイルにしておきます。</p><p>ネイティブ系のアプリケーション系ではmacOSでは<code>~/Library/Preferences/&lt;APPNAME&gt;</code>、Windowsでは<code>C:/Users/&lt;USER&gt;/AppData/Local/&lt;APPNAME&gt;</code>、<code>C:/ProgramData/&lt;APPNAME&gt;</code>、Linuxなどの他のPOSIX系OSだと<code>~/.config/&lt;APPNAME&gt;</code>、<code>/etc/xdg/&lt;APPNAME&gt;</code>、Androidは<code>&lt;APPROOT&gt;/files/settings</code>、iOSは<code>&lt;APPROOT&gt;/Library/Preferences/&lt;APPNAME&gt;</code>などにあるファイルを読み込むようにすると、行儀の良いアプリケーションになります。</p><p>サーバーで動くアプリケーションだと、Ruby on Railsの<code>config/database.yml</code>など、フレームワークごとに設定ファイルの置き場が決まっていたりするので、そちらに合わせることもあるでしょう。</p><p>外部ファイル化しておくと、ハイパーパラメータチューニングを使って、最適化を別システムに行わせるというのも一般的なようです。</p><h2 id="ダウンロードコンテンツ方式"><a href="#ダウンロードコンテンツ方式" class="headerlink" title="ダウンロードコンテンツ方式"></a>ダウンロードコンテンツ方式</h2><p>これまでは、設定ファイルはコンパイル時、あるいはデプロイ時には設定がもう決まっているという方式でしたが、このダウンロードコンテンツ方式は起動時にサーバーなどに設定を取りにいって読み込む方式です。</p><p>たとえば、SQLiteのファイルやJSON、YAMLファイル、Protocol Buffers、MessagePackなどをCDNなどにアップロードしておき、起動時に取得してロードします。起動時にニュースを表示する、週次のイベントを配信するなど、スマートフォンのゲームなどではお馴染みの方法でしょう。これはゲームではマスターデータと呼ばれます。</p><p>ゲームというのは、たとえば敵の強さとか、武器の強さといったパラメータはソースコードに直接書くことはありません。よほどリソースに余裕がなかったROMカセットのファミコン時代だと違ったかもしれませんが、今時はプログラマーではなく、ゲームプランナーがこのようなデータを一括で責任をもって作成します（Excelなどで)。オンラインのモバイルのゲームなどの場合は、それを設定ファイルとして配信することで、強さを後から調整したりといったことができるようにしています。ただし、ゲームなどのアプリだと、この手のダウンロードは起動中にしか行えないため、バックグラウンド処理ができないため、ユーザーを長く待たせる原因になったりはします。</p><h2 id="オンラインデータベース"><a href="#オンラインデータベース" class="headerlink" title="オンラインデータベース"></a>オンラインデータベース</h2><p>ダウンロードコンテンツ方式は、起動時にデータが書き込まれたスナップショットのファイルを読み込んでいましたが、オンラインデータベース方式では、ずっと起動しているRDBにデータを入れて利用します。静的なデータセットではなく、より動的な方式です。</p><p>RDBを使うことで、データの変更を即座にシステムに反映できます。また、トランザクションデータも同じRDBにあるのであれば、処理の中でマスターテーブルの情報とトランザクションテーブルの情報をJOINして使うなどができます。たとえば、POSのようなシステムでは商品情報を追加するのに、わざわざシステムを再起動したり、アプリケーションをビルドしなおしてデプロイはしないでしょう。これもマスターデータです。RDBの中には業務で追加されるテーブル（トランザクションテーブル）もあり、それと区別するためにマスターテーブルと呼ばれることもあります。</p><p>一括でデータを入れる場合は、ロックの時間を減らすために、別名でがっとインポートし、古いテーブルをドロップしてからリネームして置き換えるというのが時短になります。</p><h1 id="トレードオフを考慮する視点"><a href="#トレードオフを考慮する視点" class="headerlink" title="トレードオフを考慮する視点"></a>トレードオフを考慮する視点</h1><p>プログラミング言語やビルドツールのサポートによってはもしかしたら柔軟な方が実装しやすい、というところもたまにあるかもしれませんが、紹介した方式は基本的に柔軟性が増えれば増えるほど、だいたい初期の実装は面倒になっていきます。そのため、不必要に高機能な方式を選択するのはよくありませんし、ファイル化したりデータベースをメンテナンスしたり手間暇が余計にかかったりします。たとえば、動的にマスターの更新が必要だ、とか要件に照らして判断する必要があります。</p><h2 id="デプロイまでの手順"><a href="#デプロイまでの手順" class="headerlink" title="デプロイまでの手順"></a>デプロイまでの手順</h2><p>データの更新をデプロイするまでの手順の多さがまず判断基準になるでしょう。ソースコードに記述する方が実装者の実装の手間は少ないのですが、それをビルドしてデプロイする手間が必要です。また、反映のために再起動するだけでいいとか、再起動すらいらないなど、いろいろな方式があります。</p><p>設定ファイル方式やデータベースなどは、それを実装する手間は大きいのですが、一度実装してしまうと、設定の変更で開発者の手を煩わせる必要はない、というところはメリットです。開発者がソースをいじる場合は、どうしても伝言ゲーム＆転記作業になってしまうので、プログラマーがなかなか雇えないという状況だと、そこが仕事のボトルネックになってしまう可能性もあります。</p><p>最近はライブリロードというものが用意されることもあります。</p><h2 id="複数のデータセットのハンドリング"><a href="#複数のデータセットのハンドリング" class="headerlink" title="複数のデータセットのハンドリング"></a>複数のデータセットのハンドリング</h2><p>データのセットをまるごと入れ替える必要があるかどうか、というのも判断基準になります。即値や定数ではまるごと設定を置き換えるのはしにくいです。</p><p>複数設定が欲しくなるのは、ローカル環境やら、本番環境やら、ステージング環境などの環境ごとの設定、というのが思い浮かぶかもしれませんが、たとえば表示メッセージの日本語、英語のメッセージカタログの切り替えなどもある意味データの置き換えになります。これも、多言語を実現するライブラリごとにも方式がいろいろあります。外部化された設定ファイル群を置き換える（JSONなど)方式だったり、AngularやNext.jsなどのように事前ビルドで各言語ごとの訳語のデータを焼き込んだページを別のパスに生成する方式もあります。オンラインのデータベースを使うこともあります。フロントエンドとバックエンドで別々の方式を選ぶこともあります。</p><h2 id="起動時間"><a href="#起動時間" class="headerlink" title="起動時間"></a>起動時間</h2><p>ハードコードされているもの、定数として実装されたものは、すでにメモリ上に配置された状態となっています。最速で起動できます。</p><p>コマンドライン引数や環境変数はそれらをパースしたり解釈する処理が少し入りますが、これらによって大きく遅くなるということはないでしょう。</p><p>設定ファイルを使う方式の場合はファイルのパースが入ることがあります。また、設定ファイルを外出しするケースだと機械学習のモデルだったり、言語モデルだったりすることもあり、データの量によっては起動時間が遅くなることもあります。FaaS系のサーバーレスでの運用には適さないかもしれません。</p><p>ダウンロードコンテンツ方式はネットワークアクセスが入りますし、ユーザーに眼に見えるほどの遅延があります。</p><h2 id="セキュリティ"><a href="#セキュリティ" class="headerlink" title="セキュリティ"></a>セキュリティ</h2><p>データの中には、漏洩されたり、メモリを直接書き換えられることで提供者の意図しない被害が生じるものもあります。一番大きな被害をもたらすものはAPIキーやアクセストークンです。これらをソースコード中にハードコードして、リポジトリにでもプッシュしようものなら、大変なことになります。コマンドライン引数も危険です。シェルスクリプトや、Dockerイメージ、コマンドの実行履歴などには引数も残ってしまうからです。</p><p>他のデータでも、改ざんされることでゲームが不正に有利に改変されてしまうなどもあります。ダウンロードコンテンツ方式やファイルは暗号化されることもあります。どうしてもメモリ中に持たないといけないデータは何らかの難読化を加えて、処理するときに復号するということもあります。</p><h1 id="ハイブリッド方式"><a href="#ハイブリッド方式" class="headerlink" title="ハイブリッド方式"></a>ハイブリッド方式</h1><p>いくつか方式を紹介しましたが、すべて独立しているわけではなく、2つの特徴を持った方式などもあります。</p><h2 id="複数のデータソースの透過利用"><a href="#複数のデータソースの透過利用" class="headerlink" title="複数のデータソースの透過利用"></a>複数のデータソースの透過利用</h2><p>言語標準のコマンドラインパーサーでは見たことがありませんが、高機能なサードパーティ製のコマンドラインパーサーの中には、環境変数を読み取って、コマンドライン引数に渡したのと同様に処理してくれるものがあります。なお、複数ソースに対応する場合は、優先順位を決める必要があります。</p><p>また、寡黙にして僕はそれに対応したライブラリは知らないのですが、JavaScriptの世界では、設定ファイルとコマンドライン引数を透過的に扱えるツールが多い気がします。</p><p>Cypressなんかは、デフォルト値、環境変数、CLI、設定ファイルなどに対応しており、どの設定がどこをソースにして読み込まれたのかが一覧で見えたりします。便利ですね。Cypressは、デフォルト値 &lt; 設定ファイル &lt; 環境変数 &lt; コマンドライン引数 &lt; 動的設定という優先度で上書きできるようになっています。他のツールもだいたいこのような優先順位でしょう。</p><img src="/images/20230317a/image.png" alt="image.png" width="1200" height="537" loading="lazy"><p>スマートフォンのゲームだと、最近は初回起動時に大量のデータのダウンロードをさせるのが普通に行われていますが、バンドルされた設定ファイルと、後からダウンロードしたファイルの串刺し検索ができるようにしておいて、初回のチュートリアル突破までは追加ダウンロードでユーザーを待たせることなく行わせ、そのゲームの裏でバックグラウンドでこっそりダウンロードコンテンツをダウンロードさせる、ということをやったことはありました。</p><h2 id="ソースコードの自動生成"><a href="#ソースコードの自動生成" class="headerlink" title="ソースコードの自動生成"></a>ソースコードの自動生成</h2><p>JSONやYAMLなどのファイルをパースすると処理時間がかかりますし、パーサーもバンドルしないといけませんし、エラーチェックも必要になります。</p><p>昔から、行われてきた手法としては、データを解析した結果を、それぞれの言語のリテラルに変換してソースコードとしてバンドルしてしまうというものがあります。CSVを2次元配列として埋め込んだりとかですね。こうすることで、元のデータは外部化でき、プログラマー以外がデータを作ることもできながら、即値や定数と同じような起動時間が得られます。</p><h2 id="設定DSL"><a href="#設定DSL" class="headerlink" title="設定DSL"></a>設定DSL</h2><p>スクリプト言語の場合はコンパイル不要で必要な時に読み込めばよいので、スクリプト言語自身を設定用DSLとして使うこともよくあります。Pythonのパッケージ情報を記述した<code>setup.py</code>とか、Homebrewのパッケージ情報を書いたRubyスクリプトとかありますね。JavaScript界隈だと、設定をコマンドライン引数と、JSONファイルと、YAMLファイルとともに、JSファイルも環境設定フォーマットとして指定できるようになっていたりします。JavaScriptの場合はちょっとしたロジックを書いて、本番環境だと最適化する、といった機能も本体側で対応しなくても実現できます。</p><p><a href="https://jsonnet.org/">Jsonnet</a>や<a href="https://cuelang.org/">cue</a>など構造化プログラミングを一部サポートするような設定用DSLがあります。また、Luaなどの小さい言語の処理系をバンドルすることもあります。</p><h2 id="設定ファイルをバンドル"><a href="#設定ファイルをバンドル" class="headerlink" title="設定ファイルをバンドル"></a>設定ファイルをバンドル</h2><p>Javaには<code>application.properties</code>や<code>application.yaml</code>を実行ファイルにバンドルする方法があります。Goにはgo.embedで静的ファイルをバンドルできるので、アプリケーションの中に設定ファイルを焼き込むことができます。zipファイルを実行ファイルに後付けするという方法もあります。</p><p>自然言語処理やAIなどでは、少し大きなデータセットが必要になったりします。この辞書ファイル辞書ファイルがバンドルされているツールやライブラリは、インストール後すぐに使えて便利です。たとえば、Pythonの<a href="https://mocobeta.github.io/janome/">Janome</a>やGoの<a href="https://qiita.com/ikawaha/items/ff27ac03e22b7f36811b">kagome</a>もありますし、OSS版のStableDiffutionやその派生モデルについては、配布モデルを組み込んだ、数ギガバイトの圧縮ファイルが配布されています。</p><h2 id="ライブリロード"><a href="#ライブリロード" class="headerlink" title="ライブリロード"></a>ライブリロード</h2><p>紹介した方式の中には、デプロイまでに手間がかかるものなどもあります。ローカルのテストで頻繁にパラメータを調整したいようなゲームの場合には、ゲームの中に編集画面があったり、PC側からデータセットの更新をスマホ端末に送りつけて検証する、といったことが行われます。それ用のツールや、編集画面といったものの設計もセットで行う必要があるでしょう。</p><p>単に再起動して再読み込みさせる、といった方法もあれば、オンメモリで持っているデータを更新し、再起動せずに更新できるようにする、など方式があります。</p><h2 id="envファイル"><a href="#envファイル" class="headerlink" title=".envファイル"></a>.envファイル</h2><p>近年はRuby on Rails由来の環境変数を列挙した<code>.env</code>ファイルを使うシステムが増えています。これは最近は高度に発展したエコシステムになっています。これは設定ファイルでもあり、環境変数でもあります。このファイルに対応していないシステムも<a href="https://direnv.net/">direnv</a>を使えば環境変数として読み込めますし、このファイルに対応したライブラリも各言語用にあります。Node.jsだと<a href="https://www.npmjs.com/package/dotenv">dotenv</a>ですね。また、ウェブのフロントエンドのビルドツールでは、たいてい.envファイルをビルド時にアプリケーションに焼き込む機能を備えています。</p><img src="/images/20230317a/名称未設定ファイル.drawio.png" alt="名称未設定ファイル.drawio.png" width="501" height="291" loading="lazy"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PORT=8000</span><br></pre></td></tr></table></figure><p>次のようなコードがあると、ビルドツールが<code>process.env.PORT</code>を8000というリテラルに上書きした上で、デプロイ用のプログラムへのトランスパイルを行います。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ビルド前</span></span><br><span class="line">app.<span class="title function_">listen</span>(process.<span class="property">env</span>.<span class="property">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//ビルド後</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="string">&quot;8000&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>これも定数と同様に、リンク時に決定されるのですが、ビルド時のCI設定で、複数のバリエーションを作るというのが比較的やりやすくなります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>データをどのようにアプリケーションに読み込ませるかの戦略をいろいろ紹介してきました。それぞれメリットやデメリットがあります。実装の複雑さ、変更頻度がどれぐらいあるのか、誰が変更するのか、どのタイミングでアプリケーションに読み込ませるのかなど、さまざまな要件ごとにトレードオフがあります。</p><p>設計というのは意思決定の連続です。単純に「定数化しましょう」というのは設計の指標にはなりません。かならずトレードオフがあります。数箇所しか使われておらず変更されることもない場合はリテラルで直接書いても問題ありませんし、逆に頻繁に変更される場合は外部から読み込ませるなどの仕組みを用意すべきです。</p><p>これまでの方式を表にまとめました。こういうのが好きな人向けに。</p><div class="scroll"><table><thead><tr><th align="left">方式</th><th align="center">確定タイミング</th><th align="center">扱えるデータ量</th><th align="center">切り替え容易性</th><th align="center">起動時間</th><th align="center">実装の楽さ</th></tr></thead><tbody><tr><td align="left">即値（リテラル）</td><td align="center">ビルド時</td><td align="center"></td><td align="center"></td><td align="center">★★★★★</td><td align="center">★★★★★★</td></tr><tr><td align="left">定数</td><td align="center">ビルド時</td><td align="center">★</td><td align="center">★</td><td align="center">★★★★★</td><td align="center">★★★★★</td></tr><tr><td align="left">コマンドライン引数</td><td align="center">起動時</td><td align="center"></td><td align="center">★★★</td><td align="center">★★★</td><td align="center">★★★</td></tr><tr><td align="left">環境変数</td><td align="center">起動時</td><td align="center">★★</td><td align="center">★★★★</td><td align="center">★★★</td><td align="center">★★★</td></tr><tr><td align="left">設定ファイル</td><td align="center">起動時</td><td align="center">★★★</td><td align="center">★★★</td><td align="center">★★★</td><td align="center">★★★</td></tr><tr><td align="left">ダウンロードコンテンツ</td><td align="center">起動時</td><td align="center">★★★★</td><td align="center">★★★★</td><td align="center"></td><td align="center">★</td></tr><tr><td align="left">オンラインデータベース</td><td align="center">リアルタイム</td><td align="center">★★★★★</td><td align="center">★★</td><td align="center">★★★</td><td align="center"></td></tr></tbody></table></div><p>これらの評価はアプリケーションの種類などによっても多少は変動します。例えばコマンドライン引数はサーバーアプリケーションの場合はコンテナイメージ作成時に固定されます。環境変数はデプロイ時に固定されます。スマホアプリのダウンロードコンテンツであればユーザーが手元で起動すれば更新されるので、同じ起動時でも大きく評価が変わる点は要注意です。</p><p>設計を事前に全部きちんと決め切るのか、コアの部分でない部分は後回しでいいよ、とかいろいろありますが、「どうしてもこれは譲れない」という要件は最初から見込めるわけで、そういう「わかりきっていること」を無視して手戻りが発生というのは誰も幸せにならないですし、逆に最初からオーバースペックで作ってしまうのも問題ですし、みなさんの残業時間が減って、家族と過ごす時間が増えたり、映画を見にいったり、楽しくなることを期待しています。</p><p>本エントリーは多くの人との議論で何度かブラッシュアップしました。@tokoroten, @johtani, @_2F_1, @r_rudi, @_SmallAnimal, @kumagi, @lambda_sakura, @mopemope, @takabow各位に感謝します。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3/">アーキテクチャ</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2/">ソフトウェア</category>
      
      
      <comments>https://future-architect.github.io/articles/20230317a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Jenkinsのエージェントノードをストレージを永続化しながらスポットインスタンスで運用する</title>
      <link>https://future-architect.github.io/articles/20230315a/</link>
      <guid>https://future-architect.github.io/articles/20230315a/</guid>
      <pubDate>Tue, 14 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230315a/logo-title-opengraph.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;250&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230315a/logo-title-opengraph.png" alt="" width="500" height="250"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。フューチャーインスペースの平井です。</p><p>昨今の円安でAWS使用料が増加したことにより、構成見直し等で費用削減を図っている方も多いと思います。</p><p>私の現場でも費用削減の一環として、先日Jenkinsで使用している<a href="https://www.jenkins.io/blog/2020/06/18/terminology-update/">エージェントノード</a>(※1)をオンデマンドインスタンスからスポットインスタンスに移行しました。</p><p>※1:昨今の<code>マスター</code>や<code>スレーブ</code>といったプログラミング用語置き換えの流れにより、Jenkinsもマスターノードをコントローラーノード、スレーブノードをエージェントノードへと改名したようです。</p><p>今回は移行時に工夫した点を紹介いたします。</p><h1 id="環境-x2F-構成"><a href="#環境-x2F-構成" class="headerlink" title="環境&#x2F;構成"></a>環境&#x2F;構成</h1><ul><li>コントローラーノード<ul><li>OS:CentOS Linux release 7.7.1908 (Core)</li><li>Jenkins: 2.190</li><li>EC2 Plugin: 1.50.3</li></ul></li><li>エージェントノード<ul><li>OS:CentOS Linux release 7.7.1908 (Core)</li><li>openjdk:1.8.0_232</li></ul></li></ul><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>まず、元々オンデマンドインスタンスで動かしていたジョブについて説明します。</p><p>対象のジョブではプロジェクト開発支援のため日々ソースファイル解析が行われていました。<br>解析対象ソースはSubversionで管理されており、以下のような課題がありました。</p><ul><li>取得処理の課題<ul><li>svnリポジトリが100超あり、65万ファイル、容量70GBと巨大</li><li>ソース解析の中でファイル間の依存関係解決をするため、常に全量取得する必要がある</li><li>ジョブはソースタイプ毎に分かれているため、ジョブ単位で取得するとストレージが肥大化する</li></ul></li></ul><p>そこで、処理短縮とストレージ節約を図るため、対および実現案を考えました。</p><ul><li>対策<ul><li>svn checkoutしたワーキングディレクトリを保持してsvn updateにより差分で最新ソース取得し時間を短縮化させる</li><li>svn checkout&#x2F;updateするジョブを1つに制限し、複数ジョブで1つのworkspaceを直接参照する</li></ul></li><li>実現案<ol><li><a href="https://plugins.jenkins.io/shared-workspace/">Shared Workspace Plugin</a>(※2)を使って各ジョブで共有<ul><li>※2:共有元ジョブのworkspaceををzipに固めてmasterノードに転送、共有先ジョブではmasterから転送してzip解凍するJenkinsプラグイン</li></ul></li><li><a href="https://plugins.jenkins.io/copyartifact/">Copy Artifact Plugin</a>(※3)を使ってworkspaceを成果物保存して各ジョブでコピー<ul><li>※3:ジョブで作られたファイルを成果物としてmasterノードに転送、共有先ジョブではmasterから転送するJenkinsプラグイン</li></ul></li><li>1つのsvn checkout&#x2F;updateジョブのworkspaceをs3に転送して永続化、次回実行時はs3から取得してsvn update実行</li><li>エージェントノード（オンデマンドインスタンス）でsvn checkout状態をEBSに永続化<ul><li>オンデマンドインスタンスはジョブ実行時のみ起動・停止</li></ul></li></ol></li></ul><p>1,2は大量ファイルの場合転送コストが大きく、ストレージもジョブごとに消費するためコストメリットがなく却下。</p><p>3も1,2と同様転送コストが大きいことに加えSCMポーリングとの相性が悪いため却下。</p><p>4のオンデマンドインスタンス方式を採用していました。</p><h1 id="スポットインスタンスへの移行"><a href="#スポットインスタンスへの移行" class="headerlink" title="スポットインスタンスへの移行"></a>スポットインスタンスへの移行</h1><p>その後もオンデマンドインスタンスで運用していましたが、冒頭の通り費用削減の一環でスポットインスタンス移行を検討することとなりました。</p><p>結果、費用削減の他にもメリットがあることを確認し、本格的に移行する流れとなりました。</p><h2 id="主なメリット"><a href="#主なメリット" class="headerlink" title="主なメリット"></a>主なメリット</h2><h3 id="費用削減"><a href="#費用削減" class="headerlink" title="費用削減"></a>費用削減</h3><p>インスタンスクラスにもよりますが、オンデマンドインスタンスと比較して約70%の割引を受けることができます。<br>参考:<a href="https://www.stylez.co.jp/columns/how_to_use_spot_instances_to_reduce_aws_costs/">AWSコスト削減のためのスポットインスタンス活用術</a></p><p>また、オンデマンド・スポット共通ですが、高負荷な処理にエージェントノードを使うことでマスターノードのインスタンスタイプを小さくして運用することができます。</p><p>つまり、コスト削減と高パフォーマンスの両取りが可能です。</p><h3 id="構成のシンプル化"><a href="#構成のシンプル化" class="headerlink" title="構成のシンプル化"></a>構成のシンプル化</h3><p>現在の構成では起動&#x2F;停止ジョブでエージェントノード（オンデマンドインスタンス）を制御する必要がありました。</p><p>しかし移行後の構成では<a href="https://plugins.jenkins.io/ec2/">Amazon EC2 Plugin</a>(※4)でエージェントノード（スポットインスタンス）を制御できるため、構成がシンプルになりました。</p><p>※4:ジョブ実行時に自動でEC2を作成し、エージェントノードとして使用できるようにするプラグイン。EC2はジョブ終了後に自動で終了される。</p><ul><li>現在の構成（ジョブによるエージェントノード制御）<img src="/images/20230315a/image.png" alt="image.png" width="1200" height="68" loading="lazy"></li><li>移行後の構成（Amazon EC2 Pluginによるエージェントノード制御）<img src="/images/20230315a/image_2.png" alt="image.png" width="1154" height="154" loading="lazy"></li></ul><h3 id="リタイアメント対応が不要"><a href="#リタイアメント対応が不要" class="headerlink" title="リタイアメント対応が不要"></a>リタイアメント対応が不要</h3><p>スポットインスタンスはジョブ実行毎に作成&#x2F;終了されるため、オンデマンドインスタンスで意識する必要のあったEC2リタイアメント対応が不要となりました。</p><p>参考:<a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/instance-retirement.html">インスタンスのリタイア</a></p><h1 id="実装のポイント"><a href="#実装のポイント" class="headerlink" title="実装のポイント"></a>実装のポイント</h1><p>checkout状態をEBSで永続化する構成のため、スポットインスタンスの場合は起動時にEBSをアタッチさせる必要があります。なお起動時のEBSアタッチについては起動テンプレートを使う方法がAWS公式から案内されています。</p><p>参考：<a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/ec2-linux-spot-instance-attach-ebs-volume/">起動時に永続的なセカンダリ EBS ボリュームを新しい EC2 Linux スポットインスタンスに自動的に添付するにはどうすればよいですか。</a></p><p>当初、Amazon EC2 Pluginに起動テンプレートを指定してスポットインスタンスを動かせれば、と考えたのですが、<strong>プラグインが起動テンプレートに対応していませんでした。</strong></p><p>そこで起動テンプレート以外の方法を探り、最終的に<strong>同プラグインのinit scriptにEBSアタッチ処理を組み込んで実現できるか</strong>確認することとしました。</p><h2 id="init-scriptについて"><a href="#init-scriptについて" class="headerlink" title="init scriptについて"></a>init scriptについて</h2><p>init scriptではスポットインスタンス起動時に実行したい処理をshellで書くことができます。<br>今回は以下の通りとしました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 初期化</span></span><br><span class="line">INSTANCE_ID=</span><br><span class="line">UUID=</span><br><span class="line"></span><br><span class="line"><span class="comment">## EBSアタッチ</span></span><br><span class="line">INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$&#123;INSTANCE_ID&#125;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    aws ec2 attach-volume --volume-id &lt;ボリュームID&gt; --device /dev/sdb --instance-id <span class="variable">$&#123;INSTANCE_ID&#125;</span> --region ap-northeast-1</span><br><span class="line">    <span class="built_in">sleep</span> 10</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## /dataマウント</span></span><br><span class="line">UUID=$(lsblk -f | grep nvme1n1 | sed -e <span class="string">&#x27;s/ \+/ /g&#x27;</span> |<span class="built_in">cut</span> -f 3 -d <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$&#123;UUID&#125;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    sudo mount UUID=<span class="variable">$&#123;UUID&#125;</span> /data</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## マウント確認</span></span><br><span class="line"><span class="keyword">if</span> ! mountpoint /data; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>順に解説します。</p><ul><li>EBSアタッチ処理<br><code>http://169.254.169.254/latest/meta-data/instance-id</code>(※5)でインスタンスIDを取得し、後続のEBSアタッチ処理に渡しています。<br>&lt;ボリュームID&gt;にはアタッチしたいEBSを指定します。また、sleep 10によりEBSアタッチが未完了のまま次処理に進むことを防いでいます。<br>  ※5:<code>169.254.169.254</code>はAWSインスタンスメタデータサービスの固定IPです。<br>参考：<a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html">インスタンスメタデータの取得</a><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## EBSアタッチ</span></span><br><span class="line">INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$&#123;INSTANCE_ID&#125;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    aws ec2 attach-volume --volume-id &lt;ボリュームID&gt; --device /dev/sdb --instance-id <span class="variable">$&#123;INSTANCE_ID&#125;</span> --region ap-northeast-1</span><br><span class="line">    <span class="built_in">sleep</span> 10</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li>EBSをjenkins_homeのパスにマウント<br>EBSのデバイス名には規則があり、追加順に<code>/dev/nvme[0-26]n1</code>で採番されていきます。<br>参考：<a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/nvme-ebs-volumes.html">Linux インスタンスの Amazon EBS および NVMe</a><br>ルートボリュームのデバイス名は<code>/dev/nvme0n1</code>のため、今回のアタッチ分は<code>/dev/nvme1n1</code>となります。また、今回はjenkins_homeのパスを<code>/data/jenkins_home</code>としたいため、<code>/data</code>配下をマウントしました。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## /dataマウント</span></span><br><span class="line">UUID=$(lsblk -f | grep nvme1n1 | sed -e <span class="string">&#x27;s/ \+/ /g&#x27;</span> |<span class="built_in">cut</span> -f 3 -d <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$&#123;UUID&#125;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    sudo mount UUID=<span class="variable">$&#123;UUID&#125;</span> /data</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## マウント確認</span></span><br><span class="line"><span class="keyword">if</span> ! mountpoint /data; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="スポットインスタンスへの変更"><a href="#スポットインスタンスへの変更" class="headerlink" title="スポットインスタンスへの変更"></a>スポットインスタンスへの変更</h1><p>実際にエージェントノードをスポットインスタンスに変更し、想定通りの動きとなるか確認しました。</p><p>変更に伴い発生した作業を記載します。</p><h2 id="AWS"><a href="#AWS" class="headerlink" title="AWS"></a>AWS</h2><h3 id="エージェントノード用のIAM-Role作成"><a href="#エージェントノード用のIAM-Role作成" class="headerlink" title="エージェントノード用のIAM Role作成"></a>エージェントノード用のIAM Role作成</h3><p>エージェントノード内でEBSのアタッチを行うため、ec2:AttachVolume権限を付与したIAM Roleを作成しました。</p><h3 id="エージェントノード用のセキュリティグループ作成"><a href="#エージェントノード用のセキュリティグループ作成" class="headerlink" title="エージェントノード用のセキュリティグループ作成"></a>エージェントノード用のセキュリティグループ作成</h3><p>エージェントノード立ち上げ時、コントローラーノードからエージェントノードへssh接続する処理があるため、エージェントノードにSSH(22)を許可したセキュリティグループが必要となります。<br>今回は元々使用していたセキュリティグループを流用しました。</p><h3 id="エージェントノード用のAMI作成"><a href="#エージェントノード用のAMI作成" class="headerlink" title="エージェントノード用のAMI作成"></a>エージェントノード用のAMI作成</h3><p>以下1~4を実施してAMIを作成しました。</p><h4 id="1-Javaのインストール"><a href="#1-Javaのインストール" class="headerlink" title="1. Javaのインストール"></a>1. Javaのインストール</h4><p>エージェントノードは起動時にslave.jarを実行するためインストールしました。</p><h4 id="2-AWS-CLIのインストール"><a href="#2-AWS-CLIのインストール" class="headerlink" title="2. AWS CLIのインストール"></a>2. AWS CLIのインストール</h4><p>AWS CLIコマンドでEBSをアタッチするためインストールしました。</p><h4 id="3-ジョブ実行用ユーザ作成"><a href="#3-ジョブ実行用ユーザ作成" class="headerlink" title="3. ジョブ実行用ユーザ作成"></a>3. ジョブ実行用ユーザ作成</h4><p>デフォルトユーザ（例:AL2ならec2-user）が使えるため作成しなくても良いのですが、既存のエージェントノードでjenkinsという専用ユーザを用意していたため今回も踏襲して作成しました。</p><h4 id="4-visudo編集"><a href="#4-visudo編集" class="headerlink" title="4. visudo編集"></a>4. visudo編集</h4><p>ジョブ実行ユーザがNOPASSWDでmountコマンドを実行できるようにするため設定しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenkins    ALL=(ALL)       NOPASSWD: /usr/bin/mount</span><br></pre></td></tr></table></figure><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><h3 id="EC2-Pluginインストール"><a href="#EC2-Pluginインストール" class="headerlink" title="EC2 Pluginインストール"></a>EC2 Pluginインストール</h3><p>jenkinsにAmazon EC2 Pluginをインストールしておきます。</p><h3 id="エージェントノードの起動設定"><a href="#エージェントノードの起動設定" class="headerlink" title="エージェントノードの起動設定"></a>エージェントノードの起動設定</h3><p>「Jenkinsの管理 → システムの設定」のクラウド項目で「Amazon EC2」を選択すると表示されます。<br>今回は意識して設定した項目を抜粋します。</p><ul><li><p><strong>AMI ID</strong></p><ul><li>上述の手順で作成したエージェント用のAMIを設定しました。</li></ul></li><li><p><strong>Instance Type</strong></p><ul><li>エージェントを起動するインスタンスタイプを設定します。<br>今回は変更前と同タイプにしました。</li></ul></li><li><p><strong>Use Spot Instance</strong></p><ul><li>スポットインスタンスで起動させるためチェックを入れました。</li></ul></li><li><p><strong>Spot Max Bid Price</strong></p><ul><li>スポットインスタンス起動に許容できる最高価格を設定します。<br>今回はできるだけ中断のリスクを避けたかったためデフォルト（オンデマンドインスタンスの価格）としました。</li></ul></li><li><p><strong>Security group names</strong></p><ul><li>エージェントノード用のセキュリティグループを設定しました。</li></ul></li><li><p><strong>Remote FS root</strong></p><ul><li>エージェントノードのjenkins_homeとなるパスを設定します。<br>今回はアタッチするEBSを&#x2F;data配下にマウントするため、<code>/data/jenkins_home/</code>としました。</li></ul></li><li><p><strong>Remote user</strong></p><ul><li>エージェントノードにログインするユーザを設定します。今回はjenkinsユーザとしました。</li></ul></li><li><p><strong>Labels</strong></p><ul><li>一意なラベルを設定します。ここで指定したラベルを後述のジョブで設定します。</li></ul></li><li><p><strong>Init script</strong></p><ul><li>EBSアタッチ処理を記載します。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 初期化</span></span><br><span class="line">INSTANCE_ID=</span><br><span class="line">UUID=</span><br><span class="line"></span><br><span class="line"><span class="comment">## EBSアタッチ</span></span><br><span class="line">INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$&#123;INSTANCE_ID&#125;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    aws ec2 attach-volume --volume-id &lt;ボリュームID&gt; --device /dev/sdb --instance-id <span class="variable">$&#123;INSTANCE_ID&#125;</span> --region ap-northeast-1</span><br><span class="line">    <span class="built_in">sleep</span> 10</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## /dataマウント</span></span><br><span class="line">UUID=$(lsblk -f | grep nvme1n1 | sed -e <span class="string">&#x27;s/ \+/ /g&#x27;</span> |<span class="built_in">cut</span> -f 3 -d <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$&#123;UUID&#125;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    sudo mount UUID=<span class="variable">$&#123;UUID&#125;</span> /data</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## マウント確認</span></span><br><span class="line"><span class="keyword">if</span> ! mountpoint /data; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number of Executors</strong></p><ul><li>ジョブの並列度を指定します。今回は変更前と同じとしています。</li></ul></li><li><p><strong>IAM Instance Profile</strong></p><ul><li>エージェントノード用に作成したIAM Roleを設定しました。</li></ul></li></ul><h3 id="ジョブの設定"><a href="#ジョブの設定" class="headerlink" title="ジョブの設定"></a>ジョブの設定</h3><p>ジョブの設定 → 実行するノードを制限からさきほど設定したラベルを指定します。</p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>スポットインスタンスがEBSアタッチされた状態でエージェントノードとして起動するかを確認します。<br>なお一部情報はマスクしています。</p><ul><li>まずログからスポットインスタンスが立ち上がることを確認します。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2 21, 2023 2:48:02 午後 情報 hudson.plugins.ec2.EC2Cloud<span class="variable">$1</span> call</span><br><span class="line">SlaveTemplate&#123;ami=<span class="string">&#x27;&lt;AMI ID&gt;&#x27;</span>, labels=<span class="string">&#x27;&lt;ラベル名&gt;&#x27;</span>&#125; Node EC2 (&lt;エージェントノード名&gt;) - &lt;インスタンス名&gt; (&lt;インスタンスID&gt;) moved to RUNNING state <span class="keyword">in</span> 5 seconds and is ready to be connected by Jenkins</span><br><span class="line">2 21, 2023 2:48:03 午後 情報 hudson.plugins.ec2.EC2RetentionStrategy start</span><br><span class="line">Start requested <span class="keyword">for</span> EC2 (&lt;エージェントノード名&gt;) - &lt;インスタンス名&gt; (&lt;インスタンスID&gt;)</span><br><span class="line">2 21, 2023 2:48:03 午後 情報 hudson.plugins.ec2.EC2Cloud <span class="built_in">log</span></span><br><span class="line">Launching instance: &lt;インスタンスID&gt;</span><br></pre></td></tr></table></figure><ul><li>立ち上がった段階ではルートボリュームのみ存在しています。<img src="/images/20230315a/2023-02-21_14h48_27.png" alt="2023-02-21_14h48_27.png" width="1200" height="325" loading="lazy"></li><li>サーバ上でもルートボリューム（<code>/dev/nvme0n1p1</code>）のみであることが確認できます。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[jenkins@&lt;インスタンス名&gt; ~]$ <span class="built_in">df</span> -h</span><br><span class="line">ファイルシス   サイズ  使用  残り 使用% マウント位置</span><br><span class="line">devtmpfs          16G     0   16G    0% /dev</span><br><span class="line">tmpfs             16G     0   16G    0% /dev/shm</span><br><span class="line">tmpfs             16G   17M   16G    1% /run</span><br><span class="line">tmpfs             16G     0   16G    0% /sys/fs/cgroup</span><br><span class="line">/dev/nvme0n1p1    30G   24G  6.1G   80% /</span><br><span class="line">tmpfs            3.1G     0  3.1G    0% /run/user/1101</span><br></pre></td></tr></table></figure></li></ul></li><li>SSH接続後、init scriptが実行されます。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2 21, 2023 2:48:18 午後 情報 hudson.plugins.ec2.EC2Cloud <span class="built_in">log</span></span><br><span class="line">Connected via SSH.</span><br><span class="line">2 21, 2023 2:48:18 午後 情報 hudson.plugins.ec2.EC2Cloud <span class="built_in">log</span></span><br><span class="line">Creating tmp directory (/tmp) <span class="keyword">if</span> it does not exist</span><br><span class="line">2 21, 2023 2:48:18 午後 情報 hudson.plugins.ec2.EC2Cloud <span class="built_in">log</span></span><br><span class="line">Executing init script</span><br></pre></td></tr></table></figure><ul><li>このタイミングで追加するEBSのアタッチを確認できます。<img src="/images/20230315a/2023-02-21_14h48_44.png" alt="2023-02-21_14h48_44.png" width="1200" height="355" loading="lazy"></li><li>サーバ上でも追加したEBSがデバイス<code>/dev/nvme1n1</code>として<code>/data</code>にマウントされました。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[jenkins@&lt;インスタンス名&gt; ~]$ <span class="built_in">df</span></span><br><span class="line">ファイルシス   1K-ブロック     使用   使用可 使用% マウント位置</span><br><span class="line">devtmpfs          16128016        0 16128016    0% /dev</span><br><span class="line">tmpfs             16152604        0 16152604    0% /dev/shm</span><br><span class="line">tmpfs             16152604    16940 16135664    1% /run</span><br><span class="line">tmpfs             16152604        0 16152604    0% /sys/fs/cgroup</span><br><span class="line">/dev/nvme0n1p1    31445996 25533000  5912996   82% /</span><br><span class="line">tmpfs              3230524        0  3230524    0% /run/user/1101</span><br><span class="line">tmpfs              3230524        0  3230524    0% /run/user/1301</span><br><span class="line">tmpfs              3230524        0  3230524    0% /run/user/0</span><br><span class="line">/dev/nvme1n1     104832000 62866356 41965644   60% /data</span><br></pre></td></tr></table></figure></li></ul></li><li>最後に<code>java  -jar /tmp/remoting.jar -workDir /data/jenkins_home/</code>が実行され、スポットインスタンスの起動を確認できました。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2 21, 2023 2:48:32 午後 情報 hudson.plugins.ec2.EC2Cloud <span class="built_in">log</span></span><br><span class="line">Copying remoting.jar to: /tmp</span><br><span class="line">2 21, 2023 2:48:32 午後 情報 hudson.plugins.ec2.EC2Cloud <span class="built_in">log</span></span><br><span class="line">Launching remoting agent (via SSH client process): ssh -o StrictHostKeyChecking=no -i /tmp/ec2_8484693589346546536.pem jenkins@&lt;エージェントノードIP&gt; -p 22  java  -jar /tmp/remoting.jar -workDir /data/jenkins_home/</span><br><span class="line">2 21, 2023 2:48:37 午後 情報 hudson.slaves.CommandLauncher launch</span><br><span class="line">agent launched <span class="keyword">for</span> EC2 (&lt;エージェントノード名&gt;) - &lt;インスタンス名&gt; (&lt;インスタンスID&gt;)</span><br></pre></td></tr></table></figure></li></ul><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>Amazon EC2 Pluginはinit scriptで自由に構成を変えられるので、ベースとなるAMIが一つで済むのも強みだと思いました。</p><p>また、今回は処理を直接init scriptに書きましたが、以下の方式にすれば処理内容をgitで管理することもできそうです。</p><ol><li>git管理している実行ファイルをgit clone</li><li>git cloneした実行ファイルを呼び出す</li></ol><p>今回の検証を足掛かりにし、引き続き構成改善をしていこうと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Jenkins/">Jenkins</category>
      
      <category domain="https://future-architect.github.io/tags/ebs/">ebs</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%83%9D%E3%83%83%E3%83%88%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9/">スポットインスタンス</category>
      
      
      <comments>https://future-architect.github.io/articles/20230315a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2023年 フューチャー技術ブログ連載の企画スケジュール </title>
      <link>https://future-architect.github.io/articles/20230314a/</link>
      <guid>https://future-architect.github.io/articles/20230314a/</guid>
      <pubDate>Mon, 13 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230314a/board-ge3fc44724_640.jpg&quot; alt=&quot;board-ge3fc44724_640.jpg&quot; width=&quot;640&quot; height=&quot;427&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230314a/board-ge3fc44724_640.jpg" alt="board-ge3fc44724_640.jpg" width="640" height="427" loading="lazy"><p>2023年に計画している、ブログ連載のスケジュールを紹介します。</p><h2 id="連載計画を発表する背景"><a href="#連載計画を発表する背景" class="headerlink" title="連載計画を発表する背景"></a>連載計画を発表する背景</h2><p><a href="/articles/20210112/">2021年</a>、<a href="/articles/20220117a/">2022年</a>の記事でも説明しましたが、あらためてまとめます。</p><ul><li>募集が開催の1~3ヶ月ほぼ前で準備期間が短いため、すでにネタがある人しか参加できなくなりがち<ul><li>本当はもっと初心者の方でも参加できるようにするため、事前に告知しておきたい</li></ul></li><li>参加者募集のアナウンス強化<ul><li>まったくメールを見ない（私です）人もいれば、Slack,Google Chatをみない人など様々なので、チャネルを増やしてヒット率を上げたい</li></ul></li><li>寄稿者の幅を広げたい<ul><li>リモートワークになってからの他チームにジョインしたメンバーなどに少しでも届くように</li><li>スケジュールをSlack、Google Chatでリマインドしても見逃しがちなのと、ふとした瞬間にググって見つけられるようにする</li></ul></li><li>企画が増えてくると、寄稿者を募集するスケジューリングが忘れがちになるため備忘にしたい<ul><li>スプレッドシート管理はファイルがどこにいったか分からなくなりがち</li></ul></li><li>「こういった連載テーマはどうか？」といったフィードバックを得られるように<ul><li>ケーパビリティの限界はありますが、社内、社外問わず、様々な需要に応えていきたいと思っています</li></ul></li><li>実施の振り返りに<ul><li>予実管理として、当初見込んだ企画の遂行率を見れるように</li></ul></li></ul><p>昨年は11月予定だったPython 3.11連載をやり切れず（秋のブログ週間で息切れ）、同月のTerraform連載も開催できずだった1割ほどは計画未達でした。年末はBPYは評価シーズンなど当社に取って繁忙期なので、11月にイベントを重ねないように注意しないと、という学びを得ました。</p><h2 id="2023年の計画"><a href="#2023年の計画" class="headerlink" title="2023年の計画"></a>2023年の計画</h2><p>2023年にはじめて開催する連載は初心者マーク（🔰）を付けてみました。CNCF連載は3年ぶり、Python連載は2年ぶりの開催予定です。2022年に初めて行ったGIS連載は2連続で開催。昨年まで行っていた電子工作&#x2F;IoT連載は今年はスキップの予定です。</p><div class="scroll"><table><thead><tr><th>Month</th><th>Title</th><th>Memo</th><th>Link</th></tr></thead><tbody><tr><td>1月</td><td>Go1.20</td><td>Go言語のリリースノートからテーマをピックアップして深堀りする連載</td><td><a href="/articles/20230123a/">Go1.20</a></td></tr><tr><td>2月</td><td>🔰読書感想文</td><td>積読を消化するためにみんなで書評を書く</td><td><a href="/articles/20230217a/">2023</a></td></tr><tr><td>3月</td><td>🔰Terraform 1.4 リリース記念</td><td>Terraform 1.4リリースを記念にTerraform全般でネタを書く</td><td>2023</td></tr><tr><td>4月</td><td>春の入門祭り</td><td>初心者向けに入門記事を書いてみようという連載</td><td>2023、<a href="/articles/20220418a/">2022</a>、<a href="/articles/20210414a/">2021</a>、<a href="/articles/20200529/">2020</a></td></tr><tr><td>5月</td><td>CNCF連載</td><td>Cloud Native Computing Foundationやプロダクトについて</td><td>2023、<a href="/articles/20200928">2020</a></td></tr><tr><td>6月</td><td>地図・GIS・位置特定に関する連載</td><td>住所、地図、地理、GIS、位置特定などについての連載</td><td>2023、<a href="/articles/20220719a/">2022</a></td></tr><tr><td>7月</td><td>Go1.21</td><td>Go言語のリリースノートからテーマをピックアップして深堀りする連載</td><td>Go1.21</td></tr><tr><td>8月</td><td>夏休み自由研究</td><td>夏休みに行った自由研究と銘うって、個人的に関心があることを深堀りして調べる連載</td><td>2023、<a href="/articles/20220822a/">2022</a>、<a href="/articles/20210823a/">2021</a>、<a href="/articles/20200726/">2020</a></td></tr><tr><td>9月</td><td>🔰ETL連載</td><td>ETL (Extract, Transform, Load)についての設計、実装手法や、関連するミドルウェア、ライブラリ、サービスについて</td><td>2023</td></tr><tr><td>10月</td><td>秋のブログ週間</td><td>秋の夜長に楽しめるように、いつもより文章が多めな読み物、エッセーを集める</td><td>2023、<a href="/articles/20221031a/">2022</a>、<a href="/articles/20211027a/">2021</a>、<a href="/articles/20201026/">2020</a></td></tr><tr><td>11月</td><td>Python 3.12 リリース記念</td><td>Python 3.12リリース記念で、Python全般についての連載</td><td>2023、<a href="/articles/20210927b/">2021</a></td></tr><tr><td>12月</td><td>アドベントカレンダー</td><td>Qiitaさんのアドベントカレンダーのイベントに乗っかる連載</td><td><a href="https://qiita.com/advent-calendar/2022/future">2022</a>、<a href="https://qiita.com/advent-calendar/2021/future">2021</a>、<a href="https://qiita.com/advent-calendar/2020/future">2020</a>、<a href="https://qiita.com/advent-calendar/2019/future">2019</a>、<a href="https://qiita.com/advent-calendar/2017/future">2018</a>、<a href="https://qiita.com/advent-calendar/2017/future">2017</a>、<a href="https://qiita.com/advent-calendar/2016/future">2016</a>、<a href="https://qiita.com/advent-calendar/2015/future">2015</a></td></tr></tbody></table></div><p>新しい風を入れつつ、春・夏・秋などの定番企画は引き続き開催しようと思っています。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>これまでの経緯を踏まえテーマをブラッシュアップしています。2022年も皆様にとって有益な情報発信を活発にしていきますので、応援よろしくおねがいします！</p><p>社員の皆さんへ：</p><p><a href="/articles/20200908/">フューチャー技術ブログで行っている連載企画が良いよって話</a> でも記載しましたが、読み手にとっても、書き手にとっても色々とメリットがあります。引き継ぎ資料としても有用です。セルフブランディングとしても重要ですし、評価される立派な業務活動です。興味があるけどブログに載せるほどのネタになるか不安という声はよく聞きます。どういうレベル感の記事を書くべきかにも相談を承っています。ハードルは限りなく低いので、DMなどで連絡いただけるとです。お気軽に参加いただけるとです。だいたい2～4週間前に寄稿者募集を投げるためレスポンスをいただけると助かります。チャージコードを用意してお待ちしています。</p><p>アイキャッチ画像は、<a href="https://pixabay.com/ja/users/skitterphoto-324082/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=761586">Rudy and Peter Skitterians</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=761586">Pixabay</a>を利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/TechBlog/">TechBlog</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/">運営</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB/">スケジュール</category>
      
      
      <comments>https://future-architect.github.io/articles/20230314a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【エネルギー業界】国家資格「高圧ガス第二種販売主任者」合格までの道のり</title>
      <link>https://future-architect.github.io/articles/20230313a/</link>
      <guid>https://future-architect.github.io/articles/20230313a/</guid>
      <pubDate>Sun, 12 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは。&lt;br&gt;フューチャー株式会社TIG&amp;#x2F;EX（Energy Transformation）ユニットの久保 樹礼（くぼ</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは。<br>フューチャー株式会社TIG&#x2F;EX（Energy Transformation）ユニットの久保 樹礼（くぼ たつあき）です。</p><p>私は2017年フューチャーに新卒入社し、これまでメディア業・アパレル業・防災事業にわたりパートナー企業様の事業効率化・拡大に携わってきましたが、昨年より総合エネルギー業の企業様とご一緒させていただいております。2022年度は、フューチャーの従業員代表も努めさせていただきました。（<a href="https://note.future.co.jp/n/n17eabb81ba94">従業員代表活動記事はこちら</a>）</p><p>そんな私が、2023年1月にLPガス小売業では必須と言える国家資格「<strong>高圧ガス第二種販売主任者</strong>」に合格したので、なぜITコンサルタントである私が本資格取得に挑戦したのか、資格取得に向けどのように勉強したのかご紹介します。</p><p>第二種販売主任者免状取得に向けて、挑戦しようとしている方の参考になると嬉しいです。</p><img src="/images/20230313a/高圧ガス販売主任者第二種合格通知書.png" alt="高圧ガス販売主任者第二種合格通知書.png" width="1200" height="630" loading="lazy"><p>参考までに：</p><p>高圧ガス販売主任者免状には、「第一種」と本記事で紹介する「第二種」があります。第二種は、LPガスの販売に係る保安の実務を含む統括的な業務を行う方に必要な免状です。一方で、第一種はLPガス以外の高圧ガス（詳細は<a href="https://elaws.e-gov.go.jp/document?lawid=341M50000400053#Mp-At_72">一般則第七十二条</a>参照）を対象としています。ガスの種類の違いなので、一種・二種に上下関係などはありません。</p><h1 id="「高圧ガス第二種販売主任者」受験の動機"><a href="#「高圧ガス第二種販売主任者」受験の動機" class="headerlink" title="「高圧ガス第二種販売主任者」受験の動機"></a>「高圧ガス第二種販売主任者」受験の動機</h1><p>第二種販売主任者受験の動機は、パートナー企業様の現場や実務をより詳しく知りたいと考えたからです。<br>当然、経営とITをデザインするフューチャーですから、パートナー企業様の実務に詳しいですが”まだ足りない!!!”と感じたからです（笑</p><p>私は昨年より、総合エネルギー事業を営むパートナー企業様と共に、LPガス託送の配送最適化に挑戦しています。<br>その中で、実際にLPガスの充填基地に訪れ、ボンベを担がせていただいたり、配送員の方々と会話させていただいたりと現場に触れる機会をいただきました。</p><p>しかし配送最適化に向けた議論をパートナーと重ねる中で、自身の配送現場の理解不足をしばしば痛感していました。</p><img src="/images/20230313a/充填場訪問.png" alt="充填場訪問.png" width="1200" height="630" loading="lazy"><p>そんな最中、現場担当者様と会話させていただいた折、「IT知っている人はすごいと思う。私も自身の業務を動かしているシステムがどうやって作られているのか、理解を深めようとITパスポート挑戦してみたが本当に難しいと実感した」とおっしゃられていました。</p><p>私が現場の知識を求める一方で、配送現場の方もこちら（IT）の理解を深めたいと必死なことを改めて認識し、この方と同じレベルで託送について語りたい！と思いました。LPガス現場の方々と同じ視点で語るためには、何が必要か、どんな手段があるかと調べた時に見つけたのが国家資格「高圧ガス第二種販売主任者」でした。</p><p>本資格合格後に得られる「第二種販売主任者免状」は、パートナー企業様社員や、LPガス小売業社員であれば皆保有している資格です。私は「高圧ガス第二種販売主任者」資格取得に挑戦することで、より深い知見を習得し、またパートナー様と同じ目線で会話したい思い受験しました。</p><p>第二種販売主任者免状を得ると、LPガスの販売事業所の統括的な業務主任者に選任されることができます。</p><p>業務主任者に選任されるためには、免状を取得していることの他に高圧ガスの販売に関する実務経験を６ヶ月必要としますが、条件を満たすことでLPガス販売事業では欠かせない人材となることができます。</p><blockquote><p>LPガスの販売事業所において、LPガスの販売に係る保安の実務を含む統括的な業務を行う方に必要な資格で、工業用のLPガスの販売主任者（高圧ガス保安法）として、また、一般家庭等で生活の用に供するLPガスを販売するLPガス販売所の業務主任者又は業務主任者の代理者（液化石油ガス法）として選任されることができ、LPガスの販売に関する保安に携わることができます。</p><blockquote><p>引用元：<a href="https://www.khk.or.jp/qualification/national_qualification/examination/examination_range.html">高圧ガス保安協会＞国家資格の概要及び職務範囲</a></p></blockquote></blockquote><h1 id="実施した勉強方法"><a href="#実施した勉強方法" class="headerlink" title="実施した勉強方法"></a>実施した勉強方法</h1><p>私が実施した勉強方法は以下です。</p><ul><li>高圧ガス保安法の熟読（<a href="https://elaws.e-gov.go.jp/document?lawid=326AC0000000204">E-GOV</a>というサイトから）</li><li>液化石油ガス法関係法令の熟読（<a href="https://elaws.e-gov.go.jp/document?lawid=342AC0000000149">E-GOV</a>というサイトから）</li><li>講習テキストの熟読</li><li>過去問５年分の実施</li></ul><img src="/images/20230313a/高圧ガス販売主任者第二種-学習ツール.png" alt="高圧ガス販売主任者第二種-学習ツール.png" width="1200" height="630" loading="lazy"><p>高圧ガス販売主任者第二種試験は、法令・保安管理がありそれぞれ60点以上で合格となります。</p><p>法令試験問題では、高圧ガス保安法・液化石油ガス法関係法令があり、法の目的や対象範囲、法の各項目に対する問題です。</p><p>保安管理技術試験問題では、LPガス販売に係る保安技術に対する問題です。</p><p>例えば法令では、以下の記述が正しいかどうかの判断。</p><blockquote><p>高圧ガス保安法は、高圧ガスによる災害を防止して公共の安全を確保する目的のため、高圧ガスの製造、貯蔵、販売、移動及び移動を規制することのみを定めている。</p></blockquote><p>例えば保安管理技術では、以下の記述が正しいかどうかの判断。</p><blockquote><p>マイコンメータSは、遮断弁の復帰操作を行った後、マイコンメータより下流のガス漏れをチェックし、ガス漏れを検知した場合に再遮断する機能を有している。</p></blockquote><p>のような出題形式です。具体的には各問に対し、記述が（イ）（ロ）（ハ）（ニ）と用意され、どの記述が正しいのか組み合わせを選択する（例：イ、ハ）形です。</p><p>試験の難易度は、私の所感では一夜漬けや１週間程度の学習では到底合格できないと感じるレベル感でした。<br>私の場合は、パートナー企業の方から誰でも合格するレベルの問題と伺っていたため、学習に入ったのが試験から２ヶ月ほど前からでしたが、かなり苦労しました。おそらく実際にLPガス小売業の現場で働かれている方からすると、現場での知見の量が膨大なため、ある程度簡単に感じるのかもしれません。</p><p>まだ実務経験が十分でない方や、未経験である方は十分な学習期間と覚悟が必要です。</p><p>本受験は年に一度（１１月）のみ実施のため、不合格の場合はまた１年後までお預けです。どうしても合格の確率をあげたい！という方は、事前の講習・試験を受けておくことをおすすめします。講習の受講とその後の試験に合格された方は、第二種試験の際に保安管理技術試験が免除されます。</p><p>令和４年の第二種販売試験の合格率は54.6%だったのですが、通常（法令・保安管理）受験の合格率は <strong>37.0%</strong> 、保安管理技術免除の方々の合格率は90.0%と、合格率が大きく違います。</p><p>たびたび、高圧ガス第二種販売主任者試験の合格率は60%前後と記述されているメディアを見かけますが、講習参加による免除科目を有している方も入れた全受験者の合格率です。</p><p>全科目受験された方の合格率は37.0%であることは、資格勉強へ臨む前に認識しておいた方が良いと思います。</p><img src="/images/20230313a/image.png" alt="image.png" width="1200" height="555" loading="lazy"><p>数値引用：<a href="http://www.khk.or.jp/qualification/national_qualification/announcement/announcement.html">高圧ガス保安協会＞国家試験の合格率の公表</a>（令和４年度の合格率）</p><p>また既に高圧ガスに関する他資格を有する方など、他の免除項目もあるため興味のある方は「<a href="https://www.khk.or.jp/qualification/national_qualification/examination/examination_exemption.html">試験科目一部免除制度</a>」を参考にしてみてください。</p><h1 id="受験振り返りと実務への活用"><a href="#受験振り返りと実務への活用" class="headerlink" title="受験振り返りと実務への活用"></a>受験振り返りと実務への活用</h1><p>私は試験勉強としては約２ヶ月、免除科目なしで挑んだ受験でしたが、正直なところ受験終わりの時点では、合否に自信はありませんでした。</p><p>稀に、ひたすら過去問を解けば合格できる！のような情報を見ますが、今年の試験でも例年出題されていなかった類の問題がありました。過去問を暗記しているだけでは合格できません。実務として普段から高圧ガス周辺に携わっている人でなければ、ある程度の覚悟を持って勉強の臨んだ方が良いと思います。</p><p>理想としては、</p><ul><li>法令（高圧ガス保安法・液化石油ガス法関係法令）全ての理解と暗記。</li><li>講習テキストの内容を全て理解と暗記。</li></ul><p>ただし試験合格を最低限の目的とするならば、</p><ul><li>Step1：法令・講習テキストを流し読み（かなり難しいのでこの時点で全て理解しきらずで大丈夫です）</li><li>Step2：過去問実施</li><li>Step3：過去問回答とその周辺理解のために、再度法令と講習テキストを熟読。<br>Step2~3の繰り返しが効果的と思いました。</li></ul><p>または実際に、LPガス容器やメーターを見に現地に訪れ、具体的なイメージを持つと良いかもしれません。</p><img src="/images/20230313a/image_2.jpg" alt="" width="282" height="176" loading="lazy"><p>引用：<a href="http://www.aichilpg.or.jp/strong/">実は災害に強いLPガス | 愛知県LPガス協会</a></p><p>都市部の場合は都市ガスが普及しているため、LPガス容器を見かけることも少ないかもしれません。地方に出かけた際や、都市部でもラーメン屋や中華屋にもあります。ただし、当然不用意に敷地内へ入ったり、近づいたりしていいものではないため、遠くから眺める程度でお願いします。</p><p>合格後の現在、試験内容を全て理解しているかというと、正直今でもなお法令や講習テキストを日々開いています。実業務で普段から高圧ガス周辺に携わっている人と、試験取得に向けた勉強をした私とでは今もなお理解の深さには大きな差があるのは事実です。</p><p>しかし資格挑戦前と今では、マイコンメータを見かけた際に何号のメータか、マイコンメータSかEかなど目に付く機会が増えました。</p><p>またパートナー企業様と日々会話する中で、何か問題が突き当たった時に「法令の◯◯に触れなかったか、条件があった覚えがある」のように、その勘所は身についたかと思います。パートナー企業様からも「法令にある。久保さん見ておいてよ！」のように、第二種販売主任者免状を取得している信頼から、期待の声も生まれます。</p><p>資格挑戦のきっかけとなった現場担当者様にお伝えしたところ、「次は、液化石油ガス設備士に挑戦と、一緒にLPガス配送回ろう！」とお喜びいただきました。</p><p>IT業界では、担当のシステムについて仕様に詳しくなることは当然ありますが、そのシステムのインプットである現場がどう動いているのか、どんなルールがあるのか、どんな人がどういう手順で働いているのか。現場を抑えた上で、システム仕様を語ることの重要性を改めて感じる機会となりました。</p><p>高圧ガスという危険物を扱うからこそ、試験のための勉強で終わらせず、現場の方と同じ目線・知識であるべきを語り、理想の追及に向けて活用と理解を深めていきたいです。</p><h1 id="EX（Energy-Transformation）ユニット設立"><a href="#EX（Energy-Transformation）ユニット設立" class="headerlink" title="EX（Energy Transformation）ユニット設立"></a>EX（Energy Transformation）ユニット設立</h1><p>エネルギーは国家、経済、産業の礎です。</p><p>しかし昨今、地政学的リスク顕在化によるエネルギー価格の高騰や、安全保障政策の変化、あるいは気候変動など現在進行形で産業構造・経済・社会に大きなパラダイムシフトが起きています。</p><p>フューチャーに2022年11月に発足したEX（Energy Transformation）ユニットに私は所属しています。EXユニットでは最近様々な企業様からお声をいただいております。エネルギーは、その種類から、サプライチェーンの大きさまでとても幅広いテーマで、求められる知見や経験も膨大です。</p><blockquote><p>EX（Energy Transformation）ユニット<br>弊社のTIG（Technology Innovation Group）ではユニット制があり、その中でEXUは、世界の経済活動や安全保障戦略の礎となるエネルギー業界の在り方を、我々そしてクライアントやパートナーと共にテクノロジーを軸に根幹から変革していく組織です。</p></blockquote><p>そんなエネルギー業界が今、急激に変わりつつあります。</p><p>期待をお寄せいただいた企業様に、スピーディかつ大きな価値を提供できるよう、私たちITコンサルタントは深い知見と幅広い技術スキルが必要となります。</p><p>技術に強いITコンサルタント集団のイメージが強いフューチャーですが、私はエネルギー業界の現場から経営、トレンドまで抑えたITコンサルタントを目指しています。</p><p>今後も現場と同じ目線で問題提起し、経営陣とあるべきを追求し、またエネルギー業界のトレンドにアンテナを貼って未来価値を創造していきます。</p><h1 id="エネルギー業界記事一覧"><a href="#エネルギー業界記事一覧" class="headerlink" title="エネルギー業界記事一覧"></a>エネルギー業界記事一覧</h1><ul><li><a href="https://future-architect.github.io/articles/20220519a/">【エネルギー業界】LPガス基礎part1 超入門編</a></li><li><a href="https://future-architect.github.io/articles/20220530a/">【エネルギー業界】LPガス基礎part2 供給設備編</a></li><li><a href="https://future-architect.github.io/articles/20220620a/">【エネルギー業界】LPガス基礎part3 充填編</a></li><li><a href="https://future-architect.github.io/articles/20220630a/">【エネルギー業界】電力基礎知識編</a></li><li><a href="https://future-architect.github.io/articles/20220713a/">【エネルギー業界】LPガス基礎part4 バルク配送入門</a></li></ul><p>p.s.<br>最近はエネルギー×メタバースに興味を持ち、日々情報収集しています。リアルなメタバース空間を実現しようとしている <a href="https://meta-shelf.com/everdome-start/">EVERDOME（エバードーム）プロジェクト</a>は、メタバース空間でのエネルギー活用で何かできないかと期待しています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9/">ビジネス</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%B3%87%E6%A0%BC/">資格</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A5%AD%E7%95%8C%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3/">業界ドメイン</category>
      
      <category domain="https://future-architect.github.io/tags/LP%E3%82%AC%E3%82%B9%E6%A5%AD%E7%95%8C/">LPガス業界</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A8%E3%83%8D%E3%83%AB%E3%82%AE%E3%83%BC%E6%A5%AD%E7%95%8C/">エネルギー業界</category>
      
      <category domain="https://future-architect.github.io/tags/IT%E3%82%B3%E3%83%B3%E3%82%B5%E3%83%AB/">ITコンサル</category>
      
      
      <comments>https://future-architect.github.io/articles/20230313a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>本当は怖い、逆コンウェイ戦略</title>
      <link>https://future-architect.github.io/articles/20230310a/</link>
      <guid>https://future-architect.github.io/articles/20230310a/</guid>
      <pubDate>Thu, 09 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;アーキテクチャの議論でよく出てくるのが、コンウェイの法則と、逆コンウェイ戦略です。これについては、うっかりIT用語をバズらせてしまう達人の&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>アーキテクチャの議論でよく出てくるのが、コンウェイの法則と、逆コンウェイ戦略です。これについては、うっかりIT用語をバズらせてしまう達人の<a href="https://bliki-ja.github.io/ConwaysLaw/">マーチン・ファウラーのブログ</a>にも詳しい説明があります。角さん、いつも翻訳ありがとうございます。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">「逆コンウェイの法則」が持ち出された議論が苦手なんどけど、なんでなのかな。コンウェイの法則はよく理解できるんだがー。</p>&mdash; Kazunori Otani (@katzchang) <a href="https://twitter.com/katzchang/status/1630529667106226176?ref_src=twsrc%5Etfw">February 28, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>この<a href="https://twitter.com/katzchang">@katzchang</a>さんのツイートもそうですが、逆コンウェイ戦略に関しては僕も少しモヤモヤするところが個人的にあり、そのあたりを周りの人（<a href="https://twitter.com/katzchang">@katzchang</a>さんや<a href="https://twitter.com/tokoroten">@tokoroten</a>、<a href="https://twitter.com/__garsue__">@__garsue__</a>氏）と議論したらいろいろ自分が思っていなかった知見も得られたりしたので、まとめてみます。</p><h1 id="コミュニケーションがかえって増える問題"><a href="#コミュニケーションがかえって増える問題" class="headerlink" title="コミュニケーションがかえって増える問題"></a>コミュニケーションがかえって増える問題</h1><p>コンウェイの法則は、1960年代にコンウェイが書いた記事が元になっています。物理的に離れた3箇所で分担してシステムを開発したら、システムも自然とそのチーム構成に合わせたアーキテクチャになってしまったと。それを逆に応用し、分割したいソフトウェアの単位でチームもモジュールも一緒に分割すれば良い、というのが逆コンウェイ戦略（もしくは作戦）です。逆じゃない方は、観測された事実から導きだされたものなので「法則」ですが、逆の方はそれを積極的にプロジェクト運営に活用するためのアクティブな選択なので、「法則」ではなく「戦略」などが用いられているようです。</p><h2 id="モジュール分割の失敗"><a href="#モジュール分割の失敗" class="headerlink" title="モジュール分割の失敗"></a>モジュール分割の失敗</h2><p>マイクロサービスだと、すぐに「逆コンウェイだ」という話が出てくるのですが、適切なモジュール分割の方法は？という話がセットで出てくることがあまりないように思います。これが僕のモヤモヤポイントです。</p><p>ソフトウェアのモジュール分けについては、多くの流儀や方法論があります。最近読んでいていいな、と思っているのは、<a href="https://amzn.to/3SAvM6I">A Philosophy of Software Design</a>の提唱するデザインで、外部との接点が少なくて済む、最小のAPIセットで分けられる単位でモジュールを分けましょう、というものです。正規表現などは内部でステートマシンなど複雑な要素を持っていますが、利用者はパターンを入力し、match&#x2F;search程度の簡単なAPIで利用できます。そのように接点が少なく、中が深いモジュールが良いと述べています。</p><p>この場合、正規表現のステートマシンを開発するチームと、その外のAPIのチームを分けると、大量の接点が生まれてしまい、かえってコミュニケーションが増えてしまいます。チームを分ける＝チームを跨いだコミュニケーションを減らす、という観点では、接点が少ない境界を見つけるのが大切、というのがわかると思います。</p><h2 id="データベース分割の失敗"><a href="#データベース分割の失敗" class="headerlink" title="データベース分割の失敗"></a>データベース分割の失敗</h2><p>あとは、RDB観点の切り方もありますね。DBのテーブルには日々の業務で増えて行くテーブル＝トランザクションと、読み込み専用で変化が少ないデータ＝マスターがあります。テーブル間には外部参照があってJOINをしたりしますが、読み込み専用のマスターは各アプリケーションにコピーを配っても問題ありません。問題はトランザクションです。トランザクションのテーブル同士のJOINが必要なら同じシステムに収めるべきです。JOINが必要がない境界線がうまくひけると、そのモジュール間では複雑な参照はないということになります。1+Nクエリー問題もおそらく減るでしょう。うまく分割できるとシステムの境界でデータベースのインスタンスも一緒に分割できます。インスタンスもモジュールとセットで分けられれば、モジュールの都合でDBスキーマの変更も自由にできることになります。</p><p>一方で、インスタンスの境界とモジュールが一致しないと、システム間で大量の1+Nクエリーを発射する必要がでてきますし、スキーマ変更やら何やらではチーム間の調整が必要になります。こちらも、コミュニケーションがかえって増えるのは想像に難くありません。マイクロサービスなのに、リリースサイクルやデプロイの調整が大変というのがボトルネックになります。</p><h1 id="モジュールをまたいだ改善がやりにくくなる"><a href="#モジュールをまたいだ改善がやりにくくなる" class="headerlink" title="モジュールをまたいだ改善がやりにくくなる"></a>モジュールをまたいだ改善がやりにくくなる</h1><p>マイクロサービスでつくられるが、言語やフレームワークなどのそれぞれの要素技術が違いすぎて、知見が生かせない、という事例も聞いたことがあります。同じようなロジックを、別の言語で別々に実装すると。</p><p>独立した組織に裁量を与えて自由を与えるとその分他の組織と独立した進化を始めてしまいます。<a href="https://logmi.jp/tech/articles/322218">メルカリのマイクロサービス開発</a>は言語の選択はさせないようにして、共通のスターターキットを提供して、アーキテクチャを均質化しているという話がありました。何かしらの横断チームをおいて、良い設計の水平展開は必要ですね。</p><p>また、複数のモジュール間をまたいだ改善が必要な場合には、それぞれ歩調を合わせてやる必要があるため、チーム間の密なコミュニケーションは発生します。これは、技術ではなくて、相当なマネジメント力が必要な必要になるし、リーダーシップも必要になります。特定のチーム内だけのリーダーシップだとチーム間調整で空回りしたり・・・という事例はよく聞きます。なんかチーム間の調整の打ち合わせが増える、というのが副作用としてよく観測されます。</p><h1 id="本来必要なコミュニケーションもなくなる"><a href="#本来必要なコミュニケーションもなくなる" class="headerlink" title="本来必要なコミュニケーションもなくなる"></a>本来必要なコミュニケーションもなくなる</h1><p>この観点は僕は持っていなかったやつです。本来は別のサービスと連携するには、IT部門に調整してAPIを出してもらってやるのが「壊れにくいシステム」には不可欠ですが、その調整が面倒、手っ取り早く済ますという目的で利用されるのがRPAですね。システム向けのAPIがないところを強制的にAPI化します。</p><p>まあ、僕の経験上はそこまでの状況はないのですが、アサイン権限とモジュール設計権限の両方があると、嫌いな人を会話しなくてもいいチームに押し込む、というのもあるとかなんとか。そういう殺伐現場、経験ある方いますか？</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">逆コンウェイの法則なー<br>嫌いな奴、話をしたくない奴は誰だ？という目線から設計が行われて、最悪な設計が出来上がりそうな気がするんだよな<br>設計するやつが嫌いな奴と付き合わないように気持ちよく業務を進めるためのデザインになる</p>&mdash; ところてん (@tokoroten) <a href="https://twitter.com/tokoroten/status/1630547119726792707?ref_src=twsrc%5Etfw">February 28, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h1 id="そもそも、コンウェイの法則は21世紀も現役なのかどうか"><a href="#そもそも、コンウェイの法則は21世紀も現役なのかどうか" class="headerlink" title="そもそも、コンウェイの法則は21世紀も現役なのかどうか"></a>そもそも、コンウェイの法則は21世紀も現役なのかどうか</h1><p>そもそもコンウェイの法則は1968年の事例で、チームというのはアメリカ大陸を横断して作られたものでした。当時の技術ではチーム間のコミュニケーションはかなりやりにくく、チーム同士を打ち合わせも飛行機での移動が必須で、ソフトウェアの構造もこれに引きずられるというのはわかります。</p><img src="/images/20230310a/image.png" alt="image.png" width="560" height="300" loading="lazy"><p>一方で、現代はチャットもテレビ会議もあり、ソースコードはネットワークを超えて管理しやすいGitなどを使って管理されますし、Pull Requestなどの非同期コミュニケーションを主体とした開発プロセスが一般化しています。いくつものオープンソースのプロジェクトが世界中に分散して開発されていたりします。フューチャーも<a href="https://note.future.co.jp/n/na656c4058272">ロケーションフリー制度</a>があり、チームリーダーがいつもオンライン、みたいなチームもあります。そのため、チームが分かれると会話がなくなる、というのは現代ではないでしょう。</p><p>リモートワーク以前にも、木構造でチームを編成して関連するチームを近い場所にしたり、職能で分けたチーム（横串）と、プロジェクト（縦串）でマトリックス組織にするというのも行われていますし、必要なコミュニケーションの量の流量の大小を勘案したチーム分けというのがこれまでも試行されてきました。チームが分かれると即座にコミュニケーションがゼロということはなく、チーム同士の繋がりはもっと有機的なものになっています。</p><p>コンウェイの法則という言葉を知っている人はアムダールの法則もご存知でしょう。結局チームが1箇所であっても、チーム内をどんどん非同期で動けるようにしないことには、チーム全体のスループットは上がりません。そして非同期にする仕組みというのは、ちょっとぐらい場所が違っても、作業効率を減らさない方法です。地球の真裏で時差がすごい場合はちょっと大変ですが、日本とインドぐらいなら全然平気だな、というのが僕の実感としてあります。</p><p>これらの話を総合すると、現代で同じ状況で開発を行ったら、おそらく1968年とは別の結果になるということは容易に想像できます。そうであれば、コンウェイの法則はほとんどの場合では当てはまらなくなるし、そうなると逆コンウェイ戦略もそんなに意識する必要もなくなるのかな、と思います。</p><p>もちろん、組織間の調停のために内部裁判所を作ったみずほ銀行のプロジェクトとか、マイクロソフトのOS開発とかだとよりシビアなチーム編成が求められるのでしょうけども、ほとんどのプロジェクトでそこまで意識するほどチーム分けなんて考えなくてもいいんじゃないかな、と思います。チーム分けたってどうせ一部の人に質問が集中したりするんですよね。「逆コンウェイが〜とか言ってる人らそんなにチーム分割できるほどデカい組織で働いてるのかも怪しい」(@__garsue__曰く)という意見もあります。マイクロサービスだから、とかそういう言葉に引きづられて、余計なことをしているんじゃないでしょうかね。</p><p>宇宙開拓時代になって、光の速度ではリアルタイム通信ができないという時代が来たら、大陸間の分断と同じ効果はあるので、宇宙に進出するまではコンウェイの法則は気にしないでいいんじゃないですかね。</p><p>あとは、外注する境界がシステムの境界になったり、というのはあるかもしれません。請負契約だと発注側と、作業員同士での直接の会話は基本的にするな、というのがあります。複数のサブサービスを別の企業に請負契約していたりすると、チーム間の会話は発注者を介在する必要があって減るので、大陸間の分断と同じ効果はありそうですが、まあこういうのは今後減らしていこうねというのがDXではコンセンサスのとれている話だと思うのでみなかったことにしておきますかね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>コンウェイの法則は経験則から導き出されたもののようですが、それを逆転させてみよう、というのが逆コンウェイ戦略です。ですが、この逆転させるためには、「コミュニケーションが少なくなるような適切なモジュール分け」が必要だろうということを説明しました。それに失敗すると逆にコミュニケーションが増えることになるぞ、というリスクも説明しました。それ以外にもチームを分けることで生じるデメリットもいくつか紹介しました。</p><p>あとは、コンウェイの法則自体も、時代の変化で影響が減っているのでは、という話もしました。</p><p>まあ、このツイートの攻撃力の前にはすべての細っかい議論は吹っ飛びますけどね。今度から冷静な気持ちでコンウェイの法則に向き合えなくなる呪いがかかります。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">中央道を山梨から東京に走ってて、八王子料金所過ぎたあたりでAmwayのでかいビル見るといつも「コンウェイの法則」が連想される。</p>&mdash; Yoshi Yamaguchi (@ymotongpoo) <a href="https://twitter.com/ymotongpoo/status/1630553254047408128?ref_src=twsrc%5Etfw">February 28, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Management/">Management</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%B5%84%E7%B9%94%E8%AB%96/">組織論</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A8%E3%83%83%E3%82%BB%E3%83%BC/">エッセー</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%83%B3%E3%82%A6%E3%82%A7%E3%82%A4%E3%81%AE%E6%B3%95%E5%89%87/">コンウェイの法則</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3/">アーキテクチャ</category>
      
      
      <comments>https://future-architect.github.io/articles/20230310a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Gatekeeper Validating Admission WebhookでPVCリソースの削除を防止する</title>
      <link>https://future-architect.github.io/articles/20230309a/</link>
      <guid>https://future-architect.github.io/articles/20230309a/</guid>
      <pubDate>Wed, 08 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;フューチャーインスペース株式会社の岩崎です。&lt;/p&gt;
&lt;p&gt;みなさん、&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>フューチャーインスペース株式会社の岩崎です。</p><p>みなさん、<a href="https://argo-cd.readthedocs.io/en/stable/">ArgoCD</a>は使っていますか？<br>業務で<a href="https://aws.amazon.com/jp/eks/">EKS</a>（Elastic Kubernetes Service）クラスタにArgoCDをデプロイして、Kubernetesリソースを管理しています。</p><p>ArgoCDはGitOpsに則ったCDツールで、WebUIが優れていてKubernetesリソースの作成や更新がとても簡単で便利ですね。</p><p>しかし、ArgoCDから<a href="https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack">kube-prometheus-stack</a>アプリケーションの削除時に、<a href="https://kubernetes.io/ja/docs/concepts/workloads/controllers/statefulset/">StatefulSet</a>で作成されたGrafanaのPVC(Persistent Volume Claim 永続化ボリューム要求)も想定外に削除されてしまうことに気づきました。<br>※ StatefulSetはステートフルなアプリケーションを管理するオブジェクトで、本来はStatefulSetで関連付けられたPVCは削除されません。</p><p>GrafanaのPVCには、ダッシュボードやアラートなどの設定が入っているため、PVCが削除される度にGrafanaを設定しなおす必要がありました。</p><p>そこで、同環境でデプロイしている<a href="https://open-policy-agent.github.io/gatekeeper/website/docs/">Gatekeeper</a>から、PVCの削除を防げないかを模索していたところ、「Validating Admission Webhook」でArgoCDによるPVCの削除リクエストを拒否することができたので、設定から検証までを書いていきます。</p><h2 id="環境-x2F-構成"><a href="#環境-x2F-構成" class="headerlink" title="環境&#x2F;構成"></a>環境&#x2F;構成</h2><ul><li>OS: Amazon Linux2</li><li>EKS: 1.23</li><li>ArgoCD: v2.4.15</li><li>Gatekeeper: v3.10.0</li></ul><h2 id="Validating-Admission-Webhook"><a href="#Validating-Admission-Webhook" class="headerlink" title="Validating Admission Webhook"></a>Validating Admission Webhook</h2><p>Validating Admission Webhookの前に、KubernetesのAdmission Controlを理解する必要があります。<br>調べるにあたって、以下の記事がとてもわかりやすかったので、載せておきます。<br>・<a href="https://blog.mosuke.tech/entry/2022/05/15/admission-webhook-1/">https://blog.mosuke.tech/entry/2022/05/15/admission-webhook-1/</a></p><p>Validating Admission Webhookはリクエストがポリシーを満たしているか否かを監視し、ポリシーに反したリクエストが飛んで来た場合は、そのリクエストを拒否するように動作します。<br>そして、Validating Admission Webhookのポリシーの作成には、以下の3つが必要になります。</p><ul><li>Gatekeeper</li><li>Constraint-Template</li><li>Constraint</li></ul><h3 id="Gatekeeper"><a href="#Gatekeeper" class="headerlink" title="Gatekeeper"></a>Gatekeeper</h3><p>Gatekeeperは汎用的なポリシーエンジン<a href="https://www.openpolicyagent.org/docs/latest/">Open Policy Agent（OPA）</a>をベースに作成されており、KubernetesのAdmission Controlの仕組みを活用し、Kubernetes APIへのリクエストに対して、Mutation（追加・更新・削除）、Validation(検証)などのポリシーをカスタマイズできます。</p><h3 id="Constraint-Template"><a href="#Constraint-Template" class="headerlink" title="Constraint-Template"></a>Constraint-Template</h3><p>Constraint-TemplateはConstraintに必要なパラメータを用意します。Rego言語で記述したポリシーの定義を埋め込んだ、Constraint CRDを定義するテンプレートです。</p><h3 id="Constraint"><a href="#Constraint" class="headerlink" title="Constraint"></a>Constraint</h3><p>Constraintは条件に合致したリクエストを拒否します。Constraint-Templateで定義した内容に従って、監視対象のリソースの種類とアノテーションやラベルなどといったリクエストの拒否条件を記述します。</p><h2 id="PVCの削除を防止するポリシーを作成"><a href="#PVCの削除を防止するポリシーを作成" class="headerlink" title="PVCの削除を防止するポリシーを作成"></a>PVCの削除を防止するポリシーを作成</h2><p>本題のPVCの削除を防止するポリシーを作成します。<br>今回はPVCリソースを削除しないポリシーをnamespace毎に管理する必要があったため、「特定のnamespaceにおけるPVCリソースを削除しないポリシー」を作成していきます。</p><h3 id="Gatekeeperデプロイ"><a href="#Gatekeeperデプロイ" class="headerlink" title="Gatekeeperデプロイ"></a>Gatekeeperデプロイ</h3><p><a href="https://open-policy-agent.github.io/gatekeeper/website/docs/install">公式ドキュメント</a>通りに<a href="https://github.com/open-policy-agent/gatekeeper/blob/master/deploy/gatekeeper.yaml">gatekeeper.yaml</a>をArgoCDでデプロイします。<br>なお、デフォルトのGatekeeperのValidating Admission Webhookでは、CREATE, UDPATE（作成、更新）を監視する設定になっているため、次のように、ValidatingWebhookConfigurationリソースの<code>webhooks.rules.operations</code>にDELETE（削除）を追加することで、削除リクエストも監視対象に設定する必要があります。<br>参考: <a href="https://open-policy-agent.github.io/gatekeeper/website/docs/customize-admission/#how-to-enable-validation-of-delete-operations">https://open-policy-agent.github.io/gatekeeper/website/docs/customize-admission/#how-to-enable-validation-of-delete-operations</a></p><figure class="highlight yaml"><figcaption><span>gatekeeper.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">admissionregistration.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ValidatingWebhookConfiguration</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"></span><br><span class="line"> <span class="string">（中略）</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="attr">apiVersions:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="attr">operations:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">CREATE</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">UPDATE</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DELETE</span>  <span class="comment"># DELETEを追加</span></span><br></pre></td></tr></table></figure><h3 id="Constraint-Templateデプロイ"><a href="#Constraint-Templateデプロイ" class="headerlink" title="Constraint-Templateデプロイ"></a>Constraint-Templateデプロイ</h3><p>以下の通り、<code>k8sdeletepvc</code>CRDとポリシーを作成します。</p><figure class="highlight yaml"><figcaption><span>constraint-template.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">templates.gatekeeper.sh/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConstraintTemplate</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># 任意の名前</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8sdeletepvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">crd:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="comment"># metadata.nameの値</span></span><br><span class="line">        <span class="attr">kind:</span> <span class="string">k8sdeletepvc</span></span><br><span class="line">      <span class="attr">validation:</span></span><br><span class="line">        <span class="comment"># Schema for the `parameters` field</span></span><br><span class="line">        <span class="attr">openAPIV3Schema:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">          <span class="attr">properties:</span></span><br><span class="line">            <span class="attr">operation:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">            <span class="attr">namespace:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">targets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">target:</span> <span class="string">admission.k8s.gatekeeper.sh</span></span><br><span class="line">      <span class="attr">rego:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        # metadata.nameの値</span></span><br><span class="line"><span class="string">        package k8sdeletepvc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">        <span class="string">violation[</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;msg&quot;:</span> <span class="string">msg</span>,</span><br><span class="line">            <span class="attr">&quot;details&quot;:</span> &#123;</span><br><span class="line">              <span class="attr">&quot;operation_chk&quot;:</span> <span class="string">match_operation</span>,</span><br><span class="line">              <span class="attr">&quot;namespace_chk&quot;:</span> <span class="string">match_namespace</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="string">]</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">          <span class="string">provided_operation</span> <span class="string">:=</span> <span class="string">input.review.operation</span></span><br><span class="line">          <span class="string">constraint_operation</span> <span class="string">:=</span> <span class="string">input.parameters.operation</span></span><br><span class="line">          <span class="string">match_operation</span> <span class="string">:=</span> <span class="string">constraint_operation</span></span><br><span class="line">          <span class="string">match_operation</span> <span class="string">==</span> <span class="string">provided_operation</span></span><br><span class="line"></span><br><span class="line">          <span class="string">provided_namespace</span> <span class="string">:=</span> <span class="string">input.review.namespace</span></span><br><span class="line">          <span class="string">constraint_namespace</span> <span class="string">:=</span> <span class="string">input.parameters.namespace</span></span><br><span class="line">          <span class="string">match_namespace</span> <span class="string">:=</span> <span class="string">constraint_namespace</span></span><br><span class="line">          <span class="string">match_namespace</span> <span class="string">==</span> <span class="string">provided_namespace</span></span><br><span class="line"></span><br><span class="line">          <span class="string">msg</span> <span class="string">:=</span> <span class="string">sprintf(&quot;:</span> <span class="string">%v</span> <span class="string">request</span> <span class="string">detected</span> <span class="string">in</span> <span class="string">%v</span> <span class="string">namespace.</span> <span class="string">Cancel</span> <span class="string">the</span> <span class="string">request</span> <span class="string">for</span> <span class="string">PVC</span> <span class="string">to</span> <span class="string">prevent</span> <span class="string">deletion&quot;</span>, [<span class="string">provided_operation</span>, <span class="string">provided_namespace</span>]<span class="string">)</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>Constraint-Templateの<code>spec.crd.spec.validation.openAPIV3Schema</code>以降には、ConstraintのParametersフィールドに関するスキーマを定義しています。また、<code>spec.targets</code>以降にnamespaceと操作情報に関するポリシーの定義を記述しています。</p><p><code>input.review</code>はデプロイしているKubernetesリソースから値を取得し、<code>input.parameters</code>は後に説明するConstraint.yamlのparametersフィールドの値を参照します。<br>上記のテンプレートでは、<code>input.review.operation</code>でArgoCDの<code>CREATE</code>や<code>DELETE</code>などの操作情報を取得、<code>input.review.namespace</code>で対象リソースのnamespaceを取得します。<br>これらをAND条件で判別することにより、「特定のnamespaceにおけるリソースを削除しないポリシー」を実現しています。</p><p>Rego言語を用いてポリシーを記述するにあたり、<code>input.review</code>（Kubernetesリソース）から取得できる情報は<a href="https://open-policy-agent.github.io/gatekeeper/website/docs/howto/#input-review">公式ドキュメント</a>にまとめられています。</p><p>また、Regoで記述したポリシーをテストできるサイトもあり、想定通りのポリシーになっているかの確認に便利だったので、載せておきます。</p><p><a href="https://play.openpolicyagent.org/">https://play.openpolicyagent.org/</a></p><h3 id="Constraintデプロイ"><a href="#Constraintデプロイ" class="headerlink" title="Constraintデプロイ"></a>Constraintデプロイ</h3><p>constraint-template.yamlで定義したConstraint CRD : <code>k8sdeletepvc</code>でポリシーの内容を明示的に宣言します。</p><p>以下のマニフェストをデプロイすることで、「monitoringのnamespaceにおけるPVCリソースの削除を防止するポリシー」が作成されます。</p><figure class="highlight yaml"><figcaption><span>constraint.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">constraints.gatekeeper.sh/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">k8sdeletepvc</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># 任意の名前</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pvc-constraint</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">match:</span></span><br><span class="line">    <span class="attr">kinds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">        <span class="attr">kinds:</span> [<span class="string">&quot;PersistentVolumeClaim&quot;</span>] <span class="comment"># 監視するリソース</span></span><br><span class="line">  <span class="attr">parameters:</span></span><br><span class="line">    <span class="comment"># リクエストを拒否する条件</span></span><br><span class="line">    <span class="attr">operation:</span> <span class="string">DELETE</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">monitoring</span></span><br></pre></td></tr></table></figure><h2 id="作成したポリシーの検証"><a href="#作成したポリシーの検証" class="headerlink" title="作成したポリシーの検証"></a>作成したポリシーの検証</h2><p>作成したポリシーがmonitoringのnamespaceにおけるPVCリソースの削除を防止するかを確認します。</p><p>今回は、削除されたGrafanaのPVC<code>storage-kube-prometheus-stack-grafana-0</code>を対象にアプリケーションを削除してもPVCが残っているかの検証とDELETE以外のリクエストは問題なく承認されるかの検証を行います。</p><h3 id="ArgoCDによる削除"><a href="#ArgoCDによる削除" class="headerlink" title="ArgoCDによる削除"></a>ArgoCDによる削除</h3><p><code>storage-kube-prometheus-stack-grafana-0</code>はkube-prometheus-stackのサブチャートで定義されているので、kube-prometheus-stackのアプリケーションを削除します。</p><p>削除前のArgoCDの画面は以下の通りです。</p><img src="/images/20230309a/image.png" alt="image.png" width="1200" height="386" loading="lazy"><p>ArgoCDの画面からアプリケーションをForegroundで削除した結果が以下になります。</p><img src="/images/20230309a/image_2.png" alt="image.png" width="1200" height="389" loading="lazy"><p>エラーが起こり、APP CONDITIONSにて以下のエラーログが表示されます。</p><pre><code>admission webhook &quot;validation.gatekeeper.sh&quot; denied the request: [pvc-constraint] : DELETE request detected in monitoring namespace. Cancel the request for PVC to prevent deletion</code></pre><p>pvc-constraint（Constraint名）より、リクエストが拒否されたエラーログが表示され、Comstraint-Templateで記述した通りのエラー文があることから、作成したポリシーによってPVCリソースの削除リクエストが拒否されたことがわかります。</p><p>また、リクエストが拒否されると、ArgoCDが削除処理状態（一部リソースがSyncを受け付けない）になるため、アプリケーションをNon-cascading削除することで、ArgoCDの削除処理状態を外します。<br>これで、PVCを削除することなく、アプリケーションを削除できることを確認しました。</p><p>ちなみにですが、kubectlコマンドでも削除リクエストが拒否されることが確認できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pvc -n monitoring storage-kube-prometheus-stack-grafana-0</span><br><span class="line">&gt; Error from server (Forbidden): admission webhook <span class="string">&quot;validation.gatekeeper.sh&quot;</span> denied the request: [pvc-operation-constraint] : DELETE request detected <span class="keyword">in</span> monitoring namespace. Cancel the request <span class="keyword">for</span> PVC to prevent deletion</span><br></pre></td></tr></table></figure><h3 id="ArgoCDによるPVCの作成"><a href="#ArgoCDによるPVCの作成" class="headerlink" title="ArgoCDによるPVCの作成"></a>ArgoCDによるPVCの作成</h3><p>先ほどの検証で、削除リクエストが想定通り拒否されることが確認できました。<br>では、削除以外のリクエストは承認されるかをPVCリソースのデプロイ（作成リクエスト）で検証を行います。</p><p>まず、<code>storage-kube-prometheus-stack-grafana-0</code>を削除した状態が以下の通りです。</p><img src="/images/20230309a/image_3.png" alt="image.png" width="1200" height="421" loading="lazy"><p>kube-prometheus-stackにSyncをかけてPVCをデプロイします。</p><img src="/images/20230309a/image_4.png" alt="image.png" width="1200" height="384" loading="lazy"><p>無事にPVCが作成されたため、作成リクエストが無事に承認されたことが確認できました。</p><p>これは、<a href="#constraint-template%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4">Constraint-Template</a>で説明した通り、<code>namespace</code>と<code>operation</code>をAND条件で判別しているため、operationがCREATE（作成）の場合は、リクエストが承認されてPVCがデプロイされます。</p><p>そのため、PVCがデプロイしている状態で、operationがDELETE（削除）の場合は、リクエストが拒否されるため、<a href="#argocd%E3%81%AB%E3%82%88%E3%82%8B%E5%89%8A%E9%99%A4">ArgoCDによる削除</a>と同様のエラーが表示されます。<br>以上より、削除以外のリクエストは承認されることが確認できました。</p><h2 id="一工夫加える（削除管理）"><a href="#一工夫加える（削除管理）" class="headerlink" title="一工夫加える（削除管理）"></a>一工夫加える（削除管理）</h2><p>以上より、「各namespaceのPVCリソースの削除リクエストを拒否するポリシー」ができました。</p><p>しかし、この状態では1点だけ問題が発生してしまいます。それは、ポリシーを削除しない限り、Constraintの条件を満たしているリソースの削除ができないことです。</p><p>時と場合によっては、リソースを削除することはあると思います。リソースを削除する度にポリシーを外す運用では、外したポリシーを再度適用するのを忘れるリスクがあります。そのため、PVCリソースを削除するためのフラグをラベルで管理します。</p><h3 id="Constraint-Template（削除用ラベル）"><a href="#Constraint-Template（削除用ラベル）" class="headerlink" title="Constraint-Template（削除用ラベル）"></a>Constraint-Template（削除用ラベル）</h3><p><a href="#constraint-template%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4">Constraint-Template</a>で作成したマニフェストを以下のように編集します。</p><figure class="highlight yaml"><figcaption><span>constraint.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">    <span class="string">--------</span></span><br><span class="line">      <span class="string">中略</span></span><br><span class="line">    <span class="string">--------</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">openAPIV3Schema:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">        <span class="attr">properties:</span></span><br><span class="line">          <span class="comment"># labelsを追加</span></span><br><span class="line">          <span class="attr">labels:</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line"></span><br><span class="line"><span class="attr">targets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">target:</span> <span class="string">admission.k8s.gatekeeper.sh</span></span><br><span class="line">    <span class="attr">rego:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      package k8sdeletepvc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="string">violation[</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;msg&quot;:</span> <span class="string">msg</span>,</span><br><span class="line">          <span class="attr">&quot;details&quot;:</span> &#123;</span><br><span class="line">            <span class="attr">&quot;operation_chk&quot;:</span> <span class="string">match_operation</span>,</span><br><span class="line">            <span class="attr">&quot;namespace_chk&quot;:</span> <span class="string">match_namespace</span>,</span><br><span class="line">            <span class="attr">&quot;label_chk&quot;:</span> <span class="string">delete_labels</span> <span class="comment"># 追加</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="string">]</span></span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">--------</span></span><br><span class="line">          <span class="string">中略</span></span><br><span class="line">        <span class="string">--------</span></span><br><span class="line"></span><br><span class="line">        <span class="string">provided_label</span> <span class="string">:=</span> &#123;<span class="string">label</span> <span class="string">|</span> <span class="string">input.review.object.metadata.labels</span>[<span class="string">label</span>]&#125;</span><br><span class="line">        <span class="string">constraint_label</span> <span class="string">:=</span> &#123;<span class="string">label</span> <span class="string">|</span> <span class="string">label</span> <span class="string">:=</span> <span class="string">input.parameters.labels</span>[<span class="string">_</span>]&#125;</span><br><span class="line">        <span class="string">delete_labels</span> <span class="string">:=</span> <span class="string">constraint_label</span> <span class="bullet">-</span> <span class="string">provided_label</span></span><br><span class="line">        <span class="string">count(delete_labels)</span> <span class="string">&gt;</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="string">msg</span> <span class="string">:=</span> <span class="string">sprintf(&quot;:</span> <span class="string">%v</span> <span class="string">request</span> <span class="string">detected</span> <span class="string">in</span> <span class="string">%v</span> <span class="string">namespace.</span> <span class="string">Cancel</span> <span class="string">the</span> <span class="string">request</span> <span class="string">for</span> <span class="string">PVC</span> <span class="string">to</span> <span class="string">prevent</span> <span class="string">deletion&quot;</span>, [<span class="string">provided_operation</span>, <span class="string">provided_namespace</span>]<span class="string">)</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>ラベルは複数個管理することができるため、Parametersフィールドの定義もラベルを複数個管理できるようにarray型で定義しています。</p><p>また、削除用のラベルが複数個でも対応するように、配列の減算を用います。上記では、Constraintで定義したラベルをすべて含んでいたら、<code>delete_labels</code>の要素が0になり、含んでいなければ、要素が1以上になります。今回は、Constraintで定義したラベルをすべて含む場合に削除リクエストを承認するので、<code>count(delete_labels) &gt; 0</code>で比較を行っています。</p><h3 id="Constraint（削除用ラベル）"><a href="#Constraint（削除用ラベル）" class="headerlink" title="Constraint（削除用ラベル）"></a>Constraint（削除用ラベル）</h3><p>parametersフィールドにlabelsを追加するだけです。</p><figure class="highlight yaml"><figcaption><span>conostraint.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">match:</span></span><br><span class="line">    <span class="attr">kinds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">        <span class="attr">kinds:</span> [<span class="string">&quot;PersistentVolumeClaim&quot;</span>]</span><br><span class="line">  <span class="attr">parameters:</span></span><br><span class="line">    <span class="comment"># Note that &quot;labels&quot; is now contained in an array item, rather than an object key under &quot;parameters&quot;</span></span><br><span class="line">    <span class="attr">operation:</span> <span class="string">DELETE</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">monitoring</span></span><br><span class="line">    <span class="attr">labels:</span> [<span class="string">&quot;delete-pvc&quot;</span>] <span class="comment"># 削除用ラベルを追加</span></span><br></pre></td></tr></table></figure><p>上記では、ラベルを1つ設定していますが、2つ以上設定することもできます。</p><p>以上で、PVCリソースに<code>delete-pvc</code>というラベルを含んでいれば、削除リクエストが承認されます。<br>これにより、想定外なPVCの削除がなくなり、ポリシーを外すことなくいつでもPVCリソースが削除可能な環境になりました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>GatekeeperのValidating Admission Webhookを用いてPVCリソースの削除リクエストを拒否することができました。バックアップを取得していれば、リソースの復元は可能ですが、リソースを予期せぬ削除から守ることも重要だと思います。</p><p>また、ポリシーを記述するRegoですが、Kubernetesリソースのデータ取得とルールの記述方法を押さえれば、自由にポリシーを作れるのではと感じました。</p><p>最後に、この検証を始めたときはKubernetesのAPIリクエストのことを全く理解しておらず、Rego言語も初めて知りました。何も知らない状態から調べていったので、少々時間がかかりましたが、Kubernetesへの理解が深まり、ポリシーを自分の手で作成できるようになったので、とても良い勉強になりました。</p><h2 id="参考記事"><a href="#参考記事" class="headerlink" title="参考記事"></a>参考記事</h2><ul><li>OPA&#x2F;Gatekeeper<ul><li><a href="https://www.openpolicyagent.org/docs/latest/">https://www.openpolicyagent.org/docs/latest/</a></li><li><a href="https://open-policy-agent.github.io/gatekeeper/website/docs/howto/">https://open-policy-agent.github.io/gatekeeper/website/docs/howto/</a></li><li><a href="https://github.com/open-policy-agent/gatekeeper">https://github.com/open-policy-agent/gatekeeper</a></li></ul></li><li>Admission Webhook<ul><li><a href="https://blog.mosuke.tech/entry/2022/05/15/admission-webhook-1/">https://blog.mosuke.tech/entry/2022/05/15/admission-webhook-1/</a></li><li><a href="https://tech.jxpress.net/entry/2019/12/01/kubernetes-admission-webhook-getting-started">https://tech.jxpress.net/entry/2019/12/01/kubernetes-admission-webhook-getting-started</a></li></ul></li><li>Constraint-Template、Constraint<ul><li><a href="https://qiita.com/yokawasa/items/fe1ce8311db84fd1394b">https://qiita.com/yokawasa/items/fe1ce8311db84fd1394b</a></li><li><a href="https://github.com/open-policy-agent/gatekeeper-library/tree/master/library/general">https://github.com/open-policy-agent/gatekeeper-library/tree/master/library/general</a></li></ul></li><li>Rego<ul><li><a href="https://zenn.dev/mizutani/articles/5b1cd56b4b3f4f">https://zenn.dev/mizutani/articles/5b1cd56b4b3f4f</a></li><li><a href="https://adventar.org/calendars/6601">https://adventar.org/calendars/6601</a></li><li><a href="https://play.openpolicyagent.org/">https://play.openpolicyagent.org/</a></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Kubernetes/">Kubernetes</category>
      
      <category domain="https://future-architect.github.io/tags/OpenPolicyAgent/">OpenPolicyAgent</category>
      
      <category domain="https://future-architect.github.io/tags/ArgoCD/">ArgoCD</category>
      
      <category domain="https://future-architect.github.io/tags/EKS/">EKS</category>
      
      <category domain="https://future-architect.github.io/tags/Rego/">Rego</category>
      
      
      <comments>https://future-architect.github.io/articles/20230309a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>今どきJavaのウェブ開発体験(Helidon)</title>
      <link>https://future-architect.github.io/articles/20230308a/</link>
      <guid>https://future-architect.github.io/articles/20230308a/</guid>
      <pubDate>Tue, 07 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;JavaでWebサービス開発というと、SpringBoot、という時代が長く続いていますが、Javaの世界もいろいろ進歩があるよ、ということで、MicroProfileというのを教えてもらいました。&lt;/p&gt;
&lt;p&gt;豆蔵さんの技術ブログや、masatarouさんのJJUGのレ</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>JavaでWebサービス開発というと、SpringBoot、という時代が長く続いていますが、Javaの世界もいろいろ進歩があるよ、ということで、MicroProfileというのを教えてもらいました。</p><p>豆蔵さんの技術ブログや、masatarouさんのJJUGのレポートが詳しいです。</p><ul><li><a href="https://developer.mamezou-tech.com/msa/mp/cntrn01-what-mp/">MicroProfileってなにそれ？ - MicroProfileの登場</a></li><li><a href="https://qiita.com/masatarou/items/fd17d37c8d215af082f5">JJUGナイトセミナー　メモ２（JakartaEE・MicroProfile）</a></li></ul><p>歴史的な経緯をまとめるとこんな感じですかね。</p><ul><li>Javaのウェブアプリケーション開発の基盤としてJavaEE（昔の名前はJ2EE）があった</li><li>2016年により活発な開発を求めて、Eclipse FoundationがJavaEEをフォークしてMicroProfileを作った</li><li>2017年にOracleはJava EEをEclipse Foundationに移管を発表し、JakartaEEとなることを発表</li><li>2019年にJakartaEE 8がリリース</li><li>2020年にMicroProfileの最初のJakartaEE準拠版の4.0がリリース</li><li>2022年にJakartaEE 10 Core Profileを内包したMicroProfile 6.0がリリース</li></ul><p>フォークしたけど、どちらもEclipse Foundationに入り、2020年からは仲良く歩調を合わせている、という感じですかね。JavaEEやJakartaEEは過去との互換性を重視している感じで、MicroProfileの方はイケイケな感じということを当初狙っていたみたいですが、2022年12月に出た6.0では、含まれるプロファイルにJakartaEE 10 Core Profileという文字が見えます。</p><img src="/images/20230308a/スクリーンショット_2023-02-21_18.44.43.png" alt="スクリーンショット_2023-02-21_18.44.43.png" width="1200" height="447" loading="lazy"><p>これまではJakartaEEの要素でもあったJSON-B、JSON-P、JAX-RS、CDIなどが個別に指定されていたのですが、最新版ではJakartaEE 10とも歩調を合わせた、と言う感じみたいです。それにしても、OpenTelemetry対応とか、イケイケですね。参考までにMicroProfile 5.0はこんな感じ。</p><img src="/images/20230308a/スクリーンショット_2023-02-21_18.48.43.png" alt="スクリーンショット_2023-02-21_18.48.43.png" width="1200" height="428" loading="lazy"><p>ソフトウェアの歴史で何度か見たことがあるような流れではあります。<a href="https://jakarta.ee/release/10/">Jakarta EE 10の仕様の構成要素の図</a>にMicroProfile 6.0の項目も合わせてみたのが以下の図です。クラウドネイティブなフレームワークとなるために、どのような部分を切りすてて、何が必要とされているのかが一目瞭然ですね。これは他の言語のユーザーがフレームワークを考えるうえでも興味深い図なんじゃないでしょうか？ちょっと補足すると、Interceptorsというのは他の言語のフレームワークではDIコンテナと呼んでいるやつですね。</p><img src="/images/20230308a/image.png" alt="image.png" width="870" height="684" loading="lazy"><h1 id="Helidon"><a href="#Helidon" class="headerlink" title="Helidon"></a>Helidon</h1><p>MicroProfile準拠のウェブアプリケーションフレームワークは、<a href="https://quarkus.io/">Quarkus</a>(RedHat), <a href="https://helidon.io/">Helidon</a>(Oracle), <a href="https://openliberty.io/">Open Liberty</a>(IBM)などたくさん出ています。ただし、対応するMicroProfileのバージョンは微妙に違うようです。</p><p>MicroProfileに準拠していれば、Webサービスのパスや、リクエストやレスポンスの定義、DIコンテナなどのアノテーションはどれも同じように使えるようです。フレームワークが変わってもアプリケーションの実装をほとんど変えなくて済む、と。前述のJJUGナイトセミナーのレポートを見ると、ストレージ周りに組み込まれている機能とかがフレームワークによって個性があるみたいですね。</p><p>まあ、他の言語ユーザーからすると、ここまでフレームワーク間で画一的にしないで、個性を発揮してくれてもいいのに・・・という思いはあったりしますが、J2EEを引き継いでいるからですかね。</p><p>HelidonはOracleが開発しているウェブアプリケーションサーバーのフレームワークです。MicroProfileの対応バージョンは5.0と最新よりはちょっと古いぐらいですが、Oracleが開発しているので、いろいろアドバンスな感じが期待できそうです。</p><p>Helidonには2つのフレーバーがあります。<a href="https://helidon.io/docs/v3/#/about/introduction:~:text=flavor%20to%20use%20%E2%80%93-,use%20Helidon%20MP.,-Prerequisites">迷ったらMPの方を使え</a>、とドキュメントにはあります。Helidon SEはLambdaみたいなやつで、複数のハンドラを持っていてパス違いで起動し分けるルーターが不要な場合に良さそうです。今回はMicroProfileが目的なのでMPの方で作ってみました。</p><ul><li>Helidon SE: スパルタンな軽量サーバー</li><li>Helidon MP: MicroProfile互換のサーバー</li></ul><h1 id="Helidon-MPの環境設定"><a href="#Helidon-MPの環境設定" class="headerlink" title="Helidon MPの環境設定"></a>Helidon MPの環境設定</h1><p><a href="https://helidon.io/starter/3.1.1?step=1">Helidon Starter</a>というWebサイトがあり、ここをぽちぽちするだけでプロジェクトの雛形ができあがります。Spring Starterみたいですね。それ以外にも、<a href="https://helidon.io/docs/v3/#/about/cli">helidon CLI</a>というのがあり、今時なシンプルコマンドラインでビルドしたりができます。mvnとかgradleを叩く必要はなくなります。</p><p>インストールはバイナリを落としてきてパスを通すだけです。init&#x2F;dev&#x2F;buildのサブコマンドだけで色々できるようになります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># プロジェクト作成</span></span><br><span class="line">$ helidon init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 開発サーバー起動</span></span><br><span class="line">$ helidon dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># jarビルド</span></span><br><span class="line">$ helidon build</span><br></pre></td></tr></table></figure><h1 id="Helidonのコードを見てみる"><a href="#Helidonのコードを見てみる" class="headerlink" title="Helidonのコードを見てみる"></a>Helidonのコードを見てみる</h1><p><code>helidon init</code>で出来上がったプロジェクトを見てみます。Helidon MPを使うよとか、パッケージ名とかを適当に入れるだけでできます。Spring Starterよりもかなりシンプルです（ウェブに特化していてSpring Batchとかそういうバリエーションがないからですが）。</p><p>出来上がったコードは、全部が1カ所にまとまっています。パッケージを細かく分けるとか、レイヤードアーキテクチャのレイヤーをパッケージとして分ける、というのはもう今時ではないみたいですね。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">src/main/java/me/shibu/mp/quickstart</span><br><span class="line">  GreetResource.java</span><br><span class="line">  GreetingProvider.java</span><br><span class="line">  Message.java</span><br><span class="line">  SimpleGreetResource.java</span><br><span class="line">  package-info.java</span><br></pre></td></tr></table></figure><p><code>GreetingProvider</code>はリポジトリ層というかサービス層というか、ですかね。いわゆるビジネスロジック。まあオンメモリで保存して返しているだけの実装になっています。<code>Message</code>は、値オブジェクトというか、構造体というか、単なる箱です。</p><p>2つ<code>Resource</code>がついているクラスがあります。これはSpringでいういわゆる「コントローラ」ですね。コメントとか省いてシンプルにしていくと、こんな感じです。SpringBootを見たことがある人にはだいたい見たことがあるものですね。</p><p>他の言語を使ったことがある人も<code>@Path/@GET/@Produces</code>あたりは見てすぐわかりますね。<code>@RequestScoped/@Inject</code>はDIコンテナのアノテーションっぽいですね。クラスのライフサイクルの指示と、このコンストラクタ起動時に<code>GreetingProvider</code>のインスタンスを作って渡してね、というDIコンテナへの指示かと思います。</p><figure class="highlight java"><figcaption><span>GreetingProvider.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Path(&quot;/greet&quot;)</span></span><br><span class="line"><span class="meta">@RequestScoped</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetResource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GreetingProvider greetingProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GreetResource</span><span class="params">(GreetingProvider greetingConfig)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.greetingProvider = greetingConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    <span class="meta">@Produces(MediaType.APPLICATION_JSON)</span></span><br><span class="line">    <span class="keyword">public</span> Message <span class="title function_">getDefaultMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createResponse(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>実行は<code>helidon dev</code>コマンドで行えます。デバッグモード起動です。<code>helidon build</code>して<code>java -jar target/[アプリケーション].jar</code>でもいけます。Go並に簡単。</p><h1 id="コンテナのビルド"><a href="#コンテナのビルド" class="headerlink" title="コンテナのビルド"></a>コンテナのビルド</h1><p>すでにjarへのビルドは触れました。コンテナのビルドもDockerfileが生成されているので簡単です。Dockerfileは3つあり、今時のJavaのアップデートの恩恵が受けられます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JDKでjarを起動するイメージ</span></span><br><span class="line">$ docker build .</span><br><span class="line"></span><br><span class="line"><span class="comment"># jlinkで小さいランタイムを生成してjarを起動するイメージ</span></span><br><span class="line">$ docker build -f Dockerfile.jlink .</span><br><span class="line"></span><br><span class="line"><span class="comment"># GraalVMでネイティブイメージを生成</span></span><br><span class="line">$ docker build -f Dockerfile.native .</span><br></pre></td></tr></table></figure><p>実行してみると、ネイティブビルドはなんかエラーが出てしまったのですが、GitHubで教えてもらった対策でビルドができました（次節で説明します）。レスポンスが早くもらえるのは嬉しいですね。エコシステム大事。</p><p>デフォルトのjar版は417MBが、jlink版が126MB、GraalVM版が186MBでした。GraalVMがちょっと大きいですが、jlinkのベースの<code>debian:stretch-slim</code>が50MBで、GraalVM版の<code>ghcr.io/oracle/oraclelinux:9-slim</code>が107MBで、ベースイメージの差であって上の部分のサイズはだいたい同じぐらいですね。</p><p>GraalVM版は圧倒的な起動の速さですし、消費メモリも少ないです。気になるビルド時間は手元のM2 Airでダウンロード周りが20秒、ネイティブ実行イメージ生成が110秒ぐらいですね。まあCI環境だけでやるならいいんじゃないでしょうか？とはいえ、JVM版、jlink版もそこまで起動は遅くはないです。</p><p>思ったよりもいいな、と思ったのがjlink版。300MBぐらい小さいイメージになったし、ビルドも実行もそんなに遅くないです。とりあえず手元でコンテナをさっと作ってローカル結合テストをするときはjlink版で、本番環境に撒く前提だったり、ステージングでテストする場合にGraalVMと使い分けるのが良さそうですね。</p><div class="scroll"><table><thead><tr><th align="center"></th><th align="center">JVM(jar)</th><th align="center">jlink</th><th align="center">GraalVM(native)</th></tr></thead><tbody><tr><td align="center">Dockerイメージサイズ</td><td align="center">417MB</td><td align="center">126MB</td><td align="center">186MB</td></tr><tr><td align="center">Dockerイメージビルド時間(ベースイメージダウンロード除く)</td><td align="center">21秒</td><td align="center">42秒</td><td align="center">165秒</td></tr><tr><td align="center">Docker起動時間(HTTPリクエスト受付開始まで)</td><td align="center">1.2秒</td><td align="center">1.2秒</td><td align="center">0.4秒</td></tr><tr><td align="center">起動後のメモリ(Docker上で計測&#x2F;100回リクエスト後)</td><td align="center">180MB</td><td align="center">176MB</td><td align="center">85MB</td></tr></tbody></table></div><p>起動時間は以下のGoアプリコードでやりました。dockerコマンドと同時に走らせて、HTTPリクエストが受付開始されて正常なレスポンスが返ってくるまでの時間を10ms単位で計測しています。</p><figure class="highlight go"><figcaption><span>bench.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line">t := time.NewTicker(<span class="number">10</span> * time.Millisecond)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">now := &lt;-t.C</span><br><span class="line">_, err := http.Get(<span class="string">&quot;http://localhost:8080/greet&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(now.Sub(start))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ネイティブビルドのエラー対策"><a href="#ネイティブビルドのエラー対策" class="headerlink" title="ネイティブビルドのエラー対策"></a>ネイティブビルドのエラー対策</h2><p><a href="https://github.com/helidon-io/helidon/issues/6260">こちらのissue</a>を立てたところ、contributorの方に反応していただけました。少し<code>Dockerfile.native</code>の修正と<code>pom.xml</code>の修正が必要です。</p><ol><li><code>Dockerfile.native</code>の最初の<code>RUN</code>の<code>-Pnative-image -Dnative.image.skip</code>を削除</li><li><code>Dockerfile.native</code>の実行イメージを<code>FROM scratch</code>から<code>FROM ghcr.io/oracle/oraclelinux:9-slim</code>に変更</li><li><code>pom.exe</code>に<code>native-maven-plugin</code>の変更を追加↓（com.acmeの部分は自分のアプリケーションのパッケージ名にする）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.graalvm.buildtools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>native-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">buildArgs</span>&gt;</span>--initialize-at-build-time=com.acme<span class="tag">&lt;/<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>これでビルドできました！</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ということで、コードを書かずにサンプルを動かしただけですが、今時のJavaの開発を体験してみました。ネイティブイメージのビルドはまだエラーがありますが（回避は可能）、<code>helidon</code>コマンドでプロジェクト作成から開発サーバーの起動ができ、jarもビルドできました。また、Dockerイメージのビルドも、最初からDockerfileがついてくるので簡単にでき、デプロイも簡単そうです。ウェブ開発に必要なものがコンパクトにまとまっていますね。PythonでFastAPI環境を作るよりも簡単なぐらい。</p><p>現在のJavaはSpringBootと、このMicroProfileの2つの潮流に集約されてきているようです。チャンスがあればこのHelidonとかのMicroProfileを実開発に投入してみたいですね。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Java/">Java</category>
      
      <category domain="https://future-architect.github.io/tags/MicroProfile/">MicroProfile</category>
      
      <category domain="https://future-architect.github.io/tags/Helidon/">Helidon</category>
      
      
      <comments>https://future-architect.github.io/articles/20230308a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CircleCIでPullRequest作成時の負荷を軽減する</title>
      <link>https://future-architect.github.io/articles/20230307a/</link>
      <guid>https://future-architect.github.io/articles/20230307a/</guid>
      <pubDate>Mon, 06 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230307a/theme.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;673&quot; loading=&quot;lazy&quot;&gt;



&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230307a/theme.png" alt="" width="1200" height="673" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。<br>フューチャーアーキテクト株式会社、TIG&#x2F;EXユニット所属の宮永です。</p><blockquote><p>※TIG(Technology Innovation Group)はテクノロジーカットでお客様の課題解決を行う部門です。<br>中でもEX(Energy Transformation)ユニットは2022年に新設されたエネルギー業界特化型のコンサルティング集団で、「エネルギー×テクノロジー」をコンセプトにエネルギーサプライチェーン全体での需給の最適化やレジリエンス強化を図り、地域の活性化やビジネスモデルを変革することで透明性の高いフェアなマーケット形成を目指します。</p></blockquote><p>本記事ではCircleCIでGitHubのPR作成時の負荷を軽減するために、PR作成者の自動アサインおよびラベルの付与を自動化した話をご紹介します。</p><h1 id="経緯"><a href="#経緯" class="headerlink" title="経緯"></a>経緯</h1><p>CircleCIでGitHubのPullRequest作成時の負荷を軽減したいと思った経緯について説明します。</p><p>私が所属するチームのブランチモデルは簡易的なgit-flowモデルに則っており、<code>main</code>、<code>develop</code>、<code>feature</code>の3つのブランチで運用しています。</p><p>デフォルトブランチを<code>develop</code>として、改修する時は<code>develop</code>ブランチから<code>feature</code>ブランチを切ります。改修が完了したら<code>feature</code>→<code>develop</code>ブランチにマージして、リリースするタイミングで<code>develop</code>→<code>main</code>ブランチにマージします。</p><p>最近まで、リリースするときには<code>develop</code>→<code>main</code>へのPullRequestを手動作成する運用を行っていましたが機械的な作業なので<a href="https://github.com/x-motemen/git-pr-release">git-pr-release</a>を使って自動化しました。</p><p><a href="https://github.com/x-motemen/git-pr-release">git-pr-release</a>の導入は<a href="https://songmu.jp/riji/entry/2019-07-28-circleci-git-pr-release.html">こちらのSongmu</a>さんの記事が非常に参考になりました。</p><blockquote><p>余談にはなりますが、弊チームは<a href="https://github.com/Songmu/flextime">Songmu&#x2F;flextime</a>のヘビーユーザーであり、非常にお世話になっております。時刻操作系のGoのテストをする時はflextimeが欠かせません!</p></blockquote><p><a href="https://github.com/x-motemen/git-pr-release">git-pr-release</a>の導入に合わせてGitHubの標準機能である<a href="https://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes">リリースノート自動生成</a>も導入しました。</p><p>以下のymlファイルをリポジトリの<code>.github</code>配下に格納するだけでリリースノートを自動生成することができます。</p><figure class="highlight yaml"><figcaption><span>release.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github/release.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">changelog:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ignore-for-release</span></span><br><span class="line">    <span class="attr">authors:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">octocat</span></span><br><span class="line">  <span class="attr">categories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Breaking</span> <span class="string">Changes</span> <span class="string">🛠</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Semver-Major</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">breaking-change</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Exciting</span> <span class="string">New</span> <span class="string">Features</span> <span class="string">🎉</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Semver-Minor</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">enhancement</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Other</span> <span class="string">Changes</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>release.ymlについて少し説明します。<code>-title</code>と<code>-label</code>タグが必須項目であり、<code>-title</code>にはリリースノートのセクションを、<code>-label</code>にはそのセクションに記載するPullRequestのラベルを記載します。</p><p>例えば、前回リリース時から今回のリリースまでに<code>main</code>にとりこまれた<code>enhancement</code>ラベルをもつPullRequestはすべてExciteing New Featuresのセクションに記載されるようになります。</p><p>release.ymlを作成したらリリース時にGenerate release noteを押下するだけでリリースノートが自動生成されます。</p><img src="/images/20230307a/image.png" alt="image.png" width="1200" height="934" loading="lazy"><blockquote><p>GitHub標準機能を用いずにtagのPUSHをトリガーにCircleCIで自動化する場合は<a href="https://future-architect.github.io/articles/20210708a/">当技術ブログの過去記事</a>が参考になると思います。</p></blockquote><p>今回、「CircleCIでPullRequest作成時の負荷を軽減したい」と思った経緯ですが、このリリースノートの自動生成が背景にあります。</p><p>既に記載したように自動生成したChangeLogはPullRequestのラベルに依存しているため、きちんと運用をまわすには、メンバー全員にラベルの付与を徹底させる必要があります。</p><p>この「きちんとラベルを付与する」というのは簡単な作業に思えますが案外忘れてしまいがちです。せっかくリリースノートの自動生成まで行ったのですから、ラベルの付与も自動化してしまいたいと思い、CircleCIベースでラベルの付与を自動化しました。</p><h1 id="ラベルの振り分け方"><a href="#ラベルの振り分け方" class="headerlink" title="ラベルの振り分け方"></a>ラベルの振り分け方</h1><p>さて、ラベルの振り分け方ですがいくつか方法が考えられます。例えば特定のディレクトリの変更に依存してラベルを付与する方法です。</p><p>これを実現するには<a href="https://github.com/actions/labeler">actions&#x2F;labeler</a>を利用するのが最も導入コストが低いと思います。</p><p>他にはブランチ名に依存してラベルを振り分ける方法なども考えられます。今回私が採用したのはブランチ名に依存してラベルの振り分けを行う方法です。</p><p>ブランチ名ベースでラベルを振り分ける方法を採用したのは、弊チームのリポジトリが複数サービスが含まれたモノリポ構成であることが大きな理由です。</p><p>一部機能は同じ階層のファイルを共有していたりするため、果たして改修部分がservice Aの改修なのか、service Bの改修なのかはコードを見ないと判断できません。ブランチ名ベースでラベルの振り分けを行えば正確にラベルを付与することができます。</p><p>そこで、「<a href="https://github.com/actions/labeler">actions&#x2F;labeler</a>にそんな機能搭載されていないかな?」と思い、確認しましたが2020年に<a href="https://github.com/actions/labeler/issues/54">Issue#54</a>が起票されてから2023年現在もOpenのままで、簡単に導入とはいかないようです。</p><p>加えて、諸事情がありGitHub ActionsではなくCircleCI上に導入したかったので、<a href="https://github.com/actions/labeler">actions&#x2F;labeler</a>の導入は見送りました。</p><h1 id="GitHub-CLIの利用"><a href="#GitHub-CLIの利用" class="headerlink" title="GitHub CLIの利用"></a>GitHub CLIの利用</h1><p>どうやら、自前でGitHubAPIを操作する必要が出てきそうでしたので、まずはGitHub CLIでラベルの付与操作などがサポートされていないかを調査したところ、それらしい機能がサポートされていることがわかりました。</p><p><a href="https://cli.github.com/manual/gh_pr_edit">GitHub CLI gh pr edit</a></p><p>GitHub CLIをインストールして、以下コマンドを実行することでPullRequestを操作することができます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gh pr edit [&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;] [flags]</span><br></pre></td></tr></table></figure><p><code>[&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;]</code>を空のまま実行した場合、現在チェックアウトしているブランチに対して実行されます。</p><p><code>flags</code>には以下オプションがサポートされています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">--add-assignee &lt;login&gt;</span><br><span class="line">Add assigned <span class="built_in">users</span> by their login. Use <span class="string">&quot;@me&quot;</span> to assign yourself.</span><br><span class="line">--add-label &lt;name&gt;</span><br><span class="line">Add labels by name</span><br><span class="line">--add-project &lt;name&gt;</span><br><span class="line">Add the pull request to projects by name</span><br><span class="line">--add-reviewer &lt;login&gt;</span><br><span class="line">Add reviewers by their login.</span><br><span class="line">-B, --base &lt;branch&gt;</span><br><span class="line">Change the base branch <span class="keyword">for</span> this pull request</span><br><span class="line">-b, --body &lt;string&gt;</span><br><span class="line">Set the new body.</span><br><span class="line">-F, --body-file &lt;file&gt;</span><br><span class="line">Read body text from file (use <span class="string">&quot;-&quot;</span> to <span class="built_in">read</span> from standard input)</span><br><span class="line">-m, --milestone &lt;name&gt;</span><br><span class="line">Edit the milestone the pull request belongs to by name</span><br><span class="line">--remove-assignee &lt;login&gt;</span><br><span class="line">Remove assigned <span class="built_in">users</span> by their login. Use <span class="string">&quot;@me&quot;</span> to unassign yourself.</span><br><span class="line">--remove-label &lt;name&gt;</span><br><span class="line">Remove labels by name</span><br><span class="line">--remove-project &lt;name&gt;</span><br><span class="line">Remove the pull request from projects by name</span><br><span class="line">--remove-reviewer &lt;login&gt;</span><br><span class="line">Remove reviewers by their login.</span><br><span class="line">-t, --title &lt;string&gt;</span><br><span class="line">Set the new title.</span><br></pre></td></tr></table></figure><p>今回利用するのは<code>--add-label</code>です。</p><h1 id="CircleCIの設定"><a href="#CircleCIの設定" class="headerlink" title="CircleCIの設定"></a>CircleCIの設定</h1><p>GitHub CLIでなんとかなりそうなことが判明しましたので、あとはCircleCIでの実行環境です。</p><p>利用者の多そうなツールなのでOrbsで環境が提供されていないかなと思い探してみたところ、最適な環境を見つけました。<a href="https://circleci.com/developer/ja/orbs/orb/circleci/github-cli">circleci&#x2F;github-cli</a></p><p>あとは、このOrbsを利用してGitHub CLIコマンドを実行するだけです。</p><p>以下、設定ファイルです。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>Orbsとは<br>OrbsはCircleCI 2.1で追加された機能で、CircleCIの設定を再利用可能なパッケージとして提供したものです。<br>Slack連携などは利用している方も多いのではないでしょうか。<a href="https://circleci.com/docs/ja/slack-orb-tutorial/">Slack連携のOrbs</a></p></div><figure class="highlight yaml"><figcaption><span>config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .cicleci/config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="attr">gh:</span> <span class="string">circleci/github-cli@2.2.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">executors:</span></span><br><span class="line">  <span class="attr">base:</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">&quot;cimg/base:stable&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">add-label:</span></span><br><span class="line">    <span class="attr">executor:</span> <span class="string">base</span></span><br><span class="line">    <span class="attr">working_directory:</span> <span class="string">~/repo</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">gh/setup:</span></span><br><span class="line">          <span class="attr">version:</span> <span class="number">2.23</span><span class="number">.0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">checkout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Add-Label</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            bash add_label.sh</span></span><br><span class="line"><span class="string"></span><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">add-label:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">add-label</span></span><br></pre></td></tr></table></figure><p><code>-gh/setup</code>でGitHub CLIの初期設定を行います。この際のCicleCIの環境変数に<code>GITHUB_TOKEN</code>の設定が必要です。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>GITHUB_TOKENの権限<br>GITHUB＿TOKENの権限はPullRequestに対して操作を行うためrepoの権限が必要です。<a href="https://docs.github.com/ja/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token">GITHUB_TOKENのアクセス許可</a></p></div><p>GitHub CLIのセットアップ完了後ブランチにチェックアウトします。<br>その後GitHub CLIのコマンドを記載したShellスクリプトを実行しています。</p><p>以下、実行対象のShellスクリプトです。</p><figure class="highlight sh"><figcaption><span>add_label.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -euxo pipefail</span><br><span class="line">prinfo=$(gh <span class="built_in">pr</span> view --json author,headRefName --jq .author.login,.headRefName)</span><br><span class="line">assignees=$(gh <span class="built_in">pr</span> view --json assignees --jq .assignees[].login)</span><br><span class="line">labels=$(gh <span class="built_in">pr</span> view --json labels --jq .labels[].name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取得した情報を配列に変換して変数に格納</span></span><br><span class="line"><span class="built_in">mapfile</span> -t infoarray &lt;&lt;&lt; <span class="string">&quot;<span class="variable">$prinfo</span>&quot;</span></span><br><span class="line">author=<span class="string">&quot;<span class="variable">$&#123;infoarray[0]&#125;</span>&quot;</span></span><br><span class="line">branch=<span class="string">&quot;<span class="variable">$&#123;infoarray[1]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PR作成者を自動アサイン</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$assignees</span> == <span class="string">&quot;&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;assigne&quot;</span> <span class="string">&quot;<span class="variable">$author</span>&quot;</span></span><br><span class="line">    gh <span class="built_in">pr</span> edit --add-assignee <span class="string">&quot;<span class="variable">$author</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> <span class="string">&quot;<span class="variable">$&#123;labels&#125;</span>&quot;</span></span><br><span class="line">attachlabels=(<span class="string">&quot;bug&quot;</span> <span class="string">&quot;docs&quot;</span> <span class="string">&quot;refactoring&quot;</span> <span class="string">&quot;enhancement&quot;</span> <span class="string">&quot;fix&quot;</span>)</span><br><span class="line"><span class="comment"># ブランチ名にそってラベル付与</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;attachlabels[@]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$branch</span> == *<span class="variable">$name</span>* ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">printf</span> <span class="string">&#x27;%s\n&#x27;</span> <span class="string">&quot;<span class="variable">$&#123;labels[@]&#125;</span>&quot;</span> | grep -qx <span class="string">&quot;<span class="variable">$name</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span>&quot;</span> <span class="string">&quot;label is already attached&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;attach&quot;</span> <span class="string">&quot;<span class="variable">$name</span>&quot;</span> <span class="string">&quot;label&quot;</span></span><br><span class="line">        gh <span class="built_in">pr</span> edit --add-label <span class="string">&quot;<span class="variable">$name</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>GitHub CLIを利用することで複雑なスクリプトを書かずにすみました。</p><p>ラベルの自動付与のついでにAssigneesにPullRequest作成者の付与も自動化しています。</p><p>ブランチ名やPullRequest作成者の情報は<a href="https://cli.github.com/manual/gh_pr_view">gh pr view</a>コマンドで取得します。とても便利なことに<code>--jq</code>オプションでフィルタリングできます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-c, --comments</span><br><span class="line">View pull request comments</span><br><span class="line">-q, --jq &lt;expression&gt;</span><br><span class="line">Filter JSON output using a jq expression</span><br><span class="line">--json &lt;fields&gt;</span><br><span class="line">Output JSON with the specified fields</span><br><span class="line">-t, --template &lt;string&gt;</span><br><span class="line">Format JSON output using a Go template; see <span class="string">&quot;gh help formatting&quot;</span></span><br><span class="line">-w, --web</span><br><span class="line">Open a pull request <span class="keyword">in</span> the browser</span><br></pre></td></tr></table></figure><p>試しに、<code>gh pr view --json author</code>を実行してみると、以下のレスポンスを取得できます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">❯❯❯ gh pr view --json author</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XXXXXXXXXX&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;is_bot&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;login&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XXXXX&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XXXXX&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>これを<code>jq</code>をつかってフィルタリングして<code>author</code>変数に代入するには以下のようにします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author=$(gh <span class="built_in">pr</span> view --json author --jq .author.login)</span><br></pre></td></tr></table></figure><p><code>--json</code>オプションはカンマ区切りで複数指定ができますので以下のようにして一回のリクエストにまとめることができます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prinfo=$(gh <span class="built_in">pr</span> view --json author,headRefName --jq .author.login,.headRefName)</span><br></pre></td></tr></table></figure><p>あとは事前に設定してあるラベル名にブランチ名が合致しているかを確認して文字列一致していればPullRequestにラベルを付与していきます。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>Shellスクリプト初心者のため、<a href="https://qiita.com/Hayao0819/items/0e04b39b0804a0d16020">こちらの記事</a>を参考にさせていただきました。</p></div><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="string">&quot;<span class="variable">$&#123;labels&#125;</span>&quot;</span></span><br><span class="line">attachlabels=(<span class="string">&quot;bug&quot;</span> <span class="string">&quot;docs&quot;</span> <span class="string">&quot;refactoring&quot;</span> <span class="string">&quot;enhancement&quot;</span> <span class="string">&quot;fix&quot;</span>)</span><br><span class="line"><span class="comment"># ブランチ名にそってラベル付与</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;attachlabels[@]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$branch</span> == *<span class="variable">$name</span>* ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">printf</span> <span class="string">&#x27;%s\n&#x27;</span> <span class="string">&quot;<span class="variable">$&#123;labels[@]&#125;</span>&quot;</span> | grep -qx <span class="string">&quot;<span class="variable">$name</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span>&quot;</span> <span class="string">&quot;label is already attached&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;attach&quot;</span> <span class="string">&quot;<span class="variable">$name</span>&quot;</span> <span class="string">&quot;label&quot;</span></span><br><span class="line">        gh <span class="built_in">pr</span> edit --add-label <span class="string">&quot;<span class="variable">$name</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h1><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>CircleCIのOnly build pull requests<br>今回CircleCIの発火はPullRequestが作成されている状態を想定しています。そのためリリースフローに支障がない場合は<a href="https://circleci.com/docs/oss/#only-build-pull-requests">こちら</a>に記載のOnly build pull requestの設定をONにすることをおすすめします</p></div><p>▼成功すると以下のようにPR作成時にブランチ名にしたがってラベルの付与とPR作成者の自動アサインができます</p><img src="/images/20230307a/image_2.png" alt="image.png" width="1200" height="569" loading="lazy"><div class="note warn" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-exclamation-circle"></span><p>GitHubアカウントのユーザー名<br>add_label.shでは、author.nameがスペースで区切られていないことを想定しています。<br>アカウント名にスペースが含まれる場合は、author.nameを別にリクエストして変数に格納するなどしてください。</p></div><h1 id="少しハマったところ"><a href="#少しハマったところ" class="headerlink" title="少しハマったところ"></a>少しハマったところ</h1><p><a href="https://circleci.com/developer/orbs/orb/circleci/github-cli">circleci&#x2F;github-cli</a>の<code>- gh/setup</code>は何も指定しないとGitHub CLIのデフォルトバージョンは2.3.0です。<br>記事執筆時の2023年2月18日にローカルにインストールされていたGitHub CLIは2.23.0でした。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯❯❯ gh --version</span><br><span class="line">gh version 2.23.0 (2023-02-08)</span><br><span class="line">https://github.com/cli/cli/releases/tag/v2.23.0</span><br></pre></td></tr></table></figure><p>どうやらバージョン2.3.0では<code>gh pr view --json author</code>のレスポンスに<code>name</code>という属性はなかったようで、ローカルのバージョンとの差分に気づかずにPullRequest作成者の情報の取得ができずに悩んでいました。(スクリプトではnameではなく、loginで取得しています)<br>バージョン情報を事前に確認しておくことは大事ですね。<br><code>- gh/setup</code>には<code>version</code>を指定することができるので、最新のバージョンを確認しつつ指定してください。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">gh/setup:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">2.23</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回、諸事情がありGitHubActionsではなくCircleCIで実装しましたが、GitHubActionsであればGitHub CLIはプリインストールされているので本記事よりも簡単に導入できます。</p><ul><li><a href="https://docs.github.com/ja/actions/using-workflows/using-github-cli-in-workflows">ワークフローで GitHub CLI を使用する</a></li></ul><p>まだ自動化の運用を初めて日が浅く、今後運用を続けていく中で改善点などでてくるかと思いますが、現状では満足しています。</p><p>開発体験の向上は生産性の向上に直結すると思っていますので、今後も機械的な作業は積極的に自動化していきたいです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/CircleCI/">CircleCI</category>
      
      <category domain="https://future-architect.github.io/tags/GitHub/">GitHub</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9/">リリース</category>
      
      
      <comments>https://future-architect.github.io/articles/20230307a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
