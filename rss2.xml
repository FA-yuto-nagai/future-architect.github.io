<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Tue, 28 Nov 2023 06:42:19 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>data-testidはいつ使うべきか？そもそも使うべきなのか？</title>
      <link>https://future-architect.github.io/articles/20231128a/</link>
      <guid>https://future-architect.github.io/articles/20231128a/</guid>
      <pubDate>Mon, 27 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231128a/top.png&quot; alt=&quot;&quot; width=&quot;329&quot; height=&quot;153&quot;&gt;

&lt;p&gt;Playwrightあるいはそのロケーターの元ネタとなっているTesting Libraryでは、DOMを指定する方法として</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231128a/top.png" alt="" width="329" height="153"><p>Playwrightあるいはそのロケーターの元ネタとなっているTesting Libraryでは、DOMを指定する方法として <code>data-testid</code> 属性を扱ったクエリーを提供しています。どちらでも <code>getByTestId(ID文字列)</code> メソッドを使い、この属性値を使った要素の取得が行えます。しかし、ドキュメントを見ると、PlaywrightもTesting Libraryも、「他の手法が使えないときの最終手段」としています。</p><blockquote><p>In the spirit of the guiding principles, it is recommended to use this only after the other queries don’t work for your use case. Using data-testid attributes do not resemble how your software is used and should be avoided if possible. That said, they are way better than querying based on DOM structure or styling css class names. Learn more about data-testids from the blog post “Making your UI tests resilient to change”</p><p><a href="https://testing-library.com/docs/guiding-principles">方針の原則</a>の精神に基づき、他のクエリではユースケースに合わなかった場合にのみ、これを使用することをお勧めします。 <code>data-testid</code> 属性の使用は(エンドユーザーが)ソフトウェアを使用する方法とかけ離れているため、可能であれば避けてください。とはいえ、DOM構造に基づいてクエリを実行したり、(テストのために)CSSクラス名を設定するよりもはるかに優れています。 <code>data-testid</code> の詳細については、ブログ投稿の <a href="https://kentcdodds.com/blog/making-your-ui-tests-resilient-to-change">変更に対するUIテストの回復力の強化」</a>を参照してください。</p></blockquote><ul><li><a href="https://future-architect.github.io/articles/20210226/">アクセシビリティ情報を使った壊れにくいE2Eテスト</a></li></ul><p>以前書いた技術ブログの記事では「人間に近い感覚」で要素を取得するテストが壊れにくいテストであるということを書きました。<code>data-testid</code> はHTMLを見て初めて知り得る情報ですので、E2Eテストではなるべく使うべきではありません。エンドユーザーはDOM構造を見てウェブサイトにアクセスするわけではありません。ユーザーが操作するのはブラウザで操作するウェブアプリケーションであり、レンダリングされたウェブページを見て操作します。エンドユーザーから見れば、DOMの構造は実装の詳細であって、開発者ツールを見ないとわからない情報です。実装の詳細はリファクタリング等で変更されることがありますが、より抽象度の高い操作はそれよりも「意図せぬ変更」にはなりにくいです。</p><p>単体テストでも同様に使うべきではありません。同じようにテストできるのであれば、テストコードは少ない方が良いし、ホワイトボックステストよりもブラックボックステストで公開メンバーのみに対するテストで済むならそちらの方が良いというのは多くの開発者が合意してくれる内容だと思います。公開メソッドで済むのにわざわざリフレクション機能を使うのはよくないですよね？DOM構造を使ったテストはなるべく行うべきではないホワイトボックステストです。</p><p>そうなると、Testing-Libraryの原則で説明されているように、他の方法がある場合はそちらを使うべき、というのがわかるでしょう。「<code>data-testid</code>なんて新しい属性を作らなくても、 <code>id</code> や <code>class</code> でいいのでは？」と思う方もいると思います。 <code>id</code> や <code>class</code>ははテスト専用ではなくて別の役割も持っているため、テスト以外の動機によって変更されてしまうことがあります。 <code>data-testid</code> の立ち位置は、なるべく使うべきではないが <code>id</code> や <code>class</code> よりはまし、と覚えておきましょう。</p><p>唯一、気兼ねなく使っても問題がないと思われるケースは、単体テストかつ、これが外部に公開されたAPIである場合です。次のように、省略可能な <code>data-testid</code> 属性をコンポーネントに付与し、もし指定されたらコンポーネントのルートの要素にこの属性をフォワードして付与するようにします。</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// data-testid属性をフォワードして設定するコンポーネント</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">props: &#123;[<span class="string">&quot;data-testid&quot;</span>]?: string&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-testid</span>=<span class="string">&#123;props[</span>&quot;<span class="attr">data-testid</span>&quot;]&#125;&gt;</span>My Component<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こうすれば、単体テストにおいては、テストコードの見える場所で宣言と利用が行われます。「どこで定義されたかわからない謎の属性」感はなくなり、テストコードを読んだ人からはコンポーネントの中を知らずともその利用方法が想像できて、ブラックボックステストであるべき、という原則を壊さずに利用できていることがわかるでしょう。</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// data-testidの問題ない利用例（Jest + @testing-library/react）</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;loads and displays greeting&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">data-testid</span>=<span class="string">&quot;test-target&quot;</span> /&gt;</span></span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(screen.<span class="title function_">getByTestId</span>(<span class="string">&#x27;test-target&#x27;</span>)).<span class="title function_">toHaveTextContent</span>(<span class="string">&#x27;My Component&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>どちらにせよ、E2Eテストではなるべく使わない方が良いでしょう。眼に見える要素を使ってテストを書くべきです。</p><h1 id="代わりに何を使えば良いか？"><a href="#代わりに何を使えば良いか？" class="headerlink" title="代わりに何を使えば良いか？"></a>代わりに何を使えば良いか？</h1><p>Testing LibraryもPlaywrightも、どちらもリファレンスでは同じような並びに並んでいることがわかります。アルファベット順ではないです。この順番で利用を検討していけば良いという推奨の順番と考えても良いと思います。(Testing-LibraryはByの前に、get, find, query, getAll, findAll, queryAllと6パターンの接頭辞のバリエーションがあります)</p><div class="scroll"><table><thead><tr><th align="left">Playwright</th><th align="left">Testing-Library</th><th align="left">役割</th></tr></thead><tbody><tr><td align="left"><code>getByRole()</code></td><td align="left"><code>ByRole()</code></td><td align="left">ロールで取得</td></tr><tr><td align="left"><code>getByLabel()</code></td><td align="left"><code>ByLabelText()</code></td><td align="left">ラベルテキストで取得</td></tr><tr><td align="left"><code>getByPlaceholder()</code></td><td align="left"><code>ByPlaceholderText()</code></td><td align="left">プレースホルダのテキストで取得</td></tr><tr><td align="left"><code>getByText()</code></td><td align="left"><code>ByText()</code></td><td align="left">テキスト情報で取得</td></tr><tr><td align="left"></td><td align="left"><code>ByDisplayValue()</code></td><td align="left">input&#x2F;textareaのvalue値で取得</td></tr><tr><td align="left"><code>getByAltText()</code></td><td align="left"><code>ByAltText()</code></td><td align="left">画像などの代替テキスト(alt属性)で取得</td></tr><tr><td align="left"><code>getByTitle()</code></td><td align="left"><code>ByTitle()</code></td><td align="left">HTMLのtitle属性(ツールチップで表示される)で取得</td></tr><tr><td align="left"><code>getByTestId()</code></td><td align="left"><code>ByTestId()</code></td><td align="left">data-testid属性で取得</td></tr><tr><td align="left"><code>locator()</code></td><td align="left"></td><td align="left">CSS&#x2F;XPathで取得</td></tr></tbody></table></div><p>檳榔さんから教えてもらったのですが、Cypressのベストプラクティスは<code>data-</code>属性を付与することを推奨しています。</p><ul><li><a href="https://docs.cypress.io/guides/references/best-practices#Selecting-Elements">https://docs.cypress.io/guides/references/best-practices#Selecting-Elements</a></li></ul><p>これは本エントリーとは矛盾はしません。というのも、アクセシビリティの要素での要素取得はCypress本体の機能ではなく、外部のライブラリのTesint-Libraryの機能だからです。Cypress本体の機能で実現できるのは<code>getByText()</code>と、上記の表の末尾の2つです。このうち、テキストは変更されうるので非推奨としています。</p><p>アクセシビリティ要素に関して言えば、機能を起動する起点となるものはたいていロールを使います。テキストは結果の取得程度で、たいていは入力値と同じもの、あるいはそこから算出される期待するテキストの取得に使うと思うので問題はないでしょう。そんでもって末尾の2つの中では<code>data-testid</code>の方が優先度が高いのでCypressのドキュメントで書かれていることと矛盾はしないですよね？</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/React/">React</category>
      
      <category domain="https://future-architect.github.io/tags/Cypress/">Cypress</category>
      
      <category domain="https://future-architect.github.io/tags/Playwright/">Playwright</category>
      
      
      <comments>https://future-architect.github.io/articles/20231128a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Unreal Engine5で簡単な色塗りゲームを作ろう！</title>
      <link>https://future-architect.github.io/articles/20231127a/</link>
      <guid>https://future-architect.github.io/articles/20231127a/</guid>
      <pubDate>Sun, 26 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;関根です。&lt;br&gt;Unreal</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>関根です。<br>Unreal Engine5を使って簡単な「色塗りゲーム」を作ってみます。</p><p>次の画像のような Blueprintを作成しながら、キャラクターが歩いた箇所のブロックの色を変える、2秒時間が経過したら元の色に戻す、といった簡易的なものを作成します。</p><p>この記事で作成するもの<br><img src="/images/20231127a/スクリーンショット_(159)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><h2 id="想定読者"><a href="#想定読者" class="headerlink" title="想定読者"></a>想定読者</h2><p>想定している読者は、Unreal Engine5をインストールした直後の初学者及び、Unreal Engine5の具体的な使い方は知らないけれども、何か手を動かしながら作ってみたい人向けに記事を作成しました。</p><p>それでは早速始めていこうと思います。</p><h1 id="新規プロジェクトを立ち上げる。"><a href="#新規プロジェクトを立ち上げる。" class="headerlink" title="新規プロジェクトを立ち上げる。"></a>新規プロジェクトを立ち上げる。</h1><p>それではまず新規プロジェクトを作成しましょう。</p><p>EpicGameLauncherの<code>ライブラリ</code>、<code>Engineバージョン</code>から、Unreal Engine5を起動します。</p><p>今回の記事では5.3.1のバージョンを使用します。<br>(右上の起動ボタンからでもUnreal Engineの起動は行えます。)<br><img src="/images/20231127a/スクリーンショット_(22)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>Engineを起動すると、プロジェクトを設定する画面が出てきます。</p><p>左の<code>ゲーム</code>を選択し、その中の<code>サードパーソン</code>を選択します。</p><p>そして今回は<code>GameProject</code>というフォルダの中に<code>MyProject</code>というプロジェクトを作成します。</p><p>それ以外は変更せずに作成ボタンを押します。</p><img src="/images/20231127a/スクリーンショット_(23)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>しららく待つとこちらのような画面になります。</p><p>今回は<code>サードパーソン</code>というパックを選択したため、サードパーソンゲーム(TPS)で使われる最低限のロジック(キャラクターを動かす、カメラ移動など)はすでにある状態でプロジェクトがスタートしています。</p><p>こちらの画面はデモマップなので、少しこちらでゲームを動かしてみましょう。</p><p><code>画面上部の緑色の再生ボタン</code>もしくは<code>Alt+P</code>でゲームを開始することができます。<br><img src="/images/20231127a/スクリーンショット_(32)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>するとキャラクターが出現し、ゲームをプレイすることができるようになります。</p><p>WASDで移動、Spaceキーでジャンプ、マウスでカメラ操作が行えます。</p><p>ゲームを終了する際は停止ボタン、もしくは<code>esc</code>キーを押すことで終了する事が出来ます。<br>(もしキャラクターの操作が出来ない場合は、ゲーム画面をクリックしてみてください。)<br><img src="/images/20231127a/スクリーンショット_(33)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><h1 id="新しいマップを作成する、光源の設置"><a href="#新しいマップを作成する、光源の設置" class="headerlink" title="新しいマップを作成する、光源の設置"></a>新しいマップを作成する、光源の設置</h1><p>今回はこちらのデモマップは使用せず、一からマップを作成しようと思います。</p><p>画面上部の<code>ファイル</code>から<code>新規レベル</code>を選択します。</p><img src="/images/20231127a/スクリーンショット_(34)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>何もないマップからゲームを作成していくため、<code>空のレベル</code>を選択します。<br><img src="/images/20231127a/スクリーンショット_(35)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>そうすると新規レベル(新しいマップ)が立ち上がります。</p><p>しかし文字通り空のレベルのため、光源も何もありません。そのため画面が真っ黒になってしまっています。</p><img src="/images/20231127a/スクリーンショット_(36)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>そこでまずは光源を設置しようと思います。<code>ウィンドウ</code>の<code>環境ライトミキサー</code>を選択します。</p><img src="/images/20231127a/スクリーンショット_(37)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>画面が出てきたら、<code>スカイライトを作成</code>、<code>大気ライトを作成</code>、<code>Sky Atmosphereを作成</code>、<code>ボリュメトリッククラウドを作成</code>を全てクリックします。<br><img src="/images/20231127a/スクリーンショット_(38)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>そうすると光源の他に空や雲がマップに作成されます。</p><p>細かい設定等も行えますが、今回はこちらで進めていきます。</p><img src="/images/20231127a/スクリーンショット_(39)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>ここまで行えたら、一度レベル(マップ)の保存をします。<code>Ctrl+shift+S</code>ですべてを保存します。</p><p>するとどこに保存するのかを問われるため、今回は<code>コンテンツ</code>直下に右クリックをして新たに<code>MyStuff</code>というフォルダを作成します。<br><img src="/images/20231127a/スクリーンショット_(104)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>作成したフォルダをダブルクリックし、その中に<code>ColoringMap</code>という名前で現在のレベルを保存します。<br><img src="/images/20231127a/スクリーンショット_(105)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><h1 id="ステージの床を作ろう！"><a href="#ステージの床を作ろう！" class="headerlink" title="ステージの床を作ろう！"></a>ステージの床を作ろう！</h1><p>続いて床の配置をしていきます。</p><p>今回はキャラクターが歩いたブロックの色を変えたいので、複数ブロックを使用して床を作成していきます。</p><p><code>ウィンドウ</code>から<code>アクタを配置</code>を選択します。<br><img src="/images/20231127a/スクリーンショット_(106)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>この画面からレベル上にオブジェクトを配置していくことができます。</p><p>この中から<code>キューブ</code>を選択し、ビューポート(画面中央の画面)にドラッグアンドドロップします。</p><img src="/images/20231127a/スクリーンショット_(107)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>すると白いキューブが配置されました。</p><p>今回はこのキューブに「操作キャラクターが上を歩いたら、色を変える」というロジックを入れたいです。</p><p>そのロジックを入れるためには、<code>Blueprint</code>というものを作成していく必要があります。</p><p>配置したキューブのBlueprintを作成するために、右下の<code>詳細</code>にある<code>+追加ボタンの右のアイコン</code>をクリックします。</p><img src="/images/20231127a/スクリーンショット_(108)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p><code>ブループリント名</code>を<code>BP_Cube</code>に変更し、<code>パス</code>を先ほど作成した<code>MyStuff</code>に変更します。<br>ここまで完了したら<code>選択</code>を押します。<br><img src="/images/20231127a/スクリーンショット_(109)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>すると<code>BP_Cube</code>の編集画面が表示されます。<br><img src="/images/20231127a/スクリーンショット_(110)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>すぐにBluePrintを書いていきたいところですが、まずは<code>Collision(コリジョン)</code>と呼ばれる当たり判定をCubeに追加していきます。</p><p>「CubeのこのCollisionにキャラクターが当たったら、色を変える」というロジックを作成するために必要となります。</p><p>それでは画面左の<code>コンポーネント</code>の下にある<code>+追加</code>ボタンをクリックし、検索欄に<code>box</code>と入力します。すると<code>box collision</code>が出てくるので、そちらをクリックします。そしてこのbox Collisionの名前を<code>Trigger</code>に変更します。<code>F2</code>か、右クリックをおして<code>名前変更</code>で名称を変更できます。<br><img src="/images/20231127a/スクリーンショット_(111)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>これでbox collisionがTriggerという名前で生成されました。</p><p>そうしたらこのTriggerの大きさ、位置を調整していきます。</p><p>画面右の<code>詳細</code>画面上部にある<code>トランスフォーム</code>で位置を調整できます。</p><p>今回は</p><ul><li>位置をそれぞれ<code>(x, y, z) = (0, 0, 50)</code></li><li>拡大縮小をそれぞれ<code>(x, y, z) = (1.2, 1.2, 0.2)</code><br>に変更します。</li></ul><p>これでキューブの上部にTriggerが表示されるようになります。<br><img src="/images/20231127a/スクリーンショット_(112)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>ここまで完了したら画面上部のタブから一度ColoringMapに戻ります。</p><p>そうすると先ほど作成したTriggerが、先ほど配置したキューブに反映されているのが確認できます。<br><img src="/images/20231127a/スクリーンショット_(113)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>そうしましたら、こちらのキューブの位置を調整し、複製をして床を作成していきます。<br><code>詳細</code>の<code>トランスフォーム</code>を全て0に設定します。<br><img src="/images/20231127a/スクリーンショット_(114)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>そしたらこちらを複製していきます。<code>Alt</code>を押しながら、ギズモ(3方向に延びている矢印)をドラッグします。<br>(ギズモの中央ではなく、矢印を選択するとやりやすいです。)</p><p>これでキューブを2つに複製することができました。<br><img src="/images/20231127a/スクリーンショット_(115)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>同様の作業を繰り返して床を作成します。</p><p>一つずつ複製していると大変なため、<code>Controll</code>を押しながら画面上のキューブを複数選択した状態で、<code>Alt</code>キーを使って同時に複数複製していきます。<br>数が多くなったら、画面右上の<code>アウトライナー</code>で<code>shift</code>を使って複数選択すると効率的に行えます。</p><img src="/images/20231127a/スクリーンショット_(116)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>これで床は完成しました。</p><p>しかしゲームスタート地点を設定していません。そのためこのまま再生ボタンをおすとキャラクターがそのまま落下してしまいます。<code>アクタを配置</code>から<code>Player Start</code>を選択しビューポート(中央の画面)にドラッグアンドドロップします。</p><img src="/images/20231127a/スクリーンショット_(117)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>そして<code>詳細</code>の<code>トランスフォーム</code>を変更します。<br>位置を<code>(x, y, z) = (0, 0, 150)</code><br>回転を<code>(x, y, z) = (0, 0, -135)</code><br>にします。<br><img src="/images/20231127a/スクリーンショット_(118)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>ここまできたら<code>Alt+P(もしくは上部の再生ボタン)</code>を押して、ゲームを再生します。設置した<code>Player Start</code>の位置、向きにキャラクターが出現し、WASDで移動、Spaceでジャンプ、マウスでカメラ操作が行えるようになります。<br><img src="/images/20231127a/スクリーンショット_(119)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><h1 id="色が変わる床に修正しよう！-Blueprintの作成"><a href="#色が変わる床に修正しよう！-Blueprintの作成" class="headerlink" title="色が変わる床に修正しよう！(Blueprintの作成)"></a>色が変わる床に修正しよう！(Blueprintの作成)</h1><p>それでは実際に<code>Trigger</code>に触れたら、キューブのマテリアル(色)を変えるようなBlueprintを組んでみましょう。<br><code>BP_Cube</code>を再度開きます。</p><p>BP_Cubeを既に閉じてしまっている場合は</p><ul><li><code>Ctrl+Space</code>でコンテンツドロワーを開き、<code>MyStruff</code>から<code>BP_Cube</code>を選択</li><li>ビューポートの任意のキューブを選択して、<code>Ctrl+E</code><br>のどちらかの手順で開く事ができます。<img src="/images/20231127a/スクリーンショット_(120)_R.jpg" alt="" width="1200" height="675" loading="lazy"></li></ul><p>こちらのキューブにはまだ何もマテリアルを設定していないため、マテリアルを設定しましょう。<br><code>詳細</code>の<code>マテリアル</code>から<code>M_Basic_Floor</code>を選択します。<br>(マテリアルはどれでも良いので好きな物を選んでください。)<br><img src="/images/20231127a/スクリーンショット_(141)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>するとキューブにマテリアルが適用されます。<br><img src="/images/20231127a/スクリーンショット_(142)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>ColoringMapに戻ってみると、すべてのキューブにマテリアルが適用されていることがわかります。<br><img src="/images/20231127a/スクリーンショット_(143)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>それでは再度<code>BP_Cube</code>に戻ります。<br>画面上部の<code>イベントグラフ</code>を選択します。<br><img src="/images/20231127a/スクリーンショット_(144)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>こちらの画面でBlueprintを作成していきます。<br><img src="/images/20231127a/スクリーンショット_(145)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>今回はキャラクターがCubeの上を通過したら、マテリアルを変更したいので、<code>Event ActorBeginOverlap</code>を使用します。(overlapは物体同氏が重なったときに発火するものです。詳しくは<a href="https://docs.unrealengine.com/4.27/ja/InteractiveExperiences/Physics/Collision/Overview/">overlapに関する公式ドキュメント</a>を参照ください)</p><p><code>Event ActorBeginOverlap</code>の右矢印をドラッグします。<br><img src="/images/20231127a/スクリーンショット_(146)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>するとどのBlueprintを<code>Event ActorBeginOverlap</code>と接続したいのかを聞かれます。</p><p>今回はoverlapしたらマテリアルを変更するようにしたいので<code>Set Material(StaticMeshComponent)</code>を検索し、クリックします。検索しても出てこない場合は左上の<code>コンポーネント</code>で<code>Static Mesh Component(StaticMeshComponent)</code>をクリックするか、検索画面の右上にある<code>状況に合わせた表示</code>のチェックを外します。</p><div class="note warn" style="background: #fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>検索すると<code>Set Material(Trigger)</code>などが出てくることもあります。<br>しかし今回overlapした後に変更したいのはキューブ自体のマテリアルです。<br>そのため、こちらは選択せずに<code>set Material(StaticMeshComponent)</code>を選択するようにしてください。</p></div><img src="/images/20231127a/スクリーンショット_(147)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>配置をするとこちらのようになります。<br>ドラッグするとBlueprintの位置を変更できるので見やすい位置に配置をしてください。<br><img src="/images/20231127a/スクリーンショット_(148)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p><code>Set Material</code>を設置したら、どのマテリアルに変更したいのかを決める必要があります。<br><code>Set Material</code>内の<code>Material</code>から今回は<code>M_Ground_Grass</code>を選択します。</p><p>これで</p><ol><li>キャラクターがCubeのTriggerと重なったら(Event ActorBeginOverlap)</li><li><code>Static Mesh Component</code>のマテリアルを<code>M_Ground_Grass</code>に変更する(Set Material)</li></ol><p>というBlueprintを作成することができました！<br><img src="/images/20231127a/スクリーンショット_(149)_R.jpg" alt="スクリーンショット_(149)_R.jpg" width="1200" height="675" loading="lazy"></p><p>ここまで出来たら<code>再生ボタンを押す</code>もしくは<code>Alt+P</code>でゲームを再生してみましょう。<br>キャラクターが歩いた所のマテリアルが変わっていくようになっていることを確認します。<br><img src="/images/20231127a/スクリーンショット_(150)_R.jpg" alt="スクリーンショット_(150)_R.jpg" width="1200" height="675" loading="lazy"></p><h1 id="2秒経過したら元の色に戻そう"><a href="#2秒経過したら元の色に戻そう" class="headerlink" title="2秒経過したら元の色に戻そう"></a>2秒経過したら元の色に戻そう</h1><p>練習として2秒経過したらマテリアルを元に戻す、というBlueprintも作成してみましょう。</p><p>今回はoverlapが終了したら、つまりキャラクターがキューブの上から離れたら、元のマテリアルに戻す、といったBlueprintを作成しようと思います。<br>そのためには新たにイベントを追加する必要があります。</p><p>画面左下の<code>マイブループリント</code>の<code>関数</code>にある<code>オーバーライド</code>から<code>ActorEndOverlap</code>を選択します。<br><img src="/images/20231127a/スクリーンショット_(151)_R.jpg" alt="スクリーンショット_(151)_R.jpg" width="1200" height="675" loading="lazy"></p><p>すると画面に<code>Event ActorEndOverlap</code>が追加されます。<br><img src="/images/20231127a/スクリーンショット_(152)_R.jpg" alt="スクリーンショット_(152)_R.jpg" width="1200" height="675" loading="lazy"></p><p>そうしたら<code>Event ActorEndOverlap</code>の右矢印をドラッグします。<br>前述のとおり、この<code>Event ActorEndOverlap</code>が呼び出されるのはキャラクターがキューブの上から離れたとき、になります。<br>離れてから2秒後にマテリアルを変更したいため、任意秒処理を遅らせる事ができる<code>Delay</code>を選択します。<br><img src="/images/20231127a/スクリーンショット_(153)_R.jpg" alt="スクリーンショット_(153)_R.jpg" width="1200" height="675" loading="lazy"></p><p><code>Delay</code>の設置が出来たら、<code>Duration</code>を2.0に設定し、2秒間遅らせるようにします。<br><img src="/images/20231127a/スクリーンショット_(157)_R.jpg" alt="スクリーンショット_(157)_R.jpg" width="1200" height="675" loading="lazy"></p><p>その後の処理は先ほどと同じになります。<br><code>Delay</code>の右矢印をドラッグし、<code>Set Material(Static Mesh Component)</code>を選択します。<br>今回の<code>Material</code>は<a href="#%E8%89%B2%E3%81%8C%E5%A4%89%E3%82%8F%E3%82%8B%E5%BA%8A%E3%81%AB%E4%BF%AE%E6%AD%A3%E3%81%97%E3%82%88%E3%81%86%EF%BC%81(Blueprint)">こちら</a>で設定した<code>M_Basic_Floor</code>を選択します。<br><img src="/images/20231127a/スクリーンショット_(158)_R.jpg" alt="スクリーンショット_(158)_R.jpg" width="1200" height="675" loading="lazy"></p><p>これで今回作成するBlueprintは以上になります。<br><code>Alt+P</code>でゲームを再生すると、歩いた箇所が2秒後に元の色に戻るようになりました。<br>これで簡易的な色塗りゲームが完成しました。<br><img src="/images/20231127a/スクリーンショット_(159)_R_2.jpg" alt="スクリーンショット_(159)_R.jpg" width="1200" height="675" loading="lazy"></p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>この記事では以下の事を行いました。</p><ul><li>プロジェクトの立ち上げ方</li><li>レベルをどのように作るのか</li><li>空などの設置方法</li><li>アクタ(オブジェクト)の配置方法、位置の変え方など</li><li>Blueprintを使った色塗りゲームのロジック開発</li></ul><p>かなり初歩的な所ではありますが、UnrealEngineの基本的な所に触れることができたのではないかと思います。</p><p>ここから自分で拡張してみても面白いかもしれません。</p><ul><li>ステージが狭いのでもう少し広げてみる</li><li>ジャンプしたときは別のマテリアルに変える</li><li>色を変えるではなく、歩いたところのブロックが落下するようにしてみる</li></ul><p>今回使用したノード(<code>Delay</code>や<code>Set Material</code>の事)は2つだけです。ノードはまだまだ沢山あるのでぜひ調べてみてください。</p><p>最後まで読んでいただきありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85/">初心者</category>
      
      <category domain="https://future-architect.github.io/tags/UnrealEngine5/">UnrealEngine5</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B2%E3%83%BC%E3%83%A0%E5%88%B6%E4%BD%9C/">ゲーム制作</category>
      
      <category domain="https://future-architect.github.io/tags/UnrealEngine/">UnrealEngine</category>
      
      
      <comments>https://future-architect.github.io/articles/20231127a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>学習のSHA 〜ハッシュ関数の基本と安全性について学ぶ〜</title>
      <link>https://future-architect.github.io/articles/20231124a/</link>
      <guid>https://future-architect.github.io/articles/20231124a/</guid>
      <pubDate>Thu, 23 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231124a/top.jpg&quot; alt=&quot;&quot; width=&quot;800&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231124a/top.jpg" alt="" width="800" height="800"><p>こんにちは。ペンギンになりたいエンジニアの島ノ江です。</p><p>普段はCSIGというサイバーセキュリティのグループに所属していて、「<a href="https://vuls.biz/">FutureVuls</a>」という脆弱性管理サービスの開発・営業などを行なっています。</p><p><a href="/articles/20231030a/">秋のブログ週間</a>の連載の17本目、「学習のSHA」というタイトルです。</p><p>暗号技術について学んでいると「<strong>ハッシュ値</strong>」という言葉に出会いますが、あまり詳細を追ったことはありませんでした。そこで今回はハッシュ関数およびその代表としてSHAに関する歴史や種類についてまとめます。念のため注意しますが、本記事と某アニメとは何も関係ありません。本当に。</p><p>本記事は次の2つを一次情報として参照しています。</p><ul><li>光成滋生　（2021）. 暗号と認証のしくみと理論がこれ1冊でしっかりわかる教科書　技術評論社（<a href="https://amzn.asia/d/2z81ZzR">Amazon</a>）</li><li>NIST の 「Hash Functions」 プロジェクト（<a href="https://csrc.nist.gov/projects/hash-functions">公式webページ</a>）</li></ul><p>せっかくなので、巻末に読書感想文として簡単に書籍の紹介もします。</p><h2 id="寄稿の背景"><a href="#寄稿の背景" class="headerlink" title="寄稿の背景"></a>寄稿の背景</h2><p>本記事を書こうと思ったのは、ふと暗号技術の安全性に思いを馳せたことからでした。</p><p>11月2日(木)に斉藤さんが「<a href="/articles/20231102a/">初心者が暗号の基礎と歴史を勉強して見た</a>」というタイトルで寄稿されています。これはシーザー暗号などのいわゆる古典暗号から公開鍵暗号などへの歴史を辿っている記事です。</p><p>このように暗号技術が変化してきたのには、技術などの発展に伴い暗号技術の安全性が変わっているからです。参考書籍にも「暗号は新しい安全な方式を提案する人と、それを解読しようとする人の両輪でよりよいものになっている」と書かれています。</p><p>では、「暗号技術のセキュリティ的な安全性とは？」という興味が湧くので、暗号技術の安全性に関する理解を深めよう、という流れでした。</p><h2 id="ハッシュ関数とは"><a href="#ハッシュ関数とは" class="headerlink" title="ハッシュ関数とは"></a>ハッシュ関数とは</h2><p><strong>ハッシュ関数</strong>とは「文章や画像・動画などの任意のデータから、予め決められた範囲内の値を計算する関数」です。ハッシュ関数は決定的アルゴリズムで、同じ入力値に対して常に同じ値を返します。この入力値をメッセージ、出力のことをハッシュ値、ダイジェストなどとも言います。</p><p>ハッシュ関数は様々な場面で利用されていて、具体的には次のようなものがあります。</p><ul><li>連想配列（JavaでのHashMapなど）</li><li>データベース検索(ハッシュインデックスによる完全一致検索など）</li><li>デジタル署名（送信者の認証など）</li><li>ブロックチェーン技術（データの整合性の確認など）</li></ul><p>このハッシュ関数の中で代表的なのが、本稿のタイトルにある「<strong>SHA</strong>」(Secure Hash Algorithm)です。これはNISTにより標準化されているハッシュアルゴリズムで、現代で広く用いられています。「エス・エイチ・エー」「シャー」と読まれていて、私は読みやすさから特にSHA256などは「シャー・ニゴロ」と読んでいます。</p><p>ハッシュ関数は現代で広く利用されている技術ですが、本記事では特に「<strong>暗号学的ハッシュ関数</strong>」について述べます。<br>暗号学的ハッシュ関数とは、さらに以下のような性質を持つハッシュ関数を指します。</p><h3 id="出力サイズが一定"><a href="#出力サイズが一定" class="headerlink" title="出力サイズが一定"></a>出力サイズが一定</h3><p>入力が1バイトであろうと4ギガバイトであろうと、出力されるサイズは全く同じになる性質があります。</p><p>入力データのサイズによらずハッシュ値のサイズが同じだと、処理の効率性や互換性が向上します。</p><p>また、ハッシュ値のサイズが同じでないと、出力値から入力値の情報が得られてしまい、暗号分析にも悪用されかねません。</p><img src="/images/20231124a/Hash_1.png" alt="Hash_1.png" width="865" height="260" loading="lazy"><h3 id="一方向性（原像計算困難性）"><a href="#一方向性（原像計算困難性）" class="headerlink" title="一方向性（原像計算困難性）"></a>一方向性（原像計算困難性）</h3><p>入力値からハッシュ値を求めることは簡単だが、その逆が難しい、という性質です。</p><p>ハッシュ値は分かるが元のメッセージが分からないという性質から、パスワードを比較的安全に保護することなどに利用されています。</p><img src="/images/20231124a/Hash_2.png" alt="Hash_2.png" width="868" height="188" loading="lazy"><h3 id="衝突困難性"><a href="#衝突困難性" class="headerlink" title="衝突困難性"></a>衝突困難性</h3><p>異なる2個の入力値から同じハッシュ値を得ること（衝突）が難しい（無視できる程度の確率である）、という性質です。</p><p>この性質を利用して、データを送る際にその入力値から計算したハッシュ値を併せて送ることで、データが改竄されていないかを確認することができます。</p><p>これは、入力データが1ビットでも異なると、全く異なるハッシュ値が出力されるためです。</p><img src="/images/20231124a/Hash_3.png" alt="Hash_3.png" width="860" height="265" loading="lazy"><p>また、衝突困難性には「第二原像計算困難性」という性質があります。</p><p>これは、あるハッシュ値が与えられた時に、それと同じハッシュ値になる別のデータを見つけるのが難しい、という性質です。</p><h4 id="小噺"><a href="#小噺" class="headerlink" title="小噺"></a>小噺</h4><p>その具体例として、学生時代の確率論の授業で、こんな確率を計算したことはあるでしょうか。</p><blockquote><p>(1) N人が所属するクラスの中で、自分と同じ誕生日の人がいる確率<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.209ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2744.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(675,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1078.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1467.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2355.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>は？<br>(2) N人が所属するクラスの中で、誕生日が同じペアが存在する確率<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.209ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2744.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(675,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1078.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1467.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2355.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>は？</p></blockquote><p>(1)は自分と誕生日が同じ人を探すので第二原像を求める例、(2)はクラスの異なる2人で誕生日が一致するかを探すので衝突を見つける例になります。</p><p>計算自体は比較的単純なので、秋の夜長に学生時代に思いを馳せてやってみましょう。</p><ul><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="21.932ex" height="2.79ex" role="img" focusable="false" viewBox="0 -872.7 9693.8 1233.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(675,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1078.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1467.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2355.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3022.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4078.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4800.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(5800.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mfrac" transform="translate(6189.6,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path></g><rect width="1260.7" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(7690.2,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1666,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.439ex;" xmlns="http://www.w3.org/2000/svg" width="25.655ex" height="3.476ex" role="img" focusable="false" viewBox="0 -900.3 11339.4 1536.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(675,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1078.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1467.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2355.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3022.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4078.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4800.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5800.6,0)"><g data-mml-node="mrow" transform="translate(2140.8,394) scale(0.707)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(1500,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-459.4) scale(0.707)"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1533,393.1) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g><g data-mml-node="mo" transform="translate(2210.9,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(2988.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(3377.9,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(4877.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5655.9,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(6543.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6932.9,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g></g><rect width="5298.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></li></ul><p>です。<a href="https://ja.wikipedia.org/wiki/%E8%AA%95%E7%94%9F%E6%97%A5%E3%81%AE%E3%83%91%E3%83%A9%E3%83%89%E3%83%83%E3%82%AF%E3%82%B9">wikipedia</a>にちょうどいいグラフがあったので示します。</p><img src="/images/20231124a/image.png" alt="image" width="1200" height="773" loading="lazy"><p>おおよそ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.611ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4690.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(675,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1078.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1467.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2467.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3134.3,0)"><path data-c="223C" d="M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"></path></g><g data-mml-node="mn" transform="translate(4190.1,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></svg></mjx-container>%に対して、 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.742ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5190.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(675,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1078.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1467.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2467.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3134.3,0)"><path data-c="223C" d="M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"></path></g><g data-mml-node="mn" transform="translate(4190.1,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>%となります。</p><p>自分と同じ誕生日の人を探すと大変なのに、同じ誕生日になるペアが見つかるのはそれほど不思議ではない、というやや直感的でない結果が得られます（「誕生日のパラドックス」というそうです）。</p><p>このように、一般的には第二原像を見つけることより衝突を見つけることの方がずっと簡単です。</p><h2 id="暗号技術の標準化を目指す組織とハッシュアルゴリズムの種類"><a href="#暗号技術の標準化を目指す組織とハッシュアルゴリズムの種類" class="headerlink" title="暗号技術の標準化を目指す組織とハッシュアルゴリズムの種類"></a>暗号技術の標準化を目指す組織とハッシュアルゴリズムの種類</h2><p>このような暗号技術に関して、その安全性を監視・評価している機関が国内外にあります。</p><p>本資料で参考にしている <a href="https://www.nist.gov/">NIST</a>（National Institute of Standards and Technology：アメリカ国立標準技術研究所） は、ITL(Information Technology Laboratory：情報技術研究所) という研究部門で、このセキュリティに関する標準化をおこなっています。</p><p>日本では、<a href="https://www.cryptrec.go.jp/">CRYPTREC</a>（CRYPTography Research and Evaluation Committees：暗号技術評価委員会） という機関が、国内の電子政府推奨暗号の安全性を評価・監視しています。</p><p>NISTは標準のハッシュ関数として、 <a href="https://csrc.nist.gov/pubs/fips/180-4/upd1/final">FIPS 180-4</a> と <a href="https://csrc.nist.gov/pubs/fips/202/final">FIPS 202</a> を公開しています。日本国内でも、<a href="https://www.cryptrec.go.jp/list.html">電子政府推奨暗号リスト</a>としてこれらの利用を公開しています。</p><p>FIPS 180-4では、以下の7つが推奨されるハッシュ関数として規定されました。なお、2011年にはSHA-1の使用を非推奨にする発表を出し、2022年12月にはSHA-1を廃止する発表が出ています。（<a href="https://csrc.nist.gov/news/2022/nist-transitioning-away-from-sha-1-for-all-apps">参考</a>）</p><ul><li>SHA-1</li><li>SHA-2（SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, SHA-512/256)</li></ul><p>SHAの後ろについている数字がハッシュ関数の出力ビット数です。SHA-256は長さが256ビットのハッシュ値を返す、という形です。これらは要求されるセキュリティレベルによって使い分けられます。</p><p>FIPS-202では、SHA-2に加えてSHA-3が追加されました。SHAKEはSHA3を拡張したハッシュ関数で、出力のハッシュ値をセキュリティレベルに応じて変更することができます。</p><ul><li>固定長を返すハッシュ関数： SHA3-224, SHA3-256, SHA3-384, SHA3-512</li><li>可変長を返すハッシュ関数： SHAKE128, SHAKE256</li></ul><h2 id="ハッシュ関数の歴史"><a href="#ハッシュ関数の歴史" class="headerlink" title="ハッシュ関数の歴史"></a>ハッシュ関数の歴史</h2><p>ここでは主なハッシュ関数の歴史に触れます。画像は参考図書にも掲載されているものです。（<a href="https://www.slideshare.net/herumi/6-250590292">引用元</a>）</p><img src="/images/20231124a/hashFunction_history.png" alt="hashFunction_history.png" width="937" height="386" loading="lazy"><ul><li>1992年にMD5が登場しましたが、暗号学的ハッシュ関数ではなかったこともあり、12年後に衝突困難性が破られてしまいました。メッセージから固定値(128bit)のハッシュ値を生成します。この関数は高速で単純だったことから、メッセージの整合性確認などで広く用いられたようです。</li><li>SHA-1は1995年に標準化され、理論的な攻撃可能性の提案に10年かかり、2017年には衝突困難性が破られました。先述の通り、2011年にはSHA-1の使用を非推奨にする発表を出し、2022年12月にはSHA-1を廃止する流れになっています。</li><li>SHA-2は2001年に標準化され、その中のSHA-256は現在も推奨暗号として広く利用されています。</li><li>SHA-3は、SHA-1の攻撃突破が危惧された頃に、これまでとは異なる構造のアルゴリズムが必要になるだろうという危惧から考えられたハッシュ関数群です。しかし幸いなことにSHA-2の衝突困難性がなかなか破られておらず、あまり積極的には利用されていません。</li></ul><p>SHA-2, SHA-3の理論的な側面まで深掘りをしたかったのですが、<del>それを書くには余白が足りず</del> 細かくて時間が足りないので、ここでは割愛します。気になる方は、参考書籍やNISTのFIPSの資料、および参考書籍の巻末に掲載されている資料を参照してください。 </p><h2 id="暗号技術の安全性とは"><a href="#暗号技術の安全性とは" class="headerlink" title="暗号技術の安全性とは"></a>暗号技術の安全性とは</h2><p>暗号技術をせっかく使うなら、理想的には「どうやっても絶対に破られない暗号」を使いたいです。しかし、小さな秘密鍵を使って大きな平文を暗号化しようとする以上、理論的にこのような理想の暗号技術を作ることはできません。そこで、「理想の安全性はないけれども現実的には破れないだろう」という暗号を考え、それを測る指標として「<strong>セキュリティパラメータ</strong>」というもので計算コストを考えます。</p><p>例えば、共通鍵暗号では鍵長が N ビットであればその種類は <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.74ex" height="1.914ex" role="img" focusable="false" viewBox="0 -846 1210.9 846"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></g></svg></mjx-container> 通りあるので、ブルートフォース法（しらみつぶしにパターンを試す）での計算量が <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.226ex" height="2.48ex" role="img" focusable="false" viewBox="0 -846 2751.9 1096"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g><g data-mml-node="mo" transform="translate(2362.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> となります。例えば鍵長が 128 ビットであれば、これはおおよそ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.947ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 3512.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(1722.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container> の計算量で、これはスーパーコンピュータでも数兆年はかかる程度の計算量です。そのため、これは現実的には安全だろうと考えられます。</p><p>ハッシュ関数では、衝突困難性を破るのに必要なコストはおおよそ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.826ex" height="2.587ex" role="img" focusable="false" viewBox="0 -893.3 3459 1143.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(888,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(1388,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3070,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> になっています。SHA-256は256ビットのハッシュ値を返すため、128ビットセキュリティになります。参考図書によれば「現在は128ビットセキュリティなら数十年は安全だろう」と考えられているそうです。それもあり、SHA-256は十分なセキュリティ要件を持ちつつ使いやすいということから広く利用されているようです。</p><p>SHA-512の方が安全なのに、なぜSHA-256の方が広く利用されているのか？という点については、次のような背景があるようです。</p><ul><li>SHA-512の方がより安全ではあるが、SHA-256でも現時点では十分なセキュリティレベルがあり、かつその方がリソース使用量が小さくて済むため</li><li>広く利用されており、他のシステムやプロトコルとの互換性があるため</li><li>暗号技術が広く利用されているのはそれだけ検証が多くなされていることでもあり、信頼感があるため</li></ul><p>なお参考書籍によると、SHA-256およびSHA-512での内部構造を追っていくと、64ビットCPUで大きなデータを扱う場合には内部処理過程の関係でSHA-256よりSHA-512の方が高速に計算できるようです。これは知らなかったので、内部構造を知って驚きました。</p><p>なお、このような安全性というのはあくまで「現在の技術・攻撃手法の範囲で」安全というものであり、未来永劫安全というわけではありません。例えば、昨今発展している量子計算機を用いるとSHA-2の攻撃可能性が進展している研究もあります。また、よりよい攻撃手法が発見されて、セキュリティパラメータが下がる可能性もあります。ある日突然攻撃手法が発展し、人類は思い出した…ということになる可能性もあるので、注意は必要です。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本稿では暗号学的ハッシュ関数について整理し、その種類および歴史を追いました。自分はSHA-256には馴染みがありましたが、SHA3についてはあまり知らず、本稿を書く際に色々と学ぶことができて良い機会となりました。</p><p>あまり実装的な内容は書かないとのことなので、今回はコードについても記載していません。例えばGo言語では、SHA-256などは <a href="https://pkg.go.dev/crypto">crypto</a> パッケージに含まれているので、ご参照ください。</p><p>詳細を書ききれていないところも多くあるため、引用資料先のページなども参考にしていただけると幸いです。それでは快適なハッシュライフ(?)をお送りください。</p><h2 id="終わりに書籍の紹介"><a href="#終わりに書籍の紹介" class="headerlink" title="終わりに書籍の紹介"></a>終わりに書籍の紹介</h2><p>本書は広く「暗号と認証」をテーマに解説している参考書です。全部で9章で構成されており、各章がいくつかのセクションごとに分かれていてまとめもあるため、テンポ良く読み進めることができます。</p><p>第3章から「共通鍵暗号」「公開鍵暗号」「認証」の解説があり、最終章には「高機能な暗号技術」と題してゼロ知識証明や量子コンピュータなどの解説がされます。</p><p>個人的に思う本書の大きな特徴は、数式の解説も交えて暗号技術を解説するという点にあると思います。離散対数問題や楕円曲線暗号といった、高度な暗号技術を学ぶために必要な概念の基本も説明されています。暗号技術を学ぶにはどうしても高度な数学が絡みますが、本書はその部分をなるべく平易に解説していて、暗号技術を学習するハードルを下げている点が高評価です。</p><p>ただし、その分読み手を選んでしまう本かなという印象です。理系出身の方や、基本情報技術者試験などを経てより詳細に暗号技術について知りたい、という意欲のある方には良いかもしれません。巻末も充実しているので、本書を起点にさらに深く学習していくのに役立つ本だと思います。</p><p>本記事はこれで終わります。最後まで読んでいただきありがとうございました。</p><p>アイキャッチ画像はBing Image Creatorを利用しました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Security/">Security</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E9%96%A2%E6%95%B0/">ハッシュ関数</category>
      
      
      <comments>https://future-architect.github.io/articles/20231124a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「リーダブルコード」を読んだ感想</title>
      <link>https://future-architect.github.io/articles/20231122a/</link>
      <guid>https://future-architect.github.io/articles/20231122a/</guid>
      <pubDate>Tue, 21 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231122a/81+3DpjuMdL._SL1500_.jpg&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;709&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231122a/81+3DpjuMdL._SL1500_.jpg" alt="" width="500" height="709"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、2022年4月新卒入社、流通製造グループ所属の藤戸四恩です。<br><a href="/articles/20231030a/">秋のブログ週間2023</a>の16本目は「リーダブルコード」を読んでみた感想です。</p><p>最近ソースコードを書くことが多く、可読性の高いコードを書くことを意識していますが、いまいち正解がわからず、積読してあった「リーダブルコード」を読んでみたので、印象に残った箇所を紹介したいと思います。</p><h1 id="本書について"><a href="#本書について" class="headerlink" title="本書について"></a>本書について</h1><blockquote><p>美しいコードを見ると感動する。優れたコードは見た瞬間に何をしているかが伝わってくる。そういうコードは使うのが楽しいし、自分のコードもそうあるべきだと思わせてくれる。本書の目的は、君のコードを良くすることだ。（本書「はじめに」より）<br>コードは理解しやすくなければならない。本書はこの原則を日々のコーディングの様々な場面に当てはめる方法を紹介します。名前の付け方、コメントの書き方など表面上の改善について。コードを動かすための制御フロー、論理式、変数などループとロジックについて。またコードを再構成するための方法。さらにテストの書き方などについて、楽しいイラストと共に説明しています。日本語版ではRubyやgroongaのコミッタとしても著名な須藤功平氏による解説を収録。<br><a href="https://www.oreilly.co.jp/books/9784873115658/">引用元 - O’REILLY</a></p></blockquote><p>コードを書く上で命名の考え方や適切なコメントの書き方などが説明されており、総ページ数も200ページ少しと、ちょうどよい分量です。下記の通り15章から構成されています。</p><p>第1章　理解しやすいコード<br>第2章　名前に情報を詰め込む<br>第3章　誤解されない名前<br>第4章　美しさ<br>第5章　コメントすべきことを知る<br>第6章　コメントは正確で簡潔に<br>第7章　制御フローを読みやすくする<br>第8章　巨大な式を分割する<br>第9章　変数と読みやすさ<br>第10章 無関係な下位問題を抽出する<br>第11章 一度に１つのことを<br>第12章 コードに思いを込める<br>第13章 短いコードを書く<br>第14章 テストと読みやすさ<br>第15章 「分&#x2F;時間カウンタ」を設計・実装する</p><h1 id="印象に残った箇所"><a href="#印象に残った箇所" class="headerlink" title="印象に残った箇所"></a>印象に残った箇所</h1><h2 id="不要な単語を捨てる"><a href="#不要な単語を捨てる" class="headerlink" title="不要な単語を捨てる"></a>不要な単語を捨てる</h2><blockquote><p>名前に含まれる単語を削除しても情報が全く損なわれないこともある。例えば、ConvertToString()を短くしてToString()にしても、必要な情報は何も損なわれない。同様にDoServeLoop()をServeLoop()に変えても明確さは同じだ。</p></blockquote><p>個人的には、型変換のメソッドを作成する際に、メソッド名にConvertをつけることが多かったため、命名するときに不要な情報を削除することも必要だと思いました。</p><h2 id="一貫性のある簡潔な改行位置"><a href="#一貫性のある簡潔な改行位置" class="headerlink" title="一貫性のある簡潔な改行位置"></a>一貫性のある簡潔な改行位置</h2><p>以下は、Javaで書かれた任意の速度のネットワークに接続したときに、プログラムがどのように動くかを評価するコードのサンプルです。 また横幅80文字までというコーディング規約があるという想定です。<br>※書籍P.44参考</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PerformanceTester</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">TcpConnectionSimulator</span> <span class="variable">wifi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TcpConnectionSimulator</span>(</span><br><span class="line">        <span class="number">500</span>, <span class="comment">//接続速度(Kbps)</span></span><br><span class="line">        <span class="number">80</span>,  <span class="comment">//平均遅延時間(ms)</span></span><br><span class="line">        <span class="number">200</span>,  <span class="comment">//遅延時間(ms)</span></span><br><span class="line">        <span class="number">1</span> <span class="comment">//パケットロス率(%)</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">TcpConnectionSimulator</span> <span class="variable">t3_fiber</span> <span class="operator">=</span> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TcpConnectionSimulator</span>(</span><br><span class="line">            <span class="number">4500</span>, <span class="comment">//接続速度(Kbps)</span></span><br><span class="line">            <span class="number">10</span>,  <span class="comment">//平均遅延時間(ms)</span></span><br><span class="line">            <span class="number">0</span>,  <span class="comment">//遅延時間(ms)</span></span><br><span class="line">            <span class="number">0</span> <span class="comment">//パケットロス率(%)</span></span><br><span class="line">        );</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">TcpConnectionSimulator</span> <span class="variable">cell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TcpConnectionSimulator</span>(</span><br><span class="line">        <span class="number">100</span>, <span class="comment">//接続速度(Kbps)</span></span><br><span class="line">        <span class="number">400</span>,  <span class="comment">//平均遅延時間(ms)</span></span><br><span class="line">        <span class="number">250</span>,  <span class="comment">//遅延時間(ms)</span></span><br><span class="line">        <span class="number">5</span> <span class="comment">//パケットロス率(%)</span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上記の実装だと、コーデンディング規約により、余計な改行が入っているかつ同じコメントがくり返されているため、下記のようにコメントを最上部に移動して、仮引数を一行で書くように書籍では提案されています。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PerformanceTester</span> &#123;</span><br><span class="line">    <span class="comment">// TcpConnectionSimulator(throughput, latency, jitter, packet_loss)</span></span><br><span class="line">    <span class="comment">//                          [kbps]      [ms]    [ms]    [percent]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">TcpConnectionSimulator</span> <span class="variable">wifi</span> <span class="operator">=</span> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TcpConnectionSimulator</span>(<span class="number">500</span>, <span class="number">80</span>, <span class="number">200</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">TcpConnectionSimulator</span> <span class="variable">t3_fiber</span> <span class="operator">=</span> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TcpConnectionSimulator</span>(<span class="number">4500</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">TcpConnectionSimulator</span> <span class="variable">cell</span> <span class="operator">=</span></span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">TcpConnectionSimulator</span>(<span class="number">100</span>, <span class="number">400</span>, <span class="number">250</span>, <span class="number">5</span>);</span><br><span class="line">&#125;;   </span><br></pre></td></tr></table></figure><p>個人的には、見やすくなったと感じたが、あまり見ないコメントの記載方法(自分が知らないだけかもしれないですが)だっため、</p><p>同じコメントが続くようなときは上記を参考にコメントを記載したいと思いました。</p><h2 id="制御フローを読みやすくする"><a href="#制御フローを読みやすくする" class="headerlink" title="制御フローを読みやすくする"></a>制御フローを読みやすくする</h2><p>下記の二つの実装はどちらがよみやすいでしょうか？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// No.1</span></span><br><span class="line"><span class="keyword">if</span> (length &gt;= <span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// No.2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">10</span> 　&lt;= length)</span><br></pre></td></tr></table></figure><p>書籍では、No.1の方が読みやすいと答える人が多いのではないかと言及されてます。<br>私も最初に読んだ際に直感的にNo.1の方が読みやすいなと感じました。<br>あくまで指針ですが、書籍では下記のように述べられていました。</p><blockquote><p>条件式の左側には、「調査対象」の式。変化する。<br>条件式の右側には、「比較対象」の式。あまり変化しない。</p></blockquote><p>実際に自分が実装する際には、無意識で上記のように実装していましたが、今後条件式を書く際には、上記のことを意識して実装しようと思いました。</p><h2 id="ド・モルガンの法則を使う"><a href="#ド・モルガンの法則を使う" class="headerlink" title="ド・モルガンの法則を使う"></a>ド・モルガンの法則を使う</h2><blockquote><p>論理式を等価な式に置き換える方法がある。</p></blockquote><p>先日レビュアーから受けた指摘事項で、ド・モルガンの法則を使って修正したことがありました。</p><p>具体的には、型がbooleanである変数 <code>isXXX</code>がfalseかつと<code>isYYY</code>がfalseの時にのみ特定の処理を行いたく、下記のように実装していました。</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isXXX <span class="type">bool</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> isYYY <span class="type">bool</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> !(isXXX &amp;&amp; isYYY) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ド・モルガンの法則を使って、下の実装ように修正しました。</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isXXX <span class="type">bool</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> isYYY <span class="type">bool</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> !isXXX || !isYYY &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般的には下の実装のほうが理解しやすいと言われています。</p><p>なぜ下の実装の方がわかりやすくなるのか考えてみました。</p><p>上の実装は、「isXXX と isYYY の両方が真でない場合に実行」となりisXXXとisYYYが複合的な論理演算なため理解しにくいですが、下の実装は、「isXXX が偽、または isYYY が偽の場合に実行」となり、isXXXとisYYYを分けて考えていることで単純な論理演算になるため分かやすくなるのではないかと思いました。</p><h2 id="テストに優しい開発"><a href="#テストに優しい開発" class="headerlink" title="テストに優しい開発"></a>テストに優しい開発</h2><blockquote><p>コードにはテストしやすいものとそうでないものがある。テストしやすいコードには、明確なインタフェースがある。状態や「セットアップ」がない。検査するデータが隠されていない。あとでテストを書くとおもしろいことが起きる。テストしやすいようにコードを設計するのだ！このようにコードを書いていけば、いいコードが書けるようになる！</p></blockquote><p>テストを意識して実装することでメリットはいろいろあるとは思いますが、個人的には、何を目的とするかをより明確な状態で実装できることが要因の一つではないかと思いました。</p><p>また、テスト駆動開発と呼ばれる、テストケースを先に実装することで、より堅牢でバグの少ないコードを生み出すことを目的としている手法をまだ体験したことがないので個人開発などする時に試してみたいと思いました。</p><h2 id="解決策を言葉で説明する"><a href="#解決策を言葉で説明する" class="headerlink" title="解決策を言葉で説明する"></a>解決策を言葉で説明する</h2><p>書籍では、コメントを数行書いての説明でしたが、私自身は、コードを書いている際に詰まったり悩んだりした際に、上長の方に質問をしている途中で解決策が思いうかぶことが多々あり言語化することは大切だと思っております。</p><p>そのため質問をする前に仮想の相手を用いて質問をすることを実践しているのですが、このことは、「ラバーダッキング」や「ラバーダック・デバッグ」<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>と呼ばれる技法で、名称の由来は、プログラマーがラバーダック（ゴム製のアヒル）を持ち歩き、そのダックに対してコードを一行ずつ説明しながらデバッグを行いことが由来だそうです。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>自分が実装をする上でなんとなくやっていることが言語化されており、改めて実装をする上で意識すべきことを考えさせられる良い書籍でした。</p><p>次回は、最終回で、島ノ江励さんの「人を選ぶ技術」です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%90%E3%83%BC%E3%83%80%E3%83%83%E3%82%AF%E3%83%BB%E3%83%87%E3%83%90%E3%83%83%E3%82%B0">https://ja.wikipedia.org/wiki/ラバーダック・デバッグ</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0/">リファクタリング</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%BC%E3%83%80%E3%83%96%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89/">リーダブルコード</category>
      
      
      <comments>https://future-architect.github.io/articles/20231122a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>高校生だけじゃもったいない　仕事に役立つ新・必修科目「情報Ⅰ」のレビューに参加しました</title>
      <link>https://future-architect.github.io/articles/20231121a/</link>
      <guid>https://future-architect.github.io/articles/20231121a/</guid>
      <pubDate>Mon, 20 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20231030a/&quot;&gt;秋のブログ週間2023&lt;/a&gt;、4週目・16本目の記事です。&lt;/p&gt;
&lt;a href=&quot;https://www.amazon.co.jp/dp/4569855318&quot;&gt;
&lt;img</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20231030a/">秋のブログ週間2023</a>、4週目・16本目の記事です。</p><a href="https://www.amazon.co.jp/dp/4569855318"><img src="/images/20231121a/81p3z6gOFlL._SL1500_.jpg" alt="" width="500" height="719"></a><p>中山心太氏の最新作、高校生だけじゃもったいない　仕事に役立つ新・必修科目「情報Ⅰ」のレビューに参加し、お礼に献本をいただきました。ありがとうございました。読んだ感想としては発表されたタイミングでツイートしたのがそれにあたります。結構レビューではがんばってコメントを入れました。レイアウトの都合で入りません、と言われたものもいくつかあったのですが、その反映されなかったコメントも交えて本書の紹介をしようと思います。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">レビューに参加しました！単に教科書をなぞるだけじゃなくて、ところてん節がところどころにあって、社会人であっても、ITの専門家でなくても、リテラシーとしてITが何をできるのかというのを身につける大切さが書かれています。面白かったです。 <a href="https://t.co/tOUBpGiPtN">https://t.co/tOUBpGiPtN</a></p>&mdash; 渋川よしき (@shibu_jp) <a href="https://twitter.com/shibu_jp/status/1714969014127210913?ref_src=twsrc%5Etfw">October 19, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>コンピュータが基礎教養になるというのはどういうことか、というのは最初のP19で紹介されている問題の解法の解説で明らかになります。大学で学ぶような理論であっても、プリミティブな手でも解けるシンプルな計算や数のカウントといった簡単な手順に落とし、それをCPUのパワーで繰り返すことで高速かつ大量のデータに対して解決できるようにするのがコンピュータを使った問題解決です。この例では1つ1つはとてもシンプルな事象なので、それを手でシミュレートしています。これを繰り返すことでかなり複雑な予測でもコンピュータでできそうだという気持ちにさせてくれる本です。</p><p>そのように導入部から説得力のある形で始まるのですが、作者はChatGPT本も数ヶ月前に出しており、そちらも精通しています。最後にはそちら方面の情報のキャッチアップも行えるような構成になっております。情報Iの教科書を読み進めていく上ではガイドとして道を示してくれる本だと思いますし（僕は実際は読んではないですがITパスポートなどの学習にも使えそうという感想）、他の本を読まなかったとしても、単体で「自分の仕事にどのような影響があるのか？」というのを考える大きなきっかけを与えてくれる本かと思います。それだけではなく、P200のような神Excelがなぜダメなのか、なぜこれがDXではないのか、というのが理解できるようになってくるでしょう。</p><p>神Excelの方は説明はあっさりしたものですが、おろらく、後続の事務処理にはまったく手を入れる意思がなく（もしくは権限がない）、紙の申請書を回すフローをそのまま使うために「印刷したら過去の方法と互換性が生まれる」という方式になっており、仕事の流れ自体は全く変わっていない（もしくは増える）ため、本来のDXで得られるはずのメリットが享受できないということを説明しようとしていたのでは、と思います。</p><p>「ITは基礎教養」とか「これからはインターネット」とかふわっとしたものではなく、学ぶことによって何がどう変わるのか、というのをきちんと伝えてくれる良い本かと思います。システム開発をするにあたって、予算の都合で機能（スコープ）を削っていくというのはよくある話ですが、やはりどこを新しくすることでどのようなビジネス上のメリットを得るのか、どこが費用対効果が大きいのかというのをきちんと考え抜くスキルはITにかかわるけど本業がIT出ない人にもとても大切になり、かなり大きな金額のITプロジェクトの成否を決めるポイントになります。</p><p>なお、著者のところてん氏は本に入りきらなかった内容をブログ公開しているのですが、これらも面白いです。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">情報I本の未収録原稿をブログで公開しました。これでまだ半分くらい<br><br>「豚と符号化」が割とお気に入りだったんだけど、紙面の都合でカットされて辛かったので供養<a href="https://t.co/kCsYyfvOcS">https://t.co/kCsYyfvOcS</a></p>&mdash; ところてん (@tokoroten) <a href="https://twitter.com/tokoroten/status/1721189428692127921?ref_src=twsrc%5Etfw">November 5, 2023</a></blockquote><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">情報I本の未収録原稿その２（ChatGPT関連、機械学習回り）です<a href="https://t.co/1hqlQodDPF">https://t.co/1hqlQodDPF</a></p>&mdash; ところてん (@tokoroten) <a href="https://twitter.com/tokoroten/status/1721527135293116850?ref_src=twsrc%5Etfw">November 6, 2023</a></blockquote><p>ITを仕事にしている人にも読み物として面白く、そうじゃない人には今後のビジネスを大きく飛躍させるのか、逆に時代遅れにしてしまうのかの分水嶺となる考えを学べる良い本だと思いますので多くの人に手に取ってもらえると良いのではないかと思います。実際、かなり売れているようです。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">AmazonでIT関連で1位になってた <a href="https://t.co/evVLLInyGd">pic.twitter.com/evVLLInyGd</a></p>&mdash; ところてん (@tokoroten) <a href="https://twitter.com/tokoroten/status/1720646425405710838?ref_src=twsrc%5Etfw">November 4, 2023</a></blockquote> <p>著者のところてん氏にはこのブログ原稿を見てもっと本文を引用してもいいのよ、と言われたのですが、本文を読む楽しみを最大化して欲しいのでこのままにしておきます。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%83%85%E5%A0%B1%E2%85%A0/">情報Ⅰ</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9/">コンピュータサイエンス</category>
      
      
      <comments>https://future-architect.github.io/articles/20231121a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>カイゼンジャーニーを読んで新しい挑戦に備える</title>
      <link>https://future-architect.github.io/articles/20231120b/</link>
      <guid>https://future-architect.github.io/articles/20231120b/</guid>
      <pubDate>Sun, 19 Nov 2023 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231120b/kaizen.jpg&quot; alt=&quot;&quot; width=&quot;331&quot; height=&quot;466&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231120b/kaizen.jpg" alt="" width="331" height="466" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。2023年３月キャリア入社、HIG所属の寒河江です。<br><a href="/articles/20231030a/">秋のブログ週間2023</a>、4週目・15本目の記事です。</p><p>現在は新規ビジネス立ち上げのPJに挑戦しており、少人数からスタートしていくにあたり、自分が何かスタートを切る場面もあるのではないかと思い、<a href="https://www.amazon.co.jp/dp/4798153346">カイゼン・ジャーニー たった1人からはじめて、「越境」するチームをつくるまで</a>を読んでみることにしました。</p><p>読んでみて書きたい内容はいろいろあったのですが、かなり長くなりそうだったので概要と感想に留めています。気になった方はぜひ書籍を読んでいただければと思います！</p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>20代のエンジニアである江島を主人公に、様々な状況下で様々な逆境を乗り越えていくストーリーとなっています。</p><p>会社に対し不満を抱えていた江島が社外のイベントに参加した際に、『それで、あなたは何をしている人なんですか？』と問われて自分は何も行動を起こしていないことに気づくところからストーリーが始まり、「一人→二人→チーム→さらに広げて」と、様々な人数や状況で逆境を乗り越え改善していきます。<br>一人の章ではタスクマネジメントの基本が、チームの章ではスクラムなどアジャイル開発の手法とチームマネジメントの手法が記載されており、様々な役割の登場人物が性格まで見えてくる書かれ方になっているため、感情移入もしやすく、現場の雰囲気もつかみやすいです。<br>また、現場の雰囲気まで伝わるため、こういった現場ではこのやり方が合う、こんな不満や意見が出てくる、こういった効果が期待できるのだと理解することが出来ます。</p><p>最後の章では他のチームとともに逆境を乗り越えるのですが、手法は一人の時やチームでの改善活動の時のものに近く、考え方や視点を変えて応用していく様子が描かれています。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>実際の現場での経験を踏まえたうえで、その時の心情も表現しながら記載されているため、自分の過去の経験とも照らし合わせて共感出来るので読みやすかったです。</p><p>一人→二人→チーム→さらに広げてと人数や関わり方が変わっていくのですが、一人で行うものについてはタスクマネジメントの基本が書かれているため、改善項目の有無に関係なく若手の方は読んで実践すると今後タスクマネジメントがしやすくなるのではないかなと思います。</p><p>アジャイル開発の手法については広く浅くといった感じで、ゴリゴリに開発の手法を説明するというより、メンバ視点でもマネジメント視点でも、プロジェクトの課題をどう解決していくか、チームでどう進めていくかという内容になっています。</p><p>アジャイル開発未経験の方には、用語の説明に加え現場の雰囲気も伝わりやすい本となっているので、かなりわかりやすい本だと思います。</p><p>また、チームとプロダクトオーナー、チームとチームリーダー、チームと新メンバそれぞれの境界について書かれている部分もあり、他の著書と比較して<strong>信頼関係</strong>の構築について重きを置いている印象があるので、開発手法を十分理解している方でも普段信頼関係を意識してこなかった方などは読んでみると学びがあるのかなと思います。</p><p>そのため、新人の方や新しくPMになる方、異なる役割間の関係性を改善したいという方にお勧めしたいです！</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>本書で登場した『あなたは何をしている人なんですか？』という言葉は、課題に対してどんな取り組みをしている人かを問う質問で出てきています。</p><p>私は前職で色々と課題を打ち上げてはみてはいたものの、本書の主人公と同様、何かを変えるために自分一人で動いてはいなかったことに気づき主人公同様恥ずかしい気持ちになりました。</p><p>動き始める人は特別な人間ではなく、勇気を出した人（これが難しいけれど）なんだと教えてくれる本だと思うので、<strong>何かを変えたい、自分が変わりたい</strong>と思っても一歩踏み出せない方は是非読んでいただければと思います。</p><p>次は澁川さんの<a href="/articles/20231121a/">仕事に役立つ新・必修科目「情報Ⅰ」のレビューに参加しました</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Management/">Management</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88/">マネジメント</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/">アジャイル</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%AB%E3%82%A4%E3%82%BC%E3%83%B3%E3%82%B8%E3%83%A3%E3%83%BC%E3%83%8B%E3%83%BC/">カイゼンジャーニー</category>
      
      
      <comments>https://future-architect.github.io/articles/20231120b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>新しいSQLフォーマッターであるuroboroSQL-fmtをリリースしました</title>
      <link>https://future-architect.github.io/articles/20231120a/</link>
      <guid>https://future-architect.github.io/articles/20231120a/</guid>
      <pubDate>Sun, 19 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231120a/top.png&quot; alt=&quot;&quot; width=&quot;630&quot; height=&quot;229&quot;&gt;

&lt;p&gt;コアテクノロジーグループの山田です。&lt;/p&gt;
&lt;p&gt;先日、新しいSQLフォーマッターである&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231120a/top.png" alt="" width="630" height="229"><p>コアテクノロジーグループの山田です。</p><p>先日、新しいSQLフォーマッターである<a href="https://github.com/future-architect/uroborosql-fmt">uroboroSQL-fmt</a>をリリースしました 🎉<br>このツールは弊社が公開している<a href="https://future-architect.github.io/coding-standards/documents/forSQL/SQL%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84%EF%BC%88PostgreSQL%EF%BC%89.html">PostgreSQL向けのSQLコーディング規約</a>に基づき、SQL文をフォーマットするツールです。  </p><h3 id="弊社でのSQLフォーマッター開発の取り組み"><a href="#弊社でのSQLフォーマッター開発の取り組み" class="headerlink" title="弊社でのSQLフォーマッター開発の取り組み"></a>弊社でのSQLフォーマッター開発の取り組み</h3><p>元々弊社では<a href="/articles/20170228/">uroboroSQL Formatter</a>（以下uroboroSQL Formatterを旧版、uroboroSQL-fmtを新版と呼ぶ）というSQLフォーマッターを公開していました。旧版は</p><ul><li>字句解析して得られたトークンを基にフォーマットするという設計になっていたため、SELECT句のエイリアス補完といった文法を考慮する必要のある機能の追加が困難</li><li>Pythonで書かれておりVSCodeの拡張機能として動作させるのが難しい</li></ul><p>という課題を抱えており、それを解消するため新たなSQLフォーマッターを開発していました。</p><h4 id="ANTLR-TypeScriptによるSQLフォーマッターの開発"><a href="#ANTLR-TypeScriptによるSQLフォーマッターの開発" class="headerlink" title="ANTLR+TypeScriptによるSQLフォーマッターの開発"></a>ANTLR+TypeScriptによるSQLフォーマッターの開発</h4><p><a href="/articles/20200606/">Engineer Camp2020</a>でANTLRとTypeScriptによるSQLフォーマッターを開発しました。インターンシップ中にSQLがフォーマットできるようになり、この方向性で旧版が抱えていた課題は解決できそうに思えましたが、SQLの構文解析が著しく遅いという問題点がありました。弊社太田が<a href="https://github.com/antlr/antlr4/issues/2902">ANTLRのJavaScript runtimeの不具合を発見</a>し、かなり高速化されたものの実用的な速さにはならなかったこともありANTLRを用いたSQLフォーマッターの開発はストップしました。</p><p>インターンシップで行ったことについては以下の記事をご覧ください。</p><ul><li><a href="/articles/20200919/">Engineer Camp2020でSQLフォーマッタを開発しました</a></li></ul><h4 id="RustによるSQLフォーマッターの開発"><a href="#RustによるSQLフォーマッターの開発" class="headerlink" title="RustによるSQLフォーマッターの開発"></a>RustによるSQLフォーマッターの開発</h4><p>旧版の課題を解決しつつ十分な速さでフォーマット可能なSQLフォーマッターを開発するため、<a href="https://future-architect.github.io/articles/20220606b/">Engineer Camp2022</a>でRustによるSQLフォーマッターの開発を開始しました。インターンシップ終了時点で簡単なSQLのフォーマットが可能になり、その後もアルバイトとしてSQLフォーマッター開発に参画していただき、旧版のフォーマッターでは実現できなかったSELECT句のエイリアス補完等の機能、<a href="https://marketplace.visualstudio.com/items?itemName=Future.uroborosql-fmt">vscode拡張化</a>、<a href="https://future-architect.github.io/uroborosql-fmt/">wasm化</a>を実現しリリースに至りました。</p><p>インターンシップで行ったことや開発の過程で調査したことは以下の記事をご覧ください。</p><ul><li><a href="/articles/20220916b/">Engineer Camp2022 RustでSQLフォーマッタ作成（前編）</a></li><li><a href="/articles/20220916c/">Engineer Camp2022 RustでSQLフォーマッタ作成（後編）</a></li><li><a href="/articles/20221124a/">Language Server Protocolを用いたVSCode拡張機能開発 (前編)</a></li><li><a href="/articles/20221125a/">Language Server Protocolを用いたVSCode拡張機能開発 (後編)</a></li><li><a href="/articles/20221228a/">Rust製SQLフォーマッタをnapi-rsを利用してVSCode拡張機能化</a></li><li><a href="o/articles/20230605a/">C&#x2F;C++を呼び出しているRustのWASM化</a></li></ul><h3 id="旧版と新版の比較"><a href="#旧版と新版の比較" class="headerlink" title="旧版と新版の比較"></a>旧版と新版の比較</h3><h4 id="処理時間比較"><a href="#処理時間比較" class="headerlink" title="処理時間比較"></a>処理時間比較</h4><p>新しく開発したSQLフォーマッターでは処理時間が大幅に向上しています！<br>巨大なSQLファイルと小さなSQLファイルをフォーマットしたときの処理時間を比較しました。<br>内容によってフォーマットにかかる時間は変わって変わるため、あくまで一例ですが概ね5-500倍ほど性能改善しています。</p><div class="scroll"><table><thead><tr><th></th><th>旧版</th><th>新版</th></tr></thead><tbody><tr><td>3985行のINSERT-SELECT文</td><td>1m53.651s</td><td>0m0.194s</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/crates/uroborosql-fmt/testfiles/dst/select/asterisk.sql">6行のSELECT文</a></td><td>0m0.357s</td><td>0m0.054s</td></tr></tbody></table></div><h4 id="機能比較"><a href="#機能比較" class="headerlink" title="機能比較"></a>機能比較</h4><p>字句解析ベースから構文解析ベースになったことで、下記のような構文を意識した補完やauto fixができるようになっています。</p><h5 id="カラムのAS補完"><a href="#カラムのAS補完" class="headerlink" title="カラムのAS補完"></a>カラムのAS補完</h5><h6 id="フォーマット前"><a href="#フォーマット前" class="headerlink" title="フォーマット前"></a>フォーマット前</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">COLUMN1COL1</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">TBL</span><br></pre></td></tr></table></figure><h6 id="フォーマット後"><a href="#フォーマット後" class="headerlink" title="フォーマット後"></a>フォーマット後</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">COLUMN1<span class="keyword">AS</span>COL1</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">TBL</span><br></pre></td></tr></table></figure><h5 id="カラムエイリアス補完"><a href="#カラムエイリアス補完" class="headerlink" title="カラムエイリアス補完"></a>カラムエイリアス補完</h5><h6 id="フォーマット前-1"><a href="#フォーマット前-1" class="headerlink" title="フォーマット前"></a>フォーマット前</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">COL1</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">TAB1</span><br></pre></td></tr></table></figure><h6 id="フォーマット後-1"><a href="#フォーマット後-1" class="headerlink" title="フォーマット後"></a>フォーマット後</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">COL1<span class="keyword">AS</span>COL1</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">TAB1</span><br></pre></td></tr></table></figure><h5 id="長い関数呼出の折返し"><a href="#長い関数呼出の折返し" class="headerlink" title="長い関数呼出の折返し"></a>長い関数呼出の折返し</h5><h6 id="フォーマット前-2"><a href="#フォーマット前-2" class="headerlink" title="フォーマット前"></a>フォーマット前</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong(</span><br><span class="line">short_func(</span><br><span class="line">param1</span><br><span class="line">,param2</span><br><span class="line">)</span><br><span class="line">,param2</span><br><span class="line">) <span class="keyword">as</span> func_col </span><br><span class="line">,   t.col1</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    tbl t</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong(param1,param2) <span class="operator">=</span> <span class="keyword">case</span> <span class="keyword">when</span> t.col2 <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;pattern1&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;default&#x27;</span> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h6 id="フォーマット後-2"><a href="#フォーマット後-2" class="headerlink" title="フォーマット後"></a>フォーマット後</h6><p><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/max_char_per_line.md">max_char_per_line</a>の設定は関数呼出の長さの上限を表し、デフォルトが50になっています。</p><p>この例ではlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglongは50文字超のため変数ごとに折返され、short_funcは引数入れても50文字以内のためワンライン化されています。</p><p>where句にあってもいい感じに折り返され、横スクロールが発生しにくいようになっています。</p><p>longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglongは50文字超のため変数ごとに折返され、short_funcは引数入れても50文字以内のためワンライン化されています。</p><p>where句にあってもいい感じに折り返され、横スクロールが発生しにくいようになっています。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong(</span><br><span class="line">short_func(param1, param2)</span><br><span class="line">,param2</span><br><span class="line">)<span class="keyword">as</span>func_col</span><br><span class="line">,t.col1<span class="keyword">as</span>col1</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">tblt</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong(</span><br><span class="line">param1</span><br><span class="line">,param2</span><br><span class="line">)<span class="operator">=</span></span><br><span class="line"><span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span></span><br><span class="line">t.col2<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="string">&#x27;pattern1&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="string">&#x27;default&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="新旧の機能比較"><a href="#新旧の機能比較" class="headerlink" title="新旧の機能比較"></a>新旧の機能比較</h5><p>その他新旧の機能比較は下記です。</p><p><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/remove_table_as_keyword.md">テーブルのAS除去</a>や<a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/convert_double_colon_cast.md">::によるキャストをCASTに変換</a>などPostgreSQL限定構文は等価の標準SQLに変換する機能を入れています。</p><div class="scroll"><table><thead><tr><th></th><th>旧版</th><th>新版</th></tr></thead><tbody><tr><td>対応SQL</td><td>全て</td><td>PostgreSQL</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/tab_size.md">タブサイズの設定</a></td><td>o</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/keyword_case.md">予約語</a>、<a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/identifier_case.md">識別子</a>の変換</td><td>大文字化、小文字化</td><td>大文字化、小文字化、変換なし</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/complement_alias.md">エイリアス補完</a></td><td>-</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/complement_outer_keyword.md">outer補完</a></td><td>-</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/complement_column_as_keyword.md">カラムのAS補完</a></td><td>-</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/remove_table_as_keyword.md">テーブルのAS除去</a></td><td>-</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/trim_bind_param.md">バインドパラメータの余計な空白除去</a></td><td>-</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/remove_redundant_nest.md">冗長な空白除去</a></td><td>-</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/max_char_per_line.md">1行の最大長指定</a></td><td>-</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/complement_sql_id.md">SQL ID補完</a></td><td></td><td></td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/convert_double_colon_cast.md">::によるキャストをCASTに変換</a></td><td>-</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/unify_not_equal.md">&lt;&gt;を!&#x3D;に変換</a></td><td>-</td><td>o</td></tr><tr><td>ディレクトリ内のファイルを一括フォーマット</td><td>o</td><td>-</td></tr><tr><td>予約語をファイルで指定</td><td>o</td><td>-</td></tr><tr><td>vscode拡張</td><td>-</td><td>o</td></tr><tr><td>wasm</td><td>-</td><td>o</td></tr><tr><td>eclipse plugin</td><td>o</td><td>-</td></tr><tr><td>IntelliJ plugin</td><td>o</td><td>-</td></tr><tr><td>SublimeText3 plugin</td><td>o</td><td>-</td></tr><tr><td>exe版</td><td>o</td><td>-</td></tr><tr><td>2way-sql</td><td><a href="https://future-architect.github.io/uroborosql-doc/">uroborosql</a>、<a href="https://doma.readthedocs.io/en/latest/">doma</a></td><td><a href="https://future-architect.github.io/uroborosql-doc/">uroborosql</a>、<a href="https://future-architect.github.io/articles/20210803a/">go-twowaysql</a>、<a href="https://doma.readthedocs.io/en/latest/">doma</a></td></tr><tr><td>選択範囲フォーマット</td><td>-</td><td>o  vscode拡張版のみ</td></tr></tbody></table></div><ul><li>PostgreSQL以外のSQLには対応していないため、PostgreSQL以外のSQLのフォーマットには旧版の使用をお勧めしています。</li><li>eclipse pluginとexe版は現在は用意できていないのですが、将来的には作成する予定です！</li></ul><h3 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h3><h4 id="方法1：wasm版を試してみる"><a href="#方法1：wasm版を試してみる" class="headerlink" title="方法1：wasm版を試してみる"></a>方法1：wasm版を試してみる</h4><p>wasm版は<a href="https://future-architect.github.io/uroborosql-fmt/">こちらのデモ</a>でお試しできます。<br>使い方についてはデモページ内の説明をご参照ください。</p><h5 id="wasm版の実行イメージ"><a href="#wasm版の実行イメージ" class="headerlink" title="wasm版の実行イメージ"></a>wasm版の実行イメージ</h5><img src="/images/20231120a/wasm版フォーマットデモ.gif" alt="wasm版フォーマットデモ.gif" width="1200" height="618" loading="lazy"><h4 id="方法2：vscode拡張として使用する"><a href="#方法2：vscode拡張として使用する" class="headerlink" title="方法2：vscode拡張として使用する"></a>方法2：vscode拡張として使用する</h4><ol><li>まず、他の拡張機能と同様に<a href="https://marketplace.visualstudio.com/items?itemName=Future.uroborosql-fmt">uroborosql-fmt - Visual Studio Marketplace</a>をvscodeにインストールしてください。</li><li>settings.jsonに以下の設定を入れてください <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;[sql]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Future.uroborosql-fmt&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>SQLファイルを開き、コマンドパレットから<code>Format Document</code>か、<code>format sql</code>を実行してください<br>  <code>format sql</code>では選択範囲のフォーマットをサポートしています</li></ol><h5 id="フォーマットの設定方法"><a href="#フォーマットの設定方法" class="headerlink" title="フォーマットの設定方法"></a>フォーマットの設定方法</h5><p>フォーマットの各種設定を記載したファイルのパスを指定することができます。<br>指定されなかった場合にはデフォルトのパスにある <code>./.uroborosqlfmtrc.json</code> を読み込みます。<br>設定ファイルが存在しなかった場合、デフォルト値でフォーマットされます。<br>※ 現状は設定ファイルのパスしかできませんが、個々の設定の変更もvscodeの設定画面から出来るようにする予定です。</p><p>設定ファイルは以下のような内容です。<br>個々の設定については<a href="https://marketplace.visualstudio.com/items?itemName=Future.uroborosql-fmt">uroborosql-fmt - Visual Studio Marketplace</a>をご参照ください。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tab_size&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;complement_alias&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trim_bind_param&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyword_case&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;identifier_case&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;max_char_per_line&quot;</span><span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;complement_outer_keyword&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;complement_column_as_keyword&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;remove_table_as_keyword&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;remove_redundant_nest&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;complement_sql_id&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;convert_double_colon_cast&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;unify_not_equal&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="vscode拡張版の実行イメージ"><a href="#vscode拡張版の実行イメージ" class="headerlink" title="vscode拡張版の実行イメージ"></a>vscode拡張版の実行イメージ</h5><img src="/images/20231120a/vscode版フォーマットデモ.gif" alt="vscode版フォーマットデモ.gif" width="817" height="585" loading="lazy"><h4 id="方法3：cliで使用する"><a href="#方法3：cliで使用する" class="headerlink" title="方法3：cliで使用する"></a>方法3：cliで使用する</h4><ol><li>Rustの環境を構築</li><li><code>cargo install --git https://github.com/future-architect/uroborosql-fmt</code> で <code>uroborosql-fmt-cli</code> をインストール</li><li><code>uroborosql-fmt-cli input.sql</code> で <code>input.sql</code> をフォーマットした結果が標準出力に出力されます。<code>uroborosql-fmt-cli input.sql result.sql</code> のように第2引数を渡すと、第2引数で指定したファイルにフォーマット結果が格納されます</li></ol><h3 id="チーム開発で使用する場合"><a href="#チーム開発で使用する場合" class="headerlink" title="チーム開発で使用する場合"></a>チーム開発で使用する場合</h3><ol><li><code>.vscode/settings.json</code> を作成し、以下のように<code>uroborosql-fmt.configurationFilePath</code>の設定を記載してください <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;uroborosql-fmt.configurationFilePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./.uroborosqlfmtrc.json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>チームで使用したいフォーマットの設定を<code>.uroborosqlfmtrc.json</code>に記載し、リポジトリ直下に配置してください</li></ol><h3 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h3><p>まだまだ枯れておらずフォーマットできないことも多いです。元のSQLを壊していないか検証するロジックは入っていますが、意図しない変更が入っていないか確認お願いします。不具合や要望等ございましたらお気軽にissueやPRいただければと思います。</p><p>※ ライセンスはBSLですが競合会社含め開発環境での利用は自由ですので、お気軽に使用ください</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DB/">DB</category>
      
      
      <category domain="https://future-architect.github.io/tags/SQL/">SQL</category>
      
      <category domain="https://future-architect.github.io/tags/uroboroSQL/">uroboroSQL</category>
      
      <category domain="https://future-architect.github.io/tags/Rust/">Rust</category>
      
      <category domain="https://future-architect.github.io/tags/wasm/">wasm</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%82%BF%E3%83%BC/">フォーマッター</category>
      
      
      <comments>https://future-architect.github.io/articles/20231120a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>次世代型データベース 劔&quot;Tsurugi&quot; とは何？公式サイトから調べてみた！</title>
      <link>https://future-architect.github.io/articles/20231117a/</link>
      <guid>https://future-architect.github.io/articles/20231117a/</guid>
      <pubDate>Thu, 16 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20231030a/&quot;&gt;秋のブログ週間2023&lt;/a&gt;、3週目・14本目の記事です。&lt;/p&gt;
&lt;img src=&quot;/images/20231117a/剣山-e1693895394230.jpg&quot; alt=&quot;&quot; width=&quot;800&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20231030a/">秋のブログ週間2023</a>、3週目・14本目の記事です。</p><img src="/images/20231117a/剣山-e1693895394230.jpg" alt="" width="800" height="529"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。新卒入社3年目の佐藤です。</p><p>2023年10月5日にオープンソースとしてリリースされたばかりの次世代RDB“Tsurugi”について公式サイトを元に調べてみたので、特徴や感想などをつらつらと書いいきます。</p><p>気になってた人も、聞いたことがまだ無い人も、ぜひゆるりと読んでいただければと思います。</p><h1 id="次世代RDB-劔”Tsurugi”について"><a href="#次世代RDB-劔”Tsurugi”について" class="headerlink" title="次世代RDB 劔”Tsurugi”について"></a>次世代RDB 劔”Tsurugi”について</h1><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>まずは劔”Tsurugi”（以下、Tsurugi）とはなんぞやというところからですが、ジャンルとしてはRDBMS（MySQL、PostgreSQL、Microsoft SQL Serverなどの仲間）です。</p><p>RDBMSは決して入れ替わりが激しい分野ではなく、特にMySQLなどは20年も使われてきた実績があり、いわば既に完成された分野ではあるのですが、Tsurugiそんな中「純国産」「新型RDBMS」「次世代」というパワーワードをぶら下げて発表されました。</p><p>特に「次世代」がキーワードになるのですが、公式ページには</p><blockquote><p>劔”Tsurugi”は、新しいハードウェアのアーキテクチャに合うRDBMSとして開発を行っています。<br>CPUは微細化が限界に達し、メニーコア化を進めていおり、一方で、メモリーデバイスも高機能（不揮発性メモリーの登場）・高密度化（メモリー容量の伸張）が進んでいます。</p><p>既存のRDBMSは、”コア数が少ない”、”メモリー容量は制限的である”という前提で作られており、基本的なアーキテクチャの思想としては永らく変わっておらず、新しいハードウェアアーキテクチャ（メニーコア・大容量メモリー）で性能を発揮しづらくなっています。</p><p>劔”Tsurugi”は、新しいハードウェアアーキテクチャに合わせた設計思想に基づいて開発され、その上で性能を最大限に発揮するデータベースです。</p></blockquote><p>（引用元：<a href="https://www.tsurugidb.com/about.html">https://www.tsurugidb.com/about.html</a> ）</p><p>と記載があり、これを見てナルホド、要は「今までのRDBMSは省メモリ前提で作られてきたが、ハードウェアが進化してきた現代においてはその前提は古い！今こそ大容量メモリ前提で最適なRDBMSを出すぜ！」という思想なのかと合点がいきました。</p><h2 id="特徴"><a href="#特徴" class="headerlink" title="特徴"></a>特徴</h2><p>ではここからはTsurugiの具体的な特徴ですが、こちらも公式ページを見ると、</p><blockquote><p>①超高速バッチ処理が可能<br>②バッチ&#x2F;オンライン併用が可能<br>③JavaAPIが利用可能</p></blockquote><p>と書かれており、もう少し噛み砕くと、それぞれ</p><ul><li>ハードウエアの性能が向上するほどシステムの性能が高まるように設計されているため、処理速度がめちゃめちゃ速い</li><li>バッチ処理（まとめて定期的にやる処理）を行いながらオンライン処理（リアルタイムで行う処理）が併用できるため、バッチ処理は夜間で…など運用を分けなくて良い</li><li>JavaやpostgresSQLなどの別の仕組みからでも呼び出しやすいインターフェースが用意されているため、システムと連携がしやすい</li></ul><p>という特徴があるそうです。</p><p>ではどれくらい効果があるのか…?ということで、同ページ内に「実際に使ってみてどれくらい有効だったか」という例が4つ載っていたので、そちらも見ていきましょう。</p><h3 id="運用例①-…-画像処理"><a href="#運用例①-…-画像処理" class="headerlink" title="運用例① … 画像処理"></a>運用例① … 画像処理</h3><blockquote><p>点群データ解析による新しい方式の混雑状況把握<br>― 画像処理：IoTデータのリアルタイムDBにおける運用（62Complex株式会社） ―</p></blockquote><p>これは特徴②の「バッチ&#x2F;オンライン併用が可能」が活きた例で、</p><blockquote><p>通常ではデータ処理の取り込みがバッチ処理であるのに対して、劔”Tsurugi”を使用すると、リアルタイムで継続的にデータ処理・取り込みができることを確認しました。これにより、膨大なデータの格納、解析が高速化、効率化され、リアルタイムでの処理が可能になりました。</p></blockquote><p>というコメントが書かれていました。こちらは数字はないものの、データ解析をする上で<br>データが取り込まれるのを待つ⇒処理する<br>という非効率的なフローが解消されており、こういうケースにも使えるんだ…!という学びになりますね。</p><h3 id="運用例②-…-超大規模データ解析"><a href="#運用例②-…-超大規模データ解析" class="headerlink" title="運用例② … 超大規模データ解析"></a>運用例② … 超大規模データ解析</h3><blockquote><p>大量のデータを用いた探索的データ分析（大規模データ解析）<br>― 超大規模データ解析：e-Scienceへの適用（大学共同利用機関法人 自然科学研究機構国立天文台） ―</p></blockquote><p>こちらは特徴①の「超高速バッチ処理が可能」が活きた例で、</p><blockquote><p>従来システムに対して、分散クラスターでの速度の向上（10-100倍）の有効性が確認された</p></blockquote><p>とのこと。<br>大分幅はあるものの、<em>最大で100倍</em>効率化されるというのはもはやロマンを感じてしまいます。シンプルにめっちゃ速くなってますね。</p><h3 id="運用例③-…-災害対応"><a href="#運用例③-…-災害対応" class="headerlink" title="運用例③ … 災害対応"></a>運用例③ … 災害対応</h3><blockquote><p>大規模災害発生後の初動・応急対策段階における情報整理のためのプラットフォームに適用<br>― 災害対応：災害発生後の初動・応急対策段階での活用（株式会社パスコ） ―</p></blockquote><p>こちらも特徴①の「超高速バッチ処理が可能」が活きた例で、</p><blockquote><p>膨大な空間情報の収集データを利用した検証で、登録・処理時間などの大幅な短縮につながることを確認しました。<br>大規模災害発生後の初動・応急対策段階における情報整理のためのプラットフォームへの適用・活用が期待</p></blockquote><p>と記載されていました。<br>Tsurugiは「ハードウエアの性能が向上するほどシステムの性能が高まる」ため、緊急時などの「リソースは多く割いても良いから、とにかく速く」というケースに非常にマッチしていて良い例と思いました。<br>そういったケースが想定される場合は一考ですね。</p><h3 id="運用例④-…-業務管理"><a href="#運用例④-…-業務管理" class="headerlink" title="運用例④ … 業務管理"></a>運用例④ … 業務管理</h3><blockquote><p>原材料の計算・シミュレーションに適用で為替の変動にも対応<br>― 業務管理：生産性向上への適用（株式会社アンデルセンサービス） ―</p></blockquote><p>こちらも特徴①の「超高速バッチ処理が可能」の例ですね。</p><blockquote><p>分散処理のSparkで約50分かかっているところ、劔”Tsurugi”では25分の1となる約2分間で終了</p></blockquote><p>最早コメントの余地すらないです。速くなりすぎです。。。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>最後まで読んでいただいて、ありがとうございました。</p><p>今回は秋の読書感想文ということでしたが、電車でたまたま「純国産!?のRDBMS!?」と目に入ったのをきっかけに記事にしてみました。</p><p>概要程度でさくっと読めるように書いてみたつもりなので「なんか超速いらしい！」程度に伝わっていれば幸いです。</p><p>日ごろ日本発のIT技術がもっとグローバルになれば…と考えているので、このTsurugiに使えそうなケースがあれば、導入を考えたいですね。</p><p>ありがとうございました。</p><h1 id="気になった人向け"><a href="#気になった人向け" class="headerlink" title="気になった人向け"></a>気になった人向け</h1><p>今回は書籍ではなく公式ページから情報を仕入れましたが、書籍も出版されているので紹介しておきます。</p><ul><li>次世代高速オープンソースRDB Tsurugi</li></ul><p><a href="https://amzn.asia/d/j4ScwcY">https://amzn.asia/d/j4ScwcY</a></p><p>また、公式ページからも辿れますが、GitHubのリンクも掲載しておきます。</p><p><a href="https://github.com/project-tsurugi/tsurugidb">https://github.com/project-tsurugi/tsurugidb</a></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://www.tsurugidb.com/about.html">https://www.tsurugidb.com/about.html</a></p><p>※本記事の引用文は全て↑からの引用となります</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DB/">DB</category>
      
      
      <category domain="https://future-architect.github.io/tags/DB/">DB</category>
      
      <category domain="https://future-architect.github.io/tags/Tsurugi/">Tsurugi</category>
      
      
      <comments>https://future-architect.github.io/articles/20231117a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python Distilledは幅広い人にPythonの基礎を叩き込む本</title>
      <link>https://future-architect.github.io/articles/20231116a/</link>
      <guid>https://future-architect.github.io/articles/20231116a/</guid>
      <pubDate>Wed, 15 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231116a/image.png&quot; alt=&quot;&quot; width=&quot;516&quot; height=&quot;660&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231116a/image.png" alt="" width="516" height="660" loading="lazy"><p><a href="/articles/20231030a/">秋のブログ週間2023</a>、3週目・13本目です。</p><p>Python Distilledという本がオライリーから出版されました。作者のDave Beazleyはかなり昔からPythonを使い込んでいる人ですので、この本には信頼しかない、と思い読んでみました。Daveは大学の教授をしていて、コンピュータサイエンスで表彰もされている筋金入りです。本家PyConでも何度も発表されているようです。Python歴は27年でOSSとしてはC&#x2F;C++をラップして他の言語で使えるようにコードを生成するSWIGはすでに20年以上の歴史がありますし、パーサージェネレータのPLYとSLY。curioというコルーチンのライブラリなどを作っています。僕は以前、SWIGのドキュメント翻訳をしてCマガジンに特集記事を書かせていただいたこともあり、僕の大学時代の顔写真がSWIGのウェブサイトに公開されていたりします。</p><img src="/images/20231116a/スクリーンショット_2023-11-04_19.52.36.png" alt="" width="1173" height="1252" loading="lazy"><p>そういう世の中のほぼすべてのPython本の著者よりも長いPython歴を持つ著者で、大学やそれ以外の場でPythonを20年以上教え続けているということを考えると、この本の重みがつたわってくるかと思います。</p><h1 id="誰におすすめな本なのか？"><a href="#誰におすすめな本なのか？" class="headerlink" title="誰におすすめな本なのか？"></a>誰におすすめな本なのか？</h1><p>さっと読んでみたところ、本当にプログラミング言語を学ぶのが初めてで、1つ目の言語としてPythonを覚悟を持って学ぶ人(学問の基礎として)、あるいは長らくPythonを書いてきて、現代のPythonの知識にリフレッシュしたい人に最適な気がしました。また、他の言語を大学の授業のような場で学んだ人がPythonを学ぶのにも良いと思います。</p><p>趣味でプログラミングを触ってみたいが、すぐにWebサービスを作ったり動くものにフォーカスしたい人とかとりあえずちょっと触ってみたい人には教科書然としたところがちょっとあたりが強めに感じるかもしれませんが、僕は逆に大学の授業のプログラミングを思い出しては懐かしい気持ちを覚えたりもしました。</p><p>現在サポートがまだ行われている最低限のバージョンがこの本のターゲットとほぼ同じため、ここに書いてあることはすべて「今使えるPythonの文法」を完全に内包しています。</p><p>僕が翻訳したエキスパートPythonプログラミング改訂4版などは、テストの仕方や実践向けのパフォーマンスチューニング、大規模開発に向けたアーキテクチャの話なども入っています。この本はそのようにPythonでお金を稼ぐための本というよりは、Pythonの知識をがつっとインストールする人向けの本という趣です。まさに教科書という感じです。</p><p>PyCon APAC 2023の基調講演でも紹介のあった<a href="https://utokyo-ipp.github.io/course/">京都大学&#x2F;東京大学のPython講座の教科書</a>と比べると、こちらの方はよりPythonの原則である特殊メソッドによるカスタマイズ、非同期I&#x2F;Oなど、Pythonの言語コアへの説明が手厚いと感じます。一方で、京都大学・東京大学の方は、おおむね60%ぐらいはオーバーラップしているものの、AI教育を見据えてそちらのライブラリの使い方を学ぶ、それを扱うための文法にフォーカスしている気がします。こちらはITが専門の学科じゃない人も学ぶための本ということだったので、そちらを読んだ人がもう少し言語力を鍛えるのにも良い気がします。</p><h1 id="どういう知識のリフレッシュがあるのか？"><a href="#どういう知識のリフレッシュがあるのか？" class="headerlink" title="どういう知識のリフレッシュがあるのか？"></a>どういう知識のリフレッシュがあるのか？</h1><p>言語知識って単にカタログ的に追加していけばいいというわけではなく、周辺機能とのトレードオフが発生したりもします。例えば、本書で説明されている内容で「なるほど」と思ったのが、ジェネレータの用途です。これはループ構文という多くのPython開発者が慣れているインタフェースを通じて高度な処理を書くための文法だったりもしますが、「async&#x2F;awaitが入ったことで、ジェネレータが過去に必要とされた用途の一部はasync&#x2F;awaitの方がよくなったよ」というものがありました。</p><p>このように、新しい文法要素が入った結果の現在の適切な書き方などは、単にバージョンの差分を追いかけていくだけでは身につきにくいと言えます。あとは、yieldの返り値を使うとループ構文としては使えないよとか、ジェネレータはエンドユーザーからは隠されるライブラリの内部実装として使われるケースも多くなってきているよ（コンテキストマネージャの実装I&#x2F;Fとして）とかは、確かに言われてみるとそうだな、と思わされるなどしました。</p><p>あとは、僕自身もそうですが、以前からPythonを書いていて、Python歴が長くなった人には、こういう頭の整理や知識のリフレッシュができるという本書の使い方も有用だと思います。最初の方のファイルオープンのコーディングも、コンテキストマネージャを使い、セイウチ演算子も使ったサンプルがさっとでてきたりします。どちらも僕がPythonを学んだときにはなくて、コンテキストマネージャぐらいは使うものの、セイウチ演算子を使ったファイル読み込みのイディオムはこうなっているのか、というところは新鮮に感じました。</p><p>それ以外にも僕が知らなかった（追いかけきれてなかった）ものでメモしたのは以下のものとかですね。</p><ul><li>例外の連鎖(<code>raise ApplicationError() from e</code>)と<code>__cause__</code>属性</li><li><code>lambda</code>のデフォルト引数で変数を先行束縛</li><li><code>async with</code></li><li><code>yield from</code></li><li><code>from module import *</code>は名前空間のトップでしか使えない</li><li><code>pkgutil.get_data()</code></li><li><code>bytearray</code></li></ul><p>データクラス周りは少し言及があってもいいのにな、とちょっと思いました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>着実にPythonを自らの血肉にしていきたい人向けの本です。特殊メソッドが列挙されてたり、組み込み関数を全部紹介とかちょっとストイックだな、と思う部分もあるものの、Pythonの地力を上げるにはおそらくいつかはやることになるものだと思うので、こういうのを若いうちにしっかりやっておくというのはすごく良いと思います。</p><p>次は佐藤さんの <a href="/articles/20231117a/">次世代型データベース 劔”Tsurugi” とは何？公式サイトから調べてみた！</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/Python-Distilled/">Python Distilled</category>
      
      
      <comments>https://future-architect.github.io/articles/20231116a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>アプリエンジニアがコンテナ開発の基本を読んで学ぶ</title>
      <link>https://future-architect.github.io/articles/20231115a/</link>
      <guid>https://future-architect.github.io/articles/20231115a/</guid>
      <pubDate>Tue, 14 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231115a/image.png&quot; alt=&quot;&quot; width=&quot;520&quot; height=&quot;663&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231115a/image.png" alt="" width="520" height="663" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。HealthCare Innovation Group(HIG)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>所属の清水です。</p><p><a href="/articles/20231030a/">秋のブログ週間2023</a>、3週目・12本目の記事です。</p><p>Kubernetesクラスタ上で構築された学習基盤<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>を業務で利用することをきっかけに、「<a href="https://book.impress.co.jp/books/1120101031">Dockerコンテナ開発・環境構築の基本</a>」という書籍を読んでみました。</p><p><a href="https://book.impress.co.jp/books/1120101031">https://book.impress.co.jp/books/1120101031</a></p><p>これまでDocker・Kubernetesをあまり触ったことがないエンジニアが、書籍を読んだ感想を書いていきます。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p><a href="https://ja.wikipedia.org/wiki/Kubernetes">Wikipedia</a>によると、「クバネティス&#x2F;クバネテス&#x2F;クーべネティス」と読まれているようです。<br>「クーベネティス」だと予測変換にKubernetesが出てくる（手元のiOS、macOS）ため、「クーベネティス」と打っています。</p></div><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>本書は、Dockerをベースにコンテナ技術の理解・実践からKubernetesクラスタ上でアプリケーションを稼働させる仕組みを解説した書籍です。<br>サンプルのソースコード付きで、書籍の中でも概要の説明→コマンドで実現する方法という流れで分かりやすかったです。<br>各コマンドで何をしているのか、コマンドの書式付きで解説があったので初心者にも理解しやすい内容になっていました。</p><p>読む前は、Docker・Kubernetesのコマンドを調べて業務を進めることはできるものの、理解が浅いためコンテナを利用して開発を進める際に抵抗感がありました。<br>書籍を通して、普段使っているコマンドの中でどんなことを実現しているか・マニフェストを用意する上で考慮すべきことを理解したことで、気持ちの問題ですが臆せず開発できるようになりました。</p><p>また、実行環境の統一のため、使用した実行環境がローカルPCではなくGoogle Cloud Platform（以降GCP）であったのが普段ほぼローカルで開発している私にとっては印象的でした。<br>Docker・Kubernetesの勉強になったのはもちろん、サンプル中にTrivy<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>やGitHub Actionsを使うシーンもあり、名前は知っているけどまだ使ったことない技術に触れたのもいい機会でした。</p><h1 id="概要と気になった内容"><a href="#概要と気になった内容" class="headerlink" title="概要と気になった内容"></a>概要と気になった内容</h1><h2 id="コンテナアプリケーション開発について（第1章）"><a href="#コンテナアプリケーション開発について（第1章）" class="headerlink" title="コンテナアプリケーション開発について（第1章）"></a>コンテナアプリケーション開発について（第1章）</h2><p>既存のアプリケーション開発及び仮想化の仕組みについて説明した上で、コンテナアプリケーション開発におけるサイクルを説明されています。</p><p>本章では、主に以下の点を解説されています。</p><ul><li>仮想マシンとコンテナイメージの違い</li><li>コンテナイメージの構造</li></ul><p>「アプリを動かす土台を共有して、その土台の上でアプリを動かすことで環境差異を減らす」というイメージは元々ありましたが、<br>上記2点を押さえることで、仕組みやメリットの理解が深まりました。</p><p>また、コンテナ技術を利用することによるメリットだけではなく、コンテナアプリケーション開発スタイルが「銀の弾丸ではない」ことを、章の最後に触れていたことが印象的です。</p><h2 id="コンテナアプリケーション開発のライフサイクル（第2章・第3章）"><a href="#コンテナアプリケーション開発のライフサイクル（第2章・第3章）" class="headerlink" title="コンテナアプリケーション開発のライフサイクル（第2章・第3章）"></a>コンテナアプリケーション開発のライフサイクル（第2章・第3章）</h2><p>GCPを用いてにDocker環境をセットアップして、実際に動かしながらコンテナアプリケーション開発におけるライフサイクル「Build・Ship・Run」を説明されています。</p><p>「Build・Ship・Run」はそれぞれ、</p><ol><li>Build: 実行ファイル及びそれを動かすために必要なOS・ライブラリをパッケージ化</li><li>Ship: Buildしたコンテナイメージの配布及び共有</li><li>Run: Shipしたコンテナイメージの起動と操作</li></ol><p>を指します。</p><p>本章を読むことで、以下の気になっていたことがすっきり分かりました！</p><ul><li>Dockerfileで、ローカルのファイルなどをコンテナイメージに含める<code>ADD</code>と<code>COPY</code>の使い分け</li><li>Dockerfileで、<code>&amp;&amp;</code>で結合した<code>RUN</code>命令が多い理由</li><li>コンテナとコンテナホスト（Dockerを動かしているマシン）間でのデータのやり取り</li></ul><h2 id="Kubernetesの仕組みと利用の流れ（第4章・第5章）"><a href="#Kubernetesの仕組みと利用の流れ（第4章・第5章）" class="headerlink" title="Kubernetesの仕組みと利用の流れ（第4章・第5章）"></a>Kubernetesの仕組みと利用の流れ（第4章・第5章）</h2><p>Kubernetesの概要から<code>kubectl</code>コマンドを利用してコンテナアプリケーションを動かす流れを説明されています。</p><p>本章では、以下の点が記載されています。</p><ul><li>なぜコンテナオーケストラレータが必要か</li><li>Kubernetesにおける自動修復（セルフヒーリング）の仕組み</li><li>Kubernetesのリソースとマニフェスト（コンテナアプリケーションを実行するための手順を記載したyamlファイル）の結びつき</li></ul><p>第4章では主に説明を、第5章では実際に手を動かす部分を主に記載しています。<br>第5章で実際に手を動かしつつ、第4章に戻って確認することで仕組みがどう実現されているか理解が深まりました。</p><h2 id="ローカル開発とCI-x2F-CD（第6章・第7章）"><a href="#ローカル開発とCI-x2F-CD（第6章・第7章）" class="headerlink" title="ローカル開発とCI&#x2F;CD（第6章・第7章）"></a>ローカル開発とCI&#x2F;CD（第6章・第7章）</h2><p>ローカル開発を効率的にするツールの紹介及びコンテナアプリケーション開発におけるCI&#x2F;CDについて説明されています。</p><p>本章では、以下の点を学ぶことができます。</p><ul><li>DokcerfileやKubernetesのマニフェストを加味したCI&#x2F;CD</li><li>CIOpsとは？GitOpsとは？</li><li>GitHub Actionsを利用したコンテナアプリケーション開発のCI&#x2F;CD</li></ul><p>普段、業務ではGitLabを利用しているため、GitHub Actionsワークフローの作成と実行が丁寧に記載あって助かりました。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>Docker・Kubernetesに関する基礎を固めるためには、とても良い書籍だと思いました。<br>サンプル付きで、<code>docker</code>コマンドや<code>kubectl</code>コマンドとコンテナ技術の仕組みを結びつけながら理解することができました。<br>DockerやKubernetesを少し触ったことがあり、もう一歩理解したい方におすすめです。</p><p>次は澁川さんの<a href="/articles/20231116a/">Python Distillesは幅広い人にPythonの基礎を叩き込む本</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">医療・ヘルスケア分野での案件や新規ビジネス創出を担う、2020年に誕生した事業部です。設立エピソードは、以下記事をご覧ください。<a href="https://note.future.co.jp/n/n8b57d4bf4604">&quot;新規事業の立ち上げ　フューチャーの知られざる医療・ヘルスケアへの挑戦&quot;</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">学習基盤に関する記事は、以下記事をご覧ください。<a href="https://future-architect.github.io/articles/20210115/">MLOpsことはじめ ～実験管理導入と学習基盤の構築～</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">Trivy. Dockerイメージの脆弱性を検知するOSS<a href="https://github.com/aquasecurity/trivy">https://github.com/aquasecurity/trivy</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Kubernetes/">Kubernetes</category>
      
      <category domain="https://future-architect.github.io/tags/Docker/">Docker</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/Docker%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E9%96%8B%E7%99%BA%E3%83%BB%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E3%81%AE%E5%9F%BA%E6%9C%AC/">Dockerコンテナ開発・環境構築の基本</category>
      
      
      <comments>https://future-architect.github.io/articles/20231115a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「TEAM GEEK」を読んでメンバー視点で良いチームについて考える</title>
      <link>https://future-architect.github.io/articles/20231114b/</link>
      <guid>https://future-architect.github.io/articles/20231114b/</guid>
      <pubDate>Mon, 13 Nov 2023 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20231030a/">秋のブログ週間2023</a>、11本目です。</p><p>ITコンサルタントになって2年目。自分のタスクだけでなく周りも見えるようになってきた中で、「個人の技術」だけでなく「チームとしての地力」がプロジェクトの成功にとって、大きな役割を占めていると改めて感じることが増えてきました。そのため今回は、ITの現場におけるチームワークについての本を読もうとアマゾンを開いて一番に出てきた<a href="https://www.oreilly.co.jp/books/9784873116303/">Team Geek</a>を読んだ感想や自分の思考を共有します。</p><h2 id="本を読む前に考えていたこと"><a href="#本を読む前に考えていたこと" class="headerlink" title="本を読む前に考えていたこと"></a>本を読む前に考えていたこと</h2><p>実際にITの現場に参画するまでは、他の業界よりドライで対面のコミュニケーションは少なく、成果物がより多くのことをものがたる現場だと思っていましたが、いざ飛び込んでみるとむしろ他の業界よりもより強力なチームとしての力が求められているのではないかということをひしひしと感じています。</p><p>他業界に進んだ友人の話を聞いていると営業などでは個人としての成績が全てで、お客さんとのコミュニケーションは重要なものですが、それはサービスを購入してもらうために関係づくりの一環で、チームとしてのそれとは違うものです。</p><p>それに対して、ITの現場では一つの成果物を大勢で作るにあたっての協力体制としての性質を持ったコミュニケーションが必要になるため、チームワークとしてどのように人と関わるかが重要になってきます。<br>ではそこで、「１メンバーである自分がどのようにチームにいい影響を与えられるのか？」、そう言ったことを求めてこの本を手に取りました。</p><p><strong>今回の目的</strong></p><ul><li>ITの現場における「いいチーム」を確認する</li><li>理想のリーダー像からチームにとって優良なメンバーを逆算する</li></ul><h2 id="結論ファースト：いいチームの定義"><a href="#結論ファースト：いいチームの定義" class="headerlink" title="結論ファースト：いいチームの定義"></a>結論ファースト：いいチームの定義</h2><p><em><strong>いいチームとは『強い文化』があるチーム</strong></em><br><em><strong>その文化はHRT(Humility:謙虚、Respect:尊敬、Trust:信頼)がベースになっている必要がある</strong></em></p><h2 id="ITの現場における「いいチーム」とは何か？"><a href="#ITの現場における「いいチーム」とは何か？" class="headerlink" title="ITの現場における「いいチーム」とは何か？"></a>ITの現場における「いいチーム」とは何か？</h2><h3 id="誰がチームを作ってる？"><a href="#誰がチームを作ってる？" class="headerlink" title="誰がチームを作ってる？"></a>誰がチームを作ってる？</h3><p>多くの人がいいチームとは、高いスキルを持ち合わせたメンバーを、さらに優秀かつ統率力に長けたリーダーがまとめ上げることで、できると考えているかもしれません。（あるいは自分のタスクだけを考えていて、チームとしてのそもそも完成度は意識していないかも…）</p><p>個々のメンバーが与えられたタスクをミス無くこなし、最終段階で全員が作ったものを機械的に組み合わせることで良いプロダクトが完成するならそれで問題ないかもしれません。</p><p>しかし多くの人が経験しているように、メンバーはミスをするし、バグの修正、結合のゴタゴタなどで現実はそう甘くありません。</p><p>筆者は優秀なチームを作り上げるのは優秀なリーダーではなく、「強い文化」だと言います。</p><h3 id="強い文化とは"><a href="#強い文化とは" class="headerlink" title="強い文化とは"></a>強い文化とは</h3><p>本書で定義されている「強い文化」はHRT(Humility:謙虚、Respect:尊敬、Trust:信頼)が根付いている状態とされています。こうした文化はチームリーダーが作るわけではなくメンバー全員んが作るべきものであり、そのようにして作られた文化は、チームが同じミスを犯すことを防ぎ、チームにとって有害な人からチームの生産性を守ってくれます。さらには望ましい文化を持ったチームには似た性質を持つ優秀な人材が引き寄せられるため、より生産的で強固なチームが出来上がります。</p><p>上記に挙げられたHRTの３項目はごく当たり前のように聞こえます。大人として当然のことでしょうと。ただ、反例を探せと言われたら、身近にすぐに見つかるのではないでしょうか？（私はあります…）</p><p>問題にぶつかっても一人で抱え込んでしまうメンバーがいたり、コードへのレビューを自分への攻撃を思い込んで凹んでしまったり..。</p><p>それではどうのように対処し、「強い文化」を作ればいいのでしょうか？</p><h2 id="強い文化を作るには"><a href="#強い文化を作るには" class="headerlink" title="強い文化を作るには"></a>強い文化を作るには</h2><p>先に定義された「強い文化」をチームに根付かせるために意識必要なポイントについていくつか抜粋して紹介させていただきます。</p><ul><li><strong>エゴを捨てる</strong><br>わかりやすい例は、コードレビューの時に、指摘を建設的なものにするために自己主張を捨てる（技術の差を見せつけるようなマウントまがいのレビューはしない）、逆に指摘をもらう際に「自分は自分が書いたコードではない」と認識して、過剰に反応することなく、謙虚に受け入れる、といったことです。個人ではなくチームとしてのミッションにフォーカスすることが必要とされています　</li><li><strong>非同期のコミュニケーション</strong><br>ミーティングの参加人数を減らし、チャットや課題管理ツールを広く共有することで情報の風通しと効率が向上し、よりチームが集中すべきものに力を注げるようになります。ただ筆者は対面でのコミュニケーションをおろそかにすべきではないとも注意喚起しています。情報の共有を広げることはツールを利用することで可能になりますが、よりメンバー間に文化を染み込ませ強固にるために対面でのコミュニケーションは必要なものとされています。</li><li><strong>合意ベースでプロジェクトを進める</strong><br>意思決定プロセスでメンバーが責任を持てるようにすることで文化の根付きを強化することができます。トップダウン型のチームでは、優秀なリーダーがそうでないメンバーにオーダーする形になり、メンバーの自己選択機会が奪われてしまい、各メンバーが文化を作ることに役割を持てなくなるため、「強い文化」は育ちません。また、優秀なメンバーは裁量範囲の広いチームを好むため、チームのレベルがますます上がる傾向になります。</li></ul><h2 id="強い文化を作れるチームリーダーとメンバーとは？"><a href="#強い文化を作れるチームリーダーとメンバーとは？" class="headerlink" title="強い文化を作れるチームリーダーとメンバーとは？"></a>強い文化を作れるチームリーダーとメンバーとは？</h2><p>ここまでいいチームの定義とその中核である「強い文化」について確認してきましたが、ここからさらに解像度を上げて、強い文化を作れるチームリーダーとはどのようなリーダなのかを掘り下げながら、そこから逆算して、リーダーと化学反応を起こし「強い文化」づくりに貢献できるメンバー像について考えていきたいと思います。</p><h3 id="エゴを捨てる"><a href="#エゴを捨てる" class="headerlink" title="エゴを捨てる"></a>エゴを捨てる</h3><p>エゴからの脱却は強い文化づくりの中で言及されていましたが、いいチームリーダーについて語る際にも再度登場します。それほどチームにとって大事なことであり、リーダーにとってはメンバーを信頼してマイクロマネジメントしないことがこれに当たります。</p><p>いいチームリーダーになるために、すべての事象を正しく把握して、ことごとく正していく必要はなく、メンバーへの「質問」を駆使することで、メンバーに責任感を芽生えさせろとあります。</p><ul><li>逆算される理想のメンバー像<ul><li>不安を抱かせず、やり切る力を持っているメンバー</li></ul></li><li>説明<ul><li>リーダーが不安になりそうなポイントを先回りして解消し、いちいち確認されずとも何を行なっているかが伝わる透明性を保ち、自分でタスクを推進できる姿を見せることでリーダーは意思決定に集中でき、メンバーはより裁量を持って仕事ができるようになります</li></ul></li></ul><h3 id="振る舞って欲しいように人を扱う"><a href="#振る舞って欲しいように人を扱う" class="headerlink" title="振る舞って欲しいように人を扱う"></a>振る舞って欲しいように人を扱う</h3><p>筆者はメンバーを信頼していないことを伝えたいのなら、メンバーを子供のように扱いなさい、と言っています。人は扱われたように振る舞ってしまう習性があるためです。</p><p>そのためリーダーが子供のように扱えば言われたことしかせず、自立性を持った人間として扱えば期待以上の成果を持ってくることもあるとされています。</p><ul><li>逆算される理想のメンバー像<ul><li>一段階上の働きを想像させられるメンバー</li></ul></li><li>説明<ul><li>逆に言えば、意識的に扱われたいように振る舞うことが重要になります。任せられたタスクを期待以上の成果で応えることができれば、自分の能力を示し、リーダーがより大きな裁量権を与えたときにそのメンバーがどのような働きをしてくれるか想像できるようになます。書籍の中でも、自分の責任範囲を広げようとすることで、自分とチームのレベルの底上げにつながるとされています</li></ul></li></ul><h3 id="幸せを追い求める"><a href="#幸せを追い求める" class="headerlink" title="幸せを追い求める"></a>幸せを追い求める</h3><p>「強い文化」を作るリーダーはメンバーの心理状態を良い状態で保つことが上手いアマチュアの心理学者であると本書では言われています。</p><p>定期的なレクリエーションや、すれ違った際の会話でメンバーのストレスやプレッシャーを解消することがリーダーには求められます。</p><ul><li>逆算される理想のメンバー像<ul><li>感情を発信するメンバー</li></ul></li><li>説明<ul><li>メンタル面のケアをする側にとって難しいことは、ケアの手段が適切かどうかが受け取る人間によって変わる点です。メンバー側から現在の状態を発信することで、チームの中の適切なコミュニケションの形を双方から擦り合わせることができ、各個人の負担軽減やチームのパフォーマンス向上につながります</li></ul></li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>「Team Geek」を通して理想のチームの姿とリーダー像を再確認し、そこから逆算してメンバーに求められるものについて考えてみました。</p><p>チームを題材にした書籍ではリーダーの責務やミッションステートメントのような大きなテーマについて主に語られることが多い気がしていて、読み終わった後に、「結局何からすればいいんだ？」となりがちでしたが、ITという領域に絞り、さらにチームの文化に焦点を当てられていたこの本はチームのレベルを上げるために１メンバーができることをイメージしやすかったです。</p><p>技術力を上げていくのはもちろんんですが、チームとして捉えた時に、貢献できる余白を明確に見つけることができたので、曖昧にながちなチーム力に対しての取り組みですが、一つずつ実践して効果があるか確かめていきたいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Management/">Management</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88/">マネジメント</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%BC%E3%83%80%E3%83%BC%E3%82%B7%E3%83%83%E3%83%97/">リーダーシップ</category>
      
      <category domain="https://future-architect.github.io/tags/TeamGeek/">TeamGeek</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC%E3%82%B7%E3%83%83%E3%83%97/">メンバーシップ</category>
      
      
      <comments>https://future-architect.github.io/articles/20231114b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CloudWatch Logsサブスクリプションフィルター・SQSを用いたログ監視</title>
      <link>https://future-architect.github.io/articles/20231114a/</link>
      <guid>https://future-architect.github.io/articles/20231114a/</guid>
      <pubDate>Mon, 13 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;アルバイトとしてTIGに所属しております内田です。&lt;/p&gt;
&lt;p&gt;当チームでは、従来はCloudWatch</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>アルバイトとしてTIGに所属しております内田です。</p><p>当チームでは、従来はCloudWatch Logsに出力されたエラーや警告ログを数分毎にポーリング監視し、特定の文字列を検知することをトリガーにBacklogに起票することにより、いち早くエラーの対応ができるようにしていました。</p><p>しかし、監視対象のロググループなどは、そのログ監視ツールの環境変数に個別で設定する必要があり、デプロイするリソースが増えるたびにTerraform側の環境変数を追加するといった、同期を取る必要があり面倒でした。また、Backlog起票対象の文字列が存在しない場合もLambdaが着火し続けるため、コスト的にも問題がありました。</p><p>これをCloudWatch LogsサブスクリプションフィルターとSQSを用いることにより、課題だった環境変数の個別指定をなくすように仕様に改修しました。</p><p>この開発を通して得た、SQSとCloudWatchの連携についての知見を共有したいと思います。</p><h1 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h1><img src="/images/20231114a/fig.drawio.png" alt="fig.drawio.png" width="941" height="467" loading="lazy"><p>サブスクリプションフィルターで抽出されたログを、Lambda関数経由でSQSに挿入します。</p><p>Backlogに課題を追加するLambda関数は、一定時間おきにSQSに格納されているログを確認しに行き、全てのメッセージを読み込みます。</p><p>読み込んだメッセージは、所定のフォーマットに従ってBacklogに追加します。</p><h3 id="なぜSQSを経由させたのか？"><a href="#なぜSQSを経由させたのか？" class="headerlink" title="なぜSQSを経由させたのか？"></a>なぜSQSを経由させたのか？</h3><p>サブスクリプションフィルターの機能だけをみると、わざわざSQSを経由する必要はないように思えます。</p><p>ところが、実際にSQSを使わないとログが出力される度に逐一Lambda関数が立ち上がり、Backlog APIのアクセス数が急劇に増えてしまう危険性があります。</p><p>また、ログの各行に対して課題が起票されるため、ログの量によってはとんでもない数の課題が増えてしまいます。今回のBacklogの起票方針としては、1エラー（警告）文字列に付き1件ではなく、同一のエラー（警告）コードであれば、1つだけチケットを起票し、内容はそのチケット内になるべく追記していきたいという要件のため、逐次起動ではミスマッチでした。</p><p>そこで、ログを一旦キューに保管し、ある程度時間が経った後に別のLambda関数に渡す設計にしています。</p><h1 id="CloudWatch-Logsサブスクリプションフィルターの設定"><a href="#CloudWatch-Logsサブスクリプションフィルターの設定" class="headerlink" title="CloudWatch Logsサブスクリプションフィルターの設定"></a>CloudWatch Logsサブスクリプションフィルターの設定</h1><p>当然ですが、ログが出力されたらなんでもかんでもBacklogに通知すればよいというものではありません。</p><p>状況にもよりますが、よくあるケースとしては、エラーや警告など対応が必要なものだけ通知したいケースが挙げられます。ここで、サブスクリプションフィルターにフィルターパターンを登録することにより、条件を満たしたログのみをトリガーにすることができます。</p><p>当プロジェクトでは、<a href="https://github.com/rs/zerolog">zerolog</a>というロギングライブラリを用いてログを出力しているため、ログは以下のようなjson形式であることが保証されています。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;traceID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx-xxx-xxx&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span><span class="string">&quot;1970-01-01T00:00:00Z&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;info&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;Hello, world!&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>level</code>の値が<code>warn</code>、<code>error</code>、<code>fatal</code>の何れかのものを対象とするにはフィルターパターンを以下のように設定します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;$.level = %warn|error|fatal%&#125;</span><br></pre></td></tr></table></figure><p>正規表現を用いているため、状況によってより複雑な条件を指定することもできます。</p><p>送信先はSQSにプッシュするLambda関数に設定します。</p><h1 id="SQSのキューの種類"><a href="#SQSのキューの種類" class="headerlink" title="SQSのキューの種類"></a>SQSのキューの種類</h1><p>SQSには、「標準キュー」と「FIFOキュー」があり、違いは以下の通りです。</p><div class="scroll"><table><thead><tr><th>#</th><th>標準キュー</th><th>FIFOキュー</th></tr></thead><tbody><tr><td>順序性</td><td>順序の保証なし</td><td>First In First Out</td></tr><tr><td>メッセージの配信回 数</td><td>1回以上（2回以上配信される場合も多い）</td><td>1回のみ</td></tr><tr><td>コスト</td><td>USD 0.24~0.40 &#x2F; 100万回</td><td>USD 0.35~0.50 &#x2F; 100万回</td></tr></tbody></table></div><p>ここでは標準キューを採用しました。</p><p>ログの重複に関しては、コード内で重複を削除すれば良いです。また、ログには時間が含まれているため、これを用いることによりログの順序が分かります。</p><h1 id="メッセージを取得"><a href="#メッセージを取得" class="headerlink" title="メッセージを取得"></a>メッセージを取得</h1><p>AWS SDKで用意されている<code>ReceiveMessage</code>関数を用いればよいですが、1回あたり10件までしかメッセージを取得できないので、ループで回し続けます。</p><p>Simple Queue Serviceという名前をしていますが、キューからメッセージを取得してもメッセージはすぐには消えません。メッセージ保持期間が過ぎるまでは、キュー内にメッセージは残り続けます。従って、別途削除する処理が必要です。</p><p>削除するには、メッセージを取得した際にデータに含まれている<code>ReceiptHandle</code>を渡す必要があります。</p><p>以下は一連の処理をまとめたものです。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sqs := sqs.New(session.Must(session.NewSession()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> messages []*sqs.Message</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    res, err := sqs.ReceiveMessage(&amp;sqs.ReceiveMessageInput&#123;</span><br><span class="line">        QueueUrl:            &amp;queueUrl,</span><br><span class="line">        MaxNumberOfMessages: aws.Int64(<span class="number">10</span>),</span><br><span class="line">        WaitTimeSeconds:     aws.Int64(<span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(res.Messages) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, res.Messages...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, message := <span class="keyword">range</span> messages &#123;</span><br><span class="line">    _, err := sqs.DeleteMessage(&amp;sqs.DeleteMessageInput&#123;</span><br><span class="line">        QueueUrl:      &amp;queueUrl,</span><br><span class="line">        ReceiptHandle: &amp;receiptHandle,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>あとは、Backlog APIを用いて取得したデータを送信するだけです。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>CloudWatch LogsサブスクリプションフィルターとSQSの連携について紹介いたしました。</p><p>SQSに関しては、別途データを削除する処理が必要な点が初見だとわかりにくいところだったので、その点も含めて参考になれば幸いです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/SQS/">SQS</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AD%E3%82%B0%E7%9B%A3%E8%A6%96/">ログ監視</category>
      
      <category domain="https://future-architect.github.io/tags/CloudWatch/">CloudWatch</category>
      
      
      <comments>https://future-architect.github.io/articles/20231114a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>秋の夜長に：魔法使いが夜更かしする場所</title>
      <link>https://future-architect.github.io/articles/20231113a/</link>
      <guid>https://future-architect.github.io/articles/20231113a/</guid>
      <pubDate>Sun, 12 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231113a/71J4AMIBjlL._SL1500_.jpg&quot; alt=&quot;&quot; width=&quot;974&quot; height=&quot;1500&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231113a/71J4AMIBjlL._SL1500_.jpg" alt="" width="974" height="1500" loading="lazy"><p><a href="/articles/20231030a/">秋のブログ週間2023</a>、本日から3週目に突入です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG所属の大野です。</p><p>秋をすっ飛ばしてめっきり寒くなってきた今日このごろですが、読書の秋ということで、以前から気になっていた『<a href="https://www.amazon.co.jp/dp/4756134793">インターネットの起源</a>』（原題『Where Wizards Stay Up Late: The Origins Of The Internet』 ）を読んでみたいと思います。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>本書は、1960年代から1980年代にかけてのインターネット黎明期のアメリカを、数多の書籍や記事、論文、そして関係者へのインタビューを元に描いた、いわばインターネットの歴史書です。</p><p>歴史書といっても、重要な出来事を時系列に沿って整理したような堅い読み口ではなく、インターネットの生みの親たちのリアルな会話を中心に構成されたドキュメンタリーのような趣で、読み物としても大変面白かったです。</p><p>本書の構成としては、インターネットの前身であるARPANETの誕生から各種プロトコルの作成、他ネットワークとの連携によるインターネットへの成長、そしてARPANETの終焉までを、全8章に分けて記述しています。</p><p>各章の概要と印象に残った箇所を紹介します。</p><h2 id="第1章-即断即決で100万ドル"><a href="#第1章-即断即決で100万ドル" class="headerlink" title="第1章 即断即決で100万ドル"></a>第1章 即断即決で100万ドル</h2><p>第1章では、ARPANETの生みの親たるアメリカ国防総省ARPA（国防高等研究計画局）およびIPTO（情報処理技術研究室）の創設経緯、そしてIPTO初代部長であるJ・C・R・リックライダーによるコンピュータ・ネットワークの構想について語られています。</p><p>元々音響心理学者であったリックは、当時もっぱら計算機としての利用が主流であったコンピュータについて、その対話的利用が人間にもたらす計り知れない恩恵を予見していました。</p><p>本章では、リックが政治プロセスを例にコンピュータおよびコンピュータ・ネットワークの有用性を説いた話が紹介されています。</p><blockquote><p>（前略）リックは、将来コンピュータに手が届くようになれば、多くの市民が「政府の政策決定過程に関する情報を得て、興味をもち、そこにかかわるようになる」と考えていた。（中略）<br>「政治は基本的に大規模な電話会議を通じておこなわれ、選挙運動は候補者と広報担当者、評論家、政治行動グループそして有権者のあいだの数ヶ月におよぶ一連のコミュニケーションになるであろう。そのカギを握るのは自発的な積極性であり、それには良質のコンソール、良質のネットワーク、良質のコンピュータを通じて得た情報を真に対話的に扱える環境が必要である」</p></blockquote><p>誰もがスマートフォンを持ち歩き、ソーシャルメディアで世界中と瞬時につながる現在の世界をリックは正しく予言していました。</p><p>彼が「真のインターネットの父」と言われる所以がよく分かる内容でした。</p><h2 id="第2章-大聖堂を建てたのは誰か"><a href="#第2章-大聖堂を建てたのは誰か" class="headerlink" title="第2章 大聖堂を建てたのは誰か"></a>第2章 大聖堂を建てたのは誰か</h2><p>第2章では、ARPAのラリー・ロバーツによるARPANETプロジェクトの発足、そしてポール・バランおよびドナルド・デイヴィスにより、偶然にも同時期に全く別の場所でそれぞれに発明された「パケット交換」の概念について語られています。</p><p>よく「インターネット（の前身であるARPANET）は軍事目的で開発された」という風説を耳にします。本章を読む限り、ARPAが国防総省の機関であること、そしてARPANET構想の技術的概念を形作ったバランが核攻撃時も可用性を失わない通信システムの必要性を強く意識していたことがこの風説の形成に影響しているのではないかと思いました。</p><p>実際のところ、ARPANETプロジェクトは研究者間の資源共有による経費削減というARPAの思惑に端を発していたとわかり、その現実的な理由にクスリとしてしまいました。</p><h2 id="第3章-第3の大学"><a href="#第3章-第3の大学" class="headerlink" title="第3章 第3の大学"></a>第3章 第3の大学</h2><p>第3章では、「第3の大学」と呼ばれたBBN社の歴史、この小さな会社がARPAとのIMP開発の契約を勝ち取るに至った経緯が語られています。</p><p>IMPとは「Interface Message Processor」の略で、現在でいうルータにあたるような装置です。もちろんこの時代にそのような機器の前例はないため、IMP開発は難易度も不確定性も極めて高いものでした。そんなシビアなプロジェクトの管理者であったBBN社のフランク・ハートは、効率的なエンジニアリング・チームを編成するため、以下のような方針を取ったといいます。</p><blockquote><p>彼が求めたのは、個人的な課題よりも共通の目標の達成に力を注ぐような人材だった。誰もがつねにほかのメンバーたちと話し合えるようにチームを少人数に抑え、自分のしごとを個人的な責務として引き受けられる人びとを選んだ。特異な面は大目にみてはいたが、どれほど頭がよくても自己中心的な”変人”は退けた。</p></blockquote><p>現在でも通じる価値観であり、思わずチームメンバとしての我が身を省みた部分です。</p><h2 id="第4章-プログラムと格闘する日々"><a href="#第4章-プログラムと格闘する日々" class="headerlink" title="第4章 プログラムと格闘する日々"></a>第4章 プログラムと格闘する日々</h2><p>第4章では、BBN社によるIMP初号機作成の苦難について語られています。</p><p>初期のIMPはハネウェル社のDDP-516というミニコンピュータ（といっても冷蔵庫くらいの大きさ）をベースに作成されました。ところが、ハネウェル社から納品された516は発注内容とまるで違っていて……といったように、トラブル続きの現場の雰囲気が感じられてとても臨場感がある内容です。</p><p>IMP初号機納入の期日が刻々と迫る中、オシロスコープと配線ツールを手に、数ナノ秒ほどのごく一瞬の同期システムの異常パターンを探すシーンは、想像するだけで胃が痛くなります。</p><h2 id="第5章-トゥルート宛必着"><a href="#第5章-トゥルート宛必着" class="headerlink" title="第5章 トゥルート宛必着"></a>第5章 トゥルート宛必着</h2><p>第5章では、初めてのARPANETの実地試験、そしてスティーブ・クロッカーとヴィント・サーフらによるホスト間通信のためのプロトコル設計の取り組みについて語られています。</p><p>本章では、研究者や大学院生などのARPANET関係者らが、対等な開かれた議論の場の中でプロトコルについての合意を形成していったそのプロセスが印象的でした。その最たる例として紹介されているのが、クロッカーの考案した意見表明の手段である「RFC（Request For Comments）」です。</p><p>クロッカーが<a href="https://datatracker.ietf.org/doc/html/rfc1">RFC1</a>をバスルームにこもって徹夜で書き上げたときのエピソードが紹介されていました。</p><blockquote><p>彼は思慮深く、周囲に気を遣う青年だった。「僕らの書いたものが”公式の”プロトコルを設計する人たちの気分を害するんじゃないかって、ものすごく心配した」。（中略）彼は、自分の言わんとすることそのものよりも、その口調を間違えないように気遣った。「基本的な大原則は、誰もが自由に発言でき、”これが公式見解だ”というものはないってことだ」</p></blockquote><p>RFCによる技術仕様の共有は今日まで続くシステムではありますが、今日のRFCが「ひと通りの議論を終えた標準仕様を公開するための文書」といった色を持つのに対し、初期のRFCは字義通り「議論のための叩き台」であったことがうかがえます。</p><h2 id="第6章-ハッキングと喧騒と"><a href="#第6章-ハッキングと喧騒と" class="headerlink" title="第6章 ハッキングと喧騒と"></a>第6章 ハッキングと喧騒と</h2><p>第6章では、ARPANETの拡大や端末IMP（TIP）の作成、TelnetとFTPの作成、そして第1回ICCC（コンピュータ通信国際会議）でのARPANETのお披露目会について語られています。</p><p>ARPANETのお披露目は、ワシントンのヒルトンホテルに設置された多種多様な端末機器をARPANETのTIPと接続し、アメリカ各地に散らばったARPANETサイトのホスト・コンピュータとリアルタイムに通信するデモンストレーションの形で行われました。</p><p>特に参加者の目を引いたデモとして、対話式の英会話プログラムPARRYとDoctorが紹介されていました。PARRYはパラノイア患者の思い込みを、Doctorは精神科医の行動を模倣するプログラムです。</p><p>サーフらがおもしろ半分にこの2つのプログラムをARPANETを介して「対話」させた記録が<a href="https://datatracker.ietf.org/doc/html/rfc439">RFC439</a>として公開されています。全体的にとんちんかんではありますが、部分的には患者と医師としての会話が成立しているようにも見えて面白いです。</p><h2 id="第7章-電子メール"><a href="#第7章-電子メール" class="headerlink" title="第7章 電子メール"></a>第7章 電子メール</h2><p>第7章では、ARPANETにおける電子メール利用の急速な拡大、そして電子メールがARPANETの主要な用途へなっていく流れが語られています。</p><p>特に印象的だったのは、Dungeons and Dragonsという最古のTRPGを元にウィル・クラウザーが作成し、のちにドン・ウッズにより改良された、Adventureというコンピュータ・ゲームに関するエピソードです。改良版のAdventureはスタンフォードAI研究所のコンピュータ上で誰にでも自由に公開され、また作者たちも海賊版の作成を推奨していたため、多くのARPANETユーザは寝不足になりながら夢中でこのゲームを遊びました。</p><p>この時点では政府の持ち物であるはずのARPANET上では、しかしながら国防とは何ら関係のない私的で自由な利用が実質的に認められていたことが分かります。</p><p>実際、ARPANETにおいて電子メールがここまで広く普及・成功した要因として、ビジネス用途以上にプライベートなコミュニケーションツールとしての魅力が大きかっただろうことは想像に難くありません。用途や目的を制限しない、自由で開放的なネットワーク文化が、ネットワーク技術の成長を加速させたのだと感じました。</p><h2 id="第8章-手にしたロケット"><a href="#第8章-手にしたロケット" class="headerlink" title="第8章 手にしたロケット"></a>第8章 手にしたロケット</h2><p>第8章では、ロバート・カーンとヴィント・サーフによるTCP&#x2F;IPの作成、ロバート・メトカーフによるイーサネットの発明、DNSの開発、そしてインターネットの成長が語られています。</p><p>ネットワーク接続の標準仕様を巡る、ISO（国際標準化機構）擁するOSI参照モデルとTCP&#x2F;IPとの競争はとても興味深かったです。</p><p>OSI参照モデルは、アメリカにおいてもヨーロッパ諸国においてもネットワーク接続の公式標準として採用されました。しかし、開放的なネットワーク文化に親しんだインターネット・コミュニティの参加者たちは、クローズドな机上の理論であるOSIモデルに反対し、ある種の非合法活動のようなかたちでTCP&#x2F;IPを採用する動きが広がりました。</p><p>当時人気のオペレーティング・システムであったBSD UNIXがTCP&#x2F;IPを組み込んだこと、そしてイーサネットの発明とLANの爆発的な普及に助けられ、ARPANETおよびARPANETの通信プロトコルであるTCP&#x2F;IPは、公式標準であるOSIモデルを凌駕する巨大なネットワーク基盤を構成するに至りました。</p><p>あるTCP&#x2F;IP推進派のコンピュータ科学者の印象的なセリフを引用します。</p><blockquote><p>「標準とは合意によって形成されるもので、命令で作られるものではない」</p></blockquote><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>インターネット黎明期のおおらかでオープンな空気感が伝わってきて、当時を追体験しているかのような感覚でワクワクしながら読み進めることができました。<br>また、プロジェクト運営の哲学や技術開発に対する態度など、ITコンサルタントとして備えておきたいマインドセットという観点でも学ぶところが多くありました。</p><p>惜しむらくは、本書は現在ほとんど流通していないことです……。原著であればまだ入手できますので、英語が得意な方はぜひ読んでみてください！<br>（私のように英語を見ると蕁麻疹が出そうになる方は、図書館を探してみると翻訳書が見つかるかもしれません）</p><p>最後に、本書の中で最もお気に入りのフレーズを紹介して終わりたいと思います。</p><blockquote><p>技術における進歩は、往々にしてありふれた営為から生まれる。研究者たちは、新たな技術を用いてふだんどおりのことができることを示し、新たな技術への信頼を醸成する。信頼が生まれると人間はさらに大きな可能性を考え、そして次の段階へと進んでいく。変化を受け止めていくうちに、人びとのなかでは次の世代の構想がはぐくまれていくのである。</p></blockquote><p>明日は、工藤さんの<a href="/articles/20231114b/">「TEAM GEEK」を読んでメンバー視点で良いチームについて考える</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%8D%E3%83%83%E3%83%88/">インターネット</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%8D%E3%83%83%E3%83%88%E3%81%AE%E8%B5%B7%E6%BA%90/">インターネットの起源</category>
      
      
      <comments>https://future-architect.github.io/articles/20231113a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「良いコード／悪いコードで学ぶ設計入門」を読んで良いコードとは何かを知る</title>
      <link>https://future-architect.github.io/articles/20231110a/</link>
      <guid>https://future-architect.github.io/articles/20231110a/</guid>
      <pubDate>Thu, 09 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231110a/image.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;840&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231110a/image.png" alt="" width="600" height="840" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、新卒2年目・TIG所属の栗栖です。</p><p><a href="/articles/20231030a/">秋のブログ週間2023</a>の9本目です。</p><p>コードレビューで拡張性・保守性の観点からご指摘を頂いたことをきっかけに、今後の実装を改善すべく、<a href="https://www.amazon.co.jp/dp/B09Y1MWK9N/">良いコード／悪いコードで学ぶ設計入門―保守しやすい　成長し続けるコードの書き方</a>という書籍を読みました。</p><p>書籍の指す「良いコード」とは何かについてと、個人的に印象に残った箇所を紹介したいと思います。</p><h2 id="良いコードとは"><a href="#良いコードとは" class="headerlink" title="良いコードとは"></a>良いコードとは</h2><p>書籍には低凝集、高凝集という単語が頻繁に登場しており、凝集度（ぎょうしゅうど）をコードの善し悪しを評価する指標としています。</p><blockquote><p>凝集度とは、「モジュール内における、データとロジックの関係性の強さを表す指標」です。<br>高凝集な構造は、変更に強い、望ましい構造です。逆に低凝集な構造は、壊れやすく変更が困難です。</p></blockquote><p>つまり良いコードとは高凝集な構造で、モジュール間が密接に関わっている状態ということです。<br>悪いコードは低凝集な構造であり、再設計やリファクタリング等を行いデータとロジックの関係性を強化を行う必要があります。</p><h2 id="印象に残った箇所"><a href="#印象に残った箇所" class="headerlink" title="印象に残った箇所"></a>印象に残った箇所</h2><h3 id="可変と不変の取り扱い方針"><a href="#可変と不変の取り扱い方針" class="headerlink" title="可変と不変の取り扱い方針"></a>可変と不変の取り扱い方針</h3><p>変数宣言時に可変にするか不変にするかについては、基本不変で良いみたいです。<br>不変にするメリットとして以下を挙げています。</p><blockquote><ul><li>変数の意味が変化しなくなるので、混乱が抑えられる。</li><li>挙動が安定し、結果を予測しやすくなる。</li><li>コードの影響範囲が限定的になり、保守が容易になる。</li></ul></blockquote><p>フールプルーフ<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の観点からも、可変と比べて高凝集だと思いました。<br>最近では、Rustなど不変がデフォルトの言語が登場しているようです。</p><p>下記ケースの場合は、可変を採用すべきと述べています。</p><ul><li>インスタンス生成に時間がかかり、パフォーマンスが怪しい</li><li>ループカウンタなどスコープが局所的である</li></ul><p>採用ケースがほとんどないのであれば、不変がデフォルトな言語が存在するのも納得しました。</p><h3 id="プリミティブ型に執着しない"><a href="#プリミティブ型に執着しない" class="headerlink" title="プリミティブ型に執着しない"></a>プリミティブ型に執着しない</h3><blockquote><p>ほとんどプリミティブ型だけで「動くコード」を書くことはできるでしょう。しかし、それでは強く関係し合うデータとロジックをうまく凝集できません。このため、バグを埋め込みやすくなったり、可読性が低下したりします。</p></blockquote><p>例えば引数の型をプリミティブ型からクラス型に変換することで、意図しない値渡しを防げたり、クラスに関連性の高いロジックとなるため、高凝集な構造になります。</p><p>プリミティブ型だけで実装せず、クラス設計の習慣をつけたいと思いました。</p><h3 id="フラグ引数"><a href="#フラグ引数" class="headerlink" title="フラグ引数"></a>フラグ引数</h3><blockquote><p>フラグ引数付きのメソッドは、何が起こるか読み手に想像を難しくさせます。何が起こるのか理解するには、メソッド内部のロジックを見に行かなければなりません。可読性が低下し、開発生産性が低下します。</p></blockquote><p>割れているロジックが1つにまとまるので実装しがちだったのですが、明らかに壊れやすく変更が困難なので今すぐやめます。書籍ではDRY原則<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>の誤用とされています。</p><h3 id="外部へ渡す場合はコレクションを変更できなくする"><a href="#外部へ渡す場合はコレクションを変更できなくする" class="headerlink" title="外部へ渡す場合はコレクションを変更できなくする"></a>外部へ渡す場合はコレクションを変更できなくする</h3><blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">class</span> <span class="title class_">Party</span> &#123; </span><br><span class="line">&gt;<span class="comment">// 中略 </span></span><br><span class="line">&gt;<span class="comment">/** <span class="doctag">@return</span> メンバーリスト。ただし要素の変更はできません。*/</span> </span><br><span class="line"> List &lt; Member &gt; members() &#123; </span><br><span class="line">   <span class="keyword">return</span> members.unmodifiableList(); </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></blockquote><p>Javaでは<code>unmodifiableList</code>で読取り専用にし、要素の追加や削除を不可能にできます。</p><p>そのまま外部へ渡すと、勝手な操作をされる可能性から低凝集になってしまうため、他モジュールからの引数を読み取り専用にしたり、変更して欲しくない値を外部に渡す際は必須テクニックだと思いました。</p><h3 id="神クラス"><a href="#神クラス" class="headerlink" title="神クラス"></a>神クラス</h3><blockquote><p>神クラスとは、1クラス内に何千何万行ものロジックを持ち、あらゆる責務のロジックが、乱雑に絡み合うように書き殴られているようなクラスです。<br>開発者の時間を奪い、多大な労苦を与えて疲弊させてしまう、恐ろしい力が宿っています。</p></blockquote><p>巨大なクラスは責務ごとに分割し、メインロジックは100行を超えない程度を目安とします。</p><p>名前が付いていたことに驚きました。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>文字がぎっしりと詰まったような書籍でなく、簡単なソースコードを例にして説明されていたため読みやすかったです。</p><p>16章では<a href="https://future-architect.github.io/coding-standards/documents/forJava/">Futureのコーディング規約</a>も紹介されていました。開発環境がJavaの方は実装の参考になると思います。</p><p>今後の設計・開発では凝集度を常に考えながら、拡張性・保守性の高い成果物を目指します！</p><p>次は大野さんの<a href="/articles/20231113a/">魔法使いが夜更かしする場所</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">人がミスをしようとしてもできないようにする工夫</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">重複を防ぐ考え方</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0/">リファクタリング</category>
      
      
      <comments>https://future-architect.github.io/articles/20231110a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「自在化身体論」の読書感想文</title>
      <link>https://future-architect.github.io/articles/20231109a/</link>
      <guid>https://future-architect.github.io/articles/20231109a/</guid>
      <pubDate>Wed, 08 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;a href=&quot;https://www.amazon.co.jp//dp/4860436857&quot;&gt;
&lt;img src=&quot;/images/20231109a/jisai.jpg&quot; alt=&quot;&quot; width=&quot;499&quot; height=&quot;543&quot;&gt;
&lt;/a&gt;

&lt;h1</description>
          
        
      
      
      
      <content:encoded><![CDATA[<a href="https://www.amazon.co.jp//dp/4860436857"><img src="/images/20231109a/jisai.jpg" alt="" width="499" height="543"></a><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、2022年4月新卒入社、金融グループ所属の森です。</p><p><a href="/articles/20231030a/">秋のブログ週間2023</a>2週目の記事として、<a href="http://www.nts-book.co.jp/item/detail/summary/setubi/20210200_97.html">自在化身体論</a>の感想文を掲載します。</p><p>私はフロントエンドやアルゴリズム関連の書籍を読むことが多いのですが、読書の秋！ということで、思い切って普段は読まないような分野の本を手に取ってみました。</p><h1 id="本の概要"><a href="#本の概要" class="headerlink" title="本の概要"></a>本の概要</h1><p>「自在化身体」という概念や、それに関する研究、技術についての本です。<br>「自在化」の概念は本書で以下のように述べられています。</p><blockquote><p>「 機械によって拡張された能力を、人が自在に扱えること」</p></blockquote><p>想像しやすいところで言えば、人間の筋力を増強する「パワードスーツ」などが「自在化身体」の一つと言えるでしょう。</p><p>しかし、ロボットによる人体の拡張に限らず、バーチャル世界での身体、ひとりで複数の身体を扱うこと、逆に複数人でひとつの身体を制御することなど、「自在化身体」の様々な在り方が紹介されていきます。</p><p>章立てです。</p><p>各章で「自在化身体」の各研究グループのリーダーが自身の経歴や研究の内容、将来像について紹介していく形式になっています。</p><ul><li>第1章　変身・分身・合体まで ― 自在化身体が作る人類の未来</li><li>第2章　身体の束縛から人を開放したい ― コミュニケーションの変革も</li><li>第3章　拡張身体の内部表現を通して脳に潜む謎を暴きたい</li><li>第4章　自在化身体は第4世代ロボット ― 神経科学で境界を超える</li><li>第5章　今役立つロボットで自在化を促す ― 飛び込んでみないと自分はわからない</li><li>第6章　バーチャル環境を活用した身体自在化とその限界を探る</li><li>第7章　柔軟な人間と機械との融合</li><li>第8章　情報的身体変工としての自在化技術 ― 美的価値と社会的倫理観の醸成に向けて</li></ul><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>「パワードスーツ」のような、ロボット工学の話題を中心に構成されていると思っていましたが、バーチャル空間上での身体についての研究や、心理学、脳科学の知見を利用した自在化身体の応用、自在化身体と美的感覚、倫理観の関係など非常に幅広い話題があり驚かされました。</p><p>興味深く感じた話題について紹介します。</p><h2 id="自在と自動"><a href="#自在と自動" class="headerlink" title="自在と自動"></a>自在と自動</h2><p>「自在化」において大切なことは、あくまで人間に新しい能力を授けることだとされています。</p><p>書籍では自動運転技術とドラえもんのタケコプターを比較して説明しています。どちらの技術でもユーザーは移動という目的を達成できますが、自在化で目指すのはタケコプターのように人間に移動能力を付加することです。</p><p>あくまで主体は人間であるという点と、行動の結果のみを重要視しているわけではない点に、単に利便性のための技術にとどまらない可能性を感じて好印象でした。</p><h2 id="第3の腕"><a href="#第3の腕" class="headerlink" title="第3の腕"></a>第3の腕</h2><p>ロボットハンドを体に装着し自由自在に扱えるようにする研究や、ロボットハンドを自身の体から離れたところに設置し動かす研究が紹介されていました。</p><p>ロボットハンドを遠隔操作する場合、操作している腕の位置や角度に応じて操作者の背中に刺激を与えると作業効率が上がる実験結果が得られているそうです。</p><p>ロボットハンドという本来自分の体にないパーツからのフィードバックに脳が対応できる点が非常に興味深かったです。</p><p>この他にも人間の適応能力の高さを利用した研究や、逆に脳がどれだけの身体拡張を許容できるのか調べる研究についても紹介されていました。</p><h2 id="身体感覚の編集"><a href="#身体感覚の編集" class="headerlink" title="身体感覚の編集"></a>身体感覚の編集</h2><p>モーションキャプチャでユーザーの全身の動きを取得し、VR空間上のアバターの動きに反映させるシステムを用いた実験が紹介されていました。</p><p>ユーザーはヘッドマウントディスプレイを通してVR空間上で自身の動きをリアルタイムに観測します。ここで、アバターの表示に遅延を入れる、もしくはアバターの次の動きを予測し、数フレーム先の動作を表示すると、ユーザーは「体が重い」もしくは「体が軽い」という感覚を得るそうです。</p><p>アバターという拡張された身体を経由することで人間の感覚の制御ができる、という話を聞くと、いずれ自身の思い通りに感覚を制御しながら生活ができるのでは？と夢が広がりますね！</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>自分にとって初めての概念が多く登場する本でしたが、具体的な研究内容の紹介や図表による説明が十分にあったため、あまり困ることなく読み進めることができました。</p><p>子供の頃に夢見たSFの世界がすぐそこに迫っている事実にワクワクが止まりません。（書籍の内容ではありませんが、自在化身体研究プロジェクトで作成された<a href="https://jizai-arms.com/">自在肢</a>がカッコイイ…）</p><p>SFが好きな方、VR、ロボット工学、心理学、脳科学に興味がある方など様々な人にオススメできる本です。</p><p>次は栗栖さんの<a href="/articles/20231110a/">リファクタリング本を読んで良いコードとは何かを知る</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%87%AA%E5%9C%A8%E5%8C%96%E8%BA%AB%E4%BD%93%E8%AB%96/">自在化身体論</category>
      
      
      <comments>https://future-architect.github.io/articles/20231109a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>土地勘に頼らずに地の利がある場所をみつける方法</title>
      <link>https://future-architect.github.io/articles/20231108a/</link>
      <guid>https://future-architect.github.io/articles/20231108a/</guid>
      <pubDate>Tue, 07 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231108a/top.jpeg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;640&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;本記事は「&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231108a/top.jpeg" alt="" width="640" height="640" loading="lazy"><p>本記事は「<a href="/articles/20231030a/">秋のブログ週間2023</a>」2週目の記事です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>旅行をするときや引っ越しをするとき、周辺の商業地域や、観光地にアクセスのよい「地の利」のある場所を探したいですよね？</p><p>「地の利」がある場所を探すには、インターネットで調べるか、長らくその地域に住んでいて土地勘のある人に聞くのが一般的ではないでしょうか。</p><p>今回は、<strong>数理的なアプローチで「地の利」の良い場所を見つける方法</strong>を紹介します。</p><ul><li><input checked="" disabled="" type="checkbox"> 「地の利」とは”地形や土地の位置が、ある事をするために有利な条件を備えていること”です（引用:<a href="https://kotobank.jp/word/%E5%9C%B0%E3%81%AE%E5%88%A9-566283">コトバンク</a>）。<strong>本記事では単純に、他の場所へ行きやすい「アクセスが良い場所」のような意味で使っております</strong>。</li></ul><p>本記事は<strong>都市と地域を数理的に分析する楽しさ</strong>を伝えたいという気持ちと、共著『<a href="https://amzn.asia/d/aUFog4S">スマートモビリティ時代の地域とクルマ</a>』を手にとってくれる方が一人でも増えるといいなという邪な気持ちで書いております。</p><h1 id="地利値とは"><a href="#地利値とは" class="headerlink" title="地利値とは"></a>地利値とは</h1><p>アクセシビリティは、電車などのモビリティの発達や、山や川などの自然環境に左右されますが、今回は汎用的な議論を可能にするため、シンプルに<strong>地域と地域の隣接関係</strong>のみに着目します。</p><p>例えば、下図のような３つの隣り合うまちがあるときを考えます。</p><img src="/images/20231108a/例１.png" alt="例１" width="400" height="211" loading="lazy"><p>「この３つのまちから住む場所を選んでください」と命令された場合、真ん中のＢ市がなんとなく「地の利」がある気がしませんか？</p><p>この「なんとなく地の利あるが気がする感覚」を定量化するために「地利値」という概念を用います。詳細は省きますが、下図のような基礎的な<a href="https://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%A9%E3%83%95%E7%90%86%E8%AB%96">グラフ理論</a>で算出できます。</p><img src="/images/20231108a/これが地利値_(1).png" alt="これが地利値_(1).png" width="768" height="547" loading="lazy"><p>例で示した３つの隣り合うまちの場合、B市の地利値が「1.0」で最も高く、地の利のある場所であることが分かります。</p><img src="/images/20231108a/例１の地利値.png" alt="例１の地利値.png" width="400" height="272" loading="lazy"><p>参考として、他の単純な例も示します。</p><img src="/images/20231108a/例2.png" alt="例2.png" width="400" height="138" loading="lazy"><p><del>このように、あるまち（＝交通の結節点）を頂点、まちをつなぐ道を辺としたグラフの隣接行列の最大固有値に属する固有ベクトルを地利値といいます。</del> 今回は難しいことは考えずに、いろいろな地域の地利値を算出して遊んでみましょう。</p><h1 id="地利値で遊んでみる"><a href="#地利値で遊んでみる" class="headerlink" title="地利値で遊んでみる"></a>地利値で遊んでみる</h1><p>それでは実際の地域に地利値を当てはめてみます。例えば、私の卒業した大学がある<strong>茨城県の市町村</strong>で考えると、地利値の高い市はどこになるでしょうか？県庁所在地の水戸市でしょうか？</p><img src="/images/20231108a/茨城県の地利値_(1).png" alt="茨城県の地利値_(1).png" width="768" height="466" loading="lazy"><p>上図のように茨城県で地利値がもっとも高い市は<strong>つくば市</strong>となりました。</p><p>つくば市は2023年の調査では人口増加率が全国トップの2.30%という数字でした<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。東京へのアクセスが良いつくばエクスプレスの駅周辺に子育て世帯が継続的に転入していることが理由のひとつだと思われます。</p><p>地利値を算出するのに鉄道網や経済指標などは加味していませんが、土地勘のある人にとってもある程度納得できる結果なのではないでしょうか？</p><p>他の地域でも地利値を見てみます。例えば私の地元、岩手県。</p><img src="/images/20231108a/岩手県.png" alt="岩手県.png" width="283" height="400" loading="lazy"><p>県庁所在地である<strong>盛岡市</strong>の地利値がもっとも大きくなります。盛岡市は県央に位置しており、周辺市町村からたくさんの人が働きにくる都市です。</p><img src="/images/20231108a/岩手県と秋田県.png" alt="岩手県と秋田県.png" width="282" height="400" loading="lazy"><p>秋田県と並べてみても<strong>盛岡市</strong>の地利値が一番大きいです。西側が海に面している秋田市と比べて地の利があるのは盛岡市なのかもしれません。</p><p>九州に飛んで長崎県ではどうでしょう？</p><img src="/images/20231108a/長崎県.png" alt="長崎県.png" width="282" height="400" loading="lazy"><p><strong>佐世保市</strong>です。Googleで検索すると、県庁所在地である長崎市との対決をあおる記事<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>が複数出てきますので、佐世保市が長崎市に並んで住みやすい市であるという感覚があるようです。</p><img src="/images/20231108a/九州.png" alt="九州.png" width="282" height="400" loading="lazy"><p>九州地方で地利値がもっとも高い場所は<strong>福岡県飯塚市</strong>です。これだけだと少し感覚と外れるかもしれませんが、九州全体でみると<strong>地利値が高い地域は福岡県に集中</strong>しており、政令指定都市2市が位置する福岡県の地の利が読み取れます。</p><p>最後に、全国の市町村で比べてみた時、最も地利値が大きい場所はどこでしょうか？</p><img src="/images/20231108a/長野県松本市_(1).png" alt="長野県松本市_(1).png" width="768" height="386" loading="lazy"><p>ぐちゃっとしていて分かりづらいですが、<strong>長野県松本市</strong>です。松本市と言えば、松本城がありますが、日本で最も地の利がある市と言われてもピンと来ないかもしれません。</p><p>気になる方は松本市の地利値が最も高くなる理由を考えてみてください（投げっぱなし）。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>本記事では、土地勘に頼らずに地の利がある場所をみつけられる「<strong>地利値</strong>」という概念を紹介しました。</p><p>グラフの中心性を図る尺度は他にも様々ありますし<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>、グラフ理論に限らない他のアプローチでも定量的に「地の利」がある場所を探すことが出来るかもしれません。</p><p>地図は眺めたり、分析したりすることで、いつも新しい発見を得られます。本記事を読んで興味を持った方はぜひ探求してみてください。</p><p>共著『<a href="https://amzn.asia/d/aUFog4S">スマートモビリティ時代の地域とクルマ</a>』では、（地利値は出てきませんが）都市と地域の課題を数理的アプローチで分析&#x2F;解決しています。秋の読書候補におすすめです。</p><p>また、本記事冒頭のイラストはBingのImage Creatorによって生成したものです。</p><p>次は森さんの<a href="/articles/20231109a/">「自在化身体論」の読書感想文</a>です。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jstage.jst.go.jp/article/aija/60/470/60_KJ00004221154/_article/-char/ja/">野田 洋:街路網の形態的特性に基づく定量的地利値の導入とその基礎的考察化</a><br><a href="https://www.jstage.jst.go.jp/article/aija/73/633/73_633_2417/_article/-char/ja/">大澤 義明, 林 利充:隣接グラフと地利値最大化</a><br><a href="https://amzn.asia/d/1JA9leO">R.J. ウィルソン:グラフ理論入門</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://www.soumu.go.jp/main_sosiki/jichi_gyousei/daityo/jinkou_jinkoudoutai-setaisuu.html">総務省：住民基本台帳に基づく人口、人口動態及び世帯数</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">例えばこちらの記事：<a href="https://www.miraidiver.com/series/buzzpro50_nagasakivssasebo">【長崎市VS佐世保市】どっちが魅力的な街なのか！？はっきりさせたい出身者の学生同士がガチバトル！！ - 未来ダイバー</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">こちらの記事が分かりやすいです。：<a href="https://www.ajimatics.com/entry/2018/01/30/133238">日本の中心はどの県だ？グラフ理論（ネットワーク）の基本的な諸概念</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/GIS/">GIS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%9C%B0%E5%9B%B3/">地図</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%95%B0%E7%90%86/">数理</category>
      
      
      <comments>https://future-architect.github.io/articles/20231108a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>エッセイ: 小学2X年生、計算ドリルをしている</title>
      <link>https://future-architect.github.io/articles/20231107a/</link>
      <guid>https://future-architect.github.io/articles/20231107a/</guid>
      <pubDate>Mon, 06 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20231030a/&quot;&gt;秋のブログ週間2023&lt;/a&gt;の6本目です。&lt;/p&gt;
&lt;h2 id=&quot;導入&quot;&gt;&lt;a href=&quot;#導入&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20231030a/">秋のブログ週間2023</a>の6本目です。</p><h2 id="導入"><a href="#導入" class="headerlink" title="導入"></a>導入</h2><p>小学校を卒業して云十年。</p><p>この年になって<a href="https://www.gakusan.com/home/result.php?series=%E3%81%8F%E3%82%8A%E3%81%8B%E3%81%88%E3%81%97%E7%B7%B4%E7%BF%92%E5%B8%B3%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA">100マス計算のドリル</a>を毎日1問解いているTIGの原木です。</p><p>念のため、100マス計算を知らない方に説明すると、<br>100マス計算とは、下記のように縦横にランダムに数字を並べて、<br>四則演算(足し算、引き算、掛け算、割り算)のどれか一つにしたがって、<br>縦と横の数字を計算した答えを(一般的には)左上から順番に空白へ埋めていくものだ。</p><img src="/images/20231107a/image.png" alt="" width="640" height="480" loading="lazy"><p>100マス計算をするために必要なのは、以下の3つ。</p><p>100マス計算の白紙、シャーペン、そしてストップウォッチ。</p><p>100マス計算をやるのにストップウォッチは欠かせない。<br>時間という制限に追われて初めて真価を発揮するからだ。</p><p>スマホの時計アプリで開始ボタンを押した瞬間、自分は小学二年生だったころの自分と接続する。教室の片隅でクラスメイトと教室の時計を見つめながら呪文のように九九を唱えていたあの頃に。</p><p>何代目かもう忘れてしまったグラフギア500が走る音だけがこだまする。7,8あたりが来た時にかすかに脳裏から訴える不調音に耳をそばだてる時間などない。</p><p>考える間もなく次の問題へ移る。書き損じに消しゴムを使う余裕などない。とっさに6を伸ばして4に書き換える。0と1が左にあればそれはもうボーナスステージだ。計算すらやめて必死に書き写す。あと、3行。あと、2行。ラスト!</p><p>…そして、スプラトゥーンの鮭狩り1ゲームにも満たない時間が終わりを告げる。</p><p>調子がいい時で1分20秒、悪い時で1分30秒、そこから上がる気配はない。</p><p>情けないがそれが今の自分だ。</p><p>右手の外側を鉛筆カスで真っ黒にしながら中学受験の勉強をしていた当時の自分ならもっと早かっただろう。栄光学園だけに過去の栄光だけどね、HAHAHA<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><h2 id="計算ドリルの魅力"><a href="#計算ドリルの魅力" class="headerlink" title="計算ドリルの魅力"></a>計算ドリルの魅力</h2><p>私はドリルに飢えていた。いや、正確にいえば、何も考えずに一心不乱に書きこむという経験に飢えていた。</p><p>そのことに気づかされたのは、とある若手社員に質問を受けたことがきっかけだった。会社のチームメンバーに質問されたことから流れで「ソフトウェアテスト技法練習帳」をやることになり、はっと思ったのだ。</p><p><a href="https://gihyo.jp/book/2020/978-4-297-11061-1">https://gihyo.jp/book/2020/978-4-297-11061-1</a></p><p>昭和生まれのアラサーでも公文式はやるのは楽しい、と。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> </p><p>公文式の要領は、ちょっと引っかかりを感じるが、深く考え込むまでもない問題を、パターンを変えて何回も何回も繰り返すことだ。</p><p>この体験に当てはまる仕事は残念ながらインフラエンジニアには少ない。</p><p>ソフトウェアを書く機会はそれなりにあるが、ちょっとでも似た作業が続けば怠惰の登場だ。それどころか、最近では社内用のAzure OpenAI Serviceを利用して、ちょっとでも楽をすることが増えてしまった。 </p><p>そもそも、仕事で解答を問われる仕事は大体次の3パターンに分かれる。</p><ul><li>今までやったことがない新規性が非常に問われる問題</li><li>深く考えぬき、悩んでも、正解がはっきりしないが回答は求められる問題</li><li>過去にどこかで解決した問題、その解答の繰り返し</li></ul><p>そのどれでもない体験が計算ドリルには秘められている。</p><p>正解はあらかじめ与えられている。そこにブレはない。</p><p>人の顔をした新規の案件が反転して正解がない泥沼案件へと変わる恐れ、そこから必死に脱出しようとするストレス地獄もここにはないのだ。</p><p>ちょっと考えられれば解ける問題というのも重要だ。1分ですら長すぎる。深入りも不要だ。AIじゃないし、思考の連鎖は1回でいい。</p><p>もちろん、後から振り返ればいくらでも課題は見えてくる。1+1&#x3D;2であることにすら考察が求められる世界もあることはある。だが、少なくともここでは深く考えなくていいのだ。ちいかわである。</p><p>そしてゴールが明確なのもいい。</p><p>短い時間の中で、思考の100m走に追われる中でいつの間にか後味よく終わる。計算ドリルたーのしーという後味とともに、忘れていた四十肩が返却されてくる。</p><p>それらすべてが、自分が長く続けられる理由だろう。</p><h2 id="この計算ドリルの体験を横展できないか？"><a href="#この計算ドリルの体験を横展できないか？" class="headerlink" title="この計算ドリルの体験を横展できないか？"></a>この計算ドリルの体験を横展できないか？</h2><p>計算ドリルの魅力を踏まえると次のように分析できるだろう。</p><ul><li>解答とそこに至るまでの道筋が明快であること<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li><li>圧倒的な物量を時間に追われながら消化することによる、適度な認知負荷がかかること<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></li><li>正解率を下げるのはケアレスミスと老化だけという大人げない自信<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></li></ul><p>これらの美点を抑えたうえで、IT業界の仕事に役立つ書籍や問題集はないかと探してみた。</p><h3 id="ソフトウェアテスト技法練習帳-～知識を経験に変える40問～"><a href="#ソフトウェアテスト技法練習帳-～知識を経験に変える40問～" class="headerlink" title="ソフトウェアテスト技法練習帳 ～知識を経験に変える40問～"></a><a href="https://gihyo.jp/book/2020/978-4-297-11061-1">ソフトウェアテスト技法練習帳 ～知識を経験に変える40問～</a></h3><p>「同値分割法と境界値分析」「デシジョンテーブル」「状態遷移テスト」「組み合わせテスト」の4観点による、ソフトウェアテスト技法の練習問題集。</p><p>計算ドリルの魅力に嵌まるきっかけとなった書籍。</p><p>構成が非常にわかりやすく工夫されており、左のページに設問、右のページにジャポニカ学習帳のようなメモ欄、そしてページをめくると答えという風になっているので、実本を購入した方が良い。</p><p>100マス計算と同じで、とりあえずシャーペンを動かしてる間に思考がまとまるという懐かしい追体験もできる。</p><h3 id="Python初学者のためのPandas100本ノック"><a href="#Python初学者のためのPandas100本ノック" class="headerlink" title="Python初学者のためのPandas100本ノック"></a><a href="https://qiita.com/kunishou/items/bd5fad9a334f4f5be51c">Python初学者のためのPandas100本ノック</a></h3><p>Pandasの基本的な使い方について100ケースの問題をjupyter notebookでひたすらコーディングしながら学べる。</p><p>去年、BIサービスのシステム構築に関するプロジェクトにいた時に、上物のアプリケーションで何をしているのか知りたいなと思って初めてPandasに手を出した時に、一番最初にお世話になった。ありがたい。</p><p>10ケースぐらいに分割して、写経-&gt;解答というパターンでかならず2回踏むことで、考える前に入力できるようになったら、圧倒的に徳を積み重ねることができた。</p><h3 id="応用情報技術者試験ドットコム"><a href="#応用情報技術者試験ドットコム" class="headerlink" title="応用情報技術者試験ドットコム"></a><a href="https://www.ap-siken.com/apkakomon.php">応用情報技術者試験ドットコム</a></h3><p>応用情報技術者試験の試験問題をひたすら解くことができる。</p><p>お勧めの使い方は「過去問道場」-&gt; 「分野を指定して出題」-&gt; 「出題ジャンルを一点に絞り込み&#x2F;計算問題を出題しない」を選択して、計100問ぐらいをわからなくていいので毎日解くことだ。</p><p>もちろん、これは最初から計算ドリルという使い方はできない。スルメ化により計算ドリルと化すまでには相応の時間がかかる。だが、中身の把握より先に「問題」と「解答」が分かった状態に至るころには、無味乾燥な解説に理解も追いつくはずだ。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>以上が計算ドリルの魅力と、それを体験することができる書籍の紹介である。<br>もし他に計算ドリルのような体験ができる書籍があれば、教えていただきたい。</p><p>次は高瀬さんの<a href="/articles/20231108a/">土地勘に頼らずに地の利がある場所をみつける方法</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">神奈川にある高校の名前。おじさんとなったOBの1割が必ず言うはず(個人調べ)。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">ゼルダの伝説のBotW-&gt;TotKで試練の祠の周回はやめてしまった。一つで充分ですよ。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">たとえば、大河ドラマを見ながら手慰みでやる無限プチプチと、時計で測りながらつぶしていく競技プチプチは圧倒的に異なる。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">最近、クラウドベンダー系の資格試験で、100%完全に解答した!といえることが少なくなってしまった。実質80%ぐらい解答できて残りは正直あやふやだけど、その分野はチームで詳しい○○さんがいるからいっか...みたいなことが続いて、まずいのでは？と内心思っている。</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;">同時に昭和生まれのアラサーは2025年に絶滅することにも気づいてしまった。自分も数少ない生き残りである。</span><a href="#fnref:5" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/pandas/">pandas</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E3%83%A1%E3%83%A2/">勉強メモ</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%83%86%E3%82%B9%E3%83%88%E6%8A%80%E6%B3%95%E7%B7%B4%E7%BF%92%E5%B8%B3/">ソフトウェアテスト技法練習帳</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%BF%9C%E7%94%A8%E6%83%85%E5%A0%B1/">応用情報</category>
      
      
      <comments>https://future-architect.github.io/articles/20231107a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「プロになるためのWeb技術入門」を新人が読んでみた</title>
      <link>https://future-architect.github.io/articles/20231106a/</link>
      <guid>https://future-architect.github.io/articles/20231106a/</guid>
      <pubDate>Sun, 05 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231106a/61YVe2oD4CL._SX342_SY445_.jpg&quot; alt=&quot;&quot; width=&quot;342&quot; height=&quot;429&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231106a/61YVe2oD4CL._SX342_SY445_.jpg" alt="" width="342" height="429"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>2023年4月に新卒で入社したTIGコアテクノロジーユニット所属の木元と申します。<a href="/articles/20231030a/">秋のブログ週間2023</a>の5本目です。</p><p>今回は新人研修の期間で先輩社員の方に薦めていただいた<a href="https://gihyo.jp/book/2010/978-4-7741-4235-7">「プロになるためのWeb技術入門」</a>を読んだ感想を書いていきます。</p><p>特にIT未経験の同期の中で評判が良く、読んでいる人が多い書籍です。IT未経験の人やWebアプリケーションの基本を改めて復習したい人におすすめできる一冊です。</p><h2 id="書籍の概要"><a href="#書籍の概要" class="headerlink" title="書籍の概要"></a>書籍の概要</h2><p>Web技術を体系的に解説した書籍です。</p><p>主にJavaを元に説明しており、JSPやサーブレットを用いたソースコードがでてくるので、ある程度知識がないと理解できない部分があります。</p><p>Webアプリケーション発展の歴史に沿って具体的に解説されており、非常にわかりやすいです。また、Web開発をしている上で一度は聞いたことのあるような基礎的な用語や技術の説明が書かれています。Web技術に必要なプログラミングやネットワーク、HTML、アプリケーションサーバなど幅広い知識を理解することができます。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Lesson1 「Webアプリケーション」とは何か</li><li>Lesson2　Webはどのように発展したか</li><li>Lesson3　HTTPを知る</li><li>Lesson4　CGIからWebアプリケーションへ</li><li>Lesson5　Webアプリケーションの構成要素</li><li>Lesson6　Webアプリケーションを効率よく開発するための仕組み</li><li>Lesson7　セキュリティを確保するための仕組み</li></ul><h2 id="Webアプリケーションの説明と歴史（Lesson1〜2）"><a href="#Webアプリケーションの説明と歴史（Lesson1〜2）" class="headerlink" title="Webアプリケーションの説明と歴史（Lesson1〜2）"></a>Webアプリケーションの説明と歴史（Lesson1〜2）</h2><p>Webアプリケーションについて何も知らない人でもわかるように基礎的な部分から説明されています。</p><p>主な内容</p><ul><li>デスクトップアプリケーションとWebアプリケーションの違い</li><li>WebサーバとWebクライアントの違い</li><li>WWWやURL、通信プロトコルの説明</li><li>CGIからサーブレット、JSP、フレームワークへと発展していくWebアプリケーションの歴史</li></ul><p>以下のデスクトップアプリケーションとWebアプリケーションの違いの様に基礎的な内容の説明が書かれています。（p12 表より編集）</p><div class="scroll"><table><thead><tr><th align="center"></th><th align="center">デスクトップアプリケーション</th><th align="center">Webアプリケーション</th></tr></thead><tbody><tr><td align="center">処理の主体</td><td align="center">手元のOS</td><td align="center">サーバ</td></tr><tr><td align="center">画面の表示</td><td align="center">OS上で表示</td><td align="center">Webブラウザ上で表示</td></tr><tr><td align="center">インストール</td><td align="center">必要</td><td align="center">不必要</td></tr></tbody></table></div><p>Lesson2ではWebアプリケーション開発には必ず必要な知識ではないため、読み飛ばして構わないと書かれていましたが、この後のLessonで出てくる技術要素や用語の説明が書かれているため、理解するためにもよく読んだ方が良い内容だと思います。</p><h2 id="HTTPについて（Lesson3）"><a href="#HTTPについて（Lesson3）" class="headerlink" title="HTTPについて（Lesson3）"></a>HTTPについて（Lesson3）</h2><p>初学者の中でも特につまづきやすいHTTPの内容について説明されています。</p><p>主な内容</p><ul><li>HTTPにおける基本的なやりとり（リクエストやレスポンスなど）</li><li>IPアドレスやDNSの実現方法</li><li>GETリクエストやPOSTリクエストの説明</li></ul><p>HTTP通信の流れやHTTPリクエストやレスポンスが具体的にどのように受け渡しされるかが詳しく説明されています。GETやPOSTメソッドの違いについても記載されており、文章による説明だけではなく、ツールを用いてHTTPリクエストやレスポンスの中身を見ている点がわかりやすいです。</p><p>ただ、ツールに関しては10年以上前に出版されたということもあり、かなり古臭い印象を受けました。サイトには載っていましたが、最近ではブラウザのデベロッパーツールを使用して開発をしている人が多いので、デベロッパーツールを用いた説明を書籍に記載してほしいと感じました。</p><h2 id="Cookieとセッション（Lesson4）"><a href="#Cookieとセッション（Lesson4）" class="headerlink" title="Cookieとセッション（Lesson4）"></a>Cookieとセッション（Lesson4）</h2><p>Lesson4では実際にPHPで作成された宅配ピザの注文サイトをもとにWebアプリケーションの技術要素を学ぶことができます。</p><p>主な内容</p><ul><li>リダイレクトの仕組み</li><li>Cookieとセッションの考え方と実現方法</li></ul><p>Cookieとセッションについては私自身の理解が浅かったこともあり、非常に学べることが多かったです。</p><p>宅配ピザの注文サイトはログイン機能と注文を選択する機能からなる簡易なアプリケーションのため、Cookieとセッションについてを理解するにはとてもわかりやすかったです。JavaではなくPHPでコードが書かれているため、少しPHPの理解が必要ですが、他のプログラミング言語を学んだことがある人であれば難しくないと思います。</p><h2 id="Webアプリケーションの構造（Lesson5）"><a href="#Webアプリケーションの構造（Lesson5）" class="headerlink" title="Webアプリケーションの構造（Lesson5）"></a>Webアプリケーションの構造（Lesson5）</h2><p>Webサーバ、データベースサーバ、アプリケーションサーバの3層構造について説明されています。</p><p>主な内容</p><ul><li>Webサーバ、データベースサーバ、アプリケーションサーバの必要性と役割</li></ul><p>図やイラストが他のLessonより多いこともあり、わかりやすい印象を受けますが、実際に開発経験がない人にとってはイメージが少ししづらいかもしれません。Javaで用いるTomcatやmod_jkについて触れており、何をしているかはよくわからずに使用している人にとっては非常にタメになる内容だと思います。</p><p>データベースサーバの説明でデータベースに対する操作であるCRUD操作について触れられており、SQLについても少しだけ書かれています。</p><h2 id="Webアプリケーションの仕組み（Lesson6）"><a href="#Webアプリケーションの仕組み（Lesson6）" class="headerlink" title="Webアプリケーションの仕組み（Lesson6）"></a>Webアプリケーションの仕組み（Lesson6）</h2><p>ロジックとデザインを分離することに基づいて必要な考え方やアーキテクチャ、フレームワークについて説明されています。</p><p>主な内容</p><ul><li>サーブレットとJSPの連携によるロジックとデザインの分離方法</li><li>リクエストスコープとセッションスコープの違い</li><li>Webアプリケーションで利用されるアーキテクチャ（MVCモデルやレイヤパターン）</li><li>フレームワークの必要性</li></ul><p>この本の中では一番難しい内容であり、開発経験やJavaに関する知識が無いと理解することが難しいと思います。</p><p>ここではWebアプリケーションの構築をするときにはロジックとデザインを分離させることが大切であり、分離させるにはどのようにするかが詳しく書かれています。ロジックとはユーザが入力された情報が正しいか判定する処理のことを指し、デザインはユーザが目にする画面表示部分を意味しています。</p><p>また、Lessonの最後ではフレームワークの必要性がメリットとデメリットと共に書かれています。フレームワークは便利である反面、ブラックボックスになる箇所が多く、長期的にみると技術力が低下する可能性があると述べられていたことが印象的でした。</p><h2 id="セキュリティについて（Lesson7）"><a href="#セキュリティについて（Lesson7）" class="headerlink" title="セキュリティについて（Lesson7）"></a>セキュリティについて（Lesson7）</h2><p>Webアプリケーションを開発する上で重要なセキュリティについて説明されています。</p><p>主な内容</p><ul><li>Webアプリケーションにおけるセキュリティの必要性</li><li>代表的なWebアプリケーションに対する攻撃手法とその対策</li><li>セキュリティ問題の原因と対策</li></ul><p>Webアプリケーションの代表的な攻撃手法とその対策について書かれています。代表的なセキュリティに対する攻撃手法については以下の例が挙げられていました。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.SQLインジェクション</span><br><span class="line">2.クロスサイトスクリプション（XSS）</span><br><span class="line">3.セッションハイジャック</span><br><span class="line">4.クロスサイトリクエストフォージェリ（CSRF）</span><br><span class="line">5.強制ブラウズ</span><br><span class="line">6.ディレクトリトラバーサル</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>この書籍はWebに関する基礎的な知識を広く浅く把握するにはとても良い本だと思います。Web開発する上での重要ポイントがまとまっており読みやすかったです。</p><p>この本だけではWebの知識が十分とは言えないと思いますが、Webに関する全体像を把握したい人にはおすすめします。</p><p>次は原木さんの<a href="/articles/20231107a/">小学2X年生、100マス計算を毎日している</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Java/">Java</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AEWeb%E6%8A%80%E8%A1%93%E5%85%A5%E9%96%80/">プロになるためのWeb技術入門</category>
      
      
      <comments>https://future-architect.github.io/articles/20231106a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初心者が暗号の基礎と歴史を勉強して見た</title>
      <link>https://future-architect.github.io/articles/20231102a/</link>
      <guid>https://future-architect.github.io/articles/20231102a/</guid>
      <pubDate>Wed, 01 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231102a/CipherDisk.jpg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;


&lt;p&gt;&lt;a href=&quot;/articles/20231030a/&quot;&gt;秋のブログ週間2023&lt;/a&gt;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231102a/CipherDisk.jpg" alt="" width="800" height="800"><p><a href="/articles/20231030a/">秋のブログ週間2023</a> の4本目です。</p><p>こんにちは。金融グループ所属、新卒2年目の斎藤大樹です。</p><p>社会人になってから勉強する時間をなかなか取れていないなと思い、暗号の基礎と、暗号の進化の歴史を勉強してみました。<br>暗号をテーマに選んだ理由は、先日プロジェクト内の定期勉強会で先輩社員の方が暗号・認証についてお話してくれたのが興味深かったからです。</p><h2 id="書籍の紹介"><a href="#書籍の紹介" class="headerlink" title="書籍の紹介"></a>書籍の紹介</h2><p>今回の勉強のお供は「<a href="https://www.amazon.co.jp/dp/B08QRZ4WTN">Pythonでいかにして暗号を破るか</a>」というソシム社出版の本です。<br>内容はどちらかというと古典暗号よりですが、暗号の基礎と歴史を学ぶにはもってこいです。<br>暗号だけでなく、Pythonの解説も豊富で、ソースコードも章が進むごとにレベルアップしていく構成になっているので、Pythonの初学者の方にもおすすめの一冊です。</p><h2 id="暗号とは何か"><a href="#暗号とは何か" class="headerlink" title="暗号とは何か"></a>暗号とは何か</h2><p>本書によれば、暗号を構成する要素は「アルゴリズム」と「暗号鍵」の2つです。</p><p>暗号文は受信者が平文（暗号化される前の元の文章）を読み解けなければ意味がないので、出鱈目に作っていいわけではなく、どんな暗号文も一定のルール・決まり事をもとに作られています。このルールが暗号におけるアルゴリズムです。子供の頃に独自の暗号のルールを考え、暗号文を友達と交換して遊んだことのある方もいるのではないでしょうか。</p><p>一方、暗号鍵はその文字通り暗号文を解いて平文に戻すための鍵になります。鍵の形は数字だったり、文字列だったりと様々です。</p><p>ハッカーから身を守る上で重要なのは、ハッカーに「鍵」を知られないことです。ハッカーは暗号化のアルゴリズムは熟知しており、暗号を解く暗号鍵だけ知らないと考えなければなりません。鍵がいかにバレにくいかが、暗号の強固さの指標になります。</p><h2 id="暗号の進化の歴史を辿る"><a href="#暗号の進化の歴史を辿る" class="headerlink" title="暗号の進化の歴史を辿る"></a>暗号の進化の歴史を辿る</h2><p>それでは、本書で紹介されている暗号をいくつかピックアップしながら、暗号の進化の歴史を辿っていきたいと思います。また、本書のタイトルは「Pythonでいかにして暗号を破るか」ですから、暗号のハッキング方法も簡単に紹介していきます。（※法に触れるようなものではございません）</p><h3 id="シーザー暗号"><a href="#シーザー暗号" class="headerlink" title="シーザー暗号"></a>シーザー暗号</h3><p>アルファベットをシフトすることで、メッセージの各文字を別の新しいを文字に置き換える暗号です。シーザー暗号においては、アルファベットをいくつ右にシフトするかの数字が暗号鍵になります。表1に鍵10でにアルファベットが変換した例を示します。シフトした結果がZを超えてしまった場合はAに戻ります（ラップアラウンド）。例えば、鍵10のときに「FUTURE ARCHITECT」という文字列を暗号化すると、「PEDEBO KBMRSDOMD」になります。</p><p><strong>表1：シーザー暗号の鍵10で暗号化した例</strong></p><div class="scroll"><table><thead><tr><th align="center">インデックス</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th><th align="center">11</th><th align="center">12</th><th align="center">13</th><th align="center">14</th><th align="center">15</th><th align="center">16</th><th align="center">17</th><th align="center">18</th><th align="center">19</th><th align="center">20</th><th align="center">21</th><th align="center">22</th><th align="center">23</th><th align="center">24</th><th align="center">25</th></tr></thead><tbody><tr><td align="center">平文の文字</td><td align="center">A</td><td align="center">B</td><td align="center">C</td><td align="center">D</td><td align="center">E</td><td align="center">F</td><td align="center">G</td><td align="center">H</td><td align="center">I</td><td align="center">J</td><td align="center">K</td><td align="center">L</td><td align="center">M</td><td align="center">N</td><td align="center">O</td><td align="center">P</td><td align="center">Q</td><td align="center">R</td><td align="center">S</td><td align="center">T</td><td align="center">U</td><td align="center">V</td><td align="center">W</td><td align="center">X</td><td align="center">Y</td><td align="center">Z</td></tr><tr><td align="center">暗号化後の文字</td><td align="center">K</td><td align="center">L</td><td align="center">M</td><td align="center">N</td><td align="center">O</td><td align="center">P</td><td align="center">Q</td><td align="center">R</td><td align="center">S</td><td align="center">T</td><td align="center">U</td><td align="center">V</td><td align="center">W</td><td align="center">X</td><td align="center">Y</td><td align="center">Z</td><td align="center">A</td><td align="center">B</td><td align="center">C</td><td align="center">D</td><td align="center">E</td><td align="center">F</td><td align="center">G</td><td align="center">H</td><td align="center">I</td><td align="center">J</td></tr></tbody></table></div><p>シーザー暗号のハッキングは簡単です。英語の文章の場合はアルファベットが26個なので、考えられる鍵の総数は25個です。短い文章であれば、25通り試せばいいだけですので、手作業でも簡単に解読できそうです（このように考えられる鍵をすべて試すような解読の手法は<strong>総当たり</strong>と言います）。もし日本語の場合はアルファベット（ひらがな、カタカナ、漢字）の個数が多いので手作業での総当たりは難しそうですが、コンピュータがあれば短時間で解読可能です。</p><p>シーザー暗号の名前の由来は、「ブルータス、お前もか」の格言でおなじみのジュリアス・シーザーです。シーザーは2000年前の軍人ですから、こんな大昔から暗号という概念があったというのは驚きです。</p><h3 id="乗法暗号とアフィン暗号"><a href="#乗法暗号とアフィン暗号" class="headerlink" title="乗法暗号とアフィン暗号"></a>乗法暗号とアフィン暗号</h3><p>シーザー暗号では鍵の値だけアルファベットを加減算して文字を変換しましたが、<strong>乗法暗号</strong>ではアルファベットのインデックスに鍵の数をかけ合わせます。例えば、鍵5で文字Cを暗号化させたい場合、Cのインデックス2に鍵5をかけて、暗号化された文字のインデックス2×5=10を得ます。インデックス10に対応する文字はKです。</p><p>表2に、鍵5を使ってアルファベットA～Zを暗号化させた例を示します。シーザー暗号と同様に、暗号化後の文字がZを超える（インデックスが25を超える）場合はAに戻ります。このラップアラウンド処理の計算は「（インデックス×鍵） mod（アルファベットの個数）」で計算できます。例えば、鍵5のときに「FUTURE ARCHITECT」という文字列を暗号化すると、「ZWRWHU AHKJORUKR」になります。</p><p>乗法暗号を単独で使用すると、インデックス0の文字は暗号化後も同じ文字になってしまいます。そのため、乗法暗号で暗号化したのちに、シーザー暗号でさらに暗号化してやることで、より強力になります。このステップで作られた暗号は<strong>アフィン暗号</strong>と呼ばれます。</p><p><strong>表2：乗法暗号の鍵5で暗号化した例</strong></p><div class="scroll"><table><thead><tr><th align="center">インデックス</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th><th align="center">11</th><th align="center">12</th><th align="center">13</th><th align="center">14</th><th align="center">15</th><th align="center">16</th><th align="center">17</th><th align="center">18</th><th align="center">19</th><th align="center">20</th><th align="center">21</th><th align="center">22</th><th align="center">23</th><th align="center">24</th><th align="center">25</th></tr></thead><tbody><tr><td align="center">平文の文字</td><td align="center">A</td><td align="center">B</td><td align="center">C</td><td align="center">D</td><td align="center">E</td><td align="center">F</td><td align="center">G</td><td align="center">H</td><td align="center">I</td><td align="center">J</td><td align="center">K</td><td align="center">L</td><td align="center">M</td><td align="center">N</td><td align="center">O</td><td align="center">P</td><td align="center">Q</td><td align="center">R</td><td align="center">S</td><td align="center">T</td><td align="center">U</td><td align="center">V</td><td align="center">W</td><td align="center">X</td><td align="center">Y</td><td align="center">Z</td></tr><tr><td align="center">インデックス×鍵</td><td align="center">0</td><td align="center">5</td><td align="center">10</td><td align="center">15</td><td align="center">20</td><td align="center">25</td><td align="center">30</td><td align="center">35</td><td align="center">40</td><td align="center">45</td><td align="center">50</td><td align="center">55</td><td align="center">60</td><td align="center">65</td><td align="center">70</td><td align="center">75</td><td align="center">80</td><td align="center">85</td><td align="center">90</td><td align="center">95</td><td align="center">100</td><td align="center">105</td><td align="center">110</td><td align="center">115</td><td align="center">120</td><td align="center">125</td></tr><tr><td align="center">（インデックス×鍵）mod 26</td><td align="center">0</td><td align="center">5</td><td align="center">10</td><td align="center">15</td><td align="center">20</td><td align="center">25</td><td align="center">4</td><td align="center">9</td><td align="center">14</td><td align="center">19</td><td align="center">24</td><td align="center">3</td><td align="center">8</td><td align="center">13</td><td align="center">18</td><td align="center">23</td><td align="center">2</td><td align="center">7</td><td align="center">12</td><td align="center">17</td><td align="center">22</td><td align="center">1</td><td align="center">6</td><td align="center">11</td><td align="center">16</td><td align="center">21</td></tr><tr><td align="center">暗号化後の文字</td><td align="center">A</td><td align="center">F</td><td align="center">K</td><td align="center">P</td><td align="center">U</td><td align="center">Z</td><td align="center">E</td><td align="center">J</td><td align="center">O</td><td align="center">T</td><td align="center">Y</td><td align="center">D</td><td align="center">I</td><td align="center">N</td><td align="center">S</td><td align="center">X</td><td align="center">C</td><td align="center">H</td><td align="center">M</td><td align="center">R</td><td align="center">W</td><td align="center">B</td><td align="center">G</td><td align="center">L</td><td align="center">Q</td><td align="center">V</td></tr></tbody></table></div><p>26文字のアルファベットに対するシーザー暗号の鍵の個数は25個しかありませんでしたが、アフィン暗号では2つの鍵を組み合わせるため、鍵の総数は数百通りとなります。このように、アフィン暗号はシーザー暗号よりは遥かに安全になったものの、総当たりによるハッキングはまだまだ容易に出来てしまいます。</p><h3 id="単一換字式暗号"><a href="#単一換字式暗号" class="headerlink" title="単一換字式暗号"></a>単一換字式暗号</h3><p>シーザー暗号やアフィン暗号のように鍵の総数が少ない暗号は総当たりが容易です。その問題を解決するのが<strong>単一換字式暗号</strong>です。<br>単一換字式暗号では変換後の文字を、送信者が「AはYに、BはJに変えよう」という具合に、重複のないように任意に決定します（重複があると、復号の時に困ってしまいます）。「え、そんなのでアルゴリズムって呼べるの？」という気もしますが、26文字のアルファベットを暗号化する場合の鍵の総数は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.229ex;" xmlns="http://www.w3.org/2000/svg" width="13.855ex" height="2.183ex" role="img" focusable="false" viewBox="0 -864 6124.1 965"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1000,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g><g data-mml-node="mo" transform="translate(1555.8,0)"><path data-c="2252" d="M15 541Q15 569 33 585T75 601T117 585T135 541Q135 514 118 498T75 481T32 498T15 541ZM56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153ZM642 -41Q642 -17 658 0T702 18Q726 18 744 3T762 -41Q762 -67 745 -84T702 -101Q676 -101 659 -85T642 -41Z"></path></g><g data-mml-node="mn" transform="translate(2611.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(3333.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(4334,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container>通りと膨大で、通常のコンピュータでは解読に数年かかります。</p><p>暗号化のポイントは、「鍵をハッカーにバレてはいけない」ことですから、鍵の数が多いということはシンプルながら非常に強力な暗号になります。単一換字式暗号は総当たり攻撃には強い一方で、頻度解析や単語パターン解析には弱く、ハッキングされやすいといった欠点もあります。</p><h3 id="ヴィジュネル暗号"><a href="#ヴィジュネル暗号" class="headerlink" title="ヴィジュネル暗号"></a>ヴィジュネル暗号</h3><p>総当たり攻撃、頻度解析、単語パターン検索に強い、夢のような暗号が1553年に発表されました。これが<strong>ヴィジュネル暗号</strong>（多表換字暗号）です。古典暗号の中では最も強力な部類で、19世紀まで解読されることがなかったようです。</p><p>ヴィジュネル暗号の鍵は単一英単語のような文字列で、この文字列が複数の1文字の鍵（サブ鍵と呼ぶ）に分割され、平文を暗号化します。各サブ鍵は整数（インデックス）に変換され、シーザー暗号の鍵として扱います。例えば、文字Cはシーザー暗号の鍵2に対応します（表1を参照）。</p><p>例えば、「FUTURE ARCHITECT」という文字列を鍵「DOG」で暗号化すると「IIZXFK DFIKWZHRZ」になります。<br>暗号化の仕組みを表3に示します。1文字目の「F（インデックス5）」は「D（インデックス3）」により右に3シフトするので「I（インデックス8）」に変換されます。次の文字U、Tも同様にO、Gを使って変換していきます。鍵「DOG」は3文字なので、4文字目はまたDに戻る…という要領です。シーザー暗号と同様、Zを超えた場合はAに戻ります。</p><p><strong>表2：ヴィジュネル暗号の鍵DOGで暗号化を行う例</strong></p><div class="scroll"><table><thead><tr><th align="center">平文の文字</th><th align="center">F(5)</th><th align="center">U(20)</th><th align="center">T(19)</th><th align="center">U(20)</th><th align="center">R(17)</th><th align="center">E(4)</th><th align="center">A(0)</th><th align="center">R(17)</th><th align="center">C(2)</th><th align="center">H(7)</th><th align="center">I(8)</th><th align="center">T(19)</th><th align="center">E(4)</th><th align="center">C(3)</th><th align="center">T(19)</th></tr></thead><tbody><tr><td align="center">サブ鍵</td><td align="center">D(3)</td><td align="center">O(14)</td><td align="center">G(6)</td><td align="center">D(3)</td><td align="center">O(14)</td><td align="center">G(6)</td><td align="center">D(3)</td><td align="center">O(14)</td><td align="center">G(6)</td><td align="center">D(3)</td><td align="center">O(14)</td><td align="center">G(6)</td><td align="center">D(3)</td><td align="center">O(14)</td><td align="center">G(6)</td></tr><tr><td align="center">暗号文の文字</td><td align="center">I(8)</td><td align="center">I(8)</td><td align="center">Z(25)</td><td align="center">X(23)</td><td align="center">F(5)</td><td align="center">K(10)</td><td align="center">D(3)</td><td align="center">F(5)</td><td align="center">I(8)</td><td align="center">K(10)</td><td align="center">W(22)</td><td align="center">Z(25)</td><td align="center">H(7)</td><td align="center">R(17(</td><td align="center">Z(25)</td></tr></tbody></table></div><p>ヴィジュネル暗号の鍵は長ければ長いほど安全です。<br>「DOG」のように3文字の鍵で暗号化する場合の鍵の総数は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="11.923ex" height="2.139ex" role="img" focusable="false" viewBox="0 -863.3 5270.1 945.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(1714.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2770.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1500,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(2000,0)"></path></g></g></g></svg></mjx-container>通りしかありませんが、もし20文字の鍵を使う場合の鍵の総数は約<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.947ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 3512.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(1722.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container>通りにもなり、総当たりでの解読は現実的ではなくなります。鍵の長さが1つ増えるたびに、鍵の候補数が26倍に増えるのが、ヴィジュネル暗号の強みです。</p><p>ヴィジュネル暗号の弱点は、鍵に周期性があることです。例えば、「<strong>THE</strong> CAT IS OUT OF <strong>THE</strong> BAG」を鍵「SPILLTHEBEANS」で暗号化すると「<strong>LWM</strong>NLMPWPYTBX<strong>LWM</strong>MLZ」になります。太字で記したように、暗号文で文字列LWMが2回反復しているのが分かります。これは、平文の単語THEが同じ鍵SPIで暗号化されたからです。例文は簡単な例ですが、ヴィジュネル暗号ではこのように同じ文字の反復が現れるので、この反復の間隔を調べることで鍵長を推定出来ます。鍵長の推定が出来たら、頻度分析にかけていき、鍵の候補をさらに絞り込んでいきます。鍵の候補が絞り込めれば、後は総当たりにかけてやることで、この強力な暗号も解読されてしまいます。</p><h3 id="ワンタイムパッド暗号"><a href="#ワンタイムパッド暗号" class="headerlink" title="ワンタイムパッド暗号"></a>ワンタイムパッド暗号</h3><p>ヴィジュネル暗号の弱点を補い、<strong>解読不可能</strong>となった暗号が<strong>ワンタイムパッド暗号</strong>です。ワンタイムパッド暗号は次の3つの条件を満たします。</p><ol><li>ヴィジュネル暗号において、鍵は暗号化するメッセージと同じ長さを持つ。</li><li>鍵は真にランダムである</li><li>鍵はメッセージの暗号化に一度だけ使用し、再び使用しない</li></ol><p>鍵長がメッセージ長と等しい場合、平文の各文字にサブ鍵が一意に使われ、各文字は同等の確率で任意の文字に置き換えられるため、周期性が失われ頻度分析にも強くなります。</p><p>例えば、「FUTURE ARCHITECT」の文字列を鍵「KLABIITPFQWZLGN」で暗号化すると、「PFTVZMTGHXESPIG」になります。「FUTURE ARCHITECT」は15文字なので、鍵の総数は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.229ex;" xmlns="http://www.w3.org/2000/svg" width="15.616ex" height="2.183ex" role="img" focusable="false" viewBox="0 -864 6902.1 965"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1000,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g><g data-mml-node="mo" transform="translate(1555.8,0)"><path data-c="2252" d="M15 541Q15 569 33 585T75 601T117 585T135 541Q135 514 118 498T75 481T32 498T15 541ZM56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153ZM642 -41Q642 -17 658 0T702 18Q726 18 744 3T762 -41Q762 -67 745 -84T702 -101Q676 -101 659 -85T642 -41Z"></path></g><g data-mml-node="mn" transform="translate(2611.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(4111.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(5112,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container>です。実は、ハッカーがこれを総当たり出来る強力なコンピュータを持っていても、ワンタイムパッド暗号は解読できません。それは、どの暗号文でも、すべての平文が等しく候補となりうるためです。</p><p>どういうことかというと、例えば上で得られた暗号文「PFTVZMTGHXESPIG」を鍵「KLABIITPFQWZLGN」で復号すれば「FUTURE ARCHITECT」になりますが、別の鍵「MXYRIULBZVEZHUT」で復号すると、全く別の単語「DIVERSIFICATION（多様化）」になります。</p><p>多くの暗号が解読されやすい理由は、分かりやすい英語に復号する鍵が通常1つしかないからですが、ワンタイムパッド暗号では全く異なる2つ以上の平文から同じ暗号文が得られてしまうため、ハッカーがいかに強力なコンピュータを持っていようが元のメッセージがどれであるか判定することはできません。</p><h2 id="公開鍵と秘密鍵"><a href="#公開鍵と秘密鍵" class="headerlink" title="公開鍵と秘密鍵"></a>公開鍵と秘密鍵</h2><p>暗号の歴史を追ってきて、絶対にハッキング不可能な暗号が出来ることが分かりました。しかしこれで終わりではありません。送信者が暗号文を相手に送るとき、受信者が暗号文を解読できるように鍵を一緒に渡さなければなりません。暗号がどれだけ強力であっても、鍵ごとハッキングされたらどうでしょうか。メッセージは簡単にハッカーに知れ渡ってしまいます。</p><p>この問題を解決するのが<strong>公開鍵暗号方式</strong>です。今まで記述した暗号では、暗号化と復号に同じ鍵を使っていましたが、公開鍵暗号方式では暗号化と復号に異なる鍵を使います。そして、暗号鍵で暗号化されたメッセージは、それと対となる復号鍵だけで復号できます。暗号鍵ではメッセージを解読できず、世界中で共有できるので<strong>公開鍵</strong>と呼ばれています。一方で、復号鍵は誰にもバレてはいけないので<strong>秘密鍵</strong>と呼ばれます。</p><p>例えば、AがBにメッセージを送りたいとき、AはBから公開鍵を受け取り、その公開鍵を使ってメッセージを暗号化します。公開鍵はメッセージを復号できないので、他の人にバレても問題ありません。<br>BはAから暗号化されたメッセージを受け取ると、自分の秘密鍵でそれを復号します。Bだけが、Bの公開鍵で暗号化されたメッセージを復号できる秘密鍵を持っているのです（秘密鍵は他の人にバレてはいけません）。</p><p>BがAに返信したい場合、今度はBがAの公開鍵を使ってメッセージを暗号化します。AはBから受け取った暗号文を、Aの秘密鍵を使って復号します。</p><p>このように、公開鍵暗号方式では、メッセージをハッカーに傍受される心配をせずにメッセージを交換できます。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回は、暗号について知らない初心者が、暗号の歴史を辿っていくという内容でした。</p><p>記事では紹介できませんでしたが、書籍には教科書的RSA暗号を用いた公開鍵・秘密鍵の作成についても触れられていますので、この記事で興味を持っていただけましたら、ぜひ手に取ってみて下さい。</p><p>久々にガッツリ勉強しましたが、自分の知識が少しでも増えていくのを感じられるとやはり楽しいですね。せっかく暗号の基礎を勉強できたので、今度は公開鍵暗号の課題でもある認証についても学んでみたいと思います。</p><p>最後まで読んでいただき、ありがとうございました。</p><p>アイキャッチは<a href="https://en.wikipedia.org/wiki/Caesar_cipher">Caesar cipher - Wikipedia</a>より、シーザー暗号の換字ディスクを利用させていただきました。</p><p>次は木元さんの <a href="/articles/20231030a/">プロになるためのWeb技術入門」を新人が読んでみた</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Security/">Security</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9A%97%E5%8F%B7/">暗号</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85/">初心者</category>
      
      <category domain="https://future-architect.github.io/tags/Python%E3%81%A7%E3%81%84%E3%81%8B%E3%81%AB%E3%81%97%E3%81%A6%E6%9A%97%E5%8F%B7%E3%82%92%E7%A0%B4%E3%82%8B%E3%81%8B/">Pythonでいかにして暗号を破るか</category>
      
      
      <comments>https://future-architect.github.io/articles/20231102a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>設計ドキュメント腐る問題、Git管理で運用してみた結果</title>
      <link>https://future-architect.github.io/articles/20231101a/</link>
      <guid>https://future-architect.github.io/articles/20231101a/</guid>
      <pubDate>Tue, 31 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231101a/document_kusaru.png&quot; alt=&quot;&quot; width=&quot;353&quot; height=&quot;502&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231101a/document_kusaru.png" alt="" width="353" height="502"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。</p><p><a href="/articles/20231030a/">秋のブログ週間2023</a> の3本目は、設計ドキュメントをGit管理して腐らせないようにがんばってみた話をします。</p><p>前段として6年前、「<a href="https://medium.com/@laqiiz/%E6%88%91%E3%80%85%E3%81%AF%E3%81%84%E3%81%8B%E3%81%AB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E9%96%8B%E7%99%BA%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E8%85%90%E3%82%8B%E5%95%8F%E9%A1%8C%E3%81%A8%E6%88%A6%E3%81%88%E3%81%B0%E8%89%AF%E3%81%84%E3%81%AE%E3%81%8B-7c7c3774689f">我々はいかにシステム開発におけるドキュメント腐る問題と戦えば良いのか</a>」という記事を書いたのですが、その後の試行錯誤はどこにも残していないことに気づきました。普段のフューチャー技術ブログですとちょっと引け目を感じるテーマですが、秋の夜長を楽しむため読み物成分を多めに書くというテーマのこのブログリレーにピッタリな気がするため、この機会をお借りします。</p><p>ドキュメントも色々な種別があるかと思いますが、この記事では設計ドキュメントを指すことにします。設計ドキュメントは開発メンバーが参照するもので、ステークホルダーへの説明資料に引用して使うことはあれど、主目的は異なるという前提です。Design Docの場合もありますし、システム構成図、ERD、システム間連携I&#x2F;F定義書、開発規約、環境構築手順などを含みます。</p><h2 id="ドキュメント腐る問題とは"><a href="#ドキュメント腐る問題とは" class="headerlink" title="ドキュメント腐る問題とは"></a>ドキュメント腐る問題とは</h2><p>ドキュメント腐る問題とは、設計時に作成した各種ドキュメントがGoogle Driveやファイルサーバ上で陳腐化してしまい、現状の正しい状態を指していない状態を指します。せっかく新規参画者がキャッチアップしようとしてもドキュメントが真実を示していないという、困った問題です。</p><p>一部の界隈でこう読んでいる名称ですが、少なからず誰しもが経験してきたことでしょう。</p><h2 id="設計ドキュメントをGit管理に寄せる"><a href="#設計ドキュメントをGit管理に寄せる" class="headerlink" title="設計ドキュメントをGit管理に寄せる"></a>設計ドキュメントをGit管理に寄せる</h2><p>対策としてここ4,5年ほど、コードと同期すべき設計ドキュメント全てをGit管理に寄せる方針を取ってきました。なるべくテキストベースで設計ドキュメントを記載し、コードと同じくPull Requestでレビューするフローです。<a href="/articles/20230417b/">markdownlintで設計書の品質を高める</a> の記事にも書いたように、以下のフォーマット&#x2F;ツールを使っています。</p><ul><li>Github-flavored Markdown<ul><li>基本的にフォルダを切ってREADME.mdに書いていきます</li><li>参照はGitHubなどのブランディングで見ることが多いです（ローカルのVS Codeなどで見ても良いですが）</li><li><a href="https://chrome.google.com/webstore/detail/widescreen-for-github/elikdceclccjilahimjfceoalhdbndan">Widescreen for GitHub</a> のChrome拡張はオススメです。横幅が広くなり視認性があがります</li></ul></li><li>PlantUML<ul><li>シーケンス図、業務フロー図はMarkdown中にPlantUMLで記載し、Markdownから<code>![xxx構成図](xxx_構成図.drawio.png)</code> などで画像参照しています</li><li>参照はGitHub上からも見れるように、<a href="https://chrome.google.com/webstore/detail/pegmatite/jegkfbnfbfnohncpcfcimepibmhlkldo">pegmatite</a> というChrome拡張を利用</li><li>今ならMermaidを採用するかもしれませんが、ミンさんが作った<a href="https://future-architect.github.io/articles/20211108a/">PlantUMLのテーマ</a>を推したかったのもあり、継続して使っています</li></ul></li><li>Diagrams.net<ul><li>システム構成図はDiagrams.net（draw.io）で作成し、<code>.drawio.png</code> の拡張子でMarkdownから参照</li><li>レビューが難しいような作り込んだ画像のケースは、Pull Request時に差分を赤丸で囲ったバージョンも用意してもらったり、テキストでポイントを書いてもらったりします</li></ul></li><li>Web API定義<ul><li>OpenAPI SpecのYAMLファイル</li><li>参照はGitHub上からも見れるように、<a href="https://chrome.google.com/webstore/detail/swagger-viewer/nfmkaonpdmaglhjjlggfhlndofdldfag">swagger-viewer</a> を利用していましたが、最近動かなくなって対策を検討中</li></ul></li><li>ERD<ul><li><a href="https://a5m2.mmatsubara.com/index.html">A5:SQL Mk-2</a> の .a5er 拡張子のファイルをコミット</li><li>ini形式のテキストファイルであるため、差分がわかりやすい</li></ul></li><li>その他、DynamoDBなどのデータモデル<ul><li>Markdown中に表形式で表現。A5:SQL Mk-2に寄せても良い気はしています</li></ul></li></ul><p>markdownlintの記事でも書いていますが、単体テストデータ管理や区分値管理など、一部Excelを利用する場面はありますが、このようなファイルを同時に複数のブランチで変更することは今の私の環境においては、あまりありません。したがって、Git上でConflictが発生するのはテキストファイルのみとなり、Conflictの解消に大きな手間はかかりません。</p><h2 id="Git管理にしていない成果物"><a href="#Git管理にしていない成果物" class="headerlink" title="Git管理にしていない成果物"></a>Git管理にしていない成果物</h2><p>一方で以下のファイルは、Git対象外で管理することが多く、多くはスライドやスプレッドシートで作成しています。理由として、下記の資料は基本的にはワンショットでの作成で、何か状況が変化したとしても大本の資料を修正することはない（腐っても良いというかそれが当たり前）であるためです。</p><ul><li>ステークホルダーへの進捗報告、仕様相談など</li><li>テスト計画、テストケース一覧、実施エビデンス</li><li>チームの振り返り資料（KPT的な）</li><li>障害調査、報告</li></ul><h2 id="フォルダ構成について"><a href="#フォルダ構成について" class="headerlink" title="フォルダ構成について"></a>フォルダ構成について</h2><p>アプリケーション開発と同一のリポジトリで <code>docs</code> フォルダを切って管理しています。</p><p>イメージとしては次のようなフォルダ構成です。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.                           <span class="comment"># リポジトリルート</span></span><br><span class="line">├── README.md               <span class="comment"># 全体のインデックス</span></span><br><span class="line">├── backend                 <span class="comment"># バックエンドのコード</span></span><br><span class="line">│   └── ...</span><br><span class="line">├── docs                    <span class="comment"># ドキュメント全般</span></span><br><span class="line">│   ├── 01. 業務ドメイン</span><br><span class="line">│   ├── 02. システム設計</span><br><span class="line">│   ├── 03. データモデル</span><br><span class="line">│   ├── 04. ProgramDesign</span><br><span class="line">│   ├── 05. システム間I/F</span><br><span class="line">│   ├── ...</span><br><span class="line">│   ├── 91. 環境構築</span><br><span class="line">│   └── ...</span><br><span class="line">├── frontend                 <span class="comment"># フロントエンドのコード</span></span><br><span class="line">│   └── ...</span><br><span class="line">├── infrastrucutre           <span class="comment"># Terraform, Ansibleなどの構成管理</span></span><br><span class="line">│   └── ...</span><br><span class="line">└── ...</span><br></pre></td></tr></table></figure><p>ドキュメントのみを管理する独立したリポジトリを作成することも考えましたが、以下の理由でこの形に落ち着きました。</p><ul><li>私達のチーム特性やガバナンス上、基本的にはリポジトリの参照&#x2F;書き込みの権限は設計ドキュメントとコードで分ける必要はなかった</li><li>あるアプリケーション開発で複数リポジトリのInviteするなどの管理が面倒</li><li>リポジトリが別だと設計書とコードで同期をとったPull Requestも別になってしまうため、本当の意味での同期が難しくなるため</li></ul><h2 id="運用のコツ、やってみた感想"><a href="#運用のコツ、やってみた感想" class="headerlink" title="運用のコツ、やってみた感想"></a>運用のコツ、やってみた感想</h2><p>EditorConnfig、Prettierなどのフォーマットと、Markdownlintでのリント、CSpellなどのスペルチェックなどをCIに組み込んでといったテクニカル面の話はここでは割愛して、運用周りで感じたコツのようなものと感想をまとめていきます。あくまで私が経験した中で機能するなと感じた内容ですので、かいつまんで読んでいただければです。Tips的には、ドキュメントをコードから自動生成したり、ドキュメントからコードを自動生成するといったフローを踏むことで強制的に同期させることもありますが、これもテクニカル面が強くなるので割愛しています。</p><h3 id="Wiki管理は高速で腐っていった"><a href="#Wiki管理は高速で腐っていった" class="headerlink" title="Wiki管理は高速で腐っていった"></a>Wiki管理は高速で腐っていった</h3><p>実は設計ドキュメントをGit管理する前に、数名の小さなチームでしたが一度Wikiで管理できないか試してみました。結果としては全くメンテナンスがされずで、下手をするとGoogle Drive（ファイルサーバ）時代より酷いありさまだった気がします。</p><p>理由:</p><ul><li>Wikiだと、設計ドキュメントを作成&#x2F;更新する際のレビュープロセスを整えるのが厳しい<ul><li>コードと同じようにPull Request上で議論して、より良い物にしていくフローができず、モチベーションが上がらなかったのかなと思いました</li><li>逆に開発プロセスと同様の設計ドキュメントをPull Requestベースで行うのは、そのような開発フローに慣れていないメンバーでもそこまで違和感を感じていなかったように見えます</li></ul></li><li>Issueに紐づけての管理が難しい<ul><li>設計ドキュメントの陳腐化に気が付き、Issueだけ起票して対応のタイミングや担当者を別で管理したい場合でも、Wikiの場合は具体的にどのように直したか不明確になりがちでした</li></ul></li></ul><p>GitLab Handbookでも類似の話題があったと思います。同じ結論です。</p><h3 id="設計ドキュメントを外部に共有したい時に困らないか？"><a href="#設計ドキュメントを外部に共有したい時に困らないか？" class="headerlink" title="設計ドキュメントを外部に共有したい時に困らないか？"></a>設計ドキュメントを外部に共有したい時に困らないか？</h3><p>正直なところ、面倒に思うときがしばしばあります。スライドで作成した場合は、そのURLや成果物ファイルを直接共有できますが、リポジトリ管理の場合は権限付与から実施しないとならないため、少し面倒です。適切な権限設定と、有効期間をどう考えるかは悩みです。</p><p>ただし、ステークホルダー向けの資料は従来どおりスライドなどで作成しているため、常日頃からそれなりに適切に議題に出していれば、振り返ってみてもそこまで開発チーム向けの設計ドキュメントを渡す必要があるケースは少なかったです。記憶の中で情報提供で多いのは以下です。</p><ul><li>AWSインフラ構成図、ネットワーク構成図（どのサービスを利用するかのレビューや、監視運用などガバナンスチェックなど）</li><li>API定義（これはOpenAPI Specを使っているため、そのままYAMLを渡したりHTMLを渡していました）</li><li>ERD定義（A5:SQL Mk-2 はERDをPDF出力できるためそれを渡していました）</li></ul><h3 id="コードを修正したとき、どのドキュメントを一緒に直すか分からない問題"><a href="#コードを修正したとき、どのドキュメントを一緒に直すか分からない問題" class="headerlink" title="コードを修正したとき、どのドキュメントを一緒に直すか分からない問題"></a>コードを修正したとき、どのドキュメントを一緒に直すか分からない問題</h3><p>同期を取らないドキュメントを修正せず、コードだけ直してPull Requestに出しちゃう問題です。しばしば発生します。参画歴が浅いメンバーどころか、立ち上げからいる自分ですら見落とすときがあります。例えばバックエンドのWeb APIで、どのAPIがどのDBにCRUDするかを、プログラム詳細設計に書いていたとします。SQLに結合テーブルを追加してテストを直すので手一杯で、ドキュメントのアップデートが追いつかないと行ったケースです。</p><p>対策としては次がありますが、自動化しない限りはレビュアー含めて全員でチェックする必要があります。がんばりましょう。</p><ul><li>SQLを解析してCRUD表を自動生成する&#x2F;チェックする</li><li>Pull Requestのテンプレートに、設計ドキュメントも修正したみたいなチェックボックスを追加する</li><li>開発規約の作業フローに、そういった同期を取るべきリソースを記載し、ルール化しておく</li></ul><h3 id="設計ドキュメントとコードを同じPull-Requestで出すのに慣れ過ぎると、設計レビューがおざなりになりがち"><a href="#設計ドキュメントとコードを同じPull-Requestで出すのに慣れ過ぎると、設計レビューがおざなりになりがち" class="headerlink" title="設計ドキュメントとコードを同じPull Requestで出すのに慣れ過ぎると、設計レビューがおざなりになりがち"></a>設計ドキュメントとコードを同じPull Requestで出すのに慣れ過ぎると、設計レビューがおざなりになりがち</h3><p>チームの開発規約をきっちり定義すれば防げるかと思いますが、設計書とコードを同期をとるために同じPull Requestでレビューするのに慣れると、粒度が大きい改修内容であっても、コードが実装された状態で設計ドキュメントもレビューすることになります。DBにカラムを1つ追加くらいで内容に議論の余地がなければその方が効率的ですが、設計レベルで手戻りがあるケースが何度か発生しました。</p><p>そのため、以下のような方針が推奨であると、開発規約に以下の流れを推奨すると追記しました。</p><ol><li>設計ドキュメントのみのPull Requestを作成して、チーム内レビューを通すこと</li><li>1が終わった後に、コード改修を実施したPull Requestを出すこと</li></ol><p>小さなものも含めて、全て設計ドキュメントレビューとコード改修のPRを分離すると、それはそれで不効率であるため、判断は各メンバーに委ねるレベルにしていますが、大規模開発になると一律分離するといった判断にも繋がってくるかなと思います。</p><p>これの効果ですが、レビュアーとしても次の観点で有益でした。</p><ul><li>設計ドキュメントとコードが同じPull Requestに無いので、設計内容に集中してレビューできる</li><li>設計上、必達ではないもののWANTで直して欲しい内容があっても、すでにコードが実装されていて手戻りになるため、スケジュールを盾にApproveせざるを得ない状況がある。最初に設計レビューだけすると、これらの不健全な状況を防ぐことができる</li></ul><p>ごく一般論ですし、言うまでもなく当たり前の話ですが、設計→レビュー→実装→レビュー のステップは分けましょうといった内容です。下手に全てGit管理なので、人によっては設計という行為が実装と概念が混ざってしまい、こういう必要な手順をスキップしてしまう人もでてくるんだなといった所感です。</p><h3 id="結局人で管理する部分が残るのであれば、陳腐化しちゃいますよね"><a href="#結局人で管理する部分が残るのであれば、陳腐化しちゃいますよね" class="headerlink" title="結局人で管理する部分が残るのであれば、陳腐化しちゃいますよね"></a>結局人で管理する部分が残るのであれば、陳腐化しちゃいますよね</h3><p>はい、自動生成系、静的解析での整合性チェックを完全に整えない限りは、必ず設計ドキュメントは陳腐化します。ただ、改善するチャンスはいくつかあると思います。</p><p>例えば、私は以下のタイミングで設計ドキュメントをよく修正します</p><ol><li>新規参画者向けにオンボーディングする場合</li><li>自分が開発していた機能を、だれかに引き継いでもらうタイミング</li><li>あるメンバーが開発していた機能を、自分などが引き継ぐタイミング</li><li>だれかに機能仕様などの質問を受け、設計ドキュメントのURLだけ渡して終わらせたい場合</li></ol><p>1, 2, 4は自分自身がだれかに状況を説明すると思うのですが、その際に設計ドキュメントを使うようにします。そうすると、説明を通して過不足や話しにくい部分、陳腐化している部分に気がつくことができます。また、説明を受けているメンバーからの質問も、ドキュメントをアップデートするチャンスです。</p><p>良いドキュメントの状態をキープできると、その後の開発生産性や開発者体験にプラスに働きますので、最初は直すべき部分が多くて大変かと思いますが、継続して良い状態になるよう手入れしてきましょう。</p><p>「あとでドキュメントを直す時間を取ろう」は大体、そんな時間は来ません。直すべきは、直したほうが効率が上がるその都度のタイミングだと思いますので、ドキュメントを直すと自分も楽になる範囲内でキレイにしていきましょう。</p><p>意識するのは、設計ドキュメントのURLを送るだけで説明できる余地を増やすことだと思います。これもGitLab Handbookの考え方に近しいと思います。</p><h3 id="drawioで作るコツ"><a href="#drawioで作るコツ" class="headerlink" title="drawioで作るコツ"></a>drawioで作るコツ</h3><p><a href="/articles/20200116/">実践Drawio</a> 記事がおすすめです。個人的には「3.2. Lineジャンプ」は必ず設定して欲しいと思っています。</p><p>レイヤー化はシンプルな図であれば不要かと思いますが、次の背景色は必ず設定したほうが良いと思います。これがないと構成図が透過になり、ダークモードのエディタなどで見る時に不便と感じる時がありました。（もちろん、出力時に背景を透明にするにチェックを入れなければ良いのですが..）</p><img src="/images/20231101a/drawio.png" alt="" width="331" height="290" loading="lazy"><p>チームメンバー以外に作成した構成図などを共有することがほとんど無い資料に関しては、基本的にタイトル、作成者、作成日、更新者などのヘッダは不要かと思います。</p><h3 id="PlantUML-vs-draw-io"><a href="#PlantUML-vs-draw-io" class="headerlink" title="PlantUML vs draw.io"></a>PlantUML vs draw.io</h3><p>シーケンス図などはどちらでも活用できるため、最初はどちらで書こうか迷うこともあるかもしれません。</p><p>基本的にはPlantUMLで書けるものは、全てPlantUMLで書くべきだと思います。テキストベースであるため、おそらく少し慣れればdraw.ioより生産性が高いのと、細かいインデントなどの好みの違いが出にくいため、レビューもスムーズだと思います。何より、いったん作ってしまえばその後の改修での、git diffが見やすいため、レビューやトレーサビリティでも優位なためです。</p><p>とはいえ、複雑度が高いものには余計に時間がかかるため、一点もの構成図などは素直にdraw.ioを使ったほうが良いかなと思います。</p><h3 id="docs配下の画像でどれがdraw-ioで編集可能か分かるように"><a href="#docs配下の画像でどれがdraw-ioで編集可能か分かるように" class="headerlink" title="docs配下の画像でどれがdraw.ioで編集可能か分かるように"></a>docs配下の画像でどれがdraw.ioで編集可能か分かるように</h3><p>基本的には拡張子を <code>.drawio.png</code> や <code>.drawio.svg</code> にするようにしています。ときには報告資料で作成したスライドの図表をそのまま、設計図に転用したい場合もあります（xxxの会議での決定事項です、といった背景説明の時にゆうこうなため）。その場合は <code>xxx.png</code> といった拡張子にして、区別するようにしています。</p><h3 id="チケットに記載した内容と設計ドキュメントで内容が重複する"><a href="#チケットに記載した内容と設計ドキュメントで内容が重複する" class="headerlink" title="チケットに記載した内容と設計ドキュメントで内容が重複する"></a>チケットに記載した内容と設計ドキュメントで内容が重複する</h3><p>しばしば、チケットに課題や背景、対応案などしっかり記載すると、設計ドキュメント側と重複する内容になりうることがあります。このケースだと、何かしら背景部分にアップデートが入ると、チケット・設計ドキュメントのダブルメンテになり、冗長です。</p><p>この場合は、チケットのリンクを設計ドキュメントに貼って省略するでよいでしょう。もし、設計開発上、差分や注意事項があれば追記すると良いと思います。その対応が後日、別メンバーへの引き継ぎなどで困る場合は、改めてチケットの内容を振り下ろすなどすると良いと思います。これはその機能の粒度やニーズ（ユーザーの関心事が大きく、改修頻度が多いかどうか）にも依存してくると思います。</p><h3 id="Markdownで表を作るのが面倒"><a href="#Markdownで表を作るのが面倒" class="headerlink" title="Markdownで表を作るのが面倒"></a>Markdownで表を作るのが面倒</h3><p>分かります。私は初回の表は、スプレッドシートで作成したのち、<a href="https://www.tablesgenerator.com/markdown_tables">tablegenerator</a>というWebツールで、Markdown変換しています。</p><p>業務システムだと列数がとにかく多くなってくるため、コツとしては絵文字などを上手く取り入れ、視認性が高く、楽しいドキュメントにすることだと思います。</p><p>例えば、「参照可能&#x2F;参照不可」 といった内容をセルに書くのではなく、「✅、✔、✘、❌」 といったアイコンで代用できないか考えます（凡例をつければよいのです）。</p><p>楽しく見せるというのは設計ドキュメントを維持管理する上で重要なモチベーションとなります。GitHubなどで有名なリポジトリのREADMEを見ると、各種バッチを付けたり、ターミナルの動画を駆使したり工夫が満載です。ぜひそういった技を取り入れていくと良いかなと思います。</p><h3 id="ドキュメントのレビューで、表現が伝わる-x2F-伝わりにくいでやり取りのホップ数が増える"><a href="#ドキュメントのレビューで、表現が伝わる-x2F-伝わりにくいでやり取りのホップ数が増える" class="headerlink" title="ドキュメントのレビューで、表現が伝わる&#x2F;伝わりにくいでやり取りのホップ数が増える"></a>ドキュメントのレビューで、表現が伝わる&#x2F;伝わりにくいでやり取りのホップ数が増える</h3><p>設計ドキュメントをこまめにアップデートしていると、その表現だと伝わりにくいといったレビューコメントが発生します。どうしても差分だけ見てコメントするとそのような感想になりがちですが、全体を通して読むと文脈上は自明であることも多いため、そういったレビューコメントを付けられても困惑してしまうことが多いです。</p><p>そのため、設計ドキュメントについても、できる限りsuggestionを用いることを徹底しています。コードより人それぞれの受け取り方が異なりやすいため、どう直してほしいかがダイレクトに伝わります。</p><img src="/images/20231101a/image.png" alt="image.png" width="1172" height="295" loading="lazy"><h3 id="tocは腐る"><a href="#tocは腐る" class="headerlink" title="tocは腐る"></a>tocは腐る</h3><p>toc（Table of Contents）をREADMEに手動で書いてくれる人がいます。しかししばしば陳腐化して本文と同期が取れなくなった設計ドキュメントを見てきました。チームルールとして一律、書かないようにするのが良いと思います。</p><p>もし、必要な場合は<a href="https://dev.classmethod.jp/articles/auto-generate-toc-on-readme-by-actions/">[GitHub]README.mdの目次生成をAction「toc-generator」による自動化で楽しよう | DevelopersIO</a> のような仕組みで統一すると良いと思います。</p><h3 id="気になったらすぐ直す習慣を"><a href="#気になったらすぐ直す習慣を" class="headerlink" title="気になったらすぐ直す習慣を"></a>気になったらすぐ直す習慣を</h3><p>1ファイルだけであれば、鉛筆マークから直接編集→Pull Requestまでブラウザで完結して作業できます。</p><img src="/images/20231101a/image_2.png" alt="image.png" width="1058" height="338" loading="lazy"><p>おそらく、設計ドキュメントを参照する場合、大半はブラウザで参照していると思うので、エディタに切り替えなくて済むため、便利です。</p><p>ドキュメント修正の敷居はなるべく高くせず気軽に直していく文化をチームで作れると良いと思います。</p><h2 id="やってみた結果"><a href="#やってみた結果" class="headerlink" title="やってみた結果"></a>やってみた結果</h2><p>運用のコツや所感で書いたように、ナレッジはいくつかあるものの、基本的には設計ドキュメントをGit管理することのメリットは大きいように思えます。</p><p>開発の制約として、テキストベースの設計書が許容できないなどといった前提がなければ、これからもこのような形式を採用すると思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>設計書をテキストファイルで作成し、Git管理することで、ドキュメントの陳腐化を防げないかトライしてみました。</p><p>最終的には開発メンバー各々の意識に支えられる面もありますが、コードをレビューするのと同様に設計レビューを行えるため、フローに載せやすさはあります。</p><p>自動生成、静的解析などCIでワークフローをより強化させやすい面も気に入っています。この方向で数年はドキュメント腐る問題にあらがってみたいと思います。</p><p>次は斎藤さんの<a href="/articles/20231102a/">初心者が暗号の基礎と歴史を勉強して見た</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88/">ドキュメント</category>
      
      <category domain="https://future-architect.github.io/tags/Git/">Git</category>
      
      
      <comments>https://future-architect.github.io/articles/20231101a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>時を駆けるモバイルアプリUI設計: 2007-2023の理論とトレンドを調べてみた</title>
      <link>https://future-architect.github.io/articles/20231031a/</link>
      <guid>https://future-architect.github.io/articles/20231031a/</guid>
      <pubDate>Mon, 30 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;※この記事は、&lt;a href=&quot;/articles/20231030a/&quot;&gt;秋のブログ習慣2023&lt;/a&gt;の２本目の記事となります&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>※この記事は、<a href="/articles/20231030a/">秋のブログ習慣2023</a>の２本目の記事となります</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>2023年の秋、スマートフォンやタブレットは私たちの日常生活に欠かせない存在となっています。</p><p>これらのデバイスに対するアプリケーション開発の中でも、UI(User Interface)とUX(User Experience)設計の議論については欠かすことができません。</p><p>「UI」という単語は広範囲にわたる意味を持ちますが、今回は「モバイルアプリのUI設計」という文脈に焦点を絞り、その理論の歴史とトレンドについて調べてみました。</p><h2 id="モバイルアプリのUI設計について"><a href="#モバイルアプリのUI設計について" class="headerlink" title="モバイルアプリのUI設計について"></a>モバイルアプリのUI設計について</h2><p>優れた「モバイルアプリのUI」は、どのようなものがあるでしょうか？</p><p>イメージしやすいものだと、以下のようなものがあります。</p><ul><li>ボタンの色や配置がわかりやすい。ホームボタンであれば家の形をしていたり、検索ボタンでは虫眼鏡の形をしているなど</li><li>タップしたときに何が起こるのか、ユーザーにわかりやすいこと。アプリヘッダーに「←」(左矢印)が表示されていれば、前の画面に戻るなど</li><li>通信が発生するボタンを押したときに、スピナー(通常は回転するアイコン)が表示され、かつ短時間で処理が終わり待ち時間が少ないこと</li></ul><p>逆に、優れていないUIについては以下のような報告もあります。</p><ul><li>モバイルショッピングアプリのUIの使いやすさがユーザーの購買意欲に直接影響するといったことを示唆する<a href="https://www.sciencedirect.com/science/article/pii/S1877050917322147">研究</a></li><li>ユーザーの90%がパフォーマンスの低下でアプリの使用を停止したとする<a href="https://www.toptal.com/designers/ux/ux-statistics-insights-infographic">調査レポート</a></li></ul><p>せっかく良い内容のアプリを作っても、UIがその価値を下げては台無しです。</p><p>では、良いUIとはどのようなものでしょうか？その設計とは？</p><p>次の項からは、モバイルアプリのUI設計の理論や思想について、どのようなものがあるのか。また、その歴史について書籍や論文などから調べてみました。</p><h2 id="モバイルアプリUI設計理論・思想の歴史"><a href="#モバイルアプリUI設計理論・思想の歴史" class="headerlink" title="モバイルアプリUI設計理論・思想の歴史"></a>モバイルアプリUI設計理論・思想の歴史</h2><p>モバイルアプリのUI設計の歴史を振り返ると、2007年のApple初代iPhoneの発表が大きなマイルストーンとして挙げられます。</p><p>それ以前にも、モバイルデバイスは存在していました。パーソナルデジタルアシスタント（PDA）やタッチスクリーン携帯電話と呼ばれるようなものです。これらのデバイスの中にはタッチスクリーンを備えたものもありましたが、多くはスタイラスによって操作されるもので、指タッチによる操作はあまり前提としていないものが多かったようです。</p><p>初代iPhoneでは、現在ではモバイルデバイス操作の標準となっている指タッチでの操作が導入され、それが世界的な流行を引き起こしました。これにより、モバイルデバイスの操作方法は劇的に変化し、モバイルアプリのUI設計についても新たな時代を迎えました。</p><p>そこからも、マルチタッチ技術の進化、Android,iOSなどのプラットフォームの進化、折りたたみデバイスの登場、あるいはユーザー自体の期待の向上など、様々な変化が起こってきました。それらに応じるように、近年のモバイルアプリのUI設計に至るまで、様々な理論や思想が議論され、そして進化し続けています。</p><p>以下では、今回調べたモバイルアプリUI設計理論や思想に関わる書籍・論文について、いくつかピックアップして時系列順に紹介していきます。</p><ol><li>Human Interface Guidelines(1977-現在)</li><li>Mobile Design and Development: Practical concepts and techniques for creating mobile sites and web apps(2009)</li><li>Brave NUI World: Designing Natural User Interfaces for Touch and Gesture by Daniel Wigdor and Dennis Wixon (2011)</li><li>Mobile First(2011)</li><li>Microinteractions: Designing with Details (2013)</li><li>Material Design (2014)</li></ol><p>※総務省の調査によると、日本のスマートフォン普及率は以下のような推移をたどっているようです。<br>時系列と普及率を見比べてご覧いただければと思います。</p><img src="/images/20231031a/image.png" alt="image.png" width="875" height="720" loading="lazy">[総務省「通信利用動向調査」より引用](https://www.soumu.go.jp/johotsusintokei/statistics/statistics05.html)<h3 id="1-Human-Interface-Guidelines-1977-現在"><a href="#1-Human-Interface-Guidelines-1977-現在" class="headerlink" title="1. Human Interface Guidelines(1977-現在)"></a>1. Human Interface Guidelines(1977-現在)</h3><p><a href="https://developer.apple.com/design/human-interface-guidelines">https://developer.apple.com/design/human-interface-guidelines</a></p><p>時系列順に紹介すると、最初に来るのはAppleが提唱した「HumanInterface Guidelines(HIG)」です。こちらは、Appleが定期的にアップデートをしているインターフェースのガイドラインで、歴史を遡ると初版である「The Apple II Human Interface Guidelines」は1977年のものとなります。</p><p>とはいえ、「Macintosh GUI」についての原則と設計哲学が記載されたものとなり、モバイルデバイスに関わるものとしては、「iPhone Human Interface Guidelines」が初代iPhoneの発売と同年である2007年に公表されています。</p><p>このHIGは現在に至るまで様々な製品、OSのアップデートに伴い改定され続けており、iOSの普及や統一されたインターフェースに大きな貢献をしているのではないでしょうか？</p><p>※余談ですが、弊社にもHIG(Healthcare Innovation Group)があって時々まぎらわしかったりします</p><h3 id="2-Mobile-Design-and-Development-Practical-concepts-and-techniques-for-creating-mobile-sites-and-web-apps-2009"><a href="#2-Mobile-Design-and-Development-Practical-concepts-and-techniques-for-creating-mobile-sites-and-web-apps-2009" class="headerlink" title="2. Mobile Design and Development: Practical concepts and techniques for creating mobile sites and web apps(2009)"></a>2. Mobile Design and Development: Practical concepts and techniques for creating mobile sites and web apps(2009)</h3><p><a href="https://www.oreilly.com/library/view/mobile-design-and/9780596806231/">https://www.oreilly.com/library/view/mobile-design-and/9780596806231/</a></p><p>次に紹介するのはBrian Flingによる執筆、O’Reilly Mediaから出版されている「Mobile Design and Development」です。この書籍では、モバイルアプリの設計や開発について網羅的に解説されています。</p><p>目次としては、以下のようになっており、記載当時のモバイルアプリ開発の状況についてや、モバイルUI設計の状況について知る上でとてもわかりやすいものでした。</p><blockquote><p>Chapter 1, A Brief History of Mobile<br>Chapter 2, The Mobile Ecosystem<br>Chapter 3, Why Mobile?<br>Chapter 4, Designing for Context<br>Chapter 5, Developing a Mobile Strategy<br>Chapter 6, Types of Mobile Applications<br>Chapter 7, Mobile Information Architecture<br>Chapter 8, Mobile Design<br>Chapter 9, Mobile Web Apps Versus Native Applications<br>Chapter 10, Mobile 2.0<br>Chapter 11, Mobile Web Development<br>Chapter 12, iPhone Web Apps<br>Chapter 13, Adapting to Devices<br>Chapter 14, Making Money in Mobile<br>Chapter 15, Supporting Devices<br>Chapter 16, The Future of Mobile</p></blockquote><p>目次を見るだけでも、当時のモバイルアプリ開発としてはネイティブアプリが絶対的な選択肢とはならず、Webアプリとどちらを選択するのかといったことも大きな議論の対象のひとつであったことが伺えます。</p><p>また、この書籍だけでなく、2011年ごろの論文<a href="https://dl.acm.org/doi/10.1145/1966989.1968203">6</a>,<a href="https://dl.acm.org/doi/pdf/10.1145/1941487.1941504#:~:text=,native">7</a>でも、ネイティブアプリ vs ウェブアプリといった文脈で盛んに議論がかわされていたようです。</p><p>2023年の現時点においても、ネイティブアプリとWebページをネイティブアプリのように表示できるPWA(Progressive Web Apps)の比較について議論されることがありますが、当時の状況では議論の内容が少々異なったようです。</p><blockquote><p>The mobile web historically has been so horrendous to deal with that<br>  the only way to create a compelling experience was to go native.<br>(p.156を引用)</p></blockquote><p>本書では上記で記載されているように、筆者によるとモバイルWebアプリケーションを開発すること自体に一定のハードルがあったようです。</p><p>背景として、当時のMobile SafariではCSSの<code>position:fixed</code>の動作に課題があったり<a href="https://stackoverflow.com/questions/743123/fixed-positioning-in-mobile-safari">8</a>、特定のOS標準のブラウザでは描画に課題があったり<a href="https://www.anandtech.com/show/3880/blackberry-torch-9800-review-keeping-rims-flame-alive/7">9</a>したように、モバイルブラウザ自体の技術が成熟していなかったことが考えられます。</p><p>次に、本記事のテーマであるUIについて触れられている項を見てみましょう。</p><blockquote><p>Although information architecture has become a common discipline in<br>    the web industry, unfortunately, the mobile industry—like software—has<br>    only a handful of specialized mobile information architects. Although<br>    mobile information architecture is hardly a discipline in its own right,<br>    it certainly ought to be. This is not because it is so dissimilar from its<br>    desktop cousin, but because of context, added technical constraints, and<br>    needing to display on a smaller screen as much information as we would on<br>    a desktop.<br>(p.104を引用)</p></blockquote><p>とあるように、モバイルに限らないUI&#x2F;UXといった議論は行われていたようですが<a href="http://www.jjg.net/elements/pdf/elements.pdf">10</a>、モバイルアプリのUI設計に特異な議論はまだ主流でなかったことが考えられます。</p><p>本書においては、「Chapter 7, Mobile Information Architecture」のセクションでは、モバイルアプリの情報アーキテクトとして、サイトマップやクリックストリームについて記載されています。既存のWebサイト構築とは異なるTipsとして、ユーザーの操作タスクが短いことがあげられています。</p><p>また、2023年と異なる興味深い点として、間違ったページに遷移しやすい構成である場合にユーザーに与える悪影響として以下が挙げられています。</p><ul><li>ユーザーが前のページに迅速に戻るための信頼性のあるブロードバンド接続を持っているとは限らないことを想定する必要があること</li><li>通信が発生することで、通信料金が発生すること</li></ul><p>「Chapter 8, Mobile Design」のセクションでは、モバイルアプリのデザイン構築についてのTipsが網羅的にわかりやすく記載されていました。特に、モバイルデバイスは通常のWebサイトとは違い、画面が小さいことを意識することの重要性について述べられている部分が多かったように感じます。</p><p>今ではResponsible Designと呼ばれる概念に近いですが、「Responsive Web Design」という単語自体が2010年にEthan Marcotteによって提唱されたものだそうで<a href="https://alistapart.com/article/responsive-web-design/">6</a>、記事執筆時に単語としては普及していなかった可能性もあります。</p><p>モバイルデバイスも考慮したレイアウトの議論についても、盛んに行われていたようです。</p><h3 id="3-Brave-NUI-World-Designing-Natural-User-Interfaces-for-Touch-and-Gesture-by-Daniel-Wigdor-and-Dennis-Wixon-2011"><a href="#3-Brave-NUI-World-Designing-Natural-User-Interfaces-for-Touch-and-Gesture-by-Daniel-Wigdor-and-Dennis-Wixon-2011" class="headerlink" title="3. Brave NUI World: Designing Natural User Interfaces for Touch and Gesture by Daniel Wigdor and Dennis Wixon (2011)"></a>3. Brave NUI World: Designing Natural User Interfaces for Touch and Gesture by Daniel Wigdor and Dennis Wixon (2011)</h3><p><a href="https://www.amazon.co.jp/Brave-NUI-World-Designing-Interfaces/dp/0123822319">https://www.amazon.co.jp/Brave-NUI-World-Designing-Interfaces/dp/0123822319</a></p><p>次に紹介するのはDaniel Wigdorによる執筆、Morgan Kaufmannから出版されている「Brave NUI World」です。この書籍では、タッチとジェスチャーを中心としたナチュラルユーザーインターフェース(NUI)の設計について記載されています。</p><p>NUI自体は、モバイルデバイスの文脈に閉じる話ではなく、あらゆる入力テクノロジーを活用して構築された自然なインターフェースに意味が及びます。ですが、本書では特にタッチとジェスチャーの相互作用に重点が置かれて紹介されており、この時期に盛んとなっているタッチジェスチャーに関する文献の中でも著名なものであったので本記事でピックアップします。</p><p>目次としては、以下のようになっています。(なかなかボリュームある本でした)</p><blockquote><p>PartⅠ Introducing the NUI<br>CHAPTER 1 Introduction<br>CHAPTER 2 The Natural User Interface<br>CHAPTER 3 Ecological Niche: Computing, the Social Environment, and Ways of Working<br>Part Ⅱ Design Ethos of NUI<br>CHAPTER 4 Less Is More<br>CHAPTER 5 Contextual Environments<br>CHAPTER 6 The Spatial NUI<br>CHAPTER 7 The Social NUI<br>CHAPTER 8 Seamless<br>CHAPTER 9 Super Real<br>CHAPTER 10 Scaffolding<br>CHAPTER 11 User Defferentiation<br>Part Ⅲ NewTechnologies: Understanding and Technological Artifacts<br>CHAPTER 12 The State-Transition Model Of Input<br>CHAPTER 13 Fat Fingers<br>CHAPTER 14 No Touch Left Behind: Feedback Is Essential<br>CHAPTER 15 Touch versus In-Air Gestures<br>Part Ⅳ Creating an Interaction Language<br>CHAPTER 16 Mechanics, Dynamics, and Aesthetics: The Application of MDA<br>CHAPTER 17 New Primitives<br>CHAPTER 18 The Anatomy of a Gesture<br>CHAPTER 19 Properties of a Gesture Language<br>CHAPTER 20 Self-Revealing Gesture<br>CHAPTER 21 A Model of the Mode and Flow of a Gesture System<br>Part Ⅴ No Such Thing as Touch<br>CHAPTER 22 Know Your Platform<br>CHAPTER 23 The Fundamentals Have to Work<br>CHAPTER 24 Numbers of Contents<br>CHAPTER 25 Contact Data: Shape, Pressure, and Hover<br>CHAPTER 26 Vertical, Horizontal, and Mobile<br>Part Ⅵ Process: How Do You Get There?<br>CHAPTER 27 The User-Derived Interface(UDI)<br>CHAPTER 28 Lessons in False-Gesture Recognition<br>CHAPTER 29 RITE with a Purpose<br>CHAPTER 30 A Word About Engineering</p></blockquote><p>本書では、GUIを中心とした既存のマウス入力と、タッチ入力を中心としたデバイス操作には大きな違いがあることを認識した上で設計をする必要性を強く主張しています。</p><p>具体的なタッチとジェスチャーに関する項目はPart Ⅲ以降から様々な角度、考え方から科学的に記載をされています。</p><p>全編通して参考になる本でしたが、一つ興味深い例を上げるとするのであれば「CHAPTER 13 Fat Fingers」が挙げられます。このセクションでは、指タッチで生じる課題として、①指はマウスよりも大きな領域で接触するため、画面のピクセル単位での正確なタッチが難しいこと②タッチしている箇所が指自体で見えなくなること、を課題として挙げています。言われてみれば当然と思う方もいるかもしれませんが、自身としてはUIを考える上であまり意識していなかった部分であったので興味深かったです。</p><p>この課題への対応として、①タッチオブジェクトを十分に大きくすることや、②「Iceberg Targets」と呼ばれる、画面領域をいくつかに分割し、タッチポイントに最も近いオブジェクトに対してアクションを発生させること、などが記載されていました。</p><p>現在のモバイルデバイスでは一般的となっていて、ユーザーとしても慣れ親しんでいるタッチ入力ですが、タッチ、タップ、フリック、ピンチ操作など、基本的な操作方法としては大きな変化はないように感じます。そういった意味でも、本書はそれらの基本操作をいかにユーザーに自然に操作できるように設計できるかという部分で大きく勉強になる本でした。</p><p>この書籍と同時期に、タッチジェスチャーに関する研究・書籍についても多く出ているようです。iPad (第1世代)も本書の出版と同年の2010年に発売され、他にもタッチスクリーン採用のモバイルデバイスが次々発売されていた時期のようで、タッチ入力がより普及していたことが伺えます。</p><h3 id="4-Mobile-First-2011"><a href="#4-Mobile-First-2011" class="headerlink" title="4. Mobile First(2011)"></a>4. Mobile First(2011)</h3><p><a href="https://www.amazon.co.jp/Mobile-First-Luke-Wroblewski/dp/1937557022">https://www.amazon.co.jp/Mobile-First-Luke-Wroblewski/dp/1937557022</a></p><p>次に紹介するのは、Luke Wroblewskiによる執筆、Ingramから出版された「Mobile First」です。統計的にはモバイルデバイスの普及が爆発的に始まった2010年近辺の出版であり、いよいよモバイルアプリの立ち位置が向上したことを思わせるタイトルです。</p><p>この書籍の内容としては、タイトル通り「モバイルファースト」、ウェブサイトやアプリケーションをまずモバイル向けに設計・構築することを推奨するものです。</p><p>目次は以下のようなものです。</p><blockquote><p>Part1 Why Mobile First?<br>CHAPTER1 Growth<br>CHAPTER2 Contstraints<br>CHAPTER3 Capabilities<br>Part2 How to go Mobile<br>CHAPTER4 Organization<br>CHAPTER5 Actions<br>CHAPTER6 Inputs<br>CHAPTER7 Layout</p></blockquote><p>「Part1 Why Mobile First?」では、当時のモバイルデバイスのシェア率の拡大を背景に、「モバイルファースト」とするメリットをさまざまな角度から論じています。</p><blockquote><p>So it’s not hard to imagine how another bold prediction<br>like “mobile phones will overtake PCs as the most common<br>web access devices worldwide by 2013” will happen much<br>earlier than predicted as well (<a href="http://bkaprt.com/mf/10">http://bkaprt.com/mf/10</a>).<br>(p.8を引用)</p></blockquote><p>上記では、「したがって、「モバイル電話は2013年までに世界中で最も一般的なウェブアクセスデバイスとしてパソコンを上回るだろう」というような大胆な予測が、予想よりもはるかに早く実現するのは難しくありません」と言った趣旨の内容が記載されており、「2013年までに」こそ日本では実現しましたが、現時点では実際にスマートフォンの普及率がPCと逆転していることもあり感慨深いです。</p><p>また、UI設計に関するセクションとしては、CHATPTER5 ~ 7が具体的な内容に踏み込んでいます。</p><p>「CHAPTER5 Actions」では、タップ操作を始めとしたタッチ対象オブジェクトのサイズについてや、タッチジェスチャーについて言及されています。また、本記事の前項で紹介したNUIが紹介されていますが、GUIとNUIの過渡期にあることを念頭にインターフェースデザインを考える必要があると記載されてもいます。</p><p>「CHAPTER6 Inputs」では、モバイルアプリでの入力タイプについて言及されています。ウェブサイトで使用されてきた、チェックボックスやラジオボタン、パスワード、ドロップダウン、ファイルの選択、送信ボタン、プレーンテキストなどについて、モバイルデバイス特有の意識すべきことなどが記載されています。</p><p>「CHAPTER7 Layout」では、モバイルデバイス特有のレイアウトについて言及されています。レスポンシブルの必要性や、シンプルに作ることの重要性については、今も変わらない重要なことであると感じさせられました。</p><p>本書では、モバイルデバイスの急速な普及を背景に、「モバイルファースト」の思想について記載されていました。優れたUIについて言及する中で、様々な既存アプリの比較も行っており、モバイルアプリの発展自体が背景にあるようにも考えられる内容で興味深かったです。</p><h3 id="5-Microinteractions-2013"><a href="#5-Microinteractions-2013" class="headerlink" title="5. Microinteractions (2013)"></a>5. Microinteractions (2013)</h3><p><a href="https://www.oreilly.com/library/view/microinteractions/9781449342760/">https://www.oreilly.com/library/view/microinteractions/9781449342760/</a></p><p>次はこちらのDan Safferによる執筆、O’Reilly Media出版の書籍を紹介します。<br>本書は以下の目次で構成されています。</p><blockquote><p>Chapter 1, Designing Microinteractions<br>Chapter 2, Triggers<br>Chapter 3, Rules<br>Chapter 4, Feedback<br>Chapter 5, Loops and Modes<br>Chapter 6, Putting It All Together</p></blockquote><p>本書では、「Microinteractions」を製品の機能的のうち細部のインタラクティブなものを示しています。例えば、パスワードのバリデーションチェック(今入力しているのものが、OKなのか、文字数不足なのかのリアルタイム表示)が挙げられます。</p><p>詳細については本書を読んでいただきたいのですが、マイクロインタラクションについて、本書では「Triggers」「Rules」「Feedback」「Loop&amp;Modes」の４つで構成される、として定義し、それぞれの定義や原則について詳細に記載されています。</p><p>ユーザーが直感的に操作する上で、明確なフィードバックがあることは重要で、常に意識して設計していきたい要素であると感じました。</p><h3 id="6-Material-Design-2014-x2F-2018-x2F-2021"><a href="#6-Material-Design-2014-x2F-2018-x2F-2021" class="headerlink" title="6. Material Design (2014&#x2F;2018&#x2F;2021)"></a>6. <strong>Material Design (2014&#x2F;2018&#x2F;2021)</strong></h3><p><a href="https://m1.material.io/">https://m1.material.io/</a><br><a href="https://m2.material.io/">https://m2.material.io/</a><br><a href="https://m3.material.io/">https://m3.material.io/</a></p><p>モバイルアプリに固有の内容ではありませんが、こちらは2014年にGoogleが提唱したUI&#x2F;UXのデザインである「Material Design」の紹介です。</p><p>※Material DesignはM1,M2,M3の3つが存在しますが、2014年に提唱された最初のものがM1となります</p><p>当時提唱されたMaterial Designの目標としては、以下の2つが記載されています。</p><blockquote><p>Create a visual language that synthesizes classic principles of good design with the innovation and possibility of technology and science.<br>(直訳: 良いデザインの古典的な原則と技術や科学の革新と可能性を統合する視覚言語を作成する。)</p></blockquote><blockquote><p>Develop a single underlying system that allows for a unified experience across platforms and device sizes. Mobile precepts are fundamental, but touch, voice, mouse, and keyboard are all ﬁrst-class input methods.<br>(直訳: プラットフォームやデバイスのサイズを問わず、統一された体験を可能にする単一の基盤となるシステムを開発する。モバイルの原則は基本的であるが、タッチ、音声、マウス、キーボードすべてが第一級の入力方法である。)</p></blockquote><p>また、原則として以下の3つも掲げており、次が特徴として記載されています。</p><ol><li><strong>Material is the metaphor</strong><ul><li>紙のような物理的性質を持つインターフェースを意識し、ユーザーが直感的に操作しやすいUIを作る基盤となること</li></ul></li><li><strong>Bold, graphic, intentional</strong><ul><li>意図的な色の選択、エッジツーエッジの画像、大規模なタイポグラフィ、意図的な空白は、ユーザーをエクスペリエンスに没頭させる大胆でグラフィックなインターフェイスを作成すること</li></ul></li><li><strong>Motion provides meaning</strong><ul><li>モーションが意味があり適切であり、注意を集中させ、継続性を維持させること</li></ul></li></ol><p>これらの思想だけではなく、Material Designに沿ったダイアログ、カードを始めとした多様なコンポーネントを例示していることも大きな特徴です。これらの導入により、特にAndroidではモバイルアプリのUI設計においても一貫性が強調することができたのではないでしょうか？</p><p>2023年時点ではMaterial Design 3が最新となっていますが、アプリ開発をする上で個人的にも多用させていただいているものとなります。</p><h2 id="近年・将来のモバイルアプリUI設計のトレンドについて考察"><a href="#近年・将来のモバイルアプリUI設計のトレンドについて考察" class="headerlink" title="近年・将来のモバイルアプリUI設計のトレンドについて考察"></a>近年・将来のモバイルアプリUI設計のトレンドについて考察</h2><p>前のセクションでは、モバイルアプリUI設計に関する理論や代表的な書籍を選び、簡単に紹介させていただきました。</p><p>このセクションでは、将来のトレンドに焦点を当てて、私の個人的な考えを共有します。</p><p>まず、モバイルアプリUI設計の過去の推移を振り返ると、2007年のiPhone登場以降、初期段階では既存のウェブサイトのレイアウトをモバイルに適応・進化させる試みが盛んに行われました。その後、モバイルデバイスのシェアが急速に拡大する中、「モバイルファースト」、「レスポンシブデザイン」、「NUI（Natural User Interface）」といった理論が発展し、ガイドラインが整備され、設計プロセスが成熟していきました。</p><p>これらの理論の中でも、「タッチ入力」によるユーザーインターフェイスの進化が中心的な役割を果たしていると考えることができます。</p><p>それでは、これからのトレンドはどのようなものが考えられるでしょうか？</p><p>1つ目のトレンドとして、デバイスの進化、特に「タッチ入力」を補完または置き換える新しい入力方法の登場が考えられます。例えば、SiriやAlexa、Google Assistantに挙げられるような、音声ユーザーインターフェイス（VUI）や、Meta Quest3に搭載されている視線追跡技術などがあげられます。これらの技術がモバイルデバイスで「あたりまえ」になれば、「タッチ入力」が時代を変えたように、モバイルアプリUI設計も大きく変わるかもしれません。</p><p>2つ目のトレンドとして、AIを活用したモバイルアプリUI設計の変革が考えられます。ChatGPTをはじめとする近年のAI技術の進化は著しく、実際に以下のような、強化学習を用いた適応型UI、AUI(Adapting User Interface)の研究もされており、ユーザーの行動を学習し、UIを自動で最適化したり、あるいは個々のユーザーに合わせたUIを提供できる時代が来るかもしれません。</p><ul><li><a href="https://ar5iv.labs.arxiv.org/html/2103.06807">Adapting User Interfaces with Model-based Reinforcement Learning</a></li><li><a href="https://arxiv.org/abs/2209.12660">MARLUI: Multi-Agent Reinforcement Learning for Adaptive UIs</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、モバイルアプリUI設計に関わる書籍や理論をいくつかピックアップし、簡単に紹介を行いました。</p><p>現在では、これらの設計・理論・技術を基盤として、新たな入力インターフェースや、AIを用いたUIの最適化などが研究・議論されています。</p><p>本記事が、モバイルアプリのUI設計についてなにか考えるきっかけになれば幸いです。</p><p>次は真野さんの <a href="/articles/20231101a/">設計ドキュメント腐る問題、Git管理で運用してみた結果</a> です。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>Wonjin Jung. “The Effect of Representational UI Design Quality of Mobile Shopping Applications on Users’ Intention to Shop”. Procedia Computer Science, Volume 121, 2017, Pages 166-169, 2017</li><li>Designers. “Know Your User – UX Statistics and Insights (with Infographic)”.  <a href="https://www.toptal.com/designers/ux/ux-statistics-insights-infographic">https://www.toptal.com/designers/ux/ux-statistics-insights-infographic</a></li><li>情報通信統計データベース.”通信利用動向調査”. <a href="https://www.soumu.go.jp/johotsusintokei/statistics/statistics05.html">https://www.soumu.go.jp/johotsusintokei/statistics/statistics05.html</a></li><li>Apple. “Human Interface Guidelines”. <a href="https://developer.apple.com/design/human-interface-guidelines">https://developer.apple.com/design/human-interface-guidelines</a></li><li>Brian Fling.『Mobile Design and Development: Practical concepts and techniques for creating mobile sites and web apps』. O’Reilly Media. 2009</li><li>Andre Charland, Brian LeRoux. “Mobile Application Development: Web vs. Native: Web apps are cheaper to develop and deploy than native apps, but can they match the native user experience?”. Queue. Volume 9, Issue 4. 2011</li><li>Andre Charland, Brian LeRoux, Nitobi.”Mobile Application Development:Web vs. Native”. Queue.</li><li>stack overflow. “Fixed positioning in Mobile Safari” .<a href="https://stackoverflow.com/questions/743123/fixed-positioning-in-mobile-safari">https://stackoverflow.com/questions/743123/fixed-positioning-in-mobile-safari</a></li><li>ANANDTECH. “BlackBerry Torch 9800 Review: Keeping RIM’s Flame Alive”.<a href="https://www.anandtech.com/show/3880/blackberry-torch-9800-review-keeping-rims-flame-alive/7">https://www.anandtech.com/show/3880/blackberry-torch-9800-review-keeping-rims-flame-alive/7</a></li><li>Jesse James Garrett. “The Elements of User Experience”.<a href="http://www.jjg.net/elements/pdf/elements.pdf">http://www.jjg.net/elements/pdf/elements.pdf</a></li><li>A LIST APART.Ethan Marcotte. “Responsive Web Design”. 2010</li><li>Daniel Wigdor, Dennis Wixon. 『Brave NUI World: Designing Natural User Interfaces for Touch and Gesture by Daniel Wigdor and Dennis Wixon』. Morgan Kaufmann. 2011.</li><li>Luke Wroblewski.『Mobile First』.Ingram. 2011</li><li>Dan Saffer.『Microinteractions』. O’Reilly Media. 2013</li><li>Google. “Material Design”. <a href="https://m1.material.io/">https://m1.material.io/</a></li><li>Kashyap Todi,Gilles Bailly, Luis A. Leiva, Antti Oulasvirta. “Adapting User Interfaces with Model-based Reinforcement Learning”. 2021</li><li>Thomas Langerak, Sammy Christen, Mert Albaba, Christoph Gebhardt, Otmar Hilliges. “Thomas Langerak, Sammy Christen, Mert Albaba, Christoph Gebhardt, Otmar Hilliges”. arxiv. 2022</li></ol>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA/">モバイルアプリ</category>
      
      <category domain="https://future-architect.github.io/tags/UI/">UI</category>
      
      
      <comments>https://future-architect.github.io/articles/20231031a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>腰痛と闘うプログラマー</title>
      <link>https://future-architect.github.io/articles/20231030b/</link>
      <guid>https://future-architect.github.io/articles/20231030b/</guid>
      <pubDate>Sun, 29 Oct 2023 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231030b/maintain_good_posture.png&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;1024&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231030b/maintain_good_posture.png" alt="" width="1024" height="1024" loading="lazy"><p><a href="/articles/20231030a/">秋のブログ週間2023</a>の1日目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><strong>※この記事やこの本を読んだからと言って自身で診断を行わず、まずは整形外科などの医療機関にて診断を受けて、医師の方と治療方針を決定しましょう。また既に治療中の方は、取り組む前に一度医師や理学療法士の方と相談しましょう。</strong></p><p>腰が痛くて仕事にならない、プログラマーこそが天職なのにこの痛みと一生付き合っていかないといけないのか…と思っている方は結構多いのではないでしょうか？<br>かく言う自分も腰痛持ちで、20代前半で椎間板ヘルニアと診断されました。当時はヘルニアが神経を圧迫し歩くのもつらい時期もありましたが、通院によってなんとか回復しました。<br>しかし完全にはよくならず、残りの人生全てを腰を気にしながら生きないといけないのか、、、と絶望しておりました。</p><p>そんなこんなで腰痛人生を送ってきたわけですが、<a href="https://www.ido-netshopping.com/products/detail.php?product_id=5886">ケリー・スターレット式　「座りすぎ」ケア完全マニュアル</a>は自分の人生を変える一冊となりました。<br>本記事では読書の秋・スポーツの秋にぜひ読んで頂きたい本書を紹介していきたいと思います。</p><h2 id="本書の構成"><a href="#本書の構成" class="headerlink" title="本書の構成"></a>本書の構成</h2><p>本書は全7セクションに分かれていて、順序立てて姿勢を改善していく方法を紹介していきます。<br>また、本書は腰痛のみならずデスクワークが引き起こす全ての痛み（肩、首、腰）に対応しております。</p><ul><li><strong>姿勢の改善</strong><ul><li>Section1: 悪い姿勢がもたらすもの</li><li>Section2: アライメントが整い、安定した脊柱の重要性</li></ul></li><li><strong>運動の改善</strong><ul><li>Section3: 上手に動く～歩行、ヒンジ、スクワット、安定した肩～</li></ul></li><li><strong>習慣の改善</strong><ul><li>Section4: 立位ワークステーションのガイドライン</li><li>Section5: 座位のバイオメカニクスを最適化する</li></ul></li><li><strong>セルフケア</strong><ul><li>Section6: 基本的な身体のメンテナンス</li><li>Section7: 全身の可動性改善の処方箋</li></ul></li></ul><p>Section1～3では、論文の引用も挟みつつ主に科学的な視点で悪い姿勢による身体への影響や、なぜこの姿勢・運動が良いのかを説明していきます。<br>Section4～5は、姿勢が悪くならないようにどうやって習慣を改善していくかについて説明していきます。スタンディングデスクを始めたい方は、Section4を読んでから環境構築すると効果を最大化することができます。<br>Section6～7は、自分の現在地を知るための柔軟性テストに始まり、凝り硬まった身体に対してアプローチするためのストレッチ方法が紹介されています。もし、スタンディングデスクをやる気がない人でもこのセクションで紹介されている可動性改善メソッドは十分に読む・実践する価値がある内容です。</p><p>本書を新冊で買うと「<strong>”Know how”ではなく”Know why”が書かれた本</strong>」と記載された帯がついてくるのですが、まさにその通りの内容となっております。問題に対して「なぜ（Why）」が先に説明された後に「どのように（How）」アプローチしていくかが紹介されているため、理解を深めやすいです。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><h3 id="丸くなった背中"><a href="#丸くなった背中" class="headerlink" title="丸くなった背中"></a>丸くなった背中</h3><p>ケリー氏は言います。</p><blockquote><p>「食事の度にチョコレートドーナツを食べて、食後にタバコを1箱吸うことが長期的に健康に有益な影響をもたらさないことは直観的にわかるだろう。一方、姿勢に対しても同じレベルで直観が働かないことが問題なのである。」</p></blockquote><p>姿勢の悪さを気にしている人って案外少ないと思います。というよりも多分気づかないんですよね。<br>これは恐らく、自分自身の姿勢が目に見えないからなんだろうなーと思っています。例え鏡を使ったとしても、正面から見た状態では自分の姿勢がどうなっているかなんてほとんどわからないですよね。<br>かく言う自分も人に言われるまでは、日常的に猫背でストレートネックな状態であることに気づきませんでした。</p><p>ケリー氏は姿勢の悪い状態を、この木と同じ状態であると表現します。</p><img src="/images/20231030b/tree.png" alt="tree.png" width="1024" height="1024" loading="lazy"><blockquote><p>「この木は支えられていない。大雪は簡単にこの木を半分に折るか、川へと倒すだろう。」</p></blockquote><p>本来、人体には重量に対して均一に吸収できるような分散システムが備わっています。しかし、姿勢が悪いことによって一部の箇所に重量を集中させてしまうことで酷使され、破綻を招いてしまうわけです。<br>エンジニアはシステムを設計するうえで、一部の箇所が過負荷に陥らないように負荷分散をさせることが重要だと認識していると思います。それと同じように身体の負荷分散にも目を向ける必要があります。</p><h3 id="椅子に座るな、立て"><a href="#椅子に座るな、立て" class="headerlink" title="椅子に座るな、立て"></a>椅子に座るな、立て</h3><p>この本で主張したいことはこういうことだろ？と想像すると思いますが、まさにその通りです。<br>しかし、ただ立てばいいということではありません。<strong>姿勢良く</strong>立つ必要があります。<br>また環境によっては立って仕事ができない場合もあります。ケリー氏はこう言っています。</p><blockquote><p>「結局は座る方法が重要なのだ。」</p></blockquote><p>この本で一貫して主張していることは<strong>姿勢が良い状態を保ちましょう</strong>になります。<br>Section5に「座位のバイオメカニクスを最適化する」を設けているようにケリー氏は「椅子に座ること」に対して切り捨てているわけではありません。<br>また、スタンディングデスクを導入するだけでは姿勢の問題は解決に至りません。</p><h3 id="姿勢を整える"><a href="#姿勢を整える" class="headerlink" title="姿勢を整える"></a>姿勢を整える</h3><p>ケリー氏はブレーシングシーケンスと呼ばれる以下の3つの要素によって構成された姿勢の整え方を紹介します。</p><ul><li>腹式呼吸</li><li>殿筋（お尻の筋肉）の収縮</li><li>肩の外旋</li></ul><p>スタンディングデスクを導入したうえで、ブレーシングシーケンスによって姿勢を整えることで問題の改善に兆しが見えてきます。<br>しかし、ケリー氏は厳しく言い放ちます。</p><blockquote><p>（ブレーシングシーケンスは）少しの練習で習得可能である。問題は、習慣化できるかどうかである。何においても同じだが、実直な実践こそが習慣につながる。</p></blockquote><p>私たちは正しい姿勢がDNAにプログラミングされており、<strong>一時的に</strong>取り戻すことは可能ですが、コンピュータのように初期化して取り戻すことはできません。<br>デスクバウンド（机に張り付いている）な社会において、長年積み重なった悪い姿勢を改善するには時間がかかります。常に姿勢のチェックを繰り返し、自然に染み込ませることで習慣化する必要があります。</p><h3 id="立って仕事をするという選択"><a href="#立って仕事をするという選択" class="headerlink" title="立って仕事をするという選択"></a>立って仕事をするという選択</h3><blockquote><p>立って仕事をすることは、座って仕事をするよりもずっとよい選択である。なぜなら、立つことが運動への入り口となるからだ。</p></blockquote><p>多くの人々は人生の大半を仕事に費やすこととなりますが、その時間のほぼ全てを立つことによって姿勢に良い影響をもたらすことが可能となります。またケリー氏が言うように、立つことが運動への入り口となり、日常に運動を取り入れることが更なる身体への好影響となります。</p><p>しかし、一日中同じ姿勢で立っていると非常に疲れますし、結局座位と同じで筋肉が同じ長さで凝り硬まってしまいます。そこでケリー氏は姿勢のルーティンを紹介します。ルーティンを取り入れることによって、筋肉を作用させ続け、身体の血流を保ち、一日中立っていることを可能とします。</p><h3 id="セルフケア"><a href="#セルフケア" class="headerlink" title="セルフケア"></a>セルフケア</h3><blockquote><p>より重要なこととして、そもそも組織が適応的に硬直して、機能不全となって最初に痛みを感じる前に、予防のために基本的なメンテナンスを行う方法を理解しなければならない。言い換えれば、腰部が痛んだり、股関節が硬くなったりするのを待つ必要はない。</p></blockquote><p>痛みのあるなしに関わらず、<strong>予防としてのセルフケアストレッチ</strong>は非常に有用なもとのなります。また、長時間のセルフケア時間を取る必要はなく、就寝前に10～15分程度行えばよいともケリー氏は述べております。<br>自分も就寝前に行っており、一日で硬まりきった身体をほぐした状態で睡眠に入れるため非常におススメです。</p><blockquote><p>痛みがない生活を送り、間接と軟部組織が最適な状態になるように、戦略的かつ体系的なアプローチをとらなければならない。たとえば、腰部が痛む場合、その部位の軟部組織でフォームローラーを転がすだけでは、症状は回復しない。本当にこの問題を取り除くためには、計画的に、日常生活で脊柱のバイオメカニクスを改善して、（胸椎と股関節のような）腰部の上部・下部の部位にある軟部組織と間接制限も対象にすることを入れなければならない。</p></blockquote><p>つまり、「<strong>痛みのある部位ばかりが問題ではない</strong>」<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>ということを理解する必要があります。<br>最近フォームローラーがやたらと流行っていますが、痛みのある個所でコロコロやりがちです。結局、なぜその動きをするのか、なぜその姿勢をとるのかを理解していないと、自己満足コロコロで終わってしまいます。セルフケアを取り入れるには、まず<strong>HowよりもWhyを理解すること</strong>が非常に重要です。</p><p>Section6では自身の可動性を確認するための、以下8つのテストを紹介しています。</p><ul><li>ディープスクワットテスト</li><li>ピストルテスト</li><li>ヒップヒンジテスト</li><li>ソファーストレッチテスト</li><li>オーバーヘッドテスト</li><li>肩の内旋テスト</li><li>足趾・足部テスト</li><li>手関節テスト</li></ul><p>そしてSection7では上記のテスト結果に対する処方箋として、ストレッチ方法が紹介されております。どこが悪いかが分かったあとにちゃんと処方箋も用意されているため、すぐに改善へとつなげることができます。</p><h3 id="バイオメカニクス、ライフスタイル、可動性"><a href="#バイオメカニクス、ライフスタイル、可動性" class="headerlink" title="バイオメカニクス、ライフスタイル、可動性"></a>バイオメカニクス、ライフスタイル、可動性</h3><blockquote><p>セルフメンテナンスを1日10分～15分費やすことは、潜在的な問題が本格的な炎症になるのを防ぐのに役立つ。しかし、セルフメンテナンスは痛みの解消と可動域の改善における一部分にすぎないことも同時に理解してほしい。可動性を高めることによる変化を持続させ、真の利点を得るために、さらに2つの要素－バイオメカニクスとライフスタイル－を扱う必要がある</p></blockquote><p>しかしストレッチこそが銀の弾丸になるわけではないとケリー氏は釘を刺します。<br>ストレッチはあくまで硬くなった身体をほぐす役割であって、正しく動けない状態（バイオメカニクスが悪い状態）で、かつ座りすぎ（ライフスタイルが悪い状態）ではその効果が十分に発揮されないとケリー氏は述べています。また、そのような状態を穴の空いたタイヤに空気を入れ続けていると表現しております。まずは穴を埋めなければタイヤに空気は入りません。</p><blockquote><p>硬いせいで、うまく動けないのか、うまく動かないから硬まるのか？</p></blockquote><p>卵が先か、鶏が先かといった話に陥りますが、ケリー氏にとって答えは両方であると述べております。色々な複合要因から痛みが生じるのであって、一つ一つ紐解いていく必要があり、痛みを改善するには長い目で問題の根本を潰していく必要があります。<strong>週に1回マッサージに行ったからと言って痛みの問題は解決しないのです</strong>。</p><p>問題に対して論理立てながらアプローチしていくことが好きなエンジニアにとって、実は身体機能を理解して科学的に腰痛を改善するためのアプローチをとることは実は非常に相性がいいのではないかと思っています。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>硬まりきった身体を元の状態へ戻していくのは中々骨の折れるプロセスではありますが、地道にコツコツと続けていけば確実に成果が表れます。<br>自分も痛みが取れるまで2年くらいかかりましたが、今では趣味の筋トレにてBIG3<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>で腰を酷使しても問題ない状態にまで戻りました。<br>ぜひデスクワーク中の痛みを感じている方は一読してみてください。</p><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><h3 id="実際に立って仕事をしてみた"><a href="#実際に立って仕事をしてみた" class="headerlink" title="実際に立って仕事をしてみた"></a>実際に立って仕事をしてみた</h3><p>ここまで読んでスタンディングデスクをAmazonの買い物カゴに入れた方は一旦立ち止まりましょう。まずはスタンディングでの仕事を試してみて、買うかどうかを決めた方が良いと思います。</p><img src="/images/20231030b/PXL_20230905_010848231.jpg" alt="PXL_20230905_010848231.jpg" width="1200" height="2134" loading="lazy"><p><strong>※手作りスタンディングデスクの恒久的な利用は事故の元となるため、一時的な利用のみに留めて下さい。ある程度利用の目途が立ったら専用デスクを買いましょう。</strong></p><p>テーブルにこたつ机を設置することでスタンディングデスクを作ってみました。こたつ机の足には滑り止めがついており、ちょっとした揺れでは机がずれないようになっています。<br>実際1か月ほど、立って仕事をしてみたところ、</p><ul><li>疲れる<ul><li>めっちゃ疲れます。カロリー消費してる感。</li><li>かかとが痛い。<ul><li>スリッパを履く or 抗疲労マット買うなど足裏を労わること大切</li></ul></li></ul></li><li>眠くならない<ul><li>同じ姿勢でいられないので、自然と体が動いて眠くならないです。</li></ul></li><li>頭が冴える<ul><li>考え事をするとき歩き回れるので頭が働いている感あります。</li></ul></li><li>姿勢を気にしやすい<ul><li>座っているときよりも姿勢が悪い状態に気づきやすい気がします。</li><li>姿勢が悪くなったらブレーシングシーケンス</li></ul></li></ul><p>というのが実感です。<br>自分は初日から業務時間フルで立ってしまったために、ものすごく疲れて太ももパンパンでした。そのため、いきなり業務時間フルで立つ必要はなく、休み休みで身体を慣らしていく形がよさそうです。<br>また、昇降式デスクを買うかどうかは難しいところになります。ケリー氏も以下のように言っております。</p><blockquote><p>座位・立位のワークスステーションに関するコーネル大学の研究によれば、（昇降式デスクを）導入して最初の数か月は立つが（おそらく、珍しいため）、次第に机を低くして、座ることに戻ってしまい、再び立たなくなってしまう傾向があることが示されている<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p></blockquote><p>強制力がなくなると強い意志を持っていない限り、楽な状態をとってしまうのが人間です。こうなると値段の高い机だけが残ってしまいます。<br>これらを考えると、下げることのできないスタンディングデスクと座面の高い椅子を用意したほうが安く済んで、なおかつ立って仕事をする習慣が続くのではないかなーと思います。</p><p><a href="/articles/20231030a/">秋のブログ週間2023</a>の1日目でした。次は山本さんの<a href="/articles/20231031a/">時を駆けるモバイルアプリUI設計</a>です。</p><p>また、本記事のイラストはすべてDALL-E 3によって生成したものとなります。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://www.ido-netshopping.com/products/detail.php?product_id=5230">強める!殿筋</a>著のJohn Gibbons氏の名言。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">ベンチプレス、スクワット、デッドリフトといったパワーリフティング3種目の総称。現在、著者の3種目トータルは455kg。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">Bryan Walsh, &quot;The Dangers of Sitting at Work-and Standing,&quot; Time, April 13, 2011, <a href="https://healthland.time.com/2011/04/13/the-dangers-of-sitting-at-work%E2%80%94and-standing/">https://healthland.time.com/2011/04/13/the-dangers-of-sitting-at-work—and-standing/</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/">環境構築</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/">リモートワーク</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%98%E3%83%AB%E3%82%B9%E3%82%B1%E3%82%A2/">ヘルスケア</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%85%B0%E7%97%9B/">腰痛</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%98%87%E9%99%8D%E3%83%87%E3%82%B9%E3%82%AF/">昇降デスク</category>
      
      
      <comments>https://future-architect.github.io/articles/20231030b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>秋のブログ週間2023はじめます</title>
      <link>https://future-architect.github.io/articles/20231030a/</link>
      <guid>https://future-architect.github.io/articles/20231030a/</guid>
      <pubDate>Sun, 29 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231030a/halloween-gece73ccea_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;286&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231030a/halloween-gece73ccea_640.jpg" alt="" width="640" height="286" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG 真野です。</p><p>10&#x2F;31より秋のブログ週間というブログリレーを始めます。この記事はそのインデックスです。</p><h2 id="秋のブログ週間とは"><a href="#秋のブログ週間とは" class="headerlink" title="秋のブログ週間とは"></a>秋のブログ週間とは</h2><p>2020年から始まったブログリレーの企画です。元ネタは、秋の読書週間（文化の日を中心とした10&#x2F;27〜11&#x2F;9の2週間）です。これに合わせて、平日にブログ記事を投稿していこうというブログリレーなイベントです。</p><p>「春の入門祭り」、「夏の自由研究」、「秋のブログ週間」、「冬のアドベントカレンダー」と四季の名を冠に持つ、フューチャー技術ブログ4大ブログリレーの1つと言われています。</p><p>テーマは秋の読書週間のイメージで、普段のソースコードがでてくる技術記事ではなく、ソファーでゆっくり読めるような、読み物（エッセー）よりの記事を書いていこう、としています。元ネタが読書週間ですし、積読消化を進めるための書評記事もOKとしています。気になるタイトルの記事を読んで読書欲を刺激していきましょう。</p><p>12月にはお馴染みQiitaさんのアドベントカレンダーにも参加したいと思いますので、秋のブログ週間はちょうどその中間のまったりとした、秋の夜長を楽しむためにも読み物成分を中心として楽しんでいただければです。</p><p>過去のインデックスのリンクはこちらです。</p><ul><li><a href="/articles/20221031a/">秋のブログ週間連載2022を始めます</a></li><li><a href="/articles/20211027a/">秋のブログ週間連載2021を始めます</a></li><li><a href="/articles/20201026/">秋のブログ週間連載をはじめます</a></li></ul><h2 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h2><p>2023年は曜日の区切り的に、10&#x2F;30（月）から開始することになりました。例年になく活況で参加者が多いです。</p><div class="scroll"><table><thead><tr><th>Date</th><th>Name</th><th>Title</th></tr></thead><tbody><tr><td><strong>1週目</strong></td><td>🎃👻🍬</td><td>-</td></tr><tr><td>10&#x2F;30(月)</td><td>岸下優介</td><td><a href="/articles/20231030b/">腰痛と闘うプログラマー</a></td></tr><tr><td>10&#x2F;31(火)</td><td>山本竜玄</td><td><a href="/articles/20231031a/">時を駆けるモバイルアプリUI設計: 2007-2023の理論とトレンドを調べてみた</a></td></tr><tr><td>11&#x2F;1(水)</td><td>真野隼記</td><td><a href="/articles/20231101a/">設計ドキュメント腐る問題、Git管理で運用してみた結果</a></td></tr><tr><td>11&#x2F;2(木)</td><td>斎藤大樹</td><td><a href="/articles/20231102a/">初心者が暗号の基礎と歴史を勉強して見た</a></td></tr><tr><td>11&#x2F;3(金)</td><td>文化の日</td><td>-</td></tr><tr><td><strong>2週目</strong></td><td>🍄</td><td>-</td></tr><tr><td>11&#x2F;6(月)</td><td>木元颯人</td><td><a href="/articles/20231106a/">プロになるためのWeb技術入門」を新人が読んでみた</a></td></tr><tr><td>11&#x2F;7(火)</td><td>原木翔</td><td><a href="/articles/20231107a/">小学2X年生、100マス計算を毎日している</a></td></tr><tr><td>11&#x2F;8(水)</td><td>高瀬陸</td><td><a href="/articles/20231108a/">土地勘に頼らずに地の利がある場所をみつける方法</a></td></tr><tr><td>11&#x2F;9(木)</td><td>森直也</td><td><a href="/articles/20231109a/">「自在化身体論」の読書感想文</a></td></tr><tr><td>11&#x2F;10(金)</td><td>栗栖大樹</td><td><a href="/articles/20231110a/">「良いコード／悪いコードで学ぶ設計入門」を読んで良いコードとは何かを知る</a></td></tr><tr><td><strong>3週目</strong></td><td>🍂</td><td>-</td></tr><tr><td>11&#x2F;13(月)</td><td>大野朱理</td><td><a href="/articles/20231113a/">魔法使いが夜更かしする場所</a></td></tr><tr><td>11&#x2F;14(火)</td><td>工藤駿泰</td><td><a href="/articles/20231114b/">「TEAM GEEK」を読んでメンバー視点で良いチームについて考える</a></td></tr><tr><td>11&#x2F;15(水)</td><td>清水雄一郎</td><td><a href="/articles/20231115a/">アプリエンジニアがコンテナ開発の基本を読んで学ぶ</a></td></tr><tr><td>11&#x2F;16(木)</td><td>澁川喜規</td><td><a href="/articles/20231116a/">Python Distillesは幅広い人にPythonの基礎を叩き込む本</a></td></tr><tr><td>11&#x2F;17(金)</td><td>佐藤更星</td><td><a href="/articles/20231117a/">次世代型データベース 劔”Tsurugi” とは何？公式サイトから調べてみた！</a></td></tr><tr><td><strong>4週目</strong></td><td>🍁</td><td>-</td></tr><tr><td>11&#x2F;20(月)</td><td>寒河江功悟</td><td><a href="/articles/20231120b/">カイゼン・ジャーニー</a></td></tr><tr><td>11&#x2F;21(火)</td><td>澁川喜規</td><td><a href="/articles/20231121a/">仕事に役立つ新・必修科目「情報Ⅰ」のレビューに参加しました</a></td></tr><tr><td>11&#x2F;22(水)</td><td>藤戸四恩</td><td><a href="/articles/20231122a/">「リーダブルコード」を読んだ感想</a></td></tr><tr><td>11&#x2F;23(木)</td><td>勤労感謝の日</td><td>-</td></tr><tr><td>11&#x2F;24(金)</td><td>島ノ江励</td><td><a href="/articles/20231124a/">学習のSHA 〜ハッシュ関数の基本と安全性について学ぶ〜</a></td></tr></tbody></table></div><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>いつもはコードが本文に書かれていることも多いフューチャー技術ブログですが、この連載はスマホ片手で読めるような記事成分を高めたいと思います。約3週間+αですがどうぞお付き合いください。</p><p>アイキャッチ画像は<a href="https://pixabay.com/users/pixel2013-2364555/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2901944">S. Hermann &#x2F; F. Richter</a> from <a href="https://pixabay.com//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2901944">Pixabay</a>を利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%A7%8B%E3%83%96%E3%83%AD%E3%82%B0%E9%80%B1%E9%96%93/">秋ブログ週間</category>
      
      
      <comments>https://future-architect.github.io/articles/20231030a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【Flutter】Proxyがある社内ネットワーク環境でAndroidエミュレータからインターネットに接続する方法</title>
      <link>https://future-architect.github.io/articles/20231026a/</link>
      <guid>https://future-architect.github.io/articles/20231026a/</guid>
      <pubDate>Wed, 25 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。思い出をショートムービーとして残すアプリ、&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。思い出をショートムービーとして残すアプリ、<a href="https://postpix.jp/">PostPix</a>を作っている後藤田です。</p><p><a href="https://postpix.jp/">PostPix</a>はFlutterで作っています。ぜひ、ダウンロードしてあなたの思い出をショートムービーにしてみてください！</p><style>.linkable_img:hover {opacity:0.5;}</style><a  target="_blank" rel="noopener" class="linkable_img" title="PostPix | 旅行を通じた、ノスタルジックエクスペリエンスサービス" href="https://postpix.jp/" >    <img src="/images/20231026a/b6fc4438-8326-63c9-a373-1143d4d88207.png" alt="" width="1200" height="1067" loading="lazy"></a><h2 id="Androidエミュレータからプロキシサーバを超えてインターネットに出たい"><a href="#Androidエミュレータからプロキシサーバを超えてインターネットに出たい" class="headerlink" title="Androidエミュレータからプロキシサーバを超えてインターネットに出たい"></a>Androidエミュレータからプロキシサーバを超えてインターネットに出たい</h2><p>プロキシが存在するネットワーク内で、Androidエミュレータからインターネット接続ができず、頭を悩ませたことはありませんか？</p><p>私たちは、この課題に対する解決策として、<a href="https://github.com/ma91n/middleproxy/releases/tag/v0.0.3">middleproxy</a>（社内のエンジニアが作ってくれたツール）とFlutterの<a href="https://pub.dev/packages/native_flutter_proxy">native_flutter_proxy</a>ライブラリを活用しています。</p><p>この記事ではそれらについて解説します。</p><p>最終的な構成は次のようになります。</p><img src="/images/20231026a/env.png" alt="" width="945" height="529" loading="lazy"><p>なお、開発環境はWindows。プロキシは認証つきで、独自の証明書を利用する前提とします。</p><h2 id="1-Android仮想デバイスの作成"><a href="#1-Android仮想デバイスの作成" class="headerlink" title="1. Android仮想デバイスの作成"></a>1. Android仮想デバイスの作成</h2><p>まずは、Android仮想デバイス（AVD）を作成します。今回は <code>Pixel_4_XL</code> を利用するとします。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ %UserProfile%\AppData\Local\Android\sdk\emulator\emulator -writable-system -avd Pixel_4_XL_API_30</span><br></pre></td></tr></table></figure><p><code>%USERPROFILE%/.android</code>に <code>advancedFeatures.ini</code> を作成し、以下の2行を追加します。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">Vulkan</span> = <span class="literal">off</span></span><br><span class="line"><span class="attr">GLDirectMem</span> = <span class="literal">on</span></span><br></pre></td></tr></table></figure><h2 id="2-adbのインストール"><a href="#2-adbのインストール" class="headerlink" title="2. adbのインストール"></a>2. adbのインストール</h2><p><a href="https://source.android.com/docs/setup/build/adb?hl=ja">Android Debug Bridge（adb）</a>をインストールします。</p><p>必要に応じて、adbにPATHは通しておきます。</p><p>以下のように出力されればOKです。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; adb --version</span><br><span class="line">Android Debug Bridge version 1.0.41</span><br><span class="line">Version 33.0.3-8952118</span><br><span class="line">Installed as C:\Program Files\platform-tools\adb.exe</span><br></pre></td></tr></table></figure><h2 id="3-CA証明書のエミュレータへの転送"><a href="#3-CA証明書のエミュレータへの転送" class="headerlink" title="3. CA証明書のエミュレータへの転送"></a>3. CA証明書のエミュレータへの転送</h2><p>プロキシが要求する証明書が <code>custom_ca.cer</code> であり、その証明書をDesktop直下に配備したとします。</p><p>これをホストPCから、Androidエミュレータ側の、 <code>/sdcard/Download</code> にパスに転送します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> %USERPROFILE%\Desktop</span><br><span class="line">$ adb root</span><br><span class="line">$ adb disable-verity</span><br><span class="line">$ adb shell avbctl disable-verification</span><br><span class="line">$ adb reboot</span><br><span class="line"><span class="comment"># reboot 後に待機</span></span><br><span class="line">$ adb root</span><br><span class="line">$ adb remount</span><br><span class="line">$ adb push custom_ca.cer /sdcard/Download</span><br></pre></td></tr></table></figure><h2 id="4-証明書の読み込み"><a href="#4-証明書の読み込み" class="headerlink" title="4. 証明書の読み込み"></a>4. 証明書の読み込み</h2><p>エミュレータ上のAndroidを操作します。</p><p><code>歯車マーク</code> &gt; <code>Security</code> &gt; <code>Advanced</code> &gt; <code>Encryption &amp; credentials</code> &gt; <code>Install a certificate</code> &gt; <code>CA certificate</code> &gt; <code>Install anyway</code> &gt; 上のハンバーガーメニューから <code>Android SDK build for x86 を選択</code> &gt; <code>Download を開く</code></p><p>…すると、先ほど追加した、<code>custom_ca.cer</code> があるので、クリックして読み込みます。</p><h2 id="5-ローカルプロキシ起動"><a href="#5-ローカルプロキシ起動" class="headerlink" title="5. ローカルプロキシ起動"></a>5. ローカルプロキシ起動</h2><p><a href="https://github.com/ma91n/middleproxy/releases/tag/v0.0.3">middleproxy</a>から <code>middleproxy_0.0.3_Windows_i386.tar.gz</code> をダウンロード &amp; 解凍（ご自身の環境に合わせてダウンロードしてください）します。</p><p>次のようにプロキシ情報を環境変数に設定して、起動します。</p><figure class="highlight sh"><figcaption><span>起動イメージ</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=http://&#123;username&#125;:&#123;password&#125;@proxy.example.com:8000</span><br><span class="line"><span class="built_in">set</span> http_proxy_username=&#123;username&#125;</span><br><span class="line"><span class="built_in">set</span> http_proxy_password=&#123;password&#125;</span><br><span class="line">middleproxy.exe <span class="comment">#起動してもログは出ません。</span></span><br></pre></td></tr></table></figure><h2 id="6-エミュレータ上のプロキシ設定"><a href="#6-エミュレータ上のプロキシ設定" class="headerlink" title="6. エミュレータ上のプロキシ設定"></a>6. エミュレータ上のプロキシ設定</h2><p><code>WiFiマークを長押し</code> &gt; <code>AndroidWifi の歯車マーク</code> &gt; <code>右上の鉛筆マーク</code> &gt; <code>Advanced options</code> &gt; <code>Proxy</code> &gt; <code>Manual</code></p><ul><li>Proxy hostname <code>10.0.2.2</code></li><li>Proxy port: <code>9000</code></li></ul><p>を入力して保存します。</p><p>補足ですが、 <code>10.0.2.2</code> はエミュレータ上のAndroidからみた、ホスト側のIPです。</p><h2 id="7-アプリ側の設定をする"><a href="#7-アプリ側の設定をする" class="headerlink" title="7. アプリ側の設定をする"></a>7. アプリ側の設定をする</h2><p>設定ファイルに以下のネットワーク・セキュリティ設定を加えます。</p><figure class="highlight xml"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:networkSecurityConfig</span>=<span class="string">&quot;@xml/network_security_config&quot;</span></span></span><br></pre></td></tr></table></figure><p><code>res/xml/network_security_config.xml</code> を作成し、次を追加します。</p><figure class="highlight xml"><figcaption><span>res/xml/network_security_config.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span> <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">debug-overrides</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">certificates</span> <span class="attr">src</span>=<span class="string">&quot;@raw/custom_ca&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">debug-overrides</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>res/raw</code> に <code>custom_ca.cer</code> を配備して参照できるようにします。</p><h2 id="8-native-flutter-proxy"><a href="#8-native-flutter-proxy" class="headerlink" title="8. native_flutter_proxy"></a>8. native_flutter_proxy</h2><p>さて、やっとDartのコードです。<code>native_flutter_proxy</code> ライブラリの力を借りて、エミュレータ上のAndroidアプリからもインターネット接続を可能にします。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Flutterのmain.dartや適当な初期化箇所に以下を追加</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:native_flutter_proxy/custom_proxy.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:native_flutter_proxy/native_proxy_reader.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  WidgetsFlutterBinding.ensureInitialized();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> enabled = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">String?</span> host;</span><br><span class="line">  <span class="built_in">int?</span> port;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ProxySetting settings = <span class="keyword">await</span> NativeProxyReader.proxySetting;</span><br><span class="line">    enabled = settings.enabled;</span><br><span class="line">    host = settings.host;</span><br><span class="line">    port = settings.port;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">print</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (enabled &amp;&amp; host != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">final</span> proxy = CustomProxy(ipAddress: host, port: port);</span><br><span class="line">    proxy.enable();</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;proxy enabled&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>native_flutter_proxy</code> ですが、エミュレータの端末に設定されたシステムのプロキシ設定を読み込み、インターネット接続を行えるようにしてくれます。</p><h3 id="※それでもインターネット接続できない場合"><a href="#※それでもインターネット接続できない場合" class="headerlink" title="※それでもインターネット接続できない場合"></a>※それでもインターネット接続できない場合</h3><ol><li>Androidエミュレータ側のプロキシ設定を外してみる。（direct）</li><li>localhost:9000 にmiddleproxyが起動しているか確認する。（例： ホスト側のプロキシをproxy.example.com:8000 から、 localhost:9000 に変えてみて、ホスト側のブラウザが起動するか、もしくはcurlが通るか、確認してみる）</li></ol><h2 id="（任意）AndroidエミュレータへのChromeインストール"><a href="#（任意）AndroidエミュレータへのChromeインストール" class="headerlink" title="（任意）AndroidエミュレータへのChromeインストール"></a>（任意）AndroidエミュレータへのChromeインストール</h2><p>ここは任意ですが、エミュレータAndroid上にChromeをインストールしておくと、疎通などで便利なことがあるので合わせて設定しておくことをオススメします。</p><p><a href="https://www.apkmirror.com/apk/google-inc/chrome/chrome-69-0-3497-86-release/chrome-browser-69-0-3497-86-3-android-apk-download/?redirected=thank_you_invalid_nonce">こちら</a>からapkをダウンロードし、エミュレータ画面にdrag &amp; dropします。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>本記事では、Flutterにおけるプロキシが存在するネットワーク環境での、Androidエミュレータのインターネット接続方法について紹介しました。</p><p>この手順を参考に、効果的にエミュレータを利用し、みなさんの開発に役立てれば幸いです。</p><p>最後にまた宣伝させてください！！  </p><p><a href="https://postpix.jp/">PostPix</a>であなたの思い出をショートムービーという新しい形で残してみませんか？？<br><a href="https://postpix.jp/">PostPix</a>はFlutterで作成しています。ぜひダウンロードのほどお願いします！</p><a  target="_blank" rel="noopener"  class="linkable_img" title="PostPix | 旅行を通じた、ノスタルジックエクスペリエンスサービス" href="https://postpix.jp/">    <img src="/images/20231026a/PostPix2.png" alt="" width="1200" height="1067" loading="lazy"></a>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Android/">Android</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7/">プロキシ</category>
      
      <category domain="https://future-architect.github.io/tags/Flutter/">Flutter</category>
      
      <category domain="https://future-architect.github.io/tags/Android%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BF/">Androidエミュレータ</category>
      
      
      <comments>https://future-architect.github.io/articles/20231026a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rundeck(Community版)を触ってみた</title>
      <link>https://future-architect.github.io/articles/20231025a/</link>
      <guid>https://future-architect.github.io/articles/20231025a/</guid>
      <pubDate>Tue, 24 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Rundeckというジョブ管理ソフトウェアを用いて、IaCツールを運用フェーズでの利用促進を図れないか、検証してみます。本検証はAWS環境を用いて行っております。</p><p>何か調査や検証事項に不備・誤りがあれば、X（旧Twitter）などで連絡ください。タイトルの右上の鉛筆マークからPull Request形式で直接依頼も行うことができます。</p><h2 id="経緯"><a href="#経緯" class="headerlink" title="経緯"></a>経緯</h2><p>システムの構築フェーズではAnsibleやTerraformといったIaC関連のツールを利用したものの、運用フェーズでは生かされないことを、しばしば見てきました。品質管理の重要な要素として５Ｗ１Ｈ思考が求められますが、インフラ運用での変更はアプリケーションのインシデント(更改、障害など)に基づいて<strong>受動的</strong>に発生することが多く、そのマインドセットが失われてしまうことがあるように感じます。例えば、変更履歴はアプリケーション変更側で管理されるが、その変更内容がインフラ変更に紐づけられていない、あるいはインシデントへの対応を急ぐあまり、個別のサーバソースに無秩序に直接手を加えてしまうといった対応が挙げられます。</p><p><strong>インシデントに対して、いかに早急に対応するかということが最優先のミッションになる。</strong>それはインフラ運用管理者としての責任感に基づくものであり否定されるものではありませんが、構成管理上は望ましい結果を生み出さないでしょう。</p><p>インフラの運用は比較的少人数で数多くのサーバ管理を行っていることは多いです。数百台のサーバを10人に満たない人数で管理していることがあります。そのためインフラ変更は属人化された変更手法が暗黙に承認されている状況が多々あります。いかにサーバソースを直接の編集を防ぐか、実施履歴、変更内容(変更前、変更後ソース)を残すか。アプリケーション運用でも同様のことが言えますが、アプリケーション運用ではCI&#x2F;CDにより統制された運用が行われているケースが多く見受けられます。</p><p>CI&#x2F;CDではアプリケーションのデプロイ手法を画一されたワークフローに取り込めており、ソースコードを直接編集・置き換えるといったことが<strong>ご法度</strong>であるというマインドセットが形成されているという部分が大きいと考えてられます。</p><p>インフラ構築で利用されたIaCツールは仕様書・手順書といったドキュメントベースので引き継いでいるでしょう。これをCI&#x2F;CDと同じようにワークフローツールを用い変更手法を具現化したものと合わせて引き継ぐことで運用フェーズでの構成管理(品質均一化、構成管理)が向上するのではないかと考えてみました。</p><p>ワークフローツールについて、モノリシックなシステムでは、ジョブ管理システムに商用ソフトウェアを採用することは多いです。安定性もあり、運用主管部門が既知のツールで習熟度が高い場面ではすべからく採用となります。ただしジョブ数も少なく、実装するワークフローも単純な構成が予定されている案件においてはもう少しライトな構成の選択肢（つまり、Rundeck）があってよいとも思われます。</p><h2 id="Rundeckとは"><a href="#Rundeckとは" class="headerlink" title="Rundeckとは"></a>Rundeckとは</h2><ul><li>PagerDuty, Inc.によって開発されたジョブ管理ソフトウェア</li><li>Javaで動作</li><li>オープンソース版の「Rundeck Community」と、有償のエンタープライズ版の「Rundeck Enterprise」がある</li></ul><p>Community版とEnterprise版の違い<br><a href="https://www.rundeck.com/community-vs-enterprise">https://www.rundeck.com/community-vs-enterprise</a></p><p>この検証では、Community版のRundeckを利用しています。</p><ul><li>Rundeck Community：BUILD:4.17.0-20230925</li></ul><h2 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h2><p>Rundeckを構築するにあたりいくつかの構成を試してみました。結果としてCommunity版ではあまり意味のない構成も含まれます。</p><ol><li>シングルインスタンス構成</li><li>シングルインスタンス構成 + 外部データベース</li><li>デュアルインスタンス構成 + 外部データベース + ELB</li><li>シングルコンテナ構成 + 外部データベース</li><li>シングルコンテナ構成 + 外部データベース + シングルノード</li><li>伝統的なクラスタ構成(クラスタウェア＋ミラーディスクによるHAクラスタ)</li></ol><h3 id="1-シングルインスタンス構成"><a href="#1-シングルインスタンス構成" class="headerlink" title="1. シングルインスタンス構成"></a>1. シングルインスタンス構成</h3><p>最も基本的な構成です。</p><p>サポートされているサーバOSにJavaとRundeckをインストールすればすぐに利用でき、データベースにH2DB(H2 Database Engine)が組み込まれているようで、手軽に活用できます。</p><p>Rundeckのジョブ管理の使用感などを試したいのであれば最も適しています。</p><img src="/images/20231025a/image.png" alt="" width="264" height="258" loading="lazy"><h3 id="2-シングルインスタンス構成-＋-外部データベース"><a href="#2-シングルインスタンス構成-＋-外部データベース" class="headerlink" title="2. シングルインスタンス構成　＋　外部データベース"></a>2. シングルインスタンス構成　＋　外部データベース</h3><p>シングルインスタンス構成からデータベースのみを外部のRDBに配置したものです。</p><p>検証ではEC2上に作成したmariadbを利用しましたがRDSを用いることも可能です。基本構成からデータベースの堅牢性向上を狙ったものです。</p><img src="/images/20231025a/image_2.png" alt="" width="583" height="236" loading="lazy"><h3 id="3-デュアルインスタンス構成-＋-外部データベース-＋-ELB"><a href="#3-デュアルインスタンス構成-＋-外部データベース-＋-ELB" class="headerlink" title="3. デュアルインスタンス構成　＋　外部データベース　＋　ELB"></a>3. デュアルインスタンス構成　＋　外部データベース　＋　ELB</h3><p>Rundeckサービスを冗長構成としたものです。</p><p>データベースの他、ジョブスクリプトやログも共有する必要があるためS3を利用してます。ログのS3化はプラグインが利用できます。スクリプトに関してはジョブ定義のスクリプトパスをURLで指定できるので、S3にウェブサイトアクセス許可を設定することで可能となります。</p><p><strong>結果としてはCommunity版では可用性の向上は計れませんでした。</strong>ジョブ実行に関してはジョブ実行指示を行ったサーバを識別(rundeck.server.uuid)していて特定のインスタンスで実行されてしまうようです。Enterprise版ではクラスタ関連機能(High Availability Clusters、Auto Takeover)が利用でき排他的に複数のサーバで実行可能となるようです。</p><img src="/images/20231025a/image_3.png" alt="" width="874" height="361" loading="lazy"><h3 id="4-シングルコンテナ構成-＋-外部データベース"><a href="#4-シングルコンテナ構成-＋-外部データベース" class="headerlink" title="4. シングルコンテナ構成　＋　外部データベース"></a>4. シングルコンテナ構成　＋　外部データベース</h3><p>Rundeckはコンテナ環境でも利用可能です。基本構成としてはシングルインスタンス構成と同等です。</p><p>コンテナは揮発性であることからデータは外部に配置しております。</p><p>コンテナ化によってRundeckそのものの構成管理が容易になります。</p><img src="/images/20231025a/image_4.png" alt="" width="757" height="269" loading="lazy"><h3 id="5-シングルコンテナ構成-＋-外部データベース-＋-ノード"><a href="#5-シングルコンテナ構成-＋-外部データベース-＋-ノード" class="headerlink" title="5. シングルコンテナ構成　＋　外部データベース　＋　ノード"></a>5. シングルコンテナ構成　＋　外部データベース　＋　ノード</h3><p>ジョブ実行環境をノードとして登録しジョブを実行させることが可能です。Jenkinsのslaveノードや商用SWのエージェントと同じような利用方法でしょうか。ノードは先に紹介したいずれの構成でも利用可能です。</p><p>ジョブの実行環境をRundeckから排除することでRundeck側のSW構成が簡素化できます。RundeckからノードはSSH接続ができればよいです。</p><img src="/images/20231025a/image_5.png" alt="" width="895" height="278" loading="lazy"><h3 id="6-伝統的なクラスタ構成-クラスタウェア＋ミラーディスクによるHAクラスタ"><a href="#6-伝統的なクラスタ構成-クラスタウェア＋ミラーディスクによるHAクラスタ" class="headerlink" title="6. 伝統的なクラスタ構成(クラスタウェア＋ミラーディスクによるHAクラスタ)"></a>6. 伝統的なクラスタ構成(クラスタウェア＋ミラーディスクによるHAクラスタ)</h3><p>商用ジョブ管理ソフトウェアではしばしば用いられる冗長構成です。</p><p>Actinve&#x2F;StandbyのHAクラスタリング方式。パブリッククラウド環境ではストレージミラーリング機能を用いて実装することは一般的だと思います。クラスタソフトウェアが必要になるためRundeck構成が複雑になりがちです。データベースを同居させるか否かでも構成が変わってきます。</p><img src="/images/20231025a/image_6.png" alt="" width="830" height="396" loading="lazy"><h3 id="構成検証における考察"><a href="#構成検証における考察" class="headerlink" title="構成検証における考察"></a>構成検証における考察</h3><ul><li>基本構成<ul><li>インストールも容易ですぐに利用できます。Rundeckの利用を検討される場合はまずはこれで十分だと思います</li><li>開発環境やテスト環境などで本番環境のジョブ管理システムが利用できないケースなど、一時的にジョブワークフローを利用したい場合などでの用途もあると考えます</li><li>利用できるジョブ管理ツールがなく、複数のサーバ上でcronなどを用いて実行している非ミッションクリティカルなジョブを統制管理するために利用するといった用途にもよいかもしれません</li></ul></li><li>データ保全性を重視する構成<ul><li>Rundeckにおいて一定の耐久性(データ保全性)を必要とするのであればデータベースは外部データベース(RDB)を利用するべきでしょう</li><li>Enterprise版にあるクラスタ関連機能が利用できないため可用性の向上は難しいですが、データベースをRDB化することでデータ保全性は大きく向上させることが可能です</li></ul></li><li>可用性を重視する場合<ul><li>ミッションクリティカルな業務ジョブを想定する場合は、Enterprise版の検討を行うことがよいと考えます。非ミッションクリティカルな運用であっても可用性を高めたい場合はインスタンス&#x2F;コンテナのAutorecovery機能をを検討することがよいと思います。そのためにRundeckは常にシンプルな構成を維持する(データ外出し)ことが望まれます</li></ul></li><li>非推奨な構成<ul><li>伝統的なHAクラスタアーキテクチャはActive&#x2F;Standby構成であることが多く、その場合はサーバサイジングを負荷ピークで考えるためオーバースペックが生じたり、Standbyノードのリソースが平常に無駄に課金されることが生じてしまいます。パブリッククラウド環境では個人的にはあまり望ましい構成ではないと考えます。(Rundeckに限らずですが。。。)</li></ul></li><li>コンテナ化<ul><li>システムプラットフォームとしてコンテナアーキテクチャをすでに採用している場面であれば、Rundeckもコンテナ化することで低コストのジョブ管理システムを構成できます。コンテナ化することでRundeck構成の簡素化を維持継続しやすく障害時の回復も高速に実施できるでしょう。コンテナ化によって環境ごと(JT、ST、STG、PRD等)に個別コンテナを作成し、必要時のみ起動するといった運用も低コストで実現可能です</li></ul></li></ul><h2 id="ジョブ定義"><a href="#ジョブ定義" class="headerlink" title="ジョブ定義"></a>ジョブ定義</h2><h3 id="Community版での制約"><a href="#Community版での制約" class="headerlink" title="Community版での制約"></a>Community版での制約</h3><p>Community版ではEnterprise版で実装されている多くの機能が利用できません。その中でも業務アプリ運用で影響の大きいと思われる機能を紹介します。</p><ul><li><strong>Job Queuing</strong>: ジョブキューイング機能が実装されていません。同一ジョブを連続実行する場合などは考慮が必要です</li><li><strong>Failed Job Resume</strong>: ジョブステップでの再実行ができません。ジョブのリカバリポイントをジョブ単位で構成することが必要です</li><li><strong>Workflow Visualization、Ruleset Workflow Strategy Plugin</strong>: 商用ソフトウェアでは通常実装されているジョブワークフローのグラフィカルな表示・修正ができません。複雑なジョブ構築・修正は困難です</li><li><strong>Blackout Calendaring</strong>: カレンダー設定がありません。祝日など特殊な営業日の対応が難しいです</li></ul><h3 id="複雑なジョブワークフロー"><a href="#複雑なジョブワークフロー" class="headerlink" title="複雑なジョブワークフロー"></a>複雑なジョブワークフロー</h3><p>前述の制約事項でも記載した通り、RundeckのCommunity版では複雑なジョブワークフローを作成するのは難しいです。</p><p>基本的には実行単位はジョブであり、そのなかでステップに分割することで複数のタスクを実行します。ジョブネットという概念が見つけられませんでした。ジョブステップから別のジョブをトリガーしてつなげることは可能です。</p><p>リカバリポイントを加味した並列ジョブワークフローを作成してみました。</p><img src="/images/20231025a/image_7.png" alt="" width="1153" height="629" loading="lazy"><p>もう少しうまいやり方があるかもしれません。ご存知の方がいらっしゃればコメントをいただければです。</p><h4 id="ジョブ定義に関する考察"><a href="#ジョブ定義に関する考察" class="headerlink" title="ジョブ定義に関する考察"></a>ジョブ定義に関する考察</h4><p>複雑なジョブワークフローが要求される場合、Community版のRundeckを利用することは難しいです。</p><p>複雑なジョブフローを実装するためのツールがなく、実装する場合は構築工数のコストが大きくなることが想定されます。またジョブ障害時のリカバリ操作も難しくなります。</p><p>Community版を利用する場合のジョブフローとしては、直列に順列で実行するようはワークフローであったり、並列処理においても後続タスクに複数のジョブディペンデンシーを用いないジョブ構成が望ましいものと考えます。</p><h2 id="IaCワークフロー"><a href="#IaCワークフロー" class="headerlink" title="IaCワークフロー"></a>IaCワークフロー</h2><p>RundeckにはいくつかのIaC関連ツールへのプラグインが実装されており、Community版でも利用できるものがあります。先述したようにIaCツールを運用フェーズで利用促進するにはワークフローが必要と考えておりました。</p><p>モノリシックな構成では、システムの変更余地が高く、またそのために変更された内容が検出しづらいです。システム更改などの際、システム規模によっては現状調査に多大な工数が発生します。業務システムとしてはマイクロサービス化が進んでいますが、オンプレミス環境・パブリッククラウド環境で依然モノリシックなシステム環境は多数存在してします。</p><p>変更管理がきちんと行われている環境であっても、変更履歴はあるものの、それがサーバ構成管理ときっちり紐づけられている環境は多くはありません。オンプレミスの環境ではサーバ構成管理はHW構成(CPU,RAM,DISK等)のみであったりすることもあります。それをそのままパブリッククラウドに展開してしまうと、インスタンスの管理はインスタンスタイプやEBSサイズといったもののみになってしまいます。そのためサーバ内部の構成管理(SW,各パラメータなど)は疎かになりがちです。</p><p>また変更管理のトリガーは業務インシデント(更改、障害など)であることがほとんどであり、その結果としてインシデントのクローズで完了となり、サーバ構成変更として履歴として損なわれる状態になるといったこともあると感じております。</p><p>インフラへの変更をジョブワークフローとして生成しログとして残すことで各サーバへの変更履歴を明確化し、かつ、AnsibleやTerraformのコードが変更内容として外部に保存されることがワークフロー管理ツールを用いることで比較的容易に実現できると考えています。</p><h3 id="IaCワークフロー検証構成"><a href="#IaCワークフロー検証構成" class="headerlink" title="IaCワークフロー検証構成"></a>IaCワークフロー検証構成</h3><ul><li>RundeckとAnsibleをインストールしたコンテナを作成</li><li>Terraformをインストールしたコンテナを作成</li><li>TerraformコンテナをRundeckのノードとして追加</li></ul><img src="/images/20231025a/image_8.png" alt="" width="1131" height="629" loading="lazy"><h3 id="IaCワークフロー操作"><a href="#IaCワークフロー操作" class="headerlink" title="IaCワークフロー操作"></a>IaCワークフロー操作</h3><ol><li>IaC実行ユーザはS3バケットに実行するスクリプト類を格納(追加・修正)<ul><li>Terraformで構築するためのtfファイル、ジョブスクリプト、Ansible-playbookを格納</li></ul></li><li>Rundeckにジョブを登録<ul><li>Terraformでインフラ環境を構築ジョブ</li><li>Ansiblleでサービスパッケージの導入及びコンフィグレーヨンジョブ</li></ul></li></ol><img src="/images/20231025a/image_9.png" alt="" width="977" height="449" loading="lazy"><h4 id="IaCワークフロージョブ例"><a href="#IaCワークフロージョブ例" class="headerlink" title="IaCワークフロージョブ例"></a>IaCワークフロージョブ例</h4><ol><li>Terraform<ul><li>S3からtfファイル(providers.tf,backend.tf,各種tfファイル)ダウンロード</li><li>Terraform init</li><li>Terraform validate、Terraform apply</li></ul></li><li>Ansible<ul><li>S3からAnsible-playbookファイル(inventory,task,file,template)ダウンロード</li><li>パッケージインストール</li><li>パッケージ設定ファイル配布</li><li>サービス起動</li></ul></li></ol><p><strong>※実運用では、terraform planやAnsible dryrunなどで実行前に検証を行いますが、実行検証のため省略しております。</strong></p><img src="/images/20231025a/image_10.png" alt="" width="1116" height="412" loading="lazy"><h3 id="IaCワークフロー環境でのコンテナ化のメリット"><a href="#IaCワークフロー環境でのコンテナ化のメリット" class="headerlink" title="IaCワークフロー環境でのコンテナ化のメリット"></a>IaCワークフロー環境でのコンテナ化のメリット</h3><h4 id="運用コスト"><a href="#運用コスト" class="headerlink" title="運用コスト"></a>運用コスト</h4><p>既にコンテナ環境が整備されているのであれば、IaCワークフローで利用する場合はコンテナで運用することがおすすめです。</p><p>IaCリクエストは常時必要であることは稀で必要な時だけ起動できればよいことが多いと思われます。かつコンテナ化することでRundeck自体もリポジトリを利用することで低コストで変更管理できます。</p><h5 id="ノイズの防止"><a href="#ノイズの防止" class="headerlink" title="ノイズの防止"></a>ノイズの防止</h5><p>IaCの運用において実施過程で生じる不用意な修正が品質を大きく損なうケースがあります。</p><p>一時的に行ってしまった誤ったtfファイルやAnsible-playbookの修正が既設の構成状態との乖離を発生してしまい、同期した状態に回復することに多大な工数が生じてしまう、あるいは最悪運用が破綻してしまう場合があります。以前に実行したファイルが不要となったにもかかわらず、そのまま配置されていて意図しない修正が発生していまったなどということもありえなくはありません。</p><p>ユーザがサーバ上でtfファイルやAnsible-playbookなど設定ファイルの直接変更を防ぐことや、設定ファイルをSCM(S3やSubversionなど)で版管理することはIaCを維持するためには重要だと考えます。</p><p>コンテナの揮発性の性質は、ノイズの防止には都合のよいことだと考えます。</p><h5 id="セキュリティ"><a href="#セキュリティ" class="headerlink" title="セキュリティ"></a>セキュリティ</h5><p>環境ごと(開発環境、テスト環境、ステージング環境、本番環境など)それぞれにコンテナを用意しセキュリティ制限を設けることで環境間での誤った更新を防ぐといった点も便利かと思います。むろんサーバで分離することも可能ですが、コスト面や環境維持の観点でコンテナの方がメリット大きいと思われます。</p><p>セキュリティ制限とは、AWS環境でいえば各環境のコンテナごとにIAMロールやセキュリティーグループを設定し意図しない環境へのアクセスをブロックといった制御を指しております。</p><p>データベースは各環境ごとに作成するとコストが大きいため、１つのインスタンス上にデータベース・スキーマ等で分離することで十分であると考えます。IaCワークフローではジョブの実行多重度は多くなく、DB負荷は低いものと想定されるため環境ごとにDBインスタンスを用意するのは費用対効果が悪く感じます。</p><h4 id="IaCワークフローに関する考察"><a href="#IaCワークフローに関する考察" class="headerlink" title="IaCワークフローに関する考察"></a>IaCワークフローに関する考察</h4><p>IaCワークフローでの活用では、Rundeckでなければならないというものではありません。コンテナ化が容易であることやIaC関連のプラグインが存在することなどはRundeckのメリットではありますが、他のツールでも実現は可能かと思います。</p><p>Rundeckはそれを比較的容易にIaCワークフロー構築できるツールの一つであるということだと考えます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>ジョブ管理ツールとして、Rundeck Community版はミッションクリティカルな状況下において可用性・運用性の観点から採用は困難。ミッションクリティカル環境でRundeckの特性(豊富な他ツールとのプラグインなど)を利用したい場合はEnterprise版を検討する</li><li>Rundeck Community版は導入が容易であることから、非ミッションクリティカルな状況では利用価値はある。開発・テスト環境でのジョブワークフロー、非ミッションクリティカルなcronジョブの統制、CI&#x2F;CD、IaCワークフローツールとしてなど</li><li>IaCワークフローにおいてRundeckは有効なツールの一つとなりえる</li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/IaC/">IaC</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%BF%9D%E5%AE%88%E9%81%8B%E7%94%A8/">保守運用</category>
      
      <category domain="https://future-architect.github.io/tags/rundeck/">rundeck</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%83%AA%E3%83%95%E3%83%88/">クラウドリフト</category>
      
      
      <comments>https://future-architect.github.io/articles/20231025a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
