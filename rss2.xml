<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Fri, 09 Jun 2023 04:40:14 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>PLを始める前に読んでおきたい本</title>
      <link>https://future-architect.github.io/articles/20230609a/</link>
      <guid>https://future-architect.github.io/articles/20230609a/</guid>
      <pubDate>Thu, 08 Jun 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230609a/purpose-driven.jpg&quot; alt=&quot;purpose-driven.jpg&quot; width=&quot;600&quot; height=&quot;934&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230609a/purpose-driven.jpg" alt="purpose-driven.jpg" width="600" height="934" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>はじめまして、2023年1月にフューチャーへキャリア入社した水野です。私はこれまでメーカー→SIer→ITコンサルというキャリアを歩んできており、PLの経験もそれなりに積んできましたが、新たな職場でコンサルとしての道を進み始めたこともあり、初心に戻り一から勉強してみようと考えて手に取った一冊がこの本でした。</p><p>普段、特にPLの方が無意識にやってることを整理して言語化してくれてる本なので、これからPLとして歩みたいと考えてる方には是非読んで欲しい１冊ですし、PL経験が豊富な方でも読むことで自身の頭の中を整理でき、普段の業務への取り組む姿勢を見直す機会をくれる本になるかもしれません。</p><p>今回紹介させて頂く本は、『目的ドリブンの思考法』という本です。</p><h2 id="書籍の要約と感想"><a href="#書籍の要約と感想" class="headerlink" title="書籍の要約と感想"></a>書籍の要約と感想</h2><h3 id="VUCA時代だからこそ大切なこと"><a href="#VUCA時代だからこそ大切なこと" class="headerlink" title="VUCA時代だからこそ大切なこと"></a>VUCA時代だからこそ大切なこと</h3><p>これまでの時代は、過去の実績から将来こうなるだろうと予想を立て目的を設定する方式（バックミラー方式）で業務が上手く回っていたが、先行きが読めないVUCA時代では、過去の延長線上に未来はないと記載されています。<br>過去から未来を予測するのではなく、自ら未来を創っていくことが大切だと記載されています。フューチャーのカルチャーとしても「無いものはつくる」という思想を大切にしているので、まさにこの考え方と一致しているなぁと感じました。</p><h3 id="３層ピラミッド構造（目的・目標・手段）の重要性"><a href="#３層ピラミッド構造（目的・目標・手段）の重要性" class="headerlink" title="３層ピラミッド構造（目的・目標・手段）の重要性"></a>３層ピラミッド構造（目的・目標・手段）の重要性</h3><p>目的・目標はその組織の道しるべとなります。目的・目標・手段が一貫しているかどうかが肝で、これらの繋がりが密であれば、より少ない労力で成果を出すことができるし、これらの繋がりが疎であれば、どこへ向かっているかが分からなくなり、暗雲に走り回ることを強いられ、最悪のケースは目的達成できないことになります。<br>また目的・目標・手段が一貫していれば、優先度の設定も容易になると記載されています。目的や目標に対してインパクトがある手段は優先度を高く設定してこなす必要が有りますし、目的・目標に対する影響度が低い手段は、優先すべきことではないことを意味します。</p><p>言われてみれば当たり前のことかもしれませんが、これらを意識的に目的・目標・手段に落とし込めるかどうかであらゆる仕事の局面で「選択と集中」ができるようになり、知的生産性高く業務遂行できるかどうかが決まると感じました。</p><h3 id="組織と同様に目的も階層化構造をつくることが重要"><a href="#組織と同様に目的も階層化構造をつくることが重要" class="headerlink" title="組織と同様に目的も階層化構造をつくることが重要"></a>組織と同様に目的も階層化構造をつくることが重要</h3><blockquote><p>「ビジネスの目的は”階層構造”をとる。なぜなら階層化された組織が一つの大きな”問題解決機構”そのものであるからだ。このことは、組織の本質としてリーダーが理解しておくべき大切なこと」</p></blockquote><p>各部署やロールは何かしらの目的を持っていて、それらは組織全体の上位目的へと繋がっているという考え方です。<br>本書籍では、上位～下位までの一貫性を担保することに注力すべしというメッセージが込められています。これが意識できていないと、前述したとおり効率の悪い進め方になってしまいますし、最悪のケースは無駄な作業をすることになるからです。</p><h3 id="問題とはAsIs（現状）とToBe（目標）のギャップ"><a href="#問題とはAsIs（現状）とToBe（目標）のギャップ" class="headerlink" title="問題とはAsIs（現状）とToBe（目標）のギャップ"></a>問題とはAsIs（現状）とToBe（目標）のギャップ</h3><p>ITコンサルをやっていると、よく耳にする「まずはAsIsとToBeから決めましょう」というセリフ、皆さんも一度は聞いたことがあるのではないでしょうか。</p><p>AsIs（現状）とToBe（目標）が設定されていないと、現時点がどこなのかを測ることもできないですし、目標が無ければ問題にも気づくことが出来ません。AsIsとToBeは、PJを遂行する上での一つの「ものさし」として役に立つので、目的・目標・手段の３層ピラミッドを定義する段階で一度、AsIsとToBeも並行して定義しておくと良いと思います。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>本書籍は、各項目に対して事例をもとに根拠立てて説明されており個人的にはどれも腹落ちする内容でした。<br>紹介しきれませんでしたが、書籍では目的・目標・手段の設定方法やその際に意識するポイント等も紹介されています。<br>全てをここで説明するのは難しいので、興味のある方は是非一度読んでみると良いと思います。<br>この書籍が伝えてる重要なメッセージとしては、これです。</p><blockquote><p>「上位と下位で一貫性を意識して目的・目標・手段を設定し業務遂行すること」</p></blockquote><p>トップダウンで業務の方針や指示があった場合には、それを鵜呑みにして進めるのではなく、一度立ち止まり、上位と下位との一貫性があるかどうかを考えることが重要だと考えます。</p><p>今回この本を読んでみて、インプットしただけでは身にならないと思い、この書籍から吸収したことを活かして組織の目的・目標・手段を整理した上で優先度を設定して横串チーム内での計画を立て、上長へ提案しながら進めている所です。</p><p>ぜひみなさんも、インプットで満足せず、業務で活用してみましょう。</p><p>「知識」で終わらせるではなく、「知恵」として身に着けていくことが重要です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Management/">Management</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%83%B3%E3%82%B5%E3%83%AB%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0/">コンサルティング</category>
      
      
      <comments>https://future-architect.github.io/articles/20230609a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>C/C++を呼び出しているRustのWASM化</title>
      <link>https://future-architect.github.io/articles/20230605a/</link>
      <guid>https://future-architect.github.io/articles/20230605a/</guid>
      <pubDate>Sun, 04 Jun 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、Futureでアルバイトをしている川渕です。</p><p>本記事ではC&#x2F;C++を呼び出しているRustのwasm化について説明します。結論から述べるとemscriptenを使用することでうまくいきました。</p><h2 id="経緯"><a href="#経緯" class="headerlink" title="経緯"></a>経緯</h2><p>アルバイトの前はインターンシップでRust製SQLフォーマッタであるuroborosql-fmtの作成を行なっていました。(<a href="/articles/20220916b/">前編</a>, <a href="/articles/20220916c/">後編</a>)<br>現在はアルバイトで<a href="/articles/20221228a/">拡張機能化</a>やwasm化を行なっています。</p><p>基本的にRustで書いたコードのwasm化は簡単に行えるのですが、今回はC&#x2F;C++で書かれたプロジェクトに依存していたため非常に苦戦しました。最終的になんとかwasm化に成功したので、本記事ではその方法について説明します。</p><h2 id="説明すること"><a href="#説明すること" class="headerlink" title="説明すること"></a>説明すること</h2><ul><li>WebAssembly(wasm)とは何か</li><li>Rustをwasm化する主な方法とチュートリアル<ul><li>wasm-pack</li><li>wasm32-unknown-emscripten</li></ul></li><li>C&#x2F;C++を呼んでいるRustのwasm化</li><li>性能検証</li></ul><h2 id="説明しないこと"><a href="#説明しないこと" class="headerlink" title="説明しないこと"></a>説明しないこと</h2><ul><li>WebAssembly System Interface(wasi)について</li></ul><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>OS: macOS Monterey 12.6.1<br>CPU: Apple M1 Pro<br>Rust: 1.67.1</p><h2 id="WebAssembly-wasm-とは"><a href="#WebAssembly-wasm-とは" class="headerlink" title="WebAssembly(wasm)とは"></a>WebAssembly(wasm)とは</h2><p>現在ブラウザ上でプログラムを実行する場合はJavaScriptが使用されます。JavaScriptの役割は元々HTMLの補助程度でしたが、現在はさまざまな用途に使用されており、速度が求められています。近年ではJITコンパイルによって高速化が行われていますが、JITコンパイルはよく呼び出される部分しかコンパイルされない、型推論を間違える可能性がある、などの欠点があります。</p><p>そこで、WebAssembly(wasm)という「ブラウザ上で動くバイナリコードの新しいフォーマット(仕様)」が開発されました。wasmは現在Firefox、Chrome、Safari、Edge等の主要なブラウザの全てに対応しており、Google, Microsoft, Mozilla, Appleによって仕様が策定され開発が進められています。</p><p>基本的に直接記述ではなく、C&#x2F;C++やRust、Golang、TypeScriptなどからコンパイルされます。wasmはJavaScriptを補完する目的で開発されており、JavaScriptから呼び出すことで実行できます。また、wasmからJavaScriptの機能にアクセスすることもできます。</p><p>wasmはCPUの活用、起動の高速化から、ネイティブアプリ並の速度で動作すると言われており、実際に多くのアプリケーションでwasmが使用されています。</p><ul><li><a href="https://www.figma.com/ja/">Figma</a> (<a href="https://www.figma.com/ja/blog/webassembly-cut-figmas-load-time-by-3x/">記事</a>)</li><li><a href="https://sqlite.org/index.html">sqlite</a> (<a href="https://sqlite.org/wasm/doc/trunk/index.md">ドキュメント</a>)</li><li><a href="https://www.google.co.jp/intl/ja/earth/">Google Earth</a> (<a href="https://medium.com/google-earth/google-earth-comes-to-more-browsers-thanks-to-webassembly-1877d95810d6">記事</a>)</li></ul><p>また、wasm化することでフロントエンドだけでアプリケーションが動くようになるため、RustやGoで書いたアプリケーションも簡単にGitHub Pagesなどの静的なサイトで実行することができます。</p><!--> WebAssembly は最近のウェブブラウザーで動作し、新たな機能と大幅なパフォーマンス向上を提供する新しい種類のコードです。基本的に直接記述ではなく、C、C++、Rust 等の低水準の言語にとって効果的なコンパイル対象となるように設計されています。この機能はウェブプラットフォームにとって大きな意味を持ちます。ウェブ上で動作するクライアントアプリで従来は実現できなかった、ネイティブ水準の速度で複数の言語で記述されたコードをウェブ上で動作させる方法を提供します。https://developer.mozilla.org/ja/docs/WebAssembly/Concepts--><h2 id="Rustをwasm化して実行する主な方法"><a href="#Rustをwasm化して実行する主な方法" class="headerlink" title="Rustをwasm化して実行する主な方法"></a>Rustをwasm化して実行する主な方法</h2><p>主に以下の2つがあります。</p><ol><li>wasm-pack<ul><li>Rustのwasm化において一番メジャーで簡単な方法</li><li>wasm-unknown-unknownとwasm-bindgenをラップしたツール</li><li>C&#x2F;C++に依存していない純粋なRustの場合はこちらがオススメ</li></ul></li><li>wasm32-unknown-emscripten<ul><li>emscriptenのインストールが必要</li><li>C&#x2F;C++を呼び出している場合はこちらがオススメ</li></ul></li></ol><h2 id="wasm-pack"><a href="#wasm-pack" class="headerlink" title="wasm-pack"></a>wasm-pack</h2><p>Rustのwasm化において一番メジャーで簡単な方法です。wasm-packさえインストールすれば自動で全部やってくれるので非常に楽です。内部ではターゲットをwasm32-unknown-unknownとしてビルドし、wasm-bindgen-cliを用いてグルーコードを生成しています。wasm-bindgenとはJavaScriptとRustの型を繋ぐツールのことです。</p><p><strong>基本的にwasm-packはC&#x2F;C++を呼んでいる場合は使えないので注意してください。</strong></p><h3 id="チュートリアル"><a href="#チュートリアル" class="headerlink" title="チュートリアル"></a>チュートリアル</h3><p>簡単にwasm-packのチュートリアルを説明します。</p><ol><li><p>wasm-packのインストール</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo install wasm-pack</span><br></pre></td></tr></table></figure></li><li><p>プロジェクトの新規作成</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wasm-pack new hello-wasm-pack</span><br></pre></td></tr></table></figure></li><li><p>ビルド<br> targetをwebに指定してビルドを実行します。</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wasm-pack build --target web</span><br></pre></td></tr></table></figure></li><li><p>wasmの実行<br> 以下のような<code>index.html</code>を作成します。</p> <figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-US&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello-wasm-pack example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">import</span> init, &#123; greet &#125; <span class="keyword">from</span> <span class="string">&quot;./pkg/hello_wasm_pack.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">init</span>()</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">greet</span>(<span class="string">&quot;WebAssembly&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 適当な方法でローカルサーバを立てます。(サーバを立てずにwasmを実行するとCORSエラーが発生します。)<br> 今回はpythonを使う方法でやってみます。</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8080</span><br></pre></td></tr></table></figure><p> ブラウザで<a href="http://localhost:8080/">http://localhost:8080/</a>にアクセスすると画面上にアラートボックスが現れ、<code>Hello, hello-wasm-pack!</code>と表示されたら成功です。</p></li></ol><img src="/images/20230602a/スクリーンショット_2023-03-24_18.40.13.png" alt="" width="1200" height="739" loading="lazy"><h3 id="wasm-packは何をしてくれているのか"><a href="#wasm-packは何をしてくれているのか" class="headerlink" title="wasm-packは何をしてくれているのか"></a>wasm-packは何をしてくれているのか</h3><p>wasm-packはビルド時に以下の処理をしてくれています。</p><ol><li>Rustコードをwasmにコンパイル<ul><li><code>cargo build --target wasm32-unknown-unknown</code>を実行<br>(ビルドターゲットにwasm32-unknown-unknownがインストールされていない場合は<code>rustup target add wasm32-unknown-unknown</code>を実行してビルドターゲットに追加)</li><li>ここでコンパイルしたwasmは<code>target/wasm32-unknown-unknown/release/</code>に生成される</li></ul></li><li>グルーコードの生成<ul><li><code>wasm-bindgen-cli</code>を用いてwasmとjsがデータをやり取りするためのjsファイルを作成し、<code>pkg</code>ディレクトリに格納</li></ul></li><li><code>Cargo.toml</code>を読んで等価な<code>pakcage.json</code>を作成</li><li><code>README.md</code>が存在する場合は<code>pkg</code>にコピー</li></ol><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>wasm32-unknown-unknownの「wasm32」はアドレス空間が32bitであること、1つ目の「unknown」はコンパイルを行うシステムのこと、2つ目の「unknown」はターゲットとしているシステムのことを示しています。つまり、wasm32-unknown-unknownはコンパイルを行うシステムとターゲットとするシステムの両方に制約がなく、どのような実行環境でも動作することを示します。</p></div><h3 id="何故C-x2F-C"><a href="#何故C-x2F-C" class="headerlink" title="何故C&#x2F;C++"></a>何故C&#x2F;C++</h3><p>完全には理解できませんでしたが、wasm-packはC&#x2F;C++の標準ライブラリにリンクする機能が含まれていないようです(<a href="https://stackoverflow.com/questions/75025716/can-wasm-pack-compile-a-rust-project-including-c-code-that-uses-stdlib">参考1</a>、<a href="https://github.com/rustwasm/wasm-pack/issues/741">参考2</a>)。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>C&#x2F;C++を呼び出しているとwasm-packは使用できないと述べましたが、実は<a href="https://zenn.dev/newgyu/articles/8bff73505c7b35">wasm-packでも頑張ればできる</a>らしいです。しかし、記事では依存元のソースコードをいじって動くようにしており、できる限り依存元のソースコードは触りたくないため選択肢から除外しました。どうしてもwasm-packを使いたい方はこちらの記事の方法を試してみてはいかがでしょうか。</p></div><h2 id="wasm32-unknown-emscripten"><a href="#wasm32-unknown-emscripten" class="headerlink" title="wasm32-unknown-emscripten"></a>wasm32-unknown-emscripten</h2><p><a href="https://emscripten.org/">emscripten</a>のコンパイラ(emcc)を利用してコンパイルを行います。emscriptenとはC&#x2F;C++をwasmにコンパイルするためのClang&#x2F;LLVMベースのコンパイラです。<br>C&#x2F;C++を呼んでいる場合はこちらの方法をオススメします。</p><h3 id="チュートリアル-1"><a href="#チュートリアル-1" class="headerlink" title="チュートリアル"></a>チュートリアル</h3><ol><li><p>Python3のインストール<br> Python3をインストールしていない方はインストールしてください。</p></li><li><p>emscriptenのインストール<br>   まずemsdkをインストールします</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/emscripten-core/emsdk.git</span><br></pre></td></tr></table></figure><p>   emsdkを利用してemscriptenをインストールします。ここでバージョンを<strong>2.0.24</strong>にしている点に注意してください。(私の環境では最新のemscriptenでは成功しませんでした。)</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd emsdk</span><br><span class="line">./emsdk install 2.0.24</span><br></pre></td></tr></table></figure><p>   emscriptenを有効にします。emccコマンドが実行できれば成功です。</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用しているshellに合わせて実行するスクリプトを適宜変更してください</span></span><br><span class="line"><span class="built_in">source</span> ./emsdk_env.sh</span><br><span class="line">emcc --version</span><br><span class="line"><span class="comment"># emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 2.0.24 (416685fb964c14cde4be3e8a45ad26d75bac3e33)</span></span><br><span class="line"><span class="comment"># Copyright (C) 2014 the Emscripten authors (see AUTHORS.txt)</span></span><br><span class="line"><span class="comment"># This is free and open source software under the MIT license.</span></span><br><span class="line"><span class="comment"># There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></span><br></pre></td></tr></table></figure>   <div class="note warn" style="background: #fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">     <span class="fa fa-fw fa-check-circle"></span><p>   Windowsで<a href="https://www.python.org/downloads/">公式ページのインストーラ</a>を用いてPythonのインストールを行なっており、かつGit Bashなどを使っている場合はemsdkの実行がうまくいかない場合があります。<br>   WindowsではデフォルトでPython3コマンドが入っていますが、そのコマンドはPython3ではなくMicrosoftのPython3インストールページが起動します。また、<a href="https://www.python.org/downloads/">Python公式ページのインストーラ</a>を用いてインストールされるPython3は<code>python</code>コマンドで起動します。よって、<strong>無効な<code>python3</code>コマンドと有効な<code>python</code>コマンドが存在している状態になります。</strong><br>   emsdkではまず<code>python3</code>コマンドを探し、存在しなければ<code>python</code>コマンドを探します。そのため、先に述べた環境の場合は無効な<code>python3</code>コマンドが使用されてしまいます。<br>   対応方法は以下の3つです。</p><ol><li>MicrosoftストアからPython3をインストールする<ul><li>Microsoftストアが使える方はこの方法が正攻法です</li><li>業務用PCなどでMicrosoftストアが使えない方は以下の方法を試してみてください</li></ul></li><li>emsdkの<code>python3</code>コマンドを探す箇所を削除する<ul><li>力技です</li><li><a href="https://github.com/emscripten-core/emsdk/blob/da9699832b5df4e123403490e499c87000c22654/emsdk#L33-L39"><code>emsdk/emsdk</code>の33~39行目</a>を削除するとうまくいきます</li></ul></li></ol>   </div></li><li><p>プロジェクトの新規作成</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new --lib hello-emscripten</span><br></pre></td></tr></table></figure></li><li><p>ターゲットに<code>wasm32-unknown-emscripten</code>を追加</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustup target add wasm32-unknown-emscripten</span><br></pre></td></tr></table></figure></li><li><p><code>Cargo.toml</code>を以下のように変更</p> <figure class="highlight toml"><figcaption><span>Cargo.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;hello-emscripten&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2021&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[lib]</span></span><br><span class="line"><span class="attr">crate-type</span> = [<span class="string">&quot;cdylib&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>src/lib.rs</code>を以下のように変更</p> <figure class="highlight rust"><figcaption><span>src/lib.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::ffi::&#123;c_char, CString&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">greet</span>(src: *<span class="keyword">mut</span> c_char) <span class="punctuation">-&gt;</span> *<span class="keyword">mut</span> c_char &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">src</span> = <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> src.<span class="title function_ invoke__">as_mut</span>() &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(src) =&gt; &#123;</span><br><span class="line">                <span class="comment">// ポインタからCStringに変換</span></span><br><span class="line">                <span class="keyword">let</span> <span class="variable">s</span> = CString::<span class="title function_ invoke__">from_raw</span>(src);</span><br><span class="line">                <span class="comment">// CStringからStringに変換</span></span><br><span class="line">                s.<span class="title function_ invoke__">into_string</span>().<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="literal">None</span> =&gt; <span class="string">&quot;guest&quot;</span>.<span class="title function_ invoke__">to_owned</span>(),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">res</span> = <span class="built_in">format!</span>(<span class="string">&quot;Hello, &#123;src&#125;!&quot;</span>);</span><br><span class="line">    <span class="comment">// Rustの文字列から終端文字がnullのC形式の文字列に変換し、ポインタに変換</span></span><br><span class="line">    CString::<span class="title function_ invoke__">new</span>(res).<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">into_raw</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <a href="https://doc.rust-lang.org/reference/abi.html#the-no_mangle-attribute"><code>#[no_mangle]</code>アトリビュート</a>を付与することで関数名をマングリングしないようにすることができます。マングリングとはコンパイラが関数名などをユニークな名前に変更することです。(例: <code>int Add(int a, int b)</code> →  <code>_Z3Addii</code>)<br> 今回の例では関数greetの名前を勝手に変更してほしくないので<code>#[no_mangle]</code>アトリビュートを付与しています。</p></li><li><p><code>build.sh</code>の作成<br> プロジェクトのルートディレクトリに<code>build.sh</code>を作成します。</p> <figure class="highlight sh"><figcaption><span>build.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自分の環境のemsdkの場所に合わせてパスに書き換えてください</span></span><br><span class="line"><span class="comment"># 使用しているshellに合わせて実行するスクリプトを適宜変更してください</span></span><br><span class="line"><span class="comment"># emccを有効にする</span></span><br><span class="line"><span class="built_in">source</span> ../emsdk/emsdk_env.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># emccの設定</span></span><br><span class="line"><span class="built_in">export</span> EMCC_CFLAGS=<span class="string">&quot;-o hello-emscripten.js</span></span><br><span class="line"><span class="string">                    -s EXPORTED_FUNCTIONS=[&#x27;_greet&#x27;]</span></span><br><span class="line"><span class="string">                    -s EXPORTED_RUNTIME_METHODS=ccall&quot;</span></span><br><span class="line"><span class="comment"># ビルド</span></span><br><span class="line">cargo build --target wasm32-unknown-emscripten --release</span><br></pre></td></tr></table></figure><p> emccの設定の詳細は以下の通りです。ドキュメントは<a href="https://emscripten.org/docs/tools_reference/emcc.html">こちら</a>。</p></li></ol><div class="scroll"><table><thead><tr><th>オプション</th><th>説明</th><th></th></tr></thead><tbody><tr><td>-o hello-emscripten.js</td><td>jsのグルーコードを出力する</td><td><a href="https://emscripten.org/docs/tools_reference/emcc.html#:~:text=when%20cross%2Dcompiling).-,%2Do%20%3Ctarget%3E,-%5Blink%5D%20When%20linking">リンク</a></td></tr><tr><td>-s EXPORTED_FUNCTIONS&#x3D;[‘_greet’]</td><td>エクスポートする関数の指定</td><td><a href="https://github.com/emscripten-core/emscripten/blob/fab93a2bff6273c882b0c7fb7b54eccc37276e03/src/settings.js#L969-L978">リンク</a></td></tr><tr><td>-s EXPORTED_RUNTIME_METHODS&#x3D;ccall</td><td>エクスポートするランタイムメソッドの指定</td><td><a href="https://github.com/emscripten-core/emscripten/blob/fab93a2bff6273c882b0c7fb7b54eccc37276e03/src/settings.js#L868-L875">リンク</a></td></tr></tbody></table></div><ol start="8"><li><p>ビルドの実行</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> build.sh</span><br></pre></td></tr></table></figure><p> 実行が完了するとプロジェクトのルートディレクトリに<code>hello-emscripten.js</code>、<code>hello-emscripten.wasm</code>というファイルが生成されます。</p></li><li><p><code>index.html</code>の作成<br> 以下のような<code>index.html</code>を作成します</p> <figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- グルーコードの読み込み --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">hello-emscripten.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;greet&quot;</span> <span class="attr">id</span>=<span class="string">&quot;greet&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Module</span> = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Module</span>[<span class="string">&quot;onRuntimeInitialized&quot;</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> name = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;greet&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> target = name.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> res = <span class="title function_">ccall</span>(<span class="string">&quot;greet&quot;</span>, <span class="string">&quot;string&quot;</span>, [<span class="string">&quot;string&quot;</span>], [target]);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>実行<br>適当な方法でローカルサーバを立てます。今回はpythonを使う方法でやってみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8080</span><br></pre></td></tr></table></figure><p>ブラウザで<a href="http://localhost:8080/">http://localhost:8080/</a>にアクセスすると以下のようなページが表示されます。</p></li></ol><img src="/images/20230602a/スクリーンショット_2023-03-24_15.53.38.png" alt="greet" width="986" height="624" loading="lazy">    テキストボックスに適当なテキストを入力し、下部のボタンを押します。    コンソールに"Hello, (入力したテキスト)!"と表示されれば成功です。<img src="/images/20230602a/スクリーンショット_2023-03-24_15.59.58.png" alt="Hello, Tom!" width="917" height="611" loading="lazy"><h2 id="SQLフォーマッタのwasm化をやってみる"><a href="#SQLフォーマッタのwasm化をやってみる" class="headerlink" title="SQLフォーマッタのwasm化をやってみる"></a>SQLフォーマッタのwasm化をやってみる</h2><p>私たちが作成したRust製SQLフォーマッタ(uroborosql-fmt)のwasm化をやってみます。</p><p>フォーマッタはCで書かれたtree-sitterに依存しているため、今回は先ほど紹介したemscriptenを使う方法でwasm化を行います。方法は先述したチュートリアルとほぼ同じなので詳細は割愛しますが、ビルド用シェルスクリプトは少し変更を加えたため説明します。</p><p>ビルド用シェルスクリプトを変更した理由は、依存しているプロジェクトであるtree-sitter-sql(tree-sitterのSQL文法)のビルドにおいて、<code>EMCC_CFLAGS=&quot;-o uroborosql-fmt.html&quot;</code>のようにhtmlを出力する設定にしていると失敗してしまったためです。調査しましたが原因不明であったため、とりあえずtree-sitter-sqlだけ先にビルドし、その後にemccの設定を変更し、最後に全体のビルドを行うアプローチを取りました。</p><p><code>cargo build</code>に<code>-vv</code>を付与(<a href="https://doc.rust-lang.org/cargo/reference/build-scripts.html#:~:text=If%20you%20would%20like%20to%20see%20the%20output%20directly%20in%20your%20terminal%2C%20invoke%20Cargo%20as%20%22very%20verbose%22%20with%20the%20%2Dvv%20flag.">“very verbose”モード</a>、処理の詳細が出力される)して確認したところ、各ビルドでは以下のような処理を行なっていることがわかりました。</p><ol><li>1回目のビルド<ul><li>tree-sitter-sqlとそれに依存するライブラリをビルド、このときオブジェクトファイル等(*.a 、*.o )が生成される</li></ul></li><li>2回目のビルド<ul><li>uroborosql-fmtに依存するライブラリをビルド、このときtree-sitter-sqlはビルド済みとしてスキップ</li><li>uroborosql-fmtをコンパイルするときに依存するライブラリのオブジェクトファイル等があるパスがrustcに渡され、そこからオブジェクトファイル等を検索してまとめてwasm化する</li></ul></li></ol><figure class="highlight sh"><figcaption><span>build.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自分の環境のemsdk/emsdk_env.shのパスに書き換えてください</span></span><br><span class="line"><span class="comment"># emccを有効にする</span></span><br><span class="line"><span class="built_in">source</span> ../emsdk/emsdk_env.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># emccの設定変更</span></span><br><span class="line"><span class="built_in">export</span> EMCC_CFLAGS=<span class="string">&quot;-O3&quot;</span></span><br><span class="line"><span class="comment"># tree-sitter-sqlのビルドを実行</span></span><br><span class="line">cargo build --package tree-sitter-sql --target wasm32-unknown-emscripten --release</span><br><span class="line"></span><br><span class="line"><span class="comment"># emccの設定変更</span></span><br><span class="line"><span class="built_in">export</span> EMCC_CFLAGS=<span class="string">&quot;-O3 -o uroborosql-fmt.js -s EXPORTED_FUNCTIONS=[&#x27;_format_sql&#x27;] -s ALLOW_MEMORY_GROWTH=1 -s EXPORTED_RUNTIME_METHODS=ccall&quot;</span></span><br><span class="line"><span class="comment"># 全体のビルドを実行</span></span><br><span class="line">cargo build --target wasm32-unknown-emscripten --release</span><br></pre></td></tr></table></figure><div class="scroll"><table><thead><tr><th>オプション</th><th>説明</th><th></th></tr></thead><tbody><tr><td>-O3</td><td>最高レベルの最適化</td><td><a href="https://emscripten.org/docs/tools_reference/emcc.html#:~:text=settings.js.-,%2DO3,-%5Bcompile%2Blink%5D%20Like">リンク</a></td></tr><tr><td>-o uroborosql-fmt.js</td><td>jsのグルーコードを出力する</td><td><a href="https://emscripten.org/docs/tools_reference/emcc.html#:~:text=when%20cross%2Dcompiling).-,%2Do%20%3Ctarget%3E,-%5Blink%5D%20When%20linking">リンク</a></td></tr><tr><td>-s EXPORTED_FUNCTIONS&#x3D;[‘_format_sql’]</td><td>エクスポートする関数の指定</td><td><a href="https://github.com/emscripten-core/emscripten/blob/fab93a2bff6273c882b0c7fb7b54eccc37276e03/src/settings.js#L969-L978">リンク</a></td></tr><tr><td>-s ALLOW_MEMORY_GROWTH&#x3D;1</td><td>動的にメモリを増やす</td><td><a href="https://github.com/emscripten-core/emscripten/blob/fab93a2bff6273c882b0c7fb7b54eccc37276e03/src/settings.js#L177-L190">リンク</a></td></tr><tr><td>-s EXPORTED_RUNTIME_METHODS&#x3D;ccall</td><td>エクスポートするランタイムメソッドの指定</td><td><a href="https://github.com/emscripten-core/emscripten/blob/fab93a2bff6273c882b0c7fb7b54eccc37276e03/src/settings.js#L868-L875">リンク</a></td></tr></tbody></table></div><p>今回はSQLフォーマッタなので、動的にメモリを確保する方法を選択しました。ちなみにメモリサイズのデフォルトの初期値は16MB、最大値は2GBで、こちらもオプション(<code>INITIAL_MEMORY</code>, <code>MAXIMUM_MEMORY</code>)で変更できます。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>私の環境では大差は見られませんでしたが、動的にメモリを確保する方法は重くなる可能性があるらしい(<a href="https://bugs.chromium.org/p/v8/issues/detail?id=3907">参考</a>)ので、動的にメモリを確保する必要がないサービスの場合は避けた方が良いかもしれません。</p></div><p>ローカルサーバを立てて実行してみるとちゃんと動きました 🎉<br><img src="/images/20230602a/format.gif" alt="format.gif" width="1200" height="675" loading="lazy"></p><h2 id="速度検証"><a href="#速度検証" class="headerlink" title="速度検証"></a>速度検証</h2><p>napi-rsを用いてNodeアドオン化して拡張機能に載せたフォーマッタ(詳細は<a href="https://future-architect.github.io/articles/20221228a/">こちら</a>)と今回作成したwasmで実行時間の計測を行なってみました。</p><p>最適化なしのwasmはビルドの際に<code>--release</code>を付与せずにビルドしたものです。</p><h3 id="検証方法"><a href="#検証方法" class="headerlink" title="検証方法"></a>検証方法</h3><ul><li>フォーマット部分のみの時間を計測</li><li>10200行のSQLを使用</li><li>20回実行して90パーセンタイルを取得</li></ul><h3 id="検証結果"><a href="#検証結果" class="headerlink" title="検証結果"></a>検証結果</h3><p>結果は以下のようになりました。</p><div class="scroll"><table><thead><tr><th>種類</th><th>時間(ms)</th></tr></thead><tbody><tr><td>napi-rs</td><td>73.89</td></tr><tr><td>wasm</td><td>171.10</td></tr></tbody></table></div><p>他の方の調査(<a href="%5Bhttps://namazu-tech.hatenablog.com/entry/2017/12/02/012600%5D">1</a>, <a href="https://niba1122.dev/js-wasm-benchmark/">2</a>, <a href="https://t-yng.jp/post/wasm-othello">3</a>, <a href="http://nmi.jp/2022-05-14-Dynamically-created-WebAssembly">4</a>)ではwasmはネイティブレベルかそれ以上の性能を叩き出していたので、wasmの方が2倍ほど遅いと言う結果は意外でした。しかし、遅いと言っても10200行のSQLで171msなので十分実用的な速度だと思います。</p><h2 id="最適化検証"><a href="#最適化検証" class="headerlink" title="最適化検証"></a>最適化検証</h2><p>Rustの<a href="https://doc.rust-lang.org/cargo/reference/profiles.html">最適化レベル</a>を変更してサイズ、速度の調査を行います。検証方法は速度検証と同様です。</p><h3 id="検証結果-1"><a href="#検証結果-1" class="headerlink" title="検証結果"></a>検証結果</h3><div class="scroll"><table><thead><tr><th>種類</th><th>説明</th><th>サイズ(KB)</th><th>時間(ms)</th></tr></thead><tbody><tr><td>0</td><td>最適化なし</td><td>1392</td><td>428.70</td></tr><tr><td>1</td><td>基本的な速度最適化</td><td>1178</td><td>207.90</td></tr><tr><td>2</td><td>いくつかの速度最適化</td><td>1122</td><td>177.70</td></tr><tr><td>3</td><td>全ての速度最適化(リリースモードのデフォルト)</td><td>1124</td><td>171.10</td></tr><tr><td>“s”</td><td>バイナリサイズの最適化</td><td>1113</td><td>218.80</td></tr><tr><td>“z”</td><td>バイナリサイズの最適化+ループのベクトル化もオフ</td><td>1111</td><td>300.40</td></tr></tbody></table></div><p>今回のケースではサイズの最適化を行なってもwasmのサイズに大きな変化は見られませんでした。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>C&#x2F;C++を呼び出しているRustのwasm化について説明しました。</p><p>本記事には書きませんでしたが、tree-sitter-sqlのパーササイズが大きすぎてコンパイルできない問題などにも遭遇して非常に苦戦していました。最終的にはなんとかwasm化することができたのでよかったです。同様の問題を抱えている方の助けになれば幸いです。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://developer.mozilla.org/ja/docs/WebAssembly">WebAssembly | MDN</a></li><li><a href="https://qiita.com/ShuntaShirai/items/3ac92412720789576f22">WebAssemblyとは - Qiita</a></li><li><a href="https://zenn.dev/newgyu/articles/4240df5d2a7d55">C言語へのFFIを含むRustをWASM化するのは難しすぎる</a></li><li><a href="https://zenn.dev/newgyu/articles/8bff73505c7b35">C言語へのFFIを含むRustコードをWASMにする（CMakeを添えて）</a></li><li><a href="https://zenn.dev/newgyu/scraps/ffbce244b960e6">興味のおもむくままにWASM&#x2F;WASIらへん</a></li><li><a href="https://qiita.com/legokichi/items/5d6344314ab6d6633554">Rust における wasm-bindgen と wasm-pack と cargo-web と stdweb の違い - Qiita</a></li><li><a href="https://emscripten.org/">Main — Emscripten 3.1.33-git (dev) documentation</a></li><li><a href="https://qiita.com/t_katsumura/items/ff379aaaba6931aad1c4">WebAssemblyが気になるので調べてみた - Qiita</a></li><li><a href="https://users.rust-lang.org/t/emitting-es6-module-for-wasm32-unknown-emscripten/84684/11">Emitting ES6 Module for `wasm32-unknown-emscripten` - help - The Rust Programming Language Forum</a></li><li><a href="https://qiita.com/kzee/items/216bd1dd2b1330642e23">C&#x2F;C++を使っているRustのコンソールアプリのReact SPA化 - Qiita</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Rust/">Rust</category>
      
      <category domain="https://future-architect.github.io/tags/wasm/">wasm</category>
      
      <category domain="https://future-architect.github.io/tags/C-C/">C/C++</category>
      
      
      <comments>https://future-architect.github.io/articles/20230605a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Great ExpectationsでBigQueryのデータ品質を監視する</title>
      <link>https://future-architect.github.io/articles/20230531a/</link>
      <guid>https://future-architect.github.io/articles/20230531a/</guid>
      <pubDate>Tue, 30 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;1-はじめに&quot;&gt;&lt;a href=&quot;#1-はじめに&quot; class=&quot;headerlink&quot; title=&quot;1. はじめに&quot;&gt;&lt;/a&gt;1. はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、フューチャーでアルバイトをしている板野です。&lt;/p&gt;
&lt;p&gt;Great</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="1-はじめに"><a href="#1-はじめに" class="headerlink" title="1. はじめに"></a>1. はじめに</h2><p>こんにちは、フューチャーでアルバイトをしている板野です。</p><p>Great Expectationsというツールを使って、表形式データの品質をバリデーションする流れをご紹介します。</p><p>MLOpsを推進するにあたりMLモデルの監視が必要となってきています。その中でも、MLモデルに入出力されるデータ品質をバリデーションすることは重要な監視事項の一つです。</p><p>ML監視についての概要や意義については、<a href="/articles/20230413a/">こちらの記事</a>で詳しく述べられているのでぜひご覧ください。</p><h2 id="2-Great-Expectationsの概要"><a href="#2-Great-Expectationsの概要" class="headerlink" title="2. Great Expectationsの概要"></a>2. Great Expectationsの概要</h2><img src="/images/20230531a/2023-05-10-16-41-00.png" alt="" width="500" height="133" loading="lazy"><p>※<a href="https://docs.greatexpectations.io/docs/">公式サイト</a>ロゴ</p><p>Great Expectations（GX）はデータ品質監視ツールの1つで、表形式データの品質監視ができます。GXはOSSであり、Pythonライブラリとして提供されています。</p><p>予めデータに対し、Expectationと呼ばれる「データのあるべき姿」を定義しておき、監視対象のデータがこれに逸脱していないかをチェック（バリデーション）します。Expectationは例えば「この列の最大値は100,最小値は50」といったものがあり、GXではExpectationを複数定義することが一般的です。Expectationを複数定義したものをExpectation Suiteと呼びます。</p><p>GXでは「監視対象データ、Expectation Suite、バリデーションを実施した後の行動」の3点をまとめたものをCheckpointと呼び、定期的にCheckpointを実行することが、GXにおけるデータ品質監視の一般的な流れとなります。</p><h2 id="3-利用の流れ"><a href="#3-利用の流れ" class="headerlink" title="3. 利用の流れ"></a>3. 利用の流れ</h2><h2 id="3-1-事前準備"><a href="#3-1-事前準備" class="headerlink" title="3.1. 事前準備"></a>3.1. 事前準備</h2><h3 id="必要な環境"><a href="#必要な環境" class="headerlink" title="必要な環境"></a>必要な環境</h3><ul><li>Python環境</li><li>JupyterNotebook環境（必須ではないですが初期設定ではあった方が楽です）</li></ul><h3 id="使用するデータ"><a href="#使用するデータ" class="headerlink" title="使用するデータ"></a>使用するデータ</h3><p><a href="https://archive.ics.uci.edu/ml/datasets/bike+sharing+dataset">Bike Sharing Dataset</a>を利用し、1時間毎のシェアバイク利用者数が記録されているテーブルを使います。</p><p>以下のような内容になっています。</p><img src="/images/20230531a/2023-05-08-16-05-51.png" alt="" width="1200" height="212" loading="lazy"><p>例えば、<code>hr</code>（時間）の列は0から23までの値しか入らないはずです。もしも、<code>hr</code>が27のような不正値をとる行が入ってきた場合、検知するというのがGXの使いどころです。</p><p>今回は<code>hr</code>に27という不正値を故意に入れてみて、これをGXで検知するまでの流れを実践し、以下に説明していきます。</p><h3 id="3-2-GXのインストール"><a href="#3-2-GXのインストール" class="headerlink" title="3.2. GXのインストール"></a>3.2. GXのインストール</h3><p><code>pip install great-expectations</code>コマンドでGXをインストールします。</p><p>執筆当時のバージョンは<code>0.16.8</code>です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip install great-expectations</span><br><span class="line">$ pip freeze | grep great  <span class="comment"># バージョン確認</span></span><br><span class="line">great-expectations==0.16.8</span><br></pre></td></tr></table></figure><h3 id="3-3-プロジェクトの作成"><a href="#3-3-プロジェクトの作成" class="headerlink" title="3.3. プロジェクトの作成"></a>3.3. プロジェクトの作成</h3><p><code>great_expectations init</code>コマンドでGXプロジェクトを作成します。</p><p>コマンドを実行したディレクトリに<code>great_expectations</code>ディレクトリが自動生成されます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">great_expectations init</span></span><br><span class="line"></span><br><span class="line">  ___              _     ___                  _        _   _</span><br><span class="line"> / __|_ _ ___ __ _| |_  | __|_ ___ __  ___ __| |_ __ _| |_(_)___ _ _  ___</span><br><span class="line">| (_ | &#x27;_/ -_) _` |  _| | _|\ \ / &#x27;_ \/ -_) _|  _/ _` |  _| / _ \ &#x27; \(_-&lt;</span><br><span class="line"> \___|_| \___\__,_|\__| |___/_\_\ .__/\___\__|\__\__,_|\__|_\___/_||_/__/</span><br><span class="line">                                |_|</span><br><span class="line">             ~ Always know what to expect from your data ~</span><br><span class="line"></span><br><span class="line">Let&#x27;s create a new Data Context to hold your project configuration.</span><br><span class="line"></span><br><span class="line">Great Expectations will create a new directory with the following structure:</span><br><span class="line"></span><br><span class="line">    great_expectations</span><br><span class="line">    |-- great_expectations.yml</span><br><span class="line">    |-- expectations</span><br><span class="line">    |-- checkpoints</span><br><span class="line">    |-- plugins</span><br><span class="line">    |-- .gitignore</span><br><span class="line">    |-- uncommitted</span><br><span class="line">        |-- config_variables.yml</span><br><span class="line">        |-- data_docs</span><br><span class="line">        |-- validations</span><br><span class="line"></span><br><span class="line">OK to proceed? [Y/n]: Y</span><br><span class="line"></span><br><span class="line">================================================================================</span><br><span class="line"></span><br><span class="line">Congratulations! You are now ready to customize your Great Expectations configuration.</span><br><span class="line"></span><br><span class="line">You can customize your configuration in many ways. Here are some examples:</span><br><span class="line"></span><br><span class="line">  Use the CLI to:</span><br><span class="line">    - Run `great_expectations datasource new` to connect to your data.</span><br><span class="line">    - Run `great_expectations checkpoint new &lt;checkpoint_name&gt;` to bundle data with Expectation Suite(s) in a Checkpoint for later re-validation.</span><br><span class="line">    - Run `great_expectations suite --help` to create, edit, list, profile Expectation Suites.</span><br><span class="line">    - Run `great_expectations docs --help` to build and manage Data Docs sites.</span><br><span class="line"></span><br><span class="line">  Edit your configuration in great_expectations.yml to:</span><br><span class="line">    - Move Stores to the cloud</span><br><span class="line">    - Add Slack notifications, PagerDuty alerts, etc.</span><br><span class="line">    - Customize your Data Docs</span><br><span class="line"></span><br><span class="line">Please see our documentation for more configuration options!</span><br></pre></td></tr></table></figure><p>自動生成されたディレクトリの構成を簡潔に説明すると、以下の通りになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">great_expectations  <span class="comment"># GXのルートとなるディレクトリ</span></span><br><span class="line">|-- great_expectations.yml  <span class="comment"># プロジェクト全体の設定ファイル</span></span><br><span class="line">|-- expectations  <span class="comment"># Expectationsを定義したJSONファイルが格納されるディレクトリ</span></span><br><span class="line">|-- checkpoints  <span class="comment"># Checkpointを定義したyamlファイルが格納されるディレクトリ</span></span><br><span class="line">|-- plugins  <span class="comment"># プラグイン用のディレクトリ（本記事では扱わない）</span></span><br><span class="line">|-- .gitignore  <span class="comment"># uncommittedディレクトリをGitにコミットしないように書かれたgitignoreファイル</span></span><br><span class="line">|-- uncommitted  <span class="comment"># Gitで管理する際にコミットされないディレクトリ</span></span><br><span class="line">    |-- config_variables.yml  <span class="comment"># 公開したくないキーや設定が書かれたファイル</span></span><br><span class="line">    |-- data_docs  <span class="comment"># バリデーション結果がHTML等のドキュメントの形式で入ったディレクトリ</span></span><br><span class="line">    |-- validations  <span class="comment"># バリデーション結果のメタデータ(JSON)が入ったディレクトリ</span></span><br></pre></td></tr></table></figure><h3 id="3-4-データソースの登録"><a href="#3-4-データソースの登録" class="headerlink" title="3.4. データソースの登録"></a>3.4. データソースの登録</h3><p>次に、監視対象データの場所（データソース）を定義する必要があります。</p><p>GXでは、Pandasで扱えるファイルや、SQLベースのクエリで取得できるデータなどに対応しています。今回はBigQueryのテーブルをデータソースとして登録します。</p><p><code>great_expectations datasource new</code>コマンドを実行すると、最初にデータソースの種類の選択が促され、自動的にNotebookが起動します。このタイミングでNotebookを起動させたく無ければ<code>--no-jupyter</code>オプションを末尾に付けます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">great_expectations datasource new --no-jupyter</span></span><br><span class="line"></span><br><span class="line">What data would you like Great Expectations to connect to?</span><br><span class="line">    1. Files on a filesystem (for processing with Pandas or Spark)</span><br><span class="line">    2. Relational database (SQL)</span><br><span class="line">: 2</span><br><span class="line"></span><br><span class="line">Which database backend are you using?</span><br><span class="line">    1. MySQL</span><br><span class="line">    2. Postgres</span><br><span class="line">    3. Redshift</span><br><span class="line">    4. Snowflake</span><br><span class="line">    5. BigQuery</span><br><span class="line">    6. Trino</span><br><span class="line">    7. Athena</span><br><span class="line">    8. other - Do you have a working SQLAlchemy connection string?</span><br><span class="line">: 5</span><br><span class="line">Please install the optional dependency &#x27;black&#x27; to enable linting. Returning input with no changes.</span><br><span class="line">To continue editing this Datasource, run jupyter notebook &lt;現在のディレクトリ&gt;/great_expectations/uncommitted/datasource_new.ipynb</span><br></pre></td></tr></table></figure><p>コマンドでの対話を進めると、Notebookファイル<code>great_expectations/uncommitted/datasource_new.ipynb</code>が自動的に生成されます。</p><p>GXはこのNotebookを実行して、CLIでは設定しずらい詳細な設定を適用していく仕様です。Notebookを使わない場合は直接yamlファイルを編集することになります（補足参照）。</p><p>以下の画像はNotebookの冒頭です。</p><img src="/images/20230531a/2023-05-08-14-25-51.png" alt="" width="1200" height="707" loading="lazy"><p>Notebook上の以下の変数を自身のプロジェクトに合うように変更する必要があります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">datasource_name = <span class="string">&quot;&lt;設定したいデータソース名&gt;&quot;</span> <span class="comment">#好みの名前に設定可能</span></span><br><span class="line"></span><br><span class="line">connection_string = <span class="string">&quot;bigquery://&lt;GCPのプロジェクト名&gt;/&lt;BigQueryのデータセット名&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">schema_name = <span class="string">&quot;&quot;</span> <span class="comment"># 入力不要</span></span><br><span class="line">table_name = <span class="string">&quot;&lt;BigQueryのテーブル名&gt;&quot;</span> <span class="comment"># 監視対象データのテーブル</span></span><br></pre></td></tr></table></figure><p>上記の変数を変更した後、Notebookのセルを全て実行するとデータソースの設定は完了です。</p><h4 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h4><p><code>datasource_new.ipynb</code>では、GX全体の設定ファイルである<code>great_expectations.yml</code>のデータソースを定義する部分を編集しているだけで、Notebookはこれを編集するための分かりやすいインターフェースに過ぎません。</p><p>従って、Notebookを使わずに<code>great_expectations.yml</code>のデータソース定義部分を直接編集するだけで設定が可能です。</p><p>例えばBigQueryなら、以下のようにデータソースを定義します。（<a href="https://docs.greatexpectations.io/docs/guides/connecting_to_your_data/database/bigquery">公式Docs参考</a>）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">my_datasource</span></span><br><span class="line"><span class="attr">class_name:</span> <span class="string">Datasource</span></span><br><span class="line"><span class="attr">execution_engine:</span></span><br><span class="line">  <span class="attr">class_name:</span> <span class="string">SqlAlchemyExecutionEngine</span></span><br><span class="line">  <span class="attr">connection_string:</span> <span class="string">bigquery://&lt;GCPのプロジェクト名&gt;/&lt;BigQueryのデータセット名&gt;</span></span><br><span class="line"><span class="attr">data_connectors:</span></span><br><span class="line">   <span class="attr">default_runtime_data_connector_name:</span></span><br><span class="line">       <span class="attr">class_name:</span> <span class="string">RuntimeDataConnector</span></span><br><span class="line">       <span class="attr">batch_identifiers:</span></span><br><span class="line">           <span class="bullet">-</span> <span class="string">default_identifier_name</span></span><br><span class="line">   <span class="attr">default_inferred_data_connector_name:</span></span><br><span class="line">       <span class="attr">class_name:</span> <span class="string">InferredAssetSqlDataConnector</span></span><br><span class="line">       <span class="attr">include_schema_name:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="3-5-Expectation-Suiteの作成"><a href="#3-5-Expectation-Suiteの作成" class="headerlink" title="3.5. Expectation Suiteの作成"></a>3.5. Expectation Suiteの作成</h3><p>続いて、Expectation Suiteを作成します。</p><p>Expectation Suiteは複数のExpectationの集まりのことを指します。一つ一つ手作業でExpectationを定義・バリデーションしていくのは非効率なため、Expectation Suiteを定義してまとめて行うのです。</p><p><code>great_expectations suite new</code>コマンドを実行すると、先程と似た流れでCLIとNotebookを使ってセットアップを行います。最初の「How would you like to create your Expectation Suite?」という質問に「3」と回答するとExpectation Suiteを自動で生成してくれます。</p><p>今回はExpectation Suiteを自動生成してもらいます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">great_expectations suite new --no-jupyter</span></span><br><span class="line"></span><br><span class="line">How would you like to create your Expectation Suite?</span><br><span class="line">    1. Manually, without interacting with a sample Batch of data (default)</span><br><span class="line">    2. Interactively, with a sample Batch of data</span><br><span class="line">    3. Automatically, using a Data Assistant</span><br><span class="line">: 3</span><br><span class="line"></span><br><span class="line">A batch of data is required to edit the suite - let&#x27;s help you to specify it.</span><br><span class="line"></span><br><span class="line">Select data_connector</span><br><span class="line">    1. default_runtime_data_connector_name</span><br><span class="line">    2. default_inferred_data_connector_name</span><br><span class="line">    3. default_configured_data_connector_name</span><br><span class="line">: 3</span><br><span class="line"></span><br><span class="line">Which data asset (accessible by data connector &quot;default_configured_data_connector_name&quot;) would you like to use?</span><br><span class="line">    1. &lt;テーブル名&gt;</span><br><span class="line"></span><br><span class="line">Type [n] to see the next page or [p] for the previous. When you&#x27;re ready to select an asset, enter the index.</span><br><span class="line">: 1</span><br><span class="line"></span><br><span class="line">Name the new Expectation Suite [&lt;テーブル名&gt;.warning]: exp_suite_test</span><br><span class="line"></span><br><span class="line">Great Expectations will create a notebook, containing code cells that select from available columns in your dataset and</span><br><span class="line">generate expectations about them to demonstrate some examples of assertions you can make about your data.</span><br><span class="line"></span><br><span class="line">When you run this notebook, Great Expectations will store these expectations in a new Expectation Suite &quot;exp_suite_test&quot; here:</span><br><span class="line"></span><br><span class="line">  file:///&lt;現在のディレクトリ&gt;/great_expectations/expectations/exp_suite_test.json</span><br><span class="line"></span><br><span class="line">Would you like to proceed? [Y/n]: Y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">中略</span></span><br><span class="line"></span><br><span class="line">To continue editing this suite, run jupyter notebook &lt;現在のディレクトリ&gt;/great_expectations/uncommitted/edit_exp_suite_test.ipynb</span><br></pre></td></tr></table></figure><p>コマンドの実行が完了すると、Expectation Suiteを設定するためのNotebookファイル<code>great_expectations/uncommitted/edit_exp_suite_test.ipynb</code>が自動生成されます。</p><p>以下の画像はNotebookの冒頭です。</p><img src="/images/20230531a/2023-05-08-15-59-41.png" alt="" width="1200" height="1107" loading="lazy"><p>Notebookにて、必要に応じて変更すべき変数は以下の2つです。</p><ul><li>batch_request<ul><li>‘limit’ の数はデフォルトで<code>1000</code>となっていますが、必要に応じて変更します</li><li>この値は一度のバリデーションでBigQueryのテーブルデータを何件読み込んでくるかの数値です</li><li>‘limit’ の数値が大きすぎると処理が重くなる可能性があります</li></ul></li><li>exclude_column_names<ul><li><strong>バリデーションしたい列</strong>をコメントアウトします</li><li>初期状態のままでは全てがexcludeされている状態なので、どの列もバリデーションしないというおかしな設定になってしまいます</li><li>今回は<code>hr</code>列だけバリデーションしたいのでここだけコメントアウトしています</li></ul></li></ul><p>Notebookのセルを全て実行すると、自動でExpectation Suiteが作成され、そのExpectation Suiteが定義されたJSONファイルが<code>great_expectations/expectations/</code>配下に保存されます。</p><p>以下はそのJSONファイルを一部展開して表示した画像です。</p><img src="/images/20230531a/2023-05-08-16-22-06.png" alt="" width="715" height="853" loading="lazy"><p>expectationは計13個自動生成されたようです。</p><p>その中の一つは<code>expect_column_values_to_be_between</code>というもので、「<code>hr</code>列は0から23までの値をとるはずである」という内容のexpectationです。</p><p>またこの時点で、Expectation Suiteの生成と同時に、データのバリデーションまで行われています。</p><p><code>great_expectations/uncommitted/data_docs/local_site/index.html</code>を開くと以下のような画面があり、1度バリデーションが行われていることが分かります。</p><img src="/images/20230531a/2023-05-10-10-18-29.png" alt="" width="1200" height="303" loading="lazy"><p>クリックして詳細を見てみると、2つのExpectationに不合格となっているようです。<br>自動生成のExpectationが何個も定義されているので、多少は変なExpectationが生成されることもあるのでしょう。</p><img src="/images/20230531a/2023-05-10-10-20-31.png" alt="" width="1200" height="990" loading="lazy"><h3 id="3-6-Checkpointの作成・実行"><a href="#3-6-Checkpointの作成・実行" class="headerlink" title="3.6. Checkpointの作成・実行"></a>3.6. Checkpointの作成・実行</h3><p>最後に、Checkpointを作成する必要があります。</p><p>Checkpointとは「監視対象データ（データソース）、Expectation Suite、バリデーションを実施した後の行動」の3点をまとめたものであり、Checkpointを実行することで、Expectation Suiteをまとめてバリデーションすることができます。</p><p>バリデーションを実施した後の行動として、結果をメールやSlackでの通知する等が挙げられますが、Pythonでプログラミングできるものなら何でも可能となっており、自由度が高いです。（<a href="https://docs.greatexpectations.io/docs/terms/action">公式Docs参考</a>）<br>※今回はバリデーションを実施した後の行動の設定までは扱いません</p><p><code>great_expectations checkpoint new &lt;設定したいcheckpoint名&gt;</code>コマンドを実行すると、<code>great_expectations/uncommitted/edit_checkpoint_~~.ipynb</code>にNotebookファイルが自動生成されます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">great_expectations checkpoint new --no-jupyter checkpoint_test</span></span><br><span class="line"></span><br><span class="line">Please install the optional dependency &#x27;black&#x27; to enable linting. Returning input with no changes.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">中略</span></span><br><span class="line"></span><br><span class="line">To continue editing this Checkpoint, run jupyter notebook &lt;現在のディレクトリ&gt;/great_expectations/uncommitted/edit_checkpoint_checkpoint_test.ipynb</span><br></pre></td></tr></table></figure><p>生成されたNotebookファイルで変更する必要がある部分は次の通りです。</p><p>初期状態では<code>data_asset_name</code>の行がBigQuery上の適当なテーブルになっているので、監視対象にしたいデータセット名、テーブル名に書き換えます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my_checkpoint_name = <span class="string">&quot;checkpoint_test&quot;</span> <span class="comment"># This was populated from your CLI command.</span></span><br><span class="line"></span><br><span class="line">yaml_config = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">name: <span class="subst">&#123;my_checkpoint_name&#125;</span></span></span><br><span class="line"><span class="string">config_version: 1.0</span></span><br><span class="line"><span class="string">class_name: SimpleCheckpoint</span></span><br><span class="line"><span class="string">run_name_template: &quot;%Y%m%d-%H%M%S-my-run-name-template&quot;</span></span><br><span class="line"><span class="string">validations:</span></span><br><span class="line"><span class="string">  - batch_request:</span></span><br><span class="line"><span class="string">      datasource_name: my_datasource</span></span><br><span class="line"><span class="string">      data_connector_name: default_inferred_data_connector_name</span></span><br><span class="line"><span class="string">      data_asset_name: &lt;監視したいデータセット名&gt;.&lt;監視したいテーブル名&gt; #★ここを変更する</span></span><br><span class="line"><span class="string">      data_connector_query:</span></span><br><span class="line"><span class="string">        index: -1</span></span><br><span class="line"><span class="string">    expectation_suite_name: my_exp_suite</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(yaml_config)</span><br></pre></td></tr></table></figure><p>今回はExpectation Suiteの自動生成に用いたテーブルに「<code>hr</code>（時間）の列の値を27に変更した不正な行」を追加したテーブルを監視対象としてCheckpointを作成しました。</p><p>Notebookの全てのセルを実行し、末尾のセルのコメントアウトを外して実行すると、Checkpointが実行されます。Checkpointの実行結果は先程同様に<code>great_expectations/uncommitted/data_docs/local_site/index.html</code>を開いて閲覧できます。</p><p>以下のように、不正な行を1行追加しただけで不合格の項目が増えていることが確認できます。</p><p>このようにしてデータの不正・品質劣化を監視することができます。</p><img src="/images/20230531a/2023-05-10-10-45-19.png" alt="" width="1200" height="923" loading="lazy"><p>以上でCheckpointを実行するまでの流れは終了です。</p><p>上記（3.1.~3.5.）の手順を実行しておけば、今後はCheckpointを実行するだけでバリデーションできます。</p><p>Checkpointの定義はyamlファイルとして保存されており、PythonまたはCLIからAPIを呼び出すだけで何度でも実行することができます。</p><h2 id="4-Tips"><a href="#4-Tips" class="headerlink" title="4. Tips"></a>4. Tips</h2><p>以下はGXの調査検証を進めていくにあたり生じた疑問とその答えをまとめたものです。</p><p>GXの利用を検討しているさいはご参考ください。</p><h3 id="Expectation-Suiteを編集したいときは？"><a href="#Expectation-Suiteを編集したいときは？" class="headerlink" title="Expectation Suiteを編集したいときは？"></a>Expectation Suiteを編集したいときは？</h3><p><code>great_expectations suite edit &lt;編集したいExpectation Suite名&gt;</code>コマンドにより編集できます。</p><p>CLIコマンドによる対話形式で「2. Interactively, with a sample batch of data」の選択肢を選ぶと、Notebook形式のインターフェースでExpectationを一つ一つ編集できます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">great_expectations suite edit exp_suite_test --no-jupyter</span></span><br><span class="line"></span><br><span class="line">How would you like to edit your Expectation Suite?</span><br><span class="line">    1. Manually, without interacting with a sample batch of data (default)</span><br><span class="line">    2. Interactively, with a sample batch of data</span><br><span class="line">: 2</span><br><span class="line"></span><br><span class="line">A batch of data is required to edit the suite - let&#x27;s help you to specify it.</span><br><span class="line"></span><br><span class="line">Select data_connector</span><br><span class="line">    1. default_runtime_data_connector_name</span><br><span class="line">    2. default_inferred_data_connector_name</span><br><span class="line">    3. default_configured_data_connector_name</span><br><span class="line">: 3</span><br><span class="line"></span><br><span class="line">Which data asset (accessible by data connector &quot;default_configured_data_connector_name&quot;) would you like to use?</span><br><span class="line">    1. &lt;テーブル名&gt;</span><br><span class="line"></span><br><span class="line">Type [n] to see the next page or [p] for the previous. When you&#x27;re ready to select an asset, enter the index.</span><br><span class="line">: 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">中略</span></span><br><span class="line"></span><br><span class="line">To continue editing this suite, run jupyter notebook &lt;現在のディレクトリ&gt;/great_expectations/uncommitted/edit_exp_suite_test.ipynb</span><br></pre></td></tr></table></figure><p>JSONファイルを直接編集することもできますが、複雑なため、Notebook形式やPythonのAPI経由で編集することをお勧めします。（<a href="https://docs.greatexpectations.io/docs/guides/expectations/how_to_create_and_edit_expectations_with_instant_feedback_from_a_sample_batch_of_data">公式Docs参考</a>）</p><h3 id="GCPにおける構成例は？"><a href="#GCPにおける構成例は？" class="headerlink" title="GCPにおける構成例は？"></a>GCPにおける構成例は？</h3><p><a href="https://docs.greatexpectations.io/docs/deployment_patterns/how_to_use_great_expectations_with_google_cloud_platform_and_bigquery">公式Docs</a>によると、GCPを利用する場合、以下のような構成で動かす一例が挙げられています。\</p><p>設定のための初回実行はローカル環境で行い、定期実行する際はCloud Composerを利用します。</p><p>また、メタデータやバリデーション結果のドキュメント等はGCSに保存しておきます。</p><p>バリデーション結果のドキュメントはHTML形式なのでGCSのエンドポイントにアクセスして閲覧できる設定をすれば便利そうです。</p><img src="/images/20230531a/2023-05-10-15-59-58.png" alt="" width="1200" height="903" loading="lazy"><p>※<a href="https://docs.greatexpectations.io/docs/deployment_patterns/how_to_use_great_expectations_with_google_cloud_platform_and_bigquery">Great Expectations 公式Docs</a>より画像引用</p><h3 id="Expectationにはどんな種類があるか？"><a href="#Expectationにはどんな種類があるか？" class="headerlink" title="Expectationにはどんな種類があるか？"></a>Expectationにはどんな種類があるか？</h3><p>多すぎて把握出来ていませんが、<a href="https://greatexpectations.io/expectations/">公式コミュニティ</a>に既存のExpectationsが300個以上あります。</p><p>Expectationを自作することも可能であり、カスタマイズ性は非常に高いです。（<a href="https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/overview">公式Docs参考</a>）</p><h2 id="5-おわりに"><a href="#5-おわりに" class="headerlink" title="5. おわりに"></a>5. おわりに</h2><p>今回は、Great Expectations（GX）を利用してBigQueryのデータ品質を監視する簡単な流れを紹介をしました。</p><p>GXには様々な機能や拡張性を備えており、様々なユースケースにカスタマイズすることができます。</p><p>本記事が読者の皆様のご参考になれば幸いです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/BigQuery/">BigQuery</category>
      
      <category domain="https://future-architect.github.io/tags/AI%E7%9B%A3%E8%A6%96/">AI監視</category>
      
      <category domain="https://future-architect.github.io/tags/GreatExpectations/">GreatExpectations</category>
      
      
      <comments>https://future-architect.github.io/articles/20230531a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>管理画面等でNext.jsをBetter Reactとして使う</title>
      <link>https://future-architect.github.io/articles/20230530a/</link>
      <guid>https://future-architect.github.io/articles/20230530a/</guid>
      <pubDate>Mon, 29 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;最近、Next.jsが複雑になりすぎて、単なるウェブ画面を作る用途にはNext.jsは重すぎるので別のものが良いとか、Vercel統合のための機能が多いんでしょ、みたいな感想を見かけることが増えた気がします。特に管理画面とか社内システムとかですね。B2Cでも設定画面系とかは</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>最近、Next.jsが複雑になりすぎて、単なるウェブ画面を作る用途にはNext.jsは重すぎるので別のものが良いとか、Vercel統合のための機能が多いんでしょ、みたいな感想を見かけることが増えた気がします。特に管理画面とか社内システムとかですね。B2Cでも設定画面系とかは当てはまるかもしれません。</p><p>ホンダ時代に、タイプRを買っても実際にサーキットとかに走らせに行く人は1&#x2F;10ぐらい、という話を聞いた気がしますが、必ずしも、そのすべてのパフォーマンスを引き出さないのはダメとかなくて、単にかっこいいからとか、一部のメリットでも自分にあえば良いのです。</p><p>Next.jsも、たくさん機能がありますが、ミニマムな使い方もできます。</p><h2 id="ほぼNext-jsの機能をオフにした使い方"><a href="#ほぼNext-jsの機能をオフにした使い方" class="headerlink" title="ほぼNext.jsの機能をオフにした使い方"></a>ほぼNext.jsの機能をオフにした使い方</h2><p>たぶんNext.jsを最低限で使うライン・メリットはここかな、と思います。</p><ul><li>基本的に全部CSR(Client Side Rendering)で普通のReactっぽく使う<ul><li>Routerがあらかじめ組み込まれている</li></ul></li><li>超高速なビルドツール群が組み込み済み</li><li><a href="https://github.com/vercel/next.js/tree/canary/examples">広く使われるライブラリ群との組み合わせ</a>がテスト済み</li></ul><p>そのためにやるのは</p><ul><li>API機能を使わずに別に実装済みのAPIサーバーにフロントエンドからリクエストを投げられるようにする　</li><li>静的HTMLとしてビルドできるようにする</li></ul><p>の2つです。</p><h3 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-next-app</span><br><span class="line">✔ What is your project named? … simple-next</span><br><span class="line">✔ Would you like to use TypeScript with this project? … No / [Yes]</span><br><span class="line">✔ Would you like to use ESLint with this project? … No / [Yes]</span><br><span class="line">✔ Would you like to use Tailwind CSS with this project? … No / [Yes]</span><br><span class="line">✔ Would you like to use `src/` directory with this project? … [No] / Yes</span><br><span class="line">✔ Use App Router (recommended)? … No / [Yes]</span><br><span class="line">✔ Would you like to customize the default import <span class="built_in">alias</span>? … No / Yes</span><br></pre></td></tr></table></figure><p>今時はTypeScripは使うだろうし、ESLintも使うだろうから、Enter連打しておけば大丈夫です。ぼくはTailwind.CSSも使うのでこれが最初から選べるのはうれしいですね。</p><h3 id="リバースプロキシ設定"><a href="#リバースプロキシ設定" class="headerlink" title="リバースプロキシ設定"></a>リバースプロキシ設定</h3><p>API機能を使わないということは別にGoなりJavaなりでAPIサーバーがいるはずですので、そちらにフォワードするように設定を書き換えます。</p><figure class="highlight js"><figcaption><span>next.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;next&#x27;).NextConfig</span>&#125; */</span></span><br><span class="line"><span class="keyword">const</span> nextConfig = &#123;</span><br><span class="line">    <span class="title function_">rewrites</span>(<span class="params"></span>) &#123; <span class="comment">// このメソッドを足す</span></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">source</span>: <span class="string">&quot;/api/:path*&quot;</span>,</span><br><span class="line">                <span class="attr">destination</span>: <span class="string">&quot;http://localhost:8000/api/:path*&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = nextConfig</span><br></pre></td></tr></table></figure><p>別に立ってるAPIサーバーのエミュレーションのために、以下のようなファイルを作ってからプロジェクトのルートで <code>python3 -m &quot;http.server&quot;</code> と実行して8000番でウェブサーバーを立ててみます。</p><figure class="highlight json"><figcaption><span>/api/dummy.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hello&quot;</span><span class="punctuation">:</span> <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>これで、Next.jsの3000番ポートの特定のリクエストはフォワードされるようになります。<code>/api</code>へのリクエストはバックエンドサーバーに直接行くので、API機能は触る必要はありません。もちろん、最初から別のポートにフロントからリクエストを飛ばす方法もありますが、こちらの方が同一ドメインなので、CORSも不要です。また実際にデプロイするときも同一ドメインであれば追加の設定とかも不要で楽ですよね。</p><img src="/images/20230530a/スクリーンショット_2023-05-12_9.52.44.png" alt="" width="884" height="487" loading="lazy"><p>こんな感じの動きになります。</p><img src="/images/20230530a/名称未設定ファイル-ページ1.drawio.png" alt="" width="551" height="101" loading="lazy"><h3 id="データ取得の実装"><a href="#データ取得の実装" class="headerlink" title="データ取得の実装"></a>データ取得の実装</h3><p>データ取得は<a href="https://nextjs.org/docs/pages/api-reference/functions/get-initial-props">getInitialProps()</a>とか、<a href="https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props">getServerSideProps()</a>とか、<a href="https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props">getStaticProps()</a>を使わずに、コンポーネントの中から行います。</p><p><code>useEffect()</code>を使って、その中で<code>fetch</code>を使ったり、<a href="https://swr.vercel.app/ja">useSWR()</a>を使ったり。まあ、データ取得のこの方法は新しいapp routerでは標準なので、新規システムの場合は最初からこちらで行っていけば良いです。</p><h3 id="静的生成"><a href="#静的生成" class="headerlink" title="静的生成"></a>静的生成</h3><p>最後に静的生成です。昔はnext buildを実行してからnext exportをすれば生成されていましたが、今は<code>output: &#39;export&#39;</code>を足すという感じで変わっています。ただ、これだとexportで使えないはずの機能をチェックするエラーチェックでひっかかってしまいます。というのも、rewritesはサーバーがある前提の機能だからです。</p><figure class="highlight js"><figcaption><span>next.config.js(これだとエラーになる)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nextConfig = &#123;</span><br><span class="line">    <span class="attr">output</span>: <span class="string">&#x27;export&#x27;</span>, <span class="comment">// これを足す</span></span><br><span class="line">    <span class="title function_">rewrites</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちょっとトリッキーな方法ですが、ビルド時は<code>rewrite()</code>をなくして<code>export</code>にするような設定にすれば両立できます。</p><figure class="highlight js"><figcaption><span>next.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = process.<span class="property">env</span>.<span class="property">npm_lifecycle_event</span> === <span class="string">&#x27;build&#x27;</span> ? &#123;</span><br><span class="line">    <span class="attr">output</span>: <span class="string">&#x27;export&#x27;</span></span><br><span class="line">&#125; : nextConfig</span><br></pre></td></tr></table></figure><p>本番ではおそらくLBなどが前段にたっていて、特定のパス（<code>/api</code>など）以下はAPIサーバーにフォワードし、そうでない場合はオブジェクトストレージにフォワード。ただし、404なら<code>index.html</code>にフォールバック、みたいな感じにすればNode.jsのサーバーなしにNext.jsアプリケーションがデプロイできます。</p><img src="/images/20230530a/名称未設定ファイル-ページ2.drawio.png" alt="名称未設定ファイル-ページ2.drawio.png" width="511" height="216" loading="lazy"><p>これでミニマムなNext.jsができました。</p><h2 id="追加の機能のオプトイン"><a href="#追加の機能のオプトイン" class="headerlink" title="追加の機能のオプトイン"></a>追加の機能のオプトイン</h2><p>Next.jsのいくつかの機能は、ニーズに当てはまるのであれば有効化していく、という感じでオプトインしていくとよいでしょう。</p><h3 id="静的生成-SSG-x2F-ISG"><a href="#静的生成-SSG-x2F-ISG" class="headerlink" title="静的生成(SSG&#x2F;ISG)"></a>静的生成(SSG&#x2F;ISG)</h3><p>ISG(Incremental Static Generation)とかSSG(Static Site Generation)がうれしいのは読み手が多くて書き手が少ないコンテンツ、例えばニュースサイトとかブログとかですね。キャッシュを使う仕組みの場合、どうしても性能を上げるにはキャッシュヒット率が大事になりますが、キャッシュで済ましてはいけない新しいコンテンツでもキャッシュが使われると更新されない内容が表示されますし、Revalidate戦略を使うと、結局何度もコンテンツ生成ロジックが実行されることになります。閲覧数と更新頻度の比率がどれだけ偏りがあるかで判断すれば良いと思います。</p><h3 id="サーバー側の生成-SSR"><a href="#サーバー側の生成-SSR" class="headerlink" title="サーバー側の生成(SSR)"></a>サーバー側の生成(SSR)</h3><p>画面表示にたくさんのデータ取得が必要だけど、集計したり、一部のカラムだけ抜き出すとかaggregationしちゃうから、実際に画面から使われるデータ自体は多くないよ、みたいなケースではSSR(Server Side Rendering)がうれしいですね。もちろん、SSRだけが回答ではなく、データのフィルタリングがきちんとAPI側に組み込まれていたら、実際は不要にできるかもしれません。</p><p>あと、画面表示には大量のJavaScriptのロジックが必要だけど、実際に表示はそこまで複雑ではない、みたいなケースだと、React Server Component機能が効くと思います。ぼくもまだ仕事では使ったことがないですが・・・まあこれがうまく性能を出してくれるケースがどれだけあるのか、というのはあるかと思います。社内システムなんかの場合は通信速度が問題になることは少ないと思うので、JSのファイルのダウンロードを無理に早くする必要もないと思いますし。</p><p>あとは、社内システムでもスクレイピングしたりRPAしたい、というケースだともしかしたらSSRをしておいた方が良いというのもあるかもしれませんが、基本的にネガティブな動機だと思うので、そういう目的の場合はAPIでアクセスして！って言う方が良いと思います。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">NoCodeとか、RPAって「エンジニアという気持ち悪い生き物と話をしたくない」という需要がそれなりにある気がしているんだよね</p>&mdash; ところてん (@tokoroten) <a href="https://twitter.com/tokoroten/status/1288688668484362240?ref_src=twsrc%5Etfw">July 30, 2020</a></blockquote><h3 id="API機能"><a href="#API機能" class="headerlink" title="API機能"></a>API機能</h3><p>既存のサービスへリクエストを投げてそれをただ返すだけであれば魅力はないと思います。</p><ol><li>クレデンシャルをフロントエンドに露出させないでサーバー側の中だけで持つ</li><li>バックエンドサーバーのレスポンスの形式がフロントエンドに嬉しくないので整形したい</li><li>バックエンドサーバーが複数あるので、BaaSというか、BFF(backend for frontend)として動かしたい</li></ol><p>今まではデータ通信を<code>getInitialProps()</code>でまとめることで、ページ表示のタイミングにまとめて行うことで、画面が白くなる時間を減らす、という効果もありましたが、ap routerが入って、別々のコンポーネントから投げられる重複した余計な通信はまとめられる、みたいな最適化が13で入ったので、パフォーマンス目的で入れる必要性はなくなったと思います。</p><p>もちろん、DBアクセスとかをNode.jsを使って、API機能を使ってやりきるのであれば、Node.jsのサーバーをデプロイする必要がありますがAPI機能を使うのが一番簡単でしょう。</p><h2 id="それでもNext-js以外を選択するケース"><a href="#それでもNext-js以外を選択するケース" class="headerlink" title="それでもNext.js以外を選択するケース"></a>それでもNext.js以外を選択するケース</h2><p>ぼくがNext.jsをあえて使わずにコードを書くのは、Routerすらないようなシンプルなサンプルプログラム程度の場合が多いですね。その場合も、create-next-appではなく、vite.jsのReactテンプレートで作ります。TypeScriptも最初から入って、ビルドもそこそこ高速でホットリロードもできて、十分です。</p><p>ただ、仕事で作るシステムであれば、どんなに小さくてもRouterも必要になるでしょうし、swcとかTurbopackとかどんどん新しいものが導入されてるNext.jsの方が良いかな、と思います。</p><p>あとは、ビルドサイズが小さいというところでSolid.jsとかSvelteとかは触ったりもしますが、基本的に大きなものを作るときはNext.jsでいいかな、と思っています(Vue.jsを選ぶ時以外)。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Next.jsはeasyであるがsimpleではないというのを地でいく発展をしています。内部ではかなり複雑なことをやってくれています。とはいえ、裏の仕組みが表に出てこないようにかなり気を遣って開発されているため、ドキュメントに書かれている表の機能だけを見ておけば良い安心感があります。正規表現を使うのに、正規表現エンジンのコードを読んだりする人は少ない（ゼロとは言わないですが）のと同じように、Next.jsの中の実装を確認しにいく必要性というのは業務で使っていてもあまり感じないです。GoとかTypeScriptの処理系の方が読んだぐらい。なので、Next.jsの表だけ見て簡単な機能だけを使うのはありだと思います。そのためにも、Next.jsを使うにあたっては、自分のユースケースにマッチした機能の選択が大事になります。1つの機能を実現するための手段がいくつかありますからね。ミニマムなNext.jsの機能から始めて、必要になったら徐々にNext.jsの機能を有効化していく、というのが一番良いなと感じています。</p><p>機能追加も活発にされているように見えるのですが、ずっと追いかけてきた立場から見ると、「よりeasyであろう」としているように思えます。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Next.js、いろいろ複雑に見えているけど、今ベータの機能が安定化するとかなり簡単になると思うのだよな。どこのコンポーネントからも自由にサーバーアクセス。裏で勝手にまとめて最適化するよ、とか。フォルダ構成もページ関連のコンポーネントを集めておけるようになる。</p>&mdash; 渋川よしき (@shibu_jp) <a href="https://twitter.com/shibu_jp/status/1652864447894138880?ref_src=twsrc%5Etfw">May 1, 2023</a></blockquote><p>app routerになると、PureなReactにはない、Next.js固有のルールというのは減ります。Reactを学んだ人が、追加で学ぶことも減ります。</p><p>ちょっと前にclassmethodさんの<a href="https://dev.classmethod.jp/articles/complete-nextjs-tutorial/">Next.jsのブログエントリー</a>も出てましたが、app routerでいらなくなる部分とかを省いたり、最初から設定されているTailwind CSSを前提にしていけばさらに半分ぐらいになるんじゃないかと思います。なので、怖がらなくてもいいし、複雑だからと避ける必要もないな、と思っています。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Next.jsの新機能がぱっと見理解できなくても、自分が考えてなかった新しい発想を元にしているかもだし「Next.jsは難しすぎるオワコン」と投げ捨てずについて行くことで見える世界があるだろうし、投資というのは常に先を見ているはずなので、みんな脊髄反射せずに実写の聖闘士星矢見に行こうぜ。</p>&mdash; 渋川よしき (@shibu_jp) <a href="https://twitter.com/shibu_jp/status/1655383901186195456?ref_src=twsrc%5Etfw">May 8, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/React/">React</category>
      
      <category domain="https://future-architect.github.io/tags/Next-js/">Next.js</category>
      
      
      <comments>https://future-architect.github.io/articles/20230530a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>書籍紹介：大規模データ管理(エンタープライズアーキテクチャのベストプラクティス)</title>
      <link>https://future-architect.github.io/articles/20230529a/</link>
      <guid>https://future-architect.github.io/articles/20230529a/</guid>
      <pubDate>Sun, 28 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;最近読んだ書籍の中で非常に良質な内容でしたので紹介したいと思います。少しでも多くの方に興味を持ってもらえることを期待しています。&lt;/p&gt;
&lt;img src=&quot;/images/20230529a/book_datamanagement_at_scale.jpeg&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>最近読んだ書籍の中で非常に良質な内容でしたので紹介したいと思います。少しでも多くの方に興味を持ってもらえることを期待しています。</p><img src="/images/20230529a/book_datamanagement_at_scale.jpeg" alt="" width="516" height="660" loading="lazy"><p><a href="https://www.oreilly.co.jp/books/9784814400089/">O’Reilly Japan</a></p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>私自身がデータ管理（データマネージメント）という観点でここ数年様々な検討を行ってきていますので前提としてその背景について簡単にまとめてみます。</p><p>かつてオンプレミスで運用を行っていた時は企業内のデータは完全に管理されていました。データウェアハウスを導入してデータの集約・加工は行われていましたが、専門チームがデータ仕様確認やデータ提供までもすべての責任を担っていました。品質は高いのですが利用者からの要望（新しいデータの提供、仕様の変更）の対応についてはスピード大きな制約がありました。また大規模なデータを扱うためには多大なコストが必要という制約もあります。</p><p>クラウド技術による「スモールスタートを可能とするインフラ」「大規模なデータを扱うための適切な技術要素」を利用して一気にクラウドアーキテクチャの利用が増えました。クラウドベンダからの積極的な情報展開もあってデータ基盤としてデータレイクアーキテクチャを利用するという考えが普及した感があります。データレイクではデータを集中して管理するのではなく、利用者が自分たちで自由に安全に利用できるための基盤を整備するという考え方です。</p><p>これによりDX化のスピード要求に答えることができてめでたしと思いたいところですが、発展的、継続的に利用ができるのかという点については課題があります。多くの場合「生データそのまま配置しておくので利用者（システム）が自由に使ってください」というアプローチですが、それだけだと「誰（チーム）がそのデータに責任を持つのか」というものが不明確になりがちです。ここがあいまいだとビジネスの変化（データの変化）が発生した際に、データ利用者が追従していくことが難しく足かせになることが容易に想像できます。関係者が少人数であれば密なコミュニケーションが可能なため「データ集めておいたのでご自由にどうぞ」というのは成立しますが、関係者が増えていくとそれは難しくなります。</p><p>クラウド前、クラウド後という環境の変化に関するこれらの背景は本書の1章「データ管理の崩壊」でも触れられています。この点の問題意識は私の感覚に非常に近いものがあります。</p><p>本書では共通基盤としてのデータレイクプロジェクトの6割が失敗してしまうという言葉が引用されていますが、あながち間違いでもないかもしれません。</p><h2 id="エンタープライズアーキテクチャのベストプラクティス"><a href="#エンタープライズアーキテクチャのベストプラクティス" class="headerlink" title="エンタープライズアーキテクチャのベストプラクティス"></a>エンタープライズアーキテクチャのベストプラクティス</h2><p>本書のサブタイトルである「エンタープライズアーキテクチャのベストプラクティス」で目指すものは一言でいうと以下です。</p><blockquote><p>すべてのデータを1つのサイロに集めるのではなく、ユーザーが自分たちで簡単かつ安全にデータを流通、利用、活用できるような方法に移行する</p></blockquote><p>これを実現するためのデータ管理についてのフレーム（知識体系）については、DAMA(Data Management Association) によって、DMBOK(Data Management Body of Knowledge)があります。DAMAホイール図として11個の知識体系が示されていてその図は見たことがある方も多いのではないかと思います。</p><img src="/images/20230529a/DMBOK2_Wheel.PNG" alt="DMBOK2_Wheel.PNG" width="383" height="403" loading="lazy"><p><a href="https://www.dama.org/cpages/dmbok-2-wheel-images">The Global Data Management Community</a></p><p>本書もそのフレームは活用して議論が展開されていますが、DAMAホイール図の項目についてなぞっているだけの内容にはなっていません。DMBOKについてはデータ基盤を整備するエンジニアにとってはとらえどころのない話が多く、理解が難しいのが実情ではないかと思われます。ついついモノづくりが先行してしまい今見えている課題（やりたいこと）だけの個別最適化となる例が多いように思われます。</p><p>本書では、「データ統合と相互運用性(Data Integration &amp; Interoperability)」にかなりの重点（むしろそこがメインとして）をおいて記載されています。</p><ul><li>データ統合<br>3つのアーキテクチャの活用について紹介されています<ul><li>RDS(Read-Only Data Store)アーキテクチャ</li><li>APIアーキテクチャ</li><li>ストリーミングアーキテクチャ</li></ul></li><li>相互運用性<br>データ提供側からデータ利用側の一連のフローの中ででどこを責任範疇とするのかという責任分界点についての解説</li></ul><p>データ統合はクラウドアーキテクチャをベースとした概要の解説となります。論理モデルの解説で具体的なプロダクトについては本書では深く触れられていません。こちらは様々な資料もネット上で公開されているのでデータ連携に携わった人であれば改めて確認する必要はないかもしれません。ここでの紹介は省略します。</p><h2 id="データの相互運用性"><a href="#データの相互運用性" class="headerlink" title="データの相互運用性"></a>データの相互運用性</h2><p>本書の一番の読みどころは2つ目の「相互運用性」についての解説であると考えます。「誰がそのデータに責任を持つのか」というデータの責任範囲（境界）についての考察です。</p><p>本書で紹介されている概念図を1枚だけ引用させてもらいます。（少し改変しています）<br>データレイヤはデータ流通を行う要素となる、RDS(Read-Only Data Store)、API基盤、メッセージング基盤、その組み合わせを包含するもので、論理的なものを表しています。</p><img src="/images/20230529a/data_Interoperability.PNG" alt="data_Interoperability.PNG" width="585" height="335" loading="lazy"><p>ここでのポイントは2つです。</p><ul><li>データの流通はデータレイヤを通じて行われる</li><li>データ提供チーム（すなわちオリジナルデータの所有者）は データレイヤを通じてデータ利用側に渡すところまで責任を持つ</li></ul><p>本書はこれらを基本原則として、一貫性をもってまとめられています。</p><p>この考えはある意味当たり前という印象を受けるかもしれませんが、現実の場面であいまいになりがちな「データはだれが管理すべきか」という点を重視してアーキテクチャ設計の基本原則に組み入れる形で紹介してくれている点が本書の優れた点であると考えます。</p><p>本書ではDDD（ドメイン駆動設計）の概念を引用して説明しています。アプリケーションの境界（ドメイン）を明確に（強制的に）定義するのと同じく、データについても責任範囲を明確化してガバナンスの基本方針とします。具体的はデータ提供チームがデータ利用チームが利用しやすいようにデータを提供するところまでが責任範囲として定義するという考え方です。データを提供する手段（アーキテクチャ）はデータ要件により決定すれば良いのですが、提供内容（利用しやすいデータモデル、データ仕様）についても責任を持つことになります（責任を持つのはデータ基盤の整備チームでもデータを利用するチームではないということです）。データレイヤを通じてデータを流通させますが、データレイヤの具体的な実装は責任範囲に従い厳密に分離します。</p><p>データ基盤におけるアーキテクチャ設計をするにあたってデータマネージメント（ データの相互運用性）方針が重要であるということが腹に落ちるのではないかと思います。現実の場面においては、個別の事情や実態に合わせた考え方が当然必要にはなるのですが、方針検討において参考になるはずです。</p><p>しみじみとする文を引用しておきます。</p><ul><li>「このような中央機能を構築するためには、個々のチームが統合パターンやツールに関する決定権を放棄する必要があります。これには抵抗があるでしょう。社内政治的な選択が必要になるかもしれません。」</li><li>「このようなデータランドスケープの近代化には、現実的なアプローチが必要です。なぜなら、密結合されたランドスケープからの移行は非常に難しいからです。単純なデータフローから小さく始めて、徐々に拡大していくことでドメインやユーザーはメリットを意識し、組織の競争力を高める新しいアーキテクチャに貢献したいと考えるようになります。」</li><li>「データサービスを自分たちで導入し、データサイロを他のサービスで置き換えるだけのチームは「データスプロール（補足：無計画なデータ量とその種類の広がり）」のリスクを抱えるようになります。」</li><li>「スケールアップのためには絶え間ないコミュニケーション、貢献、そして強力なデータガバナンスが必要です。」</li></ul><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>本書はタイトルの「大規模データ管理(エンタープライズアーキテクチャのベストプラクティス)」あるように、システムアーキテクチャではなく、エンタープライズ領域のデータマネージメントについて本質的な話をまとめてくれている良書です。</p><p>以下のようなDAMAホイール図にあるデータマネージメントの一通りについても（エンジニア目線で）紹介されています。</p><ul><li>データガバナンス</li><li>データセキュリティ</li><li>データの価値化（データ利用）</li><li>マスタデータ管理(MDM)</li><li>メタデータの活用</li></ul><p>データマネージメントについて自分のかかわっているプロジェクトにあてはめて思考してみるのも有意義ではないかと思います。ただしあくまでも参考文献なので自分自身での解釈が必要であるという点は忘れなく。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DB/">DB</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88/">データマネージメント</category>
      
      
      <comments>https://future-architect.github.io/articles/20230529a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Kinesisから呼び出されるLambdaのリカバリー処理について</title>
      <link>https://future-architect.github.io/articles/20230526a/</link>
      <guid>https://future-architect.github.io/articles/20230526a/</guid>
      <pubDate>Thu, 25 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;TIGの原木です。&lt;/p&gt;
&lt;p&gt;最近、AWS Kinesis Data StreamとAWS</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIGの原木です。</p><p>最近、AWS Kinesis Data StreamとAWS Lambdaを組み合わせたデータストリーミングを扱うシステムで、Lambdaが処理に失敗した場合のリカバリー運用を考える機会がありました。</p><p>一般的に、Kinesisのようなメッセージングやイベント駆動型のシステムでは、DLQ(デッドレターキュー)という仕組みを設けます。DLQの目的は、メインアプリケーションが障害やバグにより正常に動かなかった場合、未処理のメッセージやイベントを、メインシステムとは”別口の”キューに隔離、保存することです。これにより、運用者はシステムデータのリカバリーを安全に行うことができます。</p><p>本記事では、KinesisとLambdaを組み合わせて使用する際に、DLQとしてDestinationsを使用したフェールセーフ機能を構築した際の知見を共有したいと思います。</p><h2 id="3行まとめ"><a href="#3行まとめ" class="headerlink" title="3行まとめ"></a>3行まとめ</h2><ul><li>LambdaのDestinationsの設定には「非同期呼び出し」と「ストリーム呼び出し」があります</li><li>設定したリトライ回数が超過しないとDestinations(Fail)は呼び出されません</li><li>「非同期呼び出し」と「ストリーム呼び出し」はFail時に渡されるメッセージの構造が違うため、再処理には注意が必要です</li></ul><h2 id="システム説明"><a href="#システム説明" class="headerlink" title="システム説明"></a>システム説明</h2><p>アーキテクチャ図をベースにフェールセーフ機能の全体概要について説明します。</p><img src="/images/20230526a/Kinesis.drawio.png" alt="Kinesis.drawio.png" width="1200" height="321" loading="lazy"><h3 id="1-2-Kinesisからのデータ連携"><a href="#1-2-Kinesisからのデータ連携" class="headerlink" title="1~2. Kinesisからのデータ連携"></a>1~2. Kinesisからのデータ連携</h3><p>システムで利用するデータは外部システムからKinesisを通じて送られてきます。</p><p>ここで着目してほしいのがKinesisは、内部アカウントと外部アカウントの両方に存在することです。本来なら、アカウントの違いなど気にせず、同じ設定を持ちまわしたいのですが、現状Kinesisのクロスアカウントはサポートしておらず、異なるアカウントのKinesisストリームから直接Lambdaに接続することはできません(2023年4月現在)</p><p>この問題を解決するために、外部アカウントには中間にLambda(ポーラー)を配置して、ポーラーが他のアカウントのKinesisストリームからデータを受信し、Lambda(メインのビジネスロジック)に非同期でデータを渡すようにします。つまり、ポーラーは異なるアカウントのKinesisとLambdaを接続する橋渡しの役割を果たします。</p><p>内部アカウントでは、そのような仕組みは必要ないため、直接KinesisとLambda(メインのビジネスロジック)を接続しています。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>中継用のLambdaを設けて、データの橋渡しをするやり方はAWSの情報センターにある下記の情報を参考にしています。</p><p>「クロスアカウントの Kinesis ストリームを使用して、私の Lambda 関数を呼び出す方法を教えてください？」<br><a href="https://repost.aws/ja/knowledge-center/lambda-cross-account-kinesis-stream">https://repost.aws/ja/knowledge-center/lambda-cross-account-kinesis-stream</a></p><p>本文の警告にあるように、この方法が決してベストというわけではありませんが、本案件では様々な事情を鑑みたうえで採用させていただきました。</p><blockquote><p>本文の警告:</p><p>この設定により、Kinesis Data Streams を使用する利点の多くがなくなります。この手順の完了後は、シャード内でレコードをブロックしたり、順序付けを作成したりすることはできません。アプリケーションがこれらの特徴を使用する必要がない場合にのみ、この回避策を使用することをお勧めします。</p></blockquote></div><h3 id="3-Lambdaで処理が失敗した時にSQSへ処理データを送る"><a href="#3-Lambdaで処理が失敗した時にSQSへ処理データを送る" class="headerlink" title="3. Lambdaで処理が失敗した時にSQSへ処理データを送る"></a>3. Lambdaで処理が失敗した時にSQSへ処理データを送る</h3><p>Kinesisから送られたデータは、Lambda(メインのビジネスロジック)で処理されます。</p><p>Lambda(メインのビジネスロジック)で処理に失敗した場合、LambdaのDestinations(Failure)経由でAWS SQSに処理しようとしていたデータが送られます。 <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p><p>SQSはDLQの役割をし、正常に処理できないデータを受け取ります。</p><h3 id="4-失敗した処理データを永続化する"><a href="#4-失敗した処理データを永続化する" class="headerlink" title="4. 失敗した処理データを永続化する"></a>4. 失敗した処理データを永続化する</h3><p>Lambda(運用監視)は、SQSから呼ばれて、Lambda(メイン)で処理に失敗したデータを受け取り、S3に出力します。</p><h3 id="5-リカバリー-運用サーバーからデータを再送する"><a href="#5-リカバリー-運用サーバーからデータを再送する" class="headerlink" title="5. リカバリー: 運用サーバーからデータを再送する"></a>5. リカバリー: 運用サーバーからデータを再送する</h3><p>障害発生の諸々のプロセスを踏んで、状況解消後、S3に出力したデータは運用サーバーから再送されます。</p><h2 id="システムの設計で迷ったところ-x2F-嵌ったところ"><a href="#システムの設計で迷ったところ-x2F-嵌ったところ" class="headerlink" title="システムの設計で迷ったところ&#x2F;嵌ったところ"></a>システムの設計で迷ったところ&#x2F;嵌ったところ</h2><h3 id="LambdaからDestinations-SQS-が呼ばれない？"><a href="#LambdaからDestinations-SQS-が呼ばれない？" class="headerlink" title="LambdaからDestinations(SQS)が呼ばれない？"></a>LambdaからDestinations(SQS)が呼ばれない？</h3><p>Lambdaで処理に失敗してもDestinationsが呼ばれないように見えるケースがあります。<br>下記項目が適切に設定できているか確認してください。</p><ul><li>LambdaのIAM RoleにSQSへの書き込み権限が付与されているか？</li><li>Lambdaの呼び出し元に応じて「非同期呼び出し」と「ストリーム呼び出し」を適切に設定できているか？</li><li>Lambdaの「リトライ」回数に上限が設定されているか？</li></ul><p>これらの設定をしていないとDestinationsが期待通りに動作しません。<br>ここでは一番最後のリトライ回数について詳細を見ていきます。</p><h4 id="Lambdaのリトライ回数を明示的に設定しなかったら？"><a href="#Lambdaのリトライ回数を明示的に設定しなかったら？" class="headerlink" title="Lambdaのリトライ回数を明示的に設定しなかったら？"></a>Lambdaのリトライ回数を明示的に設定しなかったら？</h4><p>LambdaのDestinationsはリトライ回数を超過しないと呼ばれません。</p><p>AWS側の仕様で、「非同期呼び出し」は上限が2回までと決まっているのですが「ストリーム呼び出し」には上限がありません。そのため、リトライ回数のパラメータを明示的に設定しなかった場合の挙動も違います。</p><p>ここで、AWSのリソースをTerraformから操作するためのプラグインであるTerraform Provider for AWSのコードを見てみましょう。</p><p>「非同期呼び出し」では次の通りになっています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;maximum_retry_attempts&quot;</span>: &#123;</span><br><span class="line">Type:         schema.TypeInt,</span><br><span class="line">Optional:     <span class="literal">true</span>,</span><br><span class="line">Default:      <span class="number">2</span>,</span><br><span class="line">ValidateFunc: validation.IntBetween(<span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><a href="https://github.com/hashicorp/terraform-provider-aws/blob/0a77465627efb9003f87978f901d1a4004a2fc09/internal/service/lambda/function_event_invoke_config.go#L84">https://github.com/hashicorp/terraform-provider-aws/blob/0a77465627efb9003f87978f901d1a4004a2fc09/internal/service/lambda/function_event_invoke_config.go#L84</a></p><p>リトライ回数は0~2回が選択できること、デフォルトが2回であることが読み取れます。</p><p>一方で、「ストリーム呼び出し」では次の通りになっています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;maximum_retry_attempts&quot;</span>: &#123;</span><br><span class="line">    Type:         schema.TypeInt,</span><br><span class="line">Optional:     <span class="literal">true</span>,</span><br><span class="line">Computed:     <span class="literal">true</span>,</span><br><span class="line">ValidateFunc: validation.IntBetween(<span class="number">-1</span>, <span class="number">10</span>_000),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><a href="https://github.com/hashicorp/terraform-provider-aws/blob/0a77465627efb9003f87978f901d1a4004a2fc09/internal/service/lambda/event_source_mapping.go#L199">https://github.com/hashicorp/terraform-provider-aws/blob/0a77465627efb9003f87978f901d1a4004a2fc09/internal/service/lambda/event_source_mapping.go#L199</a></p><p>デフォルトの設定が見当たりませんね。明文化されているわけではありませんが、この裏でリトライ回数は「-1」回&#x3D;無限回が設定されます。したがって、デフォルト設定ではストリーム呼び出しをする側(AWS Kinesis等)のデータ保持期間が切れるまでリトライし続けるため、その間、Destinationsが呼ばれることはありません。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>この辺を意識せずに、非同期呼び出しのDestinationsとして作りこんでいた箇所をそのままストリーム呼び出し用に持って行った結果、自分はドはまりすることになりました。</p></div><h3 id="同じKinesisなのにデータが異なる？"><a href="#同じKinesisなのにデータが異なる？" class="headerlink" title="同じKinesisなのにデータが異なる？"></a>同じKinesisなのにデータが異なる？</h3><p>非同期呼び出しとストリーム呼び出しでは、処理に失敗してDestinationsを介して渡されるエラーメッセージの形式は異なります。</p><p>実際にビジネスロジックでFailして、SQSに渡されたメッセージデータを横取りして確認してみましょう。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;MessageId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0fb6346c-7654-40e2-af70-5d6b85fca0ad&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ReceiptHandle&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MD5OfBody&quot;</span><span class="punctuation">:</span> <span class="string">&quot;263d2add8083eb244875245998bb53d9&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;version\&quot;: \&quot;1.0\&quot;, \&quot;timestamp\&quot;: ...(ここに違いが出る)&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>SQSのフォーマット自体は非同期呼び出しとストリーム呼び出しで違いはありません。両者が異なるのはこのメッセージデータのうち、 <code>Body</code> の内容です。 <code>Body</code> には文字列として入っているので、元のJSONデータとして扱うには復元処理が必要です。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 復元処理と書くと大仰ですが、Pythonで書いたら実際はこんな感じです。</span></span><br><span class="line">sqs_message = event[<span class="string">&quot;body&quot;</span>]</span><br><span class="line">sqs_message_dict = json.loads(sqs_message)</span><br></pre></td></tr></table></figure><p>こうやって取り出したメッセージデータの違いについてみていきましょう。「非同期呼び出し」では次のようになっています。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;タイムスタンプ&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;requestContext&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;requestId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;リクエストID&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;functionArn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;メインロジックLambdaのARN&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RetriesExhausted&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;approximateInvokeCount&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;requestPayload&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;KinesisRecord&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;approximateArrivalTimestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kinesisがレコードを受信した時刻&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;処理するはずだったデータの内容&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;partitionKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;パーティションキー&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sequenceNumber&quot;</span><span class="punctuation">:</span> <span class="string">&quot;シーケンス番号&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;kinesisSchemaVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;responseContext&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;statusCode&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;executedVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$LATEST&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;functionError&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Unhandled&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;responsePayload&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;errorMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;エラーメッセージ&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;errorType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wrapError&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>ここで、着目したいのが <code>requestPayload</code> 配下です。この要素には、本来ビジネスロジックで処理する予定だったデータが渡されます。</p><p>したがって、このデータを元にリカバリーしたいと思った場合、<code>requestPayload.KinesisRecord</code> を取り出してAWS Lambdaに渡せば、再実行することができます。</p><p>しかし、「ストリーム呼び出し」では同じ手段ではうまくいきません。Bodyの内容を同様に見てみましょう。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;requestContext&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;requestId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;リクエストID&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;functionArn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;メインロジックLambdaのARN&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RetryAttemptsExhausted&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;approximateInvokeCount&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;responseContext&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;statusCode&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;executedVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$LATEST&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;functionError&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Unhandled&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;タイムスタンプ&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;KinesisBatchInfo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;shardId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shardId-000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;startSequenceNumber&quot;</span><span class="punctuation">:</span> <span class="string">&quot;シーケンス番号の開始&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;endSequenceNumber&quot;</span><span class="punctuation">:</span> <span class="string">&quot;シーケンス番号の終了&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;approximateArrivalOfFirstRecord&quot;</span><span class="punctuation">:</span> <span class="string">&quot;レコードのざっくり開始受信日時&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;approximateArrivalOfLastRecord&quot;</span><span class="punctuation">:</span> <span class="string">&quot;レコードのざっくり終了受信日時&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;batchSize&quot;</span><span class="punctuation">:</span> <span class="string">&quot;バッチサイズ&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;streamArn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kinesisのARN&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>先ほど要素として存在した <code>requestPayload</code> (と <code>responsePayload</code>) が消えて<br>代わりに <code>KinesisBatchInfo</code> が追加されていることがわかります。</p><p><code>requestPayload</code> と <code>KinesisBatchInfo</code> の違いは何でしょうか？</p><p><code>requestPayload</code> には、AWS Lambdaを実行時に渡されるデータがそのまま入っています。したがって、<code>requestPayload</code> の下のデータをAWS Lambdaに再送すればそのまま再実行することができます。</p><p>しかし、 <code>KinesisBatchInfo</code> には Kinesisから渡されたデータは入っていません。代わりに、Kinesis内のデータ&#x3D;レコードを示すいわゆる “ポインタ” にあたる情報が入っており、この情報を元に、Kinesisからレコードを見つけて再送する必要があります。</p><p>この辺の手順は AWSの公式ドキュメント<a href="https://docs.aws.amazon.com/ja_jp/streams/latest/dev/fundamental-stream.html#get-records">「AWS CLI を使用した基本的な Kinesis Data Stream オペレーションの実行-ステップ 3: レコードを取得する」</a>に詳しい記載があります。</p><p>リカバリー処理の実装は、両者の違いを踏まえて行う必要があります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>以上、AWS Kinesisから呼び出されるLambdaのリカバリー処理についての解説でした。最後に、比較表を掲載します。</p><div class="scroll"><table><thead><tr><th>No</th><th>AWS Lambda(メインロジック)の呼び出し方</th><th>自システムでの利用シーン</th><th>リトライ処理(デフォルト)</th><th>リカバリー処理を実装するために必要な要素</th><th>リカバリー処理の実装方法</th></tr></thead><tbody><tr><td>1</td><td>非同期呼び出し</td><td>異なるAWSアカウントからのKinesisデータ連携</td><td>2回</td><td>requestPayload</td><td>Lambda(メインロジック)を呼び出して requestPayloadを渡す</td></tr><tr><td>2</td><td>ストリーム呼び出し</td><td>同じAWSアカウントからのKinesisデータ連携</td><td>無限</td><td>KinesisBatchInfo</td><td>KinesisからKinesisBatchInfoを元にシャードイテレーターを通じてレコードを取得し、 再びKinesisに送信する</td></tr></tbody></table></div><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>運用側では当然両者のデータの違いを意識したくなかったのでリカバリー処理のためにツールを実装しました。二種類の異なるコードを書きつつ、両者とも元はKinesisのデータなんだけどなっていう、もったいない？気持ちがありつつも、違いについて勉強になりました。</p><p>Kinesisのクロスアカウントサポート来てほしいです…</p></div><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">私信なのでコメントで補足します: そもそも、Lambdaを非同期で呼び出して処理に失敗した場合、データの送信先として「DLQ」と「Destinations」を選ぶことができます。どちらを使ってよいかAWSを最近使いだしたユーザーには判断が難しいところだと思います。両者を比較しても「DLQでできることは全部Destinationsでできるよ」という推しの弱い結論しか出てこないのではないでしょうか。そもそも両者が似たような機能なのは必然なのかもしれません。時系列でみてみると、DLQが2016年、Destinationsが2019年と、Destinationsが後発組です。そのためか、DLQの既存ユーザーのためにDLQとDestinationsが両方利用できるように残してるのでは？(だから、似た機能なのか)と読み取れる記述が<a href="https://aws.amazon.com/jp/blogs/compute/introducing-aws-lambda-destinations/">テックブログ</a>にあります。「Destinations and DLQs can be used together and at the same time although Destinations should be considered a more preferred solution. 」(DestinationsとDLQは同時に使用することができますが、Destinationsの方がより好ましいソリューションです) これを見る限りでは「AWS公式の資料でもういっそ、DLQの後継機能がDestinationsだから、Destinationsを使いましょう」ってはっきり言いきっちゃってほしい、とぼやきたいところです。あえて機能面に踏み込むなら、Destinations経由で渡されるメッセージにはAWS LambdaのARNが入っているのでコールバックが楽だし、失敗時だけでなく成功時でもハンドリングやメトリクスを取得したい機会が来るから機能拡張の容易な「Destinations」を選択しようというのが今できる説明かなと存じます。</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Lambda/">Lambda</category>
      
      <category domain="https://future-architect.github.io/tags/Kinesis/">Kinesis</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%82%AB%E3%83%90%E3%83%AA%E3%83%BC/">リカバリー</category>
      
      
      <comments>https://future-architect.github.io/articles/20230526a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Amazon OpenSearch Serverless を触ってみた</title>
      <link>https://future-architect.github.io/articles/20230525a/</link>
      <guid>https://future-architect.github.io/articles/20230525a/</guid>
      <pubDate>Wed, 24 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20230417a&quot;&gt;春の入門連載2023&lt;/a&gt;、17日ぶり2回目の寄稿、23日目を担当します齊藤です。よろしくお願いします。&lt;br&gt;運良く2個目の記事をアップできることになりました！(やったね)&lt;/p&gt;
&lt;p&gt;業務でAmazon</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20230417a">春の入門連載2023</a>、17日ぶり2回目の寄稿、23日目を担当します齊藤です。よろしくお願いします。<br>運良く2個目の記事をアップできることになりました！(やったね)</p><p>業務でAmazon OpenSearch Service (Serviceのほう) を触る機会があり、興味があったのでプレビューで公開されていたServerless版でいろいろ試しました。</p><p>触っていた内容を入門向けにまとめて、ぜひ参考にしつつ入門していただければです。</p><p>Black Belt の資料が大変参考になりました。こちらを適宜引用しています。<br><a href="https://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2023_AmazonOpenSearchServerless_0131_v1.pdf">AWS BLACK BELT ONLINE SEMINAR Amazon OpenSearch Serverless</a><br>引用：[AWS Black Belt Online Seminar 2023&#x2F;01] Amazon OpenSearch Serverless</p><p><strong>注意！</strong><br>Serverless版は、無料利用枠がないため、入門のために少し触るだけでも費用がかかります。</p><p>参考までに自分の場合は、5,6回コレクションを作成したり消したりAPI叩いたりで、800円くらいの請求でした。無料枠で OpenSearch を試したい場合は、Service版を使ってください。</p><p>いくらかかかってもいいけどとりあえず触って感触掴みたい！みたいな方はServerless版をどうぞ。</p><h1 id="Amazon-OpenSearch-Serverless"><a href="#Amazon-OpenSearch-Serverless" class="headerlink" title="Amazon OpenSearch Serverless"></a>Amazon OpenSearch Serverless</h1><p>プレビュー版から一般提供開始にかわりました。</p><p><a href="https://aws.amazon.com/jp/about-aws/whats-new/2023/01/amazon-opensearch-serverless-available/">https://aws.amazon.com/jp/about-aws/whats-new/2023/01/amazon-opensearch-serverless-available/</a></p><h2 id="そもそも-OpenSearch-とは？"><a href="#そもそも-OpenSearch-とは？" class="headerlink" title="そもそも OpenSearch とは？"></a>そもそも OpenSearch とは？</h2><blockquote><p>OpenSearch は、リアルタイムのアプリケーションモニタリング、ログ分析、ウェブサイト検索などの幅広いユースケースにご利用いただける分散型、コミュニティ主導型、Apache 2.0 ライセンス、100% オープンソースの検索および分析スイートです。</p><p>引用：[AWS公式] OpenSearch とは <a href="https://aws.amazon.com/jp/what-is/opensearch/">https://aws.amazon.com/jp/what-is/opensearch/</a></p></blockquote><p>検索・分析ができる、いわゆる全文検索エンジンと呼ばれるものになります。</p><p>次に出てくる、全文検索とは何か？</p><blockquote><p>全文検索（ぜんぶんけんさく、英: Full text search）とは、コンピュータにおいて、複数の文書（ファイル）から特定の文字列を検索すること。「ファイル名検索」や「単一ファイル内の文字列検索」と異なり、「複数文書にまたがって、文書に含まれる全文を対象とした検索」という意味で使用される。</p><p>引用：[ウィキペディア (Wikipedia): フリー百科事典] 全文検索（2023年5月24日取得，<a href="https://ja.wikipedia.org/w/index.php?title=%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2&amp;oldid=94342252%EF%BC%89">https://ja.wikipedia.org/w/index.php?title=全文検索&amp;oldid=94342252）</a></p></blockquote><p>OpenSearch では、引用元のページにも出てくる「転置インデックス」を使っています。<br>詳しく知りたい方は、以下を参照ください。<br><a href="https://catalog.us-east-1.prod.workshops.aws/workshops/26c005b2-b387-454a-b201-9b8f37f92f92/ja-JP/opensearch-concepts/basic-concepts/index">[Amazon OpenSearch Service Intro Workshop] 逐次検索と転置インデックス</a></p><p>とりあえず触りたい人向けに個人的にまとめると、全文検索というSQLのLike句よりめっちゃ速く文字列を検索できるというもの。その速さを活かして、例えば、アプリケーションが出す大量のログからエラーを検知させたり、ユーザーの動向を調べたり、といった分析とその結果のレポート出力などなど周りの機能も提供しているという印象。</p><p>補足<br>他にも有名な全文検索エンジンで「Elasticsearch」があります。<br>元々は、「Amazon Elasticsearch Service」として「オープンソースのElasticsearch」がAWS上でマネージドサービスとして提供されていましたが、バージョン7.10以降において別のライセンス体系となりAWS上でこれまで通り利用できなくなることから「オープンソースのElasticsearch」から派生し「OpenSearch」が作られました。この成り立ちにより「Elasticsearch」と「OpenSearch」は類似点が多くあります。実際にバージョン7.10までは互換性がありAWS側では当該バージョンまではサポートする旨が記載されています。しかし、それ以降のバージョンについては、互換性が保証されておらず、別のソフトウェアとして位置付けられているため、互換性や機能有無についてはご注意ください。<br>(上記にはライセンス変更や名称変更には背景があるのですが……何があったのか気になる方は、このあたりの記事から色々見てみてください……)</p><p><a href="https://www.elastic.co/jp/blog/elastic-and-amazon-reach-agreement-on-trademark-infringement-lawsuit">https://www.elastic.co/jp/blog/elastic-and-amazon-reach-agreement-on-trademark-infringement-lawsuit</a></p><h2 id="Amazon-OpenSearch-Serverless-概要"><a href="#Amazon-OpenSearch-Serverless-概要" class="headerlink" title="Amazon OpenSearch Serverless 概要"></a>Amazon OpenSearch Serverless 概要</h2><ul><li>Amazon OpenSearch Service のサーバーレス版</li><li>クライアントは Amazon OpenSearch Service と同様の方法で操作可能</li><li>OpenSearch のクラスタのスケーリングなどの管理が不要<br>データの投入や検索の負荷増大に合わせて勝手にスケールアウトしてくれるらしい</li><li>少しの手順、数分で構築が可能 (入門におすすめの理由)</li><li>Hot node、UltraWarm node とノードに種類があり、時系列コレクションの場合に直近24時間のデータはHot nodeにいれ、それ以降はUltraWarm nodeにいれることでノードの増大を防ぐ (Serverless版のいいところと思われ)</li></ul><img src="/images/20230525a/Black_Belt_Amazon_OpenSearch_Serverless_27スライド.png" alt="Black_Belt_Amazon_OpenSearch_Serverless_27スライド" width="1200" height="679" loading="lazy">[引用元 2023/01 [AWS Black Belt Online Seminar] Amazon OpenSearch Serverless 27スライド目](https://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2023_AmazonOpenSearchServerless_0131_v1.pdf)<h3 id="公式ページはこちら"><a href="#公式ページはこちら" class="headerlink" title="公式ページはこちら"></a>公式ページはこちら</h3><ul><li><a href="https://aws.amazon.com/jp/opensearch-service/features/serverless/">https://aws.amazon.com/jp/opensearch-service/features/serverless/</a></li></ul><p>公式ページでは、以下の情報がまとまっています</p><h4 id="リソース"><a href="#リソース" class="headerlink" title="リソース"></a>リソース</h4><ul><li>ポッドキャスト<ul><li>Amazon OpenSearch Serverless の紹介</li></ul></li><li>ワークショップ<ul><li>Amazon OpenSearch Serverless を実際に体験する</li></ul></li><li>ブログ<ul><li>Amazon OpenSearch Serverless の簡単な方法によるログ分析</li></ul></li><li>動画<ul><li>re:Invent 2022: Provision and scale OpenSearch resources with serverless</li><li>デモ: Searching with Amazon OpenSearch Serverless</li><li>デモ: Log analytics with Amazon OpenSearch Service</li></ul></li></ul><h2 id="お試し"><a href="#お試し" class="headerlink" title="お試し"></a>お試し</h2><ol><li><strong>Amazon OpenSearch Serverless の TOP</strong><ul><li>Amazon OpenSearch Service のトップにサーバーレスのメニューが追加されておりそこからサーバーレス版にアクセスができる<br>※画像のオレンジ枠が該当箇所<img src="/images/20230525a/サーバーレス版へのアクセス.png" alt="サーバーレス版へのアクセス" width="1200" height="599" loading="lazy"></li></ul></li><li><strong>インデックスを格納するのはコレクション</strong><ul><li>インデックスというのは、RDBで言うところのテーブルのようなもの。OpenSearch Service では、EC2インスタンスに対しインデックスを格納する</li><li>OpenSearch Serverlessでは、コレクションという単位で作成しコレクションに対しインデックスを作成する<img src="/images/20230525a/サーバーレスダッシュボード.png" alt="サーバーレスダッシュボード" width="1200" height="532" loading="lazy"></li></ul></li><li><strong>コレクションを作成してみる</strong><ul><li>コレクションの名前、説明、コレクションタイプの設定ができる。コレクションタイプは、時系列と検索の2種類から選べる。<br>名前と説明はいい感じのものを入れて、コレクションタイプは検索を選びましょう。<br>(時系列を選ぶと、前述の通り直近24時間分のデータしか検索対象とならない)<img src="/images/20230525a/Add_new_collection.png" alt="Add_new_collection" width="921" height="637" loading="lazy"></li><li>暗号化<br>初学者の方は、「AWS 所有キーを使用する」でAWSにおまかせしましょう。自前で用意したい方は、もう一つの方で。<img src="/images/20230525a/encryption.png" alt="encryption" width="905" height="410" loading="lazy"></li><li>ネットワークアクセス<br>今回はアクセスタイプにVPCは使わずにパブリックを利用します。 <del>VPCの説明までするとめんどくさいので</del> OpenSearch に絞って学べるようパブリックです。後ほどアクセスポリシー内でIAMユーザーでのアクセスとするので、誰でも触れる！というわけではないので安心してください。<br>※説明でAPIのエンドポイントとダッシュボードのエンドポイントで異なるネットワーク設定をできるような記述があるが、注釈の方で同じ設定にするよう記載がある<img src="/images/20230525a/network_access.png" alt="network_access" width="909" height="521" loading="lazy"></li><li>データのアクセスポリシー<br>データへのアクセス権のルールを作成できます。<br>わかりやすくビジュアルエディタで作成していきます。<img src="/images/20230525a/Configure_data_access_1.png" alt="Configure_data_access_1" width="945" height="367" loading="lazy"></li><li>テンプレートやインデックス、ドキュメントに対し権限を付与できます<br>「エイリアスとテンプレートの許可」「インデックスの許可」どちらもすべてチェックします。<img src="/images/20230525a/Configure_data_access_2.png" alt="Configure_data_access_2" width="937" height="669" loading="lazy"></li><li>プリンシパルにはIAMとSAMLを選択できる。<img src="/images/20230525a/Configure_data_access_2-1.png" alt="Configure_data_access_2-1" width="938" height="203" loading="lazy"></li><li>「IAM ユーザーとロール」を選択するとダイアログが開かれます<img src="/images/20230525a/image.png" alt="image.png" width="820" height="253" loading="lazy"></li><li>「ユーザー」を選択すると……<img src="/images/20230525a/image_2.png" alt="image.png" width="819" height="253" loading="lazy"></li><li>IAMユーザーの一覧が表示されるので、そこから選んでください<br><img src="/images/20230525a/image_3.png" alt="image.png" width="823" height="288" loading="lazy"><br><br>ビジュアルエディタの場合、最後にアクセス権のルールに名前をつける模様。あとから名前を変えたり、削除したりできるので「新しいデータアクセスポリシーとして作成する」を選択し、いい感じのアクセスポリシー名をつけてください。<img src="/images/20230525a/Configure_data_access_3.png" alt="Configure_data_access_3" width="940" height="651" loading="lazy">最後に確認画面が出るので、「送信」ボタンを押して続行！数分でステータスがアクティブになり、あちこちにダッシュボードへのリンクが表示されました。</li></ul></li><li><strong>作成したコレクションのOpenSearchダッシュボードにアクセスする</strong><ul><li>ダッシュボードにアクセス<br>オレンジ枠の各所をクリックしましたが、画面が表示されず……<br>青枠のURLをコピーして「https:&#x2F;&#x2F;xxxxxxxxxxxxxxxxxxxx.ap-northeast-1.aoss.amazonaws.com&#x2F;_dashboards」とURLの末尾に「&#x2F;_dashboards」をつけることでアクセスできました。<img src="/images/20230525a/image_4.png" alt="image.png" width="1200" height="486" loading="lazy">こんな感じでOpenSearchダッシュボードが表示されます。(以前はログイン画面が出ていたのですが、AWSにログインしていると自動でログインされました。便利)<img src="/images/20230525a/image_5.png" alt="image.png" width="1200" height="500" loading="lazy"><br></li></ul></li><li><strong>Dev Tools から OpenSearch API を実行する</strong><ul><li>DevToolsからAPI実行<br>先程のOpenSearchダッシュボードの画面にて、右上の「Dev tools」のリンクをクリックします。<br><img src="/images/20230525a/image_6.png" alt="image.png" width="1200" height="382" loading="lazy"><br><br>DevToolsの画面が開くので好きにAPIを実行しちゃってください。<br><img src="/images/20230525a/image_7.png" alt="image.png" width="1200" height="275" loading="lazy"><br></li><li>試しに<a href="https://docs.aws.amazon.com/ja_jp/opensearch-service/latest/developerguide/serverless-getting-started.html#serverless-gsg-index">デベロッパーガイドのチュートリアル</a>の「ステップ3: データをアップロードして検索する」にならってインデックスの作成を行う<br>以下を入力し、列の右側に再生ボタンのようなアイコンが出るのでクリック<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT movies-index/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Shawshank Redemption&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;genre&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Drama&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;year&quot;</span><span class="punctuation">:</span> <span class="number">1994</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>作成できた旨のメッセージが出ます。<img src="/images/20230525a/image_8.png" alt="image.png" width="1200" height="283" loading="lazy"></li><li><code>GET /movies-index/_doc/1</code> を入力、実行してデータが登録できることを確認<img src="/images/20230525a/image_9.png" alt="image.png" width="1200" height="309" loading="lazy">いい感じですね。</li></ul></li><li><strong>あとかたづけ</strong><ul><li>作ったコレクションの削除<br>削除は簡単で、AWS コンソールの画面に戻りトップにある削除ボタンから押し確認ダイアログで削除すれば完了！<br><font color="red">アカウントとパスワードで制御されておりアクセスできないとは言え、インターネット上に公開状態のままなのは良くないため、不要であれば必ず消しましょう。</font><img src="/images/20230525a/image_10.png" alt="image.png" width="1200" height="138" loading="lazy"></li></ul></li></ol><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>個人的に、ぱっとOpenSearchが使えるので入門で使うにはちょうどいいのでは？と思っており、まとめられて非常に満足です。</p><p>サービス自体としては、OpenSearchダッシュボードがそのまま使えたり、VPC経由ではService版と同様にコンソールアクセスが可能とのことで、移行はスムーズに行えそう。</p><p>中でも勝手にスケールアウトしてくれるのは場合により大変楽になるのではと期待しています。例えば、これまでEBSボリュームを度々拡張しなければいけないような運用をしていた場合にもろもろの作業が減るのは幸せですね(本番環境触るの怖い)</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/OpenSearch/">OpenSearch</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2/">全文検索</category>
      
      
      <comments>https://future-architect.github.io/articles/20230525a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>iOSアプリのCI入門</title>
      <link>https://future-architect.github.io/articles/20230524a/</link>
      <guid>https://future-architect.github.io/articles/20230524a/</guid>
      <pubDate>Tue, 23 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;はじめまして！2021年10月新卒入社、HealthCare Inovation</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>はじめまして！2021年10月新卒入社、HealthCare Inovation Group(HIG)所属の清水です。</p><p><a href="/articles/20230417a/">春の入門ブログ連載</a>の22日目は、入門ブログ連載のテーマとして、今までやってこなかったCIをやってみた記事です。</p><p>CIについてあまり知らない自分が、プロジェクトにCIを導入したいと思い、実際に調べてみた・試したことをまとめます。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li>CIとは</li><li>何はともあれ試してみる</li><li>iOSアプリでのCI</li></ul><h2 id="CIとは"><a href="#CIとは" class="headerlink" title="CIとは"></a>CIとは</h2><p>以下は、SaaS型のCI&#x2F;CDサービスを提供しているCircleCIさんのページからの引用です。</p><blockquote><p>継続的インテグレーション（CI）とは、Continuous Integrationの略であり、デプロイするコードの品質を確保しながら、開発スピードを向上させるDevOpsソフトウェア開発手法です。開発者は継続的にコードを少しずつ(少なくとも1日1回、可能なら1日に数回)コミットし、そのコードが共有リポジトリにマージされる前にビルドとテストが自動的に実行されます。</p></blockquote><p><a href="https://circleci.com/ja/continuous-integration/">https://circleci.com/ja/continuous-integration/</a></p><p>私が所属するプロジェクトでは、元々1~3人でアプリ開発を進めていました。</p><p>ただ最近は、機能が増えて、プロジェクトに参画する人が増えて、開発者も増えて、改修箇所も増えて、テストも増えて…という状況になっています。アプリの品質を確保しながら、チームでの開発をより安心して前に進めるために、CIを導入したいと思い試し始めました。</p><p>ちなみに…</p><p>セットになっていることが多いCDは、Continuous Delivery &amp; Deployment(継続的デリバリー及び継続的デプロイ)の略です。<br>Continuous Deliveryは、いつでもデプロイできる状態にすることを指し、デプロイ自体の操作は手動であり、Continuous Deploymentは、ビルド〜デプロイまでを自動で行うことを指すようです。</p><h2 id="何はともあれ試してみる"><a href="#何はともあれ試してみる" class="headerlink" title="何はともあれ試してみる"></a>何はともあれ試してみる</h2><p>ここでは実際にSwiftで実装したiOSアプリのリポジトリをCIツールによって自動でビルド＆テストするところまで試してみます。</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul><li>macOS: Ventura 13.4</li><li>Xcode: Version 14.3 (14E222b)</li><li>CIツール: GitLab CI&#x2F;CD</li></ul><p>普段、業務ではGitLabを利用してバージョン&amp;issueを管理しているため、GitLabのCI&#x2F;CDツールを利用します。<br>今回試していく内容の大きな手順は以下です。</p><ol><li>iOSアプリのリポジトリを用意</li><li>MacにGitLab Runnerをセットアップ</li><li>リポジトリにRunnerを登録</li><li>リポジトリにCI用のconfigファイルを追加</li></ol><p>やっていきます。</p><h3 id="iOSアプリのリポジトリを用意"><a href="#iOSアプリのリポジトリを用意" class="headerlink" title="iOSアプリのリポジトリを用意"></a>iOSアプリのリポジトリを用意</h3><p>検証用のリポジトリを用意します。今回は、GitLabのtemplateから作成したリポジトリを利用します。</p><p>食事の画像とレビューを記録するアプリのようです（初めて使いました）。</p><p>アプリのソースコードだけではなく、UnitテストとUIテストのコードも最初から用意されているようです。</p><img src="/images/20230524a/スクリーンショット_2023-05-23_14.26.39.png" alt="" width="1200" height="675" loading="lazy"><p>GitLab上から見るとこのような状態です。CI&#x2F;CDのセットアップは未完了です。</p><img src="/images/20230524a/スクリーンショット_2023-05-24_14.36.53.png" alt="" width="1200" height="611" loading="lazy"><h3 id="MacにGitLab-Runnerをセットアップ"><a href="#MacにGitLab-Runnerをセットアップ" class="headerlink" title="MacにGitLab Runnerをセットアップ"></a>MacにGitLab Runnerをセットアップ</h3><p>ここでは基本的に<a href="https://docs.gitlab.com/runner/install/osx.html">GitLab公式の記事</a>に従って手元のMacにビルド&amp;テストを実行するためのツールをセットアップします。<br>Homebrewを利用してインストールすることもできますが、GitLabがメンテナンスしていないようなので、Manual(curl)でインストールしました。</p><h3 id="リポジトリにRunnerを登録"><a href="#リポジトリにRunnerを登録" class="headerlink" title="リポジトリにRunnerを登録"></a>リポジトリにRunnerを登録</h3><p>次に、GitLabのリポジトリにセットアップしたRunnerを登録します。</p><p><a href="https://www.gitlab.jp/blog/2022/09/26/runner-summary/">GitLabの日本語ブログ</a>を参考に進めました。</p><p>GitLabのリポジトリ &gt; CI&#x2F;CD Settings &gt; Runners から登録するためのURL①とトークン②を確認することができます。</p><img src="/images/20230524a/スクリーンショット_2023-05-24_15.00.07.png" alt="" width="1200" height="656" loading="lazy"><p>ターミナルを立ち上げて、以下のように進めていきます。（一部省略・隠蔽しています。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gitlab-runner register</span><br><span class="line">Runtime platform                                    arch=amd64 os=darwin pid=12166 revision=dcfb4b66 version=15.10.1</span><br><span class="line"></span><br><span class="line">Enter the GitLab instance URL (for example, https://gitlab.com/):</span><br><span class="line">// ①をコピペします。</span><br><span class="line">Enter the registration token:</span><br><span class="line">// ②をコピペします。</span><br><span class="line">Enter a description for the runner:</span><br><span class="line">[XXXXX.local]: ForBlogMyMac // ③Runnerの説明を加えます。</span><br><span class="line">Enter tags for the runner (comma-separated):</span><br><span class="line">blog, // ④タグの設定。技術ブログ用なので、&quot;blog&quot;タグを設定します。</span><br><span class="line">Enter optional maintenance note for the runner:</span><br><span class="line">// 説明とは異なるメモ。今回は空にしている。</span><br><span class="line">Registering runner... succeeded                     runner=XXXXXX</span><br><span class="line">Enter an executor: virtualbox, docker-ssh+machine, kubernetes, docker-ssh, parallels, shell, ssh, custom, docker, docker+machine, instance:</span><br><span class="line">shell  // 実行環境。&quot;xcodebuild&quot;を利用するため、shellを選択しています。</span><br><span class="line">Runner registered successfully. Feel free to start it, but if it&#x27;s running already the config should be automatically reloaded!</span><br><span class="line"></span><br><span class="line">Configuration (with the authentication token) was saved in &quot;/Users/XXXXX/.gitlab-runner/config.toml&quot;</span><br></pre></td></tr></table></figure><p>GitLab側からRunnerが登録されていることを確認できます。</p><img src="/images/20230524a/スクリーンショット_2023-05-24_15.00.54.png" alt="" width="1200" height="694" loading="lazy"><h3 id="リポジトリにCI用のconfigファイルを追加"><a href="#リポジトリにCI用のconfigファイルを追加" class="headerlink" title="リポジトリにCI用のconfigファイルを追加"></a>リポジトリにCI用のconfigファイルを追加</h3><p>いよいよリポジトリにCI用のファイルを追加します。</p><p>GitLabでは、<code>.gitlab-ci.yml</code>というYAMLファイルでCI&#x2F;CDパイプラインの構成や順序を定義してきます。</p><p><a href="https://gitlab-docs.creationline.com/ee/ci/yaml/">https://gitlab-docs.creationline.com/ee/ci/yaml/</a></p><p>Webから追加できます。</p><img src="/images/20230524a/スクリーンショット_2023-05-24_15.22.34.png" alt="" width="983" height="723" loading="lazy"><p>GitLabにtemplateが用意されているため、そちらを使います。</p><p><a href="https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/Swift.gitlab-ci.yml">https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/Swift.gitlab-ci.yml</a></p><p>上述のtemplateでは、アプリのビルド＆テスト→アーカイブの作成→デプロイまで実行しようとしています。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">archive</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build_project:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xcodebuild</span> <span class="string">clean</span> <span class="string">-project</span> <span class="string">ProjectName.xcodeproj</span> <span class="string">-scheme</span> <span class="string">SchemeName</span> <span class="string">|</span> <span class="string">xcpretty</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xcodebuild</span> <span class="string">test</span> <span class="string">-project</span> <span class="string">ProjectName.xcodeproj</span> <span class="string">-scheme</span> <span class="string">SchemeName</span> <span class="string">-destination</span> <span class="string">&#x27;platform=iOS Simulator,name=iPhone 8,OS=11.3&#x27;</span> <span class="string">|</span> <span class="string">xcpretty</span> <span class="string">-s</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ios_11-3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xcode_9-3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">macos_10-13</span></span><br><span class="line"></span><br><span class="line"><span class="attr">archive_project:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">archive</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xcodebuild</span> <span class="string">clean</span> <span class="string">archive</span> <span class="string">-archivePath</span> <span class="string">build/ProjectName</span> <span class="string">-scheme</span> <span class="string">SchemeName</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xcodebuild</span> <span class="string">-exportArchive</span> <span class="string">-exportFormat</span> <span class="string">ipa</span> <span class="string">-archivePath</span> <span class="string">&quot;build/ProjectName.xcarchive&quot;</span> <span class="string">-exportPath</span> <span class="string">&quot;build/ProjectName.ipa&quot;</span> <span class="string">-exportProvisioningProfile</span> <span class="string">&quot;ProvisioningProfileName&quot;</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_BRANCH</span> <span class="string">==</span> <span class="string">$CI_DEFAULT_BRANCH</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">build/ProjectName.ipa</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ios_11-3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xcode_9-3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">macos_10-13</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">echo</span> <span class="string">&quot;Define your deployment script!&quot;</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">production</span></span><br></pre></td></tr></table></figure><p>今回は、最低限のビルド＆テストのみ実行したいので、以下のように記述しました。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build_project:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xcodebuild</span> <span class="string">clean</span> <span class="string">-project</span> <span class="string">iOSTemplate.xcodeproj</span> <span class="string">-scheme</span> <span class="string">iOSTemplate</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xcodebuild</span> <span class="string">test</span> <span class="string">-project</span> <span class="string">iOSTemplate.xcodeproj</span> <span class="string">-scheme</span> <span class="string">iOSTemplate</span> <span class="string">-destination</span> <span class="string">&#x27;platform=iOS Simulator,name=iPhone 14 Pro,OS=16.4&#x27;</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">blog</span></span><br></pre></td></tr></table></figure><p>templateから大きく違う点は、以下4点です。</p><ul><li>アーカイブとデプロイを削除</li><li><code>xcpretty</code>コマンドを削除（※<a href="https://github.com/xcpretty/xcpretty">xcpretty</a>はログを見やすくするライブラリらしいです。）</li><li>テストを実行するシミュレータを最新のもの（”iPhone 14 Pro,OS&#x3D;16.4”）に変更</li><li>tagを登録した<code>blog</code>に設定<ul><li>事前に登録したtagに含まれるものでないと実行されないため注意</li></ul></li></ul><p><code>.gitlab-ci.yml</code>を追加完了すると、処理が実行開始します。（手元のMacBookのファンが元気になり、物理的にも実行しているのが感じられました。）</p><img src="/images/20230524a/スクリーンショット_2023-05-24_15.37.44.png" alt="" width="1200" height="158" loading="lazy"><p>最小限の構成で、2分ちょっとで完了しました。</p><img src="/images/20230524a/スクリーンショット_2023-05-24_15.45.16.png" alt="" width="1200" height="161" loading="lazy"><h4 id="ちなみに"><a href="#ちなみに" class="headerlink" title="ちなみに"></a>ちなみに</h4><p>誤ったテストを追加して<code>master</code>にpushしたところ、ちゃんと失敗になってくれました。</p><img src="/images/20230524a/スクリーンショット_2023-05-24_16.02.22.png" alt="" width="1005" height="270" loading="lazy"><img src="/images/20230524a/スクリーンショット_2023-05-24_16.01.03.png" alt="" width="1200" height="214" loading="lazy"><h2 id="iOSアプリでのCI-x2F-CD"><a href="#iOSアプリでのCI-x2F-CD" class="headerlink" title="iOSアプリでのCI&#x2F;CD"></a>iOSアプリでのCI&#x2F;CD</h2><p>本記事では、個人のリポジトリに対して、個人PCをRunnerとして登録してCIを実行しました。</p><p>しかし、本記事で設定したリポジトリでチーム開発を進めた場合、リポジトリに変更があるたび登録したPCがCIを実行し続けます。その際にはCI用の実行環境を、自前で用意する（オンプレミス）か、サービスとして提供されているものを利用する必要があります。</p><p>ただし、Swiftで実装したiOSアプリをビルドするためには、Xcodeが必要であり、そのためにはmacOSの実行環境が必要となります。</p><p>今回は、ツールの選定と検証まで辿り着かなかったですが、今後、業務にCIを導入した際は、CI&#x2F;CDツール選定とその経緯を記事にしたいと思っています。</p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>本記事では、CIについて知らない状態からCI実行までを入門してみました。</p><p>今後は、他のツールについての調査と検証を行って業務に導入し、アプリの品質向上に活用していきたいです。</p><p>次は齊藤さんの<a href="/articles/20230525a/">Amazon OpenSearch Serverless を触ってみた</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/CI-CD/">CI/CD</category>
      
      <category domain="https://future-architect.github.io/tags/GitLab/">GitLab</category>
      
      <category domain="https://future-architect.github.io/tags/Swift/">Swift</category>
      
      <category domain="https://future-architect.github.io/tags/CI/">CI</category>
      
      <category domain="https://future-architect.github.io/tags/GitLab-CI/">GitLab-CI</category>
      
      
      <comments>https://future-architect.github.io/articles/20230524a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Technology Radar の機械学習関連技術を見てみる</title>
      <link>https://future-architect.github.io/articles/20230523a/</link>
      <guid>https://future-architect.github.io/articles/20230523a/</guid>
      <pubDate>Mon, 22 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;SAIGの小橋です。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>SAIGの小橋です。</p><p><a href="/articles/20230417a/">春の入門ブログ連載</a>の21日目です。</p><p>IT業界に身を置いていると、今の技術トレンドが気になるときがありますよね。業界の潮流を把握する方法の1つとしてTechnology Radarという文書があるので、今回紹介します。</p><h2 id="Technology-Radar-とは何か"><a href="#Technology-Radar-とは何か" class="headerlink" title="Technology Radar とは何か"></a>Technology Radar とは何か</h2><p>公式の説明では「ソフトウェア開発において現在興味深いと考える変化についてまとめた文書」と書かれています。大雑把に言えば技術トレンドのまとめ文章と思って良いでしょう。このTechnology Radarをまとめているのは20人ほどのチームで、多くの技術書を書いているマーティン・ファウラーもその一員です。</p><p>発表のペースについては、年2回メンバーが一堂に会してミーティングをしてRadarを作成するとしています。ここ数年は、毎年春と秋に発表されています。最新のTechnology Radarは2023年4月に発表された volume 28です。</p><p>Technology Radarではその名の通り、レーダー状の円の中に個々の注目する技術を表記しています。</p><img src="/images/20230523a/image.png" alt="" width="681" height="674" loading="lazy"><p><a href="https://www.thoughtworks.com/content/dam/thoughtworks/documents/radar/2023/04/tr_technology_radar_vol_28_en.pdf">https://www.thoughtworks.com/content/dam/thoughtworks/documents/radar/2023/04/tr_technology_radar_vol_28_en.pdf</a> より引用</p><h2 id="分野と層"><a href="#分野と層" class="headerlink" title="分野と層"></a>分野と層</h2><p>各項目はレーダー中の位置によって、Techniques, Tools, Platforms, Languages &amp; Frameworksという4つの分野に分かれています。</p><p>また、レーダーの中心から、Adopt、Trial、Assess、Holdの4つの層に分かれています。</p><p>Adoptが一番推奨度合いが高く「採用を真剣に検討すべき技術」という位置づけです。そこから外側に行くほど推奨度合いが低くなり、Assessは「注目すべき技術だが、特に自分に合うと思わない場合は試してみなくて良いだろう」という評価です（一番外側のHoldに分類されるものはほとんどありません）。ある項目が次回以降のvolumeで評価が変わることもあります。例えば<a href="https://www.thoughtworks.com/radar/languages-and-frameworks/vue-js">Vue.jsの履歴</a>を見ると、2016年に最初にAssessとして扱われ、2017年にはTrial、2020年にはAdoptに格上げされています。</p><p>注意すべきは、あるvolumeで取り上げられた技術でも、次のvolumeで特に動きが無ければRadarには載っていないという点です。そのため、最新版に限らず直近でいくつかのvolumeを見ると良いかもしれません。</p><p>今回は最新のvolume 28を見てみましょう。最新の全部で107項目もあり、全てを解説するのは困難なので、私の普段の業務分野に近い 機械学習&#x2F;AI関連のところを適宜リストアップしています。</p><h2 id="28-Ax"><a href="#28-Ax" class="headerlink" title="28. Ax"></a>28. Ax</h2><p><a href="https://ax.dev/">https://ax.dev/</a></p><p>機械学習実験、A&#x2F;Bテスト、シミュレーションなど、多くの実験を最適化するためのプラットフォームです。離散的な目的変数については多腕バンディットを用いて、連続的な目的変数についてはベイズ最適化を用いて最適化を実施できるようです。</p><h2 id="30-Feature-Store"><a href="#30-Feature-Store" class="headerlink" title="30. Feature Store"></a>30. Feature Store</h2><p><a href="https://www.featurestore.org/">https://www.featurestore.org/</a></p><p>Technology Radarの解説には「Feature Storeとは、与えられたドメインやビジネス問題に関連する特徴量の識別、発見、監視を容易にするためのアーキテクチャの概念です。」と書いてありますが、個々の具体的なツールではなく抽象的な概念のようで、何のことやら……。<a href="https://www.featurestore.org/what-is-a-feature-store">featurestore.orgの解説</a>を読むと、生データからの特徴量抽出・モデルの訓練・モデルのデプロイと本番での推論と、モデルのライフサイクルによってチームが分かれるときも、データエンジニア・データサイエンティスト・機械学習エンジニアの全員が参照できるようなプラットフォームを作るのがFeature Storeのようです。</p><p>Feature Storeの具体例としてはAmazon SageMaker Feature Store, Vertex AI Feature Storeなどがあります。Vertex AIについては<a href="https://future-architect.github.io/tags/VertexAI/">技術ブログ内の他の記事</a>もご覧ください。</p><h2 id="39-Modal"><a href="#39-Modal" class="headerlink" title="39. Modal"></a>39. Modal</h2><p><a href="https://modal.com/">https://modal.com/</a></p><p>GPUリソースの計算環境を提供するサービスで、機械学習モデルや並列計算ジョブやWebアプリケーションをデプロイできるようです。アプリケーション例を見てみると、Stable Diffusionによる画像生成、LLMとLangChainを用いた質疑応答システムなど、かなり新しい例が多く面白そうですね。volume 27に載っているGradient (paperspace) に近いものだと思われます。</p><h2 id="54-Kubeflow"><a href="#54-Kubeflow" class="headerlink" title="54. Kubeflow"></a>54. Kubeflow</h2><p><a href="https://www.kubeflow.org/">https://www.kubeflow.org/</a></p><p>KubeflowはKubernates上の機械学習プラットフォームで、モデルのビルド・訓練・デプロイまでを実行できます。機械学習パイプラインに加えて、パラメータチューニングを行うKubeflow Katibなどのコンポーネントがあるようです。</p><h2 id="70-Evidently"><a href="#70-Evidently" class="headerlink" title="70. Evidently"></a>70. Evidently</h2><p><a href="https://www.evidentlyai.com/">https://www.evidentlyai.com/</a></p><p>機械学習モデルの性能の評価・テスト・監視に使えるPythonライブラリです。本番環境用のダッシュボード画面があります。モデルのドリフトを検出することに重点を置き、データドリフト（入力データの傾向が時間とともに変わること）、コンセプトドリフト（説明変数と目的変数の関係が時間とともに変わること）の検出に役立つとしています。</p><p><a href="https://future-architect.github.io/tags/Evidently-AI/">技術ブログ内でも最近取り扱っています</a>のでご覧ください。本番環境投入後のドリフトや性能劣化の検出するためのツールは多く開発されており、同じvolume 28でDeepchecks、Giskardという他のツールも紹介されています。</p><h2 id="81-PyTorch"><a href="#81-PyTorch" class="headerlink" title="81. PyTorch"></a>81. PyTorch</h2><p><a href="https://pytorch.org/">https://pytorch.org/</a></p><p>なぜ今更このタイミングでPyTorch……？と思って<a href="https://www.thoughtworks.com/radar/languages-and-frameworks/pytorch">履歴を見てみる</a>と、2020年にはTrialとして紹介されていましたが、3年後の今回Adoptに昇格しています。</p><p>他のフレームワークと比べたとき、以下を主な利点として挙げています。</p><ul><li>TensorFlowでは機械学習の内部動作が見えないのに対してPytorchは内部動作を把握できるため、デバッグが容易であること</li><li>動的な計算グラフを用いているためモデル最適化がしやすいこと</li><li>State-of-the-Art (SOTA) を達成しているモデルが多く利用できること</li></ul><h2 id="88-River"><a href="#88-River" class="headerlink" title="88. River"></a>88. River</h2><p><a href="https://riverml.xyz/dev/">https://riverml.xyz/dev/</a></p><p>オンライン学習（1つずつ順番に入力データが与えられ、それに対して機械学習モデルを順次更新していく方法）に対応したPythonライブラリです。</p><h2 id="103-pandera"><a href="#103-pandera" class="headerlink" title="103. pandera"></a>103. pandera</h2><p><a href="https://github.com/unionai-oss/pandera">https://github.com/unionai-oss/pandera</a></p><p>データのバリデーションツールです。1つ前のvolume 27では同様のツールとしてGreat Expectationsが紹介されました。（Great Expectationsについては、フューチャー技術ブログの<a href="/20230412a/#Great-Expectations">MLシステムにおけるモデル・データの監視【概要編】</a>でも触れています。また、もうすぐGreat Expectationsについての記事が出るので併せてご参照ください。）</p><p>panderaも入力データに対してバリデーションを行うPythonライブラリです。Radarの説明や<a href="https://endjin.com/blog/2023/03/a-look-into-pandera-and-great-expectations-for-data-validation">両者の比較記事</a>などを読むと、機能が多く本番環境まで考慮に入れるならばGreat Expectations、比較的シンプルですぐに使いやすいのがpandera、という違いがあるようです。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>くぅ～疲れました。普段馴染みのないツールについて調べるのは面白いですが、説明を書くのが難しいですね。</p><p>このvolume 28には、有名どころですとChatGPTやGitHub Copilot、Prompt engineeringについても取り上げられていますので、読んでみることをお勧めします。機械学習関係だとLLM（大規模言語モデル）関連の項目もいくつかありましたが、今回は割愛します。皆さんの気になる技術領域で最近何が熱いトピックなのか、Technology Radarで探してみてはいかがでしょうか。</p><p>次は清水さんの<a href="/articles/20230524a/">iOSアプリのCI入門</a> です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/">機械学習</category>
      
      <category domain="https://future-architect.github.io/tags/MLOps/">MLOps</category>
      
      <category domain="https://future-architect.github.io/tags/AI/">AI</category>
      
      <category domain="https://future-architect.github.io/tags/TechnologyRadar/">TechnologyRadar</category>
      
      
      <comments>https://future-architect.github.io/articles/20230523a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Stanによるベイズ推定に入門して株価の推移を予測してみる</title>
      <link>https://future-architect.github.io/articles/20230522a/</link>
      <guid>https://future-architect.github.io/articles/20230522a/</guid>
      <pubDate>Sun, 21 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、はじめまして、流通グループの市川です。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、はじめまして、流通グループの市川です。</p><p><a href="/articles/20230417a">春の入門連載</a>20日目となる、今回のテーマはベイズ推定です。選定の理由はこうです。</p><p>業務で直接利用しているわけではないのですが、データ分析にはもともと興味があり、普段から社内の数人の有志メンバーを集めてチームを組んでデータ分析コンペなどにちまちまと参加していました。</p><p>しかし、ベイズ推定というものは名前くらいは聞いたことがあるものの今まで触れてきていませんでした。今回、せっかくの春の入門連載という機会に <strong>Stanによるベイズ推定</strong> に初挑戦します。</p><p>また、分析対象も、個人的に興味のあった株価推移の予測にしてみることにしました。</p><p>この記事では、簡易的なベイズモデルを構築して、株価推移というある種の予測問題を解くまでの流れをベイズ初心者目線でご紹介します。</p><p>なお、当然ですが投資取引への勧誘等を目的にしたものではなく、本情報を利用した際の取引等は全て自己の責任において行ってください。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ol><li>ベイズ推定とは</li><li>Stanとは</li><li>Stanのインストール</li><li>株価データの取得と前処理</li><li>ベイズモデルの構築とStanでの実装</li><li>株価予測の実施と評価</li><li>最後に</li><li>参考文献</li><li>補足</li></ol><h2 id="ベイズ推定とは"><a href="#ベイズ推定とは" class="headerlink" title="ベイズ推定とは"></a>ベイズ推定とは</h2><p>ベイズ推定とは、ベイズの定理を使った統計的推定の一種です。特徴として、「不確実性を定量化するときに、<strong>確率を明示的に使う</strong>こと」があります。</p><p>こう聞くとあまりピンとこないかもしれませんが、例を出すと、明日の株価は上がるのか下がるのかよくわからない、というときでも「よくわからない」としてしまうのではなく「明日の株価が上がる確率は40%くらいかな」と確率を使って評価を試みます。</p><p>詳細は補足にまとめているので興味のある方はみてみてください。</p><h2 id="Stanとは"><a href="#Stanとは" class="headerlink" title="Stanとは"></a>Stanとは</h2><p>Stanが何か簡単に紹介します。StanはC++で書かれた統計的推論のための確率的プログラミング言語で、ベイズ推定を高速で処理することができるのが特徴です。</p><p>ベイズ推定を行う際に、厳密に推定するためには非常に複雑な計算を行わなければならないケースが頻繁に発生します。しかし、Stanを利用することで、複雑な計算を回避して近似的に推定を行うMCMCと呼ばれる手法を簡単に実装することができます</p><p>Stanは、RやPythonといったデータ分析言語から利用することができます。</p><p>今回はPythonからStanを用いるためのパッケージPyStanを使っていきます。</p><h2 id="Stanのインストール"><a href="#Stanのインストール" class="headerlink" title="Stanのインストール"></a>Stanのインストール</h2><p>PyStanのインストール方法の詳細はこちらを参照してください。</p><p><a href="https://pystan.readthedocs.io/en/latest/">https://pystan.readthedocs.io/en/latest/</a></p><p>pipでインストール可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pystan</span><br></pre></td></tr></table></figure><p>PythonとPyStanの関係ですが、今回はデータの読み込みや可視化といった基本的なデータ処理をPythonで行い、StanはMCMCの実行のみで利用します。</p><h2 id="株価データの取得と前処理"><a href="#株価データの取得と前処理" class="headerlink" title="株価データの取得と前処理"></a>株価データの取得と前処理</h2><p>今回はYahoo Financeから過去5年分の日経平均株価のデータを取得して学習と予測に利用します。</p><p>まず、必要なパッケージとデータを読み込みます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yfinance <span class="keyword">as</span> yf</span><br><span class="line"><span class="keyword">import</span> stan</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日経平均のティッカーシンボル"^N225"</span></span><br><span class="line">ticker_symbol = <span class="string">"^N225"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yfinanceのdownloadメソッドで過去5年分の日次データを取得</span></span><br><span class="line">df = yf.download(ticker_symbol, period=<span class="string">"5y"</span>)</span><br></pre></td></tr></table></figure><p>データの中身を確認してみます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.describe())</span><br><span class="line"><span class="built_in">print</span>(df.shape)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">               Open          High           Low         Close     Adj Close        Volume</span><br><span class="line">count   1219.000000   1219.000000   1219.000000   1219.000000   1219.000000  1.219000e+03</span><br><span class="line">mean   24987.351836  25114.861626  24846.183244  24986.802835  24986.802835  7.191682e+07</span><br><span class="line">std     3220.081547   3227.214291   3215.333714   3219.545197   3219.545197  2.091914e+07</span><br><span class="line">min    16570.570312  17049.029297  16358.190430  16552.830078  16552.830078  0.000000e+00</span><br><span class="line">25%    22186.509766  22307.625000  22065.250000  22201.190430  22201.190430  5.940000e+07</span><br><span class="line">50%    25405.640625  25555.369141  25215.310547  25349.599609  25349.599609  6.930000e+07</span><br><span class="line">75%    27886.849609  28036.350586  27706.930664  27893.959961  27893.959961  8.050000e+07</span><br><span class="line">max    30847.359375  30924.570312  30679.160156  30808.349609  30808.349609  2.334000e+08</span><br><span class="line">(1219, 6)</span><br></pre></td></tr></table></figure><p>データには、以下の株価情報が日別で1219日分含まれているようです。</p><ul><li>Date : 日付(インデックス)</li><li>Open : 始値</li><li>High : 高値</li><li>Low : 安値</li><li>Close : 終値</li><li>Adj Close : 調整後終値</li><li>Volume : 出来高</li></ul><p>このうち、終値のデータを予測対象の株価情報として利用します。</p><p>続いてデータの前処理として、カラムを追加していきます。</p><p>今回は株価のテクニカル分析のようなイメージで予測を行ってみたいので、2種類の移動平均を計算して追加することとします。</p><ul><li>ma_5 : 5日移動平均</li><li>ma_25 : 25日移動平均</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5日、25日移動平均を計算</span></span><br><span class="line">df[<span class="string">'ma_5'</span>] = df[<span class="string">'Close'</span>].rolling(window=<span class="number">5</span>).mean()</span><br><span class="line">df[<span class="string">'ma_25'</span>] = df[<span class="string">'Close'</span>].rolling(window=<span class="number">25</span>).mean()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 25日移動平均が計算できない最初の25日間を除外</span></span><br><span class="line">df = df.iloc[<span class="number">25</span>:]</span><br></pre></td></tr></table></figure><p>ついでに、移動平均が計算できない最初の25日間を除外します。</p><p>さて、ここまででデータの前処理は完了です。</p><p>一度データを可視化しておきます。</p><p>予測のためにはモデル設計を行うことが必要ですが、その際に実際のデータの分布を理解しておくことが望ましいです。</p><p>今回、特に複雑なモデルは設定しませんが、流れとしてデータの可視化は習慣づけておくとよいのかなと思います。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># データの可視化</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">plt.plot(df.index, df[<span class="string">"Close"</span>], label=<span class="string">"Close"</span>)</span><br><span class="line">plt.plot(df.index, df[<span class="string">"ma_5"</span>], label=<span class="string">"ma_5"</span>)</span><br><span class="line">plt.plot(df.index, df[<span class="string">"ma_25"</span>], label=<span class="string">"ma_25"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Date"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Close Price"</span>)</span><br><span class="line">plt.title(<span class="string">"Nikkei 225 Close Price Over Time"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/images/20230522a/image.png" alt="" width="868" height="547" loading="lazy"><h3 id="ベイズモデルの構築とStanでの実装"><a href="#ベイズモデルの構築とStanでの実装" class="headerlink" title="ベイズモデルの構築とStanでの実装"></a>ベイズモデルの構築とStanでの実装</h3><p>では、ここからモデル構築とStanでの実装に入っていきます。予測までの流れは以下のとおりです。</p><ol><li>モデルの設計</li><li>Stanファイルの実装</li><li>MCMC実行</li><li>事後分布の可視化</li><li>予測の検証</li></ol><p>このパートでは、<strong>Stanファイルの実装</strong>までを行います。</p><h4 id="モデルの設計"><a href="#モデルの設計" class="headerlink" title="モデルの設計"></a>モデルの設計</h4><p>まず、ベイズモデルを設計します。</p><p>今回は複雑なモデルは使わず、前日の終値、移動平均から当日の終値を予測するため、シンプルな線形回帰モデルを使用します。</p><p>以下にモデルの構造を示します。</p><p>前日の株価、移動平均にそれぞれ係数をかけて調整した上で、前日の株価や移動平均すべて0だった場合の当日の株価を表す切片を加算することで、当日の株価を予測します。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="57.647ex" height="2.09ex" role="img" focusable="false" viewBox="0 -716 25480 924"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1058,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1543,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="msub" transform="translate(2012,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3263,0)"><path data-c="223C" d="M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"></path></g><g data-mml-node="mi" transform="translate(4318.8,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(5181,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(6181.3,0)"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mn" transform="translate(599,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(7406,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(7906.3,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(8666.3,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(8964.3,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(9449.3,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="msub" transform="translate(9918.3,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(12017.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(13017.7,0)"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mn" transform="translate(599,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(14242.4,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(14742.7,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(15793.7,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="msub" transform="translate(16543.7,0)"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(18676.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(19677,0)"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mn" transform="translate(599,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(20901.8,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="msub" transform="translate(21402,0)"><g data-mml-node="mtext"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"></path><path data-c="41" d="M255 0Q240 3 140 3Q48 3 39 0H32V46H47Q119 49 139 88Q140 91 192 245T295 553T348 708Q351 716 366 716H376Q396 715 400 709Q402 707 508 390L617 67Q624 54 636 51T687 46H717V0H708Q699 3 581 3Q458 3 437 0H427V46H440Q510 46 510 64Q510 66 486 138L462 209H229L209 150Q189 91 189 85Q189 72 209 59T259 46H264V0H255ZM447 255L345 557L244 256Q244 255 345 255H447Z" transform="translate(917,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1667,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(2167,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(2700,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></p><h4 id="Stanファイルの実装"><a href="#Stanファイルの実装" class="headerlink" title="Stanファイルの実装"></a>Stanファイルの実装</h4><p>では、Stanファイルを実装していきます。</p><p>stanコードは、基本的に<strong>dataブロック</strong>、<strong>parametersブロック</strong>、<strong>modelブロック</strong>の3つのブロックが必要です。</p><ul><li><strong>dataブロック</strong>: 使用するデータやサンプルサイズなどの情報を指定します</li><li><strong>parametersブロック</strong>: 後分布を得たいパラメータの一覧を定義します</li><li><strong>modelブロック</strong>:事前分布や尤度を指定します。事前分布を指定しない場合、 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.051ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4000.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(389,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1167,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g><g data-mml-node="mo" transform="translate(2167,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2611.7,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g><g data-mml-node="mo" transform="translate(3611.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> の一様分布が標準の無情報事前分布として用いられます</li></ul><p>今回はさらに、テストデータに基づいて予測値を生成するための<strong>generated quantitiesブロック</strong>を追加しています。</p><h4 id="dataブロック"><a href="#dataブロック" class="headerlink" title="dataブロック"></a>dataブロック</h4><p>まずは、dataブロックから見ていきます。</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">data</span> {</span><br><span class="line">    <span class="type">int</span>&lt;<span class="keyword">lower</span>=<span class="number">0</span>&gt; N;         <span class="comment">// 訓練データのサンプルサイズ</span></span><br><span class="line">    <span class="type">vector</span>[N] Close;        <span class="comment">// 訓練データの終値</span></span><br><span class="line">    <span class="type">vector</span>[N] MA5;          <span class="comment">// 訓練データの5日移動平均</span></span><br><span class="line">    <span class="type">vector</span>[N] MA25;         <span class="comment">// 訓練データの25日移動平均</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>&lt;<span class="keyword">lower</span>=<span class="number">0</span>&gt; N_test;        <span class="comment">// テストデータのサンプルサイズ</span></span><br><span class="line">    <span class="type">vector</span>[N_test] Close_test;  <span class="comment">// テストデータの終値</span></span><br><span class="line">    <span class="type">vector</span>[N_test] MA5_test;    <span class="comment">// テストデータの5日移動平均</span></span><br><span class="line">    <span class="type">vector</span>[N_test] MA25_test;   <span class="comment">// テストデータの25日移動平均</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>dataブロックにはサンプルサイズとデータを指定しています。</p><p>また、訓練用、テスト用に別々のデータを指定していますが、この後データを定義する際に分割して渡してあげます。</p><h4 id="parametersブロック"><a href="#parametersブロック" class="headerlink" title="parametersブロック"></a>parametersブロック</h4><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">parameters</span> {</span><br><span class="line">    <span class="type">real</span> alpha;             <span class="comment">// 切片</span></span><br><span class="line">    <span class="type">real</span> beta1;             <span class="comment">// 前日終値の係数</span></span><br><span class="line">    <span class="type">real</span> beta2;             <span class="comment">// 5日移動平均の係数</span></span><br><span class="line">    <span class="type">real</span> beta3;             <span class="comment">// 25日移動平均の係数</span></span><br><span class="line">    <span class="type">real</span>&lt;<span class="keyword">lower</span>=<span class="number">0</span>&gt; sigma;    <span class="comment">// 標準偏差</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>parametersブロックでは、推定すべきパラメータを指定します。今回は線形回帰モデルを想定するため、切片alphaと各項目の係数beta1~3、データのばらつきとして標準偏差sigmaを定義しています。</p><h4 id="modelブロック"><a href="#modelブロック" class="headerlink" title="modelブロック"></a>modelブロック</h4><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">model</span> {</span><br><span class="line">    <span class="keyword">for</span> (n <span class="keyword">in</span> <span class="number">2</span>:N) {</span><br><span class="line">        Close[n] ~ <span class="built_in">normal</span>(alpha + beta1*Close[n-<span class="number">1</span>] + beta2*MA5[n-<span class="number">1</span>] + beta3*MA25[n-<span class="number">1</span>], sigma);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>modelブロックでは、観測された終値（Close[n]）が、前日の終値（Close[n-1]）、5日移動平均（MA5[n-1]）、25日移動平均（MA25[n-1]）とそれらの対応する係数（beta1、beta2、beta3）、そして切片（alpha）によって定義される正規分布からサンプリングされたと仮定しています。</p><h5 id="generated-quantitiesブロック"><a href="#generated-quantitiesブロック" class="headerlink" title="generated quantitiesブロック"></a>generated quantitiesブロック</h5><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">generated</span> <span class="title">quantities</span> {</span><br><span class="line">    <span class="type">vector</span>[N_test] Close_prediction;</span><br><span class="line">    <span class="keyword">for</span> (n <span class="keyword">in</span> <span class="number">2</span>:N_test) {</span><br><span class="line">        Close_prediction[n] = normal_rng(alpha + beta1*Close_test[n-<span class="number">1</span>] + beta2*MA5_test[n-<span class="number">1</span>] + beta3*MA25_test[n-<span class="number">1</span>], sigma);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>generated quantitiesブロックは、終値の予測値（Close_prediction）を生成するパートです。</p><p>テストデータの各要素（前日の終値、5日移動平均、25日移動平均）に対応するパラメータ（alpha、beta1、beta2、beta3）を用いて予測値を算出し、その予測値が正規分布に従うと仮定してサンプリングを行います。</p><hr><p>続いて、stanに渡すデータを定義します。</p><p>ここで、訓練データとテストデータを分割して辞書にデータを格納しています。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 訓練データとテストデータに分割（訓練データ:テストデータ = 8:2）</span></span><br><span class="line">train, test = train_test_split(df, test_size=<span class="number">0.2</span>, shuffle=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># データを辞書に格納</span></span><br><span class="line">data_dict = {</span><br><span class="line">    <span class="string">'N'</span>: <span class="built_in">len</span>(train),</span><br><span class="line">    <span class="string">'Close'</span>: train[<span class="string">'Close'</span>].values,</span><br><span class="line">    <span class="string">'MA5'</span>: train[<span class="string">'ma_5'</span>].values,</span><br><span class="line">    <span class="string">'MA25'</span>: train[<span class="string">'ma_25'</span>].values,</span><br><span class="line">    <span class="string">'N_test'</span>: <span class="built_in">len</span>(test),</span><br><span class="line">    <span class="string">'Close_test'</span>: test[<span class="string">'Close'</span>].values,</span><br><span class="line">    <span class="string">'MA5_test'</span>: test[<span class="string">'ma_5'</span>].values,</span><br><span class="line">    <span class="string">'MA25_test'</span>: test[<span class="string">'ma_25'</span>].values</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="株価予測の実施と評価"><a href="#株価予測の実施と評価" class="headerlink" title="株価予測の実施と評価"></a>株価予測の実施と評価</h2><p>Stanファイルの実装ができました。<br>ここから予測の実施と評価に入っていきます。</p><h3 id="MCMC実行"><a href="#MCMC実行" class="headerlink" title="MCMC実行"></a>MCMC実行</h3><p>MCMCを実行します。Stanモデルをビルドし、サンプリングを行っていきます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stanモデルをビルド</span></span><br><span class="line">posterior = stan.build(stan_model, data=data_dict, random_seed=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># サンプリング</span></span><br><span class="line">fit = posterior.sample(num_chains=<span class="number">4</span>, num_samples=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>stanモデルのビルドではrandom_seedを指定しています。</p><p>これは生成される乱数値の固定のために使用します。分析の再現性のため毎回設定しておくことが望ましいです。</p><p>また、サンプリングで設定しているnum_chainsはチェーン数でMCMCによる1セットの乱数生成を行う回数のこと、num_samplesは乱数生成の繰り返し回数、すなわち1セットごとに生成される乱数の個数です。</p><p>今回は1000回の乱数生成を4セット行い、4000個のサンプリングを行うという設定をしていることになります。(実際には、デフォルトで間引き数であるthin=2が設定されているため、2つの乱数生成に付き1つが採用されます。そのため、ログ上では8000個の乱数生成が行われているような表示が出るかと思います。)</p><p>結果が出るまで数分程度かかるかもしれません。</p><h3 id="事後分布の可視化"><a href="#事後分布の可視化" class="headerlink" title="事後分布の可視化"></a>事後分布の可視化</h3><p>サンプリングが完了すると結果がFitクラスで得られます。</p><p>ここから、事後分布の可視化をしてみます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MCMCサンプリング結果からパラメータのサンプリング結果を取得</span></span><br><span class="line">alpha_samples = fit[<span class="string">'alpha'</span>][<span class="number">0</span>]</span><br><span class="line">beta1_samples = fit[<span class="string">'beta1'</span>][<span class="number">0</span>]</span><br><span class="line">beta2_samples = fit[<span class="string">'beta2'</span>][<span class="number">0</span>]</span><br><span class="line">beta3_samples = fit[<span class="string">'beta3'</span>][<span class="number">0</span>]</span><br><span class="line">sigma_samples = fit[<span class="string">'sigma'</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 各パラメータのサンプル</span></span><br><span class="line">param_names = [<span class="string">'alpha'</span>, <span class="string">'beta1'</span>, <span class="string">'beta2'</span>, <span class="string">'beta3'</span>, <span class="string">'sigma'</span>]</span><br><span class="line">samples = {</span><br><span class="line">    <span class="string">'alpha'</span>: alpha_samples,</span><br><span class="line">    <span class="string">'beta1'</span>: beta1_samples,</span><br><span class="line">    <span class="string">'beta2'</span>: beta2_samples,</span><br><span class="line">    <span class="string">'beta3'</span>: beta3_samples,</span><br><span class="line">    <span class="string">'sigma'</span>: sigma_samples</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># パラメータ毎にプロット</span></span><br><span class="line"><span class="keyword">for</span> param_name <span class="keyword">in</span> param_names:</span><br><span class="line">    fig, axes = plt.subplots(<span class="number">1</span>, <span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">    param_samples = samples[param_name]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 事後分布</span></span><br><span class="line">    sns.histplot(param_samples, kde=<span class="literal">True</span>, ax=axes[<span class="number">0</span>], color=<span class="string">'gray'</span>)</span><br><span class="line">    axes[<span class="number">0</span>].set_title(<span class="string">f'Posterior distribution of <span class="subst">{param_name}</span>_samples'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># トレースプロット</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        axes[<span class="number">1</span>].plot(param_samples[i*<span class="number">1000</span>:(i+<span class="number">1</span>)*<span class="number">1000</span>], color=colors[i], alpha=<span class="number">.5</span>, label=<span class="string">f'Chain <span class="subst">{i+<span class="number">1</span>}</span>'</span>)</span><br><span class="line"></span><br><span class="line">    axes[<span class="number">1</span>].set_ylabel(<span class="string">'Value'</span>)</span><br><span class="line">    axes[<span class="number">1</span>].set_title(<span class="string">f'Trace plot of <span class="subst">{param_name}</span>_samples'</span>)</span><br><span class="line">    axes[<span class="number">1</span>].legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>左側に分布を、右側に収束の確認のためのトレースプロットを配置しています。</p><img src="/images/20230522a/image_2.png" alt="" width="988" height="490" loading="lazy"><img src="/images/20230522a/image_3.png" alt="" width="988" height="490" loading="lazy"><img src="/images/20230522a/image_4.png" alt="" width="988" height="490" loading="lazy"><img src="/images/20230522a/image_5.png" alt="" width="988" height="490" loading="lazy"><img src="/images/20230522a/image_6.png" alt="" width="988" height="490" loading="lazy"><p>beta1~3やsigmaのトレースプロットのように、4本のチェーンが混ざりあった状態であれば収束できています。</p><p>逆にalphaのような状態は、うまく収束していないです。収束しない場合、予測結果の信頼性が低くなる可能性があるため注意が必要です。</p><p>収束の改善のためには、サンプリング方法を見直す、サンプルサイズを増やす、モデル自体の改良などが挙げられます。今回alphaが収束しなかったのは、株価の推移のような複雑な現象を、非常に単純な線形回帰モデルとして仮定したことが原因になっているかもしれません。</p><p>本来であればここでパラメータが収束するようチューニングを行うことになるかと思いますが、今回は流れの理解を目指しているのでこのまま予測の検証に進みます。</p><h3 id="予測の検証"><a href="#予測の検証" class="headerlink" title="予測の検証"></a>予測の検証</h3><p>予測値は、Close_predictionとしてサンプリングされているので、このデータを実際の終値と比較してみましょう。</p><p>Close_predictionでは各時点に対して4000個の推定値がサンプリングされています。</p><p>このままでは比較も可視化も難しいので95%信頼区間を算出してプロットしてみます。95%信頼区間は、データのうち大きすぎる2.5%と小さすぎる2.5%を除いた95%のデータが含まれる区間と考えてください。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># テストデータの実際の終値</span></span><br><span class="line">actual_close = test[<span class="string">'Close'</span>].values</span><br><span class="line"></span><br><span class="line"><span class="comment"># サンプリングされた終値の推定値</span></span><br><span class="line">predicted_close = fit[<span class="string">'Close_prediction'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 95%信頼区間の設定</span></span><br><span class="line">lower_bound = np.percentile(predicted_close, <span class="number">2.5</span>, axis=<span class="number">1</span>)</span><br><span class="line">upper_bound = np.percentile(predicted_close, <span class="number">97.5</span>, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># グラフのプロット</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(test.index, actual_close, label=<span class="string">'Actual Close Price'</span>)</span><br><span class="line">plt.fill_between(test.index, lower_bound, upper_bound, alpha=<span class="number">0.3</span>, label=<span class="string">'95% CI'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Date'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Close Price'</span>)</span><br><span class="line">plt.title(<span class="string">'Comparison of Actual and Predicted Close Prices with 95% CI'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>結果:</p><img src="/images/20230522a/image_7.png" alt="" width="868" height="547" loading="lazy"><p>実線が実際に観測された株価を、薄い青のエリアが今回のモデルで推定された株価の範囲となります。</p><p>こうしてみるとかなりよい精度で予測されているように見えます。</p><p>少なくとも実際に観測された株価が95%信頼区間に含まれていない箇所はほとんどなさそうです。</p><p>しかし、信頼区間のような幅のある予測のままでは、具体的な判断(買いなのか売りなのか)はなかなか難しいです。</p><p>そのため、サンプリングされた株価の推定値の平均を計算し、その値が前日の株価に対して、上がっているのか、それとも下がっているのかを判定してみます。</p><p>そして、この上がるか下がるかの予測がどの程度の精度であるかを確かめてみましょう。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 予測値が上がるか下がるか（上がる: 1, 下がる: 0）</span></span><br><span class="line">pred_direction = (predicted_close[<span class="number">1</span>:, :].mean(axis=<span class="number">1</span>) &gt; actual_close[:-<span class="number">1</span>]).astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 実際の値が上がるか下がるか（上がる: 1, 下がる: 0）</span></span><br><span class="line">actual_direction = (actual_close[<span class="number">1</span>:] &gt; actual_close[:-<span class="number">1</span>]).astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 予測結果と実際の結果の一致率</span></span><br><span class="line">accuracy = np.mean(pred_direction == actual_direction)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 結果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Accuracy: '</span>, accuracy)</span><br></pre></td></tr></table></figure><p>結果:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accuracy:  0.5126050420168067</span><br></pre></td></tr></table></figure><p>正解率は約51.3%という結果でした。</p><p>完全ランダムだと50%になるはずなのでそれよりはほんの少しプラスですね。</p><p>このちょいプラスだという結果が有意なものかの検証まではできていないため、誤差の範囲とも言えそうですがひとまず株価推移予測を行うという当初の目的はクリアしたと言ってよいでしょう。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>ベイズ推定を用いて株価予測ができました。</p><p>全く使ったことがない状態から、簡単なモデルであれば推定までできるところまで行けたので、今後、データ分析コンペなどで活用して分析のオプションの1つとしてベイズを使いこなせるようにしていきたいです。</p><p>また、Stanの扱い方も、設計したモデルをコードに落とすことができればそれほど苦労せず動かせることがわかったのは収穫でした。正直、ベイズ推定に対しては食わず嫌い的な状態だったので良い機会になりました。</p><p>今回扱えなかったより複雑なベイズモデルとしては、時系列モデルとして知られる状態空間モデルや隠れマルコフモデルといったものもあります。これらのモデルでは、株価の時間依存性や潜在的な状態を考慮することができるので、これらを仮定することでより精度の高い予測が可能になるかもしれません。</p><p>興味のある方はぜひチャレンジしてみると面白いと思います。</p><p>次は小橋さんの<a href="/articles/20230523a/">Technology_Radar_の機械学習関連技術を見てみる</a>です。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.kspub.co.jp/book/detail/5165362.html">https://www.kspub.co.jp/book/detail/5165362.html</a></p><h2 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h2><p>以下では、ベイズの定理やMCMCについてまとめています。</p><p>まず、ベイズの定理です。公式としては以下のようになります。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.172ex;" xmlns="http://www.w3.org/2000/svg" width="25.422ex" height="5.475ex" role="img" focusable="false" viewBox="0 -1460 11236.6 2420"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(2028,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(2306,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(3134,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3800.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(4856.6,0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,710)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(1968,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(2246,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(3134,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(3523,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(4274,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4663,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(5551,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(2011.5,-710)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(1968,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="6140" height="60" x="120" y="220"></rect></g></g></g></g></svg></mjx-container></p><p>ベイズの定理では、しばしば「事前確率を事後確率に更新する」という言い方がなされます。</p><p>事前確率とは、「データが得られる前に想定された確率」のことで、事後確率とは、「データが得られたあとに想定する確率」です。上の式で、事前確率 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.971ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3523 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(1968,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(2246,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(3134,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> は、尤度 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.468ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2417 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(2028,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> と周辺尤度 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.333ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2357 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(1968,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> の比を使って事後確率である <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.971ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3523 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(2028,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(2306,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(3134,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> を更新しています。</p><p>さらっと流してしまいましたが、尤度は「ある仮定が与えられたという条件のもとで、データ得られる確率」、周辺尤度は「データが得られる平均的な確率」と解釈されます。</p><p>例を見てみましょう。</p><blockquote><p>正しいコインと表が出やすいイカサマコインの2枚のコインがあります。そのうち1枚を手渡されました。手渡されたコインがイカサマコインなのかそうでないのかは「よくわからない」という状況です。この「イカサマかどうかよくわからない」という状況を、確率を使って定量的に評価することを試みます</p><p>コインが手渡された直後、これ以上何の情報もないときに考えた「渡されたコインがイカサマコインである確率」が事前確率です。<br>一方、コインを1回投げて、表という結果が出たとしましょう。「コインが表になったというデータ」が与えられた下での「渡されたコインがイカサマコインである確率」が事後確率となります。</p><p>事前確率をどのように指定するかですが、事前の情報がない場合、理由不十分の原則に基づき等しい確率を各々の仮定に割り当てます。<br>そのため、イカサマコインが渡されたという事前確率 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.327ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2796.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1140,0)"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(864,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(2407.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> は0.5、<br>正しいコインが渡されたという事前確率 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.327ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2796.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1140,0)"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(864,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2407.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> は0.5となります</p><p>尤度は事前に計算できると仮定します。例えば、「イカサマコインは75%の確率で表が出る」また「正しいコインは50%の確率で表が出る」ということがわかっていたとします。</p><p>周辺尤度は「手持ちのデータが得られる平均的な確率となり、<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="11.438ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 5055.8 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">周</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">辺</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">尤</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mo" transform="translate(4277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="61.589ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 27222.4 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">イ</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">カ</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">サ</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">マ</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">コ</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">イ</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">ン</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">が</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">表</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">に</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">な</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">る</text></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">確</text></g><g data-mml-node="mi" transform="translate(13000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">率</text></g><g data-mml-node="mo" transform="translate(14222.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(15222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">イ</text></g><g data-mml-node="mi" transform="translate(16222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">カ</text></g><g data-mml-node="mi" transform="translate(17222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">サ</text></g><g data-mml-node="mi" transform="translate(18222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">マ</text></g><g data-mml-node="mi" transform="translate(19222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">コ</text></g><g data-mml-node="mi" transform="translate(20222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">イ</text></g><g data-mml-node="mi" transform="translate(21222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">ン</text></g><g data-mml-node="mi" transform="translate(22222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">で</text></g><g data-mml-node="mi" transform="translate(23222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">あ</text></g><g data-mml-node="mi" transform="translate(24222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">る</text></g><g data-mml-node="mi" transform="translate(25222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">確</text></g><g data-mml-node="mi" transform="translate(26222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">率</text></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="58.825ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 26000.4 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">正</text></g><g data-mml-node="mi" transform="translate(1778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">し</text></g><g data-mml-node="mi" transform="translate(2778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">い</text></g><g data-mml-node="mi" transform="translate(3778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">コ</text></g><g data-mml-node="mi" transform="translate(4778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">イ</text></g><g data-mml-node="mi" transform="translate(5778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">ン</text></g><g data-mml-node="mi" transform="translate(6778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">が</text></g><g data-mml-node="mi" transform="translate(7778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">表</text></g><g data-mml-node="mi" transform="translate(8778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">に</text></g><g data-mml-node="mi" transform="translate(9778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">な</text></g><g data-mml-node="mi" transform="translate(10778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">る</text></g><g data-mml-node="mi" transform="translate(11778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">確</text></g><g data-mml-node="mi" transform="translate(12778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">率</text></g><g data-mml-node="mo" transform="translate(14000.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(15000.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">正</text></g><g data-mml-node="mi" transform="translate(16000.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">し</text></g><g data-mml-node="mi" transform="translate(17000.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">い</text></g><g data-mml-node="mi" transform="translate(18000.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">コ</text></g><g data-mml-node="mi" transform="translate(19000.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">イ</text></g><g data-mml-node="mi" transform="translate(20000.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">ン</text></g><g data-mml-node="mi" transform="translate(21000.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">で</text></g><g data-mml-node="mi" transform="translate(22000.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">あ</text></g><g data-mml-node="mi" transform="translate(23000.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">る</text></g><g data-mml-node="mi" transform="translate(24000.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">確</text></g><g data-mml-node="mi" transform="translate(25000.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">率</text></g></g></g></svg></mjx-container></p><p>これを計算すると、 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="37.515ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 16581.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(1968,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2634.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3690.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(5690.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(6691,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(8191.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(9191.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(10691.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(11691.9,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(13247.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(14303.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(778,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1278,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1778,0)"></path></g></g></g></svg></mjx-container> となります。</p><p>コインを投げて表という結果がでたあとに想定する「渡されたコインがイカサマコインであると想定する確率」すなわち事後確率は、<br>事後確率: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.172ex;" xmlns="http://www.w3.org/2000/svg" width="47.599ex" height="5.475ex" role="img" focusable="false" viewBox="0 -1460 21038.8 2420"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1140,0)"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(864,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(2407.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(2685.6,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(3513.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4180.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(5236.1,0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,710)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(1968,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(2246,0)"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(864,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3513.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(3902.6,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(4653.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(5042.6,0)"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(864,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(6310.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(2391.1,-710)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(1968,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="6899.1" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mo" transform="translate(12653,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(13708.8,0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(2000.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(3000.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g></g><g data-mml-node="mn" transform="translate(1220.2,-686)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(778,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1278,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1778,0)"></path></g><rect width="4478.4" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mo" transform="translate(18705,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(19760.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(778,0)"></path></g></g></g></svg></mjx-container></p></blockquote><hr><p>このようにベイズの定理を用いて事前確率を事後確率に更新することで更新していくことをベイズ更新などと呼び、ベイズ推定でもこの考え方に基づきパラメータの推定、データの予測を行っていきます。</p><p>ただし、先の例のように推定値を1つだけ提示するのではなく、確率分布で定量化することを試みます。</p><p>そこで、ベイズの定理を確率分布に拡張した以下の式を用います。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.172ex;" xmlns="http://www.w3.org/2000/svg" width="20.056ex" height="5.475ex" role="img" focusable="false" viewBox="0 -1460 8864.6 2420"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1408,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(1686,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2258,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2924.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(3980.6,0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,710)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(1789,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(2258,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(2647,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(3197,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3586,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(4055,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(1492,-710)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="4644" height="60" x="120" y="220"></rect></g></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.618ex" role="img" focusable="false" viewBox="0 -705 469 715"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g></svg></mjx-container> は事前確率を、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.066ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1797 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1408,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> が事前確率分布を表します。<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container> はデータの尤度を <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.989ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2647 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(1789,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(2258,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> は尤度関数を意味し、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1900 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> は周辺尤度となります。</p><p>この周辺尤度は正規化定数となり、この積分計算が非常に複雑で困難なことがしばしば発生します。</p><p>例えば、事後分布の確率密度関数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.568ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2903 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1408,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(1686,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(2514,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> が得られているときに「連続型の確率分布に従うパラメータ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 778 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"></path></g></g></g></svg></mjx-container> が <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container> から <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 429 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container> の間に入る確率」を求めるために、以下の積分計算が必要になります。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.046ex;" xmlns="http://www.w3.org/2000/svg" width="28.947ex" height="5.213ex" role="img" focusable="false" viewBox="0 -1399.9 12794.8 2304"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(1946.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(3002.6,0)"><path data-c="398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"></path></g><g data-mml-node="mo" transform="translate(4058.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(5114.1,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(5543.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6209.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msubsup" transform="translate(7265.7,0)"><g data-mml-node="mo" transform="translate(0 1)"><path data-c="222B" d="M114 -798Q132 -824 165 -824H167Q195 -824 223 -764T275 -600T320 -391T362 -164Q365 -143 367 -133Q439 292 523 655T645 1127Q651 1145 655 1157T672 1201T699 1257T733 1306T777 1346T828 1360Q884 1360 912 1325T944 1245Q944 1220 932 1205T909 1186T887 1183Q866 1183 849 1198T832 1239Q832 1287 885 1296L882 1300Q879 1303 874 1307T866 1313Q851 1323 833 1323Q819 1323 807 1311T775 1255T736 1139T689 936T633 628Q574 293 510 -5T410 -437T355 -629Q278 -862 165 -862Q125 -862 92 -831T55 -746Q55 -711 74 -698T112 -685Q133 -685 150 -700T167 -741Q167 -789 114 -798Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1046.4,1088.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(589,-896.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g><g data-mml-node="mi" transform="translate(8902.8,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(9452.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(9841.8,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(10310.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(10588.8,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(11416.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(11805.8,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(12325.8,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g></svg></mjx-container></p><p>そこで、事後分布が複雑になりすぎて積分ができないという問題をどうにか解決するための手段にMCMCがあります。</p><p>MCMCはマルコフ連鎖モンテカルロ法の略で、マルコフ連鎖を利用して乱数を生成する手法です。<br>では、なぜただの乱数生成から事後分布がわかることになるのでしょうか。</p><p>ここで、一旦マルコフ連鎖とはなにかを紹介します。</p><p>確率変数が時間の経過とともに変化していく数理モデルを確率過程と呼び、一般的な確率過程では以下のように全ての歴史をもとに確率分布が記述されます。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.822ex" height="2.565ex" role="img" focusable="false" viewBox="0 -883.9 8761.4 1133.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1140,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(936.2,413) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(2381.5,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msup" transform="translate(2659.5,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="TeXAtom" transform="translate(936.2,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1139,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4804.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(5249.3,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(6587.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(7032.6,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mn" transform="translate(936.2,413) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(8372.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p>これに対して、現在の状態は1時点前の状態のみに依存し、それ以前の過去の状態には依存しないような確率分布は、</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.75ex" height="2.565ex" role="img" focusable="false" viewBox="0 -883.9 5193.6 1133.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1140,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(936.2,413) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(2381.5,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msup" transform="translate(2659.5,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="TeXAtom" transform="translate(936.2,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1139,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4804.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p>となります。このような確率過程をマルコフ連鎖と呼びます。</p><p>身近な例として、天気を考えてみます。</p><blockquote><p>例えば、ある地域の天気が「晴れ」「曇り」「雨」の3状態のみを取るとします。そして、ある日の天気が前日の天気にのみ依存し、それ以前の天気には影響を受けないとします。<br>これがマルコフ連鎖の特性です。<br>具体的には、前日が晴れであれば次の日が晴れる確率が70%、曇りになる確率が20%、雨になる確率が10%、といった具体的な確率があると考えます。同様に、前日が曇りや雨であった場合の次の日の天気に対する確率も設定します。このような1時点前の状態が与えられたときの条件付き確率のことを「遷移核」と呼びます。<br>この天気の遷移を何日も続けていくと、ある一定の確率分布に収束していきます。<br>たとえば、365日間天気の遷移を観察したとします。その結果、全体として晴れの日が60%、曇りの日が30%、雨の日が10%という比率になったとします。このように一定の比率に収束した確率分布を「定常分布」と呼びます。<br>そして、マルコフ連鎖では、どの初期状態からスタートしても（つまり、1日目が晴れであろうと雨であろうと）、長期的にはこの定常分布に収束するという性質があります。</p></blockquote><p>MCMCでは、このマルコフ連鎖の性質を利用して、求めたい確率分布をサンプリングします。<br>天気の例では、「晴れの日が60%、曇りの日が30%、雨の日が10%」という分布が求めたい確率分布(=事後確率分布)になります。</p><p>つまり、遷移核がわかっていれば、マルコフ連鎖を活用して乱数を生成することができ、マルコフ連鎖が定常分布に収束するならば定常分布に従う乱数も得られそうです。</p><p>いまやりたかったことは、「事後分布を評価できないので、事後分布からたくさんサンプリングをして事後分布の評価を近似すること」でした。<br>もし、定常分布が事後分布のマルコフ連鎖を構成できれば、遷移核に従い現在の状態から次の状態へ分布を変えずに遷移できます。つまり、遷移核がうまく設定でき、定常分布を事後分布と見立てるとことができれば、今回の目的は達成できそうです。</p><p>次の問題は、「定常分布が事後分布になるマルコフ連鎖」をどうやって得るか。言い換えると遷移核をどのように設定すればよいかですが、これには様々な方法があり有名なものに[MH法]や[HMC法]があります。</p><p>今回はStanで採用されているHMC法を利用することになります。<br>(実際にはHMC法を発展させたNUTSというアルゴリズムが使われているようです。)</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/Stan/">Stan</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%99%E3%82%A4%E3%82%BA%E6%8E%A8%E5%AE%9A/">ベイズ推定</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A0%AA%E4%BE%A1%E4%BA%88%E6%B8%AC/">株価予測</category>
      
      
      <comments>https://future-architect.github.io/articles/20230522a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SLOconf Tokyo 2023というコミュニティイベントに参加しました</title>
      <link>https://future-architect.github.io/articles/20230518b/</link>
      <guid>https://future-architect.github.io/articles/20230518b/</guid>
      <pubDate>Wed, 17 May 2023 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIGの原木です。</p><p>SLOconfという、Nobl9社が主催する、サービスレベル目標（SLO）に特化したカンファレンスがあります。今までオンラインでやってきたのですが、三回目になる今回、初めてオフラインで開催&amp;世界各地でローカルなコミュニティイベントを同時開催する運びになりました。</p><p>日本ではGoogleJapanさんが手を挙げて、Googleの渋谷オフィスで2023/5/13日に、<a href="https://connpass.com/event/282120/">SLOconf Tokyo 2023</a>として開催されました。</p><p>SLOに関する興味深い話を数多く視聴できたので、イベントレポートとして記録に残したいと存じます。</p><h2 id="当日のセッションリスト"><a href="#当日のセッションリスト" class="headerlink" title="当日のセッションリスト"></a>当日のセッションリスト</h2><div class="scroll"><table><thead><tr><th>No</th><th>タイトル</th><th>スピーカー</th></tr></thead><tbody><tr><td>1</td><td>How I learned to stop worrying and love burn rates</td><td>Ashley Chen</td></tr><tr><td>2</td><td>スタディサプリにおける SLI/SLO の継続的改善</td><td>@chaspy_</td></tr><tr><td>3</td><td>SLOを満たせなくなったら</td><td>Shunji Kawabata</td></tr><tr><td>4</td><td>LuupにおけるSLOの物語</td><td>@gr1m0h</td></tr></tbody></table></div><p>他、DatadogのToby Burressさんによる<a href="https://www.youtube.com/watch?v=wiirb2skqtI"><code>What we mean by 'Mean'</code></a> (平均が意味するものは？)のパブリックビューイングも予定されていましたが、時間の関係でなくなりました。</p><h2 id="SLOconf-2023-How-I-learned-to-stop-worrying-and-love-burn-rates"><a href="#SLOconf-2023-How-I-learned-to-stop-worrying-and-love-burn-rates" class="headerlink" title="SLOconf 2023 - How I learned to stop worrying and love burn rates"></a>SLOconf 2023 - How I learned to stop worrying and love burn rates</h2><p>動画: <a href="https://www.youtube.com/watch?v=ra0cCmEVKS8">https://www.youtube.com/watch?v=ra0cCmEVKS8</a></p><h3 id="話された内容"><a href="#話された内容" class="headerlink" title="話された内容"></a>話された内容</h3><p>DataDogのSLOチームで働いているAshley Chenさんに、閾値からバーンレートにインシデントの検知方法を変えた場合にどのようなメリットがあるのかお話いただきました。</p><p>運用監視通知システムのロジックを、「閾値を使ったシンプルな通知システム(Simple Threshold alert)」から「バーンレートを用いた通知システム(Burn Rate alert)」に置き換えてみたら…</p><ol><li>インシデントの検知対象は変わるのだろうか？</li><li>paging数(システムから運用者への警告/通知数)に変化はあるのだろうか？</li></ol><p>…ということについて、六か月にわたって実際のサービスメトリクスに基づいて両方のタイプのアラートをトリガーすることで実験したそうです。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>バーンレートとは、SREのエラーバジェット(障害に対してどこまで許容していいかという予算)の消化率を表したものです。一般にはバーンレートが高い場合、障害によるユーザーへの影響が大きいことを示します。</p></div><p>その実験結果として、</p><ul><li>インシデントの種類によってバーンレートアラートの発火は変わる<ul><li>インシデントの種類は4種類に分類できる<ol><li>既知のインシデント<ol><li>既知のインシデントとは、アラートを受け取ったとき、既に上流で別のシステムが既にインシデントを認知、対応中であるようなケースのこと</li></ol></li><li>依存関係にある周辺システムへのスケールアップの要求</li><li>不明</li><li>フレイキーページ(Flaky Page)<ol><li>フレイキーページとはアラート後、数分して勝手に復旧するようなケース</li></ol></li></ol></li></ul></li><li>既知のインシデントの場合はバーンレートは高くなるが、それ以外のケースはそれほどでもない</li><li>手動アクションの介入が最も必要なのは既知のインシデントの場合である</li></ul><p>結果として「閾値を使ったシンプルな通知システム」と比較して、「バーンレートを用いた通知システム」ではユーザーのページ数を42ページも減らすことができると実験結果で得られました。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>ページ(Page)とは、運用監視の文脈ではシステムからエンジニアやオペレーターへの警告または通知を指します。○○ページ減ったというのは、つまり運用者への警告数を減らせたことを意味します。</p><p>携帯電話が普及するより前、ポケベルという小型無線通信機が良く使われていました。英語名をPagerといいます。現代でも<a href="https://dailyportalz.jp/kiji/pokeberu-kongo-katsuyaku">業務用として急患などの緊急通知で病院にいない医者の呼び出しをする等の用途で現役らしい</a>です。IT業界ではSaaSのPagerDuty等にその名残があります。</p></div><h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><p>Flaky(フレイキー)という馴染みがあまりない用語を知ったのは、Jenkinsの作者である川口さんがソフトウェアのテストで「Flaky test」について解説した下記の記事でした。</p><p><a href="https://www.publickey1.jp/blog/22/itjenkinsdevops_days_tokyo_2022_1.html">https://www.publickey1.jp/blog/22/itjenkinsdevops_days_tokyo_2022_1.html</a></p><p>この記事には、フレイキーテストという、原因ははっきりしないのにたまに失敗するテストケースに振り回される開発者が出てきます。</p><p>これは何もテストだけに限った話ではなく、運用の場でも同様な事象が起こります。現代のサービスを支えるシステムは、Kubernetesに代表されるようにある程度のレジリエンシーを備えており、一瞬エラーイベントが発火しても数分したら回復していることも少なくありません。後述するセッション「SLOを満たせなくなったら」でもShunji Kawabataさんが強調していましたが、そのような一過性のイベントで開発者を呼び出した場合、呼び出された人には今しかかっている仕事を切り替えなくてはならない認知負荷を与えます。</p><p>もちろん、エラーイベントを生じさせているのは潜在的なバグである可能性が十分にあります。しかし、そのバグは、今しかかっている機能開発を止めてまで障害解決と対策に全力でリソースを入れなくちゃいけないものなのか、それともエラーバジェットの範囲内だといったんエラーイベントを許容できるレベルなのか。</p><p>そのバランスを保つために、開発者には適切なレベルでエラー通知を送るための材料として非常に説得力がある内容でした。</p><h2 id="スタディサプリにおけるSLI-x2F-SLOによる継続的な改善-をこれからやっていくぞという話"><a href="#スタディサプリにおけるSLI-x2F-SLOによる継続的な改善-をこれからやっていくぞという話" class="headerlink" title="スタディサプリにおけるSLI/SLOによる継続的な改善(をこれからやっていくぞという話)"></a>スタディサプリにおけるSLI/SLOによる継続的な改善(をこれからやっていくぞという話)</h2><p>スライド資料: <a href="https://speakerdeck.com/chaspy/slo-at-studysapuri">https://speakerdeck.com/chaspy/slo-at-studysapuri</a></p><h3 id="話された内容-1"><a href="#話された内容-1" class="headerlink" title="話された内容"></a>話された内容</h3><p>小学生から大学生までの学習を支援するサービス「スタディサプリ」でアプリケーション開発を行っているChaspyさんに、今関わっている「スタディサプリ 中学講座」にSLI/SLOで運用してみた苦い体験談について語っていただきました。</p><p>「スタディサプリ 中学講座」は2022年2月にリリースされました。順調にサービスは稼働し、リリース時に設定したSLI/SLOのモニタリング項目も遠い記憶となった一年後….ある時、SLO Alertが一度も鳴ったことがないという衝撃的な事実が発覚しました。</p><p>APMサービスであるSentryのExceptionAlertは飛んでいました。つまり、アプリケーションエラーが今まで起きたことが一度もないわけではありません。それなのに、SLO Alertは鳴ってないのはどうしてだろう？その理由について深堀してみたら数々の不具合が見つかりました。</p><p>最終的にはSLI/SLOに関して下記の見直しを実施しました。</p><ul><li>サービス間通信で利用していたGraphQLでエラーが生じた場合にhttpステータスを明示的に5xxで返すようにする</li><li>マイクロサービス間のメトリクスを取得するためだけに入れていたプロキシサーバーのEnvoyをやめて、代わりにDatadog APM metricsを導入</li><li>Datadog APM metricsに合わせた、メトリクスの取得方法やSLOの算出方法の変更</li><li>エラーイベント発生時の対応のドキュメント化</li></ul><h3 id="感想-1"><a href="#感想-1" class="headerlink" title="感想"></a>感想</h3><p>今回SLOconfを主催したNobl9のAlex Hidalgoさんが書いた「Implementing Service Level Objectives」(サービスレベル目標の実装)という書籍があります。</p><p>SLOの実装というタイトルの通り、SLOに関する実践情報がこれでもかと詰まった本ですが、その中でも好きなところが、第3部「SLOの文化」第14章「SLO Evolution(SLOの進化)」です。</p><p>サービスは時間経過に伴い様々な要因で変化し、当然、その際にSLOも変えていかなければなりません。SLI/SLOは定期的に見直さなくてはいけないねという話は、運用監視に携わる方ならよく聞く話だと思うのですが、ではどういったイベントが発生したらSLOを変えていかなければならないんだろうっていうことに踏み込んで説明した資料は少ないと思います。本誌を読んだとき、生命保険を見直すライフイベントに関するノウハウ本を読んでいるような錯覚を覚えました。</p><p>僭越ながら本書の日本語訳がもっと早く出ていればChaspyさんも…と思わずにはいられません。</p><p>本講演について、技術的には、Datadog APM metricsの”癖”に関して運用した知見に関する話が興味深く、実際に運用してフィードバックを得る良さを学びました。</p><p>Datadogのメトリクスの1つに、httpリクエストのエラー件数をカウントする <code>trace.http.request.errors</code> という指標があります。名前からこれで十分な気がしますが、実際は4xxのみカウントする(5xxは該当しない)指標でした…という登壇者の説明に、視聴者から「え、そうなの?」という反応が見て取れて面白かったです。</p><p>統合ログ管理ツールであるSplunkでエンジニアとして働いているKazunori Otaniさんが、こういう意図ではないか？とSlackで補足されていましたので引用します。</p><blockquote><p>Client - Serverの通信で、両者にAPMエージェントがセットアップされているとして、</p><ul><li>4xxの場合はClient側でエラーとして、Server側ではエラーとしてカウントしない</li><li>5xxの場合は、Server側でエラーとして、Client側ではエラーとしてカウントしない</li></ul><p>みたいな世界観なのかなと思いましたーが、これでうまく行かないことも多いので、難しい<br>Otelエージェント(注: OpenTelemetryのこと)では、Server側として、4xx, 5xx両方ともerror扱いとしてるはずですね</p></blockquote><h2 id="SLOを満たせなくなったら"><a href="#SLOを満たせなくなったら" class="headerlink" title="SLOを満たせなくなったら"></a>SLOを満たせなくなったら</h2><p>資料非公開</p><h3 id="話された内容-2"><a href="#話された内容-2" class="headerlink" title="話された内容"></a>話された内容</h3><p>Google Cloudの大規模ユーザー向けに、信頼性向上やパフォーマンスチューニング等の支援業務を行っているShunji Kawabataさんからは、「SLOを満たせなくなったら」というタイトルで、主にインシデント管理に関して語っていただきました。</p><p>SLOを満たせない状況の大半は、インシデント、つまり予期しない問題や障害が発生することに起因します。したがって、インシデントについての正確な理解や予防措置、対策をしっかり行えば、SLOを満たせない状況を回避することができます。</p><p>そもそも、SLOに対するインシデントの影響が小さくなったことはどのように判断すれば良いでしょうか？</p><img src="/images/20230518b/図1_インシデントとSLOの関係図.png" alt="図1_インシデントとSLOの関係図" width="1200" height="438" loading="lazy"><p>上記の図はインシデントとSLOの関係について説明したものです。インシデントの発生によるSLIの減少を最小限に抑えるためには、横軸が時間、縦軸がSLIを表すこの図の面積を小さくする必要があります。つまり、時間軸（横軸）とSLI軸（縦軸）のいずれかを縮小する必要があります。</p><p>時間軸については、「<strong>問題の検出時間</strong>」（ETTD: Estimated Time to Detect）と「<strong>問題の回復時間</strong>」（ETTR: Estimated Time to Recovery）を短縮することが求められます。一方、SLI軸では、<strong>「影響を受けたユーザー数」や「エラーの発生率」などのインパクト</strong>を最小限に抑えることが重要です。</p><p>また、インシデントの発生頻度を管理することも重要で、これは「<strong>次の障害発生までの時間</strong>」（ETTF: Extended Time to Fail）を長くすることで達成可能です。</p><p>これらの4つの要素を適切にコントロールするためにはどうすればいいでしょうか？</p><ul><li><strong>問題の検出時間(ETTD)を短くする</strong><ul><li>監視業務の自動化が鍵</li><li>運用者が日常的に見ている情報を文書化することでアラートポリシーやプログラムの材料とする</li></ul></li><li><strong>よくやる対処策は自動化し、なるべく人手を要らないようにする</strong><ul><li>運用者の呼び出しは、人間にコンテキストスイッチを要求する負荷の高い行為なので最終手段とする</li></ul></li><li><strong>復旧時間を(ETTR)を短くする</strong><ul><li>統制とプレビューが鍵</li><li>Googleはフラットな組織だが、インシデント対応に関しては完全なボトムアップ型の組織アプローチであるインシデントコマンドシステムを採用し、対応している<ul><li>参考: GoogleCloudドキュメント「<a href="https://cloud.google.com/docs/security/incident-response?hl=ja">データ インシデント対応プロセス</a>」</li></ul></li></ul></li><li><strong>インシデントを未然に防ぎ、ETTFを長くする</strong><ul><li>事後対応としてポストモーテムを実施する</li><li>Googleではインシデントの7割はシステムの変更時に発生しているのでカナリアリリースやプログレッシブロールアウト(段階的なデプロイ作業)といったリリース戦略を実行する<ul><li>参考: GoogleCloudドキュメント「<a href="https://cloud.google.com/deploy/docs/deployment-strategies/canary?hl=ja">カナリア デプロイ戦略を使用する</a>」</li></ul></li></ul></li><li><strong>事前準備をしっかり行う</strong><ul><li>インシデント対応ポリシーを策定する<ul><li>コミュニケーションチャンネルを用意する</li><li>作業時間のリミットと引継ぎ方法を事前に検討することで、インシデント発生時に対応者が長時間拘束されることを防ぐ</li></ul></li></ul></li><li><strong>暫定復旧の基準点を決める</strong><ul><li>SLOと同じ指標にしてしまうと往々にして困ることがあるので、長期的復旧とは指標を別にする</li></ul></li></ul><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>講演者から、極端な例だけど…と、データセンター火災とSLOの関係について、閑話休題的に説明があったのですが、非常にインパクトがありました。</p><p>先月、パリのGoogleCloudデータセンターの1つ、europe-west9 リージョンが豪雨に見舞われました。多大な雨量が地下室のバッテリー室に流れ込んだ結果、火災が発生し、現状でも完全には回復には至っていません。<br><a href="https://www.theregister.com/2023/05/10/google_cloud_paris_outage_persists/">https://www.theregister.com/2023/05/10/google_cloud_paris_outage_persists/</a></p><p>上記のようなまれによくある事態が発生すると、顧客にはリージョンのお引越しをお願いすることになります。ですが、リージョンを移動した後でも移動前と全く同じ環境かというと、細かい差異が出てくることもあるそうです。</p><p>この状況下ではいつまでもSLOを満たせず、暫定対応から中長期的な改善対応(データセンターの再建等)へのシフトチェンジを行えません。</p><p>したがって、暫定復旧と長期的復旧の指標は別にした方がよいでしょう、との結論でした。</p></div><ul><li><p><strong>ポストモーテムを行い、失敗を学習、修正し、次に繋げる</strong></p><ul><li>インシデントを解決した後はポストモーテム(振り返り)を実施し、その内容を共有する</li><li>共有作業を単なる公開処刑としないためには、<strong>心理的安全性の確保</strong>が欠かせない</li><li>心理的バイアスがあることを認知し、改善していくことで、失敗を学習、修正し、次につなげる行動は生まれる<ul><li>参考: 「 <a href="https://www.oreilly.co.jp/books/9784873119137/">サイトリライアビリティワークブック ―SREの実践方法</a>」第10章 ポストモーテムの文化：失敗からの学び</li></ul></li></ul></li><li><p><strong>リスク分析を行う</strong></p><ul><li>「発生確率・影響度マトリックス」は、人間が正しくリスク判断できない恐れがあるのでお勧めしていない</li><li>代わりに「Net Error Budget Impact」という指標を使ってリスク評価する<ul><li>参考: 「<a href="https://cloud.google.com/blog/ja/products/devops-sre/how-sres-analyze-risks-to-evaluate-slos?hl=ja">その SLO は現実的ですか？SRE 的なリスク分析手法</a>」</li></ul></li><li>この計算式に紐づいて <a href="https://goo.gl/bnsPj7">CRE Risk Analysis Template</a> でリスク分析をすると客観的な数値を計算できる</li><li>Net Error Budget Impactの計算式</li></ul><p>  <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="35.752ex" height="4.855ex" role="img" focusable="false" viewBox="0 -1460 15802.3 2146"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,710)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(1153,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(1857,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(2561,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(3611.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4611.4,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(5375.4,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(6079.4,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(6783.4,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(7542.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8153.7,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(8653.9,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(9157.9,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(10035.9,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(10538.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(11067.9,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(11500.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(12084.1,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mn" transform="translate(12584.3,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(2278,0)"></path></g></g><g data-mml-node="mrow" transform="translate(6440.7,-686)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(764,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(1468,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(2172,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g><rect width="15562.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><ul><li>リスク分析表の一例<ul><li>年間停止時間が長い項目ほどリスクが高いことを示します。</li></ul></li></ul></li></ul><div class="scroll"><table><thead><tr><th>No</th><th>リスク</th><th>ETTD<br>問題の検出時間</th><th>ETTR<br>問題の回復時間</th><th>Implact<br>影響を与えたユーザーの割合</th><th>ETTF<br>次の障害発生までの時間</th><th>年間停止時間<br>左の4数値に基づいて計算した値</th></tr></thead><tbody><tr><td>1</td><td>設定ミスでノード数をへらしてしまい、これによる過負荷でリクエストを取りこぼす</td><td>30分</td><td>120分</td><td>20%</td><td>120日</td><td>91時間</td></tr><tr><td>2</td><td>新しいリリースが半分のリクエストにエラーを引き起こすが、慣れていないロールバック手順のために復旧に時間がかかる</td><td>5分</td><td>120分</td><td>50%</td><td>180日</td><td>127時間</td></tr><tr><td>3</td><td>誤ってデータベースを削除してしまい、バックアップから復旧する</td><td>5分</td><td>510分</td><td>100%</td><td>1460日</td><td>129時間</td></tr><tr><td>4</td><td>クラウドプロバイダーのゾーン障害で、全体の3分の1のリクエストを取りこぼす。該当ゾーンを外し、他のゾーンにノードを追加するが、キャパシティ不足でデプロイできない。</td><td>5分</td><td>960分</td><td>33%</td><td>365日</td><td>319時間</td></tr></tbody></table></div><h3 id="感想-2"><a href="#感想-2" class="headerlink" title="感想"></a>感想</h3><ul><li>SLOの脅威となるものはなにか？SLIとインシデントの時系列図を使って指標を可視化する</li><li>心理的安全性を確保することで、インシデントを次の改善につなげていく</li><li>人間が正しく評価することが苦手なリスク分析をSLIの指標を使ってリスク分析する</li></ul><p>大きく三点にわたって話された内容は、Google流のSREポリシーが肌感覚でわかる非常に面白い講演でした。</p><p>個人的には、特に最後の「Net Error Budget Impact」を用いてリスク分析を行うあたりが、関心を引きました。ETTF(次の障害発生までの時間)が分類によってはどうにもなるので難しいところではありますが、こういった用途にも使えるのかと新鮮な驚きがありました。</p><p>この内容についてさらに深堀したいなと思ったところでググったところ、ニフティのテックブログで、本講演のリスク分析のテンプレートファイルについて詳細な解説記事が上がっていました。この場を借りて、ご紹介させていただきます。</p><p>関連リンク: 「<a href="https://engineering.nifty.co.jp/blog/13413">SRE的なリスク分析手法を試してみた</a>」</p><h2 id="LuupにおけるSLOの物語"><a href="#LuupにおけるSLOの物語" class="headerlink" title="LuupにおけるSLOの物語"></a>LuupにおけるSLOの物語</h2><p>スライド資料: <a href="https://speakerdeck.com/grimoh/luupniokeruslonowu-yu">https://speakerdeck.com/grimoh/luupniokeruslonowu-yu</a></p><h3 id="話された内容-3"><a href="#話された内容-3" class="headerlink" title="話された内容"></a>話された内容</h3><p>電動キックボードや自転車などのシェアリング事業を展開するLuupで、SREとして働いているぐりもあさんに「LuupにおけるSLOの物語」というタイトルで、Luupで実践しているSLO運用について語っていただきました。</p><ul><li>アジェンダ<ul><li>Luup SREチーム<ul><li>どんなことをしてるか</li><li>どんなチームとコラボレーションしてるか</li></ul></li><li>LuupにおけるSLO<ul><li>CUJ、CMC</li><li>SLO</li></ul></li><li>LuupにおけるSLO運用<ul><li>SLO定期見直し</li><li>SLO違反対応</li><li>BurnRateAlert対応</li><li>Luup Case Study: Unlock</li><li>Enabling SRE活動</li></ul></li><li>Luup SREチームの今後について</li></ul></li></ul><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>資料をご一読していただければ、講演内容の概要は分かると思うので、個別の概要については説明せず、感想にて自分が重要だと感じたことをピックアップしていく形を取りたいと思います。</p></div><h3 id="感想-3"><a href="#感想-3" class="headerlink" title="感想"></a>感想</h3><h4 id="SLIについて"><a href="#SLIについて" class="headerlink" title="SLIについて"></a>SLIについて</h4><p>SLOの設定にあたり、どのような指標(SLI)を取るか。これはビジネスや提供するサービスによって大きく異なり、他社を参考に簡単に正解が見えてくるものではありません。</p><p>Luupさんには自分も上京した時にはよくお世話になっておりますが、電動キックボードや自転車など実機を扱うという点で、難易度の高い問題が更に複雑になったかと存じます。</p><p>たとえば、利用しようと思ったらスマホアプリで操作してQRコードを開いてリモートで鍵を解除してもらって…と一連のイベントが発生します。</p><p>この一連の流れの中で、Luup社はいったい何を計測すれば顧客体験の改善につながると判断したか？</p><p>そのスタンスを表現したのが、次のスライドでした。</p><img src="/images/20230518b/20230516_SLOconTokyo-15.png" alt="" width="1200" height="675" loading="lazy"><p>通常のSREの文脈でよく使われるCUJ(Critical User Journey)を用いつつも、Luup独自のCMC(Critical Machine Communication)という計測対象を独自に定義し、CUJ(人)とCMC(マシン)の両側面からSLIを策定したそうです。</p><p>こういうポリシー策定って地味ですが重要な観点だと思います。さらに、そういった定義が必要になるということから逆説的にビジネスドメインが見えてくるのが面白いですね。</p><h4 id="LuupにおけるSLO運用について"><a href="#LuupにおけるSLO運用について" class="headerlink" title="LuupにおけるSLO運用について"></a>LuupにおけるSLO運用について</h4><p>全体を通して、サイトリライアビリティワークブックにある内容を手堅くやっているなという印象でしたが、特にSLO見直しのケーススタディとして取り上げられていた「Unlock Availability SLO違反」の事例は、共感度が高かったです。</p><p>Luupの電動キックボードや自転車を利用するためには、スマホアプリを使って遠隔操作でロックを解除する必要があります。この遠隔操作の可用性に関するサービスレベル目標を定めたものが「Unlock Availability SLO」ですが、見直した結果、エラーバジェットに影響を及ぼしている二つの要因が分かったそうです。</p><img src="/images/20230518b/20230516_SLOconTokyo-34.png" alt="" width="1200" height="675" loading="lazy"><p>特に後者のような、実機が絡み、リトライによって自動的に解決されるような問題は、なかなか適切なSLOの設定が難しいところです。「How I learned to stop worrying and love burn rates」でもフレイキーページとして説明されていたエラーイベントですね。</p><p>しかし、鍵が解除できないと実機を借りられず、少なくとも一人のユーザーの顧客体験を大きく損なってしまうので、こういうイベントはなるべく避けたいし、解消したいものです。顧客体験と開発リソースの狭間で、IoTデバイス特有のSLO運用の難しさがよくわかった事例でした。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>昨年、OpenSLOに関する記事を書きました。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p><a href="https://future-architect.github.io/articles/20220518a/">https://future-architect.github.io/articles/20220518a/</a></p><p>あれから一年後、同じNobl9社を通してSLOconfというイベントに参加でき、貴重な経験になりました。特に、講演中の周りの反応…ざわめきだったり、どこでスライド資料の写真を撮っていたのか後ろの方に座っていたのでよくわかったのですが、こうしたところに改めてオフラインイベントの良さを感じました。イベントを開催した関係各社様にお礼申し上げます。</p><p>最後に二つばかり宣伝をさせてください。</p><p>この記事の途中で触れた、Nobl9のAlex Hidalgoさんが書いた「Implementing Service Level Objectives」(サービスレベル目標の実装)という書籍ですが、7月に「SLO サービスレベル目標(仮タイトル)」という名前で日本語訳が出版されるそうです。</p><p><a href="https://twitter.com/shotaTsuge/status/1658408285803008000?s=20">https://twitter.com/shotaTsuge/status/1658408285803008000?s=20</a></p><p>また、SRE向けのテックカンファレンス、SRE NEXT 2023が今年も開催されるそうです。9月下旬を予定しているとのことなので、気長に待ちましょう。</p><p><a href="https://twitter.com/ymotongpoo/status/1658448191346589697?s=20">https://twitter.com/ymotongpoo/status/1658448191346589697?s=20</a></p><p>どちらも楽しみですね。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">OpenSLOは今回SLOconfを主催したNobl9社のメンバが中心となって策定した、SLOを定義するためのオープンな仕様です...実はブログを書いてからほとんど動きがなくなってしまい、ちょっと残念ではあります</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%8F%82%E5%8A%A0%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">参加レポート</category>
      
      <category domain="https://future-architect.github.io/tags/SRE/">SRE</category>
      
      <category domain="https://future-architect.github.io/tags/SLO/">SLO</category>
      
      <category domain="https://future-architect.github.io/tags/SLOconf/">SLOconf</category>
      
      
      <comments>https://future-architect.github.io/articles/20230518b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ネットワーク入門としてCCNA試験を受験してみた</title>
      <link>https://future-architect.github.io/articles/20230518a/</link>
      <guid>https://future-architect.github.io/articles/20230518a/</guid>
      <pubDate>Wed, 17 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;TIG DX ユニット 佐々木です。&lt;br&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG DX ユニット 佐々木です。<br><a href="/articles/20230417a/">春の入門祭り連載</a> 19 日目を担当します。</p><p>2022 年 4 月に Future に新卒入社して 1 年ほど経ちました。入社以来、AWS を利用した Web システムの設計・開発に従事していますが、システムを構築する上で必要なインフラ・ネットワーク・DB 等の知識は、業務に必要な範囲で部分的に調査・理解することが多いです。</p><p>今回は、システムを構築する要素を体系的・網羅的に学習する機会を求め、ネットワーク入門として CCNA 試験の勉強・受験・結果的に合格まで至った感想についてお話しします。</p><p>本記事では、ネットワーク初学者の私がどのような状態を目指して CCNA 試験の勉強を始め、その結果どれだけ近づけたかについてお話しできればと思います。</p><p>ネットワーク知識の詳細な説明は主な目的ではありません。</p><h2 id="CCNA-とは？"><a href="#CCNA-とは？" class="headerlink" title="CCNA とは？"></a>CCNA とは？</h2><p>Cisco Certified Network Associate を略して CCNA と呼びます。 CCNA は、Cisco Systems 社によって運営されているベンダー資格です。試験では、ネットワーキング設計、セキュリティ、および自動化に関する幅広い基礎知識が求められるほか、具体的なネットワーク構築スキルも問われます。そのため、 Cisco 製品を正しく扱う知識や技術も学習しました。</p><p>特定企業の製品の取り扱い方法を知っても…と思われるかもしれませんが、Cisco Systems 社は、国内ネットワーク機器分野において、2021 年時点で 48.1% と高いシェアを誇っており(図 1)、 Cisco 製品を正しく扱えることはスタンダードなネットワーク構築スキルの証明とも言えるかと思います。</p><img src="/images/20230518a/image.png" alt="Ciscoのシェアが高いことが分かる円グラフ" width="500" height="348" loading="lazy">図 1：国内ネットワーク機器市場、ベンダー別の支出額シェア実績、2021 年（出典：IDC Japan）<h2 id="その他のネットワーク試験との比較"><a href="#その他のネットワーク試験との比較" class="headerlink" title="その他のネットワーク試験との比較"></a>その他のネットワーク試験との比較</h2><p>ネットワーク系の資格としてはその他に、AWS 認定資格やネットワークスペシャリスト、CCNA の上位資格である CCNP を取得した・取得する予定だという声をよく耳にします。私の個人的な意見として、それぞれの資格について簡単に比較したいと思います。</p><h3 id="CCNA"><a href="#CCNA" class="headerlink" title="CCNA"></a>CCNA</h3><ul><li>Cisco のベンダー資格</li><li>ネットワーク・セキュリティ・自動化などの基礎知識 + Cisco 製品への理解が求められる</li><li>3 年間のみ有効であり、失効前に再受験し、更新が必要</li><li>受験料：42,900 円（税込）（高い）</li><li>年に何度でもオンラインでも受験できる</li></ul><h3 id="AWS-認定資格"><a href="#AWS-認定資格" class="headerlink" title="AWS 認定資格"></a>AWS 認定資格</h3><ul><li>AWS のベンダー資格</li><li>AWS サービスとその運用に関する知識が求められる</li><li>ネットワーク・セキュリティ・自動化などの概念や基礎は前提知識であり、問われることは少ない</li><li>3 年間のみ有効であり、失効前に再受験し、更新が必要</li><li>受験料：11,000 円〜30,000（税込）（レベルによって異なる）</li><li>年に何度でもオンラインでも受験できる</li></ul><h3 id="ネットワークスペシャリスト（ネスぺ）"><a href="#ネットワークスペシャリスト（ネスぺ）" class="headerlink" title="ネットワークスペシャリスト（ネスぺ）"></a>ネットワークスペシャリスト（ネスぺ）</h3><ul><li>国家資格</li><li>通信に関する幅広い知識に留まらず、IT 全般・マネジメントやストラテジ系の知識も求められる</li><li>設計課題はあるものの、実際の構築・設定のスキルは求められない</li><li>一度取得すれば、更新の必要性がない</li><li>受験料：5,700 円（税込）</li><li>年１回の対面受験のチャンスしかない</li><li>4 つの試験に合格する必要があり、時間にすると 9:30 ～ 16:30(1 日中テスト)</li></ul><h2 id="CCNA-試験を選んだ理由"><a href="#CCNA-試験を選んだ理由" class="headerlink" title="CCNA 試験を選んだ理由"></a>CCNA 試験を選んだ理由</h2><p>私は中長期的に、システムアーキテクチャの全体設計について議論できる状態になりたいと考えていました。<br>達成のためには業務経験はもちろんのこと、システムを構成するインフラ・ネットワーク・DB など幅広い知識を体系的・網羅的に有する必要があるかと思います。<br>応用情報技術者資格の取得を通じて基礎的な部分については抑えられた(はずな)ので、各分野について深掘りしていきたく、手始めにネットワーク関連の知識を習得する方法として以下の 4 つを候補として考えていました。</p><ol><li>ネットワーク関連の技術書を色々読む</li><li>AWS 認定資格取得に必要な知識を有する</li><li>ネットワークスペシャリスト取得に必要な知識を有する</li><li>CCNA・CCNP 資格に必要な知識を有する</li></ol><h3 id="1-ネットワーク関連の技術書を色々読む"><a href="#1-ネットワーク関連の技術書を色々読む" class="headerlink" title="1. ネットワーク関連の技術書を色々読む"></a>1. ネットワーク関連の技術書を色々読む</h3><p>色々本を読んで知識のインデックスを貼っていくのも良いのかもしれないのですが、基礎的な部分は頭の引き出しからスッと出せる状態にしたいと私は考えていました。<br>私は本から知識をインプットするだけでは頭の引き出し入れることができないため、何かアウトプットする機会が必要と考えて、この案は無くなりました。</p><h3 id="2-AWS-認定資格取得に必要な知識を有する"><a href="#2-AWS-認定資格取得に必要な知識を有する" class="headerlink" title="2. AWS 認定資格取得に必要な知識を有する"></a>2. AWS 認定資格取得に必要な知識を有する</h3><p>モダンなシステムはオンプレではなく AWS や Google Cloud などの Cloud プラットフォームを用いて構築することが多いことから、AWS 認定資格を身近に感じていました。<br>しかし、AWS 認定試験では AWS サービスの仕様・運用方法を問われることが多く、ネットワーキングやセキュリティについて直接問われることが少ないため、ネットワーク知識を体系的に学ぶ機会としては適していないと考え、この案は無くなりました。</p><h3 id="3-ネットワークスペシャリスト取得に必要な知識を有する"><a href="#3-ネットワークスペシャリスト取得に必要な知識を有する" class="headerlink" title="3. ネットワークスペシャリスト取得に必要な知識を有する"></a>3. ネットワークスペシャリスト取得に必要な知識を有する</h3><p>試験合格には通信に関する網羅的な知識が必要なほか、試験内容にネットワークの設計課題もあることから、なりたい状態に近づけるのはこれだ！と感じました。<br>しかし、試験内容が想像以上に高難易度で身の丈に合っていないほか、年 1 開催ということもあり敷居の高さを感じたため、この試験の前にファーストステップを踏むこととしました。</p><p>そのファーストステップとして選んだのが CCNA でした。ネットワーキング・セキュリティ・自動化などの基礎知識が幅広く求められ、試験も随時開催であることから取っ掛かりやすさを感じました。</p><h2 id="CCNA-試験を通じて、なりたい状態に近づけたのか"><a href="#CCNA-試験を通じて、なりたい状態に近づけたのか" class="headerlink" title="CCNA 試験を通じて、なりたい状態に近づけたのか"></a>CCNA 試験を通じて、なりたい状態に近づけたのか</h2><p>中長期的に、システムアーキテクチャの全体設計について議論できる状態になりたいと言っていましたが、CCNA 合格に必要な知識を取得しただけではネットワーク設計に対して誰かと議論はできそうにないです。<br>ただ、既存設計のシステム構成についてある程度言語化したり、実際に構築するイメージを身に付けることはできたと感じています。</p><p>知識を蓄えるだけでなく、ネスぺの設計課題に取り組んだり、システム設計業務を通じて試行錯誤する経験を積むことで、徐々に議論できるようになるのかなと思うので、その足掛かりとしては有益だったと感じます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回私はネットワーク入門として</p><ul><li>アウトプットする場を求めて技術書を読むだけではなく、</li><li>サービスの仕様・運用方法の理解が求められる AWS 認定資格ではなく、</li><li>体系的なネットワーク知識や、設計課題を解く力が求められるネットワークスペシャリスト資格の足掛かりとして、</li></ul><p>CCNA 試験の勉強をしました。</p><p>まだネットワーク初学者で、これから深掘りしていきたいという方にとっては、<br>ファーストステップとして取っ掛かりやすいとは思うので、候補の 1 つとして考えてみてはいかがでしょうか。<br>ただ受験料が 42,900 円（税込）とかなり高額なので、資格取得の支援があれば嬉しいですね…</p><p>本記事は以上です。春の入門祭り連載、続いては小橋さんの「technology radar を見てみよう」です！</p><p>私はしばらく新作ゼルダの世界へ行ってきます。</p><p>次は市川さんの<a href="/articles/20230522a/">Stanによるベイズ推定に入門して株価の推移を予測してみる</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Network/">Network</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</category>
      
      <category domain="https://future-architect.github.io/tags/CCNA/">CCNA</category>
      
      
      <comments>https://future-architect.github.io/articles/20230518a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WebAssemblyとEmscriptenに入門した</title>
      <link>https://future-architect.github.io/articles/20230517a/</link>
      <guid>https://future-architect.github.io/articles/20230517a/</guid>
      <pubDate>Tue, 16 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230517a/Emscripten_logo_full.png&quot; alt=&quot;&quot; width=&quot;612&quot; height=&quot;167&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230517a/Emscripten_logo_full.png" alt="" width="612" height="167" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>はじめまして。2022年4月入社、金融グループ所属の森です。</p><p><a href="/articles/20230417a/">春の入門ブログ連載</a>の19日目の記事です。</p><p>WebAssembly&#x2F;Emscriptenに入門した際の流れや気付きについて紹介します。</p><p>内容としては、</p><ol><li>WebAssemblyの概要</li><li>Emscriptenの概要</li><li>EmscriptenでCをWebAssemblyにコンパイルする方法</li><li>JavaScriptからの呼び出し方</li></ol><p>について触れます。</p><h2 id="1-WebAssemblyの概要"><a href="#1-WebAssemblyの概要" class="headerlink" title="1. WebAssemblyの概要"></a>1. WebAssemblyの概要</h2><p>WebAssemblyは</p><ul><li>CやRustなどで書いたコードから生成することができる</li><li>ウェブ上でJavaScriptと一緒に動く</li><li>高速に動作する</li></ul><p>以上のような特徴を持った言語で、<strong>Wasm</strong>という略称を持っています。</p><p>CやRustで書いた既存のソースコードを使用したいケースや、3D処理のような実行速度が求められるケースで活用できそうです。</p><h2 id="2-Emscriptenの概要"><a href="#2-Emscriptenの概要" class="headerlink" title="2. Emscriptenの概要"></a>2. Emscriptenの概要</h2><p>EmscriptenはC&#x2F;C++をWebAssemblyにコンパイルするツールです。</p><p>UnrealEngineやUnityなどのゲームエンジンや、QtのようなアプリケーションフレームワークをWasmに変換するためなどに利用されています。その他にも多くの利用例が<a href="https://github.com/emscripten-core/emscripten/wiki/Porting-Examples-and-Demos">wiki</a>にまとめられています。</p><h2 id="3-EmscriptenでCからWasmにコンパイルする"><a href="#3-EmscriptenでCからWasmにコンパイルする" class="headerlink" title="3. EmscriptenでCからWasmにコンパイルする"></a>3. EmscriptenでCからWasmにコンパイルする</h2><p>EmscriptenでC言語で書かれたソースコードをWasmにコンパイルします。Emscripten SDKの導入は<a href="https://emscripten.org/docs/getting_started/downloads.html">こちら</a>から行います。</p><h3 id="使用したCプログラム"><a href="#使用したCプログラム" class="headerlink" title="使用したCプログラム"></a>使用したCプログラム</h3><p><code>test.c</code> を以下の内容で作成します。<br>ここで定義している、2つの整数を受け取り和を返す関数 <code>add()</code> をブラウザから使用することを目指します。</p><p>エクスポートする関数は <code>EMSCRIPTEN_KEEPALIVE</code> というマクロで指定しています。<br>かわりにコンパイル時のオプションとして指定することも可能です。</p><figure class="highlight c"><figcaption><span>test.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;emscripten/emscripten.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">EMSCRIPTEN_KEEPALIVE</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Wasmへのコンパイル"><a href="#Wasmへのコンパイル" class="headerlink" title="Wasmへのコンパイル"></a>Wasmへのコンパイル</h3><p>先程用意したCプログラムをWasmにコンパイルします。<br>コマンドは以下の通りです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emcc -o test.js test.c -sEXPORTED_RUNTIME_METHODS=ccall,cwrap</span><br></pre></td></tr></table></figure><p>このコマンドを実行することによって <code>test.wasm</code> と <code>test.js</code> が出力されます。</p><p><code>test.wasm</code> はCプログラムが変換されたバイナリです。<br><code>test.js</code> は <code>test.wasm</code> をコンパイル、インスタンス化する内容などを含むJavaScriptファイルです。</p><p><code>-sEXPORTED_RUNTIME_METHODS=ccall,cwrap</code> というオプションによって、<code>test.js</code>にこれらのメソッドが追加されます。<code>ccall</code>,<code>cwrap</code> はどちらもエクスポートされたCの関数を呼び出すメソッドです。詳細は後ほど説明します。</p><p>また以下のようにコマンドを実行した場合、<code>test.js</code> を実行しブラウザに表示する <code>test.html</code> も出力することができます。<br>出力される <code>test.html</code> は今回の記事で説明しないものを多く含むので、htmlについては自分で作成したものを使用していきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emcc -o test.html test.c -sEXPORTED_RUNTIME_METHODS=ccall,cwrap</span><br></pre></td></tr></table></figure><h2 id="4-JavaScriptからWasmを呼び出す"><a href="#4-JavaScriptからWasmを呼び出す" class="headerlink" title="4. JavaScriptからWasmを呼び出す"></a>4. JavaScriptからWasmを呼び出す</h2><p>JavaScriptからコンパイルされたCの関数を呼び出す2種類の方法について試してみました。</p><h3 id="ccallを使用した方法"><a href="#ccallを使用した方法" class="headerlink" title="ccallを使用した方法"></a>ccallを使用した方法</h3><p>以下のようにhtmlを作成し、ブラウザで読み込んでみます。</p><figure class="highlight html"><figcaption><span>ccall.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Wasm<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    value 1 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;value1&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    value 2 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;value2&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> result = <span class="title class_">Module</span>.<span class="title function_">ccall</span>(</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;add&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;number&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          [<span class="string">&quot;number&quot;</span>, <span class="string">&quot;number&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">          [</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;value1&quot;</span>).<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;value2&quot;</span>).<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript">          ]</span></span><br><span class="line"><span class="language-javascript">        );</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>).<span class="property">textContent</span> = result;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/20230517a/image.png" alt="" width="509" height="159" loading="lazy"><p>addボタンを押すたびに <code>Module.ccall()</code> によってCプログラムで定義した <code>add()</code> が呼び出され和を計算しています。</p><p>引数には呼び出すCの関数の”関数名”、”戻り値の型”、”引数の型”、”引数”を渡すことで実行することができます。</p><h3 id="cwrapを使用した方法"><a href="#cwrapを使用した方法" class="headerlink" title="cwrapを使用した方法"></a>cwrapを使用した方法</h3><p>次に、新しく以下のhtmlを作成し再度ブラウザで読み込んでみます。</p><figure class="highlight html"><figcaption><span>cwrap.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Wasm<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Module</span>.<span class="property">onRuntimeInitialized</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> add = <span class="title class_">Module</span>.<span class="title function_">cwrap</span>(<span class="string">&quot;add&quot;</span>,<span class="string">&#x27;number&#x27;</span>,[<span class="string">&#x27;number&#x27;</span>, <span class="string">&#x27;number&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>))</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">3</span>,<span class="number">4</span>))</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">5</span>,<span class="number">6</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/20230517a/image_2.png" alt="" width="849" height="182" loading="lazy"><p>コンソールに計算結果が表示されていることが確認できます。<code>cwrap</code> はCの関数の”関数名”、”戻り値の型”、”引数の型”を引数とし、Cの関数を実行するJavaScriptの関数を返します。</p><p>何度も同じ関数を使用する必要がある場合は <code>ccall</code> に比べて記述がスッキリしますね。</p><p>最初に実装した際はscriptタグを以下のように書いてエラーが発生しました。どうやらランタイムの準備が完了する前にwasmモジュールを使おうとしたことが原因のようです。</p><p><code>Module.onRuntimeInitialized</code> によって初期化の完了後に実行することで回避ができました。</p><figure class="highlight html"><figcaption><span>cwrap_error.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> add = <span class="title class_">Module</span>.<span class="title function_">cwrap</span>(<span class="string">&quot;add&quot;</span>, <span class="string">&quot;number&quot;</span>, [<span class="string">&quot;number&quot;</span>, <span class="string">&quot;number&quot;</span>]);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">3</span>, <span class="number">4</span>));</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">5</span>, <span class="number">6</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught RuntimeError: Aborted(Assertion failed: native <span class="keyword">function</span> `add` called before runtime initialization)</span><br></pre></td></tr></table></figure><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>ブラウザ上でC言語を動作させる技術として以前から気になっていたWebAssemblyとEmscriptenについて、簡単に触ってみた内容を記事にさせていただきました。Emscriptenによって出力される内容がかなり充実しており、ほとんど実装することなくブラウザ上での動作を実現できました。</p><p>今回はEmscriptenを中心に理解を深めることができましたが、今後はWebAssembly自体について詳しく見ていきたいと思います。</p><p>次の記事は佐々木さんの<a href="/articles/20230518a/">ネットワーク入門としてCCNA試験を受験してみた</a>です！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/WebAssembly/">WebAssembly</category>
      
      <category domain="https://future-architect.github.io/tags/Emscripten/">Emscripten</category>
      
      
      <comments>https://future-architect.github.io/articles/20230517a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JSパッケージ管理ツールpnpmの概要と内部構造を眺める</title>
      <link>https://future-architect.github.io/articles/20230516a/</link>
      <guid>https://future-architect.github.io/articles/20230516a/</guid>
      <pubDate>Mon, 15 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230516a/image.png&quot; alt=&quot;&quot; width=&quot;225&quot; height=&quot;160&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;画像は&lt;a href=&quot;https://pnpm.io/logos&quot;&gt;pnpm</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230516a/image.png" alt="" width="225" height="160" loading="lazy"><p>画像は<a href="https://pnpm.io/logos">pnpm Logos</a>より引用しました。</p><hr><p>2022年に入社したTIGコアテクノロジーユニット所属の齋藤と申します。</p><p><a href="https://vercel.com/">Vercel</a>に触れてみようVercel CLIのインストール方法を調べていたところ、パッケージ管理ツールを用いたインストール方法としてnpm, Yarnと並んでpnpm<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>が書かれていました。npmとYarnは利用したことがある一方で、pnpmは馴染みがなく、触れたことがありませんでした。</p><p>pnpmではどのようにパッケージを管理しているかなどの特徴を調べました。</p><h2 id="pnpmの概要"><a href="#pnpmの概要" class="headerlink" title="pnpmの概要"></a>pnpmの概要</h2><p><a href="https://pnpm.io/">pnpm</a>はJavaScript系のパッケージ管理ツールです。pnpmは<code>performant npm</code>の略であり<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>、その名の通りパフォーマンス性を重視した設計になっています。</p><p><code>package.json</code>を利用するほか、npmリポジトリにあるほとんどのパッケージが利用可能であるなど、npmとは互換性を持っています。</p><p>pnpm公式ドキュメントによると、pnpmは以下の特徴を有しています。</p><ul><li>高速: 他のツールより最大2倍高速に動作する</li><li>高効率: <code>node_modules</code>配下にあるファイルはコンテンツのアドレス指定可能な単一のストレージ（contents-addressable storage）にあるファイルの複製、または、ハードリンクになっている</li><li>モノレポのサポート: 一つのレポジトリにパッケージを複数配置する構成をビルトインでサポートしている（workspace機能）</li><li>厳格: デフォルトではnon-flat node_modulesを採用しており、<code>node_modules</code>配下にある任意のパッケージにはアクセスできないようになっている（<code>dependecies</code>にないパッケージにアクセスできない）</li></ul><p>npmやYarnでも対応している「モノレポのサポート」以外について、どのようにして、上記特徴を実現しているのかを後ほど見ていきます。</p><h2 id="pnpmの初歩的な利用方法"><a href="#pnpmの初歩的な利用方法" class="headerlink" title="pnpmの初歩的な利用方法"></a>pnpmの初歩的な利用方法</h2><p>pnpmでインストールしたパッケージの管理方法を見る前に、ごく簡単に利用方法を見ていきます。</p><p>以降Linux環境で用いることを想定してコマンド等を記載します。</p><p>pnpmのインストール方法は<a href="https://pnpm.io/installation">pnpm Installation</a>を参照してください。</p><h3 id="パッケージの追加-x2F-削除"><a href="#パッケージの追加-x2F-削除" class="headerlink" title="パッケージの追加&#x2F;削除"></a>パッケージの追加&#x2F;削除</h3><p>コマンド自体は他のツールと大差ありません。expressを追加する場合を例とします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">expressを追加する</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm add express</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">node_modules  package.json  pnpm-lock.yaml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">package.jsonを確認する</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> package.json</span></span><br><span class="line">&#123;</span><br><span class="line">        &quot;dependencies&quot;: &#123;</span><br><span class="line">                &quot;express&quot;: &quot;^4.18.2&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Expressを削除する</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm remove express</span></span><br></pre></td></tr></table></figure><p><code>pnpm add</code>を実行すると<code>package.json</code>, <code>pnpm-lock.yml</code>が生成され、<code>node_modules/</code>配下にパッケージがインストールされます。<code>package.json</code>のフォーマットは<code>npm</code>と同様です。また、<code>pnpm-lock.yaml</code>はnpmの<code>package-lock.json</code>と同様にインストールしたパッケージのバージョン等の情報が記録されています。</p><p>既にある<code>package.json</code>から依存パッケージをインストールする場合は、<code>pnpm install</code>を実行すればよいです。</p><h3 id="スクリプトの実行"><a href="#スクリプトの実行" class="headerlink" title="スクリプトの実行"></a>スクリプトの実行</h3><p>こちらも<code>npm run &lt;script_name&gt;</code>と同様のコマンドで実行できます。<code>pnpm start</code>や<code>pnpm test</code>などの短縮形で<code>start</code>スクリプトや<code>test</code>スクリプトを実行できることも同様にできます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> package.json</span></span><br><span class="line">&#123;</span><br><span class="line">        &quot;scriptss&quot;: &#123;</span><br><span class="line">                &quot;hello&quot;: &quot;echo hello&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm run hello</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">@ hello /path/to/preject</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">echo</span> hello</span></span><br><span class="line"></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h2 id="内部構成を見てみる"><a href="#内部構成を見てみる" class="headerlink" title="内部構成を見てみる"></a>内部構成を見てみる</h2><p>基本的な利用方法はnpmと大差ないpnpmですが、インストールした依存パッケージの管理方法は大きく異なります。pnpmがどのように管理しているかを見ていきます。</p><p>以下のpnpm, npmのバージョンで確認しています。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm --version</span></span><br><span class="line">8.4.0</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm --version</span></span><br><span class="line">9.5.1</span><br></pre></td></tr></table></figure><p>また、今回は特にオプション等を設定していない場合の構造について説明します（設定によってはnpmと同様のディレクトリ構造にすることなども可能です）</p><h3 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a>node_modules</h3><p>まずは、<code>node_modules/</code>配下を見てみます。依存パッケージに<code>express@4.18.2</code>のみを指定した<code>package.json</code>で<code>pnpm install</code>を実行します。実行後の<code>node_modules/</code>配下は以下の通りです。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pnpm</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> node_modules/</span></span><br><span class="line">express</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree -a node_modules/</span></span><br><span class="line">node_modules/</span><br><span class="line">├── express -&gt; .pnpm/express@4.18.2/node_modules/express</span><br><span class="line">├── .modules.yaml</span><br><span class="line">└── .pnpm</span><br><span class="line">    ├── accepts@1.3.8</span><br><span class="line">    │   └── node_modules</span><br><span class="line">    │       ├── accepts</span><br><span class="line">    │       │   ├── HISTORY.md</span><br><span class="line">    │       │   ├── index.js</span><br><span class="line">    │       │   ├── LICENSE</span><br><span class="line">    │       │   ├── package.json</span><br><span class="line">    │       │   └── README.md</span><br><span class="line">    │       ├── mime-types -&gt; ../../mime-types@2.1.35/node_modules/mime-types</span><br><span class="line">    │       └── negotiator -&gt; ../../negotiator@0.6.3/node_modules/negotiator</span><br><span class="line">    ...</span><br><span class="line">    ├── express@4.18.2</span><br><span class="line">    │   └── node_modules</span><br><span class="line">    │       ├── accepts -&gt; ../../accepts@1.3.8/node_modules/accepts</span><br><span class="line">    │       ├── array-flatten -&gt; ../../array-flatten@1.1.1/node_modules/array-flatten</span><br><span class="line">    │       ...</span><br><span class="line">    │       ├── express</span><br><span class="line">    │       │   ├── History.md</span><br><span class="line">    │       │   ├── index.js</span><br><span class="line">    ...</span><br><span class="line">    ├── node_modules</span><br><span class="line">    │   ├── accepts -&gt; ../accepts@1.3.8/node_modules/accepts</span><br><span class="line">    │   ├── array-flatten -&gt; ../array-flatten@1.1.1/node_modules/array-flatten</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>同様に、npmで<code>npm install</code>した場合の<code>node_modules</code>配下を確認します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npm</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> node_modules/</span></span><br><span class="line">accepts array-flatten ... express ...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree -a node_modules/</span></span><br><span class="line">node_modules/</span><br><span class="line">├── accepts</span><br><span class="line">│   ├── HISTORY.md</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── LICENSE</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   └── README.md</span><br><span class="line">...</span><br><span class="line">├── express</span><br><span class="line">│   ├── History.md</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── lib</span><br><span class="line">│   │   ├── application.js</span><br><span class="line">│   │   ├── express.js</span><br><span class="line">│   │   ...</span><br><span class="line">│   │   └── view.js</span><br><span class="line">│   ├── LICENSE</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   └── Readme.md</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>pnpmの場合、<code>/node_modules/</code>直下には隠しファイルを除くと<code>dependencies</code>に記述した<code>express</code>のみ存在し、<code>express</code>はシンボリックリンクになっています。リンク先と同階層には<code>express</code>が依存するパッケージへのシンボリックリンクが張られています。リンクの関係を下の図で示しました。</p><p>node.jsでは実際に存在する場所（リンク先）から依存パッケージを解決するため、このようにシンボリックリンクを用いても依存パッケージを利用できます。</p><img src="/images/20230516a/image_2.png" alt="image.png" width="1200" height="1218" loading="lazy"><p>一方で、npm（V3以降）では基本的に<code>/node_modules/</code>直下にdependenciesの書かれたパッケージ以外にも、それらが再帰的に依存する全パッケージが配置されています。</p><p>npmでは、V2以前はある依存パッケージが依存するパッケージは依存元のパッケージ内にある<code>node_modules</code>配下に置かれる階層構造になっていましたが、V3以降はフラットな構造になっています。(ただし、依存パッケージ<code>foo@1.0</code>, <code>bar@1.0</code>がそれぞれ<code>baz@1.x</code>, <code>baz@1.y</code>に依存している場合、<code>/node_modules/foo/node_modules/baz</code>に<code>baz@1.x</code>パッケージが置かれる可能性があるなど、階層が生じる場合もあります<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>)</p><p>しかし、フラットな構造にしたことで<code>package.json</code>の<code>dependencies</code>などで指定していないパッケージをアプリで利用することができるようになりました。例えば、<code>express</code>のみを<code>dependencies</code>に指定した状態で、以下のスクリプトをnodeで実行しようとします。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cookie = <span class="built_in">require</span>(<span class="string">&#x27;cookie&#x27;</span>)</span><br></pre></td></tr></table></figure><p>npmでパッケージをインストールして、実行した場合エラーになりません。<code>cookie</code>は<code>express</code>に依存されているため、<code>node_modules</code>直下にあり、nodeは解決できるからです。</p><p><code>dependencies</code>で指定していないパッケージを利用することは問題が起きる可能性があります。例えば、<code>express</code>のメジャーバージョンを固定していたとします。<code>cookie</code>でメジャーアップデートが行われ、<code>express</code>が対応した場合、<code>express</code>に破壊的な変更がなければマイナーアップデートで更新されます。しかし、この状態で<code>npm update</code>を実行すると<code>cookie</code>がバージョンアップされるため、意図しない不具合が生じる可能性があります。</p><p>pnpmでは<code>/node_modules/</code>直下には<code>dependencies</code>などで指定したパッケージしかないため、このような問題はおきません。上記スクリプトを実行するとエラーになります。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node index.js</span></span><br><span class="line">node:internal/modules/cjs/loader:1078</span><br><span class="line">  throw err;</span><br><span class="line">  ^</span><br><span class="line"></span><br><span class="line">Error: Cannot find module &#x27;cookie&#x27;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="contents-addressable-storage"><a href="#contents-addressable-storage" class="headerlink" title="contents-addressable storage"></a>contents-addressable storage</h3><p>pnpmでは、各プロジェクトの<code>node_modules</code>にパッケージを追加したとき、必ずディスク上にファイルの中身が配置されるとは限りません。pnpmを用いてダウンロードしたファイルなどはグローバルなストレージに一元管理することで、ディスク使用容量の削減や、高速化を図っています。</p><p>レポジトリからダウンロードしてきたファイルはグローバルなストレージに保存され、各プロジェクトのパッケージからハードリンクが張られます。</p><p>ハードリンクはファイルの属性情報を保持しているinodeに対して、リンクが張られます。シンボリックリンクとは異なり、ファイルに対するリンクではないため、最初に作成したファイルが削除されてもリンクおよびファイルの中身は維持され、あるinodeを参照するファイルがなくなったときファイルが削除されます。</p><p>※上では「グローバルなストレージに保存され…」と書きましたが、システム的にはこれもハードリンクの一つになります。</p><p>pnpmでは<code>$PNPM_HOME/store</code>がグローバルなストレージとして用いられます。Linux環境のデフォルトでは<code>$HOME/.local/share/pnpm/store</code>です。中身を見てみます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree store/</span></span><br><span class="line">store/</span><br><span class="line">└── v3</span><br><span class="line">    └── files</span><br><span class="line">        ├── 00</span><br><span class="line">        │   ├── ae061b93bd3f7143a55922083f16ae281852332e5d1cee867417fc1b1189400def1e6700fb03ef304d0899e31c1e23f1d38cfc6c6efa14a9466958650359a7</span><br><span class="line">        │   └── dbd6ec9969ea9d859a9fd30339a5dd4fc70f2c18d1b49a9a298389a4473a8e7f5a6fa8d2a820053643c143d7202dfdba59236e19ac28b5c19225d2df52f386</span><br><span class="line">        ├── 02</span><br><span class="line">        │   └── 07cf364e3eac974cae61ec68fe3975fd1f1eb6150f51293ce67f62dbb0f27a3d9c193101ef282dcd099fc653ca73cd3c875c18e5e266964038e3334697b5b4</span><br><span class="line">        ...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> store/V3/file/00/ae061b... | <span class="built_in">head</span> 5</span></span><br><span class="line">1.2.0 / 2022-03-22</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">  * Remove set content headers that break response</span><br><span class="line">  * deps: on-finished@2.4.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sha512sum</span> store/V3/file/00/ae061b...</span></span><br><span class="line">00ae061b...</span><br></pre></td></tr></table></figure><p>このように、ファイルの中身のsha512とファイルの中身のキーバリューストアになっていることがわかります。ファイルのsha512が一致するファイルがstoreに存在すればそれをハードリンクし、なければstoreに作成してからハードリンクするという仕組みになっています。</p><p>また、ファイルの中身以外にもパッケージのあるディレクトリに含まれるファイル情報を管理するindexファイルも存在し、Gitのblobとtreeオブジェクトの管理方法に似ていると思いました。</p><p>例えば、あるパッケージの複数のバージョンが依存パッケージとして必要なとき。2つのバージョン間では少数のファイルのみが変更され、多数のファイルには変更がないことも多いです。pnpmでは差分があるファイルのみ、新たにストレージに保存されるため、効率的に保存できます。</p><p>なお、ハードリンクでは先述の通りinodeの被参照数が0になったときファイルが削除されますが、storeにあるファイルが参照しているため、どのプロジェクトでも使われなくなったファイルもstoreに残り続けます。これらのファイルは<code>pnpm store prune</code>コマンドを実行することで、削除できます。</p><h2 id="pnpmを利用するか"><a href="#pnpmを利用するか" class="headerlink" title="pnpmを利用するか"></a>pnpmを利用するか</h2><p>ここまでpnpmの概要や、内部ではどのように管理することで高効率になっているかなどを見てきましたが、pnpmを趣味や、仕事の開発で使ってみたいか考えます。</p><p>まず、学習や趣味の開発などの個人利用ではpnpmの恩恵を受けやすく、利用しやすいと思います。以下の理由で恩恵を受けやすいと考えます。</p><ul><li>学習や、趣味の開発では様々なリポジトリからクローンするなどして、多数のnpmプロジェクトがローカルに保存されることになりやすいため、ディスク使用容量削減効果は大きい</li><li>色々なパッケージを試す機会が多く、パッケージをインストールする頻度が高くなるため、インストール高速化の恩恵を受けやすい</li></ul><p>一方、業務利用の場合でもpnpmは利用できそうですが、いくつか懸念点があります。</p><ul><li>pnpmのネットでの情報量が少ない<ul><li>例えば、<code>&lt;ツール名&gt; error</code>でのGoogle検索件数を見ると、npmが4,200万件、yarnが4,000万件であるのに対して、pnpmは70万件です。トラブルで開発が止まった時に多大な損失が生じる業務での開発では情報量の少なさは問題になりやすいでしょう</li></ul></li><li>他のツールから移行する場合、メンバーのキャッチアップする必要があったり、作業自動化に用いるスクリプトを改修をしなければいけなくなったりして、移行コストがかかる（pnpmだけではなく、移行全体にいえる問題ですが）</li></ul><p>そして、pnpmを用いることで早くなるのはパッケージのインストールにかかる時間であり、アプリのパフォーマンスが向上するわけではありません。CIでテストを実行するときなどで、セットアップに多くの時間がかかっている場合はpnpmを使う効果が高いですが、そうではないことも多いでしょう。</p><p>pnpmを導入する手間に対して、pnpmを使うことによるメリットが見合っているかは考える必要があります。</p><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>pnpmの概要と、内部でどのように管理しているのかを眺めました。</p><p>まだpnpmをそこまで本格的には利用してはいませんが、使っていて特に問題なければ、少なくとも個人開発では利用したいと考えています。</p><p>次は森さんの<a href="/articles/20230517a/">WebAssemblyとEmscriptenに入門した</a> です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><code>pnpm</code>が正確な表記です。ちなみに、<a href="https://pnpm.io/">公式ドキュメントトップページ</a>のタイトルでは<code>pnpm</code>の各文字の大文字小文字がランダムに決まる（20秒ごとに再生成される）仕掛けになっており、筆者が最初に表記を確認したときは<code>Pnpm</code>だったため、これが正確な表記と暫く勘違いしていました。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://pnpm.io/faq#what-does-pnpm-stand-for">https://pnpm.io/faq#what-does-pnpm-stand-for</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">詳細はnpmの<a href="https://npm.github.io/how-npm-works-docs/npm3/how-npm3-works.html">How npm3 Works</a>を参照してください</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%82%A2%E3%83%86%E3%82%AF/">コアテク</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/npm/">npm</category>
      
      <category domain="https://future-architect.github.io/tags/pnpm/">pnpm</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E7%AE%A1%E7%90%86/">パッケージ管理</category>
      
      
      <comments>https://future-architect.github.io/articles/20230516a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Swiftの自動テスト〜導入と基本的なテスト手法〜</title>
      <link>https://future-architect.github.io/articles/20230515a/</link>
      <guid>https://future-architect.github.io/articles/20230515a/</guid>
      <pubDate>Sun, 14 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;はじめまして、2023年3月キャリア入社、HealthCare Inovation</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>はじめまして、2023年3月キャリア入社、HealthCare Inovation Group(HIG)所属の寒河江です。<br><a href="/articles/20230417a/">春の入門ブログ連載</a>の17日目です。</p><p>本記事はSwiftでの自動テストについての入門記事です。SwiftはXcodeを用いてiOSアプリが作成でき、自作して手元の端末で動きが見やすいため初心者がモチベーション維持したまま開発できる良い題材かなと思います。「作って動いて楽しいなぁ」→「テストしてみよう！」→ <strong>「楽にできる方法ないかな？」</strong> と思った方に見ていただければです。</p><p>簡単なメモアプリを作成し、それに対して部分的にテストコードを書いてみたので早速紹介していきます。</p><h2 id="作ったメモアプリ"><a href="#作ったメモアプリ" class="headerlink" title="作ったメモアプリ"></a>作ったメモアプリ</h2><p><a href="https://github.com/SagaeKugo/CRUD">https://github.com/SagaeKugo/CRUD</a></p><img src="/images/20230515a/メモ動画.gif" alt="メモ動画.gif" width="360" height="240" loading="lazy"><h2 id="XCTestのセットアップ"><a href="#XCTestのセットアップ" class="headerlink" title="XCTestのセットアップ"></a>XCTestのセットアップ</h2><p>今回はプロジェクト作成後にテストを追加します。</p><p>Xcodeを開いてFile→New→Targetを選択し</p><img src="/images/20230515a/スクリーンショット_2023-05-15_12.24.45.png" alt="" width="1144" height="708" loading="lazy"><p>対象となるテストを追加します。今回はUT&#x2F;UIテストどちらも実施するためどちらも追加します。</p><img src="/images/20230515a/スクリーンショット_2023-05-15_12.24.03.png" alt="" width="1200" height="858" loading="lazy"><p>テスト用のフォルダが作成され、TARGETにテストが追加されました。</p><img src="/images/20230515a/スクリーンショット_2023-05-15_12.31.48.png" alt="" width="966" height="644" loading="lazy"><h2 id="UT対象"><a href="#UT対象" class="headerlink" title="UT対象"></a>UT対象</h2><p>例のため、極端に簡素化した関数を作成してテストします</p><figure class="highlight swift"><figcaption><span>Utils.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="comment">// テスト用足し算関数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">calcAdd</span>(<span class="params">a</span>: <span class="type">Int</span> , <span class="params">b</span>: <span class="type">Int</span>)  -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">+</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// テスト引き算関数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">calcSub</span>(<span class="params">a</span>: <span class="type">Int</span> , <span class="params">b</span>: <span class="type">Int</span>)  -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">-</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// テスト用割り算関数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">calcDiv</span>(<span class="params">a</span>: <span class="type">Int</span> , <span class="params">b</span>: <span class="type">Int</span>)  -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">/</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// テスト用掛け算関数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">calcMulti</span>(<span class="params">a</span>: <span class="type">Int</span> , <span class="params">b</span>: <span class="type">Int</span>)  -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">*</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UTの実施①〜デフォルトで入っている関数の扱い〜"><a href="#UTの実施①〜デフォルトで入っている関数の扱い〜" class="headerlink" title="UTの実施①〜デフォルトで入っている関数の扱い〜"></a>UTの実施①〜デフォルトで入っている関数の扱い〜</h2><p>先ほどUnit Testing Bungleを選択して追加したCRUDTestsにテストコードを記載していきます。</p><figure class="highlight swift"><figcaption><span>CRUDTests.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"><span class="keyword">@testable</span> <span class="keyword">import</span> CRUD</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CRUDTests</span>: <span class="title class_">XCTestCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">setUpWithError</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="comment">// Put setup code here. This method is called before the invocation of each test method in the class.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">tearDownWithError</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="comment">// Put teardown code here. This method is called after the invocation of each test method in the class.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">testExample</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="comment">// This is an example of a functional test case.</span></span><br><span class="line">        <span class="comment">// Use XCTAssert and related functions to verify your tests produce the correct results.</span></span><br><span class="line">        <span class="comment">// Any test you write for XCTest can be annotated as throws and async.</span></span><br><span class="line">        <span class="comment">// Mark your test throws to produce an unexpected failure when your test encounters an uncaught error.</span></span><br><span class="line">        <span class="comment">// Mark your test async to allow awaiting for asynchronous code to complete. Check the results with assertions afterwards.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">testPerformanceExample</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="comment">// This is an example of a performance test case.</span></span><br><span class="line">        measure &#123;</span><br><span class="line">            <span class="comment">// Put the code you want to measure the time of here.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 足し算</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">testCulcAdd</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="type">XCTAssertEqual</span>(<span class="type">CRUD</span>.calcAdd(a: <span class="number">27</span> , b: <span class="number">2</span>) , <span class="number">29</span>)</span><br><span class="line">        <span class="type">XCTAssertEqual</span>(<span class="type">CRUD</span>.calcAdd(a: <span class="number">2</span> , b: <span class="number">2</span>) , <span class="number">4</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引き算</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">testCulcSub</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="type">XCTAssertEqual</span>(<span class="type">CRUD</span>.calcSub(a: <span class="number">27</span> , b: <span class="number">2</span>) , <span class="number">25</span>)</span><br><span class="line">        <span class="type">XCTAssertEqual</span>(<span class="type">CRUD</span>.calcSub(a: <span class="number">2</span> , b: <span class="number">22</span>) , <span class="operator">-</span><span class="number">20</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 割り算</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">testCulcDiv</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="type">XCTAssertEqual</span>(<span class="type">CRUD</span>.calcDiv(a: <span class="number">27</span> , b: <span class="number">2</span>) , <span class="number">13</span>)</span><br><span class="line">        <span class="type">XCTAssertEqual</span>(<span class="type">CRUD</span>.calcDiv(a: <span class="number">2</span> , b: <span class="number">2</span>) , <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 掛け算</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">testCulcMulti</span>()<span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="type">XCTAssertEqual</span>(<span class="type">CRUD</span>.calcMulti(a: <span class="number">27</span> , b: <span class="number">2</span>) , <span class="number">54</span>)</span><br><span class="line">        <span class="type">XCTAssertEqual</span>(<span class="type">CRUD</span>.calcMulti(a: <span class="number">3</span> , b: <span class="number">2</span>) , <span class="number">6</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>デフォルトで4つのテスト関数が記載されていますが、これらはざっと以下の意味で、今回は変更する必要はないので無視します。</p><ul><li><code>setUpWithError()</code><ul><li>→各テストを実行する前に毎回呼ばれます。</li></ul></li><li>tearDownWithError()&#96;<ul><li>→各テスト実行後に毎回呼ばれます。</li></ul></li><li><code>testExample()</code><ul><li>→テストコードのサンプルです。&lt;test + テスト対象のメソッド名&gt;</li></ul></li><li><code>testPerformanceExample()</code><ul><li>→パフォーマンステストのサンプルです。&lt;testPerformance + テスト対象のメソッド名&gt;</li></ul></li></ul><p>そのため、XCTestCaseをまとめてテストを回すと、</p><ol><li><code>setUpWithError()</code></li><li><code>testExample()</code></li><li><code>tearDownWithError()</code></li><li><code>setUpWithError()</code></li><li><code>testCulcAdd()</code></li><li><code>tearDownWithError()</code></li></ol><p>…という流れでテストが動きます。</p><h2 id="UTの実施②〜関数の追加、テスト実行〜"><a href="#UTの実施②〜関数の追加、テスト実行〜" class="headerlink" title="UTの実施②〜関数の追加、テスト実行〜"></a>UTの実施②〜関数の追加、テスト実行〜</h2><p><code>@testable import CRUD</code>と記載することでCRUDアプリ内のpublic,internalシンボルのテストが可能になります。</p><p>Sampleアプリを作成した場合は<code>@testable import Sample</code>になりますね。</p><p>続いてテスト関数を作成します。</p><p>内容は特筆すべき部分はないと思うので省略(参考サイトは末尾に記載)しますが、テスト関数を作成する際は必ず先頭に<code>test</code>と入れる必要があります。<br>先頭にtestと記載することでテストメソッドとして認識され、テストできる関数には左側に菱形マークがつきます。</p><img src="/images/20230515a/スクリーンショット_2023-05-15_13.08.18.png" alt="" width="890" height="150" loading="lazy"><img src="/images/20230515a/スクリーンショット_2023-05-15_13.09.07.png" alt="" width="898" height="152" loading="lazy"><p>それぞれの関数単位で菱形ボタンを押してテスト実行することも可能ですし、CRUDTestsクラスの菱形ボタンを押すことでクラス内のテストをまとめて実施することも可能です。</p><p>成功すると緑のチェックがつき、失敗した場合は赤くバツが出てくれます。</p><img src="/images/20230515a/スクリーンショット_2023-05-15_13.14.12.png" alt="" width="1200" height="771" loading="lazy"><img src="/images/20230515a/スクリーンショット_2023-05-15_13.17.52.png" alt="" width="1200" height="555" loading="lazy"><p>失敗した時のログはこちらから確認できます。</p><img src="/images/20230515a/スクリーンショット_2023-05-15_13.25.31.png" alt="" width="1200" height="441" loading="lazy"><h2 id="UIテストの実施①"><a href="#UIテストの実施①" class="headerlink" title="UIテストの実施①"></a>UIテストの実施①</h2><p>UI Testing Bungleを選択して追加したCRUDUITestsにテストコードを記載していきます。</p><p>デフォルトで<code>CRUDUITests.swift</code>と<code>CRUDUITestsLaunchTests.swift</code>の2ファイル作成されていますが、今回はCRUDUITests.swiftにテストを記載します。デフォルトで書かれているテスト関数はUTで紹介しているものと同じ役割なので省略します。</p><h2 id="UIテストの実施②"><a href="#UIテストの実施②" class="headerlink" title="UIテストの実施②"></a>UIテストの実施②</h2><p>今回テストしたのは下記の１関数のみです。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">testAddDelete</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> app <span class="operator">=</span> <span class="type">XCUIApplication</span>()</span><br><span class="line">    <span class="type">XCTContext</span>.runActivity(named: <span class="string">&quot;Launch app&quot;</span>) &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">        app.launch()</span><br><span class="line">    &#125;</span><br><span class="line">    app.buttons[<span class="string">&quot;testAdd&quot;</span>].firstMatch.tap()</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    app.buttons[<span class="string">&quot;testDelete&quot;</span>].firstMatch.tap()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>testAddボタンを押下することでメモを１０件登録し、testDeleteボタンを押下することでメモを全件削除しています。</p><p>ユーザーが操作せずに見た目が変わることだけを確認したいためメモ内容はチェック対象外としています。メモ内容をテストする場合は別途アサーションを追加しましょう。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app <span class="operator">=</span> <span class="type">XCUIApplication</span>()</span><br></pre></td></tr></table></figure><p>まずはテスト対象のアプリ<code>XCUIApplication()</code>のインスタンスを作成します。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">XCTContext</span>.runActivity(named: <span class="string">&quot;Launch app&quot;</span>) &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">    app.launch()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回の規模であれば不要ですが、<code>XCTContext.runActivity(named: &quot;~~&quot;)</code>を使って長いテストメソッドを名前付きの小さなサブステップに分割することができます。<code>app.launch()</code>はnamedに記載されている通り、アプリの起動を行っています。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.buttons[<span class="string">&quot;testAdd&quot;</span>].firstMatch.tap()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">app.buttons[<span class="string">&quot;testDelete&quot;</span>].firstMatch.tap()</span><br></pre></td></tr></table></figure><p>テスト対象のアプリ内の<code>testAdd</code>、<code>testDelete</code>というラベルのついたボタンを検索し、最初に見つかったものをタップしています。複数同じ名前のボタンがある場合は、<code>accessibilityIdentifier</code>を設定することで分類することができます。(参考サイトにリンク記載）</p><h2 id="UIテスト動画"><a href="#UIテスト動画" class="headerlink" title="UIテスト動画"></a>UIテスト動画</h2><p>マウス操作しなくてもシミュレータ画面左上のtestAdd,testDeleteボタンが押下されています。</p><img src="/images/20230515a/UItest動画.gif" alt="UItest動画" width="360" height="240" loading="lazy"><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>長い記事になってしまいましたが、読んでくださった方ありがとうございます。</p><p>「はじめに」にも書きましたがiOSアプリは普段使う分実機テストもしやすく自分の欲しいものを作ることもできるので、初心者がモチベーションを維持しながら技術を身につけるにはいい題材だと思います。(私も初心者なので書いて遊んでます)</p><p>今回紹介できませんでしたが、CoreDataというのを使ってサーバーを立てなくてもアプリ上で扱うデータのCRUD処理が簡単にできたりと面倒ごとが少ないのも利点です。せっかく技術を身につけるなら動かして楽しんでスキルアップしていきましょう！！</p><p>次は斎藤賢太さんの<a href="/articles/20230516a/">JSパッケージ管理ツールpnpmの概要と内部構造を眺める</a> です。</p><h2 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h2><ul><li>XCTestで使えるAssert一覧<br><a href="https://qiita.com/shirochan/items/10271912289dc563cc36">XCTestのAssert一覧</a></li><li>accessibilityIdentifierの説明<br><a href="https://qiita.com/terry-private/items/81c07510d90d5946d0fc">XCUIElementの使い方をざっくりまとめてみた</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/">テスト</category>
      
      <category domain="https://future-architect.github.io/tags/iOS/">iOS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85/">初心者</category>
      
      <category domain="https://future-architect.github.io/tags/Swift/">Swift</category>
      
      <category domain="https://future-architect.github.io/tags/XCTest/">XCTest</category>
      
      
      <comments>https://future-architect.github.io/articles/20230515a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>OS自作入門本に触れたのでOS起動までの処理概要をまとめてみた</title>
      <link>https://future-architect.github.io/articles/20230512a/</link>
      <guid>https://future-architect.github.io/articles/20230512a/</guid>
      <pubDate>Thu, 11 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;はじめまして、2022年4月入社・Technology Inovation</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>はじめまして、2022年4月入社・Technology Inovation Group（TIG）所属の栗栖です。</p><p><a href="/articles/20230417a/">春の入門ブログ連載</a>の16日目です。</p><p>最近、<a href="https://www.amazon.co.jp/gp/product/B08Z3MNR9J?ie=UTF8&psc=1&linkCode=sl1&tag=k-tw-22&linkId=09411e4f3f3b631351b67d7c6d518fec&language=ja_JP&ref_=as_li_ss_tl">ゼロからのOS自作入門</a>（通称：みかん本）を読み始めました。</p><p>ソースレベルで解説があるため深い理解を得やすいですが、OS起動まで処理フローの記載がなく、全体感を把握するのに苦労したので私なりにmikanOSが立ち上がるまでの処理概要をまとめてみました。</p><img src="/images/20230512a/OSBook.png" alt="OSBook" width="400" height="533" loading="lazy"><h2 id="OS起動までの流れ"><a href="#OS起動までの流れ" class="headerlink" title="OS起動までの流れ"></a>OS起動までの流れ</h2><p>OS起動までの流れとしては以下の通り。</p><img src="/images/20230512a/ブートローダ実行までのフロー.drawio.png" alt="ブートローダ実行までのフロー.drawio.png" width="121" height="331" loading="lazy"><h3 id="①電源起動"><a href="#①電源起動" class="headerlink" title="①電源起動"></a>①電源起動</h3><p>CPUがBIOSに格納されたバイナリプログラムを実行する。</p><p>※PCの電源が切れるとメインメモリの内容は消え、次回起動時にCPUは命令を読み取ることができなくなる。電源を切っても記憶内容を保持する不揮発性メモリ（ROM）にBIOSを書き込むことで、CPUがBIOSを実行可能にしている。</p><h3 id="②UEFI-BIOSの実行"><a href="#②UEFI-BIOSの実行" class="headerlink" title="②UEFI BIOSの実行"></a>②UEFI BIOSの実行</h3><p>コンピュータを初期化（CPU動作モードの設定、PCIデバイスの検出）し、接続されたストレージ内のブートローダを検索する。<br>&#x2F;EFI&#x2F;BOOT&#x2F;BOOTX64.EFIをメインメモリ上に展開し実行する。</p><h3 id="③ブートローダの実行"><a href="#③ブートローダの実行" class="headerlink" title="③ブートローダの実行"></a>③ブートローダの実行</h3><p>カーネルファイルを読み出し実行する。</p><h3 id="④カーネルの実行"><a href="#④カーネルの実行" class="headerlink" title="④カーネルの実行"></a>④カーネルの実行</h3><p>システムの機能やリソースを管理し制御する。</p><h2 id="ブートローダとカーネルの用意"><a href="#ブートローダとカーネルの用意" class="headerlink" title="ブートローダとカーネルの用意"></a>ブートローダとカーネルの用意</h2><p>UEFI BIOSがブートローダの実行までしてくれるので、ブートローダとカーネルの実行可能ファイルを用意する。</p><h3 id="ソースファイル"><a href="#ソースファイル" class="headerlink" title="ソースファイル"></a>ソースファイル</h3><h4 id="ブートローダ"><a href="#ブートローダ" class="headerlink" title="ブートローダ"></a>ブートローダ</h4><p>以下の処理があれば良い。</p><ul><li>メモリマップ（物理メモリの配置と使用状況を把握する情報源）を取得する。</li><li>カーネルファイルのヘッダ情報を読み込みイメージベース（バイナリファイルがメモリ上で配置されるアドレス）を特定する</li><li>カーネルを起動しブートサービスを停止させる。</li></ul><h4 id="カーネル"><a href="#カーネル" class="headerlink" title="カーネル"></a>カーネル</h4><p>自分が作るOSでやりたいことを書く。(描画、デバイス制御、アプリケーション等)</p><h3 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h3><p>C&#x2F;C++で書いたブートローダとカーネルのソースコードは以下手順で実行する。</p><img src="/images/20230512a/ファイル構成.drawio.png" alt="ファイル構成.drawio.png" width="231" height="481" loading="lazy"><h4 id="コンパイル"><a href="#コンパイル" class="headerlink" title="コンパイル"></a>コンパイル</h4><p>ソースコードからオブジェクトファイル(バイナリコードだが実行可能ではない)を生成する。<br>※1つのソースコードは1つのオブジェクトファイルとなるため、差分のあるソースコードだけを再コンパイルすることで時間を節約できる。</p><h4 id="リンク"><a href="#リンク" class="headerlink" title="リンク"></a>リンク</h4><p>複数のオブジェクトファイルを結合して実行可能なバイナリファイルを生成する。</p><h3 id="ディスクイメージの生成"><a href="#ディスクイメージの生成" class="headerlink" title="ディスクイメージの生成"></a>ディスクイメージの生成</h3><p>ビルドされたファイルをディスクイメージに組み込む。</p><p>手順</p><ol><li>FAT32のディスクイメージファイルを作成する</li><li>ディスクイメージを適当なディレクトリ（例：mnt）マウントする</li><li>マウントされたイメージにビルドされたファイルをコピーする</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├─mnt</span><br><span class="line">   ├─EFI</span><br><span class="line">   │  ├─BOOT</span><br><span class="line">   │      └─BOOTX64.EFI <span class="comment">#ブートローダ</span></span><br><span class="line">   ├─kernel.elf <span class="comment">#カーネル</span></span><br><span class="line">   └─memmap <span class="comment"># メモリマップ</span></span><br></pre></td></tr></table></figure><ol start="4"><li>ディスクイメージをアンマウントする。</li></ol><p>実機環境であればシステムドライブにディスクイメージを焼いてブートする、</p><p>仮想環境であればQEMU等の仮想マシンでディスクイメージを起動するとOSが立ち上がる。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>本を読む前はOSは複雑で個人では取り掛かりにくい印象がありましたが、立ち上げるために必要な1つ1つの処理は意外と単純でした。立ち上がった後のカーネルの持つリソース管理や制御の実装部分は複雑なので大変だと思います。</p><p>次は寒河江さんの<a href="/articles/20230515a/">Swiftの自動テスト〜導入と基本的なテスト手法〜</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/OS/">OS</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%BC%E3%83%AD%E3%81%8B%E3%82%89%E3%81%AEOS%E8%87%AA%E4%BD%9C%E5%85%A5%E9%96%80/">ゼロからのOS自作入門</category>
      
      
      <comments>https://future-architect.github.io/articles/20230512a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>正規表現入門</title>
      <link>https://future-architect.github.io/articles/20230510a/</link>
      <guid>https://future-architect.github.io/articles/20230510a/</guid>
      <pubDate>Tue, 09 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、2022年4月入社・流通製造グループ所属の高世です。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、2022年4月入社・流通製造グループ所属の高世です。</p><p><a href="/articles/20230417a/">春の入門ブログ連載</a>の14日目です。</p><p>みなさん、正規表現は使っていますか？</p><p>正規表現とはテキストデータの検索やパターンマッチングに用いれるツールで、様々な場所で使用することができます。身近なところだとテキストエディタ(VSCodeなど)などで使用可能で、通常の文字列検索・置換よりも柔軟で効率的な作業を可能とします。</p><p>この記事では「正規表現は聞いたことあるけど何ができるかよくわからない」という方や「使っているけど毎回調べてコピーしている」という方向けに、基本的なものから少し高度な構文まで例文も合わせて紹介したいと思います。</p><h2 id="正規表現チェッカーサイト"><a href="#正規表現チェッカーサイト" class="headerlink" title="正規表現チェッカーサイト"></a>正規表現チェッカーサイト</h2><p>正規表現を作成する際、指定した文章とマッチするか・構文として誤っていないかをチェックしながら作成すると効率的です。</p><p>その際にWeb上で正規表現をチェックしてくれるサイトがあるので、おすすめを2つ紹介します。</p><ul><li><a href="https://weblabo.oscasierra.net/tools/regex/">正規表現チェッカー</a><br>正規表現・対象文字列に対して、どうマッチするか結果を表示してくれます。<br>表示が見やすいので本記事ではこちらのサイトの結果のスクショを貼っています。</li><li><a href="https://www.debuggex.com/">Debuggex: Online visual regex tester</a><br>上記のサイト同様、正規表現によるマッチの結果の表示に加えて、作成した正規表現をビジュアライズしてくれます。<br>デバッグを行うとき便利です！</li></ul><h2 id="基本的な正規表現文法"><a href="#基本的な正規表現文法" class="headerlink" title="基本的な正規表現文法"></a>基本的な正規表現文法</h2><div class="scroll"><table><thead><tr><th>正規表現</th><th>意味</th></tr></thead><tbody><tr><td>.</td><td>任意の１文字</td></tr><tr><td>[]</td><td>角括弧に含まれるいずれか１文字（<code>[abc]</code>の場合、a,b,cのいずれか）</td></tr><tr><td>*</td><td>0回以上の繰り返し</td></tr><tr><td>+</td><td>1回以上の繰り返し</td></tr><tr><td>?</td><td>0回か1回</td></tr><tr><td>{N}</td><td>N回の繰り返し</td></tr><tr><td>{N,M}</td><td>N回以上、M回以下の繰り返し</td></tr><tr><td>^</td><td>行の先頭</td></tr><tr><td>$</td><td>行の末尾</td></tr><tr><td>\d</td><td>数字 [0-9]</td></tr><tr><td>\w</td><td>英数字とアンダーバー [0-9a-zA-Z_]</td></tr><tr><td>\s</td><td>空白文字 [ \f\n\r\t\v]</td></tr><tr><td>(?&#x3D;)</td><td>肯定先読み（指定した文字列の先頭にマッチ）</td></tr><tr><td>(?&lt;&#x3D;)</td><td>肯定後読み（指定した文字列の末尾にマッチ）</td></tr></tbody></table></div><p>以下ではそれぞれの構文について、コード例も載せながら紹介していきます。</p><h3 id="任意の1文字【-】"><a href="#任意の1文字【-】" class="headerlink" title="任意の1文字【.】"></a>任意の1文字【.】</h3><p>ドット【.】は任意の1文字を表します。<br>任意の文字数をマッチさせたいときは【.】を繰り返します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F....e</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image.png" alt="image.png" width="925" height="360" loading="lazy"><p>上記の例では、ドット【.】を4回繰り返すことで<code>Future</code>の<code>utur</code>部分を表しています。<br>任意の4文字にマッチするため、<code>Figure</code>や<code>Fiddle</code>などにもマッチします。</p><h3 id="いずれかの1文字【-】"><a href="#いずれかの1文字【-】" class="headerlink" title="いずれかの1文字【[]】"></a>いずれかの1文字【[]】</h3><p>角括弧【[]】の内部に記述された文字からいずれかの1文字とマッチします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F[ABC]</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_2.png" alt="image.png" width="919" height="352" loading="lazy"><p>上記の例では<code>[ABC]</code>という正規表現が<code>A</code>か<code>B</code>か<code>C</code>のいずれかを表します。</p><h4 id="範囲指定【-】"><a href="#範囲指定【-】" class="headerlink" title="範囲指定【-】"></a>範囲指定【-】</h4><p>例えば0~9の数値のいずれか1文字をマッチさせたい場合、単純に<code>[0123456789]</code>と記述することもできますが、ハイフン【-】を使用することで<code>[0-9]</code>と短縮できます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">201[0-9]年</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_3.png" alt="image.png" width="920" height="357" loading="lazy"><p>以下の表のようにアルファベットでも同様に範囲指定できます。</p><div class="scroll"><table><thead><tr><th>範囲指定の正規表現</th><th>意味</th></tr></thead><tbody><tr><td>[0-9]</td><td>0から9までの数値</td></tr><tr><td>[a-z]</td><td>aからzまでの小文字のアルファベット</td></tr><tr><td>[A-Z]</td><td>AからZまでの大文字のアルファベット</td></tr></tbody></table></div><p>また、数値とアルファベットのいずれかにマッチさせたい場合<code>[0-9a-zA-Z]</code>と組み合わせることで表現できます。</p><h3 id="複数パターンのいずれかにマッチ【-】"><a href="#複数パターンのいずれかにマッチ【-】" class="headerlink" title="複数パターンのいずれかにマッチ【|】"></a>複数パターンのいずれかにマッチ【|】</h3><p>縦棒【|】を使用することで【|】で区切られた複数のパターンのいずれかの文字列にマッチします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2020|令和2)年</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_4.png" alt="image.png" width="918" height="360" loading="lazy"><p><code>()</code>でグループ化することでパターンの中で選択する部分を指定できるようになります。<br>【|】の優先順位が低いため <code>2020|令和2年</code> というパターンの場合は <code>2020</code> または <code>令和2年</code> にマッチします。上記例のように【()】でグループ化するとグループ内に限定でき、 <code>2020年</code> または <code>令和2年</code> にマッチするようになります。</p><h3 id="直前の文字の繰り返し【-】"><a href="#直前の文字の繰り返し【-】" class="headerlink" title="直前の文字の繰り返し【*+?】"></a>直前の文字の繰り返し【*+?】</h3><p>【*+?】はそれぞれ、下記のように繰り返しを表します。</p><div class="scroll"><table><thead><tr><th>繰り返しの正規表現</th><th>意味</th></tr></thead><tbody><tr><td>*</td><td>0回以上の繰り返し</td></tr><tr><td>+</td><td>1回以上の繰り返し</td></tr><tr><td>?</td><td>0回か1回</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o+</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_5.png" alt="image.png" width="911" height="353" loading="lazy"><p><code>o+</code>と記述することで<code>o</code>が1回以上繰り返されている箇所にマッチします。ちなみに単なる <code>*</code> <code>+</code> <code>?</code> は繰り返しが最大になるようにマッチします。</p><p>最小量指定子 <code>*?</code> <code>+?</code> <code>??</code> を用いることで繰り返しが最小の文字列と合致させることもできます。詳細は<a href="https://www.javadrive.jp/regex-basic/writing/index1.html">こちら</a>を参照してください。</p><h4 id="繰り返しの回数指定【-N-N-M-】"><a href="#繰り返しの回数指定【-N-N-M-】" class="headerlink" title="繰り返しの回数指定【{N},{N,M}】"></a>繰り返しの回数指定【{N},{N,M}】</h4><p><code>*</code>や<code>+</code>では繰り返されうる最大の文字列と合致してしまいますが、繰り返しの回数を制限することも可能です。</p><p>こちらは波括弧を用いて【{N},{N,M}】と記述します。</p><div class="scroll"><table><thead><tr><th>回数指定ができる繰り返しの正規表現</th><th>意味</th></tr></thead><tbody><tr><td>{N}</td><td>N回の繰り返し</td></tr><tr><td>{N,M}</td><td>N回以上、M回以下の繰り返し</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o&#123;3&#125;</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_6.png" alt="image.png" width="924" height="357" loading="lazy"><h3 id="行の先頭・末尾を指定【-】"><a href="#行の先頭・末尾を指定【-】" class="headerlink" title="行の先頭・末尾を指定【^,$】"></a>行の先頭・末尾を指定【^,$】</h3><p>ハット【^】は行の先頭、ドルマーク【$】は行の末尾を表します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^Future</span><br><span class="line">Future$</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_7.png" alt="image.png" width="921" height="356" loading="lazy"><img src="/images/20230510a/image_8.png" alt="image.png" width="917" height="359" loading="lazy"><p>ハット【^】を正規表現の先頭に記述することで行の先頭に<code>Future</code>の記載があるもののみがマッチします。<br>ドルマーク【$】はその逆で末尾に記述することで、行末の<code>Future</code>のみにマッチします。<br>ハット【^】とドルマーク【$】がそれぞれ、行頭・行末を位置を表していると考えるとわかりやすいですね。</p><h3 id="【-】を使用した略記法"><a href="#【-】を使用した略記法" class="headerlink" title="【\】を使用した略記法"></a>【\】を使用した略記法</h3><p>環境にもよりますが、バックスラッシュ【\】に特定の文字を組み合わせることで、特定の文字集合を表すことができます。</p><div class="scroll"><table><thead><tr><th>【\】を使用した正規表現の略記法</th><th>意味</th></tr></thead><tbody><tr><td>\d</td><td>数字 [0-9]</td></tr><tr><td>\w</td><td>英数字とアンダーバー [0-9a-zA-Z_]</td></tr><tr><td>\s</td><td>空白文字 [ \f\n\r\t\v]</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">090-\d&#123;4&#125;-\d&#123;4&#125;</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_9.png" alt="image.png" width="915" height="357" loading="lazy"><p>上記の正規表現では携帯電話の番号を正規表現に表したものです。<br>繰り返し表現と合わせることで、アルファベットが混入した行や、文字数が足りない行を排除することが出来ています。<br>また前述した<code>[0-9]</code>という記法よりも、短く視認性も良くなっています。</p><h3 id="先読み・後読み【-x3D-lt-x3D-】"><a href="#先読み・後読み【-x3D-lt-x3D-】" class="headerlink" title="先読み・後読み【(?&#x3D;),(?&lt;&#x3D;)】"></a>先読み・後読み【(?&#x3D;),(?&lt;&#x3D;)】</h3><p>上記で紹介した正規表現では対象の文字列にマッチするかどうか・マッチする箇所があるかないかをチェックしますが、例えばマッチした文字列以前・以降の文字列を取得したい場合など、これから紹介する先読み・後読みが使用できます！</p><h4 id="肯定先読み【-x3D-】"><a href="#肯定先読み【-x3D-】" class="headerlink" title="肯定先読み【(?&#x3D;)】"></a>肯定先読み【(?&#x3D;)】</h4><p>肯定先読みは【(?&#x3D;xxx)】と記述し、xxxにマッチした文字列の先頭位置にマッチします。<br>言葉では分かりづらいので具体例を見ると、下記のような<code>〇〇Script</code>という文字列から<code>Script</code>以前の文字列（<code>Java</code>や<code>Type</code>）などとマッチさせたい場合に使用できます。</p><blockquote><p>JavaScript<br>TypeScript<br>CoffeeScript</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.*(?=Script)</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_10.png" alt="image.png" width="914" height="357" loading="lazy"><p><code>Script</code>以前の文字列（<code>Java</code>,<code>Type</code>,<code>Coffee</code>）を取得することができました。<br>肯定先読みを使用することで、上記のような単純にパターンマッチで取得できないような文字列を抽出することができます。</p><h4 id="肯定後読み【-lt-x3D-】"><a href="#肯定後読み【-lt-x3D-】" class="headerlink" title="肯定後読み【(?&lt;&#x3D;)】"></a>肯定後読み【(?&lt;&#x3D;)】</h4><p>肯定先読みではマッチした文字列の先頭位置にマッチしましたが、肯定後読みではその逆で文末にマッチします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;=Future).*</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_11.png" alt="image.png" width="919" height="350" loading="lazy"><p>上記の正規表現では、<code>Future</code>という文字列の後ろの位置にマッチしそこから<code>.*</code>で残りの文字列にマッチさせています。</p><h4 id="肯定先読み・後読みを組み合わせた例"><a href="#肯定先読み・後読みを組み合わせた例" class="headerlink" title="肯定先読み・後読みを組み合わせた例"></a>肯定先読み・後読みを組み合わせた例</h4><p>最後に補足で肯定先読み・後読みを組み合わせた例を紹介します。<br>2つを組み合わせることで、特定の文字列で囲まれた文字列を抽出することができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;=Future).*(?=Inc)</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_12.png" alt="image.png" width="916" height="351" loading="lazy"><p><code>Future</code>と<code>Inc</code>に囲まれた<code>Architect</code>を抽出することができました。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>正規表現をマスターすることで、日々の文章を扱うような作業を効率化できます。</p><p>注意点として、本記事で紹介した正規表現の構文は個人的に使う頻度が高いと思うものを選んでいるため、こちらが全量ではありません。また環境によって使用できる正規表現が異なる場合があるため気をつける必要があります。</p><p>最後に紹介した先読み・後読みの正規表現が記述できることで、表現の幅が広がると思うので存在だけでも覚えていただけたら嬉しいです。正規表現を使用することで、日々の作業の生産性を向上させて行きましょう！</p><p>明日の入門記事は栗栖さんの<a href="/articles/20230512a/">OS自作入門本に触れたのでOS起動までの処理概要をまとめてみた</a>です！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE/">正規表現</category>
      
      
      <comments>https://future-architect.github.io/articles/20230510a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Application Composerを使ってみた！</title>
      <link>https://future-architect.github.io/articles/20230509a/</link>
      <guid>https://future-architect.github.io/articles/20230509a/</guid>
      <pubDate>Mon, 08 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;あいさつ&quot;&gt;&lt;a href=&quot;#あいさつ&quot; class=&quot;headerlink&quot; title=&quot;あいさつ&quot;&gt;&lt;/a&gt;あいさつ&lt;/h2&gt;&lt;p&gt;こんにちは。金融グループ所属の佐藤です。&lt;br&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="あいさつ"><a href="#あいさつ" class="headerlink" title="あいさつ"></a>あいさつ</h2><p>こんにちは。金融グループ所属の佐藤です。<br><a href="/articles/20230417a/">春の入門祭り</a>の13日目の記事となります。</p><p>2023&#x2F;03&#x2F;07から一般提供が開始された新サービス「AWS Application Composer」を使ってみて、どんな人向けか、強み・弱みは何かというところを見ていきます。</p><h2 id="AWS-Application-Composerとは？"><a href="#AWS-Application-Composerとは？" class="headerlink" title="AWS Application Composerとは？"></a>AWS Application Composerとは？</h2><p>以下、公式の概要文です。（引用元: <a href="https://console.aws.amazon.com/composer/home">Application Composer | ホーム</a>）</p><blockquote><p>AWS Application Composer は、サーバーレスアプリケーションのアーキテクチャ設定、構築の合理化と高速化を支援します。<br>シンプルなドラッグアンドドロップのワークフローを使用して、アプリケーションのデプロイに必要な構成が自動的に生成されます。<br>Infrastructure as Code は、AWS CloudFormation と AWS サーバーレスアプリケーションモデルをベースにしています。</p></blockquote><p>ざっくりまとめると、</p><ul><li>AWSサービスを用いた <strong>アーキテクチャの構築を支援</strong> するよ</li><li><strong>ドラッグアンドドロップ</strong> を使って直感的に操作ができるよ</li><li>裏側ではCFnとSAMを使ってるから <strong>テンプレートを共有</strong> できるよ</li></ul><p>と書いていて、特に2つ目のドラッグアンドドロップができるよ！というのがキャッチコピーとなっています。</p><p>具体的には以下の画像のように、あるサービスから別のサービスを呼びます、というのをより視覚的に、直感的に表現することができます。</p><img src="/images/20230509a/スクリーンショット_2023-05-07_23.07.19.png" alt="" width="1200" height="453" loading="lazy"><p>※ドラッグアンドドロップでサービスを配置して、サービス同士を線で繋いでいくイメージ</p><h2 id="サービスの特徴"><a href="#サービスの特徴" class="headerlink" title="サービスの特徴"></a>サービスの特徴</h2><h3 id="コストについて"><a href="#コストについて" class="headerlink" title="コストについて"></a>コストについて</h3><p>以下、公式のQ＆Aです。(引用元：<a href="https://aws.amazon.com/jp/application-composer/faq">FAQ</a>)</p><blockquote><p>Q: AWS Application Composer にはどの程度のコストがかかりますか?<br>AWS Application Composer は追加料金なしで使用できます。<br>手動で作成した場合と同じ方法で、AWS Application Composer を使用して作成された AWS リソース (S3 バケットや Lambda 関数など) の料金をお支払いいただきます。<br>実際に使用した分の料金のみをお支払いいただきます。<br>最低料金や前払いの義務は発生しません。</p></blockquote><p>ということで、Application Composerを使ったからと言って<strong>追加の料金は掛からない</strong>とのことでした。</p><h3 id="対応しているサービス"><a href="#対応しているサービス" class="headerlink" title="対応しているサービス"></a>対応しているサービス</h3><p>現時点でGUI上で確認できるサービスは以下です。</p><img src="/images/20230509a/スクリーンショット_2023-05-07_23.37.44.png" alt="" width="1200" height="651" loading="lazy"><p>※API gateway &#x2F; Cognito UserPool &#x2F; Cognito UserPoolClient &#x2F; DynamoDB Table &#x2F; EventBridge Event rule &#x2F; EventBridge Schedule &#x2F; Kinesis Stream &#x2F; Lambda Function &#x2F; Lambda Layer &#x2F; S3 Bucket &#x2F; SNS Topic &#x2F; SQS Queue &#x2F; Step Functions State machine</p><p>ということで基本的なサービスは揃っているため、<strong>シンプルな構成では困らなさそう</strong>という印象でした。<br>一方、ここにないサービスを使いたい場合はこれだけで完結させることは出来ないため、Application Composerを使うか検討している人は要チェックです。</p><h4 id="使えるリージョン"><a href="#使えるリージョン" class="headerlink" title="使えるリージョン"></a>使えるリージョン</h4><p>現在利用できるリージョンは以下。</p><ul><li>米国東部 (オハイオ)</li><li>米国東部 (バージニア北部)</li><li>米国西部 (オレゴン)</li><li>アジアパシフィック (シンガポール)</li><li>アジアパシフィック (シドニー)</li><li>アジアパシフィック (東京)</li><li>欧州 (フランクフルト)</li><li>欧州 (アイルランド)</li><li>欧州 (ストックホルム)</li></ul><p>ということで、東京リージョンやコストの安い米国各地域のリージョンが入っているので、リソースの配置場所に<strong>特殊な要件がない場合は特に困らなさそう</strong>と思いました。</p><h2 id="どんな人向け？"><a href="#どんな人向け？" class="headerlink" title="どんな人向け？"></a>どんな人向け？</h2><p>ここまでをまとめると、</p><ul><li>直感的に操作できる</li><li>追加コストはなし</li><li>主要サービスは使える</li><li>主要地域で使える</li></ul><p>という特徴がApplication Composerにはあると分かったため、個人的に</p><ul><li>シンプルな構成のサービスを爆速で作りたい人</li><li>AWSインフラの構築練習をしてみたい人</li></ul><p>あたりにオススメなのかなと思いました。<br>良くも悪くも想定された構成であれば<strong>非常に楽に</strong>インフラ構築ができるため、前者ではスピード感、後者では手軽さに繋がると思い抜擢してみました。</p><h2 id="実際に使ってみた"><a href="#実際に使ってみた" class="headerlink" title="実際に使ってみた"></a>実際に使ってみた</h2><p>…と、長々特徴について語ってしまいましたが、ここから実際に触ってみて使い勝手や感想を述べてみようかと思います。</p><h4 id="やりたい構成"><a href="#やりたい構成" class="headerlink" title="やりたい構成"></a>やりたい構成</h4><p>以下のようなSPAを使ったwebアプリを想定して作ってみようと思います。<br><img src="/images/20230509a/スクリーンショット_2023-05-09_1.02.00.png" alt="スクリーンショット_2023-05-09_1.02.00.png" width="520" height="431" loading="lazy"></p><h4 id="やってみた"><a href="#やってみた" class="headerlink" title="やってみた"></a>やってみた</h4><ol><li><p>まずはAWSコンソールの検索窓で<code>Application Composer</code>と検索</p><img src="/images/20230509a/スクリーンショット_2023-05-09_1.48.43.png" alt="スクリーンショット_2023-05-09_1.48.43.png" width="1200" height="611" loading="lazy"></li><li><p>Application Composerのホーム画面が開けました</p><img src="/images/20230509a/スクリーンショット_2023-05-08_0.33.05.png" alt="スクリーンショット_2023-05-08_0.33.05.png" width="1200" height="615" loading="lazy"></li><li><p><code>プロジェクトの作成</code>を押下して、もろもろの設定をして空のプロジェクトを<code>Create</code>してみます</p><img src="/images/20230509a/スクリーンショット_2023-05-08_0.32.47.png" alt="スクリーンショット_2023-05-08_0.32.47.png" width="1200" height="615" loading="lazy"></li><li><p>編集画面っぽいのが開けました</p><img src="/images/20230509a/スクリーンショット_2023-05-09_1.03.16.png" alt="スクリーンショット_2023-05-09_1.03.16.png" width="1200" height="611" loading="lazy"></li><li><p><code>やりたい構成</code>を見つつ、左のメニューからリソースを雑にドラッグアンドドロップしましょう</p><img src="/images/20230509a/スクリーンショット_2023-05-09_1.18.55.png" alt="スクリーンショット_2023-05-09_1.18.55.png" width="1200" height="611" loading="lazy"></li><li><p>論理IDを設定してよりそれっぽくします</p><img src="/images/20230509a/スクリーンショット_2023-05-09_1.26.39.png" alt="スクリーンショット_2023-05-09_1.26.39.png" width="1200" height="611" loading="lazy"></li><li><p>APIgatewayの中身が寂しかったのでAuthorizer(認可)とエンドポイントの設定を追加します</p><img src="/images/20230509a/スクリーンショット_2023-05-09_1.31.59.png" alt="スクリーンショット_2023-05-09_1.31.59.png" width="1200" height="611" loading="lazy"></li><li><p>再度<code>やりたい構成</code>を見て、アクセスを許可したいリソース同士を線で繋ぎます</p><img src="/images/20230509a/スクリーンショット_2023-05-09_1.34.49.png" alt="スクリーンショット_2023-05-09_1.34.49.png" width="1200" height="611" loading="lazy"></li><li><p>見た目が汚いので<code>Arrange</code>ボタンを押して整形します</p><img src="/images/20230509a/スクリーンショット_2023-05-09_1.36.28.png" alt="スクリーンショット_2023-05-09_1.36.28.png" width="1200" height="611" loading="lazy"></li><li><p>あっという間にこれで完成です。最後にTemplateを押して出来上がったテンプレートを見てみましょう</p><img src="/images/20230509a/スクリーンショット_2023-05-09_1.38.04.png" alt="スクリーンショット_2023-05-09_1.38.04.png" width="1200" height="611" loading="lazy"></li></ol><p>※全文は長いので折りたたみで添付しておきます（見たい人向け）。クリックしてください。</p><details><summary>作成したテンプレート</summary><div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Transform:</span> <span class="string">AWS::Serverless-2016-10-31</span></span><br><span class="line"><span class="attr">Resources:</span></span><br><span class="line">  <span class="attr">uploadFugaFile:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Serverless::Function</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">Description:</span> <span class="type">!Sub</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Stack</span> <span class="string">$&#123;AWS::StackName&#125;</span> <span class="string">Function</span> <span class="string">$&#123;ResourceName&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ResourceName:</span> <span class="string">uploadFugaFile</span></span><br><span class="line">      <span class="attr">CodeUri:</span> <span class="string">src/Function2</span></span><br><span class="line">      <span class="attr">Handler:</span> <span class="string">index.handler</span></span><br><span class="line">      <span class="attr">Runtime:</span> <span class="string">nodejs18.x</span></span><br><span class="line">      <span class="attr">MemorySize:</span> <span class="number">3008</span></span><br><span class="line">      <span class="attr">Timeout:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">Tracing:</span> <span class="string">Active</span></span><br><span class="line">      <span class="attr">Events:</span></span><br><span class="line">        <span class="attr">awesomeApiPOSTapifugasupload:</span></span><br><span class="line">          <span class="attr">Type:</span> <span class="string">Api</span></span><br><span class="line">          <span class="attr">Properties:</span></span><br><span class="line">            <span class="attr">Path:</span> <span class="string">/api/fugas/upload</span></span><br><span class="line">            <span class="attr">Method:</span> <span class="string">POST</span></span><br><span class="line">            <span class="attr">RestApiId:</span> <span class="type">!Ref</span> <span class="string">awesomeApi</span></span><br><span class="line">      <span class="attr">Environment:</span></span><br><span class="line">        <span class="attr">Variables:</span></span><br><span class="line">          <span class="attr">BUCKET_NAME:</span> <span class="type">!Ref</span> <span class="string">fugaFileBucket</span></span><br><span class="line">          <span class="attr">BUCKET_ARN:</span> <span class="type">!GetAtt</span> <span class="string">fugaFileBucket.Arn</span></span><br><span class="line">          <span class="attr">TABLE_NAME:</span> <span class="type">!Ref</span> <span class="string">hogeTable</span></span><br><span class="line">          <span class="attr">TABLE_ARN:</span> <span class="type">!GetAtt</span> <span class="string">hogeTable.Arn</span></span><br><span class="line">      <span class="attr">Policies:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">Statement:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Effect:</span> <span class="string">Allow</span></span><br><span class="line">              <span class="attr">Action:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObject</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectAcl</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectLegalHold</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectRetention</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectTorrent</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectVersion</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectVersionAcl</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectVersionForReplication</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectVersionTorrent</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:ListBucket</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:ListBucketMultipartUploads</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:ListBucketVersions</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:ListMultipartUploadParts</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:AbortMultipartUpload</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:DeleteObject</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:DeleteObjectVersion</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:PutObject</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:PutObjectLegalHold</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:PutObjectRetention</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:RestoreObject</span></span><br><span class="line">              <span class="attr">Resource:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="type">!Sub</span> <span class="string">arn:$&#123;AWS::Partition&#125;:s3:::$&#123;fugaFileBucket&#125;</span></span><br><span class="line">                <span class="bullet">-</span> <span class="type">!Sub</span> <span class="string">arn:$&#123;AWS::Partition&#125;:s3:::$&#123;fugaFileBucket&#125;/*</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">DynamoDBCrudPolicy:</span></span><br><span class="line">            <span class="attr">TableName:</span> <span class="type">!Ref</span> <span class="string">hogeTable</span></span><br><span class="line">  <span class="attr">uploadFugaFileLogGroup:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Logs::LogGroup</span></span><br><span class="line">    <span class="attr">DeletionPolicy:</span> <span class="string">Retain</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">LogGroupName:</span> <span class="type">!Sub</span> <span class="string">/aws/lambda/$&#123;uploadFugaFile&#125;</span></span><br><span class="line">  <span class="attr">getTemplate:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Serverless::Function</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">Description:</span> <span class="type">!Sub</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Stack</span> <span class="string">$&#123;AWS::StackName&#125;</span> <span class="string">Function</span> <span class="string">$&#123;ResourceName&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ResourceName:</span> <span class="string">getTemplate</span></span><br><span class="line">      <span class="attr">CodeUri:</span> <span class="string">src/Function3</span></span><br><span class="line">      <span class="attr">Handler:</span> <span class="string">index.handler</span></span><br><span class="line">      <span class="attr">Runtime:</span> <span class="string">nodejs18.x</span></span><br><span class="line">      <span class="attr">MemorySize:</span> <span class="number">3008</span></span><br><span class="line">      <span class="attr">Timeout:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">Tracing:</span> <span class="string">Active</span></span><br><span class="line">      <span class="attr">Events:</span></span><br><span class="line">        <span class="attr">awesomeApiGET:</span></span><br><span class="line">          <span class="attr">Type:</span> <span class="string">Api</span></span><br><span class="line">          <span class="attr">Properties:</span></span><br><span class="line">            <span class="attr">Path:</span> <span class="string">/*</span></span><br><span class="line">            <span class="attr">Method:</span> <span class="string">GET</span></span><br><span class="line">            <span class="attr">RestApiId:</span> <span class="type">!Ref</span> <span class="string">awesomeApi</span></span><br><span class="line">      <span class="attr">Environment:</span></span><br><span class="line">        <span class="attr">Variables:</span></span><br><span class="line">          <span class="attr">BUCKET_NAME:</span> <span class="type">!Ref</span> <span class="string">templateBucket</span></span><br><span class="line">          <span class="attr">BUCKET_ARN:</span> <span class="type">!GetAtt</span> <span class="string">templateBucket.Arn</span></span><br><span class="line">      <span class="attr">Policies:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">Statement:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Effect:</span> <span class="string">Allow</span></span><br><span class="line">              <span class="attr">Action:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObject</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectAcl</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectLegalHold</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectRetention</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectTorrent</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectVersion</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectVersionAcl</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectVersionForReplication</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectVersionTorrent</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:ListBucket</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:ListBucketMultipartUploads</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:ListBucketVersions</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:ListMultipartUploadParts</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:AbortMultipartUpload</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:DeleteObject</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:DeleteObjectVersion</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:PutObject</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:PutObjectLegalHold</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:PutObjectRetention</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:RestoreObject</span></span><br><span class="line">              <span class="attr">Resource:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="type">!Sub</span> <span class="string">arn:$&#123;AWS::Partition&#125;:s3:::$&#123;templateBucket&#125;</span></span><br><span class="line">                <span class="bullet">-</span> <span class="type">!Sub</span> <span class="string">arn:$&#123;AWS::Partition&#125;:s3:::$&#123;templateBucket&#125;/*</span></span><br><span class="line">  <span class="attr">getTemplateLogGroup:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Logs::LogGroup</span></span><br><span class="line">    <span class="attr">DeletionPolicy:</span> <span class="string">Retain</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">LogGroupName:</span> <span class="type">!Sub</span> <span class="string">/aws/lambda/$&#123;getTemplate&#125;</span></span><br><span class="line">  <span class="attr">hogeTable:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::DynamoDB::Table</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">AttributeDefinitions:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">AttributeName:</span> <span class="string">id</span></span><br><span class="line">          <span class="attr">AttributeType:</span> <span class="string">S</span></span><br><span class="line">      <span class="attr">BillingMode:</span> <span class="string">PAY_PER_REQUEST</span></span><br><span class="line">      <span class="attr">KeySchema:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">AttributeName:</span> <span class="string">id</span></span><br><span class="line">          <span class="attr">KeyType:</span> <span class="string">HASH</span></span><br><span class="line">      <span class="attr">StreamSpecification:</span></span><br><span class="line">        <span class="attr">StreamViewType:</span> <span class="string">NEW_AND_OLD_IMAGES</span></span><br><span class="line">  <span class="attr">insertHoge:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Serverless::Function</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">Description:</span> <span class="type">!Sub</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Stack</span> <span class="string">$&#123;AWS::StackName&#125;</span> <span class="string">Function</span> <span class="string">$&#123;ResourceName&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ResourceName:</span> <span class="string">insertHoge</span></span><br><span class="line">      <span class="attr">CodeUri:</span> <span class="string">src/Function</span></span><br><span class="line">      <span class="attr">Handler:</span> <span class="string">index.handler</span></span><br><span class="line">      <span class="attr">Runtime:</span> <span class="string">nodejs18.x</span></span><br><span class="line">      <span class="attr">MemorySize:</span> <span class="number">3008</span></span><br><span class="line">      <span class="attr">Timeout:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">Tracing:</span> <span class="string">Active</span></span><br><span class="line">      <span class="attr">Events:</span></span><br><span class="line">        <span class="attr">awesomeApiPOSTapihogesinsert:</span></span><br><span class="line">          <span class="attr">Type:</span> <span class="string">Api</span></span><br><span class="line">          <span class="attr">Properties:</span></span><br><span class="line">            <span class="attr">Path:</span> <span class="string">/api/hoges/insert</span></span><br><span class="line">            <span class="attr">Method:</span> <span class="string">POST</span></span><br><span class="line">            <span class="attr">RestApiId:</span> <span class="type">!Ref</span> <span class="string">awesomeApi</span></span><br><span class="line">      <span class="attr">Environment:</span></span><br><span class="line">        <span class="attr">Variables:</span></span><br><span class="line">          <span class="attr">TABLE_NAME:</span> <span class="type">!Ref</span> <span class="string">hogeTable</span></span><br><span class="line">          <span class="attr">TABLE_ARN:</span> <span class="type">!GetAtt</span> <span class="string">hogeTable.Arn</span></span><br><span class="line">      <span class="attr">Policies:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">DynamoDBCrudPolicy:</span></span><br><span class="line">            <span class="attr">TableName:</span> <span class="type">!Ref</span> <span class="string">hogeTable</span></span><br><span class="line">  <span class="attr">insertHogeLogGroup:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Logs::LogGroup</span></span><br><span class="line">    <span class="attr">DeletionPolicy:</span> <span class="string">Retain</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">LogGroupName:</span> <span class="type">!Sub</span> <span class="string">/aws/lambda/$&#123;insertHoge&#125;</span></span><br><span class="line">  <span class="attr">fugaFileBucket:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::S3::Bucket</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">BucketName:</span> <span class="type">!Sub</span> <span class="string">$&#123;AWS::StackName&#125;-fugafileb-$&#123;AWS::AccountId&#125;</span></span><br><span class="line">      <span class="attr">BucketEncryption:</span></span><br><span class="line">        <span class="attr">ServerSideEncryptionConfiguration:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">ServerSideEncryptionByDefault:</span></span><br><span class="line">              <span class="attr">SSEAlgorithm:</span> <span class="string">aws:kms</span></span><br><span class="line">              <span class="attr">KMSMasterKeyID:</span> <span class="string">alias/aws/s3</span></span><br><span class="line">      <span class="attr">PublicAccessBlockConfiguration:</span></span><br><span class="line">        <span class="attr">IgnorePublicAcls:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">RestrictPublicBuckets:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">fugaFileBucketBucketPolicy:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::S3::BucketPolicy</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">Bucket:</span> <span class="type">!Ref</span> <span class="string">fugaFileBucket</span></span><br><span class="line">      <span class="attr">PolicyDocument:</span></span><br><span class="line">        <span class="attr">Id:</span> <span class="string">RequireEncryptionInTransit</span></span><br><span class="line">        <span class="attr">Version:</span> <span class="string">&#x27;2012-10-17&#x27;</span></span><br><span class="line">        <span class="attr">Statement:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">Principal:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">            <span class="attr">Action:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">            <span class="attr">Effect:</span> <span class="string">Deny</span></span><br><span class="line">            <span class="attr">Resource:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="type">!GetAtt</span> <span class="string">fugaFileBucket.Arn</span></span><br><span class="line">              <span class="bullet">-</span> <span class="type">!Sub</span> <span class="string">$&#123;fugaFileBucket.Arn&#125;/*</span></span><br><span class="line">            <span class="attr">Condition:</span></span><br><span class="line">              <span class="attr">Bool:</span></span><br><span class="line">                <span class="attr">aws:SecureTransport:</span> <span class="string">&#x27;false&#x27;</span></span><br><span class="line">  <span class="attr">templateBucket:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::S3::Bucket</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">BucketName:</span> <span class="type">!Sub</span> <span class="string">$&#123;AWS::StackName&#125;-templateb-$&#123;AWS::AccountId&#125;</span></span><br><span class="line">      <span class="attr">BucketEncryption:</span></span><br><span class="line">        <span class="attr">ServerSideEncryptionConfiguration:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">ServerSideEncryptionByDefault:</span></span><br><span class="line">              <span class="attr">SSEAlgorithm:</span> <span class="string">aws:kms</span></span><br><span class="line">              <span class="attr">KMSMasterKeyID:</span> <span class="string">alias/aws/s3</span></span><br><span class="line">      <span class="attr">PublicAccessBlockConfiguration:</span></span><br><span class="line">        <span class="attr">IgnorePublicAcls:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">RestrictPublicBuckets:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">templateBucketBucketPolicy:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::S3::BucketPolicy</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">Bucket:</span> <span class="type">!Ref</span> <span class="string">templateBucket</span></span><br><span class="line">      <span class="attr">PolicyDocument:</span></span><br><span class="line">        <span class="attr">Id:</span> <span class="string">RequireEncryptionInTransit</span></span><br><span class="line">        <span class="attr">Version:</span> <span class="string">&#x27;2012-10-17&#x27;</span></span><br><span class="line">        <span class="attr">Statement:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">Principal:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">            <span class="attr">Action:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">            <span class="attr">Effect:</span> <span class="string">Deny</span></span><br><span class="line">            <span class="attr">Resource:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="type">!GetAtt</span> <span class="string">templateBucket.Arn</span></span><br><span class="line">              <span class="bullet">-</span> <span class="type">!Sub</span> <span class="string">$&#123;templateBucket.Arn&#125;/*</span></span><br><span class="line">            <span class="attr">Condition:</span></span><br><span class="line">              <span class="attr">Bool:</span></span><br><span class="line">                <span class="attr">aws:SecureTransport:</span> <span class="string">&#x27;false&#x27;</span></span><br><span class="line">  <span class="attr">awesomeApi:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Serverless::Api</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">Name:</span> <span class="type">!Sub</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">$&#123;ResourceName&#125;</span> <span class="string">From</span> <span class="string">Stack</span> <span class="string">$&#123;AWS::StackName&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ResourceName:</span> <span class="string">awesomeApi</span></span><br><span class="line">      <span class="attr">StageName:</span> <span class="string">Prod</span></span><br><span class="line">      <span class="attr">DefinitionBody:</span></span><br><span class="line">        <span class="attr">openapi:</span> <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line">        <span class="attr">info:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="string">/api/hoges/insert:</span></span><br><span class="line">            <span class="attr">post:</span></span><br><span class="line">              <span class="attr">x-amazon-apigateway-integration:</span></span><br><span class="line">                <span class="attr">httpMethod:</span> <span class="string">POST</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">aws_proxy</span></span><br><span class="line">                <span class="attr">uri:</span> <span class="type">!Sub</span> <span class="string">arn:$&#123;AWS::Partition&#125;:apigateway:$&#123;AWS::Region&#125;:lambda:path/2015-03-31/functions/$&#123;insertHoge.Arn&#125;/invocations</span></span><br><span class="line">              <span class="attr">responses:</span> &#123;&#125;</span><br><span class="line">          <span class="string">/api/fugas/upload:</span></span><br><span class="line">            <span class="attr">post:</span></span><br><span class="line">              <span class="attr">x-amazon-apigateway-integration:</span></span><br><span class="line">                <span class="attr">httpMethod:</span> <span class="string">POST</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">aws_proxy</span></span><br><span class="line">                <span class="attr">uri:</span> <span class="type">!Sub</span> <span class="string">arn:$&#123;AWS::Partition&#125;:apigateway:$&#123;AWS::Region&#125;:lambda:path/2015-03-31/functions/$&#123;uploadFugaFile.Arn&#125;/invocations</span></span><br><span class="line">              <span class="attr">responses:</span> &#123;&#125;</span><br><span class="line">          <span class="string">/*:</span></span><br><span class="line">            <span class="attr">get:</span></span><br><span class="line">              <span class="attr">x-amazon-apigateway-integration:</span></span><br><span class="line">                <span class="attr">httpMethod:</span> <span class="string">POST</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">aws_proxy</span></span><br><span class="line">                <span class="attr">uri:</span> <span class="type">!Sub</span> <span class="string">arn:$&#123;AWS::Partition&#125;:apigateway:$&#123;AWS::Region&#125;:lambda:path/2015-03-31/functions/$&#123;getTemplate.Arn&#125;/invocations</span></span><br><span class="line">              <span class="attr">responses:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">EndpointConfiguration:</span> <span class="string">REGIONAL</span></span><br><span class="line">      <span class="attr">TracingEnabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">Auth:</span></span><br><span class="line">        <span class="attr">Authorizers:</span></span><br><span class="line">          <span class="attr">awesomeAuthorizer:</span></span><br><span class="line">            <span class="attr">UserPoolArn:</span> <span class="type">!GetAtt</span> <span class="string">awesomeUserPool.Arn</span></span><br><span class="line">  <span class="attr">awesomeUserPool:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Cognito::UserPool</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">AdminCreateUserConfig:</span></span><br><span class="line">        <span class="attr">AllowAdminCreateUserOnly:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">AliasAttributes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">email</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">preferred_username</span></span><br><span class="line">      <span class="attr">UserPoolName:</span> <span class="type">!Sub</span> <span class="string">$&#123;AWS::StackName&#125;-awesomeUserPool</span></span><br></pre></td></tr></table></figure></div></details><h4 id="やってみた感想"><a href="#やってみた感想" class="headerlink" title="やってみた感想"></a>やってみた感想</h4><p>とにかくお手軽なことに驚きました。上述の <strong>やってみた</strong> はスクリーンショットを撮る時間を除けば5分も掛からなかったため、タイポに苦しみながら手書きするのと比べると雲泥の差を感じました。また、環境構築が不要＋GUIだけで完結できるため、今後思い立った時にサクッと作れちゃうなと引き出しを増やすことが出来ました。</p><p>一方で、上述の構成に例えばCloudFrontを追加したいと思った時にApplication Composerだけではできないため、やはり”型にハマれば強い”系のサービスではあるなと思いました。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>最後まで読んでいただきありがとうございました。</p><p>今後も新しめの情報に目を光らせ、興味が沸いたらまた記事にしようと思います。</p><p>では、Futureの春の入門祭りはまだまだ続きますということで、次回担当の 高世駿 さんの <a href="/articles/20230510a/">正規表現入門</a> です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%8E%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89/">ノーコード</category>
      
      <category domain="https://future-architect.github.io/tags/ApplicationComposer/">ApplicationComposer</category>
      
      
      <comments>https://future-architect.github.io/articles/20230509a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>新人の時に出会いたかった本の紹介</title>
      <link>https://future-architect.github.io/articles/20230508b/</link>
      <guid>https://future-architect.github.io/articles/20230508b/</guid>
      <pubDate>Sun, 07 May 2023 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230508b/P55740_common_pc.jpg&quot; alt=&quot;&quot; width=&quot;426&quot; height=&quot;600&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230508b/P55740_common_pc.jpg" alt="" width="426" height="600"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>齊藤です。よろしくお願いします。<a href="/articles/20230417a">春の入門連載2023</a>の12日目です。</p><p>まず、私が新人の時に出会いたかった本というのは、<a href="https://bookplus.nikkei.com/atcl/catalog/18/P55740/">CAREER SKILLS ソフトウェア開発者の完全キャリアガイド</a>です。</p><p>本書は著者がソフトウェア開発者としての第1歩の踏み出し方、成長やキャリアの伸ばし方についての本がなく、著者のYouTubeチャンネルでの質問が絶えないことから、必要と感じ執筆した本とのことです。</p><p>本の見出しとは別に、さらに メタ（高次）的 な分類があり、読者を3つのキャリアステージに割り当て読むべき部分をまとめています。</p><ul><li><strong>初心者、またはソフトウェア開発について学ぶことに興味を感じ始めたばかりの人</strong><blockquote><p>ソフトウェア開発&#x2F;プログラミングをこれから学びたいと思っていたり、少し勉強したことがあったりするものの、まだプロとしてソフトウェア開発をしたことがない人なら、ソフトウェア開発者として第一歩を踏み出す方法と最初の就職先を手に入れる方法を説明した第1部「ソフトウェア開発者になる方法」と第2部「就職する方法」がもっとも役に立つだろう。</p></blockquote></li><li><strong>キャリア形成中の開発者</strong><blockquote><p>あなたにとってもっとも役に立つのは、第3部「ソフトウェア開発の必須知識」だろう。この第3部には、あなたの知識のなかにあるかもしれない穴を埋め、自分の手でキャリアを管理して職場で成功を収めるために役に立つことが書かれている。</p></blockquote></li><li><strong>経験を積んだプロフェッショナル</strong><blockquote><p>さらに、あなたはほかの開発者のメンターになっていたりはしないだろうか？スタートの切り方について彼らにアドバイスすべきことが書いてあれば便利ではないだろうか？</p></blockquote></li></ul><p>「春の入門祭り」の通り、今年から晴れてソフトウェア開発者としてのキャリアをスタートした <strong>初心者、またはソフトウェア開発について学ぶことに興味を感じ始めたばかりの人</strong> に向け、 <strong>第1部「ソフトウェア開発者になる方法」</strong> を現在の様々な動向に合わせて紹介し、少しでもスタートダッシュを決められるように、また、偶然目にとまった <strong>キャリア形成中の開発者</strong> 、 <strong>経験を積んだプロフェッショナル</strong> の方々には <strong>スタートの切り方について彼らにアドバイスすべきこと</strong> のショートカットとして引用しスタートダッシュをアシストしていただければと思います。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><p>初心者、またはソフトウェア開発について学ぶことに興味を感じ始めたばかりの人 を対象とした章は以下の通りです。</p><ul><li>第2章 スタートの切り方</li><li>第3章 身につけないといけない技術スキル</li><li>第4章 技術スキルの身につけ方</li><li>第5章 どのプログラミング言語を学ぶべきか</li><li>第6章 最初のプログラミング言語の学び方</li><li>第7章 大学の活用</li><li>第8章 コーディングブートキャンプ</li><li>第9章 独学</li></ul><p>※第0章、第1章は、導入になります。</p><h3 id="第2章-スタートの切り方"><a href="#第2章-スタートの切り方" class="headerlink" title="第2章 スタートの切り方"></a>第2章 スタートの切り方</h3><p>ここでは、ソフトウェア開発とはどんな仕事かが記載されています。</p><p>コーディングは行うが、他にどんなことを仕事として行うか？大きくは、問題の理解を行い、設計、コーディング、テストとデプロイなどの作業があり、どの部分を仕事にしていくか、どのようなソフトウェア（ゲーム？BtoC？基幹システム？）を仕事にしていくか……</p><p>まずは、自分がどんなソフトウェア開発者になりたいかプランを立てることが必要となるということです。ここは、職場の先輩や上司との1on1などでプランニングしていけるかと思います。</p><h3 id="第3章-身につけないといけない技術スキル"><a href="#第3章-身につけないといけない技術スキル" class="headerlink" title="第3章 身につけないといけない技術スキル"></a>第3章 身につけないといけない技術スキル</h3><p>プログラミング言語は1つを深く学ぶ方が良く、種類よりも<strong>明瞭でわかりやすいコードの書き方</strong>を身につけることが大事であるとのことです。理由は、後半で出てきますが業務ではコードを書くよりも読む時間のほうが多く、デバックに多くの時間を使います。読みやすいコードは自分自身が読む際の助けになり、また、同僚や上司から評価されることにも繋がります。</p><p>テックブログ内では、以下の記事を見て勉強してもらえるとより良いと思います。</p><ul><li><a href="/articles/20211007a/">Java17対応版！Javaコーディング規約の紹介</a></li><li><a href="/articles/20190610/">ソースコードを綺麗にするためにまず心がけたい３点</a></li></ul><p>他に書籍内では、オブジェクト指向、アルゴリズム、OSや開発プラットフォーム、フレームワーク、データベース、バージョン管理ツール、ビルド&#x2F;デプロイ&#x2F;テスト&#x2F;デバック、と続きます。</p><p>個人的にはフレームワークの学習は大事です！情報系の大学に通っていたのですが、Microsoftに全振りでした。スタックとしては、Windows Server + C# + ASP.NET(まだ息してるかな……) + Visual Studio。会社に入ってからは、Linux(RHEL) + Java + Struts1&amp;Springの合体オレオレFW + Eclipse。フレームワークの知識もライブラリーの知識もカスリもせず、概念レベルで学び直しが必要でした。(C#とJavaが似ていたのが救い……)。流行りを追うのは大事です。</p><p>アルゴリズムについては、TopCoderがおすすめされていましたが、日本では<a href="https://atcoder.jp/?lang=ja">AtCoder</a>がおすすめです。自分は簡単な問題しかできないため、知り合いに「ログインボーナスやってるの？」と揶揄されました(笑) デイリーミッション感覚で続けてます。</p><p>バージョン管理ツールについては、タイムリーな記事がありますね！ <a href="/articles/20230428a/">初心者による初心者のための Git 入門</a></p><h3 id="第4章-技術スキルの身につけ方"><a href="#第4章-技術スキルの身につけ方" class="headerlink" title="第4章 技術スキルの身につけ方"></a>第4章 技術スキルの身につけ方</h3><p>１冊の本で学ぶのではなく、複数の本からブログ、ポッドキャスト、チュートリアルなどを見てそれらを組み合わせ、学習プランを立てるのが良いとのことです。複数見ることで共通箇所から重要な部分や学ぶ順序を知ることができるので効率よく学習を進められる。そして、突き詰めるよりも、手を動かし好奇心に任せて学習を進めていくとよいでしょう。</p><p>Twitterなどで有名な方を追っかけているといろいろおすすめされていますし、My new gear している人も多いのでハイテクグッズ好きはハマるかも。</p><h3 id="第5章-どのプログラミング言語を学ぶべきか"><a href="#第5章-どのプログラミング言語を学ぶべきか" class="headerlink" title="第5章 どのプログラミング言語を学ぶべきか"></a>第5章 どのプログラミング言語を学ぶべきか</h3><blockquote><p>どの言語を選ぶかはあまり大きな問題ではない。<br>最初のプログラミング言語の学習は、いつもかならずもっとも難しい。</p></blockquote><p>プログラミング言語は、細部では異なるが共通する部分が多くあり、2つ目のプログラミング言語を修得するのは簡単になるため、どの言語を学ぶかに悩む必要はなく就職しやすさで選べば良いとのことです。就職している方は、所属企業で主に使っている言語を選べば間違いないと思われます。</p><blockquote><p>言語機能の知識よりもライブラリーやフレームワークを活用することの方が、はるかに重要だ。</p></blockquote><p>そして、昨今ではOSSの利活用が進められており、複数のライブラリーを組み合わせてシステムを作ることが増えています。プログラミング言語の完全なマスターに匹敵するスキルも増えているため、最初に学ぶ言語についてあまり悩むことはないとのことです。</p><p>繰り返します！フレームワーク大事！！</p><h3 id="第6章-最初のプログラミング言語の学び方"><a href="#第6章-最初のプログラミング言語の学び方" class="headerlink" title="第6章 最初のプログラミング言語の学び方"></a>第6章 最初のプログラミング言語の学び方</h3><p>流れとしては、以下のような感じです。</p><blockquote><p>まずは動いているアプリケーションを見てみる</p></blockquote><p>とりあえず、世間で人気のOSSを見つけて、その中のコードを読み理解できるところがあるか見てみる。おそらく、実際のコードを見てみることでよく使われる機能や書き方を知ることで、言語の全体像を掴んだり、後のチュートリアルや参考書を読む際にあまり使われない機能や表記法の学習の優先度を下げることができるメリットがあると思います。</p><blockquote><p>優れた教材や本を複数見つけてきて流し読みする</p></blockquote><p>ここでもあくまで、学ぶ対象の全体像を調べることに重きを置きます。未知の未知を取り除くようにしたい、と著者は言っており何が分からないか分かればGoogle検索すればいいよね、とのことです。</p><blockquote><p>言語機能とライブラリーの違いを学ぶ</p></blockquote><p>「第5章 どのプログラミング言語を学ぶべきか」の最後のほうにも記載していますが、ライブラリーやフレームワークの使い方を知ることに重点を置くものが増えています。そのため、ここでは、言語自体の機能なのか、ライブラリーの機能なのかを意識する必要があるとのことです。</p><p>おすすめは、前述にもありましたが<a href="https://atcoder.jp/?lang=ja">AtCoder</a>です。ABCと呼ばれるAtCoder Beginner Contestの簡単な問題が多くあり、言語用法を問うような問題が多く有り、ブラウザ上の実行環境でプログラムを動作させ正否の判定できるため、初学者がプログラミング言語を勉強するのにおすすめです。さらに習熟度が上がった後もより難しいアルゴリズム問題などを解きたい場合にも有用です。</p><blockquote><p>何かを作る……たくさんの何かを</p></blockquote><p>小さなアプリケーションを言語の機能のみを使って作成することで、言語に対する習熟度の向上や、やりたいことを言語の機能でどのように実現するかマッピング能力を向上させます。本ではいくつか例題がありますが、先輩に教わったおすすめはToDoアプリです。追加、変更、削除とよくある機能を実装ができるのでおすすめです。</p><h2 id="おまけ-就職も視野に入れた人向けのコンテンツ"><a href="#おまけ-就職も視野に入れた人向けのコンテンツ" class="headerlink" title="おまけ(就職も視野に入れた人向けのコンテンツ)"></a>おまけ(就職も視野に入れた人向けのコンテンツ)</h2><p>この記事では、就職した人をターゲットにと思い記載しています。書きたい内容から逸れそうな部分は割愛していますが、コーディングブートキャンプや独学のメリットやデメリットは参考になるため、おまけとして簡単にまとめておきます。</p><p>ソフトウェア開発者としてスタートするための3種類の戦略、経路について、以下の3つの章で述べられています。</p><ul><li>第7章 大学の活用</li><li>第8章 コーディングブートキャンプ</li><li>第9章 独学</li></ul><div class="scroll"><table><thead><tr><th align="left">戦略</th><th align="left">知識</th><th align="left">時間</th><th align="left">お金</th></tr></thead><tbody><tr><td align="left">大学の活用</td><td align="left">体系立った学び、コンピューターサイエンスの基礎知識の修得(仕事現場のリアルからは古い可能性あり)</td><td align="left">長期間</td><td align="left">高い</td></tr><tr><td align="left">コーディングブートキャンプ(オンラインスクールなど)</td><td align="left">分野を絞り実社会寄りの知識修得(コンピューターサイエンスの知識の一部に穴が開く)</td><td align="left">大学に比べ非常に短い期間(数時間から数日のものが日本には多め)</td><td align="left">低い</td></tr><tr><td align="left">独学</td><td align="left">関心のあることに集中(学ぶ対象は自分で決める必要があり、これまでの選択肢の中で一番知識に穴が空きやすい)</td><td align="left">自分のペース(自分に合ったペースで進められるがやる気に左右されてしまう)</td><td align="left">低コスト、または、コストなし</td></tr></tbody></table></div><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>以上が、私が新人の時に出会いたかった本で、ご紹介したい部分の抜粋です。他にも初心者向けの中でも割愛した部分も多くあり、また、経験者向けの情報もあるため、気になった方は見てみていただければです。。</p><p>本書「第53章 ブログの作り方」では、<code>大切なのは、人々がシェアしたりリンクしたりしたくなるいいコンテンツを作ることだ。</code> と書かれておりますが近道はないともあり、改めてブログを書くのは難しいと認識させられました……たくさん書いて行きます。</p><p>なお、この著書の「最後に」は第60章になります。かなり長いように感じますが、目次を見て拾い読みすることを推奨している本のため、気負わずパラパラと眺めてみてください。</p><p>次は佐藤更星さんの<a href="/articles/20230509a/">AWS Application Composerを使ってみた！</a>です！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      
      <comments>https://future-architect.github.io/articles/20230508b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>5分でできる。Windowsの脆弱性を「Vuls」で今すぐチェック！</title>
      <link>https://future-architect.github.io/articles/20230508a/</link>
      <guid>https://future-architect.github.io/articles/20230508a/</guid>
      <pubDate>Sun, 07 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。ペンギンになりたい見習いエンジニア、島ノ江です。&lt;/p&gt;
&lt;p&gt;現在は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。ペンギンになりたい見習いエンジニア、島ノ江です。</p><p>現在は<a href="https://vuls.biz/">FutureVuls</a>という脆弱性管理クラウドサービスで、開発とサポートなどを担当しています。</p><p>未だよちよち歩きの新米ですが、今回は弊チームがOSSとして公開しメンテナンスしている「Vuls」の新機能についてご紹介させていただきたいと思います。</p><h3 id="脆弱性とその検知"><a href="#脆弱性とその検知" class="headerlink" title="脆弱性とその検知"></a>脆弱性とその検知</h3><p>皆さんは、自社が保有するサーバやソフトウェアに脆弱性がないかどうか、どのようにチェックしていますか？脆弱性を放置したまま運用すると、サイバー攻撃により企業に大きな損害をもたらす恐れがあるため、対策を講じることが不可欠です。</p><p>しかし、人間が情報収集から影響調査までを手動で行う脆弱性対応には、膨大な作業量と苦痛と絶望感が伴います。</p><p>そこで我々が提供するVulsが登場します。</p><p><a href="https://github.com/future-architect/vuls">Vuls</a>は、各種OVALやSecurityTrackerなどの情報、NVDやJVNなどの公開されている脆弱性情報をデータベース化し、サーバやソフトウェアの脆弱性を自動検知するツールです。</p><p>また、商用版の継続的脆弱性管理クラウドサービスである<a href="https://vuls.biz/">FutureVuls</a>では、検知した脆弱性の自動リスク判定やチケット機能による差分管理機能などを提供しており、脆弱性管理の一連の作業を自動化できます。</p><p>1万 GitHub Star目前！</p><img src="/images/20230508a/vuls.png" alt="" loading="lazy"><p>そんな便利ツールのVulsですが、これまではWindowsはサポートしていませんでした。</p><p>米国の行政機関CISA(Cybersecurity &amp; Infrastructure Security Agency)の<a href="https://www.cisa.gov/news-events/cybersecurity-advisories/aa22-117a">報告</a>によると、2021年に頻繁にサイバー攻撃に利用された注意すべき脆弱性上位 15位のなかでWindowsのものは半数を超えています。 そして、Windowsのアップデートや脆弱性の管理は特に重点的に行う必要があるものの、継続的にメンテナンスされているOSSのWindows用脆弱性スキャナはごく少数なのが現状です。</p><p>「クッ、やはりWindowsの脆弱性検知は商用版を買うしかないのか…これがOSSの限界か…」と悩んでいたそんなあなたに朗報です！</p><p>これまでクラウドサービス版向けに提供されていた、Windowsスキャン機能が移植され、OSSのVulsでもWindowsをスキャンできるようになりました。</p><p>参考）<a href="https://prtimes.jp/main/html/rd/p/000000623.000004374.html">継続的脆弱性管理サービス「FutureVuls」Windowsのための脆弱性スキャナをOSS化</a></p><p>この新機能を紹介するため、今回の記事ではWindowsサーバのスキャンを試していきます！</p><h2 id="WindowsサーバでVulsの脆弱性スキャンを試す"><a href="#WindowsサーバでVulsの脆弱性スキャンを試す" class="headerlink" title="WindowsサーバでVulsの脆弱性スキャンを試す"></a>WindowsサーバでVulsの脆弱性スキャンを試す</h2><p>実際にWindowsサーバにVulsの実行環境を作成して、サーバスキャンをやってみようと思います。</p><p>今回は筆者の自宅にあったWindows Server 2012を対象としています。</p><p>実行手順は以下の通りです：</p><ol><li>スキャンをするvuls、脆弱性データベースを作成するgostの実行ファイルをそれぞれ取得する。</li><li>gostを実行して、Windowsで検知するためのDBを作成する</li><li><code>vuls.exe scan</code>, <code>vuls.exe report</code>により検知を実行、結果を確認する。</li></ol><p>たったのこれだけで脆弱性の検知ができます、簡単ですね！<br>以下で実際の作業手順を見ていきます。</p><h3 id="実行ファイルの取得"><a href="#実行ファイルの取得" class="headerlink" title="実行ファイルの取得"></a>実行ファイルの取得</h3><p>GitHubレポジトリから自分の環境に併せて実行ファイルをダウンロードします。</p><ul><li>vuls：<a href="https://github.com/future-architect/vuls/releases">こちら</a>から最新バージョンのvuls実行ファイルを選択</li><li>gost：<a href="https://github.com/vulsio/gost/releases">こちら</a>から最新バージョンのgost実行ファイルを選択</li></ul><h3 id="検知用の脆弱性データベースの作成"><a href="#検知用の脆弱性データベースの作成" class="headerlink" title="検知用の脆弱性データベースの作成"></a>検知用の脆弱性データベースの作成</h3><p>次にWindowsで検知するためのデータベースをローカルに作成します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gost.exe fetch microsoft</span><br></pre></td></tr></table></figure><p>その後、スキャン用の設定ファイル（config.toml）を作成して、ここで作成したデータベースへのパスを定義します。（以下のsqlite3Pathの部分を各自の環境に併せてください）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.toml の内容</span></span><br><span class="line"><span class="section">[gost]</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;sqlite3&quot;</span></span><br><span class="line"><span class="attr">sqlite3Path</span> =  <span class="string">&quot;C:\\Users\\User\\vuls\\gost.sqlite3&quot;</span>  <span class="comment"># ここを編集</span></span><br><span class="line"><span class="section">[servers]</span></span><br><span class="line"><span class="section">[servers.localhost]</span></span><br><span class="line"><span class="attr">host</span> = <span class="string">&quot;localhost&quot;</span></span><br><span class="line"><span class="attr">port</span> = <span class="string">&quot;local&quot;</span></span><br></pre></td></tr></table></figure><h3 id="スキャンとレポートを実行する"><a href="#スキャンとレポートを実行する" class="headerlink" title="スキャンとレポートを実行する"></a>スキャンとレポートを実行する</h3><p>以上でWindowsスキャンの準備が完了したので、スキャンを実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vuls.exe scan</span><br></pre></td></tr></table></figure><p>最終的なスキャン結果が表示されます。</p><p>検出した脆弱性の一覧を表示してみましょう。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vuls.exe report</span><br></pre></td></tr></table></figure><img src="/images/20230508a/vuls_report.png" alt="" loading="lazy"><p>自分のサーバで見つかった脆弱性と、それらのCVSSスコアなどが表形式で表示されました。</p><p>WindowsのアップデートはKBという単位で提供されていますが、インターネットの情報ではKBとCVSSスコアなどを関連付けるのが手間でした。Vulsを使うと、未適用なKBに含まれる脆弱性をCVEに展開してくれて、さらにそのCVSSを表示してくれるので対応有無を判断しやすくなります。</p><p>なお、評価が0.0や？になっているものは、CVSSスコアが設定されていないものです。</p><p>通常の煩雑な脆弱性検知のプロセスを、簡単な導入手順で自動化することができるのは楽ですね！最終的な出力結果も表形式になっていてとても見やすいです。</p><h2 id="まとめ：脆弱性スキャナといえばVulsでしょ"><a href="#まとめ：脆弱性スキャナといえばVulsでしょ" class="headerlink" title="まとめ：脆弱性スキャナといえばVulsでしょ"></a>まとめ：脆弱性スキャナといえばVulsでしょ</h2><p>Vulsのスキャナは、どなたでも無償で利用できるオープンソースのツールです。</p><p>今回はWindowsスキャンについて紹介しましたが、Vulsは様々なOSに対応しています。脆弱性検知のツールの１つとして是非ご活用ください。</p><p>ただし、脆弱性は見つけるだけでは意味がありません。リスクに応じて適切に対応するまでが脆弱性対応です。クラウド版の<a href="https://vuls.biz/">FutureVuls</a>では、Vulsで検知した脆弱性の対応優先度の自動判断から解消までのサポートを提供しています。</p><p>以上でOSSのVulsで行うWindowsスキャンの紹介を終えたいと思います。</p><p>良ければいいね・ツイートなどで共有をお願いします！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Security/">Security</category>
      
      
      <category domain="https://future-architect.github.io/tags/Vuls/">Vuls</category>
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/Security/">Security</category>
      
      
      <comments>https://future-architect.github.io/articles/20230508a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>cf-terraformingで入門するCloudflare</title>
      <link>https://future-architect.github.io/articles/20230502a/</link>
      <guid>https://future-architect.github.io/articles/20230502a/</guid>
      <pubDate>Mon, 01 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは。TIGの伊藤太斉です。この記事は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは。TIGの伊藤太斉です。この記事は<a href="/articles/20230417a">春の入門連載2023</a>の12(11)日目です。</p><p>先日、Cloudflareの勉強会に参加してきて、これまで名前しか知らなかったものが少し知ることができてとワクワクしている最近です。そして、春の入門連載に今年も参加しているので、せっかくならCloudflareを記事にしつつ、理解を深めていこうと思います。</p><p>いきなりCloudflareのサービスに入門するよりは、自分の分野であるTerraformからCloudflareに入門します。</p><p>Cloudflare Workersについては、小澤さんの<a href="/articles/20230427a">CDN 入門とエッジでのアプリケーション実行</a>でも触れているので合わせてご覧になってください。</p><h2 id="CloudflareとTerraform"><a href="#CloudflareとTerraform" class="headerlink" title="CloudflareとTerraform"></a>CloudflareとTerraform</h2><p>Terraformは言わずもがな、Infrastructure as Code(IaC)を実現するためのツールとして知られています。そして、CloudflareについてもTerraformのProviderをCloudflareで開発しており、他のパブリッククラウドやサービスと同じようにTerraformで管理することができます。</p><p><a href="https://github.com/cloudflare/terraform-provider-cloudflare">https://github.com/cloudflare/terraform-provider-cloudflare</a></p><p>さて、このようにTerraform管理できることで、Cloudflareのリソースがどれだけあるか、どのように設定されているか見通しを良くすることができますが、一方で元々手動で作ってしまったリソースをTerraformの管理下とする場合、そもそも全量把握できているか、と不透明な状況になります。そこで、今回取り上げるcf-terraformingです。</p><h2 id="cf-terraformingによるIaC化"><a href="#cf-terraformingによるIaC化" class="headerlink" title="cf-terraformingによるIaC化"></a>cf-terraformingによるIaC化</h2><p>cf-terraformingは、Cloudflareにて開発されているOSSで、その名前の通り、Cloudflare上のリソースをHCL化し、出力されたソースを利用してTerraformのState管理下にすることができるツールです。利用準備も含めて、実際に見ていきましょう。</p><p><a href="https://github.com/cloudflare/cf-terraforming">https://github.com/cloudflare/cf-terraforming</a></p><p>また、類似のツールとして<a href="https://github.com/GoogleCloudPlatform/terraformer">terraformer</a>もあり、ソースの生成からStateの変更まで一括でできる点はメリットですが、Terraformのv1.x系のサポートがないため、importされたソースをアップデートする必要があります。</p><h3 id="利用準備"><a href="#利用準備" class="headerlink" title="利用準備"></a>利用準備</h3><p>はじめに環境構築をしましょう。今回はMac環境で進めていきます。前提としてHomebrewを利用できるようにしておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Terraformのインストール</span></span><br><span class="line">$ brew tap hashicorp/tap</span><br><span class="line">$ brew install hashicorp/tap/terraform</span><br><span class="line"></span><br><span class="line"><span class="comment"># cf-terraformingのインストール</span></span><br><span class="line">$ brew tap cloudflare/cloudflare</span><br><span class="line">$ brew install --cask cloudflare/cloudflare/cf-terraforming</span><br></pre></td></tr></table></figure><p>CLIはこれで準備が完了したので、次にディレクトリ周りの準備です。<br>cf-terraformingを利用する際には事前にProviderが利用できる状態になっている必要があるので、以下のように任意のディレクトリを作成し、<code>provider.tf</code>を作成しておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> cloudflare-terraform</span><br><span class="line">$ <span class="built_in">cd</span> cloudflare-terraform</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># provider.tf</span><br><span class="line">provider &quot;cloudflare&quot; &#123;&#125;</span><br></pre></td></tr></table></figure><p>上記のファイルを準備した上で、<code>terraform init</code>コマンドを実行しておきましょう。<br>また、環境変数周りの設定も必要になるので、</p><ul><li><code>CLOUDFLARE_API_TOKEN</code></li><li><code>CLOUDFLARE_API_KEY</code></li><li><code>CLOUDFLARE_EMAIL</code></li><li><code>CLOUDFLARE_ACCOUNT_ID</code></li></ul><p>の4つを使える状態にしておきましょう。私の場合には、以下のように<code>env</code>ファイルに記述して、利用できるようにしました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># env</span></span><br><span class="line"><span class="built_in">export</span> CLOUDFLARE_API_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line"><span class="built_in">export</span> CLOUDFLARE_API_KEY=yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy</span><br><span class="line"><span class="built_in">export</span> CLOUDFLARE_EMAIL=user@sample.com</span><br><span class="line"><span class="built_in">export</span> CLOUDFLARE_ACCOUNT_ID=00000000000000000000000000</span><br></pre></td></tr></table></figure><p>これで、準備が整ったので、実際のリソースに対して実行しましょう。cf-terraformingには、<code>generate</code>と<code>import</code>の2つのコマンドがあります。ここからはそれぞれ使って、WorkersのKVを触ってみようと思います。名前は以下のように<code>SAMPLE_TF</code>としました。</p><img src="/images/20230502a/image.png" alt="image.png" width="825" height="502" loading="lazy"><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><p>まずは、<code>generate</code>コマンドを使ってみます。Workers KVはAccount単位で利用するリソースであることと、事前に環境変数を利用できるようにしてあるので、 以下のワンラインを入力すると、それに対応したTerraformのコードが出力されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cf-terraforming generate --resource-type <span class="string">&quot;cloudflare_workers_kv_namespace&quot;</span></span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;cloudflare_workers_kv_namespace&quot;</span> <span class="string">&quot;terraform_managed_resource_xxxxxxxxxxxxxx&quot;</span> &#123;</span><br><span class="line">  account_id = <span class="string">&quot;00000000000000000000000000&quot;</span></span><br><span class="line">  title      = <span class="string">&quot;SAMPLE_TF&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記で<a href="https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/workers_kv_namespace">cloudflare_workers_kv_namespace</a>に対応したリソースが作成されたことがわかりました。実際には、ファイルに記述して利用したいので、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cf-terraforming generate --resource-type <span class="string">&quot;cloudflare_workers_kv_namespace&quot;</span> &gt;&gt; workers_kv_namespace.tf</span><br></pre></td></tr></table></figure><p>のように利用するのが良さそうです。また、新規にWorkers KVを作成した場合(<code>SAMPLE_TF2</code>)とした場合には以下のような出力になるため、指定したTerraformのリソースに該当するリソースを全て出力してくれるようです。</p><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p><code>cf-terraforming generate</code>コマンドで出力したHCLを利用してState管理下にしていきましょう。<br>コマンドは、先ほど実行した<code>generate</code>を<code>import</code>に変えた形で、実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cf-terraforming import --resource-type <span class="string">&quot;cloudflare_workers_kv_namespace&quot;</span></span><br><span class="line"></span><br><span class="line">terraform import cloudflare_workers_kv_namespace.terraform_managed_resource_xxxxxxxxxxxxxx xxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>このように<code>cf-terraforming import</code>コマンドでは「<code>terraform import</code>コマンドのワンライン」を出力してくれるようです。それでは、この出力されたコマンドを入力してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ terraform import cloudflare_workers_kv_namespace.terraform_managed_resource_xxxxxxxxxxxxxx xxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">cloudflare_workers_kv_namespace.terraform_managed_resource_xxxxxxxxxxxxxx: Importing from ID <span class="string">&quot;xxxxxxxxxxxxxx&quot;</span>...</span><br><span class="line">╷</span><br><span class="line">│ Error: invalid <span class="built_in">id</span> (<span class="string">&quot;xxxxxxxxxxxxxx&quot;</span>) specified, should be <span class="keyword">in</span> format <span class="string">&quot;accountID/namespaceID&quot;</span></span><br><span class="line">│</span><br><span class="line">│</span><br><span class="line">╵</span><br></pre></td></tr></table></figure><p>エラーになってしまいました。エラーの内容を読んでみると「<code>accountID/namespaceID</code>の形式でコマンドを実行してね」なので、上で入力したnamespaceIDの手前にaccountIDを差し込んで再度トライしたところ、成功しました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ terraform import cloudflare_workers_kv_namespace.terraform_managed_resource_xxxxxxxxxxxxxx 00000000000000000000000000/xxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">cloudflare_workers_kv_namespace.terraform_managed_resource_xxxxxxxxxxxxxx: Importing from ID <span class="string">&quot;00000000000000000000000000/xxxxxxxxxxxxxx&quot;</span>...</span><br><span class="line">cloudflare_workers_kv_namespace.terraform_managed_resource_xxxxxxxxxxxxxx: Import prepared!</span><br><span class="line">  Prepared cloudflare_workers_kv_namespace <span class="keyword">for</span> import</span><br><span class="line">cloudflare_workers_kv_namespace.terraform_managed_resource_xxxxxxxxxxxxxx: Refreshing state... [<span class="built_in">id</span>=xxxxxxxxxxxxxx]</span><br><span class="line"></span><br><span class="line">Import successful!</span><br><span class="line"></span><br><span class="line">The resources that were imported are shown above. These resources are now <span class="keyword">in</span></span><br><span class="line">your Terraform state and will henceforth be managed by Terraform.</span><br></pre></td></tr></table></figure><p>無事にTerraformのStateに取り込むことができました。<code>import</code>コマンドも実際にはそのまま使うのではなく、シェルスクリプトなどに格納した上で使っていくのが良いのかと思いました。</p><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><p>cf-terraformingは、公式の<a href="https://github.com/cloudflare/cf-terraforming#supported-resources">Supported Resources</a>に記載があるように、Cloudflareの全てのリソースに対して対応しているわけではありません。ただ、Terraformの管理下としたい場合の選択肢としては、Terraformが元来機能として有している<code>terraform import</code>コマンドもあり、ほとんどカバーすることが可能です。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はcf-terraformingを通して、Cloudflareに触ってみました。generateコマンドでコードを生成し、importコマンドでStateの管理下にする、という流れでIaCへのハードルがすごく下がった印象でした。さまざまな言語を学ぶ時にはじめにぶつかる「どう書くんだっけ？」という疑問が減ることがこのツールの大きな意義と感じました。また、その他でも触れましたが、ツールとしてはまだ適用範囲(特に個人向けでサクッと使うリソース)がもっと広がるとより使いやすくなりそうです。</p><p>週明けの5&#x2F;8は齊藤さんの <a href="/articles/20230508b/">新人の時に出会いたかった本の紹介</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/IaC/">IaC</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/Cloudflare/">Cloudflare</category>
      
      <category domain="https://future-architect.github.io/tags/cf-terraforming/">cf-terraforming</category>
      
      
      <comments>https://future-architect.github.io/articles/20230502a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>言語処理学会 (NLP2023) 参加報告</title>
      <link>https://future-architect.github.io/articles/20230501a/</link>
      <guid>https://future-architect.github.io/articles/20230501a/</guid>
      <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;みなさんこんにちは！フューチャー株式会社の藤井と申します。大学4年次より自然言語処理 (NLP)</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>みなさんこんにちは！フューチャー株式会社の藤井と申します。大学4年次より自然言語処理 (NLP) を専門とし、フューチャー入社以降はStrategic AI Group (SAIG) の一員として多種多様な業種・業界のお客様が抱える課題に対するAIの社会応用を推進しています。</p><p>さて、今回は遅ればせながら、2023年3月13日(月)〜3月17日(金)において沖縄県は宜野湾市で開催された<a href="https://www.anlp.jp/nlp2023/">言語処理学会第29回年次大会 (NLP2023)</a> に参加してきましたのでご報告いたします。</p><p>当社はゴールドスポンサーとして参加し、総勢8名、オンサイトでの聴講を行いました。</p><p>この記事では主に、SAIGから参加した5名より特に興味深かった発表・セッションを紹介していきたいと思います。どうぞよろしくお願いします！</p><img src="/images/20230501a/414EE21B-39AC-485D-9900-69EED8311105_1_105_c.jpeg" alt="414EE21B-39AC-485D-9900-69EED8311105_1_105_c.jpeg" width="1024" height="769" loading="lazy"><h2 id="言語処理学会とは"><a href="#言語処理学会とは" class="headerlink" title="言語処理学会とは"></a>言語処理学会とは</h2><p>言語処理学会は、自然言語処理（NLP）分野における国内最大の学会で毎年3月に開催されています。年次大会は今年で29回目を数え、発表件数、参加者数ともに右肩上がりで推移する勢いのある学会です。</p><p>近年は新型コロナウイルスの影響でオンライン開催でしたが、第29回大会では現地会場とオンラインのハイブリッド形式となり、国内の多くの自然言語処理研究者が一堂に会しました。口頭発表、ポスター発表に加え、近年ではワークショップも併設されNLPに関する幅広いトピックが活発に議論されています。</p><p>また、昨年11月に登場し、未だかつてないスピードで登録者1億人を突破するなど話題となったChatGPTの出現は本大会にも大きな衝撃を与えました。</p><p>大会2日目には緊急パネル「ChatGPTで自然言語処理は終わるのか」が企画されるなど “新たな” 自然言語処理に注目が集まっています。</p><h2 id="興味深かった発表・セッションの紹介"><a href="#興味深かった発表・セッションの紹介" class="headerlink" title="興味深かった発表・セッションの紹介"></a>興味深かった発表・セッションの紹介</h2><p>本セクションはSAIGから参加した5名のオムニバス形式でお送りします。</p><ul><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2023/pdf_dir/H5-2.pdf">[H5-2]</a> クエリ指向要約におけるクエリと要約の統合的な生成</strong><br>この研究では、文章の中からクエリに対する回答となる部分を要約して提示する「クエリ志向要約」タスクにおいて、クエリが未知のシチュエーションを想定し、クエリの候補とその要約を統合的に生成する「クエリ推薦付き要約」を提案しています。<br>手法自体はシンプルでOpenDomain QAに用いられるFusion-in-Decoderにおいて、クエリ生成・回答生成のシーンに応じた接頭辞を使い分け、クエリ→回答の順で生成を行うというものです (論文中では逆順や同時生成についても触れられています)。<br>実社会においては、例えば新たな製品を買ったとき、新たなプロジェクトに参加したときなど、そもそも何が書かれているのか分からない膨大なマニュアルに遭遇することが多々あります。<br>また、コールセンター業務などでも、リアルタイムに交わされる会話に基づいて、どのような質問があり、なんと答えたのかをその場で構造化された状態で閲覧できると高い業務削減効果を見込むことができると考えられます。<br>今後の課題としてあげられていたとおり、クエリ・要約作成時の処理単位など改善の余地はありますが、潜在ニーズが大きく今後の発展が期待できること、デモアプリとして動くものに落とし込む技術力を評価して挙げさせていただきました。 (藤井)</li><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2023/pdf_dir/H7-1.pdf">[H7-1]</a> 対話行為の分布を利用した雑談対話システムの評価指標</strong><br>この研究では、雑談システムの評価において、人手評価を含む多くの指標がシングルターンの対話に閉じていることに着目し、システムのふるまい全体の評価を目的とした新たな評価指標を提案しています。<br>Twitterのリプライチェーンから収集した人間の対話と、同様のデータでfine-tuningしたT5モデルによる生成結果に対話行為 (あいさつ、質問など各発話の役割) のアノテーションを付与し、人間がシステムに比べ多様な対話行為を使い分けていることや、人間の対話では相手の発言に応じて遷移しやすい対話行為があるのに対し、システムの対話には遷移の一貫性がないことを明らかにしました。<br>論文では上記の観測に基づき、対話行為のエントロピー (どれだけ多様か) および、相互情報量 (どれだけ決定的か) に基づく評価指標の有効性を検証しています。<br>対話行為と従来指標を相互に考慮した指標の提案や、人間の遷移パターンとの類似性を考慮することでさらなる発展が見込める話だと感じました。<br>また、人間とシステムの対話の違いを新たな観点から分析したことで、次に来るべき対話行為に誘導するようなインストラクションを与えるなど、より人間らしい対話の実現に向けた可能性も切り拓かれたと思います。 (藤井)</li><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2023/pdf_dir/H5-1.pdf">[H5-1]</a> 忠実性向上のためにn-gramの抽出性を報酬とする強化学習を用いる抽象型要約</strong><br>要約文生成タスクにおいて、原文書 (要約の元となる文書) と異なる事実を含む要約文をモデルが生成することがあります。<br>このようにモデルの入力に対して誤った事実を含む内容を出力してしまう現象をhallucinationと言いますが、この研究では忠実性を向上させhallucinationを抑える手法を提案しています。<br>著者らは、主流なデータセット中には原文書と異なる事実を含む正解要約文が多く存在しており、データセットのみに基づいた学習では不十分だと述べています。<br>提案手法は、データセットの学習に加えモデルが生成した要約文と原文書の一致率を報酬とした強化学習を組み合わせるというものです。<br>提案手法により忠実性が向上したと報告されています。<br>近年、ChatGPTを始めとした生成系AIが流行していますが、生成系AIにおいてhallucinationは見過ごせない問題です。<br>この研究のように、hallucinationを扱う研究はより重要になってくると思います。<br>今後が楽しみな研究です。 (加藤)</li><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2023/pdf_dir/B7-4.pdf">[B7-4]</a> Free Donut: E2E文書理解モデルにおけるAttentionを用いた文字領域アノテーション不要なテキスト検出手法の提案</strong><br>この研究では、既存のE2E文書理解モデルにおいて課題となっている、認識結果のテキスト位置情報を取得できないという問題を、推論時のモデル内のAttentionマップに着目することで解決する手法を提案しています。<br>E2E文書理解モデルは、テキストの検出、認識をそれぞれ別のモデルで行う従来の文書理解モデルと異なり、単一のモデルでテキストの検出、認識を行います。<br>そのため、モデルの学習に必要なアノテーションは、画像とそこに書かれているテキストの表層情報のみでよく、コストの高いテキスト位置のアノテーションが必要ないという点で優れています。<br>一方で、テキストの検出を明示的に行わないため、テキストの位置情報を取得できないという課題もあります。<br>この研究では、推論時のモデル内のAttentionマップに着目することで、この課題を解決しようとしています。<br>どの層のAttentionマップを用いるのが良いのか、Multi-headなAttentionマップに対してどのように平均を取るのが良いのか、などの分析が行われていたりと、とても興味深い研究でした。<br>最近話題となっているGPT4 (ChatGPT) も画像を入力可能になっていることを踏まえると、自然言語 + 画像の分野は今後もさらに発展していくことが期待されます。 (佐良)</li><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2023/pdf_dir/B1-1.pdf">[B1-1]</a> 計算資源が限られた複数組織での出力選択による協働の検討</strong><br>高度な計算資源と大量のデータを持たない小さな組織には、高性能な大規模ニューラルモデルの開発は難しいものです。<br>この論文では、そのような小さな組織がそれぞれ独自に開発したモデルを組み合わせた際のモデルの性能を検証しています。<br>独立に訓練された少訓練データかつ小サイズのモデル群と、多訓練データかつ大サイズの単独大モデルの英日翻訳の性能比較を行った結果、小モデル10個を組み合わせたモデルは、小モデルの10倍のデータ・3倍の規模のモデルの能力に匹敵する性能が達成されることが確認されました。<br>この研究を含め、巨大IT企業のデータに依存しないことを目的として、小規模のモデルを組み合わせることで高性能のモデルを作り出す研究が多数発表されていました。<br>これは、現在急速に発展しているブロックチェーンなどの分散型データベースの技術の目的と呼応したものとなっており、今後の発展が期待されます。 (細井)</li><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2023/pdf_dir/B8-2.pdf">[B8-2]</a> 画像キャプションを介した脳活動からの視覚体験再構成</strong><br>まず最初にこの論文の先行研究 (同じ著者) は、2023年6月開催予定のCVPR2023で採択されており、世界的にも注目されています。 (<a href="https://cinet.jp/japanese/news/20230323_9502/">https://cinet.jp/japanese/news/20230323_9502/</a>)<br>この研究の概要としては、脳の血流から活動状況を調べる機能的磁気共鳴画像法 (fMRI) の画像から視覚情報を読み取り映像化する内容となっております。<br>先行研究では脳活動情報から画像を生成していたようですが、脳活動情報の一部を言語化 (キャプション) してから画像生成することで先行研究より高精細で意味的に妥当な画像を出力する再構成性能 (デコード性能) を示すようになりました。<br>内容が複雑なので概要はざっくりとなってしまいましたが、研究自体がユニークで発想が面白いので個人的には必読な論文だと思います。<br>一方「NLPの研究というより画像や脳科学で別分野の研究では？」という意見もあると思いますが、NLP2023の発表の中にはStable DiffusionなどのText2Image技術を用いた「NLPの応用」を題材とした発表はいくつもありました。<br>これはStable DiffusionやChatGPTによる「AIの民主化」より別分野の研究者でも簡単に利用ができ、自由な発想が実現可能になった証でもあるのかなと思ったので、さまざまな分野が加速することを願いこの論文を紹介しました。 (岡本)</li><li><strong>緊急パネル : ChatGPTで自然言語処理は終わるのか？</strong><br>緊急パネル「ChatGPTで自然言語処理は終わるのか」では、日本におけるNLPの第一人者6名による白熱の議論が展開されました。<br>なぜこれほどまで急激な性能向上が起こったのか、誰ひとり分かっていないことも多く、現場には戸惑いの声も大きいように感じました。<br>世間では、AI (やそのひとつであるChatGPT) によって人間の仕事が奪われるのではないか、と危惧する声も聞こえます。<br>しかし、実際には未だ (少なくとも現代の弱い) AIは人間のように考えたり、感情を持つことはありません。<br>人間が「人間にしかできないこと」をするために、AIで解決できる課題にはAIを活用していくのが正しい向き合い方ではないかと思います。<br>これまで研究されてきた多くの問題は「ChatGPTで良いのでは？」と言われてしまうかもしれません。<br>しかし、その存在をネガティブに捉えず、ChatGPTで解決されうる課題には積極的にChatGPTを活用していくことで、新たな課題も浮き彫りになっていくのではないかと考えます。<br>大きな流れが変わる今こそチャンス、この姿勢を大事にしたいと思いました。</li></ul><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>私はフューチャーに入社してからは初めて、個人としても約4年ぶりのオンサイト学会参加でしたが、現地ならではの盛り上がり、会場の一体感を感じることで自身のモチベーションにもつながるとても有意義な時間を過ごすことができました。</p><p>ChatGPTを始めとする大規模言語モデル (LLM)の出現により、アカデミア、産業界を問わず未だかつてない注目が自然言語処理に集まっています。</p><p>「ChatGPTで自然言語処理は終わったのか」<br>自分なりの答えを出すならば、「持てるものの自然言語処理」は終わったのではないかと思います。途方も無い資源・計算リソースを持つ一部の組織に閉じず、いかなる個人、企業も自己の業務・生産活動の効率化、洗練のため大規模モデルの恩恵に預かることができるようになったことは大きなチャンスです。</p><p>しかしながら、事実に沿わない文章の生成、プライバシーや倫理的な問題など、LLMを実社会で使われるシステムに組み込むためには乗り越えなくてはならない障壁も多数あります。そのような課題を乗り越え、非連続的な成長を遂げるためには、技術的な側面はもちろん、日々の業務の中でどのようにAIと人間の協調の可能性を見出していくかも重要と考えます。</p><p>SAIGでは技術と業務の両輪でLLMの実社会応用を推進していく仲間を募集しています。</p><p>興味のある方、ぜひ一緒に働きましょう！</p><p>新卒採用 : <a href="https://www.future.co.jp/recruit/recruit/rec-fresh/">https://www.future.co.jp/recruit/recruit/rec-fresh/</a><br>キャリア採用 : <a href="https://www.future.co.jp/recruit/recruit/rec-career/">https://www.future.co.jp/recruit/recruit/rec-career/</a></p><img src="/images/20230501a/7445BE2B-C25B-400D-BEAA-C3F00E1519D2_1_105_c.jpeg" alt="7445BE2B-C25B-400D-BEAA-C3F00E1519D2_1_105_c.jpeg" width="1024" height="768" loading="lazy">]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%8F%82%E5%8A%A0%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">参加レポート</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/">機械学習</category>
      
      <category domain="https://future-architect.github.io/tags/NLP/">NLP</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%87%AA%E7%84%B6%E8%A8%80%E8%AA%9E%E5%87%A6%E7%90%86/">自然言語処理</category>
      
      <category domain="https://future-architect.github.io/tags/AI/">AI</category>
      
      
      <comments>https://future-architect.github.io/articles/20230501a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初心者による初心者のための Git 入門</title>
      <link>https://future-architect.github.io/articles/20230428a/</link>
      <guid>https://future-architect.github.io/articles/20230428a/</guid>
      <pubDate>Thu, 27 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230428a/top.png&quot; alt=&quot;&quot; width=&quot;588&quot; height=&quot;200&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230428a/top.png" alt="" width="588" height="200"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="/articles/20230417a/">春の入門祭り連載</a> 10 日目です。</p><p>はじめまして。</p><p>フューチャーアーキテクト TIG の石野です。2022&#x2F;10 に IT 未経験でフューチャーに新卒入社しました。</p><p>フューチャーの新人研修ではじめて GitLab を触ったので、初心者目線で学んだことをまとめてみました。</p><p>本記事では Git についてなにも知らない人・初めて触る人向けにフューチャーの新人研修で必要になった知識という観点で説明していきます。<br>これからフューチャーの新人研修を受ける方はもちろん、Git についての基礎知識を学びたい方にぜひ読んでいただきたいと思います。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>Git はバージョン管理ツールと呼ばれるものですが、バージョン管理ツールとは一体何かというところから基本的な Git コマンドについて以下の順番で説明します。</p><ul><li>バージョン管理ツールとは</li><li>集中型と分散型</li><li>GitLab と GitHub について</li><li>Git 基本用語</li><li>プル</li><li>ブランチ</li><li>コミット<ul><li>プッシュ</li></ul></li><li>基本の Git コマンド</li></ul><p>また、私が新人研修で大変お世話になった研修リーダーも研修について<a href="/articles/20230306a/">技術ブログ</a>を書いています。ぜひご覧ください。</p><h2 id="バージョン管理ツールとは"><a href="#バージョン管理ツールとは" class="headerlink" title="バージョン管理ツールとは"></a>バージョン管理ツールとは</h2><p>大学で卒業論文を書いた方ならきっと共感してもらえると思うのですが、私のパソコンでは卒論を書いたワードファイルが量産されていました。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">卒業論文.docx</span><br><span class="line">卒業論文_修正版.docx</span><br><span class="line">卒業論文_完成.docx</span><br><span class="line">卒業論文_完成2.docx</span><br><span class="line">卒業論文_最終版.docx</span><br></pre></td></tr></table></figure><p>これじゃどのファイルがどの順番でいつ作られたのか分かりませんね…</p><p>このようなファイルの変更履歴の管理をどうにかしてくれるのがバージョン管理ツールです。</p><p>ソースコードを複数人で開発するときに便利なため開発の現場でよく使われています。</p><h2 id="集中型と分散型"><a href="#集中型と分散型" class="headerlink" title="集中型と分散型"></a>集中型と分散型</h2><p>バージョン管理ツールには集中型と分散型が存在します。<br>以下では集中型と分散型のバージョン管理ツールそれぞれについて特徴を説明します。</p><h3 id="集中型"><a href="#集中型" class="headerlink" title="集中型"></a>集中型</h3><p>集中型のバージョン管理ツールでは、専用のサーバー上にあるリポジトリ（バージョン管理するファイルの保管場所）でファイルを管理します。</p><p>ファイルをバージョン管理する場合はリポジトリのあるサーバーに接続する必要があります。</p><p>集中型のバージョン管理ツールの例としては Subversion が挙げられます。</p><h3 id="分散型"><a href="#分散型" class="headerlink" title="分散型"></a>分散型</h3><p>分散型のバージョン管理ツールでは、サーバー上にあるリモートリポジトリのコピーをユーザーがローカルリポジトリに持つことができます。ユーザーはローカルリポジトリで開発を進め、ある程度作業が進んだらサーバーに接続しサーバー上のリモートリポジトリに変更を反映させます。集中型に比べて、複数人で作業をする際に非常に便利です。</p><p>Git はこの分散型のバージョン管理ツールのひとつです。</p><h2 id="GitLab-と-GitHub-について"><a href="#GitLab-と-GitHub-について" class="headerlink" title="GitLab と GitHub について"></a>GitLab と GitHub について</h2><p>Git については分かったけど、GitLab とか GitHub って言葉も聞いたことがあるな。Git と何が違うんだ？と思った方もいるかも知れません。</p><p>GitLab と GitHub はどちらも Git のホスティングサービスで、リモートリポジトリを提供しています。この 2 つ以外にも Git のホスティングサービスはいろいろあります。</p><h2 id="Git-基本用語"><a href="#Git-基本用語" class="headerlink" title="Git 基本用語"></a>Git 基本用語</h2><p>次に、Git の基本用語 4 つを説明します。</p><h3 id="プル"><a href="#プル" class="headerlink" title="プル"></a>プル</h3><p>分散型のバージョン管理ツールである Git にはリモートリポジトリとローカルリポジトリがあると説明しました。</p><p>プルはリモートリポジトリの内容をローカルリポジトリにコピーすることです。厳密には fetch と merge の 2 段階があり、単純にリモートリポジトリの内容をローカルリポジトリにコピーしているわけではないですが、慣れるまではコピーしていると考えてもよさそうです。</p><h3 id="ブランチ"><a href="#ブランチ" class="headerlink" title="ブランチ"></a>ブランチ</h3><p>ブランチとは枝という意味であり、Git ではソースコードを枝分かれして編集することができます。</p><p>たとえば、新機能である a を A さんが開発するとします。</p><p>その場合、A さんはリモートリポジトリからプルしてきたリーカルリポジトリ上で、 main ブランチから a ブランチを作って（ブランチを切るといいます）そのブランチ上で作業をします。そうすることで、A さんの作業中も main ブランチは常に安定した状態を保つことができます。</p><p>そして、機能 a の開発中に別の機能 b のバグ修正を B さんが行うことになった場合は、B さんは B さんのローカルリポジトリ上で main ブランチから fix_b ブランチを切ることで B さんは A さんとは独立して作業をすることができます。</p><p>fix_b ブランチでの修正が完了し、機能 b が問題なく動くことを確認できたら、 fix_bブランチを main ブランチに統合（マージ）することで main ブランチが更新されます。</p><h3 id="コミット"><a href="#コミット" class="headerlink" title="コミット"></a>コミット</h3><p>コミットするとはゲームでセーブデータを作るようなものです。</p><p>と先輩社員に教わったのですが、私はゲームに疎いのでちょっと理解に苦しみました。私のようにゲームに疎い人向けに説明すると、”コミットする”とは「あとあとこの時点に戻れたらうれしいな」というポイントに名前をつけて記録することです。</p><p>コミットした時点には後から戻ったり、コミット同士の違いを参照したりすることもできるのでうまく活用できると非常に便利です。</p><p>コミットはあとから消すこともできるので、いつコミットすれば分からないという方は迷ったらコミットしましょう。</p><p>コミットの頻度についてはいろいろ流派があるみたいなので、気になったら調べてみてください。私はまだ模索中です。</p><h3 id="プッシュ"><a href="#プッシュ" class="headerlink" title="プッシュ"></a>プッシュ</h3><p>プッシュとはプルとは逆にローカルリポジトリでの変更内容をリモートリポジトリに反映させることです。</p><p>リモートリポジトリにプッシュすることで自分が変更した内容を他の人も見ることができます。</p><h2 id="基本の-Git-コマンド"><a href="#基本の-Git-コマンド" class="headerlink" title="基本の Git コマンド"></a>基本の Git コマンド</h2><p>今紹介した、プル、ブランチ、コミット、プッシュを CLI （マウスなどではなくキーボードから入力するコマンドで PC を操作すること）で行う際の Git コマンドを紹介していきます。</p><ul><li><code>git pull origin &lt;ブランチ名&gt;</code><ul><li>リモートリポジトリにある指定したブランチをローカルリポジトリ上の現在のブランチにプルすることができます</li><li><code>origin</code> はリモートリポジトリの意味です</li></ul></li><li><code>git pull</code><ul><li>ブランチを指定しなかった場合は、現在のブランチに紐づいたブランチをプルします</li><li>あるブランチに紐づいたブランチを upstream branch と言い、明示的に設定できます</li><li>設定せずに <code>git pull</code> を実行するとプルはできません</li></ul></li></ul><p>git pull は前述の通り git fetch と git merge の 2 つのコマンドの組み合わせですが、新人研修のレベルではここまでの理解は必要ないので説明は割愛します。<br>本格的に Git を使うことになったら調べてみてください。</p><ul><li><code>git switch &lt;ブランチ名&gt;</code><ul><li>変更を加えるブランチが指定したブランチに切り替わります</li><li>他にもブランチを切り替えるコマンドとして <code>git checkout</code> というコマンドも存在します</li><li>私は、新人研修で最初に使ったのが <code>git switch</code> だったため <code>git checkout</code> はよく分かっていないですがどっちを使っても大丈夫です</li></ul></li><li><code>git switch -c &lt;ブランチ名&gt;</code><ul><li>指定したブランチ名のブランチを新しく作ります</li><li>このコマンドを実行した後は、変更を加えるブランチが作成されたブランチに切り替わります</li></ul></li><li><code>git add &lt;ファイルパス&gt;</code><ul><li>ステージエリアにファイルを追加します</li><li>ステージエリアがよく分からない方は、コミットの前に、<code>git add</code> コマンドでコミットするファイルを選んでると考えたら良いと思います</li></ul></li><li><code>git add --all</code><ul><li><code>--all</code> オプションを指定することで、変更した全てのファイルをコミットの対象とすることができます</li><li>いちいちファイルパスを指定するより楽ですが関係ないファイルも含まれてしまうので注意が必要です</li></ul></li><li><code>git add -u</code><ul><li><code>-u</code> オプションを指定することで、すでにバージョン管理されているファイルの中で変更があったもののみをコミットの対象とすることができます</li><li>新規に作成したファイルはコミットの対象となりません</li></ul></li><li><code>git commit -m &lt;コミットメッセージ&gt;</code><ul><li>ステージエリアにあるファイルをコミットメッセージを指定して、コミットすることができます</li></ul></li><li><code>git commit</code><ul><li>オプションを省略するとコミットメッセージを入力するためのテキストエディタが開きます</li><li>この際に開くテキストエディタは設定することができるので使い慣れたものを設定するのがおすすめです</li><li>よく分からんという方は <code>-m</code> でメッセージを指定しておきましょう</li></ul></li><li><code>git status</code><ul><li>ファイルの状態が確認できるので、<code>git add</code> する前後に使うことが多いコマンドです</li><li>確認できるのは<ul><li>変更された&#x2F;新規作成されたファイル一覧</li><li><code>git add</code> 済みのファイル一覧　です</li></ul></li></ul></li><li><code>git push origin &lt;ブランチ名&gt;</code><ul><li>指定したブランチに現在のブランチをプッシュします</li></ul></li></ul><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>バージョン管理ツールに馴染みがない方は、このような記事を読んでもなかなか理解が進まないと思うので、実際に手元で動かしてみるのが一番良い習得方法だと思います。</p><p>また、本記事ではフューチャーの新人研修で必要になる知識という観点で絞って説明しましたが、開発の現場で使うとなるともちろんこれらの知識だけでは足りないので、他のコマンドやブランチ運用なども調べてみてください。（私は絶賛勉強中です。）</p><p>次は伊藤さんの<a href="/articles/20230502a/">cf-terraformingで入門するCloudflare</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/Git/">Git</category>
      
      
      <comments>https://future-architect.github.io/articles/20230428a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CDN 入門とエッジでのアプリケーション実行</title>
      <link>https://future-architect.github.io/articles/20230427a/</link>
      <guid>https://future-architect.github.io/articles/20230427a/</guid>
      <pubDate>Wed, 26 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。Technology Inovation Group（TIG）所属の小澤です。&lt;br&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。Technology Inovation Group（TIG）所属の小澤です。<br><a href="/articles/20230417a/">春の入門祭り連載</a> 9 日目を担当します。</p><p>私は、通常の業務とは別に社員有志で集まるクラウド勉強会に参加しています。まだ経験が浅い（2022年10月新卒入社）こともあり、クラウド勉強会では入門的な内容を中心に発表しています。</p><p>この記事では、私がクラウド勉強会で発表した <strong>CDN の入門とエッジロケーションでのアプリケーション実行</strong>について説明します。</p><h2 id="CDN-とは？"><a href="#CDN-とは？" class="headerlink" title="CDN とは？"></a>CDN とは？</h2><p><strong>CDN</strong> （content delivery network, コンテンツ配信ネットワーク）は、Web アプリを含めた Web サイトのコンテンツ（HTML&#x2F;CSS&#x2F;JS&#x2F;画像など）を高速配信するための仕組みです。</p><p>通常、 Web サイトの静的コンテンツ（HTML&#x2F;CSS&#x2F;JS&#x2F;画像など）は Web サーバーに配置します。この場合、例えば全てのアクセスを単一の Web サーバーで担当するように構成すると、アクセスが集中するような時間帯や、通信する場所によって反応が遅くなってしまうことがあります。</p><p>これを解消する 1 つの方法は、Webサーバーの前に<strong>ロードバランサー</strong>を入れて負荷分散を実現することです。 しかし、単にロードバランサーを導入するだけでは、世界中からのアクセスがある場合など、<strong>地理的な距離に起因する遅延</strong>は解消できません。この課題は、オンプレミスでもクラウドでも同様に生じます。</p><p>そこで、サーバーへの負荷分散と地理的な制約による遅延軽減を同時に実現できるのが CDN です。</p><p>CDN では、コンテンツが入っている元の Web サーバー（<strong>オリジンサーバー</strong>）へのアクセス集中を防ぎ、地理的に近い<strong>エッジロケーション</strong>（エッジサーバー）に誘導します。エッジロケーションはデータセンターの一種ですが、世界中に配置され、クラウドの通常リージョンのデータセンターよりも多く設置されています。CDN の標準的な方法では、エッジロケーションはユーザーからのアクセスがあると、オリジンサーバを参照して次回以降のアクセスのためにコンテンツをキャッシュしておきます。次回以降のアクセスでは、キャッシュしたコンテンツをユーザーに配信します。</p><p>こうすることで、<strong>本来はオリジンサーバーにアクセスするはずだったリクエストを、エッジロケーションが代理して担当する</strong>ことで、負荷分散と地理的な高速配信を実現できます。</p><p>なお、エッジロケーションはオリジンサーバーのコンテンツをキャッシュしているだけなので、当然データの整合性は一時的に取れなります。そのため、通常の CDN サービスでは、キャッシュを保持する期間（<strong>TTL</strong>, time to live）を設定できるようになっています。 整合性を高く保ちたい場合はキャッシュの保持期間を短くすればよいわけです。 もちろん短くしすぎると、CDN の負荷分散の利点は弱くなるので、要件に応じてバランスを判断する必要があります。</p><h2 id="CDN-の仕組み"><a href="#CDN-の仕組み" class="headerlink" title="CDN の仕組み"></a>CDN の仕組み</h2><p>CDN は、<strong>地理的に近いエッジロケーションに誘導する</strong>と説明しましたが、実際はどのようにこの仕組みを実現しているのでしょうか？</p><p>CDN 利用時も、クライアント（Web ブラウザなど）は、通常時と同じくオリジンサーバーに向けたリクエストを送信します。 当然、クライアントはサーバーが CDN を使っているかどうかを意識する必要はありません。クライアントは飽くまでオリジンサーバーに向けたリクエストを発するわけです。</p><p>そこで、 CDN の実現のためには、オリジンサーバーに向かっているリクエストを、エッジロケーションに向ける仕組みが必要です。</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>その方法として、通常は <strong>DNS</strong>（domain name system） の仕組みを利用することで、地理的に近いエッジロケーションへのリクエストを実現します。DNS は、クライアントがアクセスしようとしているドメインを IP アドレスに名前解決（変換）する仕組みです。例えば、<code>google.com</code> をドメインを <code>172.217.31.174</code> という IP アドレスに変換します。</p><p>一般的に、クライアントがリクエストを送るとき、まず組織内や ISP などの DNS サーバーにドメインの名前解決を要求します。 組織内や ISP などの DNS サーバーは通常、<strong>DNS キャッシュサーバー</strong>と呼ばれ、自分自身での名前解決ができないため、別の DNS サーバーに再問合せをします。 このように問合せを繰り返し（<strong>反復的問合せ</strong>）、最終的に<strong>権威 DNS サーバー</strong>にたどり着きます。 権威 DNS サーバーは、対象のドメインと IP アドレスの対応を管理しているので、それを元にクライアントへ IP アドレスを応答できます。</p><h3 id="オリジンサーバーのドメインと-CDN-用ドメインの紐づけ"><a href="#オリジンサーバーのドメインと-CDN-用ドメインの紐づけ" class="headerlink" title="オリジンサーバーのドメインと CDN 用ドメインの紐づけ"></a>オリジンサーバーのドメインと CDN 用ドメインの紐づけ</h3><p>CDN を実現するための設定として、通常は CNAME レコードを用いてオリジンサーバーのドメインと CDN 用ドメインを紐づけます。</p><p>CNAME レコードは、ドメインと IP アドレスではなく、ドメインと別名ドメインを紐づける仕組みです。</p><p>例えば、<code>example.com</code> というオリジンサーバーに対して、<code>cdn.example.com</code> といった CDN 用ドメインを紐づけます。 ただし、CDN 用ドメインは通常 CDN ベンダーが発行するため、この例のようにシンプルな形式とは限りません。</p><p>※example.com は例示に利用できるドメインです。</p><h3 id="CDN-用ドメインに対応する-IP-アドレスの動的な名前解決"><a href="#CDN-用ドメインに対応する-IP-アドレスの動的な名前解決" class="headerlink" title="CDN 用ドメインに対応する IP アドレスの動的な名前解決"></a>CDN 用ドメインに対応する IP アドレスの動的な名前解決</h3><p>CDN を実現する肝となる仕組みがここです。 CDN 用ドメインは CDN ベンダーが管理しているため、権威 DNS サーバーの挙動は CDN ベンダーで決めることができます。</p><p>CDN を構成しない場合、権威 DNS サーバーは通常固定の IP アドレスを応答します。 しかしながら、CDN を構成する場合、固定の IP アドレスでは、地理的に近いエッジロケーションにアクセスさせるという要件を達成できません。</p><p>そこで、 <strong>CDN ベンダーの権威 DNS サーバーは、CDN 用ドメインに対応する IP アドレスを動的に変換して応答します</strong>。</p><p>その際、一般的には送信元の IP アドレスや AS （Autonomous System, ネットワーク群）を読み取り利用することで、最寄りのエッジロケーションを導出します。</p><p>例えば、</p><div class="scroll"><table><thead><tr><th>送信元の IP アドレス（範囲）</th><th>最短のエッジロケーション</th><th>最短のエッジロケーションの IP アドレス</th></tr></thead><tbody><tr><td>192.0.2.0</td><td>エッジロケーション A</td><td>203.0.113.0</td></tr><tr><td>192.0.2.1</td><td>エッジロケーション A</td><td>203.0.113.0</td></tr><tr><td>192.0.2.25</td><td>エッジロケーション A</td><td>203.0.113.0</td></tr><tr><td>198.51.100.0</td><td>エッジロケーション B</td><td>203.0.113.50</td></tr><tr><td>198.51.100.33</td><td>エッジロケーション B</td><td>203.0.113.50</td></tr></tbody></table></div><p>のようなイメージです。</p><p>※192.0.2.0&#x2F;24、198.51.100.0&#x2F;24、203.0.113.0&#x2F;24 は例示に利用できる IP アドレスブロックです。 実在する IP アドレスではありません。</p><p>以上のように、CDN では</p><ul><li>オリジンサーバーのドメインと CDN 用ドメインの紐づけ</li><li>CDN 用ドメインに対応する IP アドレスの動的な名前解決</li></ul><p>を用いて、オリジンサーバーへのリクエストを地理的に近いエッジロケーションへのリクエストに振り替るのが一般的です。</p><h2 id="CDN-サービスの例"><a href="#CDN-サービスの例" class="headerlink" title="CDN サービスの例"></a>CDN サービスの例</h2><p>ここでは、CDN サービスの例を各クラウドベンダーごとに簡単に紹介します。</p><h3 id="AWS-Amazon-CloudFront"><a href="#AWS-Amazon-CloudFront" class="headerlink" title="AWS - Amazon CloudFront"></a>AWS - Amazon CloudFront</h3><p>AWS の提供する CDN サービスは Amazon CloudFront です。</p><p>Amazon CloudFront では、CDN のオリジンサーバーとして EC2 や S3、ELB などの他、オンプレミスのサーバーも指定できます。</p><h3 id="Google-Cloud-Cloud-CDN"><a href="#Google-Cloud-Cloud-CDN" class="headerlink" title="Google Cloud - Cloud CDN"></a>Google Cloud - Cloud CDN</h3><p>Google Cloud の提供する CDN サービスは Cloud CDN です。</p><p>Cloud CDN は他の CDN サービスと構成が異なり、Cloud Load Balancing に CDN 機能を付けるという方式で設定します。すなわち、Cloud CDN はロードバランサーと CDN が一体化している形です。</p><p>現在は CDN 機能付きロードバランサーのバックエンドとして、Cloud Storage やオンプレミスなど、HTTP 対応のあらゆる送信元を指定できるようになっているので、方式の違いをそこまで意識することなく、他の CDN サービスと同様に利用できます。</p><h3 id="Cloudflare"><a href="#Cloudflare" class="headerlink" title="Cloudflare"></a>Cloudflare</h3><p>Cloudflare はクラウドベンダーのひとつです。</p><p>もとは CDN をメインで提供するクラウドベンダーとして知られていましたが、純粋な CDN だけではなく、WAF（Web Application Firewall）などのセキュリティ機能も合わせて提供しています。</p><h2 id="モダンな-Web-アプリケーションと-CDN"><a href="#モダンな-Web-アプリケーションと-CDN" class="headerlink" title="モダンな Web アプリケーションと CDN"></a>モダンな Web アプリケーションと CDN</h2><p>近年の Web アプリケーションは、Web フロントエンドと Web API サーバーを分離した構成が主流です。 Web フロントエンドは、サーバー側で HTML を動的に生成するサーバーサイドレンダリング（SSR）ではなく、ブラウザの JavaScript が DOM を操作して軽量の HTML を書き換えるシングルページアプリケーション（SPA）の方式が一般的です。</p><p>また、SPA のデメリットを克服するために SPA と SSR を組み合わせた方式も主流になってきました。例えば、React ベースのフレームワークである Next.js や、Vue.js ベースのフレームワークである Nuxt.js を使えば、SPA と SSR の組み合わせを簡単に実現できます。</p><p>このようなモダンな Web アプリケーションの構成では、ブラウザ側の JavaScript の役割が大きくなり、必然的に JS ファイルのサイズが大きくなります。また静的サイトジェネレータ（SSG）を用いて Web サイトをビルドした場合も、HTML と JavaScript のサイズが大きくなります。</p><p>こうしたモダンな構成は、静的コンテンツとしての HTML&#x2F;JavaScript を高速に配信する CDN との相性が良く、広く使われています。</p><h2 id="CDN-は意識して設定しなくても使える"><a href="#CDN-は意識して設定しなくても使える" class="headerlink" title="CDN は意識して設定しなくても使える"></a>CDN は意識して設定しなくても使える</h2><p>SPA からなるモダンな Web アプリケーションを開発する場合、CDN の設定を意識しなくても CDN を適用したデプロイが簡単にできる仕組みが整っています。</p><h3 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h3><p>Next.js 開発元の Vercel 社が提供するクラウドサービスの Vercel は、Next.js をはじめとするモダン Web アプリケーションのデプロイ先として優れています。</p><p>GitHub 等のリモートリポジトリに Next.js アプリがコミットされるだけで、自動デプロイされ Next.js の機能をサーバーの設定なしに使用できます。その 1 つの機能として、<strong>CDN も自動で構成されます</strong>。</p><h3 id="AWS-Amplify"><a href="#AWS-Amplify" class="headerlink" title="AWS Amplify"></a>AWS Amplify</h3><p>AWS の提供する AWS Amplify は、モダンな Web アプリケーションを高速に開発しデプロイするための一連の機能を集めたサービスです。 AWS Amplify は、フルマネージド型のウェブアプリケーションホスティングサービスとして利用できます。</p><p>AWS Amplify は、<strong>利用されているフロントエンドフレームワークを自動で判別して CDN を構成します</strong>。 Vercel と同様、リモートリポジトリを指定すれば CI&#x2F;CD も面倒な設定なしに構成できます。</p><p>AWS Amplify でデプロイした Web フロントエンドと、Amazon API Gateway や AWS Lambda と組み合わせてサーバーレスな Web アプリケーションを構成できます。</p><h2 id="CDN-の活用とビジネス形態"><a href="#CDN-の活用とビジネス形態" class="headerlink" title="CDN の活用とビジネス形態"></a>CDN の活用とビジネス形態</h2><p>CDN は、その特徴から</p><ul><li>地理的に離れた場所にユーザーがいる</li><li>厳しい低遅延性が求められる</li></ul><p>という場面に有益です。</p><p>このような場面にまず当てはまるのが、toC の Web サービスでしょう。世界的なサービスはもちろんのこと、日本国内向けのサービスであったとしても CDN は広く利用されています。テック系スタートアップ企業においても、現在は資金が少ない時点で柔軟にクラウドリソースを利用できるため、CDN サービスを活用して UX を高めることは有効です。</p><p>他方で、フューチャーのような IT コンサルティング企業やいわゆる SI 企業では、業務アプリケーション開発の割合が高いでしょう。 toB の業務アプリケーションでは、そもそもインターネットアクセスを遮断することがあり、また toC サービスとは求められる非機能要件が異なる場合も多く、CDN が有益な場面は少なそうに思えます。</p><p>しかしながら、現在は業務アプリケーションであってもインターネットアクセスを前提とするものが増えています。例えばグローバル企業の業務システムで拠点が全世界にあるような場合は、CDN を用いた配信が有益になります。 さらには、BtoBtoC の開発や自社サービスの開発を行うことも少なくないため、CDN は私たちのビジネスにも重要な技術要素です。</p><p>以下では、これまでの CDN とは異なる新しい活用法の可能性を紹介します。</p><h2 id="CDN-のエッジサーバーでアプリケーションを実行する"><a href="#CDN-のエッジサーバーでアプリケーションを実行する" class="headerlink" title="CDN のエッジサーバーでアプリケーションを実行する"></a>CDN のエッジサーバーでアプリケーションを実行する</h2><p>ここまで、CDN は静的コンテンツ（HTML&#x2F;CSS&#x2F;ブラウザで動く JavaScript など）を配信する仕組みとして紹介してきました。</p><p>しかし、<strong>近年はこの CDN のエッジサーバーでアプリケーションを実行するサービスが複数登場しています</strong>。</p><p>さきほど説明した React ベースの Web フロントエンドフレームワークである Next.js には Web API を実現する API Routes という機能が含まれています。Next.js アプリケーションを Vercel にデプロイした場合、通常の API Routes は、Vercel が提供する関数実行環境（データセンター）で実行されます。しかし近年、新たに Edge API Routes という機能が追加され、エッジサーバー上で関数を実行できるようになりました。これは Vercel の Edge Runtime というエッジ環境で動作します。</p><p>このようにエッジサーバーでアプリケーションを実行するサービスには、次のようなものがあります:</p><ul><li>Vercel Edge Functions</li><li>Cloudflare Workers</li><li>AWS CloudFront Functions</li><li>AWS Lambda@Edge</li></ul><p>なお、下 2 つの AWS サービスは似ていますが、CloudFront Functions は AWS における「エッジロケーション」、Lambda@Edge は AWS における「リージョンエッジ」で実行されます。そのため、CloudFront Functions の方がクライアントに近い場所で実行されます。</p><p>これらのサービスは、例えば次のようなユースケースをエッジサーバー上で利用できる（すなわち、通常のクラウドより低遅延である）ことが強みとされています:</p><ul><li>ヘッダの書き換え</li><li>トークンの検証と認可</li><li>デバイス判定</li><li>A&#x2F;B テスト</li><li>IP ブロック</li><li>リダイレクト</li></ul><h2 id="Cloudflare-Workers-とは？"><a href="#Cloudflare-Workers-とは？" class="headerlink" title="Cloudflare Workers とは？"></a>Cloudflare Workers とは？</h2><p>ここでは、エッジでアプリケーションを実行する環境としてシンプルで試しやすい Cloudflare Workers を紹介します。</p><p>Cloudflare Workers は Cloudflare 社が提供するサーバレスのサービスです。通常の AWS Lambda や Google Cloud Functions などとは異なり、データセンターではなく CDN のエッジサーバーでコードを実行することができます。</p><p>Cloudflare Workers の特徴として</p><ul><li>0ms cold starts のサポート<ul><li>すなわち、<strong>通常のサーバーレス環境で発生するコールドスタートが発生しない</strong></li><li>Cloudflare workers では内部的にコンテナではなく、isolate と呼ばれる環境を使用しているため実現可能</li></ul></li><li>CPU runtime の 10ms 制限<ul><li>そのため、重い処理は実行できない</li></ul></li></ul><p>を挙げることができます。</p><h3 id="Cloudflare-Workers-のストレージ"><a href="#Cloudflare-Workers-のストレージ" class="headerlink" title="Cloudflare Workers のストレージ"></a>Cloudflare Workers のストレージ</h3><p>Cloudflare Workers では、<strong>エッジロケーションでストレージを利用できます</strong>:</p><ul><li>Cloudflare Workers KV<ul><li>Key-Value ストレージ</li><li>結果整合性</li></ul></li><li>Durable Objects<ul><li>Key-Value ストレージ</li><li><strong>強い</strong>整合性</li></ul></li></ul><h3 id="RDB-サービスの-Cloudflare-D1"><a href="#RDB-サービスの-Cloudflare-D1" class="headerlink" title="RDB サービスの Cloudflare D1"></a>RDB サービスの Cloudflare D1</h3><p>また、<strong>エッジロケーションで RDB が動く Cloudflare D1 も登場しています</strong>。</p><p>D1 は SQLite をベースに構築されています。</p><p>ストレージと同様に、Cloudflare Workers のロジックから操作することができます。</p><h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><p>Cloudflare Workers では、 <strong><a href="https://developer.mozilla.org/ja/docs/Web/API/Service_Worker_API">Service Worker の API</a> が利用できます</strong> 。<br>※ここでいう「API」は「Web API」ではありません（「ライブラリ」に似た本来の広い意味です）。</p><p>Service Worker とは、Web ブラウザがメインの JS の処理とは別のスレッドで、JS をバックグラウンド実行する仕組み（Web Worker）の一つです。Service Worker は、ブラウザとサーバーの間のプロキシサーバーのように利用することができます。<br>（本記事とは別の文脈で、Service Worker のハンズオン記事を執筆予定です。）</p><p>Cloudflare 独自の API ではなく、<strong>Service Worker API という標準的な記法をすべて使えるのが利点です</strong>。<br>もちろん Service Worker がクライアント（Web ブラウザ）の中で実行されるのに対し、Cloudflare Workers はエッジサーバーで実行される点が異なります。</p><h3 id="Cloudflare-Workers-の開発例"><a href="#Cloudflare-Workers-の開発例" class="headerlink" title="Cloudflare Workers の開発例"></a>Cloudflare Workers の開発例</h3><p>Cloudflare Workers の開発例を試してみましょう。</p><p><strong>注意</strong> Cloudflare は、他のクラウドサービスと同じく、アプリケーションやその他のリソースをインターネットに公開できるサービスです。個人環境以外で試す場合は、所属組織のルールを確認してください。</p><h4 id="基本的な手順"><a href="#基本的な手順" class="headerlink" title="基本的な手順"></a>基本的な手順</h4><p>Cloudflare Workers の開発では、Wrangler（ラングラー）と呼ばれる Cloudflare Workers のための CLI ツールを使います。</p><p>Node.js のインストールされたローカル環境で</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx wrangler init my-project</span><br><span class="line"><span class="built_in">cd</span> my-project</span><br></pre></td></tr></table></figure><p>を実行すればひな形が作成されます。<code>my-project</code> は自由に変えてください。<br>なお、Would you like to use TypeScript? に対して Yes を返せば、TypeScript の準備が自動で完了し、すぐに使えるようになります！</p><p><code>src/index.js</code> または <code>src/index.ts</code> が Cloudflare Workers のロジックを実装するファイルです。<br>TypeScript を選択したとして、シンプルな文字列を返す Web API を次のように実装します:</p><figure class="highlight ts"><figcaption><span>src/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="attr">request</span>: <span class="title class_">Request</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Response</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ローカル環境の起動は</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx wrangler dev --<span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>で行い、動作確認できます。 localhost:8787 に Hello World と表示されたら成功です。<br>通常の Web API と同じく、ブラウザや curl コマンド等で確認してください。</p><img src="/images/20230427a/スクリーンショット_2023-04-27_16.47.46.png" alt="" width="586" height="206" loading="lazy"><figure class="highlight ts"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="attr">request</span>: <span class="title class_">Request</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Response</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>この <code>fetch</code> が Service Worker API の 1 つです。</p><p>fetch イベント（クライアントからの HTTP リクエスト）を検知するとこのメソッドを実行します。<code>fetch</code> の引数には <code>Request</code> 型で、HTTP リクエストの <code>body</code> や <code>headers</code>、<code>method</code> などのプロパティが含まれています。こうしたプロパティを使えば、通常の Web API と同じようなロジックを記述することができます。</p><p>例えば、GET リクエストのクエリパラメータの <code>message</code> 属性でメッセージを送り、それを読み取ってレスポンスを返す処理を書いてみましょう。</p><figure class="highlight ts"><figcaption><span>src/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="attr">request</span>: <span class="title class_">Request</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Response</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span>(request.<span class="property">method</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">const</span> &#123; searchParams &#125; = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>)</span><br><span class="line">        <span class="keyword">const</span> message = searchParams.<span class="title function_">get</span>(<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">          <span class="string">`送信されたメッセージは「<span class="subst">$&#123;message&#125;</span>」です。`</span>,</span><br><span class="line">          &#123;<span class="attr">status</span>: <span class="number">200</span>&#125;</span><br><span class="line">        )</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">          <span class="string">&#x27;許可されていないHTTPメソッドです。&#x27;</span>,</span><br><span class="line">          &#123;<span class="attr">status</span>: <span class="number">405</span>&#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>クエリパラメータに <code>message=こんにちは</code> を含めてリクエストすると、正しくメッセージが読み込まれ表示されました。</p><img src="/images/20230427a/スクリーンショット_2023-04-27_16.31.52.png" alt="" width="934" height="240" loading="lazy"><p>Wrangler では、デプロイも次のコマンドで簡単に行えます（インターネット公開されるので十分注意してください）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx wrangler publish</span><br></pre></td></tr></table></figure><p>このように数行のコマンドで、ローカルの動作確認とエッジへのデプロイが完結します。</p><h4 id="様々な活用例"><a href="#様々な活用例" class="headerlink" title="様々な活用例"></a>様々な活用例</h4><p>他の実装例は、<a href="https://developers.cloudflare.com/workers/examples/">公式ドキュメント</a>に記載されています。</p><ul><li>JSON の取得</li><li>リダイレクト</li><li>A&#x2F;B テスト</li><li>CORS ヘッダープロキシ</li><li>トークンの検証と認可</li><li>Basic 認証</li><li>ストレージや DB へのアクセス</li></ul><p>など、<strong>このページが実質的にユースケースのカタログのようになっています</strong>。エッジのアプリケーション実行の可能性を模索し、ぜひ新しい使い道を見つけていきましょう！</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>この記事では、社内のクラウド勉強会での発表をもとに、CDN の入門的解説と、エッジでのアプリケーション実行の紹介を行いました。</p><p>春の入門祭り連載はまだまだ続きます！ 引き続きどうぞよろしくお願いいたします。</p><p>次は石野さんの<a href="/articles/20230428a/">初心者による初心者のためのGit入門</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/CDN/">CDN</category>
      
      <category domain="https://future-architect.github.io/tags/CDN-Edge/">CDN Edge</category>
      
      <category domain="https://future-architect.github.io/tags/Cloudflare/">Cloudflare</category>
      
      <category domain="https://future-architect.github.io/tags/Cloudflare-Workers/">Cloudflare Workers</category>
      
      
      <comments>https://future-architect.github.io/articles/20230427a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Pulumiで始めるIaC入門</title>
      <link>https://future-architect.github.io/articles/20230426a/</link>
      <guid>https://future-architect.github.io/articles/20230426a/</guid>
      <pubDate>Tue, 25 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;Technology Inovation Group(TIG)所属の筋肉エンジニアの渡邉です。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Technology Inovation Group(TIG)所属の筋肉エンジニアの渡邉です。</p><p><a href="/articles/20230417a/">春の入門連載2023</a> 8日目を担当します。</p><p>普段はクラウドインフラを中心に業務を行なっていますが、インフラリソースを管理するにあたってはIaC（主にTerraform）を使用しています。春の入門ということで、改めてIaCのメリット・デメリットについて整理してみました。また、PulumiというIaCツールに入門してみたので、皆さんと一緒にPulumiについて理解していきたいと思います。</p><h1 id="IaC-Infrastructure-as-Code-とは"><a href="#IaC-Infrastructure-as-Code-とは" class="headerlink" title="IaC(Infrastructure as Code)とは"></a>IaC(Infrastructure as Code)とは</h1><p>IaC (Infrastructure as Code)とは、ネットワーク、サーバ、データベースなどのインフラリソースをコードによって管理しプロビジョニングできることを言います。<br>クラウドを利用している場合、マネジメントコンソールからボタンポチポチでリソースを作成・更新・削除することができます。手動で操作する場合、手順書を用意し手順書に沿ってマネジメントコンソールを操作すると思いますが、手順書を確認していてもオペミスによって意図せずリソースを更新・削除してしまう可能性やマネジメントコンソールは定期的にアップデートされるため、手順書が古くなってしまい意味を成さなくなってくる時もあると思います。</p><p>IaCを利用する場合、インフラリソースのあるべき姿をコードで定義・管理するためインフラリソースの変更前にレビューを挟むことができるので、意図せずリソースを作成・更新・削除してしまう可能性を少なくすることができます。</p><p>IaCで有名なツールとしては以下があります。</p><ul><li>Ansible（主にサーバ内のミドルウェアなどを管理する構成管理ツール）</li><li>Terraform（各クラウドのリソースを管理する構成管理ツール）</li><li>CloudFormation（AWSのリソースを管理する構成管理ツール）</li></ul><h1 id="IaCのメリット"><a href="#IaCのメリット" class="headerlink" title="IaCのメリット"></a>IaCのメリット</h1><h2 id="既存コードの使い回し・各環境への迅速なプロビジョニング"><a href="#既存コードの使い回し・各環境への迅速なプロビジョニング" class="headerlink" title="既存コードの使い回し・各環境への迅速なプロビジョニング"></a>既存コードの使い回し・各環境への迅速なプロビジョニング</h2><p>インフラリソースの構成をコードで管理できるため、一度コードを作成してしまえば同じインフラ構成を作成したい場合、既存のコードを使いまわして構築することができます。また、terraformであればworkspaceという機能を利用することで開発環境・検証環境・本番環境と各環境を同じコードで作成することができます。例えば、咄嗟に性能環境が欲しいとなった場合でも迅速に環境を用意することができます。</p><h2 id="オペレーションミスの防止"><a href="#オペレーションミスの防止" class="headerlink" title="オペレーションミスの防止"></a>オペレーションミスの防止</h2><p>IaCではコードに基づいてプログラムがインフラリソースの作成・更新・削除を行うため、手作業に比べるとオペレーションミスを減らせることができます。主に同じ作業を複数回行う場合であったり、各環境に対して同じ作業を行う場合などは手作業だとミスが起こりやすいので、IaCを用いる場合はミスを減らせると思います。</p><p>また、コードで管理されているためコードの実行前にレビューを挟むことができるため、品質を担保した状態を保つことができます。</p><h2 id="DevOpsツールとの相性がよい"><a href="#DevOpsツールとの相性がよい" class="headerlink" title="DevOpsツールとの相性がよい"></a>DevOpsツールとの相性がよい</h2><p>コード管理されていることによって、Githubなどのリポジトリサービスでバージョン管理することができます。CI&#x2F;CDとも相性が良いので、CI機能を利用してインフラリソースの命名規則をチェックしたり、linterを使用して整形したりなど、たくさんのDevOpsツールを利用して開発・運用効率を上げることが可能になります。</p><h1 id="IaCのデメリット"><a href="#IaCのデメリット" class="headerlink" title="IaCのデメリット"></a>IaCのデメリット</h1><h2 id="IaCツールごとの言語-x2F-ルールが異なるためキャッチアップが必要"><a href="#IaCツールごとの言語-x2F-ルールが異なるためキャッチアップが必要" class="headerlink" title="IaCツールごとの言語&#x2F;ルールが異なるためキャッチアップが必要"></a>IaCツールごとの言語&#x2F;ルールが異なるためキャッチアップが必要</h2><p>IaCツールはTerraformやAnsibleなどがありますが、TerraformはHCL(HashiCorp Configuration Language)という独自言語でインフラリソースの状態をコード化する宣言型のツールとなり、Ansibleはplaybookと呼ばれるファイルにYAMLで構成手順を記述する手続き型ツールになります。各ツールごとのルールや記載方法などをキャッチアップする学習コストがかかります。</p><h2 id="コードと実態で差分が発生するリスク"><a href="#コードと実態で差分が発生するリスク" class="headerlink" title="コードと実態で差分が発生するリスク"></a>コードと実態で差分が発生するリスク</h2><p>IaCのコードによって管理されているインフラリソースに対して、例えば、手作業で変更を加えてしまった場合はコードとの差分が発生します。この差分によって、コードを使用してインフラリソースを更新しようとした際に、エラーが発生し、インフラが更新できなくなる可能性があったり、どちらが正しい構成なのかわからなくなってしまったりします。<br>簡単なインフラリソースの変更であれば、コードから変更するよりもコンソール画面から行ったほうが速い場合があるので、そういう場合にこの事象は発生しやすいと思います。</p><h1 id="Pulumiとは"><a href="#Pulumiとは" class="headerlink" title="Pulumiとは"></a>Pulumiとは</h1><p><a href="https://www.pulumi.com/">Pulumi</a>とは、OSSのIaCツールの一つであり、Terraformは独自のHCL言語でコードを記述しなければなりませんが、Pulumiの場合、アプリケーション開発者がよく使用する言語(Go&#x2F;Java&#x2F;Python&#x2F;Typescript&#x2F;C#&#x2F;Yaml)などでコードを記述することができるため、普段アプリケーションコード書いているエンジニアでも学習コストが低く、使い慣れた言語でインフラリソースをループ処理で作成したりすることができます。AWS&#x2F;GCP&#x2F;Azureなど各クラウドプロバイダーやKubernetesやServerlessにも幅広く対応しています。また、<a href="https://www.pulumi.com/tf2pulumi/">TerraformやCloudFormationからPulumiに変換する</a>ことも可能なため、Pulumiに移行することも可能です。</p><p>Pulumiは無料で利用することができますが、複数人での利用や、企業単位、ミッションクリティカルなシステムを扱う方向けに有償プランもあり、追加機能や充実したサポートを利用することができます。</p><p>詳しくは<a href="https://www.pulumi.com/pricing/">公式ドキュメント</a>を参照ください。</p><img src="/images/20230426a/image.png" alt="" width="1200" height="779" loading="lazy"><p>Pulumiは以下の構成をとります。詳しくは<a href="https://www.pulumi.com/docs/intro/concepts/">公式ドキュメント</a>を参照ください。<br><img src="/images/20230426a/image_2.png" alt="" width="617" height="440" loading="lazy"></p><ul><li>Project：Programや他ファイルを含むディレクトリ</li><li>Program：インフラリソースのあるべき姿を定義したもの</li><li>Resource：インフラリソースを構成するオブジェクト。オブジェクトのプロパティ（設定値）に関しては、Inputs&#x2F;OutPutsによりの別のオブジェクトで利用することが可能</li><li>Stack：Programをデプロイした後のインスタンス。同一のProgramから開発環境&#x2F;検証環境など、用途に応じて複数の環境用にインスタンスを作成が可能</li></ul><p>とにかく、触ってみないと理解することができないので、さっそくさわってみたいとおもいます</p><h1 id="Pulumiを使用してGoogle-Cloudのリソースを作ってみる"><a href="#Pulumiを使用してGoogle-Cloudのリソースを作ってみる" class="headerlink" title="Pulumiを使用してGoogle Cloudのリソースを作ってみる"></a>Pulumiを使用してGoogle Cloudのリソースを作ってみる</h1><p><a href="https://www.pulumi.com/docs/get-started/gcp/">公式チュートリアル</a>に沿って進めていきたいと思います。</p><h2 id="Pulumiのインストール"><a href="#Pulumiのインストール" class="headerlink" title="Pulumiのインストール"></a>Pulumiのインストール</h2><p>Pulumiを利用するため、ローカルのWSL2にPulumiをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://get.pulumi.com | sh</span><br><span class="line">$ pulumi version</span><br><span class="line">v3.64.0</span><br></pre></td></tr></table></figure><h2 id="言語ランタイムのインストール"><a href="#言語ランタイムのインストール" class="headerlink" title="言語ランタイムのインストール"></a>言語ランタイムのインストール</h2><p>Pulumiでは、Goを利用しようと思うのでGoをインストールします。<br>こちらは<a href="https://go.dev/dl/">公式ドキュメント</a>を参照ください</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.20.2 linux/amd64</span><br></pre></td></tr></table></figure><h2 id="GCP初期設定"><a href="#GCP初期設定" class="headerlink" title="GCP初期設定"></a>GCP初期設定</h2><p>ローカルにGoogle Cloud SDKはインストールされている前提で進めます。<br>PulumiはGoogle Cloud リソースとやり取りするためにデフォルトのアプリケーション資格情報を必要とするため、<code>gcloud auth application-default login</code>コマンドを実行して資格情報を取得します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud auth application-default login</span><br><span class="line">Go to the following <span class="built_in">link</span> <span class="keyword">in</span> your browser:</span><br><span class="line"></span><br><span class="line">    https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=xxxxxxxxx&amp;redirect_uri=xxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">Enter authorization code:</span><br></pre></td></tr></table></figure><p>表示されたURLをブラウザに入力すると、「Googleログイン画面」に遷移します。</p><img src="/images/20230426a/image_3.png" alt="" width="449" height="503" loading="lazy"><p>「許可」をクリックします。<br><img src="/images/20230426a/image_4.png" alt="" width="453" height="833" loading="lazy"></p><p>表示された認証コードをコピーします。<br><img src="/images/20230426a/image_5.png" alt="" width="360" height="558" loading="lazy"></p><p>コピーした認証情報を入力し、「Enter」を押します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Enter authorization code: xxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">Credentials saved to file: [/home/xxxxxxxxx/.config/gcloud/application_default_credentials.json]</span><br><span class="line"></span><br><span class="line">These credentials will be used by any library that requests Application Default Credentials (ADC).</span><br></pre></td></tr></table></figure><p>環境変数を介して GCPのデフォルトプロジェクトを設定します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOOGLE_PROJECT=xxxxxxxx</span><br></pre></td></tr></table></figure><h2 id="Pulumiプロジェクトの作成"><a href="#Pulumiプロジェクトの作成" class="headerlink" title="Pulumiプロジェクトの作成"></a>Pulumiプロジェクトの作成</h2><p>Pulumiを利用するためPulumiプロジェクトを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> pulumi &amp;&amp; <span class="built_in">cd</span> pulumi</span><br><span class="line"></span><br><span class="line">$ pulumi new gcp-go</span><br><span class="line">Manage your Pulumi stacks by logging <span class="keyword">in</span>.</span><br><span class="line">Run `pulumi login --<span class="built_in">help</span>` <span class="keyword">for</span> alternative login options.</span><br><span class="line">Enter your access token from https://app.pulumi.com/account/tokens</span><br><span class="line">    or hit &lt;ENTER&gt; to <span class="built_in">log</span> <span class="keyword">in</span> using your browser                   :</span><br></pre></td></tr></table></figure><p>アクセストークンの入力を求められました。<br><code>https://app.pulumi.com/account/tokens</code>にアクセスしてPulumi Cloudの初期設定を行います。</p><p>上記のURLへアクセスするとPulumiのSign In画面へ遷移します。<br>まだ、アカウントを作成していないので<code>Create an accout</code>をクリックします。<br><img src="/images/20230426a/image_6.png" alt="" width="1200" height="888" loading="lazy"></p><p>アカウントを作成するため、今回はE-Mailを利用してアカウントを作成しようと思います。</p><ul><li>Username</li><li>Email</li><li>Password</li></ul><p>を入力し<code>Create Account</code>をクリックします。</p><img src="/images/20230426a/image_7.png" alt="" width="1200" height="895" loading="lazy"><p><code>Personal access tokens</code>の作成を求められるので、<code>Create Token</code>をクリックします。<br><img src="/images/20230426a/image_8.png" alt="" width="1191" height="382" loading="lazy"></p><p><code>description</code>に任意の値を入力します。<br><img src="/images/20230426a/image_9.png" alt="" width="241" height="252" loading="lazy"></p><p>アクセストークンが生成されるので、メモしておきます。<br><img src="/images/20230426a/image_10.png" alt="" width="1200" height="481" loading="lazy"></p><p>先ほどのCLI画面に戻り、生成したアクセストークンを入力します。<br>するとWelcome to Pulumi!と表示されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi new gcp-go</span><br><span class="line">Manage your Pulumi stacks by logging <span class="keyword">in</span>.</span><br><span class="line">Run `pulumi login --<span class="built_in">help</span>` <span class="keyword">for</span> alternative login options.</span><br><span class="line">Enter your access token from https://app.pulumi.com/account/tokens</span><br><span class="line">    or hit &lt;ENTER&gt; to <span class="built_in">log</span> <span class="keyword">in</span> using your browser                   : xxxxxxxxxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Welcome to Pulumi!</span><br><span class="line"></span><br><span class="line">  Pulumi helps you create, deploy, and manage infrastructure on any cloud using</span><br><span class="line">  your favorite language. You can get started today with Pulumi at:</span><br><span class="line"></span><br><span class="line">      https://www.pulumi.com/docs/get-started/</span><br><span class="line"></span><br><span class="line">  Tip: Resources you create with Pulumi are given unique names (a randomly</span><br><span class="line">  generated suffix) by default. To learn more about auto-naming or customizing resource</span><br><span class="line">  names see https://www.pulumi.com/docs/intro/concepts/resources/<span class="comment">#autonaming.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This <span class="built_in">command</span> will walk you through creating a new Pulumi project.</span><br><span class="line"></span><br><span class="line">Enter a value or leave blank to accept the (default), and press &lt;ENTER&gt;.</span><br><span class="line">Press ^C at any time to quit.</span><br></pre></td></tr></table></figure><p>Pulumiのプロジェクト名とプロジェクトの説明を求められるので、任意の値を入力していきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">project name: (pulum) gcp-test</span><br><span class="line">project description: (A minimal Google Cloud Go Pulumi program) gcp-test</span><br><span class="line">Created project <span class="string">&#x27;gcp-test&#x27;</span></span><br></pre></td></tr></table></figure><p>次に、スタック名を尋ねられます。<code>dev</code>と入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Please enter your desired stack name.</span><br><span class="line">To create a stack <span class="keyword">in</span> an organization, use the format &lt;org-name&gt;/&lt;stack-name&gt; (e.g. `acmecorp/dev`).</span><br><span class="line">stack name: (dev) dev</span><br><span class="line">Created stack <span class="string">&#x27;dev&#x27;</span></span><br></pre></td></tr></table></figure><p>最後に、Google Cloud プロジェクトの場合、Google Cloud プロジェクトを選択するよう求められます。Google Cloud プロジェクト ID を入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcp:project: The Google Cloud project to deploy into: xxxxxxxx</span><br><span class="line">Saved config</span><br></pre></td></tr></table></figure><p>上記の設定が完了すると、作業ディレクトリに以下のファイルが生成されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── Pulumi.dev.yaml <span class="comment"># 初期化したスタックの構成値が記載されています。</span></span><br><span class="line">├── Pulumi.yaml <span class="comment"># Pulumiプロジェクトの情報が記載されています。</span></span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">└── main.go <span class="comment"># スタッリソースを定義する Pulumi のプログラムです。</span></span><br></pre></td></tr></table></figure><p>main.goの見ていきましょう。<br>このPulumiのプログラムは</p><ul><li>USリージョンにGCSバケットを作成</li><li>GCSバケット名をExportする</li></ul><p>内容になっています。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi/sdk/v3/go/pulumi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pulumi.Run(<span class="function"><span class="keyword">func</span><span class="params">(ctx *pulumi.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Create a GCP resource (Storage Bucket)</span></span><br><span class="line">bucket, err := storage.NewBucket(ctx, <span class="string">&quot;my-bucket&quot;</span>, &amp;storage.BucketArgs&#123;</span><br><span class="line">Location: pulumi.String(<span class="string">&quot;US&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export the DNS name of the bucket</span></span><br><span class="line">ctx.Export(<span class="string">&quot;bucketName&quot;</span>, bucket.Url)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="リソースの作成"><a href="#リソースの作成" class="headerlink" title="リソースの作成"></a>リソースの作成</h2><p>上記の内容でPulumiを実行してGoogle Cloudのリソースを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi up</span><br></pre></td></tr></table></figure><p>上記のコマンドを実行すると、Goのプログラムを評価し、実行するリソースの更新を決定します。変更の概要を示すプレビューが表示されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Previewing update (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxx/gcp-test/dev/previews/xxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">Downloading plugin: 47.96 MiB / 47.96 MiB [=========================] 100.00% 2s</span><br><span class="line">                                                                                [resource plugin gcp-6.52.0] installing</span><br><span class="line">     Type                   Name          Plan</span><br><span class="line"> +   pulumi:pulumi:Stack    gcp-test-dev  create</span><br><span class="line"> +   └─ gcp:storage:Bucket  my-bucket     create</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">    bucketName: output&lt;string&gt;</span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 2 to create</span><br><span class="line"></span><br><span class="line">Do you want to perform this update?  [Use arrows to move, <span class="built_in">type</span> to filter]</span><br><span class="line">  <span class="built_in">yes</span></span><br><span class="line">&gt; no</span><br><span class="line">  details</span><br></pre></td></tr></table></figure><p><code>details</code>を選択すると、変更内容の詳細な差分が表示されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Do you want to perform this update? details</span><br><span class="line">+ pulumi:pulumi:Stack: (create)</span><br><span class="line">    [urn=urn:pulumi:dev::gcp-test::pulumi:pulumi:Stack::gcp-test-dev]</span><br><span class="line">    + gcp:storage/bucket:Bucket: (create)</span><br><span class="line">        [urn=urn:pulumi:dev::gcp-test::gcp:storage/bucket:Bucket::my-bucket]</span><br><span class="line">        forceDestroy: <span class="literal">false</span></span><br><span class="line">        location    : <span class="string">&quot;US&quot;</span></span><br><span class="line">        name        : <span class="string">&quot;my-bucket-f077c87&quot;</span></span><br><span class="line">        storageClass: <span class="string">&quot;STANDARD&quot;</span></span><br><span class="line">    --outputs:--</span><br><span class="line">    bucketName: output&lt;string&gt;</span><br></pre></td></tr></table></figure><p><code>yes</code>を選択するとGoogle Cloud に新しいストレージ バケットが作成されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Do you want to perform this update? <span class="built_in">yes</span></span><br><span class="line">Updating (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxx/gcp-test/dev/updates/1</span><br><span class="line"></span><br><span class="line">     Type                   Name          Status</span><br><span class="line"> +   pulumi:pulumi:Stack    gcp-test-dev  created (3s)</span><br><span class="line"> +   └─ gcp:storage:Bucket  my-bucket     created (1s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">    bucketName: <span class="string">&quot;gs://my-bucket-0cae339&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 2 created</span><br><span class="line"></span><br><span class="line">Duration: 5s</span><br></pre></td></tr></table></figure><p>Google Cloudのコンソール画面からCloud Storageを確認すると、バケットが作成されていることが確認できました。<br><img src="/images/20230426a/image_11.png" alt="" width="1200" height="631" loading="lazy"></p><p>スタックのアウトプットを確認したい場合は、以下のコマンドを実行すると確認することができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi stack output bucketName</span><br><span class="line">gs://my-bucket-0cae339</span><br></pre></td></tr></table></figure><p>また、自身のPulumi Cloudのアカウントを確認しに行くと以下のように、Web上でもリソースの状態を確認することができます。</p><img src="/images/20230426a/image_12.png" alt="" width="1200" height="670" loading="lazy"><h1 id="リソースの変更"><a href="#リソースの変更" class="headerlink" title="リソースの変更"></a>リソースの変更</h1><p>GCSバケットを作成することができたので、バケットにオブジェクトを追加してみます。<br>作業ディレクトリに<code>index.html</code>を追加します。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, Pulumi!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>main.goにオブジェクトを追加するコード<code>コメントアウト部分：Add index.html Object</code>を追加します。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi/sdk/v3/go/pulumi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pulumi.Run(<span class="function"><span class="keyword">func</span><span class="params">(ctx *pulumi.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Create a GCP resource (Storage Bucket)</span></span><br><span class="line">bucket, err := storage.NewBucket(ctx, <span class="string">&quot;my-bucket&quot;</span>, &amp;storage.BucketArgs&#123;</span><br><span class="line">Location: pulumi.String(<span class="string">&quot;US&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add index.html Object</span></span><br><span class="line">bucketObject, err := storage.NewBucketObject(ctx, <span class="string">&quot;index.html&quot;</span>, &amp;storage.BucketObjectArgs&#123;</span><br><span class="line">Bucket: bucket.Name,</span><br><span class="line">Source: pulumi.NewFileAsset(<span class="string">&quot;index.html&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export the DNS name of the bucket</span></span><br><span class="line">ctx.Export(<span class="string">&quot;bucketName&quot;</span>, bucket.Url)</span><br><span class="line">ctx.Export(<span class="string">&quot;ObjectName&quot;</span>, bucketObject.Name)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.goの修正が完了したので、変更分をデプロイしていきましょう。<br>再度<code>pulumi up</code>を実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi up</span><br><span class="line">Previewing update (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxx/gcp-test/dev/previews/xxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                         Name          Plan</span><br><span class="line">     pulumi:pulumi:Stack          gcp-test-dev</span><br><span class="line"> +   └─ gcp:storage:BucketObject  index.html    create</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  + ObjectName: <span class="string">&quot;index.html-6b14a12&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 1 to create</span><br><span class="line">    2 unchanged</span><br><span class="line"></span><br><span class="line">Do you want to perform this update?  [Use arrows to move, <span class="built_in">type</span> to filter]</span><br><span class="line">&gt; <span class="built_in">yes</span></span><br><span class="line">  no</span><br><span class="line">  details</span><br></pre></td></tr></table></figure><p><code>yes</code>を入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Do you want to perform this update? <span class="built_in">yes</span></span><br><span class="line">Updating (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxx/gcp-test/dev/updates/2</span><br><span class="line"></span><br><span class="line">     Type                         Name          Status</span><br><span class="line">     pulumi:pulumi:Stack          gcp-test-dev</span><br><span class="line"> +   └─ gcp:storage:BucketObject  index.html    created (0.74s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  + ObjectName: <span class="string">&quot;index.html-5c30f0c&quot;</span></span><br><span class="line">    bucketName: <span class="string">&quot;gs://my-bucket-0cae339&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 1 created</span><br><span class="line">    2 unchanged</span><br><span class="line"></span><br><span class="line">Duration: 3s</span><br></pre></td></tr></table></figure><p>更新作業が完了したので、<code>gsutilコマンド</code>でオブジェクトのアップロードを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gsutil <span class="built_in">ls</span> $(pulumi stack output bucketName)</span><br><span class="line">gs://my-bucket-0cae339/index.html-5c30f0c</span><br></pre></td></tr></table></figure><p>オブジェクトがアップロードできていることが確認できました。</p><p><code>index.html</code> がバケットにあるので、main.goを変更して、バケットが <code>index.html</code> を静的 Web サイトとして機能するように設定します。</p><p>変更内容は以下になります。</p><ul><li>websiteバケットにプロパティを設定します。</li><li>Google Cloud Storage の推奨事項に合わせて、バケットに対する均一なバケットレベルのアクセスをtrueに設定します。</li><li>バケットのコンテンツをインターネット経由でアクセスできるようにします。</li><li>オブジェクトのコンテンツタイプ<code>text/html</code>に変更して、HTMLとして提供されるようにします。</li><li>バケットのエンドポイントURLをエクスポートします。</li></ul><p><code>コメントアウト：//Settings for publishing content to the Internet</code>が修正部分になります。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi/sdk/v3/go/pulumi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pulumi.Run(<span class="function"><span class="keyword">func</span><span class="params">(ctx *pulumi.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Create a GCP resource (Storage Bucket)</span></span><br><span class="line">bucket, err := storage.NewBucket(ctx, <span class="string">&quot;my-bucket&quot;</span>, &amp;storage.BucketArgs&#123;</span><br><span class="line">Location: pulumi.String(<span class="string">&quot;US&quot;</span>),</span><br><span class="line"><span class="comment">// Settings for publishing content to the Internet</span></span><br><span class="line">Website: storage.BucketWebsiteArgs&#123;</span><br><span class="line">MainPageSuffix: pulumi.String(<span class="string">&quot;index.html&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">UniformBucketLevelAccess: pulumi.Bool(<span class="literal">true</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add index.html Object</span></span><br><span class="line">bucketObject, err := storage.NewBucketObject(ctx, <span class="string">&quot;index.html&quot;</span>, &amp;storage.BucketObjectArgs&#123;</span><br><span class="line">Bucket: bucket.Name,</span><br><span class="line">ContentType: pulumi.String(<span class="string">&quot;text/html&quot;</span>), <span class="comment">// Settings for publishing content to the Internet</span></span><br><span class="line">Source: pulumi.NewFileAsset(<span class="string">&quot;index.html&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Settings for publishing content to the Internet</span></span><br><span class="line">_, err = storage.NewBucketIAMBinding(ctx, <span class="string">&quot;my-bucket-IAMBinding&quot;</span>, &amp;storage.BucketIAMBindingArgs&#123;</span><br><span class="line">Bucket: bucket.Name,</span><br><span class="line">Role:   pulumi.String(<span class="string">&quot;roles/storage.objectViewer&quot;</span>),</span><br><span class="line">Members: pulumi.StringArray&#123;</span><br><span class="line">pulumi.String(<span class="string">&quot;allUsers&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export the DNS name of the bucket</span></span><br><span class="line">ctx.Export(<span class="string">&quot;bucketName&quot;</span>, bucket.Url)</span><br><span class="line">ctx.Export(<span class="string">&quot;ObjectName&quot;</span>, bucketObject.Name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Settings for publishing content to the Internet</span></span><br><span class="line">bucketEndpoint := pulumi.Sprintf(<span class="string">&quot;http://storage.googleapis.com/%s/%s&quot;</span>, bucket.Name, bucketObject.Name)</span><br><span class="line">ctx.Export(<span class="string">&quot;bucketEndpoint&quot;</span>, bucketEndpoint)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.goの設定が完了しましたので、<code>pulumi up</code>を実行し<code>yes</code>を選択しデプロイします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi up</span><br><span class="line">Previewing update (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxx/gcp-test/dev/previews/xxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                             Name                  Plan        Info</span><br><span class="line">     pulumi:pulumi:Stack              gcp-test-dev</span><br><span class="line"> ~   ├─ gcp:storage:Bucket            my-bucket             update      [diff: +website~uniformBucketLevelAccess]</span><br><span class="line"> +   ├─ gcp:storage:BucketIAMBinding  my-bucket-IAMBinding  create</span><br><span class="line"> +-  └─ gcp:storage:BucketObject      index.html            replace     [diff: ~contentType]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  ~ ObjectName    : <span class="string">&quot;index.html-5c30f0c&quot;</span> =&gt; <span class="string">&quot;index.html-0bac7da&quot;</span></span><br><span class="line">  + bucketEndpoint: <span class="string">&quot;http://storage.googleapis.com/my-bucket-0cae339/index.html-0bac7da&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 1 to create</span><br><span class="line">    ~ 1 to update</span><br><span class="line">    +-1 to replace</span><br><span class="line">    3 changes. 1 unchanged</span><br><span class="line"></span><br><span class="line">Do you want to perform this update?  [Use arrows to move, <span class="built_in">type</span> to filter]</span><br><span class="line">&gt; <span class="built_in">yes</span></span><br><span class="line">  no</span><br><span class="line">  details</span><br></pre></td></tr></table></figure><p>デプロイが完了しましたので、<code>curlコマンド</code>を実行し、バケットエンドポイントへアクセスします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl $(pulumi stack output bucketEndpoint)</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;Hello, Pulumi!&lt;/h1&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>オブジェクトを取得することができました。<br>ChromeでアクセスするとWebブラウザ上でindex.htmlの内容が表示されることも確認することができました。</p><img src="/images/20230426a/image_13.png" alt="" width="296" height="57" loading="lazy"><h2 id="リソースの削除"><a href="#リソースの削除" class="headerlink" title="リソースの削除"></a>リソースの削除</h2><p>それでは作成したリソースたちを削除していきます。<br>リソースの一括削除もできることもIaCのいいところですね。（本番環境では注意です。）</p><p><code>pulumi destroy</code>を実行します。<br>リソースを本当に削除するかどうかを確認するプロンプトが表示されます。問題なければ<code>yes</code>を選択し、リソースが削除されるまで待機します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi destroy</span><br><span class="line">Previewing destroy (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxx/gcp-test/dev/previews/xxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                             Name                  Plan</span><br><span class="line"> -   pulumi:pulumi:Stack              gcp-test-dev          delete</span><br><span class="line"> -   ├─ gcp:storage:BucketIAMBinding  my-bucket-IAMBinding  delete</span><br><span class="line"> -   ├─ gcp:storage:BucketObject      index.html            delete</span><br><span class="line"> -   └─ gcp:storage:Bucket            my-bucket             delete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  - ObjectName    : <span class="string">&quot;index.html-debb576&quot;</span></span><br><span class="line">  - bucketEndpoint: <span class="string">&quot;http://storage.googleapis.com/my-bucket-0cae339/index.html-debb576&quot;</span></span><br><span class="line">  - bucketName    : <span class="string">&quot;gs://my-bucket-0cae339&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    - 4 to delete</span><br><span class="line"></span><br><span class="line">Do you want to perform this destroy?  [Use arrows to move, <span class="built_in">type</span> to filter]</span><br><span class="line">&gt; <span class="built_in">yes</span></span><br><span class="line">  no</span><br><span class="line">  details</span><br></pre></td></tr></table></figure><p>なぜか、バケットが削除されなくてエラーになりました。</p><p>pulumi上からオブジェクトは削除されていましたが、Google Cloudのコンソール画面を見るとオブジェクトが削除されていませんでした。。。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Do you want to perform this destroy? <span class="built_in">yes</span></span><br><span class="line">Destroying (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxx/gcp-test/dev/updates/5</span><br><span class="line"></span><br><span class="line">     Type                             Name                  Status                  Info</span><br><span class="line">     pulumi:pulumi:Stack              gcp-test-dev          **failed**              1 error</span><br><span class="line"> -   ├─ gcp:storage:BucketIAMBinding  my-bucket-IAMBinding  deleted (6s)</span><br><span class="line"> -   ├─ gcp:storage:BucketObject      index.html            deleted (0.90s)</span><br><span class="line"> -   └─ gcp:storage:Bucket            my-bucket             **deleting failed**     1 error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Diagnostics:</span><br><span class="line">  pulumi:pulumi:Stack (gcp-test-dev):</span><br><span class="line">    error: update failed</span><br><span class="line"></span><br><span class="line">  gcp:storage:Bucket (my-bucket):</span><br><span class="line">    error: deleting urn:pulumi:dev::gcp-test::gcp:storage/bucket:Bucket::my-bucket: 1 error occurred:</span><br><span class="line">        * Error trying to delete bucket my-bucket-0cae339 containing objects without `force_destroy` <span class="built_in">set</span> to <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    - 2 deleted</span><br><span class="line"></span><br><span class="line">Duration: 8s</span><br></pre></td></tr></table></figure><p>Google Cloudのコンソール画面から手動でオブジェクトを削除し、再度<code>pulumi destroy</code>を実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi destroy</span><br><span class="line">Previewing destroy (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxx/gcp-test/dev/previews/xxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                   Name          Plan</span><br><span class="line"> -   pulumi:pulumi:Stack    gcp-test-dev  delete</span><br><span class="line"> -   └─ gcp:storage:Bucket  my-bucket     delete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  - ObjectName    : <span class="string">&quot;index.html-debb576&quot;</span></span><br><span class="line">  - bucketEndpoint: <span class="string">&quot;http://storage.googleapis.com/my-bucket-0cae339/index.html-debb576&quot;</span></span><br><span class="line">  - bucketName    : <span class="string">&quot;gs://my-bucket-0cae339&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    - 2 to delete</span><br><span class="line"></span><br><span class="line">Do you want to perform this destroy? <span class="built_in">yes</span></span><br><span class="line">Destroying (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxxxxx/gcp-test/dev/updates/9</span><br><span class="line"></span><br><span class="line">     Type                   Name          Status</span><br><span class="line"> -   pulumi:pulumi:Stack    gcp-test-dev  deleted</span><br><span class="line"> -   └─ gcp:storage:Bucket  my-bucket     deleted (1s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  - ObjectName    : <span class="string">&quot;index.html-debb576&quot;</span></span><br><span class="line">  - bucketEndpoint: <span class="string">&quot;http://storage.googleapis.com/my-bucket-0cae339/index.html-debb576&quot;</span></span><br><span class="line">  - bucketName    : <span class="string">&quot;gs://my-bucket-0cae339&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    - 2 deleted</span><br><span class="line"></span><br><span class="line">Duration: 3s</span><br><span class="line"></span><br><span class="line">The resources <span class="keyword">in</span> the stack have been deleted, but the <span class="built_in">history</span> and configuration associated with the stack are still maintained.</span><br><span class="line">If you want to remove the stack completely, run `pulumi stack <span class="built_in">rm</span> dev`.</span><br></pre></td></tr></table></figure><p>無事削除されました。</p><img src="/images/20230426a/image_14.png" alt="" width="1200" height="624" loading="lazy"><p>スタック自体を削除するには、<code>pulumi stack rm</code>を実行します。このコマンドによりすべての更新履歴とともに、Pulumi Cloud からスタックが完全に削除されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi stack <span class="built_in">rm</span></span><br><span class="line">This will permanently remove the <span class="string">&#x27;dev&#x27;</span> stack!</span><br><span class="line">Please confirm that this is what you<span class="string">&#x27;d like to do by typing `dev`: dev</span></span><br><span class="line"><span class="string">Stack &#x27;</span>dev<span class="string">&#x27; has been removed!</span></span><br></pre></td></tr></table></figure><p>Pulumi Cloudを確認すると、dev stackが削除されていることが確認できました。<br><img src="/images/20230426a/image_15.png" alt="" width="1200" height="474" loading="lazy"></p><h1 id="外伝-Pulumi-AI"><a href="#外伝-Pulumi-AI" class="headerlink" title="[外伝] Pulumi AI"></a>[外伝] Pulumi AI</h1><p>ちょうど一週間ほど前に、自然言語からIaC（インフラ構成コード）を自動生成する「Pulumi AI」を含む、AIを活用した新サービス群「Pulumi Insights」が発表されました。<br>タイムリーな内容なので、本記事でも試してみたいと思います</p><p><a href="https://www.publickey1.jp/blog/23/pulumipulumi_aiawsazurecloudflarekubernetesdatadog130infra-as-code.html">https://www.publickey1.jp/blog/23/pulumipulumi_aiawsazurecloudflarekubernetesdatadog130infra-as-code.html</a></p><p><a href="https://www.pulumi.com/ai/">https://www.pulumi.com/ai/</a></p><h2 id="早速使ってみた。"><a href="#早速使ってみた。" class="headerlink" title="早速使ってみた。"></a>早速使ってみた。</h2><p>Pulumi AIの入力に以下の情報を渡してみました。日本語にも対応しています。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Create GCP Resource.</span><br><span class="line">・VPC and The CIDR of the subnet is 192.168.0.0/24 and the region uses us-central1.</span><br><span class="line">・Create a firewall that allows ssh with iap using the iap-ssh tag.</span><br><span class="line">・Build a GCE using ubuntu 20.04 using the FIrewall you just created.</span><br><span class="line">・Export of InstanceName</span><br></pre></td></tr></table></figure><p>上記の入力を与えたときには下記のようにPulumi AIが入力内容をもとにPulumiのGoのコードを生成していきます。（す、すごい。。。）</p><img src="/images/20230426a/ezgif.com-video-to-gif_(4).gif" alt="ezgif.com-video-to-gif_(4).gif" width="600" height="338" loading="lazy"><p>以下が、Pulumi AIによって生成されたコードになります。<br>きちんと作成するリソースごとにコメントアウトも入れてくれて助かります。</p><figure class="highlight go"><figcaption><span>Pulumi AIによって自動生成されたコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/compute&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/pulumi/pulumi/sdk/v3/go/pulumi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    pulumi.Run(<span class="function"><span class="keyword">func</span><span class="params">(ctx *pulumi.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">        <span class="comment">// Create a GCP VPC network</span></span><br><span class="line">        vpc, err := compute.NewNetwork(ctx, <span class="string">&quot;my-vpc&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a GCP subnet in the us-central1 region</span></span><br><span class="line">        subnet, err := compute.NewSubnetwork(ctx, <span class="string">&quot;my-subnet&quot;</span>, &amp;compute.SubnetworkArgs&#123;</span><br><span class="line">            Network: vpc.ID(),</span><br><span class="line">            Region:  pulumi.String(<span class="string">&quot;us-central1&quot;</span>),</span><br><span class="line">            IpCidrRange: pulumi.String(<span class="string">&quot;192.168.0.0/24&quot;</span>),</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create firewall rule</span></span><br><span class="line">        firewall, err := compute.NewFirewall(ctx, <span class="string">&quot;allow-ssh-with-iap&quot;</span>, &amp;compute.FirewallArgs&#123;</span><br><span class="line">            Network: vpc.ID(),</span><br><span class="line">            Allows: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;tcp:22&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            SourceRanges: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;35.235.240.0/20&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            TargetTags: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;iap-ssh&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create GCE instance</span></span><br><span class="line">        instance, err := compute.NewInstance(ctx, <span class="string">&quot;my-instance&quot;</span>, &amp;compute.InstanceArgs&#123;</span><br><span class="line">            MachineType: pulumi.String(<span class="string">&quot;e2-small&quot;</span>),</span><br><span class="line">            BootDisk: &amp;compute.InstanceBootDiskArgs&#123;</span><br><span class="line">                InitializeParams: &amp;compute.InstanceBootDiskInitializeParamsArgs&#123;</span><br><span class="line">                    ImageFamily: pulumi.String(<span class="string">&quot;ubuntu-2004-lts&quot;</span>),</span><br><span class="line">                    ImageProject: pulumi.String(<span class="string">&quot;ubuntu-os-cloud&quot;</span>),</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            NetworkInterfaces: compute.InstanceNetworkInterfaceArray&#123;</span><br><span class="line">                &amp;compute.InstanceNetworkInterfaceArgs&#123;</span><br><span class="line">                    Subnetwork: subnet.ID(),</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            Tags: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;iap-ssh&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Export InstanceName</span></span><br><span class="line">        ctx.Export(<span class="string">&quot;InstanceName&quot;</span>, instance.Name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>とりあえず、脳死コピーをして<code>pulumi up</code>を実行すると下記のようにエラーになりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi up</span><br><span class="line">Previewing update (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxxx/gcp-test/dev/previews/xxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                 Name          Plan     Info</span><br><span class="line">     pulumi:pulumi:Stack  gcp-test-dev           1 error; 5 messages</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Diagnostics:</span><br><span class="line">  pulumi:pulumi:Stack (gcp-test-dev):</span><br><span class="line">    <span class="comment"># gcp-test</span></span><br><span class="line">    ./main.go:27:9: firewall declared and not used</span><br><span class="line">    ./main.go:29:21: cannot use pulumi.StringArray&#123;…&#125; (value of <span class="built_in">type</span> pulumi.StringArray) as compute.FirewallAllowArrayInput value <span class="keyword">in</span> struct literal: pulumi.StringArray does not implement compute.FirewallAllowArrayInput (missing method ToFirewallAllowArrayOutput)</span><br><span class="line">    ./main.go:48:21: unknown field ImageFamily <span class="keyword">in</span> struct literal of <span class="built_in">type</span> compute.InstanceBootDiskInitializeParamsArgs</span><br><span class="line">    ./main.go:49:21: unknown field ImageProject <span class="keyword">in</span> struct literal of <span class="built_in">type</span> compute.InstanceBootDiskInitializeParamsArgs</span><br><span class="line"></span><br><span class="line">    error: error <span class="keyword">in</span> compiling Go: unable to run `go build`: <span class="built_in">exit</span> status 1</span><br></pre></td></tr></table></figure><p>GCE&#x2F;Firewallのgoの記載方法が誤っていそうなので<a href="https://www.pulumi.com/registry/packages/gcp/api-docs/compute/instance/">GCEについての公式ドキュメント</a>と<a href="https://www.pulumi.com/registry/packages/gcp/api-docs/compute/firewall/">Firewallについての公式ドキュメント</a>を確認し、エラーを修正します。</p><p>また、GCEを構築するゾーン指定が漏れていたので、48行目に追加します。</p><figure class="highlight go"><figcaption><span>修正後</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/compute&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/pulumi/pulumi/sdk/v3/go/pulumi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    pulumi.Run(<span class="function"><span class="keyword">func</span><span class="params">(ctx *pulumi.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">        <span class="comment">// Create a GCP VPC network</span></span><br><span class="line">        vpc, err := compute.NewNetwork(ctx, <span class="string">&quot;my-vpc&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a GCP subnet in the us-central1 region</span></span><br><span class="line">        subnet, err := compute.NewSubnetwork(ctx, <span class="string">&quot;my-subnet&quot;</span>, &amp;compute.SubnetworkArgs&#123;</span><br><span class="line">            Network: vpc.ID(),</span><br><span class="line">            Region:  pulumi.String(<span class="string">&quot;us-central1&quot;</span>),</span><br><span class="line">            IpCidrRange: pulumi.String(<span class="string">&quot;192.168.0.0/24&quot;</span>),</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create firewall rule</span></span><br><span class="line">        _, err = compute.NewFirewall(ctx, <span class="string">&quot;allow-ssh-with-iap&quot;</span>, &amp;compute.FirewallArgs&#123;</span><br><span class="line">            Network: vpc.ID(),</span><br><span class="line">Allows: compute.FirewallAllowArray&#123;</span><br><span class="line">&amp;compute.FirewallAllowArgs&#123;</span><br><span class="line">Protocol: pulumi.String(<span class="string">&quot;tcp&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">            SourceRanges: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;35.235.240.0/20&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            TargetTags: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;iap-ssh&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create GCE instance</span></span><br><span class="line">        instance, err := compute.NewInstance(ctx, <span class="string">&quot;my-instance&quot;</span>, &amp;compute.InstanceArgs&#123;</span><br><span class="line">            MachineType: pulumi.String(<span class="string">&quot;e2-small&quot;</span>),</span><br><span class="line">Zone:        pulumi.String(<span class="string">&quot;us-central1-a&quot;</span>),</span><br><span class="line">            BootDisk: &amp;compute.InstanceBootDiskArgs&#123;</span><br><span class="line">                InitializeParams: &amp;compute.InstanceBootDiskInitializeParamsArgs&#123;</span><br><span class="line">                    Image: pulumi.String(<span class="string">&quot;ubuntu-2004-lts&quot;</span>),</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            NetworkInterfaces: compute.InstanceNetworkInterfaceArray&#123;</span><br><span class="line">                &amp;compute.InstanceNetworkInterfaceArgs&#123;</span><br><span class="line">                    Subnetwork: subnet.ID(),</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            Tags: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;iap-ssh&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Export InstanceName</span></span><br><span class="line">        ctx.Export(<span class="string">&quot;InstanceName&quot;</span>, instance.Name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修正後、再度<code>pulumi up</code>コマンドを実行し、yesをクリックします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi up</span><br><span class="line">Previewing update (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxxxxxx/gcp-test/dev/previews/xxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                       Name                Plan</span><br><span class="line"> +   pulumi:pulumi:Stack        gcp-test-dev        create</span><br><span class="line"> +   ├─ gcp:compute:Network     my-vpc              create</span><br><span class="line"> +   ├─ gcp:compute:Subnetwork  my-subnet           create</span><br><span class="line"> +   ├─ gcp:compute:Firewall    allow-ssh-with-iap  create</span><br><span class="line"> +   └─ gcp:compute:Instance    my-instance         create</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">    InstanceName: <span class="string">&quot;my-instance-1e6164c&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 5 to create</span><br><span class="line"></span><br><span class="line">Do you want to perform this update?  [Use arrows to move, <span class="built_in">type</span> to filter]</span><br><span class="line">&gt; <span class="built_in">yes</span></span><br><span class="line">  no</span><br><span class="line">  details</span><br></pre></td></tr></table></figure><p>下記のように、成功しました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Do you want to perform this update? <span class="built_in">yes</span></span><br><span class="line">Updating (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxxxxxx/gcp-test/dev/updates/12</span><br><span class="line"></span><br><span class="line">     Type                       Name                Status</span><br><span class="line"> +   pulumi:pulumi:Stack        gcp-test-dev        created (76s)</span><br><span class="line"> +   ├─ gcp:compute:Network     my-vpc              created (43s)</span><br><span class="line"> +   ├─ gcp:compute:Subnetwork  my-subnet           created (14s)</span><br><span class="line"> +   ├─ gcp:compute:Firewall    allow-ssh-with-iap  created (12s)</span><br><span class="line"> +   └─ gcp:compute:Instance    my-instance         created (17s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">    InstanceName: <span class="string">&quot;my-instance-a5cb493&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 5 created</span><br><span class="line"></span><br><span class="line">Duration: 1m19s</span><br></pre></td></tr></table></figure><p>Google Cloudのマネジメントコンソールから「VMインスタンス」に作成されたVMインスタンスの「SSHボタン」をクリックします。</p><p>ブラウザがたちが上がり、しばらくすると無事にIAP経由でSSHできることを確認できました。</p><img src="/images/20230426a/image.jpg" alt="image.jpg" width="1200" height="841" loading="lazy"><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回は、PulumiでのIaC入門について記載しました。</p><p>IaCはインフラリソースをコードで管理できるため、インフラリソースの迅速なデプロイや、品質の担保、オペミスの削減など様々なメリットがありますが、運用上のつらみもあるので利用するにはコードを管理するディレクトリ設計や、コーディング規約などを設けて利用していきましょう。</p><p>Pulumiにも入門してみましたが、いかがだったでしょうか。普段Terraformを利用している筆者からすると、アプリケーションコード(Go)を使用してインフラリソースが構築できるのは新鮮でした。普段アプリケーションコードを書いているアプリエンジニアからするとだいぶインフラリソースを構築するハードルが下がったのではと思います。</p><p>また、外伝としてPulumi AIにも触れてみましたが、入力する内容が良くなかったのか一発で<code>Pulumi up</code>を成功させることができなかったです。しかし、コンソールで対話型で構築したいインフラリソースを入力することでコードが自動生成されたるのは画期的だと思いました。まだまだ精度の問題はあるかと思いますが、いつかコードを自身で0から書かなくなる日もすぐそこなのだろうなと危機感を持ちました。</p><p>春の入門祭り2023、次回は小澤泰河さんの<a href="/articles/20230427a/">CDN 入門とエッジでのアプリケーション実行</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/IaC/">IaC</category>
      
      <category domain="https://future-architect.github.io/tags/Pulumi/">Pulumi</category>
      
      <category domain="https://future-architect.github.io/tags/Infrastructure-as-Code/">Infrastructure as Code</category>
      
      
      <comments>https://future-architect.github.io/articles/20230426a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
