<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Tue, 21 May 2024 01:29:11 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>DJI Mobile SDKのサンプルコードでシミュレータを動かしてみる</title>
      <link>https://future-architect.github.io/articles/20240521a/</link>
      <guid>https://future-architect.github.io/articles/20240521a/</guid>
      <pubDate>Mon, 20 May 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;やりたいこと&quot;&gt;&lt;a href=&quot;#やりたいこと&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="やりたいこと"><a href="#やりたいこと" class="headerlink" title="やりたいこと"></a>やりたいこと</h2><p>ドローンを利用して自動操縦（Autopilot）のロジックを組みたいですが、自宅でドローンを飛ばしたら家が壊されてしまう恐れがあるので、シミュレータを使いたいなと思いました。</p><p>調査した結果、DJI Assistant 2というアプリがあり、開発PCでデバッグしながら動きを見ることができるそうです。</p><p>早速、作業に入りましょー！</p><h2 id="必要なもの"><a href="#必要なもの" class="headerlink" title="必要なもの"></a>必要なもの</h2><ul><li>DJI Phantom 4</li><li>リモートコントローラー(以下、RC)</li><li>USBケーブル数本</li></ul><img src="/images/20240521a/image.png" alt="" width="1200" height="904" loading="lazy"><h2 id="バージョン"><a href="#バージョン" class="headerlink" title="バージョン"></a>バージョン</h2><ul><li>開発PC<ul><li>Android Studio Hedgedog</li><li>Android SDK API Level 31</li><li>Gradle 7.5</li><li>Gradle JDK Correcto-11</li></ul></li><li>シミュレータ用PC<ul><li>DJI Assistant 2 for Phantom</li></ul></li><li>Bridge App用携帯<ul><li>DJI Bridge App</li></ul></li></ul><h2 id="システム構成"><a href="#システム構成" class="headerlink" title="システム構成"></a>システム構成</h2><img src="/images/20240521a/image_2.png" alt="image.png" width="1200" height="426" loading="lazy"><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="１．（開発PC）DJI-Mobile-SDK-V4をクローン"><a href="#１．（開発PC）DJI-Mobile-SDK-V4をクローン" class="headerlink" title="１．（開発PC）DJI Mobile SDK V4をクローン"></a>１．（開発PC）DJI Mobile SDK V4をクローン</h3><p><a href="https://github.com/dji-sdk/Mobile-SDK-Android/tree/master">https://github.com/dji-sdk/Mobile-SDK-Android/tree/master</a></p><h3 id="２．（開発PC）DJI-DeveloperでAPIキーを発行"><a href="#２．（開発PC）DJI-DeveloperでAPIキーを発行" class="headerlink" title="２．（開発PC）DJI DeveloperでAPIキーを発行"></a>２．（開発PC）DJI DeveloperでAPIキーを発行</h3><ul><li><a href="https://developer.dji.com/user/apps/#all">DJI Developer</a>でログイン</li><li>「CREATE APP」でアプリケーションを登録する</li></ul><p>※Package Nameはサンプルコード内のパッケージ名（各パッケージが存在するパス：Sample Code&#x2F;app&#x2F;src&#x2F;main&#x2F;java）。その他の項目は適当に記載</p><img src="/images/20240521a/image_3.png" alt="image.png" width="1192" height="1130" loading="lazy"><h3 id="３．（開発PC）サンプリコード内にAPIキーを入力"><a href="#３．（開発PC）サンプリコード内にAPIキーを入力" class="headerlink" title="３．（開発PC）サンプリコード内にAPIキーを入力"></a>３．（開発PC）サンプリコード内にAPIキーを入力</h3><p>AndroidManifest.xml（パス：Sample Code&#x2F;app&#x2F;src&#x2F;main&#x2F;main)</p><img src="/images/20240521a/image_4.png" alt="image.png" width="1200" height="405" loading="lazy"><h3 id="４．（開発PC）Sample-Codeフォルダーを開いてビルドする"><a href="#４．（開発PC）Sample-Codeフォルダーを開いてビルドする" class="headerlink" title="４．（開発PC）Sample Codeフォルダーを開いてビルドする"></a>４．（開発PC）Sample Codeフォルダーを開いてビルドする</h3><ul><li>gradle-wrapper.properties(パス：Sample Code&#x2F;gradle&#x2F;wrapper)で一度「Sync」OR「build」<br>※まず最初からSyncするといいと思うが、大抵の場合ビルドエラーが起こる。こんな感じ</li></ul><img src="/images/20240521a/image_5.png" alt="image.png" width="1200" height="569" loading="lazy"><ul><li>「Change Gradle version in Gradle wrapper to 7.5….」を押すと、自動的にgradle-wrapper.propertiesの中身を書き換えてくれて、ビルドする</li></ul><img src="/images/20240521a/image_6.png" alt="image.png" width="1200" height="454" loading="lazy"><h3 id="５．（開発PC）エミュレータを起動"><a href="#５．（開発PC）エミュレータを起動" class="headerlink" title="５．（開発PC）エミュレータを起動"></a>５．（開発PC）エミュレータを起動</h3><img src="/images/20240521a/image_7.png" alt="image.png" width="794" height="1594" loading="lazy"><ul><li>起動後に「Register App」を押すと、DJI SDK利用が可能になる</li></ul><h3 id="６．（BridgeApp用携帯）携帯にBridgeAppをインストール"><a href="#６．（BridgeApp用携帯）携帯にBridgeAppをインストール" class="headerlink" title="６．（BridgeApp用携帯）携帯にBridgeAppをインストール"></a>６．（BridgeApp用携帯）携帯にBridgeAppをインストール</h3><ul><li>iOSはApp Storeからダウンロードする</li><li>Andriodは<a href="https://github.com/dji-sdk/Android-Bridge-App/releases/tag/4.14-trial1">dji-sdk&#x2F;Android-Bridge-App</a>からapk経由でインストール</li></ul><h3 id="７．（BridgeApp用携帯）Bridge-AppでRCに接続"><a href="#７．（BridgeApp用携帯）Bridge-AppでRCに接続" class="headerlink" title="７．（BridgeApp用携帯）Bridge AppでRCに接続"></a>７．（BridgeApp用携帯）Bridge AppでRCに接続</h3><ul><li>携帯は開発者モードをONにし、USB DebuggingをONにする</li><li>RCの電源をON、Phantom 4の電源をONにする</li><li>Bridge Appを立ち上げて、USBでRCに繋ぐ</li></ul><img src="/images/20240521a/image_8.png" alt="image.png" width="880" height="1868" loading="lazy"><ul><li>画面のIPアドレスをメモる(こちらの端末では192.168.1.35)</li></ul><h3 id="８．（開発PC）IPアドレスをエミュレータ画面に入力"><a href="#８．（開発PC）IPアドレスをエミュレータ画面に入力" class="headerlink" title="８．（開発PC）IPアドレスをエミュレータ画面に入力"></a>８．（開発PC）IPアドレスをエミュレータ画面に入力</h3><ul><li>「WSBridge IP」欄にIPアドレスを入力</li></ul><p>(開発PC画面)</p><img src="/images/20240521a/image_9.png" alt="image.png" width="772" height="1570" loading="lazy"><p>(BridgeApp用携帯画面)</p><img src="/images/20240521a/image_10.png" alt="image.png" width="888" height="1868" loading="lazy"><h3 id="９．（シミュレータ用PC）DJI-Assistant-2でPhantom-4に接続"><a href="#９．（シミュレータ用PC）DJI-Assistant-2でPhantom-4に接続" class="headerlink" title="９．（シミュレータ用PC）DJI Assistant 2でPhantom 4に接続"></a>９．（シミュレータ用PC）DJI Assistant 2でPhantom 4に接続</h3><ul><li><p>DJI Assistant 2 for Phantomを立ち上げて、USBでPhantom 4に繋ぐ</p></li><li><p>このアプリを使うには、以下の制限と設定が必要です（少し面倒ですね…）</p><ul><li>※新し目のMACで使えない</li><li>※USBドライブにアクセス制限あるPCはそれを解除する必要</li></ul></li><li><p>検知できると、こんな画面が出てくる</p></li></ul><img src="/images/20240521a/image_11.png" alt="image.png" width="1200" height="748" loading="lazy"><img src="/images/20240521a/image_12.png" alt="image.png" width="1200" height="753" loading="lazy"><ul><li>「Simulator」＞「Start Simulating」を押すと、Simulatorが立ち上がる<br>※ファイアウォールを無効化にする必要！そうしないとRCからの信号が到達できない</li></ul><img src="/images/20240521a/image_13.png" alt="image.png" width="1200" height="750" loading="lazy"><h3 id="１０．🍷🍷🍷操作できました🍷🍷🍷"><a href="#１０．🍷🍷🍷操作できました🍷🍷🍷" class="headerlink" title="１０．🍷🍷🍷操作できました🍷🍷🍷"></a>１０．🍷🍷🍷操作できました🍷🍷🍷</h3><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>シミュレーターを動かすことができました。ドローンにUSBで繋ぐところはなぜファイアウォールを無効化する必要があるのか理解できていないため、今後の調査課題とします。</p><p>シミュレータで学んだ後は、ドローン本体を調達して動かしていきましょう！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Android/">Android</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%89%E3%83%AD%E3%83%BC%E3%83%B3/">ドローン</category>
      
      <category domain="https://future-architect.github.io/tags/DJI/">DJI</category>
      
      
      <comments>https://future-architect.github.io/articles/20240521a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>アプリストア規約を調査し、その内容をアプリへ反映する</title>
      <link>https://future-architect.github.io/articles/20240520a/</link>
      <guid>https://future-architect.github.io/articles/20240520a/</guid>
      <pubDate>Sun, 19 May 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、2014年フューチャーに新卒入社した李守智です。金融・アパレル・医療等分野で、システム構築系のプロジェクトに上流から下流まで一貫して携わってきました。</p><p>アプリ配信の前提となるアプリストア規約の調査とその結果をアプリへ反映する流れについて話します。このお話は、2021年ごろにスマホアプリ（Android、iOS）を一般配信するために行っていた経験を土台にしています。</p><h2 id="GoogleとAppleのアプリストア規約"><a href="#GoogleとAppleのアプリストア規約" class="headerlink" title="GoogleとAppleのアプリストア規約"></a>GoogleとAppleのアプリストア規約</h2><p>どのアプリストアからアプリを配信するかは決まっていますか？AndroidアプリはGoogle Play、iOSアプリはApp Storeからの配信が一般的ですよね。配信先ごとに規約を確認する必要があります。</p><p>開発が完了したアプリをGoogle Play ConsoleやApp Store Connectに登録したら、同じ規約に基づいてアプリストア側の審査を受けることになります。</p><p>Google Playのポリシー<br><a href="https://play.google.com/intl/ja/about/developer-content-policy/">https://play.google.com/intl/ja/about/developer-content-policy/</a></p><p>App Reviewガイドライン<br><a href="https://developer.apple.com/jp/app-store/review/guidelines/">https://developer.apple.com/jp/app-store/review/guidelines/</a></p><h2 id="アプリストア規約は誰がいつ確認するか"><a href="#アプリストア規約は誰がいつ確認するか" class="headerlink" title="アプリストア規約は誰がいつ確認するか"></a>アプリストア規約は誰がいつ確認するか</h2><p>アプリストア規約は、デベロッパーが確認するものだけでなく、事業者が確認するものもあります。デベロッパーまたは事業者からアプリストア側へ問い合わせをする必要が出てくるようなものもあります。</p><p>プロジェクト開始／計画の段階で顧客とそれぞれの持分を認識合わせし、工数を確保しておくと良いでしょう。開発が完了してからやろうとすると、後述するような変更等から手戻りが発生する恐れがあります。アプリ配信の実績のない事業者の場合、アプリストア規約に違反するサービスを考えている可能性もあります。</p><p>また、規約は随時更新されているので、開発中はもちろん、運用保守の中でもウォッチできるようにしましょう。</p><h2 id="アプリストア規約はどのように確認するか"><a href="#アプリストア規約はどのように確認するか" class="headerlink" title="アプリストア規約はどのように確認するか"></a>アプリストア規約はどのように確認するか</h2><p>当時私たちがやっていた方法を共有すると、規約の本文1文を1行のチェック項目とするチェックリストを作成して管理していました。</p><p>対象の規約、規約のバージョン、チェック項目（規約本文）、確認者、確認日、判定、コメント等を書き、チェックリストそのもののバージョン管理も行いました。</p><p>このチェックリストで判定OKとならなかったものが、課題チケットやタスクチケット等になっていきました。</p><img src="/images/20240520a/スクリーンショット_2024-05-16_142524.png" alt="" width="1200" height="422" loading="lazy"><h2 id="アプリストア規約がアプリ開発に影響を及ぼした例"><a href="#アプリストア規約がアプリ開発に影響を及ぼした例" class="headerlink" title="アプリストア規約がアプリ開発に影響を及ぼした例"></a>アプリストア規約がアプリ開発に影響を及ぼした例</h2><h3 id="事例①アカウント削除機能の追加"><a href="#事例①アカウント削除機能の追加" class="headerlink" title="事例①アカウント削除機能の追加"></a>事例①アカウント削除機能の追加</h3><p>App Reviewガイドラインによると、アカウント作成に対応したアプリの場合、ユーザ自身がそのアプリ内でアカウントを削除できるようにする必要があります。</p><p>例えばあるアプリはアカウントを作成してログインした状態での利用を前提とするものであるとします。もちろん、このケースではこの規約をクリアする必要があります。ここで問題になるのは、最小限の機能だけ実装したMVPをまずリリースしようとしたときで、アカウント削除機能は優先度的にスコープから漏れがちということです。実際にはファーストリリース時点で必須であるため、アカウント削除機能とその導線追加などをの考慮を、最初からスケジュールに組み込んでおきましょう。</p><p>機能定義前にこの対応が行われていたら手戻りは防げます。一方で、仮に開発完了後にこの対応を行おうとすると、機能定義への追加はもちろん、アカウント削除機能への導線から発生する画面遷移の更新、開発・単体テスト、結合テストやシナリオテストなどなど、広範囲の変更が生じることになります。</p><h3 id="事例②ユーザーデータの使用制限"><a href="#事例②ユーザーデータの使用制限" class="headerlink" title="事例②ユーザーデータの使用制限"></a>事例②ユーザーデータの使用制限</h3><p>ユーザーデータを収集するアプリの場合、ユーザーデータの使用をプライバシーポリシーに準拠した目的に制限する必要があります。これは、Google PlayのポリシーでもApp Reviewガイドラインでも謳われています。</p><p>この規約は、事例①とは違って、直感的にどんな対応をすれば良いか分かりにくいものでした。そこでまず、対応内容を決める前に以下のような思考の段階を経ました。</p><ol><li>システムの中のユーザーデータの出番を洗い出した上で</li><li>その必要性がプライバシーポリシーに準拠しているかの評価をする</li></ol><p>「プライバシーポリシーに準拠しているか」も、もう一段と解釈が必要かも知れません。プライバシーポリシーはユーザが承諾するアプリの利用規約の一つにもなるので、ざっくり表現すると「ユーザがその使い方をされると認識し、良いと了承している」ことと言えるかなと思います。</p><p>そうした検討結果としてユーザーデータのログ出力はプライバシーポリシーに準拠していないと自ら判断することもあります。例えばあるアプリで操作データを未加工でログ出力したとします。このケースでは、ユーザーデータが思わぬ使い方をされる可能性があります。なぜならログは容易に取得ができ、集計分析等が可能な一方で、その都度プライバシーポリシーに準拠した使い方がされることを、プロダクトのライフサイクルのすべての期間で保証することは難しいと想定できるからです。</p><p>そのため、運用保守の問い合わせ対応に必要な、ユーザを特定する情報以外のユーザーデータはマスキングしてログ出力するといった対応が必要です。もちろん、この対応を行うと障害対応などでログを用いた追跡の難易度が上がります。そのため、プロジェクト計画の段階で対応時期等をチームで合意して進められるようにすることが重要です。</p><h3 id="その他の事例"><a href="#その他の事例" class="headerlink" title="その他の事例"></a>その他の事例</h3><p>詳細は省略しますが、他にも「アプリを使い始めた後でも、ユーザが利用規約への同意を撤回できるようにする」とか、「iPhone向けのアプリがiPadでもうまく動作するか」など、対応検討の必要な規約は複数ありました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>どちらかというと、Google Playのポリシーよりも、App Reviewガイドラインからの方が、対応が難しい印象です。</p><p>規約の内容によって対応が簡単に決められるものもあれば、課題管理が必要なものもありました。アプリストア規約を基点とせずとも、プロジェクトのスコープに既に入っている対応もありました。いずれにせよ、品質の高いサービスを世の中に配信することにつながれば良いと思います。適時にアプリストア規約の調査を行い、プロジェクト品質に役立てましょう。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Android/">Android</category>
      
      <category domain="https://future-architect.github.io/tags/iOS/">iOS</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B9%E3%83%88%E3%82%A2%E8%A6%8F%E7%B4%84/">アプリストア規約</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B9%E3%83%88%E3%82%A2%E5%AF%A9%E6%9F%BB/">アプリストア審査</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB/">モバイル</category>
      
      <category domain="https://future-architect.github.io/tags/GooglePlay/">GooglePlay</category>
      
      <category domain="https://future-architect.github.io/tags/AppReview/">AppReview</category>
      
      
      <comments>https://future-architect.github.io/articles/20240520a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>OpenAPI 3.0.3 と 3.1.0 どっち使う？</title>
      <link>https://future-architect.github.io/articles/20240517a/</link>
      <guid>https://future-architect.github.io/articles/20240517a/</guid>
      <pubDate>Thu, 16 May 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240517a/OpenAPI_Logo_Pantone-1.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;241&quot;&gt;

&lt;p&gt;Swaggerを使う事になり OpenAPIを触ってみると</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240517a/OpenAPI_Logo_Pantone-1.png" alt="" width="800" height="241"><p>Swaggerを使う事になり OpenAPIを触ってみると <code>3.0.3</code> と <code>3.1.0</code> が存在します。どちらを使うべきが悩んだので調べて整理してみました。<br><code>3.0.3</code> から <code>3.1.0</code> への変更点は過去のポストを参照ください。</p><ul><li>参考:  <a href="https://future-architect.github.io/articles/20220622b/#v3-0%E3%80%81v3-1">Open API Specification 3.1と気になる仕様策定 </a></li></ul><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>Amazon API Gateway を使い、<a href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/api-gateway-import-api.html">OpenAPIで定義されたAPI仕様書のインポート機能</a> を利用する場合は 3.0系（ <code>3.0.3</code> ）一択です。理由は単純に執筆時点では Amazon API Gateway が 3.1系 に対応してないからです。</p><p>また、VSCodeの拡張機能の中には <code>3.0.3</code> に対応しているものの <code>3.1.0</code> には未対応のものも多いようです。（決して <code>3.1.0</code> で書けないわけではないありません）</p><p><a href="https://github.com/42Crunch/vscode-openapi/issues/110">https://github.com/42Crunch/vscode-openapi/issues/110</a></p><p><a href="https://github.com/arjun-g/vs-swagger-viewer/issues/118">https://github.com/arjun-g/vs-swagger-viewer/issues/118</a></p><p>それ以外であれば <code>3.1.0</code> がオススメです。</p><h2 id="何が違うのか"><a href="#何が違うのか" class="headerlink" title="何が違うのか"></a>何が違うのか</h2><p>OpenAPI 3.0系は JSON Schemaの定義に一部従っていません。<code>nullable</code> が有名ですね。<code>nullable:true</code> って何だ？<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><blockquote><ul><li>OpenAPIv2.0: JSONスキーマの拡張サブセット。JSONスキーマDraft 4との互換性が約80％になる分岐があった</li><li>OpenAPIv3.0: JSONスキーマDraft 5との互換性が90％</li><li>OpenAPIv3.1: JSONスキーマDraft 2019-09と互換性が100%</li></ul></blockquote><p>※ 引用元：<a href="https://future-architect.github.io/articles/20220622b/#v3-0%E3%80%81v3-1">Open API Specification 3.1と気になる仕様策定#v3.0、v3.1</a></p><p>OpenAPI <code>3.1.0</code> では webhooksが追加され、typeで配列が使えるようになり nullを表現できるようになりました。この他にも exampleが廃止され examplesに変更となり書き方が違います。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><h2 id="ちなみに-Amazon-API-Gateway-と-OpenAPI-3-0系でもまた違う"><a href="#ちなみに-Amazon-API-Gateway-と-OpenAPI-3-0系でもまた違う" class="headerlink" title="ちなみに Amazon API Gateway と OpenAPI 3.0系でもまた違う"></a>ちなみに Amazon API Gateway と OpenAPI 3.0系でもまた違う</h2><p>結論の補足として Amazon API Gateway は <a href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/models-mappings-models.html">JSONスキーマDraft 4</a>を使用してモデルを定義します。OpenAPI 3.0系とも違う仕様です。この違いにより OpenAPI 3.0系のAPI定義書で <code>nullable:true</code> と定義しても Amazon API Gatewayへ喰わせることは出来ないようです。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>OpenAPIを利用する際にそもそも何が問題なんだろう？と疑問を持ったのが記事を書くきっかけでした。<code>3.1.0</code> がオススメですがもし <code>3.0.3</code> を利用する場合には、前提として <code>nullable</code> を利用しないで <code>undefined</code> で統一する方針とした方が良いと思います。</p><ul><li>参考: <a href="https://future-architect.github.io/articles/20211028b/">OpenAPIにおけるundefinedとnullの設計 </a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/proposals/2019-10-31-Clarify-Nullable.md">Clarify Semantics of nullable in OpenAPI 3.0</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://www.openapis.org/blog/2021/02/16/migrating-from-openapi-3-0-to-3-1-0">Migrating from OpenAPI 3.0 to 3.1.0</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Swagger/">Swagger</category>
      
      <category domain="https://future-architect.github.io/tags/OpenAPI/">OpenAPI</category>
      
      
      <comments>https://future-architect.github.io/articles/20240517a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ChatGPTを徹底活用! ビジネスパーソンのためのプログラミング勉強法のレビューに参加しました</title>
      <link>https://future-architect.github.io/articles/20240516b/</link>
      <guid>https://future-architect.github.io/articles/20240516b/</guid>
      <pubDate>Wed, 15 May 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;a href=&quot;https://www.shoeisha.co.jp/book/detail/9784798161907&quot;&gt;
&lt;img src=&quot;/images/20240516b/image.png&quot; alt=&quot;image.png&quot; width=&quot;500&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<a href="https://www.shoeisha.co.jp/book/detail/9784798161907"><img src="/images/20240516b/image.png" alt="image.png" width="500" height="709" loading="lazy"></a><p><a href="https://www.shoeisha.co.jp/book/detail/9784798161907">https://www.shoeisha.co.jp/book/detail/9784798161907</a></p><p>翔泳社さんからこれから発売される、「ChatGPTを徹底活用! ビジネスパーソンのためのプログラミング勉強法」のレビューに参加しました。著者は元フューチャーで、グループ会社のIT教育を行っているコードキャンプで社長もされていた堀内さんです。レビューは同僚の伊藤太斉さんと、もう一人元同僚の千葉さんも参加して行いました。</p><p>僕自身、ちょびちょび使ったり社内の生成AIチャット（Copilot APIを利用したやつ）を仕事に活用したりしていますし、不慣れな言語(VBAとかPowerShell)を書くのにかなり手助けになっているな、という実感があったので、それらの経験も踏まえてかなり楽しくレビューに参加させてもらいました。</p><p>グループ会社のコードキャンプは<a href="https://codecamp.jp/corporate/press/detail/448">受講者が5万人を超え</a>、企業向けにもIT教育を提供しているような実績のあるサービスを提供しています。IT教育を専業で何年も見てきた堀内さんの書く内容なので、とりあえずChatGPTでやってみました、みたいな感じではなく、きちんと学んでいくための方法をChatGPTを軸に再構成したような内容になっています。僕自身、なるほど、そういう質問や使い方があるのか、ためになりました、という感想も何箇所もコメントしたくなった（実際にした）ほどでした。</p><p>生成AIは大きな新しい潮流ではありますが、単にチャットウインドウを開いたらパワーアップするというものではなく、それを活用した自分のパワーアップやスキルアップをきちんと行なっていく作戦が必要です。近年、AIの導入で将棋のレベルが上がったという報告もあります。単にAIが導入されたからプログラミングする人が不要になるわけではなく、AIを使いこなし、レベルアップした人間が他の人の仕事を奪う、という流れです。AIを活用するノウハウが新たに必要です。「○○の民主化」という言葉がよくITの世界では言われますが、フランス革命のあとにジャコバン派の恐怖政治があってナポレオンの時代が来たように、フラット化した世界というのは新しい競争の始まりの狼煙です。</p><ul><li><a href="https://www.nhk.jp/p/gendai/ts/R7Y6NGLJ6G/blog/bl/pkEldmVQ6R/bp/pRNn34yB3R/">クローズアップ現代: 棋士たちはAIとさらなる高みへ　藤井聡太は「人間とは違うレベルに到達しつつある」</a></li></ul><h1 id="ChatGPTとタイトルにあるが、内容は特定の生成AIには依存しない"><a href="#ChatGPTとタイトルにあるが、内容は特定の生成AIには依存しない" class="headerlink" title="ChatGPTとタイトルにあるが、内容は特定の生成AIには依存しない"></a>ChatGPTとタイトルにあるが、内容は特定の生成AIには依存しない</h1><p>最初にタイトルを拝見したときは、「ChatGPTとか書いちゃって大丈夫かな？他のベンダーもかなり頑張っているしClaude.aiとかも評判いいし・・・」とちょっと心配になってしまったのですが、内容的には特にChatGPTでなければダメということはなく、他の生成AIでも活用できそうな話が中心です。</p><p>むしろ、5&#x2F;14になってGPT-4oが発表されて、人間がタイプしたり読むよりも圧倒的に速度が速くなったり、無料版でもGPT-4になり、出版のタイミングの直前にChatGPTへの人気が再燃（周りでも、claude.aiからChatGPTにまた戻るわ、という人も出た）するタイミングがやってくるあたり、堀内さんは何か持っていますね。</p><h1 id="ビジネスパーソン以外にもおすすめ"><a href="#ビジネスパーソン以外にもおすすめ" class="headerlink" title="ビジネスパーソン以外にもおすすめ"></a>ビジネスパーソン以外にもおすすめ</h1><p>書籍のタイトルは「ビジネスパーソンのための」となっていますが、IT技術者だって日々新しい言語を学んだり、知識のリフレッシュをしたりしているわけで、読んでみるとそのようなキャッチアップが効率化できると思います。ぜひ、発売されたら手に取ってみると役に立つと思います。</p><h1 id="コメントしたけど入らなかった内容"><a href="#コメントしたけど入らなかった内容" class="headerlink" title="コメントしたけど入らなかった内容"></a>コメントしたけど入らなかった内容</h1><p>紙面の都合とかをあまり考えずに、「自分が著者だったらこういう内容も入れたい！」みたいな感じでたくさんコメントをつけさせてもらいました。大部分は取り入れていただいたのですが、入らなかったのもいくつかあります。ここで供養しておきます。</p><h2 id="1章"><a href="#1章" class="headerlink" title="1章"></a>1章</h2><p>ChatGPTの活用。読み方がわからない。そもそもキーワードなのかどうかもわからない、みたいな状況ではChatGPTがすごく助けになりますよ、という話。</p><p>あとは、DX人材大事、というのに加えて、少子高齢化で若者が職場に入ってくれる数がどんどん減っていくのが目に見えている以上、今まで以上の業務効率化だけでなく、より短期間で学ぶといったニーズはさらに高まるであろう、という話。</p><p>従来の学習を続けている人にとっても、周りに教えてくれるような人がいない人にはより助けになるよ、という話。</p><h2 id="2章"><a href="#2章" class="headerlink" title="2章"></a>2章</h2><p>情報の検索に生成AIを用いるメリットとしては、ハルシネーションのリスクはあるものの、検索エンジンはSEOでハックされてしまい、広告目当ての長文の記事ばかりが検索でヒットし、得られる情報の密度が低くなっていて検索エンジンの利便性が下がっている時代においてはメリットが上回るケースも多くありそう、という話（検索とのうまいコラボレーション方法も本文では説明されています）。</p><p>ただ、Java&#x2F;Python&#x2F;PowerShell&#x2F;シェルスクリプトなど、LLMがよく見知っている情報の多い言語限定かもしれない（が、そもそも情報少ない言語だとSEOハックされていることも少ないので分かっていれば対処可能）。</p><h2 id="3章"><a href="#3章" class="headerlink" title="3章"></a>3章</h2><p>生成AIで学習のロードマップを作るときに、PythonチュートリアルやTour of Goなどの既存のコンテンツとの差分を生成させると、既存の学習コンテンツから追加で学ばないといけない内容だけがピックアップできるし、既存のコンテンツだと周りに教えてくれる人がいる可能性もあるので効率よく自分だけのコースが作れるのではないか、という話。</p><p>環境設定、エディタ名なども入れて質問すれば、公式ドキュメントでは触れてない（かもしれない）、より学習しやすい環境が作れるのでは、という話。</p><p>世の中で話題になるような大きなバグも、実は原因はすごくささいなミスだったりするので、学習過程でぶつかるエラーはプロが体験するのとそうそう変わらないかもしれないし、今後もっと大きな落とし穴で抜けられないかもしれない、みたな恐れを持つ必要はないので勇気をもって！という話</p><h2 id="4章"><a href="#4章" class="headerlink" title="4章"></a>4章</h2><p>学習問題を出させる場合には、質がバラバラな可能性があるので、多めの問題数を出させて、良さそうなのをピックアップする、という方法が生成AIには良さそうという話</p><p>良い書き方を考える上では、その言語で標準となっている書き方をまず教えてもらって解説してもらったら良いのでは？という話</p><p>コードのコメントを生成してもらう場合、Pythonならdocstringというエコシステムでサポートされている記述方法があるのでそれに合わせたコメントを作ってもらうと良さそう、という話。</p><p>Pythonだとpy.testの方が使われているので、こちらを指定してテストを書いてもらうと良さそうだが、追加インストールが必要になってしまうので悩ましいかも、という話。</p><p>学んだことをアウトプットするのは、他の人に役にたつのか？というのを気にする必要はなく、自分のためにやればいいし、一週間後の自分がそれを見て思い出したりすればそれで十分アウトプットの価値になるよ、という話。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/ChatGPT/">ChatGPT</category>
      
      <category domain="https://future-architect.github.io/tags/ChatGPT%E3%82%92%E5%BE%B9%E5%BA%95%E6%B4%BB%E7%94%A8/">ChatGPTを徹底活用!</category>
      
      
      <comments>https://future-architect.github.io/articles/20240516b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vue3でモーダルダイアログの起動をいい感じに実装する</title>
      <link>https://future-architect.github.io/articles/20240515a/</link>
      <guid>https://future-architect.github.io/articles/20240515a/</guid>
      <pubDate>Tue, 14 May 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240515a/top.png&quot; alt=&quot;&quot; width=&quot;748&quot; height=&quot;403&quot;&gt;

&lt;p&gt;Reactでのダイアログの開閉制御については以前、別のエントリーで書きました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240515a/top.png" alt="" width="748" height="403"><p>Reactでのダイアログの開閉制御については以前、別のエントリーで書きました。</p><ul><li><a href="/articles/20240208a/">ダイアログもアラートも、Reactで子コンポーネントの開閉管理を実装する</a></li></ul><p>Vue3でも、何か簡単に書ける方法はないかと試行錯誤して、ちょっといい感じかな？という方針を見つけたので、備忘がてら技術ブログに書いておきます。</p><h1 id="使いやすいダイアログAPIとは"><a href="#使いやすいダイアログAPIとは" class="headerlink" title="使いやすいダイアログAPIとは"></a>使いやすいダイアログAPIとは</h1><p>太古の昔より、便利なダイアログ機能というのは、呼び出し元はダイアログの開閉状態とか細かい制御は気にせず、必要な情報を渡して、結果だけもらうというものです。JavaScriptのブラウザのAPIにもありますよね。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title function_">confirm</span>(<span class="string">&quot;今日はいい天気でしたね&quot;</span>)</span><br><span class="line"><span class="comment">// OKのときはtrue</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><p>これはVisual Basicとかでもなんでも同じですね。ただし、JavaScriptだと<code>confirm()</code>、<code>alert()</code>、<code>prompt()</code>は画面をブロックしてしまう、という問題があります。デザインを変えられないとか。</p><p>しかし、ブロッックさせないようにReact、Vue、Angularといったものを使い出すと、この使いやすいデザインとかは頭から抜け落ちて、状態管理をどうしよう、結果はコールバックかemitか、みたいな感じになりがちです。どちらにしても呼び出す側でコールバック関数やら何やらの準備が必要だし、パラメータも増えてしまうしで、あまり嬉しくないことになります。</p><p>がんばって、昔ながらのAPIに寄せてみようと思います。</p><h1 id="方針"><a href="#方針" class="headerlink" title="方針"></a>方針</h1><p>目指す方向性としては、ダイアログの<code>ref</code>を取得してそれ経由でダイアログをオープンすると同時に、結果が帰ってくるまで<code>await</code>するという感じですね。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> myDialog.<span class="property">value</span>?.<span class="title function_">openDialog</span>()</span><br></pre></td></tr></table></figure><h1 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h1><p>HTML標準になった<code>&lt;dialog&gt;</code>タグを使います。デザインは本題ではないのですが、<a href="https://daisyui.com/">daisyUI</a>を使っています。どんなフレームワークにもマッチするのでお気に入りです。</p><p>ダイアログは <code>&lt;form method=&quot;dialog&quot;&gt;</code>なフォームを作って、そこにボタンを置けば、JSを書かずにダイアログを閉じられます。ただ、編集中は閉じさせないとか、細かい制御がうまくいかなかったので、自分でハンドラを作っています。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dialog</span> <span class="attr">ref</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;open&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal-box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;font-bold text-lg&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;py-4&quot;</span>&gt;</span>Press ESC key or click the button below to close<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-action&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- if there is a button in form, it will close the modal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onDialogAction(&#x27;cancel&#x27;)&quot;</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onDialogAction(&#x27;close&#x27;)&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// APIを公開</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineExpose</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  openDialog</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// dialogの参照を保持する変数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> dialog = ref&lt;<span class="title class_">HTMLDialogElement</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> open = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// Promiseのresolveをキャッシュ</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="attr">resolve</span>: <span class="function">(<span class="params">action: <span class="string">&#x27;cancel&#x27;</span> | <span class="string">&#x27;close&#x27;</span></span>) =&gt;</span> <span class="keyword">void</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 外部に公開するAPI。ダイアログを開いて、終了</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">openDialog</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  open.<span class="property">value</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  dialog?.<span class="property">value</span>?.<span class="title function_">showModal</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="string">&#x27;cancel&#x27;</span> | <span class="string">&#x27;close&#x27;</span>&gt;(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    resolve = res</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> result = <span class="keyword">await</span> promise</span></span><br><span class="line"><span class="language-javascript">  dialog?.<span class="property">value</span>?.<span class="title function_">close</span>()</span></span><br><span class="line"><span class="language-javascript">  open.<span class="property">value</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> result</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// ダイアログ側の閉じるボタンが押されたときに呼ばれるコールバック</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">onDialogAction</span>(<span class="params">action: <span class="string">&#x27;cancel&#x27;</span> | <span class="string">&#x27;close&#x27;</span></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">resolve</span>(action)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>これでだいたい動くのですが、標準のダイアログはescapeキーでも閉じてしまいます。その場合、Promiseの<code>resolve()</code>が呼ばれないので、終了待ちしている起動側のハンドラがずっと待ち続けてしまいます。escapeが押された場合にもきちんとPromiseを解決するようにします。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, refonMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// escapeキーで閉じるのをフックして、実装しようとする終了と同じ流れに載せる</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleEscape</span>(<span class="params">event: Event</span>) &#123;</span><br><span class="line">  event.<span class="title function_">preventDefault</span>()</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;cancel&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  dialog.<span class="property">value</span>?.<span class="title function_">addEventListener</span>(<span class="string">&#x27;cancel&#x27;</span>, handleEscape)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  dialog.<span class="property">value</span>?.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;cancel&#x27;</span>, handleEscape)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>呼ぶ側はこんな感じです。残念ながら、テンプレート側にダイアログのコンポーネントを置く、というのはサボれないですね。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MyDialog</span> <span class="attr">ref</span>=<span class="string">&quot;myDialog&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">async</span> <span class="keyword">function</span> 何かのハンドラ() &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#x27;close&#x27;か&#x27;cancel&#x27;が帰ってくる</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> result = <span class="keyword">await</span> myDialog.<span class="property">value</span>?.<span class="title function_">openDialog</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>これは<code>confirm()</code>相当ですが、当然他の情報もいろいろ返せます。また、 <code>openDialog()</code>の引数として追加の引数を渡すことも可能です。モーダルダイアログという特性上、おそらくpropsで渡すものはほとんどないんじゃないですかね。</p><p>既存のフレームワークのダイアログ機能と違い、<code>&lt;dialog/&gt;</code>で作った場合は、非表示であるものの、仮想DOMは内部的に作成処理が走ってしまいます。コンポーネントで初期値をpropsで受け取っている場合など、表示のタイミングにあわせて値を設定しても、すでに設定済みの値の変更ということになり、内部で状態を保持していじるようなケースだとちょっと困ったことになるかもしれません（なりました）。そのため、openというフラグをつけて、ダイアログの中に <code>v-if=&quot;open&quot;</code>という条件判断を入れて、表示のタイミングで初めてDOMが作られるようにしています。</p><h2 id="Promise-withResolvers"><a href="#Promise-withResolvers" class="headerlink" title="Promise.withResolvers()"></a>Promise.withResolvers()</h2><p>太田さんより、ES2024で、Promise回りの書き方が楽になりますよ、と教えてもらいました。<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/withResolvers">Promise.withResolvers()</a>というメソッドが増えます。行数削減効果は1行ですが、async&#x2F;awaitの時代でPromiseを直接触る機会が今後減っていく前提で考えれば、将来読む人の認知不可は減って良さそうです。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 変更前</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="string">&#x27;cancel&#x27;</span> | <span class="string">&#x27;close&#x27;</span>&gt;(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve = res</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 変更後</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">promise</span>: <span class="title class_">Promise</span>&lt;<span class="string">&#x27;cancel&#x27;</span> | <span class="string">&#x27;close&#x27;</span>&gt;</span><br><span class="line">&#123; promise, resolve &#125; = <span class="title class_">Promise</span>.<span class="title function_">withResolvers</span>();</span><br></pre></td></tr></table></figure><p>ただ、このメソッド、Node.jsだと最新の22では使えますが、現在アクティブなLTSの20や開発版の21では使えません。Vue.jsの自動生成プロジェクトだと、<a href="https://www.npmjs.com/package/@tsconfig/node20">@tsconfig&#x2F;node20</a>を参照していているせいか、vue-createでしゃっと作ったプロジェクトだと使えないですね。ちょびっとlibとかtargetいじってみたものの、なかなかVSCodeで有効化されないので、もうちょっと調べてみようと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Vue.jsでも標準の<code>&lt;dialog&gt;</code>と仲良くなれました。使う側との接点が最小のAPIを作れました。</p><p>開いて初期化を行うのと、終了時に結果を送り出す部分を1つの<code>openDialog()</code>という関数にまとめることで、初期化と後始末で忘れずにセットで行う処理が散らばらずに済むようになりましたし、入力と出力も近くで扱えるので、利用側からするとインタフェースがわかりやすく、「コードを見たらすぐに使い方がわかる」コードになったと思います。</p><p><code>&lt;script setup&gt;</code>方式で書いてみましたが、慣れるとだいぶスムーズに書けますね。ただ、この世界は素のJS世界に見せかけた仮想の世界なので、たまーにベースのAPIをラップしている、という事実が見え隠れしてきますね。</p><p>Reactの方では、カスタムフックを介して実現しました。Reactでも <a href="https://react.dev/reference/react/useImperativeHandle">useImperativeHandle()</a>を使えば、コンポーネントにメソッドを追加して、それを使って今回と同じような処理を実装できると思います。ですが、上記のドキュメントの最後のPitfallのところに書かれているように、Reactの基本方針としては <code>props</code> で済むなら <code>ref</code> は使うなよ、という感じですね。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Vue-js/">Vue.js</category>
      
      <category domain="https://future-architect.github.io/tags/Vue3/">Vue3</category>
      
      
      <comments>https://future-architect.github.io/articles/20240515a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ZodでJSONのオブジェクトを実行時に都合の良い型に変換する</title>
      <link>https://future-architect.github.io/articles/20240514a/</link>
      <guid>https://future-architect.github.io/articles/20240514a/</guid>
      <pubDate>Mon, 13 May 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240514a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240514a/top.png" alt="" width="800" height="439"><p>いろんなJavaScriptの統計を見ると、今時のウェブフロントエンドの新規開発は80%はTypeScriptになっているということです。また、TypeScript自身を使わなくても、TypeScriptで培われた型推論のパワーで、JavaScriptであってもVSCode上で補完とか思いの外うまくいったりしちゃうので、TypeScriptフレンドリーというのはますます重要になっています。</p><p>ですが、TypeScriptが有効なのはコンパイル前とか実装中であり、実行時に流れてくるJSONが果たしてきちんとした型通りの定義なのかはTypeScriptの範疇外です。そこで<a href="https://zod.dev/">Zod</a>とかのバリデーションを行ってくれるライブラリが使われます。Zodを使えばJSONが規定通りの構造をしているか確認した上で、TypeScriptの型を持った変数に安全に代入してくれます。</p><p>ですが、JSONというのはネットワーク上を流したり、ファイルに保存したりには便利ですが、扱えるデータの種類が限られるため、実行中のプログラムからするとパースしてそのまま使うのが決して最適とは言えません。UUIDや日付が扱えなくて文字列になってしまったりします。そのための仕組みがZodにはいくつかあります。</p><p>最後の項目のやり方を知りたくて調べ始めたのですが、ついでにシンプルな変換とかロジックを加えて変換というのもついでに整理しておきます。</p><h1 id="シンプルな値の型だけの変換"><a href="#シンプルな値の型だけの変換" class="headerlink" title="シンプルな値の型だけの変換"></a>シンプルな値の型だけの変換</h1><p>名前を変えずに組み込み型を使って日付(<code>.date()</code>)や文字列(<code>.string()</code>)、数値(<code>.number()</code>)とかに変換するだけなら、いつもの型の間に<code>.coerce</code>を挟むだけでOKです。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userSchema = z.<span class="title function_">object</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: z.<span class="title function_">string</span>(),</span><br><span class="line">  <span class="attr">age</span>: z.<span class="property">coerce</span>.<span class="title function_">bigint</span>(),</span><br><span class="line">  <span class="attr">birth</span>: z.<span class="property">coerce</span>.<span class="title function_">date</span>(),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = z.<span class="property">infer</span>&lt;<span class="keyword">typeof</span> userSchema&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> src = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;9007199254740993&quot;</span>,</span><br><span class="line">  <span class="attr">birth</span>: <span class="string">&quot;1980-01-01&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = userSchema.<span class="title function_">parse</span>(src);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">age</span>.<span class="title function_">toString</span>());</span><br><span class="line"><span class="comment">// 9007199254740993</span></span><br><span class="line"><span class="comment">// Number.MAX_SAFE_INTEGERより大きくても大丈夫なので</span></span><br><span class="line"><span class="comment">// 9000兆歳を超えるエルフを登録したくなってもOK</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">birth</span>.<span class="title function_">toString</span>());</span><br><span class="line"><span class="comment">// Tue Jan 01 1980 09:00:00 GMT+0900 (日本標準時)</span></span><br></pre></td></tr></table></figure><h1 id="ちょっとロジックを加えて変換"><a href="#ちょっとロジックを加えて変換" class="headerlink" title="ちょっとロジックを加えて変換"></a>ちょっとロジックを加えて変換</h1><p>UUIDは128ビット(16バイト)のデータを、文字列表記にして扱うことが多いのですが、文字列にすると36文字になります。大量にUUIDがある場合に少しでもサイズを小さくするためにJSON上ではbase64で22文字表記にするが、TypeScriptの場合に文字列表記で扱いたい、みたいなケースです。この場合は次に説明する<code>preprocess()</code>も使えますがちょっと長くなるので割愛します。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">convertBase64ToUUID</span>(<span class="params">src: <span class="built_in">string</span>, ctx: z.RefinementCtx</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">base64String</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    base64String = <span class="title function_">atob</span>(src);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    ctx.<span class="title function_">addIssue</span>(&#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;invalid base64 string&quot;</span>,</span><br><span class="line">      <span class="attr">code</span>: z.<span class="property">ZodIssueCode</span>.<span class="property">custom</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> h = [...base64String].<span class="title function_">map</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>));</span><br><span class="line">  <span class="keyword">if</span> (h.<span class="property">length</span> !== <span class="number">16</span>) &#123;</span><br><span class="line">    ctx.<span class="title function_">addIssue</span>(&#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;invalid length&quot;</span>,</span><br><span class="line">      <span class="attr">code</span>: z.<span class="property">ZodIssueCode</span>.<span class="property">custom</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="string">`<span class="subst">$&#123;h.slice(<span class="number">0</span>, <span class="number">4</span>).join(<span class="string">&quot;&quot;</span>)&#125;</span>-<span class="subst">$&#123;h.slice(<span class="number">4</span>, <span class="number">6</span>).join(<span class="string">&quot;&quot;</span>)&#125;</span>-<span class="subst">$&#123;h.slice(<span class="number">6</span>, <span class="number">8</span>).join(<span class="string">&quot;&quot;</span>)&#125;</span>-<span class="subst">$&#123;h.slice(<span class="number">8</span>, <span class="number">10</span>).join(<span class="string">&quot;&quot;</span>)&#125;</span>-<span class="subst">$&#123;h.slice(<span class="number">10</span>).join(<span class="string">&quot;&quot;</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userSchema = z.<span class="title function_">object</span>(&#123;</span><br><span class="line">  <span class="attr">id</span>: z.<span class="title function_">string</span>().<span class="title function_">transform</span>(convertBase64ToUUID),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> src = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&quot;QMwh6n0nScyKGCgDc5M74g&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = userSchema.<span class="title function_">parse</span>(src);</span><br><span class="line"><span class="comment">// 40cc21ea-7d27-49cc-8a18-280373933be2</span></span><br><span class="line"><span class="comment">// いつもの形式の文字列になった！</span></span><br></pre></td></tr></table></figure><p><code>transform()</code>を使う場合、来る値は文字列だ、というところまではzodが保証した上で変換関数を呼んでくれます。その中身の変換だけに注力すればOKですが、場合によっては変換中にエラーが発生する可能性があります。ここではbase64として不正な文字列が渡ってきた、長さが足りないというケースのエラーハンドリングをしています。</p><h1 id="構造を変える"><a href="#構造を変える" class="headerlink" title="構造を変える"></a>構造を変える</h1><p>次のような配列がサーバーからは送られてくるが、プログラム中ではidをキーにした<code>Map</code>で扱いたい、ということがあると思います。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">items</span>: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;1&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;one&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;2&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;two&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;3&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;three&quot;</span> &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>とりあえずそのまま実装してみたのがこの形です。<code>preprocess()</code>のコールバックの第1引数は未知の値なので<code>unknown</code>です。<code>unknown</code>から文字列に変換するのは自分で型ガードを実装しても良いですが、ここもZodを使った方がお手軽なので使っています。ここでもポイントは<code>safeParse()</code>を使い、エラーがあったら先ほどと同じく<code>ctx</code>に登録してあげることです。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> originalType = z.<span class="title function_">array</span>(</span><br><span class="line">  z.<span class="title function_">object</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: z.<span class="title function_">string</span>(),</span><br><span class="line">    <span class="attr">name</span>: z.<span class="title function_">string</span>(),</span><br><span class="line">  &#125;),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> containerSchema = z.<span class="title function_">object</span>(&#123;</span><br><span class="line">  <span class="attr">items</span>: z.<span class="title function_">preprocess</span>(</span><br><span class="line">    <span class="function">(<span class="params">items, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = originalType.<span class="title function_">safeParse</span>(items);</span><br><span class="line">      <span class="keyword">if</span> (result.<span class="property">success</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> result.<span class="property">data</span>) &#123;</span><br><span class="line">          map.<span class="title function_">set</span>(item.<span class="property">id</span>, item.<span class="property">name</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.<span class="title function_">addIssue</span>(result.<span class="property">error</span>.<span class="property">errors</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    z.<span class="title function_">map</span>(z.<span class="title function_">string</span>(), z.<span class="title function_">string</span>()),</span><br><span class="line">  ),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> src = &#123;</span><br><span class="line">  <span class="attr">items</span>: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;1&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;one&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;2&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;two&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;3&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;three&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = containerSchema.<span class="title function_">parse</span>(src);</span><br><span class="line"><span class="title function_">expect</span>(container.<span class="property">items</span>.<span class="title function_">get</span>(<span class="string">&quot;1&quot;</span>)).<span class="title function_">toBe</span>(<span class="string">&quot;one&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="ジェネリックにしてみる"><a href="#ジェネリックにしてみる" class="headerlink" title="ジェネリックにしてみる"></a>ジェネリックにしてみる</h1><p>似たような変換処理がたくさんある場合、1つの変換関数でやりたいですよね？</p><p><code>id</code>属性を持たないオブジェクト型を定義して、それを渡すと、<code>preprocess()</code>が受け取れる変換関数と、第2引数の型定義の両方を作って返す、<code>arrayToMap()</code>関数にしました。先ほどの例は、id以外にnameしか属性がないオブジェクトだったのですが、複数の属性があるケースもあると思うので、結果の型は<code>Map&lt;string, string&gt;</code>ではなく、<code>Map&lt;string, &#123; name: string &#125;&gt;</code>と先ほどとは違う型になるようにしています。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> originalType = z.<span class="title function_">object</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: z.<span class="title function_">string</span>(),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> arrayToMap&lt;T <span class="keyword">extends</span> z.<span class="property">ZodRawShape</span>, S <span class="keyword">extends</span> z.<span class="property">UnknownKeysParam</span>&gt;(<span class="attr">valueType</span>: z.<span class="property">ZodObject</span>&lt;T, S&gt;) &#123;</span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">Value</span> = z.<span class="property">infer</span>&lt;<span class="keyword">typeof</span> valueType&gt;;</span><br><span class="line">  <span class="keyword">const</span> arrayType = z.<span class="title function_">array</span>(z.<span class="title function_">object</span>(&#123; <span class="attr">id</span>: z.<span class="title function_">string</span>() &#125;).<span class="title function_">merge</span>(valueType));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 変換関数</span></span><br><span class="line">    <span class="keyword">function</span> (<span class="params">items: <span class="built_in">unknown</span>, ctx: z.RefinementCtx</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(items);</span><br><span class="line">      <span class="keyword">const</span> result = arrayType.<span class="title function_">safeParse</span>(items);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">      <span class="keyword">if</span> (result.<span class="property">success</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">Value</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> result.<span class="property">data</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; id, ...data &#125; = item;</span><br><span class="line">          map.<span class="title function_">set</span>(id, &#123; ...data &#125; <span class="keyword">as</span> <span class="title class_">Value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.<span class="title function_">addIssue</span>(result.<span class="property">error</span>.<span class="property">errors</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// このpreprocessの返り値の型</span></span><br><span class="line">    z.<span class="title function_">map</span>(z.<span class="title function_">string</span>(), valueType),</span><br><span class="line">  ] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 型定義に入れてみる</span></span><br><span class="line"><span class="keyword">const</span> containerSchema = z.<span class="title function_">object</span>(&#123;</span><br><span class="line">  <span class="attr">items</span>: z.<span class="title function_">preprocess</span>(...<span class="title function_">arrayToMap</span>(originalType)),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 変換してみる</span></span><br><span class="line"><span class="keyword">const</span> src = &#123;</span><br><span class="line">  <span class="attr">items</span>: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;1&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;one&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;2&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;two&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;3&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;three&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = containerSchema.<span class="title function_">parse</span>(src);</span><br><span class="line"><span class="title function_">expect</span>(container.<span class="property">items</span>.<span class="title function_">get</span>(<span class="string">&quot;1&quot;</span>)).<span class="title function_">toEqual</span>(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;one&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Zodでの簡単な値単位の変換はネット上で調べると公式含めてすぐ出てきたのですが、配列のMap変換とエラーハンドリングの仕方がなかったのでやり方を調べるついでにまとめてみました。</p><p>エラーがあった場合は変換関数の第2引数のctxにエラー情報を登録するのが肝だな、と思うのですが、最初試した時は無邪気に <code>safe()</code> を使って例外を投げるコードを書いていました。これでも <code>userSchema.parse()</code> では違和感なく使えるのですが、呼び出し元で <code>userSchema.safeParse()</code> 形式で呼び出すと、本来の使われ方とは異なって例外が投げられてしまうので、このようにエラー処理を書く必要がありました。</p><p>外部とのインタフェース部分でより安全にデータを扱ったり、プログラム側のつまらない変換処理をオフロードすることで、プログラム側の責務がわかりやすくなったり、Zodを使いこなすとフロントエンドのコードは綺麗になりますね。まあZod関連のコードはその分、ごちゃごちゃになりがちで、臭いものには蓋になってしまうかもしれませんが、そういう割り切りで良いのかな、と思っています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/TypeScript/">TypeScript</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/zod/">zod</category>
      
      <category domain="https://future-architect.github.io/tags/JSON/">JSON</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%90%E3%83%AA%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/">バリデーション</category>
      
      
      <comments>https://future-architect.github.io/articles/20240514a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Real World HTTPの第3版ができあがりました</title>
      <link>https://future-architect.github.io/articles/20240513a/</link>
      <guid>https://future-architect.github.io/articles/20240513a/</guid>
      <pubDate>Sun, 12 May 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;a href=&quot;https://www.oreilly.co.jp/books/9784814400669/&quot;&gt;
&lt;img src=&quot;/images/20240513a/PXL_20240404_001054780.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<a href="https://www.oreilly.co.jp/books/9784814400669/"><img src="/images/20240513a/PXL_20240404_001054780.jpg" alt="" width="1200" height="901" loading="lazy"></a><p><a href="https://www.oreilly.co.jp/books/9784814400669/">https://www.oreilly.co.jp/books/9784814400669/</a></p><p>ひとえに読者の皆さんが買ってくれたおかげで、Real World HTTPを改訂し、このたび3版を上梓しました。ありがとうございます。2016年ごろから書き始めて、2017年に初版を出版したので、執筆段階からすると8年ほど経過しているのですが、これだけ長くこの本に関わり続けられるというのは、本書を買ってくださるみなさまのおかげです。</p><p>今回は、ひさびさに<a href="https://www.oreilly.co.jp/books/9784814400836/">無料のミニ版</a>も更新しました。本日、このブログと同時にリリースしました。よりミニ版が学習コンテンツとして使いやすくなるように、そもそもブラウザってどんな動きをするの？というイントロの章をミニ版とオリジナル版に追加しました。</p><p>また、オリジナル版だけになりますが、HTTPが単なるブラウザとの通信を超えてプラットフォーム API化していっている流れに合わせて、既存のOpenSocialの話を独立させて、auさんにも取材させていただいてスーパーアプリの話を入れました。本当は他にも内容を教えてくれたけど会社NGが出て、内容は反映したけどお名前を紹介できなかったスーパーアプリもあったりしました。そんな感じで出せない内容もあったのですが、書いていていろいろ刺激を受けることができて楽しかったです（会社がわからない形で文には混ぜてあります）。</p><p>あとは、読書会とかで「どこまで読んだ？」がわかりやすいように、この技術ブログを参考に章の最初にアイキャッチ画像をつけるなどしました。その中で何社か問い合わせを（編集の瀧澤さんがして）許諾を取るなどもやりました。一応、著作権がある某章の画像はSNS等にあげないようにお願いします。2章じゃない方。</p><h1 id="AI時代の本のあり方"><a href="#AI時代の本のあり方" class="headerlink" title="AI時代の本のあり方"></a>AI時代の本のあり方</h1><p>AI時代になって新しいサービスが雨後の筍の如くリリースされる日々です。最近リリースされたGoogle Gemini Proだと無料でも扱えるトークン数が多くなって、PDFを丸ごと読み込ませるというのがやりやすい時代になりました。おそらく、きっとそのうち、生成AIに要約させたんだろうな、と思われるような読書感想ブログがポツポツ出てくるのだろうな、という気がしています。</p><p>先日知り合いから聞いたのは、入力のバリデーションにassertを使った同僚がいた、みたいな話でした。assertはいろんな言語が持っている機能ですが、基本的にあり得ない状況に陥った時にシステムを止めるブレーカーのようなものです。そんでもって、開発中はいいのですが、本番環境になるとassertは取り除かれて動かなくなり、バリデーションが一切存在しないプログラムとして本番稼働することになります。</p><p>こういう実際の失敗談を集めた、実装でやってしまうかもしれないミスを先回りして「こういうことやっちゃダメだよ」みたいなのを集めた、親父の小言集としてもっと発展させていきたいな、と思って書いています。これはこのReal World HTTPに限らず、Goならわかるシステムプログラミングでも、（増刷があるなら）実用Goでも、他の翻訳書の脚注部分でもやっていきたいと思っています。</p><p>そもそも失敗系の話、あるいは時代が変わって今では不要や非推奨になった機能の話なんかは生成AIに聞いても理解が浅いなと思うことも多いですし、僕のこめた目次より小さい粒度のこだわりの話も、おそらくAIの要約では省かれてしまう部分かなと思います。もちろん、トークンの中には入っているはずなので聞けば出てくるのでしょうけど、人が読むと得られるが、生成AIで楽しようとするとスルーされて得られない情報、みたいな感じになるんじゃないかなと。そういう感じで「AIではなく人間が頑張ることで価値」が得られる演出は今後本を書く上では意識してみようかと思いました。</p><p>もちろん、AIを使わないメリットの話だけをするつもりはありません。前書きにも書きましたが、そのうちやってもいいかもと思っていたGo以外のサンプルなんかはAIにお任せすれば一発です。本書ではおそらく読者にしつこいと思われている（かもしれない）ぐらいcurlのコマンドを紹介していますが、curlコマンドって生成AIにHTTPリクエストの情報を構造化して伝えるにはすごい有用なんですよね。ここからRust版のサンプル作って、とか、自分の環境にあわせた読書法というのがやりやすくなりました。クライアントコードだけではなく、このリクエストを受けるサーバーコードを作らせるのも一瞬です。あと、本書はページ数を収めるために（これでも）、機能の概要しか紹介できていない項目もたくさんあります。そういうのは「もっと詳しく教えて」「もっと詳しい解説が書かれているページを教えて」みたいに問い合わせると、より深く理解できると思います。</p><p>そのようなAI時代の読書体験がしやすい書籍になっているのでは、と思いますので、ウェブとかHTTPとか興味はないが、新しい体験をぜひしてみたいという人も一人10冊ぐらい買っていただけるとよいのではないかと思います。</p><h1 id="今後の発展"><a href="#今後の発展" class="headerlink" title="今後の発展"></a>今後の発展</h1><p>内容としては大きなところはだいぶ落ち着いたかな、と思います。というのも、初版の時にはまだHTTP&#x2F;2が策定されたばかりで、HTTP&#x2F;3はRFCにはなっていなかったものの、その前身のgQUICは存在していましたし、その要素技術のTLS 1.3も策定中でした。2版では策定されたばかりのTLS 1.3を取り上げ、今回はRFC化したHTTP&#x2F;3を取り上げることができたので、そう言う意味では初版で見えていた未来に辿り着いた、と言う感じはあります。</p><p>ウェブの新しい技術として出てくるものは、流行るか流行らないのかがわからないものが数多くあります。SPDYみたいな約束された未来みたいなものは当初から扱っていましたが、本書では基本的に「すでに普及したもの」に限定しています。過去の版では流行ると思って紹介したけど、今回削った内容もぽつぽつあったりします。</p><p>技術的にはWebTransportみたいな、本書ではまだ概要しか触れていないものとか、まだまだ書きたい内容はこれからも出てくるはずですが、もともと本書を書く動機となったのは、ウェブサービスのプログラミングをしていて、そのなかで疑問に思って調べた細かくちらばっていた情報をまとめたい、というところからでした。僕自身は初版を書き終えた時点でウェブサービスを作る上で（HTTPの知識不足で）困ることはだいぶ減りましたが、仕事の中でいろいろな人の相談に乗っていて「あ、こういうところでつまづいていたのか」といった内容がどんどんネタ帳に溜まってきて、改訂のタイミングで盛り込む、という感じで版を重ねています。実施、今回増えた内容も、決して新しいから増えたというものだけではありません。</p><p>自分自身も別にHTTPの専門家ではないとはずっと思っていますし、ブラウザ実装者の人とかが書いてくれたらいいなー、でも出ないから仕方なく自分で書くか、みたいな気持ちはずっとあったのですが、先日編集の瀧澤さんから「一連のやり取りをみていて、改めてリアルワールドのHTTPに関する本を渋川さんが書かれてる意味がわかる気がする」と言うコメントを（まったく違う文脈の中で）いただきました。</p><p>一次資料を読め、一次資料が絶対だ、というのはIT業界ではいろいろなところで聞く言葉ではあります。この本は一次資料ではありません。ほとんどの内容はRFCを読めば書いてありますが、実際にコードを書いていて、周りの若者がハマった内容とか、そういうのを拾い上げて、これから学習していく自分よりも若い人たちが楽して多くの経験が得られる知識の高速道路本にしていきたいという気持ちは持ち続けています。</p><p>書籍を読んだら、その感想をブログにして欲しい、みたいな話はよく出版ブログでは見ますが、前述のような方向性で今後も発展させていきたいので、本書の場合は読んでしばらくしたあとに「あー、これが書いてあって役にたったわー」みたいなSNSのつぶやきもありがたいです。あるいは、若者にウェブ技術を教えていて、前述のassertとか、今回追加したredirect&#x2F;rewriteの話とか、若者がこんな誤解をしていた！みたいな話も大好物です。Real World HTTPという書名付きでつぶやいてもらえたら拾いに行きます。</p><h1 id="No-1"><a href="#No-1" class="headerlink" title="No.1"></a>No.1</h1><p>オライリーには数多くの本がありますが、日本語書き下ろしで3版まで進んでいるのは現在のところ、<a href="https://www.oreilly.co.jp/books/9784873119830/">Sphinxをはじめよう 第3版</a>と、本書のみになります。もちろん、英語原著で改版の回数が多い本とか、増刷の回数とか、もろもろだともっと上の本もありますし、続巻スタイルだとゼロから作るDeep Learningシリーズパイセンが圧倒的ですが、まあとりあえず（日本語書き下ろしでの改版数がオライリーで）トップタイで日本一、単著だと堂々の日本一ということになります(分野を小さくして一位を作り出すという姑息な手法はビジネス書的なテクでありますが)。どちらの本も編集者は瀧澤さんです。書籍だけでなく、仕事もそうですが、一緒に関われてよかったと思ってもらえるような実績を周りの人には残せたらな、と思っていたので、これも今回良かったな、と個人的に思っている点です。読者の皆さんには関係のない話ではありますが。</p><h1 id="One-More-Thing…"><a href="#One-More-Thing…" class="headerlink" title="One More Thing…"></a>One More Thing…</h1><p>もう一冊、並行して書いていた<a href="https://www.amazon.co.jp/dp/4297142201/">PlaywrightのWebフロントエンドのE2Eテスト本</a>も予約を開始しています。知り合いのテスト系の有名な方々にもレビューしてもらったり、こちらも良い経験ができました。こちらの詳細はまた別途他のメンバーが書いてくれると思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/Web/">Web</category>
      
      <category domain="https://future-architect.github.io/tags/HTTP/">HTTP</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%87%BA%E7%89%88/">出版</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/O-Reilly/">O&#39;Reilly</category>
      
      <category domain="https://future-architect.github.io/tags/RealWorldHTTP/">RealWorldHTTP</category>
      
      
      <comments>https://future-architect.github.io/articles/20240513a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>アジャイル開発体験記</title>
      <link>https://future-architect.github.io/articles/20240510a/</link>
      <guid>https://future-architect.github.io/articles/20240510a/</guid>
      <pubDate>Thu, 09 May 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>はじめまして。石元湧也と申します。</p><p>私自身20代も終盤に差し掛かり、これまで様々な逆境や困難に直面してきました。この間も友人とレストランへ行った際に店員さんを呼び掛けても無視され続けてしまい恥ずかしい思いをしてしまいました。こういった困難が立ちはだかった際に、ダーウィンが『進化論』で「最も強い者が生き残るのではなく、唯一生き残るのは、変化する者である。」とおっしゃっている通り、大事なのは臨機応変に対応できる力だと学んできましたので、なんとか喉が痛いフリをして乗り切ることが出来ました。</p><p>ソフトウェア開発でも同様に大事なのは、臨機応変に対応する力かと思うので、不具合や修正に柔軟に対応できるアジャイルでの開発について、私の体験談をお話します。</p><h2 id="アジャイル開発とは？"><a href="#アジャイル開発とは？" class="headerlink" title="アジャイル開発とは？"></a>アジャイル開発とは？</h2><h3 id="ソフトウェア開発における柔軟性と迅速さを重視した手法のこと"><a href="#ソフトウェア開発における柔軟性と迅速さを重視した手法のこと" class="headerlink" title="ソフトウェア開発における柔軟性と迅速さを重視した手法のこと"></a>ソフトウェア開発における柔軟性と迅速さを重視した手法のこと</h3><p>アジャイル開発は、何か単一の開発手法を指すわけではなく、似たような開発手法に共通した価値観と行動原則のことを指しています。それを体現するさまざまな手法があるというわけです。</p><p>主な手法にスクラム、エクストリーム・プログラミング（XP）、カンバンなどあります。自分が経験したアジャイル開発はスクラムでした。</p><h3 id="ウォータフォール開発との違い"><a href="#ウォータフォール開発との違い" class="headerlink" title="ウォータフォール開発との違い"></a>ウォータフォール開発との違い</h3><p>ウォーターフォール開発のプロジェクト推進では、最初にすべての要求を集めます。その後に、それらの要求の工数がどれくらいかかるか、どれくらいのコストが発生するのかを見積り、各フェーズごとにしっかりと工程判定しながら進めて行きます。</p><p>一方、アジャイル開発のプロジェクト推進では、最初に期間と工数を決めます。その後に、大事な要求から順番に対応していくので、重要なものほど先に作成することができ、成果が目に見えやすいです。</p><p>また、ウォーターフォール開発では、開発途中で仕様の変更が発生すると、1つ手前の工程から見直しする必要があり諸々と工数がかかりますが、アジャイル開発だと「了解です！」の一言で対応可能です（※あくまでウォーターフォールかつ契約でスコープをキッチリ目でしている状況との比較をイメージしています）。柔軟ですね。</p><h2 id="スクラムとは？"><a href="#スクラムとは？" class="headerlink" title="スクラムとは？"></a>スクラムとは？</h2><p>スクラムとは前述の通りアジャイル開発手法の一つです。</p><p>スクラムのルールは<strong>スクラムガイド</strong>で定義されています。</p><p><a href="https://scrumguides.org/">https://scrumguides.org/</a></p><p>1980年から提唱された方法で今でも定期的に更新されています。</p><p>私の新卒の際に、PDCAサイクルを回して仕事の質を向上させていきなさいと学んだように、スクラムのルールもPDCAサイクルを回して常に改善されていっているのかもしれませんね。</p><h2 id="アジャイル開発用語"><a href="#アジャイル開発用語" class="headerlink" title="アジャイル開発用語"></a>アジャイル開発用語</h2><p>私の経験をお話するにあたり、アジャイル開発独自の用語が色々と出てきますので、</p><p>主要な用語について記載しておきます。</p><dl>　<dt>インセプションデッキ</dt>  <dd>メンバーが各々の意見を持ち寄って共通認識をつくり出すための対話の場</dd>  <dt>プロダクトバックログ</dt>  <dd>開発対象のソフトウェアに対する要求のバックログのこと</dd>  <dt>スプリント</dt>  <dd>1週間から4週間サイクルの反復</dd>  <dd>このスプリントをぐるぐる回していくのがスクラム</dd>  <dt>スプリントバックログ</dt>  <dd>スプリント目標の達成に必要なタスクのリストのこと</dd>  <dt>ストーリーポイント</dt>  <dd>タスクを完了させるために必要な工数の見積もりを示す測定単位のこと</dd>  <dt>ベロシティ</dt>  <dd>スプリントで完了したストーリーポイントの総計のこと</dd>  <dt>デイリースクラム</dt>  <dd>日毎の進捗確認ミーティング</dd>  <dt>スプリントレビュー</dt>  <dd>ステークホルダーやプロジェクトオーナーを見せたりしフィードバックを貰う会議</dd>  <dt>スプリントレトロスペクティブ</dt>  <dd>スプリントの最後にその時のスプリントの動きについて反省会（KPT）を行う会議</dd>  <dt>プランニングポーカー</dt>  <dd>チームで相対見積りを行う際に実施する見積手法</dd></dl><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>本格的にスクラム開発をしていくためにみんなで事前準備していきます。</p><p>プロ野球選手のイチローも「準備と言うのは言い訳の材料となり得るものを排除していくこと。 そのために考え得るすべてのことをこなしていく。」とおっしゃっているので、イチローを見習い、しっかりと準備を進めて行きます。</p><h3 id="1-メンバーの役割分担"><a href="#1-メンバーの役割分担" class="headerlink" title="1.メンバーの役割分担"></a>1.メンバーの役割分担</h3><p>私たちの場合、スクラムメンバー数は6人でした。</p><p>ちなみにアジャイル開発メンバーは通常5人から9人までが適当とされていますので、活動人数は効果が出やすい人数ですね。</p><p>それぞれのスクラムメンバーの役割の認識合わせを行い、役割は以下になりました。</p><dl>  <dt>PO（プロダクトオーナー）：1名</dt>  <dd>役割：ステークホルダーの要望を受け取り、要件の確認を行う人</dd>  <dt>SM（スクラムマスター）：1名</dt>  <dd>役割：チームの管理を行う  一緒に開発はしない、各MGのファシリを行う人</dd>  <dt>DEV（開発メンバー）：4名　⇒自分はココ</dt>  <dd>役割：実際に手を動かして開発する人</dd></dl><h3 id="2-インセプションデッキで認識合わせ"><a href="#2-インセプションデッキで認識合わせ" class="headerlink" title="2.インセプションデッキで認識合わせ"></a>2.インセプションデッキで認識合わせ</h3><p>メンバーそれぞれの役割が決まったら、アジャイル開発を実施する目的や意義について、インセプションデッキという手法でメンバー全員の認識合わせていきます。</p><p>最初の段階でメンバー内での全体感に認識のズレがあると、その後どんどんそのズレは広がってしまいます。</p><p>はじめに時間を使って共通認識を合わせることで進むべき道のりを合わせていくのです。</p><p><a href="https://dev.classmethod.jp/articles/inception-deck/">https://dev.classmethod.jp/articles/inception-deck/</a></p><h3 id="3-アジャイル開発で利用するツールの決定"><a href="#3-アジャイル開発で利用するツールの決定" class="headerlink" title="3.アジャイル開発で利用するツールの決定"></a>3.アジャイル開発で利用するツールの決定</h3><p>メンバーの認識が合ったら、利用するツールを決めていきます。</p><p>スクラム開発では、Excelやメモ帳で管理だと不便なので管理しやすいツールを選定します。スクラム開発の便利ツールは、色々と世の中に出回っているのでそれを利用していきます。便利な世の中になりました。</p><p>私たちが利用したツールは主に2つです。</p><h4 id="①進捗管理ツール"><a href="#①進捗管理ツール" class="headerlink" title="①進捗管理ツール"></a>①進捗管理ツール</h4><p>利用したツール：JIRA</p><p>主にプロダクトバックログの管理に利用しておりました。</p><p>カンバンボードがあるので、タスクの一覧が把握しやすかったです。</p><p>直感的に利用できるので、使いやすさもありました。</p><p><a href="https://www.atlassian.com/ja/software/jira">https://www.atlassian.com/ja/software/jira</a></p><h4 id="②ドキュメント管理ツール"><a href="#②ドキュメント管理ツール" class="headerlink" title="②ドキュメント管理ツール"></a>②ドキュメント管理ツール</h4><p>利用したツール：Confluence</p><p>デイリースクラムなどの各スクラムイベントで利用しました。</p><p>チーム内で決めたルールを記載し、ここで管理しました。</p><p><a href="https://www.atlassian.com/ja/software/confluence">https://www.atlassian.com/ja/software/confluence</a></p><p>私たちがやった事前準備は以上となります！</p><p>では、待ちに待ったスクラム開発を進めて行きます。</p><h2 id="スプリントのルーティーン"><a href="#スプリントのルーティーン" class="headerlink" title="スプリントのルーティーン"></a>スプリントのルーティーン</h2><img src="/images/20240510a/image.png" alt="image.png" width="1200" height="645" loading="lazy"><p>私たちは、2週間で1スプリントとし約4カ月間やり続けました。</p><p>上の図の1回転で1スプリントです。</p><p>ここからは、とあるスプリントの2週間の動きをお話します。</p><h3 id="【1週目】月曜日"><a href="#【1週目】月曜日" class="headerlink" title="【1週目】月曜日"></a>【1週目】月曜日</h3><p>午前：スプリントプランニング(2H)実施</p><p>スプリントプランニングでは、各メンバーの進捗状況や本スプリントで実施する開発内容を決めます。メンバーそれぞれの本スプリントで作業に割り当てられる工数をみんなで共有します。そして、チームとして実施したいプロダクトバックログからPOが決めた優先度を基に、スプリントバックログを作成し、どのタスクを誰が実施するかみんなで決めます。</p><p>どのタスクを実施するのか決まったら、午後からタスクをこなしていきます。</p><p>1回目のスプリントでは2週間もあるから余裕をもってタスクをこなしておりましたが、何度かスプリントを回していくにつれて、この段階でどんどん進めて行かないと間に合わないことを学びました。</p><p>よく夏休みの宿題と確定申告は、早めに取り掛かるのがよいと言いますが、スクラム開発も同じです。最初から全力疾走していきます。</p><h3 id="【1週目】火曜日-～-金曜日"><a href="#【1週目】火曜日-～-金曜日" class="headerlink" title="【1週目】火曜日 ～ 金曜日"></a>【1週目】火曜日 ～ 金曜日</h3><p>午前：デイリースクラム（日次）で実施</p><p>デイリースクラムでは各メンバーのタスクの進捗状況や困っていることがあれば共有していきます。</p><p>デイリースクラム以外は、自分に割り振られたタスクを実施していきます。タスクは、他の開発メンバー2名のレビューを経て完了としていました。他の開発メンバーからのレビュー依頼が来た時には、最優先に対応することで、タスクの停滞が発生しないように心掛けてました。この火曜日～金曜日の進捗が芳しくないと次週出せるものが無くなるので、引き続き全力疾走してタスクを進めて行きます。</p><p>不明点が出てきた時には、すぐに解消できるよう常にチームメンバーと共にGoogle Meetに待機してました。そうすることで、すぐに声掛けすることができコミュニケーションがとりやすかったです。</p><h3 id="【2週目】月曜日"><a href="#【2週目】月曜日" class="headerlink" title="【2週目】月曜日"></a>【2週目】月曜日</h3><p>午前：バックログリファインメント（2h）</p><p>次のスプリントで実施する内容をチームメンバーで話し合いです。</p><p>それぞれのタスクの工数はみんなで見積ります。</p><p>見積方法としては<strong>プランニングポーカー</strong>という手法で実施します。</p><p><a href="https://www.mof-mof.co.jp/blog/column/agile-estimation-planning-poker">https://www.mof-mof.co.jp/blog/column/agile-estimation-planning-poker</a></p><p>ストーリーポイントの基準として、1画面＋1APIの開発タスクを5ポイントと決めてました。</p><h3 id="【2週目】火曜日-～-水曜日"><a href="#【2週目】火曜日-～-水曜日" class="headerlink" title="【2週目】火曜日 ～ 水曜日"></a>【2週目】火曜日 ～ 水曜日</h3><p>午前：デイリースクラム（日次）で実施</p><p>そろそろスプリントも大詰めです。この時期になると、スプリントプランニングで決めたタスクがすべて完了するのか見えてくるので、期限内に完了するか、どこまでスプリントレビューで見せるかデイリースクラムで話し合います。</p><h3 id="【2週目】木曜日"><a href="#【2週目】木曜日" class="headerlink" title="【2週目】木曜日"></a>【2週目】木曜日</h3><p>午前：デイリースクラム（日次）で実施</p><p>SM(スクラムマスター)がスプリントレビューで話す開発概要の資料を1~2P用意し、デイリースクラムの中で確認します。</p><p>その上で、今日中にどこまでタスクが達成するか話し合い、なんとかしてレビューまでに間に合わせます。「百里を行く者は九十を半ばとす」という昔習った言葉を思い出して、馬車馬のようにタスクを進めます。</p><h3 id="【2週目】金曜日"><a href="#【2週目】金曜日" class="headerlink" title="【2週目】金曜日"></a>【2週目】金曜日</h3><p>午前：スプリントレビューを実施</p><p>ステークホルダーを集め、スプリント中に実施したことを共有します。</p><p>成果物の概要をSM(スクラムマスター)が説明し、詳細は開発メンバーが話します。実際に開発したものをステークホルダーにも共有し、実際に操作してもらったりもします。データ送付の仕組みはどうなっているのかとか、やっぱり画面デザインを変えてほしいなど様々な意見が出てきますので、さらに改修が必要な場合は、プロダクトバックログに積み上げていくことになります。</p><p>午後：レトロスペクティグ（2h）を実施</p><p>KPT形式でチームメンバー全員参加の反省会です。この場で出てきた反省は、次のスプリントで適宜改善していきます。<br>また今回のスプリントのベロシティも計測しておきます。毎回15ポイントくらいでした。</p><p>このベロシティを以て、『【1週目】月曜日』に戻ります。</p><h1 id="スクラム開発の反省点"><a href="#スクラム開発の反省点" class="headerlink" title="スクラム開発の反省点"></a>スクラム開発の反省点</h1><p>スクラム開発では、常にアウトプットが出てるので成果を見せやすい反面、常に結果を求められているので、開発・テストが思うように進まないと焦燥感に襲われます。</p><p>２週間ごとに納期が迫ってくるイメージです。</p><p>毎日、太陽ってこんなに早く沈むんだと、時の流れの早さに感心しました。小説『走れメロス』でメロスは、「少しずつ沈んでいく太陽の、十倍も早く走った」とのことですが、残念ながら自分は、友を人質に取られていなかったので、そこまで早く動けませんでした。</p><p>今思うと、ベロシティを下げることへの忌避が強すぎたのかもしれません。オーバーワークでベロシティを下げないようにするのではなく、なぜベロシティが下がっているのかをチーム全員で深堀りして話し合い、改善して行けたらよかったなと思いました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>アジャイル開発を通して、学んだ柔軟性や迅速さは、ソフトウェア開発のみにとどまらず、プロジェクト管理や業務改善などの仕事においても活かすことが出来るかと思います。</p><p>これを読んだすべての方へ今後の携わる仕事での何かの参考になれば幸いです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Management/">Management</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/">アジャイル</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%A0/">スクラム</category>
      
      
      <comments>https://future-architect.github.io/articles/20240510a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>登録プロダクトオーナーを取得しました</title>
      <link>https://future-architect.github.io/articles/20240509a/</link>
      <guid>https://future-architect.github.io/articles/20240509a/</guid>
      <pubDate>Wed, 08 May 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240509a/image.png&quot; alt=&quot;&quot; width=&quot;946&quot; height=&quot;729&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240509a/image.png" alt="" width="946" height="729" loading="lazy"><p>2年前にスクラムマスターを取得しましたが、今後スクラムでプロジェクト運営をしていきたい、DXチームを社内で組織化して手綱を握っていきたいのでプロダクトオーナーを自分たちでやっていきたいというお客さんが増えてくるだろうな、ということでそういうお客さんの支援をしっかりしていけるように知識をアップデートしようということで参加してきました。前回、Scrum Inc.版のスクラムマスターをとったので、同じScrum Inc.版の<a href="https://scruminc.jp/training/owner/">プロダクトオーナー</a>研修を受けました。</p><ul><li><a href="/articles/20220218a/">認定スクラムマスターの資格を取得しました</a></li></ul><h1 id="スクラムマスター研修との違い"><a href="#スクラムマスター研修との違い" class="headerlink" title="スクラムマスター研修との違い"></a>スクラムマスター研修との違い</h1><p>前回受けたスクラムマスターの講習の構成とだいたい同じで、4H程度のスプリントが4回で、2日間の研修があり、最後にオンラインの試験を受けて認定を取得という感じです。内容も、無料で公開されている<a href="https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf">スクラムガイド</a>で説明されているプロセスをベースにプロダクトオーナーに特化したトピックを厚く説明したり、スクラムガイドでは行間として詳しく説明されていない話をばっちり補完する内容になっています。</p><p>スクラムをゼロからこれからやっていくぞ、という人には、こちらよりもスクラムマスター研修の方が良いです。こちらではスクラムイベントを運営してプロジェクトをスクラム化する部分の話はさらっとされるだけです。スクラムはすでにわかっている、実践しているが、それをさらにパワーアップさせたい、みたいな感じの受講者が多かったです。</p><p>どちらかというと、ベンチャーのビジネス立ち上げ的な要件定義をプロジェクトを回しながらやっていくぞ、みたいなプロジェクトのディレクションの話が中心です。昔、大学で受けたビジネス創造の授業を思い出すような感じですが、アイディアを出すぞ、ではなく、それを実現していくための機能の洗い出しと、その優先度付け、リリース計画作成みたいな感じですね。</p><h1 id="プロダクトオーナーについて誤解していた"><a href="#プロダクトオーナーについて誤解していた" class="headerlink" title="プロダクトオーナーについて誤解していた"></a>プロダクトオーナーについて誤解していた</h1><p>プロダクトオーナーは、XPにおける「顧客」の立場よりかな、という感じで考えていました。しかし、講義を聞いて、追加で質問したりもした感じではプロダクトオーナーはかなり開発チーム寄りの立ち位置でした。</p><p>思った以上の時間を開発チームと時間を過ごし、質問に答えるというのがタスクとしてあります。</p><p>誤解とセクションタイトルに書いたのですが、実際に、日本で最初にスクラムを紹介した本「<a href="https://amzn.to/3W6uG6o">アジャイルソフトウェア開発スクラム</a>」（僕もこれの翻訳には関わった）では、プロダクトオーナーは開発チームとはちょっと距離があったのですね。スプリントレビューで、初めて顧客や他のステークホルダーと一緒にプロダクトをレビューする、スクラムマスターがプロダクトインクリメントのプレゼンをする、と書いてありました。スクラムガイドでは、このあたりは詳しくは書かれていませんが、セミナーで聞いた場合は完全に開発プロジェクト側に座って参加する、という感じでした。</p><p>おそらく、他階層化する大規模スクラムを回していく上で、上位のプロダクトオーナーチームとのやり取りをする上で、プロダクトオーナーがチーム側にいないと、自己組織化（2020年版スクラムガイドでは無くなった言葉ですが）ができず、チーム間のタスクの割り振りがうまくいかないことでこうなったのではないか、という気がします。</p><p>これ以外にもいろいろ興味深い話がたくさんあり、単に本を読んだり、公開されている資料からだけでは学べないことを、ワークを通じて学ぶことができ、充実した2日間でした。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>公共案件に関して、プロジェクトの進め方についての相談をチャットで受けたりしていて、アジャイルの進め方をきちんとお客さんにインプットするためにはプロダクトオーナー周りもうちょっと深く学んでおきたいと思ったので参加しました。参加して正解でした。</p><p>新しい知識にアップデートしたり、スクラムガイドの隙間の知識など、幅広く学べました。久々にじっくりフルタイムで学習しましたが、スクラムマスター同様楽しめました。講師の皆様、一緒に受けた皆さん、どうもありがとうございました。前回以上にすでに実践して苦労しているという人が多く、Q&amp;Aの枠でされる質問とかも含めて興味深い内容が多かったです。</p><p>今後は予算をとって、Scrum@Scaleも受けていきたいですね。</p><p>余談ですが、この記事のためにアジャイルソフトウェア開発スクラムをざっと再読してみましたが、1章で紹介されている、名前がなかった状態から試行錯誤の中で今のスクラムのような形になっていく歴史の話、今読んでも面白いですね。僕自身が書いているReal World HTTPもそうですが、現在知られているものが作られていく過程の話が好きです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Management/">Management</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/">アジャイル</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%A0/">スクラム</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%B3%87%E6%A0%BC/">資格</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%83%80%E3%82%AF%E3%83%88%E3%82%AA%E3%83%BC%E3%83%8A%E3%83%BC/">プロダクトオーナー</category>
      
      
      <comments>https://future-architect.github.io/articles/20240509a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>予測モデルを扱うプロジェクトの進め方</title>
      <link>https://future-architect.github.io/articles/20240508a/</link>
      <guid>https://future-architect.github.io/articles/20240508a/</guid>
      <pubDate>Tue, 07 May 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGの村上です。</p><p>私のプロジェクトではライフライン系の案件を扱っています。燃料（灯油や軽油など）を配送するために、なくなりそうなタイミングを知りたいという需要があるため、エネルギー使用量の予測モデルを開発し、運用しています。</p><p>本記事では、予測モデルの開発から運用まで手掛けるにあたって、重要なことやノウハウをご共有しようと思います。</p><p>※ 本記事では、「電気」、「灯油」、「ガス」、「水」などのライフラインに関わるものを、「エネルギー」とひとくくりに呼称します。</p><h2 id="大まかな流れ"><a href="#大まかな流れ" class="headerlink" title="大まかな流れ"></a>大まかな流れ</h2><p>リリースまでの大まかな流れは以下のようになります。</p><ol><li>アルゴリズムの考案</li><li>アルゴリズムの評価と関係者との合意</li><li>プロダクト版の開発、テスト、リリース</li><li>リリース後の性能評価</li></ol><p>今回は私の実際の経験をもとに各フェーズについて説明します。</p><h1 id="1-アルゴリズムの考案"><a href="#1-アルゴリズムの考案" class="headerlink" title="1. アルゴリズムの考案"></a>1. アルゴリズムの考案</h1><p>予測モデルを考える過程でとくに重要なのは、「予測精度」、「説明性」、「運用コスト」になります。これらがそれぞれ、どの程度求められるのかをよく考えながらアルゴリズムを練っていきます。</p><h2 id="モデルの種類"><a href="#モデルの種類" class="headerlink" title="モデルの種類"></a>モデルの種類</h2><p>一般的に予測モデルを構築する場合、以下のようなモデルの種類を考えます。</p><ul><li>a. 線形予測モデル</li><li>b. 非線形予測モデル</li><li>c. ルールベースモデル</li></ul><p>各モデルの特徴をしっかりと把握し、運用まで行えるかを吟味した上で、アルゴリズムの詳細を考えていく必要があります。</p><h3 id="a-線形予測モデル"><a href="#a-線形予測モデル" class="headerlink" title="a. 線形予測モデル"></a>a. 線形予測モデル</h3><p>線形予測モデルは、単純かつ説明性も高い方法です。線形回帰で十分な予測精度が出る場合もあります。運用コストも問題になることはあまりないと思われます。社会実装の例も数多く存在するため、選択肢としてかなり上位に来ます。</p><p>一方で、シンプル過ぎる（というか古典的すぎる）がゆえに、現代の機械学習などのイメージとはギャップが大きく、関係者（特にプロダクトオーナーやエグゼクティブ層）にはウケが悪いことがしばしばあります。「こんなのモデルじゃない！」とか「ディープラーニングはどこ？」みたな反応が返ってきたりします。このような場面もあるため、そのモデルの優位性などを慎重に、丁寧に説明することも、プロジェクトを円滑に進める上で重要になります。</p><h3 id="b-非線形予測モデル"><a href="#b-非線形予測モデル" class="headerlink" title="b. 非線形予測モデル"></a>b. 非線形予測モデル</h3><p>非線形予測モデルは、決定木やニューラルネットワークなどの機械学習を用いた方法がメジャーだと思います。これらは人間には捉えられないような未知の特徴を、機械が自動的に抽出し、卓越した予測精度を発揮する可能性があります。</p><p>一方で、説明性が低く、なぜそのような結果が出力されたのかを解明したくても、諦めざるをおえない状態になることが多々あります（決定木はこの点、かなりましではあります）。また、学習や推論を行うときに膨大な計算機リソースが必要になり、運用時のコストも膨大になる可能性があります。</p><p>ちなみに世間一般でいうところの最新のAIとは、全てディープラーニングのことを指します。経営者なども頭の中では「AI &#x3D; ディープラーニング」となっている印象があります。視野が狭くなりがちな部分なので、プロジェクトを進める上で注意が必要です。</p><h3 id="c-ルールベースモデル"><a href="#c-ルールベースモデル" class="headerlink" title="c. ルールベースモデル"></a>c. ルールベースモデル</h3><p>ルールベースモデルは、人間が頑張ってルールを決めてそれに基づいて出力を行うため、関係者間でのアルゴリズムの納得度は最も高いものになると思います。また、説明性の観点でも優れており、少なくともアルゴリズムの開発者であれば、必ずなぜそのような出力になったのかを解明することができます。</p><p>一方で、高次元データを扱うことは現実的に難しくなります。また、数学的な根拠に乏しくなりがちというデメリットがあり、いわゆる職人技のような側面が出てしまいます。このため、予測精度は良くも悪くも開発者次第になります。運用コストは上記3モデルの中では最も小さくなると思われます。</p><p>また、ここまでで紹介した3種類のモデルの中で、最も近年のAIのイメージとの乖離が大きいモデルになります。平たく言うと、<strong>ロマン</strong>に欠けます。AIに夢見がちな状態の人にルールベースモデルを提案すると、そのギャップからがっかりされることもしばしばあります。プロジェクトを円滑に進めるためにも、事前に十分な説明が必要です。</p><h2 id="データセットの性質"><a href="#データセットの性質" class="headerlink" title="データセットの性質"></a>データセットの性質</h2><p>ここまで各モデルの特徴についてみてきましたが、肝心の予測精度の観点では、予測の元となるデータセットの性質を理解することがとても重要になります。</p><p>この世界のデータは以下の2種類に分けられます。</p><ul><li>a. 非時系列データ</li><li>b. 時系列データ</li></ul><p>これら2種類の違いを理解し、適切なアルゴリズムを考える必要があります。</p><p>また、実世界のデータ処理について、当ブログに記事がありますので、こちらも合わせてご覧ください。</p><p><a href="https://future-architect.github.io/articles/20210423b/">https://future-architect.github.io/articles/20210423b/</a></p><h3 id="a-非時系列データ"><a href="#a-非時系列データ" class="headerlink" title="a. 非時系列データ"></a>a. 非時系列データ</h3><p>データに時間的な相関関係がないものです。例えば犬猫の写真を分類する問題を考える場合、いつ撮影した写真なのかは関係ありません。非時系列データの問題を解くことは比較的簡単になりつつあり、特に近年の機械学習技術を用いることで卓越したパフォーマンスを得られる可能性があります。</p><h3 id="b-時系列データ"><a href="#b-時系列データ" class="headerlink" title="b. 時系列データ"></a>b. 時系列データ</h3><p>データに時間的な相関関係があるものです。今回の予測モデルはこちらに該当します。というのも、エネルギー使用量は過去の実績が非常に参考になるためです。例えば、「今日、電気を7[kWh]使ったから明日も7[kWh]くらい使うだろう。明日は少し気温が下がるみたいだから、エアコンを使いそうなので8[kWh]くらいを予測値としておくか。」といったことが考えられます。</p><p>一方で、一般的に時系列データは機械学習をもってしても予測が難しいことで知られています。それは以下の3点によるものが大きいと考えています。</p><ul><li>時系列的な相関に着目して特徴量を抽出できるアルゴリズムが発展途上である</li><li>データを集めることが難しい</li><li>データの分布が時間とともに変化する</li></ul><h4 id="時系列的な特徴を抽出するアルゴリズム"><a href="#時系列的な特徴を抽出するアルゴリズム" class="headerlink" title="時系列的な特徴を抽出するアルゴリズム"></a>時系列的な特徴を抽出するアルゴリズム</h4><p>時系列データ向けのアルゴリズムは古くから研究されてきた背景があります。従来はARIMAモデルなどが活躍し、近年は2017年に誕生した<a href="https://arxiv.org/abs/1706.03762">Transformer</a>が最先端技術として用いられています。Transformerは主に自然言語処理の分野で用いられ、ChatGPTなどの代表的な製品の基礎アルゴリズムとなっています。これによって、自然言語の時系列的特徴量の抽出については大きな飛躍を遂げましたが、他の分野の時系列データに関してはもう一押し進歩が欲しいような状況です。</p><h4 id="データ収集"><a href="#データ収集" class="headerlink" title="データ収集"></a>データ収集</h4><p>時系列データはその性質上、その時にそのデータを観測する必要があります。今日発生したデータを1年前に発生したものとして扱うことは原則できません。従って、膨大なデータを集めるためには、日々コツコツとデータを蓄積させておく必要があります。</p><h4 id="データ分布が変化する"><a href="#データ分布が変化する" class="headerlink" title="データ分布が変化する"></a>データ分布が変化する</h4><p>現代のデータサイエンス、特に機械学習は、学習に使ったデータセットの分布が今後変わらないことが前提となります。例えば犬猫の分類問題を解く場合は、多様な犬猫データを大量に用意して学習すれば、1年後もそのモデルで精度の高い予測ができます。これは、犬や猫の姿およびその写真データが1年ではほとんど変化しないためです。</p><p>分析結果を関係者と議論し、合意が得られればプロダクト版の実装に着手します。</p><p>一方で、時系列データは1年後のデータは学習データとは大きく異なっている可能性があります。明日のデータ分布がかなり違うことだって十分考えられます。また、一定周期で定常性が確認できればまだ良いのですが、非定常の場合は最悪です。このように、時系列データはその性質上、非時系列データのように高精度な予測を行うことは困難になります。</p><h2 id="エネルギー使用量データの分析"><a href="#エネルギー使用量データの分析" class="headerlink" title="エネルギー使用量データの分析"></a>エネルギー使用量データの分析</h2><p>まずはエネルギー使用量データがどのように発生するのかを考えます。当然ですが、人間がエネルギーを使用すると、使用量データが0より大きい値として得られるため、未来の使用量を予測するには、人間にどのようなエネルギーのユースケースがあるのかを考える必要があります。</p><p>例： 風呂、料理、暖房、農業、畜産業 etc…</p><p>ここで重要なポイントが2つあります。</p><ul><li>その人のライフスタイルによってユースケースが異なる</li><li>一般家庭と事業所で使い方やその規模が異なる</li></ul><p>それぞれについて深く考察していきます。</p><h3 id="ライフスタイルによる違い"><a href="#ライフスタイルによる違い" class="headerlink" title="ライフスタイルによる違い"></a>ライフスタイルによる違い</h3><p>エネルギーをどれくらい使うかは、その人のライフスタイルにかなり依存します。例えばお風呂が好きな人は、何時間も風呂に入り、おいだきもするかもしれません。一方で、別の人は自宅の風呂は一切使わず、銭湯やジムでシャワーなどで済ませる人もいます。料理をするかどうかも人によって大きく分かれるところです。</p><p>さらに、これらのライフスタイルは時とともに変化したり、その日の「気分」によって変化する可能性があります。このように、その人のライフスタイルに依存する部分が大きいことに起因して、使用量データに非定常性が現れていると考えられます。</p><h3 id="一般家庭と事業所の違い"><a href="#一般家庭と事業所の違い" class="headerlink" title="一般家庭と事業所の違い"></a>一般家庭と事業所の違い</h3><p>これも広義にはライフスタイルの違いに包含できるかもしれませんが、事業所の方が膨大なエネルギーを使うということと、定休日や年末年始休業など、事業所ならではの特徴があります。</p><p>また、事業所ではエネルギーの利用用途を2つに分けて考えることができます。</p><ul><li>事業所で働く人間のために使う</li><li>製品を作るために使う</li></ul><p>このように分けると、前者は一般家庭と同じような使われ方になると考えるのが自然かと思います。一方で後者は、完全にその事業所の都合に依存します。これが大きな不確定要素であり、使用量のボラティリティとスケールが、事業所で特に大きくなる要因だと考えらえます。</p><h2 id="エネルギー使用量予測モデル"><a href="#エネルギー使用量予測モデル" class="headerlink" title="エネルギー使用量予測モデル"></a>エネルギー使用量予測モデル</h2><p>上記の内容を踏まえて、エネルギー使用量予測モデルにはルールベースモデルを採用しました。主な理由は以下になります。</p><ul><li>エネルギー使用量を予測することは難しい</li><li>予測精度も大事だが、エネルギーが底をついたり、灯油などのエネルギー源を配送しすぎることを避けられれば問題ない</li><li>業務上、予測値の計算結果に高い説明性が求められる</li><li>使える特徴量は少ない</li></ul><p>また、モデルは一般家庭と事業所で分けて構築します。それぞれに別々のアルゴリズムを適用し、予測値を計算します。さらに、人それぞれのライフスタイルに依存することから、できるだけその人自身のデータのみを利用して予測を行います。</p><h1 id="2-アルゴリズムの評価と関係者との合意"><a href="#2-アルゴリズムの評価と関係者との合意" class="headerlink" title="2. アルゴリズムの評価と関係者との合意"></a>2. アルゴリズムの評価と関係者との合意</h1><p>モデルを実装出来たらその予測精度を評価します。この時、目的を改めてはっきりと確認することが大切です。</p><p>例えば今回の場合は「エネルギーが底をついたり、灯油などのエネルギー源を配送しすぎないこと」でした。つまり、「予測値は実際の使用量より大きすぎても小さすぎてもダメ」という制約が付きます。従って、どれくらいの誤差まで許容できるのかを考えた上で、どれくらいの誤差がどのような頻度で発生するのかを確認し、あらかじめリスクを把握しておく必要があります。</p><p>例えば以下のように、誤差をヒストグラムにplotするのはとても有効な方法です。</p><img src="/images/20240508a/image.png" alt="image.png" width="1200" height="920" loading="lazy"><p>ヒストグラムから許容できない誤差がどれくらいの割合で発生しそうかを見積ります。また、外れ値のデータはどのような理由から発生したのかを分析します。</p><p>分析結果を関係者と議論し、合意が得られればプロダクト版の実装に着手します。</p><div class="note warn" style="background: #fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>評価データとして、アルゴリズムを調整する際に用いたデータ（学習データ）と同じデータを用いてはいけません。これは機械学習でよく言われる過学習を回避するためです。<br>加えて、学習データよりも未来のデータで評価を行う必要があります。これは上記で説明した、時系列データは分布が変化することに起因します。評価データを学習データよりも未来のデータにすることで、分布の変化に対する頑健性も同時に確認します。ここで未来のデータに対する予測が全くできていない場合は、アルゴリズムを根本的に見直す必要があります。</p></div><h1 id="3-プロダクト版の開発、テスト、リリース"><a href="#3-プロダクト版の開発、テスト、リリース" class="headerlink" title="3. プロダクト版の開発、テスト、リリース"></a>3. プロダクト版の開発、テスト、リリース</h1><p>モデルの予測結果に合意が得られたら、プロダクト版を開発します。</p><p>大量のデータを処理する必要があるため、例として、私の所属していたプロジェクトでは、インフラ構成を以下のようにしました。</p><img src="/images/20240508a/image_2.png" alt="image.png" width="1200" height="791" loading="lazy"><p>ECSではデータの前処理を担当し、Glueで計算対象の全配送先のエネルギー使用量予測値を計算し、RDSに書き込みます。</p><p>予測値を利用したい外部システムから、予測値を返すAPIを呼び出す仕組みです。また、モデルのハイパーパラメータは運用していく過程で変更される可能性があるため、定数を管理する用のファイルに切り出したり、DBで管理するなどの工夫をするのがおすすめです。</p><div class="note warn" style="background: #fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>Glueではデータ量によっては多くの計算時間が必要になります。特にRDSからデータを読み込む際に多くの時間を要することがあるため、注意が必要です。</p></div><p>開発が終わったらテストを行います。通常の動作確認に加えて、プロダクト版の予測精度が、事前の評価と乖離していないかを確認することも重要なポイントになります。</p><p>ここで大きな乖離があった場合は、プロダクト版と事前検証したアルゴリズムに大きな違いがあることになります。入力データが想定と違っていたり、実装ミスなどの可能性があるため、注意深く検証を進める必要があります。また、時系列データであることから、できるだけ長い期間、実際のデータで検証を行った後、リリース判断を行うのが無難です。</p><h1 id="4-リリース後の性能評価"><a href="#4-リリース後の性能評価" class="headerlink" title="4. リリース後の性能評価"></a>4. リリース後の性能評価</h1><p>リリースした後、一定期間の予測実績が得られた時点で実際の性能評価を行います。リリース前後の決定的な違いは、実際にそのモデルの出力した予測値に基づいて業務が行われることです。</p><p>例えば今回のプロジェクトですと、実際に出力された予測値に基づいてエネルギーの残量を計算し、配送を行うため、実環境との相互作用が発生します。この時、<strong>得られるエネルギー使用量データの分布が変わる可能性があります。</strong> これはどういうことか、以下のようなエネルギー使用傾向を持った人物を想定して考えてみたいと思います。</p><ul><li>主に部屋や風呂を温めるために灯油を使う</li><li>灯油が配送されてからしばらくすると、灯油が底をつくのが不安になり、節約するようになる</li><li>節約志向になってくると、風呂のおいだきをしなくなる</li></ul><img src="/images/20240508a/image_3.png" alt="image.png" width="1200" height="663" loading="lazy"><p>この人の場合、注目すべきポイントは、灯油の残量が灯油の使用量に影響を与えるということです。</p><p>この時、予測モデルが予測値を実際よりも大きめに出力する傾向がある場合、この人が灯油を節約しようと思う段階へ入る前に、灯油が配送される可能性があります。その場合、この人からは、節約を頑張った結果である少ない灯油の使用量データが得られなくなります。従って、リリース前とリリース後で得られるデータの分布が異なることになります。</p><p>リリース後の性能評価には、このような実環境との相互作用も織り込んだ結果が現れるため、最終的な評価結果として重要な意味を持ちます。最悪の場合、実環境との相互作用が、激しいデータ分布の変化を引き起こし、モデルが使い物にならなくなる可能性もあるので注意が必要です。逆に、この最終的な評価で納得のいく結果が得られた場合、今後も安定した運用が続けられる可能性が高いと考えられます。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>最後まで読んでいただき、ありがとうございました！</p><p>データサイエンスは数学的なバックグラウンドや高度な専門知識が必要な分野ではありますが、その分とても面白くてやりがいがあると思います。加えて、プロジェクトとしてデータサイエンスを取り入れる場合は、関係者への丁寧な説明など、コミュニケーション面でも重要なポイントが多々あります。</p><p>昨今もChatGPTなどの登場によってAIの社会実装が次々と進んでいるので、実際のプロジェクトの進め方として参考になれば幸いです！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/">アルゴリズム</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90/">データ分析</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%BA%88%E6%B8%AC%E3%83%A2%E3%83%87%E3%83%AB/">予測モデル</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%92%E3%82%B9%E3%83%88%E3%82%B0%E3%83%A9%E3%83%A0/">ヒストグラム</category>
      
      
      <comments>https://future-architect.github.io/articles/20240508a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RDS DBインスタンスのアカウント間複製をGitHub Actionsで自動化</title>
      <link>https://future-architect.github.io/articles/20240507a/</link>
      <guid>https://future-architect.github.io/articles/20240507a/</guid>
      <pubDate>Mon, 06 May 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。Strategic AI</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。Strategic AI Group所属の太田寛明です。</p><p>ある環境A（例えば本番環境）のAmazon RDS DBインスタンスを別アカウントB（例えば検証環境）にバックアップ&amp;リストアする作業を自動化する機会があったので、その手法について紹介します。</p><p>自動化する方法は様々<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>あると思いますが、今回はGitHub Actionsを利用しました。複数のAWS CLIコマンドを各アカウントごとに日次で定期実行します。</p><h1 id="バックアップリストアの実装"><a href="#バックアップリストアの実装" class="headerlink" title="バックアップリストアの実装"></a>バックアップリストアの実装</h1><p>RDS DBインスタンスをアカウント間でバックアップリストアする方法に関しては、AWSの公式ドキュメントに記載があります。</p><blockquote><p><a href="https://docs.aws.amazon.com/ja_jp/prescriptive-guidance/latest/patterns/migrate-an-amazon-rds-db-instance-to-another-vpc-or-account.html">Amazon RDS DB インスタンスを別の VPC またはアカウントに移行する</a><br>別の AWS アカウントに移行<br>次の図は、Amazon RDS DB インスタンスを別の AWS アカウントに移行するワークフローを示しています。<br><img src="/images/20240507a/5536e69e-3965-4ca2-8a0b-2573659b5f8f.png" alt="5536e69e-3965-4ca2-8a0b-2573659b5f8f.png" width="1200" height="520" loading="lazy"></p></blockquote><p>この手法を踏まえて、本番環境のDBを別アカウントの検証環境にコピーしたい場合は、次のプロセスを踏むことになります。</p><ol><li>環境AのDBのスナップショットを作成（上図の①②）</li><li>スナップショットを環境Bのアカウントに共有（上図の③）</li><li>共有されたスナップショットから検証環境上でDBを復元（上図の④⑤）</li></ol><p>これらのプロセスは、AWS Management Console、AWS CLI、RDS APIのいずれを用いても実現することが可能です。</p><p>今回はAWS CLIコマンド<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>を用いた実装を自動化したので、この実装に基づいて各プロセスをもう少し詳しく紹介していきます。</p><h2 id="1-本番環境のDBのスナップショットを作成"><a href="#1-本番環境のDBのスナップショットを作成" class="headerlink" title="1. 本番環境のDBのスナップショットを作成"></a>1. 本番環境のDBのスナップショットを作成</h2><p>Amazon RDSのスナップショットには自動スナップショットと手動スナップショットの2種類が存在します。</p><p>基本的に自動スナップショットをもとにDBを復元すればいいわけですが、今回は別アカウントにスナップショットを共有する必要があるため、以下に従って手動スナップショットを作成する必要があります。</p><blockquote><p><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_ShareSnapshot.html">DB スナップショットの共有</a><br>自動 DB スナップショットを共有するには、自動 DB スナップショットをコピーしてそのコピーを共有することで、手動スナップショットを作成します。</p></blockquote><p>実装例は次のようになります。</p><p>ここで、初めにスナップショットを削除しているのは、同一名称のものが既に存在する場合には新しくスナップショットを作成できないからです。</p><p>過去分のスナップショットは、基本的に自動スナップショットという形で別途保持されていると思うので、手動スナップショットの名称は毎回固定で問題ないかと思います。</p><figure class="highlight sh"><figcaption><span>backup_prod.sh（前半）</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># スナップショット削除</span></span><br><span class="line">aws rds delete-db-snapshot \</span><br><span class="line">    --db-snapshot-identifier <span class="variable">$&#123;【本番】手動スナップショット識別子&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># スナップショット削除完了確認</span></span><br><span class="line">aws rds <span class="built_in">wait</span> db-snapshot-deleted \</span><br><span class="line">    --db-snapshot-identifier <span class="variable">$&#123;【本番】手動スナップショット識別子&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># バックアップ対象DBの自動スナップショット識別子取得</span></span><br><span class="line"><span class="comment">## 以下では最新の自動スナップショットを取得しています。</span></span><br><span class="line">【本番】自動スナップショット識別子=$(</span><br><span class="line">    aws rds describe-db-snapshots \</span><br><span class="line">        --db-instance-identifier <span class="variable">$&#123;バックアップ対象のDBインスタンス識別子&#125;</span> \</span><br><span class="line">        --snapshot-type automated \</span><br><span class="line">        --query <span class="string">&#x27;reverse(sort_by(DBSnapshots, &amp;SnapshotCreateTime)[].DBSnapshotIdentifier)[0]&#x27;</span>　\</span><br><span class="line">        | <span class="built_in">tr</span> -d <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># スナップショット複製</span></span><br><span class="line"><span class="comment">## 今回は手動スナップショットをAWS KMSで暗号化しています。</span></span><br><span class="line"><span class="comment">## KMS キーのタイプは、カスタマーマネージドキーである必要があります。（後述）</span></span><br><span class="line">aws rds copy-db-snapshot \</span><br><span class="line">    --source-db-snapshot-identifier <span class="variable">$&#123;【本番】自動スナップショット識別子&#125;</span> \</span><br><span class="line">    --target-db-snapshot-identifier <span class="variable">$&#123;【本番】手動スナップショット識別子&#125;</span> \</span><br><span class="line">    --kms-key-id <span class="variable">$&#123;【本番】KMSキーの識別子&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># スナップショット複製完了確認</span></span><br><span class="line">aws rds <span class="built_in">wait</span> db-snapshot-available \</span><br><span class="line">    --db-snapshot-identifier <span class="variable">$&#123;【本番】手動スナップショット識別子&#125;</span> \</span><br><span class="line">    --snapshot-type manual</span><br></pre></td></tr></table></figure><p>参照（公式ドキュメント）</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_DeleteSnapshot.html">DB スナップショットの削除</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html">DB スナップショットのコピー</a></li></ul><h2 id="2-スナップショットを検証環境のアカウントに共有"><a href="#2-スナップショットを検証環境のアカウントに共有" class="headerlink" title="2. スナップショットを検証環境のアカウントに共有"></a>2. スナップショットを検証環境のアカウントに共有</h2><p>本番環境で作成した手動スナップショットを検証環境のアカウントでも参照できるように共有します。</p><p>実装例は次のようになります。</p><figure class="highlight sh"><figcaption><span>backup_prod.sh（後半）</span></figcaption><table><tr><td class="code"><pre><span class="line">aws rds modify-db-snapshot-attribute \</span><br><span class="line">    --db-snapshot-identifier <span class="variable">$&#123;【本番】手動スナップショット識別子&#125;</span> \</span><br><span class="line">    --attribute-name restore \</span><br><span class="line">    --values-to-add <span class="variable">$&#123;共有先（検証環境）のAWSアカウントID&#125;</span></span><br></pre></td></tr></table></figure><p>参照（公式ドキュメント）</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_ShareSnapshot.html">DB スナップショットの共有</a></li></ul><h2 id="3-共有されたスナップショットから検証環境上でDBを復元"><a href="#3-共有されたスナップショットから検証環境上でDBを復元" class="headerlink" title="3. 共有されたスナップショットから検証環境上でDBを復元"></a>3. 共有されたスナップショットから検証環境上でDBを復元</h2><p>いよいよDBの復元ですが、AWS KMSによる暗号化を行った際、一つ注意点があります。<br>以下の制限により、カスタマーマネージドキーを使用してスナップショットを暗号化する必要がありました。</p><blockquote><p><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_ShareSnapshot.html#share-encrypted-snapshot">暗号化されたスナップショットの共有</a><br>スナップショットを共有した AWS アカウント のデフォルト KMSキーを使用して暗号化されたスナップショットを共有することはできません。<br>…<br>デフォルトの KMS キーの問題を回避するには、次のタスクを実行します。</p><ol><li>カスタマーマネージドキーを作成し、そのキーへのアクセス権を付与する</li><li>ソースアカウントからスナップショットをコピーして共有する</li><li>ターゲットアカウントに共有したスナップショットをコピーします</li></ol></blockquote><p>このため、他アカウントから共有された暗号化済みの手動スナップショットを利用してDBインスタンスを復元したい場合は、指示された回避策に従って再びスナップショットのコピーを作成し、それをもとにDBインスタンスの復元を行う必要があります。</p><h3 id="共有されたスナップショットのコピー"><a href="#共有されたスナップショットのコピー" class="headerlink" title="共有されたスナップショットのコピー"></a>共有されたスナップショットのコピー</h3><p>前述した通り、まずは本番環境から共有された暗号化済みのスナップショットを検証環境上でコピーします。</p><p>実装例は次のようになります。</p><p>ここで、コマンド<code>copy-db-snapshot</code>のオプション<code>--source-db-snapshot-identifier</code>について、以下制約が存在するため、共有されたスナップショット識別子はARNとして取得しています。</p><blockquote><p><a href="https://docs.aws.amazon.com/cli/latest/reference/rds/copy-db-snapshot.html">copy-db-snapshot</a><br><code>--source-db-snapshot-identifier</code> (string)<br>…<br>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot.</p></blockquote><figure class="highlight sh"><figcaption><span>restore_stg.sh（前半）</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># スナップショット削除</span></span><br><span class="line">aws rds delete-db-snapshot \</span><br><span class="line">    --db-snapshot-identifier <span class="variable">$&#123;【検証】手動スナップショット識別子&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># スナップショット削除完了確認</span></span><br><span class="line">aws rds <span class="built_in">wait</span> db-snapshot-deleted \</span><br><span class="line">    --db-snapshot-identifier <span class="variable">$&#123;【検証】手動スナップショット識別子&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 共有されたスナップショット識別子(ARN)取得</span></span><br><span class="line"><span class="comment">## 以下では共有された最新のスナップショットを取得しています。</span></span><br><span class="line">共有されたスナップショット識別子=$(</span><br><span class="line">    aws rds describe-db-snapshots \</span><br><span class="line">        --include-shared \</span><br><span class="line">        --snapshot-type shared \</span><br><span class="line">        --query <span class="string">&#x27;reverse(sort_by(DBSnapshots, &amp;SnapshotCreateTime)[].DBSnapshotArn)[0]&#x27;</span> \</span><br><span class="line">        | <span class="built_in">tr</span> -d <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># スナップショット複製</span></span><br><span class="line"><span class="comment">## ここでも手動スナップショットをAWS KMSで暗号化しています。</span></span><br><span class="line">aws rds copy-db-snapshot \</span><br><span class="line">    --source-db-snapshot-identifier <span class="variable">$&#123;共有されたスナップショット識別子&#125;</span> \</span><br><span class="line">    --target-db-snapshot-identifier <span class="variable">$&#123;【検証】手動スナップショット識別子&#125;</span> \</span><br><span class="line">    --kms-key-id <span class="variable">$&#123;【検証】KMSキーの識別子&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># スナップショット複製完了確認</span></span><br><span class="line">aws rds <span class="built_in">wait</span> db-snapshot-available \</span><br><span class="line">    --db-snapshot-identifier <span class="variable">$&#123;【検証】手動スナップショット識別子&#125;</span> \</span><br><span class="line">    --snapshot-type manual</span><br></pre></td></tr></table></figure><p>参照（公式ドキュメント）</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_DeleteSnapshot.html">DB スナップショットの削除</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html">DB スナップショットのコピー</a></li></ul><h3 id="スナップショットからDBインスタンスを復元"><a href="#スナップショットからDBインスタンスを復元" class="headerlink" title="スナップショットからDBインスタンスを復元"></a>スナップショットからDBインスタンスを復元</h3><p>続いて検証環境上でコピーしたスナップショットをもとに、DBインスタンスを復元します。</p><p>実装例は次のようになります。</p><figure class="highlight sh"><figcaption><span>restore_stg.sh（後半）</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># DBインスタンス削除</span></span><br><span class="line"><span class="comment">## 自動バックアップも削除し、最終スナップショットも作成しません。</span></span><br><span class="line">aws rds delete-db-instance \</span><br><span class="line">    --db-instance-identifier <span class="variable">$&#123;DBインスタンス識別子&#125;</span> \</span><br><span class="line">    --skip-final-snapshot \</span><br><span class="line">    --delete-automated-backups</span><br><span class="line"></span><br><span class="line"><span class="comment"># DBインスタンス削除完了確認</span></span><br><span class="line">aws rds <span class="built_in">wait</span> db-instance-deleted \</span><br><span class="line">    --db-instance-identifier <span class="variable">$&#123;DBインスタンス識別子&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DBインスタンス復元</span></span><br><span class="line"><span class="comment">## DBインスタンスの設定オプションは各自のDB要件に応じて設定してください。</span></span><br><span class="line"><span class="comment">## 以下では&quot;パブリックアクセス禁止&quot;のみ設定しています。</span></span><br><span class="line">aws rds restore-db-instance-from-db-snapshot \</span><br><span class="line">    --db-instance-identifier <span class="variable">$&#123;DBインスタンス識別子&#125;</span> \</span><br><span class="line">    --db-snapshot-identifier <span class="variable">$&#123;【検証】手動スナップショット識別子&#125;</span> \</span><br><span class="line">    --no-publicly-accessible</span><br><span class="line"></span><br><span class="line"><span class="comment"># DBインスタンス復元完了確認</span></span><br><span class="line">aws rds <span class="built_in">wait</span> db-instance-available \</span><br><span class="line">    --db-instance-identifier <span class="variable">$&#123;DBインスタンス識別子&#125;</span></span><br></pre></td></tr></table></figure><p>参照（公式ドキュメント）</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">DB インスタンスを削除する</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_RestoreFromSnapshot.html">DB スナップショットからの復元</a></li></ul><h1 id="バックアップリストアの自動化"><a href="#バックアップリストアの自動化" class="headerlink" title="バックアップリストアの自動化"></a>バックアップリストアの自動化</h1><p>さて、<a href="#%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%83%AA%E3%82%B9%E3%83%88%E3%82%A2%E3%81%AE%E5%AE%9F%E8%A3%85">バックアップリストアの実装</a>で作成したファイル達を各アカウントでそれぞれ手動実行することで、検証環境上に本番環境のDBを復元できるようになりました。</p><p>いよいよ本題のGitHub Actionsでの自動化です。<br><code>aws-actions/configure-aws-credentials</code>を使用すれば、指定したIAMロールでAWS CLIコマンドを実行できるので、ここでは<a href="#%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%83%AA%E3%82%B9%E3%83%88%E3%82%A2%E3%81%AE%E5%AE%9F%E8%A3%85">バックアップリストアの実装</a>で作成したファイル達を実行するために必要なIAMロールの設定について説明しようと思います。</p><p>一般的に<code>aws-actions/configure-aws-credentials</code>を使用してAWS CLIコマンドを実行するために必要な設定については、<a href="https://future-architect.github.io/articles/20230405a/">Terraform とGitHub Actions</a>等を参考にしてみてください。</p><h2 id="必要なIAMロールの設定"><a href="#必要なIAMロールの設定" class="headerlink" title="必要なIAMロールの設定"></a>必要なIAMロールの設定</h2><p><a href="#%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%83%AA%E3%82%B9%E3%83%88%E3%82%A2%E3%81%AE%E5%AE%9F%E8%A3%85">バックアップリストアの実装</a>で作成したファイル達が正常に実行されるためには、以下ポリシーがIAMロールに付与されており、アクセスが許可されている必要があります。</p><ul><li>AWS CLIコマンド実行のために必要なポリシー</li><li>検証環境上での本番環境のAWS KMSキーの使用に必要なポリシー</li></ul><p>一つずつ見ていきましょう。</p><h3 id="AWS-CLIコマンド実行のために必要なポリシー"><a href="#AWS-CLIコマンド実行のために必要なポリシー" class="headerlink" title="AWS CLIコマンド実行のために必要なポリシー"></a>AWS CLIコマンド実行のために必要なポリシー</h3><p><a href="#%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%83%AA%E3%82%B9%E3%83%88%E3%82%A2%E3%81%AE%E5%AE%9F%E8%A3%85">バックアップリストアの実装</a>を踏まえると、本番&#x2F;検証環境で以下AWS CLIコマンド群を実行できるようにする必要があると分かります。</p><ul><li>スナップショットの削除と複製（本番環境と検証環境の両方）<ul><li><code>delete-db-snapshot</code></li><li><code>wait db-snapshot-deleted</code></li><li><code>describe-db-snapshots</code></li><li><code>copy-db-snapshot</code></li><li><code>wait db-snapshot-available</code></li></ul></li><li>スナップショットの共有（本番環境のみ）<ul><li><code>modify-db-snapshot-attribute</code></li></ul></li><li>DBインスタンスの削除復元（検証環境のみ）<ul><li><code>delete-db-instance</code></li><li><code>wait db-instance-deleted</code></li><li><code>restore-db-instance-from-db-snapshot</code></li><li><code>wait db-instance-available</code></li></ul></li></ul><p>以下では、それぞれのコマンド群の実行に必要なポリシーの実装例を挙げています。<br>要件によっては、さらに細かくカスタマイズする必要もあると思うので参考程度に留めて役立ててもらえればと思います。<br>また、本番&#x2F;検証環境のそれぞれのアカウントごとに、実行すべきコマンド群が異なるので注意して設定してください。</p><h4 id="スナップショットの削除複製に必要なポリシーの実装例"><a href="#スナップショットの削除複製に必要なポリシーの実装例" class="headerlink" title="スナップショットの削除複製に必要なポリシーの実装例"></a>スナップショットの削除複製に必要なポリシーの実装例</h4><p>本番環境と検証環境の両方のアカウントで必要になります。</p><figure class="highlight json"><figcaption><span>スナップショットの削除複製に必要なポリシーの実装例.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Sid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VisualEditor0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;rds:AddTagsToResource&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;rds:DescribeDBSnapshots&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;rds:CopyDBSnapshot&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;rds:DeleteDBSnapshot&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="スナップショットの共有に必要なポリシーの設定例"><a href="#スナップショットの共有に必要なポリシーの設定例" class="headerlink" title="スナップショットの共有に必要なポリシーの設定例"></a>スナップショットの共有に必要なポリシーの設定例</h4><p>本番環境のアカウントでのみ必要になります。</p><figure class="highlight json"><figcaption><span>スナップショットの共有に必要なポリシーの設定例.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Sid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VisualEditor0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;rds:ModifyDBSnapshotAttribute&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;rds:DescribeDBSnapshotAttributes&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="DBインスタンスの削除復元に必要なポリシーの設定例"><a href="#DBインスタンスの削除復元に必要なポリシーの設定例" class="headerlink" title="DBインスタンスの削除復元に必要なポリシーの設定例"></a>DBインスタンスの削除復元に必要なポリシーの設定例</h4><p>検証環境のアカウントでのみ必要になります。</p><figure class="highlight json"><figcaption><span>DBインスタンスの削除復元に必要なポリシーの設定例.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Sid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VisualEditor0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iam:PassRole&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Condition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;StringLike&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;iam:PassedToService&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rds.amazonaws.com&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Sid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VisualEditor1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;rds:AddTagsToResource&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;rds:RestoreDBInstanceFromDBSnapshot&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;rds:DescribeDBInstances&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;rds:DeleteTenantDatabase&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;rds:CreateTenantDatabase&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;rds:DeleteDBInstance&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="検証環境上での本番環境のAWS-KMSキーの使用に必要なポリシー"><a href="#検証環境上での本番環境のAWS-KMSキーの使用に必要なポリシー" class="headerlink" title="検証環境上での本番環境のAWS KMSキーの使用に必要なポリシー"></a>検証環境上での本番環境のAWS KMSキーの使用に必要なポリシー</h3><h4 id="本番環境での設定"><a href="#本番環境での設定" class="headerlink" title="本番環境での設定"></a>本番環境での設定</h4><p>スナップショットの暗号化に使用したカスタマーマネージドキーのKMSキーポリシーにて、共有先の検証環境のアカウントをキーユーザーに指定することで、検証環境上でそのKMSキーへのアクセスを許可することができるようになります。</p><p>具体的には次の2つのステートメントについて、検証環境のアカウントにKMSキーへのアクセス許可を与える必要があります。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Sid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow use of the key&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Principal&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;AWS&quot;</span><span class="punctuation">:</span> $<span class="punctuation">&#123;</span>【検証】アカウント識別子(ARN)<span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;kms:Encrypt&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;kms:Decrypt&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;kms:ReEncrypt*&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;kms:GenerateDataKey*&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;kms:DescribeKey&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Sid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow attachment of persistent resources&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Principal&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;AWS&quot;</span><span class="punctuation">:</span> $<span class="punctuation">&#123;</span>【検証】アカウント識別子(ARN)<span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;kms:CreateGrant&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;kms:ListGrants&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;kms:RevokeGrant&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Condition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;kms:GrantIsForAWSResource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>参照（公式ドキュメント）</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/kms/latest/developerguide/key-policy-modifying-external-accounts.html#cross-account-console">他のアカウントのユーザーに KMS キーの使用を許可する#他のアカウントで使用できる KMS キーを作成する</a></li></ul><h4 id="検証環境での設定"><a href="#検証環境での設定" class="headerlink" title="検証環境での設定"></a>検証環境での設定</h4><p>上記設定により本番環境側は、このKMSキーに対するアクセス許可を検証環境に与えました。<br>しかし実際に検証環境上でKMSキーを使用できるようにするためには、このKMSキーを使用するロールに対して検証環境側からアクセス許可を与える必要もあります。</p><p>具体的には以下ポリシーを作成し、IAMロールに付与する必要があります。<br>これによってようやく、本番環境から共有されたスナップショットを検証環境上にコピーすることができるようになります。</p><figure class="highlight json"><figcaption><span>本番環境のKMSキーの使用に必要なポリシーの実装例.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Sid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VisualEditor0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;kms:Decrypt&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;kms:Encrypt&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;kms:DescribeKey&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;kms:ReEncrypt*&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;kms:GenerateDataKey*&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> $<span class="punctuation">&#123;</span>【本番】KMSキー識別子(ARN)<span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Sid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VisualEditor1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;kms:CreateGrant&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;kms:ListGrants&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;kms:RevokeGrant&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> $<span class="punctuation">&#123;</span>【本番】KMSキー識別子(ARN)<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Condition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;Bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;kms:GrantIsForAWSResource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>参照（公式ドキュメント）</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/kms/latest/developerguide/key-policy-modifying-external-accounts.html">他のアカウントのユーザーに KMS キーの使用を許可する</a></li></ul><h2 id="GitHub-Actions-ワークフローを作成する"><a href="#GitHub-Actions-ワークフローを作成する" class="headerlink" title="GitHub Actions ワークフローを作成する"></a>GitHub Actions ワークフローを作成する</h2><p>必要なIAMロールを設定できたので、あとはGitHub Actionsのワークフローを作成すればバックアップリストア作業を自動化できます。</p><p>アカウントごとに適切なIAMロールを<code>aws-actions/configure-aws-credentials</code>で指定した後に、次の二つのシェルスクリプトを、対応するアカウントごとに順次実行します。</p><ul><li><code>backup_prod.sh</code>：本番環境で実行<ul><li><a href="#1-%E6%9C%AC%E7%95%AA%E7%92%B0%E5%A2%83%E3%81%AEdb%E3%81%AE%E3%82%B9%E3%83%8A%E3%83%83%E3%83%97%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90">1. 本番環境のDBのスナップショットを作成</a></li><li><a href="#2-%E3%82%B9%E3%83%8A%E3%83%83%E3%83%97%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%E3%82%92%E6%A4%9C%E8%A8%BC%E7%92%B0%E5%A2%83%E3%81%AE%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%AB%E5%85%B1%E6%9C%89">2. スナップショットを検証環境のアカウントに共有</a></li></ul></li><li><code>restore_stg.sh</code>：検証環境で実行（ただし、<code>backup_prod.sh</code>の実行完了後）<ul><li><a href="#3-%E5%85%B1%E6%9C%89%E3%81%95%E3%82%8C%E3%81%9F%E3%82%B9%E3%83%8A%E3%83%83%E3%83%97%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%E3%81%8B%E3%82%89%E6%A4%9C%E8%A8%BC%E7%92%B0%E5%A2%83%E4%B8%8A%E3%81%A7db%E3%82%92%E5%BE%A9%E5%85%83">3. 共有されたスナップショットから検証環境上でDBを復元</a></li></ul></li></ul><p>実装例は以下の通りです。</p><figure class="highlight yaml"><figcaption><span>実装例.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">restore-rds-stg-from-prod</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 実行スケジュールをcron形式で記載してください。</span></span><br><span class="line"><span class="comment"># 以下例では毎日15:00(UTC)に実行されます。</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 15 * * *&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">backup_prod:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">id-token:</span> <span class="string">write</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">read</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configure</span> <span class="string">AWS</span> <span class="string">Credentials</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">aws-actions/configure-aws-credentials@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">aws-region:</span> <span class="string">ap-northeast-1</span></span><br><span class="line">          <span class="attr">role-to-assume:</span> <span class="string">$&#123;本番環境用のIAMロール&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">and</span> <span class="string">Share</span> <span class="string">Snapshot</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">sh</span> <span class="string">backup_prod.sh</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">restore_stg:</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">backup_prod</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">id-token:</span> <span class="string">write</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">read</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configure</span> <span class="string">AWS</span> <span class="string">Credentials</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">aws-actions/configure-aws-credentials@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">aws-region:</span> <span class="string">ap-northeast-1</span></span><br><span class="line">          <span class="attr">role-to-assume:</span> <span class="string">$&#123;検証環境用のIAMロール&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">RDS</span> <span class="string">from</span> <span class="string">Snapshot</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">sh</span> <span class="string">restore_stg.sh</span></span><br></pre></td></tr></table></figure><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回は、RDS DBインスタンスをアカウント間でバックアップリストアする方法とGitHub Actionsを用いた自動化の方法を紹介させていただきました。もしRDS DBのバックアップ方法に悩んでいる方がいれば試してみてください。</p><p>また、今回紹介した方法は、同一リージョン内でバックアップリストアする方法です。リージョン間のコピーは少し複雑性が増すらしく、少しカスタマイズする必要があるかもしれませんので注意してください。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">他にもAWS CodeBuildを用いたりする方法等があります。一方でAWS Lambdaは時間的制約がシビアであるため、DBのバックアップリストアには不向きです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">RDSに関するAWS CLIコマンドの一覧は以下を参照してください。<a href="https://docs.aws.amazon.com/cli/latest/reference/rds">https://docs.aws.amazon.com/cli/latest/reference/rds</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/IAM/">IAM</category>
      
      <category domain="https://future-architect.github.io/tags/CI-CD/">CI/CD</category>
      
      <category domain="https://future-architect.github.io/tags/GitHubActions/">GitHubActions</category>
      
      <category domain="https://future-architect.github.io/tags/ShellScript/">ShellScript</category>
      
      <category domain="https://future-architect.github.io/tags/RDS/">RDS</category>
      
      
      <comments>https://future-architect.github.io/articles/20240507a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>自作40%キーボードへの入門〜キーボードも断捨離の時代へ〜</title>
      <link>https://future-architect.github.io/articles/20240502a/</link>
      <guid>https://future-architect.github.io/articles/20240502a/</guid>
      <pubDate>Wed, 01 May 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20240408a/&quot;&gt;春の入門連載&lt;/a&gt;の16記事目です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20240408a/">春の入門連載</a>の16記事目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。180度開脚に憧れてストレッチを続けている、HealthCare Innovation Group(HIG)所属の山本です。</p><p>以前から自作キーボード、分割キーボード、XX％キーボードといった単語には興味を惹かれていたのですが、電子工作初心者の自分としてはなかなか敷居を高く感じていました。</p><p>この度、自作キーボードに初めて挑戦し、40％分割キーボードを使いこなすに至ったので、その動機や経緯を含め、魅力をお伝えしていきたいです。</p><p>※自作キーボードについては既存記事も面白いものが多いのでぜひ御覧ください！</p><p><a href="https://future-architect.github.io/tags/%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89/">https://future-architect.github.io/tags/自作キーボード/</a></p><h2 id="作成したもの"><a href="#作成したもの" class="headerlink" title="作成したもの"></a>作成したもの</h2><p>今回私が作成したキーボードは、以下のようなものです。</p><p>キーキャップに無刻印のものを使用しているためちょっと分かりづらいですが、通常のキーボードよりもキー数が少ないです。</p><p>ファンクションキーや数字キーもないので、かなりスッキリした見た目になる反面、初めて見る方にはどう入力するのかと困惑されるのではないでしょうか？</p><img src="/images/20240502a/PXL_20240501_204920074.MP.jpg" alt="PXL_20240501_204920074.MP.jpg" width="1200" height="675" loading="lazy"><p>製品としては、foostanさんが作成されているCorne Cherryシリーズのものを使わせていただきました。</p><p>日本で有数の自作キーボードの店舗＆オンラインショップである、遊舎工房さんのサイトでもいくつかシリーズが販売されています。<br><a href="https://shop.yushakobo.jp/search?type=product&options%5Bprefix%5D=last&options%5Bunavailable_products%5D=last&q=Corne+Cherry">https://shop.yushakobo.jp/search?type=product&amp;options%5Bprefix%5D=last&amp;options%5Bunavailable_products%5D=last&amp;q=Corne+Cherry</a></p><h2 id="作成までの経緯"><a href="#作成までの経緯" class="headerlink" title="作成までの経緯"></a>作成までの経緯</h2><p>このセクションでは、作成に至るまでの動機と経緯をポエミーに書きます。</p><h3 id="動機編"><a href="#動機編" class="headerlink" title="動機編"></a>動機編</h3><p>はじめに、今回挑戦した動機について軽く触れておきます。</p><p>今までの多くをリモートワークで過ごしてきたわけですが、以下のような思いをモヤモヤと抱えていました。</p><ol><li>デスクに向かいすぎて、首肩こりが強くなってきた</li><li>せっかくリモートワークをしているから、至高のデスク環境を極めたい</li><li>一般的なキーボードでタッチタイピング程度であればできるが、より高みを目指せるのではないか…？</li></ol><p>1についての対応としては、「分割キーボード」を導入することがよいという一説があります。通常のキーボードではどうしても肩幅より小さい位置へ手を置くことになりますが、分割されていることにより各々の肩幅や手の位置似合わせて配置できるという利点ですね。</p><p>2, 3については、より高みを目指したいという心の奥底のコダワリ心ですね。つまり私的には自己満足と浪漫の世界です。そんな折、「40%キーボード」の魅力を先人が書いた記事を見かけました。いわく、ホームポジションからほとんど手を動かさずにすむためキー入力が効率的になるということです。これに強い魅力を感じました。</p><p>これらの思いから、自作40%キーボードの世界には強い興味を持っていました。</p><h3 id="見学編"><a href="#見学編" class="headerlink" title="見学編"></a>見学編</h3><p>とはいえ、自作キーボードの作成経験もなく、電子工作の経験もあまりない私には右も左もわからない状態でした。</p><p>そのため、実際に国内でも有数の自作キーボードショップである、遊舎工房さんの実店舗(秋葉原にある)に行ってみました。</p><p><a href="https://yushakobo.jp/shopinfo/">https://yushakobo.jp/shopinfo/</a></p><p>こちらの店舗では、様々な種類の自作キーボードが店内に展示されており、実際に触ることができます。キー入力の感触や外観、他にも形状など己のフィーリングを確かめることができるので、気分は伝説の聖剣を抜きにきた村人Aの気持ちになれます。</p><p>店員さんも親切で、各種部品やキットの販売なども行っているため、同じように入門される方は一度行ってみることをおすすめします。</p><h3 id="作成編"><a href="#作成編" class="headerlink" title="作成編"></a>作成編</h3><p>残念なお知らせとして、このブログ記事の執筆時点ではすでにキーボードは完成してしまいました。(記録など取ること忘れてました。。)</p><p>そのため、組み立てやはんだ付けについては他の方の記事や動画などを参照ください。</p><p>日本で販売されている組み立てタイプの自作キーボード(自分ではんだ付けから行うもの)の多くは、ビルドガイドがGithub上で公開されていたりします。</p><p>(例：今回扱ったfoostanさんの<a href="https://github.com/foostan/crkbd/blob/v4.0/docs/corne-cherry/v3/buildguide_jp.md">ビルドガイド</a>)</p><p>自作キーボードに挑戦される方は、これらの事前情報があるタイプのキーボードかも確認されると良いかもしれません。</p><p>また、はんだ付けに不安がある方へはキーボードの組立サービスであったり、そもそもはんだ付けがされた状態で発売されている製品などもあるので挑まない選択肢もあるため安心できます。<br>(私はYoutubeのはんだ付け動画を繰り返しみつづけました)</p><h2 id="使いこなすまでの試行錯誤"><a href="#使いこなすまでの試行錯誤" class="headerlink" title="使いこなすまでの試行錯誤"></a>使いこなすまでの試行錯誤</h2><p>ここまでの経緯で、なんとか動作する自作40%キーボードについては作成できました。</p><p>しかしなんと、製作したから終わりではなく、まだまだ拘れるポイントがあるので紹介します。<br>(これがキーボード沼と呼ばれる理由かと思ってます。時間と金を無限に溶かすことができそうです)</p><h3 id="1-キースイッチの試行錯誤"><a href="#1-キースイッチの試行錯誤" class="headerlink" title="1. キースイッチの試行錯誤"></a>1. キースイッチの試行錯誤</h3><p>キーボードの打鍵感は非常に個人的なもので、それを自由にカスタマイズできるのが自作キーボードの強みの一つかと思っています。</p><p>キースイッチには、赤軸、青軸、茶軸、スピードシルバー軸などなどさまざまな種類があり、それぞれによって打鍵したときの感触や打鍵音が変わってきます。HHKBやKeychronなどを購入する際にも比較するような情報ですね。</p><p>今回のキーボードでは、軽めの打鍵感と感触の好みからスピードシルバー軸のものを購入しました。</p><h3 id="2-キーキャップの試行錯誤"><a href="#2-キーキャップの試行錯誤" class="headerlink" title="2. キーキャップの試行錯誤"></a>2. キーキャップの試行錯誤</h3><p>キーキャップの素材やデザインも打鍵感に意外なほど大きな影響を与えてきます。</p><p>このキーキャップの形状についてはProfile(プロファイル)と呼ばれており、高さやくぼみなどの形状が異なってきます。市販のメカニカルキーボードの多くはOEM Profileと呼ばれるものに該当するそうです。</p><img src="/images/20240502a/image.png" alt="image.png" width="1200" height="352" loading="lazy"><p>(<a href="https://www.keycaps.info/">https://www.keycaps.info</a> で作成した画像を引用)</p><p>上記の画像で見比べて見ると、多様性があることがわかるのではないでしょうか？</p><p>試行錯誤の末、私の個人的な好みとしては高めのProfileであるSA Profileが打ちやすいことがわかりました。</p><h3 id="3-キーボード角度の試行錯誤"><a href="#3-キーボード角度の試行錯誤" class="headerlink" title="3. キーボード角度の試行錯誤"></a>3. キーボード角度の試行錯誤</h3><p>キーボードの水平方向の傾きもキー入力のしやすさや肩こりの解消に大きな影響を与えてきます。自分の手を前水平に伸ばしてみると感じることができますが、人間の手首は微妙に外向きに回転した状態が自然な除隊となることが多いです。</p><p>そのため、机と平行なフラットなキーボードで長時間入力することで、手首や肘への疲労が蓄積していまいます。</p><p>対策として、キーボードの角度を変える、「テンティング」という単語で呼ばれる試行錯誤があります。</p><p>結論として、水平方向ではこのくらいの角度が自分にはフィットしました。(人によっては60度くらいの角度を付けている人も見かけますね)</p><img src="/images/20240502a/PXL_20240501_222151250.MP_(1).jpg" alt="PXL_20240501_222151250.MP_(1).jpg" width="1200" height="377" loading="lazy"><h3 id="4-キーマップの試行錯誤"><a href="#4-キーマップの試行錯誤" class="headerlink" title="4. キーマップの試行錯誤"></a>4. キーマップの試行錯誤</h3><p>こちらは40%キーボードや60%キーボード特有の話となってきますが、キーマップの試行錯誤についても探求の余地があります。</p><p>そもそも、数字キーボードや一部記号キーがない40%キーボードでは、これらのキーをどうやって入力するのでしょうか？</p><p>ここで、「レイヤー」という概念が出てきます。通常のキーボードでもFnキーを押している間、他のキー入力の効果が変わるといったことがあると思います。これを自由にカスタマイズできるのが特徴です。</p><p>下画像での例としては、「G」キーを単体で入力したときにはGがそのまま入力され、右下の青い上矢印キー+「G」キーを入力したときには6が入力される、といった挙動としています。</p><img src="/images/20240502a/PXL_20240501_204920074.MP_2.jpg" alt="PXL_20240501_204920074.MP.jpg" width="1200" height="675" loading="lazy"><p>自作キーボードの多くは、以下のRemapのサイト上などでキー配置を自由に組み替えることができます。</p><p><a href="https://remap-keys.app/configure">https://remap-keys.app/configure</a></p><p>私のキーマップ例を示しますが、以下のようになっています。自分の入力しやすいようにカスタマイズできるのはもちろん、レイヤーキーとの組み合わせで入力できるキー数が3倍となっています。</p><p>40%キーボードでありながら、過不足なく、ホームポジションからほとんど手を動かさずに入力できるのは素晴らしい利点です。</p><img src="/images/20240502a/image_2.png" alt="image.png" width="1076" height="1172" loading="lazy"><hr><p>これら以外にも、3Dプリンタでの筐体作成、バックライト、トラックボールの組み込みなどまだまだこだわれる要素はたくさんあります。</p><p>あまりに極めすぎると2度と通常のキーボードで入力できなくなる懸念はありますが、楽しみが多いのは良いことですね。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>これまでの記事で、自作40%キーボードに挑戦する道のり、そのさきの沼の深さの一端をご紹介しました。</p><p>肩こりを動機として挑んだ自作40%キーボードですが、試行錯誤の末かなり満足できる環境とできたと個人的には感じています。</p><p>ひとつひとつ自分の体の特徴やクセを見極め、相棒となる道具をアップデートして成長していける経験は人生でもそう多くないものと考えています。</p><p>個人的には、そのような機会に大人になってから挑戦できるという意味でも良い経験となりました。</p><p>肩こりに悩む方、キーボード沼にハマってみたい方、あるいは自分の相棒となるキーボードを探したい方、それ以外の全ての方にも、自作キーボードを探して・作って・試行錯誤して、といった経験はとても楽しいものですのでぜひ一度はやってみることをオススメしたいです。思ったより敷居は高くなかったです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/">電子工作</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/">リモートワーク</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89/">自作キーボード</category>
      
      <category domain="https://future-architect.github.io/tags/40-%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89/">40%キーボード</category>
      
      
      <comments>https://future-architect.github.io/articles/20240502a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Cloudflare C3で始めるCloudflare Pages入門</title>
      <link>https://future-architect.github.io/articles/20240501a/</link>
      <guid>https://future-architect.github.io/articles/20240501a/</guid>
      <pubDate>Tue, 30 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20240408a/&quot;&gt;春の入門連載2024&lt;/a&gt; 15日目の記事です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20240408a/">春の入門連載2024</a> 15日目の記事です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>みなさんこんにちは。TIG所属の大岩潤矢( <a href="https://x.com/920OJ">@920OJ</a> ) です。</p><p>Cloudflareが提供するCLIツール「Cloudflare C3」を利用して、Cloudflare Pagesへ簡単に入門する方法について、ハンズオンを中心に紹介します。</p><h2 id="Cloudflare-Pagesとは"><a href="#Cloudflare-Pagesとは" class="headerlink" title="Cloudflare Pagesとは"></a>Cloudflare Pagesとは</h2><p>Cloudflare Pagesとは、一言で言えば <strong>「Cloudflareが提供するWebサイトのホスティングサービス」</strong> です。</p><img src="/images/20240501a/ogp.png" alt="ogp.png" width="1200" height="630" loading="lazy"><p>みなさんは、静的Webサイトを作成した後どこにデプロイしますか？</p><p>ホスティングの方法は多種多様、色々な方法が存在します。一昔前までは、レンタルサーバを借りてFTP接続し、各種ファイルを配置する……というものが一般的でした。しかし最近は大手クラウドベンダの提供するPaaS(Platform as a Service)が台頭し、面倒なサーバ管理無しに、コードさえあればすぐにWebサイトを公開できる、というのも一般的になってきました。</p><p>特に静的Webサイトをホスティングするサービスには、AWSの<a href="https://aws.amazon.com/jp/amplify/hosting/">Amplify</a>（中身はS3+CloudFront構成）やGoogleの<a href="https://firebase.google.com/docs/hosting?hl=ja">Firebase Hosting</a>など大手クラウドベンダが提供するクラウドの1サービス、はたまた<a href="https://www.netlify.com/">Netlify</a>や<a href="https://vercel.com/">Vercel</a>などの独立系プラットフォーマーのサービスなどが挙げられます。</p><p>その中に彗星のごとく現れたのが、大手CDNプロパイダの一つ、Cloudflareが提供する<a href="https://www.cloudflare.com/ja-jp/developer-platform/pages/">Cloudflare Pages</a>です。</p><h3 id="Cloudflare-Pagesの魅力-コストの安さ"><a href="#Cloudflare-Pagesの魅力-コストの安さ" class="headerlink" title="Cloudflare Pagesの魅力: コストの安さ"></a>Cloudflare Pagesの魅力: コストの安さ</h3><p>Cloudflare Pagesの魅力、それは圧倒的なコストの安さ、CDN基盤の強みを生かした安定・高速な配信です。</p><p>まずはコストから見てみましょう。<a href="https://www.cloudflare.com/ja-jp/developer-platform/pages/">公式サイト</a>の価格表の一番上に、「サイト、シート、リクエスト、帯域幅は全プラン無制限」と記載があります。</p><img src="/images/20240501a/image.png" alt="image.png" width="1200" height="712" loading="lazy"><p>（<a href="https://www.cloudflare.com/ja-jp/developer-platform/pages/">公式サイト</a>より引用）</p><p>Cloudflare Pagesでは<strong>無料プランでも、公開するサイト数、リクエスト数、帯域幅、どれだけ増大しても無料で使い続けることができます</strong>。制限は同時ビルド数が1であること、月のビルド数が500に制限されていること、カスタムドメイン設定が100個までということのみです。</p><p>一応他にも制限はあり、<a href="https://developers.cloudflare.com/pages/platform/limits/">ドキュメント</a>の方にまとまっています。</p><ul><li>1サイトに含められるファイル数は最大20,000ファイル</li><li>Pagesから配信できる1アセットのサイズ上限は25MB</li><li>申請なしで作成できるサイト数は100個まで（それ以上は引き上げ申請が必要）</li></ul><p>特にファイル数とファイルサイズは、利用用途によってはフィットしない可能性があります。大容量のファイルをホスティングしたい場合は、同じくCloudflareのオブジェクトストレージである<a href="https://www.cloudflare.com/ja-jp/developer-platform/r2/">Cloudflare R2</a>などの利用を検討しましょう。こちらも帯域幅無料で、コストを抑えてアセットの配信ができます。</p><p>同じ用途でよく利用される他のサービスの無料プランとも簡単に比較してみましょう。</p><div class="scroll"><table><thead><tr><th>サービス名</th><th>サイト数</th><th>リクエスト数上限</th><th>帯域幅上限</th><th>ストレージ</th><th>備考</th></tr></thead><tbody><tr><td>Cloudflare Pages</td><td>無制限(カスタムドメインは100まで)</td><td>無制限</td><td>無制限</td><td>無制限<br />(1ファイル25MB)</td><td></td></tr><tr><td>Firebase Hosting</td><td>５〜10個(プロジェクト数)<br />1プロジェクトあたり36個</td><td>無制限</td><td>360MB&#x2F;日</td><td>10GB<br />(1ファイル2GB)</td><td></td></tr><tr><td>GitHub Pages</td><td>アカウントごとに1個</td><td>制限あり</td><td>100GB&#x2F;月</td><td>1GB<br />(1ファイル100MB)</td><td>商用利用不可</td></tr><tr><td>Netlify</td><td>500個</td><td>無制限</td><td>100GB&#x2F;月</td><td>不明</td><td></td></tr></tbody></table></div><p>月の帯域幅制限を設定しているサービスが多いなか、無制限に利用できるのはCloudflare Pagesのみです。CDNプロパイダとしての気概と矜持を感じますね。</p><h3 id="Cloudflare-Pagesの魅力-安定・高速な配信"><a href="#Cloudflare-Pagesの魅力-安定・高速な配信" class="headerlink" title="Cloudflare Pagesの魅力: 安定・高速な配信"></a>Cloudflare Pagesの魅力: 安定・高速な配信</h3><p>Cloudflareは世界最大のCDNサービスを提供することから、100カ国以上にデータセンターを所有しています。<a href="https://www.cloudflare.com/ja-jp/network/">公式サイト</a>によれば、日本だけでも東京、大阪、福岡、那覇と、4箇所も存在しています。</p><p>Cloudflare PagesへデプロイされたWebサイトは、この世界中にあるデータセンター（エッジサーバ）へ配置されます。これにより閲覧するユーザから一番近いサーバより配信できるため、物理的距離の短縮がページ表示の高速化につながる……と理解しています。</p><p>Cloudflare Pagesの魅力はこれ以外にもあり、リリース時のブログページに詳細が書かれているので、気になる方はぜひご一読ください。</p><p><a href="https://blog.cloudflare.com/ja-jp/cloudflare-pages-ja-jp/">https://blog.cloudflare.com/ja-jp/cloudflare-pages-ja-jp/</a></p><h2 id="Cloudflare-C3とは"><a href="#Cloudflare-C3とは" class="headerlink" title="Cloudflare C3とは"></a>Cloudflare C3とは</h2><p>Cloudflare C3とは、Cloudflareが公式で提供しているScaffoldツールです。C3は <code>create-cloudflare-cli</code> の略で、頭文字の3つのCを取ってC3のようです。サービスがリリースされた順序は前後しますが、D1、R2、C3と並んでいるのがキレイですね！</p><p>Cloudflare C3を利用することで、Pagesのデプロイ設定等も含めた新規Webサイトプロジェクトの構築を実施できます。あくまで新しくWebサイトを構築する際に利用するツールであり、既存のプロジェクトからPagesにデプロイする設定をするものではないので、注意してください。</p><p>公式ドキュメントはこちらです。: <a href="https://developers.cloudflare.com/pages/get-started/c3/">https://developers.cloudflare.com/pages/get-started/c3/</a></p><p>それでは、早速Cloudflare C3を利用してCloudflare Pagesに入門してみましょう！</p><h2 id="ハンズオン"><a href="#ハンズオン" class="headerlink" title="ハンズオン"></a>ハンズオン</h2><p>今回のハンズオンは、以下の環境で実施します。ソフトウェアのバージョンによっては動作しないこともあるため、ハンズオン実施前に各種ソフトウェアのバージョンアップをおすすめします。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Macbook Pro (M1 MAX)</span><br><span class="line">Node.js: v20.12.2</span><br><span class="line">npm: v10.5.0</span><br></pre></td></tr></table></figure><h3 id="Cloudflareアカウントの作成"><a href="#Cloudflareアカウントの作成" class="headerlink" title="Cloudflareアカウントの作成"></a>Cloudflareアカウントの作成</h3><p>以下リンクより、Cloudflareアカウントを作成します。画面の指示に従ってメールアドレス・パスワードを登録後、メールアドレス宛に届いた認証リンクをクリックすることで登録完了です。</p><p><a href="https://dash.cloudflare.com/sign-up?pt=f">https://dash.cloudflare.com/sign-up?pt=f</a></p><h3 id="Cloudflare-C3を利用したプロジェクトの作成"><a href="#Cloudflare-C3を利用したプロジェクトの作成" class="headerlink" title="Cloudflare C3を利用したプロジェクトの作成"></a>Cloudflare C3を利用したプロジェクトの作成</h3><p>まずはCloudflare C3を利用して、プロジェクトを作成します。ここでは、Vueを利用したウェブサイトを構築する想定で設定します。</p><p>ターミナルを開き、以下のコマンドを入力します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm create cloudflare@latest</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Need to install the following packages:</span><br><span class="line">create-cloudflare@2.21.1</span><br><span class="line">Ok to proceed? (y) <span class="comment"># yを入力し、Enter</span></span><br></pre></td></tr></table></figure><p>プロジェクト名を入力します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">using create-cloudflare version 2.21.1</span><br><span class="line"></span><br><span class="line">╭ Create an application with Cloudflare Step 1 of 3</span><br><span class="line">│</span><br><span class="line">╰ In <span class="built_in">which</span> directory <span class="keyword">do</span> you want to create your application? also used as application name</span><br><span class="line">  ./frontend</span><br></pre></td></tr></table></figure><p>どの種類のアプリケーションを作成するか尋ねられます。今回は「Website or web app」を選択します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╰ What <span class="built_in">type</span> of application <span class="keyword">do</span> you want to create?</span><br><span class="line">  ○ <span class="string">&quot;Hello World&quot;</span> Worker</span><br><span class="line">  ○ <span class="string">&quot;Hello World&quot;</span> Worker (Python)</span><br><span class="line">  ○ <span class="string">&quot;Hello World&quot;</span> Durable Object</span><br><span class="line">  ● Website or web app</span><br><span class="line">  ○ Example router &amp; proxy Worker</span><br><span class="line">  ○ Scheduled Worker (Cron Trigger)</span><br><span class="line">  ○ Queue consumer &amp; producer Worker</span><br><span class="line">  ○ API starter (OpenAPI compliant)</span><br><span class="line">  ○ Worker built from a template hosted <span class="keyword">in</span> a git repository</span><br></pre></td></tr></table></figure><p>次に何のフレームワークを利用するか選択します。今回はVueを使います。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╰ Which development framework <span class="keyword">do</span> you want to use?</span><br><span class="line">  ○ Analog</span><br><span class="line">  ○ Angular</span><br><span class="line">  ○ Astro</span><br><span class="line">  ○ Docusaurus</span><br><span class="line">  ○ Gatsby</span><br><span class="line">  ○ Hono</span><br><span class="line">  ○ Next</span><br><span class="line">  ○ Nuxt</span><br><span class="line">  ○ Qwik</span><br><span class="line">  ○ React</span><br><span class="line">  ○ Remix</span><br><span class="line">  ○ Solid</span><br><span class="line">  ○ Svelte</span><br><span class="line">  ● Vue</span><br></pre></td></tr></table></figure><p>ここまで入力した情報でプロジェクトの設定は終了です。プロジェクトファイルのインストールが始まるので、yを入力しEnterを押下します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">using create-cloudflare version 2.21.1</span><br><span class="line"></span><br><span class="line">╭ Create an application with Cloudflare Step 1 of 3</span><br><span class="line">│</span><br><span class="line">├ In <span class="built_in">which</span> directory <span class="keyword">do</span> you want to create your application?</span><br><span class="line">│ <span class="built_in">dir</span> ./frontend</span><br><span class="line">│</span><br><span class="line">├ What <span class="built_in">type</span> of application <span class="keyword">do</span> you want to create?</span><br><span class="line">│ <span class="built_in">type</span> Website or web app</span><br><span class="line">│</span><br><span class="line">├ Which development framework <span class="keyword">do</span> you want to use?</span><br><span class="line">│ framework Vue</span><br><span class="line">│</span><br><span class="line">├ Continue with Vue via `npx create-vue@3.10.2 frontend`</span><br><span class="line">│</span><br><span class="line"></span><br><span class="line">Need to install the following packages:</span><br><span class="line">create-vue@3.10.2</span><br><span class="line">Ok to proceed? (y) <span class="comment"># yを入力し、Enter</span></span><br></pre></td></tr></table></figure><p>続いてVueの設定が始まります。この詳細な設定は割愛しますが、自分は以下の構成で設定しました。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Vue.js - The Progressive JavaScript Framework</span><br><span class="line"></span><br><span class="line">✔ Add TypeScript? … Yes</span><br><span class="line">✔ Add JSX Support? … No</span><br><span class="line">✔ Add Vue Router <span class="keyword">for</span> Single Page Application development? … Yes</span><br><span class="line">✔ Add Pinia <span class="keyword">for</span> state management? … No</span><br><span class="line">✔ Add Vitest <span class="keyword">for</span> Unit Testing? … No</span><br><span class="line">✔ Add an End-to-End Testing Solution? › No</span><br><span class="line">✔ Add ESLint <span class="keyword">for</span> code quality? … Yes</span><br><span class="line">✔ Add Prettier <span class="keyword">for</span> code formatting? … Yes</span><br><span class="line">✔ Add Vue DevTools 7 extension <span class="keyword">for</span> debugging? (experimental) … Yes</span><br></pre></td></tr></table></figure><p>最後に、今からすぐにデプロイするかどうかを尋ねられます。Yesを選択し、デプロイまでやってしまいましょう。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╭ Deploy with Cloudflare Step 3 of 3</span><br><span class="line">│</span><br><span class="line">╰ Do you want to deploy your application?</span><br><span class="line">  Yes / No</span><br></pre></td></tr></table></figure><p>ブラウザが立ち上がるので、ログインします。</p><img src="/images/20240501a/image_2.png" alt="image.png" width="1200" height="886" loading="lazy"><p>権限付与の確認をするコンセントページが表示されます。ページ下部のAllowを押下し、許可します。</p><img src="/images/20240501a/image_3.png" alt="image.png" width="1200" height="801" loading="lazy"><img src="/images/20240501a/image_4.png" alt="image.png" width="1200" height="618" loading="lazy"><p>ここまで来たら、ブラウザは閉じてもOKです。</p><img src="/images/20240501a/image_5.png" alt="image.png" width="1200" height="744" loading="lazy"><p>裏ではデプロイが走ったままになっているので、このままにします。</p><img src="/images/20240501a/image_6.png" alt="image.png" width="1200" height="842" loading="lazy"><p>少しするとデプロイが完了し、自動でデプロイ先のURLが開きます。</p><img src="/images/20240501a/image_7.png" alt="image.png" width="1200" height="777" loading="lazy"><p>なんと、たった1コマンド（といくつかの設定）で、Cloudflare Workersへのデプロイまで完了してしまいました。</p><h3 id="更新後の反映"><a href="#更新後の反映" class="headerlink" title="更新後の反映"></a>更新後の反映</h3><p>ページの更新をPagesへデプロイするには、本来<a href="https://developers.cloudflare.com/workers/wrangler/">Wrangler</a>というCloudflareのCLIツールを利用するのが一般的です。一方で、Cloudflare C3を利用して構築したプロジェクトでは、npm scriptsにデプロイ用のコマンドが追加されているため、以下のコマンドだけで反映することができます。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure><p>仕組みを紹介すると、以下のコマンドを実行しているようです。ビルド後に、 <code>dist</code> ディレクトリの中身をPagesへデプロイする形になっていますね。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build &amp;&amp; wrangler pages deploy ./dist</span><br></pre></td></tr></table></figure><p>試しに先ほどのプロジェクトの一部を変更してデプロイしてみましょう。 <code>views/HomeView.vue</code> ファイルを以下のように変更します。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">TheWelcome</span> <span class="keyword">from</span> <span class="string">&#x27;../components/TheWelcome.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 以下に変更 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Cloudflare C3で始めるCloudflare Pages入門<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>変更を保存した状態で、 <code>npm run deploy</code> を走らせてみましょう。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">% npm run deploy</span><br><span class="line"></span><br><span class="line">&gt; frontend@0.0.0 deploy</span><br><span class="line">&gt; npm run build &amp;&amp; wrangler pages deploy ./dist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; frontend@0.0.0 build</span><br><span class="line">&gt; run-p type-check <span class="string">&quot;build-only &#123;@&#125;&quot;</span> --</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; frontend@0.0.0 type-check</span><br><span class="line">&gt; vue-tsc --build --force</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; frontend@0.0.0 build-only</span><br><span class="line">&gt; vite build</span><br><span class="line"></span><br><span class="line">vite v5.2.10 building <span class="keyword">for</span> production...</span><br><span class="line">✓ 46 modules transformed.</span><br><span class="line">dist/index.html                      0.43 kB │ gzip:  0.28 kB</span><br><span class="line">dist/assets/AboutView-C6Dx7pxG.css   0.09 kB │ gzip:  0.10 kB</span><br><span class="line">dist/assets/index-D6pr4OYR.css       4.21 kB │ gzip:  1.30 kB</span><br><span class="line">dist/assets/AboutView-CUrwZ76T.js    0.22 kB │ gzip:  0.20 kB</span><br><span class="line">dist/assets/index-DQoQ7Ar8.js       79.46 kB │ gzip: 31.95 kB</span><br><span class="line">✓ built <span class="keyword">in</span> 395ms</span><br><span class="line">fatal: ambiguous argument <span class="string">&#x27;HEAD&#x27;</span>: unknown revision or path not <span class="keyword">in</span> the working tree.</span><br><span class="line">Use <span class="string">&#x27;--&#x27;</span> to separate paths from revisions, like this:</span><br><span class="line"><span class="string">&#x27;git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]&#x27;</span></span><br><span class="line">▲ [WARNING] Warning: Your working directory is a git repo and has uncommitted changes</span><br><span class="line"></span><br><span class="line">  To silence this warning, pass <span class="keyword">in</span> --commit-dirty=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">🌎  Uploading... (6/6)</span><br><span class="line"></span><br><span class="line">✨ Success! Uploaded 3 files (3 already uploaded) (1.93 sec)</span><br><span class="line"></span><br><span class="line">✨ Deployment complete! Take a peek over at https://xxxxxxxxxx.xxxxxxxxxx.pages.dev</span><br></pre></td></tr></table></figure><p>ほんの10秒程度でデプロイが完了したようです。表示されているリンクをクリックすると……</p><img src="/images/20240501a/image_8.png" alt="image.png" width="1200" height="370" loading="lazy"><p>変更が反映されていました！<br>デプロイの更新方法が分かれば、あとはガンガンページを更新していって、出来たタイミングでURLを公開するだけですね。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Cloudflare Pagesは素晴らしいサービスであるものの、自分の身のまわりで知名度が低く、あまり使っている人を見たことが無いのが気に掛かっており、この記事を執筆しました。<br>今回紹介出来なかったCloudflare WorkersとPagesの連携などについても、今後取り上げることができればと思います！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Vue-js/">Vue.js</category>
      
      <category domain="https://future-architect.github.io/tags/Cloudflare/">Cloudflare</category>
      
      <category domain="https://future-architect.github.io/tags/Cloudflare-C3/">Cloudflare C3</category>
      
      <category domain="https://future-architect.github.io/tags/Cloudflare-Pages/">Cloudflare Pages</category>
      
      
      <comments>https://future-architect.github.io/articles/20240501a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【iOS/Swift】ダークモード・ライトモード・端末の表示モードへアプリ内から自由に切り替える</title>
      <link>https://future-architect.github.io/articles/20240430a/</link>
      <guid>https://future-architect.github.io/articles/20240430a/</guid>
      <pubDate>Mon, 29 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20240408a/&quot;&gt;春の入門連載&lt;/a&gt;の14本目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20240408a/">春の入門連載</a>の14本目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>HealthCare Innovation Group(HIG)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>所属の橋本です。</p><p>みなさん、お使いのiPhoneではダークモードorライトモードどちらに設定していますか。</p><p>それとも、Automaticに設定していますか。</p><img src="/images/20240430a/46491578-7e42-ab93-f1eb-793c2d70c499.jpeg" alt="" width="863" height="721" loading="lazy"><p>私は、単純に黒っぽい画面にテンションが上がるタイプなので常時ダークモードで使っています。</p><p>目に優しいのはダークモードではなく、ライトモードみたいな記事も拝見したことがあり、一度ダークモードからライトモードに変更したこともありますが、結局ダークモードに落ち着いています。</p><p>そんなiPhoneにおけるダークモード・ライトモードの切り替えをアプリ内から行う方法の例を紹介したいと思います。</p><h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><ul><li>OS：macOS Sonoma 14.4.1</li><li>Xcode：15.3 (15E204a)</li><li>Swift：5.10</li></ul><h1 id="ゴールイメージ"><a href="#ゴールイメージ" class="headerlink" title="ゴールイメージ"></a>ゴールイメージ</h1><p>今回作成する表示モードをピッカーで選択できる設定画面です。</p><img src="/images/20240430a/Simulator_Screen_Recording_-_iPhone_15_Pro_-_2024-04-12_at_23.16.27.gif" alt="Simulator_Screen_Recording_-_iPhone_15_Pro_-_2024-04-12_at_23.16.27.gif" width="240" height="520" loading="lazy"><h1 id="実装方法"><a href="#実装方法" class="headerlink" title="実装方法"></a>実装方法</h1><p>まず、切り替えたい３つの表示モードを列挙型で定義しておきます。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">DisplayMode</span>: <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> light</span><br><span class="line">    <span class="keyword">case</span> dark</span><br><span class="line">    <span class="keyword">case</span> system</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>続いて、アプリ全体に対して、表示モードを適用させたいと思います。</p><p>このときに、<a href="https://developer.apple.com/documentation/swiftui/view/preferredcolorscheme(_:)">.preferredColorScheme</a>と三項演算子を用いて条件分岐を行います。<br><code>displayMode</code>が<code>.system</code>のときに、nilを返すことでシステムのデフォルトの設定を反映できるようにしています。また、<code>displayMode</code>が<code>.system</code>ではないときは、<code>diplayMode</code>が’.dark’であるときは、<a href="https://developer.apple.com/documentation/swiftui/colorscheme">ColorScheme</a>の<code>.dark</code>が適用され、そうでないときは<code>.light</code>が適用されます。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.preferredColorScheme(displayMode <span class="operator">==</span> .system <span class="operator">?</span> nil : (displayMode <span class="operator">==</span> .dark <span class="operator">?</span> .dark : .light))</span><br></pre></td></tr></table></figure><p>これをエントリーポイントである<code>〜App.swift</code>ファイルに次のように記載します。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">displayModeApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="meta">@AppStorage</span>(<span class="string">&quot;displayMode&quot;</span>) <span class="keyword">var</span> displayMode: <span class="type">DisplayMode</span> <span class="operator">=</span> .system</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">                .preferredColorScheme(</span><br><span class="line">                    displayMode <span class="operator">==</span> .system <span class="operator">?</span> nil : (displayMode <span class="operator">==</span> .dark <span class="operator">?</span> .dark : .light)</span><br><span class="line">                )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後に、<code>Picker</code>を用いて、表示モードを変更させるViewを作成します。</p><p><code>Picker</code>の<code>selection:</code>パラメータには<code>$displayMode</code>がバインドさせています。これは、選択された値が直接<code>displayMode</code>プロパティに保存されることを意味します。<br>それぞれの<code>tag()</code>メソッドに<code>DisplayMode</code>の対応する値が設定されています。これにより、ユーザーがピッカーで選択した表示モードが、<code>DisplayMode</code>型の<code>displayMode</code>に適切に保存することが可能になります。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@AppStorage</span>(<span class="string">&quot;displayMode&quot;</span>) <span class="keyword">var</span> displayMode: <span class="type">DisplayMode</span> <span class="operator">=</span> .system</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationStack</span> &#123;</span><br><span class="line">            <span class="type">List</span> &#123;</span><br><span class="line">                <span class="type">Section</span>(<span class="string">&quot;App Settings&quot;</span>) &#123;</span><br><span class="line">                    <span class="type">Picker</span>(<span class="string">&quot;Theme Color&quot;</span>, selection: <span class="variable">$displayMode</span>) &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;Light&quot;</span>)</span><br><span class="line">                            .tag(<span class="type">DisplayMode</span>.light)</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;Dark&quot;</span>)</span><br><span class="line">                            .tag(<span class="type">DisplayMode</span>.dark)</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;System&quot;</span>)</span><br><span class="line">                            .tag(<span class="type">DisplayMode</span>.system)</span><br><span class="line">                    &#125;</span><br><span class="line">                    .pickerStyle(.automatic)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">&quot;Settings&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Done！</p><p>これでアプリ内から強制的に、ダークモード、ライトモードに変更させることができるようになりました。</p><p>触れていませんでしたが、@AppStoregeで端末内部に<code>DisplayMode</code>を記憶させているので、アプリキル後に立ち上げた際には、以前の設定値が保存されるようにもなっています。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>ダークモード・ライトモード・端末の設定のモードにアプリ内から切り替える方法を扱いました。</p><p>このようにダークモード、ライトモードを変えること自体は簡単ですが、それぞれの色を各画面に対応させるほうが大変ですね。色の管理にはAsset Catalogを使うことでダークモード、ライトモードの色を設定しておく方法がありますが、このあたりについても、うまいやり方があればご紹介したいと思います。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developer.apple.com/documentation/uikit/uisplitviewcontroller/1623194-displaymode">https://developer.apple.com/documentation/uikit/uisplitviewcontroller/1623194-displaymode</a></li><li><a href="https://developer.apple.com/documentation/swiftui/view/preferredcolorscheme(_:)">https://developer.apple.com/documentation/swiftui/view/preferredcolorscheme(_:)</a></li><li><a href="https://developer.apple.com/documentation/swiftui/colorscheme">https://developer.apple.com/documentation/swiftui/colorscheme</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">医療・ヘルスケア分野での案件や新規ビジネス創出を担う、2020年に誕生した事業部です。設立エピソードは<a href="https://note.future.co.jp/n/n8b57d4bf4604">未来報</a>の記事をご覧ください。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/iOS/">iOS</category>
      
      <category domain="https://future-architect.github.io/tags/Swift/">Swift</category>
      
      <category domain="https://future-architect.github.io/tags/SwiftUI/">SwiftUI</category>
      
      
      <comments>https://future-architect.github.io/articles/20240430a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GASでGoogleTasksとスプレッドシートを擬似的に双方向バインディングさせてみた</title>
      <link>https://future-architect.github.io/articles/20240426b/</link>
      <guid>https://future-architect.github.io/articles/20240426b/</guid>
      <pubDate>Thu, 25 Apr 2024 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20240408a/&quot;&gt;春の入門連載&lt;/a&gt;の13本目です。&lt;/p&gt;
&lt;p&gt;こんにちは。TIG所属の後藤喜斗です。&lt;/p&gt;
&lt;p&gt;同じプロジェクトで活躍されている&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20240408a/">春の入門連載</a>の13本目です。</p><p>こんにちは。TIG所属の後藤喜斗です。</p><p>同じプロジェクトで活躍されている<a href="/authors/%E4%BC%8A%E8%97%A4%E5%A4%AA%E6%96%89/">伊藤太斉さん</a> にお誘いいただき、初めて技術ブログを書かせていただきます。</p><h1 id="取り組みの経緯"><a href="#取り組みの経緯" class="headerlink" title="取り組みの経緯"></a>取り組みの経緯</h1><p>業務ではアプリチームに所属していて、フロントエンドの開発をする際にはVueを使用しています。</p><p>Vueでの開発に慣れていくにつれて、「Vue使いやすいな、よくできているなぁ。」と思うとともに、普段何気なく使っているスプレッドシートに対して、今まで感じたことのなかった不便さを感じるようになりました。</p><p>そして、その朧げながら見えてきた不便さの正体が、スプレッドシートでは双方向バインディングができないからではないか、と思い至りました。</p><p>そのため今回は、Vueを使うことで当たり前のように利便性を享受していた双方向バインディングについて改めて調べるとともに、実践編ということで、スプレッドシートに出力したGoogleTasksのタスク一覧と、GoogleTasks本体とを擬似的に双方向バインディングさせてみることにしました。</p><h1 id="そもそも双方向バインディングとは"><a href="#そもそも双方向バインディングとは" class="headerlink" title="そもそも双方向バインディングとは"></a>そもそも双方向バインディングとは</h1><p>まずは双方向バインディングについて調べてみます。Wikiには下記のように記載がありました。</p><h2 id="データバインディングとは"><a href="#データバインディングとは" class="headerlink" title="データバインディングとは"></a>データバインディングとは</h2><blockquote><p>データバインディングは、コンピュータプログラミングにおいて、データ（ソースオブジェクト）とそれに対応する対象要素（ターゲットオブジェクト）を結びつけ、データあるいは対象の変更を暗黙的に（自動的に）もう一方に反映（同期）することであり、またそれを実現する仕組みのことである。<br>データバインディングは特にGUIを持つアプリケーションソフトウェアの効率的な開発を目的とした技術であり、Model-View-ViewModel (MVVM) パターンの実現に必須の技術でもある。</p></blockquote><h3 id="単方向と双方向のデータバインディング"><a href="#単方向と双方向のデータバインディング" class="headerlink" title="単方向と双方向のデータバインディング"></a>単方向と双方向のデータバインディング</h3><blockquote><p>データバインディングには変更反映の方向性によって以下の2種類が存在する。<br>単方向バインディング (one-way): 「ソース ⇒ ターゲット」あるいは「ターゲット ⇒ ソース」のみの一方向の暗黙的反映<br>双方向バインディング (two-way): ソース ⇔ ターゲット間の双方向の暗黙的反映</p></blockquote><p>参考）<a href="https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0">データバインディング</a></p><p>名前の通りではあるのですが、改めてデータバインディングとは「データの変更があったときに一方から他方に同期を取る仕組み」です。すると、前出のスプレッドシートで双方向バインディングができないというのを具体的にいうと、「A1セルの変更がA2セルに反映される」かつ「A2セルの変更がA1セルに反映される」みたいな状態は作れない、ということです。</p><p>ちなみにこれだけなら、スプレッドシートの標準機能のマクロの記録を使って下記のようなGASのコードを自動生成して、編集時にトリガー実行すれば、誰でも簡単に実現可能なのですが、これだけだとあまり旨味がないですよね。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> spreadsheet = <span class="title class_">SpreadsheetApp</span>.<span class="title function_">getActive</span>();</span><br><span class="line">  spreadsheet.<span class="title function_">getRange</span>(<span class="string">&#x27;A1&#x27;</span>).<span class="title function_">activate</span>();</span><br><span class="line">  spreadsheet.<span class="title function_">getRange</span>(<span class="string">&#x27;A2&#x27;</span>).<span class="title function_">copyTo</span>(spreadsheet.<span class="title function_">getActiveRange</span>(), <span class="title class_">SpreadsheetApp</span>.<span class="property">CopyPasteType</span>.<span class="property">PASTE_NORMAL</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ここで、データバインディングの定義に出てきている「MVVMパターン」という用語も押さえておきます。</p><h2 id="MVVMパターン"><a href="#MVVMパターン" class="headerlink" title="MVVMパターン"></a>MVVMパターン</h2><blockquote><p>Model-View-ViewModel (MVVM、モデル・ビュー・ビューモデル) はUIを持つソフトウェアに適用されるソフトウェアアーキテクチャの一種である。<br>MVVMはソフトウェアをModel・View・ViewModelの3要素に分割する。プレゼンテーションとドメインを分離し（V-VM &#x2F; M）また宣言的Viewを分離し状態とマッピングを別にもつ（V &#x2F; VM）ことでソフトウェアの保守性・開発生産性を向上させる。<br>Model-View-ViewModelパターンはModel-View-Controller (MVC) パターンの派生であり、特にPresentation Model パターンを直接の祖先に持つ。</p></blockquote><p>参考）<a href="https://ja.wikipedia.org/wiki/Model_View_ViewModel">Model View ViewModel</a></p><p>MVVMパターンは、画面表示している項目（View）で使いたいデータと、システム側の処理（Model）で使いたいデータを、ViewModelがうまいこと相互に変換してくれる仕組みのようです。</p><p>すると確かに、MVVMパターンを実装する際に、ViewModelがデータ変換でデータバインディングをしてくれると良い感じに実装できそうです。前出のWikiに双方向バインディングがMVVMパターンで必須の技術だと書かれていたのも納得です。</p><p>これを踏まえると、先ほどのA1セルをA2セルにコピペする、みたいな使い方ではなく、「Viewにあたる表示部分のデータと、Modelにあたる何らかの処理機能を持つ部分のデータとを、自動的に連動させる仕組み」を作ったら、擬似的に双方向バインディングができているだけでなく、MVVMパターンのメリットも享受できていると言えそうです。</p><p>ということで前置きがかなり長くなりましたが、今回はModel側にあたるタスク管理機能はGoogleTasksを活用し、ViewとしてのスプレッドシートとGoogleTasksを自動でバインドさせる仕組みを作ってみました。</p><h1 id="今回作った機能"><a href="#今回作った機能" class="headerlink" title="今回作った機能"></a>今回作った機能</h1><p>スプレッドシートに出力されているGoogle TasksのTodoをスプレッドシート側からも自動で更新できる機能を、MVVMパターンを意識して下記のような構成で実装しました。</p><p>※シートからのタスク追加とタスクリストの変更は追加で実装が必要になり、主題からもそれていくので今回は割愛しました。</p><h3 id="View-Model"><a href="#View-Model" class="headerlink" title="View Model"></a>View Model</h3><p>Googleが公表している<a href="https://developers.google.com/tasks/reference/rest/v1/tasks?hl=ja">GoogleTasksのREST Resourceの形式</a>と、スプレッドシートに表示しているタスクリストの各列の項目を連携（擬似的に双方向バインディング）させました。</p><ul><li>スプレッドシートの値を取得し、GoogleTasksにセットする（View→Model）<ul><li>タスクリストの変更を検知<ul><li>変更のあった行の値を取得</li></ul></li><li>スプレッドシートの値をTaskにセットして更新</li></ul></li><li>GoogleTasksの情報をスプレッドシートに反映させる（Model→View）<ul><li>GoogleTaskの情報をスプレッドシートに自動的に反映させる（今回はトリガーを使用して定時実行）</li></ul></li></ul><p>構成図にするとこんなイメージです。</p><img src="/images/20240426b/構成図.png" alt="" width="842" height="552" loading="lazy"><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>スプレッドシートのタスクリスト表の各項目は以下の通り。</p><div class="scroll"><table><thead><tr><th align="left">タスクID</th><th align="left">タスクリスト名</th><th align="left">タスク名</th><th align="left">ステータス</th><th align="left">更新日時</th><th align="left">期限</th><th align="left">完了日</th><th align="left">メモ</th></tr></thead><tbody><tr><td align="left">abc…</td><td align="left">マイリスト</td><td align="left">タスク名</td><td align="left">completed</td><td align="left">2024&#x2F;04&#x2F;01</td><td align="left">2024&#x2F;04&#x2F;01</td><td align="left">2024&#x2F;04&#x2F;01</td><td align="left">説明</td></tr></tbody></table></div><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>GoogleTasksを利用。みなさんご存知のGoogleカレンダーとの連動だけでなく、最近はGoogleドキュメントやGmail、Googleチャットなどいろんなツールと連携して利用できて便利です。</p><h2 id="実装したGASのコード"><a href="#実装したGASのコード" class="headerlink" title="実装したGASのコード"></a>実装したGASのコード</h2><p>使い方は下記の通り。</p><ol><li>スプレッドシート上部メニューの、拡張機能&gt;Apps ScriptからGASのエディタを開いて下記を入力</li><li>Tasksサービスを使えるように権限設定</li><li>トリガーメニューから、以下のトリガーを設定<ol><li>onEditを編集時に実行</li><li>getGoogleTasksを定時実行<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// シート取得</span></span><br><span class="line"><span class="keyword">const</span> spreadSheet = <span class="title class_">SpreadsheetApp</span>.<span class="title function_">getActiveSpreadsheet</span>()</span><br><span class="line"><span class="keyword">const</span> sheetToDo = spreadSheet.<span class="title function_">getSheetByName</span>(<span class="string">&quot;GoogleTasks&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> lastRow = sheetToDo.<span class="title function_">getLastRow</span>()</span><br><span class="line"><span class="keyword">const</span> lastColumn = sheetToDo.<span class="title function_">getLastColumn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Taskの項目をSheetの列番号へ変換する</span></span><br><span class="line"><span class="comment">// スプレッドシートの列を並び替えたい時は、この項目を書き換えるだけでOK。</span></span><br><span class="line"><span class="keyword">const</span> getColNum = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">taskListName</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">status</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">updated</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">due</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">completed</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">notes</span>: <span class="number">7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//タスク取得オプション</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">showCompleted</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">showDeleted</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">showHidden</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下、SpreadSheetからGoogleTasksへ変更を反映</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sheetの変更を検知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onEdit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> editRow = spreadSheet.<span class="title function_">getActiveCell</span>().<span class="title function_">getRow</span>()</span><br><span class="line">    <span class="keyword">const</span> editColumn = spreadSheet.<span class="title function_">getActiveCell</span>().<span class="title function_">getColumn</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (spreadSheet.<span class="title function_">getActiveSheet</span>().<span class="title function_">getSheetId</span>() != sheetToDo.<span class="title function_">getSheetId</span>()) &#123;</span><br><span class="line">        <span class="comment">// GoogleTasks以外のシートを編集した場合は即リターン</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (editRow &lt;= lastRow &amp;&amp; editColumn &lt;= lastColumn) &#123;</span><br><span class="line">        <span class="comment">// Sheetに変更のあった行の値をGoogleTaskに反映する</span></span><br><span class="line">        <span class="title function_">setTaskFromSheet</span>(editRow)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sheetの値を取得し、GoogleTasksに反映する</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setTaskFromSheet</span>(<span class="params">rowNumber</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sheetの変更のあった行の値を取得</span></span><br><span class="line">    <span class="keyword">const</span> sheetTask = sheetToDo.<span class="title function_">getRange</span>(rowNumber, <span class="number">1</span>, <span class="number">1</span>, sheetToDo.<span class="title function_">getLastColumn</span>()).<span class="title function_">getValues</span>()[<span class="number">0</span>]</span><br><span class="line">    <span class="title class_">Logger</span>.<span class="title function_">log</span>(sheetTask)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// タスクリスト名からタスクリストIDを取得（以下でTasksのメソッドの呼び出しに使用）</span></span><br><span class="line">    <span class="keyword">const</span> taskListId = <span class="title function_">getTaskListId</span>(sheetTask[getColNum.<span class="property">taskListName</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GoogleTasksのタスクを取得</span></span><br><span class="line">    <span class="keyword">const</span> task = <span class="title class_">Tasks</span>.<span class="property">Tasks</span>.<span class="title function_">get</span>(taskListId, sheetTask[getColNum.<span class="property">id</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sheetの情報をGoogleTasksにセット</span></span><br><span class="line">    <span class="title function_">setSheetTask</span>(task, sheetTask)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GoogleTaskを更新</span></span><br><span class="line">    <span class="title class_">Tasks</span>.<span class="property">Tasks</span>.<span class="title function_">update</span>(task, taskListId, task.<span class="property">id</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * タスクリスト名からタスクリストIDを取得</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTaskListId</span>(<span class="params">taskListName</span>) &#123;</span><br><span class="line">    <span class="comment">// Sheetのタスクリスト名からタスクリストIDを取得</span></span><br><span class="line">    <span class="keyword">const</span> lists = <span class="title class_">Tasks</span>.<span class="property">Tasklists</span>.<span class="title function_">list</span>().<span class="title function_">getItems</span>()</span><br><span class="line">    <span class="keyword">let</span> taskListId</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lists.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lists[i].<span class="property">title</span> == taskListName) &#123;</span><br><span class="line">            taskListId = lists[i].<span class="property">id</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> taskListId</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sheetの情報をGoogleTasksにセット</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setSheetTask</span>(<span class="params">task, sheetTask</span>) &#123;</span><br><span class="line">    <span class="comment">// Sheetの値をTaskにセット</span></span><br><span class="line">    task.<span class="property">title</span> = sheetTask[getColNum.<span class="property">title</span>]</span><br><span class="line">    task.<span class="property">status</span> = sheetTask[getColNum.<span class="property">status</span>]</span><br><span class="line">    task.<span class="property">updated</span> = sheetTask[getColNum.<span class="property">updated</span>] ? sheetTask[getColNum.<span class="property">updated</span>].<span class="title function_">toISOString</span>() : <span class="string">&#x27;&#x27;</span></span><br><span class="line">    task.<span class="property">due</span> = sheetTask[getColNum.<span class="property">due</span>] ? sheetTask[getColNum.<span class="property">due</span>].<span class="title function_">toISOString</span>() : <span class="string">&#x27;&#x27;</span></span><br><span class="line">    task.<span class="property">completed</span> = sheetTask[getColNum.<span class="property">completed</span>] ? sheetTask[getColNum.<span class="property">completed</span>].<span class="title function_">toISOString</span>() : <span class="string">&#x27;&#x27;</span></span><br><span class="line">    task.<span class="property">notes</span> = sheetTask[getColNum.<span class="property">notes</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//　以下、GoogleTasksからSpreadSheetへタスク一覧を出力</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GoogleTasksのリストからタスクを取得してスプレッドシートにセット</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getGoogleTasks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// シート2行名以下をクリア</span></span><br><span class="line">    <span class="keyword">const</span> lastRow = sheetToDo.<span class="title function_">getLastRow</span>()</span><br><span class="line">    <span class="keyword">const</span> lastColumn = sheetToDo.<span class="title function_">getLastColumn</span>()</span><br><span class="line">    sheetToDo.<span class="title function_">getRange</span>(<span class="number">2</span>, <span class="number">1</span>, lastRow, lastColumn).<span class="title function_">clearContent</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Google Tasksからタスクリストを取得してTaskの情報をSheetに反映させる</span></span><br><span class="line">    <span class="keyword">const</span> taskList = 　<span class="title function_">getTaskLists</span>()</span><br><span class="line">    sheetToDo.<span class="title function_">getRange</span>(<span class="number">2</span>, <span class="number">1</span>, taskList.<span class="property">length</span>, lastColumn).<span class="title function_">setValues</span>(taskList)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GoogleTasksからタスクリストをすべて取得</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTaskLists</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> lists = <span class="title class_">Tasks</span>.<span class="property">Tasklists</span>.<span class="title function_">list</span>().<span class="title function_">getItems</span>()</span><br><span class="line">    <span class="keyword">let</span> taskLists = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lists.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        taskLists = taskLists.<span class="title function_">concat</span>(<span class="title function_">createTaskTable</span>(lists[i]))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> taskLists</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * タスクリストからタスクをすべて取得</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createTaskTable</span>(<span class="params">taskList</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tasks = <span class="title class_">Tasks</span>.<span class="property">Tasks</span>.<span class="title function_">list</span>(taskList.<span class="property">id</span>, options).<span class="title function_">getItems</span>()</span><br><span class="line">    <span class="keyword">const</span> table = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">    <span class="keyword">const</span> taskListName = taskList.<span class="property">title</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tasks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> task = tasks[i]</span><br><span class="line">        <span class="keyword">let</span> row = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">        row[getColNum.<span class="property">id</span>] = task.<span class="property">id</span></span><br><span class="line">        row[getColNum.<span class="property">taskListName</span>] = taskListName</span><br><span class="line">        row[getColNum.<span class="property">title</span>] = task.<span class="property">title</span></span><br><span class="line">        row[getColNum.<span class="property">status</span>] = task.<span class="property">status</span></span><br><span class="line">        row[getColNum.<span class="property">updated</span>] = task.<span class="property">updated</span> ? <span class="keyword">new</span> <span class="title class_">Date</span>(task.<span class="property">updated</span>) : <span class="string">&quot;&quot;</span></span><br><span class="line">        row[getColNum.<span class="property">due</span>] = task.<span class="property">due</span> ? <span class="keyword">new</span> <span class="title class_">Date</span>(task.<span class="property">due</span>) : <span class="string">&quot;&quot;</span></span><br><span class="line">        row[getColNum.<span class="property">completed</span>] = task.<span class="property">completed</span></span><br><span class="line">        row[getColNum.<span class="property">notes</span>] = task.<span class="property">notes</span></span><br><span class="line">        table.<span class="title function_">push</span>(row)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> table</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="動作イメージ"><a href="#動作イメージ" class="headerlink" title="動作イメージ"></a>動作イメージ</h2><p>スプレッドシートからの変更は編集をトリガーに実行されます。</p><img src="/images/20240426b/スプレッドシートから変更.gif" alt="スプレッドシートから変更.gif" width="1200" height="662" loading="lazy"><p>GoogleTasksからの変更は定時実行で最短1分ごとに取得できます。</p><img src="/images/20240426b/GoogleTasksから変更.gif" alt="GoogleTasksから変更.gif" width="1200" height="662" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>わざわざ自分で手を動かしてはみたものの、イベントの監視や値の反映などもVueを使えば裏で自動的にやってくれて、しかも簡単な記法でよりリアルタイムに同期される双方向バインディングが実装できると思うと、非常にありがたいですね。</p><p>春の入門連載では、同期の吉原さんが<a href="/articles/20240422a/">Vueを使ったオセロの制作</a>にも挑戦していますので、ぜひみてみてください。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Vue-js/">Vue.js</category>
      
      <category domain="https://future-architect.github.io/tags/GAS/">GAS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85/">初心者</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%83%97%E3%83%AC%E3%83%83%E3%83%89%E3%82%B7%E3%83%BC%E3%83%88/">スプレッドシート</category>
      
      
      <comments>https://future-architect.github.io/articles/20240426b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ドイツで開催された国際物流展示会「LogiMAT2024」を視察してきました!～その1～</title>
      <link>https://future-architect.github.io/articles/20240426a/</link>
      <guid>https://future-architect.github.io/articles/20240426a/</guid>
      <pubDate>Thu, 25 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;物流サービス事業部の&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>物流サービス事業部の<a href="/authors/%E5%BC%95%E7%B6%B2%E5%BA%B7%E6%9A%81/">引網康暁</a>です。ドイツのシュツットガルトで3月に開催された国際物流展示会「<a href="https://www.logimat-messe.de/en">LogiMAT2024</a>」を視察しました！3回のシリーズで現地での模様と注目のソリューションについてレポートします。</p><p><strong>おわりにウェビナーのご案内がありますので、最後までお読みいただけるとありがたいです！</strong></p><img src="/images/20240426a/GPTempDownload.JPG" alt="GPTempDownload.JPG" width="1200" height="1050" loading="lazy">▲広大な展示ホール、、、全部で10ホールもありました。<h1 id="LogiMAT2024とは"><a href="#LogiMAT2024とは" class="headerlink" title="LogiMAT2024とは"></a>LogiMAT2024とは</h1><p><strong>LogiMAT2024</strong>は、ヨーロッパを代表する<strong>物流ロボット・マテハン機器の国際展示会</strong>です。</p><p>物流自動化のグローバルな流れを受けて、従来からの物流機器に加えて、最新のテクノロジーやAI関連の展示も活発になっています。日本では、フューチャーアーキテクトも出展している<a href="https://www.logis-tech-tokyo.gr.jp/ltt/">国際物流総合展</a>が有名ですが、その約2倍の広大な展示面積に1600を超える多くの出展がありました。さながら、物流ロボットやマテハン機器のお祭りといった感じです。</p><img src="/images/20240426a/GOPR0020.JPG" alt="GOPR0020.JPG" width="1200" height="1050" loading="lazy"><p>▲<a href="https://www.logimat-messe.de/en/fair/about-logimat/logimat-daily">Logimat DAILY</a>という公式メディアから取材を受け、小林さんのインタビューが<a href="https://www.logimat-messe.de/sites/default/files/downloads/logimat-daily_2024_mittwoch__.pdf">記事（5ページ目！）</a>にも取り上げられました！</p><p>全体感として、物流業界が直面しているリアルな課題解決に向き合っている展示が多かった印象です。</p><p>前週にアメリカ・アトランタで開催された国際物流展示会「<a href="https://www.modexshow.com/">MODEX2024</a>」では、未来志向の<strong>ヒューマノイド型物流ロボット</strong>が展示されていたようですが、LogiMAT2024では<strong>自動フォークリフト</strong>や<strong>自動ハンドフォークリフト</strong>など、業界の人手不足に対応した、より地に足の着いたソリューションを多く見かけました。</p><p>それから、中国の物流ロボット企業のブースは人だかりとなっており、物流自動化マーケットでの中国企業の隆盛をあらためて強く感じました。また、中国企業と欧米企業が資本提携を含むアライアンスを形成している事例もあり、物流ロボットの<strong>フルラインアップ戦略</strong>が加速していることも実感しました。</p><h1 id="注目のソリューション"><a href="#注目のソリューション" class="headerlink" title="注目のソリューション"></a>注目のソリューション</h1><p>それでは、LogiMAT2024のBest Product（最優秀賞）の中から、注目のソリューションを解説します！</p><h2 id="Brightpick社のAutopicker"><a href="#Brightpick社のAutopicker" class="headerlink" title="Brightpick社のAutopicker"></a>Brightpick社のAutopicker</h2><p>Brightpick社は<strong>3Dビジョン</strong>をルーツとした物流ロボットを開発している企業です。同社が開発したAutopickerは、<strong>ACR</strong>(Autonomous Case-handling Robot : 自律走行ケースハンドリングロボット)と<strong>アーム型ロボット</strong>が一体となった、まさに<strong>ハイブリッド型物流ロボット</strong>です。</p><p>ロボットの右側は商品を格納するコンテナをピックアップします。ピックアップしたコンテナに格納されている商品を<strong>3Dビジョン</strong>で画像認識し、<strong>アーム型ロボット</strong>がその商品をロボットの左側に置かれたコンテナへ移動します。フロアーを自由に移動しながら、一連のピッキング作業を滞りなく進めることができるため、効率的なピッキングと高いスループットが期待できます。画像認識できる商品のSKU(Stock keeping Unit)を増やすことが課題のようです。</p><img src="/images/20240426a/brightpick.png" alt="brightpick.png" width="822" height="522" loading="lazy"><p>▲Brightpick社のAutopicker</p><p>LogiMAT2024の他の展示を見ましても、物流ロボットの特化した機能同士が融合することで、汎化した機能がより高まっていくトレンドを確認することができました。例えば、Quicktron社のQuickBinも、保管棚への入出庫を担う「親機」と、フロアー上の搬送を担う「子機」がハイブリッドに融合したシステムと言えます。</p><img src="/images/20240426a/QuickBin.png" alt="QuickBin.png" width="622" height="598" loading="lazy"><p>▲Quicktron社のQuickBin</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回のブログではLogiMAT2024～その1～をレポートしました。</p><p>前職でドイツ駐在員をしていた経験がありますので、第二の故郷への久しぶりの帰郷でした。ヨーロッパでは、さまざまな国籍や民族の方が、国境や言語の壁を越えて働いています。そのため、<strong>業務標準化・規格化・効率化</strong>が、日本以上に当たり前になっています。物流自動化の展示を通じて、その一端を今回のLogiMAT2024でも再確認することができました。</p><p>フューチャーアーキテクト物流サービス事業部では、おかげさまで物流自動化のコンサルティングのご相談をいただく機会も増えていますので、物流テクノロジーのリサーチ機能にますます磨きをかけていきます！</p><p>さて、5月29日（水）に、<a href="https://www.future.co.jp/futureinsightseminar/20240529/">LogiMAT2024の視察レポートウェビナー</a>を開催します！このブログではお伝えきれなかったコンテンツも発信しますので、物流DXにご関心がある方は奮ってご参加いただけると幸いです！</p><p><a href="https://www.future.co.jp/futureinsightseminar/20240529/">https://www.future.co.jp/futureinsightseminar/20240529/</a></p><img src="/images/20240426a/全体写真.jpg" alt="全体写真.jpg" width="1200" height="1699" loading="lazy">▲今回の視察に参加したメンバー（左から、石川さん、小林さん、引網）。<p>では、～その2～もお楽しみに！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%A5%AD%E7%95%8C%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3/">業界ドメイン</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AD%E3%83%9C%E3%83%83%E3%83%88/">ロボット</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%9E%E3%83%86%E3%83%AA%E3%82%A2%E3%83%AB%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AA%E3%83%B3%E3%82%B0/">マテリアルハンドリング</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%89%A9%E6%B5%81%E6%A5%AD%E7%95%8C/">物流業界</category>
      
      <category domain="https://future-architect.github.io/tags/LogiMAT2024/">LogiMAT2024</category>
      
      
      <comments>https://future-architect.github.io/articles/20240426a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>シェルスクリプトで固定長ファイルに区切り文字を入れてCSVに変換する</title>
      <link>https://future-architect.github.io/articles/20240425a/</link>
      <guid>https://future-architect.github.io/articles/20240425a/</guid>
      <pubDate>Wed, 24 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240425a/29069589_s.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/articles/20240408a/&quot;&gt;春の入門連載&lt;/a&gt;の12本目です。&lt;/p&gt;
&lt;h2</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240425a/29069589_s.jpg" alt="" width="640" height="480"><p><a href="/articles/20240408a/">春の入門連載</a>の12本目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。新卒2年目の山下です。</p><p>最近ちょっとした作業でシェルスクリプトを触る機会が増え、「固定長ファイルをCSVに変換する」といったややマニアックな文字列操作をすることがありました。</p><p>せっかくの機会ですので、利用コマンドやオプションをまとめました。</p><h2 id="本編"><a href="#本編" class="headerlink" title="本編"></a>本編</h2><h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul><li>Red Hat Enterprise Linux release 8.5 (Ootpa)<br>※利用する環境によってはマルチバイト文字を扱う際の挙動が異なる可能性があります。</li></ul><h3 id="利用するファイル"><a href="#利用するファイル" class="headerlink" title="利用するファイル"></a>利用するファイル</h3><p>例として、固定長Shift_JIS（SJIS）のファイルを可変調UTF-8に変換します。</p><p>入力の固定長ファイルは次の条件のものを想定しています。</p><ul><li>下記エスケープが必要な文字が含まれない<ul><li>改行コード（\nや\rなど）</li><li>カンマ（,）</li><li>クォート（”）</li></ul></li></ul><p><strong>変換前</strong></p><ul><li>文字コード：SJIS</li><li>レコード長：10Byte</li><li>カラム長：2Byte（全カラム固定）</li><li>※上記エスケープ文字や特殊文字の一部には対応出来ません</li></ul><figure class="highlight bash"><figcaption><span>hoge.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> hoge.txt</span><br><span class="line">ｱｲｳｴｵｶｷｸケ01234567８ｻｼｽｾｿﾀﾁﾂテabcdefghア</span><br></pre></td></tr></table></figure><p><strong>変換後</strong></p><ul><li>文字コード：UTF-8</li><li>CSV</li></ul><figure class="highlight bash"><figcaption><span>result.csv</span></figcaption><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> result.csv</span><br><span class="line">ｱｲ,ｳｴ,ｵｶ,ｷｸ,ケ</span><br><span class="line">01,23,45,67,８</span><br><span class="line">ｻｼ,ｽｾ,ｿﾀ,ﾁﾂ,テ</span><br><span class="line">ab,<span class="built_in">cd</span>,ef,gh,ア</span><br></pre></td></tr></table></figure><h3 id="①文字コードの変更"><a href="#①文字コードの変更" class="headerlink" title="①文字コードの変更"></a>①文字コードの変更</h3><p>はじめに、Bashで適切に文字を読み込めるよう、文字コードの変換を行います。</p><p><code>iconv</code>コマンドを利用し<code>-f</code>で指定した文字コードを<code>-t</code>で指定した文字コードに変換し標準出力することが可能です。</p><ul><li><p>変換前のファイル</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> hoge.txt <span class="comment">#-- SJISをUTF-8と解釈して出力しているため文字化けしている</span></span><br><span class="line">���������P01234567�W�������eabcdefgh�A</span><br></pre></td></tr></table></figure></li><li><p>iconvで文字コードを変換後のファイル</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iconv -f SJIS -t UTF8 hoge.txt &gt;&gt; hogehoge.txt <span class="comment">#--リダイレクトすることでhogehoge.txtに出力</span></span><br><span class="line">ｱｲｳｴｵｶｷｸケ01234567８ｻｼｽｾｿﾀﾁﾂテabcdefghア</span><br></pre></td></tr></table></figure></li></ul><h3 id="②改行付与"><a href="#②改行付与" class="headerlink" title="②改行付与"></a>②改行付与</h3><h4 id="fold"><a href="#fold" class="headerlink" title="fold"></a>fold</h4><p>最も基本的な改行付与のコマンドは<code>fold</code>コマンドです。</p><p>指定した値で改行を増やし標準出力します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fold</span> -option filepath</span><br></pre></td></tr></table></figure><div class="scroll"><table><thead><tr><th>オプション</th><th>概要</th></tr></thead><tbody><tr><td>-b</td><td>バイト数で数える</td></tr><tr><td>-w</td><td>幅で数える</td></tr></tbody></table></div><h6 id="バイト数区切りで改行付与する場合"><a href="#バイト数区切りで改行付与する場合" class="headerlink" title="バイト数区切りで改行付与する場合"></a>バイト数区切りで改行付与する場合</h6><p><code>-b</code>で指定したバイト数単位で改行が付与されます。</p><p>今回の例の場合、前段で文字コード変換（SJIS→UTF-8）をしたため、<br>半角カナ<code>SJIS：1Byte</code>や全角文字<code>SJIS：2Byte</code>のほとんどは<code>UTF-8：3Byte</code>にByte数が変更されるため、カラムずれがおきています。</p><p>（現環境では文字の途中で改行コードが挿入されることはなく、10Byteを超える場合は手前の文字までが1行となっています。）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">fold</span> -b10 hogehoge.txt</span><br><span class="line">ｱｲｳ</span><br><span class="line">ｴｵｶ</span><br><span class="line">ｷｸケ0</span><br><span class="line">1234567８</span><br><span class="line">ｻｼｽ</span><br><span class="line">ｾｿﾀ</span><br><span class="line">ﾁﾂテa</span><br><span class="line">bcdefghア</span><br></pre></td></tr></table></figure><h6 id="文字列幅区切りで改行付与する場合"><a href="#文字列幅区切りで改行付与する場合" class="headerlink" title="文字列幅区切りで改行付与する場合"></a>文字列幅区切りで改行付与する場合</h6><p>文字列幅は<code>全角：2</code>、 <code>半角：1</code>でカウントされます。</p><p>SJISの半角文字は<code>1文字:1Byte</code>、<code>全角:2Byte</code>ため、文字列幅基準で改行付与することでUTF-8に変換した後でも想定するレコード長で区切ることが出来ました。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">fold</span> -w10 hogehoge.txt</span><br><span class="line">ｱｲｳｴｵｶｷｸケ</span><br><span class="line">01234567８</span><br><span class="line">ｻｼｽｾｿﾀﾁﾂテ</span><br><span class="line">abcdefghア</span><br></pre></td></tr></table></figure><h6 id="文字数区切りで改行付与する場合"><a href="#文字数区切りで改行付与する場合" class="headerlink" title="文字数区切りで改行付与する場合"></a>文字数区切りで改行付与する場合</h6><p>参考程度ですが、文字数区切りで改行を付与する方法も記載します。</p><p><code>grep -o</code>を利用して<code>.</code>に当てはまる文字を1文字ずつ出力し、指定の文字数で改行を付与しています。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">for</span> char <span class="keyword">in</span> $(grep -o . hogehoge.txt) ; <span class="keyword">do</span> <span class="built_in">echo</span> -n <span class="variable">$char</span>; count=$(( count + <span class="number">1</span> )); <span class="keyword">if</span> [ <span class="variable">$count</span> -eq 9 ]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;&quot;</span>; count=0; <span class="keyword">fi</span>; <span class="keyword">done</span></span><br><span class="line">ｱｲｳｴｵｶｷｸケ</span><br><span class="line">01234567８</span><br><span class="line">ｻｼｽｾｿﾀﾁﾂテ</span><br><span class="line">abcdefghア</span><br></pre></td></tr></table></figure><h3 id="③カラム区切り文字の挿入"><a href="#③カラム区切り文字の挿入" class="headerlink" title="③カラム区切り文字の挿入"></a>③カラム区切り文字の挿入</h3><p>次に区切り文字を挿入してカラム分割を行います。</p><h4 id="カラム単位で個別区切り"><a href="#カラム単位で個別区切り" class="headerlink" title="カラム単位で個別区切り"></a>カラム単位で個別区切り</h4><p><code>sed</code>コマンドの<code>-e</code>オプションを利用して指定した文字数で個別に<code>,（カンマ）</code>を挿入する方法です。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">while</span> <span class="built_in">read</span> line ;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$line</span> | sed -e <span class="string">&#x27;s/./&amp;,/8&#x27;</span> -e <span class="string">&#x27;s/./&amp;,/6&#x27;</span> -e <span class="string">&#x27;s/./&amp;,/4&#x27;</span> -e <span class="string">&#x27;s/./&amp;,/2&#x27;</span> ; <span class="keyword">done</span> &lt; hogehoge.txt</span><br><span class="line">ｱｲ,ｳｴ,ｵｶ,ｷｸ,ケ</span><br><span class="line">01,23,45,67,８</span><br><span class="line">ｻｼ,ｽｾ,ｿﾀ,ﾁﾂ,テ</span><br><span class="line">ab,<span class="built_in">cd</span>,ef,gh,ア</span><br></pre></td></tr></table></figure><h4 id="正規表現を利用した文字数区切り"><a href="#正規表現を利用した文字数区切り" class="headerlink" title="正規表現を利用した文字数区切り"></a>正規表現を利用した文字数区切り</h4><p>文字列を1文字ずつループしながら下記処理を実行しています。</p><ol><li>全半角を識別</li><li>半角文字の場合は2文字、全角文字の場合は1文字間隔で区切り文字<code>,（カンマ）</code>を挿入</li><li>行の末尾で改行</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  count=0</span><br><span class="line">  <span class="keyword">for</span> ((i=<span class="number">0</span>; i&lt;<span class="variable">$&#123;#line&#125;</span>; i++)); <span class="keyword">do</span></span><br><span class="line">    char=<span class="string">&quot;<span class="variable">$&#123;line:$i:1&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;#line&#125;</span> = $(( i + <span class="number">1</span> )) ]]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$char</span></span><br><span class="line">      <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [[ -n $(<span class="built_in">echo</span> <span class="variable">$char</span> | grep -P <span class="string">&quot;[ｦ-ﾝ]&quot;</span>) ]] || [[ -n $(<span class="built_in">echo</span> <span class="variable">$char</span> | grep -E <span class="string">&quot;[0-9A-Za-z]&quot;</span>) ]]; <span class="keyword">then</span> <span class="comment">#ASCII or 半角カナは2文字カウントしたらカンマを挿入</span></span><br><span class="line">        count=$((count + <span class="number">1</span>))</span><br><span class="line">      <span class="keyword">if</span> [[ <span class="variable">$count</span> = 2 ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$char</span>,&quot;</span></span><br><span class="line">        count=0</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="variable">$char</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$char</span>,&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span> &lt; hogehoge.txt &gt; result.csv</span><br><span class="line"></span><br><span class="line">------ 結果 ------</span><br><span class="line">ｱｲ,ｳｴ,ｵｶ,ｷｸ,ケ</span><br><span class="line">01,23,45,67,８</span><br><span class="line">ｻｼ,ｽｾ,ｿﾀ,ﾁﾂ,テ</span><br><span class="line">ab,<span class="built_in">cd</span>,ef,gh,ア</span><br></pre></td></tr></table></figure><p>ようやくCSVに変換することが出来ました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Bashの標準機能のみで全半角混在の文字列をキレイに分割することは少し難しいですが、簡単なレイアウトであれば上記を流用することでカラム分割が可能になりました。</p><p>また、今回調べる中で利用するバージョンやディストリビューションによって挙動が異なる事を知りました。</p><p>例えばfoldコマンドを使った改行をubuntuで試すと、下記のように文字化けが起こります。（マルチバイト文字の扱いが異なることが原因のようです。）</p><ul><li><code>Description:    Ubuntu 22.04.2 LTS</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">fold</span> -w10 hogehoge.txt</span><br><span class="line">ｱｲｳ�</span><br><span class="line">��ｵｶ�</span><br><span class="line">�ｸｹｺ</span><br><span class="line">0123456789</span><br><span class="line">ｻｼｽ�</span><br><span class="line">��ｿﾀ�</span><br><span class="line">�ﾂﾃﾄ</span><br><span class="line">abcdefghij</span><br></pre></td></tr></table></figure><p>今回の手法は汎用的に利用できるものでは無いかも知れませんが、マルチバイト文字のByte数が変わると分割や文字カウント方法が少し複雑になり単純計算できない事も多くまとまった内容は少ないです。参考になることがあれば嬉しいです。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://future-architect.github.io/articles/20210329/">https://future-architect.github.io/articles/20210329/</a></li><li><a href="https://www.gnu.org/software/grep/manual/grep.html">https://www.gnu.org/software/grep/manual/grep.html</a></li><li><a href="https://gihyo.jp/book/2017/978-4-7741-8694-8">https://gihyo.jp/book/2017/978-4-7741-8694-8</a></li></ul><p>アイキャッチ画像は<a href="https://www.photo-ac.com/main/detail/29069589">磯の香り - No: 29069589｜写真AC</a> を利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/ShellScript/">ShellScript</category>
      
      <category domain="https://future-architect.github.io/tags/CSV/">CSV</category>
      
      <category domain="https://future-architect.github.io/tags/Linux/">Linux</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%9B%BA%E5%AE%9A%E9%95%B7/">固定長</category>
      
      
      <comments>https://future-architect.github.io/articles/20240425a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>p5.jsで好きなプログラミング言語発表ドラゴンを作ろうとした</title>
      <link>https://future-architect.github.io/articles/20240424a/</link>
      <guid>https://future-architect.github.io/articles/20240424a/</guid>
      <pubDate>Tue, 23 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20240408a/">春の入門連載2024</a>の11日目です。</p><p>SAIGの小橋です。JavaScriptライブラリの1つであるp5.jsに入門します。</p><p><a href="https://p5js.jp/">日本語版公式ページ</a>によれば、p5.jsとは…</p><blockquote><p>クリエイティブなコーディングのためのJavaScriptライブラリで、 アーティスト、デザイナー、教育者、初心者、その他誰にとっても、コーディングを身近で包括的なものにすることに焦点を当てています。</p></blockquote><p>…です。もともとProcessingという言語がグラフィックスやアニメーションに強いもので、それをJavaScriptから使えるようにしたのがp5.jsというライブラリです。</p><p><a href="https://editor.p5js.org/">Webエディタ</a>があるので、最初はここの上で色々試してみるのも良いでしょう。</p><p>今回は、<a href="https://p5js.org/get-started/">公式ページの「はじめに」</a>で説明されている通り、CDNの上にあるp5.jsライブラリを読み込むことにします。後述の通り、ローカルでWebサーバーを立てて表示しています。</p><h1 id="作ったもの"><a href="#作ったもの" class="headerlink" title="作ったもの"></a>作ったもの</h1><p>今回は、ネット上で最近急によく見かけるようになった「<a href="https://www.youtube.com/watch?v=OnCFEo_pXaY">好きな惣菜発表ドラゴン</a>」を真似て、流行りに乗っかって「好きなプログラミング言語発表ドラゴン」の簡易版を作ります。</p><p>画像の表示、線分や四角形の描画、テキストの表示、といった感じで、基本的な機能を使っています。</p><img src="/images/20240424a/Animation.gif" alt="Animation.gif" width="1200" height="675" loading="lazy"><p>JavaScriptのファイルは以下の通りです。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">prev_unit = -<span class="number">1</span>;</span><br><span class="line">random_lang_list = [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;C#&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;Go&quot;</span>, <span class="string">&quot;Visual Basic&quot;</span>, <span class="string">&quot;アセンブリ言語&quot;</span>];</span><br><span class="line">random_lang = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load the image.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">preload</span>(<span class="params"></span>) &#123;</span><br><span class="line">    img = <span class="title function_">loadImage</span>(<span class="string">&#x27;fantasy_dragon_white_flipped.png&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">createCanvas</span>(<span class="number">1280</span>, <span class="number">720</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ms = <span class="title function_">millis</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 背景を白に設定。前フレームの描画を上書きして消す</span></span><br><span class="line">  <span class="title function_">background</span>(<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ドラゴンを表示</span></span><br><span class="line">  base_offset = <span class="number">300</span>;</span><br><span class="line">  <span class="keyword">if</span> (ms &lt;= <span class="number">500</span>) &#123;</span><br><span class="line">    right_offset = <span class="number">2</span> * base_offset;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">500</span> &lt; ms &amp;&amp; ms &lt;= <span class="number">1000</span>) &#123;</span><br><span class="line">    right_offset = base_offset;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    right_offset = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">image</span>(img, width/<span class="number">2</span> + right_offset, (height-width/<span class="number">2</span>)/<span class="number">2</span>, width/<span class="number">2</span>, width/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 吹き出しの線を表示</span></span><br><span class="line">  <span class="comment">// 塗りつぶしをオフにして長方形を表示</span></span><br><span class="line">  <span class="title function_">noFill</span>();</span><br><span class="line">  <span class="title function_">strokeWeight</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="title function_">rect</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">450</span>, <span class="number">300</span>);</span><br><span class="line">  <span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 長方形で右側の一部の線を消す</span></span><br><span class="line">  <span class="title function_">erase</span>();</span><br><span class="line">  dx=<span class="number">5</span>;</span><br><span class="line">  <span class="title function_">rect</span>(<span class="number">50</span>+<span class="number">450</span>-dx, <span class="number">300</span>/<span class="number">4</span>, dx*<span class="number">2</span>, <span class="number">300</span>/<span class="number">4</span>);</span><br><span class="line">  <span class="title function_">noErase</span>();</span><br><span class="line">  <span class="comment">// 残りの2本の線を表示</span></span><br><span class="line">  <span class="title function_">line</span>(<span class="number">50</span>+<span class="number">450</span>, <span class="number">300</span>/<span class="number">4</span>, <span class="number">600</span>, <span class="number">200</span>);</span><br><span class="line">  <span class="title function_">line</span>(<span class="number">50</span>+<span class="number">450</span>, <span class="number">300</span>/<span class="number">2</span>, <span class="number">600</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 言語名を1秒に1回、ランダムに選択する</span></span><br><span class="line">  unit_ms = <span class="number">1000</span></span><br><span class="line">  now_unit = <span class="title class_">Math</span>.<span class="title function_">floor</span>(ms / unit_ms)</span><br><span class="line">  <span class="keyword">if</span> (ms &gt;= <span class="number">3000</span> &amp;&amp; now_unit != prev_unit) &#123;</span><br><span class="line">    random_lang = random_lang_list[(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * random_lang_list.<span class="property">length</span>))];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">textSize</span>(<span class="number">40</span>);</span><br><span class="line">  <span class="title function_">textStyle</span>(<span class="variable constant_">BOLD</span>);</span><br><span class="line">  <span class="title function_">textAlign</span>(<span class="variable constant_">CENTER</span>, <span class="variable constant_">CENTER</span>);</span><br><span class="line">  <span class="title function_">text</span>(random_lang, <span class="number">50</span>+<span class="number">450</span>/<span class="number">2</span>, <span class="number">50</span>+<span class="number">300</span>/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  prev_unit = now_unit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTMLファイルは上記のJavaScriptを読み込むだけの単純なものなので、省略します。</p><h1 id="はまったポイント"><a href="#はまったポイント" class="headerlink" title="はまったポイント"></a>はまったポイント</h1><p>シンプルなプログラムですが、いくつか詰まった点があったのでメモに残しておきます。</p><p>ちなみに、「p5.js 機能名」で検索したときに、Stack Overflowなどに加えて、先述した<a href="https://editor.p5js.org/">Webエディタ</a>で書かれたコードが見つかることもあります。Webエディタでは書いたコードをWeb上に公開できるので、検索時にヒットする可能性があります。公式ドキュメントでは無いので品質には注意する必要がありますが、参考にするのには良いのではないでしょうか。</p><h2 id="画像を表示するためには、ローカルでWebサーバーを立てる必要がある"><a href="#画像を表示するためには、ローカルでWebサーバーを立てる必要がある" class="headerlink" title="画像を表示するためには、ローカルでWebサーバーを立てる必要がある"></a>画像を表示するためには、ローカルでWebサーバーを立てる必要がある</h2><p>単純な四角形や円を描くだけならば、HTMLファイルをブラウザで開くだけでも動きます。</p><p>しかし、PCの内部にある画像を表示しようとすると、この方法ではうまく動かなくなります。ブラウザは <code>Loading...</code> と表示されたまま止まって見えます。これは、画像を読み込もうとしているpreload()関数が終了せずにエラーになっているせいです。デベロッパーツールを見ると下記のようなエラーが表示されていました。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Access to fetch at <span class="string">&#x27;file:///C:/path/to/file/filename.png&#x27;</span> from origin <span class="string">&#x27;null&#x27;</span> has been blocked by CORS policy: Cross origin requests are only supported <span class="keyword">for</span> protocol schemes: http, data, isolated-app, chrome-extension, chrome, https, chrome-untrusted.</span><br></pre></td></tr></table></figure><p><a href="https://github.com/processing/p5.js/wiki/Local-server">公式のこのページ</a>にも記載のある通り、この”cross-origin” エラーを回避するためにはローカルでWebサーバーを立てる必要があります。公式ページでは「Web Server for Chrome」のChrome拡張機能を使うように案内していましたが、現在は使えないようです。後継と思われる「<a href="https://simplewebserver.org/">Simple Web Server</a>」を使用しました。ダウンロードしてインストールするだけなので、導入は簡単です。</p><h2 id="draw-は1-60秒に1回実行される関数"><a href="#draw-は1-60秒に1回実行される関数" class="headerlink" title="draw() は1&#x2F;60秒に1回実行される関数"></a>draw() は1&#x2F;60秒に1回実行される関数</h2><p><a href="https://p5js.org/reference/#/p5/draw">公式ページ</a>にも明記されていますが、<code>draw()</code>は自動的に一定頻度で呼び出されて実行される関数です（フレームレートは変更可能です）。</p><p>ドラゴンを段階的に左に移動させつつ表示しようとしたときに、最初は<code>sleep()</code>関数のようなもので一時的に更新を停止するのかと思いましたが、<code>sleep()</code>関数はありませんでした。考えてみれば、<code>draw()</code>が一定頻度で実行されるので、表示を一時的に止めることはできないのでした。</p><p><code>millis()</code>を使うと、プログラム実行開始からの時間を取得できるので、それを使って条件分岐させることにしました。</p><h2 id="画像の左右反転"><a href="#画像の左右反転" class="headerlink" title="画像の左右反転"></a>画像の左右反転</h2><p>今回素材で使った いらすとやのドラゴンの絵はもともと右を向いていました。今回の用途では、左向きで表示させたいところです。</p><p>調べてみると、画像を左右反転させるためには、<code>scale()</code>を使う方法や<code>translate()</code>を使う方法がありそうでしたが、なかなか複雑そうだったので、諦めて手元の画像編集で左右反転しました。</p><p>ただし、つい最近の2024年3月に新しい機能がライブラリに追加され、それを使うと簡単に左右反転できるようになったようです。<a href="https://qiita.com/youtoy/items/9f8e58820c881037db4b">こちら</a>を参照ください。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>JavaScriptのライブラリp5.jsを触ってみました。</p><p>実はp5.jsには p5.sound という音声を扱うライブラリがあり、本格的な音声信号処理ができる機能を備えています。例えば簡単に<a href="https://p5js.org/examples/sound-frequency-spectrum.html">周波数スペクトルを表示する</a>ことができるようです。音の処理もやってみたかったのですが、次の機会に譲ることにします。</p><p>p5.jsには<a href="https://p5js.org/examples/">例もかなり充実している</a>ので、眺めているだけでも楽しいですね。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Processing/">Processing</category>
      
      <category domain="https://future-architect.github.io/tags/p5-js/">p5.js</category>
      
      
      <comments>https://future-architect.github.io/articles/20240424a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ESP32とGoogleSpreadSheetで始めるIoT入門</title>
      <link>https://future-architect.github.io/articles/20240423a/</link>
      <guid>https://future-architect.github.io/articles/20240423a/</guid>
      <pubDate>Mon, 22 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは！流通・製造サービス事業部所属の高世です。&lt;/p&gt;
&lt;p&gt;こちらは&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！流通・製造サービス事業部所属の高世です。</p><p>こちらは<a href="/articles/20240408a/">春の入門連載2024</a>の10記事目です。</p><p>IoTという言葉が話題になり始めてから、かなりの時間が経ちました。私自身も身近なIoTに関心を持っていろいろ取り組んできましたが、ソフトウェアだけでなくハードウェアの知識も必要になるなど、初めて挑戦する方にとっては敷居が高いと感じることがしばしばありました。<br>特にインターネットに接続するあたりのインフラ周辺は、選択肢が多様で、その分複雑であったり費用がかかったりする場合もあります。</p><p>この記事では、そうしたIoTの問題点をGoogleSpreadSheetを利用することで、手軽に実装できた経験を共有したいと思います。</p><h1 id="今回やること"><a href="#今回やること" class="headerlink" title="今回やること"></a>今回やること</h1><img src="/images/20240423a/image.png" alt="" width="1200" height="607" loading="lazy"><p>今回はESP32というマイコンを利用して温度センサから定期的に温度を計測し、その情報をGoogleSpreadSheet上に保持するシステムを構築します。</p><p>温度センサにはDS18B20という安価で入手性の良いセンサを使用し、冷蔵庫内と冷蔵庫の外（室内）の2つのセンサを設置します。</p><h2 id="ESP32とは"><a href="#ESP32とは" class="headerlink" title="ESP32とは"></a>ESP32とは</h2><img src="/images/20240423a/115673.jpg" alt="" width="640" height="480" loading="lazy"><p><a href="https://akizukidenshi.com/catalog/g/g115673/">https://akizukidenshi.com/catalog/g/g115673/</a></p><p>今回使用するESP32は、いわゆるマイコン（マイクロコントローラー）と呼ばれるもので、PCほど高尚な処理はできませんが、プログラムを書き込むことで決められたInputから何かしらのOutputを出すことができます。</p><p>その中でもESP32はWi-FiやBluetoothなどの無線通信機能を搭載し、IoTデバイスの開発などによく用いられます。</p><p>またArduino IDEと互換性があるのも強みです。Arduino IDEで利用できる様々なライブラリを用いることでセンサーやデバイスとの接続を容易にします。</p><h2 id="DS18B20とは"><a href="#DS18B20とは" class="headerlink" title="DS18B20とは"></a>DS18B20とは</h2><img src="/images/20240423a/image_2.png" alt="" width="438" height="371" loading="lazy"><p>今回使用する温度センサです。<br>Amazonにて5本で1000円というかなり安価に手に入りますし、1-wireインターフェースといって1本の信号線でデータのやりとりができたり、複数のDS18B20を1本の信号線で接続して制御できたりなど使い勝手がかなり良かったです。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>今回のシステムを構築するにあたっての前提条件としてはArduino IDEでESP32を用いたDS18B20の開発環境が整えられていることです。</p><p>検索すると多くの記事がでてきますが、私は以下の記事を参考にしました。</p><ul><li><a href="https://interface.cqpub.co.jp/esp32-arduino-ide-2/">ESP32開発ボード Arduino IDE開発環境の構築</a></li><li><a href="https://qiita.com/takudooon/items/f6386a45860004aa37e7">温度センサー DS18B20をESP32で動かすメモ</a></li></ul><h1 id="温度センサ-DS18B20-で温度を測ってみる"><a href="#温度センサ-DS18B20-で温度を測ってみる" class="headerlink" title="温度センサ(DS18B20)で温度を測ってみる"></a>温度センサ(DS18B20)で温度を測ってみる</h1><p>温度センサ(DS18B20)を使って温度を測ってみます。</p><p>DS18B20から3本の線が出ており、電源線(赤)・信号線(黄)・GND線(黒)となっております。</p><p>ブレッドボートに挿せるようにピンヘッダをハンダ付けしてあげて、ESP32と接続します。</p><p>余談ですがハンダ付けしたあとの保護のためにホットボンドを利用しています（左下画像）。</p><img src="/images/20240423a/image_3.png" alt="" width="704" height="316" loading="lazy"><p>シンプルな1センサに対しての温度計測と表示を行ってみます。</p><figure class="highlight c++"><figcaption><span>温度計測テストプログラム</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;OneWire.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;DallasTemperature.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1-Wire設定</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ONE_WIRE_BUS 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1-Wire接続インスタンスの作成</span></span><br><span class="line"><span class="function">OneWire <span class="title">oneWire</span><span class="params">(ONE_WIRE_BUS)</span></span>;</span><br><span class="line"><span class="function">DallasTemperature <span class="title">sensors</span><span class="params">(&amp;oneWire)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// シリアル通信の設定</span></span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 1-Wire接続スタート</span></span><br><span class="line">  <span class="built_in">pinMode</span>(ONE_WIRE_BUS, INPUT_PULLUP);</span><br><span class="line">  sensors.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">  Serial.<span class="built_in">print</span>(<span class="string">&quot;温度測定中...&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// デバイスに対して温度計測をリクエスト</span></span><br><span class="line">  sensors.<span class="built_in">requestTemperatures</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 計測結果をプリント</span></span><br><span class="line">  Serial.<span class="built_in">println</span>(sensors.<span class="built_in">getTempCByIndex</span>(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ソースは<a href="https://github.com/milesburton/Arduino-Temperature-Control-Library/blob/master/examples/Simple/Simple.ino">こちらのサンプルコード</a>を参考にしました。<br>ちょっと変更を入れている点としては、<code>pinMode(ONE_WIRE_BUS, INPUT_PULLUP)</code>によって1-Wireの信号線に対して、ESP32の内蔵プルアップを設定しています。</p><p>実際に書き込みを行い、Arduino IDEのシリアルモニタで見てみます。</p><img src="/images/20240423a/sokutei2.gif" alt="sokutei2.gif" width="645" height="321" loading="lazy"><p>温度の変化がわかるようにセンサ部を指で温めています。<br>最初<code>26.44度</code>からスタートし、指で触り始めると温度が上がっていくことを確認しました。</p><h1 id="GoogleSpreadSheetでWEBアプリをデプロイする"><a href="#GoogleSpreadSheetでWEBアプリをデプロイする" class="headerlink" title="GoogleSpreadSheetでWEBアプリをデプロイする"></a>GoogleSpreadSheetでWEBアプリをデプロイする</h1><p>GoogleSpreadSheetでPOSTリクエストを受け付けるWEBアプリを作っていきます。</p><p>まずスプシを作成し、拡張機能&gt;Apps ScriptからGASを作成します。</p><img src="/images/20240423a/image_4.png" alt="" width="783" height="249" loading="lazy"><p>今回はESP32から計測した温度データをJSONに詰めて、POSTリクエストを飛ばします。</p><p>送信するJSONをあらかじめ以下のように定義しておきます。</p><p>今回は2つのセンサからの温度情報を送るため、温度が問題なく取得できたことを確認する属性<code>success</code>と温度情報<code>temp</code>を持つオブジェクトをリストで持つように設計しました。</p><figure class="highlight json"><figcaption><span>ESP32から送信するJSONデータ</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;temp&quot;</span><span class="punctuation">:</span> <span class="number">1.23</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;temp&quot;</span><span class="punctuation">:</span> <span class="number">2.34</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>上記のJSONを受け取ってスプシにデータを挿入するスクリプトを書きます。</p><p>空行を挿入して、そこに受信した温度データを書き込む仕様としました。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doPost</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> params = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">postData</span>.<span class="title function_">getDataAsString</span>()); </span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sheet = <span class="title class_">SpreadsheetApp</span>.<span class="title function_">getActiveSpreadsheet</span>().<span class="title function_">getSheets</span>()[<span class="number">0</span>];</span><br><span class="line">  sheet.<span class="title function_">insertRowBefore</span>(<span class="number">2</span>);</span><br><span class="line">  sheet.<span class="title function_">getRange</span>(<span class="number">2</span>, <span class="number">1</span>).<span class="title function_">setValue</span>((<span class="keyword">new</span> <span class="title class_">Date</span>).<span class="title function_">toLocaleString</span>(<span class="string">&#x27;ja-JP&#x27;</span>));</span><br><span class="line">  sheet.<span class="title function_">getRange</span>(<span class="number">2</span>, <span class="number">2</span>).<span class="title function_">setValue</span>(params.<span class="property">data</span>[<span class="number">0</span>].<span class="property">success</span> ? params.<span class="property">data</span>[<span class="number">0</span>].<span class="property">temp</span> : <span class="string">&quot;err&quot;</span>);</span><br><span class="line">  sheet.<span class="title function_">getRange</span>(<span class="number">2</span>, <span class="number">3</span>).<span class="title function_">setValue</span>(params.<span class="property">data</span>[<span class="number">1</span>].<span class="property">success</span> ? params.<span class="property">data</span>[<span class="number">1</span>].<span class="property">temp</span> : <span class="string">&quot;err&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">ContentService</span>.<span class="title function_">createTextOutput</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>それではこちらのPOSTリクエストを受け付けるWEBアプリをデプロイします。</p><p>デプロイ方法は簡単で以下手順でボタン押下するだけでURLが発行されます。</p><img src="/images/20240423a/image_5.png" alt="" width="1110" height="443" loading="lazy"><img src="/images/20240423a/image_6.png" alt="" width="1200" height="631" loading="lazy"><img src="/images/20240423a/image_7.png" alt="" width="1200" height="631" loading="lazy"><p>このURLにPOSTリクエストを投げれば、先程のスクリプトが実行されます。<br>注意点としては、このURLはデプロイするたびに変わるということと、認証などの仕組みはないため、URLが漏洩すると誰でもアクセスできるので取り扱いには注意してください。</p><h1 id="ESP32からデータをアップロードする"><a href="#ESP32からデータをアップロードする" class="headerlink" title="ESP32からデータをアップロードする"></a>ESP32からデータをアップロードする</h1><p>プログラムを作る前に温度センサを冷蔵庫に設置します。</p><p>冷蔵庫内部にセンサをマスキングテープで付けて、ケーブルを冷蔵庫の外に出してESP32と接続しました。</p><img src="/images/20240423a/image_8.png" alt="" width="507" height="377" loading="lazy"><p>それではESP32から先程デプロイしたWEBアプリに対してPOSTリクエストを送信するプログラムを作成していきます。<br>ちょっと長くなってしまいましたが、やってることとしてはWi-Fiの接続設定と1分間隔で温度計測とAPIリクエストの実行となっています。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;OneWire.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;DallasTemperature.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;HTTPClient.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1-Wire設定</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ONE_WIRE_BUS 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEMPERATURE_PRECISION 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1-Wire接続インスタンスの作成</span></span><br><span class="line"><span class="function">OneWire <span class="title">oneWire</span><span class="params">(ONE_WIRE_BUS)</span></span>;</span><br><span class="line"><span class="function">DallasTemperature <span class="title">sensors</span><span class="params">(&amp;oneWire)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接続するデバイスのアドレスを指定（以下サンプルソースを利用して取得）</span></span><br><span class="line"><span class="comment">// https://github.com/milesburton/Arduino-Temperature-Control-Library/blob/master/examples/oneWireSearch/oneWireSearch.ino</span></span><br><span class="line">DeviceAddress refrigeratorDevice = &#123; <span class="number">0x28</span>, <span class="number">0xC3</span>, <span class="number">0x9F</span>, <span class="number">0x46</span>, <span class="number">0xD4</span>, <span class="number">0x09</span>, <span class="number">0x76</span>, <span class="number">0xF9</span> &#125;;</span><br><span class="line">DeviceAddress outsideDevice = &#123; <span class="number">0x28</span>, <span class="number">0x75</span>, <span class="number">0x4B</span>, <span class="number">0x46</span>, <span class="number">0xD4</span>, <span class="number">0x4B</span>, <span class="number">0x21</span>, <span class="number">0x5F</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wi-Fi接続設定</span></span><br><span class="line"><span class="type">char</span> ssid[] = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="type">char</span> password[] = <span class="string">&quot;yyy&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// リクエストURL設定</span></span><br><span class="line"><span class="type">char</span> requestURL[] = <span class="string">&quot;GASでデプロイしたWEBアプリのURL&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> timer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// シリアル通信設定</span></span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// WiFi接続スタート.</span></span><br><span class="line">  Serial.<span class="built_in">print</span>(<span class="string">&quot;Connecting to &quot;</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(ssid);</span><br><span class="line">  WiFi.<span class="built_in">begin</span>(ssid, password);</span><br><span class="line">  WiFi.<span class="built_in">setAutoConnect</span>(<span class="literal">true</span>);</span><br><span class="line">  WiFi.<span class="built_in">setAutoReconnect</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// WiFi接続完了まで待機.</span></span><br><span class="line">  <span class="keyword">while</span> (WiFi.<span class="built_in">status</span>() != WL_CONNECTED)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// WiFi接続完了.</span></span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;WiFi connected&quot;</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;IP address: &quot;</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(WiFi.<span class="built_in">localIP</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1-Wire接続スタート</span></span><br><span class="line">  <span class="built_in">pinMode</span>(ONE_WIRE_BUS, INPUT_PULLUP);</span><br><span class="line">  sensors.<span class="built_in">begin</span>();</span><br><span class="line">  sensors.<span class="built_in">setResolution</span>(refrigeratorDevice, TEMPERATURE_PRECISION);</span><br><span class="line">  sensors.<span class="built_in">setResolution</span>(outsideDevice, TEMPERATURE_PRECISION);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// タイマ初期化</span></span><br><span class="line">  timer = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1分間隔で実行</span></span><br><span class="line">  <span class="keyword">if</span> (timer &lt; <span class="built_in">millis</span>()) &#123;</span><br><span class="line">    timer = <span class="built_in">millis</span>() + <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="built_in">measureAndRequestSend</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">measureAndRequestSend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// デバイスに対して温度計測をリクエスト</span></span><br><span class="line">  Serial.<span class="built_in">print</span>(<span class="string">&quot;温度測定中...&quot;</span>);</span><br><span class="line">  sensors.<span class="built_in">requestTemperatures</span>();</span><br><span class="line"></span><br><span class="line">  <span class="type">float</span> refrigeratorTemp = sensors.<span class="built_in">getTempC</span>(refrigeratorDevice);</span><br><span class="line">  <span class="type">float</span> outsideTemp = sensors.<span class="built_in">getTempC</span>(outsideDevice);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 計測結果をプリント</span></span><br><span class="line">  Serial.<span class="built_in">print</span>(refrigeratorTemp);</span><br><span class="line">  Serial.<span class="built_in">print</span>(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(outsideTemp);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 送信するJSON文字列生成</span></span><br><span class="line">  String requestStr = <span class="built_in">String</span>(<span class="string">&quot;&#123;\&quot;data\&quot;:[&quot;</span>) +</span><br><span class="line">                      <span class="string">&quot;&#123;\&quot;success\&quot;:&quot;</span> + <span class="built_in">String</span>(refrigeratorTemp != DEVICE_DISCONNECTED_C) + <span class="string">&quot;,\&quot;temp\&quot;:&quot;</span> + <span class="built_in">String</span>(refrigeratorTemp, <span class="number">2</span>) + <span class="string">&quot;&#125;,&quot;</span> +</span><br><span class="line">                      <span class="string">&quot;&#123;\&quot;success\&quot;:&quot;</span> + <span class="built_in">String</span>(outsideTemp != DEVICE_DISCONNECTED_C) + <span class="string">&quot;,\&quot;temp\&quot;:&quot;</span> + <span class="built_in">String</span>(outsideTemp, <span class="number">2</span>) + <span class="string">&quot;&#125;]&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// データ送信</span></span><br><span class="line">  <span class="built_in">apiRequest</span>(requestStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">apiRequest</span><span class="params">(String body)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 指定されたデータを送信する</span></span><br><span class="line">  <span class="keyword">if</span> (WiFi.<span class="built_in">status</span>() == WL_CONNECTED) &#123;</span><br><span class="line">    HTTPClient http;</span><br><span class="line">    http.<span class="built_in">setFollowRedirects</span>(HTTPC_STRICT_FOLLOW_REDIRECTS);</span><br><span class="line">    http.<span class="built_in">begin</span>(requestURL);</span><br><span class="line">    http.<span class="built_in">addHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    <span class="type">int</span> httpResponseCode = http.<span class="built_in">POST</span>(body);</span><br><span class="line">    <span class="keyword">if</span> (httpResponseCode &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      Serial.<span class="built_in">print</span>(<span class="string">&quot;通信に失敗しました。&quot;</span>);</span><br><span class="line">      Serial.<span class="built_in">println</span>(httpResponseCode);</span><br><span class="line">    &#125;</span><br><span class="line">    http.<span class="built_in">end</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Wi-Fi接続に失敗しました。&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらのプログラムをESP32に書き込み、実行してみます。</p><p>するとスプシ側に送信したデータが書き込まれていることを確認できました。</p><img src="/images/20240423a/image_9.png" alt="" width="405" height="348" loading="lazy"><p>試しに1日動かして結果をプロットしてみました。<br>室内温度は昼間になるにつれて温度が高くなっていき、15時過ぎごろにピークを迎えます。<br>冷蔵庫温度は細かな上がり下がりが確認できますが、1日中一定を保っています。おそらく基準の温度があってそこを超えたら冷却をON、下回ったらOFFにするような制御が入っているのではと予想できます。</p><img src="/images/20240423a/image_10.png" alt="" width="590" height="363" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>IoTで取得したデータをクラウド上にストアすることを考えると、AWSだったりのクラウドサービスを使ったりやHerokuなどのPaaSを利用する方法が考えられますが、インフラの構築コストだったり、利用料金がかかってしまいます。</p><p>ですが今回紹介したGoogleSpreadSheetとGASを利用する方法では、無料ですし、たった数行のコードを書くだけでWEBアプリをデプロイできるのが強みだと思います。</p><p>またGASのトリガーを使えば定期的にスクリプトを実行できるので、例えば温度が規定値を上回った場合にメール通知を送ることなども実装できるので、応用すれば色々できそうです。</p><h1 id="参考URL"><a href="#参考URL" class="headerlink" title="参考URL"></a>参考URL</h1><ul><li><a href="https://interface.cqpub.co.jp/esp32-arduino-ide-2/">ESP32開発ボード Arduino IDE開発環境の構築</a></li><li><a href="https://qiita.com/takudooon/items/f6386a45860004aa37e7">温度センサー DS18B20をESP32で動かすメモ</a></li><li><a href="https://www.ne.jp/asahi/shared/o-family/ElecRoom/AVRMCOM/DS18B20/DS18B20manual.html">DS18B20 Programmable Resolution 1-Wire Digital Thermometer</a></li><li><a href="https://rooter.jp/programming/edit-spreadsheet-with-gas/">外部からJSONをPOSTするだけでGoogleSpreadSheetにデータを書き込む</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/ESP32/">ESP32</category>
      
      <category domain="https://future-architect.github.io/tags/GAS/">GAS</category>
      
      <category domain="https://future-architect.github.io/tags/DS18B20/">DS18B20</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%83%97%E3%83%AC%E3%83%83%E3%83%89%E3%82%B7%E3%83%BC%E3%83%88/">スプレッドシート</category>
      
      
      <comments>https://future-architect.github.io/articles/20240423a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vue.jsでオセロ作った話</title>
      <link>https://future-architect.github.io/articles/20240422a/</link>
      <guid>https://future-architect.github.io/articles/20240422a/</guid>
      <pubDate>Sun, 21 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20240408a/">春の入門連載</a>の11本目です。</p><p>はじめまして。流通製造グループの吉原です。私は2023年4月にIT未経験で入社しました。同期が新人研修を4,5か月で、早い人だと3か月で卒業していくなか、恥ずかしながら私は6か月もかかり、3月にやっとのことでOJTを卒業しました。</p><p>日々の業務では、自分のIT知識があまりにも欠如していることを思い知りながら、必死に食らいついています。そんな私が、社会人1年目のIT基礎知識向上のための取り組みの1つとして、Vue.jsでオセロを使った話をしたいと思います。</p><p>これから新人研修やOJTに取り組む新人はもちろん、ITの世界に飛び込んでみたはいいけど、まず何から勉強しようか迷っている人に読んでいただきたいです。</p><h2 id="オセロ作りの経緯"><a href="#オセロ作りの経緯" class="headerlink" title="オセロ作りの経緯"></a>オセロ作りの経緯</h2><p>OJTが始まって、日々の業務に取り組んでいると、仕事の進め方や優先順位の付け方、報連相そして顧客の業務理解など、社会人として、コンサルタントとして求められるものが意外と多くあることに気が付きました。今でも毎日のようにもっと早くエスカレーション上げて！とか、優先順位の付け方ってどうやって考えてる？とか、フィードバックを沢山もらっています。</p><p>そんな日々を過ごしていると、日々の業務でIT力向上を意識することが段々と薄れていっている自分を感じていました。まずは社会人として自立することはもちろん大事だと思っていますが、その一方でIT基礎力を着実に向上させることもやはり必要だと思うのです。</p><h2 id="Vue-jsを選んだ理由"><a href="#Vue-jsを選んだ理由" class="headerlink" title="Vue.jsを選んだ理由"></a>Vue.jsを選んだ理由</h2><p>アサイン先のPJでまず一番最初に着手した業務がVue.jsのフロント開発でした。Vue.jsは新人研修で少し触れましたが、そこまで深く学習はできなかったので、今回は改めて学習してみようと思いました。</p><p>私が日々の学習で意識していることは、今すぐ業務に活きるものを選んで学習するということです。IT基礎力が皆無な私は身に着けたい知識は数知れません。興味のあるものも数知れません。そんなものの中から今何をやるか選ぶとしたら、今すぐ業務に活かせるものを選ぶことをお勧めします。なぜなら、大事なのは、何を学習するかではなく、身に着けた知識をどう使うかということを考えるべきだからです。学習したいものが多すぎる人は、今すぐこの考えを意識してみるとよいと思います。そしてマイルストンはインプットではなく、アウトプットで設定してみてください。</p><h2 id="Vue-jsでオセロを作った話"><a href="#Vue-jsでオセロを作った話" class="headerlink" title="Vue.jsでオセロを作った話"></a>Vue.jsでオセロを作った話</h2><p>さて、長々と「はじめに」が続きましたが、そろそろ本題に入っていきたいと思います。</p><h2 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h2><p>まずは環境構築から。<a href="https://ja.vuejs.org/guide/quick-start.html">こちら</a>を参考に、Vue.jsをインストールしてみました。</p><img src="/images/20240422a/image.png" alt="" width="958" height="294" loading="lazy"><p>その他オプションは正直良くわからないので、聞いたことあるものとか、調べてなんとなく入れてみようかなと思ったものだけ入れてみました。数年後にこの記事を読んで、自分の成長を感じられたらいいな。</p><h3 id="まずはオセロ盤の見た目を作るところから"><a href="#まずはオセロ盤の見た目を作るところから" class="headerlink" title="まずはオセロ盤の見た目を作るところから"></a>まずはオセロ盤の見た目を作るところから</h3><p>そういえば、正確にマスって何×何なんだろうと悩んだので、<a href="https://www.othello.gr.jp/rule">日本オセロ連盟競技ルール</a>で公式ルールを調べてみました。タスクの遂行には、まずそのタスクの理解と顧客の業務理解が必要なように、オセロを作るにはまず、オセロのルールを改めて確認することが大事！ということで確認したら、マスは8×8でした。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;othelloGame&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">cells</span>: [</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>初期データには、<code>黒い石が1、白い石が-1、空のマスは0</code>として定義しました。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;board&quot;</span>&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;cell in cells&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;cell&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;disc in cell&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;disc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickCell(disc)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;disc===1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;disc black&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;disc===-1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;disc white&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;disc===0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;disc none&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>初期配置は真ん中に白と黒の石が交互になるように配置しました。</p><img src="/images/20240422a/image_2.png" alt="" width="536" height="581" loading="lazy"><p>見た目はなんだか良い感じにできたのではないでしょうか。</p><h3 id="中身の実装"><a href="#中身の実装" class="headerlink" title="中身の実装"></a>中身の実装</h3><p>見た目ができたら、いざ中身の実装です。</p><p>まずはクリックしたセルに黒い石を置けるようにしたいので、クリックしたセルの値<code>disc</code>を0から1にしてあげたら良いでしょうと考え、クリックしたセルの値を取得して、<code>$set</code>で上書きしてみました。</p><img src="/images/20240422a/image_3.png" alt="" width="830" height="226" loading="lazy"><p>あれ、エラーがでる…ってことで調べてみると、なんとVue3では使えなくなったらしいです。</p><p>そもそもクリックしたセルの値を上書きして、リターンしたら画面に反映されるって思っていたけど、直接<code>data</code>にアクセスしないといけない気がしてきました。<br>となれば、まずは座標を特定する必要があります。座標のイメージは以下です。</p> <table>    <tr>      <td>0,0</td>      <td>1,0</td>      <td>2,0</td>      <td>3,0</td>      <td>...</td>    </tr>    <tr>      <td>0,1</td>      <td>1,1</td>      <td>2,1</td>      <td>3,1</td>      <td>...</td>    </tr>    <tr>      <td>0,2</td>      <td>1,2</td>      <td>2,2</td>      <td>3,2</td>      <td>...</td>    </tr>    <tr>      <td>0,3</td>      <td>1,3</td>      <td>2,3</td>      <td>3,3</td>      <td>...</td>    </tr>    <tr>      <td>︙</td>      <td>︙</td>      <td>︙</td>      <td>︙</td>      <td>︙</td>    </tr> </table> <p>クリックしたセルの座標を<code>clickCell（columIndex, rowIndex）</code>で取得できるように、引数を追加してみました。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;board&quot;</span>&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(cell, columnIndex) in cells&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;columnIndex&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(disc, rowIndex) in cell&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;rowIndex&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickCell(columnIndex, rowIndex)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;disc===1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;disc black&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;disc===-1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;disc white&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;disc===0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;disc none&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;othelloGame&#x27;</span>,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">clickCell</span>(<span class="params">columnIndex, rowIndex</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(columnIndex, rowIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>セルをクリックすると座標が表示されてくれますようにと願いを込めて、いざクリックしてみました。</p><img src="/images/20240422a/image_4.png" alt="" width="372" height="106" loading="lazy"><p>ということで無事に座標が出力できました。あとは<code>this.cells[columnIndex][rowIndex] = 1</code>とすることで黒い石を置くことが出来ました。</p><img src="/images/20240422a/Animation.gif" alt="Animation.gif" width="540" height="586" loading="lazy"><p>その他の機能に関しては調べてみると、多くの方がオセロを作って公開してくれています。もしオセロを作ってみたいと思った方がいれば、調べてみてください。</p><p>ああでもない、こうでもないと色々試して壁にぶつかりながらも進めていくことが、自分の成長に繋がっているように感じています。ソースコードの質がどうかと考えるより前に、まずは作ってみるということが大事なんではないかと思っています。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>社会人1年目を終えて、改めて怒涛の一年間でした。</p><p>大学で情報系を専攻して勉強していれば、と何度も思ってしまったことは否定できません。ただ、社会人として将来ITで自分のキャリアを形成すると決意した過去の自分に、よくこんな奥が深くて面白い分野に興味を持ってくれた！と褒めてあげることとしましょう。<br>私はITに魅了されてしまった人間の1人になってしまったようです。</p><p>最後にオセロのソースコードも<a href="https://github.com/ryoko0730/othello.vue/tree/main">こちら</a>に載せておきます。</p><p>ITを勉強していきたい人へ、ここから一緒に頑張っていきましょう。読んでくださってありがとうございました。</p><p>オセロ・Othelloは登録商標です。TM＆© Othello,Co. and MegaHouse</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Vue-js/">Vue.js</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85/">初心者</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B2%E3%83%BC%E3%83%A0%E5%88%B6%E4%BD%9C/">ゲーム制作</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/">やってみた</category>
      
      
      <comments>https://future-architect.github.io/articles/20240422a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CI/CD初心者のためのJenkins入門</title>
      <link>https://future-architect.github.io/articles/20240419a/</link>
      <guid>https://future-architect.github.io/articles/20240419a/</guid>
      <pubDate>Thu, 18 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20240408a/&quot;&gt;春の入門連載2024&lt;/a&gt;の10日目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20240408a/">春の入門連載2024</a>の10日目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。今回初めてブログを書きます、流通サービスグループの中邨です。</p><p>最近、業務で初めてJenkinsに触れたので、以下についてまとめます。<strong>「そもそもJenkinsとは？」「CI&#x2F;CDって何？」</strong> という人に読んでいただけたら嬉しいです。</p><ul><li>Jenkinsで何ができるのか／何が嬉しいのか</li><li>Jenkinsを初めて触ってみた感想</li><li>WSL2上のDockerでJenkinsを動かして簡単なジョブを作ってみる</li></ul><h1 id="Jenkinsとは何か？"><a href="#Jenkinsとは何か？" class="headerlink" title="Jenkinsとは何か？"></a>Jenkinsとは何か？</h1><h3 id="Jenkinsで何ができるのか"><a href="#Jenkinsで何ができるのか" class="headerlink" title="Jenkinsで何ができるのか"></a>Jenkinsで何ができるのか</h3><p>JenkinsはCI&#x2F;CDツールの1つで、アプリケーションのビルド、テスト、デプロイといったタスク実行を自動化することができます。</p><p>CI&#x2F;CDは continuous integration and continuous delivery&#x2F;continuous deployment の略で、日本語では「継続的インテグレーション／継続的デリバリー（継続的デプロイ）」と訳されます。</p><h3 id="何が嬉しいのか"><a href="#何が嬉しいのか" class="headerlink" title="何が嬉しいのか"></a>何が嬉しいのか</h3><p>あるコードに変更を加えると、別の部分と矛盾が生じてビルドできなくなるなどの影響を及ぼしてしまうことがあります。</p><p>ビルドやテストを自動化することで、コード変更をリポジトリに適用するごとにバグがないか検証し、アプリケーションを常に正常に動く状態に保つことができます（継続的インテグレーション）。</p><p>また、ワンクリックでアプリケーションをデプロイできたり（継続的デリバリー）、開発者が変更をプッシュするたびに実稼働環境に自動でデプロイできたりすると（継続的デプロイ）、デプロイを迅速かつ頻繁に行って品質を高めることができるようになります。</p><h1 id="Jenkinsを初めて触ってみた感想"><a href="#Jenkinsを初めて触ってみた感想" class="headerlink" title="Jenkinsを初めて触ってみた感想"></a>Jenkinsを初めて触ってみた感想</h1><p>私の主観になりますが、CI&#x2F;CD初心者が初めてJenkinsを使ってみた感想です。</p><h3 id="心理的ハードルが高い"><a href="#心理的ハードルが高い" class="headerlink" title="心理的ハードルが高い"></a>心理的ハードルが高い</h3><p>CI&#x2F;CDツールをほぼ触ったことがない状態で、既に沢山のジョブが動いているプロジェクト環境のJenkinsで試しにジョブを作ろうとしたとき、個人的には少しハードルが高く感じました。</p><p>例えば、自PC上の壊してもいい環境でJenkinsを動かしたことがあれば、ハードルが下がってより身近に感じられるのではないでしょうか。</p><p>この記事の後半では、Jenkinsを身近に感じるため、実際にWSL2上のDockerでJenkinsを動かして簡単なジョブを作成してみます。</p><h3 id="デバッグがつらい"><a href="#デバッグがつらい" class="headerlink" title="デバッグがつらい"></a>デバッグがつらい</h3><p>アプリケーションのコードを書くのとは違い、Jenkinsの動作確認にはデバッグツールがありません。もっといいやり方があるのではないか・・・？と思いながらも、次のサイクルを繰り返してジョブを作成しました。</p><ol><li>ジョブの設定を変更</li><li>ジョブを実行</li><li>想定した結果になっているか確かめる</li><li>想定と違ったらコンソールログを読み、エラーの原因を突き止める</li><li>ジョブの設定を変更</li><li>・・・（以下1からループ）</li></ol><p>また今回は踏み込めなかったのですが、Jenkinsfileと呼ばれるファイルにGroovyでジョブを定義することで、ジョブをコード化することもできるようです。コード化されていればバージョン管理や移植も容易になって良いなと思いました。（Infrastructure as a Codeですね）</p><h3 id="その他のCI-CDツールとの違い"><a href="#その他のCI-CDツールとの違い" class="headerlink" title="その他のCI&#x2F;CDツールとの違い"></a>その他のCI&#x2F;CDツールとの違い</h3><p>Jenkinsはその前身を含めると約20年ほど前に誕生した歴史の長いツールですが、他にも様々なCI&#x2F;CDツールがあり、ツールによってどこが違うのか気になってきました。</p><p>ざっくり調べると、専用のサーバを立てて実行する必要があるJenkinsに対して、GitHubリポジトリがあればGitHub上で利用できるGitHub Actionsや、AWS上でCI&#x2F;CDを完結できるCodeBuildやCodeDeployなどがあり、導入コストや管理のしやすさを比較して選定することが多いようです。</p><h1 id="WSL2上のDockerでJenkinsを動かして簡単なジョブを作ってみる"><a href="#WSL2上のDockerでJenkinsを動かして簡単なジョブを作ってみる" class="headerlink" title="WSL2上のDockerでJenkinsを動かして簡単なジョブを作ってみる"></a>WSL2上のDockerでJenkinsを動かして簡単なジョブを作ってみる</h1><p>以下で行うのは実際のビルドやテストよりずいぶん単純な内容ですが、入門記事なので「Jenkinsでこんなことができる」というイメージの一助になればいいなと思っています。</p><h3 id="WSL2とDockerの環境構築"><a href="#WSL2とDockerの環境構築" class="headerlink" title="WSL2とDockerの環境構築"></a>WSL2とDockerの環境構築</h3><p>本記事の主題ではないため、解説は別の記事に譲ります。<br>以下の手順は、環境があることを前提としています。</p><h3 id="Dockerイメージの取得とコンテナ起動"><a href="#Dockerイメージの取得とコンテナ起動" class="headerlink" title="Dockerイメージの取得とコンテナ起動"></a>Dockerイメージの取得とコンテナ起動</h3><p><a href="https://hub.docker.com/r/jenkins/jenkins">Docker Hub</a>からJenkinsのDockerイメージを取得します。</p><p>Dockerリポジトリから任意のバージョンのイメージを指定してpullします。<br>※2024年4月19日時点の最新は <code>2.440.3-lts-jdk17</code> なのでこちらを使用します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull jenkins/jenkins:2.440.3-lts-jdk17</span><br></pre></td></tr></table></figure><p>とりあえず起動できれば良いので、ポート番号だけ指定してコンテナを起動します。設定を保存したい場合はボリュームを指定してください。</p><p>※その他のオプションは<a href="https://www.jenkins.io/doc/book/installing/docker/">公式ドキュメントのDocker用説明</a>にサンプルがあります。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -p 8080:8080 jenkins/jenkins:2.440.3-lts-jdk17</span><br></pre></td></tr></table></figure><p><a href="https://www.jenkins.io/doc/book/installing/docker/#setup-wizard">公式ドキュメントのセットアップウィザード</a>の手順に沿ってセットアップします。</p><p>※プラグインは推奨を選択、admin以外の管理者ユーザーとJenkins URLはとりあえず作成せずスキップで大丈夫です。</p><h3 id="コンソールにHello"><a href="#コンソールにHello" class="headerlink" title="コンソールにHello"></a>コンソールにHello</h3><p>シェルスクリプトを実行してコンソールに出力してみます。</p><ol><li><p>新規ジョブ作成をクリックします。</p>  <img src="/images/20240419a/image.png" alt="" width="1200" height="591" loading="lazy"></li><li><p>適当なジョブ名を入力し、「フリースタイル・プロジェクトのビルド」を選択して「OK」</p>  <img src="/images/20240419a/image_2.png" alt="" width="1200" height="609" loading="lazy"></li><li><p>適当な説明を入力して下にスクロールします。</p>  <img src="/images/20240419a/image_3.png" alt="" width="1200" height="612" loading="lazy"></li><li><p>「Build Steps」＞「ビルド手順の追加」から「シェルの実行」を選択します。</p>  <img src="/images/20240419a/image_4.png" alt="" width="1200" height="608" loading="lazy"></li><li><p>シェルスクリプトに以下を記述して保存します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello&quot;</span></span><br></pre></td></tr></table></figure></li></ol>  <img src="/images/20240419a/image_5.png" alt="" width="1200" height="615" loading="lazy">6. ビルド実行をクリックします。  <img src="/images/20240419a/image_6.png" alt="" width="1200" height="585" loading="lazy">7. 左下にビルド履歴が表示されているので、コンソール出力を見てみます。  <img src="/images/20240419a/image_7.png" alt="" width="1101" height="672" loading="lazy">8. 「Hello」と出力されていて、シェルスクリプトが実行されていることがわかります。  <img src="/images/20240419a/image_8.png" alt="" width="1200" height="520" loading="lazy"><h3 id="ジョブをつなげて実行する"><a href="#ジョブをつなげて実行する" class="headerlink" title="ジョブをつなげて実行する"></a>ジョブをつなげて実行する</h3><p>test-job-A、test-job-B を作成し、A、Bの順番に実行してみます。</p><ol><li>最初の例と同様に、フリースタイル・プロジェクトで空のジョブ test-job-A、test-job-B を作成します。</li><li>「test-job-A」の「Build Steps」＞「ビルド後の処理の追加」から「他のプロジェクトのビルド」を選択します。  <img src="/images/20240419a/image_9.png" alt="" width="1200" height="524" loading="lazy"></li><li>対象プロジェクトに「test-job-B」を入力して保存します。  <img src="/images/20240419a/image_10.png" alt="" width="1200" height="527" loading="lazy"></li><li>「test-job-A」を実行すると、下流プロジェクトの「test-job-B」も実行されていることがわかります。  <img src="/images/20240419a/image_11.png" alt="" width="1200" height="387" loading="lazy"></li></ol><h3 id="Gitリポジトリをチェックアウトする"><a href="#Gitリポジトリをチェックアウトする" class="headerlink" title="Gitリポジトリをチェックアウトする"></a>Gitリポジトリをチェックアウトする</h3><ol><li>GitHubにとりあえず空のpublicリポジトリを作成します。  <img src="/images/20240419a/image_12.png" alt="" width="1200" height="598" loading="lazy"></li><li>「test-job-git」ジョブの「ソースコード管理」で「Git」を選択し、リポジトリURLとブランチ名を入力します。<br>  ※チェックアウトするだけなので認証情報は特に入力していません。  <img src="/images/20240419a/image_13.png" alt="" width="1081" height="838" loading="lazy"></li><li>ジョブを実行してコンソール出力を見ると、（ビルドするものは何もありませんが）正常終了しています。  <img src="/images/20240419a/image_14.png" alt="" width="1102" height="675" loading="lazy"></li><li>ワークスペースの中を見ると、リポジトリの内容（READMEファイル）が取得されています。  <img src="/images/20240419a/image_15.png" alt="" width="1200" height="513" loading="lazy"></li></ol><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>CI&#x2F;CDはシステム開発を縁の下で支える存在ですが、ITの入り口からはなかなか見えにくい・機会がないと触りにくい部分なのではないか、と常々思っていました。</p><p>この記事を通して、JenkinsやCI&#x2F;CDを少し身近に感じていただけたら嬉しいです。</p><p>（参考）</p><ul><li><a href="https://www.jenkins.io/doc/">https://www.jenkins.io/doc/</a></li><li><a href="https://ja.wikipedia.org/wiki/Jenkins">https://ja.wikipedia.org/wiki/Jenkins</a></li><li><a href="https://ja.wikipedia.org/wiki/%E7%B6%99%E7%B6%9A%E7%9A%84%E3%83%87%E3%83%AA%E3%83%90%E3%83%AA%E3%83%BC">https://ja.wikipedia.org/wiki/継続的デリバリー</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/CI-CD/">CI/CD</category>
      
      <category domain="https://future-architect.github.io/tags/Jenkins/">Jenkins</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/">やってみた</category>
      
      
      <comments>https://future-architect.github.io/articles/20240419a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WSLで始めるサーバーサイドSwift 入門 ～Hummingbird～</title>
      <link>https://future-architect.github.io/articles/20240418a/</link>
      <guid>https://future-architect.github.io/articles/20240418a/</guid>
      <pubDate>Wed, 17 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240418a/image.png&quot; alt=&quot;image.png&quot; width=&quot;851&quot; height=&quot;200&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240418a/image.png" alt="image.png" width="851" height="200" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。HealthCare Innovation Group(HIG)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>所属の清水です。<br><a href="/articles/20240408a/">春の入門連載2024</a>、6本目の記事です。</p><p>SwiftにおけるWebフレームワークを取り上げます。Swift<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>はiOSアプリ開発のイメージが強いと思いますが、iOSアプリ開発以外でも利用できることを紹介します。<br>（macOS以外でもSwiftが動かせたら楽しいなというモチベーションで記事を執筆しております。）</p><h2 id="Swift-における-Web-フレームワーク"><a href="#Swift-における-Web-フレームワーク" class="headerlink" title="Swift における Web フレームワーク"></a>Swift における Web フレームワーク</h2><p>そもそもSwiftにおけるWebフレームワークは、何があるでしょうか？</p><p>Swift.org<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>の<a href="https://www.swift.org/documentation/server/">Swift on Server</a>内で紹介されているWeb フレームワークは以下2つです。</p><ul><li><a href="https://swiftpackageindex.com/hummingbird-project/hummingbird">Hummingbird</a></li><li><a href="https://vapor.codes/">Vapor</a></li></ul><p>GitHub Star 数を比較した図を以下に示します。</p><p>先発のフレームワークであるVaporの方が人気で、検索すると日本語記事もいくつかヒットします。Swift.org内のWebフレームワークチュートリアル<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>として取り上げられていることからも、Vaporが主流となっていることが伺えます。Vaporについては記事になっているものも多いため、後発のHummingbirdを試します。</p><img src="/images/20240418a/star-history-2024416.png" alt="" width="1200" height="866" loading="lazy">（参考：https://star-history.com/#hummingbird-project/hummingbird&vapor/vapor&Date）<h2 id="Hummingbird-とは"><a href="#Hummingbird-とは" class="headerlink" title="Hummingbird とは"></a>Hummingbird とは</h2><p>軽量で依存関係が少ないことを売りとしているフレームワークの一つです。</p><p>Hummingbird の README にも以下の記載があります。</p><blockquote><p>Lightweight, flexible, modern server framework written in Swift.</p></blockquote><p>Hummingbird は、最小限のコアフレームワークのみを提供して、個別で拡張していくことができるようになっています。前述の Vapor の方が機能自体は豊富だと思いますが、サクッと使いたい場合は Hummingbird なのかなと認識しています。</p><p>また、公式ドキュメントがAppleのDeveloper向けのドキュメント<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup>そっくりなので、ぜひ覗いてみてほしいです。</p><p><a href="https://docs.hummingbird.codes/2.0/documentation/hummingbird/">https://docs.hummingbird.codes/2.0/documentation/hummingbird/</a></p><h2 id="セットアップ"><a href="#セットアップ" class="headerlink" title="セットアップ"></a>セットアップ</h2><h3 id="環境情報"><a href="#環境情報" class="headerlink" title="環境情報"></a>環境情報</h3><p>本記事は、以下の環境で実施を確認しています。</p><ul><li>Windows Subsystem for Linux （以下、WSL）に関するバージョン情報  <figure class="highlight sh"><figcaption><span>cmd.exe</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt;wsl -v</span><br><span class="line">WSL バージョン: 2.1.5.0</span><br><span class="line">カーネル バージョン: 5.15.146.1-2</span><br><span class="line">WSLg バージョン: 1.0.60</span><br><span class="line">MSRDC バージョン: 1.2.5105</span><br><span class="line">Direct3D バージョン: 1.611.1-81528511</span><br><span class="line">DXCore バージョン: 10.0.25131.1002-220531-1700.rs-onecore-base2-hyp</span><br><span class="line">Windows バージョン: 10.0.19045.4170</span><br></pre></td></tr></table></figure></li><li>Ubuntu のバージョン: 22.04.4 LTS</li><li>Swift のバージョン: 5.10</li></ul><h3 id="Swift-のインストール"><a href="#Swift-のインストール" class="headerlink" title="Swift のインストール"></a>Swift のインストール</h3><p>まずは、SwiftをUbuntu上にインストールします。<br><a href="https://docs.hummingbird.codes/2.0/documentation/hummingbird/">Hummingbirdの公式ドキュメント</a>にはSwift自体のインストールに関する記載はなかったため、<a href="https://docs.vapor.codes/ja/install/linux/">Vaporの公式ドキュメント</a>を参考にSwiftly<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>を用いてインストールしました。<br>Swiftly は、Swift Server Workgroup<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup> が提供するCLIツールで異なるバージョンのSwiftを使い分けることができます。<br>記載の手順通り、実行していきます。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># swiftly のインストール</span></span><br><span class="line">&gt; curl -L https://swift-server.github.io/swiftly/swiftly-install.sh | bash</span><br><span class="line">~~~</span><br><span class="line">Select one of the following:</span><br><span class="line">1) Proceed with the installation (default)</span><br><span class="line">2) Customize the installation</span><br><span class="line">3) Cancel</span><br><span class="line">&gt; 1</span><br><span class="line">~~~</span><br><span class="line"><span class="comment"># `swiftly` を有効化するため、PATH へ追加</span></span><br><span class="line">&gt; . <span class="variable">$HOME</span>/.local/share/swiftly/env.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最新バージョンの Swift をインストール</span></span><br><span class="line">&gt; swiftly install latest</span><br><span class="line">~~~</span><br><span class="line">Set the active toolchain to Swift 5.10.0</span><br><span class="line">Swift 5.10.0 installed successfully!</span><br><span class="line"></span><br><span class="line"><span class="comment"># Swift がインストールされていることを確認する</span></span><br><span class="line">&gt; swift --version</span><br><span class="line">Swift version 5.10 (swift-5.10-RELEASE)</span><br><span class="line">Target: x86_64-unknown-linux-gnu</span><br></pre></td></tr></table></figure><h2 id="Hummingbird-を用いたToDoアプリの構築（公式チュートリアル）"><a href="#Hummingbird-を用いたToDoアプリの構築（公式チュートリアル）" class="headerlink" title="Hummingbird を用いたToDoアプリの構築（公式チュートリアル）"></a>Hummingbird を用いたToDoアプリの構築（公式チュートリアル）</h2><p>ここから先は、Hummingbird 公式ドキュメント記載のチュートリアルを元に Hummingbird のセットアップからToDoアプリの構築までのハンズオンを試してみます。</p><p><a href="https://docs.hummingbird.codes/2.0/tutorials/todos/">https://docs.hummingbird.codes/2.0/tutorials/todos/</a></p><h3 id="Hummingbird-のセットアップ"><a href="#Hummingbird-のセットアップ" class="headerlink" title="Hummingbird のセットアップ"></a>Hummingbird のセットアップ</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># プロジェクトDirectoryの作成</span></span><br><span class="line">&gt; <span class="built_in">mkdir</span> Todos</span><br><span class="line">&gt; <span class="built_in">cd</span> Todos</span><br><span class="line"><span class="comment"># パッケージに必要なテンプレートで初期化</span></span><br><span class="line">&gt; swift package init --<span class="built_in">type</span> tool</span><br><span class="line"><span class="comment"># ディレクトリ構成の確認</span></span><br><span class="line">&gt;  tree</span><br><span class="line">.</span><br><span class="line">├── Package.resolved <span class="comment"># パッケージの依存関係解決を記録</span></span><br><span class="line">├── Package.swift <span class="comment"># 依存パッケージを記載</span></span><br><span class="line">└── Sources</span><br><span class="line">    └── Todos.swift <span class="comment"># 本体</span></span><br></pre></td></tr></table></figure><details><summary>--type tool について</summary><p><code>--type tool</code> は、コマンドライン引数をデフォルトで利用できるテンプレートみたいです。<br><code>Package.swift</code> に、 <a href="https://github.com/apple/swift-argument-parser.git">https://github.com/apple/swift-argument-parser.git</a> が含まれるか否かと置き換えても問題ないと思います。</p><figure class="highlight bash"><figcaption><span>--type executable の場合</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; swift package init --<span class="built_in">type</span> executable</span><br><span class="line">Creating executable package: Sample</span><br><span class="line">Creating Package.swift</span><br><span class="line">Creating .gitignore</span><br><span class="line">Creating Sources/</span><br><span class="line">Creating Sources/main.swift</span><br></pre></td></tr></table></figure><figure class="highlight swift"><figcaption><span>Package.swift</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// swift-tools-version: 5.10</span></span><br><span class="line"><span class="comment">// The swift-tools-version declares the minimum version of Swift required to build this package.</span></span><br><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> package <span class="operator">=</span> <span class="type">Package</span>(</span><br><span class="line">    name: <span class="string">&quot;Sample&quot;</span>,</span><br><span class="line">    targets: [</span><br><span class="line">        <span class="comment">// Targets are the basic building blocks of a package, defining a module or a test suite.</span></span><br><span class="line">        <span class="comment">// Targets can depend on other targets in this package and products from dependencies.</span></span><br><span class="line">        .executableTarget(</span><br><span class="line">            name: <span class="string">&quot;Sample&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></details><p>Hummingbird を利用するため、<code>Package.swift</code> に必要な情報を追加します。</p><figure class="highlight diff"><figcaption><span>Package.swift</span></figcaption><table><tr><td class="code"><pre><span class="line">// swift-tools-version: 5.10</span><br><span class="line">// The swift-tools-version declares the minimum version of Swift required to build this package.</span><br><span class="line">import PackageDescription</span><br><span class="line"></span><br><span class="line">let package = Package(</span><br><span class="line">    name: &quot;Todos&quot;,</span><br><span class="line"><span class="addition">++  // macOS 上で動かさないため、コメントアウトしているが問題なく動作した。</span></span><br><span class="line"><span class="addition">++  // platforms: [.macOS(.v14)],</span></span><br><span class="line">    dependencies: [</span><br><span class="line">        .package(url: &quot;https://github.com/apple/swift-argument-parser.git&quot;, from: &quot;1.2.0&quot;),</span><br><span class="line"><span class="addition">++      .package(url: &quot;https://github.com/hummingbird-project/hummingbird.git&quot;, from: &quot;2.0.0-alpha.1&quot;),</span></span><br><span class="line">    ],</span><br><span class="line">    targets: [</span><br><span class="line">        .executableTarget(</span><br><span class="line">            name: &quot;Todos&quot;,</span><br><span class="line">            dependencies: [</span><br><span class="line">                .product(name: &quot;ArgumentParser&quot;, package: &quot;swift-argument-parser&quot;),</span><br><span class="line"><span class="addition">++              .product(name: &quot;Hummingbird&quot;, package: &quot;hummingbird&quot;),</span></span><br><span class="line">            ]</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>GET リクエストを叩いた際に”Hello”を返すように以下のように <code>Todos.swift</code> を書き換えます。</p><figure class="highlight swift"><figcaption><span>Todos.swift</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ArgumentParser</span><br><span class="line"><span class="keyword">import</span> Hummingbird</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Todos</span>: <span class="title class_">AsyncParsableCommand</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() <span class="keyword">async</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="comment">// create router</span></span><br><span class="line">        <span class="keyword">let</span> router <span class="operator">=</span> <span class="type">Router</span>()</span><br><span class="line">        <span class="comment">// add hello route</span></span><br><span class="line">        router.get(<span class="string">&quot;/&quot;</span>) &#123; request, context <span class="keyword">in</span></span><br><span class="line">            <span class="string">&quot;Hello<span class="subst">\n</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// create application</span></span><br><span class="line">        <span class="keyword">let</span> app <span class="operator">=</span> <span class="type">Application</span>(router: router)</span><br><span class="line">        <span class="comment">// run application</span></span><br><span class="line">        <span class="keyword">try</span> <span class="keyword">await</span> app.runService()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一連の修正が完了すると、アプリケーションが正常に動くことを確認できます。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; swift run</span><br><span class="line">Building <span class="keyword">for</span> debugging...</span><br><span class="line">[8/8] Linking Todos</span><br><span class="line">Build complete! (6.58s)</span><br><span class="line">2024-04-16T15:18:49+0900 info Hummingbird : [HummingbirdCore] Server started and listening on 127.0.0.1:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 別タブで動作確認</span></span><br><span class="line">&gt; curl localhost:8080</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><p>簡単ですね🎉</p><h3 id="ToDoアプリの構築"><a href="#ToDoアプリの構築" class="headerlink" title="ToDoアプリの構築"></a>ToDoアプリの構築</h3><p>ここでは、Hummingbird を利用してToDoをDBに登録するところまで試してみます。<br>PostgresNIO<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> というPostgreSQL用のSwiftクライアントを利用することで、ToDoをPostgreSQLに登録します。</p><p>Hummingbird 同様に、PostgresNIO を <code>Package.swift</code> に追加します。</p><figure class="highlight diff"><figcaption><span>Package.swift</span></figcaption><table><tr><td class="code"><pre><span class="line">// swift-tools-version: 5.10</span><br><span class="line">// The swift-tools-version declares the minimum version of Swift required to build this package.</span><br><span class="line">import PackageDescription</span><br><span class="line"></span><br><span class="line">let package = Package(</span><br><span class="line">    name: &quot;Todos&quot;,</span><br><span class="line">    // macOS 上で動かさないため、コメントアウトしているが問題なく動作した。</span><br><span class="line">    // platforms: [.macOS(.v14)],</span><br><span class="line">    dependencies: [</span><br><span class="line">        .package(url: &quot;https://github.com/apple/swift-argument-parser.git&quot;, from: &quot;1.2.0&quot;),</span><br><span class="line">        .package(url: &quot;https://github.com/hummingbird-project/hummingbird.git&quot;, from: &quot;2.0.0-alpha.1&quot;),</span><br><span class="line"><span class="addition">++      .package(url: &quot;https://github.com/vapor/postgres-nio.git&quot;, from: &quot;1.21.0&quot;),</span></span><br><span class="line">    ],</span><br><span class="line">    targets: [</span><br><span class="line">        .executableTarget(</span><br><span class="line">            name: &quot;Todos&quot;,</span><br><span class="line">            dependencies: [</span><br><span class="line">                .product(name: &quot;ArgumentParser&quot;, package: &quot;swift-argument-parser&quot;),</span><br><span class="line">                .product(name: &quot;Hummingbird&quot;, package: &quot;hummingbird&quot;),</span><br><span class="line"><span class="addition">++              .product(name: &quot;PostgresNIO&quot;, package: &quot;postgres-nio&quot;),</span></span><br><span class="line">            ]</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>PostgreSQL をインストールします。<br>チュートリアルでは（おそらくmacOS前提で） <code>brew</code> 経由でインストールしていたのですが、今回は <code>apt</code> 経由でインストールします。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>Linux 上でも Homebrew インストールできるみたいなので、Homebrew 経由でインストールでも良いかもしれません。<br><a href="https://docs.brew.sh/Homebrew-on-Linux">https://docs.brew.sh/Homebrew-on-Linux</a></p></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; sudo apt update</span><br><span class="line">&gt; sudo apt install postgresql postgresql-contrib</span><br><span class="line">&gt; psql --version</span><br><span class="line">psql (PostgreSQL) 14.11 (Ubuntu 14.11-0ubuntu0.22.04.1)</span><br></pre></td></tr></table></figure><p>インストールが完了したので、チュートリアルの続きを実施します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; psql postgres</span><br><span class="line">psql: error: connection to server on socket <span class="string">&quot;/var/run/postgresql/.s.PGSQL.5432&quot;</span> failed: No such file or directory</span><br><span class="line">        Is the server running locally and accepting connections on that socket?</span><br></pre></td></tr></table></figure><p>エラーで進めません。<br>エラーについて調べると <code>.conf</code> ファイルを確認しよう<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>、などとありますが、そもそも<code>.conf</code>ファイルを含んだディレクトリ（<code>/etc/postgresql/14/main/</code>）がないことに気が付きました。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">ls</span> -la /etc/postgresql/</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x  2 postgres postgres 4096 Feb 10  2022 .</span><br><span class="line">drwxr-xr-x 84 root     root     4096 Apr 17 06:54 ..</span><br></pre></td></tr></table></figure><p>別の記事<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>を参考に、PostgreSQL のクラスタを追加します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; sudo pg_createcluster --start 14 main</span><br><span class="line">&gt; <span class="built_in">ls</span> -la /etc/postgresql/14/main/</span><br><span class="line">conf.d/          pg_ctl.conf      pg_ident.conf    start.conf</span><br><span class="line">environment      pg_hba.conf      postgresql.conf</span><br></pre></td></tr></table></figure><p>動くようになったので、チュートリアルの続きに戻ります。<br>まずは、データベースを準備します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; postgres psql</span><br><span class="line">psql (14.11 (Ubuntu 14.11-0ubuntu0.22.04.1))</span><br><span class="line">Type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># create database hummingbird;</span></span><br><span class="line">CREATE DATABASE</span><br><span class="line">postgres=<span class="comment"># \c hummingbird</span></span><br><span class="line">You are now connected to database <span class="string">&quot;hummingbird&quot;</span> as user <span class="string">&quot;postgres&quot;</span>.</span><br><span class="line">hummingbird=<span class="comment"># create role todos createrole login password &#x27;todos&#x27;;</span></span><br><span class="line">CREATE ROLE</span><br><span class="line">hummingbird=<span class="comment"># \q</span></span><br></pre></td></tr></table></figure><p>次に、ToDoアプリの実装です。<br>チュートリアルの通りに実装していきます。完成形は、公式のサンプルがあるため、そちらをご確認ください。</p><p><a href="https://github.com/hummingbird-project/hummingbird-examples/tree/main/todos-postgres-tutorial">https://github.com/hummingbird-project/hummingbird-examples/tree/main/todos-postgres-tutorial</a></p><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>これまで構築したものの動作確認を行います。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; swift run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 別タブで動作確認</span></span><br><span class="line"><span class="comment"># TODO を登録</span></span><br><span class="line">&gt; curl -i -X POST localhost:8080/todos -d<span class="string">&#x27;&#123;&quot;title&quot;: &quot;Wash my hair&quot;&#125;&#x27;</span></span><br><span class="line">HTTP/1.1 201 Created</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Content-Length: 145</span><br><span class="line">Date: Tue, 16 Apr 2024 23:54:54 GMT</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;A4672369-753C-49AD-A41C-849AE5A7CF1E&quot;</span>,<span class="string">&quot;url&quot;</span>:<span class="string">&quot;http:\/\/localhost:8080\/todos\/A4672369-753C-49AD-A41C-849AE5A7CF1E&quot;</span>,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;Wash my hair&quot;</span>&#125;</span><br><span class="line">&gt; curl -i -X POST localhost:8080/todos -d<span class="string">&#x27;&#123;&quot;title&quot;: &quot;Brush my teeth&quot;&#125;&#x27;</span></span><br><span class="line">HTTP/1.1 201 Created</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Content-Length: 147</span><br><span class="line">Date: Tue, 16 Apr 2024 23:55:03 GMT</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;url&quot;</span>:<span class="string">&quot;http:\/\/localhost:8080\/todos\/435A9B4F-BD4A-42E2-8EA9-5A5560378BBA&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;435A9B4F-BD4A-42E2-8EA9-5A5560378BBA&quot;</span>,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;Brush my teeth&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># DB の登録状態を確認</span></span><br><span class="line">&gt; psql hummingbird</span><br><span class="line">psql (14.11 (Ubuntu 14.11-0ubuntu0.22.04.1))</span><br><span class="line">Type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">hummingbird=<span class="comment"># select * from todos;</span></span><br><span class="line">                  <span class="built_in">id</span>                  |     title      | order | completed |                               url</span><br><span class="line">--------------------------------------+----------------+-------+-----------+------------------------------------------------------------------</span><br><span class="line"> a4672369-753c-49ad-a41c-849ae5a7cf1e | Wash my hair   |       |           | http://localhost:8080/todos/A4672369-753C-49AD-A41C-849AE5A7CF1E</span><br><span class="line"> 435a9b4f-bd4a-42e2-8ea9-5a5560378bba | Brush my teeth |       |           | http://localhost:8080/todos/435A9B4F-BD4A-42E2-8EA9-5A5560378BBA</span><br><span class="line">(2 rows)</span><br></pre></td></tr></table></figure><p>POSTしたToDoが、DB側に登録されていることを確認できました🎉</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>Swift の Web フレームワークの一つである、Hummingbird をセットアップから紹介しました。</p><p>個人的には、macOS以外でもSwiftが書けて、かつ、サーバーアプリ開発に利用できることが知れて楽しかったです。WSL 上でセットアップしたので手順が多めだったのですが、普段SwiftでiOSアプリ開発している方がサーバサイドの開発を試したいときに便利だと思いました。</p><p>今回は試せませんでしたが、Xcode のシミュレータとバックエンドの接続までをどこかで試してみたいと考えています。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">医療・ヘルスケア分野での案件や新規ビジネス創出を担う、2020年に誕生した事業部です。設立エピソードは、以下記事をご覧ください。<a href="https://note.future.co.jp/n/n8b57d4bf4604">&quot;新規事業の立ち上げ　フューチャーの知られざる医療・ヘルスケアへの挑戦&quot;</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">Swift.org内のチュートリアル記事<a href="https://www.swift.org/getting-started/vapor-web-server/">https://www.swift.org/getting-started/vapor-web-server/</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">swiftly<a href="https://github.com/swift-server/swiftly">https://github.com/swift-server/swiftly</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">Postgres-NIO<a href="https://github.com/vapor/postgres-nio">https://github.com/vapor/postgres-nio</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;">psql: error: connection to server on socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot; failed: FATAL: Peer authentication failed for user &quot;postgres&quot; (Ubuntu)<a href="https://stackoverflow.com/questions/69676009/psql-error-connection-to-server-on-socket-var-run-postgresql-s-pgsql-5432">https://stackoverflow.com/questions/69676009/psql-error-connection-to-server-on-socket-var-run-postgresql-s-pgsql-5432</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;">【Ubuntu+PostgreSQL】postgres以外のユーザでクラスタを作成して起動する<a href="https://qiita.com/shin4488/items/175151e59a043c724b38">https://qiita.com/shin4488/items/175151e59a043c724b38</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="vertical-align: top; padding-right: 10px;">7.</span><span style="vertical-align: top;"><a href="https://www.apple.com/jp/swift/">https://www.apple.com/jp/swift/</a></span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="vertical-align: top; padding-right: 10px;">8.</span><span style="vertical-align: top;"><a href="https://www.swift.org/">https://www.swift.org/</a></span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="vertical-align: top; padding-right: 10px;">9.</span><span style="vertical-align: top;">Swift によるサーバーアプリケーション開発を促進するワークグループ<a href="https://www.swift.org/sswg/">https://www.swift.org/sswg/</a></span><a href="#fnref:9" rev="footnote"> ↩</a></li><li id="fn:10"><span style="vertical-align: top; padding-right: 10px;">10.</span><span style="vertical-align: top;">AppleのDeveloper向けのドキュメント<a href="https://developer.apple.com/documentation/Swift">https://developer.apple.com/documentation/Swift</a></span><a href="#fnref:10" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Ubuntu/">Ubuntu</category>
      
      <category domain="https://future-architect.github.io/tags/Swift/">Swift</category>
      
      <category domain="https://future-architect.github.io/tags/WSL/">WSL</category>
      
      <category domain="https://future-architect.github.io/tags/Hummingbird/">Hummingbird</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%B5%E3%82%A4%E3%83%89Swift/">サーバーサイドSwift</category>
      
      
      <comments>https://future-architect.github.io/articles/20240418a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Prometheus/Grafanaを使ってみる</title>
      <link>https://future-architect.github.io/articles/20240417b/</link>
      <guid>https://future-architect.github.io/articles/20240417b/</guid>
      <pubDate>Tue, 16 Apr 2024 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは。TIGの伊藤です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20240408a/&quot;&gt;春の入門連載&lt;/a&gt;7日目です。&lt;/p&gt;
&lt;h2 id=&quot;新しいこと、始めたい、知りたい&quot;&gt;&lt;a href=&quot;#新しいこと、始めたい、知りたい&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは。TIGの伊藤です。</p><p><a href="/articles/20240408a/">春の入門連載</a>7日目です。</p><h2 id="新しいこと、始めたい、知りたい"><a href="#新しいこと、始めたい、知りたい" class="headerlink" title="新しいこと、始めたい、知りたい"></a>新しいこと、始めたい、知りたい</h2><p>普段、私の仕事はTerraformを主としたIaCを書いてインフラを作ったり管理することなのですが、ふと考えると、IaC以外の部分に対して取り組むきっかけがなく今までやってきていたような気もしてきました。とはいえ、いきなり全然違うことをするのでもなく、自分の裾野を少し広げる方向で考えていたところ、こちらの勉強会を見つけました。</p><p><a href="https://grafana-meetup-japan.connpass.com/event/314500/">https://grafana-meetup-japan.connpass.com/event/314500/</a></p><p><a href="https://grafana-meetup-japan.connpass.com/event/314500/"><img src="/images/20240417b/2024-04-17_Grafana_Meetup_Japan_1___connpass.jpg" alt="From connpass: Grafana Meetup Japan #1 - connpass | ## Grafana Meetup Japanへようこそ！  このイベントは、オープンソースの監視・可視化ツールであるGrafanaについて、互いに学び、発信し、交流することを目的としています。  Grafanaは、ITインフラやアプリケーションの監視から、IoTデバイス、ビジネス指標、工場、物流、自然災害、宇宙に至るまで、あらゆる分野でのデータ可視化と監視を支援するツールです。  日本でも広く利用されつつありますが、Grafanaの最新情報や導入事例、プラクティスを学んだり発信したりする場は多くありませんでした。そこで、Grafana Labsと共にGrafana Meetup Jap..."></a></p><p>知り合いが告知していたことや、登壇される方々に興味を持って参加しました。しかし、「Grafanaほぼ触ったことない」の丸腰で行っても得るものが少なくなりそうなので、せっかくならと記事を書いています。</p><p>動機としては上に書いた通りですが、監視システムとして同時に持ち上がってくるPrometheusもちょっとだけ入門して、取り組んでいきます。</p><h2 id="今回のサンプル"><a href="#今回のサンプル" class="headerlink" title="今回のサンプル"></a>今回のサンプル</h2><p>今回のサンプルは以下に置いてあるので、このブログを読んで試してみたい方はぜひ使ってみてください。</p><p><a href="https://github.com/kaedemalu/prometheus-grafana-blog">https://github.com/kaedemalu/prometheus-grafana-blog</a></p><h2 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h2><p>PrometheusはSoundCloud社によって開発されたオープンソースの監視ソフトウェアです。GoogleでKubernetesの前身となったBorgという分散システムがあり、これらを監視しているシステムであるBorgmonからも大いにインスパイアを受けており、いずれも分散システムのモニタリングに最適化されています。</p><p>現在ではCloudNative Computing Foundation（CNCF）のGraduatedプロジェクトとしており、多くのユーザを持つOSSとなりました。</p><p>仕組みとしては、従来の監視システムでよく使われるZabbixをはじめとしてエージェントを利用してメトリクスを取得、監視するものではなく、管理サーバ側が指定されたサーバに対しメトリクスを取得するPull型となっているのが大きな違いでしょう。<br>(今回の話では、だいたい下半分くらいが対象の記事となっています。）</p><img src="/images/20240417b/prom_architecture.png" alt="prom_architecture.png" width="1200" height="721" loading="lazy"><blockquote><p><a href="https://prometheus.io/docs/introduction/overview/">Prometheus Overview</a>より引用</p></blockquote><p>EC2などのIaaSレベルでは、EC2本体のメトリクスを取得して、サーバ自体のリソース監視を行えますが、コンテナアプリであればコンテナアプリから取得される必要があります。この時にPrometheusであればコンテナ自体のメトリクスを取得することが可能になります。エージェントレスであることで従来EC2にインストールしていたエージェント分のリソースを減らすことができます。</p><h3 id="アプリケーションを動かしてみる"><a href="#アプリケーションを動かしてみる" class="headerlink" title="アプリケーションを動かしてみる"></a>アプリケーションを動かしてみる</h3><p>実際にアプリケーションから取れるメトリクスをPrometheusで見てみましょう。</p><p>今回、アプリケーションの言語はPythonを使用し、簡易なAPIサーバを立てるためにFastAPIを用いました。</p><p>アプリケーションは以下のようにヘルスチェックパスとPrometheusで<code>/metrics</code>のパスから情報を取得できるようにしました。</p><figure class="highlight py"><figcaption><span>app.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> prometheus_fastapi_instrumentator <span class="keyword">import</span> Instrumentator</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">Instrumentator(</span><br><span class="line">    excluded_handlers=[<span class="string">&quot;/metrics&quot;</span>],</span><br><span class="line">).instrument(app).expose(app=app, endpoint=<span class="string">&quot;/metrics&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/health&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">health</span>():</span><br><span class="line">    response = &#123;</span><br><span class="line">        <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;up&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>FastAPIでPrometheusのメトリクスを取得可能にするため、以下のライブラリを使用しています。今回はカスタマイズをかけていないですが、がっつり使い込むことを考えるとさらに作り込める余地はありそうです。</p><p><a href="https://github.com/trallnag/prometheus-fastapi-instrumentator">https://github.com/trallnag/prometheus-fastapi-instrumentator</a></p><p>これでコンテナを起動させ、<code>/metrics</code>にcURLを実行すると以下のようにたくさん情報が出てきます。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://localhost:8080/metrics</span><br><span class="line"></span><br><span class="line"><span class="comment"># HELP python_gc_objects_collected_total Objects collected during gc</span></span><br><span class="line"><span class="comment"># TYPE python_gc_objects_collected_total counter</span></span><br><span class="line">python_gc_objects_collected_total&#123;generation=<span class="string">&quot;0&quot;</span>&#125; 2396.0</span><br><span class="line">python_gc_objects_collected_total&#123;generation=<span class="string">&quot;1&quot;</span>&#125; 8411.0</span><br><span class="line">python_gc_objects_collected_total&#123;generation=<span class="string">&quot;2&quot;</span>&#125; 2168.0</span><br><span class="line"><span class="comment"># HELP python_gc_objects_uncollectable_total Uncollectable objects found during GC</span></span><br><span class="line"><span class="comment"># TYPE python_gc_objects_uncollectable_total counter</span></span><br><span class="line">python_gc_objects_uncollectable_total&#123;generation=<span class="string">&quot;0&quot;</span>&#125; 0.0</span><br><span class="line">python_gc_objects_uncollectable_total&#123;generation=<span class="string">&quot;1&quot;</span>&#125; 0.0</span><br><span class="line">python_gc_objects_uncollectable_total&#123;generation=<span class="string">&quot;2&quot;</span>&#125; 0.0</span><br><span class="line"><span class="comment"># HELP python_gc_collections_total Number of times this generation was collected</span></span><br><span class="line"><span class="comment"># TYPE python_gc_collections_total counter</span></span><br><span class="line">python_gc_collections_total&#123;generation=<span class="string">&quot;0&quot;</span>&#125; 141.0</span><br><span class="line">python_gc_collections_total&#123;generation=<span class="string">&quot;1&quot;</span>&#125; 12.0</span><br><span class="line">python_gc_collections_total&#123;generation=<span class="string">&quot;2&quot;</span>&#125; 1.0</span><br><span class="line"></span><br><span class="line">...(中略)...</span><br><span class="line"></span><br><span class="line">http_request_duration_highr_seconds_bucket&#123;le=<span class="string">&quot;10.0&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_highr_seconds_bucket&#123;le=<span class="string">&quot;30.0&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_highr_seconds_bucket&#123;le=<span class="string">&quot;60.0&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_highr_seconds_bucket&#123;le=<span class="string">&quot;+Inf&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_highr_seconds_count 1.0</span><br><span class="line">http_request_duration_highr_seconds_sum 0.0015817060047993436</span><br><span class="line"><span class="comment"># HELP http_request_duration_highr_seconds_created Latency with many buckets but no API specific labels. Made for more accurate percentile calculations.</span></span><br><span class="line"><span class="comment"># TYPE http_request_duration_highr_seconds_created gauge</span></span><br><span class="line">http_request_duration_highr_seconds_created 1.7132794545039835e+09</span><br><span class="line"><span class="comment"># HELP http_request_duration_seconds Latency with only few buckets by handler. Made to be only used if aggregation by handler is important.</span></span><br><span class="line"><span class="comment"># TYPE http_request_duration_seconds histogram</span></span><br><span class="line">http_request_duration_seconds_bucket&#123;handler=<span class="string">&quot;/health&quot;</span>,le=<span class="string">&quot;0.1&quot;</span>,method=<span class="string">&quot;GET&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_seconds_bucket&#123;handler=<span class="string">&quot;/health&quot;</span>,le=<span class="string">&quot;0.5&quot;</span>,method=<span class="string">&quot;GET&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_seconds_bucket&#123;handler=<span class="string">&quot;/health&quot;</span>,le=<span class="string">&quot;1.0&quot;</span>,method=<span class="string">&quot;GET&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_seconds_bucket&#123;handler=<span class="string">&quot;/health&quot;</span>,le=<span class="string">&quot;+Inf&quot;</span>,method=<span class="string">&quot;GET&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_seconds_count&#123;handler=<span class="string">&quot;/health&quot;</span>,method=<span class="string">&quot;GET&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_seconds_sum&#123;handler=<span class="string">&quot;/health&quot;</span>,method=<span class="string">&quot;GET&quot;</span>&#125; 0.0015817060047993436</span><br><span class="line"><span class="comment"># HELP http_request_duration_seconds_created Latency with only few buckets by handler. Made to be only used if aggregation by handler is important.</span></span><br><span class="line"><span class="comment"># TYPE http_request_duration_seconds_created gauge</span></span><br><span class="line">http_request_duration_seconds_created&#123;handler=<span class="string">&quot;/health&quot;</span>,method=<span class="string">&quot;GET&quot;</span>&#125; 1.7132806219318378e+09</span><br></pre></td></tr></table></figure><p>それぞれメトリクスがさし示している情報が何なのかを示してくれていて、わかりやすさを感じました。</p><p>次にPrometheus自体の設定です。Prometheusの設定には<code>prometheus.yml</code>を用いて読み込ませる必要があります。</p><p>今回使用したYAMLファイルは以下です。</p><figure class="highlight yml"><figcaption><span>prometheus.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;fastapi-app&#x27;</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">&#x27;/metrics&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;app:8080&#x27;</span>]</span><br></pre></td></tr></table></figure><p><code>job_name</code>以下でメトリクスを取得する対象や取得するためのパスを指定しています。</p><p>ソースレベルの設定、確認はここまでで、具体的にPrometheusの設定をしていきましょう。<br>コンテナを立ち上げた状態で <code>http://localhost:9090/graph</code>にアクセスすると、以下のような画面になります。</p><img src="/images/20240417b/スクリーンショット_2024-04-17_1.01.38.png" alt="" width="1192" height="797" loading="lazy"><p>そして、検索バーにFastAPIのコンテナの<code>/health</code>に対して受けたパスの合計が出力される <code>http_requests_total</code>を入れてみてみましょう。</p><img src="/images/20240417b/スクリーンショット_2024-04-17_1.10.32.png" alt="" width="1200" height="950" loading="lazy"><p>手打ちでcURLを実行してはいますが、リクエストした数だけグラフが上がってきていることがわかります。</p><p>このようにアプリケーションから出力されたメトリクスを取得することができました。</p><h2 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h2><p>GrafanaはGrafana Labsによって開発されている可視化ツールであり、ダッシュボードの作成はもちろんのことながら前述したPrometheusで実行したクエリをGrafanaでも同等にサポートしています。</p><p>PrometheusでできることはわざわざGrafanaでまたやらなくていいのでは？と思いましたが、そこは一旦飲み込んで試してみることにします。</p><h3 id="メトリクスの取得を行う"><a href="#メトリクスの取得を行う" class="headerlink" title="メトリクスの取得を行う"></a>メトリクスの取得を行う</h3><p>アプリケーションなどは先ほど使っていたものをそのまま利用します。</p><p>コンテナを立ち上げたあと　<code>http://localhost:3000/login</code>にアクセスすると、ログイン画面になるので、初期ユーザ&#x2F;パスワードである admin &#x2F; adminを打ち込んで、ログインしましょう。(そのあと、初期パスワードの変更を求められますが、今回の検証の本題からは外れるので割愛します）</p><img src="/images/20240417b/スクリーンショット_2024-04-17_1.19.48.png" alt="" width="1200" height="950" loading="lazy"><p>さて、ログインまでできたので、次はGrafanaからPrometheusを参照できるようにしましょう。サイドバーにある Connections &gt; Add new connection を押下しましょう。たくさんのツールをデータソースにできることがわかります。今回は検索バーにPrometheusと入力し、必要なものを選択しましょう。</p><img src="/images/20240417b/スクリーンショット_2024-04-17_11.52.25.png" alt="" width="1200" height="459" loading="lazy"><p>Promehteusを選択し、Add new data sourceを押下してホストの設定をしましょう。Prometheus Server URLに <code>http://prometheus:9090</code>を入力して画面下部にある　Save &amp; testを押下して保存しましょう。</p><p>保存ができたら、今度はサイドバーにある、Dashboardsを押下し、Create Dashboard &gt; Add visualization からダッシュボードを作りましょう。ここで、先ほど登録したデータソースが使えるようになります。メトリクスの追加ですが、下のスクリーンショットのように入力できる欄があるので、Metricに先ほどPrometheusでも利用した <code>http_requests_total</code>を入力して　Run queriesを押してみましょう。</p><img src="/images/20240417b/スクリーンショット_2024-04-17_12.00.23.png" alt="" width="793" height="280" loading="lazy"><p>そうすると、こちらでもグラフを表示することができました。（先ほどと概形が異なるのは取得時間が異なるためです。）</p><img src="/images/20240417b/スクリーンショット_2024-04-17_12.03.30.png" alt="" width="793" height="351" loading="lazy"><p>Metricの欄では、Prometheusが取得可能なすべてのメトリクスが使えるので、ものによっては2つ以上取得できるものがありますが、これは Label filtersで絞ることが可能です。</p><p>そして、右上の Apply を押下してダッシュボード化しましょう。</p><img src="/images/20240417b/スクリーンショット_2024-04-17_12.06.32.png" alt="" width="1200" height="588" loading="lazy"><h3 id="どんなことに使えそうか"><a href="#どんなことに使えそうか" class="headerlink" title="どんなことに使えそうか"></a>どんなことに使えそうか</h3><p>Grafanaはデータソースの一覧からわかるように多様なソースをサポートしています。今回試したPrometheus以外にもPostgreSQLなどのRDB、各クラウドの監視ツールとの連携、Google Analyticsなどの可視化も行えます。それぞれで可視化の部分はサポートされているとは思いますが、可視化ツールの一元管理、という意味ではGrafanaに多様なデータソースを束ねるというのは良いのかもしれません。<br>参考）<a href="https://grafana.com/docs/grafana/latest/datasources/#built-in-core-data-sources">Grafana data sources &gt; Built-in core data sources</a></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>監視・可視化ツールであるPrometheus、Grafanaを触って動かし、知るきっかけに十分なりました。</p><p>今いるプロジェクトではGrafanaのデータソースとして使えるOpenSearchを利用しているので、継続して導入タイミングを伺いながら知見を貯めていきます！</p><h2 id="参考書籍"><a href="#参考書籍" class="headerlink" title="参考書籍"></a>参考書籍</h2><ul><li><a href="https://booth.pm/ja/items/3907516">Prometheus実践ガイド: クラウドネイティブな監視システムの構築</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/prometheus/">prometheus</category>
      
      <category domain="https://future-architect.github.io/tags/grafana/">grafana</category>
      
      
      <comments>https://future-architect.github.io/articles/20240417b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>謎のAIチップベンダーTenstorrent製のAIボードを使ってみる（開封編）</title>
      <link>https://future-architect.github.io/articles/20240417a/</link>
      <guid>https://future-architect.github.io/articles/20240417a/</guid>
      <pubDate>Tue, 16 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;SAIGの山本です。&lt;/p&gt;
&lt;p&gt;先日リリースされたTenstorrent製のAI推論アクセラレーションボード&lt;a href=&quot;https://tenstorrent.com/cards/#grayskull-e150&quot;&gt;Grayskull</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>SAIGの山本です。</p><p>先日リリースされたTenstorrent製のAI推論アクセラレーションボード<a href="https://tenstorrent.com/cards/#grayskull-e150">Grayskull e150</a>を早速入手しましたので、開封します。</p><h1 id="Tenstorrentとは"><a href="#Tenstorrentとは" class="headerlink" title="Tenstorrentとは"></a><a href="https://tenstorrent.com/">Tenstorrent</a>とは</h1><p>カナダのトロントに本社がある、知る人ぞ知る、<a href="https://ja.wikipedia.org/wiki/%E3%82%B8%E3%83%A0%E3%83%BB%E3%82%B1%E3%83%A9%E3%83%BC">ジム・ケラー</a>率いる<a href="https://ja.wikipedia.org/wiki/RISC-V">RISC-V</a>&#x2F;AIチップベンダーです。日本法人も昨年に設立されています。</p><h1 id="Grayskullとは"><a href="#Grayskullとは" class="headerlink" title="Grayskullとは"></a>Grayskullとは</h1><p>Tenstorrent社が開発した、AI推論アクセラレーションチップです。</p><p>簡単に説明するとCPUの一種であるRISC-Vがメチャメチャ沢山内蔵されているチップで、AI推論などが効率的に行えるアーキテクチャーになっています。詳しくは、<a href="https://www.youtube.com/watch?v=lPX1H3jW8ZQ&t=17m45s">Tenstorrent社の動画</a>などをご覧ください。また、機会がありましたら、別途、アーキテクチャなどについて説明したいと思います。</p><h1 id="開封"><a href="#開封" class="headerlink" title="開封"></a>開封</h1><p>手前がブロアー（冷却ファン）の、奥がボード本体が入っている箱になります。<br><img src="/images/20240417a/IMG_3148.jpg" alt="" width="1200" height="900" loading="lazy"></p><p>ブロアーは、ボードと接合部分のパーツは３Dプリンタで出力したものを使ってます。<br><img src="/images/20240417a/IMG_3150.jpg" alt="" width="1200" height="900" loading="lazy"></p><p>ボードの表側。<br><img src="/images/20240417a/IMG_3151.jpg" alt="" width="1200" height="537" loading="lazy"></p><p>ボードの裏側。<br><img src="/images/20240417a/IMG_3153.jpg" alt="" width="1200" height="587" loading="lazy"></p><p>ボードを覆っている囲いを取り除くと大きなヒートシンクが見える。<br><img src="/images/20240417a/Image_20240412_190127_987.jpeg" alt="" width="1200" height="540" loading="lazy"></p><p>ヒートシンクを取り外すとAIチップやRAMが確認できる。<br><img src="/images/20240417a/Image_20240412_190127_922.jpeg" alt="jpeg" width="1200" height="502" loading="lazy"></p><p>その他、同梱されていたシールなど。黒い紙片はセットアップのオンラインマニュアルのURLのみ書かれていました。<br><img src="/images/20240417a/IMG_3152.jpg" alt="" width="1200" height="862" loading="lazy"></p><h1 id="セットアップ"><a href="#セットアップ" class="headerlink" title="セットアップ"></a>セットアップ</h1><p><a href="https://docs.tenstorrent.com/tenstorrent/add-in-boards-and-cooling-kits/grayskull-tm-e75-e150">Tenstorrent社のサイトにあるセットアップ手順</a>を元に設定を行います。</p><p>今回は、手元にあった下記環境で試してみました。</p><ul><li>CPU: Intel Core i7-7700K 4.20GHz</li><li>RAM: 64GB</li><li>PCIe: Gen3.0 x16</li><li>OS: Linux(Ubuntu 22.04.4 LTS)</li></ul><p>PCIeのみ、最低動作環境よりも低いですが、一旦、こちらの環境で試してみます。</p><h1 id="TT-SMI"><a href="#TT-SMI" class="headerlink" title="TT-SMI"></a>TT-SMI</h1><p>NVIDIA向けにはnvidia-smiというコマンドがありますが、Tenstorrent向けにはtt-smiというコマンドがシステム管理インタフェースとして用意されています。<br>このコマンドで、Tenstorrentのハードウェアやソフトウェアの状態やバージョンなどを確認することができます。今回は最低限の動作確認までということで、このツールによる確認までにしたいと思います。<br>具体的には、次のような画面になります。</p><p>TT-SMI: デバイス情報画面<br><img src="/images/20240417a/SCR-20240412-pthf.png" alt="" width="1200" height="522" loading="lazy"></p><p>TT-SMI: デバイス計測画面<br><img src="/images/20240417a/SCR-20240412-pucp.png" alt="" width="1200" height="529" loading="lazy"></p><p>TT-SMI: ファームウェア画面<br><img src="/images/20240417a/SCR-20240412-pulb.png" alt="" width="1200" height="531" loading="lazy"></p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>開封編ということで、パッケージ内容の確認とセットアップ、システム管理ツールによるハードウェアとソフトウェアの状態の確認を行いました。</p><p>次回以降では、サンプルプログラムの紹介やアーキテクチャーの解説などを行っていきたいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/RISC-V/">RISC-V</category>
      
      <category domain="https://future-architect.github.io/tags/AI/">AI</category>
      
      <category domain="https://future-architect.github.io/tags/tenstorrent/">tenstorrent</category>
      
      <category domain="https://future-architect.github.io/tags/Grayskull-e150/">Grayskull e150</category>
      
      
      <comments>https://future-architect.github.io/articles/20240417a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MLflow上でOptunaによって生成される大量のrunを整理する</title>
      <link>https://future-architect.github.io/articles/20240416a/</link>
      <guid>https://future-architect.github.io/articles/20240416a/</guid>
      <pubDate>Mon, 15 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、SAIG&amp;#x2F;MLOpsチームでアルバイトをしている齋藤です。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、SAIG&#x2F;MLOpsチームでアルバイトをしている齋藤です。</p><p><a href="https://mlflow.org/">MLflow</a>は機械学習の管理を扱うツールとして、<a href="https://www.preferred.jp/ja/projects/optuna/">Optuna</a>はハイパーパラメータを自動調整するツールとしてともに広く使用されているツールです。MLflowとOptunaを同時に利用した際に、Optunaが複数回試行することによってMLflow上にrunが大量に生成され、MLflow上で試行結果が見づらくなります。</p><p>本記事では、大量に生成されるrunに親のrunを付与することで、MLflowのWebUIから見やすくする方法を提示します。</p><h2 id="課題"><a href="#課題" class="headerlink" title="課題"></a>課題</h2><p>Optunaは事前に指定した範囲の中からハイパーパラメータの組み合わせを自動的に選択してモデルを学習して評価するという試行を繰り返すことで、良いハイパーパラメータを探索するツールであり、これにより手作業でハイパーパラメータを調整するのを省けます。</p><p>MLflowは機械学習の管理について幅広く扱うツールであり、例えば各実験に使用されたハイパーパラメータや性能の記録などが出来るため、実験の再現などに役立ちます。</p><p>これらは大変便利なツールなのですが、これらを組み合わせて使用した際、画像のようにMLflow上で結果を見た際に大量のrunが生成されて、結果一覧が見づらくなります。特に、条件を変化させてOptunaによる最適化を実行させた場合に、前回までのOptunaによって生成されたrunと今回分のrunの見分けが付けにくくなるという問題が発生します。</p><img src="/images/20240416a/image.png" alt="image.png" width="1200" height="421" loading="lazy"><h2 id="課題の解決"><a href="#課題の解決" class="headerlink" title="課題の解決"></a>課題の解決</h2><h3 id="方針"><a href="#方針" class="headerlink" title="方針"></a>方針</h3><p>MLflowではrun毎にタグを設定できますが、その中でも<a href="https://mlflow.org/docs/latest/tracking/tracking-api.html#system-tags">システムタグ</a>と呼ばれるタグがあり、MLflowの中で特殊な意味を持ちます。<br><code>mlflow.parentRunId</code>というタグはシステムタグの一つで、このタグに親のrunのIDを設定すると、WebUI上で親子のrunがネストした形で表示されるようになります。</p><p>そのため…</p><ol><li>MLflowで空のrunを実行する。</li><li>1で実行したrunを目的関数の中で親のrunとして設定する。</li></ol><p>…という2つの手順を踏めば、Optunaによって生成される大量のrunを一つの親runに結び付けることができます。</p><h3 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h3><h4 id="1-MLflowで空のrunを実行する"><a href="#1-MLflowで空のrunを実行する" class="headerlink" title="1. MLflowで空のrunを実行する"></a>1. MLflowで空のrunを実行する</h4><p>まずMLflowで親のrunとなる空のrunを実行します。</p><p>この時のrun_idは次に必要になるため保存しておきます。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> mlflow.start_run(experiment_id=<span class="number">0</span>) <span class="keyword">as</span> run:</span><br><span class="line">    parent_run_id = run.info.run_id</span><br></pre></td></tr></table></figure><h4 id="2-1で実行したrunを目的関数の中で親のrunとして設定する"><a href="#2-1で実行したrunを目的関数の中で親のrunとして設定する" class="headerlink" title="2. 1で実行したrunを目的関数の中で親のrunとして設定する"></a>2. 1で実行したrunを目的関数の中で親のrunとして設定する</h4><p>runにタグを設定するには<code>mlflow.set_tag</code>関数を使用すれば出来ます。</p><p>sklearnのSGDClassifierの最適化を例にすると、目的関数は次のようになります。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">objective</span>(<span class="params">trial</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">with</span> mlflow.start_run(experiment_id=<span class="number">0</span>) <span class="keyword">as</span> run:</span><br><span class="line">        mlflow.set_tag(<span class="string">&quot;mlflow.parentRunId&quot;</span>, parent_run_id) <span class="comment"># start_runの直後に実行する</span></span><br><span class="line"></span><br><span class="line">        alpha = trial.suggest_float(<span class="string">&quot;alpha&quot;</span>, <span class="number">1e-5</span>, <span class="number">1e-1</span>, log=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        wine = sklearn.datasets.load_wine()</span><br><span class="line">        classes = <span class="built_in">list</span>(<span class="built_in">set</span>(wine.target))</span><br><span class="line"></span><br><span class="line">        train_x, valid_x, train_y, valid_y = sklearn.model_selection.train_test_split(</span><br><span class="line">            wine.data, wine.target, test_size=<span class="number">0.25</span>, random_state=<span class="number">0</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        clf = sklearn.linear_model.SGDClassifier(alpha=alpha)</span><br><span class="line">        clf.fit(train_x, train_y)</span><br><span class="line"></span><br><span class="line">        score = clf.score(valid_x, valid_y)</span><br><span class="line"></span><br><span class="line">        mlflow.log_param(<span class="string">&quot;alpha&quot;</span>, alpha)</span><br><span class="line">        mlflow.log_metric(<span class="string">&quot;accuracy&quot;</span>, score)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> score</span><br></pre></td></tr></table></figure><p>実装全体として次のようになります。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mlflow</span><br><span class="line"><span class="keyword">import</span> optuna</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">import</span> sklearn.datasets</span><br><span class="line"><span class="keyword">import</span> sklearn.linear_model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">objective</span>(<span class="params">trial</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">with</span> mlflow.start_run(experiment_id=<span class="number">0</span>) <span class="keyword">as</span> run:</span><br><span class="line">        mlflow.set_tag(<span class="string">&quot;mlflow.parentRunId&quot;</span>, parent_run_id) <span class="comment"># start_runの直後に実行する</span></span><br><span class="line"></span><br><span class="line">        alpha = trial.suggest_float(<span class="string">&quot;alpha&quot;</span>, <span class="number">1e-5</span>, <span class="number">1e-1</span>, log=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        wine = sklearn.datasets.load_wine()</span><br><span class="line">        classes = <span class="built_in">list</span>(<span class="built_in">set</span>(wine.target))</span><br><span class="line"></span><br><span class="line">        train_x, valid_x, train_y, valid_y = sklearn.model_selection.train_test_split(</span><br><span class="line">            wine.data, wine.target, test_size=<span class="number">0.25</span>, random_state=<span class="number">0</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        clf = sklearn.linear_model.SGDClassifier(alpha=alpha)</span><br><span class="line">        clf.fit(train_x, train_y)</span><br><span class="line"></span><br><span class="line">        score = clf.score(valid_x, valid_y)</span><br><span class="line"></span><br><span class="line">        mlflow.log_param(<span class="string">&quot;alpha&quot;</span>, alpha)</span><br><span class="line">        mlflow.log_metric(<span class="string">&quot;accuracy&quot;</span>, score)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">with</span> mlflow.start_run(experiment_id=<span class="number">0</span>) <span class="keyword">as</span> run:</span><br><span class="line">        parent_run_id = run.info.run_id</span><br><span class="line"></span><br><span class="line">    study = optuna.create_study()</span><br><span class="line">    study.optimize(objective, n_trials=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p>上のコードを実行すると、Optunaによって実行された全ての試行がMLflowに送信されます。</p><p>WebUI上では画像のように表示され、Optunaの実行単位ごとにrunがネストして表示されるので見やすくなりました。</p><img src="/images/20240416a/image_2.png" alt="image.png" width="1200" height="391" loading="lazy"><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>以上、<code>mlflow.parentRunId</code>というシステムタグにrunIDを設定するとWebUI上でrunがネストして表示されることを利用して、自動生成されるrunをUI上で整理して表示させるという話でした。</p><p>MLflowのシステムタグはmlflow.parentRunId以外にも存在するので、それらを利用するとUI上で更なる恩恵が得られるかもしれません。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mlflow.org/docs/latest/tracking/tracking-api.html#system-tags">https://mlflow.org/docs/latest/tracking/tracking-api.html#system-tags</a></li><li><a href="https://mlflow.org/">https://mlflow.org/</a></li><li><a href="https://www.preferred.jp/ja/projects/optuna/">https://www.preferred.jp/ja/projects/optuna/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/MLOps/">MLOps</category>
      
      <category domain="https://future-architect.github.io/tags/MLflow/">MLflow</category>
      
      <category domain="https://future-architect.github.io/tags/Optuna/">Optuna</category>
      
      
      <comments>https://future-architect.github.io/articles/20240416a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
