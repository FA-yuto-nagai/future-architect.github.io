<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Thu, 09 Feb 2023 02:22:32 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Excel VBAでもう頑張らない</title>
      <link>https://future-architect.github.io/articles/20230209a/</link>
      <guid>https://future-architect.github.io/articles/20230209a/</guid>
      <pubDate>Wed, 08 Feb 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;Excelは開発者もそうじゃない人も使う広く使われているツールです。Excelに詳しい人も多く、データの可視化はとりあえずExcelの表にデータを入れてしまえば、あとはグラフ化はユーザーにおまかせ、とかいろいろできます。ただ、そのかなり使われているのと裏腹に、20世紀で時代</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>Excelは開発者もそうじゃない人も使う広く使われているツールです。Excelに詳しい人も多く、データの可視化はとりあえずExcelの表にデータを入れてしまえば、あとはグラフ化はユーザーにおまかせ、とかいろいろできます。ただ、そのかなり使われているのと裏腹に、20世紀で時代で止まっているのがVisual Basic for Applicationです。VBA。</p><p>ちょっとしたツールの実装環境としてExcelが使われていたりするのですが、Excel VBAのメンテナンスは結構大変というか、現代的なプログラミング環境と比べるとエラーメッセージも不親切だし、記述方法も冗長だし、ちょっと厳しい。また、ウェブで検索しても新しい情報が出てこず、新しいAPIを使う方法もなかなか出てこなかったりします。<a href="https://learn.microsoft.com/ja-jp/windows/win32/api/wincred/nf-wincred-credwritew">CredWriteW</a>でセキュアな情報保存をVBAで頑張ろうとしたけど、自分でやってもうまくいかず、検索してもやってみた例とかも出てこなくて、全世界の人口が70億程度ではVBAの知見を積み重ねるには足りないということが分かります。</p><p>新規で大規模なものをこれから作ったりはないかもしれませんが、既存の大規模なスクリプトのメンテナンスの仕事とかは来たり、機能拡張しろ、みたいなことがあるかもしれないので、VBAを書かずに済む方法を検討しました。JavaScriptで書けるOffice ScriptはOffice 365限定なんですかね？ユーザーのPCには新しいツールなどをインストールしない、という要件にも対応できるように、PowerShellにオフロードする方法を検討しました。</p><p>PowerShellもWindows 10以上を使っていればインストールしなくても使えますし、PowerShellの方が文法が分かりやすく、情報がそろっている、開発環境があって開発も検証も楽、などメリットが多いです。</p><h1 id="VBAの画面を表示"><a href="#VBAの画面を表示" class="headerlink" title="VBAの画面を表示"></a>VBAの画面を表示</h1><p>久々すぎて(20年ぶり？)色々忘れてたので備忘のために手順を書き残しておきます。まずはオプションで「リボンのユーザー設定」で「開発」を表示するようにします。</p><img src="/images/20230209a/image.png" alt="リボンのユーザー設定" width="936" height="405" loading="lazy"><p>そうするとリボンに「開発」が出てくるので、一番右のVisual Basicボタンを押すと開発環境が出てきます。</p><img src="/images/20230209a/image_2.png" alt="Visual Basicの開発環境" width="615" height="191" loading="lazy"><p>ユーザーが実行する起点となるUIボタンなどは、開発の挿入から選べます。ボタンを置くと、置いた時のコールバックのサブルーチンを作るウインドウが出て、起動するコードが生成できます。古き良き、WYSIWYGなビジュアルプログラミングです。1995年ぐらいには輝いていましたね。</p><img src="/images/20230209a/image_3.png" alt="古き良き、WYSIWYGなビジュアルプログラミング" width="257" height="274" loading="lazy"><p>あとは、ここにコードを書いていけばOKです。</p><h1 id="PowerShellのコードをVBAに埋め込み"><a href="#PowerShellのコードをVBAに埋め込み" class="headerlink" title="PowerShellのコードをVBAに埋め込み"></a>PowerShellのコードをVBAに埋め込み</h1><p>複数行テキストとかヒアドキュメントみたいなのはなさそうなので、ソースコードを文字列の形式で書いて結合するコードを書きます。エスケープとかをソースをメンテするたびに手で治したりはしたくないので、関数生成のPythonスクリプトを書きました。</p><figure class="highlight py"><figcaption><span>convert.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;Function SourceCode() As String</span></span><br><span class="line"><span class="string">    Dim src As String&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(sys.argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> src:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> src.readlines():</span><br><span class="line">        line = line.removesuffix(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        line = line.replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&quot;&quot;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;    src = src + &quot;<span class="subst">&#123;line&#125;</span>&quot; + vbCrLf&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;    SourceCode = src&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;End Function&quot;</span>)</span><br></pre></td></tr></table></figure><p>次のようなスクリプトを変換してみます</p><figure class="highlight powershell"><figcaption><span>hello.ps1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Write-Host</span> <span class="string">&quot;ハロー&quot;</span></span><br><span class="line"><span class="built_in">Write-Host</span> <span class="string">&quot;World&quot;</span></span><br></pre></td></tr></table></figure><p>VBAにそのまま張れる関数コードになりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; python3.exe convert.py hello.ps1</span><br><span class="line">Function SourceCode() As String</span><br><span class="line">    Dim src As String</span><br><span class="line">    src = src + <span class="string">&quot;Write-Host &quot;</span><span class="string">&quot;ハロー&quot;</span><span class="string">&quot;&quot;</span> + vbCrLf</span><br><span class="line">    src = src + <span class="string">&quot;Write-Host &quot;</span><span class="string">&quot;World&quot;</span><span class="string">&quot;&quot;</span> + vbCrLf</span><br><span class="line">    SourceCode = src</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure><h1 id="PowerShellの実行"><a href="#PowerShellの実行" class="headerlink" title="PowerShellの実行"></a>PowerShellの実行</h1><p>PowerShellとして実行するのは、このスクリプトをTEMPファイルとして書き出して実行すれば良さそうです。いろいろ検索すると、ファイルの操作はFileSystemObject、UTF-8でファイルを書きだすにはADODB.Streamを、PowerShellの実行にはWScript.Shellを使えばよいということが分かりました。</p><p>以下のコードではそれを書いたものです。あとは、この関数の下に、さきほどの関数を張り付けておけば、PowerShellが実行できます。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> ボタン_Click()</span><br><span class="line">    <span class="keyword">Dim</span> FSO <span class="keyword">As</span> <span class="type">Object</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> scriptPath <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Set</span> FSO = CreateObject(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line"></span><br><span class="line">    scriptPath = FSO.GetSpecialFolder(<span class="number">2</span>) + <span class="string">&quot;\&quot;</span> + FSO.GetTempName + <span class="string">&quot;.ps1&quot;</span> <span class="comment">&#x27; TempFolder</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">With</span> CreateObject(<span class="string">&quot;ADODB.Stream&quot;</span>)</span><br><span class="line">        .Charset = <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">        .Open</span><br><span class="line">        .WriteText SourceCode(), <span class="number">1</span></span><br><span class="line">        .SaveToFile scriptPath, <span class="number">2</span></span><br><span class="line">        .Close</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> shell <span class="keyword">As</span> <span class="type">Object</span></span><br><span class="line">    <span class="keyword">Set</span> shell = CreateObject(<span class="string">&quot;WScript.Shell&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> result <span class="keyword">As</span> <span class="type">Object</span></span><br><span class="line">    <span class="keyword">Set</span> result = shell.Exec(<span class="string">&quot;powershell -NoLogo -WindowStyle Hidden -ExecutionPolicy RemoteSigned &quot;</span> + scriptPath)</span><br><span class="line">    Debug.Print result.Stdout.ReadAll</span><br><span class="line"></span><br><span class="line">    FSO.DeleteFile scriptPath</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><h1 id="VBAのメモ"><a href="#VBAのメモ" class="headerlink" title="VBAのメモ"></a>VBAのメモ</h1><p>あまり書きたくないとはいえ、ちょっといじらないといけないとき用のメモ</p><ul><li>サブルーチンと関数があり、後者は返り値がある。return文はなく、関数名と同名の変数に代入すると返り値になる</li><li>変数はDim 名前 As 型で宣言</li><li>変数に値をセットするときは、プリミティブ型はLet 変数 &#x3D; 値。オブジェクトはSet 変数 &#x3D; 値。</li><li>文字列はダブルクオート。ダブルクオートを中で使いたいときのエスケープは<code>&quot;&quot;</code>とする。</li><li>Debug.Printでデバッグ出力。開発環境でイミディエイトウィンドウを出せば見られる。</li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>VBAからPowerShellへのオフロードが実現できました。文字列をちょっと処理するのとかもPowerShellの方が書きやすいですね。Invoke-WebRequestなどもあって、ウェブのリクエストを飛ばしたりもやりやすいですし、サーバー起動してコールバックを受けたり（要するにOpenID Connectの認証をしたり）もできますし、他サービス連携がはかどります。VBAは、Excelとの接点としては残りますが、ウェブ上の情報も減っていったりすることを考えると、なるべく書かないようにしていった方が将来のメンテナンス作業を考えると良いかなと思っています。</p><h1 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h1><ul><li><a href="http://officetanaka.net/excel/vba/filesystemobject/">http://officetanaka.net/excel/vba/filesystemobject/</a></li><li><a href="http://officetanaka.net/excel/vba/file/file11.htm">http://officetanaka.net/excel/vba/file/file11.htm</a></li><li><a href="https://atmarkit.itmedia.co.jp/ait/articles/0407/08/news101.html">https://atmarkit.itmedia.co.jp/ait/articles/0407/08/news101.html</a></li><li><a href="https://www.tipsfound.com/vba/18026">https://www.tipsfound.com/vba/18026</a></li><li><a href="https://future-architect.github.io/articles/20221130a/">https://future-architect.github.io/articles/20221130a/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/PowerShell/">PowerShell</category>
      
      <category domain="https://future-architect.github.io/tags/VBA/">VBA</category>
      
      <category domain="https://future-architect.github.io/tags/Excel/">Excel</category>
      
      
      <comments>https://future-architect.github.io/articles/20230209a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ARMアーキテクチャなマシンでwgrib2が動くDockerfileを作ってみた</title>
      <link>https://future-architect.github.io/articles/20230208a/</link>
      <guid>https://future-architect.github.io/articles/20230208a/</guid>
      <pubDate>Tue, 07 Feb 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230208a/images.jpg&quot; alt=&quot;&quot; width=&quot;400&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230208a/images.jpg" alt="" width="400" height="107"><p>こんにちは。フューチャーの矢野です。</p><p>wgrib2がすぐ使えるDockerfileが欲しかったので、作成しました。<br>M1 Macで動くようにARMアーキテクチャ向けに定義しました。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><ul><li>Dockerfileは下記の通りです</li><li>マルチステージビルドをして、イメージを小さくします。二つ目の環境にmakeした実行ファイルを配置します</li><li>configureのオプションにアーキテクチャを指定しています。x86でmakeするときにはconfigureのオプション書き換えなしでビルドできました</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> arm64v8/ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt -y update \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y upgrade \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y install build-essential \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y install gfortran \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y install wget</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># download latest wgrib2</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> wget https://www.ftp.cpc.ncep.noaa.gov/wd51we/wgrib2/wgrib2.tgz.v3.1.1 \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; tar xvfz wgrib2.tgz.v3.1.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit makefile</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> grib2/ \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; sed -i -e <span class="string">&quot;s/#export CC=gcc/export CC=gcc/g&quot;</span> makefile \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; sed -i -e <span class="string">&quot;s/#export FC=gfortran/export FC=gfortran/g&quot;</span> makefile \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; sed -i -e <span class="string">&quot;860 s/.\/configure/.\/configure --build=arm/g&quot;</span> makefile \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; sed -i -e <span class="string">&quot;936 s/.\/configure/.\/configure --build=arm/g&quot;</span> makefile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># build</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> grib2/ \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; make</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> arm64v8/ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt -y update \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y upgrade \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y install gfortran</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=0 /root/grib2/wgrib2/wgrib2 /usr/local/bin/wgrib2</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;wgrib2&quot;</span>]</span></span><br></pre></td></tr></table></figure><ul><li>Dockerfileの置いてあるディレクトリで下記を実行することでビルドされます。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t wgrib2:latest .</span><br></pre></td></tr></table></figure><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><h3 id="wgrib2とは"><a href="#wgrib2とは" class="headerlink" title="wgrib2とは"></a>wgrib2とは</h3><p>アメリカ海洋気象庁(NOAA)が提供しているGRIB2を扱うことができるプログラムです。<a href="https://www.cpc.ncep.noaa.gov/products/wesley/wgrib2/">提供ページ</a></p><h3 id="GRIB2とは"><a href="#GRIB2とは" class="headerlink" title="GRIB2とは"></a>GRIB2とは</h3><p>世界気象機関WMOが定めるデータフォーマットです。<br>気象データなどの格子点形式のデータを扱う際に利用されます。</p><h2 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h2><p>下記のような感じで実行するバージョンが表示されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v $(<span class="built_in">pwd</span>):/root/ wgrib2:latest -version</span><br></pre></td></tr></table></figure><p>ホストPCのディレクトリをマウントしているので、grib2ファイルを読み込ませたい場合などは下記のように実行すれば良いです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v $(<span class="built_in">pwd</span>):/root/ wgrib2:latest sample.grib2 -csv-</span><br></pre></td></tr></table></figure><h2 id="試しに使ってみる"><a href="#試しに使ってみる" class="headerlink" title="試しに使ってみる"></a>試しに使ってみる</h2><p>緯度経度を指定したファイルを抽出後、csvとして出力、先頭の10行を標準出力してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -v $(<span class="built_in">pwd</span>):/root/ wgrib2:latest -small_grib 130:135 30:35 small.grib Z__C_RJTD_20160620150000_MET_GPV_Ggis1km_Plfdc_Aper10min_FH0000-0300_grib2.bin</span><br><span class="line"></span><br><span class="line">1:0:d=2016062015:var discipline=0 center=34 local_table=1 parmcat=1 parm=218:surface:anl:</span><br><span class="line"></span><br><span class="line">$ docker run -v $(<span class="built_in">pwd</span>):/root/ wgrib2:latest small.grib -csv small.csv</span><br><span class="line"></span><br><span class="line">1:0:d=2016062015:var discipline=0 center=34 local_table=1 parmcat=1 parm=218:surface:anl:</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">head</span> -n 10 small.csv</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.006,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.019,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.031,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.044,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.056,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.069,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.081,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.094,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.106,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.119,30.0042,0</span><br></pre></td></tr></table></figure><p>出力できていますね。</p><p>サンプルデータは<a href="https://www.data.jma.go.jp/developer/gpv_sample.html">気象庁</a>から配布されている「大雨警報(浸水害)・洪水警報の危険度分布（統合版）」を使用しました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>wgrib2をインストールしたDockerfileを作成して、コマンドが実行できることを確認するところまでを書きました。</p><p>アーキテクチャによって設定内容が異なるため、x86向けには別のファイルを定義するか、マルチアーキテクチャに対応した書き方に対応していきたいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Docker/">Docker</category>
      
      <category domain="https://future-architect.github.io/tags/wgrib2/">wgrib2</category>
      
      <category domain="https://future-architect.github.io/tags/grib2/">grib2</category>
      
      <category domain="https://future-architect.github.io/tags/Ubuntu/">Ubuntu</category>
      
      
      <comments>https://future-architect.github.io/articles/20230208a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.20 リリース連載 go build に追加される cover オプション（利用例付き）</title>
      <link>https://future-architect.github.io/articles/20230203a/</link>
      <guid>https://future-architect.github.io/articles/20230203a/</guid>
      <pubDate>Thu, 02 Feb 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG DX ユニット所属、金欠コンサルタントの藤井です。最近でもないですが、SwitchBot</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG DX ユニット所属、金欠コンサルタントの藤井です。最近でもないですが、SwitchBot ロックと、キーパッド&#x2F;指紋認証パッドを買いました。我が家における IoT デバイスのカバレッジが着実に向上しており、快適な日々を過ごしています。</p><p><a href="/articles/20230123a/">Go 1.20 連載</a> 7 記事目にして、最終回の本記事では、<code>go build</code>コマンドに新たに追加される<code>-cover</code>オプションについてお伝えします。せっかくなので実際に使ってみたレポートもお届けしようと思います。</p><p>なお、公式でも詳細な説明を記したランディングページが用意されているので、本記事の後にこちらもご覧いただけると、より一層理解が深まると思います。</p><p><a href="https://go.dev/testing/coverage/">https://go.dev/testing/coverage/</a></p><h2 id="cover-オプションとは"><a href="#cover-オプションとは" class="headerlink" title="cover オプションとは"></a>cover オプションとは</h2><h3 id="ビルド・実行手順"><a href="#ビルド・実行手順" class="headerlink" title="ビルド・実行手順"></a>ビルド・実行手順</h3><p><code>go build</code>コマンドは、作成したアプリケーションをビルドする際に利用しますが、そのオプションに新たに<code>-cover</code>オプションが追加されます。ざっくり書くと、ビルド後のアプリケーションに対し、テストを実行した際のテストカバレッジを取得できるようにするためのオプションです。</p><p>使い方は簡単で、単に<code>go build -cover .</code>のように、いつもの build に<code>-cover</code>オプションを追加するだけです。</p><p>このように、<code>-cover</code>以外のオプションをつけずに実行した場合、ローカルのパッケージのみがカバレッジの計測対象となり、（標準含む）外部パッケージは対象外となります。ローカルパッケージの一部をカバレッジ計測対象としたい場合や、外部パッケージも対象としたい場合は、<code>go build -cover -coverpkg=example.com,fmt,net/http .</code>のように、<code>-coverpkg</code>を用いて、明示的に対象パッケージを指定します。<code>-coverpkg</code>を用いた場合は、指定していないパッケージは（ローカル含む）全て対象外となります。</p><p>あとはビルドされたバイナリを実行すればよいのですが、その際に<code>GOCOVERDIR</code>の環境変数に、カバレッジを記録したファイルの出力先を設定する必要があります。</p><p>また、<code>GOCOVERDIR</code>で指定したディレクトリが存在しない場合は、カバレッジファイルは出力されません。ということで、ディレクトリを作成したうえで、<code>GOCOVERDIR=coverdir ./main</code>のようにして実行しましょう。すると、指定したディレクトリにそれぞれ<code>covmeta</code>と<code>covcounters</code>から始まるファイルが出力されます。<code>covmeta</code>はカバレッジ収集対象のソースコードの各種情報が記録されたファイル、<code>covcounters</code>の方は、カバレッジ等の情報が記録されたファイルです。</p><p>前者は<code>meta-data files</code>と呼ばれており、何度実行しても（再ビルドされないかぎり）不変な値であるソースコードの情報が記録されているのみのため、初回実行時にのみ作成され、以後更新されません。</p><p>一方、  後者は<code>counter data files</code>と呼ばれており、こちらは実行の都度変動し得る情報が記録されているため、実行の度に新規で作成されます。</p><p>ちなみに、<code>GOCOVERDIR=coverdir go run -cover .</code>のように、<code>go run</code>でももちろん可能です。</p><h3 id="カバレッジの確認手順"><a href="#カバレッジの確認手順" class="headerlink" title="カバレッジの確認手順"></a>カバレッジの確認手順</h3><p><code>GOCOVERDIR</code>に出力された 2 種類のファイルはバイナリのため、人間が閲覧できるものにはなっていません。</p><p>これを確認するためには、<code>go tool</code>に新たに追加されたサブコマンド<code>covdata</code>を使用します。</p><p>公式そのままの引用ですが、以下のように<code>percent</code>サブコマンドで<code>-i</code>オプションにカバレッジファイルの出力先を指定することで、パッケージごとのカバレッジが確認できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> somedata</span><br><span class="line">covcounters.c6de772f99010ef5925877a7b05db4cc.2424989.1670252383678349347</span><br><span class="line">covmeta.c6de772f99010ef5925877a7b05db4cc</span><br><span class="line">$ go tool covdata percent -i=somedata</span><br><span class="line">    main    coverage: 100.0% of statements</span><br><span class="line">    mydomain.com/greetings  coverage: 100.0% of statements</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>また、<code>textfmt</code>サブコマンドにより、従来の<code>go test</code>コマンドと同様に、テキスト形式でカバレッジを保存することができます。</p><p>これも公式の引用ですが、以下のように<code>go tool cover</code>に入力することで、<code>go test</code>と同様にカバレッジを確認できます。（<code>go tool cover -html=profile.txt -o profile.html</code>のように html 形式でのカバレッジ確認も当然可能です。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> somedata</span><br><span class="line">covcounters.c6de772f99010ef5925877a7b05db4cc.2424989.1670252383678349347</span><br><span class="line">covmeta.c6de772f99010ef5925877a7b05db4cc</span><br><span class="line">$ go tool covdata textfmt -i=somedata -o profile.txt</span><br><span class="line">$ <span class="built_in">cat</span> profile.txt</span><br><span class="line">mode: <span class="built_in">set</span></span><br><span class="line">mydomain.com/myprogram.go:10.13,12.2 1 1</span><br><span class="line">mydomain.com/greetings/greetings.go:3.23,5.2 1 1</span><br><span class="line">$ go tool cover -func=profile.txt</span><br><span class="line">mydomain.com/greetings/greetings.go:3:  Goodbye     100.0%</span><br><span class="line">mydomain.com/myprogram.go:10:       main        100.0%</span><br><span class="line">total:                  (statements)    100.0%</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="複数実行時のカバレッジ制御"><a href="#複数実行時のカバレッジ制御" class="headerlink" title="複数実行時のカバレッジ制御"></a>複数実行時のカバレッジ制御</h3><p>そのほかにも、<code>go tool covdata</code>には<code>merge</code>, <code>subtract</code>, <code>intersect</code>のサブコマンドが存在します。名前の通り、カバレッジを<code>結合</code>・<code>差分抽出</code>・<code>交差抽出</code>するためのサブコマンドです。</p><p>どれも使い方は同じで、<code>go tool covdata merge|subtract|intersect -i=dir1,dir2 -o output</code>のように使います。（merge のみ<code>-i</code>に 3 つ以上のディレクトリを指定できますが、それ以外は 2 つのみ可能です。）</p><p>ユースケースとしては以下などでしょうか。</p><ul><li><code>merge</code><ul><li>異なる環境下での実行結果を結合し、環境依存を吸収した状態でのカバレッジを確認する（公式記載の例）</li></ul></li><li><code>subtract</code><ul><li>異なる環境下での実行結果の差分を抽出し、環境依存箇所を特定する</li></ul></li><li><code>intersect</code><ul><li>異なる環境下での実行結果の交差部分を抽出し、環境に依存しない箇所を特定する</li><li>テストケースごとの実行結果の交差部分を抽出し、複数回実行されている（場合によっては無駄であり、テスト効率を下げている）箇所を特定する</li></ul></li></ul><p>パッと思いつく限りではありますが、有用なように見えます。</p><p>ほかにも<code>-cpuprofile</code>や<code>-memprofile</code>など、<code>go test</code>でできていたことは大体可能なようです。</p><h2 id="cover-オプションの利用例"><a href="#cover-オプションの利用例" class="headerlink" title="cover オプションの利用例"></a>cover オプションの利用例</h2><h3 id="想定されるユースケース"><a href="#想定されるユースケース" class="headerlink" title="想定されるユースケース"></a>想定されるユースケース</h3><p>さて、ざっくり概要をさらったところで、この<code>-cover</code>オプションのユースケースについて考えてみます。</p><p><a href="https://github.com/golang/go/issues/51430">proposal</a>には、<code>-cover</code>の導入経緯として、従来の<code>go test</code>の弱点が以下のように記載されています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A key weakness of the current implementation is that it does not scale well-- it</span><br><span class="line">is difficult or impossible to gather coverage data for applications as opposed</span><br><span class="line">to collections of packages, and for testing scenarios involving multiple</span><br><span class="line">runs/executions.</span><br></pre></td></tr></table></figure><p>ざっくり、従来の<code>go test</code>はアプリケーション全体のテストや、繰り返し実行されるシナリオに対するテストを弱点としている、といった内容で、なるほど確かにと思う内容です。</p><p>導入経緯を踏まえると、ユースケースとしては以下などが挙げられるかなと思います。</p><ol><li>DB・外部システム等との結合部分を含む、アプリケーション全体を通してのテスト品質分析</li><li>複数環境下での実行結果差分の解析</li><li>結合・シナリオテストの網羅性分析</li></ol><h3 id="REST-API-サーバを例に、cover-を利用したテストを試してみる"><a href="#REST-API-サーバを例に、cover-を利用したテストを試してみる" class="headerlink" title="REST API サーバを例に、cover を利用したテストを試してみる"></a>REST API サーバを例に、cover を利用したテストを試してみる</h3><p>ではせっかくなので、<code>-cover</code>を利用したテストを試してみようと思います。</p><h4 id="試してみる内容"><a href="#試してみる内容" class="headerlink" title="試してみる内容"></a>試してみる内容</h4><p>現在私が携わっている案件では、Go を用いて REST API サーバを複数台構築しています。</p><p>システム内のサーバ間通信に加え、外部システムとの通信等が発生することもあり、テストは API に対してリクエストを送り、レスポンス・DB 事後状態を検証する、E2E テストを実施しています。（システム全体ではフロントエンドも存在するため、厳密には End to End ではありませんが、API サーバ単独でも公開しているので、E2E と呼んでいます。）実際にテスト対象のサーバをローカル上に建て、別途 Go で書いたテストコードを<code>go test</code>で実行し、直接テスト対象サーバにリクエストを送っています。（他システムはモックサーバや実際のサーバを建てます。）</p><p>しかしながら、この方法ではテスト対象サーバのテストカバレッジを取得することはできないため、自動テストのうま味が半減しています。テストの網羅性担保も人力レビューによるものとなってしまっており、かなりつらい状況です。メンバーからもたびたび「カバレッジ取得したいね」「でも E2E だから…」と嘆きの声が上がっています。</p><p>というわけで，REST API の E2E テストのカバレッジ取得を試してみます。テスト用のコード（テストコード含む）は以下に配置してあります。</p><p>今回のテスト用に突貫で雑に作ったので、このコードに対するツッコミはご容赦ください。</p><p><a href="https://github.com/shomuMatch/goCoverTest">https://github.com/shomuMatch/goCoverTest</a></p><p>ところで、REST API サーバに対して、<code>-cover</code>を用いてテストする際に、一点注意点があります。</p><p>それは、カバレッジファイルはプログラムが実行終了した（<code>os.Exit()</code>が呼ばれた・<code>main()</code>が正常に<code>return</code>した）タイミングで出力されるということです。つまり、テスト中に<code>panic</code>を起こして落ちてしまったり、外部から強制終了させてしまうと、カバレッジの取得ができません。今回は特に<code>panic</code>を起こした場合のことは考えていませんが、テスト終了時に外部から kill させる想定のため、サーバは Graceful にシャットダウンする必要があります。</p><p>ここは渋川さんの記事を参考に書きました。<br><a href="https://future-architect.github.io/articles/20210212/">https://future-architect.github.io/articles/20210212/</a></p><h4 id="試してみる"><a href="#試してみる" class="headerlink" title="試してみる"></a>試してみる</h4><p>少し話がそれましたが、上記テスト用コードにて、カバレッジ取得を試していきます。</p><p>現時点で Go1.20 はリリースされていないため、正式版の<code>go</code>ではなく、<code>gotip</code>を使います。</p><p><a href="https://pkg.go.dev/golang.org/dl/gotip">https://pkg.go.dev/golang.org/dl/gotip</a></p><p>未インストールの方は以下にてインストールいただければと思います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go install golang.org/dl/gotip@latest</span><br><span class="line">$ gotip download</span><br></pre></td></tr></table></figure><p>それでは、カバレッジファイルの出力先を作成し、<code>-cover</code>をつけてビルド・実行してみましょう。特に普段と変わりなくサーバが立ち上がるはずです。</p><p>また、この時点でカバレッジファイルの出力先に meta-data file が出力されているはずです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> coverdir</span><br><span class="line">$ gotip build -cover .</span><br><span class="line">$ GOCOVERDIR=coverdir ./goCoverTest</span><br><span class="line">start receiving at :8888</span><br></pre></td></tr></table></figure><p>次に、（上記サーバをバックグラウンドとかコンテナで立てておくか）別のコンソールから、テストコードを実行しましょう。（ここは必ずしも<code>gotip</code>である必要はありません。）</p><p>ユニットテストコードを一切書いていないので当然ですが、<code>[no test files]</code>になっており、カバレッジが取れていません。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gotip <span class="built_in">test</span> github.com/shomuMatch/goCoverTest/... -cover -count=1</span><br><span class="line">?       github.com/shomuMatch/goCoverTest       [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/shomuMatch/goCoverTest/api   [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/shomuMatch/goCoverTest/api/path1     [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/shomuMatch/goCoverTest/api/path2     [no <span class="built_in">test</span> files]</span><br><span class="line">ok      github.com/shomuMatch/goCoverTest/test/e2e      0.005s  coverage: [no statements]</span><br></pre></td></tr></table></figure><p>本題はここからです。まずはサーバをシャットダウンしましょう。</p><p>シャットダウンが完了したタイミングで、カバレッジファイルの出力先に counter data file が出力されていればここまでは OK です。</p><p>ではカバレッジを確認してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gotip tool covdata percent -i coverdir</span><br><span class="line">        github.com/shomuMatch/goCoverTest       coverage: 92.9% of statements</span><br><span class="line">        github.com/shomuMatch/goCoverTest/api   coverage: [no statements]</span><br><span class="line">        github.com/shomuMatch/goCoverTest/api/path1     coverage: 90.0% of statements</span><br><span class="line">        github.com/shomuMatch/goCoverTest/api/path2     coverage: 88.9% of statements</span><br></pre></td></tr></table></figure><p>カバレッジが取れています！！</p><p>確認のため、あえて 100%にならないようテストしているのですが、そこも正しく得られていそうです。</p><p>せっかくなので html 形式でも確認してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gotip tool covdata textfmt -i coverdir -o profile.txt</span><br><span class="line">$ gotip tool cover -html=profile.txt -o profile.html</span><br></pre></td></tr></table></figure><p>上記コマンドで出力された html を表示すると、以下のように通っていない行がハイライトされた状態で見ることができます。</p><img src="/images/20230203a/image.png" alt="image.png" width="1200" height="1091" loading="lazy"><p>ということで、無事 REST API サーバの E2E テストのカバレッジ取得に成功しました。</p><p>しかも既存のテストの仕組みをほとんど変えることなく対応ができており、実際に案件に導入することも不可能ではなさそうです。（Go のバージョンアップ対応は必要ですが。）</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>ということで、Go1.20 で新たに追加されるテストの仕組みである、<code>-cover</code>オプションについて見ながら触ってきました。</p><p>当然ですがテストの品質はそのままプロダクトの品質に直結するもののため、こうして仕組みが強化されていくのはとても嬉しいですね。</p><p>もう少し頑張ればフロントエンドも含めた E2E テストを全自動で実施し、カバレッジを取得する事もできそうなので、継続して活用していきたいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-20/">Go1.20</category>
      
      
      <comments>https://future-architect.github.io/articles/20230203a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.20 vetのアップデート</title>
      <link>https://future-architect.github.io/articles/20230202a/</link>
      <guid>https://future-architect.github.io/articles/20230202a/</guid>
      <pubDate>Wed, 01 Feb 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230202a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;460&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230202a/top.png" alt="" width="800" height="460"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG&#x2F;DXユニット所属の今泉です。 <a href="/articles/20230123a/">Go 1.20連載</a>の6本目です。</p><h1 id="そもそもvetとは"><a href="#そもそもvetとは" class="headerlink" title="そもそもvetとは"></a>そもそもvetとは</h1><p>Goの標準ライブラリに組み込まれている、コンパイラによってキャッチされないエラーや懸念を検出し報告してくれるコードの静的解析ツールです。<br>機能の詳細は本記事では割愛しますが、以下コマンドで利用可能なチェックの一覧を確認することができます。</p><p><code>go tool vet help</code></p><p>公式のドキュメントは<a href="https://pkg.go.dev/cmd/vet">こちら</a>です。</p><p>類似のツールとしては以下のようなものがあります。<br>私のいるチームではstaticcheckを利用しています。</p><ul><li><a href="https://github.com/dominikh/go-tools">staticcheck</a></li><li><a href="https://github.com/kisielk/errcheck">errcheck</a></li></ul><h1 id="ループ変数が関数内に多重にネストされていた場合の検知"><a href="#ループ変数が関数内に多重にネストされていた場合の検知" class="headerlink" title="ループ変数が関数内に多重にネストされていた場合の検知"></a>ループ変数が関数内に多重にネストされていた場合の検知</h1><p>次のようなコードはよくあるケースでバグを含んでいます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tests := []<span class="keyword">struct</span>&#123; name <span class="type">string</span> &#125;&#123;&#123;name: <span class="string">&quot;とまと&quot;</span>&#125;, &#123;name: <span class="string">&quot;にんじん&quot;</span>&#125;, &#123;name: <span class="string">&quot;じゃがいも&quot;</span>&#125;&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line">fmt.Println(tt.name)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このコードをテストすると、とまとやにんじんが出力してほしい箇所もじゃがいもになってしまいます。<br>これはループ内に渡している変数<code>tt</code>がループごとに作成される変数ではなくループ全体で利用されるものであることに起因します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;go <span class="built_in">test</span> -race -v</span><br><span class="line">=== RUN   TestParallel</span><br><span class="line">=== RUN   TestParallel/とまと</span><br><span class="line">=== PAUSE TestParallel/とまと</span><br><span class="line">=== RUN   TestParallel/にんじん</span><br><span class="line">=== PAUSE TestParallel/にんじん</span><br><span class="line">=== RUN   TestParallel/じゃがいも</span><br><span class="line">=== PAUSE TestParallel/じゃがいも</span><br><span class="line">=== CONT  TestParallel/とまと</span><br><span class="line">じゃがいも</span><br><span class="line">=== CONT  TestParallel/じゃがいも</span><br><span class="line">じゃがいも</span><br><span class="line">=== CONT  TestParallel/にんじん</span><br><span class="line">じゃがいも</span><br><span class="line">--- PASS: TestParallel (0.00s)</span><br><span class="line">    --- PASS: TestParallel/とまと (0.00s)</span><br><span class="line">    --- PASS: TestParallel/じゃがいも (0.00s)</span><br><span class="line">    --- PASS: TestParallel/にんじん (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      /src 1.253s</span><br></pre></td></tr></table></figure><p>go1.20ではこのような問題を検知してくれるようになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;go1.20rc3 vet</span><br><span class="line"><span class="comment"># /src</span></span><br><span class="line">.\main_test.go:60:16: loop variable tt captured by func literal</span><br></pre></td></tr></table></figure><h1 id="不正な時刻形式の検知"><a href="#不正な時刻形式の検知" class="headerlink" title="不正な時刻形式の検知"></a>不正な時刻形式の検知</h1><p>time layoutが2006-01-02(yyyy-mm-dd) ではなく、2006-02-01(yyyy-dd-mm) となっていた場合に検知してくれるようになりました。<br>わたしにとってはいまいちピンときませんが、アメリカ式時刻が馴染み深い方は間違えてしまったりするのでしょうか…？<br><a href="https://github.com/golang/go/issues/48801">proposal</a>を確認すると予想以上にこの間違いは発生しており、vetへの追加が決まったようです。</p><blockquote><p>There is a lots of projects on Github with this issue:<br>多くのGithub上のプロジェクトでこの問題があるようだ<br><a href="https://github.com/search?l=GO&amp;q=%222006-02-01%22+language:Go&amp;type=Code">https://github.com/search?l=GO&amp;q=%222006-02-01%22+language%3AGo&amp;type=Code</a><br>Even bigger projects have or had bad code:<br>巨大なプロジェクトですら同様の問題を抱えていたりする<br><a href="https://github.com/couchbase/go-couchbase/blob/118e3f09dbf08c7310d6bc1a5cfe5e6f8a0e3c32/populate/populate.go#L18">https://github.com/couchbase/go-couchbase/blob/118e3f09dbf08c7310d6bc1a5cfe5e6f8a0e3c32/populate/populate.go#L18</a><br><a href="https://github.com/gobuffalo/buffalo/blob/20f545e952c31f65eadf7a4833388ed2eaa37589/binding/decoders/time_test.go#L55-L56">https://github.com/gobuffalo/buffalo/blob/20f545e952c31f65eadf7a4833388ed2eaa37589/binding/decoders/time_test.go#L55-L56</a><br>juju&#x2F;juju@f992f35</p></blockquote><blockquote><p>That’s pretty surprising but it does seem to meet the vet bars:<br>Correctness - a real or potential bug for sure<br>Frequency - seems to happen more than we expected!<br>Precision - can’t imagine why anyone would use YYYY-DD-MM date format<br>驚いたことに、vetの対象とすべき基準をみたしているようです。<br>・正確さ - 確かに実際または潜在的なバグであること<br>・頻度   - 予想以上に発生しているようだ！<br>・精度   - YYYY-DD-MM 日付を使用するケースはありえないと思う</p></blockquote><p>※日本語は意訳です</p><p>ただ、 <a href="https://future-architect.github.io/articles/20230127a/">Go 1.20連載の4本目</a>で宮永さんに紹介いただいている通りlayoutにDateTime,DateOnly,TimeOnlyが追加されました。<br>新しいlayoutを使用することでこのミスは防ぐことができると思慮します。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回はgo vetのアップデートについて紹介させていただきました。</p><p>些細なアップデートですが、静的解析も少しずつ改良されていく様子が伺えて面白かったです。</p><p>次は連載の最終回で藤井さんの<a href="/articles/20230203a/">go build に追加される cover オプション（利用例付き）</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-20/">Go1.20</category>
      
      
      <comments>https://future-architect.github.io/articles/20230202a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>New ReverseProxy Rewrite hook を動かしながら理解する</title>
      <link>https://future-architect.github.io/articles/20230131a/</link>
      <guid>https://future-architect.github.io/articles/20230131a/</guid>
      <pubDate>Mon, 30 Jan 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230131a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;481&quot;&gt;

&lt;h1 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230131a/top.png" alt="" width="800" height="481"><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li>はじめに</li><li>概要を確認</li><li>Proposal の内容と RFC の確認</li><li>実際に動かしながら、Go1.19 と Go1.20 の違いを確認</li><li>まとめ</li></ul><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。<br>フューチャーアーキテクト株式会社、HR&#x2F;新卒採用チームの棚井です。</p><p>略歴として、フューチャーに新卒入社、Technology Innovation Group で IT コンサルタントを 3 年、Global Design Group で新規事業開発を 1 年と担当し、現在は Human Resources（つまり HR）でバックオフィスの新卒採用業務を担当しております。</p><p>本記事は<a href="/articles/20230123a/">Go 1.20 リリース連載</a> の 1 つです。<br>Go1.20 の <strong>New ReverseProxy Rewrite hook</strong> について解説していきます。</p><h1 id="概要を確認"><a href="#概要を確認" class="headerlink" title="概要を確認"></a>概要を確認</h1><p>New ReverseProxy Rewrite hook はコアライブラリー（httputil）への機能追加です。<br>Release Note では<a href="https://tip.golang.org/doc/go1.20#reverseproxy_rewrite">こちら</a>、Proposal は<a href="https://github.com/golang/go/issues/50580">こちら</a>から確認できます。</p><p>リリースノートを見ると、英文で以下のような記載があります。</p><blockquote><p><strong>New ReverseProxy Rewrite hook</strong><br>The httputil.ReverseProxy forwarding proxy includes a new Rewrite hook function, superseding the previous Director hook.</p><p>The Rewrite hook accepts a ProxyRequest parameter, which includes both the inbound request received by the proxy and the outbound request that it will send. Unlike Director hooks, which only operate on the outbound request, this permits Rewrite hooks to avoid certain scenarios where a malicious inbound request may cause headers added by the hook to be removed before forwarding. See issue <a href="https://github.com/golang/go/issues/50580">#50580</a>.</p><p>The ProxyRequest.SetURL method routes the outbound request to a provided destination and supersedes the NewSingleHostReverseProxy function. Unlike NewSingleHostReverseProxy, SetURL also sets the Host header of the outbound request.</p><p>The ProxyRequest.SetXForwarded method sets the X-Forwarded-For, X-Forwarded-Host, and X-Forwarded-Proto headers of the outbound request. When using a Rewrite, these headers are not added by default.</p><p>An example of a Rewrite hook using these features is:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">proxyHandler := &amp;httputil.ReverseProxy&#123;</span><br><span class="line">   Rewrite: <span class="function"><span class="keyword">func</span><span class="params">(r *httputil.ProxyRequest)</span></span> &#123;</span><br><span class="line">    r.SetURL(outboundURL) <span class="comment">// Forward request to outboundURL.</span></span><br><span class="line">    r.SetXForwarded()     <span class="comment">// Set X-Forwarded-* headers.</span></span><br><span class="line">   r.Out.Header.Set(<span class="string">&quot;X-Additional-Header&quot;</span>, <span class="string">&quot;header set by the proxy&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReverseProxy no longer adds a User-Agent header to forwarded requests when the incoming request does not have one.</p></blockquote><p>リリースノートでの説明について、<a href="https://github.com/golang/go/blob/release-branch.go1.20/src/net/http/httputil/reverseproxy.go">Go1.20 の実コード</a>と照らし合わせながら私なりに日本語訳しますと、</p><ul><li>httputil パッケージの ReverseProxy に、Rewrite hook を追加します。<ul><li>Rewrite が提供する機能は、Director に取って代わる（supersede する）ものです。</li><li>この機能より、プロキシサーバーにて付与した “hop-by-hop” ヘッダーが、意図せずに削除されてしまう問題（<a href="https://github.com/golang/go/issues/50580">issue</a>）に対応できるようになります。</li></ul></li><li>Rewrite が受け取る構造体として ProxyRequest も追加します。<ul><li>ProxyRequest.SetURL が提供する機能は、NewSingleHostReverseProxy に取って代わるものです。</li><li>アウトバウンドリクエストのホストヘッダを設定します。</li></ul></li></ul><p>という感じでしょうか。</p><p>私自身が Go でリバースプロキシを立てた経験に疎く、1.19 から 1.20 への変更箇所がどのようなものなのか？をイメージできなかったので、テストコード側の利用例を見たところ、httptest.NewServer の引数に http.Handler として渡す中身が NewSingleHostReverseProxy（Director 型）から func(r *httputil.ProxyRequest) {…} （Rewrite 型）に変わっていました。</p><p>それぞれのコードについて、Go1.20は<a href="https://github.com/golang/go/blob/release-branch.go1.20/src/net/http/httputil/example_test.go#L96-L128">release-branch.go1.20</a>を、Go1.19は<a href="https://github.com/golang/go/blob/release-branch.go1.19/src/net/http/httputil/example_test.go#L96-L123">release-branch.go1.19</a>を参照しています。また、Go1.20とGo1.19のコード差分について、Go1.20 は「+」 1.19は「-」の diff で表現します。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package httputil</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;net/url&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func ExampleReverseProxy() &#123;</span><br><span class="line">backendServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">fmt.Fprintln(w, &quot;this call was relayed by the reverse proxy&quot;)</span><br><span class="line">&#125;))</span><br><span class="line">defer backendServer.Close()</span><br><span class="line"></span><br><span class="line">rpURL, err := url.Parse(backendServer.URL)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="addition">+frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span></span><br><span class="line"><span class="addition">+Rewrite: func(r *httputil.ProxyRequest) &#123;</span></span><br><span class="line"><span class="addition">+r.SetXForwarded()</span></span><br><span class="line"><span class="addition">+r.SetURL(rpURL)</span></span><br><span class="line"><span class="addition">+&#125;,</span></span><br><span class="line"><span class="addition">+&#125;)</span></span><br><span class="line"><span class="deletion">-frontendProxy := httptest.NewServer(httputil.NewSingleHostReverseProxy(rpURL))</span></span><br><span class="line">defer frontendProxy.Close()</span><br><span class="line"></span><br><span class="line">resp, err := http.Get(frontendProxy.URL)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := io.ReadAll(resp.Body)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;%s&quot;, b)</span><br><span class="line"></span><br><span class="line">// Output:</span><br><span class="line">// this call was relayed by the reverse proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>どちらのコードも実行してみると、プロキシ経由でのレスポンスが出力されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">this call was relayed by the reverse proxy</span><br></pre></td></tr></table></figure><p>リリースノートでの説明が「取って代わる（supersede する）機能」になっていることに対応して、利用例のコードも当然 Go1.20 スタイルにアップデートされているようです。</p><p>概要の確認はここまでとして、この Rewrite hook について「それで、何が嬉しいの？」の疑問を解消するために、Proposal の内容と照らし合わせながら説明していきます。</p><h1 id="Proposal-の内容と-RFC-の確認"><a href="#Proposal-の内容と-RFC-の確認" class="headerlink" title="Proposal の内容と RFC の確認"></a>Proposal の内容と RFC の確認</h1><p>Proposal は <a href="https://github.com/golang/go/issues/50580">net&#x2F;http&#x2F;httputil: ReverseProxy can remove headers added by Director #50580</a> です。</p><p>issue では 2 つの RFC（RFC 2616, section 13.5.11、RFC 7230, section 6.1）に言及されています。<br>RFC のリンクを貼ってもらえているので、ちょっとだけ内容を確認してみます。</p><p>まず、RFC 2616, section 13.5.1 End-to-end and Hop-by-hop Headers の内容を見ていくと、以下のような記述があります。<br><a href="https://datatracker.ietf.org/doc/html/rfc2616#section-13.5.1">RFC 2616, section 13.5.1</a></p><blockquote><p>キャッシュプロキシと非キャッシュプロキシの動作を定義する目的のため、HTTP ヘッダーを「end-to-end」と「hop-by-hop」という 2 つのカテゴリに分類します。end-to-end はリクエストまたはレスポンスの最終的な受信者にまで送信されるヘッダーで、hop-by-hop はプロキシやキャッシュを通過しないヘッダーです。<br>RFC にて言及された hop-by-hop に該当するヘッダーは以下です。</p><ul><li>Connection</li><li>Keep-Alive</li><li>Proxy-Authenticate</li><li>Proxy-Authorization</li><li>TE</li><li>Trailers</li><li>Transfer-Encoding</li><li>Upgrade</li></ul><p>上記以外で HTTP&#x2F;1.1 にて定義されたヘッダーは end-to-end 側に含まれます。</p></blockquote><p>ちなみに、issue 内では</p><blockquote><p>RFC 2616, section 13.5.1 specified a list of hop-by-hop headers which HTTP proxies should not forward.<br>RFC 2616 セクション 13.5.1 は、プロキシサーバがフォワーディングすべきでない hop-by-hop ヘッダーのリストを定義している</p></blockquote><p>と説明されています。</p><p>次に、 RFC 7230, section 6.1 Connection については、issue にて<br><a href="https://datatracker.ietf.org/doc/html/rfc7230#section-6.1">RFC 7230, section 6.1</a></p><blockquote><p>RFC 7230, section 6.1 replaces the hardcoded list of hop-by-hop headers with the ability for the originator of a request to specify the hop-by-hop headers in the “Connection” header.<br>RFC7230 セクション 6.1 では、リクエストの送信元が、ハードコードされた hop-by-hop ヘッダーのリストを、Connection ヘッダーで指定した hop-by-hop ヘッダーのリストに置き換えている。</p></blockquote><p>との説明があります。</p><p>ざっくりと要約すると、RFC 2616,section 13.5.1 にて hop-by-hop ヘッダーに該当する項目が定義されて、RFC 7230, section 6.1 にてクライアントと通信するサーバーとの hop-by-hop な情報については Connection ヘッダーを利用することになった、ということです。</p><p>このような RFC にて定義された「hop-by-hop ヘッダーを通過させない仕様」や「Connection ヘッダー情報のハンドリング仕様」への対応実装は、<a href="https://github.com/golang/go/blob/release-branch.go1.20/src/net/http/httputil/reverseproxy.go#L289-L543">この部分</a>で確認できます。</p><h1 id="実際に動かしながら、Go1-19-と-Go1-20-の違いを確認"><a href="#実際に動かしながら、Go1-19-と-Go1-20-の違いを確認" class="headerlink" title="実際に動かしながら、Go1.19 と Go1.20 の違いを確認"></a>実際に動かしながら、Go1.19 と Go1.20 の違いを確認</h1><p><a href="https://wgithub.com/golang/go/blob/release-branch.go1.20/src/net/http/httputil/example_test.go">example_test.go</a>のコードを加工しながら、Go1.20 と Go1.19 での挙動の違いを見ていきます。</p><p>Go1.20 側のコードでは、新しく追加された <code>Rewrite</code> を呼び出しています。<br>Go1.19 には <code>Rewrite</code> がないため、代わりに <code>Director</code> を利用します。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;net/http/httptest&quot;</span><br><span class="line">&quot;net/http/httputil&quot;</span><br><span class="line">&quot;net/url&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">backendServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">dump, err := httputil.DumpRequest(r, false)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Fprintln(w, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintln(w, string(dump))</span><br><span class="line">&#125;))</span><br><span class="line">defer backendServer.Close()</span><br><span class="line"></span><br><span class="line">rpURL, err := url.Parse(backendServer.URL)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="addition">+frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span></span><br><span class="line"><span class="addition">+Rewrite: func(r *httputil.ProxyRequest) &#123;</span></span><br><span class="line"><span class="addition">+r.SetURL(rpURL)</span></span><br><span class="line"><span class="addition">+&#125;,</span></span><br><span class="line"><span class="addition">+&#125;)</span></span><br><span class="line"><span class="deletion">-frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span></span><br><span class="line"><span class="deletion">-Director: func(r *http.Request) &#123;</span></span><br><span class="line"><span class="deletion">-r.URL = rpURL</span></span><br><span class="line"><span class="deletion">-&#125;,</span></span><br><span class="line"><span class="deletion">-&#125;)</span></span><br><span class="line">defer frontendProxy.Close()</span><br><span class="line"></span><br><span class="line">resp, err := http.Get(frontendProxy.URL)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := io.ReadAll(resp.Body)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;%s&quot;, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この状態で動かしてみると、Go1.20 と Go1.19 では、それぞれ以下の出力が得られます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go1.20</span></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:39973</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go1.19</span></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:39259</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><p>Go1.19 には <code>X-Forwarded-For</code> が自動追加されていますが、Go1.20 には追加されていないことがわかります。</p><p>リリースノートにて</p><blockquote><p>The ProxyRequest.SetXForwarded method sets the X-Forwarded-For, X-Forwarded-Host, and X-Forwarded-Proto headers of the outbound request. When using a Rewrite, these headers are not added by default.</p></blockquote><p>と記載があるとおり、<code>Rewrite</code> を使う場合には、ProxyRequest.SetXForwarded を呼び出すことで <code>X-Forwarded-For</code>, <code>X-Forwarded-Host</code>, <code>X-Forwarded-Proto</code> の 3 つのヘッダーが追加されるようです。Director では <code>X-Forwarded-For</code> だけだったため、残りの 2 つも同時に追加したいという提案は<a href="https://github.com/golang/go/issues/50465">こちらの issue</a>で会話されています。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">...</span><br><span class="line">frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span><br><span class="line">Rewrite: func(r *httputil.ProxyRequest) &#123;</span><br><span class="line">r.SetURL(rpURL)</span><br><span class="line"><span class="addition">+r.SetXForwarded()</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のように、ProxyRequest.SetXForwarded を追加して再度実行すると、バックエンドに到達するリクエスト内のヘッダーが 3 つ増えていることがわかります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go1.20</span></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:46465</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">X-Forwarded-Host: 127.0.0.1:44977</span><br><span class="line">X-Forwarded-Proto: http</span><br></pre></td></tr></table></figure><p>RFC2616 では「hop-by-hop ヘッダーの削除」が定義されているので、次はこの動作確認として以下のコードを動かしてみます。<br>処理内部で新たにリクエストを作成して、ヘッダーに「Connection: Keep-Alive」を追加しています。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httputil&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">backendServer := httptest.NewServer(http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">dump, err := httputil.DumpRequest(r, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintln(w, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintln(w, <span class="type">string</span>(dump))</span><br><span class="line">&#125;))</span><br><span class="line"><span class="keyword">defer</span> backendServer.Close()</span><br><span class="line"></span><br><span class="line">rpURL, err := url.Parse(backendServer.URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span><br><span class="line">Rewrite: <span class="function"><span class="keyword">func</span><span class="params">(r *httputil.ProxyRequest)</span></span> &#123;</span><br><span class="line">r.SetURL(rpURL)</span><br><span class="line">r.SetXForwarded()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">defer</span> frontendProxy.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// create request</span></span><br><span class="line">req, err := http.NewRequest(http.MethodGet, frontendProxy.URL, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add connection header</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;keep-alive&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// check request content</span></span><br><span class="line">dump, err := httputil.DumpRequest(req, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(dump))</span><br><span class="line"></span><br><span class="line">resp, err := <span class="built_in">new</span>(http.Client).Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらも、Go1.20 と Go1.19 のそれぞれで動かしてみると、どちらのバージョンにおいても、リクエスト生成直後に付与したヘッダー「Connection: Keep-Alive」が、プロキシサーバーを経由したのちに RFC の定義通りに削除されていることがわかります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go1.20</span></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:45977</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line"></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:32815</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">X-Forwarded-Host: 127.0.0.1:44977</span><br><span class="line">X-Forwarded-Proto: http</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go1.19</span></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:43403</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:43403</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><p>こまで来てやっと、Proposal タイトルの「ReverseProxy can remove headers added by Director」について説明できます。<br>Proposal で提起された問題箇所を引用すると</p><blockquote><p>For example, if an inbound request contains a Connection: forwarded header, then any Forwarded header added by the Director will not be sent to the backend. This is probably surprising; under some circumstances, it may be a security vulnerability.<br>例えば、もしインバウンドリクエストが「Connection: forwarded」のヘッダーを保持している場合、Director により追加された Forwarded ヘッダーは、バックエンド側に送信されません。これはおそらく驚くべきことであり、ある状況下においてはセキュリティ上の脆弱性かもしれません。</p></blockquote><p>とあります。<br>この現象を再現するために、以下のコードを Go1.19 環境にて動かしてみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httputil&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">backendServer := httptest.NewServer(http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">dump, err := httputil.DumpRequest(r, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintln(w, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintln(w, <span class="type">string</span>(dump))</span><br><span class="line">&#125;))</span><br><span class="line"><span class="keyword">defer</span> backendServer.Close()</span><br><span class="line"></span><br><span class="line">rpURL, err := url.Parse(backendServer.URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span><br><span class="line">Director: <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request)</span></span> &#123;</span><br><span class="line">r.URL = rpURL</span><br><span class="line">r.Header.Set(<span class="string">&quot;X-Forwarded-Proto&quot;</span>, <span class="string">&quot;http&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">defer</span> frontendProxy.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// define request</span></span><br><span class="line">req, err := http.NewRequest(http.MethodGet, frontendProxy.URL, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add connection:forwarded header</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;X-Forwarded-Proto&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// check request content</span></span><br><span class="line">dump, err := httputil.DumpRequest(req, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(dump))</span><br><span class="line"></span><br><span class="line">resp, err := <span class="built_in">new</span>(http.Client).Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>インバウンドリクエストのヘッダーに「Connection: X-Forwarded-Proto」を付与して、Director にて「X-Forwarded-Proto: http」を追加しています。<br>この状態で実行すると、以下の出力が得られます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line"><span class="comment"># Go1.19</span></span><br><span class="line"></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:46127</span><br><span class="line">Connection: X-Forwarded-Proto</span><br><span class="line"></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:46127</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><p>出力内容から、Director で追加した「X-Forwarded-Proto: http」がバックエンドまで到達していないことがわかります。</p><p>Go1.20 で追加された Rewrite hook はこの問題に対応するもので、先に見ましたように <a href="https://pkg.go.dev/net/http/httputil@master#ProxyRequest.SetXForwarded">ProxyRequest.SetXForwarded</a> を利用して 3 つの Forwarded ヘッダー（The X-Forwarded-For、X-Forwarded-Host、X-Forwarded-Proto）を追加することで「Director で追加した X-Forwarded- ヘッダーが削除されてしまう現象」対応しています。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>プロキシサーバーのリクエストルーティングで、これまで Director を使っていたところは、これからは Rewrite を使おう</li><li>Rwrite に渡す ProxyRequest にて SetXForwarded を呼ぶことで、プロキシサーバーの情報 X-Forwarded-For,Host,Proto を自動追加してくれて便利</li></ul><p>次は今泉さんの<a href="/articles/20230202a/">vetのアップデート</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-20/">Go1.20</category>
      
      
      <comments>https://future-architect.github.io/articles/20230131a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.20 HTTP ResponseController</title>
      <link>https://future-architect.github.io/articles/20230128a/</link>
      <guid>https://future-architect.github.io/articles/20230128a/</guid>
      <pubDate>Fri, 27 Jan 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230128a/top.png&quot; width=&quot;&quot; height=&quot;800&quot; width=&quot;457&quot;&gt;

&lt;p&gt;TIGの辻です。Go 1.20 &lt;a href=&quot;/articles/20230123a/&quot;&gt;リリース連載&lt;/a&gt;の5本目は</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230128a/top.png" width="" height="800" width="457"><p>TIGの辻です。Go 1.20 <a href="/articles/20230123a/">リリース連載</a>の5本目は Core library の <a href="https://tip.golang.org/doc/go1.20#http_responsecontroller:~:text=list%20of%20errors.-,HTTP%20ResponseController,-The%20new%20%22net">HTTP ResponseController</a> のアップデートを紹介します<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><h2 id="何が変わるのか"><a href="#何が変わるのか" class="headerlink" title="何が変わるのか"></a>何が変わるのか</h2><ul><li><code>net/http</code> パッケージに新しく <code>ResponseController</code> 型が追加されます</li><li>従来から存在する <code>ResponseWriter</code> インターフェースでは実現できなかったHTTPリクエストごとの制御が実現できるようになります</li><li><code>ResponseController</code> 型にある <code>SetReadDeadline()</code> や <code>SetWriteDeadline()</code> メソッドを利用して、リクエストごとの読み書きのデッドラインを設定できます</li></ul><h2 id="何が嬉しいのか"><a href="#何が嬉しいのか" class="headerlink" title="何が嬉しいのか"></a>何が嬉しいのか</h2><p>Go のユーザーとして見たときの <code>ResponseController</code> 型の追加による具体的な嬉しいポイントはHTTPハンドラごとに読み書きのデッドラインが設定できることです。サーバー全体ではデフォルトのデッドラインを設定しつつ、特定のハンドラのみデッドラインを伸ばす、など柔軟な設定が可能になります。</p><p>ハンドラでの使用例は以下です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RequestHandler</span><span class="params">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class="line">  rc := http.NewResponseController(w)</span><br><span class="line">  <span class="comment">// 大きなレスポンスを送信するため Server.WriteTimeout を無効化する</span></span><br><span class="line">  rc.SetWriteDeadline(time.Time&#123;&#125;)</span><br><span class="line">  io.Copy(w, bigData)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみにサーバー単位のデッドラインは <code>http.Server</code> 構造体の <code>ReadTimeout</code> や <code>WriteTimeout</code> フィールドから設定できます。</p><h2 id="なぜこのAPIになったのか"><a href="#なぜこのAPIになったのか" class="headerlink" title="なぜこのAPIになったのか"></a>なぜこのAPIになったのか</h2><p>ここからは、この変更に至るまでの背景の一部を、私が感じたことも含めて、記載したいと思います。</p><p>実は <code>http.Handler</code> がハンドラ単位で読み書きのデッドラインの設定ができない、という Issue は2016年に起票されています (<a href="https://github.com/golang/go/issues/16100">#16100</a>)。なぜこの課題の解決に7年も要したのでしょうか？この一因として後方互換性との戦いがあったと想像しています。</p><p><code>http.Handler</code> は以下のような <code>ServeHTTP()</code> があるインターフェースです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また <code>http.ResponseWriter</code> も以下のような <code>Header()</code>, <code>Write()</code>, <code>WriteHeader()</code> をもつインターフェースです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ResponseWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">Header() Header</span><br><span class="line">Write([]<span class="type">byte</span>) (<span class="type">int</span>, <span class="type">error</span>)</span><br><span class="line">WriteHeader(statusCode <span class="type">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ハンドラの読み書きに関するデッドラインを設定できるAPIは <code>Handler</code> や <code>ResponseWriter</code> にはありません。それでは <code>ResponseWriter</code> インターフェースに以下のような <code>SetReadDeadline()</code> や <code>SetWriteDeadline()</code> APIを追加すればいいのではないか？と思うかもしれません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ResponseWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">Header() Header</span><br><span class="line">Write([]<span class="type">byte</span>) (<span class="type">int</span>, <span class="type">error</span>)</span><br><span class="line">WriteHeader(<span class="type">int</span>)</span><br><span class="line">SetReadDeadline(time.Time) <span class="type">error</span><span class="comment">// ★後方互換性を壊すためインターフェースに新規関数の追加はできない</span></span><br><span class="line">SetWriteDeadline(time.Time)<span class="type">error</span><span class="comment">// ★後方互換性を壊すためインターフェースに新規関数の追加はできない</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>しかし<a href="https://go.dev/doc/go1compat">Go1の互換性ポリシー</a>からこのような破壊的変更はできません。<code>SetReadDeadline()</code> と <code>SetWriteDeadline()</code> を持たない型が <code>ResponseWriter</code> インターフェースを満たさなくなってしまいます。真野さんの <a href="https://future-architect.github.io/articles/20230125a/">contextパッケージのWithCancelCauseとCause</a> の記事でも、このインターフェースの後方互換性問題に触れています。</p><p>それではどうするか？</p><p>インターフェースを拡張したいときに <code>ResponseWriter</code> インターフェースとは別のインターフェースにAPIを定義して、<code>ResponseWriter</code> インターフェースを実装する型に別インターフェースのメソッドを実装させる、というのが一つの手段としてあります。一例はHTTPハンドラがバッファリングしているデータをクライアントにフラッシュできる <code>http.Flusher</code> インターフェースです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Flusher <span class="keyword">interface</span> &#123;</span><br><span class="line">Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Goのデフォルトの HTTP&#x2F;1.x と HTTP&#x2F;2 の <code>ResponseWriter</code> の実装は <code>Flusher</code> もサポートしており、これは<a href="https://pkg.go.dev/net/http#Flusher">文章化</a>されています。</p><p>これを利用すると、たとえば、アプリケーションのハンドラ内では次のように型アサーションを組み合わせながら <code>Flush()</code> を呼び出せます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;Hello, world.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> f, ok := w.(http.Flusher); ok &#123;</span><br><span class="line">f.Flush()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記と同様のアプローチで</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadDeadliner <span class="keyword">interface</span> &#123;</span><br><span class="line">SetReadDeadline(deadline time.Time) <span class="type">error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>のようなインターフェースを定義することもできたでしょう。しかし <code>ResponseWriter</code> 型をラップしたミドルウェアとの相性など、使い勝手が悪いため見送られています。</p><p>議論のすえに生み出された解決策が <a href="https://github.com/golang/go/issues/54136">#54136</a> で、リリースノートに記載されていたアプローチです。すなわち <code>ResponseWriter</code> 型をラップした <code>http.ResponseController</code> 構造体を定義する、ということです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewResponseController</span><span class="params">(rw ResponseWriter)</span></span> *ResponseController &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;ResponseController&#123;rw&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ResponseController <span class="keyword">struct</span> &#123;</span><br><span class="line">rw ResponseWriter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ResponseController)</span></span> Flush() <span class="type">error</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ResponseController)</span></span> Hijack() (net.Conn, *bufio.ReadWriter, <span class="type">error</span>) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ResponseController)</span></span> SetReadDeadline(deadline time.Time) <span class="type">error</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ResponseController)</span></span> SetWriteDeadline(deadline time.Time) <span class="type">error</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>インターフェースではなく構造体を追加している利点として、将来的に <code>*ResponseController</code> に新しいメソッドを追加したい場合に後方互換性が壊れない、という点があるでしょう。</p><p>注意点はドキュメントを見るとわかるように <code>NewResponseController()</code> の引数は <code>Handler.ServeHTTP()</code> メソッドに渡された元の値であるか、元の <code>ResponseWriter</code> を返す <code>Unwrap()</code> メソッドを持っている必要があることです。</p><p>この意味は</p><ul><li>Go のデフォルトの <code>ResponseWriter</code> の実装は <code>ResponseWriter</code> インターフェースのメソッドに加えて <code>Flush()</code>, <code>Hijack()</code>, <code>SetReadDeadline()</code>, <code>SetWriteDeadline()</code> も実装している</li><li>サードパーティでラップされた <code>ResponseWriter</code> は <code>Flush()</code>, <code>Hijack()</code>, <code>SetReadDeadline()</code>, <code>SetWriteDeadline()</code> のすべてを実装する必要はなく <code>Unwrap()</code> でもとの <code>ResponseWriter</code> の値を返却すれば良い</li></ul><p>と理解しています。ラップする場合は <code>responsecontroller_test.go</code> のテストケースにもあるように基本的には以下のような <code>Unwrap()</code> メソッドを実装することになるでしょう。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> wrapWriter <span class="keyword">struct</span> &#123;</span><br><span class="line">ResponseWriter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w wrapWriter)</span></span> Unwrap() ResponseWriter &#123;</span><br><span class="line"><span class="keyword">return</span> w.ResponseWriter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Unwrap()</code> メソッドの効果は <code>*ResponseController</code> の実装を見るとわかるでしょう。 <code>Hijack()</code> の実装は以下のようになっています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ResponseController)</span></span> Hijack() (net.Conn, *bufio.ReadWriter, <span class="type">error</span>) &#123;</span><br><span class="line">rw := c.rw</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> t := rw.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> Hijacker:</span><br><span class="line"><span class="keyword">return</span> t.Hijack()</span><br><span class="line"><span class="keyword">case</span> rwUnwrapper:</span><br><span class="line">rw = t.Unwrap()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, errNotSupported()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仮にサードパーティが実装している <code>ResponseWriter</code> の値が <code>Hijacker</code> インターフェースを実装していなくても <code>Unwrap()</code> でもとの <code>ResponseWriter</code> の値を返却していれば、その <code>Hijack()</code> メソッドが呼び出されます。<code>for</code> ループで再帰しているのがおしゃれですね<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>GoのHTTP ResponseControllerのアップデートの概要とその背景を紹介しました。後方互換性との戦いやコミュニティへの配慮が感じられたのではないでしょうか。</p><p>次は棚井さんの<a href="/articles/20230131a/">New ReverseProxy Rewrite hook を動かしながら理解する</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">なお本文中のGoのソースバージョンは <code>go1.20rc3</code> です。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">ちなみに <code>context</code> パッケージでも似たような <code>for</code> 文で再帰している実装があります。よくある実装パターンの一つでしょう。<a href="https://github.com/golang/go/blob/b3160e8bcedb25c5266e047ada01b6f462521401/src/context/context.go#L629-L653">https://github.com/golang/go/blob/b3160e8bcedb25c5266e047ada01b6f462521401/src/context/context.go#L629-L653</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-20/">Go1.20</category>
      
      
      <comments>https://future-architect.github.io/articles/20230128a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.20 timeパッケージのアップデート</title>
      <link>https://future-architect.github.io/articles/20230127a/</link>
      <guid>https://future-architect.github.io/articles/20230127a/</guid>
      <pubDate>Thu, 26 Jan 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230127a/top.png&quot; alt=&quot;top.png&quot; width=&quot;1200&quot; height=&quot;675&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;The Gopher character is based on the Go</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230127a/top.png" alt="top.png" width="1200" height="675" loading="lazy"><p>The Gopher character is based on the Go mascot designed by <a href="http://reneefrench.blogspot.com/">Renée French</a>.</p><p>Gopherのイラストは<a href="https://github.com/egonelbre/gophers">egonelbre&#x2F;gophers</a>を利用しました。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG&#x2F;EXユニット所属の宮永です。 <a href="/articles/20230123a/">Go 1.20連載</a>の4本目です。</p><p><a href="https://tip.golang.org/doc/go1.20">Go 1.20 Release Notes</a>に記載のMinor changes to the libraryの<code>time</code>パッケージのアップデート4点について解説します。</p><h1 id="1-layoutにDateTime-DateOnly-TimeOnlyが追加された"><a href="#1-layoutにDateTime-DateOnly-TimeOnlyが追加された" class="headerlink" title="1. layoutにDateTime,DateOnly,TimeOnlyが追加された"></a>1. layoutに<code>DateTime</code>,<code>DateOnly</code>,<code>TimeOnly</code>が追加された</h1><p>Proposalは<a href="https://github.com/golang/go/issues/52746">こちらのissue</a>でされています。</p><p>Goの日時表現ですが、他の多くの言語とは勝手が異なります。<br>今回のアップデートを確認する前に他の言語とGoとの日時表現の違いについて確認します。</p><p>例えば、Pythonで<code>yyyy-mm-dd</code>という形式でフォーマットをかける場合は以下の様にします。</p><figure class="highlight python"><figcaption><span>Pythonの場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"> <span class="comment"># 最新時刻を取得</span></span><br><span class="line">t = datetime.now()</span><br><span class="line">ymd = t.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;時刻:&quot;</span>, t)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%Y-%m-%dでフォーマット:&quot;</span>, ymd)</span><br></pre></td></tr></table></figure><p>Rustの場合は以下の様にします。</p><figure class="highlight rust"><figcaption><span>Rustの場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> chrono::Utc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 最新時刻を取得</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">t</span> =Utc::<span class="title function_ invoke__">now</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ymd</span> = t.<span class="title function_ invoke__">format</span>(<span class="string">&quot;%Y-%m-%d&quot;</span>).<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;時刻:&#123;&#125;&quot;</span>,t);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;%Y-%m-%dでフォーマット:&#123;&#125;&quot;</span>, ymd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>いずれの場合も文字列<code>%Y-%m-%d</code>を与えてフォーマットしています。<br>ではGoの場合はどうでしょうか。</p><figure class="highlight go"><figcaption><span>Goの場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//最新時刻を取得</span></span><br><span class="line">t := time.Now()</span><br><span class="line">ymd := time.Now().Format(<span class="string">&quot;2006-01-02&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;時刻:&quot;</span>, t)</span><br><span class="line">fmt.Println(<span class="string">&quot;%Y-%m-%dでフォーマット:&quot;</span>, ymd)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2006-01-02</code>???</p><p>はじめて見たとき<code>2006-01-02</code>って何がなんだかわかりませんでした。<br>ググってみるとこんな記事がありました。</p><p><a href="https://qiita.com/ruiu/items/5936b4c3bd6eb487c182">Goのtimeパッケージのリファレンスタイム（2006年1月2日）は何の日？</a></p><blockquote><p>答えは単純だ。これはアメリカ式の時刻の順番なのだ。”1月2日午後3時4分5秒2006年”（つまり「自然な順番」で1, 2, 3, 4, 5, 6）を指しているのである。Go開発者のRob Pikeさんがgolang-nutsメーリングリストで、最初からよく考えていればこの順番にはしなかったと言っていたが（英語圏でもイギリスとかだと違う順番だしね）、もうその順番になっているので変えられないし、それにきちんと文章化もされているともコメントしていた。従ってこれは単純にそういうものだと思うしかなさそうだ。</p></blockquote><p>そんな馬鹿な!と思いましたが受け入れるしかありません。正直<code>2006-01-02</code>の文字列、私は覚えられないので毎度コピペしてます。</p><p>▼おとなりのチームにも同じ悩みを抱えている方がいました<br><img src="/images/20230127a/slack.png" alt="slack.png" width="1200" height="490" loading="lazy"></p><blockquote><p>(その気持ちとてもわかります!!!)</p></blockquote><p>今回のアップデートで<code>yyyy-mm-dd</code>は以下の様にすることができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//最新時刻を取得</span></span><br><span class="line">t := time.Now()</span><br><span class="line">ymd := time.Now().Format(time.DateOnly)</span><br><span class="line">fmt.Println(<span class="string">&quot;時刻:&quot;</span>, t)</span><br><span class="line">fmt.Println(<span class="string">&quot;%Y-%m-%dでフォーマット:&quot;</span>, ymd)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これなら私でも覚えられます。<br>些細なアップデートですが、待ち望んでいた方は多かったのではないでしょうか。</p><p>今回追加された定数ですが、それぞれの以下のように定義されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DateTime   = <span class="string">&quot;2006-01-02 15:04:05&quot;</span></span><br><span class="line">DateOnly   = <span class="string">&quot;2006-01-02&quot;</span></span><br><span class="line">TimeOnly   = <span class="string">&quot;15:04:05&quot;</span></span><br></pre></td></tr></table></figure><h1 id="2-Time-Compareメソッドの追加"><a href="#2-Time-Compareメソッドの追加" class="headerlink" title="2. Time.Compareメソッドの追加"></a>2. <code>Time.Compare</code>メソッドの追加</h1><p>Proposalは<a href="https://github.com/golang/go/issues/50770">こちらのissue</a>でされています。</p><p>Proposalを立てた方の主張をまとめると</p><blockquote><p>「Time型の比較には<code>Before()</code>、<code>Equal()</code>、<code>After()</code>の3つがあるが、これはそれぞれ<code>&lt;</code>、<code>==</code>、<code>&gt;</code>に相当する。以前、以後を表す<code>&lt;=</code>、<code>&gt;=</code>のメソッドもほしい!!」</p></blockquote><p>ということです。たしかに以前、以後というメソッドがないため、Go1.20がリリースされる前までは<br>以前を表すのに<code>!x.After(y)</code>(<code>&gt;</code>の否定)で<code>&lt;=</code>となる)とするしかありませんでした。</p><blockquote><p><code>x.Equal(y) || x.Before(y)</code>でもいいですね</p></blockquote><p>今回<code>Time.Compare</code>メソッドの追加により以前、以後は以下の様に表現することが可能になりました。</p><ul><li><p>以前(xはyよりも前) ⇒ <code>x.Compare(y)&lt;=0</code></p></li><li><p>以後(xはyよりも後) ⇒ <code>x.Compare(y)&gt;=0</code></p></li></ul><p><code>Compare</code>メソッドはGoの他のライブラリも同じようなルールで実装されているため、使い勝手も良さそうです。今後頻繁に使う機会が出てきそうです。</p><h1 id="3-Parseでナノ秒以下の入力の精度は無視する様になった"><a href="#3-Parseでナノ秒以下の入力の精度は無視する様になった" class="headerlink" title="3. Parseでナノ秒以下の入力の精度は無視する様になった"></a>3. <code>Parse</code>でナノ秒以下の入力の精度は無視する様になった</h1><p><a href="https://github.com/golang/go/issues/54567">issueはこちら</a>です。</p><p>issueにかかれているコードをそのまま引用します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> in = <span class="string">&quot;2021-09-29T16:04:33.0000000000Z&quot;</span></span><br><span class="line">fmt.Println(time.Parse(time.RFC3339, in))</span><br><span class="line">fmt.Println(time.Parse(time.RFC3339Nano, in))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入力として0が10個並んでおり、厳密にいえば<code>RFC3339Nano</code>が期待している桁数よりも多い状況です。<br>このコードの出力としては両者とも<code>2021-09-29 16:04:33 +0000 UTC &lt;nil&gt;</code>を期待していますが、実際には以下の様に出力されます。</p><figure class="highlight shell"><figcaption><span>output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2021-09-29 16:04:33 +0000 UTC &lt;nil&gt;</span><br><span class="line">0001-01-01 00:00:00 +0000 UTC parsing time &quot;2021-09-29T16:04:33.0000000000Z&quot; as &quot;2006-01-02T15:04:05.999999999Z07:00&quot;: cannot parse &quot;0Z&quot; as &quot;Z07:00&quot;</span><br></pre></td></tr></table></figure><p>Go 1.20では、2つ目の例でエラーとならないように、ナノ秒以下の精度が入力の場合には無視するようになります。</p><h1 id="4-Time-MarshalJSONメソッドのRFC3339への準拠がより厳格になった"><a href="#4-Time-MarshalJSONメソッドのRFC3339への準拠がより厳格になった" class="headerlink" title="4. Time.MarshalJSONメソッドのRFC3339への準拠がより厳格になった"></a>4. <code>Time.MarshalJSON</code>メソッドの<code>RFC3339</code>への準拠がより厳格になった</h1><p>あれ<code>Time.Marshal</code>だけ?<br><code>Time.Unmarshal</code>はいいの?</p><p>と思ったのですが、<a href="https://github.com/golang/go/issues/57912">こちらのissue</a>に経緯が書かれていました。</p><p><a href="https://github.com/golang/go/issues/54580">こちらのissue</a>の対応で<code>Time.Unmarshal</code>と<code>Time.Marshal</code>の<code>RFC3339</code>への準拠がより厳格になったということですが、<code>Time.Unmarshal</code>の対応でAWS SDKのテストでエラーがでてしまうという事態になったようです。そのため<code>Time.Unmarshal</code>についてはロールバックされ、Go1.20では<code>Time.Marshal</code>のみ<a href="https://tip.golang.org/doc/go1.20">Go 1.20 Release Notes</a>に記載されているということみたいです。</p><p><a href="https://github.com/golang/go/issues/54580">こちらのissue</a>によると既存の<code>Parse</code>にはいくつか問題があるようで、もともとはこの問題に対応するために<code>Time.Unmarshal</code>で厳格な対応を入れたかったようです。<br>例えば、現行の<code>Parse</code>では少数部の<code>.</code>と<code>,</code>を区別していないようで、どちらもエラーなく<code>Parse</code>されるようです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t1, _ := time.Parse(time.RFC3339, <span class="string">&quot;0000-01-01T00:00:00.000Z&quot;</span>)</span><br><span class="line">fmt.Println(t1)</span><br><span class="line">t2, _ := time.Parse(time.RFC3339, <span class="string">&quot;0000-01-01T00:00:00,000Z&quot;</span>)</span><br><span class="line">fmt.Println(t2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0000-01-01 00:00:00 +0000 UTC</span><br><span class="line">0000-01-01 00:00:00 +0000 UTC</span><br></pre></td></tr></table></figure><p>他には時間の桁が1桁を許容するという問題もあるようで、<code>00:00:00.000Z</code>と書くべきところを<code>0:00:00.000Z</code>としても<code>Parse</code>されるようです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t1, _ := time.Parse(time.RFC3339, <span class="string">&quot;0000-01-01T0:00:00.000Z&quot;</span>)</span><br><span class="line">fmt.Println(t1)</span><br><span class="line">t2, _ := time.Parse(time.RFC3339, <span class="string">&quot;0000-01-01T00:00:00.000Z&quot;</span>)</span><br><span class="line">fmt.Println(t2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0000-01-01 00:00:00 +0000 UTC</span><br><span class="line">0000-01-01 00:00:00 +0000 UTC</span><br></pre></td></tr></table></figure><p>確かにこのままでは定義が明確ではなくなるため対応が必要そうですが、AWS SDKのテストでエラーがでてくるとなると影響は大きそうです。<br><code>time</code>はGo1.21でも変更がありそうですね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>本記事ではGo 1.20リリースの<code>time</code>パッケージのアップデートについて解説しました</p><ul><li>layoutに<code>DateTime</code>,<code>DateOnly</code>,<code>TimeOnly</code>が追加された</li><li><code>Time.Compare</code>メソッドの追加によって以前、以後が表現できるようになった</li><li><code>Parse</code>でナノ秒以下の入力の精度は無視する様になった</li><li><code>Time.MarshalJSON</code>メソッドの<code>RFC3339</code>への準拠がより厳格になった</li></ul><p>個人的にはlayoutに定数が追加されたアップデートが地味に嬉しかったです。😀</p><p>次は辻さんの <a href="/articles/20230128a/">HTTP ResponseController</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-20/">Go1.20</category>
      
      
      <comments>https://future-architect.github.io/articles/20230127a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.20 Wrapping multiple errors</title>
      <link>https://future-architect.github.io/articles/20230126a/</link>
      <guid>https://future-architect.github.io/articles/20230126a/</guid>
      <pubDate>Wed, 25 Jan 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230126a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;492&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230126a/top.png" alt="" width="800" height="492"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！TIG の川口です。<br>本記事は <a href="/articles/20230123a/">Go 1.20リリース連載</a>   の3本目です。<strong>Wrapping multiple errors</strong> についてお話します。</p><p>Release Note では、<a href="https://tip.golang.org/doc/go1.20#errors">こちら</a> の箇所になります。<br>Proposal は、<a href="https://github.com/golang/go/issues/53435">こちら</a> になります。</p><h2 id="何が変わったか？"><a href="#何が変わったか？" class="headerlink" title="何が変わったか？"></a>何が変わったか？</h2><p>さて具体的に何が変わったかをはじめにおさえておきます。</p><blockquote><p>Go 1.20 expands support for error wrapping to permit an error to wrap multiple other errors.<br>An error e can wrap more than one error by providing an Unwrap method that returns a []error.<br>The errors.Is and errors.As functions have been updated to inspect multiply wrapped errors.<br>The fmt.Errorf function now supports multiple occurrences of the %w format verb, which will cause it to return an error that wraps all of those error operands.<br>The new function errors.Join returns an error wrapping a list of errors.</p></blockquote><p>要約すると、以下のようになるでしょうか。 （以降、wrapping multiple errors はマルチエラーと記載します。）</p><ul><li>エラーのラップが拡張されて、複数のエラーをラップしたマルチエラーを作成できるようになりました。</li><li>error 型は、 <code>[]error</code> を返す <code>Unwrap</code> メソッドを提供することで、マルチエラーとすることができます。</li><li>マルチエラーに関して、 <code>errors.Is</code> 関数と <code>errors.As</code> 関数により、検査できるようになりました。</li><li><code>fmt.Errorf</code> 関数と <code>errors.Join</code> 関数により、マルチエラーを作成できるようになりました。</li><li><strong>（マルチエラーを []error に復元する方法については言及していません。）</strong></li></ul><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><p>それでは以降、下記の順に則ってお話していこうと思います。</p><ol><li>マルチエラーの作成方法</li><li>マルチエラーの検査方法</li><li>マルチエラーを []error に復元する方法</li><li>どんなときに使えるか？</li></ol><p>また、本稿では以下の version を利用しています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.20rc3 darwin/amd64</span><br></pre></td></tr></table></figure><h1 id="マルチエラーの作成方法"><a href="#マルチエラーの作成方法" class="headerlink" title="マルチエラーの作成方法"></a>マルチエラーの作成方法</h1><p>マルチエラーの作成方法に関しては、先述の通り以下の2パターンあるようです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err1 := errors.New(<span class="string">&quot;err1&quot;</span>)</span><br><span class="line">err2 := errors.New(<span class="string">&quot;err2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// errors.Joins を使う方法</span></span><br><span class="line">errByErrors := errors.Join(err1, err2)</span><br><span class="line">log.Println(reflect.TypeOf(errByErrors)) <span class="comment">// *errors.joinError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Errorf を使う方法</span></span><br><span class="line">errByFmt := fmt.Errorf(<span class="string">&quot;err: %w, %w&quot;</span>, err1, err2)</span><br><span class="line">log.Println(reflect.TypeOf(errByFmt)) <span class="comment">// *fmt.wrapErrors</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ただしそれぞれ作成される error の型は異なります。詳細は、以下を参照ください。<br>またこちらの実装を見ると、どちらも、<code>[]error</code> を返す <code>Unwrap</code> メソッドが提供されていることがわかるかと思います。</p><ul><li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.20rc3:src/errors/join.go;l=34">errors.joinError</a></li><li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.20rc3:src/fmt/errors.go;l=54">fmt.wrapErrors</a></li></ul><h1 id="マルチエラーの検査方法"><a href="#マルチエラーの検査方法" class="headerlink" title="マルチエラーの検査方法"></a>マルチエラーの検査方法</h1><p>今までは、 <code>errors.Is</code>, <code>errors.As</code> を使ってラップされたエラーの検査を行うことができました。<br>今後はこれらの関数が、マルチエラーにも対応するようです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err1 := errors.New(<span class="string">&quot;err1&quot;</span>)</span><br><span class="line">err2 := errors.New(<span class="string">&quot;err2&quot;</span>)</span><br><span class="line">err3 := errors.New(<span class="string">&quot;err3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// errors.Joins を使う方法</span></span><br><span class="line">errByErrors := errors.Join(err1, err2)</span><br><span class="line">log.Println(</span><br><span class="line">errors.Is(errByErrors, err1), <span class="comment">// true</span></span><br><span class="line">errors.Is(errByErrors, err2), <span class="comment">// true</span></span><br><span class="line">errors.Is(errByErrors, err3), <span class="comment">// false</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Errorf を使う方法</span></span><br><span class="line">errByFmt := fmt.Errorf(<span class="string">&quot;err: %w, %w&quot;</span>, err1, err2)</span><br><span class="line">log.Println(</span><br><span class="line">errors.Is(errByFmt, err1), <span class="comment">// true</span></span><br><span class="line">errors.Is(errByFmt, err2), <span class="comment">// true</span></span><br><span class="line">errors.Is(errByFmt, err3), <span class="comment">// false</span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本的な考え方は、既存のものと変更はなさそうです。<br>既存のラップされたエラーの機構と互換性を保つように <code>Unwrap() error</code> と <code>Unwrap() []error</code> メソッドのどちらでも再帰的に処理できるようになっていそうですね。</p><ul><li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.20rc3:src/errors/wrap.go;l=43">errors.Is</a></li><li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.20rc3:src/errors/wrap.go;l=92">errors.As</a></li></ul><h1 id="マルチエラーを-error-に復元する方法"><a href="#マルチエラーを-error-に復元する方法" class="headerlink" title="マルチエラーを []error に復元する方法"></a>マルチエラーを []error に復元する方法</h1><p>こちらに関しては言及がなかったので、特別何か専用の関数が増えたりということは今のところなさそうですね。<br>こちらを実現しようとすると、👆の <code>errors.Is</code>, <code>errors.As</code> 等の実装を見ていただいた方はわかるかと思いますが、以下のようにしなければならなさそうです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err1 := errors.New(<span class="string">&quot;err1&quot;</span>)</span><br><span class="line">err2 := errors.New(<span class="string">&quot;err2&quot;</span>)</span><br><span class="line"></span><br><span class="line">errByErrors := errors.Join(err1, err2)</span><br><span class="line"><span class="keyword">if</span> errs, ok := errByErrors.(<span class="keyword">interface</span>&#123; Unwrap() []<span class="type">error</span> &#125;); ok &#123;</span><br><span class="line"><span class="keyword">for</span> _, err := <span class="keyword">range</span> errs.Unwrap() &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみに、そのまま <code>errors.Unwrap</code> を利用した際には、以下のように nil が返ってきてしまいます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err1 := errors.New(<span class="string">&quot;err1&quot;</span>)</span><br><span class="line">err2 := errors.New(<span class="string">&quot;err2&quot;</span>)</span><br><span class="line"></span><br><span class="line">errByErrors := errors.Join(err1, err2)</span><br><span class="line">log.Println(errors.Unwrap(errByErrors)) <span class="comment">// nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらはややおかしな挙動ではありますが、<code>errors.Unwrap</code> の実装を見ると理解できます。<br>マルチエラーは、<code>Unwrap() []error</code> メソッドは持っていても、<code>Unwrap() error</code> メソッドを持っていないからですね。</p><ul><li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.20rc3:src/errors/wrap.go;l=16">errors.Unwrap</a></li></ul><h1 id="利用する場面"><a href="#利用する場面" class="headerlink" title="利用する場面"></a>利用する場面</h1><p>利用する場面としては、パッと思いつくものとしては「ベストエフォート的な複数処理」などがあるでしょうか。</p><p>例えば、「ベストエフォート的に各ユーザーに対して一人ずつメールを送信していく。」などの場面では使えそうです。<br>コードとしては以下のようなイメージです。（一括で処理できるように模索するべきとか。並列に処理をした方が良いとか。色々あるかもですが、その辺のお話はいったんおいておきます！！！）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">userIDs := []<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;userID1&quot;</span>,</span><br><span class="line"><span class="string">&quot;userID2&quot;</span>,</span><br><span class="line"><span class="string">&quot;userID3&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> userIDs &#123;</span><br><span class="line">err := sendEmail(userIDs[i])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// err があっても、log だけ出力する</span></span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendEmail</span><span class="params">(userID <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Email を送信する</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このとき、<code>run()</code> の返り値に error を増やしたいとなったときになかなかどのようなコードを書くか悩ましくなることが想像できると思います。<br>今までであれば、以下のようなサードパーティ製のものを使ったり自作のエラーパッケージを作成したりして実現していた方もいると思います。</p><ul><li><a href="https://github.com/hashicorp/go-multierror">https://github.com/hashicorp/go-multierror</a></li><li><a href="https://github.com/uber-go/multierr">https://github.com/uber-go/multierr</a></li></ul><p>それが今後は以下のようにして書き直せるようになるのかなと。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">userIDs := []<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;userID1&quot;</span>,</span><br><span class="line"><span class="string">&quot;userID2&quot;</span>,</span><br><span class="line"><span class="string">&quot;userID3&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> errs []<span class="type">error</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> userIDs &#123;</span><br><span class="line">err := sendEmail(userIDs[i])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">errs = <span class="built_in">append</span>(errs, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> errors.Join(errs...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendEmail</span><span class="params">(userID <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Email を送信する処理</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>新しく拡張された Wrapping multiple erros についての記事でした！<br>用途がたくさんあるというわけではない気もしますが、今後の error handling の手法の一つとしておさえておいたほうが良いものになるかもしれません？🤔</p><p>次は宮永さんの <a href="/articles/20230127a/">timeのアップデート</a> です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AA%E3%83%B3%E3%82%B0/">エラーハンドリング</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-20/">Go1.20</category>
      
      
      <comments>https://future-architect.github.io/articles/20230126a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go1.20リリース連載 contextパッケージのWithCancelCauseとCause</title>
      <link>https://future-architect.github.io/articles/20230125a/</link>
      <guid>https://future-architect.github.io/articles/20230125a/</guid>
      <pubDate>Tue, 24 Jan 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230125a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;433&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230125a/top.png" alt="" width="800" height="433"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG真野です。<a href="/articles/20230123a/">Go 1.20リリース連載</a>の2本目は、<a href="https://tip.golang.org/doc/go1.20#minor_library_changes">Minor changes to the library</a>の context についてです。Go 1.7で <code>context.Context</code>が入ってから、context界隈において久しぶりのアップデートです。</p><p>contextの歴史やダイジェストは、澁川さんの<a href="https://future-architect.github.io/articles/20210212/">Go 1.16のsignal.NotifyContext() </a> 記事に書かれていますので、ぜひ確認ください。context自体にの説明は、さき(H.Saki)さんの <a href="https://zenn.dev/hsaki/books/golang-context">よくわかるcontextの使い方 </a>というZenn Bookを読むとすごく詳しくなれると思います。</p><p>リリースノートには、<code>WithCancelCause()</code>と <code>Cause()</code> 関数が追加され、キャンセル理由を追加・取得できるようにするという内容です。なぜか2023.1.22時点(go 1.20rc3)だとGoDocには<code>WithDeadlineCause()</code>・<code>WithTimeoutCause()</code> があるものの実装は無く、<a href="https://github.com/golang/go/issues/56661">context: add APIs for writing and reading cancelation cause #51365</a> を見る限り、Go 1.21で追加されそうです。</p><blockquote><p><strong>Go 1.20リリースノートより（2023.1.22 DRAFT RELEASE NOTESより）</strong><br>The new WithCancelCause function provides a way to cancel a context with a given error. That error can be retrieved by calling the new Cause function.<br>新しく追加されたWithCancelCause関数はerror付きでcontextをキャンセルする方法を提供します。errorは新しく追加したCause関数を呼び出すことで取得できます。</p></blockquote><p>GoDocのcontextパッケージの<a href="https://pkg.go.dev/context@master#WithCancelCause">func WithCancelCause</a>にサンプルコードも書かれています。</p><figure class="highlight go"><figcaption><span>GoDocのWithCancelCauseサンプルコード（go 1.20rc3時点なので荒い）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx, cancel := context.WithCancelCause(parent)</span><br><span class="line">cancel(myError)</span><br><span class="line">ctx.Err() <span class="comment">// returns context.Canceled</span></span><br><span class="line">context.Cause(ctx) <span class="comment">// returns myError</span></span><br></pre></td></tr></table></figure><p>ツイートで発表された際の反応を見ると、喜びの声が多数でした。</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Probably in Go 1.20:<br><br>context.WithCancelCause 🎉<br><br>ctx.Err() will return why a context is canceled if that context is derived with a cancel cause. Instead of mere `Canceled` and `DeadlineExceeded` errors.<br><br>Proposal → <a href="https://t.co/H1jMbp5HGM">https://t.co/H1jMbp5HGM</a><a href="https://twitter.com/hashtag/golang?src=hash&amp;ref_src=twsrc%5Etfw">#golang</a> <a href="https://t.co/bRFFXB1DFx">pic.twitter.com/bRFFXB1DFx</a></p>&mdash; inanc (@inancgumus) <a href="https://twitter.com/inancgumus/status/1599073261169430528?ref_src=twsrc%5Etfw">December 3, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>プロポーサルは<a href="https://github.com/golang/go/issues/51365">context: add APIs for writing and reading cancelation cause #51365</a> です。起票が2022.2.26ですので、これだけ見れば10ヶ月ほどで入ったように見えます。実際はそれ以前にも似たような議論があり、例えば<a href="https://github.com/golang/go/issues/26356">context: ease debugging of where a context was canceled? #26356</a> は2018年に、<a href="https://github.com/golang/go/issues/46273">proposal: context: add WithCancelReason #46273</a>は2021年に起票されています。#26356や#46273にて条件、対応案、プロトタイプの実装などが整理されたことがあってこそ実現できたスピード感じゃないかと思います。</p><h2 id="コンテキストがどこでキャンセルされたかデバック難しい問題"><a href="#コンテキストがどこでキャンセルされたかデバック難しい問題" class="headerlink" title="コンテキストがどこでキャンセルされたかデバック難しい問題"></a>コンテキストがどこでキャンセルされたかデバック難しい問題</h2><p>Go 1.20より前の時代では、contextのキャンセルでよく上がる課題に、コンテキストのキャンセルがどこで行われたか切り分けしにくいことがあります。「Who the hell canceled my context?（だれが私のcontextをキャンセルしたか？）」と冗談混じりでの悩みをちょくちょく聞きます。</p><p>例えば、下記のように多段にcontextにタイムアウトを設定するケースです。仮に一番下流の <code>callHeavyWebAPI()</code> 関数でキャンセルしたかどうかを判定したいとします。</p><figure class="highlight go"><figcaption><span>Go1.19以前での実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">time.AfterFunc(<span class="number">10</span>*time.Second, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; cancel() &#125;) <span class="comment">// 全体で10秒まで</span></span><br><span class="line"><span class="comment">// ... 何かしらの前処理など</span></span><br><span class="line"><span class="keyword">go</span> doHeavyTask(ctx)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doHeavyTask</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(ctx)</span><br><span class="line">time.AfterFunc(<span class="number">5</span>*time.Second, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; cancel() &#125;) <span class="comment">// doHeavyTask関数で最大5秒まで</span></span><br><span class="line"><span class="comment">// ... 何かしらの処理</span></span><br><span class="line">callHeavyWebAPI(ctx)</span><br><span class="line"><span class="comment">// ... 何かしらの処理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">callHeavyWebAPI</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(ctx)</span><br><span class="line">time.AfterFunc(<span class="number">3</span>*time.Second, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; cancel() &#125;) <span class="comment">// callHeavyWebAPI関数で最大3秒まで</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line"><span class="keyword">switch</span> ctx.Err() &#123;</span><br><span class="line"><span class="keyword">case</span> context.DeadlineExceeded:</span><br><span class="line">fmt.Println(<span class="string">&quot;context timeout exceeded&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> context.Canceled:</span><br><span class="line">fmt.Println(<span class="string">&quot;context canceled&quot;</span>) <span class="comment">// ★どこでキャンセルされた？😭</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// ...外部API呼び出しなどの処理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後の<code>select</code> の部分の実装のように、キャンセルしたかは <code>ctx.Err()</code> を見ることで判断できます。しかし、<code>main()</code>, <code>doHeavyTask()</code>, <code>callHeavyWebAPI()</code> 関数それぞれで設定されたキャンセルのどれが直接の原因かは判断が付きません。</p><p>回避方法としては、キャンセル理由を連携するための <code>channel</code> を引き回すことを検討するなどが考えられますが、けっこう大変そうです。</p><h2 id="contextパッケージにWithCancelCauseとCauseを追加"><a href="#contextパッケージにWithCancelCauseとCauseを追加" class="headerlink" title="contextパッケージにWithCancelCauseとCauseを追加"></a>contextパッケージにWithCancelCauseとCauseを追加</h2><p>これを解決する方法として、<code>context.WithCancelCause()</code>と <code>Cause()</code> 関数を利用します。<code>context.WithCancelCause()</code>はほぼ <code>WithCancel()</code>と使い勝手が同じですが、<code>CancelCauseFunc(cause error)</code> と引数に <code>cause</code>を取る部分が異なります。ここに <code>error</code> を渡すと何が理由で<code>context</code>がキャンセルされたか分かります。</p><figure class="highlight diff"><figcaption><span>Go1.20以降の実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;context&quot;</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="addition">+var (</span></span><br><span class="line"><span class="addition">+ErrTimeoutOuter  = errors.New(&quot;outer timeout&quot;)</span></span><br><span class="line"><span class="addition">+ErrTimeoutMiddle = errors.New(&quot;middle timeout&quot;)</span></span><br><span class="line"><span class="addition">+ErrTimeoutInner  = errors.New(&quot;inner timeout&quot;)</span></span><br><span class="line"><span class="addition">+)</span></span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">ctx, cancel := context.WithCancelCause(context.Background())</span><br><span class="line"><span class="deletion">-time.AfterFunc(10*time.Second, func() &#123; cancel() &#125;) // 全体で10秒まで</span></span><br><span class="line"><span class="addition">+time.AfterFunc(10*time.Second, func() &#123; cancel(ErrTimeoutOuter) &#125;) // 全体で10秒まで</span></span><br><span class="line">// ... 何かしらの前処理など</span><br><span class="line">go doHeavyTask(ctx)</span><br><span class="line">// ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func doHeavyTask(ctx context.Context) &#123;</span><br><span class="line">ctx, cancel := context.WithCancelCause(ctx)</span><br><span class="line"><span class="deletion">-time.AfterFunc(5*time.Second, func() &#123; cancel() &#125;) // doHeavyTask関数で最大5秒まで</span></span><br><span class="line"><span class="addition">+time.AfterFunc(5*time.Second, func() &#123; cancel(ErrTimeoutMiddle) &#125;) // doHeavyTask関数で最大5秒まで</span></span><br><span class="line">// ... 何かしらの処理</span><br><span class="line">callHeavyWebAPI(ctx)</span><br><span class="line">// ... 何かしらの処理</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func callHeavyWebAPI(ctx context.Context) &#123;</span><br><span class="line">ctx, cancel := context.WithCancelCause(ctx)</span><br><span class="line"><span class="deletion">-time.AfterFunc(3*time.Second, func() &#123; cancel() &#125;) // callHeavyWebAPI関数で最大3秒まで</span></span><br><span class="line"><span class="addition">+time.AfterFunc(3*time.Second, func() &#123; cancel(ErrTimeoutInner) &#125;) // callHeavyWebAPI関数で最大3秒まで</span></span><br><span class="line"></span><br><span class="line">for &#123;</span><br><span class="line">select &#123;</span><br><span class="line">case &lt;-ctx.Done():</span><br><span class="line">switch ctx.Err() &#123;</span><br><span class="line">case context.DeadlineExceeded:</span><br><span class="line">fmt.Println(&quot;context timeout exceeded&quot;)</span><br><span class="line">case context.Canceled:</span><br><span class="line"><span class="deletion">-fmt.Println(&quot;context canceled&quot;) // ★どこでキャンセルされた？😭</span></span><br><span class="line"><span class="addition">+switch context.Cause(ctx) &#123;</span></span><br><span class="line"><span class="addition">+case ErrTimeoutOuter:</span></span><br><span class="line"><span class="addition">+fmt.Println(&quot;mainのタイムアウトによりキャンセル&quot;)</span></span><br><span class="line"><span class="addition">+case ErrTimeoutMiddle:</span></span><br><span class="line"><span class="addition">+fmt.Println(&quot;doHeavyTaskのタイムアウトによりキャンセル&quot;)</span></span><br><span class="line"><span class="addition">+case ErrTimeoutInner:</span></span><br><span class="line"><span class="addition">+fmt.Println(&quot;callHeavyTaskのタイムアウトによりキャンセル&quot;)</span></span><br><span class="line"><span class="addition">+default:</span></span><br><span class="line"><span class="addition">+fmt.Println(&quot;その他のキャンセル&quot;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return</span><br><span class="line">default:</span><br><span class="line">// ...外部API呼び出しなどの処理</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重要な考え方として、<code>cancel(err)</code> を設定しても、<code>ctx.Err()</code>の値は変わりません。<code>ctx.Err()</code> は従来どおり、<code>context.DeadlineExceeded</code> や <code>context.Canceled</code> が取得できます。つまり互換性が保たれています。エラー理由をトレースしたい場合のみ、<code>context.Cause(ctx)</code> を呼び出します。最初は使い分けなんだろうとか、やや面倒だなと思いましたが、考えてみると順当な判断です。</p><ul><li><code>ctx.Err()</code><ul><li>Doneが未設定の場合、<code>nil</code> を返す</li><li>Doneが設定されたら、<code>context.Canceled</code> か <code>context.DeadlineExceeded</code> を返す</li></ul></li><li><code>context.Cause(ctx)</code><ul><li>ユーザーが設定した独自の <code>error</code> を返す。設定した場合、<code>ctx.Err()</code>は <code>context.Canceled</code> を返す</li></ul></li></ul><p>これから新規にハンドリングしたい人は、 <code>ctx.Err()</code> を用いず、一気に <code>context.Cause(ctx)</code> を使っても良いかもしれません。</p><p><code>Cause()</code>ですが、以下のように <code>context.Context</code> のインターフェースに<code>Cause()</code>といった関数を追加してくれた方が利用者としては便利じゃないかと思いますよね。これは<a href="https://go.dev/doc/go1compat">Go1互換性ポリシー</a>に書いてあるように、パッケージエクスポートされたインターフェースに新しい関数を追加することは許可されてないということで否定されていました（そのため、context.Contextを引数にとる現在のかたちで提供されています）。</p><figure class="highlight diff"><figcaption><span>互換性をぶっ壊すAPIイメージ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type Context interface &#123;</span><br><span class="line">Deadline() (deadline time.Time, ok bool)</span><br><span class="line">Done() &lt;-chan struct&#123;&#125;</span><br><span class="line">Err() error</span><br><span class="line">Value(key any) any</span><br><span class="line"><span class="addition">+Cause() error // ★後方互換性を壊すためインターフェースに新規関数の追加はできない</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>少しだけ惜しい気もしますが、すぐに覚えられるレベルかなと思います。</p><p><strong>2023.1.30 追記:</strong></p><p>このあたりの互換性を保ったAPI提供については、syumaiさんの<a href="https://blog.syum.ai/entry/2023/01/28/224034">ライブラリとして公開したGoのinterfaceを変更するのは難しいと言う話 - 焼売飯店</a> が詳しいです！</p><h2 id="使い方について"><a href="#使い方について" class="headerlink" title="使い方について"></a>使い方について</h2><p>追加された関数について、パッとどういう挙動になるか確信が持てなかった3ケースを動かしてみます。</p><h3 id="1-cancel-nil-を呼んだら？"><a href="#1-cancel-nil-を呼んだら？" class="headerlink" title="1. cancel(nil) を呼んだら？"></a>1. cancel(nil) を呼んだら？</h3><p>結論→ <code>context.Cause(ctx)</code> が <code>context.Canceled</code>を返します。少し意外な結果に思うかもしれません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancelCause(context.Background())</span><br><span class="line">cancel(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(ctx.Err() == context.Canceled)          <span class="comment">// true</span></span><br><span class="line">fmt.Println(context.Cause(ctx) == context.Canceled) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>nil</code> を返さないことで、<code>ctx.Err()</code> を用いず <code>context.Cause()</code> で <code>context</code> のハンドリングができるようするための理由だと思います。</p><h3 id="2回呼んだらどうなる？"><a href="#2回呼んだらどうなる？" class="headerlink" title="2回呼んだらどうなる？"></a>2回呼んだらどうなる？</h3><p>結論→ 最初に設定された <code>cause</code> が常に取得される。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancelCause(context.Background())</span><br><span class="line">cancel(errors.New(<span class="string">&quot;1. timeout&quot;</span>))</span><br><span class="line">cancel(errors.New(<span class="string">&quot;2. connection dropped&quot;</span>))</span><br><span class="line"></span><br><span class="line">fmt.Println(context.Cause(ctx)) <span class="comment">// 1. timeout</span></span><br><span class="line">fmt.Println(context.Cause(ctx)) <span class="comment">// 1. timeout</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-親子contextでそれぞれcancelさせた場合"><a href="#3-親子contextでそれぞれcancelさせた場合" class="headerlink" title="3. 親子contextでそれぞれcancelさせた場合"></a>3. 親子contextでそれぞれ<code>cancel</code>させた場合</h3><p>例えば、下記のように親子contextを作成し、親→子の順番でキャンセルさせました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">parentCtx, parentCancel := context.WithCancelCause(context.Background())</span><br><span class="line">childCtx, childCancel := context.WithCancelCause(parentCtx)</span><br><span class="line"></span><br><span class="line">parentCancel(errors.New(<span class="string">&quot;parent timeout&quot;</span>))</span><br><span class="line">childCancel(errors.New(<span class="string">&quot;child timeout&quot;</span>))</span><br><span class="line"></span><br><span class="line">fmt.Println(context.Cause(parentCtx)) <span class="comment">// parent timeout</span></span><br><span class="line">fmt.Println(context.Cause(childCtx))  <span class="comment">// parent timeout</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この例の場合は、親のキャンセル内容が優先されるます。 <code>parentCancel</code>、<code>childCancel</code> の呼び出し位置を変えてみると出力が変わるので（基本は子は親に影響しない。親が先にキャンセルしていたら、子はそれを引き継ぐ）、動かしてみると良いかなと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>従来では、特に親子関係を持った<code>context</code>でそれぞれキャンセルが発生しうるときに切り分けが難しかったが、Go 1.20 から追加された、 <code>WithCancelCause()</code> と <code>context.Cause()</code> で解決でき、どこでキャンセルされたんだ問題を解決に導いてくれる</li><li>インターフェースは <code>context.Context</code> への関数追加ではなく、<code>context</code> パッケージへのヘルパー関数である</li></ul><p>次は川口さんの<a href="/articles/20230126a/">Wrapping multiple errors</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-20/">Go1.20</category>
      
      
      <comments>https://future-architect.github.io/articles/20230125a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.20リリース連載が始まります＆メモリアリーナの紹介＆落ち穂拾い</title>
      <link>https://future-architect.github.io/articles/20230123a/</link>
      <guid>https://future-architect.github.io/articles/20230123a/</guid>
      <pubDate>Sun, 22 Jan 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;フューチャーのテックブログ恒例のGoの新バージョンリリース記念のブログが始まります。この執筆時点でrc3が出ています。かつてこんな順調なことがあったでしょうか？&lt;/p&gt;
&lt;div class=&quot;scroll&quot;&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>フューチャーのテックブログ恒例のGoの新バージョンリリース記念のブログが始まります。この執筆時点でrc3が出ています。かつてこんな順調なことがあったでしょうか？</p><div class="scroll"><table><thead><tr><th align="center">Date</th><th align="left">Title</th><th align="left">Author</th></tr></thead><tbody><tr><td align="center">1&#x2F;23(月)</td><td align="left">メモリアリーナの紹介＆落ち穂拾い</td><td align="left">澁川喜規</td></tr><tr><td align="center">1&#x2F;24(火)</td><td align="left"><a href="/articles/20230125a/">contextパッケージのWithCancelCauseとCause</a></td><td align="left">真野隼記さん</td></tr><tr><td align="center">1&#x2F;25(水)</td><td align="left"><a href="/articles/20230126a/">Wrapping multiple errors</a></td><td align="left">川口翔大さん</td></tr><tr><td align="center">1&#x2F;26(木)</td><td align="left"><a href="/articles/20230127a/">timeのアップデート</a></td><td align="left">宮永崇史さん</td></tr><tr><td align="center">1&#x2F;27(金)</td><td align="left"><a href="/articles/20230128a/">HTTP ResponseController</a></td><td align="left">辻大志郎さん</td></tr><tr><td align="center">1&#x2F;30(月)</td><td align="left"><a href="/articles/20230131a/">New ReverseProxy Rewrite hook を動かしながら理解する</a></td><td align="left">棚井龍之介さん</td></tr><tr><td align="center">1&#x2F;31(火)</td><td align="left"><a href="/articles/20230202a/">vetのアップデート</a></td><td align="left">今泉智義さん</td></tr><tr><td align="center">2&#x2F;1(水)</td><td align="left"><a href="/articles/20230203a/">go build に追加される cover オプション（利用例付き）</a></td><td align="left">藤井亮佑さん</td></tr></tbody></table></div><p>初回は、メモリアリーナの紹介ついでに、他の人が触れない残ったネタも紹介します。</p><h1 id="メモリアリーナとは"><a href="#メモリアリーナとは" class="headerlink" title="メモリアリーナとは"></a>メモリアリーナとは</h1><p>メモリアリーナについては以下のプロポーザルで提案されたものです。</p><ul><li><a href="https://github.com/golang/go/issues/51317">proposal: arena: new package providing memory arenas</a></li></ul><p>Goはガベージコレクタを備えた言語ですが、ガベージコレクタは実行時にコストが多少かかります。メモリをスキャンし、他から参照されていないかどうかを探索する必要があるからです。メモリアリーナとして、あらかじめGC対象外のメモリ領域を手動で確保することで、GCがオブジェクトを探索するコストなどが節約できて、15%ほどの性能向上があった、とプロポーザルにはあります。</p><p>しかし、メモリの解放を手動で行う必要があったり、本質的に「危険」な機能であるし、プロポーザルで提案されている使い方（protobufのデコードとか）以外はほとんどパフォーマンスに寄与しない可能性もあります。</p><h2 id="ドキュメントがない？どこにあるの？"><a href="#ドキュメントがない？どこにあるの？" class="headerlink" title="ドキュメントがない？どこにあるの？"></a>ドキュメントがない？どこにあるの？</h2><p>Goは開発版のリリースノートやライブラリリファレンスも公開してくれています。さっそく、arenaパッケージのドキュメントを見てみましょう！</p><p><a href="https://pkg.go.dev/std@go1.20rc3">https://pkg.go.dev/std@go1.20rc3</a></p><p>と思ったけどない？インストールすると、確かに<code>$GOROOT/src/arena</code>フォルダは存在します。フォルダがあるならローカルのgodocで見られそうなのでgodocを入れて見てみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go install golang.org/x/tools/cmd/godoc@latest</span><br><span class="line">$ godoc</span><br></pre></td></tr></table></figure><p>しかし、これでもリファレンスは表示されず、パッケージドキュメントしか表示されません。</p><img src="/images/20230123a/スクリーンショット_2023-01-18_0.08.44.png" alt="スクリーンショット_2023-01-18_0.08.44.png" width="1200" height="684" loading="lazy"><p>この機能はオプトインで動くもので、ビルドの時に環境変数が必要だったことを思い出し、これを指定するとようやく見れました！機能はシンプルですね。　ちなみに、これを書く時にまったく違う<a href="https://pkg.go.dev/github.com/google/gapid@v1.6.1/core/memory/arena">同名のライブラリ</a>を見て、ふむふむと読んでいたのですが、本家の方は検索では出てこないのでみなさまもお気をつけください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ GOEXPERIMENT=arenas godoc</span><br></pre></td></tr></table></figure><img src="/images/20230123a/スクリーンショット_2023-01-18_0.13.05.png" alt="スクリーンショット_2023-01-18_0.13.05.png" width="758" height="402" loading="lazy"><p>使い方はシンプルですね。</p><ul><li>まずは <code>arena.NewArena()</code>で<code>*Arena</code>を作成</li><li>使い終わったら <code>Free()</code>メソッドを呼び出す</li><li><code>arena.MakeSlice[Type](arena)</code>や<code>arena.New[Type](arena)</code>といった関数を使ってアリーナ内部のメモリを利用</li><li><code>arena.Clone(obj)</code>を使うと、アリーナが終了しても残るよう、ヒープに値を移動する(浅いコピー)</li></ul><p>Goはメソッドのジェネリクスが使えないのですが、そのかわりに、1番目の引数に値を取るジェネリクスなヘルパー関数を用意するという、C言語でオブジェクト指向している時代のような設計をすることで代替するというテクニックが使われていますね。</p><h2 id="ベンチマーク"><a href="#ベンチマーク" class="headerlink" title="ベンチマーク"></a>ベンチマーク</h2><p>小さいオブジェクトをたくさん確保するユースケースで性能差が出るということで、標準ライブラリのリンクドリストのcontainer&#x2F;listをちょびっと改造してみました。<code>Element</code>はポインタが3つと<code>interface&#123;&#125;</code>を1つ持つ構造体です。<code>interface</code>にポインタを入れるとしたら４０バイト(インタフェースはポインタ2つ保持するので)の値のメモリの確保にarenaを利用する、というユースケースになります。</p><p>既存のコードのメモリ確保部分をいじるだけであれば、そんなに難しくないですね。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+import (</span></span><br><span class="line"><span class="addition">+&quot;arena&quot;</span></span><br><span class="line"><span class="addition">+)</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"> // Element is an element of a linked list.</span><br><span class="line"> type Element struct &#123;</span><br><span class="line"> // Next and previous pointers in the doubly-linked list of elements.</span><br><span class="line"><span class="meta">@@ -48,6 +52,7 @@</span></span><br><span class="line"> type List struct &#123;</span><br><span class="line"> root Element // sentinel list element, only &amp;root, root.prev, and root.next are used</span><br><span class="line"> len  int     // current list length excluding (this) sentinel element</span><br><span class="line"><span class="addition">+a    *arena.Arena</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // Init initializes or clears list l.</span><br><span class="line"><span class="meta">@@ -59,8 +64,16 @@</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // New returns an initialized list.</span><br><span class="line"><span class="deletion">-func New() *List &#123; return new(List).Init() &#125;</span></span><br><span class="line"><span class="addition">+func NewWithArena(a *arena.Arena) *List &#123;</span></span><br><span class="line"><span class="addition">+r := arena.New[List](a)</span></span><br><span class="line"><span class="addition">+r.a = a</span></span><br><span class="line"><span class="addition">+return r.Init()</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"></span><br><span class="line"> // Len returns the number of elements of list l.</span><br><span class="line"> // The complexity is O(1).</span><br><span class="line"> func (l *List) Len() int &#123; return l.len &#125;</span><br><span class="line"><span class="meta">@@ -101,7 +114,9 @@</span></span><br><span class="line"></span><br><span class="line"> // insertValue is a convenience wrapper for insert(&amp;Element&#123;Value: v&#125;, at).</span><br><span class="line"> func (l *List) insertValue(v any, at *Element) *Element &#123;</span><br><span class="line"><span class="deletion">-return l.insert(&amp;Element&#123;Value: v&#125;, at)</span></span><br><span class="line"><span class="addition">+e := arena.New[Element](l.a)</span></span><br><span class="line"><span class="addition">+e.Value = v</span></span><br><span class="line"><span class="addition">+return l.insert(e, at)</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>ベンチマークのコードは以下の通りです。通常の実装、arena利用、中に入れる要素もarenaを利用の3つでテストしています。一回に入れる要素数を要素数を1万、10万、100万と変えてみています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> list2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;arena&quot;</span></span><br><span class="line"><span class="string">&quot;container/list&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> V <span class="keyword">struct</span> &#123;</span><br><span class="line">n <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkListWithoutArena</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">l := list.New()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">l.PushBack(&amp;V&#123;i&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkListWithArena</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">a := arena.NewArena()</span><br><span class="line">l := NewWithArena(a)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">l.PushBack(&amp;V&#123;i&#125;) <span class="comment">// valueはarena使わず</span></span><br><span class="line">&#125;</span><br><span class="line">a.Free()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkListWithArena2</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">a := arena.NewArena()</span><br><span class="line">l := NewWithArena(a)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">v := arena.New[V](a) <span class="comment">// valueもarena利用</span></span><br><span class="line">v.n = i</span><br><span class="line">l.PushBack(v)</span><br><span class="line">&#125;</span><br><span class="line">a.Free()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>結果は以下の通りです。1万要素程度だとほとんど差がつきません。10万ぐらいになるとだいぶ差が・・・という感じです。ちなみに、最初に書いたときは<code>Free()</code>を書き忘れてしまいました。そうしたら処理時間が3倍になってました。要注意です。</p><div class="scroll"><table><thead><tr><th align="center">方式＼要素数</th><th align="center">10,000</th><th align="center">100,000</th><th align="center">1,000,000</th></tr></thead><tbody><tr><td align="center">標準のメモリ戦略</td><td align="center">0.30mS</td><td align="center">4.58mS</td><td align="center">62.07mS</td></tr><tr><td align="center">arena利用(Elementのみ)</td><td align="center">0.29mS (-4.2%)</td><td align="center">2.77mS (-39.5%)</td><td align="center">28.00mS (-54.9%)</td></tr><tr><td align="center">arena利用(valueも利用)</td><td align="center">0.28mS (-8.4%)</td><td align="center">2.65mS (-42.1%)</td><td align="center">26.80mS (-56.8%)</td></tr></tbody></table></div><h2 id="どこで使えるのか？"><a href="#どこで使えるのか？" class="headerlink" title="どこで使えるのか？"></a>どこで使えるのか？</h2><p>パフォーマンスがあがる！素敵！じゃあ明日からガンガン使う！ということにはならなそうなのが今回の機能です。なんといっても、コンパイラのフラグをセットしないと使えません。後述のライフサイクルを考えると、APIの形がアリーナ利用とそうでない場合で変わる可能性があり、公開するライブラリだと、後方互換性を考えると、最低でも1.21がリリースされ、1.20がサポートされている最低バージョンになってから、となるかもしれません。そもそもExperimentalが外れてからその次、の方がいいかもしれません。もちろん、個別のアプリで使うなら自己責任ですぐにでも使えるとは思います。</p><h2 id="ユースケースには何があるか？"><a href="#ユースケースには何があるか？" class="headerlink" title="ユースケースには何があるか？"></a>ユースケースには何があるか？</h2><p>そもそも、小さいメモリをたくさん使う、というユースケースがどこにあるのか、というところが問題です。一番考えられるのが何かしらの木構造の処理ですね。あとは常駐プロセスでたくさんのオブジェクトを扱うケースです。考えられるのはだいたいこんな感じでしょうか？</p><ul><li>XMLのパース（Excelのパース)</li><li>言語処理系の構文木</li><li>HTMLのサーバーサイドレンダリング（DOMツリー）</li><li>RDB自作勢（タプルなどの内部のデータ管理）</li></ul><p>一番上が一番有望なユースケースな気がしています。というのも、前職で作ったExcelからのマスターデータ変換はプロファイルを取ると、ほとんどがメモリ確保の処理時間でした。Goのxmlパッケージは<a href="https://github.com/golang/go/issues/21823">処理が遅いというissue</a>も上がっていたりします。最近のGoでは試していないですが、attributeとかをパースのときにそれぞれメモリ確保して格納しているようなところが遅かったと記憶しています。</p><h2 id="ライフサイクル管理とAPI設計の考察"><a href="#ライフサイクル管理とAPI設計の考察" class="headerlink" title="ライフサイクル管理とAPI設計の考察"></a>ライフサイクル管理とAPI設計の考察</h2><p>もう1つあるのが、Arenaのライフサイクルの戦略をどうするか、です。たとえば、Excelのファイルのパースであれば1ファイルごとにArenaを作る方法もあります。ただし、同時処理数の最大が見えていて、最大メモリ量が見積もれるのであれば、複数のExcelファイルを処理するのに、1つのArenaを共有し、sync.Pool的な再利用の仕組みも作って載せる、というのが一番効率よくなりそうです。</p><p>ただし、Arena上のメモリの解放はArena一括で行う必要があります。徐々にメモリが少なくなったからといって、「じゃあGC実行して開けよう」みたいなことはできません。データベースのような仕組みを作るのであれば、自分で確保したメモリの量も見ながら、ときどきArenaにメモリを返す、みたいなメモリ管理の仕組みを自作する必要があるかもしれません。</p><p>僕が最初に間違って読んでいた<a href="https://pkg.go.dev/github.com/google/gapid@v1.6.1/core/memory/arena">Google製の同名のライブラリ</a>では<code>context.Context</code>にArenaを登録したり取り出せるAPIがありましたが、これと同じように<code>context.Context</code>と同じライフサイクルで使う、というのも1つの手かと思います。そうすると、ある程度まとまった処理単位でArenaを共有する、といったことが可能となりますし、アリーナ利用とそうでない場合にAPIを変えずにできます（あまり良いことでもないかもですが）。プロポーザルの議論の中でもこのようなリクエスト単位での解放というのが紹介されていました。</p><p>ライブラリのAPIとしては、最低限、Arenaを外から渡せるように、という口の用意すれば、使う側で、これらの戦略を利用者が選べるので良さそうですね。あとは、レスポンスで返すオブジェクトをヒープにするか、Arenaの上に作るかはオプションで指定できる必要もありそうです。たとえば、Excelのパースであれば、XMLのメモリはArena上において、Excelとして処理するライブラリが使い終わったらXMLのメモリを解放してあげて、ブックの値はヒープにおいておくことでユーザーに返す、というのが可能です。最終的に返すブックがArenaだと、それを使う間はArenaの解放はできません。ただし、Excelから値を読み取って作ったドメインオブジェクトが必要なレスポンスであれば、ブックがArenaでも良い（ドメインオブジェクトを作ったら不要になる)となります。誰がどう使うかでどちらにあると良いかが変わってきてしまうので、汎用的なライブラリを作るなら明示的に指定できる必要がありそうです。</p><p>ビルド時に環境変数を指定するのですが、環境変数だと条件コンパイルに使えないので、別途ビルドタグでArenaなし版のみをビルドするように、というのも1.21が出るまでは必要そうですね。</p><h2 id="Arenaから追い出されないように気を付ける-x2F-開放後はArenaを触らないようにする"><a href="#Arenaから追い出されないように気を付ける-x2F-開放後はArenaを触らないようにする" class="headerlink" title="Arenaから追い出されないように気を付ける&#x2F;開放後はArenaを触らないようにする"></a>Arenaから追い出されないように気を付ける&#x2F;開放後はArenaを触らないようにする</h2><p>Arenaを活用するには、そこでメモリを確保して、そこをきちんと使う必要がありますが、Goの場合はエスケープ処理が便利かつ強力なので、ヒープ側にメモリが確保されてGC対象になってしまう可能性があります。Arenaをせっかく使うのであれば、Arenaから追い出されないようにする必要があります。</p><ul><li>スライスは<code>arena.MakeSlice[Type](a)</code>で毎回確保する。可変長として使おうとして<code>append()</code>をすると、伸長するために新しいメモリ領域を確保するためにヒープに逃げていってしまい、Arenaから外に出てしまうので、次のように伸長する必要がある場合は再度<code>arena.MakeSlice[Type](a)</code>で確保してコピーを自前でやる必要がある。ただし、伸長したときに、前のスライスのメモリがArenaを解放するまでは残り続けるため、やはり基本的に固定長のみで運用で、可変長で扱わない方が良さそう。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mem := arena.NewArena()</span><br><span class="line">s := arena.MakeSlice[<span class="type">int</span>](mem, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">s = Append(mem, s, <span class="number">11</span>)</span><br><span class="line">log.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Append</span>[<span class="title">T</span> <span class="title">any</span>]<span class="params">(mem *arena.Arena, s []T, v T)</span></span> []T &#123;</span><br><span class="line">l := <span class="built_in">len</span>(s)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">cap</span>(s) == l &#123;</span><br><span class="line">newS := arena.MakeSlice[T](mem, l+<span class="number">1</span>, l*<span class="number">2</span>)</span><br><span class="line"><span class="built_in">copy</span>(newS, s)</span><br><span class="line">newS[l] = v</span><br><span class="line"><span class="keyword">return</span> newS</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">append</span>(s, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>文字列も、<code>[]byte</code>としてArenaに置いておく必要がある（以下のコード参照）。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src := <span class="string">&quot;source string&quot;</span></span><br><span class="line"></span><br><span class="line">mem := arena.NewArena()</span><br><span class="line"><span class="keyword">defer</span> mem.Free()</span><br><span class="line"></span><br><span class="line">bs := arena.MakeSlice[<span class="type">byte</span>](mem, <span class="built_in">len</span>(src), <span class="built_in">len</span>(src))</span><br><span class="line"><span class="built_in">copy</span>(bs, src)</span><br><span class="line">str := unsafe.String(&amp;bs[<span class="number">0</span>], <span class="built_in">len</span>(bs))</span><br></pre></td></tr></table></figure><ul><li>mapやchanはArenaを使う版がないので、必要であれば作る必要がある。ただし、chanはそこまで大量に作って・・・ということもなさそうなので、問題はない気がします。mapが必要であれば頑張って実装する必要がありますね。</li></ul><p>文字列は<a href="https://uptrace.dev/blog/posts/go-memory-arena.html">Uptraceのブログ</a>のブログから引用しました。</p><p>もう1つはアリーナが解放された後にアリーナの中のメモリを触らない、というのもあります。<code>go run -asan main.go</code>のようにアドレスサニタイザーを有効にして実行すると、このようなエラーは検知できます。アリーナ解放後も利用する必要がある値は<code>arena.Clone()</code>を使って、ヒープに逃してあげましょう。</p><h2 id="アリーナのまとめ"><a href="#アリーナのまとめ" class="headerlink" title="アリーナのまとめ"></a>アリーナのまとめ</h2><p>マイクロベンチマークで性能が2倍以上になる、というのをやってみました。Uptraceのブログでも2分探索のコードを改造して使っていたので、この手の小さなメモリをたくさん使うケースに適用すると良さそうです。</p><p>ただし、APIデザインを考えると、汎用的な設計を作るのは結構大変そうだな、と思いました。</p><h1 id="その他の小ネタ"><a href="#その他の小ネタ" class="headerlink" title="その他の小ネタ"></a>その他の小ネタ</h1><p>コンパイラとかcgo周りとか細かくいろいろアップデートがあります。CGo依存でデフォルトで実装されていたmacOSが非依存になったりして、デフォルトのmac上のビルドとクロスビルドで違いがなくなりました（他のCGo依存ライブラリがない場合）。まあ、大きく実装が変わるとかに関わるものは今のところなさそう？CPUアーキテクチャのサブタイプごとに細かくかき分けたい（ARMの中の命令セットごととか）人向けにビルドタグとか追加されていますが、多くの人には関係ないかな？<br>あとは、標準ライブラリのビルド済みのパッケージが添付されなくなって、配布物が小さくなっています。まあクロスコンパイルをする場合などはローカルでビルドされてキャッシュされていたので、それと同じような感じの扱いになっただけで、初回ビルドがちょっと遅いかな？ぐらいのものです。二酸化炭素を減らさないと！という会社さんはローカルがキャッシュ済みのイメージを作って使うといいかも？</p><h2 id="ライブラリ系"><a href="#ライブラリ系" class="headerlink" title="ライブラリ系"></a>ライブラリ系</h2><h3 id="unsafe"><a href="#unsafe" class="headerlink" title="unsafe"></a><code>unsafe</code></h3><p>文字列とバイト列のファイルコピーをしない変換、スライスの裏の配列の取得ができるようになります。<a href="https://pkg.go.dev/github.com/valyala/fasthttp">github.com&#x2F;valyala&#x2F;fasthttp</a>はなるべくstringを作らないことで高速なベンチマークを達成している（と思う）のですが、net&#x2F;httpの標準ライブラリでも同じぐらいのパフォーマンスアップを期待しちゃいますね。</p><h3 id="圧縮系のライブラリ"><a href="#圧縮系のライブラリ" class="headerlink" title="圧縮系のライブラリ"></a>圧縮系のライブラリ</h3><p><code>archive/tar</code>と<code>archive/zip</code>で現在のフォルダの外だったり、絶対パスが入ると<code>ErrInsecurePath</code>を返すようになりました。ディレクトリトラバーサル攻撃対策ですね。<code>GODEBUG=tarinsecurepath=0</code>とか<code>GODEBUG=zipinsecurepath=0</code>を設定して実行すれば前と同じ動作にはなります。</p><h3 id="暗号系ライブラリ"><a href="#暗号系ライブラリ" class="headerlink" title="暗号系ライブラリ"></a>暗号系ライブラリ</h3><p><code>crypto/ecdh</code>で楕円暗号のパッケージが追加になりました。<a href="https://qiita.com/lemiyachi/items/c20a18b172c6f192a262">RSAの終わりの始まり - 暗号移行再び</a>にあるように、暗号強度を強くしよう、という流れがまた来そうなので、要注目パッケージです。<br>あとは<code>crypto/ecdsa</code>とか<code>crypto/rsa</code>とかめずらしく、性能が悪くなる改善ですが、処理速度が定数時間で終わるようになるということで、処理する時間で内容が推測できちゃう系の最近たまに話題になる系統のセキュリティ対策ですかね。</p><h3 id="io-OffsetWriter"><a href="#io-OffsetWriter" class="headerlink" title="io.OffsetWriter"></a><code>io.OffsetWriter</code></h3><p><code>io.Reader</code>には<code>io.SectionReader</code>という、オフセット＋サイズ制限、<code>io.LimitReader</code>というサイズ制限のReaderはありましたが、実は<code>io.Writer</code>としてはオフセット系のはなかったんですね。書き込み上限のWriter（<code>LimitWriter？</code>)はなさそうなので、誰か提案すると良い気がします。</p><h3 id="math-rand"><a href="#math-rand" class="headerlink" title="math/rand"></a><code>math/rand</code></h3><p>地味に変更が多いです。1.20から、デフォルトの乱数の種が固定値でなくなりました。1.19までは間違ったプログラムの実行の仕方を防ぐために、常に同じ乱数が変えるようになっていて、開発者に適切な種の設定を即す挙動になっていました。実行時に<code>GODEBUG=randautoseed=0</code>をつけると、以前と同じ挙動になります。このグローバルな乱数ジェネレータの乱数の種を設定するグローバルな<code>rand.Seed()</code>は廃止になっています。種を固定した乱数が必要な場合は、乱数生成器を明示的に作って使いましょう。<br>あと、<code>rand.Read()</code>も廃止になっています。ランダムなバイト列取得というセキュリティ用途でよくあるユースケースで間違って使われるケースが多かったんでしょうか？<code>crypto/rand</code>の<code>Read</code>を使えとなっていますね。</p><h3 id="regexp"><a href="#regexp" class="headerlink" title="regexp"></a><code>regexp</code></h3><p>正規表現でメモリを消費しすぎるパターンの場合に<code>syntax.ErrLarge</code>が返るようになりました。Go 1.19のパッチリリースでセキュリティ対策されたのですが、そのときは新しいAPIを導入しないルールに従い、<code> syntax.ErrInternalError</code>を一時的に返していたが、1.20からは上記のエラーが新規で作られたとのことです。バージョンアップのやり方として参考になりますね。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>明日(1&#x2F;24)は真野さんの <a href="/articles/20230125a/">contextパッケージのWithCancelCauseとCause</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-20/">Go1.20</category>
      
      
      <comments>https://future-architect.github.io/articles/20230123a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MailSlurperを使って6桁のコードの送信コードのテストをする</title>
      <link>https://future-architect.github.io/articles/20230120a/</link>
      <guid>https://future-architect.github.io/articles/20230120a/</guid>
      <pubDate>Thu, 19 Jan 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;以前、認証ミドルウェアのhankoの紹介の中で、hankoがテストで使っているMailSlurperというメールサーバーが面白いという紹介をしました。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>以前、認証ミドルウェアのhankoの紹介の中で、hankoがテストで使っているMailSlurperというメールサーバーが面白いという紹介をしました。</p><p><a href="https://future-architect.github.io/articles/20220902a/">https://future-architect.github.io/articles/20220902a/</a></p><p>テストにおいては、モックは使うものの、モックを差し込むレイヤーはソースコードレベルではなくて、インフラレベルで仕掛ける方がいいよ、というのはほぼコンセンサスとなっていると思います。</p><ul><li>RDBを使うには、DockerでさっとPostgreSQLを差し込む</li><li>フロントエンドからのHTTPの外部サービスを使うには、<a href="https://mswjs.io/">Mock Service Worker</a>とか<a href="https://docs.cypress.io/api/commands/intercept">Cypressのintercept</a>を使う</li></ul><p>もちろん、フレームワークでH2とかSQLiteとかのローカルで簡単に使えるDBMSをサポートしているならそれを使うのも手ですが、ともかく、コードレベルのモックオブジェクトを実装するのはなし、という感じですね。</p><p>というのも、やり方を間違えると、モックに対するテストコードになって、コード量のわりに品質があがらないとか、結局実システムの挙動の変化に気づけずに不具合が防止できないとか、モックをコードで作るのはあまりよくないという論調ですね。なるべく上流でモックすれば、そのような問題は減ります。将来的にはモックの挙動が正しいかの検証とかそういうあたりの進化もあるかな、と思いつつ、楽に成果が出るならそちらを今は選択すべきと思います。</p><p>メールを送信するシステムにおいても、MailSlurperを使えば良さそうなので試してみました。最近よく見かける、6桁の数字のコードを追加の認証を行うシステムのテストです。</p><h1 id="MailSlurper"><a href="#MailSlurper" class="headerlink" title="MailSlurper"></a>MailSlurper</h1><p><a href="https://www.mailslurper.com/">MailSlurper</a>は、MITライセンスのオープンソースのメールサーバー兼クライアントです。SMTPでメールを受けることができて、ブラウザでそのメールを確認できます。また、REST APIも提供されており、受信したメールをAPIで取り出せます。Go製で軽く、Dockerで気軽に起動できます。</p><p>メールボックスは1つで、来たメールはすべて一か所に集まります。ドキュメントを見ると、クライアント証明書をアクセス時に必要という設定ができ、本番環境でも使うことを想定してそうですが、エンドユーザー向けに使うにもメールボックスが1つしかないと不便ですし、受信後のイベント起動とかがないので、バックエンド処理のトリガーにするにも少し心もとなく、今のところはテスト用途がベストかな、と思っています。</p><p>GitHubを見てもここしばらくはあまり更新されていないのですが、SMTPは機能的には枯れているので問題ないでしょう。</p><h1 id="6桁の数値の生成とセキュリティ"><a href="#6桁の数値の生成とセキュリティ" class="headerlink" title="6桁の数値の生成とセキュリティ"></a>6桁の数値の生成とセキュリティ</h1><p>みなさん、<a href="https://www.oreilly.co.jp/books/9784873119038/">Real World HTTP</a>はすでにご覧になられていると思いますので、お手元の本の「14.8.5　タイムベースワンタイムパスワードアルゴリズム（TOTP）」を見れば詳しいことが書かれているので、詳細については語りませんが、秘密鍵として用意したシークレットをもとに、日時情報を加えて6桁の数値を生成します。Goなら github.com&#x2F;pquerna&#x2F;otp&#x2F;totp パッケージを利用するのが簡単です。</p><p>6桁の数値の計算はRFCで決められたアルゴリズムに基づいて行います。高いセキュリティが求められるようなサービスであれば、事前に秘密鍵をGoogle Authenticatorなどのアプリに登録しておき、TOTPのアルゴリズムに従って出力した数値をサーバーに送り、サーバー側でも同じ計算をすることで照合します。秘密鍵そのものは最初の登録時以外はネットワークを流れることがないため、通信経路が安全でなくても比較的安全です。仮に通信が傍受されても、そのコードは30秒（たいていのサービスの場合）しか有効でないからです。</p><p>一方で、あまりプロ向けのサービス出ない場合は、同じTOTPのアルゴリズムであっても、別の使い方をします。登録されているメールアドレスやSMS、音声通話で6桁のコードをユーザーに伝え、それをユーザーがサーバー画面で入力して戻すことで照合します。通信経路の傍受に対する強度は同じですが、仮にSIMスワップ攻撃を受けたり、メールサーバーのアカウントがクラックされてアクセスされてしまうと突破できてしまうので、手元のハードウェアに触られなければ安心の前述の方法よりはやや安全性は落ちます（もちろん、秘密鍵をそのデバイスにしか入れていないという前提で）。</p><p>後者のような機能を実装するサービスは増えているので、それをMailSlurperを使ってテストしてみます。</p><h1 id="シークレットの作成"><a href="#シークレットの作成" class="headerlink" title="シークレットの作成"></a>シークレットの作成</h1><p>シークレットの生成は”github.com&#x2F;pquerna&#x2F;otp”で簡単にできます。シークレット生成はユーザー登録時に行い、サーバー側でユーザーごとに保存します。後半のコードは、すでに登録済みのユーザーに対して行う前提なので、あらかじめ作っておいてテストコードに利用します。登録プロセスを実装する場合はこちらのコードを参考にしてください。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/pquerna/otp/totp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    key, err := totp.Generate(totp.GenerateOpts&#123;&#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;key: %s\n&quot;</span>, key.Secret())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="テストサーバーの起動"><a href="#テストサーバーの起動" class="headerlink" title="テストサーバーの起動"></a>テストサーバーの起動</h1><p>テストのためのMailSlurperを起動しておきます。docker composeを利用します。ウェブの管理画面、API、SMTPポートの3つを開けておきます。なお、公式のDockerイメージはなく、野良イメージが多いのですが、<a href="https://hub.docker.com/r/marcopas/docker-mailslurper">marcopas&#x2F;docker-mailslurper</a> が一番ドキュメントが充実しています。</p><figure class="highlight yaml"><figcaption><span>docker-compose.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mailslurper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">marcopas/docker-mailslurper:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8080:8080&#x27;</span> <span class="comment"># web UI</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8085:8085&#x27;</span> <span class="comment"># API</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;2500:2500&#x27;</span> <span class="comment"># smtp</span></span><br></pre></td></tr></table></figure><p>あとは起動するだけです。 <a href="http://localhost:8080/">http://localhost:8080</a> にアクセスして管理画面にアクセスできることを確認しましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker compose up</span><br></pre></td></tr></table></figure><img src="/images/20230120a/スクリーンショット_2023-01-16_1.41.30.png" alt="スクリーンショット_2023-01-16_1.41.30.png" width="1200" height="684" loading="lazy"><h1 id="テストコード作成"><a href="#テストコード作成" class="headerlink" title="テストコード作成"></a>テストコード作成</h1><p>これから作るコードは、6桁の認証コードつきのメールを送信するものです。その6桁の数値が正しいものかどうかの検証を来ないます。</p><p>MailSlurperは<a href="https://github.com/mailslurper/mailslurper/wiki/Email-Endpoints">REST APIを提供しています</a>。送信されたメール一覧を取得してきます。取得にあたっては、送信もとアドレスや送信先のアドレスでフィルタリングもできます。</p><p>まずはテストヘルパーとして、メールサーバーからメールをとってくるコードを作成してみます。6桁の数値を取り出します。送信先アドレスでフィルタリングを行うようにします。同時にテストを並行で走らせたとしても、送信先のユーザー（アドレス）を分けておけばテストが干渉することがなくなります。今回はGoで実装しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> authcode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line"><span class="string">&quot;regexp&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// json2goで作成した、MailSlurperのメールアドレス一覧のレスポンス</span></span><br><span class="line"><span class="keyword">type</span> MailSlurperResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">MailItems    []MailItem <span class="string">`json:&quot;mailItems&quot;`</span></span><br><span class="line">TotalPages   <span class="type">int</span>        <span class="string">`json:&quot;totalPages&quot;`</span></span><br><span class="line">TotalRecords <span class="type">int</span>        <span class="string">`json:&quot;totalRecords&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MailItem <span class="keyword">struct</span> &#123;</span><br><span class="line">ID          <span class="type">string</span>   <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">DateSent    <span class="type">string</span>   <span class="string">`json:&quot;dateSent&quot;`</span></span><br><span class="line">FromAddress <span class="type">string</span>   <span class="string">`json:&quot;fromAddress&quot;`</span></span><br><span class="line">ToAddresses []<span class="type">string</span> <span class="string">`json:&quot;toAddresses&quot;`</span></span><br><span class="line">Subject     <span class="type">string</span>   <span class="string">`json:&quot;subject&quot;`</span></span><br><span class="line">Body        <span class="type">string</span>   <span class="string">`json:&quot;body&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// toアドレスでフィルタリングしてのメールの取り出し</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReceiveMail</span><span class="params">(t *testing.T, host, to <span class="type">string</span>)</span></span> []MailItem &#123;</span><br><span class="line">t.Helper()</span><br><span class="line">u, err := url.Parse(host)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">u.Path = <span class="string">&quot;/mail&quot;</span></span><br><span class="line">q := url.Values&#123;&#125;</span><br><span class="line">q.Set(<span class="string">&quot;to&quot;</span>, to)</span><br><span class="line">u.RawQuery = q.Encode()</span><br><span class="line"></span><br><span class="line">res, err := http.Get(u.String())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">d := json.NewDecoder(res.Body)</span><br><span class="line">r := MailSlurperResponse&#123;&#125;</span><br><span class="line">err = d.Decode(&amp;r)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r.MailItems</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6桁のコードを取り出す（裏でメールサーバーから情報取得）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReceivePassCode</span><span class="params">(t *testing.T, host, to <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">t.Helper()</span><br><span class="line">mails := ReceiveMail(t, host, to)</span><br><span class="line"></span><br><span class="line">p := regexp.MustCompile(<span class="string">`\d&#123;6&#125;`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, m := <span class="keyword">range</span> mails &#123;</span><br><span class="line"><span class="keyword">return</span> p.FindString(m.Body)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成したテストコードは以下の通りです。短く書けますね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> authcode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestValidate</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">secret := <span class="string">&quot;LB6BHGYD63JCWM4BBPHCSRBXGZYKGDI3&quot;</span> <span class="comment">// 事前に作成しておいたシークレット</span></span><br><span class="line">    <span class="comment">// これから作成する、パスコード送信処理</span></span><br><span class="line">err := SendPassCode(<span class="string">&quot;localhost:2500&quot;</span>, <span class="string">&quot;test user&quot;</span>, <span class="string">&quot;test@example.com&quot;</span>, secret)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">&quot;error should be nil: %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">code := ReceivePassCode(t, <span class="string">&quot;http://localhost:8085&quot;</span>, <span class="string">&quot;test@example.com&quot;</span>)</span><br><span class="line">    <span class="comment">// これから実装するバリデーション</span></span><br><span class="line"><span class="keyword">if</span> !Validate(code, secret) &#123;</span><br><span class="line">t.Error(<span class="string">&quot;validation failed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>APIエンドポイントの<code>/mail</code>に<code>to</code>クエリーをつけて帰ってくるJSONをいじるだけなので、他の言語でもすぐに実装できると思います。</p><h1 id="コード生成とメール送信"><a href="#コード生成とメール送信" class="headerlink" title="コード生成とメール送信"></a>コード生成とメール送信</h1><p>登録済みのユーザー（サーバーは、名前、メールアドレスおよび、シークレットを知っている）に対して、コードを生成して送信します。なお、レガシーなもろもろの塊であるメールで日本語を正しく送信するにあたっては、以下のQiita記事を参考にしました。</p><ul><li><a href="https://qiita.com/yamasaki-masahide/items/a9f8b43eeeaddbfb6b44">go で utf8メールを送信</a></li></ul><p>上記のテストが通るように実装したのが以下のテストです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> authcode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"><span class="string">&quot;net/mail&quot;</span></span><br><span class="line"><span class="string">&quot;net/smtp&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/pquerna/otp/totp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上記のエントリーから、add76crlf, utf8Split, encodeSubjectをコピーしておくこと</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// メールの作成</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenerateMessage</span><span class="params">(toUserName, toAddress, secret <span class="type">string</span>)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">from := mail.Address&#123;<span class="string">&quot;Myサービス&quot;</span>, <span class="string">&quot;noreply@my-service.com&quot;</span>&#125;</span><br><span class="line">to := mail.Address&#123;toUserName, toAddress&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> msg bytes.Buffer</span><br><span class="line">msg.WriteString(<span class="string">&quot;From: &quot;</span> + from.String() + <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">msg.WriteString(<span class="string">&quot;To: &quot;</span> + to.String() + <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">msg.WriteString(encodeSubject(<span class="string">&quot;Myサービスの認証コード&quot;</span>))</span><br><span class="line">msg.WriteString(<span class="string">&quot;MIME-Version: 1.0\r\n&quot;</span>)</span><br><span class="line">msg.WriteString(<span class="string">&quot;Content-Type: text/plain; charset=\&quot;utf-8\&quot;\r\n&quot;</span>)</span><br><span class="line">msg.WriteString(<span class="string">&quot;Content-Transfer-Encoding: base64\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">code, err := totp.GenerateCode(secret, time.Now())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> body bytes.Buffer</span><br><span class="line">body.WriteString(<span class="string">&quot;認証コードはこちらです\n\n&quot;</span> + code + <span class="string">&quot;\n\nMyサービス&quot;</span>)</span><br><span class="line">msg.WriteString(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">msg.WriteString(add76crlf(base64.StdEncoding.EncodeToString(body.Bytes())))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> msg.Bytes(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// メール送信</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendPassCode</span><span class="params">(host, toUserName, toAddress, secret <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">msg, err := GenerateMessage(toUserName, toAddress, secret)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = smtp.SendMail(</span><br><span class="line">host,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line"><span class="string">&quot;noreply@my-service.com&quot;</span>,</span><br><span class="line">[]<span class="type">string</span>&#123;toAddress&#125;,</span><br><span class="line">msg,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// クライアントに送信されたパスコードのバリデーションを行う</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Validate</span><span class="params">(passcode, secret <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> totp.Validate(passcode, secret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先ほどのテストに対して実行すると、正しくテストをパスします。簡単にメール送信を伴うコードのテストができました。</p><h1 id="テストの後始末"><a href="#テストの後始末" class="headerlink" title="テストの後始末"></a>テストの後始末</h1><p>テストを行い続けると、メールボックスにメールが溜まり続けます。リソースを消費する量は大したことがないとはいえ、増え続けるのは精神衛生上良くないです。幸い、MailSlurperはメールボックスのリセットもAPIで提供してくれていますので、それを使ってみます。</p><p>まずは先ほどのテストヘルパーのファイルに以下のメールボックスリセットの送信を行うヘルパー関数を追加します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ResetMailSlumper</span><span class="params">(host <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">u, err := url.Parse(host)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">u.Path = <span class="string">&quot;/mail&quot;</span></span><br><span class="line"></span><br><span class="line">req, _ := http.NewRequest(<span class="string">&quot;DELETE&quot;</span>, u.String(), strings.NewReader(<span class="string">`&#123;&quot;pruneCode&quot;: &quot;all&quot;&#125;`</span>))</span><br><span class="line">req.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">http.DefaultClient.Do(req)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>テストの実行前にリセットを呼ぶようにします。後始末だと、実行後の方が自然に思えるかもしれませんが、テストのリソースのリセットを後にしてしまうと、問題発生時に結果を追いかけるのが大変になるため、僕は全体の実行前にクリアするようにしています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line">ResetMailSlumper(<span class="string">&quot;http://localhost:8085&quot;</span>)</span><br><span class="line">code := m.Run()</span><br><span class="line">os.Exit(code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>これで実SMTPサーバーを使ったコードを書いて、それをMailSlurperを使ってテストする方法を学びました。REST APIのおかげで、ヘルパーさえ用意してしまえば、テストを書くのは簡単です。</p><p>これだけ使いやすいとなると、非同期通信系は全部SMTPに寄せたくなってくる気もします。まあ本番環境の安定稼働を考えると実際にやることはないですが、MailSlurperは送信結果を見るのもできて、開発体験はかなり良いです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/MailSlurper/">MailSlurper</category>
      
      <category domain="https://future-architect.github.io/tags/TOTP/">TOTP</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%A1%E3%83%BC%E3%83%AB/">メール</category>
      
      
      <comments>https://future-architect.github.io/articles/20230120a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>VPC Service ControlでGoogle Cloud環境をガッチリ守る</title>
      <link>https://future-architect.github.io/articles/20230119a/</link>
      <guid>https://future-architect.github.io/articles/20230119a/</guid>
      <pubDate>Wed, 18 Jan 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、本記事ではGoogle CloudのVPC Service</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、本記事ではGoogle CloudのVPC Service Controlsを利用して、リソースへのアクセス制御を行う方法についてTerraformコード付きで紹介していきたます。</p><p>昨今では、個人情報漏洩のニュースが尽きません。少し古いデータではありますが、2012年～2021年に漏洩・紛失した可能性のある個人情報は累計で1億1979万人分にのぼり、2022年を含めるともっと多くなりそうです。<br><a href="https://webtan.impress.co.jp/n/2022/03/22/42500#:~:text=%E6%9D%B1%E4%BA%AC%E5%95%86%E5%B7%A5%E3%83%AA%E3%82%B5%E3%83%BC%E3%83%81%E3%81%AF%E3%80%812021,%E3%82%82%E6%9C%80%E5%A4%9A%E8%A8%98%E9%8C%B2%E3%81%A0%E3%81%A8%E3%81%84%E3%81%86%E3%80%82">個人情報漏えい、10年間で日本の人口とほぼ同じ人数分が上場企業から流出・紛失【東京商工リサーチ調べ】</a></p><p>セキュリティインシデントを起こさないためにも、基本的にはデータへのアクセスを拒否し、データにアクセスできる人を絞って穴あけするなど、しっかりとデータを守っておく必要があります。</p><p>そんな要求に答えるのがVPC Service Controlsになります。</p><h2 id="VPC-Service-Controlsとは"><a href="#VPC-Service-Controlsとは" class="headerlink" title="VPC Service Controlsとは"></a>VPC Service Controlsとは</h2><p><a href="https://cloud.google.com/vpc-service-controls/docs/overview?hl=ja">VPC Service Controlsの概要</a></p><p>VPC Service Controlsを利用することによって、Google Cloudのリソースへのアクセスに境界を作ることができます。</p><p>例えば、BigQueryやCloud Storageに個人を特定することができる情報（例：身長、体重、性別、年齢）や画像が置かれている場合、VPC Service Controlsを利用することで<strong>それらのリソースに限られた人間のみがアクセス可能</strong>となります。</p><p>また境界の内外におけるデータ移動を制御することが可能なため、データが境界の外へ持ち出されることも防ぎます（境界を超える通信はデフォルトでブロックされます）。</p><img src="/images/20230119a/a864e1b2-7cd3-c69c-bf63-fe2b21622b6d.png" alt="" width="1200" height="640" loading="lazy"><p>こちらの画像のように、境界（Service Perimeter）内に存在するBigQueryは認証されたVPC、VM（GCE）からのみアクセス可能となり、認証されていないリソースからは境界内へのアクセス・境界外へのアクセス共に制限されることになります。</p><p>現在、VPC Service Controlsがサポートしているリソースの一覧はこちらになります。<br><a href="https://cloud.google.com/vpc-service-controls/docs/supported-products?hl=ja">VPC Service Controlでサポートされているプロダクトと制限事項</a></p><h3 id="Cloud-IAMとは違うの？"><a href="#Cloud-IAMとは違うの？" class="headerlink" title="Cloud IAMとは違うの？"></a>Cloud IAMとは違うの？</h3><p>Cloud IAMもリソースへのアクセスを制限するためのサービスで、<strong>詳細なIDベースのアクセス制御を主</strong>としています。IDベースなので例えばログインしているアカウント、所属するグループ、サービスアカウントなどを基にアクセス制御を行います。</p><p>VPC Service Controlsはそれに加えて、境界全体への上り（Ingress）・下り（Egress）データの制御など、<strong>コンテキストベースの境界セキュリティが可能</strong>となります。</p><p>コンテキストベースは、例えば「どこ（IPアドレス）」、「だれ（ユーザーアカウント・サービスアカウント、<strong>グループは現在不可</strong>）」、「何で（OS）」などアクセス元の背景からリソースへのアクセス可否を判断します。</p><p>どちらが良い・悪いというのは無く、併用することでより強固なセキュリティを築くことが可能となります。</p><h2 id="BigQueryを使って挙動を確認"><a href="#BigQueryを使って挙動を確認" class="headerlink" title="BigQueryを使って挙動を確認"></a>BigQueryを使って挙動を確認</h2><h3 id="Organizationの設定が必要"><a href="#Organizationの設定が必要" class="headerlink" title="Organizationの設定が必要"></a>Organizationの設定が必要</h3><p>VPC Service Controlを始めるにはOrganizationが必要となります。Organizationの設定にはドメインが必要となるため、Google Domainなどで取得する（年間1200円～）必要があります。もし、既にドメインをお持ちの場合はサブドメインを作って、それをOrganizationへ適用することも可能です。</p><p>Organizationの作成方法は以下を参考にするとよいです。<br><a href="https://qiita.com/suzuyui/items/947867f52897417ee31b#1-%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%8F%96%E5%BE%97">GCP で組織を作成して共有 VPC 構築 - 1.ドメイン取得</a></p><h3 id="アクセスポリシーを作成する"><a href="#アクセスポリシーを作成する" class="headerlink" title="アクセスポリシーを作成する"></a>アクセスポリシーを作成する</h3><p>アクセスポリシーは、以後出てくるアクセスレベルやサービス境界など、全てのAccess Context Managerリソースのコンテナ（箱）です。</p><p>Organizationに対してOrganizationレベルのアクセスポリシーを作成し、組織内のフォルダとプロジェクトに対してスコープポリシーを作成します。</p><figure class="highlight sh"><figcaption><span>access_context_manager_access_policy.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_access_context_manager_access_policy&quot;</span> <span class="string">&quot;access_policy&quot;</span> &#123;</span><br><span class="line">  parent = <span class="string">&quot;organizations/1234567890123&quot;</span></span><br><span class="line">  title  = <span class="string">&quot;Test access policy&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>parent</code>には自身のOrganization IDを入力する必要があり、<code>title</code>がOrganizationのアクセスポリシーの名前となります。</p><p>作成すると、Organization→セキュリティ→VPC Service Controls上にアクセスポリシーが作成されていることが確認できます。</p><img src="/images/20230119a/d0b0a574-e85f-3509-49bc-263a2ec8b6f5.jpeg" alt="" width="1120" height="334" loading="lazy"><h3 id="ID制御をやってみる"><a href="#ID制御をやってみる" class="headerlink" title="ID制御をやってみる"></a>ID制御をやってみる</h3><p>ID制御を行ってみます。<br>通常は画像のようにBigQueryのDataset, tableを見ることができます。</p><img src="/images/20230119a/da83249a-b466-c2eb-8ea7-9e5fe5e9abfc.jpeg" alt="" width="894" height="396" loading="lazy"><p>これに対して、以下のようなBigQueryへの内向きのみを許可したサービス境界を設定してみます。</p><img src="/images/20230119a/755d759c-cde1-42d1-c0c4-e62dc1425a89.png" alt="" width="930" height="348" loading="lazy"><h4 id="アクセスレベルを作成する"><a href="#アクセスレベルを作成する" class="headerlink" title="アクセスレベルを作成する"></a>アクセスレベルを作成する</h4><p><a href="https://cloud.google.com/access-context-manager/docs/overview#access-levels">アクセスレベル</a>ではリソースへのアクセスを許可する条件を定義します。<br>例えば、IPアドレスやID（ユーザーアカウント、サービスアカウント）を用いたアクセス条件を<code>AND</code>や<code>OR</code>を使って定義することができ、この条件に適したユーザーのみがリソースへアクセス可能となります。<br>Terraformでは以下のようにアクセスレベルを作成します。</p><figure class="highlight sh"><figcaption><span>access_context_manager_access_level.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_access_context_manager_access_level&quot;</span> <span class="string">&quot;id&quot;</span> &#123;</span><br><span class="line">  parent = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>&quot;</span></span><br><span class="line">  name   = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>/accessLevels/specified_id&quot;</span></span><br><span class="line">  title  = <span class="string">&quot;Specified ID&quot;</span></span><br><span class="line"></span><br><span class="line">  basic &#123;</span><br><span class="line">    conditions &#123;</span><br><span class="line">      // アクセスを許可する条件</span><br><span class="line">      // ここで気を付けたいのが、メールアドレスの前にuser:をつけること</span><br><span class="line">      // ServiceAccountの場合はserviceAccount:&#123;emailid&#125;</span><br><span class="line">      // また、グループはサポートされていない</span><br><span class="line">      members = [</span><br><span class="line">        <span class="string">&quot;user:xxx@yyy.com&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="サービス境界を作成する"><a href="#サービス境界を作成する" class="headerlink" title="サービス境界を作成する"></a>サービス境界を作成する</h4><p>VPC Service Controlsの主役です。指定したサービスのリソースに対して外部アクセスから保護するための境界を作ります。</p><p>以下のようにTerraformコードを作成し、サービス境界を作成します。</p><figure class="highlight sh"><figcaption><span>access_context_manager_service_perimeters.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_access_context_manager_service_perimeter&quot;</span> <span class="string">&quot;service_perimeter_qiita&quot;</span> &#123;</span><br><span class="line">  parent = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>&quot;</span></span><br><span class="line">  name   = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>/servicePerimeters/restrict_bigquery&quot;</span></span><br><span class="line">  title  = <span class="string">&quot;restrict_bigquery&quot;</span></span><br><span class="line">  status &#123;</span><br><span class="line">    // 境界を作るサービスを列挙する</span><br><span class="line">    restricted_services = [</span><br><span class="line">      <span class="string">&quot;bigquery.googleapis.com&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">    // 境界を作るプロジェクト</span><br><span class="line">    resources = [</span><br><span class="line">      <span class="string">&quot;projects/123456789012&quot;</span> // Project IDで指定する</span><br><span class="line">    ]</span><br><span class="line">    // アクセスレベル</span><br><span class="line">    access_levels = [</span><br><span class="line">      google_access_context_manager_access_level.access_level_id.name</span><br><span class="line">    ]</span><br><span class="line">    // 内向きポリシー</span><br><span class="line">    ingress_policies &#123;</span><br><span class="line">      ingress_from &#123;</span><br><span class="line">        // IDタイプはidentitiesで指定するため、UNSPECIFIEDになる</span><br><span class="line">        identity_type = <span class="string">&quot;IDENTITY_TYPE_UNSPECIFIED&quot;</span></span><br><span class="line">        // 内向き元のID</span><br><span class="line">        identities = [</span><br><span class="line">          <span class="string">&quot;user:xxx@yyy.com&quot;</span> // メールアドレスで指定する</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">      ingress_to &#123;</span><br><span class="line">        // 境界内のプロジェクトの内、アクセスするプロジェクト</span><br><span class="line">        resources = [<span class="string">&quot;*&quot;</span>]</span><br><span class="line">        // 許可する操作</span><br><span class="line">        operations &#123;</span><br><span class="line">          service_name = <span class="string">&quot;bigquery.googleapis.com&quot;</span></span><br><span class="line">          // 許可するメソッド（API）を指定する</span><br><span class="line">          // 今回は全てのメソッドを指定しているため、*になっている</span><br><span class="line">          method_selectors &#123;</span><br><span class="line">            method = <span class="string">&quot;*&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>アクセスレベルの<code>members</code>、サービス境界の<code>ingress_from</code>の<code>identities</code>、どちらもID<code>&quot;user:xxx@yyy.com&quot;</code>を設定しています。</p><p>アクセスレベル側では<code>restricted_services</code>全体に対しての制御になります。今回はBigQueryのみしか入っておりませんが、Cloud Storageなど他のサービス入れることができ、<code>restricted_services</code>に入っているサービス全てにアクセスレベル側での<code>members</code>設定が適用されます。また、アクセスレベル側で許可されている場合はIngress&#x2F;Egress両方の操作が可能となります。</p><p>サービス境界側の<code>identities</code>はTerraformコードの構成を見るとわかるように、内向き（Ingress）・外向き（Egress）で、尚且つAPI毎で適用されることになります。そのため、アクセスレベルですり抜けた場合にIngress&#x2F;Egressでのポリシーが適用されます。</p><p>今回の場合だとBigQueryのみしかないので<code>identities</code>の指定は不要ですが、参考のために記載しております。</p><h4 id="認証されたアカウントで確認してみる"><a href="#認証されたアカウントで確認してみる" class="headerlink" title="認証されたアカウントで確認してみる"></a>認証されたアカウントで確認してみる</h4><p>アクセスレベルで許可されたアカウントでBigQueryを見てみると先ほどと同じようにテーブルが表示されます。</p><img src="/images/20230119a/da83249a-b466-c2eb-8ea7-9e5fe5e9abfc_2.jpeg" alt="" width="894" height="396" loading="lazy"><p>次に認証されていないプロジェクトからクエリを実行してみます。</p><img src="/images/20230119a/7f3f9c23-2e49-3aea-acaa-2e29d774582b.jpeg" alt="" width="1200" height="223" loading="lazy"><p>右上に赤字で<code>VPC Service Controls: Request is prohibited by organization&#39;s policy. vpcServiceControlsUniqueIdentifier: -ZWUwU96cNc6_jcWbyKhbCfz9canAZcNkQjPcb4uEhOY00WbG64xVw.</code>と表示され、クエリが実行できなくなっています。<br>こちらの原因としては今回内向き（Ingress）のみしか許可していなかったため、サービス境界外へのデータ持ち出しが拒否されたことによるものです。</p><img src="/images/20230119a/fbf4eb92-8842-ec33-9104-afeec96066bd.png" alt="" width="816" height="280" loading="lazy"><h5 id="少し寄り道：ポリシー違反のトラブルシューティング"><a href="#少し寄り道：ポリシー違反のトラブルシューティング" class="headerlink" title="少し寄り道：ポリシー違反のトラブルシューティング"></a>少し寄り道：ポリシー違反のトラブルシューティング</h5><p>ポリシー違反の理由を確認するために、Google CloudではVPC Service Controls のトラブルシューティングが用意されています。<br><a href="https://cloud.google.com/vpc-service-controls/docs/troubleshooter?hl=ja">VPC Service Controls のトラブルシューティングによる問題の診断</a></p><p>上記のようにポリシー違反が発生した際、<code>vpcServiceControlsUniqueIdentifier:</code>以降の文字列をVPC Service Controls のトラブルシューティングに入力すると違反理由が確認できます。</p><img src="/images/20230119a/b666ebc4-5fc7-cfee-b484-e523c7d96640.png" alt="" width="823" height="663" loading="lazy"><p>トラブルシューティングをすると、以下のように行われた動作と違反理由が表示されます。</p><img src="/images/20230119a/0e0f69b8-fb59-c4a1-12b4-bb8e739f200f.png" alt="" width="949" height="463" loading="lazy">上記のポリシー違反理由は、サービス境界外で`tables.getData`が行われたことが原因のようです。また、このことからクエリ実行の際、コンソールの裏側ではAPI（`tables.getData`）がコールされていることもわかります。<h4 id="認証されていないアカウントで確認してみる"><a href="#認証されていないアカウントで確認してみる" class="headerlink" title="認証されていないアカウントで確認してみる"></a>認証されていないアカウントで確認してみる</h4><p>また、認証されていないアカウントで確認してみると以下のように表示されます。</p><img src="/images/20230119a/898b2891-6500-d523-2d73-a9ea1c6c24e4.png" alt="" width="1200" height="287" loading="lazy"><p>データセットすら見えず、クエリを打とうとすると右上に赤字で<code>VPC Service Controls: Request is prohibited by organization&#39;s policy.</code>と表示されています。</p><img src="/images/20230119a/263efca8-74e1-8ad3-3501-b668c6e69473.png" alt="" width="777" height="331" loading="lazy"><p>認証されていないアカウントで<code>bq</code>コマンドでも同様に確認してみます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ bq query --use_legacy_sql=<span class="literal">false</span> --project_id &lt;YOUR_PROJECT_ID&gt;  <span class="string">&#x27;select worker_id from `****-service-three.svc3_dataset.test_table`&#x27;</span></span><br><span class="line"></span><br><span class="line">BigQuery error <span class="keyword">in</span> query operation: VPC Service Controls: Request is prohibited by organization<span class="string">&#x27;s policy.</span></span><br><span class="line"><span class="string">vpcServiceControlsUniqueIdentifier: ***.</span></span><br></pre></td></tr></table></figure><p><code>bq</code>コマンドでもデータにアクセスできないことが確認できました。<br>以上より、サービス境界が作られていることがわかりました。</p><h3 id="IP制御を加えてみる"><a href="#IP制御を加えてみる" class="headerlink" title="IP制御を加えてみる"></a>IP制御を加えてみる</h3><p>アクセスレベルにGCEのVMに付与されたIPアドレスを指定し、先ほどと同様のサービス境界を作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_access_context_manager_access_level&quot;</span> <span class="string">&quot;id_and_ip&quot;</span> &#123;</span><br><span class="line">  parent = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>&quot;</span></span><br><span class="line">  name   = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>/accessLevels/specified_id_and_ip&quot;</span></span><br><span class="line">  title  = <span class="string">&quot;Specified ID and IP&quot;</span></span><br><span class="line"></span><br><span class="line">  basic &#123;</span><br><span class="line">    <span class="comment"># combining_functionで各条件の組み合わせ条件を指定する</span></span><br><span class="line">    <span class="comment"># デフォルトはANDになる</span></span><br><span class="line">    combining_function = <span class="string">&quot;AND&quot;</span></span><br><span class="line">    conditions &#123;</span><br><span class="line">      members = [</span><br><span class="line">        <span class="string">&quot;user:xxx@yyy.com&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">    conditions &#123;</span><br><span class="line">      ip_subnetworks = [</span><br><span class="line">        <span class="string">&quot;xx.xx.xx.xx/32&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先ほどアクセス可能だったアカウントからGoogle CloudコンソールのBigQueryへアクセスして、クエリを実行してみます。<br><img src="/images/20230119a/77f9a4f8-2a73-f0d1-400a-e306ffb1b765.png" alt="" width="1200" height="123" loading="lazy"></p><p>アクセスできなくなったことが確認できます。</p><img src="/images/20230119a/9de770bd-ea00-9238-2464-906a4bc2561a.png" alt="" width="795" height="320" loading="lazy"><p>次に指定されたIPアドレスのVMに認証済みのアカウントで<code>gcloud auth login</code>してから<code>bq</code>コマンドを打ってみます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bq query --use_legacy_sql=<span class="literal">false</span> --project_id &lt;YOUR_PROJECT_ID&gt;  <span class="string">&#x27;select worker_id from `****-service-three.svc3_dataset.test_table`&#x27;</span></span><br><span class="line">+-----------+</span><br><span class="line">| worker_id |</span><br><span class="line">+-----------+</span><br><span class="line">|         1 |</span><br><span class="line">|         4 |</span><br><span class="line">|         3 |</span><br><span class="line">|         5 |</span><br><span class="line">|         2 |</span><br><span class="line">+-----------+</span><br></pre></td></tr></table></figure><p>無事にクエリを実行することができました。</p><img src="/images/20230119a/27b0c988-2a46-cf62-d7c1-910a171c2e00.png" alt="" width="925" height="338" loading="lazy"><p>このようにアクセスレベルでは個々のIPやアカウントを利用した細かい制御を行うことができます。<br>他にもOSの指定（有料）、スクリーンロックを要求するなどを設定することも可能です。</p><h2 id="応用編"><a href="#応用編" class="headerlink" title="応用編"></a>応用編</h2><h3 id="Service-Perimeterで守られた2つのBigQuery間でテーブルをJOINする"><a href="#Service-Perimeterで守られた2つのBigQuery間でテーブルをJOINする" class="headerlink" title="Service Perimeterで守られた2つのBigQuery間でテーブルをJOINする"></a>Service Perimeterで守られた2つのBigQuery間でテーブルをJOINする</h3><p>2つのプロジェクトを用意し、各プロジェクトで以下のデータセットを用意します。</p><figure class="highlight bash"><figcaption><span>ProjectA</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+-----------------+</span><br><span class="line">| department_id | department_name |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">|             3 | HR              |</span><br><span class="line">|             1 | Engineer        |</span><br><span class="line">|             5 | Marketing       |</span><br><span class="line">|             4 | BackOffice      |</span><br><span class="line">|             2 | Sales           |</span><br><span class="line">+---------------+-----------------+</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>ProjectA</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-----------+-----------+-----+---------------+</span><br><span class="line">| worker_id |   name    | age | department_id |</span><br><span class="line">+-----------+-----------+-----+---------------+</span><br><span class="line">|         1 | Tanaka    |  23 |             1 |</span><br><span class="line">|         4 | Kobayashi |  28 |             2 |</span><br><span class="line">|         3 | Yamada    |  56 |             2 |</span><br><span class="line">|         5 | Suzuki    |  44 |             3 |</span><br><span class="line">|         2 | Sasaki    |  34 |             5 |</span><br><span class="line">+-----------+-----------+-----+---------------+</span><br></pre></td></tr></table></figure><p>そして、それぞれのBigQueryを以下のように別のサービス境界で守ります。</p><img src="/images/20230119a/34000be3-c373-0fe1-47b6-fdae7b41ec73.png" alt="" width="1078" height="374" loading="lazy"><p>ではこの時、どのようにIngree&#x2F;Egressを設定すればよいのでしょうか？<br>正解は以下のようになります。</p><img src="/images/20230119a/e43ce7a0-2d0e-6e65-a572-88d487eacd7b.png" alt="" width="928" height="489" loading="lazy"><p>アクセスレベルには先ほどと同様のIDとIPで指定したアクセスレベルを利用し、サービス境界のTerraformコードは以下になります。</p><figure class="highlight sh"><figcaption><span>perimeter_project_a.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_access_context_manager_service_perimeter&quot;</span> <span class="string">&quot;projecta_perimeter&quot;</span> &#123;</span><br><span class="line">  parent = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>&quot;</span></span><br><span class="line">  name   = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>/servicePerimeters/projecta&quot;</span></span><br><span class="line">  title  = <span class="string">&quot;ProjectA&quot;</span></span><br><span class="line">  status &#123;</span><br><span class="line">    restricted_services = [</span><br><span class="line">      <span class="string">&quot;bigquery.googleapis.com&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">    resources = [</span><br><span class="line">      <span class="string">&quot;projects/111111111111&quot;</span>, <span class="comment"># ProjectA</span></span><br><span class="line">    ]</span><br><span class="line">    access_levels = [</span><br><span class="line">      google_access_context_manager_access_level.access_level_id_and_ip.name</span><br><span class="line">    ]</span><br><span class="line">    egress_policies &#123;</span><br><span class="line">      egress_from &#123;</span><br><span class="line">        identity_type = <span class="string">&quot;ANY_IDENTITY&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      egress_to &#123;</span><br><span class="line">        resources = [</span><br><span class="line">          <span class="string">&quot;projects/222222222222&quot;</span> <span class="comment"># ProjectB</span></span><br><span class="line">          ]</span><br><span class="line">        operations &#123;</span><br><span class="line">          service_name = <span class="string">&quot;bigquery.googleapis.com&quot;</span></span><br><span class="line">          method_selectors &#123;</span><br><span class="line">            method = <span class="string">&quot;*&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>perimeter_project_b.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_access_context_manager_service_perimeter&quot;</span> <span class="string">&quot;projecta_perimeter&quot;</span> &#123;</span><br><span class="line">  parent = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>&quot;</span></span><br><span class="line">  name   = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>/servicePerimeters/projectb&quot;</span></span><br><span class="line">  title  = <span class="string">&quot;ProjectB&quot;</span></span><br><span class="line">  status &#123;</span><br><span class="line">    restricted_services = [</span><br><span class="line">      <span class="string">&quot;bigquery.googleapis.com&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">    resources = [</span><br><span class="line">      <span class="string">&quot;projects/222222222222&quot;</span>, <span class="comment"># ProjectB</span></span><br><span class="line">    ]</span><br><span class="line">    access_levels = [</span><br><span class="line">      google_access_context_manager_access_level.access_level_id_and_ip.name</span><br><span class="line">    ]</span><br><span class="line">    egress_policies &#123;</span><br><span class="line">      egress_from &#123;</span><br><span class="line">        identity_type = <span class="string">&quot;ANY_IDENTITY&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      egress_to &#123;</span><br><span class="line">        resources = [</span><br><span class="line">          <span class="string">&quot;projects/111111111111&quot;</span> <span class="comment"># ProjectA</span></span><br><span class="line">          ]</span><br><span class="line">        operations &#123;</span><br><span class="line">          service_name = <span class="string">&quot;bigquery.googleapis.com&quot;</span></span><br><span class="line">          method_selectors &#123;</span><br><span class="line">            method = <span class="string">&quot;*&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bq query --use_legacy_sql=<span class="literal">false</span>  <span class="string">&#x27;select name, age, department_name from `project-a.dataset.table1` as table1 join `project-b.dataset.table2` as table2 on table1.department_id=table2.department_id&#x27;</span></span><br><span class="line">+-----------+-----+-----------------+</span><br><span class="line">|   name    | age | department_name |</span><br><span class="line">+-----------+-----+-----------------+</span><br><span class="line">| Suzuki    |  44 | HR              |</span><br><span class="line">| Tanaka    |  23 | Engineer        |</span><br><span class="line">| Sasaki    |  34 | Marketing       |</span><br><span class="line">| Kobayashi |  28 | Sales           |</span><br><span class="line">| Yamada    |  56 | Sales           |</span><br><span class="line">+-----------+-----+-----------------+</span><br></pre></td></tr></table></figure><p>お互いにEGRESSを許可することでJOINが可能になります。<br>結合処理を行うスロットに送られる際に、ProjectA側のテーブルとProjectB側のテーブルが<strong>外に持ち出される</strong>ことでEGRESSの穴あけが必要になるようです。</p><h2 id="Shared-VPCでアクセス制御する"><a href="#Shared-VPCでアクセス制御する" class="headerlink" title="Shared VPCでアクセス制御する"></a>Shared VPCでアクセス制御する</h2><p>Shared VPCのプロジェクトでVPC Service Controlsを利用したい場合は、同じ境界内にVPCホストプロジェクトも含めないと、期待する動作にならない可能性があるみたいです。<br><a href="https://cloud.google.com/vpc-service-controls/docs/troubleshooting?hl=ja#shared_vpc">Shared VPCにおけるVPC Service Controls</a></p><p>そのため、以下のように<code>resources</code>へVPCホストプロジェクトも含めるようにしましょう。</p><figure class="highlight sh"><figcaption><span>perimeter_shared_pj.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_access_context_manager_service_perimeter&quot;</span> <span class="string">&quot;shared_pj_perimeter&quot;</span> &#123;</span><br><span class="line">  parent = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>&quot;</span></span><br><span class="line">  name   = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>/servicePerimeters/shared_pj_perimeter&quot;</span></span><br><span class="line">  title  = <span class="string">&quot;Shared PJ Perimeter&quot;</span></span><br><span class="line">  status &#123;</span><br><span class="line">    restricted_services = [</span><br><span class="line">      <span class="string">&quot;bigquery.googleapis.com&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">    // 境界を作るプロジェクトにホストプロジェクトも含める</span><br><span class="line">    resources = [</span><br><span class="line">      <span class="string">&quot;projects/333333333333&quot;</span>, <span class="comment"># shared-vpc-pj</span></span><br><span class="line">      <span class="string">&quot;projects/444444444444&quot;</span>, <span class="comment"># shared-vpc-host-pj</span></span><br><span class="line">    ]</span><br><span class="line">    access_levels = [</span><br><span class="line">      google_access_context_manager_access_level.access_level_id.name</span><br><span class="line">    ]</span><br><span class="line">    ingress_policies &#123;</span><br><span class="line">      ingress_from &#123;</span><br><span class="line">        identity_type = <span class="string">&quot;IDENTITY_TYPE_UNSPECIFIED&quot;</span></span><br><span class="line">        identities = [</span><br><span class="line">          <span class="string">&quot;user:xxx@yyy.com&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">      ingress_to &#123;</span><br><span class="line">        resources = [<span class="string">&quot;*&quot;</span>]</span><br><span class="line">        operations &#123;</span><br><span class="line">          service_name = <span class="string">&quot;bigquery.googleapis.com&quot;</span></span><br><span class="line">          method_selectors &#123;</span><br><span class="line">            method = <span class="string">&quot;*&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はBigQueryに対してVPC Service Controlsの機能を試してみました。</p><p>VPC Service Controlsではデータのやり取りを内向き・外向きの細かいレベルで制御することが可能になります。</p><p>Google Cloud上のデータを守るためにも、ぜひ利用してみて下さい。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Security/">Security</category>
      
      
      <category domain="https://future-architect.github.io/tags/Network/">Network</category>
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/VPC/">VPC</category>
      
      
      <comments>https://future-architect.github.io/articles/20230119a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GKEでIdentity-Aware Proxyを利用したWebアプリケーション認証</title>
      <link>https://future-architect.github.io/articles/20230113a/</link>
      <guid>https://future-architect.github.io/articles/20230113a/</guid>
      <pubDate>Thu, 12 Jan 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>明けましておめでとうございます！Future筋肉エンジニアの渡邉です。年も明けたことなので切り替えて減量に入りました。三月末までを目安に体を絞ろうと思っています。</p><p>私は現在Google Cloudを利用しているプロジェクトに所属しており、Google Cloudのスキルアップにいそしんでいます。今回はGKE (Google Kubernetes Engine)でCloud IAP (Identity-Aware Proxy)を利用したWebアプリケーションのGoogleアカウント認証について記事を書こうと思います。</p><h1 id="Identity-Aware-Proxyとは"><a href="#Identity-Aware-Proxyとは" class="headerlink" title="Identity-Aware Proxyとは"></a>Identity-Aware Proxyとは</h1><p>以下、<a href="https://cloud.google.com/iap/docs/concepts-overview?hl=ja">公式ドキュメント</a>引用</p><blockquote><p>IAP を使用すると、HTTPS によってアクセスされるアプリケーションの一元的な承認レイヤを確立できるため、ネットワーク レベルのファイアウォールに頼らずに、アプリケーション レベルのアクセス制御モデルを使用できます。</p></blockquote><p>簡単に言うとGoogleアカウントとCloud IAMの仕組みを用いてWebアプリケーションの認証をすることができます。</p><h2 id="認証・承認フロー"><a href="#認証・承認フロー" class="headerlink" title="認証・承認フロー"></a>認証・承認フロー</h2><img src="/images/20230113a/authenticate-flow.drawio.png" alt="authenticate-flow.drawio.png" width="487" height="564" loading="lazy"><p><a href="https://cloud.google.com/iap/docs/concepts-overview?hl=ja">公式ドキュメント</a>はこちら</p><ul><li>Google Cloudリソースへのリクエスト(Cloud Load Balancing)します。</li><li>IAPが有効になっている場合は、IAP認証サーバへ情報を送信します。（プロジェクト番号、リクエストURL、リクエストヘッダー、Cookie内のIAP認証情報など）</li><li>IAP認証サーバがブラウザの認証情報をチェックします。</li><li>認証情報が存在しない場合は、OAuth2.0のGoogleアカウントログインフローにリダイレクトし、認証確認を実施する。認証トークンは今後のアクセスのためブラウザのCookieに保存されます。</li><li>認証情報が有効な場合、認証サーバは認証情報からユーザのID（メールアドレスとユーザID）を取得します。</li><li>認証サーバはこのIDからユーザのIAMロールをチェックし、ユーザがリソースにアクセスできる権限(<strong>IAP で保護されたウェブアプリ ユーザー</strong>)を持っているかをチェックします</li><li>権限を持っていれば、アクセスOKになり、なければNGになります。</li></ul><h1 id="全体アーキテクチャ図"><a href="#全体アーキテクチャ図" class="headerlink" title="全体アーキテクチャ図"></a>全体アーキテクチャ図</h1><p>以下が全体アーキテクチャ図になります。<br>GKE&#x2F;NetworkなどのGoogle Cloudのリソース構築に関しては慣れ親しんでいるTerraformを利用して作成しました。OAuth同意画面に関しては外部公開する場合は、APIから作成することはできない (<a href="https://cloud.google.com/iap/docs/programmatic-oauth-clients?hl=ja%5D">公式ドキュメント記載</a>)ので、コンソール画面から設定しました。</p><img src="/images/20230113a/architecture.drawio.png" alt="architecture.drawio.png" width="1151" height="429" loading="lazy"><h2 id="Bastion初期設定"><a href="#Bastion初期設定" class="headerlink" title="Bastion初期設定"></a>Bastion初期設定</h2><p>Public Subnetに作成したGCEインスタンスからGKEのコントロールプレーンに対してkubectlコマンドを実行したいので、<br>kubectlコマンドや、google-cloud-sdk-gke-gcloud-auth-pluginなどをインストールします。<br>以下、Bashスクリプトです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment"># Author: watanabe</span></span><br><span class="line"><span class="comment"># Initial Date: 2022/12/28</span></span><br><span class="line"><span class="comment"># History: Create</span></span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Variable Definition</span></span><br><span class="line">project_name=<span class="string">&quot;xxxxxxxxxx&quot;</span></span><br><span class="line">gke_cluster_name=<span class="string">&quot;xxxxxxxxx&quot;</span></span><br><span class="line">region=<span class="string">&quot;asia-northeast1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Kubectl</span></span><br><span class="line">curl -LO <span class="string">&quot;https://storage.googleapis.com/kubernetes-release/release/<span class="subst">$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)</span>/bin/linux/amd64/kubectl&quot;</span></span><br><span class="line"><span class="built_in">chmod</span> +x ./kubectl</span><br><span class="line">sudo <span class="built_in">mv</span> ./kubectl /usr/local/bin/kubectl</span><br><span class="line">kubectl version</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install google-cloud-sdk-gke-gcloud-auth-plugin</span></span><br><span class="line">sudo apt-get install apt-transport-https ca-certificates gnupg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/apt/sources.list.d/google-cloud-sdk.list</span><br><span class="line">curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install google-cloud-cli</span><br><span class="line">sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin</span><br><span class="line">gke-gcloud-auth-plugin --version</span><br><span class="line"><span class="built_in">export</span> USE_GKE_GCLOUD_AUTH_PLUGIN=True</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get Credentials</span></span><br><span class="line">gcloud container clusters get-credentials <span class="string">&quot;<span class="variable">$&#123;gke_cluster_name&#125;</span>&quot;</span> --region <span class="string">&quot;<span class="variable">$&#123;region&#125;</span>&quot;</span> --project <span class="string">&quot;<span class="variable">$&#123;project_name&#125;</span>&quot;</span></span><br><span class="line">kubectl config get-contexts</span><br><span class="line">kubectl get node</span><br></pre></td></tr></table></figure><h2 id="manifestファイル"><a href="#manifestファイル" class="headerlink" title="manifestファイル"></a>manifestファイル</h2><p>また、manifestファイルは以下を用意してkubectlコマンドを実行しk8sリソースをGKEに対して作成しました。</p><p>ここまでの設定で事前準備は完了です。</p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>NginxのPodを用意するため、Deploymentのmanifestを作成しました。</p><figure class="highlight yaml"><figcaption><span>deployment.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.22</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>IngressにはNodePortが必要になるので、Serviceのmanifestを作成しました。</p><figure class="highlight yaml"><figcaption><span>service.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><h3 id="ManagedCertificate"><a href="#ManagedCertificate" class="headerlink" title="ManagedCertificate"></a>ManagedCertificate</h3><p>クライアントとIngressで構築するHTTP(S)ロードバランサ間をHTTPSでアクセスするようにしたいので、Googleマネージド証明書のmanifestを作成しました。<br>domainsには、terraformで用意したHTTP(S)ロードバランサに設定したい外部IPアドレスにフリーなワイルドカードDNSサービスの<a href="https://nip.io/">nip.io</a>を利用したものを設定します。</p><figure class="highlight yaml"><figcaption><span>managed-certificate.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.gke.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ManagedCertificate</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">domains:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">34.</span><span class="string">xxx.xxx.xxx.nip.io</span></span><br></pre></td></tr></table></figure><h3 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h3><p>インターネット上にNginxを公開するためにIngressを構築するmanifestを作成しました。</p><figure class="highlight yaml"><figcaption><span>ingress.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="comment"># 外部ロードバランサの作成</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;gce&quot;</span></span><br><span class="line">    <span class="comment"># クライアントとHTTP(S)ロードバランサ間のすべての通信をHTTPSに強制</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.allow-http:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">    <span class="comment"># 事前に用意していた静的外部IPアドレスを設定する</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.global-static-ip-name:</span> <span class="string">&quot;loadbalancer-external-ip-address&quot;</span></span><br><span class="line">    <span class="comment"># Googleマネージド証明書をIngressに適用する</span></span><br><span class="line">    <span class="attr">networking.gke.io/managed-certificates:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h1 id="Cloud-IAPなしでのアクセス確認"><a href="#Cloud-IAPなしでのアクセス確認" class="headerlink" title="Cloud IAPなしでのアクセス確認"></a>Cloud IAPなしでのアクセス確認</h1><p>まず、Cloud IAPなしでのアクセス確認を行います。<br>Load Balancerに設定したドメインに対してアクセスを行うと、特に認証画面を経由することもなくアクセスすることができます。<br><img src="/images/20230113a/1-IAPなしでのアクセス確認.png" alt="1-IAPなしでのアクセス確認.png" width="956" height="525" loading="lazy"></p><h1 id="Cloud-IAPの設定を追加"><a href="#Cloud-IAPの設定を追加" class="headerlink" title="Cloud IAPの設定を追加"></a>Cloud IAPの設定を追加</h1><p>上記の状態ではだれでもアクセスすることが可能なため、セキュアな状態ではありません。<br>ここでCloud IAPの設定を追加してみましょう。</p><h2 id="OAuth同意画面の作成"><a href="#OAuth同意画面の作成" class="headerlink" title="OAuth同意画面の作成"></a>OAuth同意画面の作成</h2><p>OAuth同意画面はUser Typeを「外部」で作成します。<br><img src="/images/20230113a/2-OAuth同意画面①.png" alt="2-OAuth同意画面①.png" width="1200" height="848" loading="lazy"></p><p>アプリ情報として、必須項目の以下を設定して「保存して次へ」をクリックします。<br>ほかの情報は任意のため設定しませんでした。</p><ul><li>アプリ名：GKE Application</li><li>ユーザサポートメール：自身のメールアドレス</li><li>デベロッパーの連絡先情報：自身のメールアドレス</li></ul><img src="/images/20230113a/2-OAuth同意画面②.png" alt="2-OAuth同意画面②.png" width="1200" height="838" loading="lazy"><img src="/images/20230113a/2-OAuth同意画面③.png" alt="2-OAuth同意画面③.png" width="1200" height="843" loading="lazy"><p>スコープとテストユーザは任意情報のため設定しませんでした。<br>以下が設定完了したOAuth同意画面になります。</p><img src="/images/20230113a/2-OAuth同意画面④.png" alt="2-OAuth同意画面④.png" width="1200" height="844" loading="lazy"><h2 id="OAuth認証情報の作成"><a href="#OAuth認証情報の作成" class="headerlink" title="OAuth認証情報の作成"></a>OAuth認証情報の作成</h2><p>APIとサービスタブの「認証情報」をクリックします。<br>認証情報の作成プルダウンリストからOAuthクライアントIDをクリックします。</p><img src="/images/20230113a/3-OAuth認証情報①.png" alt="3-OAuth認証情報①.png" width="1200" height="843" loading="lazy"><ul><li>アプリケーションの種類：ウェブアプリケーション</li><li>OAuthクライアントIDの名前：GKE Application<br>を入力し、作成ボタンをクリックします。</li></ul><img src="/images/20230113a/3-OAuth認証情報②.png" alt="3-OAuth認証情報②.png" width="1200" height="851" loading="lazy"><p>作成ボタンをクリックするとOAuthクライアントIDとクライアントシークレットが生成されるので、JSONをダウンロードします。</p><img src="/images/20230113a/3-OAuth認証情報③.png" alt="3-OAuth認証情報③.png" width="512" height="448" loading="lazy"><p>作成したOAuthクライアントを再度クリックし、承認済みリダイレクトURIをダウンロードしたOAuthクライアントID(CLIENT_ID)に修正して保存します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://iap.googleapis.com/v1/oauth/clientIds/CLIENT_ID:handleRedirect</span><br></pre></td></tr></table></figure><img src="/images/20230113a/3-OAuth認証情報④.png" alt="3-OAuth認証情報④.png" width="1200" height="795" loading="lazy"><h2 id="IAPアクセス権の設定"><a href="#IAPアクセス権の設定" class="headerlink" title="IAPアクセス権の設定"></a>IAPアクセス権の設定</h2><p>Google Cloud ConsoleのIdentity-Aware Proxyにアクセスします。<br>アクセス権を付与するリソースの横にあるチェックボックスをオンにします。</p><img src="/images/20230113a/4-CloudIAPアクセス権設定①.png" alt="4-CloudIAPアクセス権設定①.png" width="1200" height="845" loading="lazy"><p>IAPの有効化で「構成要件」を参照し、問題なければ「有効にする」をクリックします。<br><img src="/images/20230113a/4-CloudIAPアクセス権設定②.png" alt="4-CloudIAPアクセス権設定②.png" width="564" height="355" loading="lazy"></p><p>チェックボックスが「オン」になりました<br>右側のパネルから、「プリンシパルの追加」をクリックします。<br><img src="/images/20230113a/4-CloudIAPアクセス権設定③.png" alt="4-CloudIAPアクセス権設定③.png" width="1200" height="849" loading="lazy"></p><p>IAPアクセスを許可したいGoogleアカウント（メールアドレス）または、Googleグループなどを指定して、IAMロール（IAP-secured Web App User）を付与してください。</p><img src="/images/20230113a/4-CloudIAPアクセス権設定④.png" alt="4-CloudIAPアクセス権設定④.png" width="736" height="727" loading="lazy"><p>ここまででOAuthの設定は完了です。</p><h2 id="Kubernetes-Secretの作成"><a href="#Kubernetes-Secretの作成" class="headerlink" title="Kubernetes Secretの作成"></a>Kubernetes Secretの作成</h2><p>GKEでCloud IAPを適用するためには、Kubernetes Secretを作成してBackendConfigに適用する必要があります。<br>先ほど作成してダウンロードしたOAuth認証情報のClient IDとClient Secretを指定してKubernetes Secretを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret generic oauth-secret --from-literal=client_id=xxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com \</span><br><span class="line">    --from-literal=client_secret=xxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>Kubernetes Secretが作成されていることを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxxxxx@tky-bastion:~$ kubectl describe secret oauth-secret</span><br><span class="line">Name:         oauth-secret</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Type:  Opaque</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">client_secret:  35 bytes</span><br><span class="line">client_id:      73 bytes</span><br></pre></td></tr></table></figure><h2 id="BackendConfigの作成"><a href="#BackendConfigの作成" class="headerlink" title="BackendConfigの作成"></a>BackendConfigの作成</h2><p>Kubernetes Secretで作成したSecretをBackendConfigに設定することでCloud IAPを適用することができます。<br>以下のmanifestファイルを用意します。</p><figure class="highlight yaml"><figcaption><span>backendconfig.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">cloud.google.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">BackendConfig</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">iap-conifg</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">iap:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">oauthclientCredentials:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">oauth-secret</span></span><br></pre></td></tr></table></figure><p>kubectlコマンドでBackendConfigを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f backendconfig.yaml</span><br></pre></td></tr></table></figure><p>BackendConfigが作成されていることを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxxxxx@tky-bastion:~/manifest$ kubectl get backendconfig</span><br><span class="line">NAME         AGE</span><br><span class="line">iap-conifg   3m42s</span><br></pre></td></tr></table></figure><p>サービスポートを BackendConfig に関連付けて、IAP の有効化をトリガーする必要があります。既存のService リソースにアノテーションを追加し、サービスのすべてのポートをデフォルトで BackendConfig にします。</p><figure class="highlight yaml"><figcaption><span>service.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="comment"># 追記</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">beta.cloud.google.com/backend-config:</span> <span class="string">&#x27;&#123;&quot;default&quot;: &quot;config-default&quot;&#125;&#x27;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f service.yaml</span><br></pre></td></tr></table></figure><p>以上で、Cloud IAPの設定は完了です。</p><h1 id="Cloud-IAPありでのアクセス確認"><a href="#Cloud-IAPありでのアクセス確認" class="headerlink" title="Cloud IAPありでのアクセス確認"></a>Cloud IAPありでのアクセス確認</h1><p>Cloud IAPの設定が完了したので、画面にアクセスしてCloud IAPが適用されているかを確認します。</p><h2 id="Cloud-IAP認証対象外アカウントでのアクセス確認"><a href="#Cloud-IAP認証対象外アカウントでのアクセス確認" class="headerlink" title="Cloud IAP認証対象外アカウントでのアクセス確認"></a>Cloud IAP認証対象外アカウントでのアクセス確認</h2><p>Load Balancerに設定したドメインに対してアクセスを行うと、Cloud IAPによるGoogleアカウントログイン画面にリダイレクトされます。</p><img src="/images/20230113a/5-IAPアクセスなし①.png" alt="5-IAPアクセスなし①.png" width="469" height="557" loading="lazy"><p>本GoogleアカウントはCloud IAPのアクセスできる権限(<strong>IAP で保護されたウェブアプリ ユーザー</strong>)を持っていないため、画面にアクセスすることはできません。<br><img src="/images/20230113a/5-IAPアクセスなし②.png" alt="5-IAPアクセスなし②.png" width="426" height="455" loading="lazy"></p><h2 id="Cloud-IAP認証対象アカウントでのアクセス確認"><a href="#Cloud-IAP認証対象アカウントでのアクセス確認" class="headerlink" title="Cloud IAP認証対象アカウントでのアクセス確認"></a>Cloud IAP認証対象アカウントでのアクセス確認</h2><p>Load Balancerに設定したドメインに対してアクセスを行うと、Cloud IAPによるGoogleアカウントログイン画面にリダイレクトされます。</p><img src="/images/20230113a/6-IAPアクセスあり①.png" alt="6-IAPアクセスあり①.png" width="529" height="565" loading="lazy"><p>本GoogleアカウントはCloud IAPのアクセスできる権限(<strong>IAP で保護されたウェブアプリ ユーザー</strong>)を持っているため、画面にアクセスすることができました。<br><img src="/images/20230113a/6-IAPアクセスあり②.png" alt="6-IAPアクセスあり②.png" width="908" height="299" loading="lazy"></p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回はGKE (Google Kubernetes Engine)でCloud IAP (Identity-Aware Proxy)を利用したGoogleアカウント認証について記事を書きました。<br>Google Cloudを利用していて、特定のGoogleアカウントにのみアクセスを許可したいケースはあるかと思いますので、その時にでも参考にしていただければ幸いです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/GKE/">GKE</category>
      
      <category domain="https://future-architect.github.io/tags/Identity-Aware-Proxy/">Identity-Aware Proxy</category>
      
      
      <comments>https://future-architect.github.io/articles/20230113a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python Web APIをAWS Lambdaにデプロイ</title>
      <link>https://future-architect.github.io/articles/20230105a/</link>
      <guid>https://future-architect.github.io/articles/20230105a/</guid>
      <pubDate>Wed, 04 Jan 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;この記事は&lt;a href=&quot;https://qiita.com/advent-calendar/2022/future&quot;&gt;フューチャー Advent Calendar 2022&lt;/a&gt;の14日目の記事です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>この記事は<a href="https://qiita.com/advent-calendar/2022/future">フューチャー Advent Calendar 2022</a>の14日目の記事です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニットの村上です。</p><p>PythonのWeb APIをLambdaにデプロイする方法について解説します。</p><p>PythonでWeb APIを構築する方法は<a href="/articles/20221203a/">OpenAPI GeneratorでPython Web API構築</a>をご覧ください。</p><p>本記事ではPython Web APIのアプリ実装は完成している前提で、下図の流れでデプロイする手順を解説します。</p><img src="/images/20230105a/image.png" alt="PythonアプリをDockerコンテナイメージビルド→ECR→Lambdaにデプロイする" width="778" height="495" loading="lazy"><h1 id="Lambda起動用のモジュール"><a href="#Lambda起動用のモジュール" class="headerlink" title="Lambda起動用のモジュール"></a>Lambda起動用のモジュール</h1><p>Lambdaでは起点となる関数とAPI Responseを返すreturn命令が必要になります。<br>これらを満たすモジュールを実装します。</p><figure class="highlight python"><figcaption><span>lambda.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> awsgi</span><br><span class="line"><span class="keyword">import</span> connexion</span><br><span class="line"><span class="keyword">from</span> openapi_server <span class="keyword">import</span> encoder</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_handler</span>(<span class="params">event, context</span>):</span><br><span class="line">    app = connexion.App(__name__, specification_dir=<span class="string">&quot;./openapi/&quot;</span>)</span><br><span class="line">    app.app.json_encoder = encoder.JSONEncoder</span><br><span class="line">    app.add_api(</span><br><span class="line">        <span class="string">&quot;openapi.yaml&quot;</span>,</span><br><span class="line">        arguments=&#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;Stock API&quot;</span>&#125;,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> awsgi.response(app, event, context)</span><br></pre></td></tr></table></figure><p><code>lambda_handler</code>をLambda起動用関数に設定することで、APIを機能させることができます。</p><h1 id="デプロイする方法"><a href="#デプロイする方法" class="headerlink" title="デプロイする方法"></a>デプロイする方法</h1><p>Lambdaにソースコードをデプロイする方法は2種類あります。</p><ol><li>ソースコードとその依存ライブラリをZIPにアーカイブしてアップロードする</li><li>ECRのコンテナイメージをアップロードする</li></ol><p>Pythonのソースコードをアップロードする場合は2番のECRからアップロードする方法をお勧めします。<br>というのも最近のPythonライブラリは容量が大きく、例えばPandasだけでも約50MBあります。<br>ZIPアップロード方式の場合は解凍前50MB、解凍後250MBまでという制限があるため、依存ライブラリの数とサイズによってはこの制限に引っ掛かり、アップロードできません。<br>一方でECR方式の場合はイメージサイズが10GBまでOKなのでかなり違いがあることが分かると思います。</p><p>その他詳しい制限については以下をご覧ください。</p><p><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/gettingstarted-limits.html">https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/gettingstarted-limits.html</a></p><p>本記事ではECRからデプロイする方法を解説します。</p><h1 id="デプロイ用Dockerfileの作成"><a href="#デプロイ用Dockerfileの作成" class="headerlink" title="デプロイ用Dockerfileの作成"></a>デプロイ用Dockerfileの作成</h1><p>デプロイ用のDockerfileには依存ライブラリとLambda起動用のランタイムのインストールが必要になります。<br>Pythonのパッケージ管理には<a href="https://python-poetry.org/">Poetry</a>を使っている場合を想定し、Dockerfileを以下のように実装します。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> FUNCTION_DIR=<span class="string">&quot;/usr/src/app&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>.<span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> FUNCTION_DIR</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install gcc g++ libc-dev</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install poetry</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> pyproject.toml poetry.lock ./</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> poetry <span class="built_in">export</span> -f requirements.txt &gt; requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip uninstall poetry --<span class="built_in">yes</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --target <span class="variable">$&#123;FUNCTION_DIR&#125;</span> awslambdaric</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./ <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/usr/local/bin/python&quot;</span>, <span class="string">&quot;-m&quot;</span>, <span class="string">&quot;awslambdaric&quot;</span> ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;openapi_server/lambda.lambda_handler&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>poetryはその性質上docker内に仮想環境を構築する必要がありますが、それは面倒なのでpipで依存ライブラリをインストールします。<br>注意点として、poetryとそれ以外のライブラリはpipの依存関係チェックでエラーになる可能性があります。poetryで出力された<code>requirements.txt</code>に記述されたライブラリはpoetryによって依存関係の整合性が保証されていますが、その依存関係にpoetry自身は存在しません。このdocker内ではpipによってpoetryとそれら以外のライブラリがはじめて依存関係チェックの対象となるため、エラーになる可能性があります。よってpoetryは<code>requirements.txt</code>を出力したら速やかに削除します。<br>また、Lambdaで起動するためには<a href="https://github.com/aws/aws-lambda-python-runtime-interface-client">awslambdaric</a>というランタイムが必要なため、合わせてインストールします。</p><h1 id="AWS-CLIからデプロイする"><a href="#AWS-CLIからデプロイする" class="headerlink" title="AWS CLIからデプロイする"></a>AWS CLIからデプロイする</h1><p>上記のDockerfileをビルドします。<br>proxy環境の場合はそのままではdocker内で各パッケージのインストールが行えないため、<code>--build-arg</code>にプロキシを設定する必要があります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker build \</span><br><span class="line">    -f ./Dockerfile \</span><br><span class="line">-t <span class="string">&quot;&lt;AWSアカウントID&gt;.dkr.ecr.ap-northeast-1.amazonaws.com/&lt;ECRリポジトリ名&gt;:latest&quot;</span> \</span><br><span class="line">--build-arg https_proxy=<span class="variable">$&#123;https_proxy&#125;</span> \</span><br><span class="line">../.</span><br></pre></td></tr></table></figure><p>ビルドができたらECRにプッシュします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker push &lt;AWSアカウントID&gt;.dkr.ecr.ap-northeast-1.amazonaws.com/&lt;ECRリポジトリ名&gt;:latest</span><br></pre></td></tr></table></figure><p>プッシュが完了したらECRからLambdaにアップロードします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ aws lambda update-function-code --function-name &lt;Lambda名&gt; \</span><br><span class="line">--image-uri &lt;AWSアカウントID&gt;.dkr.ecr.ap-northeast-1.amazonaws.com/&lt;ECRリポジトリ名&gt;:latest</span><br></pre></td></tr></table></figure><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>最後までお読みいただきありがとうございました！</p><p>Lambdaにコンテナイメージをアップロードする方法は制限が緩く使いやすい反面、ランタイムが必要だったり、ECRのリポジトリを用意しないといけなかったりと、少し手間がかかります。<br>本記事が参考になれば幸いです。</p><p>明日はtutuzさんの<a href="https://qiita.com/tutuz/items/a2db0a78e5977b3d942b">技術記事執筆のススメ</a>です！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Docker/">Docker</category>
      
      <category domain="https://future-architect.github.io/tags/WebAPI/">WebAPI</category>
      
      
      <comments>https://future-architect.github.io/articles/20230105a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rust製SQLフォーマッタをnapi-rsを利用してVSCode拡張機能化</title>
      <link>https://future-architect.github.io/articles/20221228a/</link>
      <guid>https://future-architect.github.io/articles/20221228a/</guid>
      <pubDate>Tue, 27 Dec 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221228a/top.png&quot; alt=&quot;&quot; width=&quot;579&quot; height=&quot;216&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221228a/top.png" alt="" width="579" height="216"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Futureでアルバイトをしている川渕です。</p><p>アルバイトの前はFutureのインターンシップでRust製SQLフォーマッタであるuroborosql-fmtの作成を行っていました(その時の記事は<a href="/articles/20220916b/">こちら</a>)。</p><p>本記事ではそのフォーマッタをVSCodeの拡張機能化した方法について説明します。</p><h1 id="説明すること"><a href="#説明すること" class="headerlink" title="説明すること"></a>説明すること</h1><ul><li>napi-rsを使用してTypeScript(JavaScript)からRustのコードを呼び出せるようにする方法</li><li>napi-rsにおけるクロスプラットフォームビルド方法</li><li>VSCode拡張機能をパッケージ化する方法</li></ul><!--* x86_64-pc-windows-gnuの環境でnapi-rsを使用する方法--><h1 id="説明しないこと"><a href="#説明しないこと" class="headerlink" title="説明しないこと"></a>説明しないこと</h1><ul><li>本記事ではフォーマッタの仕様、実装方法について説明しません。詳細を知りたい方は以下の記事をご覧ください。<ul><li><a href="/articles/20220916b/">Engineer Camp2022 RustでSQLフォーマッタ作成（前編） | フューチャー技術ブログ</a></li><li><a href="/articles/20220916c/">Engineer Camp2022 RustでSQLフォーマッタ作成（後編） | フューチャー技術ブログ</a></li><li><a href="/articles/20221215a/">tree-sitter文法入門 | フューチャー技術ブログ</a></li></ul></li><li>LSPを用いた拡張機能作成方法の詳細についても本記事では説明しません。詳細を知りたい方は以下の記事をご覧ください。<ul><li><a href="/articles/20221124a/">Language Server Protocolを用いたVSCode拡張機能開発 (前編) | フューチャー技術ブログ</a></li><li><a href="/articles/20221125a/">Language Server Protocolを用いたVSCode拡張機能開発 (後編) | フューチャー技術ブログ</a></li></ul></li><li>napi-rsで作成したNode.jsアドオンの公開方法</li><li>作成したVSCode拡張機能の公開方法</li></ul><h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><ul><li>OS: Windows 10 Pro</li><li>VSCode: 1.73.1</li><li>Node.js: v16.17.1</li><li>rustc: 1.64.0 (a55dd71d5 2022-09-19)</li><li>npm: 8.15.0</li><li>yarn: 1.22.19</li><li>napi-rs&#x2F;cli: 2.12.0</li><li>vsce: 2.14.0</li></ul><h1 id="作成するVSCode拡張機能の仕様"><a href="#作成するVSCode拡張機能の仕様" class="headerlink" title="作成するVSCode拡張機能の仕様"></a>作成するVSCode拡張機能の仕様</h1><p>作成するVSCode拡張機能の仕様は以下の通りです。</p><ul><li><a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a>を利用する</li><li>コマンドパレットで実行できる</li><li>範囲選択されている場合、その範囲のSQLをフォーマットする</li><li>範囲選択されていない場合、全体をフォーマットする</li></ul><img src="/images/20221228a/format_extension.gif" alt="format_extension.gif" width="1200" height="675" loading="lazy"><h1 id="処理の流れ"><a href="#処理の流れ" class="headerlink" title="処理の流れ"></a>処理の流れ</h1><p>作成する拡張機能の処理の流れを説明します。</p><img src="/images/20221228a/df88766a-9fef-6408-5603-1c17bed7619c.png" alt="" width="1200" height="1190" loading="lazy"><p>処理の流れは以下のとおりです。</p><ol><li>まずユーザがフォーマットしたいSQLを範囲選択し、コマンドを実行します。</li><li>コマンド実行をLanguage Serverのクライアントが検知し、サーバに選択範囲の情報を送信します。</li><li>サーバは選択範囲のSQLを取得します。取得したSQLを引数に与えてSQLフォーマッタを実行します。</li><li>SQLフォーマッタは引数として受け取ったSQLをフォーマットし、フォーマット済みSQLを返します。</li><li>フォーマット済みSQLを受け取ったサーバは選択範囲をフォーマット済みSQLに置き換えるようにクライアントに送信します。</li></ol><p>SQLフォーマッタはRust、自作Language ServerはTypeScriptで書かれているため、直接SQLフォーマッタを呼び出すことができません。</p><p>そこで、napi-rsというツールを使用して、TypeScriptからRustで書かれたSQLフォーマッタを呼び出せるようにしました。</p><h1 id="TypeScriptからRustの呼び出し"><a href="#TypeScriptからRustの呼び出し" class="headerlink" title="TypeScriptからRustの呼び出し"></a>TypeScriptからRustの呼び出し</h1><p>まずTypeScriptからRustを呼び出す方法として以下の3つの方法が考えられます。</p><div class="scroll"><table><thead><tr><th>方法</th><th>使用するツール</th><th>メリット</th><th>デメリット</th></tr></thead><tbody><tr><td>Rustコードのwasm化</td><td>rustc または wasm-pack</td><td>プラットフォームに依存しないため移植性が高い</td><td>C&#x2F;C++を呼び出しているコードをビルドするのが難しい</td></tr><tr><td>RustコードのNode.jsアドオン化</td><td>napi-rs</td><td>C&#x2F;C++を呼び出しているコードでも比較的簡単にビルドできる</td><td>クロスプラットフォームビルドが必要</td></tr><tr><td>Rustコードをビルドしたものをexecで呼び出す</td><td>rustc</td><td>特別なツールを使わなくても可能</td><td>クロスプラットフォームビルドが必要 <br>   綺麗な方法とは言えないため最後の手段</td></tr></tbody></table></div><p>wasmとNode.jsアドオンの性能差は現時点では調査しましたがわかりませんでした。(もしわかる方がいれば教えてください)<br>しかし、移植性の観点からできる限りwasmのほうがNode.jsアドオンよりも良いという意見が多く見受けられました。</p><ul><li><a href="https://sprkl.dev/performance-rust-node-js/">Performance: Rust and its relationship with Node.js</a></li><li><a href="https://www.reddit.com/r/rust/comments/xhg78i/how_do_napi_works_compare_to_wasm_and_what_are/">How do NAPI works compare to WASM, and what are the use cases suiting each one? : rust</a></li></ul><p>しかし、SQLフォーマッタは内部的にCで書かれたコードを呼び出していることが要因でwasm化がうまくいかなかったため、今回はnapi-rsを用いてNode.jsアドオン化する方法を選択しました。</p><h2 id="Node-API"><a href="#Node-API" class="headerlink" title="Node-API"></a>Node-API</h2><p>napi-rsについて紹介する前にNode-APIについて説明します。<br>Node-APIとはNode 8.0.0で導入されたツールで、C&#x2F;C++コードをNode.jsのアドオン化するツールです。<br>Node-APIを使用することで、C&#x2F;C++コードをJavaScriptで記述されたものと同様の方法で利用できるようになります。</p><h2 id="napi-rsとは"><a href="#napi-rsとは" class="headerlink" title="napi-rsとは"></a>napi-rsとは</h2><p><a href="https://napi.rs/">napi-rs</a>とはNode-APIをRustで使用できるようにしたものです。<br>例えば以下のようなRustコードをnapi-rsでビルドします。</p><figure class="highlight rust"><figcaption><span>example.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![deny(clippy::all)]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#[macro_use]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> napi_derive;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[napi]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">sum</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">  a + b + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>すると、Node.jsアドオンが生成され、JavaScriptからRustの関数を呼び出せるようになります。</p><figure class="highlight javascript"><figcaption><span>example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; sum &#125; = <span class="built_in">require</span>(<span class="string">&quot;./index.js&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// 7</span></span><br></pre></td></tr></table></figure><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>ちなみに、Node-APIは元々の名称がN-APIだったのですが、しばしば「NAPI」と発音され、蔑称と間違われる可能性があるとの懸念から現在のNode-APIに名称を変更しました。そのため、napi-rsにおいても、"エヌエーピーアイ"と発音したほうが良さそうです。</p><a href="https://codezine.jp/article/detail/14109">N-APIが「Node-API」へ名称変更、既存のコンパイル済みアドオンへの影響はナシ|CodeZine（コードジン）</a></div><h2 id="napi-rsの使い方"><a href="#napi-rsの使い方" class="headerlink" title="napi-rsの使い方"></a>napi-rsの使い方</h2><p>napi-rsの使い方を説明します。</p><div class="note warn" style="background:#fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>napi-rsではx86_64-pc-windows-gnuの環境はサポートされていないため、もしwindowsでgnu版rustを使っている方はmsvc版のRustを入れてください。</p></div><h3 id="1-CLIツールのインストール"><a href="#1-CLIツールのインストール" class="headerlink" title="1. CLIツールのインストール"></a>1. CLIツールのインストール</h3><p>yarnでnapi-rsのCLIツールをインストールします。<br>まずyarnをインストールします。以降もyarnが必要になるため、必ずインストールしてください。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure><p>napi-rsのCLIツールをインストールします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add @napi-rs/cli</span><br></pre></td></tr></table></figure><p>インストールに成功すると<code>napi</code>コマンドが使えるようになります。</p><h3 id="2-新規プロジェクト作成"><a href="#2-新規プロジェクト作成" class="headerlink" title="2. 新規プロジェクト作成"></a>2. 新規プロジェクト作成</h3><p>インストールしたCLIツールを使用して新規プロジェクトを作成します。<br>新規プロジェクトを作成したいディレクトリで以下のコマンドを実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">napi new</span><br></pre></td></tr></table></figure><p>すると、以下の質問が表示されるので、順に回答してください。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">任意のパッケージ名</span></span><br><span class="line">? Package name: (The name filed in your package.json)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ディレクトリ名</span></span><br><span class="line">? Dir name</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">サポートしたい実行環境</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">publish時にここで選んだ実行環境がサポートされます</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">デフォルト: x86_64-apple-darwin, x86_64-pc-windows-msvc, x86_64-unknown-linux-gnu</span></span><br><span class="line">? Choose targets you want to support</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GitHub Actionsを有効にするか否か</span></span><br><span class="line">? Enable github actions? (Y/n)</span><br></pre></td></tr></table></figure><!--:::note warnx86_64-pc-windows-gnuの環境はサポートされていないため、msvc版のRustを入れることを推奨します。しかし、gnu版Rustの環境でも後述の操作をすればローカルでは試すことができます。もしそのような環境で試したい方は、とりあえず「サポートしたい実行環境」はデフォルトのまま進めてください。:::--><p>質問に回答すると指定したディレクトリ名のディレクトリが作成されます。<br>これでNode.js add-onを作るテンプレートが完成しました。</p><h3 id="3-ビルドと実行"><a href="#3-ビルドと実行" class="headerlink" title="3. ビルドと実行"></a>3. ビルドと実行</h3><p>テンプレートの<code>src/lib.rs</code>に既にサンプルのRustコードが含まれています。関数sumは2つの引数の合計を返す関数です。</p><figure class="highlight rust"><figcaption><span>src/lib.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![deny(clippy::all)]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#[macro_use]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> napi_derive;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[napi]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">sum</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">  a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これをNode.jsアドオンへビルドして実行してみます。<br>まず先ほど作成したプロジェクトのルートディレクトリでビルドコマンドを実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure><p>ビルドに成功すると、プロジェクトのディレクトリ直下に<code>index.d.ts</code>、<code>index.js</code>、<code>&lt;プロジェクト名&gt;.&lt;環境&gt;.node</code>が作成されます。</p><p><code>index.js</code>には環境に合ったnodeファイルを読み込んでくれる処理が書いています。そのため、<code>index.js</code>をimportすることで自動的に環境に合ったnodeファイルが読み込まれ、そこに含まれる関数を利用することができるようになります。</p><p>以下のファイルをプロジェクトのディレクトリ直下に作成します。</p><figure class="highlight javascript"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; sum &#125; = <span class="built_in">require</span>(<span class="string">&quot;./index.js&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><p>実行して”7”という出力が返ってきたら成功です。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node test.js</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7</span></span><br></pre></td></tr></table></figure><h2 id="SQLフォーマッタをJavaScriptから実行"><a href="#SQLフォーマッタをJavaScriptから実行" class="headerlink" title="SQLフォーマッタをJavaScriptから実行"></a>SQLフォーマッタをJavaScriptから実行</h2><p>プロジェクトのテンプレートを変更してSQLフォーマッタをJavaScriptから実行できるようにしてみます。</p><h3 id="1-新規プロジェクト作成"><a href="#1-新規プロジェクト作成" class="headerlink" title="1. 新規プロジェクト作成"></a>1. 新規プロジェクト作成</h3><p>先述した方法で新規プロジェクトを作成しました。プロジェクト名はuroborosql-fmt-napiとしています。</p><h3 id="2-src-lib-rsを変更し、ビルド"><a href="#2-src-lib-rsを変更し、ビルド" class="headerlink" title="2. src/lib.rsを変更し、ビルド"></a>2. <code>src/lib.rs</code>を変更し、ビルド</h3><p><code>src/lib.rs</code>を以下のように変更します。<br>SQLフォーマッタのクレート名は<code>uroborosql_fmt</code>で、<code>format_sql()</code>関数にSQL文を渡すとフォーマットされたSQLが返ってきます。</p><figure class="highlight rust"><figcaption><span>src/lib.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![deny(clippy::all)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> uroborosql_fmt::format_sql;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[macro_use]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> napi_derive;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[napi]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">runfmt</span>(input: <span class="type">String</span>) <span class="punctuation">-&gt;</span>  <span class="type">String</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">format_sql</span>(&amp;input)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>プロジェクトのルートディレクトリでビルドします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure><p>私の環境はwin32-x64-msvcであるため、<code>index.d.ts</code>、<code>index.ts</code>、<code>uroborosql-fmt-napi.win32-x64-msvc.node</code>が生成されました。</p><h3 id="3-run-jsの作成、実行"><a href="#3-run-jsの作成、実行" class="headerlink" title="3. run.jsの作成、実行"></a>3. run.jsの作成、実行</h3><p>プロジェクトのディレクトリ直下にrun.jsを作成します。変数targetにはフォーマットしたいSQL文を格納しています。</p><figure class="highlight javascript"><figcaption><span>run.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; runfmt &#125; = <span class="built_in">require</span>(<span class="string">&quot;./index.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> target = <span class="string">`</span></span><br><span class="line"><span class="string">SELECT</span></span><br><span class="line"><span class="string">      Identifier as id, --ID</span></span><br><span class="line"><span class="string">student_name          --              学生名</span></span><br><span class="line"><span class="string">FROM</span></span><br><span class="line"><span class="string">  japanese_student_table</span></span><br><span class="line"><span class="string">AS JPN_STD --日本人学生</span></span><br><span class="line"><span class="string">,       SUBJECT_TABLE AS SBJ  --科目</span></span><br><span class="line"><span class="string">WHERE</span></span><br><span class="line"><span class="string">  JPN_STD.sportId = (SELECT</span></span><br><span class="line"><span class="string">         sportId   FROM</span></span><br><span class="line"><span class="string">    Sport</span></span><br><span class="line"><span class="string">                         WHERE</span></span><br><span class="line"><span class="string">             Sport.sportname</span></span><br><span class="line"><span class="string">    = &#x27;baseball&#x27;</span></span><br><span class="line"><span class="string">                    )   -- 野球をしている生徒</span></span><br><span class="line"><span class="string">    AND</span></span><br><span class="line"><span class="string">JPN_STD.ID  = SBJ.ID</span></span><br><span class="line"><span class="string">AND SBJ.grade   &gt;</span></span><br><span class="line"><span class="string">            /*grade*/50     --成績が50点以上</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">runfmt</span>(target));</span><br></pre></td></tr></table></figure><p>作成した<code>run.js</code>を実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node run.js</span><br></pre></td></tr></table></figure><p>出力結果は以下のようになりました。きちんとフォーマットされているため成功です。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">IDENTIFIER<span class="keyword">AS</span>ID<span class="comment">-- ID</span></span><br><span class="line">,STUDENT_NAME<span class="keyword">AS</span>STUDENT_NAME<span class="comment">-- 学生名</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">JAPANESE_STUDENT_TABLEJPN_STD<span class="comment">-- 日本人学生</span></span><br><span class="line">,SUBJECT_TABLESBJ<span class="comment">-- 科目</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">JPN_STD.SPORTID<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">SPORTID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">SPORT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">SPORT.SPORTNAME<span class="operator">=</span><span class="string">&#x27;BASEBALL&#x27;</span></span><br><span class="line">)<span class="comment">-- 野球をしている生徒</span></span><br><span class="line"><span class="keyword">AND</span>JPN_STD.ID<span class="operator">=</span>SBJ.ID</span><br><span class="line"><span class="keyword">AND</span>SBJ.GRADE<span class="operator">&gt;</span><span class="comment">/*grade*/</span><span class="number">50</span><span class="comment">-- 成績が50点以上</span></span><br></pre></td></tr></table></figure><h2 id="クロスプラットフォームビルド"><a href="#クロスプラットフォームビルド" class="headerlink" title="クロスプラットフォームビルド"></a>クロスプラットフォームビルド</h2><p>現在はビルドした環境(win32-x64-msvc)でしか作成したNode.jsアドオンが動作しません。<br>そこでGitHub Actionsを使ってクロスプラットフォームビルドを行います。</p><h3 id="0-CI-ymlの作成"><a href="#0-CI-ymlの作成" class="headerlink" title="0. CI.ymlの作成"></a>0. CI.ymlの作成</h3><p>もしnapi-rsプロジェクト作成時にGitHub Actionsを有効にしていなかった場合はこちらの作業を行ってください。</p><ol><li>適当なディレクトリで<code>napi new</code></li><li>パッケージ名、ディレクトリ名は適当に入力</li><li>サポートしたい実行環境を選択<br>  (今回作成しているフォーマッタではできるだけ多くの環境をサポートしたかったため、で全ての実行環境を選択)</li><li>GitHub Actionsを有効にしてプロジェクトを作成</li><li>完成したプロジェクト内の<code>.github</code>ディレクトリをコピーして現在作業中のプロジェクトにペースト</li></ol><h3 id="1-yarn-lockの作成"><a href="#1-yarn-lockの作成" class="headerlink" title="1. yarn.lockの作成"></a>1. yarn.lockの作成</h3><p>プロジェクトのルートディレクトリで以下のコマンドを実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure><p>yarn.lockが作成、または更新されれば成功です。</p><h3 id="2-CI-ymlの編集、GitHub-Actionsの実行"><a href="#2-CI-ymlの編集、GitHub-Actionsの実行" class="headerlink" title="2. CI.ymlの編集、GitHub Actionsの実行"></a>2. CI.ymlの編集、GitHub Actionsの実行</h3><p>デフォルトではGitHubにpushするとGitHub Actionsが自動的に動いて以下の処理を行ってくれます。</p><ol><li>各環境に対応したNode.jsアドオンをビルド</li><li>npmパッケージのpublish</li></ol><p>今回はnpmパッケージのpublishは行わないため、<code>.github/workflows/CI.yml</code>のpublish以下をすべてコメントアウトします。<br>publish方法を知りたい方は以下の記事が参考になると思います。</p><ul><li><a href="https://shisama.hatenablog.com/entry/2021/12/03/054437#napi-rs%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9Fnpm-publish">Rust + Node-APIでクロスプラットフォーム向けnpmパッケージを公開する - 別にしんどくないブログ</a></li></ul><p>GitHub Actionsでビルドを行うと、13個の環境のうち11個の環境でビルドが失敗してしまいました。Rust製SQLフォーマッタが内部的にC&#x2F;C++のコードを呼び出していることが原因の1つであると考えられます。そのため、通常のRustプロジェクトであればもう少し成功すると思います。<br>試行錯誤して<code>.github/workflows/CI.yml</code>を編集すると、最終的に13個中7個の環境でビルドが成功するようになりました。私が実施した変更を参考程度に示します。</p><h4 id="CI-ymlの変更1-長いパスに対応"><a href="#CI-ymlの変更1-長いパスに対応" class="headerlink" title="CI.ymlの変更1: 長いパスに対応"></a><code>CI.yml</code>の変更1: 長いパスに対応</h4><p>hostがwindows-latestである環境のbuildに以下の処理を追加しました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --system core.longpaths true</span><br></pre></td></tr></table></figure><h4 id="CI-ymlの変更2-yarn-testの削除"><a href="#CI-ymlの変更2-yarn-testの削除" class="headerlink" title="CI.ymlの変更2: yarn testの削除"></a><code>CI.yml</code>の変更2: yarn testの削除</h4><p>targetがi686-pc-windows-msvcの場合のみビルド時に<code>yarn test</code>が走っています。本来は消すべきではないかもしれませんが、今回はテストコードを書いていないのでとりあえず削除しました。</p><h4 id="CI-ymlの変更3-aarch64-apple-darwinにおける一部処理の削除"><a href="#CI-ymlの変更3-aarch64-apple-darwinにおける一部処理の削除" class="headerlink" title="CI.ymlの変更3: aarch64-apple-darwinにおける一部処理の削除"></a><code>CI.yml</code>の変更3: aarch64-apple-darwinにおける一部処理の削除</h4><p>targetがaarch64-apple-darwinの場合のビルド処理の上5行を削除しました。最終的にビルド処理は以下のようになりました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn build --target aarch64-apple-darwin</span><br><span class="line">strip -x *.node</span><br></pre></td></tr></table></figure><h3 id="3-成果物のダウンロード"><a href="#3-成果物のダウンロード" class="headerlink" title="3. 成果物のダウンロード"></a>3. 成果物のダウンロード</h3><p>GitHub Actionsでビルドした各環境のNode.jsアドオンをダウンロードします。<br>GitHubのリポジトリ &gt; Actions &gt; 最新のワークフローに移動し、ページ最下部のArtifactsのファイルをすべてダウンロードします。<br><img src="/images/20221228a/image.png" alt="image.png" width="1200" height="392" loading="lazy"><br>各ファイルを解凍すると、各環境に合ったNode.jsアドオンが取得できます。</p><h2 id="nodeファイルをまとめて圧縮"><a href="#nodeファイルをまとめて圧縮" class="headerlink" title="nodeファイルをまとめて圧縮"></a>nodeファイルをまとめて圧縮</h2><ol><li>適当なディレクトリを作成</li><li>対応したい環境のnodeファイルを全て置く</li><li>napi-rsプロジェクトの<code>index.d.ts</code>と<code>index.js</code>をコピーしてそのディレクトリにペースト</li><li>package.jsonを作成 (nameはパッケージ名)<br>フォーマッタの名前がuroborosql-fmtであるため、パッケージ名はuroborosql-fmt-napiとしました。 <figure class="highlight plaintext"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;uroborosql-fmt-napi&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;types&quot;: &quot;index.d.ts&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;engines&quot;: &#123;</span><br><span class="line">    &quot;node&quot;: &quot;&gt;= 10&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>以下のコマンドを実行して圧縮 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm pack</span><br></pre></td></tr></table></figure></li><li><code>プロジェクト名-バージョン.tgz</code>ファイルが生成されれば成功</li></ol><p>今回の例では<code>uroborosql-fmt-napi-0.0.0.tgz</code>というファイルが生成されました。</p><h1 id="拡張機能の作成"><a href="#拡張機能の作成" class="headerlink" title="拡張機能の作成"></a>拡張機能の作成</h1><p>※再掲<br><img src="/images/20221228a/df88766a-9fef-6408-5603-1c17bed7619c_2.png" alt="" width="1200" height="1190" loading="lazy"></p><p>TypeScriptからSQLフォーマッタを呼び出すことができるようになったので、次に拡張機能部分を作成します。<br>本記事では<a href="https://github.com/microsoft/vscode-extension-samples/tree/main/lsp-sample">microsoft&#x2F;vscode-extension-samples&#x2F;lsp-sample</a>をベースにして拡張機能を作成します。</p><p>LSPを用いた拡張機能作成方法の詳細を知りたい方は以下をご覧ください。本記事では簡単に解説します。</p><ul><li><a href="/articles/20221124a/">Language Server Protocolを用いたVSCode拡張機能開発 (前編) | フューチャー技術ブログ</a></li><li><a href="/articles/20221125a/">Language Server Protocolを用いたVSCode拡張機能開発 (後編) | フューチャー技術ブログ</a></li></ul><h2 id="拡張機能の設定"><a href="#拡張機能の設定" class="headerlink" title="拡張機能の設定"></a>拡張機能の設定</h2><p><code>package.json</code>を変更して拡張機能の設定を変更します。</p><p>まず、VSCodeが起動されると拡張機能が有効になるようにします。</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;activationEvents&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>コマンドパレットから「format sql」コマンドを実行できるように設定します。</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uroborosql-fmt.uroborosql-format&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;format sql&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="クライアント"><a href="#クライアント" class="headerlink" title="クライアント"></a>クライアント</h2><p><code>client/src/extension.ts</code>にクライアント側の処理を記述します。</p><p><code>clientOptions</code>内の<code>documentSelector</code>を以下のように変更し、全ての形式のファイル、保存されていないUntitledなファイルを拡張機能の対象とします。</p><figure class="highlight ts"><figcaption><span>client/src/extension.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">documentSelector</span>: [</span><br><span class="line">  &#123; <span class="attr">pattern</span>: <span class="string">&quot;**&quot;</span>, <span class="attr">scheme</span>: <span class="string">&quot;file&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">pattern</span>: <span class="string">&quot;**&quot;</span>, <span class="attr">scheme</span>: <span class="string">&quot;untitled&quot;</span> &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p><code>uroborosql-fmt.uroborosql-format</code>コマンドが実行されたら<code>uroborosql-fmt.executeFormat</code>の実行情報とドキュメントのuri、version、選択範囲をサーバに送信する処理を記述します。</p><figure class="highlight ts"><figcaption><span>client/src/extension.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">context.<span class="property">subscriptions</span>.<span class="title function_">push</span>(</span><br><span class="line">  commands.<span class="title function_">registerCommand</span>(<span class="string">&quot;uroborosql-fmt.uroborosql-format&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> uri = <span class="variable language_">window</span>.<span class="property">activeTextEditor</span>.<span class="property">document</span>.<span class="property">uri</span>;</span><br><span class="line">    <span class="keyword">const</span> version = <span class="variable language_">window</span>.<span class="property">activeTextEditor</span>.<span class="property">document</span>.<span class="property">version</span>;</span><br><span class="line">    <span class="keyword">const</span> selections = <span class="variable language_">window</span>.<span class="property">activeTextEditor</span>.<span class="property">selections</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> client.<span class="title function_">sendRequest</span>(<span class="title class_">ExecuteCommandRequest</span>.<span class="property">type</span>, &#123;</span><br><span class="line">      <span class="attr">command</span>: <span class="string">&quot;uroborosql-fmt.executeFormat&quot;</span>,</span><br><span class="line">      <span class="attr">arguments</span>: [uri, version, selections],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="サーバ"><a href="#サーバ" class="headerlink" title="サーバ"></a>サーバ</h2><p>まず先程<code>npm pack</code>で取得した<code>uroborosql-fmt-napi-0.0.0.tgz</code>をserverディレクトリ内に置きます。<br>そして、<code>server/package.json</code>のdependenciesを以下のように変更します。</p><figure class="highlight diff"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line"><span class="addition">+   &quot;uroborosql-fmt-napi&quot;: &quot;file:uroborosql-fmt-napi-0.0.0.tgz&quot;,</span></span><br><span class="line">    &quot;vscode-languageserver&quot;: &quot;^7.0.0&quot;,</span><br><span class="line">    &quot;vscode-languageserver-textdocument&quot;: &quot;^1.0.4&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>これでRust製SQLフォーマッタをimportできるようになりました。</p><p><code>server/src/server.ts</code>にサーバの処理を記述します。<br>まずフォーマットを実行する関数をimportします。</p><figure class="highlight ts"><figcaption><span>server/src/server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; runfmt &#125; <span class="keyword">from</span> <span class="string">&quot;uroborosql-fmt-napi&quot;</span>;</span><br></pre></td></tr></table></figure><p>コマンド実行時に選択範囲のテキストをフォーマットする処理を記述します。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// コマンド実行時に行う処理</span></span><br><span class="line">connection.<span class="title function_">onExecuteCommand</span>(<span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    params.<span class="property">command</span> !== <span class="string">&quot;uroborosql-fmt.executeFormat&quot;</span> ||</span><br><span class="line">    params.<span class="property">arguments</span> == <span class="literal">null</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> uri = params.<span class="property">arguments</span>[<span class="number">0</span>].<span class="property">external</span>;</span><br><span class="line">  <span class="comment">// uriからドキュメントを取得</span></span><br><span class="line">  <span class="keyword">const</span> textDocument = documents.<span class="title function_">get</span>(uri);</span><br><span class="line">  <span class="keyword">if</span> (textDocument == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// バージョン不一致の場合はアーリーリターン</span></span><br><span class="line">  <span class="keyword">const</span> version = params.<span class="property">arguments</span>[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (textDocument.<span class="property">version</span> !== version) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> selections = params.<span class="property">arguments</span>[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">changes</span>: <span class="title class_">TextEdit</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 全ての選択範囲に対して実行</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> selection <span class="keyword">of</span> selections) &#123;</span><br><span class="line">    <span class="comment">// テキストを取得</span></span><br><span class="line">    <span class="keyword">const</span> text = textDocument.<span class="title function_">getText</span>(selection);</span><br><span class="line">    <span class="keyword">if</span> (text.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// フォーマット</span></span><br><span class="line">    changes.<span class="title function_">push</span>(<span class="title class_">TextEdit</span>.<span class="title function_">replace</span>(selection, <span class="title function_">runfmt</span>(text)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 選択されていない場合</span></span><br><span class="line">  <span class="keyword">if</span> (changes.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// テキスト全体を取得</span></span><br><span class="line">    <span class="keyword">const</span> text = textDocument.<span class="title function_">getText</span>();</span><br><span class="line">    <span class="comment">// フォーマット</span></span><br><span class="line">    changes.<span class="title function_">push</span>(</span><br><span class="line">      <span class="title class_">TextEdit</span>.<span class="title function_">replace</span>(</span><br><span class="line">        <span class="title class_">Range</span>.<span class="title function_">create</span>(</span><br><span class="line">          <span class="title class_">Position</span>.<span class="title function_">create</span>(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">          textDocument.<span class="title function_">positionAt</span>(text.<span class="property">length</span>)</span><br><span class="line">        ),</span><br><span class="line">        <span class="title function_">runfmt</span>(text)</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 変更を適用</span></span><br><span class="line">  connection.<span class="property">workspace</span>.<span class="title function_">applyEdit</span>(&#123;</span><br><span class="line">    <span class="attr">documentChanges</span>: [</span><br><span class="line">      <span class="title class_">TextDocumentEdit</span>.<span class="title function_">create</span>(</span><br><span class="line">        &#123; <span class="attr">uri</span>: textDocument.<span class="property">uri</span>, <span class="attr">version</span>: textDocument.<span class="property">version</span> &#125;,</span><br><span class="line">        changes</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>クライアントとサーバをコンパイルして実行してみます。</p><img src="/images/20221228a/formattest.gif" alt="formattest.gif" width="1200" height="675" loading="lazy"><p>ちゃんとフォーマットされることが確認できました🎉</p><h1 id="拡張機能のパッケージ化"><a href="#拡張機能のパッケージ化" class="headerlink" title="拡張機能のパッケージ化"></a>拡張機能のパッケージ化</h1><p>vsceというツールを使用してパッケージ化を行います。vsceとはVSCode拡張機能のパッケージ化、公開、管理を行うことができるCLIツールです。</p><div class="note warn" style="background:#fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>本記事では拡張機能の公開については説明しません。</p></div><h2 id="vsceのインストール"><a href="#vsceのインストール" class="headerlink" title="vsceのインストール"></a>vsceのインストール</h2><p>私の環境(Windows10)ではインストールに手順が必要だったので順に説明します。</p><h3 id="1-Python3のインストール"><a href="#1-Python3のインストール" class="headerlink" title="1. Python3のインストール"></a>1. Python3のインストール</h3><p>Python3が必要なためインストールします。既にPython3が入っている方は次のステップに進んでください。</p><p>まず<a href="https://www.python.org/downloads/">こちら</a>からインストーラをダウンロードします。</p><img src="/images/20221228a/image_2.png" alt="image.png" width="1200" height="522" loading="lazy"><p>ダウンロードしたファイルを開き、<strong>一番下の「Add Python 3.x to PATH」にチェックを入れてください。</strong><br>「Install Now」をクリックしてインストールし、「Setup was Succesful」と表示されればインストール完了です。</p><h3 id="2-node-gypのインストールと設定"><a href="#2-node-gypのインストールと設定" class="headerlink" title="2. node-gypのインストールと設定"></a>2. node-gypのインストールと設定</h3><p><a href="https://github.com/nodejs/node-gyp">node-gyp</a>とは、Node.js のネイティブアドオンモジュールをコンパイルするためのツールです。既に入っていて設定済みの方は次のステップに進んでください。</p><h4 id="node-gypのインストール"><a href="#node-gypのインストール" class="headerlink" title="node-gypのインストール"></a>node-gypのインストール</h4><p>まずnode-gypをインストールします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g node-gyp</span><br></pre></td></tr></table></figure><h3 id="3-VisualStudioのビルドツールのインストール"><a href="#3-VisualStudioのビルドツールのインストール" class="headerlink" title="3. VisualStudioのビルドツールのインストール"></a>3. VisualStudioのビルドツールのインストール</h3><p>次に<a href="https://visualstudio.microsoft.com/ja/thank-you-downloading-visual-studio/?sku=BuildTools">こちら</a>からVisualStudioのビルドツールのインストーラをダウンロードします。<br>インストーラを起動して「C++によるデスクトップ開発」を選択して、<strong>右側の「インストールの詳細」の中の「Windows 10 SDK」にチェックを入れて</strong>右下のインストールをクリックします。(Windows11の方は「Windows 11 SDK」にチェックを入れてください。)</p><img src="/images/20221228a/image_3.png" alt="image.png" width="1200" height="635" loading="lazy"><h3 id="4-npmの設定"><a href="#4-npmの設定" class="headerlink" title="4. npmの設定"></a>4. npmの設定</h3><p>以下を実行します。(2022の部分はダウンロードしたバージョンに合わせて適宜変更して下さい)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set msvs_version 2022</span><br></pre></td></tr></table></figure><h3 id="5-vsceのインストール"><a href="#5-vsceのインストール" class="headerlink" title="5. vsceのインストール"></a>5. vsceのインストール</h3><p>以下を実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vsce</span><br></pre></td></tr></table></figure><p>vsceコマンドが実行できるようになれば成功です。</p><h2 id="パッケージ化"><a href="#パッケージ化" class="headerlink" title="パッケージ化"></a>パッケージ化</h2><p>先程作成した拡張機能のディレクトリで以下のコマンドを実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vsce package</span><br></pre></td></tr></table></figure><p>すると、<code>プロジェクト名-バージョン.vsix</code>というファイルが生成されます。今回の例では<code>uroborosql-fmt-1.0.0.vsix</code>というファイルが生成されました。</p><p>そして、以下のコマンドでインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code --install-extension .\uroborosql-fmt-1.0.0.vsix</span><br></pre></td></tr></table></figure><p>無事インストールされ、フォーマッタが動くようになったので成功です 🎉</p><img src="/images/20221228a/image_4.png" alt="" width="1200" height="629" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>本記事ではRust製SQLフォーマッタをVSCode拡張機能化した方法を紹介しました。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://nodejs.github.io/node-addon-examples/about/what/">What is Node-API? · The Node-API Resource</a></li><li><a href="https://shisama.hatenablog.com/entry/2021/12/03/054437">Rust + Node-APIでクロスプラットフォーム向けnpmパッケージを公開する - 別にしんどくないブログ</a></li><li><a href="https://qiita.com/irico/items/fa60a7e077f4414f0eb6">VSCodeの拡張を作ってパッケージ化する - Qiita</a></li><li><a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension">Publishing Extensions | Visual Studio Code Extension API</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%82%BF%E3%83%BC/">フォーマッター</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%82%A2%E3%83%86%E3%82%AF/">コアテク</category>
      
      <category domain="https://future-architect.github.io/tags/VSCode/">VSCode</category>
      
      <category domain="https://future-architect.github.io/tags/Rust/">Rust</category>
      
      <category domain="https://future-architect.github.io/tags/napi-rs/">napi-rs</category>
      
      
      <comments>https://future-architect.github.io/articles/20221228a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>会社のプロキシの裏でPodman Desktopを実行する</title>
      <link>https://future-architect.github.io/articles/20221227a/</link>
      <guid>https://future-architect.github.io/articles/20221227a/</guid>
      <pubDate>Mon, 26 Dec 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;ちょっとローカルでPostgreSQLの最新バージョンを試したいけどDocker Desktopの稟議が間に合わない！みたいなときのためのメモです。&lt;/p&gt;
&lt;p&gt;Docker</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>ちょっとローカルでPostgreSQLの最新バージョンを試したいけどDocker Desktopの稟議が間に合わない！みたいなときのためのメモです。</p><p>Docker Desktopの有償化と契約すべきライセンスについては以前書きました。その後、値段がちょっと上がったのと、100人以上のTeamプランは許可されずにBuisinessプランが必須になり、BusinessプランではSSOが利用できるようになったのが変更点です。</p><ul><li><a href="/articles/20220124a/">Docker Desktop有償化！どのライセンス契約する？</a></li></ul><p><a href="https://www.docker.com/products/docker-desktop/">Docker Desktop</a>の代替のものがいくつかでています。<a href="https://rancherdesktop.io/">Rancher Desktop</a>と、<a href="https://podman-desktop.io/">Podman Desktop</a>があります。Rancher Desktopは会社のプロキシの裏で動かすのが難しく、ちょっと苦戦した上に、WSLのコンテナが再作成されるタイミングでプロキシ設定がリセットされるということを聞いて、Podman Desktopを使ってみました。PodmanはRedHatが開発しているコンテナのエコシステムで、コンテナエンジン（以下サーバーとします）、CLIツールで構成されます。それにデスクトップのUIとPodman自身のインストーラを組み合わせたものがPodman Desktopです。</p><img src="/images/20221227a/image.png" alt="" width="1200" height="978" loading="lazy"><h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><p>上記のPodman Desktopのサイトからインストーラをダウンロードして実行します。0.9系までは実行ファイルがそのままダウンロードされたのですが、最新の0.10.0からはインストーラになりました。入れるのはダブルクリックだけなので難しくないでしょう。起動したら、Podmanのインストーラが初回は起動するので、インストールします。PodmanはWSL2上で動くサーバーで、dockerdとかにあたるものです。執筆時点では4.3.1が入りました。</p><h1 id="プロキシの設定"><a href="#プロキシの設定" class="headerlink" title="プロキシの設定"></a>プロキシの設定</h1><p>起動したら、左下のSettings→Proxyと進んでプロキシの設定ダイアログに設定します。認証が必要な場合は、<code>http://ユーザー:パスワード@ホスト:ポート</code>という形式で入れます。</p><img src="/images/20221227a/image_2.png" alt="" width="1200" height="687" loading="lazy"><p>これだけで済めばDocker同等なのですが、残念ながらもうひと手間必要です。</p><h2 id="PodmanのWSL2のイメージの設定変更"><a href="#PodmanのWSL2のイメージの設定変更" class="headerlink" title="PodmanのWSL2のイメージの設定変更"></a>PodmanのWSL2のイメージの設定変更</h2><p>そのままだと実行すると、プロキシのホスト名が解決できないというエラーが発生してしまいます。ネームサーバーの設定を入れてあげる必要があります。まずWSL2を起動します。まずはresolv.confが上書きされないようにwsl.confを編集します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wsl -d podman-machine-default</span><br><span class="line"></span><br><span class="line">(wsl2起動)</span><br><span class="line"></span><br><span class="line">$ sudo vi /etc/wsl.conf</span><br></pre></td></tr></table></figure><figure class="highlight ini"><figcaption><span>/etc/wsl.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[user]</span></span><br><span class="line"><span class="attr">default</span>=user</span><br><span class="line"></span><br><span class="line"><span class="section">[network]</span></span><br><span class="line"><span class="attr">generateResolvConf</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>その後は一度WSL2を再起動します（そうしないとresolve.confが再生してしまった）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wsl --shutdown</span><br></pre></td></tr></table></figure><p>次は&#x2F;etc&#x2F;resolv.confを編集します</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wsl -d podman-machine-default</span><br><span class="line"></span><br><span class="line">(wsl2起動)</span><br><span class="line"></span><br><span class="line">$ sudo vi /etc/resolv.conf</span><br></pre></td></tr></table></figure><figure class="highlight text"><figcaption><span>/etc/resolv.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver プロキシのIPアドレス</span><br></pre></td></tr></table></figure><p>一度WSL2から出て再度入りなおしても編集したresolv.confが残っていることを確認しておきます。</p><p>最後にpodmanのサーバーを再起動してからプロキシ越しにイメージをとってきて実行できるか確認します。<code>docker</code>を<code>podman</code>に読み替えるだけで使えます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ podman machine stop</span><br><span class="line">$ podman machine start</span><br><span class="line">$ podman run --rm hello-world</span><br><span class="line">!... Hello Podman World ...!</span><br><span class="line"></span><br><span class="line">         .--&quot;--.</span><br><span class="line">       / -     - \</span><br><span class="line">      / (O)   (O) \</span><br><span class="line">   ~~~| -=(,Y,)=- |</span><br><span class="line">    .---. /`  \   |~~</span><br><span class="line"> ~/  o  o \~~~~.----. ~~</span><br><span class="line">  | =(X)= |~  / (O (O) \</span><br><span class="line">   ~~~~~~~  ~| =(Y_)=-  |</span><br><span class="line">  ~~~~    ~~~|   U      |~~</span><br><span class="line"></span><br><span class="line">Project:   https://github.com/containers/podman</span><br><span class="line">Website:   https://podman.io</span><br><span class="line">Documents: https://docs.podman.io</span><br><span class="line">Twitter:   @Podman_io</span><br></pre></td></tr></table></figure><h1 id="コンテナレジストリの設定"><a href="#コンテナレジストリの設定" class="headerlink" title="コンテナレジストリの設定"></a>コンテナレジストリの設定</h1><p>デフォルトのPodmanは、docker.io以外のところからダウンロードしようとしたり、いくつかのイメージ名にエイリアスが張られていたりします。さきほどのhello-world、Dockerのhello-worldと違うことに気づいた方もいるでしょう。hello-worldは<code>quay.io/podman/hello</code>を代わりにプルしてきます。</p><p>dockerのものを使うにはレジストリを変更します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wsl -d podman-machine-default</span><br><span class="line"></span><br><span class="line">(wsl2起動)</span><br><span class="line"></span><br><span class="line">$ sudo vi /etc/containers/registries.conf</span><br></pre></td></tr></table></figure><p>次のように変更します。これでdocker.ioのイメージだけを取得します。また、CONTAINERS_SHORT_NAME_ALIASING&#x3D;onを設定しておくと、<code>docker.io/hello-world</code>ではなく、<code>hello-world</code>で動作するようになります。とはいえ、短縮名は<a href="https://www.redhat.com/sysadmin/container-image-short-names">リスクがあるよ</a>とドキュメント化されていたりするので、確認の上ご利用ください。今回はあくまでもDocker Desktopを入れるまでのつなぎなので、互換性が高い方が良いな、ということでやっています。</p><figure class="highlight toml"><figcaption><span>/etc/containers/registries.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">unqualified-search-registries</span> = [<span class="string">&quot;docker.io&quot;</span>]</span><br><span class="line"><span class="section">[engine]</span></span><br><span class="line"><span class="attr">env</span>=[<span class="string">&quot;CONTAINERS_SHORT_NAME_ALIASING=on&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">short-name-mode</span>=<span class="string">&quot;enforcing&quot;</span></span><br></pre></td></tr></table></figure><p>それではまたpodmanを再起動してから、今度はNginxを起動してみます。<code>http://localhost:8888/</code>で起動したら完了です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ podman machine stop</span><br><span class="line">$ podman machine start</span><br><span class="line">$ podman run --rm -it -p 8888:80 nginx</span><br></pre></td></tr></table></figure><img src="/images/20221227a/image_3.png" alt="image.png" width="1200" height="548" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Docker Desktopはいろいろな開発者にうれしい機能がたくさん追加されて、積極的に開発されていて、便利ですし、今回やったようなWSL2に入ってプロキシサーバーにつながるような設定をしなくてもアクセスできたりして便利なのですが、ちょびっと検証する目的でPodman Desktopを代わりに実行する方法を紹介しました。プロキシの裏でも動作するようになりました。</p><p>まあ、世の中のドキュメントはDockerを使うように書かれていたりするので、トラブルシュートとかを考えると頻繁使う人はDocker Desktopをきちんと入れた方が良いですね。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Docker/">Docker</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7/">プロキシ</category>
      
      <category domain="https://future-architect.github.io/tags/Podman/">Podman</category>
      
      
      <comments>https://future-architect.github.io/articles/20221227a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ITコンサルが教える銀行業務シリーズ part1 超入門編</title>
      <link>https://future-architect.github.io/articles/20221226a/</link>
      <guid>https://future-architect.github.io/articles/20221226a/</guid>
      <pubDate>Sun, 25 Dec 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;金融サービス事業部の山口です。&lt;/p&gt;
&lt;p&gt;この記事は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>金融サービス事業部の山口です。</p><p>この記事は<a href="/articles/20220616a/">「業界ドメインに詳しくなろう」シリーズ連載</a>の「銀行業務」超入門編です。<br>銀行業界を目指す学生さん、銀行業界にアサインされた若手SIer、他業種で活躍するITコンサルの方向けになります。</p><p>インフラエンジニアから銀行系ITコンサルにキャリアチェンジした私が、その道20年のキャリアを誇る安本大先輩の力を借りて、銀行業務について記載していきます。</p><h1 id="ITコンサルが教える銀行業務シリーズ-銀行業務とは"><a href="#ITコンサルが教える銀行業務シリーズ-銀行業務とは" class="headerlink" title="ITコンサルが教える銀行業務シリーズ　銀行業務とは"></a>ITコンサルが教える銀行業務シリーズ　銀行業務とは</h1><p>銀行業務をお話する前に、なぜ「銀行」と呼ばれるようになったのはご存知でしょうか。</p><p>明治の世が始まって間もなく、「Bank」という英単語を日本語に何と訳すかという話の中で、「お金（金銀）を取り扱う」と中国語で「店」を意味する「行」を組み合わせて、「金行」・「銀行」という案が出て、語呂の良さから「銀行」に決まったと言われています。</p><p>２０２１年の大河ドラマ<a href="https://www.nhk.jp/p/seiten/ts/61Z4879Q1K/">「晴天を衝け」</a>の中では、日本初の銀行の頭取に就任した渋沢栄一が「銀行」🏦と名付けたというお話になっていましたし、実際にそんな一説があるという記事も見かけますが実際のところはどうなのでしょうね。<br>ともあれ銀行という単語は作られてからまだ１５０年くらいの比較的浅い単語のようです😄</p><p>本題の銀行業務にお話を移しましょう。</p><p>銀行における伝統的な業務は「預金」「融資」「為替」となります。(昨今の銀行は業務範囲を拡大してきてます。)</p><img src="/images/20221226a/ginko_gyomu.PNG" alt="ginko_gyomu.PNG" width="663" height="452" loading="lazy"><h2 id="銀行の利益構造"><a href="#銀行の利益構造" class="headerlink" title="銀行の利益構造"></a>銀行の利益構造</h2><p>銀行は、預金者からお金を預り、そのお金を必要とする企業・個人へ貸し出しています。</p><p>言わばお金という商材を預金によって仕入れ、またお金を必要としている人に貸出という形で販売するビジネスモデルです。</p><p>顧客の日々のお金のやり取り（決済や振込など）を円滑・確実に行い日常的な経済活動を支えており、社会的インフラを担う公共性の高い業種です。とはいえ、銀行は株式会社であり民間企業であり、しっかり利益を出す必要があります。</p><p>銀行はどうやって収益を得ているかというと、預金者から集めたお金を、融資という形で企業や個人に貸し付けを行い、この融資によって発生した利子で利益を得る構造となっています。</p><img src="/images/20221226a/image.png" alt="image.png" width="1140" height="592" loading="lazy"><h2 id="預金業務"><a href="#預金業務" class="headerlink" title="預金業務"></a>預金業務</h2><p>バブル崩壊後においては超低金利時代とも言われており、銀行が融資することによって稼げる利子は大きく圧迫を受けており、銀行の収益モデルについては非常に厳しい状況となっています。</p><p>金融緩和政策によって世の中にお金が余っている状況が長く続いており、お金を預けたい（運用したい）人（＝供給）と、お金を必要としている人（＝需要）のバランスが供給過多の状況となっており、金利が低く維持された状態になっております。こうしたことが、私達一般市民にも少なからず影響が出てきています。</p><p>例えば、銀行口座を開設すると当たり前のように通帳をもらい、キャッシュカードをもらいます。通帳が全て印字し終わるとこれもまた当たり前のように次の通帳が発行され、その通帳発行に際してお金を請求されることはありませんでした。ところが、銀行の収益構造が非常に厳しくなってきたことや、スマートフォンなどのデジタル機器の普及も相まって有料化の動きが始まっています。三菱UFJ銀行においては、2022年4月以降紙としての通帳を発行する都度数百円の費用がかかるようになりました。</p><p>こうした動きは着実に広がってきています。各銀行が○○銀行アプリといったものを提供しそちらへ移行を促すCMなどを出しているのは上記のような背景があるといえます。</p><p>一方で、上述した三菱UFJ銀行において、デジタル機器を扱うのが苦手あるいはまだ与えられていないという未成年や高齢者については無償とするなど、完全有償化に向けては過渡期を経ながらということになっていきそうです。<br>なお、普通預金の平均金利は0.001%（<a href="https://www.stat-search.boj.or.jp/ssi/mtshtml/ir02_m_1.html">日本銀行 時系列統計データ 検索サイト</a>より ）となっており、預金者の皆さんに還元される金利も同様にごく僅かなものとなってしまっているのもこうした収益構造の問題から発生してしまっています。</p><h2 id="融資業務"><a href="#融資業務" class="headerlink" title="融資業務"></a>融資業務</h2><p>融資に関しても同様です。例えば住宅ローンで、一部のネット銀行でしか金利1%を割るようなローンはなかったのに、今や全国の地方銀行で団信・三大疾病特約までついて金利1%を割るような商品が当たり前のように出てきています。銀行は以前にも増して非常に薄い利ざやで確実に稼ぐことが求められているのです。</p><p>それなのに、貸し付けたにもかかわらず、企業が倒産するなどして貸したお金が返済されないケースが発生してしまうのです。1000万円を年利5%で10先に貸すと、銀行にはざっくり1年間で500万円の収益が生まれるわけですが、10先のうち1先でも貸し倒れが発生してしまえば銀行の損失はあっという間に－500万円となってしまいます。薄い利ざやで確実に稼がなければならないのに、こんなことが起こっては銀行にとって泣きっ面に蜂🐝状態です❗</p><img src="/images/20221226a/image_2.png" alt="image.png" width="1082" height="575" loading="lazy"><p>このため、銀行が融資を行う際には、融資先の業績や信用・将来性をしっかり審査した上で融資を行う必要性があります。ローン審査などで断られてしまい、お金を借りたいのに貸してくれない！なんて感じたことがある方もいらっしゃるかもしれませんが、銀行としても生き残りをかけて必死な状況なんですよね。</p><h2 id="為替業務"><a href="#為替業務" class="headerlink" title="為替業務"></a>為替業務</h2><p>為替については、おそらく皆さんも一度は使ったことがあるサービスで、会社間あるいは個人間での資金移動であったり、光熱費などの各種費用の引き落としなどを行っています。お金のやり取りについては、日本国内に限らず、円・ドルなどの通貨が異なる銀行間での入出金についても銀行では対応しています。</p><p>今でこそ銀行の窓口へ行かずとも、バンキングアプリやすぐ近くにあるコンビニATMなどを利用することで当たり前のように預金サービスや為替サービスを受けていると思います。融資の申込みもバンキングアプリから直接申し込みができるようなサービスも増えてきましたね。</p><p>従来の銀行口座を介した資金移動は手数料の高さから敬遠され、個人間の少額送金は各決済アプリによる送金サービスに代替され始めているのが現状です。皆さんも飲み会の割り勘をするのに決済アプリの送金サービスを使うことが増えていませんか？とは言え、給与振込等のしっかりとした信頼性を求められるものはまだまだ、銀行が活用されてますね。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>銀行という言葉の歴史は浅いですが、我々には深い存在であるということがお判りいただけたでしょうか。</p><p>日本や地域の経済を循環させるような血液のような役割を担っているのが銀行です。銀行はお金という企業・個人にとって非常に重要なものを取り扱う社会的責任の大きさもあって、株式会社として一般に定められている会社法・労働基準法等の法規制はもちろん、銀行法といった形で多くの規制を課されている業種です。</p><p>また、長引く低金利環境下における利ざやの縮小、様々なプレーヤーが決済領域に参加する事での資金移動手段の変化、決済手数料の減少と、現在の銀行を取り巻く環境は大きな転換点を迎えている事も業界の概要・トレンドをつかむ上で重要なポイントだと思います。</p><p>今後は以下も予定してます。</p><ul><li>ITコンサルが教える銀行業務シリーズ　半沢直樹でも有名な営業活動</li><li>ITコンサルが教える銀行業務シリーズ　融資の要！融資審査①　何を気にする？銀行員　～法人融資編～</li><li>ITコンサルが教える銀行業務シリーズ　融資の要！融資審査②　何を気にする？銀行員　～個人融資(ローン)編～</li><li>ITコンサルが教える銀行業務シリーズ　融資の要！融資審査③　何を気にする？銀行員　～担保や保証編～</li><li>ITコンサルが教える銀行業務シリーズ　貸したら終わりではない　定期的にチェック自己査定</li><li>ITコンサルが教える銀行業務シリーズ　変化と不変　変わりゆく銀行文化と変わらない銀行文化</li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9/">ビジネス</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A5%AD%E7%95%8C%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3/">業界ドメイン</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%8A%80%E8%A1%8C/">銀行</category>
      
      
      <comments>https://future-architect.github.io/articles/20221226a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>俺のシステムがこんなに脆弱性だらけのわけがない(linkedpackageの紹介)</title>
      <link>https://future-architect.github.io/articles/20221223a/</link>
      <guid>https://future-architect.github.io/articles/20221223a/</guid>
      <pubDate>Thu, 22 Dec 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221223a/top.jpg&quot; alt=&quot;&quot; width=&quot;842&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221223a/top.jpg" alt="" width="842" height="523"><p>セキュリティに対して、きちんとお金をかけて対応すべきである、というのが近年の風潮です。そんな中、システム開発では多くのオープンソースのコンポーネントを組み合わせてシステムを構築するようになってきたため、使っている部品の脆弱性管理、というのがかなり大きな市場になってきました。</p><p>当社にはOSSの<a href="https://vuls.io/">Vuls</a>と、それに脆弱性管理の手間を減らしてくれる<a href="https://vuls.biz/">FutureVuls</a>というSaaSサービスがあります。コンテナのスキャンだとAqua Securityの<a href="https://trivy.dev/">Trivy</a>が有名ですね。</p><p>開発中のアプリケーションのスキャナーというと、Node.jsのnpmコマンドが脆弱なパッケージの検知機能（auditサブコマンド）を内蔵していますし、Goも<a href="https://vuln.go.dev/">公式脆弱性管理データベース</a>のページを作り、新しい仕組みを構築しようとしています(<a href="https://go.dev/security/vuln/">ドキュメント</a>、<a href="https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck">準標準のチェックコマンド</a>)。言語をまたいで使えるものには<a href="https://snyk.io/">snyk</a>もありますね。</p><h1 id="フォールスポジティブ（偽陽性）を減らす"><a href="#フォールスポジティブ（偽陽性）を減らす" class="headerlink" title="フォールスポジティブ（偽陽性）を減らす"></a>フォールスポジティブ（偽陽性）を減らす</h1><p>Node.jsでの開発は4桁ぐらいパッケージに依存することがありえます。npm auditで少しでも古いパッケージを使うと大量の脆弱性が報告されることがあります。でも、よくよく見てみると実は関係ないのかな？とも思えるような脆弱性もたくさん出てきますが、なかなか判定を1つ1つ行うのは大変です。</p><p>ですが、アプリケーションの開発でいうと、「パッケージリストには追加してみたのだけど、実際には使っていないパッケージ」などがあったりします。Goだとgo mod tidyでお掃除してくれますが。あとは開発用に追加したもので、本番コードにはリンクされていないものもあります。Node.jsなんかは、ほとんどはそうなんじゃないですかね。</p><p>あとは、脆弱性がヒットしたとしても、そのパッケージ中の一部の機能は使っているが該当する機能は使っていない、ということもあります。そのため、実際にビルドしたアプリケーションに含まれるソースコードでフィルタリングしたらいいんじゃないか、と思って実証実験的に作ったパッケージが次のものです。</p><p><a href="https://github.com/future-architect/linkedpackage">https://github.com/future-architect/linkedpackage</a></p><p>神戸さんからメッセージもらうまでは、作ったことをすっかり忘れていて、とりあえず公開だけしたのが上のリポジトリです。ライセンスはひとまずVulsにあわせてGPLにしています。とりあえず公開だけしたのでREADMEもないですが</p><h1 id="処理の方法"><a href="#処理の方法" class="headerlink" title="処理の方法"></a>処理の方法</h1><p>現時点ではJavaScriptのプロジェクトに限定した機能になっています。ソースマップをざっとスキャンして、実行ファイルに含まれるソース片を提供しているパッケージを取り出します。コマンドとしても動かせるようにしてあり、linkedpackage auditコマンドを使うと、npm auditの結果を、利用パッケージに限定してフィルタリングして表示、みたいなことができます。</p><p>ソースマップ中のパス表記は、その中で識別子が認識一致していたら問題はないと思うのですが、実際のソースコードとリンクさせるには逆変換が必要かなと思っています。ツールによって出てくるパス表記がいろいろあるので、これを地道に拾ってモジュール名を拾うようにしています。地道さが必要ですね。</p><ul><li><code>webpack:///./node_modules/@babel/runtime/helpers/wrapNativeSuper/_index.mjs</code></li><li><code>../webpack:/ncc-project/node_modules/trim/index.js</code></li><li><code>webpack://_N_E/ignored|/prj/node_modules/next/dist/shared/lib/router|./utils/resolve-rewrites</code></li></ul><h1 id="今後"><a href="#今後" class="headerlink" title="今後"></a>今後</h1><p>Goも<a href="https://pkg.go.dev/debug/buildinfo@go1.19.4#Read">debugパッケージ</a>使えば実行ファイルから、利用しているモジュール一覧が取れるので行けそうですね。そのうち作ろうかな。</p><p>ただ、実行ファイルに入っているからといって、それがまた実行されるわけではない、というのはあります。JavaScriptだとtree shakingという最適化がありますが完璧にフィルタリングできるわけではありません。Goはそこまで積極的なCode Eliminationはしてない印象がありますし、グローバル変数を含めinit()から参照されるオブジェクトなんかは使ってなくてもリンクされてしまいます。Goは1.20から<a href="https://go.googlesource.com/proposal/+/master/design/55022-pgo.md">プロファイラ機能とリンクしたオプティマイザ</a>が入ります。この情報が外部のツールから使えるかどうかはわからないですが、実際に実行されている行だけ取り出せれば、また精度の高いフィルタリングができるんじゃないかな、と思っています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Security/">Security</category>
      
      
      <category domain="https://future-architect.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://future-architect.github.io/tags/Node-js/">Node.js</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%84%86%E5%BC%B1%E6%80%A7/">脆弱性</category>
      
      <category domain="https://future-architect.github.io/tags/npm/">npm</category>
      
      
      <comments>https://future-architect.github.io/articles/20221223a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MSAL.jsで開発時は認証スキップしたい</title>
      <link>https://future-architect.github.io/articles/20221220a/</link>
      <guid>https://future-architect.github.io/articles/20221220a/</guid>
      <pubDate>Mon, 19 Dec 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221220a/azuread.jpg&quot; alt=&quot;&quot; width=&quot;700&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221220a/azuread.jpg" alt="" width="700" height="298"><p>MSAL.jsはとても便利なライブラリです。前に書いたエントリーで説明しましたが、AzureAD側の設定は必要ですが、コードへの組み込みもすぐです。コールバックを受けるバックエンドサーバーの用意も不要で、フロントエンドだけで認証が完結します。</p><ul><li><a href="https://future-architect.github.io/articles/20221118a/">https://future-architect.github.io/articles/20221118a/</a></li></ul><p>ですが、開発時にAzureADがない場合もありますし、開発者全員が開発で使うAzureADにユーザー登録されていないかもしれません。また、権限ごとにいろんなユーザーを用意してテストできるようにしたいとかのニーズもあると思います。また、E2Eテストで毎回認証をすると遅いとか、コールバックを受けるコードがGitHub Actionsではうまく動かず実AzureAD認証を組み込むのが難しいとか、認証をスキップしたいニーズもいろいろあるため、開発時にはMSAL.jsをスキップできるようにしてみます。</p><h1 id="設定の外だし"><a href="#設定の外だし" class="headerlink" title="設定の外だし"></a>設定の外だし</h1><p>前回はハードコードしましたが、AzureADの接続情報などは.envで設定を流し込むべきですので、別ファイルに切り出します。各フレームワークごとに、ブラウザに環境変数を公開するには、キーの名前のルールがあります。<a href="https://cli.vuejs.org/guide/mode-and-env.html">Vue.jsであればVUE_APP_</a>を前につけますし、<a href="https://ja.vitejs.dev/guide/env-and-mode.html">Vite.jsだとVITE_</a>をつけますし、<a href="https://nextjs.org/docs/basic-features/environment-variables">Next.jsだとNEXT_PUBLIC_</a>ですね。これらの設定はサーバーではなくてフロントエンド側なので、それらのルールに従った名前にします。Vue.jsだったら次の通り。</p><figure class="highlight bash"><figcaption><span>.env</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_AZURE_DUMMY_USER=dummy-user@example.com</span><br><span class="line">VUE_APP_AZURE_ISSUER=https://login.microsoftonline.com/<span class="variable">$&#123;テナントID&#125;</span>,</span><br><span class="line">VUE_APP_AZURE_APP_ID=<span class="variable">$&#123;アプリケーションID&#125;</span></span><br></pre></td></tr></table></figure><p>これらの設定を使うようにします。コールバックのURLは現在実行中のホストの<code>/callback</code>を向くように動的にパスを作っています。このパスをAzureAD側の設定にも入れる想定です。</p><figure class="highlight ts"><figcaption><span>authConfig.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Configuration</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@azure/msal-browser&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">Configuration</span> = &#123;</span><br><span class="line">    <span class="attr">auth</span>: &#123;</span><br><span class="line">        <span class="attr">authority</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_ISSUER</span>,</span><br><span class="line">        <span class="attr">clientId</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_APP_ID</span>,</span><br><span class="line">        <span class="attr">redirectUri</span>: <span class="string">`<span class="subst">$&#123;location.protocol&#125;</span>//<span class="subst">$&#123;location.host&#125;</span>/callback`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">cache</span>: &#123;</span><br><span class="line">        <span class="attr">cacheLocation</span>: <span class="string">&quot;localStorage&quot;</span>,</span><br><span class="line">        <span class="attr">storeAuthStateInCookie</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="テストユーザー対応"><a href="#テストユーザー対応" class="headerlink" title="テストユーザー対応"></a>テストユーザー対応</h1><p>MSAL.jsを使うと、AzureADで認証してJWTトークンを作って返してくれます。それをそのままサーバーにも渡し、サーバー側でIDを取り出して使います。開発用モードを作るとして大幅なif分岐などは作りたくはないですよね？</p><ul><li>ダミーのJWTは作り、IDが分かるようにする</li><li>ただしAzureADの証明書での署名はできないので、署名の確認はサーバーではあきらめる</li></ul><p>AzureADのトークンを使う場合</p><p>今回は開発用のテストユーザーを環境変数から設定できるようにします。</p><figure class="highlight bash"><figcaption><span>.env.development</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_AZURE_DUMMY_USER=dummy-user@example.com</span><br></pre></td></tr></table></figure><p>ブラウザ上でダミーのJWTを作るためにjoseパッケージを使います。これはブラウザで使えますが、npmパッケージのほとんどはNode.jsの機能を使っていてブラウザで使えないものが多かったです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install jose</span><br></pre></td></tr></table></figure><p>前回と違うところを主にサンプルとして提示しています。</p><p>ログインではダミーユーザーがあるかどうかで条件判断を行い、ダミーユーザーがいたらJWTを作って返しています。内容はだいたいAzureADが作っているものに似せるようにはしています（完全ではない）。</p><p>AzureADのトークンはsubではUUIDのようなコードが入っています。おそらくサーバー側でログインしたユーザーのIDをもとに権限管理をしたりするのであれば、<code>preferred_username</code>に入っているメールアドレスを使うことになるんじゃないかと思います。AzureAD側の設定でIDトークンに入れるクレームを増やして、<code>email</code>クレームを足したりもできるようです。</p><figure class="highlight ts"><figcaption><span>authPlugin</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 追加</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UnsecuredJWT</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;jose&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前回はaccessTokenだったがidTokenに変更</span></span><br><span class="line"><span class="keyword">let</span> idToken = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前回のloginメソッドの修正</span></span><br><span class="line"><span class="keyword">async</span> login () &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_DUMMY_USER</span>) &#123; <span class="comment">// ダミーユーザーモード</span></span><br><span class="line">    <span class="keyword">const</span> jwt = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">UnsecuredJWT</span>(&#123;</span><br><span class="line">      <span class="attr">idp</span>: <span class="string">&#x27;https://sts.windows.net/....&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Dummy User(ダミー ユーザー)&#x27;</span>,</span><br><span class="line">      <span class="attr">preferred_username</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_DUMMY_USER</span>,</span><br><span class="line">      <span class="attr">sub</span>: <span class="title function_">btoa</span>(process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_DUMMY_USER</span>), <span class="comment">// ナチュラルキーっぽくする</span></span><br><span class="line">      <span class="attr">ver</span>: <span class="string">&#x27;2.0&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">      .<span class="title function_">setIssuer</span>(<span class="string">`<span class="subst">$&#123;process.env.VUE_APP_AZURE_ISSUER&#125;</span>/v2.0`</span>)</span><br><span class="line">      .<span class="title function_">setAudience</span>(process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_APP_ID</span>)</span><br><span class="line">      .<span class="title function_">setIssuedAt</span>()</span><br><span class="line">      .<span class="title function_">setExpirationTime</span>(<span class="string">&#x27;1h&#x27;</span>)</span><br><span class="line">      .<span class="title function_">setNotBefore</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() / <span class="number">1000</span>)</span><br><span class="line">      .<span class="title function_">encode</span>()</span><br><span class="line">    idToken = jwt</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 本番モード</span></span><br><span class="line">    <span class="keyword">if</span> (_auth.<span class="title function_">getAllAccounts</span>().<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      _auth.<span class="title function_">setActiveAccount</span>(_auth.<span class="title function_">getAllAccounts</span>()[<span class="number">0</span>])</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> _auth.<span class="title function_">acquireTokenSilent</span>(&#123;</span><br><span class="line">        <span class="attr">scopes</span>: [<span class="string">`<span class="subst">$&#123;process.env.VUE_APP_AZURE_APP_ID&#125;</span>/.default`</span>],</span><br><span class="line">        <span class="attr">redirectUri</span>: config.<span class="property">auth</span>.<span class="property">redirectUri</span></span><br><span class="line">      &#125;)</span><br><span class="line">      idToken = result.<span class="property">idToken</span></span><br><span class="line">      <span class="keyword">return</span> idToken</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _auth.<span class="title function_">acquireTokenRedirect</span>(&#123;</span><br><span class="line">        <span class="attr">redirectStartPage</span>: location.<span class="property">href</span>,</span><br><span class="line">        <span class="attr">scopes</span>: [<span class="string">`<span class="subst">$&#123;process.env.VUE_APP_AZURE_APP_ID&#125;</span>/.default`</span>],</span><br><span class="line">        <span class="attr">redirectUri</span>: config.<span class="property">auth</span>.<span class="property">redirectUri</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!process.<span class="property">env</span>.<span class="property">AZURE_DUMMY_USER</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _auth.<span class="title function_">logoutRedirect</span>(&#123;</span><br><span class="line">      <span class="attr">postLogoutRedirectUri</span>: <span class="string">`<span class="subst">$&#123;location.protocol&#125;</span>//<span class="subst">$&#123;location.host&#125;</span>/`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで、AzureADがあるふりをしてそれっぽいIDトークンを作って返すコードができました。</p><p>サーバー側ではリクエストを受けるときにこのトークンを受けることになります。サーバー側も環境変数で少し動作をコントロールして、テストモードの時には署名の検証は行わない必要がありますが、expiration time(exp)、not before(nbf)、aud、issといったクレームを使った検証は可能です。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ログインが必要なサービスで、開発時にログイン回りをどう処理すればいいのか、というのはいつも悩むポイントです。いろんなログイン方式が使えるサーバーであればID&#x2F;パスワードでログインする機構を別に作ったり、本番同等の認証サーバーを立てて、テストユーザーを入れるなどもあるでしょう。ですが、外部システムへの依存があると結合テストやCIがやりにくくなったりもしますし、処理時間も伸びてしまいます。あと、せっかくMSAL.jsを使えば認証の組み込みが簡単なのに、認証回り以外にたくさんのif文が入るのもうれしくありません。</p><p>今回はテスト用にAzureADのログインをバイパスしダミーのJWTを作るという方向で実装しました。比較的影響範囲をログイン回りに閉じ込めつつ実装できたんじゃないかな、と思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/">認証認可</category>
      
      
      <category domain="https://future-architect.github.io/tags/Azure/">Azure</category>
      
      <category domain="https://future-architect.github.io/tags/MSAL-js/">MSAL.js</category>
      
      <category domain="https://future-architect.github.io/tags/AzureAD/">AzureAD</category>
      
      
      <comments>https://future-architect.github.io/articles/20221220a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>tree-sitter文法入門</title>
      <link>https://future-architect.github.io/articles/20221215a/</link>
      <guid>https://future-architect.github.io/articles/20221215a/</guid>
      <pubDate>Wed, 14 Dec 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221215a/tree-sitter-small.png&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;

&lt;p&gt;こちらは&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221215a/tree-sitter-small.png" alt="" width="400" height="400"><p>こちらは<a href="https://qiita.com/advent-calendar/2022/postgresql">PostgreSQL Advent Calendar 2022</a> カレンダー2枚目・15日目の投稿となります。<br>前回は、<a href="https://qiita.com/hmatsu47">@hmatsu47</a>さんの<a href="https://qiita.com/hmatsu47/items/8de48e81a660eabe4bf0">Supabase で TCE（透過的列暗号化）を軽く試してみた</a>でした。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、フューチャーでアルバイトをしている齋藤です。以前は同社のインターンでSQLフォーマッタを作成していました(<a href="/articles/20220916b/">記事</a>)。現在はインターン中に作成していたSQLフォーマッタをPostgreSQLの構文に対応させる作業に取り組んでいます。</p><p>このフォーマッタではSQLパーサにtree-sitter-sqlを利用していますが、対応していない構文がいくつか存在します。本記事では、未対応の構文であるBETWEEN述語を例に、tree-sitterの構文拡張の手順を紹介します。開発中のSQLフォーマッタはOSS公開予定ですので、ぜひ仲間を増やしたいという思いから記事にしました。</p><p>また、現在作成中のフォーマッタのVSCode拡張機能化にも取り組んでいます。ぜひそちらも併せてご覧ください！</p><p>VSCode拡張機能化に関する記事:</p><ol><li><a href="/articles/20221124a/">Language Server Protocolを用いたVSCode拡張機能開発 (前編) | フューチャー技術ブログ</a></li><li><a href="/articles/20221125a/">Language Server Protocolを用いたVSCode拡張機能開発 (後編) | フューチャー技術ブログ</a></li></ol><h1 id="アウトライン"><a href="#アウトライン" class="headerlink" title="アウトライン"></a>アウトライン</h1><p>本記事のアウトラインは以下の通りです。</p><ol><li>tree-sitter、tree-sitter-sqlについて</li><li>tree-sitterの構文拡張用の環境構築</li><li>構文木を出力するプログラムの実装</li><li>構文についての説明</li><li>BETWEEN述語の規則を追加</li></ol><h1 id="tree-sitter"><a href="#tree-sitter" class="headerlink" title="tree-sitter"></a>tree-sitter</h1><p><a href="https://tree-sitter.github.io/tree-sitter/">tree-sitter</a>は文法からパーサ(構文解析器)を自動生成するパーサジェネレータツールであり、生成されたパーサで構文解析を行うライブラリでもあります。特徴として、一般的なパーサライブラリでは抽象構文木(AST)を構築するのに対し、tree-sitterで生成されたパーサは具象構文木(CST)を構築するという点があげられます。CSTについては<a href="/articles/20220916c/#:~:text=AST%E3%81%8C%E6%84%8F%E5%91%B3%E3%81%AE%E3%81%AA%E3%81%84%E6%83%85%E5%A0%B1(%E4%BE%8B:%20%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%82%84%E5%A4%9A%E9%87%8D%E6%8B%AC%E5%BC%A7%E3%81%AA%E3%81%A9)%E3%82%92%E4%BF%9D%E6%8C%81%E3%81%97%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E3%80%81CST%E3%81%AF%E3%81%9D%E3%81%AE%E3%82%88%E3%81%86%E3%81%AA%E6%83%85%E5%A0%B1%E3%82%82%E4%BF%9D%E6%8C%81%E3%81%97%E3%81%BE%E3%81%99%E3%80%82">インターンの記事</a>で取り上げています。</p><p>構築されるCSTにはコメントトークンも含まれてるため、シンタックスハイライトに用いられているようです。<br>参考:</p><ul><li><a href="https://www.soum.co.jp/misc/vim-advanced/6/">Vimのすゝめ改 - Tree-sitter について | 株式会社創夢 — SOUM&#x2F;misc</a></li><li><a href="https://zenn.dev/hyakt/articles/6ff892c2edbabb">EmacsでTree-sitterを利用してシンタックスハイライトできるようにする</a></li></ul><h1 id="tree-sitter-sql"><a href="#tree-sitter-sql" class="headerlink" title="tree-sitter-sql"></a>tree-sitter-sql</h1><p><a href="https://github.com/m-novikov/tree-sitter-sql">tree-sitter-sql</a>はtree-sitter用に書かれたSQLの文法とその文法によって生成されたパーサライブラリです。SQLの中でも、PostgreSQLにフォーカスしていたようです。インターンで作成したフォーマッタは、このライブラリによる構文解析結果をもちいてSQLのフォーマットを行っています。</p><p>しかし、BETWEEN述語や<code>UNION</code>、<code>INTERSECT</code>などの結合演算など、基本的な構文であるにもかかわらず、対応していない構文が存在します。本記事では、その中でもBETWEEN述語に対応させるための構文拡張を行います。</p><h1 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h1><p>まず、tree-sitterの構文拡張のために行った環境構築について説明します。</p><h3 id="tree-sitter-cliのインストール"><a href="#tree-sitter-cliのインストール" class="headerlink" title="tree-sitter-cliのインストール"></a>tree-sitter-cliのインストール</h3><p>tree-sitterでパーサを生成するために、tree-sitter-cliをインストールします(参考<a href="https://tree-sitter.github.io/tree-sitter/creating-parsers#getting-started">Tree-sitter | Creating Parser</a>)。また、tree-sitterによるパーサを開発するためには、Node.jsとCコンパイラが必要です。今回使用したバージョンは以下の通りです。</p><div class="scroll"><table><thead><tr><th>tools</th><th>バージョン</th></tr></thead><tbody><tr><td>node</td><td>16.17.1</td></tr><tr><td>gcc</td><td>12.2.0</td></tr><tr><td>tree-sitter</td><td>0.20.7</td></tr></tbody></table></div><h3 id="tree-sitter-sqlのインストール"><a href="#tree-sitter-sqlのインストール" class="headerlink" title="tree-sitter-sqlのインストール"></a>tree-sitter-sqlのインストール</h3><p><a href="https://github.com/m-novikov/tree-sitter-sql">tree-sitter-sql</a>をcloneします。tree-sitter用のSQL構文はいくつかありますが、今回は最もスター数が多いものを選択しました。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/m-novikov/tree-sitter-sql.git</span></span><br></pre></td></tr></table></figure><p><code>git clone</code>を行うと、以下のようなエラーが発生する場合があります。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: unable to create file [filepath]: Filename too long</span><br></pre></td></tr></table></figure><p>これはファイル名が長すぎることが問題であるようなので、以下の設定を行うことで解決します。</p><figure class="highlight console"><figcaption><span>gitの設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.longpaths <span class="literal">true</span></span></span><br></pre></td></tr></table></figure><p><code>git clone</code> したtree-sitter-sqlのルートディレクトリで、<code>tree-sitter test</code> コマンドでテストが動作したら環境構築終了です。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ./tree-sitter-sql</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree-sitter <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><h3 id="構文解析例"><a href="#構文解析例" class="headerlink" title="構文解析例"></a>構文解析例</h3><p>実際にパースしてみましょう。以下のファイルを用意します。</p><figure class="highlight sql"><figcaption><span>exapmles/simple.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT</span><br></pre></td></tr></table></figure><p><code>tree-sitter parse</code>コマンドで、ソースファイルをパースすることができます。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ tree-sitter parse ./exapmles/simple.sql</span><br><span class="line">(<span class="name">source_file</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]</span><br><span class="line">  (<span class="name">select_statement</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]</span><br><span class="line">    (<span class="name">select_clause</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>]</span><br><span class="line">      (<span class="name">select_clause_body</span> [<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>]</span><br><span class="line">        (<span class="name">identifier</span> [<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>])))</span><br><span class="line">    (<span class="name">from_clause</span> [<span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]</span><br><span class="line">      (<span class="name">identifier</span> [<span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]))))</span><br></pre></td></tr></table></figure><h1 id="CSTの出力について"><a href="#CSTの出力について" class="headerlink" title="CSTの出力について"></a>CSTの出力について</h1><p>上述した<code>tree-sitter parse</code>により出力される結果では、ノードのラベルのみ表示されており、識別子やキーワードなどが表示されません。そこで、パース結果からCSTを出力する処理を自作しました。</p><p>言語にはRustを使用します。</p><h3 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h3><p><code>tree-sitter-sql</code>の結果を利用してCSTを出力するためのプロジェクトを作成します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new print-cst</span><br></pre></td></tr></table></figure><p><code>Cargo.toml</code>に次の依存関係を追加します。</p><figure class="highlight toml"><figcaption><span>print-cst/Cargo.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">tree-sitter</span> = <span class="string">&quot;~0.20.3&quot;</span></span><br><span class="line"><span class="attr">tree-sitter-sql</span> = &#123;path = <span class="string">&quot;&#123;tree-sitter-sqlのパス&#125;&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>また、Github上のtree-sitter-sqlが使用しているtree-sitterのバージョンが古い(2022年11月22日現在)ため、tree-sitter-cliとtree-sitterのバージョン不整合が生じる可能性があります。バージョン不整合が生じるとき、後述するプログラムを実行すると以下のような実行時エラーが発生します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thread &#x27;main&#x27; panicked at &#x27;called `Result::unwrap()` on an `Err` value: LanguageError &#123; version: 14 &#125;&#x27;, src\lib.rs:16:35</span><br><span class="line">note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace</span><br></pre></td></tr></table></figure><p>この場合、tree-sitter-sqlの<code>Cargo.toml</code>も修正する必要があります。</p><figure class="highlight toml"><figcaption><span>tree-sitter-sql/Cargo.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">tree-sitter</span> = <span class="string">&quot;~0.20.3&quot;</span></span><br></pre></td></tr></table></figure><h3 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h3><p><code>main.rs</code>に次のように実装しました。</p><figure class="highlight rust"><figcaption><span>main.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::read_to_string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> tree_sitter::TreeCursor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">language</span> = tree_sitter_sql::<span class="title function_ invoke__">language</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">parser</span> = tree_sitter::Parser::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    parser.<span class="title function_ invoke__">set_language</span>(language).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">src_file</span> = std::env::<span class="title function_ invoke__">args</span>().<span class="title function_ invoke__">nth</span>(<span class="number">1</span>).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;arguments error&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">src</span> = <span class="title function_ invoke__">read_to_string</span>(&amp;src_file).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tree</span> = parser.<span class="title function_ invoke__">parse</span>(&amp;src, <span class="literal">None</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">if</span> tree.<span class="title function_ invoke__">root_node</span>().<span class="title function_ invoke__">has_error</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">cursor</span> = tree.<span class="title function_ invoke__">walk</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">visit</span>(&amp;<span class="keyword">mut</span> cursor, <span class="number">0</span>, &amp;src);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UNIT: <span class="type">usize</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">visit</span>(cursor: &amp;<span class="keyword">mut</span> TreeCursor, depth: <span class="type">usize</span>, src: &amp;<span class="type">str</span>) &#123;</span><br><span class="line">    <span class="comment">// インデント</span></span><br><span class="line">    (<span class="number">0</span>..(depth * UNIT)).<span class="title function_ invoke__">for_each</span>(|_| <span class="built_in">print!</span>(<span class="string">&quot; &quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">kind</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子供がいないかつ、キーワードでない場合、対応する文字列を表示</span></span><br><span class="line">    <span class="keyword">if</span> cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">child_count</span>() == <span class="number">0</span> &amp;&amp; cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">kind</span>().<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">any</span>(|c| c.<span class="title function_ invoke__">is_lowercase</span>()) &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot; \&quot;&#123;&#125;\&quot;&quot;</span>, cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">utf8_text</span>(src.<span class="title function_ invoke__">as_bytes</span>()).<span class="title function_ invoke__">unwrap</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">&quot; [&#123;&#125;-&#123;&#125;]&quot;</span>,</span><br><span class="line">        cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">start_position</span>(),</span><br><span class="line">        cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">end_position</span>()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子供を走査</span></span><br><span class="line">    <span class="keyword">if</span> cursor.<span class="title function_ invoke__">goto_first_child</span>() &#123;</span><br><span class="line">        <span class="title function_ invoke__">visit</span>(cursor, depth + <span class="number">1</span>, src);</span><br><span class="line">        <span class="keyword">while</span> cursor.<span class="title function_ invoke__">goto_next_sibling</span>() &#123;</span><br><span class="line">            <span class="title function_ invoke__">visit</span>(cursor, depth + <span class="number">1</span>, src);</span><br><span class="line">        &#125;</span><br><span class="line">        cursor.<span class="title function_ invoke__">goto_parent</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="実行例"><a href="#実行例" class="headerlink" title="実行例"></a>実行例</h3><p>作成したプログラムを用いて、実際にCSTを表示してみましょう。</p><figure class="highlight sql"><figcaption><span>exapmles/simple.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT</span><br></pre></td></tr></table></figure><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cargo run ./examples/simple.sql</span><br><span class="line">source_file [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">12</span>)]</span><br><span class="line">  select_statement [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">9</span>)]</span><br><span class="line">    select_clause [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">      SELECT [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">      select_clause_body [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">7</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">9</span>)]</span><br><span class="line">        identifier <span class="string">&quot;ID&quot;</span> [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">7</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">9</span>)]</span><br><span class="line">    from_clause [(<span class="number">1</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>)]</span><br><span class="line">      FROM [(<span class="number">1</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>)]</span><br><span class="line">      identifier <span class="string">&quot;STUDENT&quot;</span> [(<span class="number">1</span><span class="punctuation">,</span> <span class="number">5</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">12</span>)]</span><br></pre></td></tr></table></figure><p>ノードに対応する文字列とキーワードを出力することができました。</p><h1 id="構文例"><a href="#構文例" class="headerlink" title="構文例"></a>構文例</h1><p>次に、tree-sitter用の構文について簡単に紹介します。</p><p>tree-sitter では文法を <code>grammar.js</code> に記述します。clone した tree-sitter-sql のルートディレクトリにある <code>grammar.js</code>を編集していきます。ここではDSL(<a href="https://ja.wikipedia.org/wiki/%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%9B%BA%E6%9C%89%E8%A8%80%E8%AA%9E">ドメイン固有言語</a>)について細かくは説明しないので、詳しく知りたい方は<a href="https://tree-sitter.github.io/tree-sitter/creating-parsers#the-grammar-dsl">tree-sitterのドキュメント</a>を参照してください。</p><h3 id="規則"><a href="#規則" class="headerlink" title="規則"></a>規則</h3><p>例えば、tree-sitter-sql で WHERE句は以下のように記述されています(<a href="https://github.com/m-novikov/tree-sitter-sql/blob/218b672499729ef71e4d66a949e4a1614488aeaa/grammar.js#L909">where_clauseの定義</a>)。</p><figure class="highlight js"><figcaption><span>WHERE句の規則</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">where_clause</span>: $ =&gt; <span class="title function_">seq</span>(<span class="title function_">kw</span>(<span class="string">&quot;WHERE&quot;</span>), $._expression)</span><br></pre></td></tr></table></figure><p><code>seq</code>はtree-sitterの文法のDSLの一つで、複数の規則を連結することができます。上の例では、<code>kw(&quot;WHERE&quot;)</code>のあとに<code>$._expression</code>が現れることを示しています。</p><p><code>kw</code>関数はtree-sitter-sqlの<code>grammar.js</code>で定義されている関数で、キーワード(<code>k</code>ey<code>w</code>ord)が大文字か小文字であるかを考慮しなくするなどの処理を行います。パース時には、<code>where</code>や<code>WHERE</code>というキーワードとマッチします(<a href="https://github.com/m-novikov/tree-sitter-sql/blob/218b672499729ef71e4d66a949e4a1614488aeaa/grammar.js#L29">kw関数の定義</a>)。</p><h3 id="アンダースコアから始まる規則"><a href="#アンダースコアから始まる規則" class="headerlink" title="アンダースコアから始まる規則"></a>アンダースコアから始まる規則</h3><p>規則名の先頭の文字をアンダースコアから始めることで、生成されるCSTにノードとして出現させないように設定することができます(<a href="https://tree-sitter.github.io/tree-sitter/creating-parsers#hiding-rules">ドキュメント</a>)。例えば、算術演算や識別子、リテラルなどの式は<code>_expression</code>という名前で以下のように定義されています。</p><figure class="highlight js"><figcaption><span>式に対応する規則</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">_expression</span>: $ =&gt;</span><br><span class="line">     <span class="title function_">choice</span>(</span><br><span class="line">       $.string,</span><br><span class="line">       $.<span class="variable constant_">TRUE</span>,</span><br><span class="line">       $.<span class="variable constant_">FALSE</span>,</span><br><span class="line">       $.<span class="variable constant_">NULL</span>,</span><br><span class="line">       $._identifier,</span><br><span class="line">       $.number,</span><br><span class="line">       $.unary_expression,</span><br><span class="line">       <span class="comment">// 一部省略</span></span><br><span class="line">     ),</span><br></pre></td></tr></table></figure><p><code>choice</code>はtree-sitterのDSLで、引数のうちいずれか1つとマッチすることを意味しています。つまり、この規則は、文字列や<code>TRUE</code>、<code>FALSE</code>など各式に対応した規則を呼び出し、いずれか一つとマッチすることになります。つまり、ソースファイル中に式が現れるたびに<code>_expression</code>が呼び出されています。これがCST上に現れると、例えば<code>1+2-3</code>という式のパース結果が以下のようになってしまいます。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">_expression</span></span><br><span class="line">  (<span class="name">binary_expression</span></span><br><span class="line">    (<span class="name">_expression</span></span><br><span class="line">      (<span class="name">binary_expression</span></span><br><span class="line">        (<span class="name">_expression</span></span><br><span class="line">          (<span class="name">number</span> <span class="string">&quot;1&quot;</span>))</span><br><span class="line">        (<span class="string">&quot;+&quot;</span>)</span><br><span class="line">        (<span class="name">_expression</span></span><br><span class="line">          (<span class="name">number</span> <span class="string">&quot;2&quot;</span>)))</span><br><span class="line">    (<span class="string">&quot;-&quot;</span>)</span><br><span class="line">    (<span class="name">_expression</span></span><br><span class="line">      (<span class="name">number</span> <span class="string">&quot;3&quot;</span>))))</span><br></pre></td></tr></table></figure><p>アンダースコアから始めることで、CST上に現れないように設定でき、以下のようにシンプルな木にすることができます。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">binary_expression</span></span><br><span class="line">  (<span class="name">binary_expression</span></span><br><span class="line">    (<span class="name">number</span> <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    (<span class="string">&quot;+&quot;</span>)</span><br><span class="line">    (<span class="name">number</span> <span class="string">&quot;2&quot;</span>))</span><br><span class="line">  (<span class="string">&quot;-&quot;</span>)</span><br><span class="line">  (<span class="name">number</span> <span class="string">&quot;3))</span></span><br></pre></td></tr></table></figure><h3 id="優先度、結合性"><a href="#優先度、結合性" class="headerlink" title="優先度、結合性"></a>優先度、結合性</h3><p>ここで詳細は述べませんが、tree-sitterは明示しない場合、曖昧な文法を扱うことができません(<a href="https://tree-sitter.github.io/tree-sitter/creating-parsers#the-grammar-dsl:~:text=conflicts%20%2D%20an%20array,dynamic%20precedence.">参考</a>)。</p><p>例えば、以下のような論理式を考えてみます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">NOT</span> X <span class="keyword">AND</span> Y <span class="keyword">OR</span> Z</span><br></pre></td></tr></table></figure><p>この式はどのように解釈されるでしょうか？<code>NOT (X AND (Y OR Z))</code>や<code>(NOT X) AND (Y OR Z)</code>、<code>((NOT X) AND Y) OR Z</code>など、複数通りに解釈できてしまうと思います。このように、複数通りの解釈ができてしまうような文法を曖昧な文法といい、そのままではパースできません。</p><p>これは、優先度・結合性を文法に記述することで対処できます。tree-sitter-sqlでは優先度をJavascriptの定数として以下のように定義しています。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PREC</span> = &#123;</span><br><span class="line">  <span class="attr">primary</span>: <span class="number">8</span>,</span><br><span class="line">  <span class="attr">unary</span>: <span class="number">7</span>,             <span class="comment">// 単項演算子</span></span><br><span class="line">  <span class="attr">exp</span>: <span class="number">6</span>,               <span class="comment">// 累乗</span></span><br><span class="line">  <span class="attr">multiplicative</span>: <span class="number">5</span>,    <span class="comment">// 乗除算</span></span><br><span class="line">  <span class="attr">additive</span>: <span class="number">4</span>,          <span class="comment">// 加減算</span></span><br><span class="line">  <span class="attr">comparative</span>: <span class="number">3</span>,       <span class="comment">// 比較演算子</span></span><br><span class="line">  <span class="attr">and</span>: <span class="number">2</span>,               <span class="comment">// AND</span></span><br><span class="line">  <span class="attr">or</span>: <span class="number">1</span>,                <span class="comment">// OR</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>これを用いて、論理式に優先度・結合性を加えて記述した規則は次のようになります。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">boolean_expression</span>: $ =&gt;</span><br><span class="line">  <span class="title function_">choice</span>(</span><br><span class="line">    prec.<span class="title function_">left</span>(<span class="variable constant_">PREC</span>.<span class="property">unary</span>, <span class="title function_">seq</span>(<span class="title function_">kw</span>(<span class="string">&quot;NOT&quot;</span>), $._expression)), <span class="comment">// 優先度7</span></span><br><span class="line">    prec.<span class="title function_">left</span>(<span class="variable constant_">PREC</span>.<span class="property">and</span>, <span class="title function_">seq</span>($._expression, <span class="title function_">kw</span>(<span class="string">&quot;AND&quot;</span>), $._expression)),  <span class="comment">// 優先度2</span></span><br><span class="line">    prec.<span class="title function_">left</span>(<span class="variable constant_">PREC</span>.<span class="property">or</span>, <span class="title function_">seq</span>($._expression, <span class="title function_">kw</span>(<span class="string">&quot;OR&quot;</span>), $._expression)), <span class="comment">// 優先度1</span></span><br><span class="line">  ),</span><br></pre></td></tr></table></figure><p>優先度は、<code>NOT &gt; AND &gt; OR</code>になっています。優先度が高いものほど優先して結合されるため、上述の論理式をtree-sitter-sqlでパースすると、<code>((NOT X) AND Y) OR Z</code>と解釈されます。なお、<code>prec.left</code>は左結合であることを意味しています。</p><h3 id="extras"><a href="#extras" class="headerlink" title="extras"></a>extras</h3><p>ファイルのどこに現れてもよい規則をextrasで記述することができます。<br>これを使って、コメントや空白、改行を簡単に記述することができます(<a href="https://github.com/m-novikov/tree-sitter-sql/blob/218b672499729ef71e4d66a949e4a1614488aeaa/grammar.js#L75">コメント、空白の定義</a>)が、CST上では直感的でない場所位置に現れる場合もあります(<a href="https://future-architect.github.io/articles/20220916c/#:~:text=%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E6%83%85%E5%A0%B1%E3%81%AFCST%E4%B8%8A%E3%81%AB%E4%BF%9D%E6%8C%81%E3%81%95%E3%82%8C%E3%81%BE%E3%81%99%E3%81%8C%E3%80%81%E7%9B%B4%E6%84%9F%E7%9A%84%E3%81%A7%E3%81%AA%E3%81%84%E4%BD%8D%E7%BD%AE%E3%81%AB%E7%8F%BE%E3%82%8C%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86%E5%A0%B4%E5%90%88%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82">インターンの記事後編</a>参照)。</p><h1 id="BETWEEN述語への対応"><a href="#BETWEEN述語への対応" class="headerlink" title="BETWEEN述語への対応"></a>BETWEEN述語への対応</h1><p>現状のtree-sitter-sqlを使用して、<code>BETWEEN</code>を含むSQLをパースできるか確認してみましょう。以下のようなファイルを用意します。</p><figure class="highlight sql"><figcaption><span>examples/between.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    GRADE   <span class="keyword">BETWEEN</span> <span class="number">80</span>  <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">AND</span> ID      <span class="keyword">BETWEEN</span> <span class="number">0</span>   <span class="keyword">AND</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ tree-sitter parse .<span class="character">\e</span>xamples<span class="character">\b</span>etween.sql</span><br><span class="line">(<span class="name">source_file</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">7</span><span class="punctuation">,</span> <span class="number">0</span>]</span><br><span class="line">  (<span class="name">select_statement</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>]</span><br><span class="line">    (<span class="name">select_clause</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>]</span><br><span class="line">      (<span class="name">select_clause_body</span> [<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>]</span><br><span class="line">        (<span class="name">identifier</span> [<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>])))</span><br><span class="line">    (<span class="name">from_clause</span> [<span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]</span><br><span class="line">      (<span class="name">identifier</span> [<span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]))</span><br><span class="line">    (<span class="name">where_clause</span> [<span class="number">4</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>]</span><br><span class="line">      (<span class="name">boolean_expression</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>]</span><br><span class="line">        (<span class="name">boolean_expression</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">6</span>]</span><br><span class="line">          (<span class="name">boolean_expression</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">5</span><span class="punctuation">,</span> <span class="number">31</span>]</span><br><span class="line">            (<span class="name">identifier</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">5</span><span class="punctuation">,</span> <span class="number">9</span>])</span><br><span class="line">            (<span class="name">ERROR</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">12</span>] - [<span class="number">5</span><span class="punctuation">,</span> <span class="number">22</span>])</span><br><span class="line">            (<span class="name">number</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">28</span>] - [<span class="number">5</span><span class="punctuation">,</span> <span class="number">31</span>]))</span><br><span class="line">          (<span class="name">identifier</span> [<span class="number">6</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">6</span>]))</span><br><span class="line">        (<span class="name">ERROR</span> [<span class="number">6</span><span class="punctuation">,</span> <span class="number">12</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">21</span>])</span><br><span class="line">        (<span class="name">number</span> [<span class="number">6</span><span class="punctuation">,</span> <span class="number">28</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>])))))</span><br><span class="line">.<span class="character">\e</span>xamples<span class="character">\b</span>etween.sql  <span class="number">0</span> ms    (<span class="name">ERROR</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">12</span>] - [<span class="number">5</span><span class="punctuation">,</span> <span class="number">22</span>])</span><br></pre></td></tr></table></figure><p>構文エラーが発生し、WHERE句内のBETWEEN述語には対応していないことがわかります。<a href="https://github.com/m-novikov/tree-sitter-sql/blob/218b672499729ef71e4d66a949e4a1614488aeaa/grammar.js#L1071">grammar.jsを見てみるとBETWEENというキーワードはWINDOW関数のFRAME句にしか想定していない</a>ため、BETWEENがERRORノードと扱われているようです。</p><h3 id="規則の追加"><a href="#規則の追加" class="headerlink" title="規則の追加"></a>規則の追加</h3><p>BETWEEN述語に対応する規則がそもそも存在していないことがわかったため、文法を拡張することで対応していきます。</p><p>BETWEEN述語は次のような構文になっています。<a href="https://www.postgresql.jp/document/14/html/functions-comparison.html">PostgreSQLのドキュメント</a>では構文について詳しく書かれていなかったので、<a href="https://docs.oracle.com/cd/E57425_01/121/SQLRF/conditions012.htm#sthref1111">Oracle SQLのドキュメント</a>を参考にしました。</p><figure class="highlight sql"><figcaption><span>BETWEEN述語の構文</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(expression) (<span class="keyword">NOT</span>)? <span class="keyword">BETWEEN</span> (expression) <span class="keyword">AND</span> (expression)</span><br></pre></td></tr></table></figure><p>なお、<code>(NOT)?</code> は正規表現で使われる <code>?</code> と同じ意味で、 <code>NOT</code> が0回または1回現れることを表現しています。tree-sitterの構文では、<code>optional</code>というDSLで表現されます。</p><p>率直にDSLに直すと、次のような規則が書けます。</p><figure class="highlight js"><figcaption><span>率直に書いたBETWEENの規則</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">between_and_expression</span>: $ =&gt;</span><br><span class="line">  <span class="title function_">seq</span>($._expression, <span class="title function_">optional</span>(<span class="title function_">kw</span>(<span class="string">&quot;NOT&quot;</span>)), <span class="title function_">kw</span>(<span class="string">&quot;BETWEEN&quot;</span>),</span><br><span class="line">      $._expression, <span class="title function_">kw</span>(<span class="string">&quot;AND&quot;</span>), $._expression)</span><br></pre></td></tr></table></figure><p>この規則をSQLの式に対応する規則<code>_expression</code>に追加します。</p><figure class="highlight diff"><figcaption><span>_expressionへの追加</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    _expression: $ =&gt;</span><br><span class="line">      choice(</span><br><span class="line">        $.string,</span><br><span class="line">        $.TRUE,</span><br><span class="line">        $.FALSE,</span><br><span class="line">        // 省略</span><br><span class="line"><span class="addition">+       $.between_and_expression,</span></span><br><span class="line">      ),</span><br></pre></td></tr></table></figure><p>これでBETWEEN述語の規則を追加することができました。拡張した文法をもとにパーサを生成してみましょう。以下のコマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ tree-sitter generate</span><br><span class="line">Unresolved conflict <span class="keyword">for</span> symbol sequence:</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;grant_statement_token4&#x27;</span>  _expression  <span class="string">&#x27;create_trigger_statement_token1&#x27;</span>  _expression  •  <span class="string">&#x27;cte_token2&#x27;</span>  …</span><br><span class="line"></span><br><span class="line">Possible interpretations:</span><br><span class="line"></span><br><span class="line">  1:  <span class="string">&#x27;grant_statement_token4&#x27;</span>  (boolean_expression  _expression  <span class="string">&#x27;create_trigger_statement_token1&#x27;</span>  _expression)  •  <span class="string">&#x27;cte_token2&#x27;</span>  …</span><br><span class="line">                                                            (precedence: 1, associativity: Left)</span><br><span class="line">  2:  <span class="string">&#x27;grant_statement_token4&#x27;</span>  _expression  <span class="string">&#x27;create_trigger_statement_token1&#x27;</span>  (between_and_expression  _expression  •  <span class="string">&#x27;cte_token2&#x27;</span>  <span class="string">&#x27;frame_clause_token1&#x27;</span>  _expression  <span class="string">&#x27;frame_clause_token2&#x27;</span>  _expression)</span><br><span class="line">  3:  <span class="string">&#x27;grant_statement_token4&#x27;</span>  _expression  <span class="string">&#x27;create_trigger_statement_token1&#x27;</span>  (in_expression  _expression  •  <span class="string">&#x27;cte_token2&#x27;</span>  <span class="string">&#x27;create_function_parameter_token1&#x27;</span>  tuple)                                        (precedence: 3, associativity: Left)</span><br><span class="line"></span><br><span class="line">Possible resolutions:</span><br><span class="line"></span><br><span class="line">  1:  Specify a higher precedence <span class="keyword">in</span> `in_expression` and `between_and_expression` than <span class="keyword">in</span> the other rules.</span><br><span class="line">  2:  Specify a higher precedence <span class="keyword">in</span> `boolean_expression` than <span class="keyword">in</span> the other rules.</span><br><span class="line">  3:  Add a conflict <span class="keyword">for</span> these rules: `in_expression`, `between_and_expression`, `boolean_expression`</span><br></pre></td></tr></table></figure><p>エラーが発生してしまい、パーサが生成できませんでした。これは、上述した規則では優先度を記述していないため、文法が曖昧になってしまっていることが原因です。例えば、<code>X BETWEEN Y AND Z AND W</code>の<code>AND</code>がBETWEEN述語のものなのか、論理式のものなのかをパーサが自動で判別することができません。つまり、<code>X BETWEEN (Y AND Z) AND W</code>や<code>(X BETWEEN Y AND Z) AND W</code>など、複数の解釈ができてしまいます。</p><p>そこで、優先度と結合性を追加します。</p><figure class="highlight javascript"><figcaption><span>優先度と結合性を追加したBETWEENの規則</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">between_and_expression</span>: $ =&gt;</span><br><span class="line">  prec.<span class="title function_">left</span>(</span><br><span class="line">    <span class="variable constant_">PREC</span>.<span class="property">comparative</span>,</span><br><span class="line">    <span class="title function_">seq</span>($._expression, <span class="title function_">optional</span>(<span class="title function_">kw</span>(<span class="string">&quot;NOT&quot;</span>)), <span class="title function_">kw</span>(<span class="string">&quot;BETWEEN&quot;</span>),</span><br><span class="line">        $._expression, <span class="title function_">kw</span>(<span class="string">&quot;AND&quot;</span>), $._expression)</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure><p><code>prec.left</code>は左結合であることを示し、<code>PREC.comparative</code>で比較演算子と同じ優先度であることを指定しています。比較演算子は<code>AND</code>よりも高い優先度であるため、<code>X BETWEEN Y AND Z AND W</code>は<code>(X BETWEEN Y AND Z) AND W</code>と解釈されます。</p><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>次のファイルをパースしてみましょう。</p><figure class="highlight sql"><figcaption><span>examples/between.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    GRADE   <span class="keyword">BETWEEN</span> <span class="number">80</span>  <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">AND</span> ID      <span class="keyword">BETWEEN</span> <span class="number">0</span>   <span class="keyword">AND</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><p>以下のコマンドでパーサを生成します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree-sitter generate</span></span><br></pre></td></tr></table></figure><p>先ほど作成した <code>print-cst</code>を用いて、パース結果を出力します。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ cd [print-cstのパス]</span><br><span class="line">$ cargo run ./examples/between.sql</span><br><span class="line">source_file [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>)]</span><br><span class="line">  select_statement [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">    select_clause [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">      SELECT [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">      select_clause_body [(<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">        identifier <span class="string">&quot;ID&quot;</span> [(<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">    from_clause [(<span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span>)]</span><br><span class="line">      FROM [(<span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span>)]</span><br><span class="line">      identifier <span class="string">&quot;STUDENT&quot;</span> [(<span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>)]</span><br><span class="line">    where_clause [(<span class="number">4</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span>)]</span><br><span class="line">      WHERE [(<span class="number">4</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span>)]</span><br><span class="line">      boolean_expression [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">31</span>)]</span><br><span class="line">        between_and_expression [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">9</span>)]</span><br><span class="line">          identifier <span class="string">&quot;GRADE&quot;</span> [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">9</span>)]</span><br><span class="line">          BETWEEN [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">12</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">19</span>)]</span><br><span class="line">          number <span class="string">&quot;80&quot;</span> [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">20</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">22</span>)]</span><br><span class="line">          AND [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">24</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">27</span>)]</span><br><span class="line">          number <span class="string">&quot;100&quot;</span> [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">28</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">31</span>)]</span><br><span class="line">        AND [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">3</span>)]</span><br><span class="line">        between_and_expression [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">          identifier <span class="string">&quot;ID&quot;</span> [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">          BETWEEN [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">12</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">19</span>)]</span><br><span class="line">          number <span class="string">&quot;0&quot;</span> [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">20</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">21</span>)]</span><br><span class="line">          AND [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">24</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">27</span>)]</span><br><span class="line">          number <span class="string">&quot;100&quot;</span> [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">28</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>)]</span><br></pre></td></tr></table></figure><p>これで<code>BETWEEN</code>を含むSQLがパースできるようになりました！</p><h3 id="テストの追加"><a href="#テストの追加" class="headerlink" title="テストの追加"></a>テストの追加</h3><p>最後に、今回追加したBETWEEN述語の拡張を<code>tree-sitter test</code>(<a href="https://tree-sitter.github.io/tree-sitter/creating-parsers#command-test">Tree-sitter｜Creating Parsers</a>)でテストできるようにしましょう。</p><p><code>test/corpus/between.txt</code>を作成して、以下のように記述します。</p><figure class="highlight sql"><figcaption><span>test/corpus/between.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="keyword">BETWEEN</span> predicates</span><br><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    GRADE   <span class="keyword">BETWEEN</span> <span class="number">80</span>  <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">AND</span> ID      <span class="keyword">BETWEEN</span> <span class="number">0</span>   <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---------------------------------------</span></span><br><span class="line"></span><br><span class="line">(source_file</span><br><span class="line">  (select_statement</span><br><span class="line">    (select_clause</span><br><span class="line">      (select_clause_body</span><br><span class="line">        (identifier)))</span><br><span class="line">    (from_clause</span><br><span class="line">      (identifier))</span><br><span class="line">    (where_clause</span><br><span class="line">      (boolean_expression</span><br><span class="line">        (between_and_expression</span><br><span class="line">          (identifier)</span><br><span class="line">          (number)</span><br><span class="line">          (number))</span><br><span class="line">        (between_and_expression</span><br><span class="line">          (identifier)</span><br><span class="line">          (number)</span><br><span class="line">          (number))))))</span><br></pre></td></tr></table></figure><ul><li><code>=</code>で囲まれた行にテスト名を書きます</li><li>次に、入力として与えるソースコードを記述し、下に<code>---</code>を記述します</li><li>最後に期待する結果をS式で記述します</li></ul><p><code>tree-sitter test</code>でテストを行います。<code>-f</code>フラグを加えることで、特定のテストのみを実行することができます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ tree-sitter <span class="built_in">test</span> -f <span class="string">&#x27;BETWEEN predicates&#x27;</span></span><br><span class="line">  between:</span><br><span class="line">    ✓ BETWEEN predicates</span><br><span class="line">  create:</span><br><span class="line">  delete:</span><br><span class="line">  insert:</span><br><span class="line">  select:</span><br><span class="line">  statements:</span><br><span class="line">  update:</span><br><span class="line">syntax highlighting:</span><br><span class="line">  ✓ builtin.sql (49 assertions)</span><br><span class="line">  ✓ function.sql (16 assertions)</span><br><span class="line">  ✓ insert.sql (6 assertions)</span><br><span class="line">  ✓ keywords.sql (9 assertions)</span><br><span class="line">  ✓ punctuation.sql (2 assertions)</span><br><span class="line">  ✓ select.sql (43 assertions)</span><br><span class="line">  ✓ statements.sql (25 assertions)</span><br><span class="line">  ✓ table.sql (33 assertions)</span><br><span class="line">  ✓ type.sql (5 assertions)</span><br><span class="line">  ✓ update.sql (10 assertions)</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>本記事では、tree-sitter-sqlでBETWEEN述語を扱えるように構文拡張を行いました。tree-sitter用のSQL構文はまだまだ未完成なので、皆さんも一緒によりよいパーサを作ってみませんか？</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/SQL/">SQL</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%82%BF%E3%83%BC/">フォーマッター</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A7%8B%E6%96%87%E8%A7%A3%E6%9E%90/">構文解析</category>
      
      <category domain="https://future-architect.github.io/tags/tree-sitter/">tree-sitter</category>
      
      
      <comments>https://future-architect.github.io/articles/20221215a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Reactで決められた候補から選択させるコンボボックスを実装する（サーバーアクセスつき）</title>
      <link>https://future-architect.github.io/articles/20221213a/</link>
      <guid>https://future-architect.github.io/articles/20221213a/</guid>
      <pubDate>Mon, 12 Dec 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;技術コンサルを行っているお客様から質問があったのですが、なかなかドンピシャな情報がなく、試行錯誤したのでその検討結果をまとめてみました。&lt;/p&gt;
&lt;p&gt;実現したいのは以下のようなコンボボックスです&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IDのリストをユーザーに選択させる&lt;/li&gt;
&lt;l</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>技術コンサルを行っているお客様から質問があったのですが、なかなかドンピシャな情報がなく、試行錯誤したのでその検討結果をまとめてみました。</p><p>実現したいのは以下のようなコンボボックスです</p><ul><li>IDのリストをユーザーに選択させる</li><li>キーボードで絞り込みをかけられる</li><li>IDのリストは大量にあり、全件をあらかじめサーバーに問い合わせて取得するのはパフォーマンスが良くない</li></ul><p>コンボボックスと同義語的にも使われるドロップボックスというコンポーネントがあります。こちらはメニューからの選択のみで、キーボードの絞り込みがないもので、コンボボックスはテキストボックスがある、という想定でここで話をすすめます。</p><p>IDの候補が有限個であれば、標準のHTMLでも簡単に実現できます。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;ice-cream-choice&quot;</span>&gt;</span>Choose a flavor:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">&quot;ice-cream-flavors&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ice-cream-choice&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ice-cream-choice&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;ice-cream-flavors&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Chocolate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Coconut&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Mint&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Strawberry&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Vanilla&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/20221213a/スクリーンショット_2022-12-02_17.01.46.png" alt="スクリーンショット_2022-12-02_17.01.46.png" width="571" height="461" loading="lazy"><p>コンボボックスを実現するコンポーネント集もありますが、動的にサーバーに候補を問い合わせるのをやりやすくしてくれる機能が組み込まれていないものも多いです。一部、<a href="https://mui.com/material-ui/react-autocomplete/#asynchronous-requests">MaterialUI</a>ではAutocompleteコンポーネントがあって実現はできそうですし、ネットワーク越しに非同期に候補を絞るのも対応してそうですが、この1機能のためにUI部品を乗り換えるわけにもいかないので、素のReactで実現してみます。</p><h1 id="入力の状態を検討する"><a href="#入力の状態を検討する" class="headerlink" title="入力の状態を検討する"></a>入力の状態を検討する</h1><p>Reactでコーディングする場合は、どのような状態を管理するか、誰がその状態を更新するかを検討します。次のような操作が考えられます。</p><ul><li>テキスト入力した値がコンボボックスに表示される</li><li>テキスト入力で絞り込みを行い、選択候補をリストに出す</li><li>テキスト入力で候補と正確に一致するテキストが入力されたので選択する</li><li>テキスト入力で候補が1つになるまで絞り込みを行ったのでそれを選択する</li><li>絞り込まれた候補からマウスで選択する</li><li>再選択するためにキーボードでテキストを削除し、再度絞り込みを行う</li></ul><p>いろいろ試行錯誤した結果、以下のようになりました。</p><img src="/images/20221213a/combobox.png" alt="combobox.png" width="971" height="593" loading="lazy"><ul><li>今回は、validな要素以外を選択要素としないため、最終的な選択値を1つ状態として持ちます。今回のサンプルは<code>useState()</code>で作っていますが、React Hook Formとかでも良いです。</li><li>最終的な値だけの場合、ユーザーが絞り込みを行うための中間状態が表現できません。uncontrolled formならば不要ですが、UI部品によっては選択候補が更新されるとリセットされてしまって都合が良くないことが考えられるため、表示用の値も状態として持ちます</li><li>表示用の入力値をそのまま<code>useSWR()</code>のサーバー呼び出しの更新キーとして使ってもいいのですが、マウスで候補から選択した場合など、サーバーアクセスしなくてもいい場合にもサーバーリクエストが走ってしまうと困るので、サーバー検索を行うキーを別途保持します。</li><li>検索候補が1つに絞れたら、そこで選択終了としたいのですが、そうした場合、キーボードのbackspaceで最後のテキストを消して再絞り込みしようとしても再び候補が1つで強制的に選択されて末尾のテキストが消せない、ということがあったので、選択終了条件に、最後のキーボード入力がbackspace等のテキスト消去ではない、という条件が必要でした。そのため、1つ前の表示値も取っておく必要があるため、<code>useRef</code>で保持します。</li></ul><p>ユーザーに「あれ？」と思わせないコンボボックスを作るにはこれだけの状態が必要かと思われます。テキストとマウスと両方扱う必要があるので面倒ですが仕方がありません。</p><h1 id="実装してみる"><a href="#実装してみる" class="headerlink" title="実装してみる"></a>実装してみる</h1><p>1000以下の素数で好きな値を選択するコンボボックスを作ってみます。Vite.jsで作ったプロジェクトをベースにしています。</p><p>サーバーにアクセスして値を取ってきて候補を出しますが、このためだけにサーバーを実装するのは面倒なので<a href="https://mswjs.io/">Mock Service Worker</a>でAPIサーバーの代替をします。</p><figure class="highlight ts"><figcaption><span>mock.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; setupWorker, rest &#125; <span class="keyword">from</span> <span class="string">&#x27;msw&#x27;</span></span><br><span class="line"><span class="keyword">import</span> getPrimes <span class="keyword">from</span> <span class="string">&#x27;get-primes&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">msec: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="title function_">resolve</span>(<span class="number">0</span>); &#125;, msec);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> worker = <span class="title function_">setupWorker</span>(</span><br><span class="line">  rest.<span class="title function_">get</span>(<span class="string">&#x27;/primes&#x27;</span>, <span class="keyword">async</span> (req, res, ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">// prefix=で渡された文字で始まる素数をリストで返す</span></span><br><span class="line">    <span class="keyword">const</span> prefix = req.<span class="property">url</span>.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&#x27;prefix&#x27;</span>) || <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>); <span class="comment">// サーバーの遅さをシミュレートするためのウェイト</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> v <span class="keyword">of</span> <span class="title function_">getPrimes</span>(<span class="number">1000</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">String</span>(v).<span class="title function_">startsWith</span>(prefix)) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(v);</span><br><span class="line">            <span class="keyword">if</span> (result.<span class="property">length</span> === <span class="number">10</span>) &#123; <span class="comment">// 最大10候補だけ返す</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">res</span>(ctx.<span class="title function_">json</span>(&#123;result&#125;)</span><br><span class="line">  &#125;),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>サーバーにアクセスしてくるhookを実装します。</p><figure class="highlight ts"><figcaption><span>use-completionlist.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useSWR <span class="keyword">from</span> <span class="string">&#x27;swr&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetcher</span>(<span class="params">url: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">  <span class="keyword">const</span> &#123; result &#125; = <span class="keyword">await</span> res.<span class="title function_">json</span>() <span class="keyword">as</span> &#123;<span class="attr">result</span>: <span class="built_in">number</span>[]&#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useCompletionList</span>(<span class="params">prefix: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, error &#125; = <span class="title function_">useSWR</span>(</span><br><span class="line">    <span class="string">`/primes?prefix=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(prefix)&#125;</span>`</span>,</span><br><span class="line">    fetcher</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">data</span>: data ? data : [], error, <span class="attr">loading</span>: !data &amp;&amp; !error &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後にコンボボックスと必要なstate群を実装します。</p><figure class="highlight tsx"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useCallback, useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useCompletionList &#125; <span class="keyword">from</span> <span class="string">&#x27;use-completionlist&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [ userInput, setUserInput ] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);              <span class="comment">// 表示用の値</span></span><br><span class="line">  <span class="keyword">const</span> lastUserInput = <span class="title function_">useRef</span>(<span class="string">&#x27;&#x27;</span>);                              <span class="comment">// 1つ前の表示用の値</span></span><br><span class="line">  <span class="keyword">const</span> [ searchKey, setSearchKey ] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);              <span class="comment">// 検索キー</span></span><br><span class="line">  <span class="keyword">const</span> [ confirmedValue, setConfirmedValue ] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);    <span class="comment">// 選択された値</span></span><br><span class="line">  <span class="keyword">const</span> &#123; data, error, loading &#125; = <span class="title function_">useCompletionList</span>(searchKey); <span class="comment">// 候補リスト</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">length</span> === <span class="number">1</span> &amp;&amp; userInput.<span class="property">length</span> &gt; lastUserInput.<span class="property">current</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="comment">// キーボード選択用: もし、検索候補が1件しかない場合は先頭一致でその要素が選択されたものとする。表示も更新する。</span></span><br><span class="line">      <span class="title function_">setUserInput</span>(<span class="title class_">String</span>(data[<span class="number">0</span>]));</span><br><span class="line">      lastUserInput.<span class="property">current</span> = <span class="title class_">String</span>(data[<span class="number">0</span>]);</span><br><span class="line">      <span class="title function_">setConfirmedValue</span>(<span class="title class_">String</span>(data[<span class="number">0</span>]));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// キーボード選択用: 正確に一致するものが候補にあればその要素が選択されたものとする</span></span><br><span class="line">      <span class="keyword">const</span> found = data.<span class="title function_">find</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="title class_">String</span>(v) === userInput);</span><br><span class="line">      <span class="keyword">if</span> (found !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="title function_">setConfirmedValue</span>(<span class="title class_">String</span>(found));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [userInput, data])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onChange = <span class="title function_">useCallback</span>(<span class="keyword">function</span> <span class="title function_">onChange</span>(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) &#123;</span><br><span class="line">    lastUserInput.<span class="property">current</span> = userInput; <span class="comment">// 最後の入力をとっておく</span></span><br><span class="line">    <span class="title function_">setUserInput</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="title function_">some</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="title class_">String</span>(v) === e.<span class="property">target</span>.<span class="property">value</span>)) &#123;</span><br><span class="line">      <span class="comment">// マウス選択用: 候補のリストを検索して正確にマッチするものがあったら確定(検索はしない)</span></span><br><span class="line">      <span class="title function_">setConfirmedValue</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// キーボード選択用: 正確にマッチするものがなければサーバーに問い合わせて候補リストを最新化</span></span><br><span class="line">      <span class="title function_">setSearchKey</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [data]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123; error ? <span class="tag">&lt;<span class="name">div</span>&gt;</span>エラー: &#123;String(error)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : undefined &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>選択された素数: &#123;confirmedValue&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>素数選択: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;example&quot;</span> <span class="attr">list</span>=<span class="string">&quot;exampleList&quot;</span> <span class="attr">value</span>=<span class="string">&#123;userInput&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;/</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123; loading ? &quot;🌀&quot; : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;exampleList&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123; data.map(value =&gt; (<span class="tag">&lt;<span class="name">option</span> <span class="attr">key</span>=<span class="string">&#123;value&#125;</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> /&gt;</span>))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>うまく実装できました。</p><img src="/images/20221213a/スクリーンショット_2022-12-02_17.56.53.png" alt="スクリーンショット_2022-12-02_17.56.53.png" width="850" height="428" loading="lazy"><p>一箇所にまとめて実装しましたが、data, loading, onChange, confirmedValue, userInput, setUserInputを返すカスタムフックを作っておくと再利用が効きそうです。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>いろんなライブラリとの組み合わせを考えると、状態の変更のライフサイクルをきちんとコントロールできるようにしておくことが大切です。そのため、キーボードの絞り込み機能つきのコンボボックスを手作りしてみました。Reactでもなんでも、サーバーからのレスポンスを含めて、状態管理が複雑になってくると結構ややこしくなって、バグっぽい動きになったりしがちです。</p><p>カスタマイズとしては、サーバーアクセスを<a href="https://usehooks.com/useDebounce/">useDebounce</a>を使って絞るというのはやってもいいかと思います。あとは候補が選択されたときに候補欄を非表示にするとかですかね。確定した値と表示が一致していたらdatalistごと削除とかでいけるかと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/React/">React</category>
      
      
      <comments>https://future-architect.github.io/articles/20221213a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>OpenAPI GeneratorでPython Web API構築</title>
      <link>https://future-architect.github.io/articles/20221203a/</link>
      <guid>https://future-architect.github.io/articles/20221203a/</guid>
      <pubDate>Fri, 02 Dec 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221203a/top.png&quot; alt=&quot;&quot; width=&quot;941&quot; height=&quot;481&quot;&gt;

&lt;p&gt;この記事は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221203a/top.png" alt="" width="941" height="481"><p>この記事は<a href="https://qiita.com/advent-calendar/2022/python">Python Advent Calendar 2022</a> カレンダー2の3日目です。昨日はtttakehさんの<a href="https://zenn.dev/takeguchi/articles/672ff3b34753a7">じゃんけん画像を分類してみた</a>でした。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニットの村上です！</p><p>さて、私の所属しているプロジェクトではバックエンドシステムに主にGo言語を用いており、Go言語によるWebAPIを構築しています。</p><p>例えば<a href="/articles/20200927/">LambdaとGoを使ったサーバーレスWebAPI開発実践入門</a>など、Future Tech Blogには多くのノウハウが投稿されていますので是非ご覧になっていただければと思います。</p><p>今回はGo言語ではなくPythonでWebAPIを構築しました。その際にOpenAPI Generatorが便利だったのでご共有します。</p><h1 id="OpenAPI-Generator"><a href="#OpenAPI-Generator" class="headerlink" title="OpenAPI Generator"></a>OpenAPI Generator</h1><p><a href="https://github.com/OpenAPITools/openapi-generator">OpenAPI Generator</a>はAPIリクエストやレスポンスの内容を定義し、それを元にプログラムを自動生成するツールです。</p><p>API定義ファイルの書き方の例と、そこからコードを自動生成する方法をご紹介します。</p><h2 id="API定義ファイル"><a href="#API定義ファイル" class="headerlink" title="API定義ファイル"></a>API定義ファイル</h2><p>今回のファイル名は<code>openapi.yaml</code>とします。<br>以下のようにリクエストパラメータやレスポンスを定義します。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">openapi:</span> <span class="string">&quot;3.0.0&quot;</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Stock</span> <span class="string">API</span></span><br><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://localhost:3003</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">stockPrice</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">株価取得</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/v1/sc/&#123;security_cd&#125;/stockPrice:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">株価取得</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">stockPrice</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">現在の株価を取得する</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">stockPrice</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">security_cd</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">path</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">証券コードを指定する</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">example:</span> <span class="string">&quot;4722&quot;</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">&quot;200&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">success</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&quot;#/components/schemas/StockPrice&quot;</span></span><br><span class="line">        <span class="attr">&quot;400&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Bad</span> <span class="string">Request</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&quot;#/components/schemas/Error&quot;</span></span><br><span class="line">        <span class="attr">&quot;404&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Not</span> <span class="string">Found</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&quot;#/components/schemas/Error&quot;</span></span><br><span class="line">        <span class="attr">&quot;500&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Internal</span> <span class="string">Server</span> <span class="string">Error</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&quot;#/components/schemas/Error&quot;</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;その他予期せぬエラー&quot;</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&quot;#/components/schemas/Error&quot;</span></span><br><span class="line"><span class="attr">components:</span></span><br><span class="line">  <span class="attr">schemas:</span></span><br><span class="line">    <span class="attr">StockPrice:</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">price:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">number</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">double</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">現在の株価</span></span><br><span class="line">          <span class="attr">example:</span> <span class="number">1741</span></span><br><span class="line">        <span class="attr">open:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">number</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">double</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">始値</span></span><br><span class="line">          <span class="attr">example:</span> <span class="number">1715</span></span><br><span class="line">        <span class="attr">high:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">number</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">高値</span></span><br><span class="line">          <span class="attr">example:</span> <span class="number">1762</span></span><br><span class="line">        <span class="attr">low:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">number</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">安値</span></span><br><span class="line">          <span class="attr">example:</span> <span class="number">1704</span></span><br><span class="line">        <span class="attr">volume:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">number</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">出来高</span></span><br><span class="line">          <span class="attr">example:</span> <span class="number">221400</span></span><br><span class="line">    <span class="attr">Error:</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">message:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">エラーメッセージ</span></span><br><span class="line">        <span class="attr">field:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">エラー種別</span></span><br><span class="line">    <span class="attr">OK:</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">message:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><p><code>operationId</code>で指定した部分が自動生成コードに関数名として反映されます。</p><h2 id="コードの自動生成"><a href="#コードの自動生成" class="headerlink" title="コードの自動生成"></a>コードの自動生成</h2><p>生成方法はいくつかありますが、今回はdockerを使って自動生成します。<br>サーバ側、クライアント側どちらを生成するかはgeneratorのコマンドライン引数によって決まります。<br>例えばサーバ側をPython、クライアント側をGolangで生成する場合、以下のようになります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">サーバ側</span><br><span class="line">$ docker run --<span class="built_in">rm</span> -v <span class="variable">$&#123;PWD&#125;</span>:/local openapitools/openapi-generator-cli generate -i /local/openapi.yaml -g python-flask -o /local</span><br><span class="line"></span><br><span class="line">クライアント側</span><br><span class="line">$ docker run --<span class="built_in">rm</span> -v <span class="variable">$&#123;PWD&#125;</span>:/local openapitools/openapi-generator-cli generate -i /local/openapi.yaml -g go -o /local</span><br></pre></td></tr></table></figure><p>上記コマンドオプションの<code>-g</code>がgeneratorの指定になります。<br>generatorに指定できる引数は以下のコマンドで確認することができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --<span class="built_in">rm</span> openapitools/openapi-generator-cli list</span><br></pre></td></tr></table></figure><p>また、生成されるパッケージ名はデフォルトで<code>openapi_server</code>となりますが、以下のようにパッケージ名を明示的に指定することもできます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --<span class="built_in">rm</span> -v <span class="variable">$&#123;PWD&#125;</span>:/local openapitools/openapi-generator-cli generate -i /local/openapi.yaml -g python-flask -o /local --package-name test_package</span><br></pre></td></tr></table></figure><p>pythonのimportパスにも関わってくるため、プロジェクトに沿った名前にすると良いと思います。</p><h2 id="自動生成されたファイル"><a href="#自動生成されたファイル" class="headerlink" title="自動生成されたファイル"></a>自動生成されたファイル</h2><p>自動生成されたサーバ側のディレクトリ及びその内部のファイルを見ていきたいと思います。<br>上記の<code>openapi.yaml</code>からは以下の内容が出力されました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── README.md</span><br><span class="line">├── git_push.sh</span><br><span class="line">├── openapi_server</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── __main__.py</span><br><span class="line">│   ├── controllers</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── security_controller_.py</span><br><span class="line">│   │   └── stock_price_controller.py</span><br><span class="line">│   ├── encoder.py</span><br><span class="line">│   ├── models</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── base_model_.py</span><br><span class="line">│   │   ├── error.py</span><br><span class="line">│   │   ├── ok.py</span><br><span class="line">│   │   └── stock_price.py</span><br><span class="line">│   ├── openapi</span><br><span class="line">│   │   └── openapi.yaml</span><br><span class="line">│   ├── <span class="built_in">test</span></span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   └── test_stock_price_controller.py</span><br><span class="line">│   ├── typing_utils.py</span><br><span class="line">│   └── util.py</span><br><span class="line">├── requirements.txt</span><br><span class="line">├── setup.py</span><br><span class="line">├── test-requirements.txt</span><br><span class="line">└── tox.ini</span><br></pre></td></tr></table></figure><p>テスト用のファイルまで自動生成してくれます。<br>そのままこのディレクトリをプロジェクトディレクトリにできるレベルです。</p><h3 id="openapi-server"><a href="#openapi-server" class="headerlink" title="openapi_server"></a>openapi_server</h3><p>APIの本体は<code>openapi_server</code>になります。この中の<code>controllers</code>にAPIの中身を実装していくことになります。</p><p>個人的にはcontrollersのファイルにはエラーラッピングやDB接続などの前処理だけを書き、具体的なロジックは別ディレクトリに実装するのが良いと思います。これによってAPIが増えた時にcontrollersの中身が複雑になるのを避けることができます。</p><p>例えば以下のように<code>core</code>ディレクトリを作成し、さらにその中にAPIエンドポイントごとにディレクトリを用意します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── controllers</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── security_controller_.py</span><br><span class="line">│   └── stock_price_controller.py</span><br><span class="line">├── core</span><br><span class="line">│   └── stock_price</span><br><span class="line">│       ├── db.py</span><br><span class="line">│       ├── handler.py</span><br><span class="line">│       └── model.py</span><br></pre></td></tr></table></figure><p><code>handler.py</code>や<code>model.py</code>に具体的なロジックを実装し、<code>stock_price_controller.py</code>からそれを参照します。</p><p><code>openapi</code>ディレクトリには<code>openapi.yaml</code>という生成元ファイルと同じ名前のファイルが生成されています。</p><p>中身も一見すると生成元と全く同じように見えますが、よく見ると<code>x-openapi-router-controller</code>という項目が増えています。</p><p>これはAPIへのルーティング設定で、そのAPIがコールされた際にどのファイルが呼び出されるかが定義されています。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/v1/sc/&#123;security_cd&#125;/stockPrice:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">現在の株価を取得する</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">stock_price</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">description:</span> <span class="string">証券コードを指定する</span></span><br><span class="line">        <span class="attr">example:</span> <span class="string">&quot;4722&quot;</span></span><br><span class="line">        <span class="attr">explode:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">in:</span> <span class="string">path</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">security_cd</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">schema:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">&quot;200&quot;:</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/StockPrice&#x27;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">success</span></span><br><span class="line">        <span class="attr">&quot;400&quot;:</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Error&#x27;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Bad</span> <span class="string">Request</span></span><br><span class="line">        <span class="attr">&quot;404&quot;:</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Error&#x27;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Not</span> <span class="string">Found</span></span><br><span class="line">        <span class="attr">&quot;500&quot;:</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Error&#x27;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Internal</span> <span class="string">Server</span> <span class="string">Error</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Error&#x27;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">その他予期せぬエラー</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">株価取得</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">stockPrice</span></span><br><span class="line">      <span class="attr">x-openapi-router-controller:</span> <span class="string">openapi_server.controllers.stock_price_controller</span></span><br></pre></td></tr></table></figure><p>上記の場合、<code>/v1/sc/&#123;security_cd&#125;/stockPrice</code>がコールされた時、<code>openapi_server/controllers/stock_price_controller.py</code>の<code>stock_price関数</code>が呼び出されることになります。</p><h3 id="openapi-generator-ignore"><a href="#openapi-generator-ignore" class="headerlink" title=".openapi-generator-ignore"></a>.openapi-generator-ignore</h3><p>このファイルには自動生成時に上書きを禁止するディレクトリやファイルを指定します。</p><p>例えば<code>controllers</code>や<code>test</code>のファイルは自動生成を行うたびに中身が初期化されてしまうため、ここに追記します。</p><p>ちなみに手動で新規作成したファイルはそのまま残るため、ここに追加する必要はありません。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openapi_server/controllers/*</span><br><span class="line">openapi_server/test/*</span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>このDockerfileを使うことで、ローカルに簡単にwebサーバを立てることができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t openapi_server .</span><br><span class="line">$ docker run -p 8080:8080 openapi_server</span><br></pre></td></tr></table></figure><p>疎通確認をするとAPIのルーティングがしっかりと行われており、返り値が返却されることが分かると思います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost:8080/v1/sc/4722/stockPrice</span><br><span class="line"><span class="string">&quot;do some magic!&quot;</span></span><br></pre></td></tr></table></figure><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>Python自体が動的型付け言語なだけあってプログラミング時に型を常に気にする必要があり、結構精神を擦り減らすと思います。</p><p>OpenAPI Generatorは型ヒントも付与してくれるため、なるべくコードを自動生成することで型に関する開発コスト削減にもつながると思います。</p><p>自動生成コードを使えば結果的にAPIの具体的なロジックだけ実装すれば良いレベルになりますので、採用するメリットは大きいと感じました。</p><p>明日は、fujineさんの<a href="https://qiita.com/fujine/items/58b4616d7f50c462d62f">2022年にお世話になったオライリーのPython書籍5冊</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/Swagger/">Swagger</category>
      
      <category domain="https://future-architect.github.io/tags/WebAPI/">WebAPI</category>
      
      
      <comments>https://future-architect.github.io/articles/20221203a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Qiita Advent Calendar 2022 に参加します</title>
      <link>https://future-architect.github.io/articles/20221130b/</link>
      <guid>https://future-architect.github.io/articles/20221130b/</guid>
      <pubDate>Tue, 29 Nov 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221130b/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;450&quot;&gt;

&lt;p&gt;Photo taken by &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221130b/top.png" alt="" width="800" height="450"><p>Photo taken by <a href="https://twitter.com/kaedemalu">@kaedemalu</a></p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>技術ブログ運営の伊藤です。</p><p>今年も後わずかとなっており、年の瀬の忙しさや肌寒さを感じているところです。<br>年末の風物詩となっているQiita Advent Calendarですが、フューチャーは今年8年目の参加となります。本記事では、昨年の振り返りと今年の記事の内容などに触れていこうと思います。</p><ul><li><a href="https://qiita.com/advent-calendar/2022/future">フューチャー Advent Calendar 2022</a></li></ul><h2 id="アドベントカレンダーとは"><a href="#アドベントカレンダーとは" class="headerlink" title="アドベントカレンダーとは"></a>アドベントカレンダーとは</h2><p>エンジニア界隈ではアドベントカレンダーは、「参加者で記事をリレーして25日まで投稿する」というイベントにもなっていますが、本来はクリスマス当日を待ち望みながら、ひとつずつ開封するカレンダーのことを指します。</p><p><a href="https://qiita.com/advent-calendar/2022">Qiita Advent Calendar</a>ではこの、クリスマスの風物詩のアドベントカレンダーになぞらえて、12月1日から25日まで毎日リレー方式で記事を投稿するイベントを開催しています。</p><p>当社のアドベントカレンダーのようにOrganizationで参加を募る場合もありますし、Go言語、インフラ、AWSなどテクノロジーカットで参加を募るカレンダーもあります。<br>参加する場合は、興味のあるカレンダーの日程を埋めるだけで参加できるので、とても気軽に参加できます。</p><h2 id="2021年の振り返り"><a href="#2021年の振り返り" class="headerlink" title="2021年の振り返り"></a>2021年の振り返り</h2><img src="/images/20221130b/スクリーンショット_2022-11-29_19.08.22.png" alt="スクリーンショット_2022-11-29_19.08.22.png" width="1059" height="692" loading="lazy"><p><a href="https://qiita.com/advent-calendar/2021/future">2021年の一覧</a>を見ると、言語に留まらず、クラウドサービスの記事や量子コンピュータなどといったさまざまな記事が投稿されています。<br>私は入社して以来ずっと使っているTerraformをどのようにしてできるようになったかをまとめてみました。</p><h2 id="2022年の記事一覧"><a href="#2022年の記事一覧" class="headerlink" title="2022年の記事一覧"></a>2022年の記事一覧</h2><p><a href="https://qiita.com/advent-calendar/2022/future">2022年の一覧</a>は以下です。<br><img src="/images/20221130b/スクリーンショット_2022-11-29_19.14.45.png" alt="スクリーンショット_2022-11-29_19.14.45.png" width="1055" height="790" loading="lazy"></p><p>まだ何を書くか決まっていない人もいますが、フロントエンドからインフラ、モバイル、AIなど例年と同様に幅広い記事が公開される予定となっています。<br>また、今年も毎年参加のベテラン社員や、今年度入社のルーキーなど、分野だけでなく、社会人歴も厚めとなっております。</p><h3 id="発表テーマについて"><a href="#発表テーマについて" class="headerlink" title="発表テーマについて"></a>発表テーマについて</h3><p>例年の記事で掲載している内容を改めて引用します。</p><blockquote><p>例年と同じく、IT技術であること以外はフリーテーマです。</p></blockquote><blockquote><p>ポリシーとしては基本的にはQiitaそのものに投稿していただくスタイルですが（順位も少し気にしています）、Qiitaの投稿規約に沿わない記事（エッセー過ぎるもの、プログラミングに関係ないもの）は技術ブログ側に投稿することもあります。このあたりの決めは各人にお願いしています。<br>その他、個人ブログへのリンクは非推奨で基本的にはNGとアナウンスしています。</p></blockquote><p>記事投稿については個人が気になる場合は内部で確認するなどしますが、基本はガイドラインや倫理的に反しない内容で投稿していただくようお願いしております。また、個人ブログへのリンクは原則として当社のアドベントカレンダーではNGとしているので、参加される方は注意してください。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>このアドベントカレンダーを終えると、外部発信の締めくくりを個人的に感じますが、</p><ul><li>毎年の締めに使っていただく方</li><li>技術ブログには寄稿できなかったけどアドベントカレンダーくらいはなんとか投稿したい方</li></ul><p>というさまざまなモチベーションで参加していただいています。<br>毎年、さまざまな記事を見られることを私自身楽しみにしているので、参加される方と一丸になって全記事投稿とより読んでいただけるアドベントカレンダーになればと思います！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/Qiita/">Qiita</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC/">アドベントカレンダー</category>
      
      
      <comments>https://future-architect.github.io/articles/20221130b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Auth0全ユーザー数取得コマンドをPowerShellのInvokeコマンドで行う</title>
      <link>https://future-architect.github.io/articles/20221130a/</link>
      <guid>https://future-architect.github.io/articles/20221130a/</guid>
      <pubDate>Tue, 29 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Auth0のドキュメントに記載されているAPI操作は、curlコマンドで記載されています。</p><p>一方で、PowerShell標準の <code>Invoke-webRequest</code>や<code>Invoke-RestMethod</code> を用いて操作するといった日本語情報が少ないと思ったため、GETとPOSTリクエストの方法をまとめました。</p><p>ついでに、Auth0にいる全ユーザー数を取得する方法も共有します。</p><h2 id="Windowsのcurl事情"><a href="#Windowsのcurl事情" class="headerlink" title="Windowsのcurl事情"></a>Windowsのcurl事情</h2><p>CLIから通信を行える便利コマンド <code>curl</code> は元々UNIX系のコマンドで、もともとWindowsにはインストールされていませんでした。</p><p><a href="https://ascii.jp/elem/000/004/021/4021036/">こちらの記事</a>によると、2018年のWindows 10 Ver.1803からCurl.exeがWindowsにデフォルトで使えるようになったそうです。そこからは、コマンドプロンプトなら、<code>curl</code>、PowerShellの場合<code>curl.exe</code>と打てばcurlが使えます。</p><p>ここで大事なことですが、2018年までcurlが使えなかった時代の名残なのか、 <strong>PowerShellの場合、<code>curl</code> と打つとwindows用の<code>curl</code>であった<code>Invoke-WebRequest</code>が実行されてしまいます</strong>。（curl.exeだとcurlが動くが、curlにはinvokeコマンドのエイリアスが貼ってある）。普段Windows環境を触らない人にとって、高度な罠ですね。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\xxxx&gt; curl</span><br><span class="line"></span><br><span class="line">コマンド パイプライン位置 1 のコマンドレット Invoke-WebRequest</span><br><span class="line">次のパラメーターに値を指定してください:</span><br><span class="line">Uri:</span><br></pre></td></tr></table></figure><p>そのため、筆者のようにPowerShellでは 一般にイメージする <code>curl</code> がないものだと認識し、<code>Invoke-webRequest</code> や <code>Invoke-RestMethod</code> を使う必要があると勘違いする人も少なくないと思います。今回の記事は一連のAuth0のドキュメントにあったcurlコマンドをInvoke-RestMethodに置換して実行する流れを、一晩かけて勢いでまとめた記事です。</p><p>すべてを書き終えた後、先輩社員に<code>curl.exe</code>すればcurl出来るよと言われ悲しくなりましたが、2023年10月、2027年1月までサポートを受けているWindows Server 2012、2016にはcurlがないと思われるので、そういった環境を扱う方には有用だと思います。ちなみに、Windows Server 2019には <code>curl.exe</code> がありましたので、素直にそちらで操作すると良いでしょう。</p><p>注意ですが、この記事に記載しているcurlコマンドをコマンドプロンプト上で動かす場合は、<code>\</code>のエスケープと、改行を消す必要があります（記事上では読みやすさのために改行を入れています）。</p><h2 id="結論から話すと"><a href="#結論から話すと" class="headerlink" title="結論から話すと"></a>結論から話すと</h2><p>以下のコマンドで動きます。</p><ol><li>token取得（postリクエスト）  <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$client_id</span> =  <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="variable">$client_secret</span> =  <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="variable">$api</span> =  <span class="string">&quot;https://xxx/api/v2/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$body</span> = <span class="selector-tag">@</span>&#123;</span><br><span class="line">    client_id = <span class="string">&quot;<span class="variable">$client_id</span>&quot;</span></span><br><span class="line">    client_secret = <span class="string">&quot;<span class="variable">$client_secret</span>&quot;</span></span><br><span class="line">    audience = <span class="string">&quot;<span class="variable">$api</span>&quot;</span></span><br><span class="line">    grant_type = <span class="string">&quot;client_credentials&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Invoke-RestMethod</span> <span class="literal">-Method</span> Post <span class="literal">-Uri</span> <span class="string">&quot;https://xxx/oauth/token&quot;</span> <span class="literal">-ContentType</span> <span class="string">&#x27;application/json&#x27;</span> <span class="literal">-Body</span> (<span class="variable">$body</span>|<span class="built_in">ConvertTo-Json</span>) <span class="literal">-OutFile</span> output.txt</span><br><span class="line"><span class="built_in">cat</span> output.txt</span><br></pre></td></tr></table></figure></li><li>output.txtからtokenをコピーして2のコマンドを打つ</li><li>全ユーザー数取得コマンド(getリクエスト)  <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$token</span> = <span class="string">&quot;copyAndPasteHere&quot;</span></span><br><span class="line"><span class="built_in">Invoke-RestMethod</span> <span class="literal">-Method</span> Get <span class="literal">-Uri</span> <span class="string">&quot;https://xxx/api/v2/users?per_page=0&amp;include_totals=true&quot;</span> <span class="literal">-Headers</span> <span class="selector-tag">@</span>&#123;Authorization=<span class="string">&quot;Bearer <span class="variable">$token</span>&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li><li>output.txt が不要になれば削除します  <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> .\output.txt</span><br></pre></td></tr></table></figure></li></ol><h2 id="操作の流れ"><a href="#操作の流れ" class="headerlink" title="操作の流れ"></a>操作の流れ</h2><p>Auth0にいる総ユーザー数を取得を <code>Invoke-RestMethod</code> で記載する方法を共有します。</p><p>基本的には以下の2つのコマンドを<code>Invoke-RestMethod</code> で代替します。</p><ol><li>APIを利用するtokenを取得する（POSTリクエスト）</li><li>総ユーザー数取得APIを打つ（GETリクエスト）</li></ol><h3 id="1-APIを利用するtokenを取得する（POSTリクエスト）"><a href="#1-APIを利用するtokenを取得する（POSTリクエスト）" class="headerlink" title="1. APIを利用するtokenを取得する（POSTリクエスト）"></a>1. APIを利用するtokenを取得する（POSTリクエスト）</h3><p>ユーザー数取得に使う <strong>Auth0 User Management API</strong> を利用するためのtokenをまずは取得します。</p><p>User Management APIの利用権限のあるAPIのtoken取得コマンドが、<strong>API設定のTestタブに</strong>以下の画像のように書いてあるので参照します。tokenを取得する<code>cURLコマンド</code>と、すごく親切にバックエンドでよく用いる言語での取得方法まで記載しているので参考になります。</p><img src="/images/20221130a/0.png" alt="" width="1200" height="706" loading="lazy"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl --request POST \</span><br><span class="line">  --url https://$domain/oauth/token \</span><br><span class="line">  --header &#x27;content-type: application/json&#x27; \</span><br><span class="line">  --data &#x27;&#123;&quot;client_id&quot;:&quot;alphanumericWithCapita1Letter&quot;,&quot;client_secret&quot;:&quot;alphanumericWithCapita1LetterChottoNaga1&quot;,&quot;audience&quot;:&quot;https://$domain/api/v2/&quot;,&quot;grant_type&quot;:&quot;client_credentials&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><h4 id="観察"><a href="#観察" class="headerlink" title="観察"></a>観察</h4><p>まず元のCURLが何やってるか見ます。</p><ul><li><strong>POST</strong>リクエスト</li><li>content typeが<strong>application&#x2F;json</strong>形式</li><li>dataに<strong>json文字列でclient認証情報を渡している</strong></li></ul><p><strong>data</strong>とありますが <strong>HTTPリクエストではbody</strong> とも呼びます。ここまでで、 <strong><code>Invoke-RestMethod</code>でやることは「JSONをPOSTするリクエストを作れば良い</strong>」ということが分かります。</p><h4 id="公式ドキュメント見る"><a href="#公式ドキュメント見る" class="headerlink" title="公式ドキュメント見る"></a>公式ドキュメント見る</h4><p>2022年11月時点ではpowershell-7.3が最新のようで、公式ドキュメントは<a href="https://learn.microsoft.com/ja-jp/powershell/module/microsoft.powershell.utility/invoke-restmethod?view=powershell-7.3">これ</a>です。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-RestMethod</span></span><br><span class="line">      [-<span class="type">Method</span> &lt;<span class="type">WebRequestMethod</span>&gt;]</span><br><span class="line">      [-<span class="type">FollowRelLink</span>]</span><br><span class="line">      [-<span class="type">MaximumFollowRelLink</span> &lt;<span class="built_in">Int</span><span class="type">32</span>&gt;]</span><br><span class="line">      [-<span class="type">ResponseHeadersVariable</span> &lt;<span class="built_in">String</span>&gt;]</span><br><span class="line">      [-<span class="type">StatusCodeVariable</span> &lt;<span class="built_in">String</span>&gt;]</span><br><span class="line">      [-<span class="type">UseBasicParsing</span>]</span><br><span class="line">      [-<span class="type">Uri</span>] &lt;Uri&gt;</span><br><span class="line">      [-<span class="type">HttpVersion</span> &lt;<span class="type">Version</span>&gt;]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>中々難しそうですが、コレを見ると、 <strong><code>Invoke-RestMethod</code>で各オプションを付ければ良い</strong> ことが推測できます。</p><p><strong>CURLで指定したオプションは以下のようにマッピング出来そう</strong>ですね。</p><ul><li>–requestは-Method<ul><li><code>-Method Post</code></li></ul></li><li>–urlは-Uri<ul><li><code>-Uri https://$domain/oauth/token</code></li></ul></li><li>–headerはHeadersとContentTypeが両方ありますね、ContentTypeだけ指定するので-ContentTypeのみ使います。（Headersにcontent-typeと入れたらエラーになってました）<ul><li><code>-ContentType application/json</code></li></ul></li><li>–dataは-body<ul><li>後述しますがいい感じに書かないとNGでした</li></ul></li></ul><p>これで、<strong>bodyに当たる部分以外は良い感じにマッピング出来ました。</strong></p><p>続いてはbodyの記載方法を見ます。</p><img src="/images/20221130a/image.png" alt="" width="700" height="1083" loading="lazy"><p>ぱっと見は理解することが難しいですよね。オブジェクトで渡せば良いのかな？とわかります。</p><p><a href="https://learn.microsoft.com/ja-jp/powershell/module/microsoft.powershell.utility/invoke-restmethod?view=powershell-7.3#2-post">公式にPOSTの例が</a>あるので参考にできます。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$Cred</span> = <span class="built_in">Get-Credential</span></span><br><span class="line"><span class="variable">$Url</span> = <span class="string">&quot;https://server.contoso.com:8089/services/search/jobs/export&quot;</span></span><br><span class="line"><span class="variable">$Body</span> = <span class="selector-tag">@</span>&#123;</span><br><span class="line">    search = <span class="string">&quot;search index=_internal | reverse | table index,host,source,sourcetype,_raw&quot;</span></span><br><span class="line">    output_mode = <span class="string">&quot;csv&quot;</span></span><br><span class="line">    earliest_time = <span class="string">&quot;-2d@d&quot;</span></span><br><span class="line">    latest_time = <span class="string">&quot;-1d@d&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Invoke-RestMethod</span> <span class="literal">-Method</span> <span class="string">&#x27;Post&#x27;</span> <span class="literal">-Uri</span> <span class="variable">$url</span> <span class="literal">-Credential</span> <span class="variable">$Cred</span> <span class="literal">-Body</span> <span class="variable">$body</span> <span class="literal">-OutFile</span> output.csv</span><br></pre></td></tr></table></figure><p>どうやらシェル内でオブジェクトを作れば良さそうだとわかります。この例を参考に以下のように動かすと <strong>エラーになります</strong>。</p><figure class="highlight powershell"><figcaption><span>エラーになった実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$body</span> = <span class="selector-tag">@</span>&#123;</span><br><span class="line">    client_id = <span class="string">&quot;alphanumericWithCapita1Letter&quot;</span></span><br><span class="line">client_secret = <span class="string">&quot;alphanumericWithCapita1LetterChottoNaga1&quot;</span></span><br><span class="line">audience = <span class="string">&quot;https://<span class="variable">$domain</span>/api/v2/&quot;</span></span><br><span class="line">grant_type = <span class="string">&quot;client_credentials&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Invoke-RestMethod</span> <span class="literal">-Method</span> Post <span class="literal">-Uri</span> <span class="string">&quot;https://<span class="variable">$domain</span>/oauth/token&quot;</span> <span class="literal">-ContentType</span> <span class="string">&#x27;application/json&#x27;</span> <span class="literal">-Body</span> <span class="variable">$body</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-RestMethod</span> : invalid json</span><br></pre></td></tr></table></figure><p>理由ですが、bodyにjson渡す渡す詐欺（コンテンツタイプでJSON渡すと宣言してるがJSONを渡していない状態）をしてるようです。よしなにやってくれると少し期待しましたが、ダメなようです。<br>（※もし、何かしらの手法があれば教えてください）</p><h4 id="対応方法"><a href="#対応方法" class="headerlink" title="対応方法"></a>対応方法</h4><p><code>auth0 invoke rest method post body json powershell</code> といったキーワードで探すと、<a href="https://www.thecodebuzz.com/invoke-restmethod-get-post-example-with-parameters/">こちらの記事</a>に記載している通り、 <code>ConvertTo-Json</code><strong><a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/convertto-json?view=powershell-7.3">コマンド</a>を用いbodyのオブジェクトをJSONに変換</strong>すれば良いということがわかります（<code>-Body $body</code> ➔　<code>-Body ($body|ConvertTo-Json)</code>）。</p><p>※公式ドキュメントの関連記事の箇所にも <code>ConvertTo-Json</code> の記載がありますが、本文にも記載があると助かる人もいるかなと思い、公式ドキュメントにフィードバックは出しておきました。これが採用されると嬉しいなと思います。</p><p>結果として、以下のコマンドで動きます。</p><figure class="highlight powershell"><figcaption><span>成功例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$body</span> = <span class="selector-tag">@</span>&#123;</span><br><span class="line">    client_id = <span class="string">&quot;alphanumericWithCapita1Letter&quot;</span></span><br><span class="line">client_secret = <span class="string">&quot;alphanumericWithCapita1LetterChottoNaga1&quot;</span></span><br><span class="line">audience = <span class="string">&quot;https://<span class="variable">$domain</span>/api/v2/&quot;</span></span><br><span class="line">grant_type = <span class="string">&quot;client_credentials&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Invoke-RestMethod</span> <span class="literal">-Method</span> Post <span class="literal">-Uri</span> <span class="string">&quot;https://<span class="variable">$domain</span>/oauth/token&quot;</span> <span class="literal">-ContentType</span> <span class="string">&#x27;application/json&#x27;</span> <span class="literal">-Body</span> (<span class="variable">$body</span>|<span class="built_in">ConvertTo-Json</span>)</span><br></pre></td></tr></table></figure><p>しかし、少し斜め上な結果になります。</p><img src="/images/20221130a/1.png" alt="1.png" width="1200" height="181" loading="lazy"><h4 id="出力結果最後まで出ない問題"><a href="#出力結果最後まで出ない問題" class="headerlink" title="出力結果最後まで出ない問題"></a>出力結果最後まで出ない問題</h4><p>PowerShellの仕様か、Invoke-RestMethodの仕様なのか、<strong>出力が最後まで出てくれずトークンが分からない問題</strong> が発生しました。</p><p>解決策として、公式の例を真似て<strong>ファイルに出力して表示</strong>することにします（愚直に<code>output.txt</code>に出して<code>cat output.txt</code>します）。シェルに詳しい人だったら良い感じにCLIの出力出来たかもしれないですが、詳しい方は教えてください。</p><p>そのため、以下のコマンドを付けます。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">... <span class="literal">-OutFile</span> output.txt</span><br><span class="line"><span class="built_in">cat</span> output.txt</span><br></pre></td></tr></table></figure><h3 id="総ユーザー数取得APIを打つ"><a href="#総ユーザー数取得APIを打つ" class="headerlink" title="総ユーザー数取得APIを打つ"></a>総ユーザー数取得APIを打つ</h3><p>最初に、Auth0全ユーザー数の取得コマンドを探すため、公式で用意されている<a href="https://auth0.com/docs/api/management/v2#!/Users/get_users">Auth0 User Management APIのドキュメント</a>を見ます。</p><p>そうすると、<code>Users</code>　➔　<code>List or Search Users</code>の箇所のパラメータを眺めてると <strong>小さく取得できる旨が書いて</strong> あります。APIの概要にはページング番号を指定しながらのユーザー取得しかできないかのように書いてあるが、よくよくパラメータを見ると取得できることがわかります。</p><p><strong>API概要</strong>:1ページに取得されるユーザー数を指定してユーザーリストを取得できるんやでと記載されています。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Retrieve details of users. It is possible to:</span><br><span class="line"></span><br><span class="line">- Specify a search criteria for users</span><br><span class="line">- Sort the users to be returned</span><br><span class="line">- Select the fields to be returned</span><br><span class="line">- Specify the number of users to retrieve per page and the page index</span><br></pre></td></tr></table></figure><p><strong>パラメータ</strong>:include_totalsをオンにすると<strong>APIのレスポンスにトータルを含められる</strong>と書いています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include_totals</span><br><span class="line">Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).</span><br></pre></td></tr></table></figure><p>しかし、この説明文だと、表示するページの合計なのか、全体なのか曖昧ですよね。</p><img src="/images/20221130a/image_2.png" alt="image.png" width="612" height="200" loading="lazy"><p>また、概要にある通りユーザーのリストが取得できてしまうが、合計人数だけ知りたいので<strong>ユーザー情報をなくすオプションを探します</strong>。※全パラメータは任意</p><div class="scroll"><table><thead><tr><th>パラメータ</th><th>説明</th></tr></thead><tbody><tr><td>page</td><td>返却するページ番号（0インデックス）</td></tr><tr><td>per_page</td><td>1ページに含むユーザー数、空の場合全件返却</td></tr><tr><td>include_totals</td><td>レスポンスに合計人数を入れる</td></tr><tr><td>sort</td><td>ソート項目・順を決める</td></tr><tr><td>connection</td><td>コネクションフィルター（よく分からず）</td></tr><tr><td>fields</td><td>表示&#x2F;非表示する項目を決める。空の場合全項目返却</td></tr><tr><td>include_fields</td><td>fieldsで指定した項目を表示させるか非表示にするか決める</td></tr><tr><td>q</td><td>検索クエリ、形式はLucene query string syntaxらしい</td></tr><tr><td>search_engine</td><td>サーチエンジンを決める、詳細はなかったため謎</td></tr></tbody></table></div><p><code>per_page</code>に着目すると<code>include_totals</code>だけ指定して<code>per_page</code>を<strong>空にした場合全ユーザー情報が取得できてしまう</strong>ようです。そしてユーザー取得フラグのようなものはなく、 <strong><code>per_page</code>をいじるしかなさそう</strong> なので、一旦これを0にしてAPIを実行することにします。</p><p>token取得時と同様に、まず成功するcurlコマンドを共有します。401認証失敗エラーにならないようにtokenをつけます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl --request GET \</span><br><span class="line">  --url <span class="string">&quot;https://<span class="variable">$domain</span>/api/v2/users?per_page=0&amp;include_totals=true&quot;</span> \</span><br><span class="line">  --header <span class="string">&#x27;authorization: Bearer $token&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="観察・マッピング"><a href="#観察・マッピング" class="headerlink" title="観察・マッピング"></a>観察・マッピング</h3><p>クエリパラメータはGETなのでシンプルですね。token渡したGETリクエストするだけです。<a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-restmethod?view=powershell-7.3">公式ドキュメントのリンクはこちら</a>です。</p><ul><li>GETリクエストをしている<ul><li><code>--request GET</code>が<code>--Method Get</code>になる</li></ul></li><li>URLにPOSTと違いクエリパラメータがある<ul><li><code>--url</code>が<code>-Uri</code>になる</li><li><code>-Uri https://$domain/api/v2/users?per_page=0&amp;include_totals=true</code></li><li>URLにパラメータを入れることをクエリパラメータと言う</li></ul></li><li>token認証情報を渡している<ul><li><code>--header</code>が<code>-Headers</code>になる</li><li><code>-Headers @&#123;Authorization=&quot;Bearer $token&quot;&#125;</code></li><li>cURLと違い<code>Invoke-RestMethod</code>特有のオブジェクト形式で書かないといけないので@{xxx}の形式となる</li><li>Authenticationオプションなどでも指定可能だったかもしれない（未検証）</li></ul></li></ul><p>以上からInvokeコマンドに書き換えます。</p><figure class="highlight powershell"><figcaption><span>実行例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-RestMethod</span> <span class="literal">-Method</span> Get <span class="literal">-Uri</span> <span class="string">&quot;https://<span class="variable">$domain</span>/api/v2/users?per_page=0&amp;include_totals=true&quot;</span> <span class="literal">-Headers</span> <span class="selector-tag">@</span>&#123;Authorization=<span class="string">&quot;Bearer <span class="variable">$token</span>&quot;</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">start</span>  : <span class="number">0</span></span><br><span class="line">limit  : <span class="number">0</span></span><br><span class="line">length : <span class="number">0</span></span><br><span class="line">users  : &#123;&#125;</span><br><span class="line">total  : xxx</span><br></pre></td></tr></table></figure><p>無事totalの数字が取得できました！</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>curlコマンドの代替として、PowerShell標準の <code>Invoke-webRequest</code>だったり<code>Invoke-RestMethod</code> を用いてAuth0のAPIを操作する例をまとめました。</p><p>IT初心者がIT課題をどう解決していけば良いのか何となく分かるような文章を書けたら良いなと最近考えているため、ハマった部分や調査の流れもなるべく残すように記載しました。ググっても情報が見つかりにくかったことを記事にして誰かを助ける備忘録にもなってたら良いなと思います。</p><p>この記事が良いなと思ったら感想下さると励みになります。Twitterなどでコメントいただけると幸いです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/">認証認可</category>
      
      
      <category domain="https://future-architect.github.io/tags/Auth0/">Auth0</category>
      
      <category domain="https://future-architect.github.io/tags/curl/">curl</category>
      
      <category domain="https://future-architect.github.io/tags/PowerShell/">PowerShell</category>
      
      <category domain="https://future-architect.github.io/tags/Invoke-Request/">Invoke-Request</category>
      
      
      <comments>https://future-architect.github.io/articles/20221130a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go-projを用いて日本測地系/世界測地系の変換</title>
      <link>https://future-architect.github.io/articles/20221129a/</link>
      <guid>https://future-architect.github.io/articles/20221129a/</guid>
      <pubDate>Mon, 28 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221129a/logo.png&quot; alt=&quot;&quot; width=&quot;250&quot; height=&quot;76&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221129a/logo.png" alt="" width="250" height="76"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG DXユニットの真野です。</p><p>ある緯度経度の座標を日本測地系から世界測地系へ変換する際に、<a href="https://github.com/everystreet/go-proj">everystreet&#x2F;go-proj</a>というパッケージを用いました。私にとって初めてのcgoを用いたライブラリ利用であり、環境構築に少し悩んだので手順をまとめておきます。</p><p>なお、類似に<a href="https://github.com/go-spatial/proj">go-spatial&#x2F;proj</a>もありますが、そちらは日本測地系がサポートされていないようでした。測地系変換の知識が無いのでノータッチですがPure Go実装にできると嬉しいですね。</p><h2 id="日本測地系-x2F-世界測地系-とは"><a href="#日本測地系-x2F-世界測地系-とは" class="headerlink" title="日本測地系 &#x2F; 世界測地系 とは"></a>日本測地系 &#x2F; 世界測地系 とは</h2><p>今泉さんの <a href="/articles/20220719b/">郵便番号・住所・緯度経度の体系について</a> に記載がありますので参考ください。東京付近では日本測地系と世界測地系との誤差が450m程度あるらしく、大抵のユースケースではコードを統一した方が良さそうです。</p><p>他にも以下のサイトが参考になります。</p><ul><li><a href="https://www.gsi.go.jp/LAW/G2000-g2000-h3.htm">３　日本測地系と世界測地系  | 国土地理院</a></li><li><a href="https://www.pasco.co.jp/recommend/word/word075/">測地系とは？（日本測地系と世界測地系） | 用語集とGISの使い方 | 株式会社パスコ</a></li></ul><h2 id="日本測地系-x2F-世界測地系-の変換について"><a href="#日本測地系-x2F-世界測地系-の変換について" class="headerlink" title="日本測地系 &#x2F; 世界測地系 の変換について"></a>日本測地系 &#x2F; 世界測地系 の変換について</h2><p><a href="http://kamoland.com/wiki/wiki.cgi?%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%C2%AC%EF%BF%BD%CF%B7%CF%A4%D8%A4%EF%BF%BD%EF%BF%BD%D0%B1%EF%BF%BD">日本測地系への対応 - プログラマー’sペイジ</a> さんによると、概ね3つの変換パターンがあるようです。</p><ol><li>1次式による近似<ul><li>ググるとすぐ出てくる↓の式<ul><li><code>lonJ = lonW + latW * 0.000046047 + lonW * 0.000083049 – 0.010041</code></li><li><code>latJ = latW + latW * 0.00010696 – lonW * 0.000017467 – 0.0046020</code></li></ul></li><li>シンプルで素晴らしい。約2.5~2.8メートルズレる</li></ul></li><li>三次元直交座標系に変換して平行移動<ul><li><strong>PROJ が利用している方式</strong></li><li>3に比べて、約0.2~0.4メートルズレる</li></ul></li><li>地域ごとの変換パラメータで変換する<ul><li>パラメータファイルを用いた最も精度が高い方式</li><li><a href="https://vldb.gsi.go.jp/sokuchi/surveycalc/tky2jgd/main.html">Web版 TKY2JGD</a> といったツールがある</li></ul></li></ol><p>今回は1は許容できないけど、2のレベルであれば問題ないユースケースだったので、PROJを用いることにしました。</p><p>※ズレの計算は、3のWeb版TKY2JGDで 日本測地系→世界測地系に変換したものを正とし、1,2の変換後の緯度経度を、<a href="https://vldb.gsi.go.jp/sokuchi/surveycalc/surveycalc/bl2stf.html">測量計算(距離と方位角の計算)</a> のWebツールで計測した。場所は五反田駅など関東の複数地点で試しました</p><h2 id="この変換を覚えると嬉しいの？"><a href="#この変換を覚えると嬉しいの？" class="headerlink" title="この変換を覚えると嬉しいの？"></a>この変換を覚えると嬉しいの？</h2><p>日本測地系は、旧日本測地系（Tokyo Datum）と呼ばれるだけあり、<a href="https://www.gsi.go.jp/LAW/G2000-g2000-h3.htm#:~:text=%E6%98%8E%E6%B2%BB%E6%99%82%E4%BB%A3%E3%81%AB%E6%8E%A1%E7%94%A8%E3%81%97%E3%81%9F%E3%83%99%E3%83%83%E3%82%BB%E3%83%AB%E6%A5%95%E5%86%86%E4%BD%93%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%81%BE%E3%81%97%E3%81%9F">明治時代に作られ</a>、2002年4月1日まで利用されていた規格です。それ以降は日本測地系2000（JGD2000）あるいは、日本測地系2011（JGD2011）が使われています。JGD2000とJGD2011のどちらも世界測地系と言える経度・緯度の体系です。GD2011へ移行したきっかけは、東日本大震災による大規模な地殻変動の発生への対応だそうで、基本的にJGD2000と、JGD2011はTokyo Datumに比べると、スマホアプリのマップにピンを立ててナビゲートするようなケースでは同一と見なして良いレベルです。具体的には<a href="https://club.informatix.co.jp/?p=998#:~:text=%E3%82%82%E7%95%B0%E3%81%AA%E3%82%8A%E3%80%81-,%E6%97%A5%E6%9C%AC%E8%BF%91%E8%BE%BA%E3%81%A7%E3%81%9D%E3%81%AE%E5%B7%AE%E3%81%AF5cm%E7%A8%8B%E5%BA%A6%E3%81%A7%E3%81%99,-%E3%80%82%E3%81%93%E3%81%AE%E5%B7%AE%E3%82%92">日本近辺で5cm程度の差がある</a>とのことです。</p><p>何が言いたいかというと、2002年以降に公開されたデータは大概、世界測地系であるJGD2000またはJGD2011です。そのため、日本測地系→世界測地系にしたいユースケースってそんなに多くないと思います（古いデータを移行したいとか、その古いデータを元にGoogle Mapなどに表示させたいなど？）。この記事に書かれたサンプルコードは、古い資産を活用したい場合など、限定された場面で参考になるんだと認識してもらえればです。</p><p>例えば、国土交通省の<a href="https://nlftp.mlit.go.jp/isj/">街区レベル位置参照情報</a>はJGD2000形式です。同じく国土交通省の<a href="https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-A45.html#prefecture01">国有林野データ</a>はJGD2011でした。少なくても公共機関から取得できるようなデータは世界測地系になっているのかなと思います。</p><h2 id="PROJとは"><a href="#PROJとは" class="headerlink" title="PROJとは"></a>PROJとは</h2><p><a href="https://proj.org/">PROJ</a> はこの界隈では有名な、地図投影や測地変換が行えるツールで、コマンドラインから呼び出しと、ライブラリのようにも使えるAPIも提供しています。</p><p>コマンドラインから日本測地系から世界測地系に変換する例です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日本測地系（EPSG 4301）から世界測地系（EPSG 4612）に変換</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;139.477799479 35.4891015625&quot;</span> | cs2cs +init=epsg:4301 +to +init=epsg:4612 -f <span class="string">&quot;%.10f&quot;</span></span><br><span class="line">139.4745977186  35.4923543046 0.0000000000</span><br></pre></td></tr></table></figure><p>参考: <a href="http://pen.envr.tsukuba.ac.jp/~torarimon/?%C2%AC%EF%BF%BD%CF%B7%EF%BF%BD:+datum">http://pen.envr.tsukuba.ac.jp/~torarimon/?%C2%AC%C3%CF%B7%CF%3A+datum</a></p><h2 id="各言語からPROJを用いる"><a href="#各言語からPROJを用いる" class="headerlink" title="各言語からPROJを用いる"></a>各言語からPROJを用いる</h2><p>Java（<a href="https://github.com/locationtech/proj4j">proj4j</a>）, JavaScript（<a href="https://github.com/proj4js/proj4js">proj4js</a>）, Python（<a href="https://pyproj4.github.io/pyproj/stable/">pyproj</a>）など様々な言語によるポーティングが公開されています。</p><p>Goの場合は冒頭でも紹介した<a href="https://github.com/everystreet/go-proj">everystreet&#x2F;go-proj</a>がそれにあたります。</p><p>PROJはC++で実装されており、cgo経由で扱うため、PROJ環境を構築した後に、go-projから呼び出す必要があります。</p><h2 id="go-projの利用開始"><a href="#go-projの利用開始" class="headerlink" title="go-projの利用開始"></a>go-projの利用開始</h2><p>WindowsとWSL2での構築手順をまとめます。Macは手元に無かったので割愛します。</p><p>全体の注意ですが、2022.11.20時点でPROJの最新バージョンは <code>9.1.0</code> ですが、go-projは <code>8.1.0</code> に対応しています。8.1系だと最新が <code>8.1.1</code> が存在するので、この記事ではそのバージョンを利用します。</p><p>PROJのインストールは<a href="https://proj.org/install.html#">公式ドキュメント</a> に細かく手順が載っていますが、<code>conda</code> 経由で行います（WSL2はapt-getも追記しておきます）。</p><p>各環境からは次のようなgo-projを用いたコードが動作することを確かめます。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/everystreet/go-proj/v8/proj&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/golang/geo/s1&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">wgsLng, wgsLat := Tky2Wgs(<span class="number">128542740</span>/<span class="type">float64</span>(<span class="number">60</span>*<span class="number">60</span>*<span class="number">256</span>), <span class="number">32706756</span>/<span class="type">float64</span>(<span class="number">60</span>*<span class="number">60</span>*<span class="number">256</span>))</span><br><span class="line">fmt.Printf(<span class="string">&quot;%f %f\n&quot;</span>, wgsLng, wgsLat) <span class="comment">// 139.474598 35.492354</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Tky2Wgs</span><span class="params">(lng, lat <span class="type">float64</span>)</span></span> (<span class="type">float64</span>, <span class="type">float64</span>) &#123;</span><br><span class="line">coord := proj.LP&#123;</span><br><span class="line">Lng: s1.Angle(lng),</span><br><span class="line">Lat: s1.Angle(lat),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err := proj.CRSToCRS(</span><br><span class="line"><span class="string">&quot;EPSG:4301&quot;</span>, <span class="comment">// 日本測地系(TOKYO) 緯度経度</span></span><br><span class="line"><span class="string">&quot;EPSG:4326&quot;</span>, <span class="comment">// 世界測地系(WGS84) 緯度経度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(pj proj.Projection)</span></span> &#123;</span><br><span class="line">proj.TransformForward(pj, &amp;coord)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err) <span class="comment">// サンプルコードなのでpanicにしていますが、errorを戻り値にした方が良いです</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="type">float64</span>(coord.Lng), <span class="type">float64</span>(coord.Lat)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Windows環境構築手順"><a href="#Windows環境構築手順" class="headerlink" title="Windows環境構築手順"></a>Windows環境構築手順</h3><p><code>conda</code> は <code>miniconda</code> を利用します。環境がない方は以下からインストールください。</p><ul><li><a href="https://docs.conda.io/en/latest/miniconda.html">https://docs.conda.io/en/latest/miniconda.html</a></li></ul><p>もし、プロキシ環境で構築する場合は <code>%USERPROFILE%</code> 直下に <code>.condarc</code> ファイルを作成し、プロキシ情報を追記ください。</p><figure class="highlight yml"><figcaption><span>.condarc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxy_servers:</span></span><br><span class="line">    <span class="attr">http:</span> <span class="string">http://&#123;user&#125;:&#123;password&#125;@proxy.example.co.jp:8000</span></span><br><span class="line">    <span class="attr">https:</span> <span class="string">http://&#123;user&#125;:&#123;password&#125;@proxy.example.co.jp:8000</span></span><br></pre></td></tr></table></figure><p>※ {password} に記号が入っている人で、上記で認証が通らない方は、URLエンコードして設定してみてください</p><p>conda環境ができたら、インストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; conda install -c conda-forge proj=8.2.1 proj-data=1.11.0</span><br></pre></td></tr></table></figure><p>成功すれば以下のようなバージョンが表示されると思います。インストールが成功しているけど<code>proj</code>コマンドが動かない人は、 <code>%USERPROFILE%\Miniconda3\Library\bin</code> をPATHに追加してください。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;proj</span><br><span class="line">Rel. 8.2.1, January 1st, 2022</span><br><span class="line">usage: proj [-bdeEfiIlmorsStTvVwW [args]] [+opt[=arg] ...] [file ...]</span><br></pre></td></tr></table></figure><p>次に環境変数を設定し、go get でパッケージをインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 環境変数</span></span><br><span class="line">&gt; <span class="built_in">set</span> CGO_CFLAGS=-I%USERPROFILE%\Miniconda3\Library\include</span><br><span class="line">&gt; <span class="built_in">set</span> CGO_LDFLAGS=-L%USERPROFILE%\Miniconda3\Library\lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># go-projの取得</span></span><br><span class="line">&gt; go get -u github.com/everystreet/go-proj/v8</span><br></pre></td></tr></table></figure><p>これで動くと思います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">139.474598 35.492354</span><br></pre></td></tr></table></figure><p>もし、以下のようなエラーが出てのであれば、Cのヘッダーファイルが見つかっていないということですので、 <code>CGO_CFLAGS</code> で指定している、includeフォルダのパスを確認し再設定ください。</p><figure class="highlight sh"><figcaption><span>失敗例1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># github.com/everystreet/go-proj/v8/cproj</span></span><br><span class="line">~\go\pkg\mod\github.com\everystreet\go-proj\v8@v8.0.0\cproj\cgo_helpers.go:8:10: fatal error: proj.h: No such file or directory</span><br><span class="line"> <span class="comment">#include &quot;proj.h&quot;</span></span><br><span class="line">          ^~~~~~~~</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure><p>あるいは、以下のエラーの場合は、 <code>CGO_LDFLAGS</code> で設定したライブラリのパスを確認し再設定ください。</p><figure class="highlight sh"><figcaption><span>失敗例2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~\go\go1.19.1\pkg\tool\windows_amd64\link.exe: running gcc failed: <span class="built_in">exit</span> status 1</span><br><span class="line">C:/Program Files/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lproj</span><br><span class="line">...</span><br><span class="line">collect2.exe: error: ld returned 1 <span class="built_in">exit</span> status</span><br></pre></td></tr></table></figure><h2 id="WSL2インストール手順"><a href="#WSL2インストール手順" class="headerlink" title="WSL2インストール手順"></a>WSL2インストール手順</h2><h3 id="condaを使う場合"><a href="#condaを使う場合" class="headerlink" title="condaを使う場合"></a>condaを使う場合</h3><p>ほぼWindows側と同じです。miniconda3 をインストールし、PROJをインストール＆環境変数を設定しておしまいです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># minicondaインストール（プロキシ設定は割愛）</span></span><br><span class="line">$ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line">$ bash Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># PATHを通す（この例では .bashrcに export PATH=$PATH:~/miniconda3/bin を追記）</span></span><br><span class="line">$  ~/.bashrc</span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># PROJインストール</span></span><br><span class="line">$ conda install -c conda-forge proj=8.2.1 proj-data=1.11.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># CGOのパラメータ設定</span></span><br><span class="line">$ <span class="built_in">export</span> CGO_CFLAGS=-I<span class="variable">$&#123;HOME&#125;</span>/miniconda3/include</span><br><span class="line">$ <span class="built_in">export</span> CGO_LDFLAGS=-L<span class="variable">$&#123;HOME&#125;</span>/miniconda3/lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># go-projの取得</span></span><br><span class="line">&gt; go get -u github.com/everystreet/go-proj/v8</span><br></pre></td></tr></table></figure><p>これでgo-projが実行できるようになると思います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">139.474598 35.492354</span><br></pre></td></tr></table></figure><h3 id="apt-を使う場合"><a href="#apt-を使う場合" class="headerlink" title="apt を使う場合"></a>apt を使う場合</h3><p><code>conda</code> を使いたくない方向けに手順を残しておきます。まず、公式のパッケージリポジトリでインストールできるprojが6系と古いため、3rdパーティのパッケージリポジトリを参照する必要があります。以下から利用するリポジトリを選択し、運用していただいていることに感謝します。</p><ul><li><a href="https://packages.ubuntu.com/jammy/amd64/libproj-dev/download">https://packages.ubuntu.com/jammy/amd64/libproj-dev/download</a></li></ul><p>私は以下のように、 <code>proj.list</code> というファイルを作って追加しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/apt/sources.list.d/proj.list</span><br><span class="line">deb http://kr.archive.ubuntu.com/ubuntu jammy main universe</span><br></pre></td></tr></table></figure><p>これでPROJをインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># アップデート</span></span><br><span class="line">$ sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># PROJ 8.2.1-1 が存在することを確認します</span></span><br><span class="line"><span class="comment"># $ sudo apt-cache show libproj-dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># インストール</span></span><br><span class="line">$ sudo apt install proj-bin=8.2.1-1 libproj-dev=8.2.1-1</span><br></pre></td></tr></table></figure><p>これでgo-projが実行できるようになると思います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">139.474598 35.492354</span><br></pre></td></tr></table></figure><p>apt経由の場合は、<code>libproj-dev</code> でインストールすると <code>/usr/include</code> にヘッダファイルなどがインストールされるため、CGO系のフラグは設定しなくても動くと思います。</p><h2 id="高速化したい場合"><a href="#高速化したい場合" class="headerlink" title="高速化したい場合"></a>高速化したい場合</h2><p><code>proj.CRSToCRS()</code> ですが、処理件数が多い処理に利用すると物足りない性能でした（1変換に10msほどかかりました）。理由は、C++側のライブラリに測地系のロードを都度行うためだと思われます。そのため、<code>proj.CRSToCRS()</code> をそのまま利用するのでなく、その內部で利用している <code>cproj</code> を直接利用すると良いかもしれません。</p><p>例えば以下のような実装です（※ちゃんとメモリリークしないか確かめていないです）。これで1000倍くらい早くなりました。</p><figure class="highlight go"><figcaption><span>改良版</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/everystreet/go-proj/v8/cproj&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/everystreet/go-proj/v8/proj&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/golang/geo/s1&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pj := NewProjection(<span class="string">&quot;EPSG:4301&quot;</span>, <span class="string">&quot;EPSG:4326&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> pj.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>*<span class="number">1000</span>; i++ &#123;</span><br><span class="line">wgsLng, wgsLat := pj.CRSToCRS(<span class="number">128542740</span>/<span class="type">float64</span>(<span class="number">60</span>*<span class="number">60</span>*<span class="number">256</span>), <span class="number">32706756</span>/<span class="type">float64</span>(<span class="number">60</span>*<span class="number">60</span>*<span class="number">256</span>))</span><br><span class="line">fmt.Printf(<span class="string">&quot;%f %f\n&quot;</span>, wgsLng, wgsLat)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Projection <span class="keyword">struct</span> &#123;</span><br><span class="line">ctx        *cproj.PJ_CONTEXT</span><br><span class="line">src        *cproj.PJ</span><br><span class="line">dst        *cproj.PJ</span><br><span class="line">pj         *cproj.PJ</span><br><span class="line">normalized *cproj.PJ</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewProjection</span><span class="params">(source, target <span class="type">string</span>)</span></span> Projection &#123;</span><br><span class="line">ctx := cproj.Context_create()</span><br><span class="line">src := cproj.Create(ctx, source)</span><br><span class="line">dst := cproj.Create(ctx, target)</span><br><span class="line">pj := cproj.Create_crs_to_crs_from_pj(ctx, src, dst, <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line">normalized := cproj.Normalize_for_visualization(ctx, pj)</span><br><span class="line"><span class="keyword">return</span> Projection&#123;</span><br><span class="line">ctx:        ctx,</span><br><span class="line">src:        src,</span><br><span class="line">dst:        dst,</span><br><span class="line">pj:         pj,</span><br><span class="line">normalized: normalized,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Projection)</span></span> CRSToCRS(lng, lat <span class="type">float64</span>) (<span class="type">float64</span>, <span class="type">float64</span>) &#123;</span><br><span class="line">coord := proj.LP&#123;</span><br><span class="line">Lng: s1.Angle(lng),</span><br><span class="line">Lat: s1.Angle(lat),</span><br><span class="line">&#125;</span><br><span class="line">proj.TransformForward(p.normalized, &amp;coord)</span><br><span class="line"><span class="keyword">return</span> <span class="type">float64</span>(coord.Lng), <span class="type">float64</span>(coord.Lat)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Projection)</span></span> Close() &#123;</span><br><span class="line">cproj.Context_destroy(p.ctx)</span><br><span class="line">cproj.Destroy(p.src)</span><br><span class="line">cproj.Destroy(p.dst)</span><br><span class="line">cproj.Destroy(p.pj)</span><br><span class="line">cproj.Destroy(p.normalized)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Close()</code> 内でじゃかじゃか <code>Destroy()</code> しているのはC側のオブジェクトはGo側でGCされないためで、自分でリソースを開放する必要があるためです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>GoからPROJを利用する方法をまとめました。 構築は cgo を使ったことがある方であればハマることは少ないと思いますが、conda経由だとCGOオプションが必要です。</p><p>測地系の変換を行うケースは一般的にはあまり多くないと思いますが、何かの参考になれば幸いです。最後まで読んでいただき、ありがとうございました！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%9C%B0%E5%9B%B3/">地図</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%B7%AF%E5%BA%A6%E7%B5%8C%E5%BA%A6/">緯度経度</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%97%A5%E6%9C%AC%E6%B8%AC%E5%9C%B0%E7%B3%BB/">日本測地系</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%B8%96%E7%95%8C%E6%B8%AC%E5%9C%B0%E7%B3%BB/">世界測地系</category>
      
      <category domain="https://future-architect.github.io/tags/Proj/">Proj</category>
      
      
      <comments>https://future-architect.github.io/articles/20221129a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
