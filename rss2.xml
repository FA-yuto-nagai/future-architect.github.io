<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Wed, 01 May 2024 00:40:47 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Cloudflare C3で始めるCloudflare Pages入門</title>
      <link>https://future-architect.github.io/articles/20240501a/</link>
      <guid>https://future-architect.github.io/articles/20240501a/</guid>
      <pubDate>Tue, 30 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20240408a/&quot;&gt;春の入門連載2024&lt;/a&gt; 15日目の記事です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20240408a/">春の入門連載2024</a> 15日目の記事です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>みなさんこんにちは。TIG所属の大岩潤矢( <a href="https://x.com/920OJ">@920OJ</a> ) です。</p><p>Cloudflareが提供するCLIツール「Cloudflare C3」を利用して、Cloudflare Pagesへ簡単に入門する方法について、ハンズオンを中心に紹介します。</p><h2 id="Cloudflare-Pagesとは"><a href="#Cloudflare-Pagesとは" class="headerlink" title="Cloudflare Pagesとは"></a>Cloudflare Pagesとは</h2><p>Cloudflare Pagesとは、一言で言えば <strong>「Cloudflareが提供するWebサイトのホスティングサービス」</strong> です。</p><img src="/images/20240501a/ogp.png" alt="ogp.png" width="1200" height="630" loading="lazy"><p>みなさんは、静的Webサイトを作成した後どこにデプロイしますか？</p><p>ホスティングの方法は多種多様、色々な方法が存在します。一昔前までは、レンタルサーバを借りてFTP接続し、各種ファイルを配置する……というものが一般的でした。しかし最近は大手クラウドベンダの提供するPaaS(Platform as a Service)が台頭し、面倒なサーバ管理無しに、コードさえあればすぐにWebサイトを公開できる、というのも一般的になってきました。</p><p>特に静的Webサイトをホスティングするサービスには、AWSの<a href="https://aws.amazon.com/jp/amplify/hosting/">Amplify</a>（中身はS3+CloudFront構成）やGoogleの<a href="https://firebase.google.com/docs/hosting?hl=ja">Firebase Hosting</a>など大手クラウドベンダが提供するクラウドの1サービス、はたまた<a href="https://www.netlify.com/">Netlify</a>や<a href="https://vercel.com/">Vercel</a>などの独立系プラットフォーマーのサービスなどが挙げられます。</p><p>その中に彗星のごとく現れたのが、大手CDNプロパイダの一つ、Cloudflareが提供する<a href="https://www.cloudflare.com/ja-jp/developer-platform/pages/">Cloudflare Pages</a>です。</p><h3 id="Cloudflare-Pagesの魅力-コストの安さ"><a href="#Cloudflare-Pagesの魅力-コストの安さ" class="headerlink" title="Cloudflare Pagesの魅力: コストの安さ"></a>Cloudflare Pagesの魅力: コストの安さ</h3><p>Cloudflare Pagesの魅力、それは圧倒的なコストの安さ、CDN基盤の強みを生かした安定・高速な配信です。</p><p>まずはコストから見てみましょう。<a href="https://www.cloudflare.com/ja-jp/developer-platform/pages/">公式サイト</a>の価格表の一番上に、「サイト、シート、リクエスト、帯域幅は全プラン無制限」と記載があります。</p><img src="/images/20240501a/image.png" alt="image.png" width="1200" height="712" loading="lazy"><p>（<a href="https://www.cloudflare.com/ja-jp/developer-platform/pages/">公式サイト</a>より引用）</p><p>Cloudflare Pagesでは<strong>無料プランでも、公開するサイト数、リクエスト数、帯域幅、どれだけ増大しても無料で使い続けることができます</strong>。制限は同時ビルド数が1であること、月のビルド数が500に制限されていること、カスタムドメイン設定が100個までということのみです。</p><p>一応他にも制限はあり、<a href="https://developers.cloudflare.com/pages/platform/limits/">ドキュメント</a>の方にまとまっています。</p><ul><li>1サイトに含められるファイル数は最大20,000ファイル</li><li>Pagesから配信できる1アセットのサイズ上限は25MB</li><li>申請なしで作成できるサイト数は100個まで（それ以上は引き上げ申請が必要）</li></ul><p>特にファイル数とファイルサイズは、利用用途によってはフィットしない可能性があります。大容量のファイルをホスティングしたい場合は、同じくCloudflareのオブジェクトストレージである<a href="https://www.cloudflare.com/ja-jp/developer-platform/r2/">Cloudflare R2</a>などの利用を検討しましょう。こちらも帯域幅無料で、コストを抑えてアセットの配信ができます。</p><p>同じ用途でよく利用される他のサービスの無料プランとも簡単に比較してみましょう。</p><div class="scroll"><table><thead><tr><th>サービス名</th><th>サイト数</th><th>リクエスト数上限</th><th>帯域幅上限</th><th>ストレージ</th><th>備考</th></tr></thead><tbody><tr><td>Cloudflare Pages</td><td>無制限(カスタムドメインは100まで)</td><td>無制限</td><td>無制限</td><td>無制限<br />(1ファイル25MB)</td><td></td></tr><tr><td>Firebase Hosting</td><td>５〜10個(プロジェクト数)<br />1プロジェクトあたり36個</td><td>無制限</td><td>360MB&#x2F;日</td><td>10GB<br />(1ファイル2GB)</td><td></td></tr><tr><td>GitHub Pages</td><td>アカウントごとに1個</td><td>制限あり</td><td>100GB&#x2F;月</td><td>1GB<br />(1ファイル100MB)</td><td>商用利用不可</td></tr><tr><td>Netlify</td><td>500個</td><td>無制限</td><td>100GB&#x2F;月</td><td>不明</td><td></td></tr></tbody></table></div><p>月の帯域幅制限を設定しているサービスが多いなか、無制限に利用できるのはCloudflare Pagesのみです。CDNプロパイダとしての気概と矜持を感じますね。</p><h3 id="Cloudflare-Pagesの魅力-安定・高速な配信"><a href="#Cloudflare-Pagesの魅力-安定・高速な配信" class="headerlink" title="Cloudflare Pagesの魅力: 安定・高速な配信"></a>Cloudflare Pagesの魅力: 安定・高速な配信</h3><p>Cloudflareは世界最大のCDNサービスを提供することから、100カ国以上にデータセンターを所有しています。<a href="https://www.cloudflare.com/ja-jp/network/">公式サイト</a>によれば、日本だけでも東京、大阪、福岡、那覇と、4箇所も存在しています。</p><p>Cloudflare PagesへデプロイされたWebサイトは、この世界中にあるデータセンター（エッジサーバ）へ配置されます。これにより閲覧するユーザから一番近いサーバより配信できるため、物理的距離の短縮がページ表示の高速化につながる……と理解しています。</p><p>Cloudflare Pagesの魅力はこれ以外にもあり、リリース時のブログページに詳細が書かれているので、気になる方はぜひご一読ください。</p><p><a href="https://blog.cloudflare.com/ja-jp/cloudflare-pages-ja-jp/">https://blog.cloudflare.com/ja-jp/cloudflare-pages-ja-jp/</a></p><h2 id="Cloudflare-C3とは"><a href="#Cloudflare-C3とは" class="headerlink" title="Cloudflare C3とは"></a>Cloudflare C3とは</h2><p>Cloudflare C3とは、Cloudflareが公式で提供しているScaffoldツールです。C3は <code>create-cloudflare-cli</code> の略で、頭文字の3つのCを取ってC3のようです。サービスがリリースされた順序は前後しますが、D1、R2、C3と並んでいるのがキレイですね！</p><p>Cloudflare C3を利用することで、Pagesのデプロイ設定等も含めた新規Webサイトプロジェクトの構築を実施できます。あくまで新しくWebサイトを構築する際に利用するツールであり、既存のプロジェクトからPagesにデプロイする設定をするものではないので、注意してください。</p><p>公式ドキュメントはこちらです。: <a href="https://developers.cloudflare.com/pages/get-started/c3/">https://developers.cloudflare.com/pages/get-started/c3/</a></p><p>それでは、早速Cloudflare C3を利用してCloudflare Pagesに入門してみましょう！</p><h2 id="ハンズオン"><a href="#ハンズオン" class="headerlink" title="ハンズオン"></a>ハンズオン</h2><p>今回のハンズオンは、以下の環境で実施します。ソフトウェアのバージョンによっては動作しないこともあるため、ハンズオン実施前に各種ソフトウェアのバージョンアップをおすすめします。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Macbook Pro (M1 MAX)</span><br><span class="line">Node.js: v20.12.2</span><br><span class="line">npm: v10.5.0</span><br></pre></td></tr></table></figure><h3 id="Cloudflareアカウントの作成"><a href="#Cloudflareアカウントの作成" class="headerlink" title="Cloudflareアカウントの作成"></a>Cloudflareアカウントの作成</h3><p>以下リンクより、Cloudflareアカウントを作成します。画面の指示に従ってメールアドレス・パスワードを登録後、メールアドレス宛に届いた認証リンクをクリックすることで登録完了です。</p><p><a href="https://dash.cloudflare.com/sign-up?pt=f">https://dash.cloudflare.com/sign-up?pt=f</a></p><h3 id="Cloudflare-C3を利用したプロジェクトの作成"><a href="#Cloudflare-C3を利用したプロジェクトの作成" class="headerlink" title="Cloudflare C3を利用したプロジェクトの作成"></a>Cloudflare C3を利用したプロジェクトの作成</h3><p>まずはCloudflare C3を利用して、プロジェクトを作成します。ここでは、Vueを利用したウェブサイトを構築する想定で設定します。</p><p>ターミナルを開き、以下のコマンドを入力します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm create cloudflare@latest</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Need to install the following packages:</span><br><span class="line">create-cloudflare@2.21.1</span><br><span class="line">Ok to proceed? (y) <span class="comment"># yを入力し、Enter</span></span><br></pre></td></tr></table></figure><p>プロジェクト名を入力します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">using create-cloudflare version 2.21.1</span><br><span class="line"></span><br><span class="line">╭ Create an application with Cloudflare Step 1 of 3</span><br><span class="line">│</span><br><span class="line">╰ In <span class="built_in">which</span> directory <span class="keyword">do</span> you want to create your application? also used as application name</span><br><span class="line">  ./frontend</span><br></pre></td></tr></table></figure><p>どの種類のアプリケーションを作成するか尋ねられます。今回は「Website or web app」を選択します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╰ What <span class="built_in">type</span> of application <span class="keyword">do</span> you want to create?</span><br><span class="line">  ○ <span class="string">&quot;Hello World&quot;</span> Worker</span><br><span class="line">  ○ <span class="string">&quot;Hello World&quot;</span> Worker (Python)</span><br><span class="line">  ○ <span class="string">&quot;Hello World&quot;</span> Durable Object</span><br><span class="line">  ● Website or web app</span><br><span class="line">  ○ Example router &amp; proxy Worker</span><br><span class="line">  ○ Scheduled Worker (Cron Trigger)</span><br><span class="line">  ○ Queue consumer &amp; producer Worker</span><br><span class="line">  ○ API starter (OpenAPI compliant)</span><br><span class="line">  ○ Worker built from a template hosted <span class="keyword">in</span> a git repository</span><br></pre></td></tr></table></figure><p>次に何のフレームワークを利用するか選択します。今回はVueを使います。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╰ Which development framework <span class="keyword">do</span> you want to use?</span><br><span class="line">  ○ Analog</span><br><span class="line">  ○ Angular</span><br><span class="line">  ○ Astro</span><br><span class="line">  ○ Docusaurus</span><br><span class="line">  ○ Gatsby</span><br><span class="line">  ○ Hono</span><br><span class="line">  ○ Next</span><br><span class="line">  ○ Nuxt</span><br><span class="line">  ○ Qwik</span><br><span class="line">  ○ React</span><br><span class="line">  ○ Remix</span><br><span class="line">  ○ Solid</span><br><span class="line">  ○ Svelte</span><br><span class="line">  ● Vue</span><br></pre></td></tr></table></figure><p>ここまで入力した情報でプロジェクトの設定は終了です。プロジェクトファイルのインストールが始まるので、yを入力しEnterを押下します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">using create-cloudflare version 2.21.1</span><br><span class="line"></span><br><span class="line">╭ Create an application with Cloudflare Step 1 of 3</span><br><span class="line">│</span><br><span class="line">├ In <span class="built_in">which</span> directory <span class="keyword">do</span> you want to create your application?</span><br><span class="line">│ <span class="built_in">dir</span> ./frontend</span><br><span class="line">│</span><br><span class="line">├ What <span class="built_in">type</span> of application <span class="keyword">do</span> you want to create?</span><br><span class="line">│ <span class="built_in">type</span> Website or web app</span><br><span class="line">│</span><br><span class="line">├ Which development framework <span class="keyword">do</span> you want to use?</span><br><span class="line">│ framework Vue</span><br><span class="line">│</span><br><span class="line">├ Continue with Vue via `npx create-vue@3.10.2 frontend`</span><br><span class="line">│</span><br><span class="line"></span><br><span class="line">Need to install the following packages:</span><br><span class="line">create-vue@3.10.2</span><br><span class="line">Ok to proceed? (y) <span class="comment"># yを入力し、Enter</span></span><br></pre></td></tr></table></figure><p>続いてVueの設定が始まります。この詳細な設定は割愛しますが、自分は以下の構成で設定しました。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Vue.js - The Progressive JavaScript Framework</span><br><span class="line"></span><br><span class="line">✔ Add TypeScript? … Yes</span><br><span class="line">✔ Add JSX Support? … No</span><br><span class="line">✔ Add Vue Router <span class="keyword">for</span> Single Page Application development? … Yes</span><br><span class="line">✔ Add Pinia <span class="keyword">for</span> state management? … No</span><br><span class="line">✔ Add Vitest <span class="keyword">for</span> Unit Testing? … No</span><br><span class="line">✔ Add an End-to-End Testing Solution? › No</span><br><span class="line">✔ Add ESLint <span class="keyword">for</span> code quality? … Yes</span><br><span class="line">✔ Add Prettier <span class="keyword">for</span> code formatting? … Yes</span><br><span class="line">✔ Add Vue DevTools 7 extension <span class="keyword">for</span> debugging? (experimental) … Yes</span><br></pre></td></tr></table></figure><p>最後に、今からすぐにデプロイするかどうかを尋ねられます。Yesを選択し、デプロイまでやってしまいましょう。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╭ Deploy with Cloudflare Step 3 of 3</span><br><span class="line">│</span><br><span class="line">╰ Do you want to deploy your application?</span><br><span class="line">  Yes / No</span><br></pre></td></tr></table></figure><p>ブラウザが立ち上がるので、ログインします。</p><img src="/images/20240501a/image_2.png" alt="image.png" width="1200" height="886" loading="lazy"><p>権限付与の確認をするコンセントページが表示されます。ページ下部のAllowを押下し、許可します。</p><img src="/images/20240501a/image_3.png" alt="image.png" width="1200" height="801" loading="lazy"><img src="/images/20240501a/image_4.png" alt="image.png" width="1200" height="618" loading="lazy"><p>ここまで来たら、ブラウザは閉じてもOKです。</p><img src="/images/20240501a/image_5.png" alt="image.png" width="1200" height="744" loading="lazy"><p>裏ではデプロイが走ったままになっているので、このままにします。</p><img src="/images/20240501a/image_6.png" alt="image.png" width="1200" height="842" loading="lazy"><p>少しするとデプロイが完了し、自動でデプロイ先のURLが開きます。</p><img src="/images/20240501a/image_7.png" alt="image.png" width="1200" height="777" loading="lazy"><p>なんと、たった1コマンド（といくつかの設定）で、Cloudflare Workersへのデプロイまで完了してしまいました。</p><h3 id="更新後の反映"><a href="#更新後の反映" class="headerlink" title="更新後の反映"></a>更新後の反映</h3><p>ページの更新をPagesへデプロイするには、本来<a href="https://developers.cloudflare.com/workers/wrangler/">Wrangler</a>というCloudflareのCLIツールを利用するのが一般的です。一方で、Cloudflare C3を利用して構築したプロジェクトでは、npm scriptsにデプロイ用のコマンドが追加されているため、以下のコマンドだけで反映することができます。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure><p>仕組みを紹介すると、以下のコマンドを実行しているようです。ビルド後に、 <code>dist</code> ディレクトリの中身をPagesへデプロイする形になっていますね。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build &amp;&amp; wrangler pages deploy ./dist</span><br></pre></td></tr></table></figure><p>試しに先ほどのプロジェクトの一部を変更してデプロイしてみましょう。 <code>views/HomeView.vue</code> ファイルを以下のように変更します。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">TheWelcome</span> <span class="keyword">from</span> <span class="string">&#x27;../components/TheWelcome.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 以下に変更 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Cloudflare C3で始めるCloudflare Pages入門<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>変更を保存した状態で、 <code>npm run deploy</code> を走らせてみましょう。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">% npm run deploy</span><br><span class="line"></span><br><span class="line">&gt; frontend@0.0.0 deploy</span><br><span class="line">&gt; npm run build &amp;&amp; wrangler pages deploy ./dist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; frontend@0.0.0 build</span><br><span class="line">&gt; run-p type-check <span class="string">&quot;build-only &#123;@&#125;&quot;</span> --</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; frontend@0.0.0 type-check</span><br><span class="line">&gt; vue-tsc --build --force</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; frontend@0.0.0 build-only</span><br><span class="line">&gt; vite build</span><br><span class="line"></span><br><span class="line">vite v5.2.10 building <span class="keyword">for</span> production...</span><br><span class="line">✓ 46 modules transformed.</span><br><span class="line">dist/index.html                      0.43 kB │ gzip:  0.28 kB</span><br><span class="line">dist/assets/AboutView-C6Dx7pxG.css   0.09 kB │ gzip:  0.10 kB</span><br><span class="line">dist/assets/index-D6pr4OYR.css       4.21 kB │ gzip:  1.30 kB</span><br><span class="line">dist/assets/AboutView-CUrwZ76T.js    0.22 kB │ gzip:  0.20 kB</span><br><span class="line">dist/assets/index-DQoQ7Ar8.js       79.46 kB │ gzip: 31.95 kB</span><br><span class="line">✓ built <span class="keyword">in</span> 395ms</span><br><span class="line">fatal: ambiguous argument <span class="string">&#x27;HEAD&#x27;</span>: unknown revision or path not <span class="keyword">in</span> the working tree.</span><br><span class="line">Use <span class="string">&#x27;--&#x27;</span> to separate paths from revisions, like this:</span><br><span class="line"><span class="string">&#x27;git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]&#x27;</span></span><br><span class="line">▲ [WARNING] Warning: Your working directory is a git repo and has uncommitted changes</span><br><span class="line"></span><br><span class="line">  To silence this warning, pass <span class="keyword">in</span> --commit-dirty=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">🌎  Uploading... (6/6)</span><br><span class="line"></span><br><span class="line">✨ Success! Uploaded 3 files (3 already uploaded) (1.93 sec)</span><br><span class="line"></span><br><span class="line">✨ Deployment complete! Take a peek over at https://xxxxxxxxxx.xxxxxxxxxx.pages.dev</span><br></pre></td></tr></table></figure><p>ほんの10秒程度でデプロイが完了したようです。表示されているリンクをクリックすると……</p><img src="/images/20240501a/image_8.png" alt="image.png" width="1200" height="370" loading="lazy"><p>変更が反映されていました！<br>デプロイの更新方法が分かれば、あとはガンガンページを更新していって、出来たタイミングでURLを公開するだけですね。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Cloudflare Pagesは素晴らしいサービスであるものの、自分の身のまわりで知名度が低く、あまり使っている人を見たことが無いのが気に掛かっており、この記事を執筆しました。<br>今回紹介出来なかったCloudflare WorkersとPagesの連携などについても、今後取り上げることができればと思います！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Vue-js/">Vue.js</category>
      
      <category domain="https://future-architect.github.io/tags/Cloudflare/">Cloudflare</category>
      
      <category domain="https://future-architect.github.io/tags/Cloudflare-C3/">Cloudflare C3</category>
      
      <category domain="https://future-architect.github.io/tags/Cloudflare-Pages/">Cloudflare Pages</category>
      
      
      <comments>https://future-architect.github.io/articles/20240501a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【iOS/Swift】ダークモード・ライトモード・端末の表示モードへアプリ内から自由に切り替える</title>
      <link>https://future-architect.github.io/articles/20240430a/</link>
      <guid>https://future-architect.github.io/articles/20240430a/</guid>
      <pubDate>Mon, 29 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20240408a/&quot;&gt;春の入門連載&lt;/a&gt;の14本目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20240408a/">春の入門連載</a>の14本目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>HealthCare Innovation Group(HIG)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>所属の橋本です。</p><p>みなさん、お使いのiPhoneではダークモードorライトモードどちらに設定していますか。</p><p>それとも、Automaticに設定していますか。</p><img src="/images/20240430a/46491578-7e42-ab93-f1eb-793c2d70c499.jpeg" alt="" width="863" height="721" loading="lazy"><p>私は、単純に黒っぽい画面にテンションが上がるタイプなので常時ダークモードで使っています。</p><p>目に優しいのはダークモードではなく、ライトモードみたいな記事も拝見したことがあり、一度ダークモードからライトモードに変更したこともありますが、結局ダークモードに落ち着いています。</p><p>そんなiPhoneにおけるダークモード・ライトモードの切り替えをアプリ内から行う方法の例を紹介したいと思います。</p><h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><ul><li>OS：macOS Sonoma 14.4.1</li><li>Xcode：15.3 (15E204a)</li><li>Swift：5.10</li></ul><h1 id="ゴールイメージ"><a href="#ゴールイメージ" class="headerlink" title="ゴールイメージ"></a>ゴールイメージ</h1><p>今回作成する表示モードをピッカーで選択できる設定画面です。</p><img src="/images/20240430a/Simulator_Screen_Recording_-_iPhone_15_Pro_-_2024-04-12_at_23.16.27.gif" alt="Simulator_Screen_Recording_-_iPhone_15_Pro_-_2024-04-12_at_23.16.27.gif" width="240" height="520" loading="lazy"><h1 id="実装方法"><a href="#実装方法" class="headerlink" title="実装方法"></a>実装方法</h1><p>まず、切り替えたい３つの表示モードを列挙型で定義しておきます。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">DisplayMode</span>: <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> light</span><br><span class="line">    <span class="keyword">case</span> dark</span><br><span class="line">    <span class="keyword">case</span> system</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>続いて、アプリ全体に対して、表示モードを適用させたいと思います。</p><p>このときに、<a href="https://developer.apple.com/documentation/swiftui/view/preferredcolorscheme(_:)">.preferredColorScheme</a>と三項演算子を用いて条件分岐を行います。<br><code>displayMode</code>が<code>.system</code>のときに、nilを返すことでシステムのデフォルトの設定を反映できるようにしています。また、<code>displayMode</code>が<code>.system</code>ではないときは、<code>diplayMode</code>が’.dark’であるときは、<a href="https://developer.apple.com/documentation/swiftui/colorscheme">ColorScheme</a>の<code>.dark</code>が適用され、そうでないときは<code>.light</code>が適用されます。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.preferredColorScheme(displayMode <span class="operator">==</span> .system <span class="operator">?</span> nil : (displayMode <span class="operator">==</span> .dark <span class="operator">?</span> .dark : .light))</span><br></pre></td></tr></table></figure><p>これをエントリーポイントである<code>〜App.swift</code>ファイルに次のように記載します。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">displayModeApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="meta">@AppStorage</span>(<span class="string">&quot;displayMode&quot;</span>) <span class="keyword">var</span> displayMode: <span class="type">DisplayMode</span> <span class="operator">=</span> .system</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">                .preferredColorScheme(</span><br><span class="line">                    displayMode <span class="operator">==</span> .system <span class="operator">?</span> nil : (displayMode <span class="operator">==</span> .dark <span class="operator">?</span> .dark : .light)</span><br><span class="line">                )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後に、<code>Picker</code>を用いて、表示モードを変更させるViewを作成します。</p><p><code>Picker</code>の<code>selection:</code>パラメータには<code>$displayMode</code>がバインドさせています。これは、選択された値が直接<code>displayMode</code>プロパティに保存されることを意味します。<br>それぞれの<code>tag()</code>メソッドに<code>DisplayMode</code>の対応する値が設定されています。これにより、ユーザーがピッカーで選択した表示モードが、<code>DisplayMode</code>型の<code>displayMode</code>に適切に保存することが可能になります。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@AppStorage</span>(<span class="string">&quot;displayMode&quot;</span>) <span class="keyword">var</span> displayMode: <span class="type">DisplayMode</span> <span class="operator">=</span> .system</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationStack</span> &#123;</span><br><span class="line">            <span class="type">List</span> &#123;</span><br><span class="line">                <span class="type">Section</span>(<span class="string">&quot;App Settings&quot;</span>) &#123;</span><br><span class="line">                    <span class="type">Picker</span>(<span class="string">&quot;Theme Color&quot;</span>, selection: <span class="variable">$displayMode</span>) &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;Light&quot;</span>)</span><br><span class="line">                            .tag(<span class="type">DisplayMode</span>.light)</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;Dark&quot;</span>)</span><br><span class="line">                            .tag(<span class="type">DisplayMode</span>.dark)</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;System&quot;</span>)</span><br><span class="line">                            .tag(<span class="type">DisplayMode</span>.system)</span><br><span class="line">                    &#125;</span><br><span class="line">                    .pickerStyle(.automatic)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">&quot;Settings&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Done！</p><p>これでアプリ内から強制的に、ダークモード、ライトモードに変更させることができるようになりました。</p><p>触れていませんでしたが、@AppStoregeで端末内部に<code>DisplayMode</code>を記憶させているので、アプリキル後に立ち上げた際には、以前の設定値が保存されるようにもなっています。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>ダークモード・ライトモード・端末の設定のモードにアプリ内から切り替える方法を扱いました。</p><p>このようにダークモード、ライトモードを変えること自体は簡単ですが、それぞれの色を各画面に対応させるほうが大変ですね。色の管理にはAsset Catalogを使うことでダークモード、ライトモードの色を設定しておく方法がありますが、このあたりについても、うまいやり方があればご紹介したいと思います。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developer.apple.com/documentation/uikit/uisplitviewcontroller/1623194-displaymode">https://developer.apple.com/documentation/uikit/uisplitviewcontroller/1623194-displaymode</a></li><li><a href="https://developer.apple.com/documentation/swiftui/view/preferredcolorscheme(_:)">https://developer.apple.com/documentation/swiftui/view/preferredcolorscheme(_:)</a></li><li><a href="https://developer.apple.com/documentation/swiftui/colorscheme">https://developer.apple.com/documentation/swiftui/colorscheme</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">医療・ヘルスケア分野での案件や新規ビジネス創出を担う、2020年に誕生した事業部です。設立エピソードは<a href="https://note.future.co.jp/n/n8b57d4bf4604">未来報</a>の記事をご覧ください。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/iOS/">iOS</category>
      
      <category domain="https://future-architect.github.io/tags/Swift/">Swift</category>
      
      <category domain="https://future-architect.github.io/tags/SwiftUI/">SwiftUI</category>
      
      
      <comments>https://future-architect.github.io/articles/20240430a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GASでGoogleTasksとスプレッドシートを擬似的に双方向バインディングさせてみた</title>
      <link>https://future-architect.github.io/articles/20240426b/</link>
      <guid>https://future-architect.github.io/articles/20240426b/</guid>
      <pubDate>Thu, 25 Apr 2024 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20240408a/&quot;&gt;春の入門連載&lt;/a&gt;の13本目です。&lt;/p&gt;
&lt;p&gt;こんにちは。TIG所属の後藤喜斗です。&lt;/p&gt;
&lt;p&gt;同じプロジェクトで活躍されている&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20240408a/">春の入門連載</a>の13本目です。</p><p>こんにちは。TIG所属の後藤喜斗です。</p><p>同じプロジェクトで活躍されている<a href="/authors/%E4%BC%8A%E8%97%A4%E5%A4%AA%E6%96%89/">伊藤太斉さん</a> にお誘いいただき、初めて技術ブログを書かせていただきます。</p><h1 id="取り組みの経緯"><a href="#取り組みの経緯" class="headerlink" title="取り組みの経緯"></a>取り組みの経緯</h1><p>業務ではアプリチームに所属していて、フロントエンドの開発をする際にはVueを使用しています。</p><p>Vueでの開発に慣れていくにつれて、「Vue使いやすいな、よくできているなぁ。」と思うとともに、普段何気なく使っているスプレッドシートに対して、今まで感じたことのなかった不便さを感じるようになりました。</p><p>そして、その朧げながら見えてきた不便さの正体が、スプレッドシートでは双方向バインディングができないからではないか、と思い至りました。</p><p>そのため今回は、Vueを使うことで当たり前のように利便性を享受していた双方向バインディングについて改めて調べるとともに、実践編ということで、スプレッドシートに出力したGoogleTasksのタスク一覧と、GoogleTasks本体とを擬似的に双方向バインディングさせてみることにしました。</p><h1 id="そもそも双方向バインディングとは"><a href="#そもそも双方向バインディングとは" class="headerlink" title="そもそも双方向バインディングとは"></a>そもそも双方向バインディングとは</h1><p>まずは双方向バインディングについて調べてみます。Wikiには下記のように記載がありました。</p><h2 id="データバインディングとは"><a href="#データバインディングとは" class="headerlink" title="データバインディングとは"></a>データバインディングとは</h2><blockquote><p>データバインディングは、コンピュータプログラミングにおいて、データ（ソースオブジェクト）とそれに対応する対象要素（ターゲットオブジェクト）を結びつけ、データあるいは対象の変更を暗黙的に（自動的に）もう一方に反映（同期）することであり、またそれを実現する仕組みのことである。<br>データバインディングは特にGUIを持つアプリケーションソフトウェアの効率的な開発を目的とした技術であり、Model-View-ViewModel (MVVM) パターンの実現に必須の技術でもある。</p></blockquote><h3 id="単方向と双方向のデータバインディング"><a href="#単方向と双方向のデータバインディング" class="headerlink" title="単方向と双方向のデータバインディング"></a>単方向と双方向のデータバインディング</h3><blockquote><p>データバインディングには変更反映の方向性によって以下の2種類が存在する。<br>単方向バインディング (one-way): 「ソース ⇒ ターゲット」あるいは「ターゲット ⇒ ソース」のみの一方向の暗黙的反映<br>双方向バインディング (two-way): ソース ⇔ ターゲット間の双方向の暗黙的反映</p></blockquote><p>参考）<a href="https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0">データバインディング</a></p><p>名前の通りではあるのですが、改めてデータバインディングとは「データの変更があったときに一方から他方に同期を取る仕組み」です。すると、前出のスプレッドシートで双方向バインディングができないというのを具体的にいうと、「A1セルの変更がA2セルに反映される」かつ「A2セルの変更がA1セルに反映される」みたいな状態は作れない、ということです。</p><p>ちなみにこれだけなら、スプレッドシートの標準機能のマクロの記録を使って下記のようなGASのコードを自動生成して、編集時にトリガー実行すれば、誰でも簡単に実現可能なのですが、これだけだとあまり旨味がないですよね。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> spreadsheet = <span class="title class_">SpreadsheetApp</span>.<span class="title function_">getActive</span>();</span><br><span class="line">  spreadsheet.<span class="title function_">getRange</span>(<span class="string">&#x27;A1&#x27;</span>).<span class="title function_">activate</span>();</span><br><span class="line">  spreadsheet.<span class="title function_">getRange</span>(<span class="string">&#x27;A2&#x27;</span>).<span class="title function_">copyTo</span>(spreadsheet.<span class="title function_">getActiveRange</span>(), <span class="title class_">SpreadsheetApp</span>.<span class="property">CopyPasteType</span>.<span class="property">PASTE_NORMAL</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ここで、データバインディングの定義に出てきている「MVVMパターン」という用語も押さえておきます。</p><h2 id="MVVMパターン"><a href="#MVVMパターン" class="headerlink" title="MVVMパターン"></a>MVVMパターン</h2><blockquote><p>Model-View-ViewModel (MVVM、モデル・ビュー・ビューモデル) はUIを持つソフトウェアに適用されるソフトウェアアーキテクチャの一種である。<br>MVVMはソフトウェアをModel・View・ViewModelの3要素に分割する。プレゼンテーションとドメインを分離し（V-VM &#x2F; M）また宣言的Viewを分離し状態とマッピングを別にもつ（V &#x2F; VM）ことでソフトウェアの保守性・開発生産性を向上させる。<br>Model-View-ViewModelパターンはModel-View-Controller (MVC) パターンの派生であり、特にPresentation Model パターンを直接の祖先に持つ。</p></blockquote><p>参考）<a href="https://ja.wikipedia.org/wiki/Model_View_ViewModel">Model View ViewModel</a></p><p>MVVMパターンは、画面表示している項目（View）で使いたいデータと、システム側の処理（Model）で使いたいデータを、ViewModelがうまいこと相互に変換してくれる仕組みのようです。</p><p>すると確かに、MVVMパターンを実装する際に、ViewModelがデータ変換でデータバインディングをしてくれると良い感じに実装できそうです。前出のWikiに双方向バインディングがMVVMパターンで必須の技術だと書かれていたのも納得です。</p><p>これを踏まえると、先ほどのA1セルをA2セルにコピペする、みたいな使い方ではなく、「Viewにあたる表示部分のデータと、Modelにあたる何らかの処理機能を持つ部分のデータとを、自動的に連動させる仕組み」を作ったら、擬似的に双方向バインディングができているだけでなく、MVVMパターンのメリットも享受できていると言えそうです。</p><p>ということで前置きがかなり長くなりましたが、今回はModel側にあたるタスク管理機能はGoogleTasksを活用し、ViewとしてのスプレッドシートとGoogleTasksを自動でバインドさせる仕組みを作ってみました。</p><h1 id="今回作った機能"><a href="#今回作った機能" class="headerlink" title="今回作った機能"></a>今回作った機能</h1><p>スプレッドシートに出力されているGoogle TasksのTodoをスプレッドシート側からも自動で更新できる機能を、MVVMパターンを意識して下記のような構成で実装しました。</p><p>※シートからのタスク追加とタスクリストの変更は追加で実装が必要になり、主題からもそれていくので今回は割愛しました。</p><h3 id="View-Model"><a href="#View-Model" class="headerlink" title="View Model"></a>View Model</h3><p>Googleが公表している<a href="https://developers.google.com/tasks/reference/rest/v1/tasks?hl=ja">GoogleTasksのREST Resourceの形式</a>と、スプレッドシートに表示しているタスクリストの各列の項目を連携（擬似的に双方向バインディング）させました。</p><ul><li>スプレッドシートの値を取得し、GoogleTasksにセットする（View→Model）<ul><li>タスクリストの変更を検知<ul><li>変更のあった行の値を取得</li></ul></li><li>スプレッドシートの値をTaskにセットして更新</li></ul></li><li>GoogleTasksの情報をスプレッドシートに反映させる（Model→View）<ul><li>GoogleTaskの情報をスプレッドシートに自動的に反映させる（今回はトリガーを使用して定時実行）</li></ul></li></ul><p>構成図にするとこんなイメージです。</p><img src="/images/20240426b/構成図.png" alt="" width="842" height="552" loading="lazy"><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>スプレッドシートのタスクリスト表の各項目は以下の通り。</p><div class="scroll"><table><thead><tr><th align="left">タスクID</th><th align="left">タスクリスト名</th><th align="left">タスク名</th><th align="left">ステータス</th><th align="left">更新日時</th><th align="left">期限</th><th align="left">完了日</th><th align="left">メモ</th></tr></thead><tbody><tr><td align="left">abc…</td><td align="left">マイリスト</td><td align="left">タスク名</td><td align="left">completed</td><td align="left">2024&#x2F;04&#x2F;01</td><td align="left">2024&#x2F;04&#x2F;01</td><td align="left">2024&#x2F;04&#x2F;01</td><td align="left">説明</td></tr></tbody></table></div><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>GoogleTasksを利用。みなさんご存知のGoogleカレンダーとの連動だけでなく、最近はGoogleドキュメントやGmail、Googleチャットなどいろんなツールと連携して利用できて便利です。</p><h2 id="実装したGASのコード"><a href="#実装したGASのコード" class="headerlink" title="実装したGASのコード"></a>実装したGASのコード</h2><p>使い方は下記の通り。</p><ol><li>スプレッドシート上部メニューの、拡張機能&gt;Apps ScriptからGASのエディタを開いて下記を入力</li><li>Tasksサービスを使えるように権限設定</li><li>トリガーメニューから、以下のトリガーを設定<ol><li>onEditを編集時に実行</li><li>getGoogleTasksを定時実行<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// シート取得</span></span><br><span class="line"><span class="keyword">const</span> spreadSheet = <span class="title class_">SpreadsheetApp</span>.<span class="title function_">getActiveSpreadsheet</span>()</span><br><span class="line"><span class="keyword">const</span> sheetToDo = spreadSheet.<span class="title function_">getSheetByName</span>(<span class="string">&quot;GoogleTasks&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> lastRow = sheetToDo.<span class="title function_">getLastRow</span>()</span><br><span class="line"><span class="keyword">const</span> lastColumn = sheetToDo.<span class="title function_">getLastColumn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Taskの項目をSheetの列番号へ変換する</span></span><br><span class="line"><span class="comment">// スプレッドシートの列を並び替えたい時は、この項目を書き換えるだけでOK。</span></span><br><span class="line"><span class="keyword">const</span> getColNum = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">taskListName</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">status</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">updated</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">due</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">completed</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">notes</span>: <span class="number">7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//タスク取得オプション</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">showCompleted</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">showDeleted</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">showHidden</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下、SpreadSheetからGoogleTasksへ変更を反映</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sheetの変更を検知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onEdit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> editRow = spreadSheet.<span class="title function_">getActiveCell</span>().<span class="title function_">getRow</span>()</span><br><span class="line">    <span class="keyword">const</span> editColumn = spreadSheet.<span class="title function_">getActiveCell</span>().<span class="title function_">getColumn</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (spreadSheet.<span class="title function_">getActiveSheet</span>().<span class="title function_">getSheetId</span>() != sheetToDo.<span class="title function_">getSheetId</span>()) &#123;</span><br><span class="line">        <span class="comment">// GoogleTasks以外のシートを編集した場合は即リターン</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (editRow &lt;= lastRow &amp;&amp; editColumn &lt;= lastColumn) &#123;</span><br><span class="line">        <span class="comment">// Sheetに変更のあった行の値をGoogleTaskに反映する</span></span><br><span class="line">        <span class="title function_">setTaskFromSheet</span>(editRow)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sheetの値を取得し、GoogleTasksに反映する</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setTaskFromSheet</span>(<span class="params">rowNumber</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sheetの変更のあった行の値を取得</span></span><br><span class="line">    <span class="keyword">const</span> sheetTask = sheetToDo.<span class="title function_">getRange</span>(rowNumber, <span class="number">1</span>, <span class="number">1</span>, sheetToDo.<span class="title function_">getLastColumn</span>()).<span class="title function_">getValues</span>()[<span class="number">0</span>]</span><br><span class="line">    <span class="title class_">Logger</span>.<span class="title function_">log</span>(sheetTask)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// タスクリスト名からタスクリストIDを取得（以下でTasksのメソッドの呼び出しに使用）</span></span><br><span class="line">    <span class="keyword">const</span> taskListId = <span class="title function_">getTaskListId</span>(sheetTask[getColNum.<span class="property">taskListName</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GoogleTasksのタスクを取得</span></span><br><span class="line">    <span class="keyword">const</span> task = <span class="title class_">Tasks</span>.<span class="property">Tasks</span>.<span class="title function_">get</span>(taskListId, sheetTask[getColNum.<span class="property">id</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sheetの情報をGoogleTasksにセット</span></span><br><span class="line">    <span class="title function_">setSheetTask</span>(task, sheetTask)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GoogleTaskを更新</span></span><br><span class="line">    <span class="title class_">Tasks</span>.<span class="property">Tasks</span>.<span class="title function_">update</span>(task, taskListId, task.<span class="property">id</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * タスクリスト名からタスクリストIDを取得</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTaskListId</span>(<span class="params">taskListName</span>) &#123;</span><br><span class="line">    <span class="comment">// Sheetのタスクリスト名からタスクリストIDを取得</span></span><br><span class="line">    <span class="keyword">const</span> lists = <span class="title class_">Tasks</span>.<span class="property">Tasklists</span>.<span class="title function_">list</span>().<span class="title function_">getItems</span>()</span><br><span class="line">    <span class="keyword">let</span> taskListId</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lists.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lists[i].<span class="property">title</span> == taskListName) &#123;</span><br><span class="line">            taskListId = lists[i].<span class="property">id</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> taskListId</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sheetの情報をGoogleTasksにセット</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setSheetTask</span>(<span class="params">task, sheetTask</span>) &#123;</span><br><span class="line">    <span class="comment">// Sheetの値をTaskにセット</span></span><br><span class="line">    task.<span class="property">title</span> = sheetTask[getColNum.<span class="property">title</span>]</span><br><span class="line">    task.<span class="property">status</span> = sheetTask[getColNum.<span class="property">status</span>]</span><br><span class="line">    task.<span class="property">updated</span> = sheetTask[getColNum.<span class="property">updated</span>] ? sheetTask[getColNum.<span class="property">updated</span>].<span class="title function_">toISOString</span>() : <span class="string">&#x27;&#x27;</span></span><br><span class="line">    task.<span class="property">due</span> = sheetTask[getColNum.<span class="property">due</span>] ? sheetTask[getColNum.<span class="property">due</span>].<span class="title function_">toISOString</span>() : <span class="string">&#x27;&#x27;</span></span><br><span class="line">    task.<span class="property">completed</span> = sheetTask[getColNum.<span class="property">completed</span>] ? sheetTask[getColNum.<span class="property">completed</span>].<span class="title function_">toISOString</span>() : <span class="string">&#x27;&#x27;</span></span><br><span class="line">    task.<span class="property">notes</span> = sheetTask[getColNum.<span class="property">notes</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//　以下、GoogleTasksからSpreadSheetへタスク一覧を出力</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GoogleTasksのリストからタスクを取得してスプレッドシートにセット</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getGoogleTasks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// シート2行名以下をクリア</span></span><br><span class="line">    <span class="keyword">const</span> lastRow = sheetToDo.<span class="title function_">getLastRow</span>()</span><br><span class="line">    <span class="keyword">const</span> lastColumn = sheetToDo.<span class="title function_">getLastColumn</span>()</span><br><span class="line">    sheetToDo.<span class="title function_">getRange</span>(<span class="number">2</span>, <span class="number">1</span>, lastRow, lastColumn).<span class="title function_">clearContent</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Google Tasksからタスクリストを取得してTaskの情報をSheetに反映させる</span></span><br><span class="line">    <span class="keyword">const</span> taskList = 　<span class="title function_">getTaskLists</span>()</span><br><span class="line">    sheetToDo.<span class="title function_">getRange</span>(<span class="number">2</span>, <span class="number">1</span>, taskList.<span class="property">length</span>, lastColumn).<span class="title function_">setValues</span>(taskList)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GoogleTasksからタスクリストをすべて取得</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTaskLists</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> lists = <span class="title class_">Tasks</span>.<span class="property">Tasklists</span>.<span class="title function_">list</span>().<span class="title function_">getItems</span>()</span><br><span class="line">    <span class="keyword">let</span> taskLists = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lists.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        taskLists = taskLists.<span class="title function_">concat</span>(<span class="title function_">createTaskTable</span>(lists[i]))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> taskLists</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * タスクリストからタスクをすべて取得</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createTaskTable</span>(<span class="params">taskList</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tasks = <span class="title class_">Tasks</span>.<span class="property">Tasks</span>.<span class="title function_">list</span>(taskList.<span class="property">id</span>, options).<span class="title function_">getItems</span>()</span><br><span class="line">    <span class="keyword">const</span> table = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">    <span class="keyword">const</span> taskListName = taskList.<span class="property">title</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tasks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> task = tasks[i]</span><br><span class="line">        <span class="keyword">let</span> row = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">        row[getColNum.<span class="property">id</span>] = task.<span class="property">id</span></span><br><span class="line">        row[getColNum.<span class="property">taskListName</span>] = taskListName</span><br><span class="line">        row[getColNum.<span class="property">title</span>] = task.<span class="property">title</span></span><br><span class="line">        row[getColNum.<span class="property">status</span>] = task.<span class="property">status</span></span><br><span class="line">        row[getColNum.<span class="property">updated</span>] = task.<span class="property">updated</span> ? <span class="keyword">new</span> <span class="title class_">Date</span>(task.<span class="property">updated</span>) : <span class="string">&quot;&quot;</span></span><br><span class="line">        row[getColNum.<span class="property">due</span>] = task.<span class="property">due</span> ? <span class="keyword">new</span> <span class="title class_">Date</span>(task.<span class="property">due</span>) : <span class="string">&quot;&quot;</span></span><br><span class="line">        row[getColNum.<span class="property">completed</span>] = task.<span class="property">completed</span></span><br><span class="line">        row[getColNum.<span class="property">notes</span>] = task.<span class="property">notes</span></span><br><span class="line">        table.<span class="title function_">push</span>(row)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> table</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="動作イメージ"><a href="#動作イメージ" class="headerlink" title="動作イメージ"></a>動作イメージ</h2><p>スプレッドシートからの変更は編集をトリガーに実行されます。</p><img src="/images/20240426b/スプレッドシートから変更.gif" alt="スプレッドシートから変更.gif" width="1200" height="662" loading="lazy"><p>GoogleTasksからの変更は定時実行で最短1分ごとに取得できます。</p><img src="/images/20240426b/GoogleTasksから変更.gif" alt="GoogleTasksから変更.gif" width="1200" height="662" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>わざわざ自分で手を動かしてはみたものの、イベントの監視や値の反映などもVueを使えば裏で自動的にやってくれて、しかも簡単な記法でよりリアルタイムに同期される双方向バインディングが実装できると思うと、非常にありがたいですね。</p><p>春の入門連載では、同期の吉原さんが<a href="/articles/20240422a/">Vueを使ったオセロの制作</a>にも挑戦していますので、ぜひみてみてください。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Vue-js/">Vue.js</category>
      
      <category domain="https://future-architect.github.io/tags/GAS/">GAS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85/">初心者</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%83%97%E3%83%AC%E3%83%83%E3%83%89%E3%82%B7%E3%83%BC%E3%83%88/">スプレッドシート</category>
      
      
      <comments>https://future-architect.github.io/articles/20240426b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ドイツで開催された国際物流展示会「LogiMAT2024」を視察してきました!～その1～</title>
      <link>https://future-architect.github.io/articles/20240426a/</link>
      <guid>https://future-architect.github.io/articles/20240426a/</guid>
      <pubDate>Thu, 25 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;物流サービス事業部の&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>物流サービス事業部の<a href="/authors/%E5%BC%95%E7%B6%B2%E5%BA%B7%E6%9A%81/">引網康暁</a>です。ドイツのシュツットガルトで3月に開催された国際物流展示会「<a href="https://www.logimat-messe.de/en">LogiMAT2024</a>」を視察しました！3回のシリーズで現地での模様と注目のソリューションについてレポートします。</p><p><strong>おわりにウェビナーのご案内がありますので、最後までお読みいただけるとありがたいです！</strong></p><img src="/images/20240426a/GPTempDownload.JPG" alt="GPTempDownload.JPG" width="1200" height="1050" loading="lazy">▲広大な展示ホール、、、全部で10ホールもありました。<h1 id="LogiMAT2024とは"><a href="#LogiMAT2024とは" class="headerlink" title="LogiMAT2024とは"></a>LogiMAT2024とは</h1><p><strong>LogiMAT2024</strong>は、ヨーロッパを代表する<strong>物流ロボット・マテハン機器の国際展示会</strong>です。</p><p>物流自動化のグローバルな流れを受けて、従来からの物流機器に加えて、最新のテクノロジーやAI関連の展示も活発になっています。日本では、フューチャーアーキテクトも出展している<a href="https://www.logis-tech-tokyo.gr.jp/ltt/">国際物流総合展</a>が有名ですが、その約2倍の広大な展示面積に1600を超える多くの出展がありました。さながら、物流ロボットやマテハン機器のお祭りといった感じです。</p><img src="/images/20240426a/GOPR0020.JPG" alt="GOPR0020.JPG" width="1200" height="1050" loading="lazy"><p>▲<a href="https://www.logimat-messe.de/en/fair/about-logimat/logimat-daily">Logimat DAILY</a>という公式メディアから取材を受け、小林さんのインタビューが<a href="https://www.logimat-messe.de/sites/default/files/downloads/logimat-daily_2024_mittwoch__.pdf">記事（5ページ目！）</a>にも取り上げられました！</p><p>全体感として、物流業界が直面しているリアルな課題解決に向き合っている展示が多かった印象です。</p><p>前週にアメリカ・アトランタで開催された国際物流展示会「<a href="https://www.modexshow.com/">MODEX2024</a>」では、未来志向の<strong>ヒューマノイド型物流ロボット</strong>が展示されていたようですが、LogiMAT2024では<strong>自動フォークリフト</strong>や<strong>自動ハンドフォークリフト</strong>など、業界の人手不足に対応した、より地に足の着いたソリューションを多く見かけました。</p><p>それから、中国の物流ロボット企業のブースは人だかりとなっており、物流自動化マーケットでの中国企業の隆盛をあらためて強く感じました。また、中国企業と欧米企業が資本提携を含むアライアンスを形成している事例もあり、物流ロボットの<strong>フルラインアップ戦略</strong>が加速していることも実感しました。</p><h1 id="注目のソリューション"><a href="#注目のソリューション" class="headerlink" title="注目のソリューション"></a>注目のソリューション</h1><p>それでは、LogiMAT2024のBest Product（最優秀賞）の中から、注目のソリューションを解説します！</p><h2 id="Brightpick社のAutopicker"><a href="#Brightpick社のAutopicker" class="headerlink" title="Brightpick社のAutopicker"></a>Brightpick社のAutopicker</h2><p>Brightpick社は<strong>3Dビジョン</strong>をルーツとした物流ロボットを開発している企業です。同社が開発したAutopickerは、<strong>ACR</strong>(Autonomous Case-handling Robot : 自律走行ケースハンドリングロボット)と<strong>アーム型ロボット</strong>が一体となった、まさに<strong>ハイブリッド型物流ロボット</strong>です。</p><p>ロボットの右側は商品を格納するコンテナをピックアップします。ピックアップしたコンテナに格納されている商品を<strong>3Dビジョン</strong>で画像認識し、<strong>アーム型ロボット</strong>がその商品をロボットの左側に置かれたコンテナへ移動します。フロアーを自由に移動しながら、一連のピッキング作業を滞りなく進めることができるため、効率的なピッキングと高いスループットが期待できます。画像認識できる商品のSKU(Stock keeping Unit)を増やすことが課題のようです。</p><img src="/images/20240426a/brightpick.png" alt="brightpick.png" width="822" height="522" loading="lazy"><p>▲Brightpick社のAutopicker</p><p>LogiMAT2024の他の展示を見ましても、物流ロボットの特化した機能同士が融合することで、汎化した機能がより高まっていくトレンドを確認することができました。例えば、Quicktron社のQuickBinも、保管棚への入出庫を担う「親機」と、フロアー上の搬送を担う「子機」がハイブリッドに融合したシステムと言えます。</p><img src="/images/20240426a/QuickBin.png" alt="QuickBin.png" width="622" height="598" loading="lazy"><p>▲Quicktron社のQuickBin</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回のブログではLogiMAT2024～その1～をレポートしました。</p><p>前職でドイツ駐在員をしていた経験がありますので、第二の故郷への久しぶりの帰郷でした。ヨーロッパでは、さまざまな国籍や民族の方が、国境や言語の壁を越えて働いています。そのため、<strong>業務標準化・規格化・効率化</strong>が、日本以上に当たり前になっています。物流自動化の展示を通じて、その一端を今回のLogiMAT2024でも再確認することができました。</p><p>フューチャーアーキテクト物流サービス事業部では、おかげさまで物流自動化のコンサルティングのご相談をいただく機会も増えていますので、物流テクノロジーのリサーチ機能にますます磨きをかけていきます！</p><p>さて、5月29日（水）に、<a href="https://www.future.co.jp/futureinsightseminar/20240529/">LogiMAT2024の視察レポートウェビナー</a>を開催します！このブログではお伝えきれなかったコンテンツも発信しますので、物流DXにご関心がある方は奮ってご参加いただけると幸いです！</p><p><a href="https://www.future.co.jp/futureinsightseminar/20240529/">https://www.future.co.jp/futureinsightseminar/20240529/</a></p><img src="/images/20240426a/全体写真.jpg" alt="全体写真.jpg" width="1200" height="1699" loading="lazy">▲今回の視察に参加したメンバー（左から、石川さん、小林さん、引網）。<p>では、～その2～もお楽しみに！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%A5%AD%E7%95%8C%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3/">業界ドメイン</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AD%E3%83%9C%E3%83%83%E3%83%88/">ロボット</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%9E%E3%83%86%E3%83%AA%E3%82%A2%E3%83%AB%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AA%E3%83%B3%E3%82%B0/">マテリアルハンドリング</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%89%A9%E6%B5%81%E6%A5%AD%E7%95%8C/">物流業界</category>
      
      <category domain="https://future-architect.github.io/tags/LogiMAT2024/">LogiMAT2024</category>
      
      
      <comments>https://future-architect.github.io/articles/20240426a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>シェルスクリプトで固定長ファイルに区切り文字を入れてCSVに変換する</title>
      <link>https://future-architect.github.io/articles/20240425a/</link>
      <guid>https://future-architect.github.io/articles/20240425a/</guid>
      <pubDate>Wed, 24 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240425a/29069589_s.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/articles/20240408a/&quot;&gt;春の入門連載&lt;/a&gt;の12本目です。&lt;/p&gt;
&lt;h2</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240425a/29069589_s.jpg" alt="" width="640" height="480"><p><a href="/articles/20240408a/">春の入門連載</a>の12本目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。新卒2年目の山下です。</p><p>最近ちょっとした作業でシェルスクリプトを触る機会が増え、「固定長ファイルをCSVに変換する」といったややマニアックな文字列操作をすることがありました。</p><p>せっかくの機会ですので、利用コマンドやオプションをまとめました。</p><h2 id="本編"><a href="#本編" class="headerlink" title="本編"></a>本編</h2><h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul><li>Red Hat Enterprise Linux release 8.5 (Ootpa)<br>※利用する環境によってはマルチバイト文字を扱う際の挙動が異なる可能性があります。</li></ul><h3 id="利用するファイル"><a href="#利用するファイル" class="headerlink" title="利用するファイル"></a>利用するファイル</h3><p>例として、固定長Shift_JIS（SJIS）のファイルを可変調UTF-8に変換します。</p><p>入力の固定長ファイルは次の条件のものを想定しています。</p><ul><li>下記エスケープが必要な文字が含まれない<ul><li>改行コード（\nや\rなど）</li><li>カンマ（,）</li><li>クォート（”）</li></ul></li></ul><p><strong>変換前</strong></p><ul><li>文字コード：SJIS</li><li>レコード長：10Byte</li><li>カラム長：2Byte（全カラム固定）</li><li>※上記エスケープ文字や特殊文字の一部には対応出来ません</li></ul><figure class="highlight bash"><figcaption><span>hoge.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> hoge.txt</span><br><span class="line">ｱｲｳｴｵｶｷｸケ01234567８ｻｼｽｾｿﾀﾁﾂテabcdefghア</span><br></pre></td></tr></table></figure><p><strong>変換後</strong></p><ul><li>文字コード：UTF-8</li><li>CSV</li></ul><figure class="highlight bash"><figcaption><span>result.csv</span></figcaption><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> result.csv</span><br><span class="line">ｱｲ,ｳｴ,ｵｶ,ｷｸ,ケ</span><br><span class="line">01,23,45,67,８</span><br><span class="line">ｻｼ,ｽｾ,ｿﾀ,ﾁﾂ,テ</span><br><span class="line">ab,<span class="built_in">cd</span>,ef,gh,ア</span><br></pre></td></tr></table></figure><h3 id="①文字コードの変更"><a href="#①文字コードの変更" class="headerlink" title="①文字コードの変更"></a>①文字コードの変更</h3><p>はじめに、Bashで適切に文字を読み込めるよう、文字コードの変換を行います。</p><p><code>iconv</code>コマンドを利用し<code>-f</code>で指定した文字コードを<code>-t</code>で指定した文字コードに変換し標準出力することが可能です。</p><ul><li><p>変換前のファイル</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> hoge.txt <span class="comment">#-- SJISをUTF-8と解釈して出力しているため文字化けしている</span></span><br><span class="line">���������P01234567�W�������eabcdefgh�A</span><br></pre></td></tr></table></figure></li><li><p>iconvで文字コードを変換後のファイル</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iconv -f SJIS -t UTF8 hoge.txt &gt;&gt; hogehoge.txt <span class="comment">#--リダイレクトすることでhogehoge.txtに出力</span></span><br><span class="line">ｱｲｳｴｵｶｷｸケ01234567８ｻｼｽｾｿﾀﾁﾂテabcdefghア</span><br></pre></td></tr></table></figure></li></ul><h3 id="②改行付与"><a href="#②改行付与" class="headerlink" title="②改行付与"></a>②改行付与</h3><h4 id="fold"><a href="#fold" class="headerlink" title="fold"></a>fold</h4><p>最も基本的な改行付与のコマンドは<code>fold</code>コマンドです。</p><p>指定した値で改行を増やし標準出力します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fold</span> -option filepath</span><br></pre></td></tr></table></figure><div class="scroll"><table><thead><tr><th>オプション</th><th>概要</th></tr></thead><tbody><tr><td>-b</td><td>バイト数で数える</td></tr><tr><td>-w</td><td>幅で数える</td></tr></tbody></table></div><h6 id="バイト数区切りで改行付与する場合"><a href="#バイト数区切りで改行付与する場合" class="headerlink" title="バイト数区切りで改行付与する場合"></a>バイト数区切りで改行付与する場合</h6><p><code>-b</code>で指定したバイト数単位で改行が付与されます。</p><p>今回の例の場合、前段で文字コード変換（SJIS→UTF-8）をしたため、<br>半角カナ<code>SJIS：1Byte</code>や全角文字<code>SJIS：2Byte</code>のほとんどは<code>UTF-8：3Byte</code>にByte数が変更されるため、カラムずれがおきています。</p><p>（現環境では文字の途中で改行コードが挿入されることはなく、10Byteを超える場合は手前の文字までが1行となっています。）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">fold</span> -b10 hogehoge.txt</span><br><span class="line">ｱｲｳ</span><br><span class="line">ｴｵｶ</span><br><span class="line">ｷｸケ0</span><br><span class="line">1234567８</span><br><span class="line">ｻｼｽ</span><br><span class="line">ｾｿﾀ</span><br><span class="line">ﾁﾂテa</span><br><span class="line">bcdefghア</span><br></pre></td></tr></table></figure><h6 id="文字列幅区切りで改行付与する場合"><a href="#文字列幅区切りで改行付与する場合" class="headerlink" title="文字列幅区切りで改行付与する場合"></a>文字列幅区切りで改行付与する場合</h6><p>文字列幅は<code>全角：2</code>、 <code>半角：1</code>でカウントされます。</p><p>SJISの半角文字は<code>1文字:1Byte</code>、<code>全角:2Byte</code>ため、文字列幅基準で改行付与することでUTF-8に変換した後でも想定するレコード長で区切ることが出来ました。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">fold</span> -w10 hogehoge.txt</span><br><span class="line">ｱｲｳｴｵｶｷｸケ</span><br><span class="line">01234567８</span><br><span class="line">ｻｼｽｾｿﾀﾁﾂテ</span><br><span class="line">abcdefghア</span><br></pre></td></tr></table></figure><h6 id="文字数区切りで改行付与する場合"><a href="#文字数区切りで改行付与する場合" class="headerlink" title="文字数区切りで改行付与する場合"></a>文字数区切りで改行付与する場合</h6><p>参考程度ですが、文字数区切りで改行を付与する方法も記載します。</p><p><code>grep -o</code>を利用して<code>.</code>に当てはまる文字を1文字ずつ出力し、指定の文字数で改行を付与しています。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">for</span> char <span class="keyword">in</span> $(grep -o . hogehoge.txt) ; <span class="keyword">do</span> <span class="built_in">echo</span> -n <span class="variable">$char</span>; count=$(( count + <span class="number">1</span> )); <span class="keyword">if</span> [ <span class="variable">$count</span> -eq 9 ]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;&quot;</span>; count=0; <span class="keyword">fi</span>; <span class="keyword">done</span></span><br><span class="line">ｱｲｳｴｵｶｷｸケ</span><br><span class="line">01234567８</span><br><span class="line">ｻｼｽｾｿﾀﾁﾂテ</span><br><span class="line">abcdefghア</span><br></pre></td></tr></table></figure><h3 id="③カラム区切り文字の挿入"><a href="#③カラム区切り文字の挿入" class="headerlink" title="③カラム区切り文字の挿入"></a>③カラム区切り文字の挿入</h3><p>次に区切り文字を挿入してカラム分割を行います。</p><h4 id="カラム単位で個別区切り"><a href="#カラム単位で個別区切り" class="headerlink" title="カラム単位で個別区切り"></a>カラム単位で個別区切り</h4><p><code>sed</code>コマンドの<code>-e</code>オプションを利用して指定した文字数で個別に<code>,（カンマ）</code>を挿入する方法です。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">while</span> <span class="built_in">read</span> line ;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$line</span> | sed -e <span class="string">&#x27;s/./&amp;,/8&#x27;</span> -e <span class="string">&#x27;s/./&amp;,/6&#x27;</span> -e <span class="string">&#x27;s/./&amp;,/4&#x27;</span> -e <span class="string">&#x27;s/./&amp;,/2&#x27;</span> ; <span class="keyword">done</span> &lt; hogehoge.txt</span><br><span class="line">ｱｲ,ｳｴ,ｵｶ,ｷｸ,ケ</span><br><span class="line">01,23,45,67,８</span><br><span class="line">ｻｼ,ｽｾ,ｿﾀ,ﾁﾂ,テ</span><br><span class="line">ab,<span class="built_in">cd</span>,ef,gh,ア</span><br></pre></td></tr></table></figure><h4 id="正規表現を利用した文字数区切り"><a href="#正規表現を利用した文字数区切り" class="headerlink" title="正規表現を利用した文字数区切り"></a>正規表現を利用した文字数区切り</h4><p>文字列を1文字ずつループしながら下記処理を実行しています。</p><ol><li>全半角を識別</li><li>半角文字の場合は2文字、全角文字の場合は1文字間隔で区切り文字<code>,（カンマ）</code>を挿入</li><li>行の末尾で改行</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  count=0</span><br><span class="line">  <span class="keyword">for</span> ((i=<span class="number">0</span>; i&lt;<span class="variable">$&#123;#line&#125;</span>; i++)); <span class="keyword">do</span></span><br><span class="line">    char=<span class="string">&quot;<span class="variable">$&#123;line:$i:1&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;#line&#125;</span> = $(( i + <span class="number">1</span> )) ]]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$char</span></span><br><span class="line">      <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [[ -n $(<span class="built_in">echo</span> <span class="variable">$char</span> | grep -P <span class="string">&quot;[ｦ-ﾝ]&quot;</span>) ]] || [[ -n $(<span class="built_in">echo</span> <span class="variable">$char</span> | grep -E <span class="string">&quot;[0-9A-Za-z]&quot;</span>) ]]; <span class="keyword">then</span> <span class="comment">#ASCII or 半角カナは2文字カウントしたらカンマを挿入</span></span><br><span class="line">        count=$((count + <span class="number">1</span>))</span><br><span class="line">      <span class="keyword">if</span> [[ <span class="variable">$count</span> = 2 ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$char</span>,&quot;</span></span><br><span class="line">        count=0</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="variable">$char</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$char</span>,&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span> &lt; hogehoge.txt &gt; result.csv</span><br><span class="line"></span><br><span class="line">------ 結果 ------</span><br><span class="line">ｱｲ,ｳｴ,ｵｶ,ｷｸ,ケ</span><br><span class="line">01,23,45,67,８</span><br><span class="line">ｻｼ,ｽｾ,ｿﾀ,ﾁﾂ,テ</span><br><span class="line">ab,<span class="built_in">cd</span>,ef,gh,ア</span><br></pre></td></tr></table></figure><p>ようやくCSVに変換することが出来ました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Bashの標準機能のみで全半角混在の文字列をキレイに分割することは少し難しいですが、簡単なレイアウトであれば上記を流用することでカラム分割が可能になりました。</p><p>また、今回調べる中で利用するバージョンやディストリビューションによって挙動が異なる事を知りました。</p><p>例えばfoldコマンドを使った改行をubuntuで試すと、下記のように文字化けが起こります。（マルチバイト文字の扱いが異なることが原因のようです。）</p><ul><li><code>Description:    Ubuntu 22.04.2 LTS</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">fold</span> -w10 hogehoge.txt</span><br><span class="line">ｱｲｳ�</span><br><span class="line">��ｵｶ�</span><br><span class="line">�ｸｹｺ</span><br><span class="line">0123456789</span><br><span class="line">ｻｼｽ�</span><br><span class="line">��ｿﾀ�</span><br><span class="line">�ﾂﾃﾄ</span><br><span class="line">abcdefghij</span><br></pre></td></tr></table></figure><p>今回の手法は汎用的に利用できるものでは無いかも知れませんが、マルチバイト文字のByte数が変わると分割や文字カウント方法が少し複雑になり単純計算できない事も多くまとまった内容は少ないです。参考になることがあれば嬉しいです。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://future-architect.github.io/articles/20210329/">https://future-architect.github.io/articles/20210329/</a></li><li><a href="https://www.gnu.org/software/grep/manual/grep.html">https://www.gnu.org/software/grep/manual/grep.html</a></li><li><a href="https://gihyo.jp/book/2017/978-4-7741-8694-8">https://gihyo.jp/book/2017/978-4-7741-8694-8</a></li></ul><p>アイキャッチ画像は<a href="https://www.photo-ac.com/main/detail/29069589">磯の香り - No: 29069589｜写真AC</a> を利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/ShellScript/">ShellScript</category>
      
      <category domain="https://future-architect.github.io/tags/CSV/">CSV</category>
      
      <category domain="https://future-architect.github.io/tags/Linux/">Linux</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%9B%BA%E5%AE%9A%E9%95%B7/">固定長</category>
      
      
      <comments>https://future-architect.github.io/articles/20240425a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>p5.jsで好きなプログラミング言語発表ドラゴンを作ろうとした</title>
      <link>https://future-architect.github.io/articles/20240424a/</link>
      <guid>https://future-architect.github.io/articles/20240424a/</guid>
      <pubDate>Tue, 23 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20240408a/">春の入門連載2024</a>の11日目です。</p><p>SAIGの小橋です。JavaScriptライブラリの1つであるp5.jsに入門します。</p><p><a href="https://p5js.jp/">日本語版公式ページ</a>によれば、p5.jsとは…</p><blockquote><p>クリエイティブなコーディングのためのJavaScriptライブラリで、 アーティスト、デザイナー、教育者、初心者、その他誰にとっても、コーディングを身近で包括的なものにすることに焦点を当てています。</p></blockquote><p>…です。もともとProcessingという言語がグラフィックスやアニメーションに強いもので、それをJavaScriptから使えるようにしたのがp5.jsというライブラリです。</p><p><a href="https://editor.p5js.org/">Webエディタ</a>があるので、最初はここの上で色々試してみるのも良いでしょう。</p><p>今回は、<a href="https://p5js.org/get-started/">公式ページの「はじめに」</a>で説明されている通り、CDNの上にあるp5.jsライブラリを読み込むことにします。後述の通り、ローカルでWebサーバーを立てて表示しています。</p><h1 id="作ったもの"><a href="#作ったもの" class="headerlink" title="作ったもの"></a>作ったもの</h1><p>今回は、ネット上で最近急によく見かけるようになった「<a href="https://www.youtube.com/watch?v=OnCFEo_pXaY">好きな惣菜発表ドラゴン</a>」を真似て、流行りに乗っかって「好きなプログラミング言語発表ドラゴン」の簡易版を作ります。</p><p>画像の表示、線分や四角形の描画、テキストの表示、といった感じで、基本的な機能を使っています。</p><img src="/images/20240424a/Animation.gif" alt="Animation.gif" width="1200" height="675" loading="lazy"><p>JavaScriptのファイルは以下の通りです。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">prev_unit = -<span class="number">1</span>;</span><br><span class="line">random_lang_list = [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;C#&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;Go&quot;</span>, <span class="string">&quot;Visual Basic&quot;</span>, <span class="string">&quot;アセンブリ言語&quot;</span>];</span><br><span class="line">random_lang = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load the image.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">preload</span>(<span class="params"></span>) &#123;</span><br><span class="line">    img = <span class="title function_">loadImage</span>(<span class="string">&#x27;fantasy_dragon_white_flipped.png&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">createCanvas</span>(<span class="number">1280</span>, <span class="number">720</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ms = <span class="title function_">millis</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 背景を白に設定。前フレームの描画を上書きして消す</span></span><br><span class="line">  <span class="title function_">background</span>(<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ドラゴンを表示</span></span><br><span class="line">  base_offset = <span class="number">300</span>;</span><br><span class="line">  <span class="keyword">if</span> (ms &lt;= <span class="number">500</span>) &#123;</span><br><span class="line">    right_offset = <span class="number">2</span> * base_offset;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">500</span> &lt; ms &amp;&amp; ms &lt;= <span class="number">1000</span>) &#123;</span><br><span class="line">    right_offset = base_offset;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    right_offset = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">image</span>(img, width/<span class="number">2</span> + right_offset, (height-width/<span class="number">2</span>)/<span class="number">2</span>, width/<span class="number">2</span>, width/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 吹き出しの線を表示</span></span><br><span class="line">  <span class="comment">// 塗りつぶしをオフにして長方形を表示</span></span><br><span class="line">  <span class="title function_">noFill</span>();</span><br><span class="line">  <span class="title function_">strokeWeight</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="title function_">rect</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">450</span>, <span class="number">300</span>);</span><br><span class="line">  <span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 長方形で右側の一部の線を消す</span></span><br><span class="line">  <span class="title function_">erase</span>();</span><br><span class="line">  dx=<span class="number">5</span>;</span><br><span class="line">  <span class="title function_">rect</span>(<span class="number">50</span>+<span class="number">450</span>-dx, <span class="number">300</span>/<span class="number">4</span>, dx*<span class="number">2</span>, <span class="number">300</span>/<span class="number">4</span>);</span><br><span class="line">  <span class="title function_">noErase</span>();</span><br><span class="line">  <span class="comment">// 残りの2本の線を表示</span></span><br><span class="line">  <span class="title function_">line</span>(<span class="number">50</span>+<span class="number">450</span>, <span class="number">300</span>/<span class="number">4</span>, <span class="number">600</span>, <span class="number">200</span>);</span><br><span class="line">  <span class="title function_">line</span>(<span class="number">50</span>+<span class="number">450</span>, <span class="number">300</span>/<span class="number">2</span>, <span class="number">600</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 言語名を1秒に1回、ランダムに選択する</span></span><br><span class="line">  unit_ms = <span class="number">1000</span></span><br><span class="line">  now_unit = <span class="title class_">Math</span>.<span class="title function_">floor</span>(ms / unit_ms)</span><br><span class="line">  <span class="keyword">if</span> (ms &gt;= <span class="number">3000</span> &amp;&amp; now_unit != prev_unit) &#123;</span><br><span class="line">    random_lang = random_lang_list[(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * random_lang_list.<span class="property">length</span>))];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">textSize</span>(<span class="number">40</span>);</span><br><span class="line">  <span class="title function_">textStyle</span>(<span class="variable constant_">BOLD</span>);</span><br><span class="line">  <span class="title function_">textAlign</span>(<span class="variable constant_">CENTER</span>, <span class="variable constant_">CENTER</span>);</span><br><span class="line">  <span class="title function_">text</span>(random_lang, <span class="number">50</span>+<span class="number">450</span>/<span class="number">2</span>, <span class="number">50</span>+<span class="number">300</span>/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  prev_unit = now_unit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTMLファイルは上記のJavaScriptを読み込むだけの単純なものなので、省略します。</p><h1 id="はまったポイント"><a href="#はまったポイント" class="headerlink" title="はまったポイント"></a>はまったポイント</h1><p>シンプルなプログラムですが、いくつか詰まった点があったのでメモに残しておきます。</p><p>ちなみに、「p5.js 機能名」で検索したときに、Stack Overflowなどに加えて、先述した<a href="https://editor.p5js.org/">Webエディタ</a>で書かれたコードが見つかることもあります。Webエディタでは書いたコードをWeb上に公開できるので、検索時にヒットする可能性があります。公式ドキュメントでは無いので品質には注意する必要がありますが、参考にするのには良いのではないでしょうか。</p><h2 id="画像を表示するためには、ローカルでWebサーバーを立てる必要がある"><a href="#画像を表示するためには、ローカルでWebサーバーを立てる必要がある" class="headerlink" title="画像を表示するためには、ローカルでWebサーバーを立てる必要がある"></a>画像を表示するためには、ローカルでWebサーバーを立てる必要がある</h2><p>単純な四角形や円を描くだけならば、HTMLファイルをブラウザで開くだけでも動きます。</p><p>しかし、PCの内部にある画像を表示しようとすると、この方法ではうまく動かなくなります。ブラウザは <code>Loading...</code> と表示されたまま止まって見えます。これは、画像を読み込もうとしているpreload()関数が終了せずにエラーになっているせいです。デベロッパーツールを見ると下記のようなエラーが表示されていました。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Access to fetch at <span class="string">&#x27;file:///C:/path/to/file/filename.png&#x27;</span> from origin <span class="string">&#x27;null&#x27;</span> has been blocked by CORS policy: Cross origin requests are only supported <span class="keyword">for</span> protocol schemes: http, data, isolated-app, chrome-extension, chrome, https, chrome-untrusted.</span><br></pre></td></tr></table></figure><p><a href="https://github.com/processing/p5.js/wiki/Local-server">公式のこのページ</a>にも記載のある通り、この”cross-origin” エラーを回避するためにはローカルでWebサーバーを立てる必要があります。公式ページでは「Web Server for Chrome」のChrome拡張機能を使うように案内していましたが、現在は使えないようです。後継と思われる「<a href="https://simplewebserver.org/">Simple Web Server</a>」を使用しました。ダウンロードしてインストールするだけなので、導入は簡単です。</p><h2 id="draw-は1-60秒に1回実行される関数"><a href="#draw-は1-60秒に1回実行される関数" class="headerlink" title="draw() は1&#x2F;60秒に1回実行される関数"></a>draw() は1&#x2F;60秒に1回実行される関数</h2><p><a href="https://p5js.org/reference/#/p5/draw">公式ページ</a>にも明記されていますが、<code>draw()</code>は自動的に一定頻度で呼び出されて実行される関数です（フレームレートは変更可能です）。</p><p>ドラゴンを段階的に左に移動させつつ表示しようとしたときに、最初は<code>sleep()</code>関数のようなもので一時的に更新を停止するのかと思いましたが、<code>sleep()</code>関数はありませんでした。考えてみれば、<code>draw()</code>が一定頻度で実行されるので、表示を一時的に止めることはできないのでした。</p><p><code>millis()</code>を使うと、プログラム実行開始からの時間を取得できるので、それを使って条件分岐させることにしました。</p><h2 id="画像の左右反転"><a href="#画像の左右反転" class="headerlink" title="画像の左右反転"></a>画像の左右反転</h2><p>今回素材で使った いらすとやのドラゴンの絵はもともと右を向いていました。今回の用途では、左向きで表示させたいところです。</p><p>調べてみると、画像を左右反転させるためには、<code>scale()</code>を使う方法や<code>translate()</code>を使う方法がありそうでしたが、なかなか複雑そうだったので、諦めて手元の画像編集で左右反転しました。</p><p>ただし、つい最近の2024年3月に新しい機能がライブラリに追加され、それを使うと簡単に左右反転できるようになったようです。<a href="https://qiita.com/youtoy/items/9f8e58820c881037db4b">こちら</a>を参照ください。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>JavaScriptのライブラリp5.jsを触ってみました。</p><p>実はp5.jsには p5.sound という音声を扱うライブラリがあり、本格的な音声信号処理ができる機能を備えています。例えば簡単に<a href="https://p5js.org/examples/sound-frequency-spectrum.html">周波数スペクトルを表示する</a>ことができるようです。音の処理もやってみたかったのですが、次の機会に譲ることにします。</p><p>p5.jsには<a href="https://p5js.org/examples/">例もかなり充実している</a>ので、眺めているだけでも楽しいですね。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Processing/">Processing</category>
      
      <category domain="https://future-architect.github.io/tags/p5-js/">p5.js</category>
      
      
      <comments>https://future-architect.github.io/articles/20240424a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ESP32とGoogleSpreadSheetで始めるIoT入門</title>
      <link>https://future-architect.github.io/articles/20240423a/</link>
      <guid>https://future-architect.github.io/articles/20240423a/</guid>
      <pubDate>Mon, 22 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは！流通・製造サービス事業部所属の高世です。&lt;/p&gt;
&lt;p&gt;こちらは&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！流通・製造サービス事業部所属の高世です。</p><p>こちらは<a href="/articles/20240408a/">春の入門連載2024</a>の10記事目です。</p><p>IoTという言葉が話題になり始めてから、かなりの時間が経ちました。私自身も身近なIoTに関心を持っていろいろ取り組んできましたが、ソフトウェアだけでなくハードウェアの知識も必要になるなど、初めて挑戦する方にとっては敷居が高いと感じることがしばしばありました。<br>特にインターネットに接続するあたりのインフラ周辺は、選択肢が多様で、その分複雑であったり費用がかかったりする場合もあります。</p><p>この記事では、そうしたIoTの問題点をGoogleSpreadSheetを利用することで、手軽に実装できた経験を共有したいと思います。</p><h1 id="今回やること"><a href="#今回やること" class="headerlink" title="今回やること"></a>今回やること</h1><img src="/images/20240423a/image.png" alt="" width="1200" height="607" loading="lazy"><p>今回はESP32というマイコンを利用して温度センサから定期的に温度を計測し、その情報をGoogleSpreadSheet上に保持するシステムを構築します。</p><p>温度センサにはDS18B20という安価で入手性の良いセンサを使用し、冷蔵庫内と冷蔵庫の外（室内）の2つのセンサを設置します。</p><h2 id="ESP32とは"><a href="#ESP32とは" class="headerlink" title="ESP32とは"></a>ESP32とは</h2><img src="/images/20240423a/115673.jpg" alt="" width="640" height="480" loading="lazy"><p><a href="https://akizukidenshi.com/catalog/g/g115673/">https://akizukidenshi.com/catalog/g/g115673/</a></p><p>今回使用するESP32は、いわゆるマイコン（マイクロコントローラー）と呼ばれるもので、PCほど高尚な処理はできませんが、プログラムを書き込むことで決められたInputから何かしらのOutputを出すことができます。</p><p>その中でもESP32はWi-FiやBluetoothなどの無線通信機能を搭載し、IoTデバイスの開発などによく用いられます。</p><p>またArduino IDEと互換性があるのも強みです。Arduino IDEで利用できる様々なライブラリを用いることでセンサーやデバイスとの接続を容易にします。</p><h2 id="DS18B20とは"><a href="#DS18B20とは" class="headerlink" title="DS18B20とは"></a>DS18B20とは</h2><img src="/images/20240423a/image_2.png" alt="" width="438" height="371" loading="lazy"><p>今回使用する温度センサです。<br>Amazonにて5本で1000円というかなり安価に手に入りますし、1-wireインターフェースといって1本の信号線でデータのやりとりができたり、複数のDS18B20を1本の信号線で接続して制御できたりなど使い勝手がかなり良かったです。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>今回のシステムを構築するにあたっての前提条件としてはArduino IDEでESP32を用いたDS18B20の開発環境が整えられていることです。</p><p>検索すると多くの記事がでてきますが、私は以下の記事を参考にしました。</p><ul><li><a href="https://interface.cqpub.co.jp/esp32-arduino-ide-2/">ESP32開発ボード Arduino IDE開発環境の構築</a></li><li><a href="https://qiita.com/takudooon/items/f6386a45860004aa37e7">温度センサー DS18B20をESP32で動かすメモ</a></li></ul><h1 id="温度センサ-DS18B20-で温度を測ってみる"><a href="#温度センサ-DS18B20-で温度を測ってみる" class="headerlink" title="温度センサ(DS18B20)で温度を測ってみる"></a>温度センサ(DS18B20)で温度を測ってみる</h1><p>温度センサ(DS18B20)を使って温度を測ってみます。</p><p>DS18B20から3本の線が出ており、電源線(赤)・信号線(黄)・GND線(黒)となっております。</p><p>ブレッドボートに挿せるようにピンヘッダをハンダ付けしてあげて、ESP32と接続します。</p><p>余談ですがハンダ付けしたあとの保護のためにホットボンドを利用しています（左下画像）。</p><img src="/images/20240423a/image_3.png" alt="" width="704" height="316" loading="lazy"><p>シンプルな1センサに対しての温度計測と表示を行ってみます。</p><figure class="highlight c++"><figcaption><span>温度計測テストプログラム</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;OneWire.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;DallasTemperature.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1-Wire設定</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ONE_WIRE_BUS 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1-Wire接続インスタンスの作成</span></span><br><span class="line"><span class="function">OneWire <span class="title">oneWire</span><span class="params">(ONE_WIRE_BUS)</span></span>;</span><br><span class="line"><span class="function">DallasTemperature <span class="title">sensors</span><span class="params">(&amp;oneWire)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// シリアル通信の設定</span></span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 1-Wire接続スタート</span></span><br><span class="line">  <span class="built_in">pinMode</span>(ONE_WIRE_BUS, INPUT_PULLUP);</span><br><span class="line">  sensors.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">  Serial.<span class="built_in">print</span>(<span class="string">&quot;温度測定中...&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// デバイスに対して温度計測をリクエスト</span></span><br><span class="line">  sensors.<span class="built_in">requestTemperatures</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 計測結果をプリント</span></span><br><span class="line">  Serial.<span class="built_in">println</span>(sensors.<span class="built_in">getTempCByIndex</span>(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ソースは<a href="https://github.com/milesburton/Arduino-Temperature-Control-Library/blob/master/examples/Simple/Simple.ino">こちらのサンプルコード</a>を参考にしました。<br>ちょっと変更を入れている点としては、<code>pinMode(ONE_WIRE_BUS, INPUT_PULLUP)</code>によって1-Wireの信号線に対して、ESP32の内蔵プルアップを設定しています。</p><p>実際に書き込みを行い、Arduino IDEのシリアルモニタで見てみます。</p><img src="/images/20240423a/sokutei2.gif" alt="sokutei2.gif" width="645" height="321" loading="lazy"><p>温度の変化がわかるようにセンサ部を指で温めています。<br>最初<code>26.44度</code>からスタートし、指で触り始めると温度が上がっていくことを確認しました。</p><h1 id="GoogleSpreadSheetでWEBアプリをデプロイする"><a href="#GoogleSpreadSheetでWEBアプリをデプロイする" class="headerlink" title="GoogleSpreadSheetでWEBアプリをデプロイする"></a>GoogleSpreadSheetでWEBアプリをデプロイする</h1><p>GoogleSpreadSheetでPOSTリクエストを受け付けるWEBアプリを作っていきます。</p><p>まずスプシを作成し、拡張機能&gt;Apps ScriptからGASを作成します。</p><img src="/images/20240423a/image_4.png" alt="" width="783" height="249" loading="lazy"><p>今回はESP32から計測した温度データをJSONに詰めて、POSTリクエストを飛ばします。</p><p>送信するJSONをあらかじめ以下のように定義しておきます。</p><p>今回は2つのセンサからの温度情報を送るため、温度が問題なく取得できたことを確認する属性<code>success</code>と温度情報<code>temp</code>を持つオブジェクトをリストで持つように設計しました。</p><figure class="highlight json"><figcaption><span>ESP32から送信するJSONデータ</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;temp&quot;</span><span class="punctuation">:</span> <span class="number">1.23</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;temp&quot;</span><span class="punctuation">:</span> <span class="number">2.34</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>上記のJSONを受け取ってスプシにデータを挿入するスクリプトを書きます。</p><p>空行を挿入して、そこに受信した温度データを書き込む仕様としました。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doPost</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> params = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">postData</span>.<span class="title function_">getDataAsString</span>()); </span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sheet = <span class="title class_">SpreadsheetApp</span>.<span class="title function_">getActiveSpreadsheet</span>().<span class="title function_">getSheets</span>()[<span class="number">0</span>];</span><br><span class="line">  sheet.<span class="title function_">insertRowBefore</span>(<span class="number">2</span>);</span><br><span class="line">  sheet.<span class="title function_">getRange</span>(<span class="number">2</span>, <span class="number">1</span>).<span class="title function_">setValue</span>((<span class="keyword">new</span> <span class="title class_">Date</span>).<span class="title function_">toLocaleString</span>(<span class="string">&#x27;ja-JP&#x27;</span>));</span><br><span class="line">  sheet.<span class="title function_">getRange</span>(<span class="number">2</span>, <span class="number">2</span>).<span class="title function_">setValue</span>(params.<span class="property">data</span>[<span class="number">0</span>].<span class="property">success</span> ? params.<span class="property">data</span>[<span class="number">0</span>].<span class="property">temp</span> : <span class="string">&quot;err&quot;</span>);</span><br><span class="line">  sheet.<span class="title function_">getRange</span>(<span class="number">2</span>, <span class="number">3</span>).<span class="title function_">setValue</span>(params.<span class="property">data</span>[<span class="number">1</span>].<span class="property">success</span> ? params.<span class="property">data</span>[<span class="number">1</span>].<span class="property">temp</span> : <span class="string">&quot;err&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">ContentService</span>.<span class="title function_">createTextOutput</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>それではこちらのPOSTリクエストを受け付けるWEBアプリをデプロイします。</p><p>デプロイ方法は簡単で以下手順でボタン押下するだけでURLが発行されます。</p><img src="/images/20240423a/image_5.png" alt="" width="1110" height="443" loading="lazy"><img src="/images/20240423a/image_6.png" alt="" width="1200" height="631" loading="lazy"><img src="/images/20240423a/image_7.png" alt="" width="1200" height="631" loading="lazy"><p>このURLにPOSTリクエストを投げれば、先程のスクリプトが実行されます。<br>注意点としては、このURLはデプロイするたびに変わるということと、認証などの仕組みはないため、URLが漏洩すると誰でもアクセスできるので取り扱いには注意してください。</p><h1 id="ESP32からデータをアップロードする"><a href="#ESP32からデータをアップロードする" class="headerlink" title="ESP32からデータをアップロードする"></a>ESP32からデータをアップロードする</h1><p>プログラムを作る前に温度センサを冷蔵庫に設置します。</p><p>冷蔵庫内部にセンサをマスキングテープで付けて、ケーブルを冷蔵庫の外に出してESP32と接続しました。</p><img src="/images/20240423a/image_8.png" alt="" width="507" height="377" loading="lazy"><p>それではESP32から先程デプロイしたWEBアプリに対してPOSTリクエストを送信するプログラムを作成していきます。<br>ちょっと長くなってしまいましたが、やってることとしてはWi-Fiの接続設定と1分間隔で温度計測とAPIリクエストの実行となっています。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;OneWire.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;DallasTemperature.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;HTTPClient.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1-Wire設定</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ONE_WIRE_BUS 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEMPERATURE_PRECISION 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1-Wire接続インスタンスの作成</span></span><br><span class="line"><span class="function">OneWire <span class="title">oneWire</span><span class="params">(ONE_WIRE_BUS)</span></span>;</span><br><span class="line"><span class="function">DallasTemperature <span class="title">sensors</span><span class="params">(&amp;oneWire)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接続するデバイスのアドレスを指定（以下サンプルソースを利用して取得）</span></span><br><span class="line"><span class="comment">// https://github.com/milesburton/Arduino-Temperature-Control-Library/blob/master/examples/oneWireSearch/oneWireSearch.ino</span></span><br><span class="line">DeviceAddress refrigeratorDevice = &#123; <span class="number">0x28</span>, <span class="number">0xC3</span>, <span class="number">0x9F</span>, <span class="number">0x46</span>, <span class="number">0xD4</span>, <span class="number">0x09</span>, <span class="number">0x76</span>, <span class="number">0xF9</span> &#125;;</span><br><span class="line">DeviceAddress outsideDevice = &#123; <span class="number">0x28</span>, <span class="number">0x75</span>, <span class="number">0x4B</span>, <span class="number">0x46</span>, <span class="number">0xD4</span>, <span class="number">0x4B</span>, <span class="number">0x21</span>, <span class="number">0x5F</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wi-Fi接続設定</span></span><br><span class="line"><span class="type">char</span> ssid[] = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="type">char</span> password[] = <span class="string">&quot;yyy&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// リクエストURL設定</span></span><br><span class="line"><span class="type">char</span> requestURL[] = <span class="string">&quot;GASでデプロイしたWEBアプリのURL&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> timer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// シリアル通信設定</span></span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// WiFi接続スタート.</span></span><br><span class="line">  Serial.<span class="built_in">print</span>(<span class="string">&quot;Connecting to &quot;</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(ssid);</span><br><span class="line">  WiFi.<span class="built_in">begin</span>(ssid, password);</span><br><span class="line">  WiFi.<span class="built_in">setAutoConnect</span>(<span class="literal">true</span>);</span><br><span class="line">  WiFi.<span class="built_in">setAutoReconnect</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// WiFi接続完了まで待機.</span></span><br><span class="line">  <span class="keyword">while</span> (WiFi.<span class="built_in">status</span>() != WL_CONNECTED)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// WiFi接続完了.</span></span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;WiFi connected&quot;</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;IP address: &quot;</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(WiFi.<span class="built_in">localIP</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1-Wire接続スタート</span></span><br><span class="line">  <span class="built_in">pinMode</span>(ONE_WIRE_BUS, INPUT_PULLUP);</span><br><span class="line">  sensors.<span class="built_in">begin</span>();</span><br><span class="line">  sensors.<span class="built_in">setResolution</span>(refrigeratorDevice, TEMPERATURE_PRECISION);</span><br><span class="line">  sensors.<span class="built_in">setResolution</span>(outsideDevice, TEMPERATURE_PRECISION);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// タイマ初期化</span></span><br><span class="line">  timer = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1分間隔で実行</span></span><br><span class="line">  <span class="keyword">if</span> (timer &lt; <span class="built_in">millis</span>()) &#123;</span><br><span class="line">    timer = <span class="built_in">millis</span>() + <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="built_in">measureAndRequestSend</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">measureAndRequestSend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// デバイスに対して温度計測をリクエスト</span></span><br><span class="line">  Serial.<span class="built_in">print</span>(<span class="string">&quot;温度測定中...&quot;</span>);</span><br><span class="line">  sensors.<span class="built_in">requestTemperatures</span>();</span><br><span class="line"></span><br><span class="line">  <span class="type">float</span> refrigeratorTemp = sensors.<span class="built_in">getTempC</span>(refrigeratorDevice);</span><br><span class="line">  <span class="type">float</span> outsideTemp = sensors.<span class="built_in">getTempC</span>(outsideDevice);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 計測結果をプリント</span></span><br><span class="line">  Serial.<span class="built_in">print</span>(refrigeratorTemp);</span><br><span class="line">  Serial.<span class="built_in">print</span>(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(outsideTemp);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 送信するJSON文字列生成</span></span><br><span class="line">  String requestStr = <span class="built_in">String</span>(<span class="string">&quot;&#123;\&quot;data\&quot;:[&quot;</span>) +</span><br><span class="line">                      <span class="string">&quot;&#123;\&quot;success\&quot;:&quot;</span> + <span class="built_in">String</span>(refrigeratorTemp != DEVICE_DISCONNECTED_C) + <span class="string">&quot;,\&quot;temp\&quot;:&quot;</span> + <span class="built_in">String</span>(refrigeratorTemp, <span class="number">2</span>) + <span class="string">&quot;&#125;,&quot;</span> +</span><br><span class="line">                      <span class="string">&quot;&#123;\&quot;success\&quot;:&quot;</span> + <span class="built_in">String</span>(outsideTemp != DEVICE_DISCONNECTED_C) + <span class="string">&quot;,\&quot;temp\&quot;:&quot;</span> + <span class="built_in">String</span>(outsideTemp, <span class="number">2</span>) + <span class="string">&quot;&#125;]&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// データ送信</span></span><br><span class="line">  <span class="built_in">apiRequest</span>(requestStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">apiRequest</span><span class="params">(String body)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 指定されたデータを送信する</span></span><br><span class="line">  <span class="keyword">if</span> (WiFi.<span class="built_in">status</span>() == WL_CONNECTED) &#123;</span><br><span class="line">    HTTPClient http;</span><br><span class="line">    http.<span class="built_in">setFollowRedirects</span>(HTTPC_STRICT_FOLLOW_REDIRECTS);</span><br><span class="line">    http.<span class="built_in">begin</span>(requestURL);</span><br><span class="line">    http.<span class="built_in">addHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    <span class="type">int</span> httpResponseCode = http.<span class="built_in">POST</span>(body);</span><br><span class="line">    <span class="keyword">if</span> (httpResponseCode &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      Serial.<span class="built_in">print</span>(<span class="string">&quot;通信に失敗しました。&quot;</span>);</span><br><span class="line">      Serial.<span class="built_in">println</span>(httpResponseCode);</span><br><span class="line">    &#125;</span><br><span class="line">    http.<span class="built_in">end</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Wi-Fi接続に失敗しました。&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらのプログラムをESP32に書き込み、実行してみます。</p><p>するとスプシ側に送信したデータが書き込まれていることを確認できました。</p><img src="/images/20240423a/image_9.png" alt="" width="405" height="348" loading="lazy"><p>試しに1日動かして結果をプロットしてみました。<br>室内温度は昼間になるにつれて温度が高くなっていき、15時過ぎごろにピークを迎えます。<br>冷蔵庫温度は細かな上がり下がりが確認できますが、1日中一定を保っています。おそらく基準の温度があってそこを超えたら冷却をON、下回ったらOFFにするような制御が入っているのではと予想できます。</p><img src="/images/20240423a/image_10.png" alt="" width="590" height="363" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>IoTで取得したデータをクラウド上にストアすることを考えると、AWSだったりのクラウドサービスを使ったりやHerokuなどのPaaSを利用する方法が考えられますが、インフラの構築コストだったり、利用料金がかかってしまいます。</p><p>ですが今回紹介したGoogleSpreadSheetとGASを利用する方法では、無料ですし、たった数行のコードを書くだけでWEBアプリをデプロイできるのが強みだと思います。</p><p>またGASのトリガーを使えば定期的にスクリプトを実行できるので、例えば温度が規定値を上回った場合にメール通知を送ることなども実装できるので、応用すれば色々できそうです。</p><h1 id="参考URL"><a href="#参考URL" class="headerlink" title="参考URL"></a>参考URL</h1><ul><li><a href="https://interface.cqpub.co.jp/esp32-arduino-ide-2/">ESP32開発ボード Arduino IDE開発環境の構築</a></li><li><a href="https://qiita.com/takudooon/items/f6386a45860004aa37e7">温度センサー DS18B20をESP32で動かすメモ</a></li><li><a href="https://www.ne.jp/asahi/shared/o-family/ElecRoom/AVRMCOM/DS18B20/DS18B20manual.html">DS18B20 Programmable Resolution 1-Wire Digital Thermometer</a></li><li><a href="https://rooter.jp/programming/edit-spreadsheet-with-gas/">外部からJSONをPOSTするだけでGoogleSpreadSheetにデータを書き込む</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/ESP32/">ESP32</category>
      
      <category domain="https://future-architect.github.io/tags/GAS/">GAS</category>
      
      <category domain="https://future-architect.github.io/tags/DS18B20/">DS18B20</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%83%97%E3%83%AC%E3%83%83%E3%83%89%E3%82%B7%E3%83%BC%E3%83%88/">スプレッドシート</category>
      
      
      <comments>https://future-architect.github.io/articles/20240423a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vue.jsでオセロ作った話</title>
      <link>https://future-architect.github.io/articles/20240422a/</link>
      <guid>https://future-architect.github.io/articles/20240422a/</guid>
      <pubDate>Sun, 21 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20240408a/">春の入門連載</a>の11本目です。</p><p>はじめまして。流通製造グループの吉原です。私は2023年4月にIT未経験で入社しました。同期が新人研修を4,5か月で、早い人だと3か月で卒業していくなか、恥ずかしながら私は6か月もかかり、3月にやっとのことでOJTを卒業しました。</p><p>日々の業務では、自分のIT知識があまりにも欠如していることを思い知りながら、必死に食らいついています。そんな私が、社会人1年目のIT基礎知識向上のための取り組みの1つとして、Vue.jsでオセロを使った話をしたいと思います。</p><p>これから新人研修やOJTに取り組む新人はもちろん、ITの世界に飛び込んでみたはいいけど、まず何から勉強しようか迷っている人に読んでいただきたいです。</p><h2 id="オセロ作りの経緯"><a href="#オセロ作りの経緯" class="headerlink" title="オセロ作りの経緯"></a>オセロ作りの経緯</h2><p>OJTが始まって、日々の業務に取り組んでいると、仕事の進め方や優先順位の付け方、報連相そして顧客の業務理解など、社会人として、コンサルタントとして求められるものが意外と多くあることに気が付きました。今でも毎日のようにもっと早くエスカレーション上げて！とか、優先順位の付け方ってどうやって考えてる？とか、フィードバックを沢山もらっています。</p><p>そんな日々を過ごしていると、日々の業務でIT力向上を意識することが段々と薄れていっている自分を感じていました。まずは社会人として自立することはもちろん大事だと思っていますが、その一方でIT基礎力を着実に向上させることもやはり必要だと思うのです。</p><h2 id="Vue-jsを選んだ理由"><a href="#Vue-jsを選んだ理由" class="headerlink" title="Vue.jsを選んだ理由"></a>Vue.jsを選んだ理由</h2><p>アサイン先のPJでまず一番最初に着手した業務がVue.jsのフロント開発でした。Vue.jsは新人研修で少し触れましたが、そこまで深く学習はできなかったので、今回は改めて学習してみようと思いました。</p><p>私が日々の学習で意識していることは、今すぐ業務に活きるものを選んで学習するということです。IT基礎力が皆無な私は身に着けたい知識は数知れません。興味のあるものも数知れません。そんなものの中から今何をやるか選ぶとしたら、今すぐ業務に活かせるものを選ぶことをお勧めします。なぜなら、大事なのは、何を学習するかではなく、身に着けた知識をどう使うかということを考えるべきだからです。学習したいものが多すぎる人は、今すぐこの考えを意識してみるとよいと思います。そしてマイルストンはインプットではなく、アウトプットで設定してみてください。</p><h2 id="Vue-jsでオセロを作った話"><a href="#Vue-jsでオセロを作った話" class="headerlink" title="Vue.jsでオセロを作った話"></a>Vue.jsでオセロを作った話</h2><p>さて、長々と「はじめに」が続きましたが、そろそろ本題に入っていきたいと思います。</p><h2 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h2><p>まずは環境構築から。<a href="https://ja.vuejs.org/guide/quick-start.html">こちら</a>を参考に、Vue.jsをインストールしてみました。</p><img src="/images/20240422a/image.png" alt="" width="958" height="294" loading="lazy"><p>その他オプションは正直良くわからないので、聞いたことあるものとか、調べてなんとなく入れてみようかなと思ったものだけ入れてみました。数年後にこの記事を読んで、自分の成長を感じられたらいいな。</p><h3 id="まずはオセロ盤の見た目を作るところから"><a href="#まずはオセロ盤の見た目を作るところから" class="headerlink" title="まずはオセロ盤の見た目を作るところから"></a>まずはオセロ盤の見た目を作るところから</h3><p>そういえば、正確にマスって何×何なんだろうと悩んだので、<a href="https://www.othello.gr.jp/rule">日本オセロ連盟競技ルール</a>で公式ルールを調べてみました。タスクの遂行には、まずそのタスクの理解と顧客の業務理解が必要なように、オセロを作るにはまず、オセロのルールを改めて確認することが大事！ということで確認したら、マスは8×8でした。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;othelloGame&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">cells</span>: [</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>初期データには、<code>黒い石が1、白い石が-1、空のマスは0</code>として定義しました。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;board&quot;</span>&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;cell in cells&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;cell&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;disc in cell&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;disc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickCell(disc)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;disc===1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;disc black&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;disc===-1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;disc white&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;disc===0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;disc none&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>初期配置は真ん中に白と黒の石が交互になるように配置しました。</p><img src="/images/20240422a/image_2.png" alt="" width="536" height="581" loading="lazy"><p>見た目はなんだか良い感じにできたのではないでしょうか。</p><h3 id="中身の実装"><a href="#中身の実装" class="headerlink" title="中身の実装"></a>中身の実装</h3><p>見た目ができたら、いざ中身の実装です。</p><p>まずはクリックしたセルに黒い石を置けるようにしたいので、クリックしたセルの値<code>disc</code>を0から1にしてあげたら良いでしょうと考え、クリックしたセルの値を取得して、<code>$set</code>で上書きしてみました。</p><img src="/images/20240422a/image_3.png" alt="" width="830" height="226" loading="lazy"><p>あれ、エラーがでる…ってことで調べてみると、なんとVue3では使えなくなったらしいです。</p><p>そもそもクリックしたセルの値を上書きして、リターンしたら画面に反映されるって思っていたけど、直接<code>data</code>にアクセスしないといけない気がしてきました。<br>となれば、まずは座標を特定する必要があります。座標のイメージは以下です。</p> <table>    <tr>      <td>0,0</td>      <td>1,0</td>      <td>2,0</td>      <td>3,0</td>      <td>...</td>    </tr>    <tr>      <td>0,1</td>      <td>1,1</td>      <td>2,1</td>      <td>3,1</td>      <td>...</td>    </tr>    <tr>      <td>0,2</td>      <td>1,2</td>      <td>2,2</td>      <td>3,2</td>      <td>...</td>    </tr>    <tr>      <td>0,3</td>      <td>1,3</td>      <td>2,3</td>      <td>3,3</td>      <td>...</td>    </tr>    <tr>      <td>︙</td>      <td>︙</td>      <td>︙</td>      <td>︙</td>      <td>︙</td>    </tr> </table> <p>クリックしたセルの座標を<code>clickCell（columIndex, rowIndex）</code>で取得できるように、引数を追加してみました。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;board&quot;</span>&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(cell, columnIndex) in cells&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;columnIndex&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(disc, rowIndex) in cell&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;rowIndex&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickCell(columnIndex, rowIndex)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;disc===1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;disc black&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;disc===-1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;disc white&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;disc===0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;disc none&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;othelloGame&#x27;</span>,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">clickCell</span>(<span class="params">columnIndex, rowIndex</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(columnIndex, rowIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>セルをクリックすると座標が表示されてくれますようにと願いを込めて、いざクリックしてみました。</p><img src="/images/20240422a/image_4.png" alt="" width="372" height="106" loading="lazy"><p>ということで無事に座標が出力できました。あとは<code>this.cells[columnIndex][rowIndex] = 1</code>とすることで黒い石を置くことが出来ました。</p><img src="/images/20240422a/Animation.gif" alt="Animation.gif" width="540" height="586" loading="lazy"><p>その他の機能に関しては調べてみると、多くの方がオセロを作って公開してくれています。もしオセロを作ってみたいと思った方がいれば、調べてみてください。</p><p>ああでもない、こうでもないと色々試して壁にぶつかりながらも進めていくことが、自分の成長に繋がっているように感じています。ソースコードの質がどうかと考えるより前に、まずは作ってみるということが大事なんではないかと思っています。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>社会人1年目を終えて、改めて怒涛の一年間でした。</p><p>大学で情報系を専攻して勉強していれば、と何度も思ってしまったことは否定できません。ただ、社会人として将来ITで自分のキャリアを形成すると決意した過去の自分に、よくこんな奥が深くて面白い分野に興味を持ってくれた！と褒めてあげることとしましょう。<br>私はITに魅了されてしまった人間の1人になってしまったようです。</p><p>最後にオセロのソースコードも<a href="https://github.com/ryoko0730/othello.vue/tree/main">こちら</a>に載せておきます。</p><p>ITを勉強していきたい人へ、ここから一緒に頑張っていきましょう。読んでくださってありがとうございました。</p><p>オセロ・Othelloは登録商標です。TM＆© Othello,Co. and MegaHouse</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Vue-js/">Vue.js</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85/">初心者</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B2%E3%83%BC%E3%83%A0%E5%88%B6%E4%BD%9C/">ゲーム制作</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/">やってみた</category>
      
      
      <comments>https://future-architect.github.io/articles/20240422a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CI/CD初心者のためのJenkins入門</title>
      <link>https://future-architect.github.io/articles/20240419a/</link>
      <guid>https://future-architect.github.io/articles/20240419a/</guid>
      <pubDate>Thu, 18 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20240408a/&quot;&gt;春の入門連載2024&lt;/a&gt;の10日目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20240408a/">春の入門連載2024</a>の10日目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。今回初めてブログを書きます、流通サービスグループの中邨です。</p><p>最近、業務で初めてJenkinsに触れたので、以下についてまとめます。<strong>「そもそもJenkinsとは？」「CI&#x2F;CDって何？」</strong> という人に読んでいただけたら嬉しいです。</p><ul><li>Jenkinsで何ができるのか／何が嬉しいのか</li><li>Jenkinsを初めて触ってみた感想</li><li>WSL2上のDockerでJenkinsを動かして簡単なジョブを作ってみる</li></ul><h1 id="Jenkinsとは何か？"><a href="#Jenkinsとは何か？" class="headerlink" title="Jenkinsとは何か？"></a>Jenkinsとは何か？</h1><h3 id="Jenkinsで何ができるのか"><a href="#Jenkinsで何ができるのか" class="headerlink" title="Jenkinsで何ができるのか"></a>Jenkinsで何ができるのか</h3><p>JenkinsはCI&#x2F;CDツールの1つで、アプリケーションのビルド、テスト、デプロイといったタスク実行を自動化することができます。</p><p>CI&#x2F;CDは continuous integration and continuous delivery&#x2F;continuous deployment の略で、日本語では「継続的インテグレーション／継続的デリバリー（継続的デプロイ）」と訳されます。</p><h3 id="何が嬉しいのか"><a href="#何が嬉しいのか" class="headerlink" title="何が嬉しいのか"></a>何が嬉しいのか</h3><p>あるコードに変更を加えると、別の部分と矛盾が生じてビルドできなくなるなどの影響を及ぼしてしまうことがあります。</p><p>ビルドやテストを自動化することで、コード変更をリポジトリに適用するごとにバグがないか検証し、アプリケーションを常に正常に動く状態に保つことができます（継続的インテグレーション）。</p><p>また、ワンクリックでアプリケーションをデプロイできたり（継続的デリバリー）、開発者が変更をプッシュするたびに実稼働環境に自動でデプロイできたりすると（継続的デプロイ）、デプロイを迅速かつ頻繁に行って品質を高めることができるようになります。</p><h1 id="Jenkinsを初めて触ってみた感想"><a href="#Jenkinsを初めて触ってみた感想" class="headerlink" title="Jenkinsを初めて触ってみた感想"></a>Jenkinsを初めて触ってみた感想</h1><p>私の主観になりますが、CI&#x2F;CD初心者が初めてJenkinsを使ってみた感想です。</p><h3 id="心理的ハードルが高い"><a href="#心理的ハードルが高い" class="headerlink" title="心理的ハードルが高い"></a>心理的ハードルが高い</h3><p>CI&#x2F;CDツールをほぼ触ったことがない状態で、既に沢山のジョブが動いているプロジェクト環境のJenkinsで試しにジョブを作ろうとしたとき、個人的には少しハードルが高く感じました。</p><p>例えば、自PC上の壊してもいい環境でJenkinsを動かしたことがあれば、ハードルが下がってより身近に感じられるのではないでしょうか。</p><p>この記事の後半では、Jenkinsを身近に感じるため、実際にWSL2上のDockerでJenkinsを動かして簡単なジョブを作成してみます。</p><h3 id="デバッグがつらい"><a href="#デバッグがつらい" class="headerlink" title="デバッグがつらい"></a>デバッグがつらい</h3><p>アプリケーションのコードを書くのとは違い、Jenkinsの動作確認にはデバッグツールがありません。もっといいやり方があるのではないか・・・？と思いながらも、次のサイクルを繰り返してジョブを作成しました。</p><ol><li>ジョブの設定を変更</li><li>ジョブを実行</li><li>想定した結果になっているか確かめる</li><li>想定と違ったらコンソールログを読み、エラーの原因を突き止める</li><li>ジョブの設定を変更</li><li>・・・（以下1からループ）</li></ol><p>また今回は踏み込めなかったのですが、Jenkinsfileと呼ばれるファイルにGroovyでジョブを定義することで、ジョブをコード化することもできるようです。コード化されていればバージョン管理や移植も容易になって良いなと思いました。（Infrastructure as a Codeですね）</p><h3 id="その他のCI-CDツールとの違い"><a href="#その他のCI-CDツールとの違い" class="headerlink" title="その他のCI&#x2F;CDツールとの違い"></a>その他のCI&#x2F;CDツールとの違い</h3><p>Jenkinsはその前身を含めると約20年ほど前に誕生した歴史の長いツールですが、他にも様々なCI&#x2F;CDツールがあり、ツールによってどこが違うのか気になってきました。</p><p>ざっくり調べると、専用のサーバを立てて実行する必要があるJenkinsに対して、GitHubリポジトリがあればGitHub上で利用できるGitHub Actionsや、AWS上でCI&#x2F;CDを完結できるCodeBuildやCodeDeployなどがあり、導入コストや管理のしやすさを比較して選定することが多いようです。</p><h1 id="WSL2上のDockerでJenkinsを動かして簡単なジョブを作ってみる"><a href="#WSL2上のDockerでJenkinsを動かして簡単なジョブを作ってみる" class="headerlink" title="WSL2上のDockerでJenkinsを動かして簡単なジョブを作ってみる"></a>WSL2上のDockerでJenkinsを動かして簡単なジョブを作ってみる</h1><p>以下で行うのは実際のビルドやテストよりずいぶん単純な内容ですが、入門記事なので「Jenkinsでこんなことができる」というイメージの一助になればいいなと思っています。</p><h3 id="WSL2とDockerの環境構築"><a href="#WSL2とDockerの環境構築" class="headerlink" title="WSL2とDockerの環境構築"></a>WSL2とDockerの環境構築</h3><p>本記事の主題ではないため、解説は別の記事に譲ります。<br>以下の手順は、環境があることを前提としています。</p><h3 id="Dockerイメージの取得とコンテナ起動"><a href="#Dockerイメージの取得とコンテナ起動" class="headerlink" title="Dockerイメージの取得とコンテナ起動"></a>Dockerイメージの取得とコンテナ起動</h3><p><a href="https://hub.docker.com/r/jenkins/jenkins">Docker Hub</a>からJenkinsのDockerイメージを取得します。</p><p>Dockerリポジトリから任意のバージョンのイメージを指定してpullします。<br>※2024年4月19日時点の最新は <code>2.440.3-lts-jdk17</code> なのでこちらを使用します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull jenkins/jenkins:2.440.3-lts-jdk17</span><br></pre></td></tr></table></figure><p>とりあえず起動できれば良いので、ポート番号だけ指定してコンテナを起動します。設定を保存したい場合はボリュームを指定してください。</p><p>※その他のオプションは<a href="https://www.jenkins.io/doc/book/installing/docker/">公式ドキュメントのDocker用説明</a>にサンプルがあります。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -p 8080:8080 jenkins/jenkins:2.440.3-lts-jdk17</span><br></pre></td></tr></table></figure><p><a href="https://www.jenkins.io/doc/book/installing/docker/#setup-wizard">公式ドキュメントのセットアップウィザード</a>の手順に沿ってセットアップします。</p><p>※プラグインは推奨を選択、admin以外の管理者ユーザーとJenkins URLはとりあえず作成せずスキップで大丈夫です。</p><h3 id="コンソールにHello"><a href="#コンソールにHello" class="headerlink" title="コンソールにHello"></a>コンソールにHello</h3><p>シェルスクリプトを実行してコンソールに出力してみます。</p><ol><li><p>新規ジョブ作成をクリックします。</p>  <img src="/images/20240419a/image.png" alt="" width="1200" height="591" loading="lazy"></li><li><p>適当なジョブ名を入力し、「フリースタイル・プロジェクトのビルド」を選択して「OK」</p>  <img src="/images/20240419a/image_2.png" alt="" width="1200" height="609" loading="lazy"></li><li><p>適当な説明を入力して下にスクロールします。</p>  <img src="/images/20240419a/image_3.png" alt="" width="1200" height="612" loading="lazy"></li><li><p>「Build Steps」＞「ビルド手順の追加」から「シェルの実行」を選択します。</p>  <img src="/images/20240419a/image_4.png" alt="" width="1200" height="608" loading="lazy"></li><li><p>シェルスクリプトに以下を記述して保存します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello&quot;</span></span><br></pre></td></tr></table></figure></li></ol>  <img src="/images/20240419a/image_5.png" alt="" width="1200" height="615" loading="lazy">6. ビルド実行をクリックします。  <img src="/images/20240419a/image_6.png" alt="" width="1200" height="585" loading="lazy">7. 左下にビルド履歴が表示されているので、コンソール出力を見てみます。  <img src="/images/20240419a/image_7.png" alt="" width="1101" height="672" loading="lazy">8. 「Hello」と出力されていて、シェルスクリプトが実行されていることがわかります。  <img src="/images/20240419a/image_8.png" alt="" width="1200" height="520" loading="lazy"><h3 id="ジョブをつなげて実行する"><a href="#ジョブをつなげて実行する" class="headerlink" title="ジョブをつなげて実行する"></a>ジョブをつなげて実行する</h3><p>test-job-A、test-job-B を作成し、A、Bの順番に実行してみます。</p><ol><li>最初の例と同様に、フリースタイル・プロジェクトで空のジョブ test-job-A、test-job-B を作成します。</li><li>「test-job-A」の「Build Steps」＞「ビルド後の処理の追加」から「他のプロジェクトのビルド」を選択します。  <img src="/images/20240419a/image_9.png" alt="" width="1200" height="524" loading="lazy"></li><li>対象プロジェクトに「test-job-B」を入力して保存します。  <img src="/images/20240419a/image_10.png" alt="" width="1200" height="527" loading="lazy"></li><li>「test-job-A」を実行すると、下流プロジェクトの「test-job-B」も実行されていることがわかります。  <img src="/images/20240419a/image_11.png" alt="" width="1200" height="387" loading="lazy"></li></ol><h3 id="Gitリポジトリをチェックアウトする"><a href="#Gitリポジトリをチェックアウトする" class="headerlink" title="Gitリポジトリをチェックアウトする"></a>Gitリポジトリをチェックアウトする</h3><ol><li>GitHubにとりあえず空のpublicリポジトリを作成します。  <img src="/images/20240419a/image_12.png" alt="" width="1200" height="598" loading="lazy"></li><li>「test-job-git」ジョブの「ソースコード管理」で「Git」を選択し、リポジトリURLとブランチ名を入力します。<br>  ※チェックアウトするだけなので認証情報は特に入力していません。  <img src="/images/20240419a/image_13.png" alt="" width="1081" height="838" loading="lazy"></li><li>ジョブを実行してコンソール出力を見ると、（ビルドするものは何もありませんが）正常終了しています。  <img src="/images/20240419a/image_14.png" alt="" width="1102" height="675" loading="lazy"></li><li>ワークスペースの中を見ると、リポジトリの内容（READMEファイル）が取得されています。  <img src="/images/20240419a/image_15.png" alt="" width="1200" height="513" loading="lazy"></li></ol><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>CI&#x2F;CDはシステム開発を縁の下で支える存在ですが、ITの入り口からはなかなか見えにくい・機会がないと触りにくい部分なのではないか、と常々思っていました。</p><p>この記事を通して、JenkinsやCI&#x2F;CDを少し身近に感じていただけたら嬉しいです。</p><p>（参考）</p><ul><li><a href="https://www.jenkins.io/doc/">https://www.jenkins.io/doc/</a></li><li><a href="https://ja.wikipedia.org/wiki/Jenkins">https://ja.wikipedia.org/wiki/Jenkins</a></li><li><a href="https://ja.wikipedia.org/wiki/%E7%B6%99%E7%B6%9A%E7%9A%84%E3%83%87%E3%83%AA%E3%83%90%E3%83%AA%E3%83%BC">https://ja.wikipedia.org/wiki/継続的デリバリー</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/CI-CD/">CI/CD</category>
      
      <category domain="https://future-architect.github.io/tags/Jenkins/">Jenkins</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/">やってみた</category>
      
      
      <comments>https://future-architect.github.io/articles/20240419a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WSLで始めるサーバーサイドSwift 入門 ～Hummingbird～</title>
      <link>https://future-architect.github.io/articles/20240418a/</link>
      <guid>https://future-architect.github.io/articles/20240418a/</guid>
      <pubDate>Wed, 17 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240418a/image.png&quot; alt=&quot;image.png&quot; width=&quot;851&quot; height=&quot;200&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240418a/image.png" alt="image.png" width="851" height="200" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。HealthCare Innovation Group(HIG)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>所属の清水です。<br><a href="/articles/20240408a/">春の入門連載2024</a>、6本目の記事です。</p><p>SwiftにおけるWebフレームワークを取り上げます。Swift<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>はiOSアプリ開発のイメージが強いと思いますが、iOSアプリ開発以外でも利用できることを紹介します。<br>（macOS以外でもSwiftが動かせたら楽しいなというモチベーションで記事を執筆しております。）</p><h2 id="Swift-における-Web-フレームワーク"><a href="#Swift-における-Web-フレームワーク" class="headerlink" title="Swift における Web フレームワーク"></a>Swift における Web フレームワーク</h2><p>そもそもSwiftにおけるWebフレームワークは、何があるでしょうか？</p><p>Swift.org<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>の<a href="https://www.swift.org/documentation/server/">Swift on Server</a>内で紹介されているWeb フレームワークは以下2つです。</p><ul><li><a href="https://swiftpackageindex.com/hummingbird-project/hummingbird">Hummingbird</a></li><li><a href="https://vapor.codes/">Vapor</a></li></ul><p>GitHub Star 数を比較した図を以下に示します。</p><p>先発のフレームワークであるVaporの方が人気で、検索すると日本語記事もいくつかヒットします。Swift.org内のWebフレームワークチュートリアル<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>として取り上げられていることからも、Vaporが主流となっていることが伺えます。Vaporについては記事になっているものも多いため、後発のHummingbirdを試します。</p><img src="/images/20240418a/star-history-2024416.png" alt="" width="1200" height="866" loading="lazy">（参考：https://star-history.com/#hummingbird-project/hummingbird&vapor/vapor&Date）<h2 id="Hummingbird-とは"><a href="#Hummingbird-とは" class="headerlink" title="Hummingbird とは"></a>Hummingbird とは</h2><p>軽量で依存関係が少ないことを売りとしているフレームワークの一つです。</p><p>Hummingbird の README にも以下の記載があります。</p><blockquote><p>Lightweight, flexible, modern server framework written in Swift.</p></blockquote><p>Hummingbird は、最小限のコアフレームワークのみを提供して、個別で拡張していくことができるようになっています。前述の Vapor の方が機能自体は豊富だと思いますが、サクッと使いたい場合は Hummingbird なのかなと認識しています。</p><p>また、公式ドキュメントがAppleのDeveloper向けのドキュメント<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup>そっくりなので、ぜひ覗いてみてほしいです。</p><p><a href="https://docs.hummingbird.codes/2.0/documentation/hummingbird/">https://docs.hummingbird.codes/2.0/documentation/hummingbird/</a></p><h2 id="セットアップ"><a href="#セットアップ" class="headerlink" title="セットアップ"></a>セットアップ</h2><h3 id="環境情報"><a href="#環境情報" class="headerlink" title="環境情報"></a>環境情報</h3><p>本記事は、以下の環境で実施を確認しています。</p><ul><li>Windows Subsystem for Linux （以下、WSL）に関するバージョン情報  <figure class="highlight sh"><figcaption><span>cmd.exe</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt;wsl -v</span><br><span class="line">WSL バージョン: 2.1.5.0</span><br><span class="line">カーネル バージョン: 5.15.146.1-2</span><br><span class="line">WSLg バージョン: 1.0.60</span><br><span class="line">MSRDC バージョン: 1.2.5105</span><br><span class="line">Direct3D バージョン: 1.611.1-81528511</span><br><span class="line">DXCore バージョン: 10.0.25131.1002-220531-1700.rs-onecore-base2-hyp</span><br><span class="line">Windows バージョン: 10.0.19045.4170</span><br></pre></td></tr></table></figure></li><li>Ubuntu のバージョン: 22.04.4 LTS</li><li>Swift のバージョン: 5.10</li></ul><h3 id="Swift-のインストール"><a href="#Swift-のインストール" class="headerlink" title="Swift のインストール"></a>Swift のインストール</h3><p>まずは、SwiftをUbuntu上にインストールします。<br><a href="https://docs.hummingbird.codes/2.0/documentation/hummingbird/">Hummingbirdの公式ドキュメント</a>にはSwift自体のインストールに関する記載はなかったため、<a href="https://docs.vapor.codes/ja/install/linux/">Vaporの公式ドキュメント</a>を参考にSwiftly<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>を用いてインストールしました。<br>Swiftly は、Swift Server Workgroup<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup> が提供するCLIツールで異なるバージョンのSwiftを使い分けることができます。<br>記載の手順通り、実行していきます。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># swiftly のインストール</span></span><br><span class="line">&gt; curl -L https://swift-server.github.io/swiftly/swiftly-install.sh | bash</span><br><span class="line">~~~</span><br><span class="line">Select one of the following:</span><br><span class="line">1) Proceed with the installation (default)</span><br><span class="line">2) Customize the installation</span><br><span class="line">3) Cancel</span><br><span class="line">&gt; 1</span><br><span class="line">~~~</span><br><span class="line"><span class="comment"># `swiftly` を有効化するため、PATH へ追加</span></span><br><span class="line">&gt; . <span class="variable">$HOME</span>/.local/share/swiftly/env.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最新バージョンの Swift をインストール</span></span><br><span class="line">&gt; swiftly install latest</span><br><span class="line">~~~</span><br><span class="line">Set the active toolchain to Swift 5.10.0</span><br><span class="line">Swift 5.10.0 installed successfully!</span><br><span class="line"></span><br><span class="line"><span class="comment"># Swift がインストールされていることを確認する</span></span><br><span class="line">&gt; swift --version</span><br><span class="line">Swift version 5.10 (swift-5.10-RELEASE)</span><br><span class="line">Target: x86_64-unknown-linux-gnu</span><br></pre></td></tr></table></figure><h2 id="Hummingbird-を用いたToDoアプリの構築（公式チュートリアル）"><a href="#Hummingbird-を用いたToDoアプリの構築（公式チュートリアル）" class="headerlink" title="Hummingbird を用いたToDoアプリの構築（公式チュートリアル）"></a>Hummingbird を用いたToDoアプリの構築（公式チュートリアル）</h2><p>ここから先は、Hummingbird 公式ドキュメント記載のチュートリアルを元に Hummingbird のセットアップからToDoアプリの構築までのハンズオンを試してみます。</p><p><a href="https://docs.hummingbird.codes/2.0/tutorials/todos/">https://docs.hummingbird.codes/2.0/tutorials/todos/</a></p><h3 id="Hummingbird-のセットアップ"><a href="#Hummingbird-のセットアップ" class="headerlink" title="Hummingbird のセットアップ"></a>Hummingbird のセットアップ</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># プロジェクトDirectoryの作成</span></span><br><span class="line">&gt; <span class="built_in">mkdir</span> Todos</span><br><span class="line">&gt; <span class="built_in">cd</span> Todos</span><br><span class="line"><span class="comment"># パッケージに必要なテンプレートで初期化</span></span><br><span class="line">&gt; swift package init --<span class="built_in">type</span> tool</span><br><span class="line"><span class="comment"># ディレクトリ構成の確認</span></span><br><span class="line">&gt;  tree</span><br><span class="line">.</span><br><span class="line">├── Package.resolved <span class="comment"># パッケージの依存関係解決を記録</span></span><br><span class="line">├── Package.swift <span class="comment"># 依存パッケージを記載</span></span><br><span class="line">└── Sources</span><br><span class="line">    └── Todos.swift <span class="comment"># 本体</span></span><br></pre></td></tr></table></figure><details><summary>--type tool について</summary><p><code>--type tool</code> は、コマンドライン引数をデフォルトで利用できるテンプレートみたいです。<br><code>Package.swift</code> に、 <a href="https://github.com/apple/swift-argument-parser.git">https://github.com/apple/swift-argument-parser.git</a> が含まれるか否かと置き換えても問題ないと思います。</p><figure class="highlight bash"><figcaption><span>--type executable の場合</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; swift package init --<span class="built_in">type</span> executable</span><br><span class="line">Creating executable package: Sample</span><br><span class="line">Creating Package.swift</span><br><span class="line">Creating .gitignore</span><br><span class="line">Creating Sources/</span><br><span class="line">Creating Sources/main.swift</span><br></pre></td></tr></table></figure><figure class="highlight swift"><figcaption><span>Package.swift</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// swift-tools-version: 5.10</span></span><br><span class="line"><span class="comment">// The swift-tools-version declares the minimum version of Swift required to build this package.</span></span><br><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> package <span class="operator">=</span> <span class="type">Package</span>(</span><br><span class="line">    name: <span class="string">&quot;Sample&quot;</span>,</span><br><span class="line">    targets: [</span><br><span class="line">        <span class="comment">// Targets are the basic building blocks of a package, defining a module or a test suite.</span></span><br><span class="line">        <span class="comment">// Targets can depend on other targets in this package and products from dependencies.</span></span><br><span class="line">        .executableTarget(</span><br><span class="line">            name: <span class="string">&quot;Sample&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></details><p>Hummingbird を利用するため、<code>Package.swift</code> に必要な情報を追加します。</p><figure class="highlight diff"><figcaption><span>Package.swift</span></figcaption><table><tr><td class="code"><pre><span class="line">// swift-tools-version: 5.10</span><br><span class="line">// The swift-tools-version declares the minimum version of Swift required to build this package.</span><br><span class="line">import PackageDescription</span><br><span class="line"></span><br><span class="line">let package = Package(</span><br><span class="line">    name: &quot;Todos&quot;,</span><br><span class="line"><span class="addition">++  // macOS 上で動かさないため、コメントアウトしているが問題なく動作した。</span></span><br><span class="line"><span class="addition">++  // platforms: [.macOS(.v14)],</span></span><br><span class="line">    dependencies: [</span><br><span class="line">        .package(url: &quot;https://github.com/apple/swift-argument-parser.git&quot;, from: &quot;1.2.0&quot;),</span><br><span class="line"><span class="addition">++      .package(url: &quot;https://github.com/hummingbird-project/hummingbird.git&quot;, from: &quot;2.0.0-alpha.1&quot;),</span></span><br><span class="line">    ],</span><br><span class="line">    targets: [</span><br><span class="line">        .executableTarget(</span><br><span class="line">            name: &quot;Todos&quot;,</span><br><span class="line">            dependencies: [</span><br><span class="line">                .product(name: &quot;ArgumentParser&quot;, package: &quot;swift-argument-parser&quot;),</span><br><span class="line"><span class="addition">++              .product(name: &quot;Hummingbird&quot;, package: &quot;hummingbird&quot;),</span></span><br><span class="line">            ]</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>GET リクエストを叩いた際に”Hello”を返すように以下のように <code>Todos.swift</code> を書き換えます。</p><figure class="highlight swift"><figcaption><span>Todos.swift</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ArgumentParser</span><br><span class="line"><span class="keyword">import</span> Hummingbird</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Todos</span>: <span class="title class_">AsyncParsableCommand</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() <span class="keyword">async</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="comment">// create router</span></span><br><span class="line">        <span class="keyword">let</span> router <span class="operator">=</span> <span class="type">Router</span>()</span><br><span class="line">        <span class="comment">// add hello route</span></span><br><span class="line">        router.get(<span class="string">&quot;/&quot;</span>) &#123; request, context <span class="keyword">in</span></span><br><span class="line">            <span class="string">&quot;Hello<span class="subst">\n</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// create application</span></span><br><span class="line">        <span class="keyword">let</span> app <span class="operator">=</span> <span class="type">Application</span>(router: router)</span><br><span class="line">        <span class="comment">// run application</span></span><br><span class="line">        <span class="keyword">try</span> <span class="keyword">await</span> app.runService()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一連の修正が完了すると、アプリケーションが正常に動くことを確認できます。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; swift run</span><br><span class="line">Building <span class="keyword">for</span> debugging...</span><br><span class="line">[8/8] Linking Todos</span><br><span class="line">Build complete! (6.58s)</span><br><span class="line">2024-04-16T15:18:49+0900 info Hummingbird : [HummingbirdCore] Server started and listening on 127.0.0.1:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 別タブで動作確認</span></span><br><span class="line">&gt; curl localhost:8080</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><p>簡単ですね🎉</p><h3 id="ToDoアプリの構築"><a href="#ToDoアプリの構築" class="headerlink" title="ToDoアプリの構築"></a>ToDoアプリの構築</h3><p>ここでは、Hummingbird を利用してToDoをDBに登録するところまで試してみます。<br>PostgresNIO<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> というPostgreSQL用のSwiftクライアントを利用することで、ToDoをPostgreSQLに登録します。</p><p>Hummingbird 同様に、PostgresNIO を <code>Package.swift</code> に追加します。</p><figure class="highlight diff"><figcaption><span>Package.swift</span></figcaption><table><tr><td class="code"><pre><span class="line">// swift-tools-version: 5.10</span><br><span class="line">// The swift-tools-version declares the minimum version of Swift required to build this package.</span><br><span class="line">import PackageDescription</span><br><span class="line"></span><br><span class="line">let package = Package(</span><br><span class="line">    name: &quot;Todos&quot;,</span><br><span class="line">    // macOS 上で動かさないため、コメントアウトしているが問題なく動作した。</span><br><span class="line">    // platforms: [.macOS(.v14)],</span><br><span class="line">    dependencies: [</span><br><span class="line">        .package(url: &quot;https://github.com/apple/swift-argument-parser.git&quot;, from: &quot;1.2.0&quot;),</span><br><span class="line">        .package(url: &quot;https://github.com/hummingbird-project/hummingbird.git&quot;, from: &quot;2.0.0-alpha.1&quot;),</span><br><span class="line"><span class="addition">++      .package(url: &quot;https://github.com/vapor/postgres-nio.git&quot;, from: &quot;1.21.0&quot;),</span></span><br><span class="line">    ],</span><br><span class="line">    targets: [</span><br><span class="line">        .executableTarget(</span><br><span class="line">            name: &quot;Todos&quot;,</span><br><span class="line">            dependencies: [</span><br><span class="line">                .product(name: &quot;ArgumentParser&quot;, package: &quot;swift-argument-parser&quot;),</span><br><span class="line">                .product(name: &quot;Hummingbird&quot;, package: &quot;hummingbird&quot;),</span><br><span class="line"><span class="addition">++              .product(name: &quot;PostgresNIO&quot;, package: &quot;postgres-nio&quot;),</span></span><br><span class="line">            ]</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>PostgreSQL をインストールします。<br>チュートリアルでは（おそらくmacOS前提で） <code>brew</code> 経由でインストールしていたのですが、今回は <code>apt</code> 経由でインストールします。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>Linux 上でも Homebrew インストールできるみたいなので、Homebrew 経由でインストールでも良いかもしれません。<br><a href="https://docs.brew.sh/Homebrew-on-Linux">https://docs.brew.sh/Homebrew-on-Linux</a></p></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; sudo apt update</span><br><span class="line">&gt; sudo apt install postgresql postgresql-contrib</span><br><span class="line">&gt; psql --version</span><br><span class="line">psql (PostgreSQL) 14.11 (Ubuntu 14.11-0ubuntu0.22.04.1)</span><br></pre></td></tr></table></figure><p>インストールが完了したので、チュートリアルの続きを実施します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; psql postgres</span><br><span class="line">psql: error: connection to server on socket <span class="string">&quot;/var/run/postgresql/.s.PGSQL.5432&quot;</span> failed: No such file or directory</span><br><span class="line">        Is the server running locally and accepting connections on that socket?</span><br></pre></td></tr></table></figure><p>エラーで進めません。<br>エラーについて調べると <code>.conf</code> ファイルを確認しよう<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>、などとありますが、そもそも<code>.conf</code>ファイルを含んだディレクトリ（<code>/etc/postgresql/14/main/</code>）がないことに気が付きました。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">ls</span> -la /etc/postgresql/</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x  2 postgres postgres 4096 Feb 10  2022 .</span><br><span class="line">drwxr-xr-x 84 root     root     4096 Apr 17 06:54 ..</span><br></pre></td></tr></table></figure><p>別の記事<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>を参考に、PostgreSQL のクラスタを追加します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; sudo pg_createcluster --start 14 main</span><br><span class="line">&gt; <span class="built_in">ls</span> -la /etc/postgresql/14/main/</span><br><span class="line">conf.d/          pg_ctl.conf      pg_ident.conf    start.conf</span><br><span class="line">environment      pg_hba.conf      postgresql.conf</span><br></pre></td></tr></table></figure><p>動くようになったので、チュートリアルの続きに戻ります。<br>まずは、データベースを準備します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; postgres psql</span><br><span class="line">psql (14.11 (Ubuntu 14.11-0ubuntu0.22.04.1))</span><br><span class="line">Type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># create database hummingbird;</span></span><br><span class="line">CREATE DATABASE</span><br><span class="line">postgres=<span class="comment"># \c hummingbird</span></span><br><span class="line">You are now connected to database <span class="string">&quot;hummingbird&quot;</span> as user <span class="string">&quot;postgres&quot;</span>.</span><br><span class="line">hummingbird=<span class="comment"># create role todos createrole login password &#x27;todos&#x27;;</span></span><br><span class="line">CREATE ROLE</span><br><span class="line">hummingbird=<span class="comment"># \q</span></span><br></pre></td></tr></table></figure><p>次に、ToDoアプリの実装です。<br>チュートリアルの通りに実装していきます。完成形は、公式のサンプルがあるため、そちらをご確認ください。</p><p><a href="https://github.com/hummingbird-project/hummingbird-examples/tree/main/todos-postgres-tutorial">https://github.com/hummingbird-project/hummingbird-examples/tree/main/todos-postgres-tutorial</a></p><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>これまで構築したものの動作確認を行います。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; swift run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 別タブで動作確認</span></span><br><span class="line"><span class="comment"># TODO を登録</span></span><br><span class="line">&gt; curl -i -X POST localhost:8080/todos -d<span class="string">&#x27;&#123;&quot;title&quot;: &quot;Wash my hair&quot;&#125;&#x27;</span></span><br><span class="line">HTTP/1.1 201 Created</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Content-Length: 145</span><br><span class="line">Date: Tue, 16 Apr 2024 23:54:54 GMT</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;A4672369-753C-49AD-A41C-849AE5A7CF1E&quot;</span>,<span class="string">&quot;url&quot;</span>:<span class="string">&quot;http:\/\/localhost:8080\/todos\/A4672369-753C-49AD-A41C-849AE5A7CF1E&quot;</span>,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;Wash my hair&quot;</span>&#125;</span><br><span class="line">&gt; curl -i -X POST localhost:8080/todos -d<span class="string">&#x27;&#123;&quot;title&quot;: &quot;Brush my teeth&quot;&#125;&#x27;</span></span><br><span class="line">HTTP/1.1 201 Created</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Content-Length: 147</span><br><span class="line">Date: Tue, 16 Apr 2024 23:55:03 GMT</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;url&quot;</span>:<span class="string">&quot;http:\/\/localhost:8080\/todos\/435A9B4F-BD4A-42E2-8EA9-5A5560378BBA&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;435A9B4F-BD4A-42E2-8EA9-5A5560378BBA&quot;</span>,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;Brush my teeth&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># DB の登録状態を確認</span></span><br><span class="line">&gt; psql hummingbird</span><br><span class="line">psql (14.11 (Ubuntu 14.11-0ubuntu0.22.04.1))</span><br><span class="line">Type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">hummingbird=<span class="comment"># select * from todos;</span></span><br><span class="line">                  <span class="built_in">id</span>                  |     title      | order | completed |                               url</span><br><span class="line">--------------------------------------+----------------+-------+-----------+------------------------------------------------------------------</span><br><span class="line"> a4672369-753c-49ad-a41c-849ae5a7cf1e | Wash my hair   |       |           | http://localhost:8080/todos/A4672369-753C-49AD-A41C-849AE5A7CF1E</span><br><span class="line"> 435a9b4f-bd4a-42e2-8ea9-5a5560378bba | Brush my teeth |       |           | http://localhost:8080/todos/435A9B4F-BD4A-42E2-8EA9-5A5560378BBA</span><br><span class="line">(2 rows)</span><br></pre></td></tr></table></figure><p>POSTしたToDoが、DB側に登録されていることを確認できました🎉</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>Swift の Web フレームワークの一つである、Hummingbird をセットアップから紹介しました。</p><p>個人的には、macOS以外でもSwiftが書けて、かつ、サーバーアプリ開発に利用できることが知れて楽しかったです。WSL 上でセットアップしたので手順が多めだったのですが、普段SwiftでiOSアプリ開発している方がサーバサイドの開発を試したいときに便利だと思いました。</p><p>今回は試せませんでしたが、Xcode のシミュレータとバックエンドの接続までをどこかで試してみたいと考えています。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">医療・ヘルスケア分野での案件や新規ビジネス創出を担う、2020年に誕生した事業部です。設立エピソードは、以下記事をご覧ください。<a href="https://note.future.co.jp/n/n8b57d4bf4604">&quot;新規事業の立ち上げ　フューチャーの知られざる医療・ヘルスケアへの挑戦&quot;</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">Swift.org内のチュートリアル記事<a href="https://www.swift.org/getting-started/vapor-web-server/">https://www.swift.org/getting-started/vapor-web-server/</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">swiftly<a href="https://github.com/swift-server/swiftly">https://github.com/swift-server/swiftly</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">Postgres-NIO<a href="https://github.com/vapor/postgres-nio">https://github.com/vapor/postgres-nio</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;">psql: error: connection to server on socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot; failed: FATAL: Peer authentication failed for user &quot;postgres&quot; (Ubuntu)<a href="https://stackoverflow.com/questions/69676009/psql-error-connection-to-server-on-socket-var-run-postgresql-s-pgsql-5432">https://stackoverflow.com/questions/69676009/psql-error-connection-to-server-on-socket-var-run-postgresql-s-pgsql-5432</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;">【Ubuntu+PostgreSQL】postgres以外のユーザでクラスタを作成して起動する<a href="https://qiita.com/shin4488/items/175151e59a043c724b38">https://qiita.com/shin4488/items/175151e59a043c724b38</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="vertical-align: top; padding-right: 10px;">7.</span><span style="vertical-align: top;"><a href="https://www.apple.com/jp/swift/">https://www.apple.com/jp/swift/</a></span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="vertical-align: top; padding-right: 10px;">8.</span><span style="vertical-align: top;"><a href="https://www.swift.org/">https://www.swift.org/</a></span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="vertical-align: top; padding-right: 10px;">9.</span><span style="vertical-align: top;">Swift によるサーバーアプリケーション開発を促進するワークグループ<a href="https://www.swift.org/sswg/">https://www.swift.org/sswg/</a></span><a href="#fnref:9" rev="footnote"> ↩</a></li><li id="fn:10"><span style="vertical-align: top; padding-right: 10px;">10.</span><span style="vertical-align: top;">AppleのDeveloper向けのドキュメント<a href="https://developer.apple.com/documentation/Swift">https://developer.apple.com/documentation/Swift</a></span><a href="#fnref:10" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Ubuntu/">Ubuntu</category>
      
      <category domain="https://future-architect.github.io/tags/Swift/">Swift</category>
      
      <category domain="https://future-architect.github.io/tags/WSL/">WSL</category>
      
      <category domain="https://future-architect.github.io/tags/Hummingbird/">Hummingbird</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%B5%E3%82%A4%E3%83%89Swift/">サーバーサイドSwift</category>
      
      
      <comments>https://future-architect.github.io/articles/20240418a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Prometheus/Grafanaを使ってみる</title>
      <link>https://future-architect.github.io/articles/20240417b/</link>
      <guid>https://future-architect.github.io/articles/20240417b/</guid>
      <pubDate>Tue, 16 Apr 2024 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは。TIGの伊藤です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20240408a/&quot;&gt;春の入門連載&lt;/a&gt;7日目です。&lt;/p&gt;
&lt;h2 id=&quot;新しいこと、始めたい、知りたい&quot;&gt;&lt;a href=&quot;#新しいこと、始めたい、知りたい&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは。TIGの伊藤です。</p><p><a href="/articles/20240408a/">春の入門連載</a>7日目です。</p><h2 id="新しいこと、始めたい、知りたい"><a href="#新しいこと、始めたい、知りたい" class="headerlink" title="新しいこと、始めたい、知りたい"></a>新しいこと、始めたい、知りたい</h2><p>普段、私の仕事はTerraformを主としたIaCを書いてインフラを作ったり管理することなのですが、ふと考えると、IaC以外の部分に対して取り組むきっかけがなく今までやってきていたような気もしてきました。とはいえ、いきなり全然違うことをするのでもなく、自分の裾野を少し広げる方向で考えていたところ、こちらの勉強会を見つけました。</p><p><a href="https://grafana-meetup-japan.connpass.com/event/314500/">https://grafana-meetup-japan.connpass.com/event/314500/</a></p><p><a href="https://grafana-meetup-japan.connpass.com/event/314500/"><img src="/images/20240417b/2024-04-17_Grafana_Meetup_Japan_1___connpass.jpg" alt="From connpass: Grafana Meetup Japan #1 - connpass | ## Grafana Meetup Japanへようこそ！  このイベントは、オープンソースの監視・可視化ツールであるGrafanaについて、互いに学び、発信し、交流することを目的としています。  Grafanaは、ITインフラやアプリケーションの監視から、IoTデバイス、ビジネス指標、工場、物流、自然災害、宇宙に至るまで、あらゆる分野でのデータ可視化と監視を支援するツールです。  日本でも広く利用されつつありますが、Grafanaの最新情報や導入事例、プラクティスを学んだり発信したりする場は多くありませんでした。そこで、Grafana Labsと共にGrafana Meetup Jap..."></a></p><p>知り合いが告知していたことや、登壇される方々に興味を持って参加しました。しかし、「Grafanaほぼ触ったことない」の丸腰で行っても得るものが少なくなりそうなので、せっかくならと記事を書いています。</p><p>動機としては上に書いた通りですが、監視システムとして同時に持ち上がってくるPrometheusもちょっとだけ入門して、取り組んでいきます。</p><h2 id="今回のサンプル"><a href="#今回のサンプル" class="headerlink" title="今回のサンプル"></a>今回のサンプル</h2><p>今回のサンプルは以下に置いてあるので、このブログを読んで試してみたい方はぜひ使ってみてください。</p><p><a href="https://github.com/kaedemalu/prometheus-grafana-blog">https://github.com/kaedemalu/prometheus-grafana-blog</a></p><h2 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h2><p>PrometheusはSoundCloud社によって開発されたオープンソースの監視ソフトウェアです。GoogleでKubernetesの前身となったBorgという分散システムがあり、これらを監視しているシステムであるBorgmonからも大いにインスパイアを受けており、いずれも分散システムのモニタリングに最適化されています。</p><p>現在ではCloudNative Computing Foundation（CNCF）のGraduatedプロジェクトとしており、多くのユーザを持つOSSとなりました。</p><p>仕組みとしては、従来の監視システムでよく使われるZabbixをはじめとしてエージェントを利用してメトリクスを取得、監視するものではなく、管理サーバ側が指定されたサーバに対しメトリクスを取得するPull型となっているのが大きな違いでしょう。<br>(今回の話では、だいたい下半分くらいが対象の記事となっています。）</p><img src="/images/20240417b/prom_architecture.png" alt="prom_architecture.png" width="1200" height="721" loading="lazy"><blockquote><p><a href="https://prometheus.io/docs/introduction/overview/">Prometheus Overview</a>より引用</p></blockquote><p>EC2などのIaaSレベルでは、EC2本体のメトリクスを取得して、サーバ自体のリソース監視を行えますが、コンテナアプリであればコンテナアプリから取得される必要があります。この時にPrometheusであればコンテナ自体のメトリクスを取得することが可能になります。エージェントレスであることで従来EC2にインストールしていたエージェント分のリソースを減らすことができます。</p><h3 id="アプリケーションを動かしてみる"><a href="#アプリケーションを動かしてみる" class="headerlink" title="アプリケーションを動かしてみる"></a>アプリケーションを動かしてみる</h3><p>実際にアプリケーションから取れるメトリクスをPrometheusで見てみましょう。</p><p>今回、アプリケーションの言語はPythonを使用し、簡易なAPIサーバを立てるためにFastAPIを用いました。</p><p>アプリケーションは以下のようにヘルスチェックパスとPrometheusで<code>/metrics</code>のパスから情報を取得できるようにしました。</p><figure class="highlight py"><figcaption><span>app.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> prometheus_fastapi_instrumentator <span class="keyword">import</span> Instrumentator</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">Instrumentator(</span><br><span class="line">    excluded_handlers=[<span class="string">&quot;/metrics&quot;</span>],</span><br><span class="line">).instrument(app).expose(app=app, endpoint=<span class="string">&quot;/metrics&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/health&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">health</span>():</span><br><span class="line">    response = &#123;</span><br><span class="line">        <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;up&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>FastAPIでPrometheusのメトリクスを取得可能にするため、以下のライブラリを使用しています。今回はカスタマイズをかけていないですが、がっつり使い込むことを考えるとさらに作り込める余地はありそうです。</p><p><a href="https://github.com/trallnag/prometheus-fastapi-instrumentator">https://github.com/trallnag/prometheus-fastapi-instrumentator</a></p><p>これでコンテナを起動させ、<code>/metrics</code>にcURLを実行すると以下のようにたくさん情報が出てきます。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://localhost:8080/metrics</span><br><span class="line"></span><br><span class="line"><span class="comment"># HELP python_gc_objects_collected_total Objects collected during gc</span></span><br><span class="line"><span class="comment"># TYPE python_gc_objects_collected_total counter</span></span><br><span class="line">python_gc_objects_collected_total&#123;generation=<span class="string">&quot;0&quot;</span>&#125; 2396.0</span><br><span class="line">python_gc_objects_collected_total&#123;generation=<span class="string">&quot;1&quot;</span>&#125; 8411.0</span><br><span class="line">python_gc_objects_collected_total&#123;generation=<span class="string">&quot;2&quot;</span>&#125; 2168.0</span><br><span class="line"><span class="comment"># HELP python_gc_objects_uncollectable_total Uncollectable objects found during GC</span></span><br><span class="line"><span class="comment"># TYPE python_gc_objects_uncollectable_total counter</span></span><br><span class="line">python_gc_objects_uncollectable_total&#123;generation=<span class="string">&quot;0&quot;</span>&#125; 0.0</span><br><span class="line">python_gc_objects_uncollectable_total&#123;generation=<span class="string">&quot;1&quot;</span>&#125; 0.0</span><br><span class="line">python_gc_objects_uncollectable_total&#123;generation=<span class="string">&quot;2&quot;</span>&#125; 0.0</span><br><span class="line"><span class="comment"># HELP python_gc_collections_total Number of times this generation was collected</span></span><br><span class="line"><span class="comment"># TYPE python_gc_collections_total counter</span></span><br><span class="line">python_gc_collections_total&#123;generation=<span class="string">&quot;0&quot;</span>&#125; 141.0</span><br><span class="line">python_gc_collections_total&#123;generation=<span class="string">&quot;1&quot;</span>&#125; 12.0</span><br><span class="line">python_gc_collections_total&#123;generation=<span class="string">&quot;2&quot;</span>&#125; 1.0</span><br><span class="line"></span><br><span class="line">...(中略)...</span><br><span class="line"></span><br><span class="line">http_request_duration_highr_seconds_bucket&#123;le=<span class="string">&quot;10.0&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_highr_seconds_bucket&#123;le=<span class="string">&quot;30.0&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_highr_seconds_bucket&#123;le=<span class="string">&quot;60.0&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_highr_seconds_bucket&#123;le=<span class="string">&quot;+Inf&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_highr_seconds_count 1.0</span><br><span class="line">http_request_duration_highr_seconds_sum 0.0015817060047993436</span><br><span class="line"><span class="comment"># HELP http_request_duration_highr_seconds_created Latency with many buckets but no API specific labels. Made for more accurate percentile calculations.</span></span><br><span class="line"><span class="comment"># TYPE http_request_duration_highr_seconds_created gauge</span></span><br><span class="line">http_request_duration_highr_seconds_created 1.7132794545039835e+09</span><br><span class="line"><span class="comment"># HELP http_request_duration_seconds Latency with only few buckets by handler. Made to be only used if aggregation by handler is important.</span></span><br><span class="line"><span class="comment"># TYPE http_request_duration_seconds histogram</span></span><br><span class="line">http_request_duration_seconds_bucket&#123;handler=<span class="string">&quot;/health&quot;</span>,le=<span class="string">&quot;0.1&quot;</span>,method=<span class="string">&quot;GET&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_seconds_bucket&#123;handler=<span class="string">&quot;/health&quot;</span>,le=<span class="string">&quot;0.5&quot;</span>,method=<span class="string">&quot;GET&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_seconds_bucket&#123;handler=<span class="string">&quot;/health&quot;</span>,le=<span class="string">&quot;1.0&quot;</span>,method=<span class="string">&quot;GET&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_seconds_bucket&#123;handler=<span class="string">&quot;/health&quot;</span>,le=<span class="string">&quot;+Inf&quot;</span>,method=<span class="string">&quot;GET&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_seconds_count&#123;handler=<span class="string">&quot;/health&quot;</span>,method=<span class="string">&quot;GET&quot;</span>&#125; 1.0</span><br><span class="line">http_request_duration_seconds_sum&#123;handler=<span class="string">&quot;/health&quot;</span>,method=<span class="string">&quot;GET&quot;</span>&#125; 0.0015817060047993436</span><br><span class="line"><span class="comment"># HELP http_request_duration_seconds_created Latency with only few buckets by handler. Made to be only used if aggregation by handler is important.</span></span><br><span class="line"><span class="comment"># TYPE http_request_duration_seconds_created gauge</span></span><br><span class="line">http_request_duration_seconds_created&#123;handler=<span class="string">&quot;/health&quot;</span>,method=<span class="string">&quot;GET&quot;</span>&#125; 1.7132806219318378e+09</span><br></pre></td></tr></table></figure><p>それぞれメトリクスがさし示している情報が何なのかを示してくれていて、わかりやすさを感じました。</p><p>次にPrometheus自体の設定です。Prometheusの設定には<code>prometheus.yml</code>を用いて読み込ませる必要があります。</p><p>今回使用したYAMLファイルは以下です。</p><figure class="highlight yml"><figcaption><span>prometheus.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;fastapi-app&#x27;</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">&#x27;/metrics&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;app:8080&#x27;</span>]</span><br></pre></td></tr></table></figure><p><code>job_name</code>以下でメトリクスを取得する対象や取得するためのパスを指定しています。</p><p>ソースレベルの設定、確認はここまでで、具体的にPrometheusの設定をしていきましょう。<br>コンテナを立ち上げた状態で <code>http://localhost:9090/graph</code>にアクセスすると、以下のような画面になります。</p><img src="/images/20240417b/スクリーンショット_2024-04-17_1.01.38.png" alt="" width="1192" height="797" loading="lazy"><p>そして、検索バーにFastAPIのコンテナの<code>/health</code>に対して受けたパスの合計が出力される <code>http_requests_total</code>を入れてみてみましょう。</p><img src="/images/20240417b/スクリーンショット_2024-04-17_1.10.32.png" alt="" width="1200" height="950" loading="lazy"><p>手打ちでcURLを実行してはいますが、リクエストした数だけグラフが上がってきていることがわかります。</p><p>このようにアプリケーションから出力されたメトリクスを取得することができました。</p><h2 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h2><p>GrafanaはGrafana Labsによって開発されている可視化ツールであり、ダッシュボードの作成はもちろんのことながら前述したPrometheusで実行したクエリをGrafanaでも同等にサポートしています。</p><p>PrometheusでできることはわざわざGrafanaでまたやらなくていいのでは？と思いましたが、そこは一旦飲み込んで試してみることにします。</p><h3 id="メトリクスの取得を行う"><a href="#メトリクスの取得を行う" class="headerlink" title="メトリクスの取得を行う"></a>メトリクスの取得を行う</h3><p>アプリケーションなどは先ほど使っていたものをそのまま利用します。</p><p>コンテナを立ち上げたあと　<code>http://localhost:3000/login</code>にアクセスすると、ログイン画面になるので、初期ユーザ&#x2F;パスワードである admin &#x2F; adminを打ち込んで、ログインしましょう。(そのあと、初期パスワードの変更を求められますが、今回の検証の本題からは外れるので割愛します）</p><img src="/images/20240417b/スクリーンショット_2024-04-17_1.19.48.png" alt="" width="1200" height="950" loading="lazy"><p>さて、ログインまでできたので、次はGrafanaからPrometheusを参照できるようにしましょう。サイドバーにある Connections &gt; Add new connection を押下しましょう。たくさんのツールをデータソースにできることがわかります。今回は検索バーにPrometheusと入力し、必要なものを選択しましょう。</p><img src="/images/20240417b/スクリーンショット_2024-04-17_11.52.25.png" alt="" width="1200" height="459" loading="lazy"><p>Promehteusを選択し、Add new data sourceを押下してホストの設定をしましょう。Prometheus Server URLに <code>http://prometheus:9090</code>を入力して画面下部にある　Save &amp; testを押下して保存しましょう。</p><p>保存ができたら、今度はサイドバーにある、Dashboardsを押下し、Create Dashboard &gt; Add visualization からダッシュボードを作りましょう。ここで、先ほど登録したデータソースが使えるようになります。メトリクスの追加ですが、下のスクリーンショットのように入力できる欄があるので、Metricに先ほどPrometheusでも利用した <code>http_requests_total</code>を入力して　Run queriesを押してみましょう。</p><img src="/images/20240417b/スクリーンショット_2024-04-17_12.00.23.png" alt="" width="793" height="280" loading="lazy"><p>そうすると、こちらでもグラフを表示することができました。（先ほどと概形が異なるのは取得時間が異なるためです。）</p><img src="/images/20240417b/スクリーンショット_2024-04-17_12.03.30.png" alt="" width="793" height="351" loading="lazy"><p>Metricの欄では、Prometheusが取得可能なすべてのメトリクスが使えるので、ものによっては2つ以上取得できるものがありますが、これは Label filtersで絞ることが可能です。</p><p>そして、右上の Apply を押下してダッシュボード化しましょう。</p><img src="/images/20240417b/スクリーンショット_2024-04-17_12.06.32.png" alt="" width="1200" height="588" loading="lazy"><h3 id="どんなことに使えそうか"><a href="#どんなことに使えそうか" class="headerlink" title="どんなことに使えそうか"></a>どんなことに使えそうか</h3><p>Grafanaはデータソースの一覧からわかるように多様なソースをサポートしています。今回試したPrometheus以外にもPostgreSQLなどのRDB、各クラウドの監視ツールとの連携、Google Analyticsなどの可視化も行えます。それぞれで可視化の部分はサポートされているとは思いますが、可視化ツールの一元管理、という意味ではGrafanaに多様なデータソースを束ねるというのは良いのかもしれません。<br>参考）<a href="https://grafana.com/docs/grafana/latest/datasources/#built-in-core-data-sources">Grafana data sources &gt; Built-in core data sources</a></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>監視・可視化ツールであるPrometheus、Grafanaを触って動かし、知るきっかけに十分なりました。</p><p>今いるプロジェクトではGrafanaのデータソースとして使えるOpenSearchを利用しているので、継続して導入タイミングを伺いながら知見を貯めていきます！</p><h2 id="参考書籍"><a href="#参考書籍" class="headerlink" title="参考書籍"></a>参考書籍</h2><ul><li><a href="https://booth.pm/ja/items/3907516">Prometheus実践ガイド: クラウドネイティブな監視システムの構築</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/prometheus/">prometheus</category>
      
      <category domain="https://future-architect.github.io/tags/grafana/">grafana</category>
      
      
      <comments>https://future-architect.github.io/articles/20240417b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>謎のAIチップベンダーTenstorrent製のAIボードを使ってみる（開封編）</title>
      <link>https://future-architect.github.io/articles/20240417a/</link>
      <guid>https://future-architect.github.io/articles/20240417a/</guid>
      <pubDate>Tue, 16 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;SAIGの山本です。&lt;/p&gt;
&lt;p&gt;先日リリースされたTenstorrent製のAI推論アクセラレーションボード&lt;a href=&quot;https://tenstorrent.com/cards/#grayskull-e150&quot;&gt;Grayskull</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>SAIGの山本です。</p><p>先日リリースされたTenstorrent製のAI推論アクセラレーションボード<a href="https://tenstorrent.com/cards/#grayskull-e150">Grayskull e150</a>を早速入手しましたので、開封します。</p><h1 id="Tenstorrentとは"><a href="#Tenstorrentとは" class="headerlink" title="Tenstorrentとは"></a><a href="https://tenstorrent.com/">Tenstorrent</a>とは</h1><p>カナダのトロントに本社がある、知る人ぞ知る、<a href="https://ja.wikipedia.org/wiki/%E3%82%B8%E3%83%A0%E3%83%BB%E3%82%B1%E3%83%A9%E3%83%BC">ジム・ケラー</a>率いる<a href="https://ja.wikipedia.org/wiki/RISC-V">RISC-V</a>&#x2F;AIチップベンダーです。日本法人も昨年に設立されています。</p><h1 id="Grayskullとは"><a href="#Grayskullとは" class="headerlink" title="Grayskullとは"></a>Grayskullとは</h1><p>Tenstorrent社が開発した、AI推論アクセラレーションチップです。</p><p>簡単に説明するとCPUの一種であるRISC-Vがメチャメチャ沢山内蔵されているチップで、AI推論などが効率的に行えるアーキテクチャーになっています。詳しくは、<a href="https://www.youtube.com/watch?v=lPX1H3jW8ZQ&t=17m45s">Tenstorrent社の動画</a>などをご覧ください。また、機会がありましたら、別途、アーキテクチャなどについて説明したいと思います。</p><h1 id="開封"><a href="#開封" class="headerlink" title="開封"></a>開封</h1><p>手前がブロアー（冷却ファン）の、奥がボード本体が入っている箱になります。<br><img src="/images/20240417a/IMG_3148.jpg" alt="" width="1200" height="900" loading="lazy"></p><p>ブロアーは、ボードと接合部分のパーツは３Dプリンタで出力したものを使ってます。<br><img src="/images/20240417a/IMG_3150.jpg" alt="" width="1200" height="900" loading="lazy"></p><p>ボードの表側。<br><img src="/images/20240417a/IMG_3151.jpg" alt="" width="1200" height="537" loading="lazy"></p><p>ボードの裏側。<br><img src="/images/20240417a/IMG_3153.jpg" alt="" width="1200" height="587" loading="lazy"></p><p>ボードを覆っている囲いを取り除くと大きなヒートシンクが見える。<br><img src="/images/20240417a/Image_20240412_190127_987.jpeg" alt="" width="1200" height="540" loading="lazy"></p><p>ヒートシンクを取り外すとAIチップやRAMが確認できる。<br><img src="/images/20240417a/Image_20240412_190127_922.jpeg" alt="jpeg" width="1200" height="502" loading="lazy"></p><p>その他、同梱されていたシールなど。黒い紙片はセットアップのオンラインマニュアルのURLのみ書かれていました。<br><img src="/images/20240417a/IMG_3152.jpg" alt="" width="1200" height="862" loading="lazy"></p><h1 id="セットアップ"><a href="#セットアップ" class="headerlink" title="セットアップ"></a>セットアップ</h1><p><a href="https://docs.tenstorrent.com/tenstorrent/add-in-boards-and-cooling-kits/grayskull-tm-e75-e150">Tenstorrent社のサイトにあるセットアップ手順</a>を元に設定を行います。</p><p>今回は、手元にあった下記環境で試してみました。</p><ul><li>CPU: Intel Core i7-7700K 4.20GHz</li><li>RAM: 64GB</li><li>PCIe: Gen3.0 x16</li><li>OS: Linux(Ubuntu 22.04.4 LTS)</li></ul><p>PCIeのみ、最低動作環境よりも低いですが、一旦、こちらの環境で試してみます。</p><h1 id="TT-SMI"><a href="#TT-SMI" class="headerlink" title="TT-SMI"></a>TT-SMI</h1><p>NVIDIA向けにはnvidia-smiというコマンドがありますが、Tenstorrent向けにはtt-smiというコマンドがシステム管理インタフェースとして用意されています。<br>このコマンドで、Tenstorrentのハードウェアやソフトウェアの状態やバージョンなどを確認することができます。今回は最低限の動作確認までということで、このツールによる確認までにしたいと思います。<br>具体的には、次のような画面になります。</p><p>TT-SMI: デバイス情報画面<br><img src="/images/20240417a/SCR-20240412-pthf.png" alt="" width="1200" height="522" loading="lazy"></p><p>TT-SMI: デバイス計測画面<br><img src="/images/20240417a/SCR-20240412-pucp.png" alt="" width="1200" height="529" loading="lazy"></p><p>TT-SMI: ファームウェア画面<br><img src="/images/20240417a/SCR-20240412-pulb.png" alt="" width="1200" height="531" loading="lazy"></p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>開封編ということで、パッケージ内容の確認とセットアップ、システム管理ツールによるハードウェアとソフトウェアの状態の確認を行いました。</p><p>次回以降では、サンプルプログラムの紹介やアーキテクチャーの解説などを行っていきたいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/RISC-V/">RISC-V</category>
      
      <category domain="https://future-architect.github.io/tags/AI/">AI</category>
      
      <category domain="https://future-architect.github.io/tags/tenstorrent/">tenstorrent</category>
      
      <category domain="https://future-architect.github.io/tags/Grayskull-e150/">Grayskull e150</category>
      
      
      <comments>https://future-architect.github.io/articles/20240417a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MLflow上でOptunaによって生成される大量のrunを整理する</title>
      <link>https://future-architect.github.io/articles/20240416a/</link>
      <guid>https://future-architect.github.io/articles/20240416a/</guid>
      <pubDate>Mon, 15 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、SAIG&amp;#x2F;MLOpsチームでアルバイトをしている齋藤です。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、SAIG&#x2F;MLOpsチームでアルバイトをしている齋藤です。</p><p><a href="https://mlflow.org/">MLflow</a>は機械学習の管理を扱うツールとして、<a href="https://www.preferred.jp/ja/projects/optuna/">Optuna</a>はハイパーパラメータを自動調整するツールとしてともに広く使用されているツールです。MLflowとOptunaを同時に利用した際に、Optunaが複数回試行することによってMLflow上にrunが大量に生成され、MLflow上で試行結果が見づらくなります。</p><p>本記事では、大量に生成されるrunに親のrunを付与することで、MLflowのWebUIから見やすくする方法を提示します。</p><h2 id="課題"><a href="#課題" class="headerlink" title="課題"></a>課題</h2><p>Optunaは事前に指定した範囲の中からハイパーパラメータの組み合わせを自動的に選択してモデルを学習して評価するという試行を繰り返すことで、良いハイパーパラメータを探索するツールであり、これにより手作業でハイパーパラメータを調整するのを省けます。</p><p>MLflowは機械学習の管理について幅広く扱うツールであり、例えば各実験に使用されたハイパーパラメータや性能の記録などが出来るため、実験の再現などに役立ちます。</p><p>これらは大変便利なツールなのですが、これらを組み合わせて使用した際、画像のようにMLflow上で結果を見た際に大量のrunが生成されて、結果一覧が見づらくなります。特に、条件を変化させてOptunaによる最適化を実行させた場合に、前回までのOptunaによって生成されたrunと今回分のrunの見分けが付けにくくなるという問題が発生します。</p><img src="/images/20240416a/image.png" alt="image.png" width="1200" height="421" loading="lazy"><h2 id="課題の解決"><a href="#課題の解決" class="headerlink" title="課題の解決"></a>課題の解決</h2><h3 id="方針"><a href="#方針" class="headerlink" title="方針"></a>方針</h3><p>MLflowではrun毎にタグを設定できますが、その中でも<a href="https://mlflow.org/docs/latest/tracking/tracking-api.html#system-tags">システムタグ</a>と呼ばれるタグがあり、MLflowの中で特殊な意味を持ちます。<br><code>mlflow.parentRunId</code>というタグはシステムタグの一つで、このタグに親のrunのIDを設定すると、WebUI上で親子のrunがネストした形で表示されるようになります。</p><p>そのため…</p><ol><li>MLflowで空のrunを実行する。</li><li>1で実行したrunを目的関数の中で親のrunとして設定する。</li></ol><p>…という2つの手順を踏めば、Optunaによって生成される大量のrunを一つの親runに結び付けることができます。</p><h3 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h3><h4 id="1-MLflowで空のrunを実行する"><a href="#1-MLflowで空のrunを実行する" class="headerlink" title="1. MLflowで空のrunを実行する"></a>1. MLflowで空のrunを実行する</h4><p>まずMLflowで親のrunとなる空のrunを実行します。</p><p>この時のrun_idは次に必要になるため保存しておきます。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> mlflow.start_run(experiment_id=<span class="number">0</span>) <span class="keyword">as</span> run:</span><br><span class="line">    parent_run_id = run.info.run_id</span><br></pre></td></tr></table></figure><h4 id="2-1で実行したrunを目的関数の中で親のrunとして設定する"><a href="#2-1で実行したrunを目的関数の中で親のrunとして設定する" class="headerlink" title="2. 1で実行したrunを目的関数の中で親のrunとして設定する"></a>2. 1で実行したrunを目的関数の中で親のrunとして設定する</h4><p>runにタグを設定するには<code>mlflow.set_tag</code>関数を使用すれば出来ます。</p><p>sklearnのSGDClassifierの最適化を例にすると、目的関数は次のようになります。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">objective</span>(<span class="params">trial</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">with</span> mlflow.start_run(experiment_id=<span class="number">0</span>) <span class="keyword">as</span> run:</span><br><span class="line">        mlflow.set_tag(<span class="string">&quot;mlflow.parentRunId&quot;</span>, parent_run_id) <span class="comment"># start_runの直後に実行する</span></span><br><span class="line"></span><br><span class="line">        alpha = trial.suggest_float(<span class="string">&quot;alpha&quot;</span>, <span class="number">1e-5</span>, <span class="number">1e-1</span>, log=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        wine = sklearn.datasets.load_wine()</span><br><span class="line">        classes = <span class="built_in">list</span>(<span class="built_in">set</span>(wine.target))</span><br><span class="line"></span><br><span class="line">        train_x, valid_x, train_y, valid_y = sklearn.model_selection.train_test_split(</span><br><span class="line">            wine.data, wine.target, test_size=<span class="number">0.25</span>, random_state=<span class="number">0</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        clf = sklearn.linear_model.SGDClassifier(alpha=alpha)</span><br><span class="line">        clf.fit(train_x, train_y)</span><br><span class="line"></span><br><span class="line">        score = clf.score(valid_x, valid_y)</span><br><span class="line"></span><br><span class="line">        mlflow.log_param(<span class="string">&quot;alpha&quot;</span>, alpha)</span><br><span class="line">        mlflow.log_metric(<span class="string">&quot;accuracy&quot;</span>, score)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> score</span><br></pre></td></tr></table></figure><p>実装全体として次のようになります。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mlflow</span><br><span class="line"><span class="keyword">import</span> optuna</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">import</span> sklearn.datasets</span><br><span class="line"><span class="keyword">import</span> sklearn.linear_model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">objective</span>(<span class="params">trial</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">with</span> mlflow.start_run(experiment_id=<span class="number">0</span>) <span class="keyword">as</span> run:</span><br><span class="line">        mlflow.set_tag(<span class="string">&quot;mlflow.parentRunId&quot;</span>, parent_run_id) <span class="comment"># start_runの直後に実行する</span></span><br><span class="line"></span><br><span class="line">        alpha = trial.suggest_float(<span class="string">&quot;alpha&quot;</span>, <span class="number">1e-5</span>, <span class="number">1e-1</span>, log=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        wine = sklearn.datasets.load_wine()</span><br><span class="line">        classes = <span class="built_in">list</span>(<span class="built_in">set</span>(wine.target))</span><br><span class="line"></span><br><span class="line">        train_x, valid_x, train_y, valid_y = sklearn.model_selection.train_test_split(</span><br><span class="line">            wine.data, wine.target, test_size=<span class="number">0.25</span>, random_state=<span class="number">0</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        clf = sklearn.linear_model.SGDClassifier(alpha=alpha)</span><br><span class="line">        clf.fit(train_x, train_y)</span><br><span class="line"></span><br><span class="line">        score = clf.score(valid_x, valid_y)</span><br><span class="line"></span><br><span class="line">        mlflow.log_param(<span class="string">&quot;alpha&quot;</span>, alpha)</span><br><span class="line">        mlflow.log_metric(<span class="string">&quot;accuracy&quot;</span>, score)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">with</span> mlflow.start_run(experiment_id=<span class="number">0</span>) <span class="keyword">as</span> run:</span><br><span class="line">        parent_run_id = run.info.run_id</span><br><span class="line"></span><br><span class="line">    study = optuna.create_study()</span><br><span class="line">    study.optimize(objective, n_trials=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p>上のコードを実行すると、Optunaによって実行された全ての試行がMLflowに送信されます。</p><p>WebUI上では画像のように表示され、Optunaの実行単位ごとにrunがネストして表示されるので見やすくなりました。</p><img src="/images/20240416a/image_2.png" alt="image.png" width="1200" height="391" loading="lazy"><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>以上、<code>mlflow.parentRunId</code>というシステムタグにrunIDを設定するとWebUI上でrunがネストして表示されることを利用して、自動生成されるrunをUI上で整理して表示させるという話でした。</p><p>MLflowのシステムタグはmlflow.parentRunId以外にも存在するので、それらを利用するとUI上で更なる恩恵が得られるかもしれません。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mlflow.org/docs/latest/tracking/tracking-api.html#system-tags">https://mlflow.org/docs/latest/tracking/tracking-api.html#system-tags</a></li><li><a href="https://mlflow.org/">https://mlflow.org/</a></li><li><a href="https://www.preferred.jp/ja/projects/optuna/">https://www.preferred.jp/ja/projects/optuna/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/MLOps/">MLOps</category>
      
      <category domain="https://future-architect.github.io/tags/MLflow/">MLflow</category>
      
      <category domain="https://future-architect.github.io/tags/Optuna/">Optuna</category>
      
      
      <comments>https://future-architect.github.io/articles/20240416a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>VSCodeでGitLensを使う</title>
      <link>https://future-architect.github.io/articles/20240415a/</link>
      <guid>https://future-architect.github.io/articles/20240415a/</guid>
      <pubDate>Sun, 14 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240415a/gitlens-logo-anybg.png&quot; alt=&quot;&quot; width=&quot;952&quot; height=&quot;300&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240415a/gitlens-logo-anybg.png" alt="" width="952" height="300" loading="lazy"><p><a href="/articles/20240408a/">春の入門連載2024</a>、5本目の記事です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。CSIG（Cyber Security Innovation Group）の<a href="/authors/%E6%A3%9A%E4%BA%95%E9%BE%8D%E4%B9%8B%E4%BB%8B/">棚井</a>です。</p><p><a href="/articles/20240408a/">春の入門連載2024</a>ということで、VSCodeの拡張機能である「<a href="https://github.com/gitkraken/vscode-gitlens">GitLens — Supercharge Git in VS Code</a>」を取り上げます。</p><h1 id="エディタ選び"><a href="#エディタ選び" class="headerlink" title="エディタ選び"></a>エディタ選び</h1><p>みなさんは、普段の開発エディタには何を利用されていますか？</p><p>ソフトウェアエンジニアであれば、エディタとの付き合いは絶対に外せないポイントです。私の場合は、「生成系AIとの連携があるか？」と「開発支援ツールが整備されているか」を判断軸としています。</p><p>「GitHub Copilot」との連携があり、私がこれまで利用してきたエディタは</p><ul><li><a href="https://www.jetbrains.com/">JetBrains</a></li><li><a href="https://code.visualstudio.com/">VSCode（Visual Studio Code）</a></li></ul><p>の2つです。</p><p>JetBrainsの製品はインストール時点で豊富な開発支援機能が揃っており、GoLandには長年課金をしておりました。ただし、GitHub Copilotが登場してからは徐々にVSCodeへと傾き始めて、拡張機能の「GitLens」を見つけてからは、VSCode一本の開発環境へと移行しました。</p><p>本ブログでは、この「開発支援ツール」である「GitLens」について紹介します。</p><h1 id="GitLensとは"><a href="#GitLensとは" class="headerlink" title="GitLensとは"></a>GitLensとは</h1><p>GitLensは、VSCode内での「Gitを用いた開発」を便利にする拡張機能です。</p><p>以下、<a href="https://github.com/gitkraken/vscode-gitlens?tab=readme-ov-file#gitlens--supercharge-git-in-vs-code">README</a> 記載の文章を引用し、合わせて翻訳文を記載しました。</p><blockquote><p>GitLens supercharges your Git experience in VS Code. Maintaining focus is critical, extra time spent context switching or missing context disrupts your flow. GitLens is the ultimate tool for making Git work for you, designed to improve focus, productivity, and collaboration with a powerful set of tools to help you and your team better understand, write, and review code.</p><p>GitLensは、VSCodeでのGit作業をより快適なものにします。集中力を維持することは非常に重要です。コンテキストの切り替えに余分な時間を費やしたり、コンテキストを見失ったりすると、作業の流れが乱れてしまいます。GitLensは、集中力、生産性、コラボレーションを向上させるために設計された究極のツールで、あなたやあなたのチームがコードをよりよく理解し、書き、レビューするための強力なツールセットです。</p></blockquote><p>GitLensが提供する機能は、一言で表現すると「ソースコードの編集履歴をエディタ内で確認する」ためのものです。</p><p>システム開発はまっさらな状態から新しい機能を作ることよりも、既存のコードベースを参照しながら改修、アップデートをする機会の方が非常に多くなります。既に存在するソースコードを読み解く「コードリーディング」を効率的に進めるためには、エディタに表示されている最新の実装コードはもちろんのこと、加えて、そのコードに至るまでのプロセスや実装経緯を含めた周辺情報の収集も必要となります。</p><ul><li>改修対象のコードはいつ実装されたものなのか</li><li>どのような意図で作成されたのか</li><li>どのような更新経緯を辿っているのか</li></ul><p>について、「最新版」として目の前にあるコードだけでなく、その経緯を把握しながらアップデートを重ねることが、現場のエンジニアには求められています。</p><p>この「編集履歴」はGitに保存されているので、GitコマンドやGitHub、GitLabの画面で確認可能です。その「編集履歴の確認作業」を、コードリーディングしながら「エディタ内で完結」できたら、エディタとブラウザの切り替えが不要となり、開発作業に集中できませんか？をツールとして実現したのが、今回紹介するGitLensです。</p><h1 id="GitLensの環境設定"><a href="#GitLensの環境設定" class="headerlink" title="GitLensの環境設定"></a>GitLensの環境設定</h1><p>導入初期に必要な以下の方法を説明します。</p><ul><li>インストール方法</li><li>チュートリアルの確認</li><li>GitLens設定値の確認、変更</li></ul><h2 id="インストール方法"><a href="#インストール方法" class="headerlink" title="インストール方法"></a>インストール方法</h2><p>Visual StudioのMarketplaceで「<a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens — Git supercharged</a>」として配信されているので、VSCodeの拡張機能から追加可能です。</p><p>■ 拡張機能 &gt; <code>@id:eamodio.gitlens</code></p><img src="/images/20240415a/コメント_2024-04-15_080229.png" alt="" width="1200" height="385" loading="lazy"><p>GitLensが提供するほとんどの機能は、無料で利用可能です。<br>一部、プライベートリポジトリでの利用が制限されている機能や、使用には <code>GitKraken account</code> が必要な機能があります。</p><p>■ Pricing &gt; Features &gt; GitLens &gt; Free, Pro, Teams, Enterprise<br><a href="https://www.gitkraken.com/pricing">https://www.gitkraken.com/pricing</a></p><p>本ブログでは、無料で利用可能な範囲の機能を紹介します。</p><p>VSCode内でのGitLens操作方法、設定状況が分からなくなった場合には、以下のショートカットを利用してください。</p><ul><li><code>Ctrl + p</code><ul><li><code>&gt;GitLens: Welcome</code></li><li><code>&gt;GitLens: Open Settings</code></li></ul></li></ul><p>以下、それぞれの内容を説明します。</p><h2 id="Welcome-to-GitLens"><a href="#Welcome-to-GitLens" class="headerlink" title="Welcome to GitLens"></a>Welcome to GitLens</h2><p>■ <code>Ctrl + p</code> -&gt; <code>&gt;GitLens: Welcome</code></p><p>GitLesnの基本操作内容や、各種チュートリアルへのリンクが記載されています。</p><img src="/images/20240415a/コメント_2024-04-15_081358.png" alt="コメント_2024-04-15_081358.png" width="1200" height="610" loading="lazy"><p>「<a href="https://www.youtube.com/watch?v=UQPb73Zz9qk">Tutorial Video</a>」へのリンクも付与されています。</p><p>このページの内容を、実際のコードと突き合わせながら確認すれば、GitLensの機能は一通り確認可能です。本ブログの内容は、Welcome to GitLensを元に作成しております。</p><h2 id="GitLens-Settings"><a href="#GitLens-Settings" class="headerlink" title="GitLens Settings"></a>GitLens Settings</h2><p>■ <code>Ctrl + p</code> -&gt; <code>&gt;Open Settings</code></p><p>GitLens専用のカスタマイズ画面です。「<a href="https://help.gitkraken.com/gitlens/gitlens-settings/">GitLens Documentation</a>」に記載された設定値のカスタマイズや、<code>Ctrl + ,</code>で開けるユーザ設定値の変更が可能です。</p><img src="/images/20240415a/コメント_2024-04-15_082147.png" alt="コメント_2024-04-15_082147.png" width="1200" height="989" loading="lazy"><p>次の章で説明する「アノテーションの表示」について、その表示フォーマットのカスタマイズも可能です。</p><h1 id="GitLensの機能紹介"><a href="#GitLensの機能紹介" class="headerlink" title="GitLensの機能紹介"></a>GitLensの機能紹介</h1><p>GitLensにより「ソースコードの編集履歴をエディタ内で確認する」方法について、基本的な機能を紹介します。</p><p>説明用のソースコードとして、以前に公開しました技術ブログ「<a href="/articles/20240326a/">Terraformの実装コードを、動かしながら読む</a>」でcloneした「<a href="https://github.com/hashicorp/terraform">hashicorp&#x2F;terraform</a>」がローカルに残っていましたので、こちらのコードを利用します。</p><p>以下、説明対象の機能です。</p><ul><li>【1】Inline and Status Bar Blame</li><li>【2】Rich Hovers</li><li>【3】File Annotations</li><li>【4】Revision Navigation</li><li>【5】Open File on Remote</li></ul><h2 id="【1】Inline-and-Status-Bar-Blame"><a href="#【1】Inline-and-Status-Bar-Blame" class="headerlink" title="【1】Inline and Status Bar Blame"></a>【1】Inline and Status Bar Blame</h2><p>コードラインにカーソルを合わせると、右側に以下のアノテーション情報を表示します。</p><ul><li>実装者のアカウント名</li><li>改修時期</li><li>コミットメッセージ</li></ul><img src="/images/20240415a/コメント_2024-04-15_090706.png" alt="" width="1175" height="135" loading="lazy"><p>実装対応箇所: <a href="https://github.com/hashicorp/terraform/blob/main/main.go#L64">https://github.com/hashicorp/terraform/blob/main/main.go#L64</a></p><p>エディタ下部にも同様のメッセージが表示され、クリックするとさらに追加情報を確認できます。</p><img src="/images/20240415a/コメント_2024-04-15_095554.png" alt="" width="307" height="36" loading="lazy"><p>↓</p><img src="/images/20240415a/コメント_2024-04-15_091340.png" alt="" width="861" height="917" loading="lazy"><p>エディタ内の操作として、複数の方法が提供されていることが分かります。</p><h2 id="【2】Rich-Hovers"><a href="#【2】Rich-Hovers" class="headerlink" title="【2】Rich Hovers"></a>【2】Rich Hovers</h2><p>【1】で表示されたアノテーションにマウスをホバーすると、コミット内容の詳細が表示されます。</p><img src="/images/20240415a/コメント_2024-04-15_091623.png" alt="" width="1132" height="475" loading="lazy"><p>Changes -&gt; Opens Changesを選択すると、該当行数でのbefore &#x2F; afterを視覚的に確認できます。</p><img src="/images/20240415a/コメント_2024-04-15_091703.png" alt="" width="1200" height="165" loading="lazy"><p>もちろん、差分の作成元となったPull Request（<a href="https://github.com/hashicorp/terraform/pull/29825">PR #29825</a>）にもダイレクトで飛べます。</p><img src="/images/20240415a/コメント_2024-04-15_092104.png" alt="" width="1200" height="1371" loading="lazy"><p>Pull Requestでの説明内容を確認すると「実装コードだけ」を見ていた場合と比較して、膨大な情報が得られることが分かります。</p><p>PRにはissueが紐づけられていることが多いので、コードリーディング中に「実装意図が分からない」と壁にぶつかったら、この機能により大本のPRへジャンプ可能です。</p><h2 id="【3】File-Annotations"><a href="#【3】File-Annotations" class="headerlink" title="【3】File Annotations"></a>【3】File Annotations</h2><p>Inline Bar Blameをファイル内のコードブロック単位で表示します。</p><p>エディタ右上の「File Annotations」ボタンを選択して、オンオフの切り替えができます。</p><p>■ オフ<br><img src="/images/20240415a/コメント_2024-04-15_093234.png" alt="" width="240" height="40" loading="lazy"></p><p>■ オン<br><img src="/images/20240415a/コメント_2024-04-15_093252.png" alt="" width="235" height="46" loading="lazy"></p><p>ブロック単位で誰がどの行を編集したのか、サイドバーの内容とソースコードを対応させながら確認できます。</p><img src="/images/20240415a/コメント_2024-04-15_093327.png" alt="" width="1200" height="278" loading="lazy"><img src="/images/20240415a/コメント_2024-04-15_093416.png" alt="" width="1200" height="287" loading="lazy"><h2 id="【4】Revision-Navigation"><a href="#【4】Revision-Navigation" class="headerlink" title="【4】Revision Navigation"></a>【4】Revision Navigation</h2><p><code>Revision</code>機能を利用することで、以下の2つを確認できます。</p><p>対象ファイル内で「右クリック」後にOpen Changesを選択し、以下それぞれを選択して下さい。</p><ul><li>Open Line Changes with Previous Revison<ul><li>「指定した行」の差分を表示</li></ul></li><li>Open Changes with Previous Revision<ul><li>「指定したファイル」の差分を表示</li></ul></li></ul><img src="/images/20240415a/コメント_2024-04-15_100132.png" alt="" width="1200" height="396" loading="lazy"><p><code>func main() &#123;</code> （指定した行）の差分を表示すると</p><img src="/images/20240415a/コメント_2024-04-15_095101.png" alt="" width="1200" height="825" loading="lazy"><p><code>main.go</code>（指定したファイル）の差分を表示すると</p><img src="/images/20240415a/コメント_2024-04-15_095031.png" alt="" width="1200" height="819" loading="lazy"><p>差分は複数回遡れるため、対象のファイルや行数が「どのような経緯で更新され続け、現在に至るのか」を視覚的に確認できます。</p><h2 id="【5】Open-File-on-Remote"><a href="#【5】Open-File-on-Remote" class="headerlink" title="【5】Open File on Remote"></a>【5】Open File on Remote</h2><p>VSCodeで開いているファイルに対して、対応するホスティングページを表示する機能です。</p><ul><li>該当行数を「右クリック」<ul><li>Open on Remote (Web)<ul><li>Open File on Remote</li></ul></li></ul></li></ul><img src="/images/20240415a/コメント_2024-04-15_100953.png" alt="" width="915" height="287" loading="lazy"><p>上記操作により、エディタに対応するページ（<a href="https://github.com/hashicorp/terraform/blob/main/main.go#L63">https://github.com/hashicorp/terraform/blob/main/main.go#L63</a>）がブラウザで表示され、リンクが取得できます。</p><img src="/images/20240415a/コメント_2024-04-15_101215.png" alt="" width="938" height="92" loading="lazy"><p>エディタでソースコードを確認しながら、かつ、ファイルのリンクを共有したい場合に、この機能は非常に便利で私は多用しています。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>本ブログでは、VSCodeの拡張機能であるGitLensについて説明しました。</p><p>テクノロジーの発展に合わせて「エディタが提供する機能」も進化していますので、一度「便利な開発環境」を構築済みだとしても、定期的な見直し、アップデートが必要だと実感しました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/CodeReading/">CodeReading</category>
      
      <category domain="https://future-architect.github.io/tags/Git/">Git</category>
      
      <category domain="https://future-architect.github.io/tags/VSCode/">VSCode</category>
      
      <category domain="https://future-architect.github.io/tags/GitLens/">GitLens</category>
      
      
      <comments>https://future-architect.github.io/articles/20240415a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Systemdにおけるservice unitの起動フロー入門</title>
      <link>https://future-architect.github.io/articles/20240412a/</link>
      <guid>https://future-architect.github.io/articles/20240412a/</guid>
      <pubDate>Thu, 11 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240412a/IMG_8598.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;831&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240412a/IMG_8598.jpg" alt="" width="1200" height="831" loading="lazy"><p><a href="/articles/20240408a/">春の入門連載2024</a> の4本目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、最近寒暖差が激しくて体調崩しがちなTIGの森です。</p><p>入門向け記事としてLinuxの <code>systemd</code> における <code>service unit</code> の起動と停止のフローについて説明します。</p><h2 id="service-unit-とは"><a href="#service-unit-とは" class="headerlink" title="service unit とは"></a>service unit とは</h2><p><code>service unit</code> とは <code>systemd</code> の設定単位の一つで、Linuxにおけるサービスの振る舞いを定義する設定をまとめたものです。主にデーモンやその他のシステムプロセスといった、起動や停止を含む管理を行います。</p><h2 id="サービス起動の大まかな流れ"><a href="#サービス起動の大まかな流れ" class="headerlink" title="サービス起動の大まかな流れ"></a>サービス起動の大まかな流れ</h2><p>サービスの起動のおおまかな流れを説明します。</p><p>ここでは話を簡単にするため、<code>Type</code>ディレクティブ(後述)がデフォルトの <code>simple</code> に指定されているとします。</p><h3 id="サービス起動の流れ"><a href="#サービス起動の流れ" class="headerlink" title="サービス起動の流れ"></a>サービス起動の流れ</h3><ol><li><code>systemctl start [サービス名].service</code>を実行すると、<code>systemd</code>は指定された<code>service unit</code>を起動する</li><li><code>systemd</code>は<code>service unit</code>の設定ファイル(<code>.service</code>)を確認し、サービスが有効かどうかなどを調べる</li><li><code>systemd</code>が<code>fork()</code>を実行し、成功した時点で<code>service unit</code>が<code>active</code>になる。この新しく生成されたプロセスはサービスを起動するためのプロセスとなる</li><li>この新しいプロセスが必要な環境設定（環境変数の設定など）を行った後、<code>ExecStart</code>で指定されたプログラムを<code>execve()</code>で実行する</li><li>サービスのプログラムが実行され、サービスが開始する</li></ol><p>以上がざっとした流れです。もちろんLinuxにおけるサービス管理全てを網羅しているということではありません。初期化だけを実施する<code>iptables</code>などの例外もあります。</p><h2 id="サービス起動・終了時の前後の処理に関して"><a href="#サービス起動・終了時の前後の処理に関して" class="headerlink" title="サービス起動・終了時の前後の処理に関して"></a>サービス起動・終了時の前後の処理に関して</h2><p>サービス実行の主要なコマンドの前に環境変数の設定や通信路の準備や初期化などを実施する場合、<code>ExecStart</code>の前処理として実行される<code>ExecStartPre</code>や、<code>active</code>となった時点で実行される<code>ExecStartPost</code>、また終了時に実行される<code>ExecStopPost</code>などのディレクトリが用意されています。</p><p>サービス起動・終了に関連するディレクティブは下記です。</p><div class="scroll"><table><thead><tr><th>名称</th><th>概要</th></tr></thead><tbody><tr><td><code>ExecStartPre</code></td><td>依存関係を満たすためのリソースの確保、前段処理を実施する</td></tr><tr><td><code>ExecStart</code></td><td>環境変数を読み込み、サービス処理のプログラムを実行する</td></tr><tr><td><code>ExecStartPost</code></td><td><code>active</code>になる前のタイミングで実施する後処理を実施する</td></tr><tr><td><code>ExecStop</code></td><td>サービス停止のプログラムを実施する</td></tr><tr><td><code>ExecStopPost</code></td><td>サービス終了後の後処理を実施する。<code>inactive</code>になる前の実施する</td></tr><tr><td><code>ExecReload</code></td><td>サービスのリロードを実施する</td></tr></tbody></table></div><h2 id="サンプル"><a href="#サンプル" class="headerlink" title="サンプル"></a>サンプル</h2><p>例として、<code>ExecStartPre</code>で実際にどのような前処理が実施できるか試してみましょう。</p><p>EC2のインスタンスのメタデータから自身のリージョンを取得し、それをサービスから呼び出して出力させます。</p><h3 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h3><ol><li>環境変数の設定ファイル<code>/etc/environment</code>に下記の行を追加して、デフォルトのリージョンを指定 <figure class="highlight bash"><figcaption><span>/etc/environment</span></figcaption><table><tr><td class="code"><pre><span class="line">Region=default</span><br></pre></td></tr></table></figure></li><li><code>ExecStartPre</code>で叩かれる事によって自分のリージョンを取得するシェル<code>/etc/setEnvConf.sh</code>を作成 <figure class="highlight bash"><figcaption><span>/etc/setEnvConf.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed -e <span class="string">&#x27;s/.$//&#x27;</span>)</span><br><span class="line">sudo sed -i <span class="string">&quot;/^Region=/c\Region=<span class="variable">$REGION</span>&quot;</span> /etc/environment</span><br></pre></td></tr></table></figure></li><li><code>/etc/systemd/system</code>配下に<code>test.service</code>を作成 <figure class="highlight ini"><figcaption><span>test.service</span></figcaption><table><tr><td class="code"><pre><span class="line"> <span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Test Service</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">EnvironmentFile</span>=/etc/environment</span><br><span class="line"><span class="attr">ExecStartPre</span>=/bin/bash /etc/setEnvConf.sh</span><br><span class="line"><span class="attr">ExecStart</span>=/bin/bash -c <span class="string">&#x27;echo &quot;The region of this instance is $&#123;Region&#125;&quot; &gt; /tmp/output.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure></li><li>サービスファイルを読み込んで起動　 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl start <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li></ol><p>以上が手順になります。<br>サービスが無事起動したら<code>/tmp/output.txt</code>を見てみましょう。</p><figure class="highlight txt"><figcaption><span>/tmp/output.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">The region of this instance is ap-northeast-1</span><br></pre></td></tr></table></figure><p>ちゃんと自身のインスタンスのリージョンが取得できています。</p><p>災対環境などでAMIからインスタンスを起動する時に自身のリージョンを取得して、処理に繋げる際などに応用できるでしょう。</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>今回は触れませんでしたが<code>unit</code> が<code>active</code>や<code>inactive</code>になるタイミングは <code>Type</code> ディレクティブの指定によって微妙に変化します。</p><p>この記事ではデフォルトの<code>simple</code>を用いていますが、これは代表プロセスが<code>fork()</code>の実行に成功したときに<code>active</code>になります。つまり、<code>ExecStart</code>が失敗しようがその前段階の環境変数の設定や<code>ExecStartPre</code>ができていれば<code>active</code>にはなってくれるということです。</p><p>一方で明示的に<code>Type</code>を<code>exec</code>に指定した場合、<code>ExecStart</code>で指定したプログラムから<code>execve()</code>の実行が成功したときに<code>active</code>になります。他にも様々な Type ディレクティブがありますが、<code>active</code> になるタイミングがいつなのかはしっかり意識して前処置や後処理を運用していくことが運用上求められるでしょう。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>システムを安定させる上で重要なのは、サービスが<code>active</code>になるタイミングやその前後の処理の流れを正確に理解することです。</p><p>また、<code>[Unit]</code>セクションに<code>After</code>を記述し、異なるサービス間で起動順序を制御することも一般的です。したがって、これらの順序をより一層意識した運用が求められるでしょう。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/RHEL/">RHEL</category>
      
      <category domain="https://future-architect.github.io/tags/Linux/">Linux</category>
      
      <category domain="https://future-architect.github.io/tags/Systemd/">Systemd</category>
      
      
      <comments>https://future-architect.github.io/articles/20240412a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>全文検索エンジンMeilisearchを試す</title>
      <link>https://future-architect.github.io/articles/20240411a/</link>
      <guid>https://future-architect.github.io/articles/20240411a/</guid>
      <pubDate>Wed, 10 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240411a/meilisearch-logo-light.png&quot; alt=&quot;&quot; width=&quot;495&quot; height=&quot;74&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240411a/meilisearch-logo-light.png" alt="" width="495" height="74" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの岸本卓也です。 <a href="/articles/20240408a/">春の入門連載2024</a> の3番目です。</p><p>ある静的サイトジェネレーターで生成された膨大なドキュメントの検索において、全文検索機能はあるものの以下の課題を感じることがありました。</p><ul><li>探したいものがヒットしないことがある</li><li>どこがヒットしているのか謎なものが検索結果に含まれることがある</li><li>クライアントサイドで動くため、ページ読み込み時に数十MBと大きいことも多いインデックスファイルをダウンロードするため、ページの読み込み完了が遅い原因になっている</li></ul><p>検索にヒットしない場合は、欲しい情報がありそうなページをリンクから辿って個別に探すしかないのです。しかしこれは手間です。</p><p>このような課題を解決すべく新たな全文検索エンジンを探す中でMeilisearchという製品を見つけました。Meilisearchは日本語の検索においても良さそうでかつ手軽に試せたので、試した内容を紹介します。</p><h1 id="Meilisearchとは"><a href="#Meilisearchとは" class="headerlink" title="Meilisearchとは"></a>Meilisearchとは</h1><p>公式サイトの <a href="https://www.meilisearch.com/">トップページ</a> やドキュメントの <a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/overview">概説ページ</a> によると、検索の応答が早く、すぐに使い始められる、というのが大きな特徴のようです。機能はRESTful APIで提供され、Blogやドキュメントサイトの検索のほか、ECサイトにおける検索への組み込みといったユースケースがあるそうです。</p><p><a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/overview#features">多くの特徴が挙げられています</a> が、中でも以下のように日本語のサポートが明示されているのは安心感があります。</p><blockquote><p>Comprehensive language support: Optimized support for Chinese, Japanese, Hebrew, and languages using the Latin alphabet<br>包括的な言語サポート: 中国語、日本語、ヘブライ語、およびラテン文字を使用する言語の最適化されたサポート(by Google翻訳)</p></blockquote><p>日本で活動されている <a href="https://qiita.com/mosuka/items/fbda479b25a7ccd7c350">@mosuka (Minoru OSUKA) さんをはじめとしたOSSコミッターの皆さま</a> により日本語処理が改善されているようです。</p><h1 id="試用環境"><a href="#試用環境" class="headerlink" title="試用環境"></a>試用環境</h1><p>当記事は以下の環境で実施しました。</p><ul><li>EC2インスタンス: t3.small</li><li>Meilisearchバージョン: v1.7.1 (prototype-japanese-10)</li></ul><h1 id="セットアップ"><a href="#セットアップ" class="headerlink" title="セットアップ"></a>セットアップ</h1><p>公式ドキュメントの <a href="https://www.meilisearch.com/docs/learn/getting_started/installation">Installationページ</a> ではインストール方法が複数提示されています。ここでは、日本語向けの公式ビルドバイナリが簡単に使えるDockerイメージの方法で構築します。</p><p>日本語向けのビルドバイナリを含むDockerイメージはDocker Hubの <a href="https://hub.docker.com/r/getmeili/meilisearch/tags?page=1&name=japanese">こちら</a> で配布されています。Meilisearchのバージョンとイメージタグの対応関係は <a href="https://github.com/meilisearch/meilisearch/pull/3882">こちらのPull request</a> に記載されています。</p><p>今回は、現時点の最新版であるv1.7.1に対応したDockerイメージを使ってみます。公式の手順通り、pullして</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull getmeili/meilisearch:prototype-japanese-10</span><br></pre></td></tr></table></figure><p><code>development</code> モードでコンテナを起動します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -it --<span class="built_in">rm</span> \</span><br><span class="line">    -p 7700:7700 \</span><br><span class="line">    -e MEILI_ENV=<span class="string">&#x27;development&#x27;</span> \</span><br><span class="line">    -e MEILI_MASTER_KEY=<span class="string">&#x27;aSampleMasterKey&#x27;</span> \</span><br><span class="line">    -v $(<span class="built_in">pwd</span>)/meili_data:/meili_data \</span><br><span class="line">    getmeili/meilisearch:prototype-japanese-10</span><br></pre></td></tr></table></figure><p>上記で指定しているオプションの内、Meilisearch特有のものは次の目的で指定しています。</p><ul><li><code>-e MEILI_ENV=&#39;development&#39;</code>: <code>development</code> モードにします。Meilisearchにはインデックスの確認などのために <a href="https://www.meilisearch.com/docs/learn/getting_started/search_preview">search preview</a> という簡易的なGUIフロントエンドが備わっています。以降の手順でもインデックスの確認にsearch previewを使いますが、 <a href="https://www.meilisearch.com/docs/learn/getting_started/search_preview#:~:text=For%20security%20reasons%2C%20the%20search%20preview%20is%20only%20available%20in%20development%20mode.">セキュリティ上の理由で</a> <code>development</code> モードでしか使えません。</li><li><code>-e MEILI_MASTER_KEY=&#39;aSampleMasterKey&#39;</code>: <a href="https://www.meilisearch.com/docs/learn/configuration/instance_options#master-key">Master key</a> を指定します。master keyを指定しない場合でも <code>development</code> モードでは自動的にキーが生成されて起動できますが、キーを固定するために指定します。master keyは <a href="https://www.meilisearch.com/docs/learn/configuration/instance_options#master-key:~:text=Expected%20value%3A%20a%20UTF%2D8%20string%20of%20at%20least%2016%20bytes">16バイト以上の長さが必要</a> です。</li><li><code>-v $(pwd)/meili_data:/meili_data</code>: <a href="https://www.meilisearch.com/docs/learn/cookbooks/docker#managing-data">Dockerコンテナのワーキングディレクトリに作られるデータ</a> を永続化するために指定します。</li></ul><p>これでMeilisearchが起動しsearch previewも使えるようになっているため、ブラウザで <code>http://&lt;Dockerのホスト&gt;:7700</code> にアクセスしてsearch previewを表示してみます。APIキーの入力を求められるので、コンテナ起動時に指定した <code>aSampleMasterKey</code> を入力して [Go] します。</p><img src="/images/20240411a/Meilisearch-search-preview-enter-api-key.png" alt="Meilisearch-search-preview-enter-api-key.png" width="766" height="480" loading="lazy"><p>まだインデックスを作成していないので何も検索できませんが、これでMeilisearchを使う準備は整いました。</p><h1 id="インデックス作成"><a href="#インデックス作成" class="headerlink" title="インデックス作成"></a>インデックス作成</h1><p>試しに当ブログサイトのインデックスを作成してみます。</p><p>基本的にはAPIを叩いて <a href="https://www.meilisearch.com/docs/learn/core_concepts/indexes">インデックス</a> に <a href="https://www.meilisearch.com/docs/learn/core_concepts/documents">ドキュメント</a> を登録します (cf. <a href="https://www.meilisearch.com/docs/reference/api/documents#add-or-replace-documents">ドキュメントを登録するAPIのリファレンス</a>) が、webサイトのスクレイピングツールである <a href="https://github.com/meilisearch/docs-scraper">docs-scraper</a> が公式に提供されているのでこれを使ってみます。このツールはwebサイトをクローリングしてインデックスを作成してくれるので、設定さえ用意すれば汎用的に使えそうです。なお、docs-scraperのREADMEには</p><blockquote><p>🚨 IMPORTANT NOTICE: Reduced Maintenance &amp; Support 🚨</p></blockquote><p>とあるのでメンテナンスは限定的なようですが、ひとまず使えました。</p><h2 id="docs-scraperによるスクレイピング"><a href="#docs-scraperによるスクレイピング" class="headerlink" title="docs-scraperによるスクレイピング"></a>docs-scraperによるスクレイピング</h2><p>設定ファイルのリファレンスは <a href="https://github.com/meilisearch/docs-scraper?tab=readme-ov-file#-more-configurations">READMEのこちら</a> に記載があり、設定の具体例は <a href="https://github.com/meilisearch/docs-scraper?tab=readme-ov-file#set-your-config-file">README記載の例</a> や <a href="https://github.com/meilisearch/documentation/blob/main/docs-scraper.config.json">公式ドキュメント向けの設定ファイル</a> が参考になります。また、<br>meilisearch&#x2F;docs-scraperは <a href="https://github.com/algolia/docsearch-scraper">algolia&#x2F;docsearch-scraper</a> のフォークなので、<a href="https://docsearch.algolia.com/docs/legacy/config-file/">AlgoliaのConfig Filesページ</a> の説明もある程度参考になります。</p><p><strong>以降の手順の具体例はそのまま実行はしないようお願いします。</strong> webサイトのクローリングに伴うアクセスは攻撃とみなされる可能性があります (cf. <a href="https://ja.wikipedia.org/wiki/%E5%B2%A1%E5%B4%8E%E5%B8%82%E7%AB%8B%E4%B8%AD%E5%A4%AE%E5%9B%B3%E6%9B%B8%E9%A4%A8%E4%BA%8B%E4%BB%B6">岡崎市立中央図書館事件</a>)。</p><p>当ブログサイトをスクレイピングするのに次のように設定してみました。設定のキモは後述しますが、docs-scraperの大まか動作としては <code>start_urls</code> を起点にこのドメインの範囲内で <code>&lt;a&gt;</code> タグを辿ってクローリングします。</p><p><details><summary><code>docs-scraper.config.json</code></summary><figure class="highlight json"><figcaption><span>docs-scraper.config.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;index_uid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;future-tech-blog&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start_urls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://future-architect.github.io/&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sitemap_urls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://future-architect.github.io/post-sitemap.xml&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;stop_urls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://future-architect.github.io/categories/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://future-architect.github.io/tags/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://future-architect.github.io/authors/&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;selectors&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.article-category&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;global&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.article-title&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;global&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main h1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main h2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main h3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lvl5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main h4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lvl6&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main h5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main p, main li, main tr, main pre&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;strip_chars&quot;</span><span class="punctuation">:</span> <span class="string">&quot; .,;:#&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scrap_start_urls&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;custom_settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;rankingRules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;words&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;typo&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;attribute&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;exactness&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;proximity&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;page_rank:desc&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;level:desc&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;position:asc&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;searchableAttributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;hierarchy_lvl1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;hierarchy_lvl2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;hierarchy_lvl3&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;hierarchy_lvl4&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;hierarchy_lvl5&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;hierarchy_lvl6&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;content&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;hierarchy_lvl0&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;only_content_level&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></details></p><p>docs-scraperも公式からDockerイメージが提供されているので、上記の設定を使ってスクレイピングするには <a href="https://github.com/meilisearch/docs-scraper?tab=readme-ov-file#with-docker-">READMEの手順通り</a> 以下で実行できます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -t --<span class="built_in">rm</span> \</span><br><span class="line">    -e MEILISEARCH_HOST_URL=http://&lt;Dockerのホスト&gt;:7700 \</span><br><span class="line">    -e MEILISEARCH_API_KEY=<span class="string">&#x27;aSampleMasterKey&#x27;</span> \</span><br><span class="line">    -v <span class="string">&quot;<span class="subst">$(pwd)</span>/docs-scraper.config.json&quot;</span>:/docs-scraper/docs-scraper.config.json \</span><br><span class="line">    getmeili/docs-scraper:latest pipenv run ./docs_scraper docs-scraper.config.json</span><br></pre></td></tr></table></figure><p>なお、プロキシが必要な場合は適宜 <code>-e HTTP_PROXY=http://example.jp</code> といった形で環境変数を追加する必要があります。</p><p>スクレイピングが完了したらsearch previewで確認してみます。Meilisearchセットアップ時に表示したsearch preview画面をリロードすると、スクレイピングで作成したインデックスを選択して検索できるようになりました。</p><img src="/images/20240411a/Meilisearch-search-preview-search-demo.gif" alt="Meilisearch-search-preview-search-demo.gif" width="960" height="480" loading="lazy"><p>docs-scraperによってこのインデックスには97,668個のドキュメントが作られました (フューチャー技術ブログの記事数は現在1,062件です)。search previewでは文字入力の度に検索が走るのですが、今回の環境では各検索は数ミリ秒～数十ミリ秒で応答されるようで、lightning fastという謳い文句に偽りのない軽快さを体感できました。</p><p>スクレイピング設定の変更やwebサイトの更新に追従するためなど、インデックスを更新したい場合、上記のdocs-scraper実行を再度行えばよいです。docs-scraperは最初にインデックスを削除&amp;新規作成してからドキュメントを登録していきます。ただ、このようにインデックスを更新するとエンドユーザーに影響があります。インデックスが存在しないタイミングがあったりスクレイピング途中のインデックスが使われてしまうためです。これが問題になる場合、swap indexes APIを使って対策できるようです。Swap indexesは <a href="https://www.meilisearch.com/docs/reference/api/indexes#:~:text=Swapping%20indexes%20is%20an%20atomic%20transaction">アトミックに処理される</a> そうです。</p><p>cf. <a href="https://www.meilisearch.com/docs/learn/core_concepts/indexes#swapping-indexes">Swapping indexes</a><br>cf. <a href="https://blog.meilisearch.com/zero-downtime-index-deployment/">Zero downtime index deployment</a></p><p>docs-scraperによって作成される <a href="https://www.meilisearch.com/docs/learn/core_concepts/documents">ドキュメント</a> の詳細を確認するため、APIでドキュメントを参照してみます (cf. <a href="https://www.meilisearch.com/docs/reference/api/documents#get-one-document">単一ドキュメントを取得するAPIのリファレンス</a>)。docs-scraperによって作成されるインデックスではprimary keyとして <code>objectID</code> が設定されています (cf. <a href="https://www.meilisearch.com/docs/reference/api/indexes#get-one-index">単一インデックスの情報を取得するAPIのリファレンス</a>)。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ curl -s \</span><br><span class="line">  -X GET <span class="string">&quot;http://127.0.0.1:7700/indexes/future-tech-blog&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Authorization: Bearer aSampleMasterKey&quot;</span> | jq</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;uid&quot;</span>: <span class="string">&quot;future-tech-blog&quot;</span>,</span><br><span class="line">  <span class="string">&quot;createdAt&quot;</span>: <span class="string">&quot;2024-04-10T11:07:14.284264598Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;updatedAt&quot;</span>: <span class="string">&quot;2024-04-10T11:13:42.28654364Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;primaryKey&quot;</span>: <span class="string">&quot;objectID&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ curl -s \</span><br><span class="line">  -X GET <span class="string">&quot;http://127.0.0.1:7700/indexes/future-tech-blog/documents/daf5dff8c3dcdce27e0d55e32c8f6d76d99a0eb1&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Authorization: Bearer aSampleMasterKey&quot;</span> | jq</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;hierarchy_lvl1&quot;</span>: <span class="string">&quot;Bashのシェル展開&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hierarchy_lvl2&quot;</span>: <span class="string">&quot;プロセス置換 (Process Substitution)&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hierarchy_lvl3&quot;</span>: null,</span><br><span class="line">  <span class="string">&quot;hierarchy_lvl4&quot;</span>: null,</span><br><span class="line">  <span class="string">&quot;hierarchy_lvl5&quot;</span>: null,</span><br><span class="line">  <span class="string">&quot;hierarchy_lvl6&quot;</span>: null,</span><br><span class="line">  <span class="string">&quot;content&quot;</span>: <span class="string">&quot;プロセス置換はプロセスへの入出力をファイルで参照できるようにします。&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hierarchy_lvl0&quot;</span>: <span class="string">&quot;Infrastructureカテゴリ&quot;</span>,</span><br><span class="line">  <span class="string">&quot;anchor&quot;</span>: <span class="string">&quot;プロセス置換-Process-Substitution&quot;</span>,</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;content&quot;</span>,</span><br><span class="line">  <span class="string">&quot;tags&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://future-architect.github.io/articles/20210406/#プロセス置換-Process-Substitution&quot;</span>,</span><br><span class="line">  <span class="string">&quot;url_without_variables&quot;</span>: <span class="string">&quot;https://future-architect.github.io/articles/20210406/#プロセス置換-Process-Substitution&quot;</span>,</span><br><span class="line">  <span class="string">&quot;url_without_anchor&quot;</span>: <span class="string">&quot;https://future-architect.github.io/articles/20210406/&quot;</span>,</span><br><span class="line">  <span class="string">&quot;no_variables&quot;</span>: <span class="string">&quot;True&quot;</span>,</span><br><span class="line">  <span class="string">&quot;objectID&quot;</span>: <span class="string">&quot;daf5dff8c3dcdce27e0d55e32c8f6d76d99a0eb1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;page_rank&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;level&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;position&quot;</span>: 81,</span><br><span class="line">  <span class="string">&quot;hierarchy_radio_lvl0&quot;</span>: null,</span><br><span class="line">  <span class="string">&quot;hierarchy_radio_lvl1&quot;</span>: null,</span><br><span class="line">  <span class="string">&quot;hierarchy_radio_lvl2&quot;</span>: null,</span><br><span class="line">  <span class="string">&quot;hierarchy_radio_lvl3&quot;</span>: null,</span><br><span class="line">  <span class="string">&quot;hierarchy_radio_lvl4&quot;</span>: null,</span><br><span class="line">  <span class="string">&quot;hierarchy_radio_lvl5&quot;</span>: null,</span><br><span class="line">  <span class="string">&quot;hierarchy_radio_lvl6&quot;</span>: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記ドキュメントのすべての属性 (attribute) はdocs-scraperが独自に定義した属性 (&#x3D;Meilisearchのシステム的な属性はない) です。 Meilisearchで予約された属性が存在する場合、その名前は <a href="https://www.meilisearch.com/docs/learn/core_concepts/documents#:~:text=displayed%20or%20searchable.-,Reserved%20attributes,-Some%20features%20require">アンダースコア <code>_</code> 始まりになっています</a>。</p><p>webページ本文の情報は <code>hierarchy_lvl0</code> ～ <code>hierarchy_lvl6</code> 及び <code>content</code> 属性に入ります。これらの属性の利用イメージは <a href="https://github.com/meilisearch/docs-scraper?tab=readme-ov-file#the-levels-">こちら</a> です。これらの属性値で検索するため、値がうまく入るように設定するのがキモです。これらの属性と設定は以下の通り対応します。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hierarchy_lvl0 ← selectors.lvl0</span><br><span class="line">hierarchy_lvl1 ← selectors.lvl1</span><br><span class="line">hierarchy_lvl2 ← selectors.lvl2</span><br><span class="line">hierarchy_lvl3 ← selectors.lvl3</span><br><span class="line">hierarchy_lvl4 ← selectors.lvl4</span><br><span class="line">hierarchy_lvl5 ← selectors.lvl5</span><br><span class="line">hierarchy_lvl6 ← selectors.lvl6</span><br><span class="line">content ← selectors.text</span><br></pre></td></tr></table></figure><p><code>selectors</code> の設定ではどのHTMLタグの内容を取得するかをCSSセレクターで指定します。マークアップ方法はwebサイトごとに異なるので、各webサイトに合ったセレクターに調整する必要があります。CSSセレクターでは取得できない場合、XPathでも指定できます。例えば、以下は <code>class</code> 属性に <code>active</code> と <code>sidebar-link</code> が含まれるタグをXPathで指定する例です。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;selectors&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.//*[(@class and contains(concat(&#x27; &#x27;, normalize-space(@class), &#x27; &#x27;), &#x27; sidebar-link &#x27;)) and (@class and contains(concat(&#x27; &#x27;, normalize-space(@class), &#x27; &#x27;), &#x27; active &#x27;))]&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xpath&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;global&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>当記事ではMeilisearchのセットアップと実際のwebサイトのクローリング例を紹介しました。Meilisearchを動かすのも検索の応答速度も謳い文句通りに早くて好印象でした。インデックスを作成するのも、とりあえず動かすだけなら <code>selectors</code> を大まかに設定してみれば良いのでHTML, CSSの知識があれば難易度は低いと思います。</p><p>今回は試すに至りませんでしたが、より良い検索結果を得るにはインデックスの作り方や <a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/overview#features:~:text=Filtering%20and%20faceted%20search%3A%20Enhance%20user%20search%20experience%20with%20custom%20filters%20and%20build%20a%20faceted%20search%20interface%20in%20a%20few%20lines%20of%20code">フィルター</a> など使える種々の機能があるようなので、折を見て試していこうと考えています。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li><a href="https://www.meilisearch.com/docs">Meilisearch Documentation</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2/">全文検索</category>
      
      <category domain="https://future-architect.github.io/tags/Meilisearch/">Meilisearch</category>
      
      
      <comments>https://future-architect.github.io/articles/20240411a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2024年Gitワークフロー再考</title>
      <link>https://future-architect.github.io/articles/20240410a/</link>
      <guid>https://future-architect.github.io/articles/20240410a/</guid>
      <pubDate>Tue, 09 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20240408a/">春の入門祭り2024</a>の2記事目です。</p><p>Gitは、出自としては1週間で作られたLinuxカーネルのための分散バージョン管理システムでした。当時のワークフローに合わせてパッチをテキスト化してメールに添付できるような機能だったりが備わっています。</p><p>一方で、現代のGitは、デファクトスタンダードなバージョン管理システムになりLinuxカーネル以外のアプリケーション開発で利用されています。分散バージョン管理ではあるものの、サーバー・クライアント型の使われ方をしていて、GitHubやGitLabを核にして、ローカルで作ったブランチをpushして、Pull Requestの形にして管理しています。少なくとも周りで見る限りでは、それ以外の使われ方の方が少なくなってきてます。そんなこんなで求められている使われ方が変わってきていて、それに合わせた機能がぼちぼち増えています。それを活用することで、ウェブ画面上での差分がみやすく、レビューもしやすくなります。</p><p>本来はそれに合わせてワークフローや設定を見直していくべきなんだとは思いますが、なんとなく昔覚えたメンタルモデルのまま使っているな、と思ったので、直近増えた機能を試しつつ、どんなお作法で使っていくべきか思考実験してみたのがこの記事です。基本路線としては、Gitの使い方の議論ポイント、履歴をきれいにする使い方を広めたいが、チームメンバーがついてこれない、というのはよく聞く話だと思いますが、それに対し、今時の設定を使ってmergeとrebaseの両方があって使い手が選べる世界ではなく、rebaseのみがある世界を作っていこうというものです。</p><p>実際に複数人で使ってみるとまたいろいろ気づきはあるかもしれません。あと、僕はgit操作はCLIでやっているのですが、これをきちんとガイドライン化するなら、利用者の多いGitクライアントツールの操作も併記するといいですね。</p><h1 id="本エントリーが想定する現代のGit使いに求められるメンタルモデル"><a href="#本エントリーが想定する現代のGit使いに求められるメンタルモデル" class="headerlink" title="本エントリーが想定する現代のGit使いに求められるメンタルモデル"></a>本エントリーが想定する現代のGit使いに求められるメンタルモデル</h1><ul><li>メインのブランチへのマージはPR単位。大きくなるほどコンフリクトしやすく、それの解決が大変になるので、Pull Request上でレビューを行うし、　CIのテストが走っていて、メインとなるブランチが不安定な状態にならないようにする</li><li>Pull Request上ではレビュー指摘に対する修正コミットがわかりやすい(前のコミットに対する差分が見える)が、マージ後は1つのPull Request&#x3D;&#x3D;1コミットで、どのPR由来の変更か追いかけやすくする(squash merge)</li><li>複数の修正はPull Requestには混ぜない。Pull Requestごとに、GitHubの機能を使ってrevertする</li></ul><p>開発はPull Requestベースで行いますが、1つのPull Requestをマージしてマージコミットが生成されて、他のPull Requestがぶっ壊れたら困るわけで、ようはRebaseをきちんとやる、という方向ですね。</p><p>マージコミットを生成するとどのようにマージしたのかの記録を残す、という言説はあったけど、マージコミットの情報が役に立ったことがないし、並列数が増えてくると困ることが増えてくると思うのでマージコミットは作らないようにしたいという感じかなと。</p><h1 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h1><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>設定のGeneralのPull Requestsの項目にある、Allow merge commitsとAllow rebase mergingのチェックを外し、Allow squash mergingだけにしておきます。</p><img src="/images/20240410a/スクリーンショット_2024-03-26_12.21.11.png" alt="スクリーンショット_2024-03-26_12.21.11.png" width="821" height="451" loading="lazy"><p>ついでに、Automatically delete head branchesもチェックしておいて良いでしょう。</p><p>Pull Requestのマージ先の<code>develop</code>などはプロテクトブランチ設定しておきます。承認まわりとかCIはプロジェクト固有の話が出てきますのでそこはスキップして共通的な話だけを用意するとなると、次の2を設定すると良いでしょう。</p><ul><li>Require a pull request before merging</li><li>Require linear history</li></ul><p>後者を設定すると、Pull Requestのボタンは「Squash and merge」がデフォルトになるっぽいです。</p><p>なお、rebase主体だと一部force pushは必要となります。名前通りの<code>--force</code>自体は不要ですが(後述)、<code>develop</code>以外の<code>feature</code>ブランチに対しては許可しておきます。</p><h2 id="ローカル"><a href="#ローカル" class="headerlink" title="ローカル"></a>ローカル</h2><p>次の2つを設定します。</p><ul><li><code>git config pull.rebase true</code></li><li><code>git config rerere.enabled true</code></li></ul><h1 id="開発時のモデル操作"><a href="#開発時のモデル操作" class="headerlink" title="開発時のモデル操作"></a>開発時のモデル操作</h1><p>開発時にどのような操作をしていくのかをまとめます。</p><h2 id="1-featureブランチを作成して実装"><a href="#1-featureブランチを作成して実装" class="headerlink" title="1. featureブランチを作成して実装"></a>1. featureブランチを作成して実装</h2><p>マージ先となるブランチ（一般的には<code>develop</code>)から新しいフィーチャーブランチを作成します。 <code>feature/名前</code>みたいな。ローカルで一通り実装します。</p><p>もし、ローカル実装中に<code>develop</code>の最新を取り込む必要があれば<code>git pull origin develop</code>します。コンフリクトがあればrebaseをきちんと行います。</p><p>一通り動くまで実装します。</p><h2 id="2-リモートにpush前に整理"><a href="#2-リモートにpush前に整理" class="headerlink" title="2. リモートにpush前に整理"></a>2. リモートにpush前に整理</h2><p>リモートにpushしますが、2つの操作を忘れずに行います。</p><ul><li><code>git pull origin develop</code>で最新の<code>develop</code>を取り込む</li><li><code>git rebase -i develop</code>で最新の<code>develop</code>の上に変更が来るようにする。最後のコミット(一番上の行)以外はfixupして、1コミットにまとめる</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pick   950b967　このコメントだけ残る</span><br><span class="line">fixup  6b66e35　このコメントは無視される</span><br><span class="line">fixup  806489c　このコメントは無視される</span><br><span class="line">fixup  aaf0eda このコメントは無視される</span><br></pre></td></tr></table></figure><p>これで1コミットにまとまるのでレビューしやすくなります。</p><p>なお、このステップはオプションでも良いかなと思います。ちょっと不安なら、bisectで問題を探すとかするかもしれません。また<code>develop</code>へのrebaseはGitHub上でもコンフリクトしない限りはやってくれはします。ただし、コンフリクトした場合はここで実施して解決しなければなりません。</p><h2 id="3-リモートにpushしてPull-Rquest作成"><a href="#3-リモートにpushしてPull-Rquest作成" class="headerlink" title="3. リモートにpushしてPull Rquest作成"></a>3. リモートにpushしてPull Rquest作成</h2><p>ここはいつもの操作なので省略します</p><h2 id="4-1-レビュー指摘に対応する修正"><a href="#4-1-レビュー指摘に対応する修正" class="headerlink" title="4.1. レビュー指摘に対応する修正"></a>4.1. レビュー指摘に対応する修正</h2><p>レビューで指摘された修正を行います。修正したらcommit&amp;pushします。一度Pull Requestを作成したら、rebaseで前のコミットにまとめたりはせず、コミットをバラバラの状態でpushします。レビューアが修正コミットのみを見たいと思うケースがあるからです。pushする前に「あ、ちょっとタイポ」と<code>commit --amend</code>するかもしれませんが。そうすればみんなが嫌いな<code>--force</code>は不要となります。</p><p>次のブログでは<code>--fixup</code>を推奨していますが、この形式のコメントはGitHubは現時点（記事公開日:2024&#x2F;4&#x2F;10）では考慮してくれないので気にしなくても良いです。</p><p><a href="https://blog-dry.com/entry/2024/02/26/090146">https://blog-dry.com/entry/2024/02/26/090146</a></p><h2 id="4-2-developのrebase"><a href="#4-2-developのrebase" class="headerlink" title="4.2. developのrebase"></a>4.2. developのrebase</h2><p>PR作成時は良かったかもしれませんが、その後の他の人のPRが先にマージされるとコンフリクトが発生して再度rebaseが必要になります。その場合は、<code>git pull origin develop</code>で最新の<code>develop</code>を取り込みます。</p><p>何度も<code>develop</code>をマージしなおすケースであれば<code>rerere.enabled true</code>のおかげで、変更を記録しておき操作が自動化されます。最初の一回の修正は必要ですし、コンフリクト時の<code>git add</code> &#x2F; <code>git rebase --continue</code>操作だけは必要ですが、何度もファイルを開いて修正する必要はありません。</p><p>rebase後は通常のpushは失敗するようになってしまいますが、<code>--force-with-lease</code>という<code>--force</code>のようで<code>--force</code>ではない、ちょっと<code>--force</code>なオプションを使います。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin [ブランチ] --force-with-lease</span><br></pre></td></tr></table></figure><h2 id="5-GitHub上でマージ"><a href="#5-GitHub上でマージ" class="headerlink" title="5. GitHub上でマージ"></a>5. GitHub上でマージ</h2><p>Squash and Mergeでマージします。Squash and Mergeするとこのブランチはもう再利用できないというか、ここから新しいコミットを伸ばしてマージしようとするとコンフリクトするのでブランチは削除しましょう。ローカルもです。</p><p>気軽にPull Requestに含まれる1コミットだけを取り消すといったこともできなくなります。</p><h1 id="Git操作の考え方"><a href="#Git操作の考え方" class="headerlink" title="Git操作の考え方"></a>Git操作の考え方</h1><p>上記のモデル操作における基本的なGit操作の考え方についても触れておきます。</p><p><code>develop</code>上では1コミット&#x3D; &#x3D; 1 Pull Requestとなるようにしますが、一方で、Pull Request上では無理にマージする必要はありません。Pull Request前にコミットは可能なら1つにしても良いとは思いますが、素直にコミット履歴を重ねていく方針です。</p><p>コミットをまとめるsquash操作はGitHub上でのみ行います。ローカルでsquash mergeを自分の手でやるということはしません。また、squash mergeしてしまうと、部分的な修正は難しくなるのでPull Request上のレビューやCIのチェックはきちんと行う想定です。</p><p>rebaseは「過去を書き換える機能」ですが、普段使うのは、マージしやすいように自分のコミットを最新のコミットよりも後に持っていく、という方向の修正のみです。</p><p>コミットしたあとに何か不具合を見つけて戻す場合は、その修正のPull Requestを上げて修正すればいいと考えています。rebaseで過去のコミットを修正して無かったことにする、までは不要かなと。</p><p><code>push --force</code>(<code>--force-with-lease</code>)は、rebaseを反映するためだけに利用します。</p><h1 id="トレードオフ"><a href="#トレードオフ" class="headerlink" title="トレードオフ"></a>トレードオフ</h1><p>この設定とか作法でもまだ100点ではないというか、一部ちょっとした困り事はあります。</p><h2 id="rebaseをしっかり覚える必要がある"><a href="#rebaseをしっかり覚える必要がある" class="headerlink" title="rebaseをしっかり覚える必要がある"></a>rebaseをしっかり覚える必要がある</h2><p>今まではrebase怖いと思っていた人もきちんとやっていく必要性があるかなと思います。しかし、やることといえば修正後に<code>git commit</code>の代わりに<code>git rebase --continue</code>をするぐらいと、コミット数分繰り返す必要がある点ですね。</p><p>いままでmergeの方がいいよ、という意見があったのはコンフリクト発生時の処理がrebaseの方がちょっと面倒だった、ということに尽きるかと思います。<code>rerere.enabled true</code>でだいぶ楽になったとはいえ、rebase元との差のコミット数が増えてくるとローカルでのコンフリクト発生時が大変になります。</p><p>あとはrebase時は、他の人の修正がメインで自分のコミットがサブ側になるというのがちょっとわかりにくいとかはありますが、ここはすぐに慣れるでしょう。</p><h2 id="branch-dでブランチが消せない"><a href="#branch-dでブランチが消せない" class="headerlink" title="branch -dでブランチが消せない"></a><code>branch -d</code>でブランチが消せない</h2><p>GitHub等でsquash and mergeを選ぶと、複数のコミットがマージされた1つのコミットになります。コミットが作り替えられます。マージ済みの<code>develop</code>をfetchしても、同一コミットは存在しないわけで、<code>branch -d</code>ではfeatureブランチが消せません。強制的な削除の<code>branch -D</code>を使う必要があります。</p><p>基本的にやることはないと思いますが、マージ済みの作業ブランチでそのまま修正作業を継続するとコンフリクトが必ず発生するというのはありますが、これはまあ問題にはならないと思います。作業フローが悪い。</p><h2 id="squashしてしまうと部分的なコミットの取り消しが不能になる"><a href="#squashしてしまうと部分的なコミットの取り消しが不能になる" class="headerlink" title="squashしてしまうと部分的なコミットの取り消しが不能になる"></a>squashしてしまうと部分的なコミットの取り消しが不能になる</h2><p>マージ後にPull Requestに問題があったと判明したとして取り消そうとした場合、Squashしていなければ内部に含まれるコミットがばらばらにあるので一部だけを消すなども可能です。しかし、Squashしてしまうと、履歴上は1つのコミットになってしまうので、一部だけをなかったことにはできません。</p><p>取り消しはGitHub上のrevert操作で良いと思いますが、これだと　Pull Requestの単位での取り消しになります。でかすぎるPull Requestにならないように、小さい機能に分けてコミットしていくような配慮は必要となるでしょう。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Gitのおもしろさ（難しさ）は、複数の機能の掛け算で、便利なワークフローが変わってくるところです。</p><p><code>git config rerere.enabled true</code>が入ったおかげで、長期間生存し、<code>develop</code>からなんども変更を取り込むようなケースが楽になりました。<code>--force-with-lease</code>というちょっと安全な<code>push --force</code>も入りました。</p><p>最初にメールでパッチを送るケースについて紹介しましたが、実際にはまだ現役で、最近のバージョンのリリースノートでも着実に機能強化はされています。ですが、GitHubやGitLab主体の開発というフローを考えると、着実にrebaseを便利にする機能が強化されており、今後もこの方向性でワークフローを考えていけばどんどん便利になっていきそうです。あとは、rebaseの繰り返しのcontinueが軽減される機能が入ったら完璧ですね。それに期待。</p><h1 id="おまけ-pull-rebase-trueか、pull-ff-onlyか"><a href="#おまけ-pull-rebase-trueか、pull-ff-onlyか" class="headerlink" title="おまけ: pull.rebase trueか、pull.ff onlyか"></a>おまけ: <code>pull.rebase true</code>か、<code>pull.ff only</code>か</h1><p>ローカルでは何も設定しない(<code>git config pull.rebase false</code>相当)と、git pullしてきたときにマージを行おうとします。そうするとマージコミットが出てしまうわけで今回の説明の「なるべく履歴は綺麗に」と違う結果になってしまいます。それ以外の結果を得る設定としては、次の2種類のオプションがあります。</p><ul><li><code>git config pull.ff only</code></li><li><code>pull.rebase true</code></li></ul><p>基本的に他の修正が入る<code>develop</code>ブランチ上で直接作業しない限りは、<code>pull</code>してコンフリクトすることはありません。また、1つのPull Requestを複数人で修正することはない、という前提に立てば<code>pull.ff only</code>で良いかと思います。</p><p>それぞれの状況や設定ごとのgit pullでどうなるかを表でまとめました。</p><div class="scroll"><table><thead><tr><th align="left">設定</th><th align="left">git pull実行時</th><th align="left">操作結果</th><th align="left">どうすればよい？</th></tr></thead><tbody><tr><td align="left">pull.ff only</td><td align="left">インデックスに未コミットのファイルがある(コンフリクトしてない)</td><td align="left">成功</td><td align="left"></td></tr><tr><td align="left">pull.ff only</td><td align="left">ff可能なコミットがある</td><td align="left">エラー</td><td align="left">(1)</td></tr><tr><td align="left">pull.ff only</td><td align="left">ff不可なコミットがある</td><td align="left">エラー</td><td align="left">(1)</td></tr><tr><td align="left">pull.rebase true</td><td align="left">インデックスに未コミットのファイルがある(コンフリクトしてない)</td><td align="left">エラー</td><td align="left">(2)</td></tr><tr><td align="left">pull.rebase true</td><td align="left">ff可能なコミットがある</td><td align="left">成功</td><td align="left"></td></tr><tr><td align="left">pull.rebase true</td><td align="left">ff不可なコミットがある</td><td align="left">git rebaseがスタート</td><td align="left"></td></tr></tbody></table></div><p>表でエラーが発生するのは3箇所(2種類)あります。</p><p>(1)のpull.ff onlyの方は、<code>git pull origin develop --rebase</code>コマンドを使ってrebaseプロセスを始めれば問題なくいけます。</p><p>(2)はコミットするもしくは<code>git restore --staged &lt;ファイル&gt;...</code>でインデックスから除外して再実行すればOKです。</p><p>僕個人は最後までコミットせずに作業して、pull request寸前にgit addすることが多いのでff onlyの方が便利だったりするのですが、周りを見ているとこまめにコミットする人が多いので、おそらく<code>pull.rebase true</code>の方が良い人が多いと思います。なので、今回のこのガイドラインでは<code>pull.rebase true</code>の方を推しています。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://qiita.com/tearoom6/items/0237080aaf2ad46b1963">https://qiita.com/tearoom6/items/0237080aaf2ad46b1963</a></p><ul><li><code>git config pull.rebase true</code></li><li><code>git config rerere.enabled true</code></li></ul><p><a href="https://blog-dry.com/entry/2024/02/26/090146">https://blog-dry.com/entry/2024/02/26/090146</a></p><ul><li><p><code>git commit --fixup</code></p></li><li><p><code>git push --force-with-lease</code></p></li></ul><p><a href="https://blog.colopl.dev/entry/2022/10/07/105919">https://blog.colopl.dev/entry/2022/10/07/105919</a></p><ul><li><code>scaler clone</code></li></ul><p><a href="https://zenn.dev/mary_pp/articles/eaac544eaf600a">https://zenn.dev/mary_pp/articles/eaac544eaf600a</a></p><ul><li>git push –force-with-lease –force-if-includes</li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Git/">Git</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86/">バージョン管理</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E9%81%8B%E7%94%A8/">ブランチ運用</category>
      
      
      <comments>https://future-architect.github.io/articles/20240410a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Testcontainersを用いてテスト実行前の docker compose up を無くし、Goで並列テストする</title>
      <link>https://future-architect.github.io/articles/20240409a/</link>
      <guid>https://future-architect.github.io/articles/20240409a/</guid>
      <pubDate>Mon, 08 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20240408a/&quot;&gt;春の入門祭り2024&lt;/a&gt;の1記事目です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20240408a/">春の入門祭り2024</a>の1記事目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。</p><p>Testcontainers を用いて、単体テスト実行前に <code>docker compose up -d</code> 無しで、PostgreSQLにアクセスする単体テストを行う、入門記事です。</p><p>恩恵は次のような開発者体感の向上が個人的にあります。</p><ul><li>テストを実行するうえで、別プロセスのサービスを起動しておく必要があるといった前提条件を考えなくても済むため、テストを行うビジネスロジックに集中できる<ul><li><code>docker compose up -d</code> 打たないだけだが、テストに必要なコンテナを考慮しなくても済む</li><li>停止し忘れて、別のリポジトリの開発するときに混乱しなくても済む</li></ul></li><li>並列テストしやすくなるので、テストの実行速度が向上する<ul><li>Goにおいて、複数のパッケージを同時にテストするとき、 <code>-p 1</code> で絞らずに済む</li></ul></li></ul><h2 id="Testcontainers-とは"><a href="#Testcontainers-とは" class="headerlink" title="Testcontainers とは"></a>Testcontainers とは</h2><ul><li><a href="https://testcontainers.com/">https://testcontainers.com/</a></li></ul><p>テストコード上で任意のコンテナを起動・停止できるドライバのようなライブラリです。Java, Go, Python, Rustなど様々な言語でをサポートしています。次はGoでredisを起動するコードです。Dockerfileで記載されていた内容を、Goの構造体に渡するとコンテナが起動しそうだということが分かると思います。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">container, err := testcontainers.GenericContainer(ctx, testcontainers.GenericContainerRequest&#123;</span><br><span class="line">    ContainerRequest: testcontainers.ContainerRequest&#123;</span><br><span class="line">        Image:        <span class="string">&quot;redis:5.0.3-alpine&quot;</span>,</span><br><span class="line">        ExposedPorts: []<span class="type">string</span>&#123;<span class="string">&quot;6379/tcp&quot;</span>&#125;,</span><br><span class="line">        WaitingFor:   wait.ForLog(<span class="string">&quot;Ready to accept connections&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    Started:          <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>TestcontainersのAPIとしてはDockerfileを読み込んで起動させることもできます。</p><p>テストコードとの組み合わせは、<a href="https://testcontainers.com/getting-started/">getting-started</a>にかかれていた図が分かりやすいです。</p><p>「Set Up」にてTestcontainers経由でコンテナを取り上げ、テストでそれら立ち上げたサービスにアクセスし、テスト終了後にコンテナを削除する、という流れです。</p><img src="/images/20240409a/test-workflow.png" alt="test-workflow.png" width="820" height="326" loading="lazy"><p>テストコード上でコンテナを起動するという発想がない場合は、手動でコンテナを起動したり、テストスクリプト上（MakefileやTaskfile）に記載していたかと思いますが、単なる起動はともかく、コンテナの破棄を含めたライフサイクル管理は少し手間でした。また、よくありがちなミスは、コンテナは起動したけど、必要なリソースリソース（例えばRDBだとテーブル、S3だとバケットなど）の作成が終わっていないのに、テストが実行されてFailになってしまうというミスも私はやりがちです。</p><p>Testcontainersはそれらの負荷を低減してくれます。</p><h2 id="PostgreSQLを利用する"><a href="#PostgreSQLを利用する" class="headerlink" title="PostgreSQLを利用する"></a>PostgreSQLを利用する</h2><p>RDB（PostgreSQL）をテストで用いるときに、必要となるテーブルは作成されている前提が多いでしょう。例えば次のように schema ディレクトリ配下にCREATE文のSQLファイルが存在しているとします。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── schema  <span class="comment"># DDL</span></span><br><span class="line">│   ├── create_m_xxx_xxx_1.sql</span><br><span class="line">│   ├── create_m_xxx_xxx_2.sql</span><br><span class="line">│   ├── ...</span><br><span class="line">│   └── create_m_xxx_xxx_9.sql</span><br><span class="line">│</span><br><span class="line">├── app    <span class="comment"># 各アプリ（パッケージ名をID管理する大人な管理をしているとします）</span></span><br><span class="line">│   ├── bl01</span><br><span class="line">│   |     ├── ...</span><br><span class="line">|   |     └── handler_test.go <span class="comment"># テストコード</span></span><br><span class="line">│   ├── bl02</span><br><span class="line">│   ├── bl03</span><br><span class="line">│   └── ...</span><br><span class="line">└── ...</span><br></pre></td></tr></table></figure><p>PostgreSQLのオフィシャルイメージでは、<a href="https://hub.docker.com/_/postgres#:~:text=and%20POSTGRES_DB.-,Initialization%20scripts,-If%20you%20would"><code>/docker-entrypoint-initdb.d/</code> 配下にSQLファイルをコピーすると、起動時にSQLを実行してくれます</a>。これをTestcontainersを用いてDDL実行済みのPostgreSQLを起動します。</p><h2 id="moduleの利用"><a href="#moduleの利用" class="headerlink" title="moduleの利用"></a>moduleの利用</h2><p>Testcontainers にはDockerfileで指定できる内容を実現するAPIが揃っているため、自分なりに細かくチューニングしても良いかと思いますが、一般的には「モジュール」と呼ばれる、良い感じに実装されたヘルパー関数のようなパッケージを経由して利用することが多いようです。このモジュールの中には、各プロダクトのベンダーと提携して作られた公式と呼ばれるものもあり、クオリティが高く保たれているため、基本的にここにある＋利用したい言語で存在するのであればモジュール経由でTestcontainersを利用することを私も推奨します。低レベルのAPIの利用を最初は試していましたが、イマイチ上手く動かせなかったところを、モジュールを利用するとすぐに解消されたことが何度かありました。</p><ul><li><a href="https://testcontainers.com/modules/">https://testcontainers.com/modules/</a></li></ul><p><a href="https://testcontainers.com/modules/postgresql/">PostgreSQLモジュール</a>はGo対応もしていますのでそのまま利用できます。</p><p>今回は複数のテストコードでコンテナを呼び出したいので、ヘルパーとして <code>testonly/testcontainers.go</code> のファイルを作ります。</p><p><code>/docker-entrypoint-initdb.d/</code> の起動スクリプトですが、PostgreSQLのモジュールでは、ディレクトリごとコピーはできないため、ファイルの一覧を取得して、 <code>postgres.WithInitScripts(scripts...)</code> で渡しています。</p><p>次のポイントとして、<code>testcontainers.WithWaitStrategy()</code> の部分ですが、これは起動スクリプトで作成したテーブルが存在するまでWaitさせるという指示です。他にもコンテナが起動するまでWaitするなど様々な指定ができますが、この例では <code>m_xxx_xxx_1 </code> テーブルが存在するまで確認させるようにしています。これで、必要なテーブルが作成されないまま、テストで検証するアプリコードが動いてしまうことを防ぎます。</p><figure class="highlight go"><figcaption><span>testcontainers.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> testonly</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/docker/go-connections/nat&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/testcontainers/testcontainers-go&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/testcontainers/testcontainers-go/modules/postgres&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/testcontainers/testcontainers-go/wait&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PostgresContainer <span class="keyword">struct</span> &#123;</span><br><span class="line">postgres.PostgresContainer</span><br><span class="line">ConnectionString <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c PostgresContainer)</span></span> Down() &#123;</span><br><span class="line"><span class="keyword">if</span> err := c.Terminate(context.Background()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Could not stop postgres: %s\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetupDB</span><span class="params">(t *testing.T)</span></span> *PostgresContainer &#123;</span><br><span class="line">t.Helper()</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">entries, err := os.ReadDir(<span class="string">&quot;../../schema&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scripts := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(entries))</span><br><span class="line"><span class="keyword">for</span> _, e := <span class="keyword">range</span> entries &#123;</span><br><span class="line">scripts = <span class="built_in">append</span>(scripts, <span class="string">&quot;../../schema&quot;</span>+e.Name())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pgContainer, err := postgres.RunContainer(ctx,</span><br><span class="line">testcontainers.WithImage(<span class="string">&quot;postgres:15.5&quot;</span>),</span><br><span class="line">postgres.WithInitScripts(scripts...),</span><br><span class="line">postgres.WithDatabase(<span class="string">&quot;postgres&quot;</span>),</span><br><span class="line">postgres.WithUsername(<span class="string">&quot;local&quot;</span>),</span><br><span class="line">postgres.WithPassword(<span class="string">&quot;pass&quot;</span>),</span><br><span class="line">testcontainers.WithWaitStrategy(</span><br><span class="line">wait.ForSQL(<span class="string">&quot;5432&quot;</span>, <span class="string">&quot;postgres&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(host <span class="type">string</span>, port nat.Port)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;postgres://local:pass@%s/postgres?sslmode=disable&quot;</span>, net.JoinHostPort(host, port.Port()))</span><br><span class="line">&#125;).WithQuery(<span class="string">&quot;select 1 from m_xxx_xxx_9 limit 1&quot;</span>).WithPollInterval(<span class="number">1</span>*time.Second).WithStartupTimeout(<span class="number">10</span>*time.Second)),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;postgres run container: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">connStr, err := pgContainer.ConnectionString(ctx, <span class="string">&quot;sslmode=disable&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;PostgresContainer&#123;</span><br><span class="line">PostgresContainer: pgContainer,</span><br><span class="line">ConnectionString:  connStr,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のようなヘルパー関数を、テストコードから呼び出します。</p><p>ポイントは、接続文字列を<code>pgContainer.ConnectionString</code> から取得しているところです。理由ですがTestcontainersを用いると、ホスト側で利用するポートはランダムに決定します。そのため5432で決め打ちではなく、TestcontainersのPostgreSQLモジュールが割り当てた値を利用する必要があります。</p><figure class="highlight go"><figcaption><span>handler_test.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHandler_GetXxxXxx</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">pgContainer := testonly.SetupDB(t) <span class="comment">// PostgreSQL起動</span></span><br><span class="line">t.Cleanup(pgContainer.Down)</span><br><span class="line"></span><br><span class="line"><span class="comment">// この例ではjackc/pgx/v4 を利用してコネクション接続</span></span><br><span class="line">pool, err := pgxpool.Connect(context.Background(), pgContainer.ConnectionString)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">&quot;connect db for test ,dsn = %s: %v&quot;</span>, dsn, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 個別のテスト</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="Testcontainers-を用いると-Goのパッケージ構成は-package-by-feature-がマッチする？"><a href="#Testcontainers-を用いると-Goのパッケージ構成は-package-by-feature-がマッチする？" class="headerlink" title="Testcontainers を用いると Goのパッケージ構成は package by feature がマッチする？"></a>Testcontainers を用いると Goのパッケージ構成は package by feature がマッチする？</h2><p>Testcontainersを用いると、例えば bl01, bl02間で共通するDBテーブルが存在したとしても、利用するコンテナが別になるため、当たり前ですが、特段の工夫無しで並列にテストを動かせるようになります。モックの利用を無しにそれを簡単に行えるのは素敵だと感じます。</p><p>この恩恵を得やすくするためには、 <code>package by feature</code>、つまり機能ごとのパッケージで作っておくとよいでしょう。機能単位に並列でテストができ、機能単位ゆえそれなりにテスト実行時間がならされていると思うので、テスト実行時間の短縮が見込みやすいと考えられるためです。</p><p>逆に、<code>package by layer</code>、つまりDBアクセスするコントローラ層（controller, usecase, handlerなど）でパッケージを切って、その配下に <code>xxx_handler.go</code>, <code>yyy_handler.go</code> などをフラットに並べて配置をしない方が良いと思いました（<code>handler</code> パッケージの配下に、サブパッケージを作れば別ですが、それはしないとします）。この場合はRDBなどのリソースにアクセスするため、おそらく最も時間がかかるcontrollerのようなパッケージのテストを分割実行しにくいためです。これはテストポリシーとして、リポジトリのようなDB層単体のテストコードも書くといった、レイヤーごとにテストサイズMediumのテストを実行するケース（個人的に出会ったことがないですが、ライブラリなどはありえる？）には当てはまらないと思いますので、ここに書いていない前提が色々入った上での意見になっていると思います。</p><h2 id="使ってみての所感"><a href="#使ってみての所感" class="headerlink" title="使ってみての所感"></a>使ってみての所感</h2><p>Testcontainers経由での起動ですが、DDLが20ファイルほどでだいたい3~5秒程度の起動時間がかかります。これをどう見るかですが、個人的には複数のパッケージを並列でテスト実行できるというメリットがあり、受け入れられると感じています。</p><p>DBのような外部プロセスのサービスを、全テストで共有していた場合は、同じテーブルを複数のテストで書き換え競合してテストが落ちることを回避するために、同時実行数を1に抑えるため、<code>go test</code> に <code>-p 1</code> オプションを加えていましたが、これを無くせるのは嬉しいです。</p><p>Testcontainersを利用する前は、ローカル実行用の、Dockerfile, compose.yaml とTestcontainersのコードとのダブルメンテが嫌だなと感じていましたが、上記の利便性が大きいのでいつの間にか素直に受け入れられています。Testcontainersにも<a href="https://golang.testcontainers.org/features/build_from_dockerfile/">Dockerfileやcompose.yaml を利用するAPI</a>があるので、工夫すればダブルメンテ無しでメリットを享受することもできるかもしれませんが、私は未検証です。</p><p>また、テスト毎にコンテナを起動するメリットは、他のパッケージのテストが副作用を起こし、まれにテストが落ちるパターンのフレーキーテスト（Flaky Test：実行結果が不安定なテストのこと）を発生させにくくするメリットもあるかと思います。例えば、テスト実行前に、前提とするマスタデータが別のパッケージのテスト（特に自分以外の開発者の作業で行われた場合）で書き換えられていたりして、地味にハマるケースは回避できるでしょう。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>Testcontainersを用いてPostgreSQLにアクセスするGoのテストの書き方を紹介しました。</p><p>今回は割愛しましたが、私は <code>docker compose up</code> にて手動で起動済みの場合は、Testcontainers経由で起動せず、起動中のコンテナをそのままテストで利用するといった実装を入れています。そうすると、テスト実行後のDBの状態を見たいときと、単にテストを動かしたいだけのケースを棲み分けができ、開発時の切り分けがとても便利になりました。</p><p>上記のようなややトリッキーな制御も、Testcontainersだと比較的容易に実現でき、名前の通りテストコードとの統合性は高いと感じます。今後は他の案件にも横展開していこうと思います。オススメです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/">テスト</category>
      
      <category domain="https://future-architect.github.io/tags/Testcontainers/">Testcontainers</category>
      
      
      <comments>https://future-architect.github.io/articles/20240409a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go1.22リリースパーティに「ServeMuxの競合検知と性能」というタイトルで登壇しました</title>
      <link>https://future-architect.github.io/articles/20240408b/</link>
      <guid>https://future-architect.github.io/articles/20240408b/</guid>
      <pubDate>Sun, 07 Apr 2024 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIGの武田です。</p><p>2024&#x2F;3&#x2F;18に開催されたGo1.22のリリースパーティに登壇しました。少し時間が空いてしまいましたが、登壇レポートです。</p><h3 id="イベント概要"><a href="#イベント概要" class="headerlink" title="イベント概要"></a>イベント概要</h3><p>このイベントはGo1.22のリリースをお祝いすると共に、<a href="https://tip.golang.org/doc/go1.22">Go1.22のアップデート内容</a>を中心にワイワイするイベントです。今回は完全オンライン形式で開催されました。</p><p><a href="https://gocon.connpass.com/event/310606/">https://gocon.connpass.com/event/310606/</a></p><p>Goのリリースサイクルは半年ごとに設定（2月と8月）されており、リリースパーティの開催はGo1.6のリリースを初回として、今回で16回目となるそうです。</p><h3 id="登壇のきっかけ"><a href="#登壇のきっかけ" class="headerlink" title="登壇のきっかけ"></a>登壇のきっかけ</h3><p>tenntennさんから「フューチャーさんからどなたか登壇しませんか？」というお誘いを澁川さん経由で頂戴しました。<a href="https://future-architect.github.io/articles/20240129a/">Go1.22のリリース連載記事</a>を書いていたこともあり、手を上げさせていただきました。リリースパーティにはこれまで何度も参加していたので、登壇の機会をいただけたことを大変嬉しく思います。この場を借りて、改めてお礼申し上げます。</p><h2 id="登壇資料と動画"><a href="#登壇資料と動画" class="headerlink" title="登壇資料と動画"></a>登壇資料と動画</h2><p>登壇資料と動画は下記にて公開されています。</p><ul><li><p>登壇資料<br><a href="https://rhumie.github.io/go122party/">https://rhumie.github.io/go122party/</a></p></li><li><p>動画（30:40 より）<br><a href="https://www.youtube.com/watch?v=0nsryM4X-0I&t=1840s">https://www.youtube.com/watch?v=0nsryM4X-0I&amp;t=1840s</a></p></li></ul><h2 id="登壇内容"><a href="#登壇内容" class="headerlink" title="登壇内容"></a>登壇内容</h2><p>今回のリリースで比較的大きなアップデートが行われたServeMuxについて取り上げました。</p><p>ServeMuxのアップデートの背後には「リクエストマッチング」と「競合検知」という2つの性能論点があります。前者については、<a href="https://future-architect.github.io/articles/20240202a/">リリース連載ブログ</a>にてベンチマークを行う形で触れていたので、今回は後者の「競合検知」をテーマにしました。</p><img src="/images/20240408b/ServeMux-Conflict-Detection-Go-1-22-Release-Party.png" alt="ServeMux-Conflict-Detection-Go-1-22-Release-Party.png" width="1200" height="649" loading="lazy"><p>資料の構成として、前半部では「そもそも競合とは何か？」という基本的な問いから始め、なぜ競合検知が性能面で重要な論点となるのかを説明しています。</p><img src="/images/20240408b/ServeMux-Conflict-Detection-Go-1-22-Release-Party_2.png" alt="ServeMux-Conflict-Detection-Go-1-22-Release-Party.png" width="1200" height="649" loading="lazy"><p>そして後半部ではServeMuxが性能懸念に対してどのように対応しているのかを実装レベルで詳細に解説しています。</p><img src="/images/20240408b/ServeMux-Conflict-Detection-Go-1-22-Release-Party_3.png" alt="ServeMux-Conflict-Detection-Go-1-22-Release-Party.png" width="1200" height="649" loading="lazy"><h2 id="登壇資料を作る流れ"><a href="#登壇資料を作る流れ" class="headerlink" title="登壇資料を作る流れ"></a>登壇資料を作る流れ</h2><p>あえて章立てして書くほどの内容でもないですが、最近真野さんが<a href="https://future-architect.github.io/articles/20240307a/">Goリリースノートから技術ブログを書く流れ基礎</a>という記事を公開していたので、流れにのってログとして残しておきます。</p><p>資料を作成するにあたって、まずは関連するプロポーサルやディスカッションを読み、次にServeMuxのソースコード自体を読む形で色々とネタや気付きを集めました。</p><ul><li><p>Proposal<br><a href="https://github.com/golang/go/issues/61410">https://github.com/golang/go/issues/61410</a></p></li><li><p>Discussion<br><a href="https://github.com/golang/go/discussions/60227">https://github.com/golang/go/discussions/60227</a></p></li></ul><p>ネタを集めたらその後ストーリーを作り、ストーリーができたら個々のマテリアルを作っていく流れになります。<br>今回は「競合をわかりやすく伝えるためのパターン文字列の例をどうするか」、「インデックスの構造をどう視覚的に表現するか」などは簡潔明瞭になるよう気を遣って作成を行いました。</p><p>資料自体は<a href="Slidev">https://ja.sli.dev/</a>を使用して作成しています。<br>私は普段PowerPointでゴリゴリに資料を作りこむタイプですが、テキストベースのシンプルな資料やコードを引用することが多い資料の作成には相性が良いと感じました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%83%91%E3%83%BC%E3%83%86%E3%82%A3/">Goリリースパーティ</category>
      
      
      <comments>https://future-architect.github.io/articles/20240408b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>春の入門連載2024を始めます</title>
      <link>https://future-architect.github.io/articles/20240408a/</link>
      <guid>https://future-architect.github.io/articles/20240408a/</guid>
      <pubDate>Sun, 07 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240408a/DSC05372.JPG&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;802&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240408a/DSC05372.JPG" alt="" width="1200" height="802" loading="lazy"><p>こんにちは。技術ブログ運営の伊藤です。</p><p>春の入門連載2024のインデックス記事です。</p><h2 id="春の入門連載とは"><a href="#春の入門連載とは" class="headerlink" title="春の入門連載とは"></a>春の入門連載とは</h2><p>春の入門連載は2020年から始めた連載で、アドベントカレンダーを除いて技術ブログの中ではご長寿な連載となっていて、2024年で5年目です。</p><p>この連載は以下のテーマで社員向けには募集をかけています。</p><ul><li>今まで触って無かった技術のやってみた記事</li><li>先輩・同期・後輩宛に、知っておいて欲しい技術記事</li><li>好きな技術の布教活動をする記事</li></ul><p>他の連載に比べて、ジャンルを問わずに応募していることもあり、毎年初の寄稿となる社員も多く参加しています。参加者の中にはブログを書いてみたい、とブログ運営に直接連絡をくれたやる気に溢れた社員もいるほどです。</p><p>さて、フューチャーには100名を超える新卒が4月に入社しました。社内外問わず、新人はもちろん、新しいことに取り組むきっかけとしても是非この連載を読んでいただければと思います。</p><h2 id="参加者一覧-投稿タイトル"><a href="#参加者一覧-投稿タイトル" class="headerlink" title="参加者一覧&amp;投稿タイトル"></a>参加者一覧&amp;投稿タイトル</h2><p>今年の参加はインデックス記事を含めて15記事14名が参加します。<br>技術ブログにはお馴染みの顔から、今回の連載で初寄稿の社員まで幅広いメンバーで4月いっぱい投稿していきます。テーマがまだ決まっていないところや変わる場合がありますが、是非色々な記事をお楽しみにしていただければと思います。</p><div class="scroll"><table><thead><tr><th>日付</th><th>投稿者</th><th>テーマ</th></tr></thead><tbody><tr><td>4&#x2F;8(月)</td><td>伊藤太斉</td><td>本インデックス記事</td></tr><tr><td>4&#x2F;9(火)</td><td>真野隼記</td><td><a href="/articles/20240409a/">Testcontainersを用いてテスト実行前の docker compose up を無くし、Goで並列テストする</a></td></tr><tr><td>4&#x2F;10(水)</td><td>澁川喜規</td><td><a href="/articles/20240410a/">2024年Gitワークフロー再考</a></td></tr><tr><td>4&#x2F;11(木)</td><td>岸本卓也</td><td><a href="/articles/20240411a/">全文検索エンジンMeilisearchを試す</a></td></tr><tr><td>4&#x2F;12(金)</td><td>森大作</td><td><a href="/articles/20240412a/">Systemdにおけるservice unitの起動フロー入門</a></td></tr><tr><td>4&#x2F;15(月)</td><td>棚井龍之介</td><td><a href="/articles/20240415a/">VSCodeでGitLensを使う</a></td></tr><tr><td>4&#x2F;17(水)</td><td>伊藤太斉</td><td><a href="/articles/20240417b/">Prometheus&#x2F;Grafanaを使ってみる</a></td></tr><tr><td>4&#x2F;18(木)</td><td>清水雄一郎</td><td><a href="/articles/20240418a/">WSLで始めるサーバーサイドSwift 入門 ～Hummingbird～</a></td></tr><tr><td>4&#x2F;19(金)</td><td>中邨英里佳</td><td><a href="/articles/20240419a/">CI&#x2F;CD初心者のためのJenkins入門</a></td></tr><tr><td>4&#x2F;22(月)</td><td>吉原涼子</td><td><a href="/articles/20240422a/">Vue.jsの学習でオセロを作った話</a></td></tr><tr><td>4&#x2F;23(火)</td><td>高世駿</td><td><a href="/articles/20240423a/">ESP32とGoogle SpleadSheetで始めるIoT入門</a></td></tr><tr><td>4&#x2F;24(水)</td><td>小橋昌明</td><td><a href="/articles/20240424a/">p5.jsで好きなプログラミング言語発表ドラゴンを作ろうとした</a></td></tr><tr><td>4&#x2F;25(木)</td><td>山下雄大</td><td><a href="/articles/20240425a/">シェルスクリプトで固定長ファイルに区切り文字を入れてCSVに変換する</a></td></tr><tr><td>4&#x2F;26(金)</td><td>後藤喜斗</td><td><a href="/articles/20240426b/">GASでGoogleTasksとスプレッドシートを擬似的に双方向バインディングさせてみた</a></td></tr><tr><td>4&#x2F;30(火)</td><td>橋本竜我</td><td><a href="/articles/20240430a/">【iOS&#x2F;Swift】ダークモード・ライトモード・端末の表示モードへアプリ内から自由に切り替える</a></td></tr><tr><td>5&#x2F;1(水)</td><td>山本竜玄</td><td>自作キーボード</td></tr><tr><td>5&#x2F;x</td><td>大岩潤矢</td><td>unjs&#x2F;nitroで始めるサーバレスアプリケーション入門</td></tr></tbody></table></div><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>是非、良いと思った記事などはシェアなどのリアクションをいただければと思います！</p><ul><li><a href="/articles/20230417a/">2023年の連載記事</a></li><li><a href="/articles/20220418a/">2022年の連載記事</a></li><li><a href="/articles/20210414a/">2021年の連載記事</a></li><li><a href="/articles/20200529/">2020年の連載記事</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%98%A5%E3%81%AE%E5%85%A5%E9%96%80%E7%A5%AD%E3%82%8A/">春の入門祭り</category>
      
      
      <comments>https://future-architect.github.io/articles/20240408a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vue.jsを2から3へバージョンアップした話</title>
      <link>https://future-architect.github.io/articles/20240405a/</link>
      <guid>https://future-architect.github.io/articles/20240405a/</guid>
      <pubDate>Thu, 04 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240405a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;487&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240405a/top.png" alt="" width="800" height="487"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。Technology Innovation Group所属の太田寛明です。</p><p>新人研修で触れた程度のVue.js経験者の私が、Vueのバージョンアップを行って得た、所感や躓いたポイントを共有します。</p><h1 id="経緯"><a href="#経緯" class="headerlink" title="経緯"></a>経緯</h1><p>Vue2は2023年12月31日にEnd of Life（EOL）を迎えることになりました。</p><p>EOL期日までにVue2をVue3にバージョンアップする必要があります。</p><p>今回の対応では、<a href="#%E5%AF%BE%E5%BF%9C%E5%86%85%E5%AE%B9">対応内容</a>で紹介する「1. Vue3での動作に必要な変更」をまず最優先で対応し、その後により良いプロダクトとするための取り組みとして「2. Vue3からの新規推奨事項の適用」の対応を行いました。</p><h1 id="対応内容"><a href="#対応内容" class="headerlink" title="対応内容"></a>対応内容</h1><p>まず最初に今回のVue2から3へのバージョンアップで行った変更の全貌を紹介します。</p><ol><li>Vue3での動作に必要な変更<ul><li><strong>Vue本体の更新</strong></li><li><strong>周辺パッケージの更新</strong></li></ul></li><li>Vue3からの新規推奨事項の適用<ul><li><strong>ビルドツール変更</strong>：Vue CLI ⇒ Vite<ul><li>起動時間の爆速化<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>のため実施</li></ul></li><li><strong>IDEサポート変更</strong>：Vetur ⇒ Vue - Official<ul><li>Veturの無効化<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>のため実施</li><li><code>.vscode/extensions.json</code>に、推奨&#x2F;非推奨の拡張機能を記載して実装<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></li></ul></li><li><strong>状態管理ライブラリ変更</strong>：Vuex ⇒ Pinia<ul><li>TypeScript化の容易性のため実施</li></ul></li><li><strong>テストライブラリ変更</strong>：Jest ⇒ Vitest<ul><li>Vite使用時、大幅簡潔化できるため実施</li></ul></li><li><strong>API変更</strong><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>：Options API ⇒ Composition API（<code>script setup</code>）<ul><li>TypeScript化の容易性のため実施</li></ul></li><li><strong>TypeScript化（環境設定のみ）</strong><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup><ul><li>コードの型安全性向上のため実施</li></ul></li></ul></li></ol><h2 id="躓いたポイント"><a href="#躓いたポイント" class="headerlink" title="躓いたポイント"></a>躓いたポイント</h2><h3 id="Auth0の移行"><a href="#Auth0の移行" class="headerlink" title="Auth0の移行"></a>Auth0の移行</h3><p>（<strong>周辺パッケージの更新</strong>に対応）</p><p>Vue2では<code>@auth0/auth0-spa-js</code>というライブラリを使用して、ラッパーを自作する形で使用することが推奨されていました。<br>一方でVue3からは<code>auth0-vue</code>というラッパーを内包したライブラリを使用することが推奨されるようになりました。</p><p>特にラッパーをカスタマイズせず使用していた場合はそのまま移行すれば問題ないですが、カスタマイズされている場合は大変な作業になると思います。</p><p>私の場合は、カスタマイズされたラッパーが使用されていましたが、その後すぐに認証システムがAuth0から変更になる予定であったため、暫定的にライブラリを改造して対応しました。</p><h3 id="Vuetifyの移行"><a href="#Vuetifyの移行" class="headerlink" title="Vuetifyの移行"></a>Vuetifyの移行</h3><p>（<strong>周辺パッケージの更新</strong>に対応）</p><p><a href="#%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A">振り返り</a>でVuetifyの移行の大変さには触れていますが、ここではとりわけ躓いたポイントに絞って紹介します。</p><h4 id="v-date-pickerが取る値の型がString型からDate型に変更"><a href="#v-date-pickerが取る値の型がString型からDate型に変更" class="headerlink" title="v-date-pickerが取る値の型がString型からDate型に変更"></a><code>v-date-picker</code>が取る値の型が<code>String</code>型から<code>Date</code>型に変更</h4><p>データの受け渡しが当然うまくいかなくなりました。<br>私の場合、以下状況を踏まえ、<code>Date</code>型用の変数を新たに用意し、<code>watch</code>と<code>@update:model-value</code>を用いて同期させる形で修正しました。</p><ul><li>常に<code>v-text-field</code>と組み合わせて使用されている</li><li>データの受け渡しは広い範囲で行われている</li></ul><p>実装例：<br>※比較が容易のため、Options APIで記載しています。<br>※<code>v-menu</code>や<code>v-slot</code>の変更も含まれています。</p><figure class="highlight diff"><figcaption><span>DatePicker.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line"><span class="addition">+import dayjs from &#x27;dayjs&#x27;</span></span><br><span class="line"> export default &#123;</span><br><span class="line">   data() &#123;</span><br><span class="line">     return &#123;</span><br><span class="line">       dateText: &#x27;&#x27;,</span><br><span class="line"><span class="addition">+      dateTime: undefined,</span></span><br><span class="line"><span class="addition">+      menuFlg: false,</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line"><span class="addition">+  watch: &#123;</span></span><br><span class="line"><span class="addition">+    dateText() &#123;</span></span><br><span class="line"><span class="addition">+      if (this.dateText) &#123;</span></span><br><span class="line"><span class="addition">+        this.dateTime = dayjs(this.dateText).toDate()</span></span><br><span class="line"><span class="addition">+      &#125; else &#123;</span></span><br><span class="line"><span class="addition">+        this.dataTime = undefined</span></span><br><span class="line"><span class="addition">+      &#125;</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line"><span class="addition">+  &#125;,</span></span><br><span class="line"><span class="addition">+  methods: &#123;</span></span><br><span class="line"><span class="addition">+    setDateText() &#123;</span></span><br><span class="line"><span class="addition">+      this.dateText = dayjs(this.dateTime).format(&#x27;YYYY-MM-DD&#x27;)</span></span><br><span class="line"><span class="addition">+      this.menuFlg = false</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line"><span class="addition">+  &#125;,</span></span><br><span class="line"> &#125;</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line"></span><br><span class="line"> &lt;template&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">     &lt;!-- dateTextの値が直接変更される場合を再現するボタン --&gt;</span><br><span class="line">     &lt;v-btn @click=&quot;dateText = &#x27;2024-04-01&#x27;&quot;&gt; dateText = &#x27;2024-04-01&#x27; &lt;/v-btn&gt;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-    &lt;v-menu&gt;</span></span><br><span class="line"><span class="deletion">-      &lt;template #activator=&quot;&#123; on, attrs &#125;&quot;&gt;</span></span><br><span class="line"><span class="addition">+    &lt;v-menu v-model=&quot;menuFlg&quot; :close-on-content-click=&quot;false&quot;&gt;</span></span><br><span class="line"><span class="addition">+      &lt;template #activator=&quot;&#123; props &#125;&quot;&gt;</span></span><br><span class="line">         &lt;v-text-field</span><br><span class="line">           v-model=&quot;dateText&quot;</span><br><span class="line"><span class="deletion">-          v-bind=&quot;attrs&quot;</span></span><br><span class="line"><span class="deletion">-          v-on=&quot;on&quot;</span></span><br><span class="line"><span class="addition">+          v-bind=&quot;props&quot;</span></span><br><span class="line">           readonly</span><br><span class="line">           clearable</span><br><span class="line">         &gt;&lt;/v-text-field&gt;</span><br><span class="line">       &lt;/template&gt;</span><br><span class="line">       &lt;v-date-picker</span><br><span class="line"><span class="deletion">-        v-model=&quot;dateText&quot;</span></span><br><span class="line"><span class="deletion">-        :day-format=&quot;(date) =&gt; new Date(date).getDate()&quot;</span></span><br><span class="line"><span class="addition">+        v-model=&quot;dateTime&quot;</span></span><br><span class="line"><span class="addition">+        @update:model-value=&quot;setDateText&quot;</span></span><br><span class="line">       &gt;&lt;/v-date-picker&gt;</span><br><span class="line">     &lt;/v-menu&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"> &lt;/template&gt;</span><br></pre></td></tr></table></figure><p>もっとも、タイムゾーンの問題があるため、基本的に日付データの受け渡しは単なる文字列ではなく、タイムゾーン情報を含めて行うのがベターです。</p><h4 id="一部コンポーネントが未実装"><a href="#一部コンポーネントが未実装" class="headerlink" title="一部コンポーネントが未実装"></a>一部コンポーネントが未実装</h4><p>Vuetifyはまだ一部コンポーネントが未実装であり、該当コンポーネントが実装に含まれる場合は個別で対応が必要になります。</p><p>私の場合は<code>v-treeview</code>が未実装でした（<code>v3.5.9</code>で実装済）。<br>自作難度がそこまで高くないコンポーネントであったため助かりました。</p><h3 id="Vue3に対応していないライブラリの移行"><a href="#Vue3に対応していないライブラリの移行" class="headerlink" title="Vue3に対応していないライブラリの移行"></a>Vue3に対応していないライブラリの移行</h3><p>（<strong>周辺パッケージの更新</strong>に対応）</p><h4 id="smartweb-vue-flash-messageの廃止"><a href="#smartweb-vue-flash-messageの廃止" class="headerlink" title="@smartweb/vue-flash-messageの廃止"></a><code>@smartweb/vue-flash-message</code>の廃止</h4><p>使用していたフラッシュメッセージ機能を提供してくれるライブラリがVue3では使用できませんでした。</p><p>こちらはコンポーネントを自作しても対応できそうでしたが、ちょうど良さそうな代替ライブラリ<code>@alamtheinnov/flashtoast</code>を発見したため、こちらを代わりに使用する形で対応しました。</p><h4 id="vue-clipboard2の廃止"><a href="#vue-clipboard2の廃止" class="headerlink" title="vue-clipboard2の廃止"></a><code>vue-clipboard2</code>の廃止</h4><p>使用していたクリップボード機能を提供してくれるライブラリがVue3では使用できませんでした。</p><p>Vue3に対応した類似ライブラリはいくつか存在したものの、Web APIの<a href="https://developer.mozilla.org/ja/docs/Web/API/Clipboard/writeText">Clipboard.writeText()</a>が主要ブラウザのいずれにも対応しており、機能面の差異もほとんどないことから、このAPIを使用して対応する方針に決めました。<br>（ただし、実際に蓋を開けてみるとプロジェクト内で使用されていなかったため、この対応は不要になりました。）</p><h3 id="Yarnがおかしい"><a href="#Yarnがおかしい" class="headerlink" title="Yarnがおかしい"></a>Yarnがおかしい</h3><p>（<strong>ビルドツール変更</strong>に対応）</p><p>パッケージ管理ツールとしてYarn v1が使用されていたのですが、ViteでファイルをES Modulesとして扱って実行した際に、次のようなエラーに遭遇しました。</p><p>推測ですが、CommonJSとES Modulesが併存するライブラリをインストールする際に、パッケージの依存関係次第でうまくいかなくなるようです。</p><p>結論としてはYarn v1はそもそも非推奨であるため、npmに移行して対応しました。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Error [ERR_REQUIRE_ESM]: require() of ES Module &lt;path&gt;/node_modules/string-width/index.js</span><br></pre></td></tr></table></figure><p>類似のissueは様々に挙げられており（<a href="https://github.com/storybookjs/storybook/issues/22431">https://github.com/storybookjs/storybook/issues/22431</a> 等）、Yarn v1のバグであると考えられています。</p><h1 id="振り返り"><a href="#振り返り" class="headerlink" title="振り返り"></a>振り返り</h1><p>私にとって一番大変だったのは、このメジャーバージョンアップを行うにあたり、Vueの何をどのように更新すれば良いのか把握する所だったかと思います。自分的にもここが最も重要な所であると考えていたため、Vueの全体像把握に注力しながら対応内容の洗い出しを行った記憶があります。</p><p>対応内容が洗い出された後は、基本的にそれぞれのパッケージに対応する公式ドキュメントに従って移行すれば問題なくVue3化できました。</p><p>とはいえ、以下の点で大変であることは間違いないと思います。</p><ul><li>公式ドキュメントを逐一確認する必要がある</li><li>バージョンを上げれば完了するものからソースコードを大きく修正する必要のあるものまで幅広く存在する</li><li>Vue3に対応していないものも存在する</li></ul><p>他と比較しても群を抜いて大変だったのが、Vuetifyの更新でした。</p><p>UIを担ってくれるこのライブラリの変更点は、公式ドキュメントですら網羅できないほどあるだけでなく、見た目も変化してしまう箇所があるため、実装箇所を逐一確認して修正する他ありませんでした。（もちろん<code>eslint-plugin-vuetify</code>を使用すれば幾分か楽できますが、これも変更点を全て網羅しているわけではないため注意が必要です。）</p><p>一方で、API変更に伴うテストコードの修正は予想に反してほとんどありませんでした。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>比較的ざっくりとVueバージョンアップについて経験を踏まえたお話ししました。</p><p>詳細な部分については、各々のVueプロジェクトに対し、使用しているライブラリを踏まえ、比較的整備されている公式ドキュメント類とにらめっこしながら、柔軟に対応していくしかないと思いました。</p><p>本記事の内容は、これからVueバージョンアップする際に直接的な手助けはしてくれないと思いますが、心構えの助けなんかになればと思っています。</p><p>今回のバージョンアップにあたり、Vue.js周りの様々な質問に答えて下さった太田洋介さん、そして本案件を通じて様々なサポートをして下さった澁川喜規さんには深く感謝申し上げます。</p><p>最後までありがとうございました。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">冗談抜きで100倍くらい早くなりました。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://ja.vuejs.org/guide/scaling-up/tooling.html#ide-support">https://ja.vuejs.org/guide/scaling-up/tooling.html#ide-support</a> より、無効化が推奨されています。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">デフォルトでは非推奨の拡張機能が使用されていても通知してくれないので<code>Unwanted Recommendations</code>という拡張機能も追加しています。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">便宜上&quot;Vue3からの新規推奨事項の適用&quot;に記載していますが、公式ドキュメントで名言されている箇所は特に存在していなかったと記憶しています（注目の新機能とは言われています）。</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;">Vue3からTypeScriptへのサポートが強化されたため実施しています。工数の関係でJavaScriptからTypeScriptへ書き換えることはできず、環境設定のみの対応となったため、&quot;<strong>（環境設定のみ）</strong>&quot;としています。</span><a href="#fnref:5" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Vue-js/">Vue.js</category>
      
      <category domain="https://future-architect.github.io/tags/Vue3/">Vue3</category>
      
      <category domain="https://future-architect.github.io/tags/Vuetify/">Vuetify</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86/">バージョン管理</category>
      
      <category domain="https://future-architect.github.io/tags/vue2/">vue2</category>
      
      
      <comments>https://future-architect.github.io/articles/20240405a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Difyで生成AIアプリケーション入門　後編：自作プログラムで機能追加して生成AIの指向性と精度を高める</title>
      <link>https://future-architect.github.io/articles/20240404a/</link>
      <guid>https://future-architect.github.io/articles/20240404a/</guid>
      <pubDate>Wed, 03 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;/articles/20240402a/&quot;&gt;前回&lt;/a&gt;に引き続き &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p><a href="/articles/20240402a/">前回</a>に引き続き <a href="https://dify.ai/">Dify</a> と <a href="https://console.anthropic.com/dashboard">Anthropic Claude</a> （OpenAI でも OpenRouter 経由の何かでもOK）を使って簡単に生成AIアプリケーションを構築する方法をご紹介します。</p><h2 id="チュートリアル3：セルフレビュー機能付きのSQL生成AIチャットbot"><a href="#チュートリアル3：セルフレビュー機能付きのSQL生成AIチャットbot" class="headerlink" title="チュートリアル3：セルフレビュー機能付きのSQL生成AIチャットbot"></a>チュートリアル3：セルフレビュー機能付きのSQL生成AIチャットbot</h2><p><a href="/articles/20240402a/">前編のチュートリアル1</a>で作ったSQL生成チャットbotをベースに、セルフレビュー機能を追加し、間違ったSQL文や存在しないテーブルやカラムを使用しようとした時に自動でやり直すように改修します。</p><h3 id="DB用意"><a href="#DB用意" class="headerlink" title="DB用意"></a>DB用意</h3><p>SQLの実行環境が必要になりますが、ちょうど Dify が使用している DB（Postgresql） サービスがあるので、これにホストOSからアクセスできるようにします。別でDBを用意できる場合はそちらでもOKです。</p><p><code>docker-compose.yml</code> で以下の行をアンコメントしてください。</p><figure class="highlight yml"><figcaption><span>docker-compoese.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># uncomment to expose db(postgresql) port to host</span></span><br><span class="line"><span class="comment"># ports:</span></span><br><span class="line"><span class="comment">#   - &quot;5432:5432&quot;</span></span><br></pre></td></tr></table></figure><p>これでホストOSから下記で接続できます。</p><ul><li>ホスト・ポート <code>localhost:5432</code> </li><li>DB名 <code>dify</code></li><li>ユーザ名 <code>postgres</code></li><li>パスワード <code>difyai123456</code></li></ul><p>適当に新しいスキーマを作り、DDLを流します。ここでは例としてスキーマ名 <code>test1</code> に<a href="/articles/20240402a/">前編で例示したDDL</a>を実行した事にして話を進めます。</p><h3 id="レビュー機能を提供するアプリケーションを実装"><a href="#レビュー機能を提供するアプリケーションを実装" class="headerlink" title="レビュー機能を提供するアプリケーションを実装"></a>レビュー機能を提供するアプリケーションを実装</h3><p>「SQL文を受け取り」「実行結果の正否とエラーメッセージを返す」だけの簡単な Web API を備えたアプリケーションを開発します。このIN&#x2F;OUTさえ守っていれば言語やフレームワークは問いませんが、この例では Java の Spring Boot アプリケーションにします。</p><details><summary>pom.xml & Applicationクラス</summary><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rdb-repository<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>rdb-repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jp.co.future<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>uroborosql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.26.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.postgresql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>postgresql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>42.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>RdbRepositoryApplication.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rdbrepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RdbRepositoryApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(RdbRepositoryApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><figure class="highlight java"><figcaption><span>RdbRepositoryController.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/rdb&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RdbRepositoryController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(RdbRepositoryController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sql_review&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlReviewResponse <span class="title function_">sqlReview</span><span class="params">(<span class="meta">@RequestParam</span> String query)</span> &#123;</span><br><span class="line">        <span class="type">SqlConfig</span> <span class="variable">config</span> <span class="operator">=</span> UroboroSQL.builder(<span class="string">&quot;jdbc:postgresql://localhost:5432/dify?currentSchema=test1&quot;</span>, <span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;difyai123456&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">SqlAgent</span> <span class="variable">agent</span> <span class="operator">=</span> config.agent()) &#123;</span><br><span class="line">            agent.queryWith(query).collect(); <span class="comment">// ⛔受け取ったSQL何でも実行するので実験環境以外で真似しない事😱</span></span><br><span class="line">            logger.info(query);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlReviewResponse</span>().setSuccess(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlReviewResponse</span>().setErrorMessage(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@Accessors(chain = true)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SqlReviewResponse</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OpenAPI (Swagger) 準拠のスキーマが必要になります。上の例では <code>dependency</code> に <code>springdoc-openapi-starter-webmvc-ui</code> を加えているのでアプリケーション起動後に <a href="http://localhost:8080/v3/api-docs">http://localhost:8080/v3/api-docs</a> に勝手に生成されています。</p><h3 id="作ったアプリケーションをDifyにツールとして登録"><a href="#作ったアプリケーションをDifyにツールとして登録" class="headerlink" title="作ったアプリケーションをDifyにツールとして登録"></a>作ったアプリケーションをDifyにツールとして登録</h3><p>（先ほど作ったアプリケーションは起動してリクエストを受け付ける状態にしておいてください。）</p><p>画面上部のメニュー右端の<a href="http://localhost/tools?category=api">ツール</a>をクリックし、左上の「カスタムツールを作成する」をクリックします。</p><img src="/images/20240404a/image.png" alt="" width="573" height="143" loading="lazy"><p>名前は適当につけて、APIのスキーマは手動でコピペするか、（Dockerの設定でホスト名 <code>host.docker.internal</code> を有効にしているなら） <a href="http://host.docker.internal:8080/v3/api-docs">http://host.docker.internal:8080/v3/api-docs</a> 等を使ってインポートします。ここで念のためテストして通れば準備OKです。保存してください。</p><img src="/images/20240404a/image_2.png" alt="" width="581" height="694" loading="lazy"><img src="/images/20240404a/image_3.png" alt="" width="450" height="362" loading="lazy"><h3 id="AIアプリケーションを開発"><a href="#AIアプリケーションを開発" class="headerlink" title="AIアプリケーションを開発"></a>AIアプリケーションを開発</h3><p>チュートリアル2と同様、スタジオ→新しいアプリを作成する→アシスタント で新しいアプリケーションを作成し、アシスタントタイプをエージェントアシスタントにします。</p><p>画面中央のツールの「+追加」をクリックし「カスタム」を選択すると、先ほど登録した自作ツールが表示されているので選択して「追加」ボタンをクリックします。</p><img src="/images/20240404a/image_4.png" alt="" width="588" height="228" loading="lazy"><p>「手順」はチュートリアル2の内容に1行追加し、ツールを使うように指示します。変数 <code>&#123;&#123;DDL&#125;&#125;</code> <code>&#123;&#123;DataModelDescriptions&#125;&#125;</code> は前回同様「段落」に変更するのをお忘れなく。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You can behave as an expert of database expert. Provide a clear answer to the main purpose of the order. Omit preamble, phase, and repeating the order.</span><br><span class="line"></span><br><span class="line">DDL:</span><br><span class="line">```</span><br><span class="line">&#123;&#123;DDL&#125;&#125;</span><br><span class="line">```</span><br><span class="line">Data model descriptions:</span><br><span class="line">```</span><br><span class="line">&#123;&#123;DataModelDescriptions&#125;&#125;</span><br><span class="line"></span><br><span class="line">Generated SQL must be validated using the tool `sqlReview`, then respond only with the SQL that passed the inspection.</span><br></pre></td></tr></table></figure><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>チュートリアル2で使用したDDLとデータモデル概要を設定しつつ、「全売上金額を合計するSQL」のようにごく単純な要件でテストすると、ツールを使用してから回答する様子が確認できます。</p><img src="/images/20240404a/image_5.png" alt="" width="436" height="451" loading="lazy"><p>ところが、少し複雑な要求に変更すると途端に回答が破綻します。</p><img src="/images/20240404a/image_6.png" alt="" width="820" height="645" loading="lazy"><p>出力をよく見ると、　<code>&quot;action_input&quot;: &quot; ~ &quot;&#125;</code> の中身が改行付きのSQL文のため、JSONとして破綻しています。 <code>&#123;&quot;action&quot;: $TOOL_NAME, &quot;action_input&quot;: $ACTION_INPUT&#125;</code> の部分が（ReAct方式での）ツール呼び出しのキモなので、この部分に異常があると上手くツールを使用できないようです。</p><p>プロンプトに「SQLは1行に纏めよ」と付け加えれば動作はするのですが……。Function Calling 方式を指定できないモデルでは現状スマートな解決策は無さそうです。 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><img src="/images/20240404a/image_7.png" alt="" width="827" height="259" loading="lazy"><p>さて、SQLのレビューに失敗した場合はどうなるのか？少し意地悪をして、変数 <code>DDL</code> をオプション扱いにして、空欄にして実行してみます。</p><img src="/images/20240404a/image_8.png" alt="" width="608" height="147" loading="lazy"><img src="/images/20240404a/image_9.png" alt="" width="821" height="872" loading="lazy"><p>本来なら「カラム名が分からないから答えられない」と回答させるようコンテキストで誘導するのがベストな場面ではありますが、ともあれこれでセルフレビューによりAIが試行錯誤する様子を確認できました。</p><h3 id="このツールの改善アイデア"><a href="#このツールの改善アイデア" class="headerlink" title="このツールの改善アイデア"></a>このツールの改善アイデア</h3><p>ここまでの試行の延長として、レビューの質を高めるために例えば次のようなアイデアが挙げられます。よければチャレンジしてみてください。</p><ul><li>生成されたSQLのSELECT結果を返して「要件通りの検索結果が全パターン・全カラム抽出できたか」「算出項目の数値が期待値通りか」を検証させる</li><li>実行計画を返して「最大のパフォーマンスが出る結合順序・条件を指定できたか」を考えさせる</li></ul><p>また、折角生成AIの領域とプログラマブルな領域に接点が出来たのだから、生成AIから自作プログラムが呼ばれた時のパラメータとそれへの返り値をDBに登録して、「どんな要求を受けた時にどんなSQLが生成されて、それがどう成功(or失敗)したか」を記録する事で後々分析したりAIの教育データとして使うといった事も考えられます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Dify を使ってノーコードで生成AIを使ったアプリケーションを開発する方法と、従来型のアプリケーションとの連携方法について入門する所までご紹介してきました。入門とは言えある程度までの規模の問題解決の手段としては充分実用レベルになると思います。</p><p>が、これを例えばエンタープライズシステム開発など大規模な領域で活用しようと思うとすぐさま「膨大なデータモデルや業務要件を全て詰め込むとコンテキストが飽和する・トークン数が爆発する」といった問題に突き当たります。</p><p>RAG（ユーザが入力したプロンプトをAIに投げる前に、関連する情報を抜粋し追記してから生成AIに中継する仕組み）やモデル自体の追加学習によって解決するアプローチもありますがそれはまた別のお話で。</p><p>ちなみにただ”RAGとやらを作って使ってみたい”だけであれば Dify では画面上部メニューの「ナレッジ」で作成してアプリ側で「コンテキスト」に追加してやるだけなのですぐにでもできます。RAGの品質を問わなければの話ですが…今回はここまでです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">4月5日に、GPT の Function Calling に相当する機能 &quot;Tool&quot; が Claude に追加されました。 Dify も当日中(!)に対応しました。4月6日現在、まだバージョン付けされた Docker イメージは有りませんが、 <code>docker-compose.yaml</code> で <code>api</code>,<code>worker</code>,<code>web</code> の <code>image</code> のタグの部分を <code>main</code> にすれば一応動作確認はできますので自己責任でどうぞ。複数行に跨るSQLもちゃんとツールに渡されてますね！ <img src="/images/20240404a/image_10.png" alt="" width="759" height="446" loading="lazy"></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Java/">Java</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%8E%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89/">ノーコード</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%94%9F%E6%88%90AI/">生成AI</category>
      
      <category domain="https://future-architect.github.io/tags/Dify/">Dify</category>
      
      <category domain="https://future-architect.github.io/tags/Anthropic-Claude/">Anthropic Claude</category>
      
      
      <comments>https://future-architect.github.io/articles/20240404a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>技育祭2024春で「2064年もITで仕事し続けるためのキャリアプラン」というタイトルで発表してきました。</title>
      <link>https://future-architect.github.io/articles/20240403a/</link>
      <guid>https://future-architect.github.io/articles/20240403a/</guid>
      <pubDate>Tue, 02 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240403a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240403a/top.png" alt="" width="800" height="441"><p>技育祭はサポーターズが実施している未来の「技」術者を「育」てる活動としている学生向けの「技育プロジェクト」の一大イベントです。僕自身も何度かかかわっているイベントで、先日開催された2024年3月17日に開催された「技育祭2024春」で登壇してきました。発表資料はこちらになります。</p><iframe src="https://www.slideshare.net/slideshow/embed_code/key/1vsRjQlfzzpNfo?hostedIn=slideshare&page=upload" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe><p>タイトルの2064年というのは、技育祭で一番ボリュームゾーンだと思われる20歳ぐらいの学部2年、3年の若者が60歳定年まで働くとしたら、という年ですね。AIでIT技術者がいらなくなる、みたいな話がよくされていますが、AI以前に優秀すぎる若者が周りにいっぱい増えてきて、ずっと前から危機感を感じていた40代のおっさんのキャリアプランをテーマに今回は講演を行いました。</p><p>私は今後AIの革新的発展によってプログラマーの人数が半分になるとしても、上から半分に入っていれば生き残れるだろうという打算のもと、技術力の向上や、プログラマーとしての市場価値を向上させていく、そしてそれを見える化する、というのが基本戦略としてやっています。今回の発表では時間もなかったので割愛しましたが書籍執筆もそのための一手です。本を書く、というのをここしばらくは年に2冊ぐらい継続しています。これに関する説明を一枠しゃべったときの、2021年の技育祭の資料も張っておきますね。</p><iframe src="https://www.slideshare.net/slideshow/embed_code/key/EjKVxpJUE56bPZ?hostedIn=slideshare&page=upload" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe><p>今回のイベントでは自分と聴講者層の大学生の年齢差が大きくなってきたということで、まさに技育祭でフューチャーを知って入ってくれた若手の大岩さんにもアシスタントとして参加してもらいました。親子といっても嘘じゃないぐらい年齢差があっても仲良く仕事しているというのも伝わればいいな、というのもちょっぴり思っていましたがいかがでしたでしょうか？大岩さんとは、技術広報として、会社の魅力を外に伝えていくにはどうすればよいのか？という課外活動を一緒にやっています。</p><h1 id="質疑応答"><a href="#質疑応答" class="headerlink" title="質疑応答"></a>質疑応答</h1><h2 id="Q-IT職は人気なのに人手不足なのはどうしてでしょうか？"><a href="#Q-IT職は人気なのに人手不足なのはどうしてでしょうか？" class="headerlink" title="Q: IT職は人気なのに人手不足なのはどうしてでしょうか？"></a>Q: IT職は人気なのに人手不足なのはどうしてでしょうか？</h2><p>みんなIT力を高めてビジネスを強くしたいと思って、たくさん人が欲しいので、需要がすごく増えています。</p><h2 id="Q-早く一人前にならなければという危機感があるが一人前になるというのはどういうことか？"><a href="#Q-早く一人前にならなければという危機感があるが一人前になるというのはどういうことか？" class="headerlink" title="Q: 早く一人前にならなければという危機感があるが一人前になるというのはどういうことか？"></a>Q: 早く一人前にならなければという危機感があるが一人前になるというのはどういうことか？</h2><p>言われたことができる→自発的にできる→自分より若手をリードしつつできる→自分から道を切り開ける</p><p>というのが思っていることで、実際にフューチャーのランクアップ要件もこんな感じ。フューチャーは年功序列ではないので、これができている若者は年齢関係なくじゃんじゃんランクアップしていますね。</p><h2 id="Q-ITコンサルは-要件定義など人と関わる部分がメインで開発に携わることが少ないと考えているのですが-いかがですか"><a href="#Q-ITコンサルは-要件定義など人と関わる部分がメインで開発に携わることが少ないと考えているのですが-いかがですか" class="headerlink" title="Q: ITコンサルは, 要件定義など人と関わる部分がメインで開発に携わることが少ないと考えているのですが, いかがですか?"></a>Q: ITコンサルは, 要件定義など人と関わる部分がメインで開発に携わることが少ないと考えているのですが, いかがですか?</h2><p>会社にもよると思いますが、フューチャーは一次受けで、お客さんとグランドデザイン策定から要件定義、実装、運用まで一気通貫でやる会社なので、実装とかもよくやっています。</p><h2 id="Q-現状未経験の人がこれから勉強を始める場合まず何から始めるべきでしょうか？"><a href="#Q-現状未経験の人がこれから勉強を始める場合まず何から始めるべきでしょうか？" class="headerlink" title="Q: 現状未経験の人がこれから勉強を始める場合まず何から始めるべきでしょうか？"></a>Q: 現状未経験の人がこれから勉強を始める場合まず何から始めるべきでしょうか？</h2><p>フューチャーは大学時代にITをやっていなかった学生も新卒で入っています。新入社員研修をきちんと行ってその後エンジニアとして活躍している社員も多いです。キャリアパスは自分で選べるので、学んだ上でお客さんと話をするのをメインとして選ぶ人もいますが。</p><p>そういうきちんと鍛えてくれる会社に入るのが良いと思います。でも、どうすれば入れるか、各社がどういう人材を求めているかは各社ばらばらなので「こうすれば大丈夫！」という正解はちょっとわからないですね。</p><h2 id="Q-他の方が「泥臭くても、コツコツ、貪欲にやる」が良いという旨の話をよくしているのですが、渋川さんもそう思いますか？"><a href="#Q-他の方が「泥臭くても、コツコツ、貪欲にやる」が良いという旨の話をよくしているのですが、渋川さんもそう思いますか？" class="headerlink" title="Q: 他の方が「泥臭くても、コツコツ、貪欲にやる」が良いという旨の話をよくしているのですが、渋川さんもそう思いますか？"></a>Q: 他の方が「泥臭くても、コツコツ、貪欲にやる」が良いという旨の話をよくしているのですが、渋川さんもそう思いますか？</h2><p>そう思います。といっても、同じ仕事を10年やり続けるとかそういうのはいらないと思います。学生のうちは「こんなことしたい」とキラキラした仕事をやりたいと思うかもしれないですが、自分が想像もしていない仕事が上から降ってきたりします。でもそういう未知だったものこそ、自分が知らないものがたくさんあって実力を伸ばすチャンスにつながるかもしれない。あらかじめ見えていた目線というのは実はそこまで広くなかった、ということは十分にある。目の前に来た仕事にまずは全力で取り組んでみるというのは大切。</p><h1 id="質疑応答の残りや拾ったコメント"><a href="#質疑応答の残りや拾ったコメント" class="headerlink" title="質疑応答の残りや拾ったコメント"></a>質疑応答の残りや拾ったコメント</h1><h2 id="ドメイン知識も若い人はすぐ追いつくと思う"><a href="#ドメイン知識も若い人はすぐ追いつくと思う" class="headerlink" title="ドメイン知識も若い人はすぐ追いつくと思う"></a>ドメイン知識も若い人はすぐ追いつくと思う</h2><p>ドメイン知識って教科書的に資料としてまとまっていたりはしないんですよね。お客さんもたくさんの部署に分かれていて、それぞれの領域で仕事をしている。それぞれの領域の中の「常識」をつなげていくと知識体系が現れる。あとは既存のシステムの中にソースコードとして書かれた知識もある。利用者はボタンを押す方法だけ知っているがコアの知識はコード解析しないとわからなかったり。今後はこういうシステム考古学がますます重要になってくるかと思います。</p><p>こういうたくさんの情報を引っ張って集める社会学的な活動を毎回やって初めて知識として取り出せるのですが、その知識の取り出し方、実際に取り出した知識（業界ごとではなく会社ごと、部署ごとに違ったりする）もあるので、学ぶのはだれがやっても大変かと思います。</p><h2 id="自分の得た知識は自分のもの！誰にも公開しない！でも他の人からは情報はもらう！って感じのエンジニアを学生の中に時々みるのですが、自分が長い時間を掛けて得た知識を本で共有するにあたってそのような考えにはならないのでしょうか？"><a href="#自分の得た知識は自分のもの！誰にも公開しない！でも他の人からは情報はもらう！って感じのエンジニアを学生の中に時々みるのですが、自分が長い時間を掛けて得た知識を本で共有するにあたってそのような考えにはならないのでしょうか？" class="headerlink" title="自分の得た知識は自分のもの！誰にも公開しない！でも他の人からは情報はもらう！って感じのエンジニアを学生の中に時々みるのですが、自分が長い時間を掛けて得た知識を本で共有するにあたってそのような考えにはならないのでしょうか？"></a>自分の得た知識は自分のもの！誰にも公開しない！でも他の人からは情報はもらう！って感じのエンジニアを学生の中に時々みるのですが、自分が長い時間を掛けて得た知識を本で共有するにあたってそのような考えにはならないのでしょうか？</h2><p>それで知識を持っていても、外からはどれだけの情報を持っていることが分からないので、結果として本人の魅力アップにはなっていないと思います。あと、自分が手を動かして作業者として仕事するのよりも、回りを導いて組織として成功できる方が社会としては必要とされます。ICよりもマネージャー採用しにくい問題。</p><h2 id="基幹システムって具体的にはどういうものですか？イメージ湧かなくて・・・"><a href="#基幹システムって具体的にはどういうものですか？イメージ湧かなくて・・・" class="headerlink" title="基幹システムって具体的にはどういうものですか？イメージ湧かなくて・・・"></a>基幹システムって具体的にはどういうものですか？イメージ湧かなくて・・・</h2><p>その会社のビジネスの根幹をささえるシステムですね。小売りなら商品を管理して売り上げを集計するなど。</p><h2 id="早いうちに一人前になるような人は外向性の高さやフットワークの軽さなどどのような特性がありますか？"><a href="#早いうちに一人前になるような人は外向性の高さやフットワークの軽さなどどのような特性がありますか？" class="headerlink" title="早いうちに一人前になるような人は外向性の高さやフットワークの軽さなどどのような特性がありますか？"></a>早いうちに一人前になるような人は外向性の高さやフットワークの軽さなどどのような特性がありますか？</h2><p>どちらかというと、求められていることをきちんと把握してやりきるための段取り力ですかねぇ。もちろん、ステージやその時のプロジェクトの状況によって必要な能力とかあるとうれしい能力は変わってくると思いますが。</p><h2 id="支援士のような資格がある人とCTF経験が豊富な人とではどちらの方が需要ありますか"><a href="#支援士のような資格がある人とCTF経験が豊富な人とではどちらの方が需要ありますか" class="headerlink" title="支援士のような資格がある人とCTF経験が豊富な人とではどちらの方が需要ありますか"></a>支援士のような資格がある人とCTF経験が豊富な人とではどちらの方が需要ありますか</h2><p>セキュリティ系ですかね？セキュリティ系はかなりタレント性が強い仕事もあったりするので一般化はしにくいですね。元フューチャーで海外からオファーが来て転職していった若者もいましたし。フューチャーにもセキュリティ特化のグループ会社DITとかフューチャー社内のセキュリティ部門のCSIGがあるので、興味がある方はカジュアル面談を申し込んでいただけると、中の人が事例とかどういうスキルが必要とされているかとかお話できるかと思います。</p><h2 id="失礼なことを聞くようで申し訳ないのですが、フューチャー株式会社は年収どこまで伸ばせますか？"><a href="#失礼なことを聞くようで申し訳ないのですが、フューチャー株式会社は年収どこまで伸ばせますか？" class="headerlink" title="失礼なことを聞くようで申し訳ないのですが、フューチャー株式会社は年収どこまで伸ばせますか？"></a>失礼なことを聞くようで申し訳ないのですが、フューチャー株式会社は年収どこまで伸ばせますか？</h2><p>おっと、それ聞いちゃいます？転職のときにもがっと上がったけど、入ったあともがっがっと上がっています。技育イベントは公開イベントですので、そのあたりはもうちょっとクローズドなフューチャーのイベントで社員の人にぶつけてもらえればと思います。</p><p>年収は能力というか入った会社次第なところがありますが、一般的な傾向としてはきちんと利益を上げていく、業績を伸ばし続けていたり安定している会社が延ばしやすいと思います。</p><p>就活対策で会社が公開しているプレスリリースはきちんと目を通した方が良いですよ、というお話はしましたが、決算資料の数値も見ておくと良いかと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%8A%80%E8%82%B2%E7%A5%AD/">技育祭</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%AD%E3%83%A3%E3%83%AA%E3%82%A2/">キャリア</category>
      
      
      <comments>https://future-architect.github.io/articles/20240403a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Difyで生成AIアプリケーション入門　前編：生成AIアプリケーションをノーコードで開発</title>
      <link>https://future-architect.github.io/articles/20240402a/</link>
      <guid>https://future-architect.github.io/articles/20240402a/</guid>
      <pubDate>Mon, 01 Apr 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://dify.ai/&quot;&gt;Dify&lt;/a&gt; （DeFiではない）と &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p><a href="https://dify.ai/">Dify</a> （DeFiではない）と <a href="https://console.anthropic.com/dashboard">Anthropic Claude</a> （OpenAI でも OpenRouter 経由の何かでもOK）を使って簡単に生成AIアプリケーションを構築する方法をご紹介します。</p><ul><li>前編：ノーコードで生成AIアプリケーションを構築するチュートリアル</li><li><a href="/articles/20240404a/">後編</a>：自作プログラムで機能追加して生成AIの指向性と精度を高めるサンプル</li></ul><p>の2本立ての予定です。</p><h3 id="対象読者"><a href="#対象読者" class="headerlink" title="対象読者"></a>対象読者</h3><ul><li>生成AIに興味があるがまだチャット以上の利用法を見出せず手を出せていない方</li><li>お試しに手軽に生成AIアプリケーションを構築してみたい方</li><li>特にOpenAIに月額費用に躊躇っている方</li></ul><h3 id="前提知識・環境"><a href="#前提知識・環境" class="headerlink" title="前提知識・環境"></a>前提知識・環境</h3><ul><li>Docker (Docker Compose)。Windows なら Docker Desktop。後編ではホスト名 <code>host.docker.internal</code> を使用します</li><li>“時々生成AIをチャットで活用している”程度のプロンプト操作の知識</li></ul><h3 id="取り上げない話題"><a href="#取り上げない話題" class="headerlink" title="取り上げない話題"></a>取り上げない話題</h3><p>何が実現可能になるかを示唆する事にフォーカスするので、手段は深堀しません。例えばRAGには触れません。</p><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>Anthropic API のAPIキーを取得し、Difyをローカルで起動します。</p><p>サービスとして提供されている <a href="https://dify.ai/">https://dify.ai/</a> を使ってもいいですが、APIキーを預けるのは何となく不安なので＆後編で便利なのでローカルで話を進めます。</p><h3 id="Anthropic-API-でAPIキー取得"><a href="#Anthropic-API-でAPIキー取得" class="headerlink" title="Anthropic API でAPIキー取得"></a>Anthropic API でAPIキー取得</h3><p><a href="https://console.anthropic.com/settings/plans">https://console.anthropic.com/settings/plans</a> で電話番号認証後の初回だけ5ドル分の無料お試し枠が貰えます。既に OpenAI や OpenRouter に課金されている方はそちらでも良いですが以下でモデルを指定する箇所では適宜読み替えてください。</p><p>モデルによりトークン当たりのクレジットの消費量が異なりますが、コスト軸での選択の目安は以下の通りです。</p><ul><li>Haiku：ガンガン使っても殆ど減らないので感触を探る間は当面これで</li><li>Sonnet：試行錯誤していると目に見えて減っていくので残高注意</li><li>Opus：ごっそり減るのでお試し中の常用は非推奨。比較検証したい時のワンポイントで</li></ul><p>もうAnthropicの無料枠を消化してしまった人は <a href="https://openrouter.ai/">https://openrouter.ai/</a> が使えるかもしれません。入金しなくても謎に0.2ドル程度をタダで使わせてくれたり、仮想通貨（PolygonネットワークのUSDC）決済が出来たりします。</p><h3 id="Difyセットアップ"><a href="#Difyセットアップ" class="headerlink" title="Difyセットアップ"></a>Difyセットアップ</h3><h4 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h4><p><code>git clone https://github.com/langgenius/dify</code> するか、<a href="https://github.com/langgenius/dify/tree/main/docker">https://github.com/langgenius/dify/tree/main/docker</a> の <code>docker-compose.yaml</code> と <code>nginx</code> ディレクトリをダウンロードして、 <code>docker-compose.yaml</code> のある場所で <code>docker compose up -d</code> します。</p><p>実行時のディレクトリ直下にボリュームディレクトリ <code>volumes</code> が作成されます。</p><p>nginx がポート <code>80</code> で起動するので空けておくか <code>services.nginx.ports</code> を適当な値に変えてください。</p><h4 id="初期設定"><a href="#初期設定" class="headerlink" title="初期設定"></a>初期設定</h4><p><a href="http://localhost/">http://localhost/</a> にアクセスすると初回は「管理者アカウントの設定」画面が表示されます。メールアドレスは適当な値で大丈夫ですが次のサインイン画面で使うので何を入れたかは忘れないでください。<br>言語設定は日本語のままでもあまり不自由しませんが、ところどころ未翻訳のテキストが空欄で表示されたり <code>undefined</code> になったりしてしまうので出来れば英語の方がお勧めです。</p><p>サインインしたら、右上のアカウント名をクリックして設定→モデルプロバイダー→Anthropicにマウスオーバーしてセットアップ、と進んでAPIキーを入力します。そのままだとシステムモデルに Claude 3 Opus が使われてしまうので Haiku を選択します。寄稿時点では <code>claude-3-haiku-20240307</code> というモデル名でした。ここでClaudeシリーズが選択できない場合は何かしらエラーが発生しています。原因が分からなければAPIキーを再発行＆再入力してください。</p><img src="/images/20240402a/image.png" alt="" width="891" height="530" loading="lazy"><p>ちなみに OpenRouter を使用するなどして OpenAI 互換のモデルを使用する場合は一番下の <code>Model providers compatible with OpenAI&#39;s API standard, such as LM Studio.</code> で使用できます。が、恐らくDifyの不具合でそれだけではモデルとして使用可能になりません。一度保存したモデル情報を開いて保存しなおすと使用可能になります。</p><h2 id="チュートリアル1：シンプルな生成AIチャットbot"><a href="#チュートリアル1：シンプルな生成AIチャットbot" class="headerlink" title="チュートリアル1：シンプルな生成AIチャットbot"></a>チュートリアル1：シンプルな生成AIチャットbot</h2><p>特定のテーブル定義に対して特化したSQLを生成するチャットbotを作ってみましょう。</p><h3 id="開発"><a href="#開発" class="headerlink" title="開発"></a>開発</h3><ol><li>画面上部の<a href="">スタジオ</a>→新しいアプリを作成する、をクリック。タイプにアシスタントを選択し、適当な名前を付けます。後から変更可能です。（実はおなじみのAIチャットとして使うだけならここまでで完成してしまっています）</li><li>画面左の「手順」に以下を入力します。フォーカスを外すと変数追加をリコメンドしてくれます。追加後このままだと短文しか入力できないので両方 ⚙ で「段落」に変更します。</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">You can behave as an expert of database expert. Provide a clear answer to the main purpose of the order. Omit preamble, phase, and repeating the order.</span><br><span class="line"></span><br><span class="line">DDL:</span><br><span class="line">```</span><br><span class="line">&#123;&#123;DDL&#125;&#125;</span><br><span class="line">```</span><br><span class="line">Data model descriptions:</span><br><span class="line">```</span><br><span class="line">&#123;&#123;DataModelDescriptions&#125;&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><img src="/images/20240402a/image_2.png" alt="" width="873" height="321" loading="lazy"><img src="/images/20240402a/image_3.png" alt="" width="768" height="465" loading="lazy"><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><ol><li>ここで画面右上の「公開」をクリックしてください。しなくても動作確認は出来ますが、変更が保存されていません。実はこの時点で完成したアプリケーションとして公開されてしまいますが、これ以外に開発中のアプリケーションを保存する方法が見当たりませんでした。</li><li><code>DDL</code> に <code>CREATE TABLE ~</code> などのDDLを貼り付けてください。<br><code>DataModelDescriptions</code> に各テーブルの内容や結合方式などについての説明文を貼り付けてください。必須ではありませんがこれが無いとAIはすぐ存在しないカラムの幻覚を見始めるので強く推奨します。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><br>（ここで入力した値は永続化されないので、何度も使い回す用に自分でテキストファイルにでも貼り付けて保存しておきましょう）</li><li>画面右下に薄っすらと入力欄が有るのでそこにSQL生成を依頼するプロンプトを入力してください。</li><li>速い安い旨いの Haiku でも3，4テーブル程度の結合・集約なども結構な高精度で生成してくれます。</li></ol><img src="/images/20240402a/image_4.png" alt="" width="914" height="862" loading="lazy"><p>参考までに私が使用した変数の値を下記に貼り付けておきます。少し実務みのある区分値やリレーションを設定してあります。</p><details><summary>DDL</summary><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Project Name : retail</span></span><br><span class="line"><span class="comment">-- Date/Time    : 2024/03/22 金 22:25:09</span></span><br><span class="line"><span class="comment">-- Author       : </span></span><br><span class="line"><span class="comment">-- RDBMS Type   : PostgreSQL</span></span><br><span class="line"><span class="comment">-- Application  : A5:SQL Mk-2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  &lt;&lt; 注意！！ &gt;&gt;</span></span><br><span class="line"><span class="comment">  BackupToTempTable, RestoreFromTempTable疑似命令が付加されています。</span></span><br><span class="line"><span class="comment">  これにより、drop table, create table 後もデータが残ります。</span></span><br><span class="line"><span class="comment">  この機能は一時的に $$TableName のような一時テーブルを作成します。</span></span><br><span class="line"><span class="comment">  この機能は A5:SQL Mk-2でのみ有効であることに注意してください。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 売上</span></span><br><span class="line"><span class="comment">-- * BackupToTempTable</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> sale cascade;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- * RestoreFromTempTable</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sale (</span><br><span class="line">  id <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , palce_id <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , product_id <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , selling_price_ID <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , business_date <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , sales_at <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , transfer_id <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , discount_amount <span class="type">integer</span></span><br><span class="line">  , sales_amount <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , <span class="keyword">constraint</span> sale_PKC <span class="keyword">primary</span> key (id)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 移動</span></span><br><span class="line"><span class="comment">-- * BackupToTempTable</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> transfer cascade;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- * RestoreFromTempTable</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> transfer (</span><br><span class="line">  id <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , place_id <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , product_id <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , business_date <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , transfer_at <span class="type">timestamp</span></span><br><span class="line">  , transfer_classification <span class="type">character</span> <span class="type">varying</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , transfer_quantity <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , transfer_destination_classification <span class="type">character</span> <span class="type">varying</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , transfer_destination_place_id <span class="type">integer</span></span><br><span class="line">  , <span class="keyword">constraint</span> transfer_PKC <span class="keyword">primary</span> key (id)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在庫</span></span><br><span class="line"><span class="comment">-- * BackupToTempTable</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> stock cascade;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- * RestoreFromTempTable</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stock (</span><br><span class="line">  place_id <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , product_id <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , business_date <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , stock_quantity <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , <span class="keyword">constraint</span> stock_PKC <span class="keyword">primary</span> key (place_id,product_id,business_date)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index stock_IX1</span><br><span class="line">  <span class="keyword">on</span> stock(product_id,business_date);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 売価</span></span><br><span class="line"><span class="comment">-- * BackupToTempTable</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> selling_price cascade;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- * RestoreFromTempTable</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> selling_price (</span><br><span class="line">  id <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , product_id <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , selling_price_classification <span class="type">character</span> <span class="type">varying</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , start_date <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , end_date <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , selling_price <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , <span class="keyword">constraint</span> selling_price_PKC <span class="keyword">primary</span> key (id)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index selling_price_IX1</span><br><span class="line">  <span class="keyword">on</span> selling_price(product_id,selling_price_classification);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 場所</span></span><br><span class="line"><span class="comment">-- * BackupToTempTable</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> place cascade;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- * RestoreFromTempTable</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> place (</span><br><span class="line">  id <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , place_name <span class="type">character</span> <span class="type">varying</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , selling_price_classification <span class="type">character</span> <span class="type">varying</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , <span class="keyword">constraint</span> place_PKC <span class="keyword">primary</span> key (id)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 商品</span></span><br><span class="line"><span class="comment">-- * BackupToTempTable</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> product cascade;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- * RestoreFromTempTable</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product (</span><br><span class="line">  id <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , product_name <span class="type">character</span> <span class="type">varying</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , <span class="keyword">constraint</span> product_PKC <span class="keyword">primary</span> key (id)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">table</span> sale <span class="keyword">is</span> <span class="string">&#x27;売上&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> sale.id <span class="keyword">is</span> <span class="string">&#x27;ID&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> sale.palce_id <span class="keyword">is</span> <span class="string">&#x27;場所ID&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> sale.product_id <span class="keyword">is</span> <span class="string">&#x27;商品ID&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> sale.selling_price_ID <span class="keyword">is</span> <span class="string">&#x27;売価ID&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> sale.business_date <span class="keyword">is</span> <span class="string">&#x27;業務日付&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> sale.sales_at <span class="keyword">is</span> <span class="string">&#x27;売上日時&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> sale.transfer_id <span class="keyword">is</span> <span class="string">&#x27;入出荷ID&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> sale.discount_amount <span class="keyword">is</span> <span class="string">&#x27;値引額&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> sale.sales_amount <span class="keyword">is</span> <span class="string">&#x27;売上金額&#x27;</span>;</span><br><span class="line"></span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">table</span> transfer <span class="keyword">is</span> <span class="string">&#x27;移動&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> transfer.id <span class="keyword">is</span> <span class="string">&#x27;ID&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> transfer.place_id <span class="keyword">is</span> <span class="string">&#x27;場所ID&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> transfer.product_id <span class="keyword">is</span> <span class="string">&#x27;商品ID&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> transfer.business_date <span class="keyword">is</span> <span class="string">&#x27;業務日付&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> transfer.transfer_at <span class="keyword">is</span> <span class="string">&#x27;移動日時&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> transfer.transfer_classification <span class="keyword">is</span> <span class="string">&#x27;入出荷区分:1:入荷、2:出荷&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> transfer.transfer_quantity <span class="keyword">is</span> <span class="string">&#x27;移動数&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> transfer.transfer_destination_classification <span class="keyword">is</span> <span class="string">&#x27;移動先区分:1:場所間移動、2:売上、3:仕入&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> transfer.transfer_destination_place_id <span class="keyword">is</span> <span class="string">&#x27;移動先場所ID&#x27;</span>;</span><br><span class="line"></span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">table</span> stock <span class="keyword">is</span> <span class="string">&#x27;在庫&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> stock.place_id <span class="keyword">is</span> <span class="string">&#x27;場所ID&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> stock.product_id <span class="keyword">is</span> <span class="string">&#x27;商品ID&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> stock.business_date <span class="keyword">is</span> <span class="string">&#x27;業務日付&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> stock.stock_quantity <span class="keyword">is</span> <span class="string">&#x27;在庫数&#x27;</span>;</span><br><span class="line"></span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">table</span> selling_price <span class="keyword">is</span> <span class="string">&#x27;売価&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> selling_price.id <span class="keyword">is</span> <span class="string">&#x27;ID&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> selling_price.product_id <span class="keyword">is</span> <span class="string">&#x27;商品ID&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> selling_price.selling_price_classification <span class="keyword">is</span> <span class="string">&#x27;売価区分:区分値： 1:プロパー, 2:B品, 3:アウトレット, 4:催事&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> selling_price.start_date <span class="keyword">is</span> <span class="string">&#x27;適用開始日&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> selling_price.end_date <span class="keyword">is</span> <span class="string">&#x27;適用終了日&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> selling_price.selling_price <span class="keyword">is</span> <span class="string">&#x27;売価&#x27;</span>;</span><br><span class="line"></span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">table</span> place <span class="keyword">is</span> <span class="string">&#x27;場所&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> place.id <span class="keyword">is</span> <span class="string">&#x27;ID&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> place.place_name <span class="keyword">is</span> <span class="string">&#x27;場所名&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> place.selling_price_classification <span class="keyword">is</span> <span class="string">&#x27;売価区分:区分値： 1:プロパー, 2:B品, 3:アウトレット, 4:催事&#x27;</span>;</span><br><span class="line"></span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">table</span> product <span class="keyword">is</span> <span class="string">&#x27;商品&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> product.id <span class="keyword">is</span> <span class="string">&#x27;ID&#x27;</span>;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> product.product_name <span class="keyword">is</span> <span class="string">&#x27;商品名&#x27;</span>;</span><br></pre></td></tr></table></figure></details><details><summary>Data Model Descriptions</summary><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># データモデル概要</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 売価テーブル ( `selling<span class="emphasis">_price` )</span></span></span><br><span class="line"><span class="emphasis"><span class="section"></span></span></span><br><span class="line"><span class="emphasis"><span class="section">* 売価は商品別・売価区分別・業務日付別に登録される。但し業務日付は日々ではなく開始日～終了日の範囲指定で登録される。</span></span></span><br><span class="line"><span class="emphasis"><span class="section">* 売価区分にはプロパー・B品・アウトレット・催事の4種類がある。つまり商品ごとに最大で4つの売価が設定されうる。</span></span></span><br><span class="line"><span class="emphasis"><span class="section">* 売価区分の定義は以下の通り。</span></span></span><br><span class="line"><span class="emphasis"><span class="section">  </span></span></span><br><span class="line"><span class="emphasis"><span class="section">| 売価区分 | 意味 |</span></span></span><br><span class="line"><span class="emphasis"><span class="section">| - | - |</span></span></span><br><span class="line"><span class="emphasis"><span class="section">| プロパー | 発売当初の定価 |</span></span></span><br><span class="line"><span class="emphasis"><span class="section">| B品 | 傷物など、商品個体の不具合により販売場所（以下「売場」と呼ぶ）の判断で値下げを要する場合の売価 |</span></span></span><br><span class="line"><span class="emphasis"><span class="section">| アウトレット | 商品のターゲットシーズンを過ぎて値下げした後の売価 |</span></span></span><br><span class="line"><span class="emphasis"><span class="section">| 催事 | 催事場で使用される特別売価 |</span></span></span><br><span class="line"><span class="emphasis"><span class="section"></span></span></span><br><span class="line"><span class="emphasis"><span class="section">## 場所テーブル( `place` )</span></span></span><br><span class="line"><span class="emphasis"><span class="section"></span></span></span><br><span class="line"><span class="emphasis"><span class="section">* 場所テーブルには場所の名前と標準の売価区分が登録されている。</span></span></span><br><span class="line"><span class="emphasis"><span class="section">* 場所に設定されている売価区分によって、その場所で発生しうる売上の売価区分が制限される。組み合わせは以下の通り。</span></span></span><br><span class="line"><span class="emphasis"><span class="section"> </span></span></span><br><span class="line"><span class="emphasis"><span class="section">| 場所の売価区分 | 売上として発生しうる売価区分 |</span></span></span><br><span class="line"><span class="emphasis"><span class="section">| - | - |</span></span></span><br><span class="line"><span class="emphasis"><span class="section">| プロパー | プロパー・B品・アウトレット |</span></span></span><br><span class="line"><span class="emphasis"><span class="section">| アウトレット | プロパー・B品・アウトレット |</span></span></span><br><span class="line"><span class="emphasis"><span class="section">| 催事 | プロパー・催事 |</span></span></span><br><span class="line"><span class="emphasis"><span class="section"></span></span></span><br><span class="line"><span class="emphasis"><span class="section">* 場所の売価区分としてB品は選択できない。</span></span></span><br><span class="line"><span class="emphasis"><span class="section"></span></span></span><br><span class="line"><span class="emphasis"><span class="section">## 移動テーブル( `transfer` )</span></span></span><br><span class="line"><span class="emphasis"><span class="section"></span></span></span><br><span class="line"><span class="emphasis"><span class="section">* 移動テーブルにはある場所で発生した商品の入出荷情報が全て登録される。仕入による入荷、販売による出荷、場所間での移動による入荷/出荷など。</span></span></span><br><span class="line"><span class="emphasis"><span class="section">* 場所間で発生した移動の場合、</span></span></span><br><span class="line"><span class="emphasis"><span class="section">  * 移動元の場所において出荷、移動先の場所において入荷のレコードが登録される。互いのレコードの移動数は一致する。</span></span></span><br><span class="line"><span class="emphasis"><span class="section">  * 移動先場所IDカラムに移動先の場所IDが登録される。</span></span></span><br><span class="line"><span class="emphasis"><span class="section"></span></span></span><br><span class="line"><span class="emphasis"><span class="section">## 在庫テーブル( `stock` )</span></span></span><br><span class="line"><span class="emphasis"><span class="section"></span></span></span><br><span class="line"><span class="emphasis"><span class="section">* 在庫テーブルには日々の当初の場所別・商品別の在庫数が記録される。</span></span></span><br><span class="line"><span class="emphasis"><span class="section">* 移動テーブルに全ての入出荷情報が登録されているため、ある日の在庫レコードの在庫数は `前日の在庫レコードの在庫数 + 前日の移動テーブルの入荷分の移動数の合計 - 前日の移動テーブルの出荷分の移動数の合計` と一致する。</span></span></span><br><span class="line"><span class="emphasis"><span class="section"></span></span></span><br><span class="line"><span class="emphasis"><span class="section">## 売上テーブル( `sale` )</span></span></span><br><span class="line"><span class="emphasis"><span class="section"></span></span></span><br><span class="line"><span class="emphasis"><span class="section">* 売上テーブルには場所別・商品別・売価別の売上情報が登録される。</span></span></span><br><span class="line"><span class="emphasis"><span class="section">* 売上の登録に際して必要な入力値は場所ID・商品ID・売価区分・売上数・値引額の4個。</span></span></span><br><span class="line"><span class="emphasis"><span class="section">* 売上数は売上テーブル上では管理しない。売上の発生に伴い移動テーブルに入出荷区分：出荷、移動先区分：売上、移動数：売上数のレコードが登録される。そのレコードのIDが売上レコードの移動IDカラムに保持される。</span></span></span><br><span class="line"><span class="emphasis"><span class="section">* 売価区分は売上を登録する時点で任意に選択される。</span></span></span><br><span class="line"><span class="emphasis"><span class="section">  * 但し、その売場に該当する場所テーブル上の売価区分の設定値により、取り得る売価区分は制限される。詳細は場所テーブルの項を参照。</span></span></span><br><span class="line"><span class="emphasis"><span class="section">* 販売した商品の売上金額は、登録時の入力値に従って次のように計算されて登録される: `売価 * 移動数 - 値引額`</span></span></span><br><span class="line"><span class="emphasis"><span class="section">* 売価は売価テーブルより `適用開始日 &lt;= 業務日付 &lt;= 適用終了日` の条件で取得する。</span></span></span><br></pre></td></tr></table></figure></details><p>プロンプト：「売上金額と売上数を場所別・商品別・月別に集計するSQL」</p><h3 id="アプリケーション公開"><a href="#アプリケーション公開" class="headerlink" title="アプリケーション公開"></a>アプリケーション公開</h3><p>ここまでの操作で（公開をクリックした時点で）既にDify上で動作するアプリケーションが完成し公開されています。<br>画面左のメニューで「概要」で下記の画面が表示されます。UIもAPIも使用可能な上にAPIキー管理機能まで自動で提供されていてまさに至れり尽くせり。プレビューをクリックするとアプリケーションの画面が開きます。</p><img src="/images/20240402a/image_5.png" alt="" width="632" height="519" loading="lazy"><img src="/images/20240402a/image_6.png" alt="" width="795" height="562" loading="lazy"><h2 id="チュートリアル2：外部ツールの使用"><a href="#チュートリアル2：外部ツールの使用" class="headerlink" title="チュートリアル2：外部ツールの使用"></a>チュートリアル2：外部ツールの使用</h2><p>文章を生成するだけのLLMに、外部サイトの情報を収集する機能と、グラフを描画する機能を追加します。</p><h3 id="開発-1"><a href="#開発-1" class="headerlink" title="開発"></a>開発</h3><ol><li>また画面上部のメニューからスタジオ→新しいアプリを作成する→アシスタントを選択して適当な名前で作成してください。</li><li>「基本アシスタント」をクリックして「エージェントアシスタント」を選択します。<img src="/images/20240402a/image_7.png" alt="" width="465" height="337" loading="lazy"></li><li>画面左側に「ツール」エリアが出現するので、「＋追加」をクリックして、 Wikipedia と ChartGenerator の Pie Chart を追加します。<img src="/images/20240402a/image_8.png" alt="" width="1157" height="644" loading="lazy"></li><li>「手順」に <code>ユーザの入力したプロンプトについてWikipediaで検索し、数値の情報をもとにパイチャートを作成してください。</code> と入力します。無くても動作はしますがそのままだと LLM が Wikipedia を参照せず手持ちの情報で回答してしまいがちなので念を押しておきます。</li></ol><h3 id="動作確認-1"><a href="#動作確認-1" class="headerlink" title="動作確認"></a>動作確認</h3><p>「公開」をクリックしてプロンプトに「アメリカの全人口における州ごとの人口のパイチャート」と入力すると若干怪しい動きを見せつつ作図されます。<br><img src="/images/20240402a/image_9.png" alt="" width="510" height="692" loading="lazy"></p><p>実は残念ながら現時点では Anthropic の Functions &amp; external tools には直接対応していないらしく、エージェント設定を見るとエージェントモードが ReAct になっています（GPTやGPT互換だと Function Calling のはず）。どうもこの場合Difyは、「LLMが生成した文字列からツール用パラメータっぽい部分をパースしてツールに中継する」という形で Function Calling を模した機能を提供するようで、生成された文字列が一部でもJSONとして破綻（値の中で改行など）していると失敗します。ツールの呼び出しに失敗するとツールを呼び出そうとした文字列がそのまま最終回答文として出力されます。</p><img src="/images/20240402a/image_10.png" alt="" width="437" height="358" loading="lazy"><img src="/images/20240402a/image_11.png" alt="" width="603" height="603" loading="lazy"><h2 id="後編に続く"><a href="#後編に続く" class="headerlink" title="後編に続く"></a>後編に続く</h2><p>前編では下記のステップを辿りました。</p><ul><li>チャットbotに手順(Instruction)を与えて特定の問題領域に特化したチャットbotを作る</li><li>既製のToolを使用して自然言語処理以外の機能を獲得する</li></ul><p><a href="/articles/20240404a/">後編</a>はこれらを進めて以下の内容を書きます。</p><ul><li>Toolを自作して機能を拡張する</li><li>生成AIに自分の生成した回答を自己レビューさせる</li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">RAG用テキストやベクトルデータベースを作る場合にも言えますが、生成AIに前提知識を与える時には詳細な情報に加えてその概要と補足情報などで多面的に与えると精度が上がります。単純に手軽さだけで言えば、データのフォーマットの工夫に腐心するより表現のバリエーションを増やす方が楽です。パケ死ならぬトークン死しますが…</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%8E%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89/">ノーコード</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%94%9F%E6%88%90AI/">生成AI</category>
      
      <category domain="https://future-architect.github.io/tags/Dify/">Dify</category>
      
      <category domain="https://future-architect.github.io/tags/Anthropic-Claude/">Anthropic Claude</category>
      
      
      <comments>https://future-architect.github.io/articles/20240402a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Microsoft 365 Developer ProgramでEntraID(旧名AzureAD)にアクセスする</title>
      <link>https://future-architect.github.io/articles/20240401a/</link>
      <guid>https://future-architect.github.io/articles/20240401a/</guid>
      <pubDate>Sun, 31 Mar 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;過去にいくつかEntraID(旧名AzureAD)の記事を&lt;a href=&quot;/tags/AzureAD/&quot;&gt;何本も書いています&lt;/a&gt;が、久々にMicrosoft 365 Developer</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>過去にいくつかEntraID(旧名AzureAD)の記事を<a href="/tags/AzureAD/">何本も書いています</a>が、久々にMicrosoft 365 Developer Programにアクセスしたら、どこにEntraIDがあるのか場所が分からなかったのでメモです。Microsoft 365全般で同じかもしれませんが、僕自身はDeveloper Programしか触っていないのでわかりません。</p><p><a href="https://developer.microsoft.com/en-us/microsoft-365/dev-program">Microsoft 365 Developer Programのウェブサイト</a>で上のメニューのDeveloper Programの「My Dashboard」を選びます。この遷移がわからなくていつもJoin Nowをしていました。</p><img src="/images/20240401a/image.png" alt="image.png" width="610" height="287" loading="lazy"><p>こちらがダッシュボードです。</p><img src="/images/20240401a/image_2.png" alt="image.png" width="911" height="633" loading="lazy"><p>ここでGo to subscritpionを選択すると、次のオフィスのポータルっぽいページに移動します。</p><img src="/images/20240401a/image_3.png" alt="image.png" width="1200" height="646" loading="lazy"><p>左のツールバーのAdminアイコンをクリックして・・・上のツールバーにentraidを入れて検索して出てくるIdentityがEntraIDです。</p><img src="/images/20240401a/image_4.png" alt="image.png" width="859" height="517" loading="lazy">]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Azure/">Azure</category>
      
      <category domain="https://future-architect.github.io/tags/EntraID/">EntraID</category>
      
      <category domain="https://future-architect.github.io/tags/Microsoft365/">Microsoft365</category>
      
      
      <comments>https://future-architect.github.io/articles/20240401a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
