<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Thu, 05 Jan 2023 00:50:51 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Python Web APIをAWS Lambdaにデプロイ</title>
      <link>https://future-architect.github.io/articles/20230105a/</link>
      <guid>https://future-architect.github.io/articles/20230105a/</guid>
      <pubDate>Wed, 04 Jan 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;この記事は&lt;a href=&quot;https://qiita.com/advent-calendar/2022/future&quot;&gt;フューチャー Advent Calendar 2022&lt;/a&gt;の14日目の記事です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>この記事は<a href="https://qiita.com/advent-calendar/2022/future">フューチャー Advent Calendar 2022</a>の14日目の記事です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニットの村上です。</p><p>PythonのWeb APIをLambdaにデプロイする方法について解説します。</p><p>PythonでWeb APIを構築する方法は<a href="/articles/20221203a/">OpenAPI GeneratorでPython Web API構築</a>をご覧ください。</p><p>本記事ではPython Web APIのアプリ実装は完成している前提で、下図の流れでデプロイする手順を解説します。</p><img src="/images/20230105a/image.png" alt="PythonアプリをDockerコンテナイメージビルド→ECR→Lambdaにデプロイする" width="778" height="495" loading="lazy"><h1 id="Lambda起動用のモジュール"><a href="#Lambda起動用のモジュール" class="headerlink" title="Lambda起動用のモジュール"></a>Lambda起動用のモジュール</h1><p>Lambdaでは起点となる関数とAPI Responseを返すreturn命令が必要になります。<br>これらを満たすモジュールを実装します。</p><figure class="highlight python"><figcaption><span>lambda.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> awsgi</span><br><span class="line"><span class="keyword">import</span> connexion</span><br><span class="line"><span class="keyword">from</span> openapi_server <span class="keyword">import</span> encoder</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_handler</span>(<span class="params">event, context</span>):</span><br><span class="line">    app = connexion.App(__name__, specification_dir=<span class="string">&quot;./openapi/&quot;</span>)</span><br><span class="line">    app.app.json_encoder = encoder.JSONEncoder</span><br><span class="line">    app.add_api(</span><br><span class="line">        <span class="string">&quot;openapi.yaml&quot;</span>,</span><br><span class="line">        arguments=&#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;Stock API&quot;</span>&#125;,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> awsgi.response(app, event, context)</span><br></pre></td></tr></table></figure><p><code>lambda_handler</code>をLambda起動用関数に設定することで、APIを機能させることができます。</p><h1 id="デプロイする方法"><a href="#デプロイする方法" class="headerlink" title="デプロイする方法"></a>デプロイする方法</h1><p>Lambdaにソースコードをデプロイする方法は2種類あります。</p><ol><li>ソースコードとその依存ライブラリをZIPにアーカイブしてアップロードする</li><li>ECRのコンテナイメージをアップロードする</li></ol><p>Pythonのソースコードをアップロードする場合は2番のECRからアップロードする方法をお勧めします。<br>というのも最近のPythonライブラリは容量が大きく、例えばPandasだけでも約50MBあります。<br>ZIPアップロード方式の場合は解凍前50MB、解凍後250MBまでという制限があるため、依存ライブラリの数とサイズによってはこの制限に引っ掛かり、アップロードできません。<br>一方でECR方式の場合はイメージサイズが10GBまでOKなのでかなり違いがあることが分かると思います。</p><p>その他詳しい制限については以下をご覧ください。</p><p><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/gettingstarted-limits.html">https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/gettingstarted-limits.html</a></p><p>本記事ではECRからデプロイする方法を解説します。</p><h1 id="デプロイ用Dockerfileの作成"><a href="#デプロイ用Dockerfileの作成" class="headerlink" title="デプロイ用Dockerfileの作成"></a>デプロイ用Dockerfileの作成</h1><p>デプロイ用のDockerfileには依存ライブラリとLambda起動用のランタイムのインストールが必要になります。<br>Pythonのパッケージ管理には<a href="https://python-poetry.org/">Poetry</a>を使っている場合を想定し、Dockerfileを以下のように実装します。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> FUNCTION_DIR=<span class="string">&quot;/usr/src/app&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>.<span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> FUNCTION_DIR</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install gcc g++ libc-dev</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install poetry</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> pyproject.toml poetry.lock ./</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> poetry <span class="built_in">export</span> -f requirements.txt &gt; requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip uninstall poetry --<span class="built_in">yes</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --target <span class="variable">$&#123;FUNCTION_DIR&#125;</span> awslambdaric</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./ <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/usr/local/bin/python&quot;</span>, <span class="string">&quot;-m&quot;</span>, <span class="string">&quot;awslambdaric&quot;</span> ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;openapi_server/lambda.lambda_handler&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>poetryはその性質上docker内に仮想環境を構築する必要がありますが、それは面倒なのでpipで依存ライブラリをインストールします。<br>注意点として、poetryとそれ以外のライブラリはpipの依存関係チェックでエラーになる可能性があります。poetryで出力された<code>requirements.txt</code>に記述されたライブラリはpoetryによって依存関係の整合性が保証されていますが、その依存関係にpoetry自身は存在しません。このdocker内ではpipによってpoetryとそれら以外のライブラリがはじめて依存関係チェックの対象となるため、エラーになる可能性があります。よってpoetryは<code>requirements.txt</code>を出力したら速やかに削除します。<br>また、Lambdaで起動するためには<a href="https://github.com/aws/aws-lambda-python-runtime-interface-client">awslambdaric</a>というランタイムが必要なため、合わせてインストールします。</p><h1 id="AWS-CLIからデプロイする"><a href="#AWS-CLIからデプロイする" class="headerlink" title="AWS CLIからデプロイする"></a>AWS CLIからデプロイする</h1><p>上記のDockerfileをビルドします。<br>proxy環境の場合はそのままではdocker内で各パッケージのインストールが行えないため、<code>--build-arg</code>にプロキシを設定する必要があります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker build \</span><br><span class="line">    -f ./Dockerfile \</span><br><span class="line">-t <span class="string">&quot;&lt;AWSアカウントID&gt;.dkr.ecr.ap-northeast-1.amazonaws.com/&lt;ECRリポジトリ名&gt;:latest&quot;</span> \</span><br><span class="line">--build-arg https_proxy=<span class="variable">$&#123;https_proxy&#125;</span> \</span><br><span class="line">../.</span><br></pre></td></tr></table></figure><p>ビルドができたらECRにプッシュします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker push &lt;AWSアカウントID&gt;.dkr.ecr.ap-northeast-1.amazonaws.com/&lt;ECRリポジトリ名&gt;:latest</span><br></pre></td></tr></table></figure><p>プッシュが完了したらECRからLambdaにアップロードします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ aws lambda update-function-code --function-name &lt;Lambda名&gt; \</span><br><span class="line">--image-uri &lt;AWSアカウントID&gt;.dkr.ecr.ap-northeast-1.amazonaws.com/&lt;ECRリポジトリ名&gt;:latest</span><br></pre></td></tr></table></figure><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>最後までお読みいただきありがとうございました！</p><p>Lambdaにコンテナイメージをアップロードする方法は制限が緩く使いやすい反面、ランタイムが必要だったり、ECRのリポジトリを用意しないといけなかったりと、少し手間がかかります。<br>本記事が参考になれば幸いです。</p><p>明日はtutuzさんの<a href="https://qiita.com/tutuz/items/a2db0a78e5977b3d942b">技術記事執筆のススメ</a>です！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Docker/">Docker</category>
      
      <category domain="https://future-architect.github.io/tags/API/">API</category>
      
      
      <comments>https://future-architect.github.io/articles/20230105a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rust製SQLフォーマッタをnapi-rsを利用してVSCode拡張機能化</title>
      <link>https://future-architect.github.io/articles/20221228a/</link>
      <guid>https://future-architect.github.io/articles/20221228a/</guid>
      <pubDate>Tue, 27 Dec 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221228a/top.png&quot; alt=&quot;&quot; width=&quot;579&quot; height=&quot;216&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221228a/top.png" alt="" width="579" height="216"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Futureでアルバイトをしている川渕です。</p><p>アルバイトの前はFutureのインターンシップでRust製SQLフォーマッタであるuroborosql-fmtの作成を行っていました(その時の記事は<a href="/articles/20220916b/">こちら</a>)。</p><p>本記事ではそのフォーマッタをVSCodeの拡張機能化した方法について説明します。</p><h1 id="説明すること"><a href="#説明すること" class="headerlink" title="説明すること"></a>説明すること</h1><ul><li>napi-rsを使用してTypeScript(JavaScript)からRustのコードを呼び出せるようにする方法</li><li>napi-rsにおけるクロスプラットフォームビルド方法</li><li>VSCode拡張機能をパッケージ化する方法</li></ul><!--* x86_64-pc-windows-gnuの環境でnapi-rsを使用する方法--><h1 id="説明しないこと"><a href="#説明しないこと" class="headerlink" title="説明しないこと"></a>説明しないこと</h1><ul><li>本記事ではフォーマッタの仕様、実装方法について説明しません。詳細を知りたい方は以下の記事をご覧ください。<ul><li><a href="/articles/20220916b/">Engineer Camp2022 RustでSQLフォーマッタ作成（前編） | フューチャー技術ブログ</a></li><li><a href="/articles/20220916c/">Engineer Camp2022 RustでSQLフォーマッタ作成（後編） | フューチャー技術ブログ</a></li><li><a href="/articles/20221215a/">tree-sitter文法入門 | フューチャー技術ブログ</a></li></ul></li><li>LSPを用いた拡張機能作成方法の詳細についても本記事では説明しません。詳細を知りたい方は以下の記事をご覧ください。<ul><li><a href="/articles/20221124a/">Language Server Protocolを用いたVSCode拡張機能開発 (前編) | フューチャー技術ブログ</a></li><li><a href="/articles/20221125a/">Language Server Protocolを用いたVSCode拡張機能開発 (後編) | フューチャー技術ブログ</a></li></ul></li><li>napi-rsで作成したNode.jsアドオンの公開方法</li><li>作成したVSCode拡張機能の公開方法</li></ul><h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><ul><li>OS: Windows 10 Pro</li><li>VSCode: 1.73.1</li><li>Node.js: v16.17.1</li><li>rustc: 1.64.0 (a55dd71d5 2022-09-19)</li><li>npm: 8.15.0</li><li>yarn: 1.22.19</li><li>napi-rs&#x2F;cli: 2.12.0</li><li>vsce: 2.14.0</li></ul><h1 id="作成するVSCode拡張機能の仕様"><a href="#作成するVSCode拡張機能の仕様" class="headerlink" title="作成するVSCode拡張機能の仕様"></a>作成するVSCode拡張機能の仕様</h1><p>作成するVSCode拡張機能の仕様は以下の通りです。</p><ul><li><a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a>を利用する</li><li>コマンドパレットで実行できる</li><li>範囲選択されている場合、その範囲のSQLをフォーマットする</li><li>範囲選択されていない場合、全体をフォーマットする</li></ul><img src="/images/20221228a/format_extension.gif" alt="format_extension.gif" width="1200" height="675" loading="lazy"><h1 id="処理の流れ"><a href="#処理の流れ" class="headerlink" title="処理の流れ"></a>処理の流れ</h1><p>作成する拡張機能の処理の流れを説明します。</p><img src="/images/20221228a/df88766a-9fef-6408-5603-1c17bed7619c.png" alt="" width="1200" height="1190" loading="lazy"><p>処理の流れは以下のとおりです。</p><ol><li>まずユーザがフォーマットしたいSQLを範囲選択し、コマンドを実行します。</li><li>コマンド実行をLanguage Serverのクライアントが検知し、サーバに選択範囲の情報を送信します。</li><li>サーバは選択範囲のSQLを取得します。取得したSQLを引数に与えてSQLフォーマッタを実行します。</li><li>SQLフォーマッタは引数として受け取ったSQLをフォーマットし、フォーマット済みSQLを返します。</li><li>フォーマット済みSQLを受け取ったサーバは選択範囲をフォーマット済みSQLに置き換えるようにクライアントに送信します。</li></ol><p>SQLフォーマッタはRust、自作Language ServerはTypeScriptで書かれているため、直接SQLフォーマッタを呼び出すことができません。</p><p>そこで、napi-rsというツールを使用して、TypeScriptからRustで書かれたSQLフォーマッタを呼び出せるようにしました。</p><h1 id="TypeScriptからRustの呼び出し"><a href="#TypeScriptからRustの呼び出し" class="headerlink" title="TypeScriptからRustの呼び出し"></a>TypeScriptからRustの呼び出し</h1><p>まずTypeScriptからRustを呼び出す方法として以下の3つの方法が考えられます。</p><div class="scroll"><table><thead><tr><th>方法</th><th>使用するツール</th><th>メリット</th><th>デメリット</th></tr></thead><tbody><tr><td>Rustコードのwasm化</td><td>rustc または wasm-pack</td><td>プラットフォームに依存しないため移植性が高い</td><td>C&#x2F;C++を呼び出しているコードをビルドするのが難しい</td></tr><tr><td>RustコードのNode.jsアドオン化</td><td>napi-rs</td><td>C&#x2F;C++を呼び出しているコードでも比較的簡単にビルドできる</td><td>クロスプラットフォームビルドが必要</td></tr><tr><td>Rustコードをビルドしたものをexecで呼び出す</td><td>rustc</td><td>特別なツールを使わなくても可能</td><td>クロスプラットフォームビルドが必要 <br>   綺麗な方法とは言えないため最後の手段</td></tr></tbody></table></div><p>wasmとNode.jsアドオンの性能差は現時点では調査しましたがわかりませんでした。(もしわかる方がいれば教えてください)<br>しかし、移植性の観点からできる限りwasmのほうがNode.jsアドオンよりも良いという意見が多く見受けられました。</p><ul><li><a href="https://sprkl.dev/performance-rust-node-js/">Performance: Rust and its relationship with Node.js</a></li><li><a href="https://www.reddit.com/r/rust/comments/xhg78i/how_do_napi_works_compare_to_wasm_and_what_are/">How do NAPI works compare to WASM, and what are the use cases suiting each one? : rust</a></li></ul><p>しかし、SQLフォーマッタは内部的にCで書かれたコードを呼び出していることが要因でwasm化がうまくいかなかったため、今回はnapi-rsを用いてNode.jsアドオン化する方法を選択しました。</p><h2 id="Node-API"><a href="#Node-API" class="headerlink" title="Node-API"></a>Node-API</h2><p>napi-rsについて紹介する前にNode-APIについて説明します。<br>Node-APIとはNode 8.0.0で導入されたツールで、C&#x2F;C++コードをNode.jsのアドオン化するツールです。<br>Node-APIを使用することで、C&#x2F;C++コードをJavaScriptで記述されたものと同様の方法で利用できるようになります。</p><h2 id="napi-rsとは"><a href="#napi-rsとは" class="headerlink" title="napi-rsとは"></a>napi-rsとは</h2><p><a href="https://napi.rs/">napi-rs</a>とはNode-APIをRustで使用できるようにしたものです。<br>例えば以下のようなRustコードをnapi-rsでビルドします。</p><figure class="highlight rust"><figcaption><span>example.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![deny(clippy::all)]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#[macro_use]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> napi_derive;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[napi]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">sum</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">  a + b + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>すると、Node.jsアドオンが生成され、JavaScriptからRustの関数を呼び出せるようになります。</p><figure class="highlight javascript"><figcaption><span>example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; sum &#125; = <span class="built_in">require</span>(<span class="string">&quot;./index.js&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// 7</span></span><br></pre></td></tr></table></figure><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>ちなみに、Node-APIは元々の名称がN-APIだったのですが、しばしば「NAPI」と発音され、蔑称と間違われる可能性があるとの懸念から現在のNode-APIに名称を変更しました。そのため、napi-rsにおいても、"エヌエーピーアイ"と発音したほうが良さそうです。</p><a href="https://codezine.jp/article/detail/14109">N-APIが「Node-API」へ名称変更、既存のコンパイル済みアドオンへの影響はナシ|CodeZine（コードジン）</a></div><h2 id="napi-rsの使い方"><a href="#napi-rsの使い方" class="headerlink" title="napi-rsの使い方"></a>napi-rsの使い方</h2><p>napi-rsの使い方を説明します。</p><div class="note warn" style="background:#fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>napi-rsではx86_64-pc-windows-gnuの環境はサポートされていないため、もしwindowsでgnu版rustを使っている方はmsvc版のRustを入れてください。</p></div><h3 id="1-CLIツールのインストール"><a href="#1-CLIツールのインストール" class="headerlink" title="1. CLIツールのインストール"></a>1. CLIツールのインストール</h3><p>yarnでnapi-rsのCLIツールをインストールします。<br>まずyarnをインストールします。以降もyarnが必要になるため、必ずインストールしてください。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure><p>napi-rsのCLIツールをインストールします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add @napi-rs/cli</span><br></pre></td></tr></table></figure><p>インストールに成功すると<code>napi</code>コマンドが使えるようになります。</p><h3 id="2-新規プロジェクト作成"><a href="#2-新規プロジェクト作成" class="headerlink" title="2. 新規プロジェクト作成"></a>2. 新規プロジェクト作成</h3><p>インストールしたCLIツールを使用して新規プロジェクトを作成します。<br>新規プロジェクトを作成したいディレクトリで以下のコマンドを実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">napi new</span><br></pre></td></tr></table></figure><p>すると、以下の質問が表示されるので、順に回答してください。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">任意のパッケージ名</span></span><br><span class="line">? Package name: (The name filed in your package.json)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ディレクトリ名</span></span><br><span class="line">? Dir name</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">サポートしたい実行環境</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">publish時にここで選んだ実行環境がサポートされます</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">デフォルト: x86_64-apple-darwin, x86_64-pc-windows-msvc, x86_64-unknown-linux-gnu</span></span><br><span class="line">? Choose targets you want to support</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GitHub Actionsを有効にするか否か</span></span><br><span class="line">? Enable github actions? (Y/n)</span><br></pre></td></tr></table></figure><!--:::note warnx86_64-pc-windows-gnuの環境はサポートされていないため、msvc版のRustを入れることを推奨します。しかし、gnu版Rustの環境でも後述の操作をすればローカルでは試すことができます。もしそのような環境で試したい方は、とりあえず「サポートしたい実行環境」はデフォルトのまま進めてください。:::--><p>質問に回答すると指定したディレクトリ名のディレクトリが作成されます。<br>これでNode.js add-onを作るテンプレートが完成しました。</p><h3 id="3-ビルドと実行"><a href="#3-ビルドと実行" class="headerlink" title="3. ビルドと実行"></a>3. ビルドと実行</h3><p>テンプレートの<code>src/lib.rs</code>に既にサンプルのRustコードが含まれています。関数sumは2つの引数の合計を返す関数です。</p><figure class="highlight rust"><figcaption><span>src/lib.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![deny(clippy::all)]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#[macro_use]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> napi_derive;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[napi]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">sum</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">  a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これをNode.jsアドオンへビルドして実行してみます。<br>まず先ほど作成したプロジェクトのルートディレクトリでビルドコマンドを実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure><p>ビルドに成功すると、プロジェクトのディレクトリ直下に<code>index.d.ts</code>、<code>index.js</code>、<code>&lt;プロジェクト名&gt;.&lt;環境&gt;.node</code>が作成されます。</p><p><code>index.js</code>には環境に合ったnodeファイルを読み込んでくれる処理が書いています。そのため、<code>index.js</code>をimportすることで自動的に環境に合ったnodeファイルが読み込まれ、そこに含まれる関数を利用することができるようになります。</p><p>以下のファイルをプロジェクトのディレクトリ直下に作成します。</p><figure class="highlight javascript"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; sum &#125; = <span class="built_in">require</span>(<span class="string">&quot;./index.js&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><p>実行して”7”という出力が返ってきたら成功です。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node test.js</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7</span></span><br></pre></td></tr></table></figure><h2 id="SQLフォーマッタをJavaScriptから実行"><a href="#SQLフォーマッタをJavaScriptから実行" class="headerlink" title="SQLフォーマッタをJavaScriptから実行"></a>SQLフォーマッタをJavaScriptから実行</h2><p>プロジェクトのテンプレートを変更してSQLフォーマッタをJavaScriptから実行できるようにしてみます。</p><h3 id="1-新規プロジェクト作成"><a href="#1-新規プロジェクト作成" class="headerlink" title="1. 新規プロジェクト作成"></a>1. 新規プロジェクト作成</h3><p>先述した方法で新規プロジェクトを作成しました。プロジェクト名はuroborosql-fmt-napiとしています。</p><h3 id="2-src-lib-rsを変更し、ビルド"><a href="#2-src-lib-rsを変更し、ビルド" class="headerlink" title="2. src/lib.rsを変更し、ビルド"></a>2. <code>src/lib.rs</code>を変更し、ビルド</h3><p><code>src/lib.rs</code>を以下のように変更します。<br>SQLフォーマッタのクレート名は<code>uroborosql_fmt</code>で、<code>format_sql()</code>関数にSQL文を渡すとフォーマットされたSQLが返ってきます。</p><figure class="highlight rust"><figcaption><span>src/lib.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![deny(clippy::all)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> uroborosql_fmt::format_sql;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[macro_use]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> napi_derive;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[napi]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">runfmt</span>(input: <span class="type">String</span>) <span class="punctuation">-&gt;</span>  <span class="type">String</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">format_sql</span>(&amp;input)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>プロジェクトのルートディレクトリでビルドします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure><p>私の環境はwin32-x64-msvcであるため、<code>index.d.ts</code>、<code>index.ts</code>、<code>uroborosql-fmt-napi.win32-x64-msvc.node</code>が生成されました。</p><h3 id="3-run-jsの作成、実行"><a href="#3-run-jsの作成、実行" class="headerlink" title="3. run.jsの作成、実行"></a>3. run.jsの作成、実行</h3><p>プロジェクトのディレクトリ直下にrun.jsを作成します。変数targetにはフォーマットしたいSQL文を格納しています。</p><figure class="highlight javascript"><figcaption><span>run.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; runfmt &#125; = <span class="built_in">require</span>(<span class="string">&quot;./index.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> target = <span class="string">`</span></span><br><span class="line"><span class="string">SELECT</span></span><br><span class="line"><span class="string">      Identifier as id, --ID</span></span><br><span class="line"><span class="string">student_name          --              学生名</span></span><br><span class="line"><span class="string">FROM</span></span><br><span class="line"><span class="string">  japanese_student_table</span></span><br><span class="line"><span class="string">AS JPN_STD --日本人学生</span></span><br><span class="line"><span class="string">,       SUBJECT_TABLE AS SBJ  --科目</span></span><br><span class="line"><span class="string">WHERE</span></span><br><span class="line"><span class="string">  JPN_STD.sportId = (SELECT</span></span><br><span class="line"><span class="string">         sportId   FROM</span></span><br><span class="line"><span class="string">    Sport</span></span><br><span class="line"><span class="string">                         WHERE</span></span><br><span class="line"><span class="string">             Sport.sportname</span></span><br><span class="line"><span class="string">    = &#x27;baseball&#x27;</span></span><br><span class="line"><span class="string">                    )   -- 野球をしている生徒</span></span><br><span class="line"><span class="string">    AND</span></span><br><span class="line"><span class="string">JPN_STD.ID  = SBJ.ID</span></span><br><span class="line"><span class="string">AND SBJ.grade   &gt;</span></span><br><span class="line"><span class="string">            /*grade*/50     --成績が50点以上</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">runfmt</span>(target));</span><br></pre></td></tr></table></figure><p>作成した<code>run.js</code>を実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node run.js</span><br></pre></td></tr></table></figure><p>出力結果は以下のようになりました。きちんとフォーマットされているため成功です。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">IDENTIFIER<span class="keyword">AS</span>ID<span class="comment">-- ID</span></span><br><span class="line">,STUDENT_NAME<span class="keyword">AS</span>STUDENT_NAME<span class="comment">-- 学生名</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">JAPANESE_STUDENT_TABLEJPN_STD<span class="comment">-- 日本人学生</span></span><br><span class="line">,SUBJECT_TABLESBJ<span class="comment">-- 科目</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">JPN_STD.SPORTID<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">SPORTID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">SPORT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">SPORT.SPORTNAME<span class="operator">=</span><span class="string">&#x27;BASEBALL&#x27;</span></span><br><span class="line">)<span class="comment">-- 野球をしている生徒</span></span><br><span class="line"><span class="keyword">AND</span>JPN_STD.ID<span class="operator">=</span>SBJ.ID</span><br><span class="line"><span class="keyword">AND</span>SBJ.GRADE<span class="operator">&gt;</span><span class="comment">/*grade*/</span><span class="number">50</span><span class="comment">-- 成績が50点以上</span></span><br></pre></td></tr></table></figure><h2 id="クロスプラットフォームビルド"><a href="#クロスプラットフォームビルド" class="headerlink" title="クロスプラットフォームビルド"></a>クロスプラットフォームビルド</h2><p>現在はビルドした環境(win32-x64-msvc)でしか作成したNode.jsアドオンが動作しません。<br>そこでGitHub Actionsを使ってクロスプラットフォームビルドを行います。</p><h3 id="0-CI-ymlの作成"><a href="#0-CI-ymlの作成" class="headerlink" title="0. CI.ymlの作成"></a>0. CI.ymlの作成</h3><p>もしnapi-rsプロジェクト作成時にGitHub Actionsを有効にしていなかった場合はこちらの作業を行ってください。</p><ol><li>適当なディレクトリで<code>napi new</code></li><li>パッケージ名、ディレクトリ名は適当に入力</li><li>サポートしたい実行環境を選択<br>  (今回作成しているフォーマッタではできるだけ多くの環境をサポートしたかったため、で全ての実行環境を選択)</li><li>GitHub Actionsを有効にしてプロジェクトを作成</li><li>完成したプロジェクト内の<code>.github</code>ディレクトリをコピーして現在作業中のプロジェクトにペースト</li></ol><h3 id="1-yarn-lockの作成"><a href="#1-yarn-lockの作成" class="headerlink" title="1. yarn.lockの作成"></a>1. yarn.lockの作成</h3><p>プロジェクトのルートディレクトリで以下のコマンドを実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure><p>yarn.lockが作成、または更新されれば成功です。</p><h3 id="2-CI-ymlの編集、GitHub-Actionsの実行"><a href="#2-CI-ymlの編集、GitHub-Actionsの実行" class="headerlink" title="2. CI.ymlの編集、GitHub Actionsの実行"></a>2. CI.ymlの編集、GitHub Actionsの実行</h3><p>デフォルトではGitHubにpushするとGitHub Actionsが自動的に動いて以下の処理を行ってくれます。</p><ol><li>各環境に対応したNode.jsアドオンをビルド</li><li>npmパッケージのpublish</li></ol><p>今回はnpmパッケージのpublishは行わないため、<code>.github/workflows/CI.yml</code>のpublish以下をすべてコメントアウトします。<br>publish方法を知りたい方は以下の記事が参考になると思います。</p><ul><li><a href="https://shisama.hatenablog.com/entry/2021/12/03/054437#napi-rs%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9Fnpm-publish">Rust + Node-APIでクロスプラットフォーム向けnpmパッケージを公開する - 別にしんどくないブログ</a></li></ul><p>GitHub Actionsでビルドを行うと、13個の環境のうち11個の環境でビルドが失敗してしまいました。Rust製SQLフォーマッタが内部的にC&#x2F;C++のコードを呼び出していることが原因の1つであると考えられます。そのため、通常のRustプロジェクトであればもう少し成功すると思います。<br>試行錯誤して<code>.github/workflows/CI.yml</code>を編集すると、最終的に13個中7個の環境でビルドが成功するようになりました。私が実施した変更を参考程度に示します。</p><h4 id="CI-ymlの変更1-長いパスに対応"><a href="#CI-ymlの変更1-長いパスに対応" class="headerlink" title="CI.ymlの変更1: 長いパスに対応"></a><code>CI.yml</code>の変更1: 長いパスに対応</h4><p>hostがwindows-latestである環境のbuildに以下の処理を追加しました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --system core.longpaths true</span><br></pre></td></tr></table></figure><h4 id="CI-ymlの変更2-yarn-testの削除"><a href="#CI-ymlの変更2-yarn-testの削除" class="headerlink" title="CI.ymlの変更2: yarn testの削除"></a><code>CI.yml</code>の変更2: yarn testの削除</h4><p>targetがi686-pc-windows-msvcの場合のみビルド時に<code>yarn test</code>が走っています。本来は消すべきではないかもしれませんが、今回はテストコードを書いていないのでとりあえず削除しました。</p><h4 id="CI-ymlの変更3-aarch64-apple-darwinにおける一部処理の削除"><a href="#CI-ymlの変更3-aarch64-apple-darwinにおける一部処理の削除" class="headerlink" title="CI.ymlの変更3: aarch64-apple-darwinにおける一部処理の削除"></a><code>CI.yml</code>の変更3: aarch64-apple-darwinにおける一部処理の削除</h4><p>targetがaarch64-apple-darwinの場合のビルド処理の上5行を削除しました。最終的にビルド処理は以下のようになりました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn build --target aarch64-apple-darwin</span><br><span class="line">strip -x *.node</span><br></pre></td></tr></table></figure><h3 id="3-成果物のダウンロード"><a href="#3-成果物のダウンロード" class="headerlink" title="3. 成果物のダウンロード"></a>3. 成果物のダウンロード</h3><p>GitHub Actionsでビルドした各環境のNode.jsアドオンをダウンロードします。<br>GitHubのリポジトリ &gt; Actions &gt; 最新のワークフローに移動し、ページ最下部のArtifactsのファイルをすべてダウンロードします。<br><img src="/images/20221228a/image.png" alt="image.png" width="1200" height="392" loading="lazy"><br>各ファイルを解凍すると、各環境に合ったNode.jsアドオンが取得できます。</p><h2 id="nodeファイルをまとめて圧縮"><a href="#nodeファイルをまとめて圧縮" class="headerlink" title="nodeファイルをまとめて圧縮"></a>nodeファイルをまとめて圧縮</h2><ol><li>適当なディレクトリを作成</li><li>対応したい環境のnodeファイルを全て置く</li><li>napi-rsプロジェクトの<code>index.d.ts</code>と<code>index.js</code>をコピーしてそのディレクトリにペースト</li><li>package.jsonを作成 (nameはパッケージ名)<br>フォーマッタの名前がuroborosql-fmtであるため、パッケージ名はuroborosql-fmt-napiとしました。 <figure class="highlight plaintext"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;uroborosql-fmt-napi&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;types&quot;: &quot;index.d.ts&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;engines&quot;: &#123;</span><br><span class="line">    &quot;node&quot;: &quot;&gt;= 10&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>以下のコマンドを実行して圧縮 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm pack</span><br></pre></td></tr></table></figure></li><li><code>プロジェクト名-バージョン.tgz</code>ファイルが生成されれば成功</li></ol><p>今回の例では<code>uroborosql-fmt-napi-0.0.0.tgz</code>というファイルが生成されました。</p><h1 id="拡張機能の作成"><a href="#拡張機能の作成" class="headerlink" title="拡張機能の作成"></a>拡張機能の作成</h1><p>※再掲<br><img src="/images/20221228a/df88766a-9fef-6408-5603-1c17bed7619c_2.png" alt="" width="1200" height="1190" loading="lazy"></p><p>TypeScriptからSQLフォーマッタを呼び出すことができるようになったので、次に拡張機能部分を作成します。<br>本記事では<a href="https://github.com/microsoft/vscode-extension-samples/tree/main/lsp-sample">microsoft&#x2F;vscode-extension-samples&#x2F;lsp-sample</a>をベースにして拡張機能を作成します。</p><p>LSPを用いた拡張機能作成方法の詳細を知りたい方は以下をご覧ください。本記事では簡単に解説します。</p><ul><li><a href="/articles/20221124a/">Language Server Protocolを用いたVSCode拡張機能開発 (前編) | フューチャー技術ブログ</a></li><li><a href="/articles/20221125a/">Language Server Protocolを用いたVSCode拡張機能開発 (後編) | フューチャー技術ブログ</a></li></ul><h2 id="拡張機能の設定"><a href="#拡張機能の設定" class="headerlink" title="拡張機能の設定"></a>拡張機能の設定</h2><p><code>package.json</code>を変更して拡張機能の設定を変更します。</p><p>まず、VSCodeが起動されると拡張機能が有効になるようにします。</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;activationEvents&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>コマンドパレットから「format sql」コマンドを実行できるように設定します。</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uroborosql-fmt.uroborosql-format&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;format sql&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="クライアント"><a href="#クライアント" class="headerlink" title="クライアント"></a>クライアント</h2><p><code>client/src/extension.ts</code>にクライアント側の処理を記述します。</p><p><code>clientOptions</code>内の<code>documentSelector</code>を以下のように変更し、全ての形式のファイル、保存されていないUntitledなファイルを拡張機能の対象とします。</p><figure class="highlight ts"><figcaption><span>client/src/extension.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">documentSelector</span>: [</span><br><span class="line">  &#123; <span class="attr">pattern</span>: <span class="string">&quot;**&quot;</span>, <span class="attr">scheme</span>: <span class="string">&quot;file&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">pattern</span>: <span class="string">&quot;**&quot;</span>, <span class="attr">scheme</span>: <span class="string">&quot;untitled&quot;</span> &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p><code>uroborosql-fmt.uroborosql-format</code>コマンドが実行されたら<code>uroborosql-fmt.executeFormat</code>の実行情報とドキュメントのuri、version、選択範囲をサーバに送信する処理を記述します。</p><figure class="highlight ts"><figcaption><span>client/src/extension.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">context.<span class="property">subscriptions</span>.<span class="title function_">push</span>(</span><br><span class="line">  commands.<span class="title function_">registerCommand</span>(<span class="string">&quot;uroborosql-fmt.uroborosql-format&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> uri = <span class="variable language_">window</span>.<span class="property">activeTextEditor</span>.<span class="property">document</span>.<span class="property">uri</span>;</span><br><span class="line">    <span class="keyword">const</span> version = <span class="variable language_">window</span>.<span class="property">activeTextEditor</span>.<span class="property">document</span>.<span class="property">version</span>;</span><br><span class="line">    <span class="keyword">const</span> selections = <span class="variable language_">window</span>.<span class="property">activeTextEditor</span>.<span class="property">selections</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> client.<span class="title function_">sendRequest</span>(<span class="title class_">ExecuteCommandRequest</span>.<span class="property">type</span>, &#123;</span><br><span class="line">      <span class="attr">command</span>: <span class="string">&quot;uroborosql-fmt.executeFormat&quot;</span>,</span><br><span class="line">      <span class="attr">arguments</span>: [uri, version, selections],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="サーバ"><a href="#サーバ" class="headerlink" title="サーバ"></a>サーバ</h2><p>まず先程<code>npm pack</code>で取得した<code>uroborosql-fmt-napi-0.0.0.tgz</code>をserverディレクトリ内に置きます。<br>そして、<code>server/package.json</code>のdependenciesを以下のように変更します。</p><figure class="highlight diff"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line"><span class="addition">+   &quot;uroborosql-fmt-napi&quot;: &quot;file:uroborosql-fmt-napi-0.0.0.tgz&quot;,</span></span><br><span class="line">    &quot;vscode-languageserver&quot;: &quot;^7.0.0&quot;,</span><br><span class="line">    &quot;vscode-languageserver-textdocument&quot;: &quot;^1.0.4&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>これでRust製SQLフォーマッタをimportできるようになりました。</p><p><code>server/src/server.ts</code>にサーバの処理を記述します。<br>まずフォーマットを実行する関数をimportします。</p><figure class="highlight ts"><figcaption><span>server/src/server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; runfmt &#125; <span class="keyword">from</span> <span class="string">&quot;uroborosql-fmt-napi&quot;</span>;</span><br></pre></td></tr></table></figure><p>コマンド実行時に選択範囲のテキストをフォーマットする処理を記述します。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// コマンド実行時に行う処理</span></span><br><span class="line">connection.<span class="title function_">onExecuteCommand</span>(<span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    params.<span class="property">command</span> !== <span class="string">&quot;uroborosql-fmt.executeFormat&quot;</span> ||</span><br><span class="line">    params.<span class="property">arguments</span> == <span class="literal">null</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> uri = params.<span class="property">arguments</span>[<span class="number">0</span>].<span class="property">external</span>;</span><br><span class="line">  <span class="comment">// uriからドキュメントを取得</span></span><br><span class="line">  <span class="keyword">const</span> textDocument = documents.<span class="title function_">get</span>(uri);</span><br><span class="line">  <span class="keyword">if</span> (textDocument == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// バージョン不一致の場合はアーリーリターン</span></span><br><span class="line">  <span class="keyword">const</span> version = params.<span class="property">arguments</span>[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (textDocument.<span class="property">version</span> !== version) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> selections = params.<span class="property">arguments</span>[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">changes</span>: <span class="title class_">TextEdit</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 全ての選択範囲に対して実行</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> selection <span class="keyword">of</span> selections) &#123;</span><br><span class="line">    <span class="comment">// テキストを取得</span></span><br><span class="line">    <span class="keyword">const</span> text = textDocument.<span class="title function_">getText</span>(selection);</span><br><span class="line">    <span class="keyword">if</span> (text.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// フォーマット</span></span><br><span class="line">    changes.<span class="title function_">push</span>(<span class="title class_">TextEdit</span>.<span class="title function_">replace</span>(selection, <span class="title function_">runfmt</span>(text)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 選択されていない場合</span></span><br><span class="line">  <span class="keyword">if</span> (changes.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// テキスト全体を取得</span></span><br><span class="line">    <span class="keyword">const</span> text = textDocument.<span class="title function_">getText</span>();</span><br><span class="line">    <span class="comment">// フォーマット</span></span><br><span class="line">    changes.<span class="title function_">push</span>(</span><br><span class="line">      <span class="title class_">TextEdit</span>.<span class="title function_">replace</span>(</span><br><span class="line">        <span class="title class_">Range</span>.<span class="title function_">create</span>(</span><br><span class="line">          <span class="title class_">Position</span>.<span class="title function_">create</span>(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">          textDocument.<span class="title function_">positionAt</span>(text.<span class="property">length</span>)</span><br><span class="line">        ),</span><br><span class="line">        <span class="title function_">runfmt</span>(text)</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 変更を適用</span></span><br><span class="line">  connection.<span class="property">workspace</span>.<span class="title function_">applyEdit</span>(&#123;</span><br><span class="line">    <span class="attr">documentChanges</span>: [</span><br><span class="line">      <span class="title class_">TextDocumentEdit</span>.<span class="title function_">create</span>(</span><br><span class="line">        &#123; <span class="attr">uri</span>: textDocument.<span class="property">uri</span>, <span class="attr">version</span>: textDocument.<span class="property">version</span> &#125;,</span><br><span class="line">        changes</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>クライアントとサーバをコンパイルして実行してみます。</p><img src="/images/20221228a/formattest.gif" alt="formattest.gif" width="1200" height="675" loading="lazy"><p>ちゃんとフォーマットされることが確認できました🎉</p><h1 id="拡張機能のパッケージ化"><a href="#拡張機能のパッケージ化" class="headerlink" title="拡張機能のパッケージ化"></a>拡張機能のパッケージ化</h1><p>vsceというツールを使用してパッケージ化を行います。vsceとはVSCode拡張機能のパッケージ化、公開、管理を行うことができるCLIツールです。</p><div class="note warn" style="background:#fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>本記事では拡張機能の公開については説明しません。</p></div><h2 id="vsceのインストール"><a href="#vsceのインストール" class="headerlink" title="vsceのインストール"></a>vsceのインストール</h2><p>私の環境(Windows10)ではインストールに手順が必要だったので順に説明します。</p><h3 id="1-Python3のインストール"><a href="#1-Python3のインストール" class="headerlink" title="1. Python3のインストール"></a>1. Python3のインストール</h3><p>Python3が必要なためインストールします。既にPython3が入っている方は次のステップに進んでください。</p><p>まず<a href="https://www.python.org/downloads/">こちら</a>からインストーラをダウンロードします。</p><img src="/images/20221228a/image_2.png" alt="image.png" width="1200" height="522" loading="lazy"><p>ダウンロードしたファイルを開き、<strong>一番下の「Add Python 3.x to PATH」にチェックを入れてください。</strong><br>「Install Now」をクリックしてインストールし、「Setup was Succesful」と表示されればインストール完了です。</p><h3 id="2-node-gypのインストールと設定"><a href="#2-node-gypのインストールと設定" class="headerlink" title="2. node-gypのインストールと設定"></a>2. node-gypのインストールと設定</h3><p><a href="https://github.com/nodejs/node-gyp">node-gyp</a>とは、Node.js のネイティブアドオンモジュールをコンパイルするためのツールです。既に入っていて設定済みの方は次のステップに進んでください。</p><h4 id="node-gypのインストール"><a href="#node-gypのインストール" class="headerlink" title="node-gypのインストール"></a>node-gypのインストール</h4><p>まずnode-gypをインストールします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g node-gyp</span><br></pre></td></tr></table></figure><h3 id="3-VisualStudioのビルドツールのインストール"><a href="#3-VisualStudioのビルドツールのインストール" class="headerlink" title="3. VisualStudioのビルドツールのインストール"></a>3. VisualStudioのビルドツールのインストール</h3><p>次に<a href="https://visualstudio.microsoft.com/ja/thank-you-downloading-visual-studio/?sku=BuildTools">こちら</a>からVisualStudioのビルドツールのインストーラをダウンロードします。<br>インストーラを起動して「C++によるデスクトップ開発」を選択して、<strong>右側の「インストールの詳細」の中の「Windows 10 SDK」にチェックを入れて</strong>右下のインストールをクリックします。(Windows11の方は「Windows 11 SDK」にチェックを入れてください。)</p><img src="/images/20221228a/image_3.png" alt="image.png" width="1200" height="635" loading="lazy"><h3 id="4-npmの設定"><a href="#4-npmの設定" class="headerlink" title="4. npmの設定"></a>4. npmの設定</h3><p>以下を実行します。(2022の部分はダウンロードしたバージョンに合わせて適宜変更して下さい)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set msvs_version 2022</span><br></pre></td></tr></table></figure><h3 id="5-vsceのインストール"><a href="#5-vsceのインストール" class="headerlink" title="5. vsceのインストール"></a>5. vsceのインストール</h3><p>以下を実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vsce</span><br></pre></td></tr></table></figure><p>vsceコマンドが実行できるようになれば成功です。</p><h2 id="パッケージ化"><a href="#パッケージ化" class="headerlink" title="パッケージ化"></a>パッケージ化</h2><p>先程作成した拡張機能のディレクトリで以下のコマンドを実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vsce package</span><br></pre></td></tr></table></figure><p>すると、<code>プロジェクト名-バージョン.vsix</code>というファイルが生成されます。今回の例では<code>uroborosql-fmt-1.0.0.vsix</code>というファイルが生成されました。</p><p>そして、以下のコマンドでインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code --install-extension .\uroborosql-fmt-1.0.0.vsix</span><br></pre></td></tr></table></figure><p>無事インストールされ、フォーマッタが動くようになったので成功です 🎉</p><img src="/images/20221228a/image_4.png" alt="" width="1200" height="629" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>本記事ではRust製SQLフォーマッタをVSCode拡張機能化した方法を紹介しました。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://nodejs.github.io/node-addon-examples/about/what/">What is Node-API? · The Node-API Resource</a></li><li><a href="https://shisama.hatenablog.com/entry/2021/12/03/054437">Rust + Node-APIでクロスプラットフォーム向けnpmパッケージを公開する - 別にしんどくないブログ</a></li><li><a href="https://qiita.com/irico/items/fa60a7e077f4414f0eb6">VSCodeの拡張を作ってパッケージ化する - Qiita</a></li><li><a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension">Publishing Extensions | Visual Studio Code Extension API</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%82%BF%E3%83%BC/">フォーマッター</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%82%A2%E3%83%86%E3%82%AF/">コアテク</category>
      
      <category domain="https://future-architect.github.io/tags/VSCode/">VSCode</category>
      
      <category domain="https://future-architect.github.io/tags/Rust/">Rust</category>
      
      <category domain="https://future-architect.github.io/tags/napi-rs/">napi-rs</category>
      
      
      <comments>https://future-architect.github.io/articles/20221228a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>会社のプロキシの裏でPodman Desktopを実行する</title>
      <link>https://future-architect.github.io/articles/20221227a/</link>
      <guid>https://future-architect.github.io/articles/20221227a/</guid>
      <pubDate>Mon, 26 Dec 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;ちょっとローカルでPostgreSQLの最新バージョンを試したいけどDocker Desktopの稟議が間に合わない！みたいなときのためのメモです。&lt;/p&gt;
&lt;p&gt;Docker</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>ちょっとローカルでPostgreSQLの最新バージョンを試したいけどDocker Desktopの稟議が間に合わない！みたいなときのためのメモです。</p><p>Docker Desktopの有償化と契約すべきライセンスについては以前書きました。その後、値段がちょっと上がったのと、100人以上のTeamプランは許可されずにBuisinessプランが必須になり、BusinessプランではSSOが利用できるようになったのが変更点です。</p><ul><li><a href="/articles/20220124a/">Docker Desktop有償化！どのライセンス契約する？</a></li></ul><p><a href="https://www.docker.com/products/docker-desktop/">Docker Desktop</a>の代替のものがいくつかでています。<a href="https://rancherdesktop.io/">Rancher Desktop</a>と、<a href="https://podman-desktop.io/">Podman Desktop</a>があります。Rancher Desktopは会社のプロキシの裏で動かすのが難しく、ちょっと苦戦した上に、WSLのコンテナが再作成されるタイミングでプロキシ設定がリセットされるということを聞いて、Podman Desktopを使ってみました。PodmanはRedHatが開発しているコンテナのエコシステムで、コンテナエンジン（以下サーバーとします）、CLIツールで構成されます。それにデスクトップのUIとPodman自身のインストーラを組み合わせたものがPodman Desktopです。</p><img src="/images/20221227a/image.png" alt="" width="1200" height="978" loading="lazy"><h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><p>上記のPodman Desktopのサイトからインストーラをダウンロードして実行します。0.9系までは実行ファイルがそのままダウンロードされたのですが、最新の0.10.0からはインストーラになりました。入れるのはダブルクリックだけなので難しくないでしょう。起動したら、Podmanのインストーラが初回は起動するので、インストールします。PodmanはWSL2上で動くサーバーで、dockerdとかにあたるものです。執筆時点では4.3.1が入りました。</p><h1 id="プロキシの設定"><a href="#プロキシの設定" class="headerlink" title="プロキシの設定"></a>プロキシの設定</h1><p>起動したら、左下のSettings→Proxyと進んでプロキシの設定ダイアログに設定します。認証が必要な場合は、<code>http://ユーザー:パスワード@ホスト:ポート</code>という形式で入れます。</p><img src="/images/20221227a/image_2.png" alt="" width="1200" height="687" loading="lazy"><p>これだけで済めばDocker同等なのですが、残念ながらもうひと手間必要です。</p><h2 id="PodmanのWSL2のイメージの設定変更"><a href="#PodmanのWSL2のイメージの設定変更" class="headerlink" title="PodmanのWSL2のイメージの設定変更"></a>PodmanのWSL2のイメージの設定変更</h2><p>そのままだと実行すると、プロキシのホスト名が解決できないというエラーが発生してしまいます。ネームサーバーの設定を入れてあげる必要があります。まずWSL2を起動します。まずはresolv.confが上書きされないようにwsl.confを編集します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wsl -d podman-machine-default</span><br><span class="line"></span><br><span class="line">(wsl2起動)</span><br><span class="line"></span><br><span class="line">$ sudo vi /etc/wsl.conf</span><br></pre></td></tr></table></figure><figure class="highlight ini"><figcaption><span>/etc/wsl.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[user]</span></span><br><span class="line"><span class="attr">default</span>=user</span><br><span class="line"></span><br><span class="line"><span class="section">[network]</span></span><br><span class="line"><span class="attr">generateResolvConf</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>その後は一度WSL2を再起動します（そうしないとresolve.confが再生してしまった）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wsl --shutdown</span><br></pre></td></tr></table></figure><p>次は&#x2F;etc&#x2F;resolv.confを編集します</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wsl -d podman-machine-default</span><br><span class="line"></span><br><span class="line">(wsl2起動)</span><br><span class="line"></span><br><span class="line">$ sudo vi /etc/resolv.conf</span><br></pre></td></tr></table></figure><figure class="highlight text"><figcaption><span>/etc/resolv.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver プロキシのIPアドレス</span><br></pre></td></tr></table></figure><p>一度WSL2から出て再度入りなおしても編集したresolv.confが残っていることを確認しておきます。</p><p>最後にpodmanのサーバーを再起動してからプロキシ越しにイメージをとってきて実行できるか確認します。<code>docker</code>を<code>podman</code>に読み替えるだけで使えます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ podman machine stop</span><br><span class="line">$ podman machine start</span><br><span class="line">$ podman run --rm hello-world</span><br><span class="line">!... Hello Podman World ...!</span><br><span class="line"></span><br><span class="line">         .--&quot;--.</span><br><span class="line">       / -     - \</span><br><span class="line">      / (O)   (O) \</span><br><span class="line">   ~~~| -=(,Y,)=- |</span><br><span class="line">    .---. /`  \   |~~</span><br><span class="line"> ~/  o  o \~~~~.----. ~~</span><br><span class="line">  | =(X)= |~  / (O (O) \</span><br><span class="line">   ~~~~~~~  ~| =(Y_)=-  |</span><br><span class="line">  ~~~~    ~~~|   U      |~~</span><br><span class="line"></span><br><span class="line">Project:   https://github.com/containers/podman</span><br><span class="line">Website:   https://podman.io</span><br><span class="line">Documents: https://docs.podman.io</span><br><span class="line">Twitter:   @Podman_io</span><br></pre></td></tr></table></figure><h1 id="コンテナレジストリの設定"><a href="#コンテナレジストリの設定" class="headerlink" title="コンテナレジストリの設定"></a>コンテナレジストリの設定</h1><p>デフォルトのPodmanは、docker.io以外のところからダウンロードしようとしたり、いくつかのイメージ名にエイリアスが張られていたりします。さきほどのhello-world、Dockerのhello-worldと違うことに気づいた方もいるでしょう。hello-worldは<code>quay.io/podman/hello</code>を代わりにプルしてきます。</p><p>dockerのものを使うにはレジストリを変更します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wsl -d podman-machine-default</span><br><span class="line"></span><br><span class="line">(wsl2起動)</span><br><span class="line"></span><br><span class="line">$ sudo vi /etc/containers/registries.conf</span><br></pre></td></tr></table></figure><p>次のように変更します。これでdocker.ioのイメージだけを取得します。また、CONTAINERS_SHORT_NAME_ALIASING&#x3D;onを設定しておくと、<code>docker.io/hello-world</code>ではなく、<code>hello-world</code>で動作するようになります。とはいえ、短縮名は<a href="https://www.redhat.com/sysadmin/container-image-short-names">リスクがあるよ</a>とドキュメント化されていたりするので、確認の上ご利用ください。今回はあくまでもDocker Desktopを入れるまでのつなぎなので、互換性が高い方が良いな、ということでやっています。</p><figure class="highlight toml"><figcaption><span>/etc/containers/registries.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">unqualified-search-registries</span> = [<span class="string">&quot;docker.io&quot;</span>]</span><br><span class="line"><span class="section">[engine]</span></span><br><span class="line"><span class="attr">env</span>=[<span class="string">&quot;CONTAINERS_SHORT_NAME_ALIASING=on&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">short-name-mode</span>=<span class="string">&quot;enforcing&quot;</span></span><br></pre></td></tr></table></figure><p>それではまたpodmanを再起動してから、今度はNginxを起動してみます。<code>http://localhost:8888/</code>で起動したら完了です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ podman machine stop</span><br><span class="line">$ podman machine start</span><br><span class="line">$ podman run --rm -it -p 8888:80 nginx</span><br></pre></td></tr></table></figure><img src="/images/20221227a/image_3.png" alt="image.png" width="1200" height="548" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Docker Desktopはいろいろな開発者にうれしい機能がたくさん追加されて、積極的に開発されていて、便利ですし、今回やったようなWSL2に入ってプロキシサーバーにつながるような設定をしなくてもアクセスできたりして便利なのですが、ちょびっと検証する目的でPodman Desktopを代わりに実行する方法を紹介しました。プロキシの裏でも動作するようになりました。</p><p>まあ、世の中のドキュメントはDockerを使うように書かれていたりするので、トラブルシュートとかを考えると頻繁使う人はDocker Desktopをきちんと入れた方が良いですね。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Docker/">Docker</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7/">プロキシ</category>
      
      <category domain="https://future-architect.github.io/tags/Podman/">Podman</category>
      
      
      <comments>https://future-architect.github.io/articles/20221227a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ITコンサルが教える銀行業務シリーズ part1 超入門編</title>
      <link>https://future-architect.github.io/articles/20221226a/</link>
      <guid>https://future-architect.github.io/articles/20221226a/</guid>
      <pubDate>Sun, 25 Dec 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;金融サービス事業部の山口です。&lt;/p&gt;
&lt;p&gt;この記事は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>金融サービス事業部の山口です。</p><p>この記事は<a href="/articles/20220616a/">「業界ドメインに詳しくなろう」シリーズ連載</a>の「銀行業務」超入門編です。<br>銀行業界を目指す学生さん、銀行業界にアサインされた若手SIer、他業種で活躍するITコンサルの方向けになります。</p><p>インフラエンジニアから銀行系ITコンサルにキャリアチェンジした私が、その道20年のキャリアを誇る安本大先輩の力を借りて、銀行業務について記載していきます。</p><h1 id="ITコンサルが教える銀行業務シリーズ-銀行業務とは"><a href="#ITコンサルが教える銀行業務シリーズ-銀行業務とは" class="headerlink" title="ITコンサルが教える銀行業務シリーズ　銀行業務とは"></a>ITコンサルが教える銀行業務シリーズ　銀行業務とは</h1><p>銀行業務をお話する前に、なぜ「銀行」と呼ばれるようになったのはご存知でしょうか。</p><p>明治の世が始まって間もなく、「Bank」という英単語を日本語に何と訳すかという話の中で、「お金（金銀）を取り扱う」と中国語で「店」を意味する「行」を組み合わせて、「金行」・「銀行」という案が出て、語呂の良さから「銀行」に決まったと言われています。</p><p>２０２１年の大河ドラマ<a href="https://www.nhk.jp/p/seiten/ts/61Z4879Q1K/">「晴天を衝け」</a>の中では、日本初の銀行の頭取に就任した渋沢栄一が「銀行」🏦と名付けたというお話になっていましたし、実際にそんな一説があるという記事も見かけますが実際のところはどうなのでしょうね。<br>ともあれ銀行という単語は作られてからまだ１５０年くらいの比較的浅い単語のようです😄</p><p>本題の銀行業務にお話を移しましょう。</p><p>銀行における伝統的な業務は「預金」「融資」「為替」となります。(昨今の銀行は業務範囲を拡大してきてます。)</p><img src="/images/20221226a/ginko_gyomu.PNG" alt="ginko_gyomu.PNG" width="663" height="452" loading="lazy"><h2 id="銀行の利益構造"><a href="#銀行の利益構造" class="headerlink" title="銀行の利益構造"></a>銀行の利益構造</h2><p>銀行は、預金者からお金を預り、そのお金を必要とする企業・個人へ貸し出しています。</p><p>言わばお金という商材を預金によって仕入れ、またお金を必要としている人に貸出という形で販売するビジネスモデルです。</p><p>顧客の日々のお金のやり取り（決済や振込など）を円滑・確実に行い日常的な経済活動を支えており、社会的インフラを担う公共性の高い業種です。とはいえ、銀行は株式会社であり民間企業であり、しっかり利益を出す必要があります。</p><p>銀行はどうやって収益を得ているかというと、預金者から集めたお金を、融資という形で企業や個人に貸し付けを行い、この融資によって発生した利子で利益を得る構造となっています。</p><img src="/images/20221226a/image.png" alt="image.png" width="1140" height="592" loading="lazy"><h2 id="預金業務"><a href="#預金業務" class="headerlink" title="預金業務"></a>預金業務</h2><p>バブル崩壊後においては超低金利時代とも言われており、銀行が融資することによって稼げる利子は大きく圧迫を受けており、銀行の収益モデルについては非常に厳しい状況となっています。</p><p>金融緩和政策によって世の中にお金が余っている状況が長く続いており、お金を預けたい（運用したい）人（＝供給）と、お金を必要としている人（＝需要）のバランスが供給過多の状況となっており、金利が低く維持された状態になっております。こうしたことが、私達一般市民にも少なからず影響が出てきています。</p><p>例えば、銀行口座を開設すると当たり前のように通帳をもらい、キャッシュカードをもらいます。通帳が全て印字し終わるとこれもまた当たり前のように次の通帳が発行され、その通帳発行に際してお金を請求されることはありませんでした。ところが、銀行の収益構造が非常に厳しくなってきたことや、スマートフォンなどのデジタル機器の普及も相まって有料化の動きが始まっています。三菱UFJ銀行においては、2022年4月以降紙としての通帳を発行する都度数百円の費用がかかるようになりました。</p><p>こうした動きは着実に広がってきています。各銀行が○○銀行アプリといったものを提供しそちらへ移行を促すCMなどを出しているのは上記のような背景があるといえます。</p><p>一方で、上述した三菱UFJ銀行において、デジタル機器を扱うのが苦手あるいはまだ与えられていないという未成年や高齢者については無償とするなど、完全有償化に向けては過渡期を経ながらということになっていきそうです。<br>なお、普通預金の平均金利は0.001%（<a href="https://www.stat-search.boj.or.jp/ssi/mtshtml/ir02_m_1.html">日本銀行 時系列統計データ 検索サイト</a>より ）となっており、預金者の皆さんに還元される金利も同様にごく僅かなものとなってしまっているのもこうした収益構造の問題から発生してしまっています。</p><h2 id="融資業務"><a href="#融資業務" class="headerlink" title="融資業務"></a>融資業務</h2><p>融資に関しても同様です。例えば住宅ローンで、一部のネット銀行でしか金利1%を割るようなローンはなかったのに、今や全国の地方銀行で団信・三大疾病特約までついて金利1%を割るような商品が当たり前のように出てきています。銀行は以前にも増して非常に薄い利ざやで確実に稼ぐことが求められているのです。</p><p>それなのに、貸し付けたにもかかわらず、企業が倒産するなどして貸したお金が返済されないケースが発生してしまうのです。1000万円を年利5%で10先に貸すと、銀行にはざっくり1年間で500万円の収益が生まれるわけですが、10先のうち1先でも貸し倒れが発生してしまえば銀行の損失はあっという間に－500万円となってしまいます。薄い利ざやで確実に稼がなければならないのに、こんなことが起こっては銀行にとって泣きっ面に蜂🐝状態です❗</p><img src="/images/20221226a/image_2.png" alt="image.png" width="1082" height="575" loading="lazy"><p>このため、銀行が融資を行う際には、融資先の業績や信用・将来性をしっかり審査した上で融資を行う必要性があります。ローン審査などで断られてしまい、お金を借りたいのに貸してくれない！なんて感じたことがある方もいらっしゃるかもしれませんが、銀行としても生き残りをかけて必死な状況なんですよね。</p><h2 id="為替業務"><a href="#為替業務" class="headerlink" title="為替業務"></a>為替業務</h2><p>為替については、おそらく皆さんも一度は使ったことがあるサービスで、会社間あるいは個人間での資金移動であったり、光熱費などの各種費用の引き落としなどを行っています。お金のやり取りについては、日本国内に限らず、円・ドルなどの通貨が異なる銀行間での入出金についても銀行では対応しています。</p><p>今でこそ銀行の窓口へ行かずとも、バンキングアプリやすぐ近くにあるコンビニATMなどを利用することで当たり前のように預金サービスや為替サービスを受けていると思います。融資の申込みもバンキングアプリから直接申し込みができるようなサービスも増えてきましたね。</p><p>従来の銀行口座を介した資金移動は手数料の高さから敬遠され、個人間の少額送金は各決済アプリによる送金サービスに代替され始めているのが現状です。皆さんも飲み会の割り勘をするのに決済アプリの送金サービスを使うことが増えていませんか？とは言え、給与振込等のしっかりとした信頼性を求められるものはまだまだ、銀行が活用されてますね。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>銀行という言葉の歴史は浅いですが、我々には深い存在であるということがお判りいただけたでしょうか。</p><p>日本や地域の経済を循環させるような血液のような役割を担っているのが銀行です。銀行はお金という企業・個人にとって非常に重要なものを取り扱う社会的責任の大きさもあって、株式会社として一般に定められている会社法・労働基準法等の法規制はもちろん、銀行法といった形で多くの規制を課されている業種です。</p><p>また、長引く低金利環境下における利ざやの縮小、様々なプレーヤーが決済領域に参加する事での資金移動手段の変化、決済手数料の減少と、現在の銀行を取り巻く環境は大きな転換点を迎えている事も業界の概要・トレンドをつかむ上で重要なポイントだと思います。</p><p>今後は以下も予定してます。</p><ul><li>ITコンサルが教える銀行業務シリーズ　半沢直樹でも有名な営業活動</li><li>ITコンサルが教える銀行業務シリーズ　融資の要！融資審査①　何を気にする？銀行員　～法人融資編～</li><li>ITコンサルが教える銀行業務シリーズ　融資の要！融資審査②　何を気にする？銀行員　～個人融資(ローン)編～</li><li>ITコンサルが教える銀行業務シリーズ　融資の要！融資審査③　何を気にする？銀行員　～担保や保証編～</li><li>ITコンサルが教える銀行業務シリーズ　貸したら終わりではない　定期的にチェック自己査定</li><li>ITコンサルが教える銀行業務シリーズ　変化と不変　変わりゆく銀行文化と変わらない銀行文化</li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9/">ビジネス</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%8A%80%E8%A1%8C/">銀行</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A5%AD%E5%8B%99%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3/">業務ドメイン</category>
      
      
      <comments>https://future-architect.github.io/articles/20221226a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>俺のシステムがこんなに脆弱性だらけのわけがない(linkedpackageの紹介)</title>
      <link>https://future-architect.github.io/articles/20221223a/</link>
      <guid>https://future-architect.github.io/articles/20221223a/</guid>
      <pubDate>Thu, 22 Dec 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221223a/top.jpg&quot; alt=&quot;&quot; width=&quot;842&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221223a/top.jpg" alt="" width="842" height="523"><p>セキュリティに対して、きちんとお金をかけて対応すべきである、というのが近年の風潮です。そんな中、システム開発では多くのオープンソースのコンポーネントを組み合わせてシステムを構築するようになってきたため、使っている部品の脆弱性管理、というのがかなり大きな市場になってきました。</p><p>当社にはOSSの<a href="https://vuls.io/">Vuls</a>と、それに脆弱性管理の手間を減らしてくれる<a href="https://vuls.biz/">FutureVuls</a>というSaaSサービスがあります。コンテナのスキャンだとAqua Securityの<a href="https://trivy.dev/">Trivy</a>が有名ですね。</p><p>開発中のアプリケーションのスキャナーというと、Node.jsのnpmコマンドが脆弱なパッケージの検知機能（auditサブコマンド）を内蔵していますし、Goも<a href="https://vuln.go.dev/">公式脆弱性管理データベース</a>のページを作り、新しい仕組みを構築しようとしています(<a href="https://go.dev/security/vuln/">ドキュメント</a>、<a href="https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck">準標準のチェックコマンド</a>)。言語をまたいで使えるものには<a href="https://snyk.io/">snyk</a>もありますね。</p><h1 id="フォールスポジティブ（偽陽性）を減らす"><a href="#フォールスポジティブ（偽陽性）を減らす" class="headerlink" title="フォールスポジティブ（偽陽性）を減らす"></a>フォールスポジティブ（偽陽性）を減らす</h1><p>Node.jsでの開発は4桁ぐらいパッケージに依存することがありえます。npm auditで少しでも古いパッケージを使うと大量の脆弱性が報告されることがあります。でも、よくよく見てみると実は関係ないのかな？とも思えるような脆弱性もたくさん出てきますが、なかなか判定を1つ1つ行うのは大変です。</p><p>ですが、アプリケーションの開発でいうと、「パッケージリストには追加してみたのだけど、実際には使っていないパッケージ」などがあったりします。Goだとgo mod tidyでお掃除してくれますが。あとは開発用に追加したもので、本番コードにはリンクされていないものもあります。Node.jsなんかは、ほとんどはそうなんじゃないですかね。</p><p>あとは、脆弱性がヒットしたとしても、そのパッケージ中の一部の機能は使っているが該当する機能は使っていない、ということもあります。そのため、実際にビルドしたアプリケーションに含まれるソースコードでフィルタリングしたらいいんじゃないか、と思って実証実験的に作ったパッケージが次のものです。</p><p><a href="https://github.com/future-architect/linkedpackage">https://github.com/future-architect/linkedpackage</a></p><p>神戸さんからメッセージもらうまでは、作ったことをすっかり忘れていて、とりあえず公開だけしたのが上のリポジトリです。ライセンスはひとまずVulsにあわせてGPLにしています。とりあえず公開だけしたのでREADMEもないですが</p><h1 id="処理の方法"><a href="#処理の方法" class="headerlink" title="処理の方法"></a>処理の方法</h1><p>現時点ではJavaScriptのプロジェクトに限定した機能になっています。ソースマップをざっとスキャンして、実行ファイルに含まれるソース片を提供しているパッケージを取り出します。コマンドとしても動かせるようにしてあり、linkedpackage auditコマンドを使うと、npm auditの結果を、利用パッケージに限定してフィルタリングして表示、みたいなことができます。</p><p>ソースマップ中のパス表記は、その中で識別子が認識一致していたら問題はないと思うのですが、実際のソースコードとリンクさせるには逆変換が必要かなと思っています。ツールによって出てくるパス表記がいろいろあるので、これを地道に拾ってモジュール名を拾うようにしています。地道さが必要ですね。</p><ul><li><code>webpack:///./node_modules/@babel/runtime/helpers/wrapNativeSuper/_index.mjs</code></li><li><code>../webpack:/ncc-project/node_modules/trim/index.js</code></li><li><code>webpack://_N_E/ignored|/prj/node_modules/next/dist/shared/lib/router|./utils/resolve-rewrites</code></li></ul><h1 id="今後"><a href="#今後" class="headerlink" title="今後"></a>今後</h1><p>Goも<a href="https://pkg.go.dev/debug/buildinfo@go1.19.4#Read">debugパッケージ</a>使えば実行ファイルから、利用しているモジュール一覧が取れるので行けそうですね。そのうち作ろうかな。</p><p>ただ、実行ファイルに入っているからといって、それがまた実行されるわけではない、というのはあります。JavaScriptだとtree shakingという最適化がありますが完璧にフィルタリングできるわけではありません。Goはそこまで積極的なCode Eliminationはしてない印象がありますし、グローバル変数を含めinit()から参照されるオブジェクトなんかは使ってなくてもリンクされてしまいます。Goは1.20から<a href="https://go.googlesource.com/proposal/+/master/design/55022-pgo.md">プロファイラ機能とリンクしたオプティマイザ</a>が入ります。この情報が外部のツールから使えるかどうかはわからないですが、実際に実行されている行だけ取り出せれば、また精度の高いフィルタリングができるんじゃないかな、と思っています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Security/">Security</category>
      
      
      <category domain="https://future-architect.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://future-architect.github.io/tags/Node-js/">Node.js</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%84%86%E5%BC%B1%E6%80%A7/">脆弱性</category>
      
      <category domain="https://future-architect.github.io/tags/npm/">npm</category>
      
      
      <comments>https://future-architect.github.io/articles/20221223a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MSAL.jsで開発時は認証スキップしたい</title>
      <link>https://future-architect.github.io/articles/20221220a/</link>
      <guid>https://future-architect.github.io/articles/20221220a/</guid>
      <pubDate>Mon, 19 Dec 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221220a/azuread.jpg&quot; alt=&quot;&quot; width=&quot;700&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221220a/azuread.jpg" alt="" width="700" height="298"><p>MSAL.jsはとても便利なライブラリです。前に書いたエントリーで説明しましたが、AzureAD側の設定は必要ですが、コードへの組み込みもすぐです。コールバックを受けるバックエンドサーバーの用意も不要で、フロントエンドだけで認証が完結します。</p><ul><li><a href="https://future-architect.github.io/articles/20221118a/">https://future-architect.github.io/articles/20221118a/</a></li></ul><p>ですが、開発時にAzureADがない場合もありますし、開発者全員が開発で使うAzureADにユーザー登録されていないかもしれません。また、権限ごとにいろんなユーザーを用意してテストできるようにしたいとかのニーズもあると思います。また、E2Eテストで毎回認証をすると遅いとか、コールバックを受けるコードがGitHub Actionsではうまく動かず実AzureAD認証を組み込むのが難しいとか、認証をスキップしたいニーズもいろいろあるため、開発時にはMSAL.jsをスキップできるようにしてみます。</p><h1 id="設定の外だし"><a href="#設定の外だし" class="headerlink" title="設定の外だし"></a>設定の外だし</h1><p>前回はハードコードしましたが、AzureADの接続情報などは.envで設定を流し込むべきですので、別ファイルに切り出します。各フレームワークごとに、ブラウザに環境変数を公開するには、キーの名前のルールがあります。<a href="https://cli.vuejs.org/guide/mode-and-env.html">Vue.jsであればVUE_APP_</a>を前につけますし、<a href="https://ja.vitejs.dev/guide/env-and-mode.html">Vite.jsだとVITE_</a>をつけますし、<a href="https://nextjs.org/docs/basic-features/environment-variables">Next.jsだとNEXT_PUBLIC_</a>ですね。これらの設定はサーバーではなくてフロントエンド側なので、それらのルールに従った名前にします。Vue.jsだったら次の通り。</p><figure class="highlight bash"><figcaption><span>.env</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_AZURE_DUMMY_USER=dummy-user@example.com</span><br><span class="line">VUE_APP_AZURE_ISSUER=https://login.microsoftonline.com/<span class="variable">$&#123;テナントID&#125;</span>,</span><br><span class="line">VUE_APP_AZURE_APP_ID=<span class="variable">$&#123;アプリケーションID&#125;</span></span><br></pre></td></tr></table></figure><p>これらの設定を使うようにします。コールバックのURLは現在実行中のホストの<code>/callback</code>を向くように動的にパスを作っています。このパスをAzureAD側の設定にも入れる想定です。</p><figure class="highlight ts"><figcaption><span>authConfig.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Configuration</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@azure/msal-browser&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">Configuration</span> = &#123;</span><br><span class="line">    <span class="attr">auth</span>: &#123;</span><br><span class="line">        <span class="attr">authority</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_ISSUER</span>,</span><br><span class="line">        <span class="attr">clientId</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_APP_ID</span>,</span><br><span class="line">        <span class="attr">redirectUri</span>: <span class="string">`<span class="subst">$&#123;location.protocol&#125;</span>//<span class="subst">$&#123;location.host&#125;</span>/callback`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">cache</span>: &#123;</span><br><span class="line">        <span class="attr">cacheLocation</span>: <span class="string">&quot;localStorage&quot;</span>,</span><br><span class="line">        <span class="attr">storeAuthStateInCookie</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="テストユーザー対応"><a href="#テストユーザー対応" class="headerlink" title="テストユーザー対応"></a>テストユーザー対応</h1><p>MSAL.jsを使うと、AzureADで認証してJWTトークンを作って返してくれます。それをそのままサーバーにも渡し、サーバー側でIDを取り出して使います。開発用モードを作るとして大幅なif分岐などは作りたくはないですよね？</p><ul><li>ダミーのJWTは作り、IDが分かるようにする</li><li>ただしAzureADの証明書での署名はできないので、署名の確認はサーバーではあきらめる</li></ul><p>AzureADのトークンを使う場合</p><p>今回は開発用のテストユーザーを環境変数から設定できるようにします。</p><figure class="highlight bash"><figcaption><span>.env.development</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_AZURE_DUMMY_USER=dummy-user@example.com</span><br></pre></td></tr></table></figure><p>ブラウザ上でダミーのJWTを作るためにjoseパッケージを使います。これはブラウザで使えますが、npmパッケージのほとんどはNode.jsの機能を使っていてブラウザで使えないものが多かったです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install jose</span><br></pre></td></tr></table></figure><p>前回と違うところを主にサンプルとして提示しています。</p><p>ログインではダミーユーザーがあるかどうかで条件判断を行い、ダミーユーザーがいたらJWTを作って返しています。内容はだいたいAzureADが作っているものに似せるようにはしています（完全ではない）。</p><p>AzureADのトークンはsubではUUIDのようなコードが入っています。おそらくサーバー側でログインしたユーザーのIDをもとに権限管理をしたりするのであれば、<code>preferred_username</code>に入っているメールアドレスを使うことになるんじゃないかと思います。AzureAD側の設定でIDトークンに入れるクレームを増やして、<code>email</code>クレームを足したりもできるようです。</p><figure class="highlight ts"><figcaption><span>authPlugin</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 追加</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UnsecuredJWT</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;jose&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前回はaccessTokenだったがidTokenに変更</span></span><br><span class="line"><span class="keyword">let</span> idToken = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前回のloginメソッドの修正</span></span><br><span class="line"><span class="keyword">async</span> login () &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_DUMMY_USER</span>) &#123; <span class="comment">// ダミーユーザーモード</span></span><br><span class="line">    <span class="keyword">const</span> jwt = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">UnsecuredJWT</span>(&#123;</span><br><span class="line">      <span class="attr">idp</span>: <span class="string">&#x27;https://sts.windows.net/....&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Dummy User(ダミー ユーザー)&#x27;</span>,</span><br><span class="line">      <span class="attr">preferred_username</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_DUMMY_USER</span>,</span><br><span class="line">      <span class="attr">sub</span>: <span class="title function_">btoa</span>(process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_DUMMY_USER</span>), <span class="comment">// ナチュラルキーっぽくする</span></span><br><span class="line">      <span class="attr">ver</span>: <span class="string">&#x27;2.0&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">      .<span class="title function_">setIssuer</span>(<span class="string">`<span class="subst">$&#123;process.env.VUE_APP_AZURE_ISSUER&#125;</span>/v2.0`</span>)</span><br><span class="line">      .<span class="title function_">setAudience</span>(process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_APP_ID</span>)</span><br><span class="line">      .<span class="title function_">setIssuedAt</span>()</span><br><span class="line">      .<span class="title function_">setExpirationTime</span>(<span class="string">&#x27;1h&#x27;</span>)</span><br><span class="line">      .<span class="title function_">setNotBefore</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() / <span class="number">1000</span>)</span><br><span class="line">      .<span class="title function_">encode</span>()</span><br><span class="line">    idToken = jwt</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 本番モード</span></span><br><span class="line">    <span class="keyword">if</span> (_auth.<span class="title function_">getAllAccounts</span>().<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      _auth.<span class="title function_">setActiveAccount</span>(_auth.<span class="title function_">getAllAccounts</span>()[<span class="number">0</span>])</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> _auth.<span class="title function_">acquireTokenSilent</span>(&#123;</span><br><span class="line">        <span class="attr">scopes</span>: [<span class="string">`<span class="subst">$&#123;process.env.VUE_APP_AZURE_APP_ID&#125;</span>/.default`</span>],</span><br><span class="line">        <span class="attr">redirectUri</span>: config.<span class="property">auth</span>.<span class="property">redirectUri</span></span><br><span class="line">      &#125;)</span><br><span class="line">      idToken = result.<span class="property">idToken</span></span><br><span class="line">      <span class="keyword">return</span> idToken</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _auth.<span class="title function_">acquireTokenRedirect</span>(&#123;</span><br><span class="line">        <span class="attr">redirectStartPage</span>: location.<span class="property">href</span>,</span><br><span class="line">        <span class="attr">scopes</span>: [<span class="string">`<span class="subst">$&#123;process.env.VUE_APP_AZURE_APP_ID&#125;</span>/.default`</span>],</span><br><span class="line">        <span class="attr">redirectUri</span>: config.<span class="property">auth</span>.<span class="property">redirectUri</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!process.<span class="property">env</span>.<span class="property">AZURE_DUMMY_USER</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _auth.<span class="title function_">logoutRedirect</span>(&#123;</span><br><span class="line">      <span class="attr">postLogoutRedirectUri</span>: <span class="string">`<span class="subst">$&#123;location.protocol&#125;</span>//<span class="subst">$&#123;location.host&#125;</span>/`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで、AzureADがあるふりをしてそれっぽいIDトークンを作って返すコードができました。</p><p>サーバー側ではリクエストを受けるときにこのトークンを受けることになります。サーバー側も環境変数で少し動作をコントロールして、テストモードの時には署名の検証は行わない必要がありますが、expiration time(exp)、not before(nbf)、aud、issといったクレームを使った検証は可能です。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ログインが必要なサービスで、開発時にログイン回りをどう処理すればいいのか、というのはいつも悩むポイントです。いろんなログイン方式が使えるサーバーであればID&#x2F;パスワードでログインする機構を別に作ったり、本番同等の認証サーバーを立てて、テストユーザーを入れるなどもあるでしょう。ですが、外部システムへの依存があると結合テストやCIがやりにくくなったりもしますし、処理時間も伸びてしまいます。あと、せっかくMSAL.jsを使えば認証の組み込みが簡単なのに、認証回り以外にたくさんのif文が入るのもうれしくありません。</p><p>今回はテスト用にAzureADのログインをバイパスしダミーのJWTを作るという方向で実装しました。比較的影響範囲をログイン回りに閉じ込めつつ実装できたんじゃないかな、と思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/">認証認可</category>
      
      
      <category domain="https://future-architect.github.io/tags/Azure/">Azure</category>
      
      <category domain="https://future-architect.github.io/tags/MSAL-js/">MSAL.js</category>
      
      <category domain="https://future-architect.github.io/tags/AzureAD/">AzureAD</category>
      
      
      <comments>https://future-architect.github.io/articles/20221220a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>tree-sitter文法入門</title>
      <link>https://future-architect.github.io/articles/20221215a/</link>
      <guid>https://future-architect.github.io/articles/20221215a/</guid>
      <pubDate>Wed, 14 Dec 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221215a/tree-sitter-small.png&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;

&lt;p&gt;こちらは&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221215a/tree-sitter-small.png" alt="" width="400" height="400"><p>こちらは<a href="https://qiita.com/advent-calendar/2022/postgresql">PostgreSQL Advent Calendar 2022</a> カレンダー2枚目・15日目の投稿となります。<br>前回は、<a href="https://qiita.com/hmatsu47">@hmatsu47</a>さんの<a href="https://qiita.com/hmatsu47/items/8de48e81a660eabe4bf0">Supabase で TCE（透過的列暗号化）を軽く試してみた</a>でした。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、フューチャーでアルバイトをしている齋藤です。以前は同社のインターンでSQLフォーマッタを作成していました(<a href="/articles/20220916b/">記事</a>)。現在はインターン中に作成していたSQLフォーマッタをPostgreSQLの構文に対応させる作業に取り組んでいます。</p><p>このフォーマッタではSQLパーサにtree-sitter-sqlを利用していますが、対応していない構文がいくつか存在します。本記事では、未対応の構文であるBETWEEN述語を例に、tree-sitterの構文拡張の手順を紹介します。開発中のSQLフォーマッタはOSS公開予定ですので、ぜひ仲間を増やしたいという思いから記事にしました。</p><p>また、現在作成中のフォーマッタのVSCode拡張機能化にも取り組んでいます。ぜひそちらも併せてご覧ください！</p><p>VSCode拡張機能化に関する記事:</p><ol><li><a href="/articles/20221124a/">Language Server Protocolを用いたVSCode拡張機能開発 (前編) | フューチャー技術ブログ</a></li><li><a href="/articles/20221125a/">Language Server Protocolを用いたVSCode拡張機能開発 (後編) | フューチャー技術ブログ</a></li></ol><h1 id="アウトライン"><a href="#アウトライン" class="headerlink" title="アウトライン"></a>アウトライン</h1><p>本記事のアウトラインは以下の通りです。</p><ol><li>tree-sitter、tree-sitter-sqlについて</li><li>tree-sitterの構文拡張用の環境構築</li><li>構文木を出力するプログラムの実装</li><li>構文についての説明</li><li>BETWEEN述語の規則を追加</li></ol><h1 id="tree-sitter"><a href="#tree-sitter" class="headerlink" title="tree-sitter"></a>tree-sitter</h1><p><a href="https://tree-sitter.github.io/tree-sitter/">tree-sitter</a>は文法からパーサ(構文解析器)を自動生成するパーサジェネレータツールであり、生成されたパーサで構文解析を行うライブラリでもあります。特徴として、一般的なパーサライブラリでは抽象構文木(AST)を構築するのに対し、tree-sitterで生成されたパーサは具象構文木(CST)を構築するという点があげられます。CSTについては<a href="/articles/20220916c/#:~:text=AST%E3%81%8C%E6%84%8F%E5%91%B3%E3%81%AE%E3%81%AA%E3%81%84%E6%83%85%E5%A0%B1(%E4%BE%8B:%20%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%82%84%E5%A4%9A%E9%87%8D%E6%8B%AC%E5%BC%A7%E3%81%AA%E3%81%A9)%E3%82%92%E4%BF%9D%E6%8C%81%E3%81%97%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E3%80%81CST%E3%81%AF%E3%81%9D%E3%81%AE%E3%82%88%E3%81%86%E3%81%AA%E6%83%85%E5%A0%B1%E3%82%82%E4%BF%9D%E6%8C%81%E3%81%97%E3%81%BE%E3%81%99%E3%80%82">インターンの記事</a>で取り上げています。</p><p>構築されるCSTにはコメントトークンも含まれてるため、シンタックスハイライトに用いられているようです。<br>参考:</p><ul><li><a href="https://www.soum.co.jp/misc/vim-advanced/6/">Vimのすゝめ改 - Tree-sitter について | 株式会社創夢 — SOUM&#x2F;misc</a></li><li><a href="https://zenn.dev/hyakt/articles/6ff892c2edbabb">EmacsでTree-sitterを利用してシンタックスハイライトできるようにする</a></li></ul><h1 id="tree-sitter-sql"><a href="#tree-sitter-sql" class="headerlink" title="tree-sitter-sql"></a>tree-sitter-sql</h1><p><a href="https://github.com/m-novikov/tree-sitter-sql">tree-sitter-sql</a>はtree-sitter用に書かれたSQLの文法とその文法によって生成されたパーサライブラリです。SQLの中でも、PostgreSQLにフォーカスしていたようです。インターンで作成したフォーマッタは、このライブラリによる構文解析結果をもちいてSQLのフォーマットを行っています。</p><p>しかし、BETWEEN述語や<code>UNION</code>、<code>INTERSECT</code>などの結合演算など、基本的な構文であるにもかかわらず、対応していない構文が存在します。本記事では、その中でもBETWEEN述語に対応させるための構文拡張を行います。</p><h1 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h1><p>まず、tree-sitterの構文拡張のために行った環境構築について説明します。</p><h3 id="tree-sitter-cliのインストール"><a href="#tree-sitter-cliのインストール" class="headerlink" title="tree-sitter-cliのインストール"></a>tree-sitter-cliのインストール</h3><p>tree-sitterでパーサを生成するために、tree-sitter-cliをインストールします(参考<a href="https://tree-sitter.github.io/tree-sitter/creating-parsers#getting-started">Tree-sitter | Creating Parser</a>)。また、tree-sitterによるパーサを開発するためには、Node.jsとCコンパイラが必要です。今回使用したバージョンは以下の通りです。</p><div class="scroll"><table><thead><tr><th>tools</th><th>バージョン</th></tr></thead><tbody><tr><td>node</td><td>16.17.1</td></tr><tr><td>gcc</td><td>12.2.0</td></tr><tr><td>tree-sitter</td><td>0.20.7</td></tr></tbody></table></div><h3 id="tree-sitter-sqlのインストール"><a href="#tree-sitter-sqlのインストール" class="headerlink" title="tree-sitter-sqlのインストール"></a>tree-sitter-sqlのインストール</h3><p><a href="https://github.com/m-novikov/tree-sitter-sql">tree-sitter-sql</a>をcloneします。tree-sitter用のSQL構文はいくつかありますが、今回は最もスター数が多いものを選択しました。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/m-novikov/tree-sitter-sql.git</span></span><br></pre></td></tr></table></figure><p><code>git clone</code>を行うと、以下のようなエラーが発生する場合があります。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: unable to create file [filepath]: Filename too long</span><br></pre></td></tr></table></figure><p>これはファイル名が長すぎることが問題であるようなので、以下の設定を行うことで解決します。</p><figure class="highlight console"><figcaption><span>gitの設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.longpaths <span class="literal">true</span></span></span><br></pre></td></tr></table></figure><p><code>git clone</code> したtree-sitter-sqlのルートディレクトリで、<code>tree-sitter test</code> コマンドでテストが動作したら環境構築終了です。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ./tree-sitter-sql</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree-sitter <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><h3 id="構文解析例"><a href="#構文解析例" class="headerlink" title="構文解析例"></a>構文解析例</h3><p>実際にパースしてみましょう。以下のファイルを用意します。</p><figure class="highlight sql"><figcaption><span>exapmles/simple.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT</span><br></pre></td></tr></table></figure><p><code>tree-sitter parse</code>コマンドで、ソースファイルをパースすることができます。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ tree-sitter parse ./exapmles/simple.sql</span><br><span class="line">(<span class="name">source_file</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]</span><br><span class="line">  (<span class="name">select_statement</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]</span><br><span class="line">    (<span class="name">select_clause</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>]</span><br><span class="line">      (<span class="name">select_clause_body</span> [<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>]</span><br><span class="line">        (<span class="name">identifier</span> [<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>])))</span><br><span class="line">    (<span class="name">from_clause</span> [<span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]</span><br><span class="line">      (<span class="name">identifier</span> [<span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]))))</span><br></pre></td></tr></table></figure><h1 id="CSTの出力について"><a href="#CSTの出力について" class="headerlink" title="CSTの出力について"></a>CSTの出力について</h1><p>上述した<code>tree-sitter parse</code>により出力される結果では、ノードのラベルのみ表示されており、識別子やキーワードなどが表示されません。そこで、パース結果からCSTを出力する処理を自作しました。</p><p>言語にはRustを使用します。</p><h3 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h3><p><code>tree-sitter-sql</code>の結果を利用してCSTを出力するためのプロジェクトを作成します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new print-cst</span><br></pre></td></tr></table></figure><p><code>Cargo.toml</code>に次の依存関係を追加します。</p><figure class="highlight toml"><figcaption><span>print-cst/Cargo.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">tree-sitter</span> = <span class="string">&quot;~0.20.3&quot;</span></span><br><span class="line"><span class="attr">tree-sitter-sql</span> = &#123;path = <span class="string">&quot;&#123;tree-sitter-sqlのパス&#125;&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>また、Github上のtree-sitter-sqlが使用しているtree-sitterのバージョンが古い(2022年11月22日現在)ため、tree-sitter-cliとtree-sitterのバージョン不整合が生じる可能性があります。バージョン不整合が生じるとき、後述するプログラムを実行すると以下のような実行時エラーが発生します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thread &#x27;main&#x27; panicked at &#x27;called `Result::unwrap()` on an `Err` value: LanguageError &#123; version: 14 &#125;&#x27;, src\lib.rs:16:35</span><br><span class="line">note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace</span><br></pre></td></tr></table></figure><p>この場合、tree-sitter-sqlの<code>Cargo.toml</code>も修正する必要があります。</p><figure class="highlight toml"><figcaption><span>tree-sitter-sql/Cargo.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">tree-sitter</span> = <span class="string">&quot;~0.20.3&quot;</span></span><br></pre></td></tr></table></figure><h3 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h3><p><code>main.rs</code>に次のように実装しました。</p><figure class="highlight rust"><figcaption><span>main.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::read_to_string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> tree_sitter::TreeCursor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">language</span> = tree_sitter_sql::<span class="title function_ invoke__">language</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">parser</span> = tree_sitter::Parser::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    parser.<span class="title function_ invoke__">set_language</span>(language).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">src_file</span> = std::env::<span class="title function_ invoke__">args</span>().<span class="title function_ invoke__">nth</span>(<span class="number">1</span>).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;arguments error&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">src</span> = <span class="title function_ invoke__">read_to_string</span>(&amp;src_file).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tree</span> = parser.<span class="title function_ invoke__">parse</span>(&amp;src, <span class="literal">None</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">if</span> tree.<span class="title function_ invoke__">root_node</span>().<span class="title function_ invoke__">has_error</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">cursor</span> = tree.<span class="title function_ invoke__">walk</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">visit</span>(&amp;<span class="keyword">mut</span> cursor, <span class="number">0</span>, &amp;src);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UNIT: <span class="type">usize</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">visit</span>(cursor: &amp;<span class="keyword">mut</span> TreeCursor, depth: <span class="type">usize</span>, src: &amp;<span class="type">str</span>) &#123;</span><br><span class="line">    <span class="comment">// インデント</span></span><br><span class="line">    (<span class="number">0</span>..(depth * UNIT)).<span class="title function_ invoke__">for_each</span>(|_| <span class="built_in">print!</span>(<span class="string">&quot; &quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">kind</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子供がいないかつ、キーワードでない場合、対応する文字列を表示</span></span><br><span class="line">    <span class="keyword">if</span> cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">child_count</span>() == <span class="number">0</span> &amp;&amp; cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">kind</span>().<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">any</span>(|c| c.<span class="title function_ invoke__">is_lowercase</span>()) &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot; \&quot;&#123;&#125;\&quot;&quot;</span>, cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">utf8_text</span>(src.<span class="title function_ invoke__">as_bytes</span>()).<span class="title function_ invoke__">unwrap</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">&quot; [&#123;&#125;-&#123;&#125;]&quot;</span>,</span><br><span class="line">        cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">start_position</span>(),</span><br><span class="line">        cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">end_position</span>()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子供を走査</span></span><br><span class="line">    <span class="keyword">if</span> cursor.<span class="title function_ invoke__">goto_first_child</span>() &#123;</span><br><span class="line">        <span class="title function_ invoke__">visit</span>(cursor, depth + <span class="number">1</span>, src);</span><br><span class="line">        <span class="keyword">while</span> cursor.<span class="title function_ invoke__">goto_next_sibling</span>() &#123;</span><br><span class="line">            <span class="title function_ invoke__">visit</span>(cursor, depth + <span class="number">1</span>, src);</span><br><span class="line">        &#125;</span><br><span class="line">        cursor.<span class="title function_ invoke__">goto_parent</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="実行例"><a href="#実行例" class="headerlink" title="実行例"></a>実行例</h3><p>作成したプログラムを用いて、実際にCSTを表示してみましょう。</p><figure class="highlight sql"><figcaption><span>exapmles/simple.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT</span><br></pre></td></tr></table></figure><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cargo run ./examples/simple.sql</span><br><span class="line">source_file [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">12</span>)]</span><br><span class="line">  select_statement [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">9</span>)]</span><br><span class="line">    select_clause [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">      SELECT [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">      select_clause_body [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">7</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">9</span>)]</span><br><span class="line">        identifier <span class="string">&quot;ID&quot;</span> [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">7</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">9</span>)]</span><br><span class="line">    from_clause [(<span class="number">1</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>)]</span><br><span class="line">      FROM [(<span class="number">1</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>)]</span><br><span class="line">      identifier <span class="string">&quot;STUDENT&quot;</span> [(<span class="number">1</span><span class="punctuation">,</span> <span class="number">5</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">12</span>)]</span><br></pre></td></tr></table></figure><p>ノードに対応する文字列とキーワードを出力することができました。</p><h1 id="構文例"><a href="#構文例" class="headerlink" title="構文例"></a>構文例</h1><p>次に、tree-sitter用の構文について簡単に紹介します。</p><p>tree-sitter では文法を <code>grammar.js</code> に記述します。clone した tree-sitter-sql のルートディレクトリにある <code>grammar.js</code>を編集していきます。ここではDSL(<a href="https://ja.wikipedia.org/wiki/%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%9B%BA%E6%9C%89%E8%A8%80%E8%AA%9E">ドメイン固有言語</a>)について細かくは説明しないので、詳しく知りたい方は<a href="https://tree-sitter.github.io/tree-sitter/creating-parsers#the-grammar-dsl">tree-sitterのドキュメント</a>を参照してください。</p><h3 id="規則"><a href="#規則" class="headerlink" title="規則"></a>規則</h3><p>例えば、tree-sitter-sql で WHERE句は以下のように記述されています(<a href="https://github.com/m-novikov/tree-sitter-sql/blob/218b672499729ef71e4d66a949e4a1614488aeaa/grammar.js#L909">where_clauseの定義</a>)。</p><figure class="highlight js"><figcaption><span>WHERE句の規則</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">where_clause</span>: $ =&gt; <span class="title function_">seq</span>(<span class="title function_">kw</span>(<span class="string">&quot;WHERE&quot;</span>), $._expression)</span><br></pre></td></tr></table></figure><p><code>seq</code>はtree-sitterの文法のDSLの一つで、複数の規則を連結することができます。上の例では、<code>kw(&quot;WHERE&quot;)</code>のあとに<code>$._expression</code>が現れることを示しています。</p><p><code>kw</code>関数はtree-sitter-sqlの<code>grammar.js</code>で定義されている関数で、キーワード(<code>k</code>ey<code>w</code>ord)が大文字か小文字であるかを考慮しなくするなどの処理を行います。パース時には、<code>where</code>や<code>WHERE</code>というキーワードとマッチします(<a href="https://github.com/m-novikov/tree-sitter-sql/blob/218b672499729ef71e4d66a949e4a1614488aeaa/grammar.js#L29">kw関数の定義</a>)。</p><h3 id="アンダースコアから始まる規則"><a href="#アンダースコアから始まる規則" class="headerlink" title="アンダースコアから始まる規則"></a>アンダースコアから始まる規則</h3><p>規則名の先頭の文字をアンダースコアから始めることで、生成されるCSTにノードとして出現させないように設定することができます(<a href="https://tree-sitter.github.io/tree-sitter/creating-parsers#hiding-rules">ドキュメント</a>)。例えば、算術演算や識別子、リテラルなどの式は<code>_expression</code>という名前で以下のように定義されています。</p><figure class="highlight js"><figcaption><span>式に対応する規則</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">_expression</span>: $ =&gt;</span><br><span class="line">     <span class="title function_">choice</span>(</span><br><span class="line">       $.string,</span><br><span class="line">       $.<span class="variable constant_">TRUE</span>,</span><br><span class="line">       $.<span class="variable constant_">FALSE</span>,</span><br><span class="line">       $.<span class="variable constant_">NULL</span>,</span><br><span class="line">       $._identifier,</span><br><span class="line">       $.number,</span><br><span class="line">       $.unary_expression,</span><br><span class="line">       <span class="comment">// 一部省略</span></span><br><span class="line">     ),</span><br></pre></td></tr></table></figure><p><code>choice</code>はtree-sitterのDSLで、引数のうちいずれか1つとマッチすることを意味しています。つまり、この規則は、文字列や<code>TRUE</code>、<code>FALSE</code>など各式に対応した規則を呼び出し、いずれか一つとマッチすることになります。つまり、ソースファイル中に式が現れるたびに<code>_expression</code>が呼び出されています。これがCST上に現れると、例えば<code>1+2-3</code>という式のパース結果が以下のようになってしまいます。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">_expression</span></span><br><span class="line">  (<span class="name">binary_expression</span></span><br><span class="line">    (<span class="name">_expression</span></span><br><span class="line">      (<span class="name">binary_expression</span></span><br><span class="line">        (<span class="name">_expression</span></span><br><span class="line">          (<span class="name">number</span> <span class="string">&quot;1&quot;</span>))</span><br><span class="line">        (<span class="string">&quot;+&quot;</span>)</span><br><span class="line">        (<span class="name">_expression</span></span><br><span class="line">          (<span class="name">number</span> <span class="string">&quot;2&quot;</span>)))</span><br><span class="line">    (<span class="string">&quot;-&quot;</span>)</span><br><span class="line">    (<span class="name">_expression</span></span><br><span class="line">      (<span class="name">number</span> <span class="string">&quot;3&quot;</span>))))</span><br></pre></td></tr></table></figure><p>アンダースコアから始めることで、CST上に現れないように設定でき、以下のようにシンプルな木にすることができます。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">binary_expression</span></span><br><span class="line">  (<span class="name">binary_expression</span></span><br><span class="line">    (<span class="name">number</span> <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    (<span class="string">&quot;+&quot;</span>)</span><br><span class="line">    (<span class="name">number</span> <span class="string">&quot;2&quot;</span>))</span><br><span class="line">  (<span class="string">&quot;-&quot;</span>)</span><br><span class="line">  (<span class="name">number</span> <span class="string">&quot;3))</span></span><br></pre></td></tr></table></figure><h3 id="優先度、結合性"><a href="#優先度、結合性" class="headerlink" title="優先度、結合性"></a>優先度、結合性</h3><p>ここで詳細は述べませんが、tree-sitterは明示しない場合、曖昧な文法を扱うことができません(<a href="https://tree-sitter.github.io/tree-sitter/creating-parsers#the-grammar-dsl:~:text=conflicts%20%2D%20an%20array,dynamic%20precedence.">参考</a>)。</p><p>例えば、以下のような論理式を考えてみます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">NOT</span> X <span class="keyword">AND</span> Y <span class="keyword">OR</span> Z</span><br></pre></td></tr></table></figure><p>この式はどのように解釈されるでしょうか？<code>NOT (X AND (Y OR Z))</code>や<code>(NOT X) AND (Y OR Z)</code>、<code>((NOT X) AND Y) OR Z</code>など、複数通りに解釈できてしまうと思います。このように、複数通りの解釈ができてしまうような文法を曖昧な文法といい、そのままではパースできません。</p><p>これは、優先度・結合性を文法に記述することで対処できます。tree-sitter-sqlでは優先度をJavascriptの定数として以下のように定義しています。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PREC</span> = &#123;</span><br><span class="line">  <span class="attr">primary</span>: <span class="number">8</span>,</span><br><span class="line">  <span class="attr">unary</span>: <span class="number">7</span>,             <span class="comment">// 単項演算子</span></span><br><span class="line">  <span class="attr">exp</span>: <span class="number">6</span>,               <span class="comment">// 累乗</span></span><br><span class="line">  <span class="attr">multiplicative</span>: <span class="number">5</span>,    <span class="comment">// 乗除算</span></span><br><span class="line">  <span class="attr">additive</span>: <span class="number">4</span>,          <span class="comment">// 加減算</span></span><br><span class="line">  <span class="attr">comparative</span>: <span class="number">3</span>,       <span class="comment">// 比較演算子</span></span><br><span class="line">  <span class="attr">and</span>: <span class="number">2</span>,               <span class="comment">// AND</span></span><br><span class="line">  <span class="attr">or</span>: <span class="number">1</span>,                <span class="comment">// OR</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>これを用いて、論理式に優先度・結合性を加えて記述した規則は次のようになります。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">boolean_expression</span>: $ =&gt;</span><br><span class="line">  <span class="title function_">choice</span>(</span><br><span class="line">    prec.<span class="title function_">left</span>(<span class="variable constant_">PREC</span>.<span class="property">unary</span>, <span class="title function_">seq</span>(<span class="title function_">kw</span>(<span class="string">&quot;NOT&quot;</span>), $._expression)), <span class="comment">// 優先度7</span></span><br><span class="line">    prec.<span class="title function_">left</span>(<span class="variable constant_">PREC</span>.<span class="property">and</span>, <span class="title function_">seq</span>($._expression, <span class="title function_">kw</span>(<span class="string">&quot;AND&quot;</span>), $._expression)),  <span class="comment">// 優先度2</span></span><br><span class="line">    prec.<span class="title function_">left</span>(<span class="variable constant_">PREC</span>.<span class="property">or</span>, <span class="title function_">seq</span>($._expression, <span class="title function_">kw</span>(<span class="string">&quot;OR&quot;</span>), $._expression)), <span class="comment">// 優先度1</span></span><br><span class="line">  ),</span><br></pre></td></tr></table></figure><p>優先度は、<code>NOT &gt; AND &gt; OR</code>になっています。優先度が高いものほど優先して結合されるため、上述の論理式をtree-sitter-sqlでパースすると、<code>((NOT X) AND Y) OR Z</code>と解釈されます。なお、<code>prec.left</code>は左結合であることを意味しています。</p><h3 id="extras"><a href="#extras" class="headerlink" title="extras"></a>extras</h3><p>ファイルのどこに現れてもよい規則をextrasで記述することができます。<br>これを使って、コメントや空白、改行を簡単に記述することができます(<a href="https://github.com/m-novikov/tree-sitter-sql/blob/218b672499729ef71e4d66a949e4a1614488aeaa/grammar.js#L75">コメント、空白の定義</a>)が、CST上では直感的でない場所位置に現れる場合もあります(<a href="https://future-architect.github.io/articles/20220916c/#:~:text=%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E6%83%85%E5%A0%B1%E3%81%AFCST%E4%B8%8A%E3%81%AB%E4%BF%9D%E6%8C%81%E3%81%95%E3%82%8C%E3%81%BE%E3%81%99%E3%81%8C%E3%80%81%E7%9B%B4%E6%84%9F%E7%9A%84%E3%81%A7%E3%81%AA%E3%81%84%E4%BD%8D%E7%BD%AE%E3%81%AB%E7%8F%BE%E3%82%8C%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86%E5%A0%B4%E5%90%88%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82">インターンの記事後編</a>参照)。</p><h1 id="BETWEEN述語への対応"><a href="#BETWEEN述語への対応" class="headerlink" title="BETWEEN述語への対応"></a>BETWEEN述語への対応</h1><p>現状のtree-sitter-sqlを使用して、<code>BETWEEN</code>を含むSQLをパースできるか確認してみましょう。以下のようなファイルを用意します。</p><figure class="highlight sql"><figcaption><span>examples/between.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    GRADE   <span class="keyword">BETWEEN</span> <span class="number">80</span>  <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">AND</span> ID      <span class="keyword">BETWEEN</span> <span class="number">0</span>   <span class="keyword">AND</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ tree-sitter parse .<span class="character">\e</span>xamples<span class="character">\b</span>etween.sql</span><br><span class="line">(<span class="name">source_file</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">7</span><span class="punctuation">,</span> <span class="number">0</span>]</span><br><span class="line">  (<span class="name">select_statement</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>]</span><br><span class="line">    (<span class="name">select_clause</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>]</span><br><span class="line">      (<span class="name">select_clause_body</span> [<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>]</span><br><span class="line">        (<span class="name">identifier</span> [<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>])))</span><br><span class="line">    (<span class="name">from_clause</span> [<span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]</span><br><span class="line">      (<span class="name">identifier</span> [<span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]))</span><br><span class="line">    (<span class="name">where_clause</span> [<span class="number">4</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>]</span><br><span class="line">      (<span class="name">boolean_expression</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>]</span><br><span class="line">        (<span class="name">boolean_expression</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">6</span>]</span><br><span class="line">          (<span class="name">boolean_expression</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">5</span><span class="punctuation">,</span> <span class="number">31</span>]</span><br><span class="line">            (<span class="name">identifier</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">5</span><span class="punctuation">,</span> <span class="number">9</span>])</span><br><span class="line">            (<span class="name">ERROR</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">12</span>] - [<span class="number">5</span><span class="punctuation">,</span> <span class="number">22</span>])</span><br><span class="line">            (<span class="name">number</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">28</span>] - [<span class="number">5</span><span class="punctuation">,</span> <span class="number">31</span>]))</span><br><span class="line">          (<span class="name">identifier</span> [<span class="number">6</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">6</span>]))</span><br><span class="line">        (<span class="name">ERROR</span> [<span class="number">6</span><span class="punctuation">,</span> <span class="number">12</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">21</span>])</span><br><span class="line">        (<span class="name">number</span> [<span class="number">6</span><span class="punctuation">,</span> <span class="number">28</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>])))))</span><br><span class="line">.<span class="character">\e</span>xamples<span class="character">\b</span>etween.sql  <span class="number">0</span> ms    (<span class="name">ERROR</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">12</span>] - [<span class="number">5</span><span class="punctuation">,</span> <span class="number">22</span>])</span><br></pre></td></tr></table></figure><p>構文エラーが発生し、WHERE句内のBETWEEN述語には対応していないことがわかります。<a href="https://github.com/m-novikov/tree-sitter-sql/blob/218b672499729ef71e4d66a949e4a1614488aeaa/grammar.js#L1071">grammar.jsを見てみるとBETWEENというキーワードはWINDOW関数のFRAME句にしか想定していない</a>ため、BETWEENがERRORノードと扱われているようです。</p><h3 id="規則の追加"><a href="#規則の追加" class="headerlink" title="規則の追加"></a>規則の追加</h3><p>BETWEEN述語に対応する規則がそもそも存在していないことがわかったため、文法を拡張することで対応していきます。</p><p>BETWEEN述語は次のような構文になっています。<a href="https://www.postgresql.jp/document/14/html/functions-comparison.html">PostgreSQLのドキュメント</a>では構文について詳しく書かれていなかったので、<a href="https://docs.oracle.com/cd/E57425_01/121/SQLRF/conditions012.htm#sthref1111">Oracle SQLのドキュメント</a>を参考にしました。</p><figure class="highlight sql"><figcaption><span>BETWEEN述語の構文</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(expression) (<span class="keyword">NOT</span>)? <span class="keyword">BETWEEN</span> (expression) <span class="keyword">AND</span> (expression)</span><br></pre></td></tr></table></figure><p>なお、<code>(NOT)?</code> は正規表現で使われる <code>?</code> と同じ意味で、 <code>NOT</code> が0回または1回現れることを表現しています。tree-sitterの構文では、<code>optional</code>というDSLで表現されます。</p><p>率直にDSLに直すと、次のような規則が書けます。</p><figure class="highlight js"><figcaption><span>率直に書いたBETWEENの規則</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">between_and_expression</span>: $ =&gt;</span><br><span class="line">  <span class="title function_">seq</span>($._expression, <span class="title function_">optional</span>(<span class="title function_">kw</span>(<span class="string">&quot;NOT&quot;</span>)), <span class="title function_">kw</span>(<span class="string">&quot;BETWEEN&quot;</span>),</span><br><span class="line">      $._expression, <span class="title function_">kw</span>(<span class="string">&quot;AND&quot;</span>), $._expression)</span><br></pre></td></tr></table></figure><p>この規則をSQLの式に対応する規則<code>_expression</code>に追加します。</p><figure class="highlight diff"><figcaption><span>_expressionへの追加</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    _expression: $ =&gt;</span><br><span class="line">      choice(</span><br><span class="line">        $.string,</span><br><span class="line">        $.TRUE,</span><br><span class="line">        $.FALSE,</span><br><span class="line">        // 省略</span><br><span class="line"><span class="addition">+       $.between_and_expression,</span></span><br><span class="line">      ),</span><br></pre></td></tr></table></figure><p>これでBETWEEN述語の規則を追加することができました。拡張した文法をもとにパーサを生成してみましょう。以下のコマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ tree-sitter generate</span><br><span class="line">Unresolved conflict <span class="keyword">for</span> symbol sequence:</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;grant_statement_token4&#x27;</span>  _expression  <span class="string">&#x27;create_trigger_statement_token1&#x27;</span>  _expression  •  <span class="string">&#x27;cte_token2&#x27;</span>  …</span><br><span class="line"></span><br><span class="line">Possible interpretations:</span><br><span class="line"></span><br><span class="line">  1:  <span class="string">&#x27;grant_statement_token4&#x27;</span>  (boolean_expression  _expression  <span class="string">&#x27;create_trigger_statement_token1&#x27;</span>  _expression)  •  <span class="string">&#x27;cte_token2&#x27;</span>  …</span><br><span class="line">                                                            (precedence: 1, associativity: Left)</span><br><span class="line">  2:  <span class="string">&#x27;grant_statement_token4&#x27;</span>  _expression  <span class="string">&#x27;create_trigger_statement_token1&#x27;</span>  (between_and_expression  _expression  •  <span class="string">&#x27;cte_token2&#x27;</span>  <span class="string">&#x27;frame_clause_token1&#x27;</span>  _expression  <span class="string">&#x27;frame_clause_token2&#x27;</span>  _expression)</span><br><span class="line">  3:  <span class="string">&#x27;grant_statement_token4&#x27;</span>  _expression  <span class="string">&#x27;create_trigger_statement_token1&#x27;</span>  (in_expression  _expression  •  <span class="string">&#x27;cte_token2&#x27;</span>  <span class="string">&#x27;create_function_parameter_token1&#x27;</span>  tuple)                                        (precedence: 3, associativity: Left)</span><br><span class="line"></span><br><span class="line">Possible resolutions:</span><br><span class="line"></span><br><span class="line">  1:  Specify a higher precedence <span class="keyword">in</span> `in_expression` and `between_and_expression` than <span class="keyword">in</span> the other rules.</span><br><span class="line">  2:  Specify a higher precedence <span class="keyword">in</span> `boolean_expression` than <span class="keyword">in</span> the other rules.</span><br><span class="line">  3:  Add a conflict <span class="keyword">for</span> these rules: `in_expression`, `between_and_expression`, `boolean_expression`</span><br></pre></td></tr></table></figure><p>エラーが発生してしまい、パーサが生成できませんでした。これは、上述した規則では優先度を記述していないため、文法が曖昧になってしまっていることが原因です。例えば、<code>X BETWEEN Y AND Z AND W</code>の<code>AND</code>がBETWEEN述語のものなのか、論理式のものなのかをパーサが自動で判別することができません。つまり、<code>X BETWEEN (Y AND Z) AND W</code>や<code>(X BETWEEN Y AND Z) AND W</code>など、複数の解釈ができてしまいます。</p><p>そこで、優先度と結合性を追加します。</p><figure class="highlight javascript"><figcaption><span>優先度と結合性を追加したBETWEENの規則</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">between_and_expression</span>: $ =&gt;</span><br><span class="line">  prec.<span class="title function_">left</span>(</span><br><span class="line">    <span class="variable constant_">PREC</span>.<span class="property">comparative</span>,</span><br><span class="line">    <span class="title function_">seq</span>($._expression, <span class="title function_">optional</span>(<span class="title function_">kw</span>(<span class="string">&quot;NOT&quot;</span>)), <span class="title function_">kw</span>(<span class="string">&quot;BETWEEN&quot;</span>),</span><br><span class="line">        $._expression, <span class="title function_">kw</span>(<span class="string">&quot;AND&quot;</span>), $._expression)</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure><p><code>prec.left</code>は左結合であることを示し、<code>PREC.comparative</code>で比較演算子と同じ優先度であることを指定しています。比較演算子は<code>AND</code>よりも高い優先度であるため、<code>X BETWEEN Y AND Z AND W</code>は<code>(X BETWEEN Y AND Z) AND W</code>と解釈されます。</p><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>次のファイルをパースしてみましょう。</p><figure class="highlight sql"><figcaption><span>examples/between.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    GRADE   <span class="keyword">BETWEEN</span> <span class="number">80</span>  <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">AND</span> ID      <span class="keyword">BETWEEN</span> <span class="number">0</span>   <span class="keyword">AND</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><p>以下のコマンドでパーサを生成します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree-sitter generate</span></span><br></pre></td></tr></table></figure><p>先ほど作成した <code>print-cst</code>を用いて、パース結果を出力します。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ cd [print-cstのパス]</span><br><span class="line">$ cargo run ./examples/between.sql</span><br><span class="line">source_file [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>)]</span><br><span class="line">  select_statement [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">    select_clause [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">      SELECT [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">      select_clause_body [(<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">        identifier <span class="string">&quot;ID&quot;</span> [(<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">    from_clause [(<span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span>)]</span><br><span class="line">      FROM [(<span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span>)]</span><br><span class="line">      identifier <span class="string">&quot;STUDENT&quot;</span> [(<span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>)]</span><br><span class="line">    where_clause [(<span class="number">4</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span>)]</span><br><span class="line">      WHERE [(<span class="number">4</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span>)]</span><br><span class="line">      boolean_expression [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">31</span>)]</span><br><span class="line">        between_and_expression [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">9</span>)]</span><br><span class="line">          identifier <span class="string">&quot;GRADE&quot;</span> [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">9</span>)]</span><br><span class="line">          BETWEEN [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">12</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">19</span>)]</span><br><span class="line">          number <span class="string">&quot;80&quot;</span> [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">20</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">22</span>)]</span><br><span class="line">          AND [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">24</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">27</span>)]</span><br><span class="line">          number <span class="string">&quot;100&quot;</span> [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">28</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">31</span>)]</span><br><span class="line">        AND [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">3</span>)]</span><br><span class="line">        between_and_expression [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">          identifier <span class="string">&quot;ID&quot;</span> [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">          BETWEEN [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">12</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">19</span>)]</span><br><span class="line">          number <span class="string">&quot;0&quot;</span> [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">20</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">21</span>)]</span><br><span class="line">          AND [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">24</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">27</span>)]</span><br><span class="line">          number <span class="string">&quot;100&quot;</span> [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">28</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>)]</span><br></pre></td></tr></table></figure><p>これで<code>BETWEEN</code>を含むSQLがパースできるようになりました！</p><h3 id="テストの追加"><a href="#テストの追加" class="headerlink" title="テストの追加"></a>テストの追加</h3><p>最後に、今回追加したBETWEEN述語の拡張を<code>tree-sitter test</code>(<a href="https://tree-sitter.github.io/tree-sitter/creating-parsers#command-test">Tree-sitter｜Creating Parsers</a>)でテストできるようにしましょう。</p><p><code>test/corpus/between.txt</code>を作成して、以下のように記述します。</p><figure class="highlight sql"><figcaption><span>test/corpus/between.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="keyword">BETWEEN</span> predicates</span><br><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    GRADE   <span class="keyword">BETWEEN</span> <span class="number">80</span>  <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">AND</span> ID      <span class="keyword">BETWEEN</span> <span class="number">0</span>   <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---------------------------------------</span></span><br><span class="line"></span><br><span class="line">(source_file</span><br><span class="line">  (select_statement</span><br><span class="line">    (select_clause</span><br><span class="line">      (select_clause_body</span><br><span class="line">        (identifier)))</span><br><span class="line">    (from_clause</span><br><span class="line">      (identifier))</span><br><span class="line">    (where_clause</span><br><span class="line">      (boolean_expression</span><br><span class="line">        (between_and_expression</span><br><span class="line">          (identifier)</span><br><span class="line">          (number)</span><br><span class="line">          (number))</span><br><span class="line">        (between_and_expression</span><br><span class="line">          (identifier)</span><br><span class="line">          (number)</span><br><span class="line">          (number))))))</span><br></pre></td></tr></table></figure><ul><li><code>=</code>で囲まれた行にテスト名を書きます</li><li>次に、入力として与えるソースコードを記述し、下に<code>---</code>を記述します</li><li>最後に期待する結果をS式で記述します</li></ul><p><code>tree-sitter test</code>でテストを行います。<code>-f</code>フラグを加えることで、特定のテストのみを実行することができます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ tree-sitter <span class="built_in">test</span> -f <span class="string">&#x27;BETWEEN predicates&#x27;</span></span><br><span class="line">  between:</span><br><span class="line">    ✓ BETWEEN predicates</span><br><span class="line">  create:</span><br><span class="line">  delete:</span><br><span class="line">  insert:</span><br><span class="line">  select:</span><br><span class="line">  statements:</span><br><span class="line">  update:</span><br><span class="line">syntax highlighting:</span><br><span class="line">  ✓ builtin.sql (49 assertions)</span><br><span class="line">  ✓ function.sql (16 assertions)</span><br><span class="line">  ✓ insert.sql (6 assertions)</span><br><span class="line">  ✓ keywords.sql (9 assertions)</span><br><span class="line">  ✓ punctuation.sql (2 assertions)</span><br><span class="line">  ✓ select.sql (43 assertions)</span><br><span class="line">  ✓ statements.sql (25 assertions)</span><br><span class="line">  ✓ table.sql (33 assertions)</span><br><span class="line">  ✓ type.sql (5 assertions)</span><br><span class="line">  ✓ update.sql (10 assertions)</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>本記事では、tree-sitter-sqlでBETWEEN述語を扱えるように構文拡張を行いました。tree-sitter用のSQL構文はまだまだ未完成なので、皆さんも一緒によりよいパーサを作ってみませんか？</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/SQL/">SQL</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%82%BF%E3%83%BC/">フォーマッター</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A7%8B%E6%96%87%E8%A7%A3%E6%9E%90/">構文解析</category>
      
      <category domain="https://future-architect.github.io/tags/tree-sitter/">tree-sitter</category>
      
      
      <comments>https://future-architect.github.io/articles/20221215a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Reactで決められた候補から選択させるコンボボックスを実装する（サーバーアクセスつき）</title>
      <link>https://future-architect.github.io/articles/20221213a/</link>
      <guid>https://future-architect.github.io/articles/20221213a/</guid>
      <pubDate>Mon, 12 Dec 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;技術コンサルを行っているお客様から質問があったのですが、なかなかドンピシャな情報がなく、試行錯誤したのでその検討結果をまとめてみました。&lt;/p&gt;
&lt;p&gt;実現したいのは以下のようなコンボボックスです&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IDのリストをユーザーに選択させる&lt;/li&gt;
&lt;l</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>技術コンサルを行っているお客様から質問があったのですが、なかなかドンピシャな情報がなく、試行錯誤したのでその検討結果をまとめてみました。</p><p>実現したいのは以下のようなコンボボックスです</p><ul><li>IDのリストをユーザーに選択させる</li><li>キーボードで絞り込みをかけられる</li><li>IDのリストは大量にあり、全件をあらかじめサーバーに問い合わせて取得するのはパフォーマンスが良くない</li></ul><p>コンボボックスと同義語的にも使われるドロップボックスというコンポーネントがあります。こちらはメニューからの選択のみで、キーボードの絞り込みがないもので、コンボボックスはテキストボックスがある、という想定でここで話をすすめます。</p><p>IDの候補が有限個であれば、標準のHTMLでも簡単に実現できます。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;ice-cream-choice&quot;</span>&gt;</span>Choose a flavor:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">&quot;ice-cream-flavors&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ice-cream-choice&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ice-cream-choice&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;ice-cream-flavors&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Chocolate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Coconut&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Mint&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Strawberry&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Vanilla&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/20221213a/スクリーンショット_2022-12-02_17.01.46.png" alt="スクリーンショット_2022-12-02_17.01.46.png" width="571" height="461" loading="lazy"><p>コンボボックスを実現するコンポーネント集もありますが、動的にサーバーに候補を問い合わせるのをやりやすくしてくれる機能が組み込まれていないものも多いです。一部、<a href="https://mui.com/material-ui/react-autocomplete/#asynchronous-requests">MaterialUI</a>ではAutocompleteコンポーネントがあって実現はできそうですし、ネットワーク越しに非同期に候補を絞るのも対応してそうですが、この1機能のためにUI部品を乗り換えるわけにもいかないので、素のReactで実現してみます。</p><h1 id="入力の状態を検討する"><a href="#入力の状態を検討する" class="headerlink" title="入力の状態を検討する"></a>入力の状態を検討する</h1><p>Reactでコーディングする場合は、どのような状態を管理するか、誰がその状態を更新するかを検討します。次のような操作が考えられます。</p><ul><li>テキスト入力した値がコンボボックスに表示される</li><li>テキスト入力で絞り込みを行い、選択候補をリストに出す</li><li>テキスト入力で候補と正確に一致するテキストが入力されたので選択する</li><li>テキスト入力で候補が1つになるまで絞り込みを行ったのでそれを選択する</li><li>絞り込まれた候補からマウスで選択する</li><li>再選択するためにキーボードでテキストを削除し、再度絞り込みを行う</li></ul><p>いろいろ試行錯誤した結果、以下のようになりました。</p><img src="/images/20221213a/combobox.png" alt="combobox.png" width="971" height="593" loading="lazy"><ul><li>今回は、validな要素以外を選択要素としないため、最終的な選択値を1つ状態として持ちます。今回のサンプルは<code>useState()</code>で作っていますが、React Hook Formとかでも良いです。</li><li>最終的な値だけの場合、ユーザーが絞り込みを行うための中間状態が表現できません。uncontrolled formならば不要ですが、UI部品によっては選択候補が更新されるとリセットされてしまって都合が良くないことが考えられるため、表示用の値も状態として持ちます</li><li>表示用の入力値をそのまま<code>useSWR()</code>のサーバー呼び出しの更新キーとして使ってもいいのですが、マウスで候補から選択した場合など、サーバーアクセスしなくてもいい場合にもサーバーリクエストが走ってしまうと困るので、サーバー検索を行うキーを別途保持します。</li><li>検索候補が1つに絞れたら、そこで選択終了としたいのですが、そうした場合、キーボードのbackspaceで最後のテキストを消して再絞り込みしようとしても再び候補が1つで強制的に選択されて末尾のテキストが消せない、ということがあったので、選択終了条件に、最後のキーボード入力がbackspace等のテキスト消去ではない、という条件が必要でした。そのため、1つ前の表示値も取っておく必要があるため、<code>useRef</code>で保持します。</li></ul><p>ユーザーに「あれ？」と思わせないコンボボックスを作るにはこれだけの状態が必要かと思われます。テキストとマウスと両方扱う必要があるので面倒ですが仕方がありません。</p><h1 id="実装してみる"><a href="#実装してみる" class="headerlink" title="実装してみる"></a>実装してみる</h1><p>1000以下の素数で好きな値を選択するコンボボックスを作ってみます。Vite.jsで作ったプロジェクトをベースにしています。</p><p>サーバーにアクセスして値を取ってきて候補を出しますが、このためだけにサーバーを実装するのは面倒なので<a href="https://mswjs.io/">Mock Service Worker</a>でAPIサーバーの代替をします。</p><figure class="highlight ts"><figcaption><span>mock.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; setupWorker, rest &#125; <span class="keyword">from</span> <span class="string">&#x27;msw&#x27;</span></span><br><span class="line"><span class="keyword">import</span> getPrimes <span class="keyword">from</span> <span class="string">&#x27;get-primes&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">msec: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="title function_">resolve</span>(<span class="number">0</span>); &#125;, msec);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> worker = <span class="title function_">setupWorker</span>(</span><br><span class="line">  rest.<span class="title function_">get</span>(<span class="string">&#x27;/primes&#x27;</span>, <span class="keyword">async</span> (req, res, ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">// prefix=で渡された文字で始まる素数をリストで返す</span></span><br><span class="line">    <span class="keyword">const</span> prefix = req.<span class="property">url</span>.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&#x27;prefix&#x27;</span>) || <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>); <span class="comment">// サーバーの遅さをシミュレートするためのウェイト</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> v <span class="keyword">of</span> <span class="title function_">getPrimes</span>(<span class="number">1000</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">String</span>(v).<span class="title function_">startsWith</span>(prefix)) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(v);</span><br><span class="line">            <span class="keyword">if</span> (result.<span class="property">length</span> === <span class="number">10</span>) &#123; <span class="comment">// 最大10候補だけ返す</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">res</span>(ctx.<span class="title function_">json</span>(&#123;result&#125;)</span><br><span class="line">  &#125;),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>サーバーにアクセスしてくるhookを実装します。</p><figure class="highlight ts"><figcaption><span>use-completionlist.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useSWR <span class="keyword">from</span> <span class="string">&#x27;swr&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetcher</span>(<span class="params">url: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">  <span class="keyword">const</span> &#123; result &#125; = <span class="keyword">await</span> res.<span class="title function_">json</span>() <span class="keyword">as</span> &#123;<span class="attr">result</span>: <span class="built_in">number</span>[]&#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useCompletionList</span>(<span class="params">prefix: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, error &#125; = <span class="title function_">useSWR</span>(</span><br><span class="line">    <span class="string">`/primes?prefix=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(prefix)&#125;</span>`</span>,</span><br><span class="line">    fetcher</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">data</span>: data ? data : [], error, <span class="attr">loading</span>: !data &amp;&amp; !error &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後にコンボボックスと必要なstate群を実装します。</p><figure class="highlight tsx"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useCallback, useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useCompletionList &#125; <span class="keyword">from</span> <span class="string">&#x27;use-completionlist&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [ userInput, setUserInput ] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);              <span class="comment">// 表示用の値</span></span><br><span class="line">  <span class="keyword">const</span> lastUserInput = <span class="title function_">useRef</span>(<span class="string">&#x27;&#x27;</span>);                              <span class="comment">// 1つ前の表示用の値</span></span><br><span class="line">  <span class="keyword">const</span> [ searchKey, setSearchKey ] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);              <span class="comment">// 検索キー</span></span><br><span class="line">  <span class="keyword">const</span> [ confirmedValue, setConfirmedValue ] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);    <span class="comment">// 選択された値</span></span><br><span class="line">  <span class="keyword">const</span> &#123; data, error, loading &#125; = <span class="title function_">useCompletionList</span>(searchKey); <span class="comment">// 候補リスト</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">length</span> === <span class="number">1</span> &amp;&amp; userInput.<span class="property">length</span> &gt; lastUserInput.<span class="property">current</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="comment">// キーボード選択用: もし、検索候補が1件しかない場合は先頭一致でその要素が選択されたものとする。表示も更新する。</span></span><br><span class="line">      <span class="title function_">setUserInput</span>(<span class="title class_">String</span>(data[<span class="number">0</span>]));</span><br><span class="line">      lastUserInput.<span class="property">current</span> = <span class="title class_">String</span>(data[<span class="number">0</span>]);</span><br><span class="line">      <span class="title function_">setConfirmedValue</span>(<span class="title class_">String</span>(data[<span class="number">0</span>]));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// キーボード選択用: 正確に一致するものが候補にあればその要素が選択されたものとする</span></span><br><span class="line">      <span class="keyword">const</span> found = data.<span class="title function_">find</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="title class_">String</span>(v) === userInput);</span><br><span class="line">      <span class="keyword">if</span> (found !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="title function_">setConfirmedValue</span>(<span class="title class_">String</span>(found));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [userInput, data])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onChange = <span class="title function_">useCallback</span>(<span class="keyword">function</span> <span class="title function_">onChange</span>(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) &#123;</span><br><span class="line">    lastUserInput.<span class="property">current</span> = userInput; <span class="comment">// 最後の入力をとっておく</span></span><br><span class="line">    <span class="title function_">setUserInput</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="title function_">some</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="title class_">String</span>(v) === e.<span class="property">target</span>.<span class="property">value</span>)) &#123;</span><br><span class="line">      <span class="comment">// マウス選択用: 候補のリストを検索して正確にマッチするものがあったら確定(検索はしない)</span></span><br><span class="line">      <span class="title function_">setConfirmedValue</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// キーボード選択用: 正確にマッチするものがなければサーバーに問い合わせて候補リストを最新化</span></span><br><span class="line">      <span class="title function_">setSearchKey</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [data]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123; error ? <span class="tag">&lt;<span class="name">div</span>&gt;</span>エラー: &#123;String(error)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : undefined &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>選択された素数: &#123;confirmedValue&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>素数選択: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;example&quot;</span> <span class="attr">list</span>=<span class="string">&quot;exampleList&quot;</span> <span class="attr">value</span>=<span class="string">&#123;userInput&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;/</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123; loading ? &quot;🌀&quot; : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;exampleList&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123; data.map(value =&gt; (<span class="tag">&lt;<span class="name">option</span> <span class="attr">key</span>=<span class="string">&#123;value&#125;</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> /&gt;</span>))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>うまく実装できました。</p><img src="/images/20221213a/スクリーンショット_2022-12-02_17.56.53.png" alt="スクリーンショット_2022-12-02_17.56.53.png" width="850" height="428" loading="lazy"><p>一箇所にまとめて実装しましたが、data, loading, onChange, confirmedValue, userInput, setUserInputを返すカスタムフックを作っておくと再利用が効きそうです。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>いろんなライブラリとの組み合わせを考えると、状態の変更のライフサイクルをきちんとコントロールできるようにしておくことが大切です。そのため、キーボードの絞り込み機能つきのコンボボックスを手作りしてみました。Reactでもなんでも、サーバーからのレスポンスを含めて、状態管理が複雑になってくると結構ややこしくなって、バグっぽい動きになったりしがちです。</p><p>カスタマイズとしては、サーバーアクセスを<a href="https://usehooks.com/useDebounce/">useDebounce</a>を使って絞るというのはやってもいいかと思います。あとは候補が選択されたときに候補欄を非表示にするとかですかね。確定した値と表示が一致していたらdatalistごと削除とかでいけるかと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/React/">React</category>
      
      
      <comments>https://future-architect.github.io/articles/20221213a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>OpenAPI GeneratorでPython Web API構築</title>
      <link>https://future-architect.github.io/articles/20221203a/</link>
      <guid>https://future-architect.github.io/articles/20221203a/</guid>
      <pubDate>Fri, 02 Dec 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221203a/top.png&quot; alt=&quot;&quot; width=&quot;941&quot; height=&quot;481&quot;&gt;

&lt;p&gt;この記事は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221203a/top.png" alt="" width="941" height="481"><p>この記事は<a href="https://qiita.com/advent-calendar/2022/python">Python Advent Calendar 2022</a> カレンダー2の3日目です。昨日はtttakehさんの<a href="https://zenn.dev/takeguchi/articles/672ff3b34753a7">じゃんけん画像を分類してみた</a>でした。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニットの村上です！</p><p>さて、私の所属しているプロジェクトではバックエンドシステムに主にGo言語を用いており、Go言語によるWebAPIを構築しています。</p><p>例えば<a href="/articles/20200927/">LambdaとGoを使ったサーバーレスWebAPI開発実践入門</a>など、Future Tech Blogには多くのノウハウが投稿されていますので是非ご覧になっていただければと思います。</p><p>今回はGo言語ではなくPythonでWebAPIを構築しました。その際にOpenAPI Generatorが便利だったのでご共有します。</p><h1 id="OpenAPI-Generator"><a href="#OpenAPI-Generator" class="headerlink" title="OpenAPI Generator"></a>OpenAPI Generator</h1><p><a href="https://github.com/OpenAPITools/openapi-generator">OpenAPI Generator</a>はAPIリクエストやレスポンスの内容を定義し、それを元にプログラムを自動生成するツールです。</p><p>API定義ファイルの書き方の例と、そこからコードを自動生成する方法をご紹介します。</p><h2 id="API定義ファイル"><a href="#API定義ファイル" class="headerlink" title="API定義ファイル"></a>API定義ファイル</h2><p>今回のファイル名は<code>openapi.yaml</code>とします。<br>以下のようにリクエストパラメータやレスポンスを定義します。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">openapi:</span> <span class="string">&quot;3.0.0&quot;</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Stock</span> <span class="string">API</span></span><br><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://localhost:3003</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">stockPrice</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">株価取得</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/v1/sc/&#123;security_cd&#125;/stockPrice:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">株価取得</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">stockPrice</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">現在の株価を取得する</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">stockPrice</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">security_cd</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">path</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">証券コードを指定する</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">example:</span> <span class="string">&quot;4722&quot;</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">&quot;200&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">success</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&quot;#/components/schemas/StockPrice&quot;</span></span><br><span class="line">        <span class="attr">&quot;400&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Bad</span> <span class="string">Request</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&quot;#/components/schemas/Error&quot;</span></span><br><span class="line">        <span class="attr">&quot;404&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Not</span> <span class="string">Found</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&quot;#/components/schemas/Error&quot;</span></span><br><span class="line">        <span class="attr">&quot;500&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Internal</span> <span class="string">Server</span> <span class="string">Error</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&quot;#/components/schemas/Error&quot;</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;その他予期せぬエラー&quot;</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&quot;#/components/schemas/Error&quot;</span></span><br><span class="line"><span class="attr">components:</span></span><br><span class="line">  <span class="attr">schemas:</span></span><br><span class="line">    <span class="attr">StockPrice:</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">price:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">number</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">double</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">現在の株価</span></span><br><span class="line">          <span class="attr">example:</span> <span class="number">1741</span></span><br><span class="line">        <span class="attr">open:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">number</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">double</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">始値</span></span><br><span class="line">          <span class="attr">example:</span> <span class="number">1715</span></span><br><span class="line">        <span class="attr">high:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">number</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">高値</span></span><br><span class="line">          <span class="attr">example:</span> <span class="number">1762</span></span><br><span class="line">        <span class="attr">low:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">number</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">安値</span></span><br><span class="line">          <span class="attr">example:</span> <span class="number">1704</span></span><br><span class="line">        <span class="attr">volume:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">number</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">出来高</span></span><br><span class="line">          <span class="attr">example:</span> <span class="number">221400</span></span><br><span class="line">    <span class="attr">Error:</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">message:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">エラーメッセージ</span></span><br><span class="line">        <span class="attr">field:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">エラー種別</span></span><br><span class="line">    <span class="attr">OK:</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">message:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><p><code>operationId</code>で指定した部分が自動生成コードに関数名として反映されます。</p><h2 id="コードの自動生成"><a href="#コードの自動生成" class="headerlink" title="コードの自動生成"></a>コードの自動生成</h2><p>生成方法はいくつかありますが、今回はdockerを使って自動生成します。<br>サーバ側、クライアント側どちらを生成するかはgeneratorのコマンドライン引数によって決まります。<br>例えばサーバ側をPython、クライアント側をGolangで生成する場合、以下のようになります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">サーバ側</span><br><span class="line">$ docker run --<span class="built_in">rm</span> -v <span class="variable">$&#123;PWD&#125;</span>:/local openapitools/openapi-generator-cli generate -i /local/openapi.yaml -g python-flask -o /local</span><br><span class="line"></span><br><span class="line">クライアント側</span><br><span class="line">$ docker run --<span class="built_in">rm</span> -v <span class="variable">$&#123;PWD&#125;</span>:/local openapitools/openapi-generator-cli generate -i /local/openapi.yaml -g go -o /local</span><br></pre></td></tr></table></figure><p>上記コマンドオプションの<code>-g</code>がgeneratorの指定になります。<br>generatorに指定できる引数は以下のコマンドで確認することができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --<span class="built_in">rm</span> openapitools/openapi-generator-cli list</span><br></pre></td></tr></table></figure><p>また、生成されるパッケージ名はデフォルトで<code>openapi_server</code>となりますが、以下のようにパッケージ名を明示的に指定することもできます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --<span class="built_in">rm</span> -v <span class="variable">$&#123;PWD&#125;</span>:/local openapitools/openapi-generator-cli generate -i /local/openapi.yaml -g python-flask -o /local --package-name test_package</span><br></pre></td></tr></table></figure><p>pythonのimportパスにも関わってくるため、プロジェクトに沿った名前にすると良いと思います。</p><h2 id="自動生成されたファイル"><a href="#自動生成されたファイル" class="headerlink" title="自動生成されたファイル"></a>自動生成されたファイル</h2><p>自動生成されたサーバ側のディレクトリ及びその内部のファイルを見ていきたいと思います。<br>上記の<code>openapi.yaml</code>からは以下の内容が出力されました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── README.md</span><br><span class="line">├── git_push.sh</span><br><span class="line">├── openapi_server</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── __main__.py</span><br><span class="line">│   ├── controllers</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── security_controller_.py</span><br><span class="line">│   │   └── stock_price_controller.py</span><br><span class="line">│   ├── encoder.py</span><br><span class="line">│   ├── models</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── base_model_.py</span><br><span class="line">│   │   ├── error.py</span><br><span class="line">│   │   ├── ok.py</span><br><span class="line">│   │   └── stock_price.py</span><br><span class="line">│   ├── openapi</span><br><span class="line">│   │   └── openapi.yaml</span><br><span class="line">│   ├── <span class="built_in">test</span></span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   └── test_stock_price_controller.py</span><br><span class="line">│   ├── typing_utils.py</span><br><span class="line">│   └── util.py</span><br><span class="line">├── requirements.txt</span><br><span class="line">├── setup.py</span><br><span class="line">├── test-requirements.txt</span><br><span class="line">└── tox.ini</span><br></pre></td></tr></table></figure><p>テスト用のファイルまで自動生成してくれます。<br>そのままこのディレクトリをプロジェクトディレクトリにできるレベルです。</p><h3 id="openapi-server"><a href="#openapi-server" class="headerlink" title="openapi_server"></a>openapi_server</h3><p>APIの本体は<code>openapi_server</code>になります。この中の<code>controllers</code>にAPIの中身を実装していくことになります。</p><p>個人的にはcontrollersのファイルにはエラーラッピングやDB接続などの前処理だけを書き、具体的なロジックは別ディレクトリに実装するのが良いと思います。これによってAPIが増えた時にcontrollersの中身が複雑になるのを避けることができます。</p><p>例えば以下のように<code>core</code>ディレクトリを作成し、さらにその中にAPIエンドポイントごとにディレクトリを用意します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── controllers</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── security_controller_.py</span><br><span class="line">│   └── stock_price_controller.py</span><br><span class="line">├── core</span><br><span class="line">│   └── stock_price</span><br><span class="line">│       ├── db.py</span><br><span class="line">│       ├── handler.py</span><br><span class="line">│       └── model.py</span><br></pre></td></tr></table></figure><p><code>handler.py</code>や<code>model.py</code>に具体的なロジックを実装し、<code>stock_price_controller.py</code>からそれを参照します。</p><p><code>openapi</code>ディレクトリには<code>openapi.yaml</code>という生成元ファイルと同じ名前のファイルが生成されています。</p><p>中身も一見すると生成元と全く同じように見えますが、よく見ると<code>x-openapi-router-controller</code>という項目が増えています。</p><p>これはAPIへのルーティング設定で、そのAPIがコールされた際にどのファイルが呼び出されるかが定義されています。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/v1/sc/&#123;security_cd&#125;/stockPrice:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">現在の株価を取得する</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">stock_price</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">description:</span> <span class="string">証券コードを指定する</span></span><br><span class="line">        <span class="attr">example:</span> <span class="string">&quot;4722&quot;</span></span><br><span class="line">        <span class="attr">explode:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">in:</span> <span class="string">path</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">security_cd</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">schema:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">&quot;200&quot;:</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/StockPrice&#x27;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">success</span></span><br><span class="line">        <span class="attr">&quot;400&quot;:</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Error&#x27;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Bad</span> <span class="string">Request</span></span><br><span class="line">        <span class="attr">&quot;404&quot;:</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Error&#x27;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Not</span> <span class="string">Found</span></span><br><span class="line">        <span class="attr">&quot;500&quot;:</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Error&#x27;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Internal</span> <span class="string">Server</span> <span class="string">Error</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Error&#x27;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">その他予期せぬエラー</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">株価取得</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">stockPrice</span></span><br><span class="line">      <span class="attr">x-openapi-router-controller:</span> <span class="string">openapi_server.controllers.stock_price_controller</span></span><br></pre></td></tr></table></figure><p>上記の場合、<code>/v1/sc/&#123;security_cd&#125;/stockPrice</code>がコールされた時、<code>openapi_server/controllers/stock_price_controller.py</code>の<code>stock_price関数</code>が呼び出されることになります。</p><h3 id="openapi-generator-ignore"><a href="#openapi-generator-ignore" class="headerlink" title=".openapi-generator-ignore"></a>.openapi-generator-ignore</h3><p>このファイルには自動生成時に上書きを禁止するディレクトリやファイルを指定します。</p><p>例えば<code>controllers</code>や<code>test</code>のファイルは自動生成を行うたびに中身が初期化されてしまうため、ここに追記します。</p><p>ちなみに手動で新規作成したファイルはそのまま残るため、ここに追加する必要はありません。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openapi_server/controllers/*</span><br><span class="line">openapi_server/test/*</span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>このDockerfileを使うことで、ローカルに簡単にwebサーバを立てることができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t openapi_server .</span><br><span class="line">$ docker run -p 8080:8080 openapi_server</span><br></pre></td></tr></table></figure><p>疎通確認をするとAPIのルーティングがしっかりと行われており、返り値が返却されることが分かると思います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost:8080/v1/sc/4722/stockPrice</span><br><span class="line"><span class="string">&quot;do some magic!&quot;</span></span><br></pre></td></tr></table></figure><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>Python自体が動的型付け言語なだけあってプログラミング時に型を常に気にする必要があり、結構精神を擦り減らすと思います。</p><p>OpenAPI Generatorは型ヒントも付与してくれるため、なるべくコードを自動生成することで型に関する開発コスト削減にもつながると思います。</p><p>自動生成コードを使えば結果的にAPIの具体的なロジックだけ実装すれば良いレベルになりますので、採用するメリットは大きいと感じました。</p><p>明日は、fujineさんの<a href="https://qiita.com/fujine/items/58b4616d7f50c462d62f">2022年にお世話になったオライリーのPython書籍5冊</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/Swagger/">Swagger</category>
      
      <category domain="https://future-architect.github.io/tags/API/">API</category>
      
      
      <comments>https://future-architect.github.io/articles/20221203a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Qiita Advent Calendar 2022 に参加します</title>
      <link>https://future-architect.github.io/articles/20221130b/</link>
      <guid>https://future-architect.github.io/articles/20221130b/</guid>
      <pubDate>Tue, 29 Nov 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221130b/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;450&quot;&gt;

&lt;p&gt;Photo taken by &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221130b/top.png" alt="" width="800" height="450"><p>Photo taken by <a href="https://twitter.com/kaedemalu">@kaedemalu</a></p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>技術ブログ運営の伊藤です。</p><p>今年も後わずかとなっており、年の瀬の忙しさや肌寒さを感じているところです。<br>年末の風物詩となっているQiita Advent Calendarですが、フューチャーは今年8年目の参加となります。本記事では、昨年の振り返りと今年の記事の内容などに触れていこうと思います。</p><ul><li><a href="https://qiita.com/advent-calendar/2022/future">フューチャー Advent Calendar 2022</a></li></ul><h2 id="アドベントカレンダーとは"><a href="#アドベントカレンダーとは" class="headerlink" title="アドベントカレンダーとは"></a>アドベントカレンダーとは</h2><p>エンジニア界隈ではアドベントカレンダーは、「参加者で記事をリレーして25日まで投稿する」というイベントにもなっていますが、本来はクリスマス当日を待ち望みながら、ひとつずつ開封するカレンダーのことを指します。</p><p><a href="https://qiita.com/advent-calendar/2022">Qiita Advent Calendar</a>ではこの、クリスマスの風物詩のアドベントカレンダーになぞらえて、12月1日から25日まで毎日リレー方式で記事を投稿するイベントを開催しています。</p><p>当社のアドベントカレンダーのようにOrganizationで参加を募る場合もありますし、Go言語、インフラ、AWSなどテクノロジーカットで参加を募るカレンダーもあります。<br>参加する場合は、興味のあるカレンダーの日程を埋めるだけで参加できるので、とても気軽に参加できます。</p><h2 id="2021年の振り返り"><a href="#2021年の振り返り" class="headerlink" title="2021年の振り返り"></a>2021年の振り返り</h2><img src="/images/20221130b/スクリーンショット_2022-11-29_19.08.22.png" alt="スクリーンショット_2022-11-29_19.08.22.png" width="1059" height="692" loading="lazy"><p><a href="https://qiita.com/advent-calendar/2021/future">2021年の一覧</a>を見ると、言語に留まらず、クラウドサービスの記事や量子コンピュータなどといったさまざまな記事が投稿されています。<br>私は入社して以来ずっと使っているTerraformをどのようにしてできるようになったかをまとめてみました。</p><h2 id="2022年の記事一覧"><a href="#2022年の記事一覧" class="headerlink" title="2022年の記事一覧"></a>2022年の記事一覧</h2><p><a href="https://qiita.com/advent-calendar/2022/future">2022年の一覧</a>は以下です。<br><img src="/images/20221130b/スクリーンショット_2022-11-29_19.14.45.png" alt="スクリーンショット_2022-11-29_19.14.45.png" width="1055" height="790" loading="lazy"></p><p>まだ何を書くか決まっていない人もいますが、フロントエンドからインフラ、モバイル、AIなど例年と同様に幅広い記事が公開される予定となっています。<br>また、今年も毎年参加のベテラン社員や、今年度入社のルーキーなど、分野だけでなく、社会人歴も厚めとなっております。</p><h3 id="発表テーマについて"><a href="#発表テーマについて" class="headerlink" title="発表テーマについて"></a>発表テーマについて</h3><p>例年の記事で掲載している内容を改めて引用します。</p><blockquote><p>例年と同じく、IT技術であること以外はフリーテーマです。</p></blockquote><blockquote><p>ポリシーとしては基本的にはQiitaそのものに投稿していただくスタイルですが（順位も少し気にしています）、Qiitaの投稿規約に沿わない記事（エッセー過ぎるもの、プログラミングに関係ないもの）は技術ブログ側に投稿することもあります。このあたりの決めは各人にお願いしています。<br>その他、個人ブログへのリンクは非推奨で基本的にはNGとアナウンスしています。</p></blockquote><p>記事投稿については個人が気になる場合は内部で確認するなどしますが、基本はガイドラインや倫理的に反しない内容で投稿していただくようお願いしております。また、個人ブログへのリンクは原則として当社のアドベントカレンダーではNGとしているので、参加される方は注意してください。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>このアドベントカレンダーを終えると、外部発信の締めくくりを個人的に感じますが、</p><ul><li>毎年の締めに使っていただく方</li><li>技術ブログには寄稿できなかったけどアドベントカレンダーくらいはなんとか投稿したい方</li></ul><p>というさまざまなモチベーションで参加していただいています。<br>毎年、さまざまな記事を見られることを私自身楽しみにしているので、参加される方と一丸になって全記事投稿とより読んでいただけるアドベントカレンダーになればと思います！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/Qiita/">Qiita</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC/">アドベントカレンダー</category>
      
      
      <comments>https://future-architect.github.io/articles/20221130b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Auth0全ユーザー数取得コマンドをPowerShellのInvokeコマンドで行う</title>
      <link>https://future-architect.github.io/articles/20221130a/</link>
      <guid>https://future-architect.github.io/articles/20221130a/</guid>
      <pubDate>Tue, 29 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Auth0のドキュメントに記載されているAPI操作は、curlコマンドで記載されています。</p><p>一方で、PowerShell標準の <code>Invoke-webRequest</code>や<code>Invoke-RestMethod</code> を用いて操作するといった日本語情報が少ないと思ったため、GETとPOSTリクエストの方法をまとめました。</p><p>ついでに、Auth0にいる全ユーザー数を取得する方法も共有します。</p><h2 id="Windowsのcurl事情"><a href="#Windowsのcurl事情" class="headerlink" title="Windowsのcurl事情"></a>Windowsのcurl事情</h2><p>CLIから通信を行える便利コマンド <code>curl</code> は元々UNIX系のコマンドで、もともとWindowsにはインストールされていませんでした。</p><p><a href="https://ascii.jp/elem/000/004/021/4021036/">こちらの記事</a>によると、2018年のWindows 10 Ver.1803からCurl.exeがWindowsにデフォルトで使えるようになったそうです。そこからは、コマンドプロンプトなら、<code>curl</code>、PowerShellの場合<code>curl.exe</code>と打てばcurlが使えます。</p><p>ここで大事なことですが、2018年までcurlが使えなかった時代の名残なのか、 <strong>PowerShellの場合、<code>curl</code> と打つとwindows用の<code>curl</code>であった<code>Invoke-WebRequest</code>が実行されてしまいます</strong>。（curl.exeだとcurlが動くが、curlにはinvokeコマンドのエイリアスが貼ってある）。普段Windows環境を触らない人にとって、高度な罠ですね。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\xxxx&gt; curl</span><br><span class="line"></span><br><span class="line">コマンド パイプライン位置 1 のコマンドレット Invoke-WebRequest</span><br><span class="line">次のパラメーターに値を指定してください:</span><br><span class="line">Uri:</span><br></pre></td></tr></table></figure><p>そのため、筆者のようにPowerShellでは 一般にイメージする <code>curl</code> がないものだと認識し、<code>Invoke-webRequest</code> や <code>Invoke-RestMethod</code> を使う必要があると勘違いする人も少なくないと思います。今回の記事は一連のAuth0のドキュメントにあったcurlコマンドをInvoke-RestMethodに置換して実行する流れを、一晩かけて勢いでまとめた記事です。</p><p>すべてを書き終えた後、先輩社員に<code>curl.exe</code>すればcurl出来るよと言われ悲しくなりましたが、2023年10月、2027年1月までサポートを受けているWindows Server 2012、2016にはcurlがないと思われるので、そういった環境を扱う方には有用だと思います。ちなみに、Windows Server 2019には <code>curl.exe</code> がありましたので、素直にそちらで操作すると良いでしょう。</p><p>注意ですが、この記事に記載しているcurlコマンドをコマンドプロンプト上で動かす場合は、<code>\</code>のエスケープと、改行を消す必要があります（記事上では読みやすさのために改行を入れています）。</p><h2 id="結論から話すと"><a href="#結論から話すと" class="headerlink" title="結論から話すと"></a>結論から話すと</h2><p>以下のコマンドで動きます。</p><ol><li>token取得（postリクエスト）  <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$client_id</span> =  <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="variable">$client_secret</span> =  <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="variable">$api</span> =  <span class="string">&quot;https://xxx/api/v2/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$body</span> = <span class="selector-tag">@</span>&#123;</span><br><span class="line">    client_id = <span class="string">&quot;<span class="variable">$client_id</span>&quot;</span></span><br><span class="line">    client_secret = <span class="string">&quot;<span class="variable">$client_secret</span>&quot;</span></span><br><span class="line">    audience = <span class="string">&quot;<span class="variable">$api</span>&quot;</span></span><br><span class="line">    grant_type = <span class="string">&quot;client_credentials&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Invoke-RestMethod</span> <span class="literal">-Method</span> Post <span class="literal">-Uri</span> <span class="string">&quot;https://xxx/oauth/token&quot;</span> <span class="literal">-ContentType</span> <span class="string">&#x27;application/json&#x27;</span> <span class="literal">-Body</span> (<span class="variable">$body</span>|<span class="built_in">ConvertTo-Json</span>) <span class="literal">-OutFile</span> output.txt</span><br><span class="line"><span class="built_in">cat</span> output.txt</span><br></pre></td></tr></table></figure></li><li>output.txtからtokenをコピーして2のコマンドを打つ</li><li>全ユーザー数取得コマンド(getリクエスト)  <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$token</span> = <span class="string">&quot;copyAndPasteHere&quot;</span></span><br><span class="line"><span class="built_in">Invoke-RestMethod</span> <span class="literal">-Method</span> Get <span class="literal">-Uri</span> <span class="string">&quot;https://xxx/api/v2/users?per_page=0&amp;include_totals=true&quot;</span> <span class="literal">-Headers</span> <span class="selector-tag">@</span>&#123;Authorization=<span class="string">&quot;Bearer <span class="variable">$token</span>&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li><li>output.txt が不要になれば削除します  <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> .\output.txt</span><br></pre></td></tr></table></figure></li></ol><h2 id="操作の流れ"><a href="#操作の流れ" class="headerlink" title="操作の流れ"></a>操作の流れ</h2><p>Auth0にいる総ユーザー数を取得を <code>Invoke-RestMethod</code> で記載する方法を共有します。</p><p>基本的には以下の2つのコマンドを<code>Invoke-RestMethod</code> で代替します。</p><ol><li>APIを利用するtokenを取得する（POSTリクエスト）</li><li>総ユーザー数取得APIを打つ（GETリクエスト）</li></ol><h3 id="1-APIを利用するtokenを取得する（POSTリクエスト）"><a href="#1-APIを利用するtokenを取得する（POSTリクエスト）" class="headerlink" title="1. APIを利用するtokenを取得する（POSTリクエスト）"></a>1. APIを利用するtokenを取得する（POSTリクエスト）</h3><p>ユーザー数取得に使う <strong>Auth0 User Management API</strong> を利用するためのtokenをまずは取得します。</p><p>User Management APIの利用権限のあるAPIのtoken取得コマンドが、<strong>API設定のTestタブに</strong>以下の画像のように書いてあるので参照します。tokenを取得する<code>cURLコマンド</code>と、すごく親切にバックエンドでよく用いる言語での取得方法まで記載しているので参考になります。</p><img src="/images/20221130a/0.png" alt="" width="1200" height="706" loading="lazy"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl --request POST \</span><br><span class="line">  --url https://$domain/oauth/token \</span><br><span class="line">  --header &#x27;content-type: application/json&#x27; \</span><br><span class="line">  --data &#x27;&#123;&quot;client_id&quot;:&quot;alphanumericWithCapita1Letter&quot;,&quot;client_secret&quot;:&quot;alphanumericWithCapita1LetterChottoNaga1&quot;,&quot;audience&quot;:&quot;https://$domain/api/v2/&quot;,&quot;grant_type&quot;:&quot;client_credentials&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><h4 id="観察"><a href="#観察" class="headerlink" title="観察"></a>観察</h4><p>まず元のCURLが何やってるか見ます。</p><ul><li><strong>POST</strong>リクエスト</li><li>content typeが<strong>application&#x2F;json</strong>形式</li><li>dataに<strong>json文字列でclient認証情報を渡している</strong></li></ul><p><strong>data</strong>とありますが <strong>HTTPリクエストではbody</strong> とも呼びます。ここまでで、 <strong><code>Invoke-RestMethod</code>でやることは「JSONをPOSTするリクエストを作れば良い</strong>」ということが分かります。</p><h4 id="公式ドキュメント見る"><a href="#公式ドキュメント見る" class="headerlink" title="公式ドキュメント見る"></a>公式ドキュメント見る</h4><p>2022年11月時点ではpowershell-7.3が最新のようで、公式ドキュメントは<a href="https://learn.microsoft.com/ja-jp/powershell/module/microsoft.powershell.utility/invoke-restmethod?view=powershell-7.3">これ</a>です。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-RestMethod</span></span><br><span class="line">      [-<span class="type">Method</span> &lt;<span class="type">WebRequestMethod</span>&gt;]</span><br><span class="line">      [-<span class="type">FollowRelLink</span>]</span><br><span class="line">      [-<span class="type">MaximumFollowRelLink</span> &lt;<span class="built_in">Int</span><span class="type">32</span>&gt;]</span><br><span class="line">      [-<span class="type">ResponseHeadersVariable</span> &lt;<span class="built_in">String</span>&gt;]</span><br><span class="line">      [-<span class="type">StatusCodeVariable</span> &lt;<span class="built_in">String</span>&gt;]</span><br><span class="line">      [-<span class="type">UseBasicParsing</span>]</span><br><span class="line">      [-<span class="type">Uri</span>] &lt;Uri&gt;</span><br><span class="line">      [-<span class="type">HttpVersion</span> &lt;<span class="type">Version</span>&gt;]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>中々難しそうですが、コレを見ると、 <strong><code>Invoke-RestMethod</code>で各オプションを付ければ良い</strong> ことが推測できます。</p><p><strong>CURLで指定したオプションは以下のようにマッピング出来そう</strong>ですね。</p><ul><li>–requestは-Method<ul><li><code>-Method Post</code></li></ul></li><li>–urlは-Uri<ul><li><code>-Uri https://$domain/oauth/token</code></li></ul></li><li>–headerはHeadersとContentTypeが両方ありますね、ContentTypeだけ指定するので-ContentTypeのみ使います。（Headersにcontent-typeと入れたらエラーになってました）<ul><li><code>-ContentType application/json</code></li></ul></li><li>–dataは-body<ul><li>後述しますがいい感じに書かないとNGでした</li></ul></li></ul><p>これで、<strong>bodyに当たる部分以外は良い感じにマッピング出来ました。</strong></p><p>続いてはbodyの記載方法を見ます。</p><img src="/images/20221130a/image.png" alt="" width="700" height="1083" loading="lazy"><p>ぱっと見は理解することが難しいですよね。オブジェクトで渡せば良いのかな？とわかります。</p><p><a href="https://learn.microsoft.com/ja-jp/powershell/module/microsoft.powershell.utility/invoke-restmethod?view=powershell-7.3#2-post">公式にPOSTの例が</a>あるので参考にできます。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$Cred</span> = <span class="built_in">Get-Credential</span></span><br><span class="line"><span class="variable">$Url</span> = <span class="string">&quot;https://server.contoso.com:8089/services/search/jobs/export&quot;</span></span><br><span class="line"><span class="variable">$Body</span> = <span class="selector-tag">@</span>&#123;</span><br><span class="line">    search = <span class="string">&quot;search index=_internal | reverse | table index,host,source,sourcetype,_raw&quot;</span></span><br><span class="line">    output_mode = <span class="string">&quot;csv&quot;</span></span><br><span class="line">    earliest_time = <span class="string">&quot;-2d@d&quot;</span></span><br><span class="line">    latest_time = <span class="string">&quot;-1d@d&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Invoke-RestMethod</span> <span class="literal">-Method</span> <span class="string">&#x27;Post&#x27;</span> <span class="literal">-Uri</span> <span class="variable">$url</span> <span class="literal">-Credential</span> <span class="variable">$Cred</span> <span class="literal">-Body</span> <span class="variable">$body</span> <span class="literal">-OutFile</span> output.csv</span><br></pre></td></tr></table></figure><p>どうやらシェル内でオブジェクトを作れば良さそうだとわかります。この例を参考に以下のように動かすと <strong>エラーになります</strong>。</p><figure class="highlight powershell"><figcaption><span>エラーになった実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$body</span> = <span class="selector-tag">@</span>&#123;</span><br><span class="line">    client_id = <span class="string">&quot;alphanumericWithCapita1Letter&quot;</span></span><br><span class="line">client_secret = <span class="string">&quot;alphanumericWithCapita1LetterChottoNaga1&quot;</span></span><br><span class="line">audience = <span class="string">&quot;https://<span class="variable">$domain</span>/api/v2/&quot;</span></span><br><span class="line">grant_type = <span class="string">&quot;client_credentials&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Invoke-RestMethod</span> <span class="literal">-Method</span> Post <span class="literal">-Uri</span> <span class="string">&quot;https://<span class="variable">$domain</span>/oauth/token&quot;</span> <span class="literal">-ContentType</span> <span class="string">&#x27;application/json&#x27;</span> <span class="literal">-Body</span> <span class="variable">$body</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-RestMethod</span> : invalid json</span><br></pre></td></tr></table></figure><p>理由ですが、bodyにjson渡す渡す詐欺（コンテンツタイプでJSON渡すと宣言してるがJSONを渡していない状態）をしてるようです。よしなにやってくれると少し期待しましたが、ダメなようです。<br>（※もし、何かしらの手法があれば教えてください）</p><h4 id="対応方法"><a href="#対応方法" class="headerlink" title="対応方法"></a>対応方法</h4><p><code>auth0 invoke rest method post body json powershell</code> といったキーワードで探すと、<a href="https://www.thecodebuzz.com/invoke-restmethod-get-post-example-with-parameters/">こちらの記事</a>に記載している通り、 <code>ConvertTo-Json</code><strong><a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/convertto-json?view=powershell-7.3">コマンド</a>を用いbodyのオブジェクトをJSONに変換</strong>すれば良いということがわかります（<code>-Body $body</code> ➔　<code>-Body ($body|ConvertTo-Json)</code>）。</p><p>※公式ドキュメントの関連記事の箇所にも <code>ConvertTo-Json</code> の記載がありますが、本文にも記載があると助かる人もいるかなと思い、公式ドキュメントにフィードバックは出しておきました。これが採用されると嬉しいなと思います。</p><p>結果として、以下のコマンドで動きます。</p><figure class="highlight powershell"><figcaption><span>成功例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$body</span> = <span class="selector-tag">@</span>&#123;</span><br><span class="line">    client_id = <span class="string">&quot;alphanumericWithCapita1Letter&quot;</span></span><br><span class="line">client_secret = <span class="string">&quot;alphanumericWithCapita1LetterChottoNaga1&quot;</span></span><br><span class="line">audience = <span class="string">&quot;https://<span class="variable">$domain</span>/api/v2/&quot;</span></span><br><span class="line">grant_type = <span class="string">&quot;client_credentials&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Invoke-RestMethod</span> <span class="literal">-Method</span> Post <span class="literal">-Uri</span> <span class="string">&quot;https://<span class="variable">$domain</span>/oauth/token&quot;</span> <span class="literal">-ContentType</span> <span class="string">&#x27;application/json&#x27;</span> <span class="literal">-Body</span> (<span class="variable">$body</span>|<span class="built_in">ConvertTo-Json</span>)</span><br></pre></td></tr></table></figure><p>しかし、少し斜め上な結果になります。</p><img src="/images/20221130a/1.png" alt="1.png" width="1200" height="181" loading="lazy"><h4 id="出力結果最後まで出ない問題"><a href="#出力結果最後まで出ない問題" class="headerlink" title="出力結果最後まで出ない問題"></a>出力結果最後まで出ない問題</h4><p>PowerShellの仕様か、Invoke-RestMethodの仕様なのか、<strong>出力が最後まで出てくれずトークンが分からない問題</strong> が発生しました。</p><p>解決策として、公式の例を真似て<strong>ファイルに出力して表示</strong>することにします（愚直に<code>output.txt</code>に出して<code>cat output.txt</code>します）。シェルに詳しい人だったら良い感じにCLIの出力出来たかもしれないですが、詳しい方は教えてください。</p><p>そのため、以下のコマンドを付けます。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">... <span class="literal">-OutFile</span> output.txt</span><br><span class="line"><span class="built_in">cat</span> output.txt</span><br></pre></td></tr></table></figure><h3 id="総ユーザー数取得APIを打つ"><a href="#総ユーザー数取得APIを打つ" class="headerlink" title="総ユーザー数取得APIを打つ"></a>総ユーザー数取得APIを打つ</h3><p>最初に、Auth0全ユーザー数の取得コマンドを探すため、公式で用意されている<a href="https://auth0.com/docs/api/management/v2#!/Users/get_users">Auth0 User Management APIのドキュメント</a>を見ます。</p><p>そうすると、<code>Users</code>　➔　<code>List or Search Users</code>の箇所のパラメータを眺めてると <strong>小さく取得できる旨が書いて</strong> あります。APIの概要にはページング番号を指定しながらのユーザー取得しかできないかのように書いてあるが、よくよくパラメータを見ると取得できることがわかります。</p><p><strong>API概要</strong>:1ページに取得されるユーザー数を指定してユーザーリストを取得できるんやでと記載されています。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Retrieve details of users. It is possible to:</span><br><span class="line"></span><br><span class="line">- Specify a search criteria for users</span><br><span class="line">- Sort the users to be returned</span><br><span class="line">- Select the fields to be returned</span><br><span class="line">- Specify the number of users to retrieve per page and the page index</span><br></pre></td></tr></table></figure><p><strong>パラメータ</strong>:include_totalsをオンにすると<strong>APIのレスポンスにトータルを含められる</strong>と書いています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include_totals</span><br><span class="line">Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).</span><br></pre></td></tr></table></figure><p>しかし、この説明文だと、表示するページの合計なのか、全体なのか曖昧ですよね。</p><img src="/images/20221130a/image_2.png" alt="image.png" width="612" height="200" loading="lazy"><p>また、概要にある通りユーザーのリストが取得できてしまうが、合計人数だけ知りたいので<strong>ユーザー情報をなくすオプションを探します</strong>。※全パラメータは任意</p><div class="scroll"><table><thead><tr><th>パラメータ</th><th>説明</th></tr></thead><tbody><tr><td>page</td><td>返却するページ番号（0インデックス）</td></tr><tr><td>per_page</td><td>1ページに含むユーザー数、空の場合全件返却</td></tr><tr><td>include_totals</td><td>レスポンスに合計人数を入れる</td></tr><tr><td>sort</td><td>ソート項目・順を決める</td></tr><tr><td>connection</td><td>コネクションフィルター（よく分からず）</td></tr><tr><td>fields</td><td>表示&#x2F;非表示する項目を決める。空の場合全項目返却</td></tr><tr><td>include_fields</td><td>fieldsで指定した項目を表示させるか非表示にするか決める</td></tr><tr><td>q</td><td>検索クエリ、形式はLucene query string syntaxらしい</td></tr><tr><td>search_engine</td><td>サーチエンジンを決める、詳細はなかったため謎</td></tr></tbody></table></div><p><code>per_page</code>に着目すると<code>include_totals</code>だけ指定して<code>per_page</code>を<strong>空にした場合全ユーザー情報が取得できてしまう</strong>ようです。そしてユーザー取得フラグのようなものはなく、 <strong><code>per_page</code>をいじるしかなさそう</strong> なので、一旦これを0にしてAPIを実行することにします。</p><p>token取得時と同様に、まず成功するcurlコマンドを共有します。401認証失敗エラーにならないようにtokenをつけます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl --request GET \</span><br><span class="line">  --url <span class="string">&quot;https://<span class="variable">$domain</span>/api/v2/users?per_page=0&amp;include_totals=true&quot;</span> \</span><br><span class="line">  --header <span class="string">&#x27;authorization: Bearer $token&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="観察・マッピング"><a href="#観察・マッピング" class="headerlink" title="観察・マッピング"></a>観察・マッピング</h3><p>クエリパラメータはGETなのでシンプルですね。token渡したGETリクエストするだけです。<a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-restmethod?view=powershell-7.3">公式ドキュメントのリンクはこちら</a>です。</p><ul><li>GETリクエストをしている<ul><li><code>--request GET</code>が<code>--Method Get</code>になる</li></ul></li><li>URLにPOSTと違いクエリパラメータがある<ul><li><code>--url</code>が<code>-Uri</code>になる</li><li><code>-Uri https://$domain/api/v2/users?per_page=0&amp;include_totals=true</code></li><li>URLにパラメータを入れることをクエリパラメータと言う</li></ul></li><li>token認証情報を渡している<ul><li><code>--header</code>が<code>-Headers</code>になる</li><li><code>-Headers @&#123;Authorization=&quot;Bearer $token&quot;&#125;</code></li><li>cURLと違い<code>Invoke-RestMethod</code>特有のオブジェクト形式で書かないといけないので@{xxx}の形式となる</li><li>Authenticationオプションなどでも指定可能だったかもしれない（未検証）</li></ul></li></ul><p>以上からInvokeコマンドに書き換えます。</p><figure class="highlight powershell"><figcaption><span>実行例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-RestMethod</span> <span class="literal">-Method</span> Get <span class="literal">-Uri</span> <span class="string">&quot;https://<span class="variable">$domain</span>/api/v2/users?per_page=0&amp;include_totals=true&quot;</span> <span class="literal">-Headers</span> <span class="selector-tag">@</span>&#123;Authorization=<span class="string">&quot;Bearer <span class="variable">$token</span>&quot;</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">start</span>  : <span class="number">0</span></span><br><span class="line">limit  : <span class="number">0</span></span><br><span class="line">length : <span class="number">0</span></span><br><span class="line">users  : &#123;&#125;</span><br><span class="line">total  : xxx</span><br></pre></td></tr></table></figure><p>無事totalの数字が取得できました！</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>curlコマンドの代替として、PowerShell標準の <code>Invoke-webRequest</code>だったり<code>Invoke-RestMethod</code> を用いてAuth0のAPIを操作する例をまとめました。</p><p>IT初心者がIT課題をどう解決していけば良いのか何となく分かるような文章を書けたら良いなと最近考えているため、ハマった部分や調査の流れもなるべく残すように記載しました。ググっても情報が見つかりにくかったことを記事にして誰かを助ける備忘録にもなってたら良いなと思います。</p><p>この記事が良いなと思ったら感想下さると励みになります。Twitterなどでコメントいただけると幸いです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/">認証認可</category>
      
      
      <category domain="https://future-architect.github.io/tags/Auth0/">Auth0</category>
      
      <category domain="https://future-architect.github.io/tags/curl/">curl</category>
      
      <category domain="https://future-architect.github.io/tags/PowerShell/">PowerShell</category>
      
      <category domain="https://future-architect.github.io/tags/Invoke-Request/">Invoke-Request</category>
      
      
      <comments>https://future-architect.github.io/articles/20221130a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go-projを用いて日本測地系/世界測地系の変換</title>
      <link>https://future-architect.github.io/articles/20221129a/</link>
      <guid>https://future-architect.github.io/articles/20221129a/</guid>
      <pubDate>Mon, 28 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221129a/logo.png&quot; alt=&quot;&quot; width=&quot;250&quot; height=&quot;76&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221129a/logo.png" alt="" width="250" height="76"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG DXユニットの真野です。</p><p>ある緯度経度の座標を日本測地系から世界測地系へ変換する際に、<a href="https://github.com/everystreet/go-proj">everystreet&#x2F;go-proj</a>というパッケージを用いました。私にとって初めてのcgoを用いたライブラリ利用であり、環境構築に少し悩んだので手順をまとめておきます。</p><p>なお、類似に<a href="https://github.com/go-spatial/proj">go-spatial&#x2F;proj</a>もありますが、そちらは日本測地系がサポートされていないようでした。測地系変換の知識が無いのでノータッチですがPure Go実装にできると嬉しいですね。</p><h2 id="日本測地系-x2F-世界測地系-とは"><a href="#日本測地系-x2F-世界測地系-とは" class="headerlink" title="日本測地系 &#x2F; 世界測地系 とは"></a>日本測地系 &#x2F; 世界測地系 とは</h2><p>今泉さんの <a href="/articles/20220719b/">郵便番号・住所・緯度経度の体系について</a> に記載がありますので参考ください。東京付近では日本測地系と世界測地系との誤差が450m程度あるらしく、大抵のユースケースではコードを統一した方が良さそうです。</p><p>他にも以下のサイトが参考になります。</p><ul><li><a href="https://www.gsi.go.jp/LAW/G2000-g2000-h3.htm">３　日本測地系と世界測地系  | 国土地理院</a></li><li><a href="https://www.pasco.co.jp/recommend/word/word075/">測地系とは？（日本測地系と世界測地系） | 用語集とGISの使い方 | 株式会社パスコ</a></li></ul><h2 id="日本測地系-x2F-世界測地系-の変換について"><a href="#日本測地系-x2F-世界測地系-の変換について" class="headerlink" title="日本測地系 &#x2F; 世界測地系 の変換について"></a>日本測地系 &#x2F; 世界測地系 の変換について</h2><p><a href="http://kamoland.com/wiki/wiki.cgi?%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%C2%AC%EF%BF%BD%CF%B7%CF%A4%D8%A4%EF%BF%BD%EF%BF%BD%D0%B1%EF%BF%BD">日本測地系への対応 - プログラマー’sペイジ</a> さんによると、概ね3つの変換パターンがあるようです。</p><ol><li>1次式による近似<ul><li>ググるとすぐ出てくる↓の式<ul><li><code>lonJ = lonW + latW * 0.000046047 + lonW * 0.000083049 – 0.010041</code></li><li><code>latJ = latW + latW * 0.00010696 – lonW * 0.000017467 – 0.0046020</code></li></ul></li><li>シンプルで素晴らしい。約2.5~2.8メートルズレる</li></ul></li><li>三次元直交座標系に変換して平行移動<ul><li><strong>PROJ が利用している方式</strong></li><li>3に比べて、約0.2~0.4メートルズレる</li></ul></li><li>地域ごとの変換パラメータで変換する<ul><li>パラメータファイルを用いた最も精度が高い方式</li><li><a href="https://vldb.gsi.go.jp/sokuchi/surveycalc/tky2jgd/main.html">Web版 TKY2JGD</a> といったツールがある</li></ul></li></ol><p>今回は1は許容できないけど、2のレベルであれば問題ないユースケースだったので、PROJを用いることにしました。</p><p>※ズレの計算は、3のWeb版TKY2JGDで 日本測地系→世界測地系に変換したものを正とし、1,2の変換後の緯度経度を、<a href="https://vldb.gsi.go.jp/sokuchi/surveycalc/surveycalc/bl2stf.html">測量計算(距離と方位角の計算)</a> のWebツールで計測した。場所は五反田駅など関東の複数地点で試しました</p><h2 id="この変換を覚えると嬉しいの？"><a href="#この変換を覚えると嬉しいの？" class="headerlink" title="この変換を覚えると嬉しいの？"></a>この変換を覚えると嬉しいの？</h2><p>日本測地系は、旧日本測地系（Tokyo Datum）と呼ばれるだけあり、<a href="https://www.gsi.go.jp/LAW/G2000-g2000-h3.htm#:~:text=%E6%98%8E%E6%B2%BB%E6%99%82%E4%BB%A3%E3%81%AB%E6%8E%A1%E7%94%A8%E3%81%97%E3%81%9F%E3%83%99%E3%83%83%E3%82%BB%E3%83%AB%E6%A5%95%E5%86%86%E4%BD%93%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%81%BE%E3%81%97%E3%81%9F">明治時代に作られ</a>、2002年4月1日まで利用されていた規格です。それ以降は日本測地系2000（JGD2000）あるいは、日本測地系2011（JGD2011）が使われています。JGD2000とJGD2011のどちらも世界測地系と言える経度・緯度の体系です。GD2011へ移行したきっかけは、東日本大震災による大規模な地殻変動の発生への対応だそうで、基本的にJGD2000と、JGD2011はTokyo Datumに比べると、スマホアプリのマップにピンを立ててナビゲートするようなケースでは同一と見なして良いレベルです。具体的には<a href="https://club.informatix.co.jp/?p=998#:~:text=%E3%82%82%E7%95%B0%E3%81%AA%E3%82%8A%E3%80%81-,%E6%97%A5%E6%9C%AC%E8%BF%91%E8%BE%BA%E3%81%A7%E3%81%9D%E3%81%AE%E5%B7%AE%E3%81%AF5cm%E7%A8%8B%E5%BA%A6%E3%81%A7%E3%81%99,-%E3%80%82%E3%81%93%E3%81%AE%E5%B7%AE%E3%82%92">日本近辺で5cm程度の差がある</a>とのことです。</p><p>何が言いたいかというと、2002年以降に公開されたデータは大概、世界測地系であるJGD2000またはJGD2011です。そのため、日本測地系→世界測地系にしたいユースケースってそんなに多くないと思います（古いデータを移行したいとか、その古いデータを元にGoogle Mapなどに表示させたいなど？）。この記事に書かれたサンプルコードは、古い資産を活用したい場合など、限定された場面で参考になるんだと認識してもらえればです。</p><p>例えば、国土交通省の<a href="https://nlftp.mlit.go.jp/isj/">街区レベル位置参照情報</a>はJGD2000形式です。同じく国土交通省の<a href="https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-A45.html#prefecture01">国有林野データ</a>はJGD2011でした。少なくても公共機関から取得できるようなデータは世界測地系になっているのかなと思います。</p><h2 id="PROJとは"><a href="#PROJとは" class="headerlink" title="PROJとは"></a>PROJとは</h2><p><a href="https://proj.org/">PROJ</a> はこの界隈では有名な、地図投影や測地変換が行えるツールで、コマンドラインから呼び出しと、ライブラリのようにも使えるAPIも提供しています。</p><p>コマンドラインから日本測地系から世界測地系に変換する例です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日本測地系（EPSG 4301）から世界測地系（EPSG 4612）に変換</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;139.477799479 35.4891015625&quot;</span> | cs2cs +init=epsg:4301 +to +init=epsg:4612 -f <span class="string">&quot;%.10f&quot;</span></span><br><span class="line">139.4745977186  35.4923543046 0.0000000000</span><br></pre></td></tr></table></figure><p>参考: <a href="http://pen.envr.tsukuba.ac.jp/~torarimon/?%C2%AC%EF%BF%BD%CF%B7%EF%BF%BD:+datum">http://pen.envr.tsukuba.ac.jp/~torarimon/?%C2%AC%C3%CF%B7%CF%3A+datum</a></p><h2 id="各言語からPROJを用いる"><a href="#各言語からPROJを用いる" class="headerlink" title="各言語からPROJを用いる"></a>各言語からPROJを用いる</h2><p>Java（<a href="https://github.com/locationtech/proj4j">proj4j</a>）, JavaScript（<a href="https://github.com/proj4js/proj4js">proj4js</a>）, Python（<a href="https://pyproj4.github.io/pyproj/stable/">pyproj</a>）など様々な言語によるポーティングが公開されています。</p><p>Goの場合は冒頭でも紹介した<a href="https://github.com/everystreet/go-proj">everystreet&#x2F;go-proj</a>がそれにあたります。</p><p>PROJはC++で実装されており、cgo経由で扱うため、PROJ環境を構築した後に、go-projから呼び出す必要があります。</p><h2 id="go-projの利用開始"><a href="#go-projの利用開始" class="headerlink" title="go-projの利用開始"></a>go-projの利用開始</h2><p>WindowsとWSL2での構築手順をまとめます。Macは手元に無かったので割愛します。</p><p>全体の注意ですが、2022.11.20時点でPROJの最新バージョンは <code>9.1.0</code> ですが、go-projは <code>8.1.0</code> に対応しています。8.1系だと最新が <code>8.1.1</code> が存在するので、この記事ではそのバージョンを利用します。</p><p>PROJのインストールは<a href="https://proj.org/install.html#">公式ドキュメント</a> に細かく手順が載っていますが、<code>conda</code> 経由で行います（WSL2はapt-getも追記しておきます）。</p><p>各環境からは次のようなgo-projを用いたコードが動作することを確かめます。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/everystreet/go-proj/v8/proj&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/golang/geo/s1&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">wgsLng, wgsLat := Tky2Wgs(<span class="number">128542740</span>/<span class="type">float64</span>(<span class="number">60</span>*<span class="number">60</span>*<span class="number">256</span>), <span class="number">32706756</span>/<span class="type">float64</span>(<span class="number">60</span>*<span class="number">60</span>*<span class="number">256</span>))</span><br><span class="line">fmt.Printf(<span class="string">&quot;%f %f\n&quot;</span>, wgsLng, wgsLat) <span class="comment">// 139.474598 35.492354</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Tky2Wgs</span><span class="params">(lng, lat <span class="type">float64</span>)</span></span> (<span class="type">float64</span>, <span class="type">float64</span>) &#123;</span><br><span class="line">coord := proj.LP&#123;</span><br><span class="line">Lng: s1.Angle(lng),</span><br><span class="line">Lat: s1.Angle(lat),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err := proj.CRSToCRS(</span><br><span class="line"><span class="string">&quot;EPSG:4301&quot;</span>, <span class="comment">// 日本測地系(TOKYO) 緯度経度</span></span><br><span class="line"><span class="string">&quot;EPSG:4326&quot;</span>, <span class="comment">// 世界測地系(WGS84) 緯度経度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(pj proj.Projection)</span></span> &#123;</span><br><span class="line">proj.TransformForward(pj, &amp;coord)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err) <span class="comment">// サンプルコードなのでpanicにしていますが、errorを戻り値にした方が良いです</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="type">float64</span>(coord.Lng), <span class="type">float64</span>(coord.Lat)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Windows環境構築手順"><a href="#Windows環境構築手順" class="headerlink" title="Windows環境構築手順"></a>Windows環境構築手順</h3><p><code>conda</code> は <code>miniconda</code> を利用します。環境がない方は以下からインストールください。</p><ul><li><a href="https://docs.conda.io/en/latest/miniconda.html">https://docs.conda.io/en/latest/miniconda.html</a></li></ul><p>もし、プロキシ環境で構築する場合は <code>%USERPROFILE%</code> 直下に <code>.condarc</code> ファイルを作成し、プロキシ情報を追記ください。</p><figure class="highlight yml"><figcaption><span>.condarc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxy_servers:</span></span><br><span class="line">    <span class="attr">http:</span> <span class="string">http://&#123;user&#125;:&#123;password&#125;@proxy.example.co.jp:8000</span></span><br><span class="line">    <span class="attr">https:</span> <span class="string">http://&#123;user&#125;:&#123;password&#125;@proxy.example.co.jp:8000</span></span><br></pre></td></tr></table></figure><p>※ {password} に記号が入っている人で、上記で認証が通らない方は、URLエンコードして設定してみてください</p><p>conda環境ができたら、インストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; conda install -c conda-forge proj=8.2.1 proj-data=1.11.0</span><br></pre></td></tr></table></figure><p>成功すれば以下のようなバージョンが表示されると思います。インストールが成功しているけど<code>proj</code>コマンドが動かない人は、 <code>%USERPROFILE%\Miniconda3\Library\bin</code> をPATHに追加してください。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;proj</span><br><span class="line">Rel. 8.2.1, January 1st, 2022</span><br><span class="line">usage: proj [-bdeEfiIlmorsStTvVwW [args]] [+opt[=arg] ...] [file ...]</span><br></pre></td></tr></table></figure><p>次に環境変数を設定し、go get でパッケージをインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 環境変数</span></span><br><span class="line">&gt; <span class="built_in">set</span> CGO_CFLAGS=-I%USERPROFILE%\Miniconda3\Library\include</span><br><span class="line">&gt; <span class="built_in">set</span> CGO_LDFLAGS=-L%USERPROFILE%\Miniconda3\Library\lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># go-projの取得</span></span><br><span class="line">&gt; go get -u github.com/everystreet/go-proj/v8</span><br></pre></td></tr></table></figure><p>これで動くと思います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">139.474598 35.492354</span><br></pre></td></tr></table></figure><p>もし、以下のようなエラーが出てのであれば、Cのヘッダーファイルが見つかっていないということですので、 <code>CGO_CFLAGS</code> で指定している、includeフォルダのパスを確認し再設定ください。</p><figure class="highlight sh"><figcaption><span>失敗例1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># github.com/everystreet/go-proj/v8/cproj</span></span><br><span class="line">~\go\pkg\mod\github.com\everystreet\go-proj\v8@v8.0.0\cproj\cgo_helpers.go:8:10: fatal error: proj.h: No such file or directory</span><br><span class="line"> <span class="comment">#include &quot;proj.h&quot;</span></span><br><span class="line">          ^~~~~~~~</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure><p>あるいは、以下のエラーの場合は、 <code>CGO_LDFLAGS</code> で設定したライブラリのパスを確認し再設定ください。</p><figure class="highlight sh"><figcaption><span>失敗例2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~\go\go1.19.1\pkg\tool\windows_amd64\link.exe: running gcc failed: <span class="built_in">exit</span> status 1</span><br><span class="line">C:/Program Files/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find -lproj</span><br><span class="line">...</span><br><span class="line">collect2.exe: error: ld returned 1 <span class="built_in">exit</span> status</span><br></pre></td></tr></table></figure><h2 id="WSL2インストール手順"><a href="#WSL2インストール手順" class="headerlink" title="WSL2インストール手順"></a>WSL2インストール手順</h2><h3 id="condaを使う場合"><a href="#condaを使う場合" class="headerlink" title="condaを使う場合"></a>condaを使う場合</h3><p>ほぼWindows側と同じです。miniconda3 をインストールし、PROJをインストール＆環境変数を設定しておしまいです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># minicondaインストール（プロキシ設定は割愛）</span></span><br><span class="line">$ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line">$ bash Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># PATHを通す（この例では .bashrcに export PATH=$PATH:~/miniconda3/bin を追記）</span></span><br><span class="line">$  ~/.bashrc</span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># PROJインストール</span></span><br><span class="line">$ conda install -c conda-forge proj=8.2.1 proj-data=1.11.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># CGOのパラメータ設定</span></span><br><span class="line">$ <span class="built_in">export</span> CGO_CFLAGS=-I<span class="variable">$&#123;HOME&#125;</span>/miniconda3/include</span><br><span class="line">$ <span class="built_in">export</span> CGO_LDFLAGS=-L<span class="variable">$&#123;HOME&#125;</span>/miniconda3/lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># go-projの取得</span></span><br><span class="line">&gt; go get -u github.com/everystreet/go-proj/v8</span><br></pre></td></tr></table></figure><p>これでgo-projが実行できるようになると思います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">139.474598 35.492354</span><br></pre></td></tr></table></figure><h3 id="apt-を使う場合"><a href="#apt-を使う場合" class="headerlink" title="apt を使う場合"></a>apt を使う場合</h3><p><code>conda</code> を使いたくない方向けに手順を残しておきます。まず、公式のパッケージリポジトリでインストールできるprojが6系と古いため、3rdパーティのパッケージリポジトリを参照する必要があります。以下から利用するリポジトリを選択し、運用していただいていることに感謝します。</p><ul><li><a href="https://packages.ubuntu.com/jammy/amd64/libproj-dev/download">https://packages.ubuntu.com/jammy/amd64/libproj-dev/download</a></li></ul><p>私は以下のように、 <code>proj.list</code> というファイルを作って追加しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/apt/sources.list.d/proj.list</span><br><span class="line">deb http://kr.archive.ubuntu.com/ubuntu jammy main universe</span><br></pre></td></tr></table></figure><p>これでPROJをインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># アップデート</span></span><br><span class="line">$ sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># PROJ 8.2.1-1 が存在することを確認します</span></span><br><span class="line"><span class="comment"># $ sudo apt-cache show libproj-dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># インストール</span></span><br><span class="line">$ sudo apt install proj-bin=8.2.1-1 libproj-dev=8.2.1-1</span><br></pre></td></tr></table></figure><p>これでgo-projが実行できるようになると思います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">139.474598 35.492354</span><br></pre></td></tr></table></figure><p>apt経由の場合は、<code>libproj-dev</code> でインストールすると <code>/usr/include</code> にヘッダファイルなどがインストールされるため、CGO系のフラグは設定しなくても動くと思います。</p><h2 id="高速化したい場合"><a href="#高速化したい場合" class="headerlink" title="高速化したい場合"></a>高速化したい場合</h2><p><code>proj.CRSToCRS()</code> ですが、処理件数が多い処理に利用すると物足りない性能でした（1変換に10msほどかかりました）。理由は、C++側のライブラリに測地系のロードを都度行うためだと思われます。そのため、<code>proj.CRSToCRS()</code> をそのまま利用するのでなく、その內部で利用している <code>cproj</code> を直接利用すると良いかもしれません。</p><p>例えば以下のような実装です（※ちゃんとメモリリークしないか確かめていないです）。これで1000倍くらい早くなりました。</p><figure class="highlight go"><figcaption><span>改良版</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/everystreet/go-proj/v8/cproj&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/everystreet/go-proj/v8/proj&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/golang/geo/s1&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pj := NewProjection(<span class="string">&quot;EPSG:4301&quot;</span>, <span class="string">&quot;EPSG:4326&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> pj.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>*<span class="number">1000</span>; i++ &#123;</span><br><span class="line">wgsLng, wgsLat := pj.CRSToCRS(<span class="number">128542740</span>/<span class="type">float64</span>(<span class="number">60</span>*<span class="number">60</span>*<span class="number">256</span>), <span class="number">32706756</span>/<span class="type">float64</span>(<span class="number">60</span>*<span class="number">60</span>*<span class="number">256</span>))</span><br><span class="line">fmt.Printf(<span class="string">&quot;%f %f\n&quot;</span>, wgsLng, wgsLat)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Projection <span class="keyword">struct</span> &#123;</span><br><span class="line">ctx        *cproj.PJ_CONTEXT</span><br><span class="line">src        *cproj.PJ</span><br><span class="line">dst        *cproj.PJ</span><br><span class="line">pj         *cproj.PJ</span><br><span class="line">normalized *cproj.PJ</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewProjection</span><span class="params">(source, target <span class="type">string</span>)</span></span> Projection &#123;</span><br><span class="line">ctx := cproj.Context_create()</span><br><span class="line">src := cproj.Create(ctx, source)</span><br><span class="line">dst := cproj.Create(ctx, target)</span><br><span class="line">pj := cproj.Create_crs_to_crs_from_pj(ctx, src, dst, <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line">normalized := cproj.Normalize_for_visualization(ctx, pj)</span><br><span class="line"><span class="keyword">return</span> Projection&#123;</span><br><span class="line">ctx:        ctx,</span><br><span class="line">src:        src,</span><br><span class="line">dst:        dst,</span><br><span class="line">pj:         pj,</span><br><span class="line">normalized: normalized,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Projection)</span></span> CRSToCRS(lng, lat <span class="type">float64</span>) (<span class="type">float64</span>, <span class="type">float64</span>) &#123;</span><br><span class="line">coord := proj.LP&#123;</span><br><span class="line">Lng: s1.Angle(lng),</span><br><span class="line">Lat: s1.Angle(lat),</span><br><span class="line">&#125;</span><br><span class="line">proj.TransformForward(p.normalized, &amp;coord)</span><br><span class="line"><span class="keyword">return</span> <span class="type">float64</span>(coord.Lng), <span class="type">float64</span>(coord.Lat)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Projection)</span></span> Close() &#123;</span><br><span class="line">cproj.Context_destroy(p.ctx)</span><br><span class="line">cproj.Destroy(p.src)</span><br><span class="line">cproj.Destroy(p.dst)</span><br><span class="line">cproj.Destroy(p.pj)</span><br><span class="line">cproj.Destroy(p.normalized)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Close()</code> 内でじゃかじゃか <code>Destroy()</code> しているのはC側のオブジェクトはGo側でGCされないためで、自分でリソースを開放する必要があるためです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>GoからPROJを利用する方法をまとめました。 構築は cgo を使ったことがある方であればハマることは少ないと思いますが、conda経由だとCGOオプションが必要です。</p><p>測地系の変換を行うケースは一般的にはあまり多くないと思いますが、何かの参考になれば幸いです。最後まで読んでいただき、ありがとうございました！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%9C%B0%E5%9B%B3/">地図</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%B7%AF%E5%BA%A6%E7%B5%8C%E5%BA%A6/">緯度経度</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%97%A5%E6%9C%AC%E6%B8%AC%E5%9C%B0%E7%B3%BB/">日本測地系</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%B8%96%E7%95%8C%E6%B8%AC%E5%9C%B0%E7%B3%BB/">世界測地系</category>
      
      <category domain="https://future-architect.github.io/tags/Proj/">Proj</category>
      
      
      <comments>https://future-architect.github.io/articles/20221129a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>業務システム開発でsqlcを導入して良かった点とハマった点</title>
      <link>https://future-architect.github.io/articles/20221128a/</link>
      <guid>https://future-architect.github.io/articles/20221128a/</guid>
      <pubDate>Sun, 27 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221128a/logo.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;254&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221128a/logo.png" alt="" width="500" height="254"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Technogoly Innovation Group 辻です。Go には <a href="https://github.com/go-gorm/gorm">Gorm</a> や <a href="https://github.com/volatiletech/sqlboiler">SQLBoiler</a> をはじめとして様々な ORM があります。2021 年には当社のブログで <a href="/articles/20210726a/">OR マッパーの連載</a>を行ったこともありました。絶対的な ORM があるわけではなく、業務システムの特性やチーム構成などに合わせて ORM を選択することになるでしょう。</p><p>今回、私たちのチームでは、バッチ処理が中心的な業務システム開発において Go の ORM に <a href="https://github.com/kyleconroy/sqlc">sqlc</a> を採用しました。素の SQL を書いていくチームの開発方針<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>とマッチし、開発体験は非常に良かったです。一方、枯れきってはいない ORM ではあります。いくつか想定外の挙動が発生し GitHub の Issue を見ながら問題を切り分けることもありました。</p><p>これから sqlc を導入してみようかな、と考えている方々の参考になればと思い、sqlc を業務システム開発に導入してみて良かった点とハマった点を紹介します。</p><p>なお本記事では sqlc の概要は扱いません。そもそも sqlc って何？って方は sqlc の作者が書いた<a href="https://conroy.org/introducing-sqlc">記事</a>や OR マッパー連載で紹介した<a href="https://future-architect.github.io/articles/20210804a/">こちら</a>の記事を見てみると良いでしょう。</p><p>ソフトウェアのバージョンは以下です。データベースは PostgreSQL を採用していることに注意してください。</p><ul><li>PostgreSQL 13.7</li><li>Go 1.19</li><li>sqlc 1.15.0</li></ul><h2 id="良かった点"><a href="#良かった点" class="headerlink" title="良かった点"></a>良かった点</h2><h3 id="1-SQL-の開発に集中できる"><a href="#1-SQL-の開発に集中できる" class="headerlink" title="1. SQL の開発に集中できる"></a>1. SQL の開発に集中できる</h3><p>sqlc を使う一番のメリットは SQL の開発に集中できることです。SQL の実装以外の面倒なことは sqlc がやってくれます。以下の流れで開発できます。</p><ul><li>SQL を書く</li><li><code>sqlc generate</code> でコード生成する</li><li>生成された API を Go のコードから呼び出す</li></ul><p>sqlc を使うと、SQL から、SQL の結果をマッピングできる構造体やデータベースにアクセスできる API を生成できます。生成される構造体のフィールドの型は SQL の結果に応じて、適切に選択されます。また、バインドパラメータとして SQL に値を渡す場合も、パラメータを渡すための構造体とその構造体を API に渡せるコードが生成されます。アプリケーションではパラメータの構造体に値をセットするだけでよく、構造体のフィールドの型はコンパイル時にチェックできます。</p><p>クエリの結果をマッピングする Go の構造体を作成したり、バインドパラメータの順番やデータ型を注意深く確認したり、クエリを発行するボイラープレートコードを実装したりすることは必要はなくなります。</p><h3 id="2-ファイル生成が高速である"><a href="#2-ファイル生成が高速である" class="headerlink" title="2. ファイル生成が高速である"></a>2. ファイル生成が高速である</h3><p>sqlc はファイル生成が高速です。数十の SQL ファイルからコードを生成するのに 1 秒もかかりません<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。高速な理由の 1 つは sqlc ではコード生成時にデータベースアクセスを必要としないためです<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。SQL ファイルからクエリの結果をマッピングできるコード生成ライブラリは sqlc の他に <a href="https://github.com/xo/xo">xo&#x2F;xo</a> などがあります<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>。ただコードを生成するときにデータベースアクセスが必要になり、生成にオーバーヘッドがかかります。ファイル生成は何度も実行するため、その操作が高速であることは地味ながら非常に嬉しいポイントでした。</p><h3 id="3-自然なコードが生成できる"><a href="#3-自然なコードが生成できる" class="headerlink" title="3. 自然なコードが生成できる"></a>3. 自然なコードが生成できる</h3><p>自然なコードが生成でき、sqlc が生成したコードを違和感なく利用できました。特に、パラメータに関して <code>$1</code>, <code>$2</code> などとしたときに、生成される Go のコードはテーブルのカラム名に応じたフィールド名となります。たとえば以下の <code>users</code> テーブルにレコードを INSERT する SQL から生成されるコードは <code>NewUser()</code> と <code>NewUserParams</code> のようになります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: NewUser :exec</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (</span><br><span class="line">    id,</span><br><span class="line">    first_name,</span><br><span class="line">    last_name,</span><br><span class="line">    age,</span><br><span class="line">) <span class="keyword">VALUES</span> ($<span class="number">1</span>, $<span class="number">2</span>, $<span class="number">3</span>, $<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p><code>ID</code> や <code>FirstName</code> といったフィールド名を持つ構造体が生成されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NewUserParams <span class="keyword">struct</span> &#123;</span><br><span class="line">ID        <span class="type">int32</span></span><br><span class="line">FirstName <span class="type">string</span></span><br><span class="line">LastName  sql.NullString</span><br><span class="line">Age       <span class="type">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queries)</span></span> NewUser(ctx context.Context, arg NewUserParams) <span class="type">error</span> &#123;</span><br><span class="line">_, err := q.db.ExecContext(ctx, newUser,</span><br><span class="line">arg.ID,</span><br><span class="line">arg.FirstName,</span><br><span class="line">arg.LastName,</span><br><span class="line">arg.Age,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また、必要に応じて SQL 上のパラメータを sqlc 固有の特殊な構文を使い、 <code>@my_first_name</code> などと記述して、生成される Go のコードのフィールド名を書き換えられます<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>。<code>$1</code> などのパラメータで生成できるフィールド名に違和感がある場合は <code>@xxxx</code> を使って任意のフィールド名に書き換えられる柔軟さも良かったです。</p><ul><li>補足事項</li></ul><p>なお、チーム開発で導入する場合はあらかじめ命名規約を決めておいたほうが良いです。</p><p>API 名は SQL のコメントで記載した命名が使われます。上の例では <code>-- name: NewUser</code> としている <code>NewUser</code> が API 名や構造体名に使われます。<code>NewUser</code>, <code>CreateUser</code> あるいは <code>InsertUser</code> などと選択する余地があり、開発者間で揺れるポイントです。</p><h3 id="4-生成できるコードの種類が豊富である"><a href="#4-生成できるコードの種類が豊富である" class="headerlink" title="4. 生成できるコードの種類が豊富である"></a>4. 生成できるコードの種類が豊富である</h3><p><code>database/sql</code> パッケージの <code>ExecContext()</code> や <code>QueryContext()</code>、<code>QueryRowContext()</code> を使って SQL を実行できるコードが生成できます。また PostgreSQL 専用のドライバーである <code>pgx</code> の機能を使ったバッチ処理可能なコードも生成できます。さらに <code>Copy</code> プロトコルを使った高速なデータコピーができるコードも生成できます。業務システム開発では 10 万～100 万といったオーダーのデータを扱うこともあったため、バッチ処理や <code>Copy</code> プロトコルをサポートしていることは非常に嬉しいです。</p><p>生成するコードは <code>sqlc</code> のクエリアノテーションで指定できます。詳しくは <a href="https://docs.sqlc.dev/en/stable/reference/query-annotations.html">Query annotations</a> などを参照してください。</p><h3 id="5-生成されるデータ型を柔軟に変更できる"><a href="#5-生成されるデータ型を柔軟に変更できる" class="headerlink" title="5. 生成されるデータ型を柔軟に変更できる"></a>5. 生成されるデータ型を柔軟に変更できる</h3><p>生成されるコードのデータ型を柔軟に設定できる点も便利です。</p><p>たとえばドライバーに <code>pgx</code> を使っているとき PostgreSQL の <code>numeric</code> 型のカラムはデフォルトでは <code>pgtype.Numeric</code> 型にマッピングされます。しかし誤差を許容して <code>float64</code> 型で扱いたいケースがありました<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>。</p><p>設定ファイルの <code>overrides</code> 機能を使うことで生成される型を変更できます。上記のケースであれば、以下のような記述を YAML の設定ファイルに記載します。</p><figure class="highlight yaml"><figcaption><span>データベースの numeric 型を Go の sql.NullFloat64 型でマッピングするように更新する設定ファイル例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">overrides:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">db_type:</span> <span class="string">&quot;pg_catalog.numeric&quot;</span></span><br><span class="line">    <span class="attr">go_type:</span> <span class="string">&quot;database/sql.NullFloat64&quot;</span></span><br><span class="line">    <span class="attr">nullable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">db_type:</span> <span class="string">&quot;pg_catalog.numeric&quot;</span></span><br><span class="line">    <span class="attr">go_type:</span> <span class="string">&quot;float64&quot;</span></span><br></pre></td></tr></table></figure><h3 id="6-複数の開発言語をサポートしている"><a href="#6-複数の開発言語をサポートしている" class="headerlink" title="6. 複数の開発言語をサポートしている"></a>6. 複数の開発言語をサポートしている</h3><p>2022&#x2F;11 現時点ではまだベータ版ですが、実は sqlc は Go 以外にも Python や Kotlin といった言語をサポートしています<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>。「SQL を書いて、コード生成し、そのコードを呼び出す」という開発体験は言語を問わず、同じです。私たちのチームでは主に Go での開発がメインでした。ただ、いくつか小さなバッチ機能を Python で実装する必要があり、 sqlc を導入することでスムーズに開発できました。</p><p>sqlc の作者は <code>protoc</code> のような多言語のコードを生成することを目的の 1 つとしている、と言っています。TypeScript や Rust などの言語も将来的にサポートされるかもしれません（<a href="https://github.com/kyleconroy/sqlc/issues/296">#296</a>）。</p><h3 id="7-1SQL-ファイルに複数のクエリを書いても良い"><a href="#7-1SQL-ファイルに複数のクエリを書いても良い" class="headerlink" title="7. 1SQL ファイルに複数のクエリを書いても良い"></a>7. 1SQL ファイルに複数のクエリを書いても良い</h3><p>1SQL ファイルに 1 クエリ、というイメージがあるかもしれませんが特に制約はありません。1SQL ファイルに複数のクエリを書いても良いです。たとえば、以下のように CRUD を 1SQL ファイルに集約しても、各 SQL に紐づく API が生成できます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: GetAll :many</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- name: NewUser :exec</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (</span><br><span class="line">    id,</span><br><span class="line">    first_name,</span><br><span class="line">    last_name,</span><br><span class="line">    age,</span><br><span class="line">    shoe_size,</span><br><span class="line">    shirt_size</span><br><span class="line">) <span class="keyword">VALUES</span></span><br><span class="line">($<span class="number">1</span>, $<span class="number">2</span>, $<span class="number">3</span>, $<span class="number">4</span>, $<span class="number">5</span>, $<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- name: UpdateSizes :exec</span></span><br><span class="line"><span class="keyword">UPDATE</span> users</span><br><span class="line"><span class="keyword">SET</span> shoe_size <span class="operator">=</span> $<span class="number">2</span>, shirt_size <span class="operator">=</span> $<span class="number">3</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> $<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- name: DeleteBySize :exec</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">WHERE</span> shoe_size <span class="operator">=</span> $<span class="number">1</span> <span class="keyword">AND</span> shirt_size <span class="operator">=</span> $<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="ハマった点"><a href="#ハマった点" class="headerlink" title="ハマった点"></a>ハマった点</h2><p>sqlc は素晴らしい ORM ですが、開発中にいくつかハマりどころがありました。インパクトが大きかった順に記載します。</p><h3 id="1-有効な-SQL-にもかかわらず-sqlc-でコード生成できないことがある"><a href="#1-有効な-SQL-にもかかわらず-sqlc-でコード生成できないことがある" class="headerlink" title="1. 有効な SQL にもかかわらず sqlc でコード生成できないことがある"></a>1. 有効な SQL にもかかわらず sqlc でコード生成できないことがある</h3><p>基本的には PostgreSQL で実行できる SQL はすべて sqlc で扱えます。しかし、いくつかの SQL は PostgreSQL 上は有効にも関わらず、sqlc でコード生成に失敗します。コード生成できない場合はその SQL を sqlc では使わないように書き換えする、あるいは sqlc を経由せず <code>database/sql</code> パッケージの API から直接 SQL を呼び出すなどの回避する必要があります。</p><p>参考までに sqlc でコード生成できない SQL の例をあげます。</p><ul><li>例１：UPDATE 句で JOIN を使う場合（<a href="https://github.com/kyleconroy/sqlc/issues/1100">#1100</a>）</li></ul><p>このパターンが一番影響がありました。<code>JOIN</code> と <code>UPDATE</code> が同時にできないため、<code>JOIN</code> して更新データを <code>SELECT</code> するクエリと <code>UPDATE</code> するクエリの 2 つに分割して対処しました。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span></span><br><span class="line">group_calc_totals gct</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">npn <span class="operator">=</span> nem.npn</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">producer_group_attribute ga</span><br><span class="line"><span class="keyword">JOIN</span></span><br><span class="line">npn_external_map nem</span><br><span class="line"><span class="keyword">ON</span>ga.npn_external_map_id <span class="operator">=</span> nem.id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">gct.group_id <span class="operator">=</span> ga.group_id;</span><br></pre></td></tr></table></figure><ul><li>例２：サブクエリと <code>AS</code>, <code>GROUP</code> 句を使う場合（<a href="https://github.com/kyleconroy/sqlc/issues/1886">#1886</a>）</li></ul><p>以下のような SQL もコード生成に失敗します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">s.id <span class="keyword">AS</span> &quot;s_id&quot;</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">spam.id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">spam</span><br><span class="line">  ) <span class="keyword">AS</span> &quot;s&quot;</span><br><span class="line"><span class="comment">-- 以下を s.id に変更すれば機能する</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id;</span><br></pre></td></tr></table></figure><h3 id="2-マッピングする構造体の型が-NULL-になりうる場合でも-NULL-を許容しない型で生成されることがある"><a href="#2-マッピングする構造体の型が-NULL-になりうる場合でも-NULL-を許容しない型で生成されることがある" class="headerlink" title="2. マッピングする構造体の型が NULL になりうる場合でも NULL を許容しない型で生成されることがある"></a>2. マッピングする構造体の型が NULL になりうる場合でも NULL を許容しない型で生成されることがある</h3><p>テーブルのカラム自体は NOT NULL 制約があるが、SQL の条件によって NULL になりうるケースです（<a href="https://github.com/kyleconroy/sqlc/issues/1208">#1208</a>）。このケースはコンパイル時はエラーにならず、実行時にカラムの値が NULL になるとエラーが発生するため、注意が必要です。</p><p>たとえば以下の <code>one</code> テーブルの <code>name</code> カラムは NOT NULL 制約が付与されています。しかしサブクエリの WHERE 句の条件に該当しない場合は SELECT できる結果が NULL になりえます。このような条件下でも sqlc は NOT NULL なカラムとして構造体を生成します。期待としては <code>sql.NullInt32</code> 型として NULL を許容される型のフィールドを想定しますが、実際には <code>int32</code> と NULL な値をマッピングできない型のフィールドになります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">one</span> (</span><br><span class="line">id <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">otherfield TEXT,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">otherfield,</span><br><span class="line">(<span class="keyword">SELECT</span> o.id <span class="keyword">FROM</span> <span class="keyword">one</span> o <span class="keyword">WHERE</span> one.name <span class="operator">=</span> <span class="string">&#x27;foo&#x27;</span> LIMIT <span class="number">1</span>) <span class="keyword">AS</span> &quot;id&quot;</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">one</span>;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TestRow <span class="keyword">struct</span> &#123;</span><br><span class="line">Otherfield sql.NullString</span><br><span class="line">ID         <span class="type">int32</span>    <span class="comment">// 本当は sql.NullInt32 になってほしい!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-IN-句に複数の値を渡せない"><a href="#3-IN-句に複数の値を渡せない" class="headerlink" title="3. IN 句に複数の値を渡せない"></a>3. IN 句に複数の値を渡せない</h3><p><code>IN</code> 句で複数の値を渡して、複数のレコードを抽出するクエリは一般的ですが sqlc を使ってコード生成する場合は技巧が必要になります（<a href="https://github.com/kyleconroy/sqlc/issues/77">#77</a>, <a href="https://github.com/kyleconroy/sqlc/issues/167">#167</a>）。たとえば <code>authors</code> テーブルからいくつかの <code>id</code> にマッチするレコードを抽出するクエリを考えてみます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: ListAuthorsByIDs :many</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> authors</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="keyword">IN</span> ($<span class="number">1</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>このようなクエリから生成される Go のコードでは <code>string</code> の単一の値は渡せますが複数の ID を含んだ <code>[]string</code> の値は渡せません。生成されるメソッドのシグネチャは以下になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ListAuthorsByIDs(ctx context.Context, id <span class="type">string</span>) ([]Author, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>対処方法として、クエリを以下のように <code>ANY</code> 句<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>を使うように書き換える必要があります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> authors</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="keyword">ANY</span>(<span class="variable">@ids</span>::<span class="type">VARCHAR</span>[]);</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>上記のような SQL からは以下のシグネチャのコードが生成でき、また複数の値にマッチするレコードを取得できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ListAuthorsByIDs(ctx context.Context, ids []<span class="type">string</span>) ([]Author, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><h3 id="4-集計関数の結果や-CASE-句の値が-interface-型になる"><a href="#4-集計関数の結果や-CASE-句の値が-interface-型になる" class="headerlink" title="4. 集計関数の結果や CASE 句の値が interface{} 型になる"></a>4. 集計関数の結果や CASE 句の値が interface{} 型になる</h3><p><code>MIN()</code> や <code>MAX()</code>, <code>SUM()</code> といった集計関数の結果は、引数のデータ型ではなく <code>interface&#123;&#125;</code> 型として生成されます。</p><p>たとえば以下の <code>MIN</code> を使うケースでは <code>int32</code> 型で生成されることを期待するかもしれませんが、<code>interface&#123;&#125;</code> 型になります（<a href="https://github.com/kyleconroy/sqlc/issues/1574">#1574</a>）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sales (</span><br><span class="line">id SERIAL <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">vat <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">MIN</span>(vat) <span class="keyword">AS</span> vatpence</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">sales;</span><br></pre></td></tr></table></figure><p>こうしたケースでは明示的に SQL で型キャストを行うことで回避できます。上記のケースであれば <code>::INTEGER</code> あるいは <code>CAST(MIN(vat) AS INTEGER)</code> と明示することで Go では <code>int32</code> 型にマッピングできます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">MIN</span>(vat)::<span class="type">INTEGER</span> <span class="keyword">AS</span> vatpence</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">sales;</span><br></pre></td></tr></table></figure><p>CASE 句を扱う場合も同様に <code>interface&#123;&#125;</code> 型となるため、必要に応じて型キャストをすると良いでしょう。</p><h3 id="5-DDL-が扱えない"><a href="#5-DDL-が扱えない" class="headerlink" title="5. DDL が扱えない"></a>5. DDL が扱えない</h3><p>sqlc は 1.15.0 では DDL をサポートしていません（<a href="https://github.com/kyleconroy/sqlc/issues/1661">#1661</a>）。複雑なビジネスロジックを SQL で実装しているときに、処理の中間結果を一時表に保持したいユースケースがありました。セッション開始時に <code>CREATE TEMPORARY TABLE ...</code> として一時表を作成しようとしましたが sqlc ではコード生成できませんでした。これは <code>pgx</code> の <code>Exec()</code> から直接クエリを発行して対処しました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>業務システム開発に sqlc を導入して良かった点とハマった点を紹介しました。素の SQL を書きたいケースでは非常に良い ORM と感じています。Go の ORM の選択に迷っている方の参考になれば嬉しいです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">業務システム開発ではロジックを SQL に寄せることも多く、複数のテーブルを JOIN したり、ウィンドウ関数を使って処理をしたりなど、SQL が複雑になりがちです。複雑な SQL は ORM のクエリビルダーAPI を使ってクエリを組み立てるのではなく、手書きで実装したいケースが多いです。たとえば ORM に Gorm を使っていたとしても <a href="https://pkg.go.dev/github.com/jinzhu/gorm#DB.Raw">Raw()</a> を使わざるを得ない、あるいは使いたいケースが多くありました。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">生成するコード量は 1 ファイルに含まれる SQL の数にもよるため、あくまで目安です。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">データベースアクセスしないにも関わらず型安全なコードを生成できるのは理由は、sqlc が C 言語で書かれた本物の PostgreSQL のクエリパーサを Go から呼び出し、パースされたツリーからコード生成するアプローチを採用しているためです。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;"><code>xo</code> はファイル生成に時間がかかるだけでなく、生成できるコードが私たちの求める機能/非機能要件と合わなかったため、採用を見送りました。</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;"><a href="https://docs.sqlc.dev/en/stable/howto/named_parameters.html?highlight=Named%20parameter#naming-parameters">https://docs.sqlc.dev/en/stable/howto/named_parameters.html?highlight=Named parameter#naming-parameters</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;"><code>pgtype.Numeric</code> 型は <code>big.Int</code> 型の値をフィールドに含んでおり、浮動小数点演算の誤差が許されない場合では、このデータ型を使うことは妥当です。一方、数値計算が <code>float64</code> のような <code>+</code>, <code>-</code>, <code>/</code>, <code>*</code> でできません。API を使って演算しますが、コードが読みづらく、メンテナンスが難しくなる点がデメリットとしてあります。</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="vertical-align: top; padding-right: 10px;">7.</span><span style="vertical-align: top;"><a href="https://docs.sqlc.dev/en/stable/reference/language-support.html?highlight=beta#database-and-language-support">https://docs.sqlc.dev/en/stable/reference/language-support.html?highlight=beta#database-and-language-support</a></span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="vertical-align: top; padding-right: 10px;">8.</span><span style="vertical-align: top;"><code>ANY</code> 句は <code>SOME</code> 句でもよいです。<a href="https://www.postgresql.jp/document/13/html/functions-comparisons.html">https://www.postgresql.jp/document/13/html/functions-comparisons.html</a></span><a href="#fnref:8" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DB/">DB</category>
      
      
      <category domain="https://future-architect.github.io/tags/SQL/">SQL</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/ORM/">ORM</category>
      
      <category domain="https://future-architect.github.io/tags/sqlc/">sqlc</category>
      
      
      <comments>https://future-architect.github.io/articles/20221128a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Language Server Protocolを用いたVSCode拡張機能開発 (後編)</title>
      <link>https://future-architect.github.io/articles/20221125a/</link>
      <guid>https://future-architect.github.io/articles/20221125a/</guid>
      <pubDate>Thu, 24 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、Futureでアルバイトをしている川渕です。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Futureでアルバイトをしている川渕です。</p><p><a href="/articles/20221124a/">前編</a>ではLSPを用いたVSCode拡張機能開発チュートリアルとサンプルコードの解説を行いました。</p><p>後編では前編で解説した<a href="https://github.com/microsoft/vscode-extension-samples/tree/main/lsp-sample">lsp-sample</a>に機能を追加する方法について説明します。</p><h1 id="説明すること"><a href="#説明すること" class="headerlink" title="説明すること"></a>説明すること</h1><ul><li>コードアクションで実行できる機能の追加方法</li><li>フォーマット時に実行する機能の追加方法</li><li>コマンドで実行できる機能の追加方法</li></ul><h1 id="説明しないこと"><a href="#説明しないこと" class="headerlink" title="説明しないこと"></a>説明しないこと</h1><ul><li>上記以外の機能の追加方法</li></ul><h1 id="コードアクションで実行できる機能を追加"><a href="#コードアクションで実行できる機能を追加" class="headerlink" title="コードアクションで実行できる機能を追加"></a>コードアクションで実行できる機能を追加</h1><p>lsp-sampleでは全て大文字、かつ2文字以上の単語に対して警告を表示していました。その単語を小文字に自動修正するクイックフィックスを作成します。</p><h2 id="実装-server-ts"><a href="#実装-server-ts" class="headerlink" title="実装 (server.ts)"></a>実装 (server.ts)</h2><p>server.tsに以下のimportを追加します。</p><figure class="highlight diff"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">  /* 略 */</span><br><span class="line"><span class="addition">+ CodeAction,</span></span><br><span class="line"><span class="addition">+ TextEdit,</span></span><br><span class="line"><span class="addition">+ TextDocumentEdit,</span></span><br><span class="line"><span class="addition">+ CodeActionKind,</span></span><br><span class="line">&#125; from &quot;vscode-languageserver/node&quot;;</span><br></pre></td></tr></table></figure><p><code>connection.onInitialize</code>の<code>result</code>を以下のように変更します。</p><figure class="highlight diff"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  const result: InitializeResult = &#123;</span><br><span class="line">    capabilities: &#123;</span><br><span class="line">      textDocumentSync: TextDocumentSyncKind.Incremental,</span><br><span class="line">      // Tell the client that this server supports code completion.</span><br><span class="line">      completionProvider: &#123;</span><br><span class="line">        resolveProvider: true,</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="addition">+     // コードアクション</span></span><br><span class="line"><span class="addition">+     codeActionProvider: true,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>コードアクション時に呼び出されるメソッドである<code>onCodeAction()</code>を追加します。</p><figure class="highlight ts"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">connection.<span class="title function_">onCodeAction</span>(<span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">only</span>: <span class="built_in">string</span> | <span class="literal">undefined</span> =</span><br><span class="line">    params.<span class="property">context</span>.<span class="property">only</span> != <span class="literal">null</span> &amp;&amp; params.<span class="property">context</span>.<span class="property">only</span>.<span class="property">length</span> &gt; <span class="number">0</span></span><br><span class="line">      ? params.<span class="property">context</span>.<span class="property">only</span>[<span class="number">0</span>]</span><br><span class="line">      : <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// コードアクションの種類がクイックフィックスでない場合はアーリーリターン</span></span><br><span class="line">  <span class="keyword">if</span> (only !== <span class="title class_">CodeActionKind</span>.<span class="property">QuickFix</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// この拡張機能が生成した警告のみを対象とする</span></span><br><span class="line">  <span class="comment">// lsp-sampleで生成した警告の発行元は&quot;ex&quot;であるのでこれでフィルタリング</span></span><br><span class="line">  <span class="keyword">const</span> diagnostics = params.<span class="property">context</span>.<span class="property">diagnostics</span>.<span class="title function_">filter</span>(</span><br><span class="line">    <span class="function">(<span class="params">diag</span>) =&gt;</span> diag.<span class="property">source</span> === <span class="string">&quot;ex&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// uriからドキュメントを取得</span></span><br><span class="line">  <span class="keyword">const</span> textDocument = documents.<span class="title function_">get</span>(params.<span class="property">textDocument</span>.<span class="property">uri</span>);</span><br><span class="line">  <span class="keyword">if</span> (textDocument == <span class="literal">null</span> || diagnostics.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">codeActions</span>: <span class="title class_">CodeAction</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 各警告に対して処理</span></span><br><span class="line">  diagnostics.<span class="title function_">forEach</span>(<span class="function">(<span class="params">diag</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> title = <span class="string">&quot;Fix to lower case&quot;</span>;</span><br><span class="line">    <span class="comment">// 警告範囲のテキスト、つまり大文字のみで構成された単語を取得</span></span><br><span class="line">    <span class="keyword">const</span> originalText = textDocument.<span class="title function_">getText</span>(diag.<span class="property">range</span>);</span><br><span class="line">    <span class="comment">// 警告範囲のテキストを小文字に変換したものに置換する処理の生成</span></span><br><span class="line">    <span class="keyword">const</span> edits = [<span class="title class_">TextEdit</span>.<span class="title function_">replace</span>(diag.<span class="property">range</span>, originalText.<span class="title function_">toLowerCase</span>())];</span><br><span class="line">    <span class="keyword">const</span> editPattern = &#123;</span><br><span class="line">      <span class="attr">documentChanges</span>: [</span><br><span class="line">        <span class="title class_">TextDocumentEdit</span>.<span class="title function_">create</span>(</span><br><span class="line">          &#123; <span class="attr">uri</span>: textDocument.<span class="property">uri</span>, <span class="attr">version</span>: textDocument.<span class="property">version</span> &#125;,</span><br><span class="line">          edits</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// コードアクションを生成</span></span><br><span class="line">    <span class="keyword">const</span> fixAction = <span class="title class_">CodeAction</span>.<span class="title function_">create</span>(</span><br><span class="line">      title,</span><br><span class="line">      editPattern,</span><br><span class="line">      <span class="title class_">CodeActionKind</span>.<span class="property">QuickFix</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// コードアクションと警告を関連付ける</span></span><br><span class="line">    fixAction.<span class="property">diagnostics</span> = [diag];</span><br><span class="line">    codeActions.<span class="title function_">push</span>(fixAction);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> codeActions;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>診断に「利用できるクイックフィックス」が追加されます。</p><img src="/images/20221125a/codeAction.drawio.png" alt="codeAction.drawio.png" width="1200" height="230" loading="lazy"><p>クイックフィックスを実行するとその単語が小文字に自動で修正されます。</p><img src="/images/20221125a/toLower.gif" alt="toLower.gif" width="1200" height="675" loading="lazy"><h1 id="フォーマット時に実行する機能を追加"><a href="#フォーマット時に実行する機能を追加" class="headerlink" title="フォーマット時に実行する機能を追加"></a>フォーマット時に実行する機能を追加</h1><p>フォーマットを実行すると<code>Formatting has been executed. (linecount: $&#123;行数&#125;)</code>という文字列がファイルの先頭に挿入される機能を作成します。</p><h2 id="実装-server-ts-1"><a href="#実装-server-ts-1" class="headerlink" title="実装 (server.ts)"></a>実装 (server.ts)</h2><p>server.tsに以下のimportを追加します。</p><figure class="highlight diff"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">  /* 略 */</span><br><span class="line"><span class="addition">+ Position</span></span><br><span class="line">&#125; from &quot;vscode-languageserver/node&quot;;</span><br></pre></td></tr></table></figure><p><code>connection.onInitialize</code>の<code>result</code>を以下のように変更します。</p><figure class="highlight diff"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  const result: InitializeResult = &#123;</span><br><span class="line">    capabilities: &#123;</span><br><span class="line">      textDocumentSync: TextDocumentSyncKind.Incremental,</span><br><span class="line">      // Tell the client that this server supports code completion.</span><br><span class="line">      completionProvider: &#123;</span><br><span class="line">        resolveProvider: true,</span><br><span class="line">      &#125;,</span><br><span class="line">      // コードアクション</span><br><span class="line">      codeActionProvider: true,</span><br><span class="line"><span class="addition">+     // フォーマット</span></span><br><span class="line"><span class="addition">+     documentFormattingProvider: true,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>ドキュメントのフォーマット時に呼び出されるメソッドである<code>onDocumentFormatting()</code>を追加します。</p><figure class="highlight ts"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">connection.<span class="title function_">onDocumentFormatting</span>(<span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// uriからドキュメントを取得</span></span><br><span class="line">  <span class="keyword">const</span> textDocument = documents.<span class="title function_">get</span>(params.<span class="property">textDocument</span>.<span class="property">uri</span>);</span><br><span class="line">  <span class="keyword">if</span> (textDocument == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ドキュメントの行数を取得</span></span><br><span class="line">  <span class="keyword">const</span> lineCount = textDocument.<span class="property">lineCount</span>;</span><br><span class="line">  <span class="comment">// 挿入する文字列</span></span><br><span class="line">  <span class="keyword">const</span> insertText = <span class="string">`save successful!(lineCount: <span class="subst">$&#123;lineCount&#125;</span>)\n`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [<span class="title class_">TextEdit</span>.<span class="title function_">insert</span>(<span class="title class_">Position</span>.<span class="title function_">create</span>(<span class="number">0</span>, <span class="number">0</span>), insertText)];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="動作確認-1"><a href="#動作確認-1" class="headerlink" title="動作確認"></a>動作確認</h2><p>フォーマットを実行するとFormatting has been executed. (linecount: ${行数})という文字列がファイルの先頭に挿入されるようになります。<br><img src="/images/20221125a/format.gif" alt="format.gif" width="1200" height="675" loading="lazy"></p><h1 id="コマンドで実行できる機能を追加"><a href="#コマンドで実行できる機能を追加" class="headerlink" title="コマンドで実行できる機能を追加"></a>コマンドで実行できる機能を追加</h1><p>コマンドを実行すると選択範囲が反転する機能を作成します。選択範囲がない場合はテキスト全体を反転するように設計します。</p><h2 id="大まかな処理の流れ"><a href="#大まかな処理の流れ" class="headerlink" title="大まかな処理の流れ"></a>大まかな処理の流れ</h2><p>今回実装する処理には、編集中のドキュメントの情報、エディタ上での選択範囲の情報が必要ですが、コマンド実行情報にはそのような情報がなく、サーバ側で取得することもできません。<br>そのため、クライアント側でコマンドを受け、必要な追加情報をサーバに送ることで実装します。<br>(「コマンドを実行した」という情報のみが必要な場合は追加情報を送る必要はありません。)</p><img src="/images/20221125a/shori_(1).png" alt="" width="1200" height="223" loading="lazy"><p>GitHubに上がっているコードを参考にしたところ、2通りの実装方法を見つけたので両方紹介しようと思います。</p><p>参考にしたリポジトリ:</p><ul><li>実装1: <a href="https://github.com/microsoft/vscode-eslint">vscode-eslint</a> (<a href="https://github.com/microsoft/vscode-eslint/blob/4b92c12af15d41f76417bde9571cb56f08ec3d0f/client/src/client.ts#L330-L347">該当箇所</a>)</li><li>実装2: <a href="https://github.com/microsoft/vscode-extension-samples/tree/main/lsp-user-input-sample">lsp-user-input-sample</a> (<a href="https://github.com/microsoft/vscode-extension-samples/blob/ddae6c0c9ff203b4ed6f6b43bfacdd0834215f83/lsp-user-input-sample/client/src/extension.ts#L23-L33">該当箇所</a>)</li></ul><p>両方のリポジトリにおいて該当箇所を<a href="https://github.com/dbaeumer">dbaeumerさん</a>(VSCodeのLSPの中の人)という方が書いているので、どちらの実装方法も正しいと思います。(適切な使い分けについては調査しましたがわかりませんでした。もしわかる方がいたら教えてください。)</p><h2 id="package-jsonの変更"><a href="#package-jsonの変更" class="headerlink" title="package.jsonの変更"></a>package.jsonの変更</h2><p>lsp-sample.reveseコマンドをコマンドパレットで実行できるようにします。この変更は2つの実装で共通です。</p><p>まず、package.jsonのactivationEventsフィールドに以下を追加し、lsp-sample.reverseコマンドが実行された場合も拡張機能が有効になるように変更します。</p><figure class="highlight diff"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &quot;activationEvents&quot;: [</span><br><span class="line">    &quot;onLanguage:plaintext&quot;,</span><br><span class="line"><span class="addition">+   &quot;onCommand:lsp-sample.reverse&quot;</span></span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><p>次に、contributesフィールドに以下を追加し、コマンドパレットからlsp-sample.reverseコマンドを実行できるようにします。<br>VSCode上ではtitleに入力した文字列がコマンド名として表示されます。</p><figure class="highlight diff"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  &quot;contributes&quot;: &#123;</span><br><span class="line"><span class="addition">+   &quot;commands&quot;: [</span></span><br><span class="line"><span class="addition">+     &#123;</span></span><br><span class="line"><span class="addition">+       &quot;command&quot;: &quot;lsp-sample.reverse&quot;,</span></span><br><span class="line"><span class="addition">+       &quot;title&quot;: &quot;reverse text&quot;</span></span><br><span class="line"><span class="addition">+     &#125;</span></span><br><span class="line"><span class="addition">+   ],</span></span><br></pre></td></tr></table></figure><h2 id="実装1-クライアントでコマンドを送り直す実装"><a href="#実装1-クライアントでコマンドを送り直す実装" class="headerlink" title="実装1: クライアントでコマンドを送り直す実装"></a>実装1: クライアントでコマンドを送り直す実装</h2><h3 id="処理の流れ"><a href="#処理の流れ" class="headerlink" title="処理の流れ"></a>処理の流れ</h3><p>実装1では以下のようにクライアントからサーバへコマンドを送り直すことで実装します。</p><ol><li>ユーザがコマンドパレットでlsp-sample.reverseコマンドを実行する</li><li>クライアント側で実行を検知し、サーバにlsp-sample.executeReverseコマンドと以下の情報を送信する<ul><li>アクティブなエディタが編集中のドキュメントのURI(識別子)</li><li>アクティブなエディタが編集中のドキュメントのバージョン</li><li>アクティブなエディタ上での選択範囲</li></ul></li><li>lsp-sample.executeCommandを検知したサーバは、受け取った情報を基に選択範囲を反転する処理を実行する</li></ol><h3 id="実装-extension-ts"><a href="#実装-extension-ts" class="headerlink" title="実装 (extension.ts)"></a>実装 (extension.ts)</h3><p>lsp-sample.reverseコマンドを受け取った際にlsp-sample.executeReverseコマンドと選択範囲などの情報をサーバに送信する処理を実装します。</p><p>まず以下のimportを追加します。</p><figure class="highlight diff"><figcaption><span>extension.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">  workspace,</span><br><span class="line">  ExtensionContext,</span><br><span class="line"><span class="addition">+ window,</span></span><br><span class="line"><span class="addition">+ commands</span></span><br><span class="line">&#125; from &quot;vscode&quot;;</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  LanguageClient,</span><br><span class="line">  LanguageClientOptions,</span><br><span class="line">  ServerOptions,</span><br><span class="line">  TransportKind,</span><br><span class="line"><span class="addition">+ ExecuteCommandRequest,</span></span><br><span class="line">&#125; from &quot;vscode-languageclient/node&quot;;</span><br></pre></td></tr></table></figure><p>拡張機能の起動時に実行される関数<code>activate()</code>の<code>client.start()</code>の直前に以下を追加します。</p><figure class="highlight ts"><figcaption><span>extension.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reverse実行時にserverにexecuteReverseコマンドを送信する</span></span><br><span class="line">context.<span class="property">subscriptions</span>.<span class="title function_">push</span>(</span><br><span class="line">  commands.<span class="title function_">registerCommand</span>(<span class="string">&quot;lsp-sample.reverse&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> uri = <span class="variable language_">window</span>.<span class="property">activeTextEditor</span>.<span class="property">document</span>.<span class="property">uri</span>;</span><br><span class="line">    <span class="keyword">const</span> version = <span class="variable language_">window</span>.<span class="property">activeTextEditor</span>.<span class="property">document</span>.<span class="property">version</span>;</span><br><span class="line">    <span class="keyword">const</span> selections = <span class="variable language_">window</span>.<span class="property">activeTextEditor</span>.<span class="property">selections</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> client.<span class="title function_">sendRequest</span>(<span class="title class_">ExecuteCommandRequest</span>.<span class="property">type</span>, &#123;</span><br><span class="line">      <span class="attr">command</span>: <span class="string">&quot;lsp-sample.executeReverse&quot;</span>,</span><br><span class="line">      <span class="attr">arguments</span>: [uri, version, selections],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>この実装によって、クライアント側でlsp-sample.reverseが実行された際にサーバにlsp-sample.executeReverseコマンドと、uri、選択範囲を送信する処理が実現できました。</p><h3 id="実装-server-ts-2"><a href="#実装-server-ts-2" class="headerlink" title="実装 (server.ts)"></a>実装 (server.ts)</h3><p>lsp-sample.executeReverseコマンドを受け取った際に引数情報を基に選択範囲を反転する処理を実装します。</p><p>まず以下のimportを追加します。</p><figure class="highlight diff"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">  /* 略 */</span><br><span class="line"><span class="addition">+ Range</span></span><br><span class="line">&#125; from &quot;vscode-languageserver/node&quot;;</span><br></pre></td></tr></table></figure><p>コマンド実行時に呼び出されるメソッドである<code>onExecuteCommand()</code>を追加します。<br>ここで送信されたドキュメントと取得したドキュメントのバージョンが一致するかどうか確認することで、非同期処理中の変更による処理のズレを防いでいます。</p><figure class="highlight ts"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// コマンド実行時に行う処理</span></span><br><span class="line">connection.<span class="title function_">onExecuteCommand</span>(<span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// lsp-sample.executeReverseコマンドでない場合はアーリーリターン</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    params.<span class="property">command</span> !== <span class="string">&quot;lsp-sample.executeReverse&quot;</span> ||</span><br><span class="line">    params.<span class="property">arguments</span> == <span class="literal">null</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> uri = params.<span class="property">arguments</span>[<span class="number">0</span>].<span class="property">external</span>;</span><br><span class="line">  <span class="comment">// uriからドキュメントを取得</span></span><br><span class="line">  <span class="keyword">const</span> textDocument = documents.<span class="title function_">get</span>(uri);</span><br><span class="line">  <span class="keyword">if</span> (textDocument == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// バージョン不一致の場合はアーリーリターン</span></span><br><span class="line">  <span class="keyword">const</span> version = params.<span class="property">arguments</span>[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (textDocument.<span class="property">version</span> !== version) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 選択範囲</span></span><br><span class="line">  <span class="keyword">const</span> selections = params.<span class="property">arguments</span>[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">changes</span>: <span class="title class_">TextEdit</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 全ての選択範囲に対して実行</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> selection <span class="keyword">of</span> selections) &#123;</span><br><span class="line">    <span class="comment">// 選択範囲のテキストを取得</span></span><br><span class="line">    <span class="keyword">const</span> text = textDocument.<span class="title function_">getText</span>(selection);</span><br><span class="line">    <span class="keyword">if</span> (text.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反転</span></span><br><span class="line">    <span class="keyword">const</span> reversed = text.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    changes.<span class="title function_">push</span>(<span class="title class_">TextEdit</span>.<span class="title function_">replace</span>(selection, reversed));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 選択範囲がない場合はテキスト全体を反転</span></span><br><span class="line">  <span class="keyword">if</span> (changes.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// テキスト全体を取得</span></span><br><span class="line">    <span class="keyword">const</span> text = textDocument.<span class="title function_">getText</span>();</span><br><span class="line">    <span class="comment">// 反転</span></span><br><span class="line">    <span class="keyword">const</span> reversed = text.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    changes.<span class="title function_">push</span>(</span><br><span class="line">      <span class="title class_">TextEdit</span>.<span class="title function_">replace</span>(</span><br><span class="line">        <span class="title class_">Range</span>.<span class="title function_">create</span>(</span><br><span class="line">          <span class="title class_">Position</span>.<span class="title function_">create</span>(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">          textDocument.<span class="title function_">positionAt</span>(text.<span class="property">length</span>)</span><br><span class="line">        ),</span><br><span class="line">        reversed</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 変更を適用</span></span><br><span class="line">  connection.<span class="property">workspace</span>.<span class="title function_">applyEdit</span>(&#123;</span><br><span class="line">    <span class="attr">documentChanges</span>: [</span><br><span class="line">      <span class="title class_">TextDocumentEdit</span>.<span class="title function_">create</span>(</span><br><span class="line">        &#123; <span class="attr">uri</span>: textDocument.<span class="property">uri</span>, <span class="attr">version</span>: textDocument.<span class="property">version</span> &#125;,</span><br><span class="line">        changes</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="実装2-middlewareを用いた実装"><a href="#実装2-middlewareを用いた実装" class="headerlink" title="実装2: middlewareを用いた実装"></a>実装2: middlewareを用いた実装</h2><h3 id="処理の流れ-1"><a href="#処理の流れ-1" class="headerlink" title="処理の流れ"></a>処理の流れ</h3><p>実装2ではmiddlewareという機能を用いて、クライアント側でコマンド実行情報に情報を追加することで実装します。</p><ol><li>ユーザがコマンドパレットでlsp-sample.reverseコマンドを実行する</li><li>クライアント側で以下の情報を追加する<ul><li>アクティブなエディタが編集中のドキュメントのURI(識別子)</li><li>アクティブなエディタが編集中のドキュメントのバージョン</li><li>アクティブなエディタ上での選択範囲</li></ul></li><li>lsp-sample.reverseコマンドを検知したサーバは受け取った情報を基に選択範囲を反転する処理を実行する</li></ol><h3 id="実装-extension-ts-1"><a href="#実装-extension-ts-1" class="headerlink" title="実装 (extension.ts)"></a>実装 (extension.ts)</h3><p>まず以下のimportを追加します。</p><figure class="highlight diff"><figcaption><span>extension.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">  workspace,</span><br><span class="line">  ExtensionContext,</span><br><span class="line"><span class="addition">+ window,</span></span><br><span class="line">&#125; from &quot;vscode&quot;;</span><br></pre></td></tr></table></figure><p>拡張機能の起動時に実行される関数<code>activate()</code>の<code>clientOptions</code>を以下のように変更します。</p><figure class="highlight diff"><figcaption><span>extension.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  const clientOptions: LanguageClientOptions = &#123;</span><br><span class="line">    // Register the server for plain text documents</span><br><span class="line">    documentSelector: [&#123; scheme: &quot;file&quot;, language: &quot;plaintext&quot; &#125;],</span><br><span class="line">    synchronize: &#123;</span><br><span class="line">      // Notify the server about file changes to &#x27;.clientrc files contained in the workspace</span><br><span class="line">      fileEvents: workspace.createFileSystemWatcher(&quot;**/.clientrc&quot;),</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+  middleware: &#123;</span></span><br><span class="line"><span class="addition">+     executeCommand: async (command, args, next) =&gt; &#123;</span></span><br><span class="line"><span class="addition">+       const uri = window.activeTextEditor.document.uri;</span></span><br><span class="line"><span class="addition">+       const version = window.activeTextEditor.document.version;</span></span><br><span class="line"><span class="addition">+       const selections = window.activeTextEditor.selections;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+       return next(command, [...args, uri, version, selections]);</span></span><br><span class="line"><span class="addition">+     &#125;,</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="実装-server-ts-3"><a href="#実装-server-ts-3" class="headerlink" title="実装 (server.ts)"></a>実装 (server.ts)</h3><p>lsp-sample.executeReverseコマンドを受け取った際に引数情報を基に選択範囲を反転する処理を実装します。</p><p>まず以下のimportを追加します。</p><figure class="highlight diff"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">  /* 略 */</span><br><span class="line"><span class="addition">+ Range</span></span><br><span class="line">&#125; from &quot;vscode-languageserver/node&quot;;</span><br></pre></td></tr></table></figure><p>connection.onInitializeのresultを以下のように変更し、サーバがlsp-sample.reverseの実行をサポートすることをクライアントに伝えます。</p><figure class="highlight diff"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  const result: InitializeResult = &#123;</span><br><span class="line">    capabilities: &#123;</span><br><span class="line">      textDocumentSync: TextDocumentSyncKind.Incremental,</span><br><span class="line">      // Tell the client that this server supports code completion.</span><br><span class="line">      completionProvider: &#123;</span><br><span class="line">        resolveProvider: true,</span><br><span class="line">      &#125;,</span><br><span class="line">      // コードアクション</span><br><span class="line">      codeActionProvider: true,</span><br><span class="line">      // フォーマット</span><br><span class="line">      documentFormattingProvider: true,</span><br><span class="line"><span class="addition">+     // コマンド</span></span><br><span class="line"><span class="addition">+     executeCommandProvider: &#123;</span></span><br><span class="line"><span class="addition">+       commands: [&quot;lsp-sample.reverse&quot;],</span></span><br><span class="line"><span class="addition">+     &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>コマンド実行時に呼び出されるメソッドである<code>onExecuteCommand()</code>を追加します。</p><figure class="highlight ts"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// コマンド実行時に行う処理</span></span><br><span class="line">connection.<span class="title function_">onExecuteCommand</span>(<span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// lsp-sample.reverseコマンドでない場合はアーリーリターン</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    params.<span class="property">command</span> !== <span class="string">&quot;lsp-sample.reverse&quot;</span> ||</span><br><span class="line">    params.<span class="property">arguments</span> == <span class="literal">null</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> uri = params.<span class="property">arguments</span>[<span class="number">0</span>].<span class="property">external</span>;</span><br><span class="line">  <span class="comment">// uriからドキュメントを取得</span></span><br><span class="line">  <span class="keyword">const</span> textDocument = documents.<span class="title function_">get</span>(uri);</span><br><span class="line">  <span class="keyword">if</span> (textDocument == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// バージョン不一致の場合はアーリーリターン</span></span><br><span class="line">  <span class="keyword">const</span> version = params.<span class="property">arguments</span>[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (textDocument.<span class="property">version</span> !== version) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 選択範囲</span></span><br><span class="line">  <span class="keyword">const</span> selections = params.<span class="property">arguments</span>[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">changes</span>: <span class="title class_">TextEdit</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 全ての選択範囲に対して実行</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> selection <span class="keyword">of</span> selections) &#123;</span><br><span class="line">    <span class="comment">// 選択範囲のテキストを取得</span></span><br><span class="line">    <span class="keyword">const</span> text = textDocument.<span class="title function_">getText</span>(selection);</span><br><span class="line">    <span class="keyword">if</span> (text.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反転</span></span><br><span class="line">    <span class="keyword">const</span> reversed = text.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    changes.<span class="title function_">push</span>(<span class="title class_">TextEdit</span>.<span class="title function_">replace</span>(selection, reversed));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 選択範囲がない場合はテキスト全体を反転</span></span><br><span class="line">  <span class="keyword">if</span> (changes.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// テキスト全体を取得</span></span><br><span class="line">    <span class="keyword">const</span> text = textDocument.<span class="title function_">getText</span>();</span><br><span class="line">    <span class="comment">// 反転</span></span><br><span class="line">    <span class="keyword">const</span> reversed = text.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    changes.<span class="title function_">push</span>(</span><br><span class="line">      <span class="title class_">TextEdit</span>.<span class="title function_">replace</span>(</span><br><span class="line">        <span class="title class_">Range</span>.<span class="title function_">create</span>(</span><br><span class="line">          <span class="title class_">Position</span>.<span class="title function_">create</span>(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">          textDocument.<span class="title function_">positionAt</span>(text.<span class="property">length</span>)</span><br><span class="line">        ),</span><br><span class="line">        reversed</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 変更を適用</span></span><br><span class="line">  connection.<span class="property">workspace</span>.<span class="title function_">applyEdit</span>(&#123;</span><br><span class="line">    <span class="attr">documentChanges</span>: [</span><br><span class="line">      <span class="title class_">TextDocumentEdit</span>.<span class="title function_">create</span>(</span><br><span class="line">        &#123; <span class="attr">uri</span>: textDocument.<span class="property">uri</span>, <span class="attr">version</span>: textDocument.<span class="property">version</span> &#125;,</span><br><span class="line">        changes</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="動作確認-2"><a href="#動作確認-2" class="headerlink" title="動作確認"></a>動作確認</h2><p>任意の範囲を選択肢、コマンドパレットでreverse textを実行すると、選択範囲が反転されます。また、範囲を選択していない場合はドキュメント全体が反転されます。<br><img src="/images/20221125a/reverse.gif" alt="" width="1200" height="675" loading="lazy"></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>LSPを用いた拡張機能のサンプルコードに機能を追加する方法を解説しました。</p><p>LSPを用いたVSCodeの拡張機能の開発に関する日本語記事はまだまだ少ないので、この記事が少しでも開発の助けになれば幸いです。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://qiita.com/Ikuyadeu/items/98458f9ab760d09660ff">Language Server Protocol開発チュートリアル - Qiita</a></li><li><a href="https://code.visualstudio.com/api/language-extensions/language-server-extension-guide">Language Server Extension Guide | Visual Studio Code Extension API</a></li><li><a href="https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4">language server protocolについて (前編) - Qiita</a></li><li><a href="https://future-architect.github.io/articles/20220303a/">Pyright を LSP サーバとした自作 LSP クライアント（実装編） | フューチャー技術ブログ</a></li><li><a href="https://future-architect.github.io/articles/20220302a/">Pyright を LSP サーバとした自作 LSP クライアント（調査編） | フューチャー技術ブログ</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/SQL/">SQL</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%82%BF%E3%83%BC/">フォーマッター</category>
      
      <category domain="https://future-architect.github.io/tags/TypeScript/">TypeScript</category>
      
      <category domain="https://future-architect.github.io/tags/VSCode/">VSCode</category>
      
      <category domain="https://future-architect.github.io/tags/LSP/">LSP</category>
      
      
      <comments>https://future-architect.github.io/articles/20221125a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Language Server Protocolを用いたVSCode拡張機能開発 (前編)</title>
      <link>https://future-architect.github.io/articles/20221124a/</link>
      <guid>https://future-architect.github.io/articles/20221124a/</guid>
      <pubDate>Wed, 23 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Futureでアルバイトをしている川渕です。アルバイトの前はFutureのインターンシップでRust製SQLフォーマッタの作成を行っていました(その時の記事は<a href="/articles/20220916b/">こちら</a>)。現在はそのSQLフォーマッタをVSCodeの拡張機能にする作業を行っており、そのための方法を学んでいます。</p><p>本記事ではLanguage Server Protocol(以下LSP)を用いたVSCode拡張機能開発について説明します。</p><p>前編ではLSPを用いたVSCodeの拡張機能開発チュートリアルと、チュートリアルに使用したサンプルコードの解説を行います。</p><p><a href="/articles/20221125a/">後編</a>ではサンプルコードに機能を追加する方法を説明します。</p><h1 id="Language-Serverとは"><a href="#Language-Serverとは" class="headerlink" title="Language Serverとは"></a>Language Serverとは</h1><p>Language Serverとは、自動補完、エラーチェック、型チェックなどの様々な言語機能をIDEに提供するものです。</p><h1 id="Language-Server-Protocol-LSP-とは"><a href="#Language-Server-Protocol-LSP-とは" class="headerlink" title="Language Server Protocol (LSP)とは"></a>Language Server Protocol (LSP)とは</h1><p><a href="https://microsoft.github.io/language-server-protocol/">LSP</a>とは2016年6月にMicrosoftが発表したプロトコルで、IDEとLanguage Server間の通信を標準化するものです。</p><p>LSPがない場合は各IDEに対応した言語、仕様で言語サーバを実装しなければならず、非常に労力がかかってしまいます。しかし、LSPを使用することで1つの言語サーバを複数のIDEで利用できるようになり、実装言語の制約も無くなります。</p><p>つまり、LSPを用いて開発した拡張機能はVSCodeだけでなく、VimやEmacsなどでも使用できます。</p><img src="/images/20221124a/lsp-languages-editors.png" alt="lsp-languages-editors.png" width="1162" height="538" loading="lazy"><h1 id="本記事で説明すること"><a href="#本記事で説明すること" class="headerlink" title="本記事で説明すること"></a>本記事で説明すること</h1><ul><li>LSPを用いたVSCodeの拡張機能開発チュートリアル</li><li>チュートリアルコードの解説</li></ul><h1 id="本記事で説明しないこと"><a href="#本記事で説明しないこと" class="headerlink" title="本記事で説明しないこと"></a>本記事で説明しないこと</h1><ul><li>VSCode以外で使用する方法</li><li>拡張機能の公開方法</li></ul><h1 id="LSPチュートリアル"><a href="#LSPチュートリアル" class="headerlink" title="LSPチュートリアル"></a>LSPチュートリアル</h1><p>まずVSCodeの公式で配布されている<a href="https://github.com/microsoft/vscode-extension-samples/tree/main/lsp-sample">LSPのサンプルコード</a>を動かしてみます。</p><h3 id="1-サンプルリポジトリのダウンロード"><a href="#1-サンプルリポジトリのダウンロード" class="headerlink" title="1. サンプルリポジトリのダウンロード"></a>1. サンプルリポジトリのダウンロード</h3><p>まず適当なディレクトリで以下のコマンドを実行してVSCode拡張機能サンプルリポジトリをダウンロードします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/microsoft/vscode-extension-samples.git</span><br></pre></td></tr></table></figure><h3 id="2-必要なパッケージのインストール"><a href="#2-必要なパッケージのインストール" class="headerlink" title="2. 必要なパッケージのインストール"></a>2. 必要なパッケージのインストール</h3><p>次にnpmを用いて必要なパッケージをインストールします。</p><ol><li>まず先程ダウンロードしたリポジトリ内のlsp-sampleディレクトリをvscodeで開く</li><li>Ctrl+@(macOSの場合は^+@)でターミナルを開き、以下を実行する<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-コンパイルと実行"><a href="#3-コンパイルと実行" class="headerlink" title="3. コンパイルと実行"></a>3. コンパイルと実行</h3><ol><li>Ctrl+Shift+Bでクライアントとサーバをコンパイル</li><li>Ctrl+Shift+Dで「実行とデバッグ」を開き、Launch Clientを選択する<img src="/images/20221124a/image.png" alt="" width="1200" height="650" loading="lazy"></li><li><font color="MediumSeaGreen">▷</font>をクリックする</li><li>新たにVSCodeのウィンドウが開くのでそのVSCode上で適当なテキストファイルを作成</li><li>テキストファイルで以下の機能が確認できれば完了<ul><li>jと入力すると補完の候補としてJavaScriptが表示される <img src="/images/20221124a/image_2.png" alt="" width="682" height="84" loading="lazy"></li><li>tと入力すると補完の候補としてTypeScriptが表示される <img src="/images/20221124a/image_3.png" alt="" width="676" height="74" loading="lazy"></li><li>全て大文字、かつ長さが2以上の単語には警告が表示される<br> <img src="/images/20221124a/image_4.png" alt="" width="491" height="202" loading="lazy"></li></ul></li></ol><h3 id="4-サーバのデバッグ"><a href="#4-サーバのデバッグ" class="headerlink" title="4. サーバのデバッグ"></a>4. サーバのデバッグ</h3><ol><li>Launch Clientしている状態で「実行とデバッグ」のAttach to Serverを選択</li><li><font color="MediumSeaGreen">▷</font>をクリック<img src="/images/20221124a/image_5.png" alt="" width="1200" height="650" loading="lazy"></li><li>サーバのブレークポイントが効くようになる<img src="/images/20221124a/image_6.png" alt="" width="1200" height="650" loading="lazy"></li></ol><h1 id="サンプルコードの解説"><a href="#サンプルコードの解説" class="headerlink" title="サンプルコードの解説"></a>サンプルコードの解説</h1><p>先程実行したlsp-sampleの実装について詳しく解説します。</p><h2 id="ファイル構成"><a href="#ファイル構成" class="headerlink" title="ファイル構成"></a>ファイル構成</h2><p>ファイル構成は以下の通りです。<br>extension.tsにクライアントサイドの処理、server.tsにサーバサイドの処理を記述しています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── client  <span class="comment"># クライアントサイド</span></span><br><span class="line">│   ├── src</span><br><span class="line">│   │   ├── <span class="built_in">test</span> <span class="comment"># テストコード</span></span><br><span class="line">│   │   └── extension.ts <span class="comment"># クライアントサイドの実装</span></span><br><span class="line">├── package.json <span class="comment"># パッケージ情報</span></span><br><span class="line">└── server <span class="comment"># サーバサイド</span></span><br><span class="line">    └── src</span><br><span class="line">        └── server.ts <span class="comment"># サーバサイドの実装</span></span><br></pre></td></tr></table></figure><h2 id="pakcage-json"><a href="#pakcage-json" class="headerlink" title="pakcage.json"></a>pakcage.json</h2><p>クライアントの機能について記述しています。詳しい情報は以下に記載されています。</p><ul><li><a href="https://code.visualstudio.com/api/references/extension-manifest">Extension Manifest | Visual Studio Code Extension API</a></li></ul><p>この中から一部のフィールドを説明します。</p><h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><p>拡張機能の名前で、今回のサンプルコードではlsp-sampleとなっています。<br>マーケットプレースでの表示名はdisplayNameで別に設定できます。</p><h3 id="publisher"><a href="#publisher" class="headerlink" title="publisher"></a>publisher</h3><p>拡張機能を公開する際に使用するフィールドです。<br><a href="https://github.com/microsoft/vscode-vsce">vsce</a>というVSCode拡張機能用コマンドラインツールで作成したpublisherIDをこのフィールドに入力します。</p><p>拡張機能の公開方法は以下に記載されています。</p><ul><li><a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension">Publishing Extensions | Visual Studio Code Extension API</a></li></ul><h3 id="categories"><a href="#categories" class="headerlink" title="categories"></a>categories</h3><p>拡張機能のカテゴリを入力します。</p><details><summary>許容するカテゴリ一覧</summary><ul><li>Programming Languages</li><li>Snippets</li><li>Linters</li><li>Themes</li><li>Debuggers</li><li>Formatters</li><li>Keymaps</li><li>SCM Providers</li><li>Other</li><li>Extension Packs</li><li>Language Packs</li><li>Data Science</li><li>Machine Learning</li><li>Visualization</li><li>Notebooks</li><li>Education</li><li>Testing</details></li></ul><h3 id="activateEvents"><a href="#activateEvents" class="headerlink" title="activateEvents"></a>activateEvents</h3><p>activateEventsに記述したイベントが発生すると、拡張機能が有効になります。<br>lsp-sampleでのactivateEventsは以下のようになっています。</p><p><a href="https://github.com/microsoft/vscode-extension-samples/blob/fdd3bb95ce8e38ffe58fc9158797239fdf5017f1/lsp-sample/package.json#L19-L21">GitHub</a></p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;activationEvents&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;onLanguage:plaintext&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>これは、「プレーンテキスト(.txtなど)を開く」というイベントが発生すると拡張機能が有効になることを表しています。<br>他にもコマンド実行イベントやデバッグイベントなどを登録できます。詳しい情報は以下に記載されています。</p><ul><li><a href="https://code.visualstudio.com/api/references/activation-events">Activation Events | Visual Studio Code Extension API</a></li></ul><h3 id="contributes"><a href="#contributes" class="headerlink" title="contributes"></a>contributes</h3><p>拡張機能の機能についての情報を記述します。<br>詳しい情報は以下に記載されています。</p><ul><li><a href="https://code.visualstudio.com/api/references/contribution-points">Contribution Points | Visual Studio Code Extension API</a></li></ul><h2 id="extension-ts"><a href="#extension-ts" class="headerlink" title="extension.ts"></a>extension.ts</h2><p>extension.tsにはクライアント側の処理を記述します。</p><h3 id="拡張機能の起動時の処理"><a href="#拡張機能の起動時の処理" class="headerlink" title="拡張機能の起動時の処理"></a>拡張機能の起動時の処理</h3><p>拡張機能の起動時に関数<code>activate()</code>が実行されます。</p><p><code>activate()</code>内では接続先のサーバ、クライアントの設定、クライアントの起動処理を行います。</p><p><a href="https://github.com/microsoft/vscode-extension-samples/blob/fdd3bb95ce8e38ffe58fc9158797239fdf5017f1/lsp-sample/client/src/extension.ts#L18-L58">GitHub</a></p><figure class="highlight ts"><figcaption><span>extension.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">activate</span>(<span class="params">context: ExtensionContext</span>) &#123;</span><br><span class="line"><span class="comment">// サーバはnodeで実装されているものを使用</span></span><br><span class="line"><span class="keyword">const</span> serverModule = context.<span class="title function_">asAbsolutePath</span>(</span><br><span class="line">path.<span class="title function_">join</span>(<span class="string">&#x27;server&#x27;</span>, <span class="string">&#x27;out&#x27;</span>, <span class="string">&#x27;server.js&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// サーバのデバッグオプション</span></span><br><span class="line"><span class="comment">// --inspect=6009: VSCodeがサーバにアタッチできるようにサーバをNodeのインスペクタモードで実行</span></span><br><span class="line"><span class="keyword">const</span> debugOptions = &#123; <span class="attr">execArgv</span>: [<span class="string">&#x27;--nolazy&#x27;</span>, <span class="string">&#x27;--inspect=6009&#x27;</span>] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// デバッグモードで拡張機能を実行するとデバッグオプションが使用される</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">serverOptions</span>: <span class="title class_">ServerOptions</span> = &#123;</span><br><span class="line"><span class="attr">run</span>: &#123; <span class="attr">module</span>: serverModule, <span class="attr">transport</span>: <span class="title class_">TransportKind</span>.<span class="property">ipc</span> &#125;,</span><br><span class="line"><span class="attr">debug</span>: &#123;</span><br><span class="line"><span class="attr">module</span>: serverModule,</span><br><span class="line"><span class="attr">transport</span>: <span class="title class_">TransportKind</span>.<span class="property">ipc</span>,</span><br><span class="line"><span class="attr">options</span>: debugOptions</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// クライアントのオプション</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">clientOptions</span>: <span class="title class_">LanguageClientOptions</span> = &#123;</span><br><span class="line">        <span class="comment">// プレーンテキストのファイルに機能を提供</span></span><br><span class="line"><span class="attr">documentSelector</span>: [&#123; <span class="attr">scheme</span>: <span class="string">&#x27;file&#x27;</span>, <span class="attr">language</span>: <span class="string">&#x27;plaintext&#x27;</span> &#125;],</span><br><span class="line">        <span class="comment">// ワークスペース上のクライアント設定が変更された場合にサーバに通知</span></span><br><span class="line"><span class="attr">synchronize</span>: &#123;</span><br><span class="line"><span class="attr">fileEvents</span>: workspace.<span class="title function_">createFileSystemWatcher</span>(<span class="string">&#x27;**/.clientrc&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// クライアントを作成</span></span><br><span class="line">client = <span class="keyword">new</span> <span class="title class_">LanguageClient</span>(</span><br><span class="line"><span class="string">&#x27;languageServerExample&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Language Server Example&#x27;</span>,</span><br><span class="line">serverOptions,</span><br><span class="line">clientOptions</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// クライアントを起動 (同時にサーバも起動する)</span></span><br><span class="line">client.<span class="title function_">start</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみに、lsp-sampleではUntitledなファイル(新規作成した保存されていないファイル)には対応していませんが、<code>clientOptions</code>の<code>documentSelector</code>を以下のように変更することで対応できます。</p><figure class="highlight diff"><figcaption><span>extension.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// クライアントのオプション</span><br><span class="line">const clientOptions: LanguageClientOptions = &#123;</span><br><span class="line">        // プレーンテキストのファイルに機能を提供</span><br><span class="line">        documentSelector: [</span><br><span class="line">          &#123; scheme: &quot;file&quot;, language: &quot;plaintext&quot; &#125;,</span><br><span class="line"><span class="addition">+         &#123; scheme: &quot;untitled&quot;, language: &quot;plaintext&quot; &#125;,</span></span><br><span class="line">        ],</span><br><span class="line">        // ワークスペース上のクライアント設定が変更された場合にサーバに通知</span><br><span class="line">synchronize: &#123;</span><br><span class="line">fileEvents: workspace.createFileSystemWatcher(&#x27;**/.clientrc&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/images/20221124a/untitled.drawio.png" alt="untitled.drawio.png" width="1200" height="215" loading="lazy"><h3 id="拡張機能の終了時の処理"><a href="#拡張機能の終了時の処理" class="headerlink" title="拡張機能の終了時の処理"></a>拡張機能の終了時の処理</h3><p>拡張機能の終了時に関数<code>deactive()</code>が実行されます。</p><p>lsp-sampleでは関数<code>deactive()</code>にクライアントを終了する処理を記述しています。<br><a href="https://github.com/microsoft/vscode-extension-samples/blob/fdd3bb95ce8e38ffe58fc9158797239fdf5017f1/lsp-sample/client/src/extension.ts#L60-L65">GitHub</a></p><figure class="highlight ts"><figcaption><span>extension.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">deactivate</span>(<span class="params"></span>): <span class="title class_">Thenable</span>&lt;<span class="built_in">void</span>&gt; | <span class="literal">undefined</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!client) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> client.<span class="title function_">stop</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="server-ts"><a href="#server-ts" class="headerlink" title="server.ts"></a>server.ts</h2><p>server.tsにはサーバ側の処理を記述します。</p><h3 id="サーバの接続を作成"><a href="#サーバの接続を作成" class="headerlink" title="サーバの接続を作成"></a>サーバの接続を作成</h3><p>サーバの接続を作成し、その接続を監視することで拡張機能を提供します。</p><ul><li>サーバの接続の作成<br><a href="https://github.com/microsoft/vscode-extension-samples/blob/fdd3bb95ce8e38ffe58fc9158797239fdf5017f1/lsp-sample/server/src/server.ts#L26">GitHub</a></li></ul><figure class="highlight ts"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> connection = <span class="title function_">createConnection</span>(<span class="title class_">ProposedFeatures</span>.<span class="property">all</span>);</span><br></pre></td></tr></table></figure><ul><li>接続の監視<br><a href="https://github.com/microsoft/vscode-extension-samples/blob/fdd3bb95ce8e38ffe58fc9158797239fdf5017f1/lsp-sample/server/src/server.ts#L229-L230">GitHub</a></li></ul><figure class="highlight ts"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.<span class="title function_">listen</span>();</span><br></pre></td></tr></table></figure><h3 id="ドキュメントマネージャの作成"><a href="#ドキュメントマネージャの作成" class="headerlink" title="ドキュメントマネージャの作成"></a>ドキュメントマネージャの作成</h3><p>ドキュメントマネージャとはサーバとクライアントのドキュメントを同期するものです。<br>ドキュメントマネージャを作成し、ドキュメントの監視を行います。</p><ul><li>ドキュメントマネージャの作成<br><a href="https://github.com/microsoft/vscode-extension-samples/blob/fdd3bb95ce8e38ffe58fc9158797239fdf5017f1/lsp-sample/server/src/server.ts#L29">GitHub</a></li></ul><figure class="highlight ts"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">documents</span>: <span class="title class_">TextDocuments</span>&lt;<span class="title class_">TextDocument</span>&gt; = <span class="keyword">new</span> <span class="title class_">TextDocuments</span>(<span class="title class_">TextDocument</span>);</span><br></pre></td></tr></table></figure><ul><li>ドキュメントマネージャの監視<br><a href="https://github.com/microsoft/vscode-extension-samples/blob/fdd3bb95ce8e38ffe58fc9158797239fdf5017f1/lsp-sample/server/src/server.ts#L227">GitHub</a></li></ul><figure class="highlight ts"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">documents.<span class="title function_">listen</span>(connection);</span><br></pre></td></tr></table></figure><p>ドキュメントマネージャはドキュメントを開くイベント、閉じるイベント、変更イベントを検知します。</p><h3 id="初期化"><a href="#初期化" class="headerlink" title="初期化"></a>初期化</h3><p>最初のリクエスト受信時に実行されます。ここでサーバの設定を初期化します。</p><p><a href="https://github.com/microsoft/vscode-extension-samples/blob/fdd3bb95ce8e38ffe58fc9158797239fdf5017f1/lsp-sample/server/src/server.ts#L35-L69">GitHub</a></p><figure class="highlight ts"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">connection.<span class="title function_">onInitialize</span>(<span class="function">(<span class="params">params: InitializeParams</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> capabilities = params.<span class="property">capabilities</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        中略 (クライアントの設定を取得)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="title class_">InitializeResult</span> = &#123;</span><br><span class="line">        <span class="comment">// サーバの機能</span></span><br><span class="line">        <span class="attr">capabilities</span>: &#123;</span><br><span class="line">            <span class="comment">// テキストドキュメントの同期方法の設定</span></span><br><span class="line">            <span class="comment">// 今回は最初に開いたときのみドキュメント全体を読み込み、その後は差分更新が送信されるように設定している</span></span><br><span class="line">            <span class="attr">textDocumentSync</span>: <span class="title class_">TextDocumentSyncKind</span>.<span class="property">Incremental</span>,</span><br><span class="line">            <span class="comment">// クライアントにこのサーバは補完に対応していることを伝える</span></span><br><span class="line">            <span class="attr">completionProvider</span>: &#123;</span><br><span class="line">                <span class="attr">resolveProvider</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// クライアントがワークスペースに対応している場合</span></span><br><span class="line"><span class="keyword">if</span> (hasWorkspaceFolderCapability) &#123;</span><br><span class="line">result.<span class="property">capabilities</span>.<span class="property">workspace</span> = &#123;</span><br><span class="line"><span class="attr">workspaceFolders</span>: &#123;</span><br><span class="line"><span class="attr">supported</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="警告表示機能の実装"><a href="#警告表示機能の実装" class="headerlink" title="警告表示機能の実装"></a>警告表示機能の実装</h3><p>lsp-sampleではテキストドキュメントの変更時に全て大文字で、かつ長さが2以上の単語を特定し、その箇所に警告を表示します。<br>この機能の実装方法について説明します。</p><p>テキストドキュメントが変更、または初めて開かれた場合にこのメソッドが呼び出されます。</p><p><a href="https://github.com/microsoft/vscode-extension-samples/blob/fdd3bb95ce8e38ffe58fc9158797239fdf5017f1/lsp-sample/server/src/server.ts#L131-L135">GitHub</a></p><figure class="highlight ts"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">documents.<span class="title function_">onDidChangeContent</span>(<span class="function">(<span class="params">change</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">validateTextDocument</span>(change.<span class="property">document</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>このメソッド内で呼び出している関数<code>validateTextDocument</code>の処理は以下の通りです。</p><p><a href="https://github.com/microsoft/vscode-extension-samples/blob/fdd3bb95ce8e38ffe58fc9158797239fdf5017f1/lsp-sample/server/src/server.ts#L137-L182">GitHub</a></p><figure class="highlight ts"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">validateTextDocument</span>(<span class="params">textDocument: TextDocument</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line"><span class="comment">// ドキュメントの設定を取得</span></span><br><span class="line"><span class="keyword">const</span> settings = <span class="keyword">await</span> <span class="title function_">getDocumentSettings</span>(textDocument.<span class="property">uri</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 長さが2以上の全て大文字の単語に対して診断を発行する</span></span><br><span class="line"><span class="keyword">const</span> text = textDocument.<span class="title function_">getText</span>();</span><br><span class="line"><span class="keyword">const</span> pattern = <span class="regexp">/\b[A-Z]&#123;2,&#125;\b/g</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">m</span>: <span class="title class_">RegExpExecArray</span> | <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> problems = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">diagnostics</span>: <span class="title class_">Diagnostic</span>[] = [];</span><br><span class="line"><span class="keyword">while</span> ((m = pattern.<span class="title function_">exec</span>(text)) &amp;&amp; problems &lt; settings.<span class="property">maxNumberOfProblems</span>) &#123;</span><br><span class="line">problems++;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">diagnostic</span>: <span class="title class_">Diagnostic</span> = &#123;</span><br><span class="line">            <span class="comment">// 診断の強さ。今回は警告。</span></span><br><span class="line"><span class="attr">severity</span>: <span class="title class_">DiagnosticSeverity</span>.<span class="property">Warning</span>,</span><br><span class="line">            <span class="comment">// 診断の範囲。今回は該当の単語の開始位置から終了位置までを範囲としている。</span></span><br><span class="line"><span class="attr">range</span>: &#123;</span><br><span class="line"><span class="attr">start</span>: textDocument.<span class="title function_">positionAt</span>(m.<span class="property">index</span>),</span><br><span class="line"><span class="attr">end</span>: textDocument.<span class="title function_">positionAt</span>(m.<span class="property">index</span> + m[<span class="number">0</span>].<span class="property">length</span>),</span><br><span class="line">&#125;,</span><br><span class="line">            <span class="comment">// 診断のメッセージ</span></span><br><span class="line"><span class="attr">message</span>: <span class="string">`<span class="subst">$&#123;m[<span class="number">0</span>]&#125;</span> is all uppercase.`</span>,</span><br><span class="line">            <span class="comment">// 診断がどこから発行されたかを示す文字列</span></span><br><span class="line"><span class="attr">source</span>: <span class="string">&#x27;ex&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">        <span class="comment">// クライアントが診断の関連情報を受け取るように設定している場合、関連情報を付与する。</span></span><br><span class="line"><span class="keyword">if</span> (hasDiagnosticRelatedInformationCapability) &#123;</span><br><span class="line">diagnostic.<span class="property">relatedInformation</span> = [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">location</span>: &#123;</span><br><span class="line"><span class="attr">uri</span>: textDocument.<span class="property">uri</span>,</span><br><span class="line"><span class="attr">range</span>: <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, diagnostic.<span class="property">range</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">message</span>: <span class="string">&#x27;Spelling matters&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">location</span>: &#123;</span><br><span class="line"><span class="attr">uri</span>: textDocument.<span class="property">uri</span>,</span><br><span class="line"><span class="attr">range</span>: <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, diagnostic.<span class="property">range</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">message</span>: <span class="string">&#x27;Particularly for names&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">diagnostics.<span class="title function_">push</span>(diagnostic);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 診断を表示する</span></span><br><span class="line">connection.<span class="title function_">sendDiagnostics</span>(&#123; <span class="attr">uri</span>: textDocument.<span class="property">uri</span>, diagnostics &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>診断メッセージ、診断の発行元、関連情報は以下のように表示されます。<br><img src="/images/20221124a/warning.drawio.png" alt="warning.drawio.png" width="644" height="268" loading="lazy"></p><h3 id="補完機能の実装"><a href="#補完機能の実装" class="headerlink" title="補完機能の実装"></a>補完機能の実装</h3><p>lsp-sampleでは”TypeScript”、”JavaScript”という2つの単語の補完を提供します。</p><p>補完は<code>connection</code>の<code>onCompletion</code>メソッドで提供します。<br><a href="https://github.com/microsoft/vscode-extension-samples/blob/fdd3bb95ce8e38ffe58fc9158797239fdf5017f1/lsp-sample/server/src/server.ts#L189-L208">GitHub</a></p><figure class="highlight ts"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">connection.<span class="title function_">onCompletion</span>(</span><br><span class="line">(<span class="attr">_textDocumentPosition</span>: <span class="title class_">TextDocumentPositionParams</span>): <span class="title class_">CompletionItem</span>[] =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">label</span>: <span class="string">&#x27;TypeScript&#x27;</span>,</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">CompletionItemKind</span>.<span class="property">Text</span>,</span><br><span class="line"><span class="attr">data</span>: <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">label</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">CompletionItemKind</span>.<span class="property">Text</span>,</span><br><span class="line"><span class="attr">data</span>: <span class="number">2</span>,</span><br><span class="line">&#125;,</span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>また、<code>onCompletionResolve</code>メソッドに各補完が選択された場合に表示する情報を記述しています。<br><a href="https://github.com/microsoft/vscode-extension-samples/blob/fdd3bb95ce8e38ffe58fc9158797239fdf5017f1/lsp-sample/server/src/server.ts#L210-L223">GitHub</a></p><figure class="highlight ts"><figcaption><span>server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">connection.<span class="title function_">onCompletionResolve</span>((<span class="attr">item</span>: <span class="title class_">CompletionItem</span>): <span class="function"><span class="params">CompletionItem</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (item.<span class="property">data</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// &quot;TypeScript&quot;が選択された場合</span></span><br><span class="line">item.<span class="property">detail</span> = <span class="string">&#x27;TypeScript details&#x27;</span>;</span><br><span class="line">item.<span class="property">documentation</span> = <span class="string">&#x27;TypeScript documentation&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="property">data</span> === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// &quot;JavaScript&quot;が選択された場合</span></span><br><span class="line">item.<span class="property">detail</span> = <span class="string">&#x27;JavaScript details&#x27;</span>;</span><br><span class="line">item.<span class="property">documentation</span> = <span class="string">&#x27;JavaScript documentation&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>補完、追加情報は以下のように表示されます。<br><img src="/images/20221124a/hokan.drawio_(1).png" alt="" width="816" height="205" loading="lazy"></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>LSPを用いたVSCodeの拡張機能開発チュートリアルとチュートリアルコードの解説を行いました。</p><p><a href="/articles/20221125a/">後編</a> ではlsp-sampleに機能を追加する方法を説明しています。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://qiita.com/Ikuyadeu/items/98458f9ab760d09660ff">Language Server Protocol開発チュートリアル - Qiita</a></li><li><a href="https://code.visualstudio.com/api/language-extensions/language-server-extension-guide">Language Server Extension Guide | Visual Studio Code Extension API</a></li><li><a href="https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4">language server protocolについて (前編) - Qiita</a></li><li><a href="https://future-architect.github.io/articles/20220303a/">Pyright を LSP サーバとした自作 LSP クライアント（実装編） | フューチャー技術ブログ</a></li><li><a href="https://future-architect.github.io/articles/20220302a/">Pyright を LSP サーバとした自作 LSP クライアント（調査編） | フューチャー技術ブログ</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/SQL/">SQL</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%82%BF%E3%83%BC/">フォーマッター</category>
      
      <category domain="https://future-architect.github.io/tags/TypeScript/">TypeScript</category>
      
      <category domain="https://future-architect.github.io/tags/VSCode/">VSCode</category>
      
      <category domain="https://future-architect.github.io/tags/LSP/">LSP</category>
      
      
      <comments>https://future-architect.github.io/articles/20221124a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AzureAD＋MSAL for Goでバッチコマンドの認証</title>
      <link>https://future-architect.github.io/articles/20221122a/</link>
      <guid>https://future-architect.github.io/articles/20221122a/</guid>
      <pubDate>Mon, 21 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20221118a/">前回の記事</a>ではMSAL.jsを使い、シングルページアプリケーションの認証を試してみました。</p><p>業務システムで扱う認証にはいろいろな種類がありますが、だいたい以下のどれかに該当するケースが多いと思います。</p><ul><li>Webサービス・モバイルアプリ: 一般ユーザーでログイン</li><li>デスクトップで動かすバッチコマンド: 一般ユーザーでログイン</li><li>デスクトップやサーバーで動かすバッチコマンド: 無人運用</li></ul><p>Webサービスのうち、SPAは前回のエントリーで説明しました。Webサービスの認証は前回説明しました。今時の動的ページはSPAが主流と考えれば旧来のOpenID Connect（コールバックをウェブサーバーで受けてトークン発行はサーバーで行う）は説明不要でしょう。モバイルアプリについては使うフレームワークによっても変わるので割愛します。</p><p>本稿では、それ以外のケースとして、バッチコマンドの認証について扱います。今度はウェブ以外の認証ということで、MSAL for Goを使って認証します。上にあげたように、一般ユーザーでログインするケースと、無人運用の2つのケースを取り上げます。</p><h1 id="一般ユーザーの認証"><a href="#一般ユーザーの認証" class="headerlink" title="一般ユーザーの認証"></a>一般ユーザーの認証</h1><p>一般ユーザーは、WindowsとかOffice 365とかにログインする、いわゆる普通のユーザーです。この権限でトークンをとってAPIを実行すると、そのユーザーが操作したことになります。コマンドを動かした人の名前がログが残るということです。一般ユーザーの場合は、コマンドはまず、ユーザーに「お前誰よ」と聞く必要があります。</p><p>コマンドが自前でユーザーIDとパスワードの入力欄を出して入力させ、それを認証で使うフロー（Resource Owner Password Credentials Flow）は以前はありましたが、OAuth 2.1で無くなることが確定しています。ブラウザを表示してAzureAD認証をユーザーに行ってもらい、その結果のコードを使ってトークンを取得する方法がOAuth 2.1時代に唯一現存する方法です。そのため、通信方式としては、前回のSPAモードと同じく、Authorization Code Flowとなります。この方式はSPAと同様にパブリッククライアント用のモードなのでバッチコマンドを悪意のあるユーザーに奪取されて解析されたとしても直接それがセキュリティホールにはなりません。</p><p>まずは、AzureADの管理画面でアプリケーションを登録します（前回同様）。前回同様、テナントIDとクライアントIDはメモしておきます。</p><p>その後、認証のセクションで認証方式を追加しますが、今回はモバイルアプリケーションとデスクトップアプリケーションを選択し、カスタムのコールバックのアドレスで、ローカルホストのパスを指定します。ポートも指定する必要があります。また、<code>/callback</code>などのパスは不要です（後述）。</p><img src="/images/20221122a/スクリーンショット_2022-11-10_16.45.58.png" alt="" width="1200" height="570" loading="lazy"><p>Go版のMSALは以下のようにしてインポートします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/AzureAD/microsoft-authentication-library-for-go</span><br></pre></td></tr></table></figure><p>なお、追加でいくつかimportしないとエラーが出ます。不思議な構成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/AzureAD/microsoft-authentication-library-for-go/apps/internal/oauth/ops/accesstokens@v0.7.0</span><br><span class="line">$ go get github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors@v0.7.0</span><br><span class="line">$ go get github.com/AzureAD/microsoft-authentication-library-for-go/apps/public@v0.7.0</span><br></pre></td></tr></table></figure><p>モバイルアプリとかのパブリッククライアントは<code>.../apps/public</code>パッケージにあります。前回のエントリーでも紹介したパブリッククライアント用のパッケージです。これを使ったバイナリはリバースエンジニアリングされても、不正ログインされる材料は提供しません。</p><p>このライブラリを使ったコードは以下の通りで、JavaScript版とほぼ同じAPIで似たように書けます。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/AzureAD/microsoft-authentication-library-for-go/apps/public&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pc, err := public.New(<span class="string">&quot;&#123;クライアントID&#125;&quot;</span>, public.WithAuthority(<span class="string">&quot;https://login.microsoftonline.com/&#123;テナントID&#125;&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">result, err := pc.AcquireTokenInteractive(context.Background(), []<span class="type">string</span>&#123;<span class="string">&quot;User.Read&quot;</span>&#125;, public.WithRedirectURI(<span class="string">&quot;&#123;コールバックURL&#125;&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(result.AccessToken)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>これだけで実現できました。</p><h2 id="一般ユーザー方式の蛇足な説明"><a href="#一般ユーザー方式の蛇足な説明" class="headerlink" title="一般ユーザー方式の蛇足な説明"></a>一般ユーザー方式の蛇足な説明</h2><p>Go版のコードをみると、コールバックURLをパースして、ポート番号を取り出して自分でウェブサーバーを起動し、ブラウザからのリダイレクトを受けれるようにしています。このサーバーはコールバックのパスの部分を認識してくれないため、AzureADの登録では<code>http://localhost:5173</code>のような形式にしないと「コールバックアドレスが登録と違う」というエラーになってしまいます。また、コールバックアドレスを設定しないと、ランダムなポート番号で起動します。ただ、ポート番号が一致しないと失敗となるので、何かしらのポートを登録しないといけないはずです。</p><p>認証方式でお手軽だったSPAを選ぶとよさそうですが、これは「cross-origin requestsじゃないとダメ」というエラーが出ます。また、一般のウェブを選ぶと「client_assertion’ or ‘client_secret」が必要というエラーが出るので、今回選んだ「モバイルアプリケーションとデスクトップアプリケーション」一択です。</p><p>また、モバイルアプリケーション云々では、独自のスキーマのコールバックURLを自動で作ってくれていました。MSAL用とあるので使えそうですが、これはin app browserなど、特定のスキーマの通信を横取りできる環境用になっています。今回は一般のブラウザを使っているのでこの方式は使えません。</p><h1 id="無人運用の認証"><a href="#無人運用の認証" class="headerlink" title="無人運用の認証"></a>無人運用の認証</h1><p>バッチ処理などではログイン画面を出したりはできません。特定のユーザーのIDやパスワードを焼き込んで使い、退職にともなって停止して困った、みたいな話は昔から何度も聞きます。これは運用として間違っています。システムユーザー的なものを使って運用するのがベストです。しかし、前述のようにパスワードをツールが直接扱う認証は非推奨です。OAuth 2.1時代に使える方式としてはクライアントシークレットを使った認証方式になります。</p><p>まずはシークレットを生成します。「証明書とシークレット」を選択し、新しいクライアントシークレットを選択してシークレットを作ります。</p><img src="/images/20221122a/スクリーンショット_2022-11-11_20.14.23.png" alt="スクリーンショット_2022-11-11_20.14.23.png" width="1200" height="497" loading="lazy"><p>出来上がると、「値」と「シークレットID」が表示されますが、値の方が必要なものなので、コピーしておきます。</p><img src="/images/20221122a/スクリーンショット_2022-11-11_21.34.44.png" alt="スクリーンショット_2022-11-11_21.34.44.png" width="1200" height="563" loading="lazy"><p>これを組み込んだコードが以下の通りです。前回のエントリーや前述のパブリッククライアントのケースとは異なり、今回は<code>.../confidential</code>なパッケージを使っています。これはコンフィデンシャルクライアントで、攻撃者がバイナリにさわれない環境を想定しています。クライアントシークレットを奪取されてしまうとログインできてしまうのでこのバッチコマンドは（広く配布しない前提の）社内専用ツールだったり、バッチサーバーでのみ運用するケースでしか使ってはいけません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/AzureAD/microsoft-authentication-library-for-go/apps/confidential&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s, err := confidential.NewCredFromSecret(<span class="string">&quot;&#123;クライアントシークレット&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">cc, err := confidential.New(<span class="string">&quot;&#123;クライアントID&#125;&quot;</span>, s,</span><br><span class="line">        confidential.WithAuthority(<span class="string">&quot;https://login.microsoftonline.com/&#123;テナントID&#125;&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">result, err := cc.AcquireTokenByCredential(context.Background(), []<span class="type">string</span>&#123;<span class="string">&quot;https://graph.microsoft.com/.default&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(result.AccessToken)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意ポイントはスコープの指定です。「リソースのURL」と「権限（パス形式）」を組み合わせたURL形式で指定します。SharePointだと、<code>https://&#123;サイト名&#125;.sharepoint.com/&#123;権限&#125;</code>です。権限部分は<code>/.default</code>か、<a href="https://learn.microsoft.com/en-us/graph/permissions-reference#sites-permissions">ここ</a>に書いてあるような<code>Sites.FullControl.All</code>のような文字列を使います。なぜパブリッククライアントの時と違う名前なのか・・・</p><h1 id="認証のキャッシュ"><a href="#認証のキャッシュ" class="headerlink" title="認証のキャッシュ"></a>認証のキャッシュ</h1><p>バッチ処理を毎秒実行するとして、毎秒認証するのは無駄が多いでしょう。トークンが有効な間は同じトークンを使いまわしたいところです。MSAL for Goでは自分でキャッシュ機構を作ることが可能です。といっても、大体はファイルへの読み書きだと思うので、次のサンプルの通りに実装すればおしまいです。</p><p><a href="https://github.com/AzureAD/microsoft-authentication-library-for-go/blob/dev/apps/tests/devapps/sample_cache_accessor.go">https://github.com/AzureAD/microsoft-authentication-library-for-go/blob/dev/apps/tests/devapps/sample_cache_accessor.go</a></p><p>パブリッククライアントの場合は次のオプションを<code>New</code>に追加します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public.WithCache(&amp;TokenCache&#123;<span class="string">&quot;ファイル名&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>コンフィデンシャルクライアントの場合は次のオプションを<code>New</code>に追加します。なぜ違う名前なのか・・・</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">confidential.WithAccessor(cache)</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回もバッチコマンドを想定してAzureADと認証するためのライブラリを使った認証を試してみました。</p><p>この手の検証は、アプリケーションのコード側だけではなく、接続先のAzureADの設定によっても接続が失敗する可能性があります。また、このあたりの設定はクリティカル度が高いため、アクセスできる人はなるべく少なくする運用がされることがほとんどです。特に受託開発で、お客さん側でAzureADの設定を管理している場合など、開発側では直接コンソールが触れずに、エスパーしながら試行錯誤しなければならない場面があります。お客さん側にも時間を取ってもらわないといけないし、自由な試行錯誤が難しかったりと、靴の裏から足の裏を掻くようなもどかしいことになります。<br>前回と今回のエントリーは、そのような場合にも対応できるように、AzureAD側の設定の依頼が投げやすいように、開発のストレスを下げたい、という思いで管理画面側の設定もなるべく具体的に書いています。</p><p>MSAL系のライブラリにはたくさんの実装がありますが、ウェブフロントエンドもGoも、APIはほぼ一緒でした。Javaとかみてみてもすぐにキャッチアップできそうです。簡単で安全な接続ができるため、接続先がAzureADであれば積極的にMSALシリーズを活用してみると良いと思いました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Azure/">Azure</category>
      
      <category domain="https://future-architect.github.io/tags/AD/">AD</category>
      
      <category domain="https://future-architect.github.io/tags/MSAL-js/">MSAL.js</category>
      
      <category domain="https://future-architect.github.io/tags/AzureAD/">AzureAD</category>
      
      
      <comments>https://future-architect.github.io/articles/20221122a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>IPAの過去問で学ぶC &amp; C(Command &amp; Control)サーバの手法と対応策</title>
      <link>https://future-architect.github.io/articles/20221121a/</link>
      <guid>https://future-architect.github.io/articles/20221121a/</guid>
      <pubDate>Sun, 20 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221121a/candc.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;700&quot; loading=&quot;lazy&quot;&gt;


&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221121a/candc.png" alt="" width="1200" height="700" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG 村瀬です。<br><a href="/articles/20220511a/">前回</a>に引き続き、情報処理推進機構(IPA)のネットワークスペシャリスト試験の過去問からC&amp;C(Command &amp; Control)サーバの手法と対応策が興味深かったので自分の知識を整理するためブログにしてみました。</p><p>対象の試験は ネットワークスペシャリスト試験 令和元年度 午後Ⅱ 問2<br>過去問は<a href="https://www.jitec.ipa.go.jp/1_04hanni_sukiru/mondai_kaitou_2019h31.html#01aki">こちら</a>からダウンロード可能です。</p><p>当たり前ですが、このブログでは犯罪行為を推奨するものではなく、セキュリティ意識、対策の向上を目的として記載しております。</p><h1 id="C-amp-C-Command-amp-Control-サーバとは"><a href="#C-amp-C-Command-amp-Control-サーバとは" class="headerlink" title="C&amp;C(Command &amp; Control)サーバとは"></a>C&amp;C(Command &amp; Control)サーバとは</h1><p>インターネットを経由してボットネットやPC上のマルウェアに対して命令(Command)を送信し、遠隔操作(Control)するサーバです。</p><h1 id="なぜインターネットから内部LANのPCに遠隔操作できるのか"><a href="#なぜインターネットから内部LANのPCに遠隔操作できるのか" class="headerlink" title="なぜインターネットから内部LANのPCに遠隔操作できるのか"></a>なぜインターネットから内部LANのPCに遠隔操作できるのか</h1><p>適切にファイアウォールの設定がされていればインターネットから内部LAN上のPCにはアクセスできないはずです。しかしながら内部LANのPC(のマルウェア)からインターネット上のC&amp;Cサーバにアクセスすることでファイアウォールを突破しCommandを取得します。プロトコルはHTTPS,HTTPなどが利用されるので一般のWEBページと見分けがつきません。WEBページの閲覧は許容されている企業が多いため、一度マルウェアの侵入を許してしまうと継続的にCommandを受け付けてしまうことになります。</p><img src="/images/20221121a/candc1.png" alt="candc1.png" width="1186" height="669" loading="lazy"><h1 id="試験問題に基づく対応方法-IPアドレスを指定した遮断"><a href="#試験問題に基づく対応方法-IPアドレスを指定した遮断" class="headerlink" title="試験問題に基づく対応方法 IPアドレスを指定した遮断"></a>試験問題に基づく対応方法 IPアドレスを指定した遮断</h1><p>ネットワークスペシャリスト試験 令和元年度 午後Ⅱ 問2 から抜粋</p><blockquote><p>C&amp;CサーバのIPアドレスが特定できれば、FPサーバでC&amp;Cサーバとの通信は遮断できる。</p></blockquote><p>問題文にあるとおり、C&amp;Cサーバとの通信はIPアドレスが特定できればFP(フォワードプロキシ)サーバで遮断できます。</p><img src="/images/20221121a/candc2.png" alt="candc2.png" width="1017" height="464" loading="lazy"><h1 id="攻撃者による攪乱-Fast-Flux"><a href="#攻撃者による攪乱-Fast-Flux" class="headerlink" title="攻撃者による攪乱 Fast Flux"></a>攻撃者による攪乱 Fast Flux</h1><p>通信遮断のため、IPアドレスを特定したいのですが、攻撃者はFast Fluxと呼ばれる手法を用いてIPアドレスの特定を困難にします。</p><h2 id="Fast-Fluxとは"><a href="#Fast-Fluxとは" class="headerlink" title="Fast Fluxとは"></a>Fast Fluxとは</h2><p>ネットワークスペシャリスト試験 令和元年度 午後Ⅱ 問2 から抜粋</p><blockquote><p>Fast Fluxは、特定のドメインに対するDNSレコードを短時間に変化させることによって、サーバの追跡を困難にさせる手法である。</p></blockquote><blockquote><p>マルウェアが、一定間隔でfast-flux.example.comへアクセスを行えば、毎回、異なるIPアドレスで、ボットを経由してC&amp;Cサーバと通信することになる。</p></blockquote><p>問題文にあるとおりfast-flux.example.comに対するIPアドレスを複数設定し、かつ短時間でIPアドレスを変更します。<br>前回説明したDNSキャッシュポイズニングでは攻撃者から攻撃を受けにくくするための施策として大量の送信元ポート番号を利用しましたが、反対にそれを悪用された感じがしますね。<br>これをやられるとIPアドレスの特定が困難になってしまいます。</p><img src="/images/20221121a/candc3.png" alt="candc3" width="915" height="577" loading="lazy"><h1 id="試験問題に基づく対応方法-FQDNを指定した遮断"><a href="#試験問題に基づく対応方法-FQDNを指定した遮断" class="headerlink" title="試験問題に基づく対応方法 FQDNを指定した遮断"></a>試験問題に基づく対応方法 FQDNを指定した遮断</h1><p>IPアドレスの特定が困難なので、IPアドレスではなくマルウェアがアクセスするFQDN(fast-flux.example.com)を特定することで通信の遮断を試みます。</p><h1 id="攻撃者による攪乱-Domain-Flux"><a href="#攻撃者による攪乱-Domain-Flux" class="headerlink" title="攻撃者による攪乱 Domain Flux"></a>攻撃者による攪乱 Domain Flux</h1><p>攻撃者はこれを避けるためにDomain Fluxと呼ばれる手法を用います。</p><h2 id="Domain-Fluxとは"><a href="#Domain-Fluxとは" class="headerlink" title="Domain Fluxとは"></a>Domain Fluxとは</h2><p>ネットワークスペシャリスト試験 令和元年度 午後Ⅱ 問2 から抜粋</p><blockquote><p>Domain Fluxは、ドメインワイルドカードを用いて、あらゆるホスト名に対して、同一のIPアドレスを応答する手法である。Fast FluxとDomain Fluxを組み合わせることによって、C&amp;CサーバのFQDNとIPアドレスの両方を隠蔽できる。</p></blockquote><p>なんということでしょう。FQDNが特定できません。マルウェアはきっとホスト名の部分(fast-flux)を定期的に変更してC&amp;Cと通信することでしょう。<br><img src="/images/20221121a/candc4.png" alt="candc4" width="1127" height="652" loading="lazy"></p><p>これに関しては確かにFQDNは特定できませんがワイルドカードを用いて*.example.comへのアクセスを遮断すればよさそうです。<br>すごい手法だと思いましたが、ドメイン名を指定して遮断できるので怖くないですね。</p><img src="/images/20221121a/candc5.png" alt="candc5" width="1159" height="654" loading="lazy"><h1 id="試験問題に基づく対応方法-プロキシ認証の導入"><a href="#試験問題に基づく対応方法-プロキシ認証の導入" class="headerlink" title="試験問題に基づく対応方法 プロキシ認証の導入"></a>試験問題に基づく対応方法 プロキシ認証の導入</h1><p>ネットワークスペシャリスト試験 令和元年度 午後Ⅱ 問2 から抜粋</p><blockquote><p>このような攻撃が行われた場合を想定し、2人は、現行のFPサーバをHTTPS通信の復号機能をもつ機種に交換し、プロキシ認証を併せて行うことにした。</p></blockquote><p>プロキシ認証を設けることでIPアドレスやFQDNが何であれ、プロキシの認証情報を知らないマルウェアはC&amp;Cサーバと通信できなくなります。<br>マルウェアがもし動作していたらFPサーバのログに認証失敗のログが短時間に大量に出力されることでしょう。<br>この対応により通信の遮断と感染の検知ができるようになりました。</p><img src="/images/20221121a/candc6.png" alt="candc6" width="1151" height="645" loading="lazy"><h1 id="対応に関して"><a href="#対応に関して" class="headerlink" title="対応に関して"></a>対応に関して</h1><p>試験問題という特性上、効果の低い対応からしていきましたが、本来であれば費用対効果が高い施策から打てると良いですね。<br>また、問題文においてもアプライアンスを交換していました。セキュリティの重要さを分かった人がスピーディーに対応できる組織は強いですね。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>試験問題なので通常は読み物として面白くありませんが、この問題に関しては攻撃者とネットワーク運用担当の攻防が見られ、ハラハラドキドキし小説を読んでいるかのように面白かったです。</p><p>加えてネットワークだけではなくセキュリティの知識向上に繋がるのでとても良い問題だと思いました。</p><p>セキュリティは重要ですが、やみくもに恐れてはセキュリティ対策コストがいくらあっても足りません。どういった仕組みで攻撃が成功するかを適切に理解しておくことで、費用対効果の高いセキュリティ対策やインフラ設計ができるようになるはずです。</p><p>日々新たな脆弱性が見つかる状況であるため、100%安全と言い切れるネットワークを作ることは不可能です。しかしそのような状況であっても攻撃に合う確率を如何に0%に近づけるかがネットワーク(セキュリティ)エンジニアの腕の見せ所かと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Security/">Security</category>
      
      
      <category domain="https://future-architect.github.io/tags/Network/">Network</category>
      
      <category domain="https://future-architect.github.io/tags/IPA/">IPA</category>
      
      <category domain="https://future-architect.github.io/tags/Security/">Security</category>
      
      <category domain="https://future-architect.github.io/tags/C-C%E3%82%B5%E3%83%BC%E3%83%90/">C&amp;Cサーバ</category>
      
      
      <comments>https://future-architect.github.io/articles/20221121a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MSAL.jsを使ってウェブフロントエンドだけでAzureAD認証する</title>
      <link>https://future-architect.github.io/articles/20221118a/</link>
      <guid>https://future-architect.github.io/articles/20221118a/</guid>
      <pubDate>Thu, 17 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;strong&gt;11&amp;#x2F;30更新&lt;/strong&gt;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><strong>11&#x2F;30更新</strong> スコープを<code>[&quot;User.Read&quot;]</code>としていましたが、<code>[&#39;&#123;クライアントID&#125;/.default&#39;]</code>にしないと署名がvalidなトークンにならないという罠がありましたので修正しています。</p><p>AzureADを使って認証を行っている企業は多いと思います。このAzureADを使った場合にはMSAL.jsを使えば認証は楽だぞ、というのはAzureADのサイトには書かれているのですが、OpenID Connectのプロトコルの動きの理解と、ライブラリのAPIがどう対応づいているのかがわからずにちょっと試行錯誤したので、そのメモを残しておきます。</p><p>OAuth 2.1(現在策定中)ではImplicit Code Flowが非推奨になり、Authorization Code FlowにPKCEが追加されて、コード横取り攻撃への耐性が強化されて、モバイルアプリケーションや、ウェブフロントエンドなどのパブリッククライアント（ユーザー側で動作するため攻撃者が自由にいじれる）でも安全に認証できるようになります。OAuth 2.1自体はまだ作業中ではありますが、これはOAuth 2.0から少しずつ追加されたアップデートをまとめたバージョンであり、現在でもこれらの機能は使えます。</p><p>MSAL.js 2.0というMicrosoft製のライブラリはこのPKCE対応をうたっているライブラリなので、このライブラリを使えば、コールバックハンドラーをサーバー側で用意せずとも、ウェブフロントエンドだけで認証が可能となるはずですので、実験してみました。</p><p>実現したいことは</p><ul><li>MSAL.js (npmのパッケージ名は<a href="https://www.npmjs.com/package/@azure/msal-browser">@azure&#x2F;msal-browser</a>)を組み込む</li><li>フロントエンドだけで認証する</li></ul><p>なお、このライブラリには、ReactとAngular向けのフレームワーク向けのラッパーライブラリが提供されていますが、動きを知るために直接このライブラリを使うものとします。</p><h1 id="まずは実験用のサービスをAzureADに登録する"><a href="#まずは実験用のサービスをAzureADに登録する" class="headerlink" title="まずは実験用のサービスをAzureADに登録する"></a>まずは実験用のサービスをAzureADに登録する</h1><p>まずはAzureのActive Directoryのコンソールにアクセスしてアプリケーションを登録します。</p><ul><li>名前は適当に(azuread-testでもなんでも)</li><li>サポートされているアカウントの種類も任意</li><li>プラットフォームの種類は <strong>シングルページアプリケーション(SPA)</strong> 、コールバックURLは<code>http://localhost:5173/callback</code>にする（ローカルで動かす開発サーバーで受けるため）</li></ul><p>なお、すべての項目はあとで修正できますので(アカウント種類はマニフェストエディタでJSONいじる必要があって面倒ですが）、気軽な気持ちで作成できます。また、リダイレクト情報は複数登録できます。</p><img src="/images/20221118a/スクリーンショット_2022-11-09_12.34.58.png" alt="スクリーンショット_2022-11-09_12.34.58.png" width="1200" height="818" loading="lazy"><p>作成したあとにアプリケーションを選ぶと、アプリケーションの基本情報が表示されますが、次の2つのUUID型式のIDはあとで大事になります。</p><ul><li>アプリケーション (クライアント) ID</li><li>ディレクトリ (テナント) ID</li></ul><img src="/images/20221118a/スクリーンショット_2022-11-09_12.37.10.png" alt="スクリーンショット_2022-11-09_12.37.10.png" width="1200" height="710" loading="lazy"><h1 id="ウェブフロントエンドの作成"><a href="#ウェブフロントエンドの作成" class="headerlink" title="ウェブフロントエンドの作成"></a>ウェブフロントエンドの作成</h1><p>今回はVue.jsで作ってみました。認証部分はプラグイン化して使えるようにします。ReactであればContext化すればよい気がします。Vueのアプリケーションを適当に作ります。僕はVite.jsで作りましたが、vue-cliでもNuxt.jsでもなんでもOKです。</p><p>まずはMSAL.jsをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install @azure/msal-browser</span><br></pre></td></tr></table></figure><p>次に認証情報を設定するファイルを作成します。先ほど作ったアプリケーションの情報を登録します。</p><figure class="highlight ts"><figcaption><span>authConfig.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Configuration</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@azure/msal-browser&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">Configuration</span> = &#123;</span><br><span class="line">    <span class="attr">auth</span>: &#123;</span><br><span class="line">        <span class="attr">authority</span>: <span class="string">&quot;https://login.microsoftonline.com/&#123;テナントID&#125;&quot;</span>,</span><br><span class="line">        <span class="attr">clientId</span>: <span class="string">&quot;&#123;クライアントID&#125;&quot;</span>,</span><br><span class="line">        <span class="attr">redirectUri</span>: <span class="string">&quot;http://localhost:5173/callback&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">cache</span>: &#123;</span><br><span class="line">        <span class="attr">cacheLocation</span>: <span class="string">&quot;localStorage&quot;</span>,</span><br><span class="line">        <span class="attr">storeAuthStateInCookie</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>次にプラグインを作ります。今回は基本的にログインしっぱなしの想定で、未ログインアクセスを許容しない前提でいます。もし、ページによっては未ログインを許可してVue Routerでアクセス制御するのであれば、ログインしているかどうかを確認するメソッド（auth.getAllAccounts()が1つもない）を追加しておけば組み込みがしやすいでしょう。</p><figure class="highlight ts"><figcaption><span>authPlugin.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">App</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Configuration</span>, <span class="title class_">PublicClientApplication</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@azure/msal-browser&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">auth</span>: <span class="title class_">PublicClientApplication</span>;</span><br><span class="line"><span class="keyword">let</span> accessToken = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params">config: Configuration</span>) &#123;</span><br><span class="line">    auth = <span class="keyword">new</span> <span class="title class_">PublicClientApplication</span>(config);</span><br><span class="line">    <span class="keyword">await</span> auth.<span class="title function_">handleRedirectPromise</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">AuthPluginType</span> = &#123;</span><br><span class="line">    <span class="title function_">login</span>(): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">    <span class="title function_">logout</span>(): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;;</span><br><span class="line">    <span class="title function_">accessToken</span>(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">AuthPlugin</span> = &#123;</span><br><span class="line">    <span class="title function_">install</span>(<span class="params">app: App, config: Configuration</span>) &#123;</span><br><span class="line">        app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$auth</span> = &#123;</span><br><span class="line">            <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (auth.<span class="title function_">getAllAccounts</span>().<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    auth.<span class="title function_">setActiveAccount</span>(auth.<span class="title function_">getAllAccounts</span>()[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">const</span> result = <span class="keyword">await</span> auth.<span class="title function_">acquireTokenSilent</span>(&#123;</span><br><span class="line">                        <span class="attr">scopes</span>: [<span class="string">&quot;&#123;クライアントID&#125;/.default&quot;</span>], <span class="comment">// 11/30修正</span></span><br><span class="line">                        <span class="attr">redirectUri</span>: config.<span class="property">auth</span>.<span class="property">redirectUri</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    accessToken = result.<span class="property">accessToken</span>;</span><br><span class="line">                    <span class="keyword">return</span> accessToken;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">await</span> auth.<span class="title function_">acquireTokenRedirect</span>(&#123;</span><br><span class="line">                        <span class="attr">redirectStartPage</span>: location.<span class="property">href</span>,</span><br><span class="line">                        <span class="attr">scopes</span>: [<span class="string">&quot;&#123;クライアントID&#125;/.default&quot;</span>], <span class="comment">// 11/30修正</span></span><br><span class="line">                        <span class="attr">redirectUri</span>: config.<span class="property">auth</span>.<span class="property">redirectUri</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">async</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">await</span> auth.<span class="title function_">logoutRedirect</span>();</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">accessToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> accessToken;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>この<code>login()</code>メソッドが肝です。</p><ul><li>すでにログイン済みの場合は<code>PublicClientApplication.getAllAccounts()</code>がユーザー一覧を返すのでアクティブユーザーとして設定する。本当はidTokenClaims.audがクライアントIDと一致しているものを探すというのを丁寧にやった方がいいかもしれないけど、今回のケースではそもそも違うクライアントIDのユーザーアカウントがここに入ることは今のところないので雑に最初の要素をピック。</li><li><code>PublicClientApplication.acquireTokenSilent()</code>はログイン済みであればアクセストークンをAzureADに問い合わせることなく取得してVue.js内で使える形で返すが、未ログインだと例外を投げる。</li><li>未ログインだった場合に<code>PublicClientApplication.acquireTokenRedirect()</code>を使ってAzureADにリダイレクトしてログインを行う。</li></ul><p>いろいろ試行錯誤しましたが、たぶんこれが最小ケースです。</p><p>なお、MSAL.jsにはリダイレクトモードだけでなく、SPA向けのポップアップモードがありますが、Chromeでは動かず、Edgeでしか動きませんでした。そもそも別ウインドウでログイン画面が出るため、未ログイン時の画面のブロックとかを実装するのは手間なので、今回紹介したリダイレクトモードの方が手間が少なくて済むかと思います。あと、ChromeもEdgeも、デフォルトで別ウインドウのポップアップはブロックされるという問題もあります。今のところ選ぶ理由が見当たらないです。</p><p>**(11&#x2F;30追記)**なお、スコープは<code>[&#39;&#123;クライアントID&#125;/.default&#39;]</code>は<code>[&quot;User.Read&quot;]</code>でもトークンは取得できるのですが、生成されたアクセストークンをvalidationすると必ずエラーになってしまいます。アクセストークンをサーバー側で検証することでログインが正常に行われたかどうかを判定するのがログインの肝なので、このスコープ名には注意してください。Microsoftの提供するAPIを利用する場合はその該当するAPIをスコープにすればOKです。この場合は自分での検証はできません。詳しくは以下のリンク先を参照してください。</p><ul><li><a href="https://stackoverflow.com/questions/45317152/invalid-signature-while-validating-azure-ad-access-token-but-id-token-works">https://stackoverflow.com/questions/45317152/invalid-signature-while-validating-azure-ad-access-token-but-id-token-works</a></li></ul><p>TypeScript用にプラグインの型定義も書いておきます。</p><figure class="highlight ts"><figcaption><span>auth.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">AuthPluginType</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./authPlugin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;vue&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$auth</span>: <span class="title class_">AuthPluginType</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="組み込み"><a href="#組み込み" class="headerlink" title="組み込み"></a>組み込み</h1><p><code>PublicClientApplication</code>の初期化はVue.jsとかよりも先に行います。</p><figure class="highlight ts"><figcaption><span>main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthPlugin</span>, init &#125; <span class="keyword">from</span> <span class="string">&#x27;./authplugin&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">&#x27;./authconfig&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">init</span>(config);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">AuthPlugin</span>, config);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><p>MSAL.jsは初期化時に、AzureADからのコールバックでフロントエンドが呼ばれた場合の、クエリー文字列にOAuthの認証コードが付与されている場合には、「コールバックが来たぞ！」と検知して、OpenID Connectの認証処理の続きを行ってくれます。そして、その後<code>redirectStartPage</code>で指定したURLにリダイレクトまでやってくれます。そのために、<code>init()</code>で待ち（正確には<code>auth.handleRedirectPromise()</code>を待つ)を入れています。<code>await</code>を忘れるとエラーが出て認証に失敗します。</p><p>コンポーネントへの組み込みは以下の通りです。プラグインで作成した<code>login()</code>と<code>logout()</code>を呼び出せるようにしています。あとは、アクセストークンもプラグイン経由で取得できますので、あとはこれをサーバーAPIリクエスト時にヘッダーに設定すればOKです。</p><figure class="highlight html"><figcaption><span>App.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$auth</span>.<span class="title function_">logout</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$auth</span>.<span class="title function_">login</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$auth</span>.<span class="title function_">accessToken</span>());　<span class="comment">// アクセストークン表示</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    login test</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;logout&quot;</span>&gt;</span>logout<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="デバッグ"><a href="#デバッグ" class="headerlink" title="デバッグ"></a>デバッグ</h1><p>結構はまったのですが、ログインの途中でとまったときは、セッションストレージにゴミが残ります。この状態でMSAL.jsのAPIを呼んでも、処理中のものがあるというエラーになってしまうので、ブラウザを再起動するか、開発者ツールでセッションストレージを掃除します。</p><p>あとは、 <code>auth.handleRedirectPromise()</code> のPromiseのエラーとか返り値を見てみるのも良いです。</p><h1 id="セキュリティ強度を変えるためのチューニング"><a href="#セキュリティ強度を変えるためのチューニング" class="headerlink" title="セキュリティ強度を変えるためのチューニング"></a>セキュリティ強度を変えるためのチューニング</h1><p>今回は1人1台専用のマシンがある前提のコードになっているため、ブラウザ再起動でもセッションが残るようにlocalStorageに入れていますが、そうでない場合はブラウザを落としたら認証情報もリセットされるようにsessionStorageにしてあげた方が良いでしょう。上記のサンプルコードの<code>authConfig.ts</code>で変更できます。</p><p>あとはこの形式だとサーバーを介さずにフロントだけで認証するため、サーバー側からアクセスの無効化などができません。フロントで作ったトークンをサーバーに送って「使っていいよ」というお墨付きを与える（あるいはユーザーごとに1セッションしか認めず、後からログインしたら先のログインは無効)みたいなロジックとかを作ればそのような問題には対処できるかもしれませんが、それであればフロントエンドだけで認証という方式ではなく、最初からアクセストークンの発行はサーバーに任せた方が良い気もします。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>PKCEの恩恵で、サーバーいらずの認証が実装できました。サーバーで認証する場合、サーバー側に設定を入れる必要があり、ダメだった場合に何度もデプロイしてテストしたり不便でしたが、とても簡単に実装できました。</p><p>サーバー側としては、JWTの検証だけは必要となりますので、そこだけ実装が必要です。MSAL.jsのリポジトリに<a href="https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/on-behalf-of/web-api/index.js#L40-L61">サーバー側でのトークン検証のサンプル</a>(Express利用)があるので、見てみると良いでしょう。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/">認証認可</category>
      
      
      <category domain="https://future-architect.github.io/tags/Azure/">Azure</category>
      
      <category domain="https://future-architect.github.io/tags/AD/">AD</category>
      
      <category domain="https://future-architect.github.io/tags/MSAL-js/">MSAL.js</category>
      
      <category domain="https://future-architect.github.io/tags/AzureAD/">AzureAD</category>
      
      
      <comments>https://future-architect.github.io/articles/20221118a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初めての長期インターンでWebアプリ開発を経験しました！</title>
      <link>https://future-architect.github.io/articles/20221117a/</link>
      <guid>https://future-architect.github.io/articles/20221117a/</guid>
      <pubDate>Wed, 16 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221117a/toppage.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;675&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221117a/toppage.jpg" alt="" width="1200" height="675" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！フューチャーのサマーインターン2022 Engineer Campに参加いたしました、山岸涼です。</p><p>大学では、情報系の学科に所属しており、プログラミングやコンピュータサイエンスを学んでいます。課外活動では、サッカーサークルと、企業が運営している大学生プログラミングコミュニティに所属しています。</p><p>プログラミングでは、コミュニティで提供された課題に対し、2ヶ月間のチーム開発やハッカソン経験をしてきました。しかし、業務的な経験がないため、長期で体験できるインターンを経験したいと思いました。その中で、現場での作業の進め方やコミュニケーションの取り方などを体験したいと考えました。IT業界を中心に就職を考えている私にとって、業務をイメージできる良い経験になると考え応募しました。</p><p>この記事では、インターンで学んだことをまとめていきます！</p><h1 id="参加前のスキル・経験"><a href="#参加前のスキル・経験" class="headerlink" title="参加前のスキル・経験"></a>参加前のスキル・経験</h1><ul><li>独学やコミュニティで習得<ul><li>HTML, CSS, JavaScript, PHP, Git</li></ul></li><li>大学の授業で習得（基本文法は書ける程度）<ul><li>C, C++, Python, Java</li></ul></li><li>チーム開発経験あり</li><li>技術系アルバイトやインターンの経験なし</li><li>資格 なし</li></ul><p>大学からプログラミングを学び始めました。</p><p>最初はC言語から学びましたが、print文が理解するのに3日かかったレベルでした。プログラムはある程度書けるが、実践経験のない、典型的な大学生のスキルセットだと思います。</p><h1 id="インターンの概要"><a href="#インターンの概要" class="headerlink" title="インターンの概要"></a>インターンの概要</h1><p>私は<a href="/articles/20220606b/"><strong>サブスクサービスのWebアプリ開発</strong></a> に参加しました。</p><p>サブスクリプション型サービスにおけるチーム開発を経験します。フロントエンド開発経験（HTML CSS JavaScriptなど）がある前提で、VueやGit、Slackを使った経験（なくてもOK）があれば大丈夫です。</p><p>業務内容は<strong>メディア業界向けクラウドサービスの業務システムの移行</strong>です。こののクラウドサービスは<strong>HTML, CSS, JavaScript</strong>で作られており、これをすべて<strong>Vue.js</strong>に移行していきます。</p><p>従来のシステムでは、保守性が低いことや、案件者からの要望に沿ったカスタマイズが容易ではないことから、システムを刷新し、保守性の確保することが急務でした。そのため、古いコードをVueで作り直す必要がありました。</p><p>なぜVueなのかについては、プロジェクト自体が中規模の開発であること、システムの保守性の確保、カスタムの柔軟性、学習コストが低い、コンポーネントの再利用が可能というメリットがあるためです。</p><h1 id="具体的にやったこと"><a href="#具体的にやったこと" class="headerlink" title="具体的にやったこと"></a>具体的にやったこと</h1><p>インターンでは、メンター2名、インターン生２名のチームで開発を行いました。</p><p>基本はリモートワークで、初日や最終日、同じ配属先の社員との交流会がある日は出社しました。</p><ul><li>環境構築とVueの基礎理解</li><li>開発</li><li>フィードバックと修正</li><li>テスト</li></ul><h2 id="環境構築とVueの基礎理解"><a href="#環境構築とVueの基礎理解" class="headerlink" title="環境構築とVueの基礎理解"></a>環境構築とVueの基礎理解</h2><p>初週はPCのプロキシ周りの設定と環境構築を行います。PCセットアップのマニュアルが準備されており、メンターの方のサポートを受けつつ行います。次はVueの環境構築です。Node.jsで仮想DOMを構築し、プロジェクトのフォルダをローカルに落とし込みます。</p><p>環境構築が終わると、業務内容やクラウドサービスの概要についての理解に時間をあてます。</p><p>私はVueが未経験でしたので、Vueの基礎知識や社内ライブラリの概要がまとまったリファレンスを活用して、基礎知識を学んでいきました。</p><h2 id="開発"><a href="#開発" class="headerlink" title="開発"></a>開発</h2><p>ここからがインターンの本題です。<br>業務で用いた技術は下記の通りです。</p><ul><li>言語 : HTML, CSS, JavaScript, Vue.js</li><li>その他 : GitLab, Slack</li><li>エディタ : VsCode</li></ul><p>メンターからタスクを渡され、独自の作業ブランチを作成し、開発に取り掛かります。</p><p>社内のライブラリを用いて、コンポーネントを組み合わせながら、ダイアログや、モーダルなどの機能を開発していきました。</p><p>質問や業務内容の説明などのやりとりはSlackで行いました。開発が一番楽しいです！</p><h2 id="フィードバックと修正"><a href="#フィードバックと修正" class="headerlink" title="フィードバックと修正"></a>フィードバックと修正</h2><p>一通り開発が終わると、実装したファイルを追加し、リモート上に反映させます。プルリクエストを作成し、メンターの方からGitLab上でフィードバックをいただきます。<br>細かな修正箇所や、ミスを指摘されるので、修正を重ねていき、完成に近づけていきます。</p><h2 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h2><p>最終チェックで、見た目や動作がおかしくないかのテストを行い、問題がなければメンターが親ブランチにマージして終了です。</p><p>そして次のタスクが渡され、これを繰り返していきます。</p><p>やることは大きく変わらないので、だんだんと作業スピードがだんだんと上がっていき、少し難しいタスクにも挑戦しました！</p><h1 id="インターン中の1日"><a href="#インターン中の1日" class="headerlink" title="インターン中の1日"></a>インターン中の1日</h1><h3 id="10-00-開始"><a href="#10-00-開始" class="headerlink" title="10:00~ 開始"></a>10:00~ 開始</h3><p>まず最初に「今日の予定、今日の目標、やること」をSlackで社員に報告し、やるべきことを整理します。</p><h3 id="12-00-13-00-休憩"><a href="#12-00-13-00-休憩" class="headerlink" title="12:00~13:00 休憩"></a>12:00~13:00 休憩</h3><p>基本どのタイミングでとってもOKです。</p><p>私は、仕事の区切りがいいところで休憩をし、昼食や昼寝をしていました。</p><p>出社した場合は、社員の方とランチにいきました。</p><h3 id="13-00-17-00-業務再開"><a href="#13-00-17-00-業務再開" class="headerlink" title="13:00~17:00 業務再開"></a>13:00~17:00 業務再開</h3><p>ひたすら開発です。</p><h3 id="17-00-17-30-日次報告"><a href="#17-00-17-30-日次報告" class="headerlink" title="17:00~17:30 日次報告"></a>17:00~17:30 日次報告</h3><p>今日取り組んだこと、目標が達成できたかをメンターと共有します。</p><p>その他の業務連絡や、雑談などをします。業務外での話で盛り上がることがありました笑</p><h3 id="〜19-00-終了"><a href="#〜19-00-終了" class="headerlink" title="〜19:00 終了"></a>〜19:00 終了</h3><p>日報と勤務時間を登録して、勤務終了です。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Vueを使ってクラウドサービスの業務システムの移行を行いました。社内独自のライブラリを扱ったため、コードやリファレンスなどからVueの扱い方を理解することが大変でしたが、Slackを通じてメンターの方がサポートしてくださり、または社内勉強会に参加して理解を深めることができました。</p><p>開発では、コードを見ただけで伝わる書き方や、厳格な命名規則が求められることを教わりました。他の社員が書いたコードを見ても、明示的な関数名や、コメントでコードの動きの説明がなされており、今後身に付けるべき力だと感じました。</p><p>また、エンジニアに必要なマインドセットとして、開発に携わる際に、そこで使われる技術の仕組みを理解しようとするマインドをもつことが大切であることを教わりました。</p><p>そのマインドを持って開発に取り組むことで、違うプロジェクトで異なる技術を使う機会があったとしても、技術のインプットが早く、応用が効くことを学びました。</p><p>インターン後も、身につけたVueの知識を自分のものにしていきます。仕組みの部分や、動きを学ぶという意識を持って勉強していこうと思います。他にもフロントエンド周りの言語やフレームワーク（React, Firebase）を詳しく学び、技術の選定や言語比較ができるレベルまで取り組んでいきます！</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>1ヶ月という長期インターンで不安な気持ちでいっぱいでしたが、業務だけでなく、同年代のメンバーとの交流会や先輩社員からの講義、ランチやディナーなどのイベントがたくさん詰め込まれており、存分にフューチャーを体感でき、刺激と満足感で心がお腹いっぱいでした。</p><p>このような素晴らしい経験をさせていただいたメンターの吉田さん、中村さんをはじめ、HRの方々、同じインターン生の森さんには大変お世話になりました。</p><p>本当にありがとうございました！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/">インターン</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32022/">インターン2022</category>
      
      
      <comments>https://future-architect.github.io/articles/20221117a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Plotly.pyによるデータ可視化のすすめ</title>
      <link>https://future-architect.github.io/articles/20221116a/</link>
      <guid>https://future-architect.github.io/articles/20221116a/</guid>
      <pubDate>Tue, 15 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;Plotly-pyによるデータ可視化のすすめ&quot;&gt;&lt;a href=&quot;#Plotly-pyによるデータ可視化のすすめ&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Plotly-pyによるデータ可視化のすすめ"><a href="#Plotly-pyによるデータ可視化のすすめ" class="headerlink" title="Plotly.pyによるデータ可視化のすすめ"></a>Plotly.pyによるデータ可視化のすすめ</h1><p>7月にキャリア採用していただいて、早3ヶ月が経とうとしています 。Futureの人はみんな自分の知見を積極的に発信していて、自分も乗るしかないこの波にという気持ちで一本書きました。</p><p>現在業務でいわゆるビッグデータを扱っていまして、アウトプットを可視化する機会が多くあります。Pythonでデータ可視化といえば<code>matplotlib</code>が定番で、メンバー単位でのアウトプット共有なら特に不便は無いのですが、顧客への説明資料などに使い回すことを考えると、もう少し見栄え良く仕上げたくなる時があります。しかし、<code>matplotlib</code>はデフォルト設定だと素っ気無いグラフになるので、そこから見栄えを良くしようとするとかなり手間がかかります。</p><p><code>plotly</code>はデフォルトで作成できるグラフが既に美しいので、誰でも手間なく見栄えのいいグラフを作成することができます。（もちろん見栄えがいいだけでなく、見やすいです）<br>しかも特別な設定をしなくても、インタラクティブな操作が可能となっていますので、作成したアウトプットを用いたディスカッションも捗ることでしょう。</p><h2 id="Plotlyとは"><a href="#Plotlyとは" class="headerlink" title="Plotlyとは"></a>Plotlyとは</h2><p>plotly はデータ可視化のためのOSSで、MITライセンスなので自由に無料で利用することが可能です。アカウント登録なども不要です。手間をかけずに美しいグラフが作成できることと、インタラクティブな操作性を特徴としています。</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>今回はPlotlyのインストールから簡単なグラフ作成方法までを紹介します。</p><p><strong>ウェブサイト</strong><br><a href="https://plotly.com/python/">https://plotly.com/python/</a></p><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p><code>pip</code>でインストールします</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install plotly==5.10.0</span><br></pre></td></tr></table></figure><p><code>Jupyter Lab</code>もサポートしているので、もし使用する場合は<code>jupyterlab</code>および<code>ipywidgets</code> パッケージをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install <span class="string">&quot;jupyterlab&gt;=3&quot;</span> <span class="string">&quot;ipywidgets&gt;=7.6&quot;</span></span><br></pre></td></tr></table></figure><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>以下のコードを試してみます。</p><p><code>python</code>で以下のコードを実行すると、ブラウザが起動してグラフが表示されます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line">fig = px.bar(x=[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>], y=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><img src="/images/20221116a/plotly01.gif" alt="plotly01.gif" width="765" height="448" loading="lazy"><h4 id="グラフ操作"><a href="#グラフ操作" class="headerlink" title="グラフ操作"></a>グラフ操作</h4><p>グラフ上にカーソルを置くとx, yの値が表示されたり、X方向にドラッグ＆ドロップして範囲を指定するとその範囲のみが拡大表示されます。例えば1年間の推移を示す時系列のグラフを作成しつつ、 1ヶ月分だけを拡大して表示させるといったことができます。便利ですね。</p><h4 id="グラフ保存"><a href="#グラフ保存" class="headerlink" title="グラフ保存"></a>グラフ保存</h4><p>作成したグラフはhtmlで保存することで、インタラクティブな操作が可能なグラフをそのまま保存できます。また、右上のカメラアイコンでPNG画像として保存することができます。この場合は静止画として保存されます。</p><p>もちろんグラフの保存はコード上で実行することも可能です（後述）。</p><h2 id="グラフ作成手順"><a href="#グラフ作成手順" class="headerlink" title="グラフ作成手順"></a>グラフ作成手順</h2><h3 id="グラフ作成に使用するモジュール"><a href="#グラフ作成に使用するモジュール" class="headerlink" title="グラフ作成に使用するモジュール"></a>グラフ作成に使用するモジュール</h3><p><code>plotly</code>は大きく分けて２種類のサブモジュールがあり、公式サイトでは以下のように説明されています。</p><blockquote><ul><li><code>Plotly Express</code>: high-level interface for data visualization</li><li><code>Graph Objects</code>: low-level interface to figures, traces and layout</li></ul></blockquote><p><code>plotly Express</code>の方がパラメーターがシンプルで少ないコードでグラフ作成が可能ですが、<code>Graph Objects</code>の方が細やかなグラフ作成が可能です。<code>Graph Objects</code>の方が<code>matplotlib</code>の使い方に近いと思います。今回は<code>Graph Objects</code>を使用します。</p><p>※最初は<code>Plotly Express</code>で作成したけど、後になってやりたいことができなくて<code>Graph Objects</code>で作り直すパターンが何度かあるので。。。</p><h4 id="サブモジュールごとの比較"><a href="#サブモジュールごとの比較" class="headerlink" title="サブモジュールごとの比較"></a>サブモジュールごとの比較</h4><p>それぞれのサブモジュールをヒストグラムを作成します。見た目は全く同じになりますが、<code>Plotly Express</code>の方がコードがややシンプルです。<code>Graph Objects</code>は最初に<code>go.Figure</code>でキャンバスを作成しておいて、そこにグラフを重ねていくというイメージです。（<code>matplotlib</code>の<code>plt.Figure</code>と同じような感じですね）</p><p>ちなみにPlotlyで作成したヒストグラムは拡大表示すると自動でbinが細分化されたりして面白いので、ぜひ試してみてください。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Plotly Expressでヒストグラム作成</span></span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line">df = px.data.tips()</span><br><span class="line">fig = px.histogram(df, x=<span class="string">&quot;total_bill&quot;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Graph Objectsでヒストグラム作成</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line">df = px.data.tips()</span><br><span class="line">fig = go.Figure(data=[go.Histogram(x=df[<span class="string">&#x27;total_bill&#x27;</span>])])</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><h3 id="グラフを作成してみる"><a href="#グラフを作成してみる" class="headerlink" title="グラフを作成してみる"></a>グラフを作成してみる</h3><p><code>Graph Objects</code>を使ってグラフを作成します。大まかな流れは以下の通りです。</p><ul><li>インスタンス作成：<code>go.Figure()</code></li><li>グラフ追加：<code>fig.add_trace()</code></li><li>グラフ周りの設定：<code>fig.update_layout()</code></li><li>グラフ表示：<code>fig.show()</code></li><li>グラフの保存：<code>fig.write_html(), fig.write_image()</code><br>※グラフによってはもっと簡単に記述できますが、これが最も汎用的な手順だと思います。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="comment"># データ準備（2グループ作成）</span></span><br><span class="line">df = px.data.tips() <span class="comment"># 今回はPlotlyのサンプルデータを利用</span></span><br><span class="line">df1 = df[df[<span class="string">&#x27;time&#x27;</span>]==<span class="string">&#x27;Lunch&#x27;</span>]</span><br><span class="line">df2 = df[df[<span class="string">&#x27;time&#x27;</span>]==<span class="string">&#x27;Dinner&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># インスタンス作成</span></span><br><span class="line">fig = go.Figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 料金とチップの散布図（Lunch）</span></span><br><span class="line">fig.add_trace(</span><br><span class="line">  go.Scatter(</span><br><span class="line">    x=df1[<span class="string">&#x27;total_bill&#x27;</span>], y=df1[<span class="string">&#x27;tip&#x27;</span>],</span><br><span class="line">    name=<span class="string">&#x27;Lunch&#x27;</span>, mode=<span class="string">&#x27;markers&#x27;</span>, opacity=<span class="number">0.7</span>,</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 料金とチップの散布図（Dinner）</span></span><br><span class="line">fig.add_trace(</span><br><span class="line">  go.Scatter(</span><br><span class="line">    x=df2[<span class="string">&#x27;total_bill&#x27;</span>], y=df2[<span class="string">&#x27;tip&#x27;</span>],</span><br><span class="line">    name=<span class="string">&#x27;Dinner&#x27;</span>, mode=<span class="string">&#x27;markers&#x27;</span>, opacity=<span class="number">0.7</span>,</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># タイトル、軸ラベル、凡例</span></span><br><span class="line">fig.update_layout(</span><br><span class="line">  title=<span class="string">&#x27;料金とチップの関係 &lt;br&gt; 時間別：Lunch, Dinner&#x27;</span>, <span class="comment"># htmlなので&lt;br&gt;で改行</span></span><br><span class="line">  xaxis=<span class="built_in">dict</span>(title=<span class="string">&#x27;料金($)&#x27;</span>),</span><br><span class="line">  yaxis=<span class="built_in">dict</span>(title=<span class="string">&#x27;チップ($)&#x27;</span>),</span><br><span class="line">  legend=<span class="built_in">dict</span>(</span><br><span class="line">    yanchor=<span class="string">&quot;top&quot;</span>, y=<span class="number">0.99</span>, <span class="comment"># 判例をいい感じの位置に置く</span></span><br><span class="line">    xanchor=<span class="string">&quot;left&quot;</span>, x=<span class="number">0.01</span>,</span><br><span class="line">    bgcolor=<span class="string">&#x27;rgba(255,255,255,0.5)&#x27;</span> <span class="comment"># プロットが隠れないように半透明にする</span></span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p>それでは上記のコードを順番に説明します</p><h4 id="インスタンス作成"><a href="#インスタンス作成" class="headerlink" title="インスタンス作成"></a>インスタンス作成</h4><p><code>plotly.graph_objects</code>を<code>import</code>して、<code>Figure</code>のインスタンスを作成します</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="comment"># データ準備（2グループ作成）</span></span><br><span class="line">df = px.data.tips() <span class="comment"># 今回はPlotlyのサンプルデータを利用</span></span><br><span class="line">df1 = df[df[<span class="string">&#x27;time&#x27;</span>]==<span class="string">&#x27;Lunch&#x27;</span>]</span><br><span class="line">df2 = df[df[<span class="string">&#x27;time&#x27;</span>]==<span class="string">&#x27;Dinner&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># インスタンス作成</span></span><br><span class="line">fig = go.Figure()</span><br></pre></td></tr></table></figure><h4 id="グラフ追加"><a href="#グラフ追加" class="headerlink" title="グラフ追加"></a>グラフ追加</h4><p>今回はtimeでグループ分けした散布図を描いてみます（LunchとDinner）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 料金とチップの散布図（Lunch）</span></span><br><span class="line">fig.add_trace(</span><br><span class="line">go.Scatter(</span><br><span class="line">x=df1[<span class="string">&#x27;total_bill&#x27;</span>], y=df1[<span class="string">&#x27;tip&#x27;</span>],</span><br><span class="line">name=<span class="string">&#x27;Lunch&#x27;</span>, mode=<span class="string">&#x27;markers&#x27;</span>, opacity=<span class="number">0.7</span>,</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 料金とチップの散布図（Dinner）</span></span><br><span class="line">fig.add_trace(</span><br><span class="line">go.Scatter(</span><br><span class="line">x=df2[<span class="string">&#x27;total_bill&#x27;</span>], y=df2[<span class="string">&#x27;tip&#x27;</span>],</span><br><span class="line">name=<span class="string">&#x27;Dinner&#x27;</span>, mode=<span class="string">&#x27;markers&#x27;</span>, opacity=<span class="number">0.7</span>,</span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>これで<code>fig.show()</code>するとこのようなグラフが作成できます。</p><img src="/images/20221116a/newplot.png" alt="newplot" width="848" height="450" loading="lazy"><h4 id="グラフ周りの設定"><a href="#グラフ周りの設定" class="headerlink" title="グラフ周りの設定"></a>グラフ周りの設定</h4><p>続いてグラフタイトル、軸ラベル、凡例を追加します</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># タイトル、軸ラベル、凡例</span></span><br><span class="line">fig.update_layout(</span><br><span class="line">  title=<span class="string">&#x27;料金とチップの関係 &lt;br&gt; 時間別：Lunch, Dinner&#x27;</span>, <span class="comment"># htmlなので&lt;br&gt;で改行</span></span><br><span class="line">  xaxis=<span class="built_in">dict</span>(title=<span class="string">&#x27;料金($)&#x27;</span>),</span><br><span class="line">  yaxis=<span class="built_in">dict</span>(title=<span class="string">&#x27;チップ($)&#x27;</span>),</span><br><span class="line">  legend=<span class="built_in">dict</span>(</span><br><span class="line">    yanchor=<span class="string">&quot;top&quot;</span>, y=<span class="number">0.99</span>, <span class="comment"># 判例をいい感じの位置に置く</span></span><br><span class="line">    xanchor=<span class="string">&quot;left&quot;</span>, x=<span class="number">0.01</span>,</span><br><span class="line">    bgcolor=<span class="string">&#x27;rgba(255,255,255,0.5)&#x27;</span> <span class="comment"># プロットが隠れないように半透明にする</span></span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>完成したグラフ</strong><br><img src="/images/20221116a/plotly02.gif" alt="" width="765" height="448" loading="lazy"></p><h4 id="グラフ表示"><a href="#グラフ表示" class="headerlink" title="グラフ表示"></a>グラフ表示</h4><p>既に登場していますが、<code>fig.show()</code>で作成したグラフを表示します。pythonファイルで実行するとWebブラウザが起動します。Jupyterファイルで実行すると出力セルに表示されます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fig.show()</span><br></pre></td></tr></table></figure><h4 id="グラフ保存-1"><a href="#グラフ保存-1" class="headerlink" title="グラフ保存"></a>グラフ保存</h4><p>ブラウザ上で保存できますが、もちろんコード上で保存することもできます。インタラクティブな操作をそのままにしたい場合はhtmlで保存します。パワポに使いたい等、静止画が欲しい場合は画像で保存します。</p><h5 id="htmlで保存"><a href="#htmlで保存" class="headerlink" title="htmlで保存"></a>htmlで保存</h5><p>　参考URL: <a href="https://plotly.github.io/plotly.py-docs/generated/plotly.io.write_html.html">https://plotly.github.io/plotly.py-docs/generated/plotly.io.write_html.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write_html(<span class="string">&#x27;output.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="画像で保存"><a href="#画像で保存" class="headerlink" title="画像で保存"></a>画像で保存</h5><p>　参考URL: <a href="https://plotly.github.io/plotly.py-docs/generated/plotly.io.write_image.html">https://plotly.github.io/plotly.py-docs/generated/plotly.io.write_image.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write_image(<span class="string">&#x27;output.png&#x27;</span>) <span class="comment"># 拡張子で自動的にフォーマットが変わります</span></span><br></pre></td></tr></table></figure><p><strong>画像で保存する場合の前準備</strong><br>静的画像を生成する場合は<code>Kaleido</code>をインストールする必要があります。</p><p>参考URL: <a href="https://plotly.com/python/static-image-export/">https://plotly.com/python/static-image-export/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U kaleido</span><br></pre></td></tr></table></figure><h2 id="グラフの紹介"><a href="#グラフの紹介" class="headerlink" title="グラフの紹介"></a>グラフの紹介</h2><p>Plotlyで作成したグラフを紹介します。画像をクリックするとhtmlが開くので、インタラクティブな操作を体験していただければと思います。この他にも色々なグラフが用意されているので、ぜひ公式サイトのグラフライブラリーを見てください。</p><h3 id="グラフライブラリー（公式サイトTop）"><a href="#グラフライブラリー（公式サイトTop）" class="headerlink" title="グラフライブラリー（公式サイトTop）"></a>グラフライブラリー（公式サイトTop）</h3><ul><li><a href="https://plotly.com/python/">Plotly Open Source Graphing Library for Python</a></li></ul><p>色々な種類のグラフがソースコード付きで公開されているので、何かグラフ化したいデータがある時は、まずここを参考にするのがいいと思います。アウトプットのイメージを固めつつ、足りないところはリファレンスで補いましょう。見た目が綺麗で見やすいので、勉強になります。</p><h3 id="APIリファレンス"><a href="#APIリファレンス" class="headerlink" title="APIリファレンス"></a>APIリファレンス</h3><ul><li><a href="https://plotly.com/python-api-reference/">Python API reference for <code>plotly</code></a></li></ul><p>様々な項目が設定可能で、一通り眺めるのも一苦労なのでグラフライブラリーで分からない設定をしたいときに参考にするのがいいと思います。凝り出すとコードが長くなりがちです😅</p><h3 id="散布図＋折れ線グラフ"><a href="#散布図＋折れ線グラフ" class="headerlink" title="散布図＋折れ線グラフ"></a>散布図＋折れ線グラフ</h3><p><code>go.Scatter()</code>(線グラフもScatterで作成します)<br><img src="/images/20221116a/plotly_lines.gif" alt="" width="1020" height="440" loading="lazy"></p><h3 id="時系列の折れ線グラフ"><a href="#時系列の折れ線グラフ" class="headerlink" title="時系列の折れ線グラフ"></a>時系列の折れ線グラフ</h3><p><code>go.Scatter()</code><br><img src="/images/20221116a/plotly_stock.gif" alt="" width="1023" height="447" loading="lazy"></p><h3 id="ヒストグラム"><a href="#ヒストグラム" class="headerlink" title="ヒストグラム"></a>ヒストグラム</h3><p><code>go.Histogram()</code><br><img src="/images/20221116a/plotly_histogram.gif" alt="" width="793" height="397" loading="lazy"></p><h3 id="2次元ヒストグラム-with-散布図"><a href="#2次元ヒストグラム-with-散布図" class="headerlink" title="2次元ヒストグラム with 散布図"></a>2次元ヒストグラム with 散布図</h3><p><code>go.Histogram2d()</code> &amp; <code>go.Scatter()</code><br><img src="/images/20221116a/plotly_2dhist.gif" alt="" width="541" height="545" loading="lazy"></p><h3 id="マップ"><a href="#マップ" class="headerlink" title="マップ"></a>マップ</h3><p><code>go.Scattermapbox</code></p><img src="/images/20221116a/plotly_map.gif" alt="" width="479" height="304" loading="lazy"><p>mapboxの地図を利用しています。</p><p><strong>ウェブサイト</strong><br><a href="https://www.mapbox.jp/">https://www.mapbox.jp/</a></p><h2 id="使ってみての所感"><a href="#使ってみての所感" class="headerlink" title="使ってみての所感"></a>使ってみての所感</h2><p>何もせずともインタラクティブな操作ができることに感動しました。たとえば日次データで１年間の時系列に沿った推移を表すグラフを作成すると、どうしても週単位のデータがつぶれますが、Plotlyなら期間選択して拡大表示できます。客先でもも捗りますし、簡易的なダッシュボードとして使えるのではと思います。</p><p>マニュアルは用意されているのですが、項目が膨大過ぎて、目当ての項目を探すのに苦労しました。<br>幸い公式サイトでサンプルがコード付きで多数公開されているので、そこからイメージに合うグラフを探してコードを参考にするのがいいと思いました。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>以上、Plotly.pyの紹介でした。</p><p>Plotlyは美しい見た目とインタラクティブな操作感を手軽に実現できる非常に有用なツールです。パワポ用だけではなく、インタラクティブな操作を生かした簡易的なダッシュボードのような利用方法も可能かと思います。今回紹介した以外にも様々な表現を美しくお手軽に実現できますので、ぜひ利用してみてください！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%8F%AF%E8%A6%96%E5%8C%96/">可視化</category>
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/Plotly/">Plotly</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B0%E3%83%A9%E3%83%95/">グラフ</category>
      
      
      <comments>https://future-architect.github.io/articles/20221116a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WindowsのVPN切り替えコマンドで学ぶ各シェルのエイリアス設定方法</title>
      <link>https://future-architect.github.io/articles/20221115a/</link>
      <guid>https://future-architect.github.io/articles/20221115a/</guid>
      <pubDate>Mon, 14 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;どうも、気付いたら社会人3年目に突入したオチラルです。&lt;/p&gt;
&lt;p&gt;2022年8月に当時僕のいたPJの後輩である&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>どうも、気付いたら社会人3年目に突入したオチラルです。</p><p>2022年8月に当時僕のいたPJの後輩である<a href="/authors/%E5%B1%B1%E4%B8%8B%E9%87%8F%E4%B9%8B/">山下さん</a>が、MacでのVPN切り替えコマンドの<a href="/articles/20220818a/">紹介記事</a>を書きました。</p><p>今回は山下さんの元記事をリスペクトしながら、<strong>WindowsでのVPN切り替えコマンド</strong>及び<strong>各シェルにエイリアスを貼る方法</strong>も紹介します。エイリアスを貼れば、好きなコマンドで好きなスクリプトを実行できるようになります。</p><p>ちなみに、山下さんは画面共有した際にすごい早さで僕の知らないコマンドを打ち込み、僕が効率悪くやっていた作業を効率よくこなす、デキすぎる後輩です。</p><h2 id="元記事の紹介"><a href="#元記事の紹介" class="headerlink" title="元記事の紹介"></a>元記事の紹介</h2><ul><li>参考リンク：<a href="/articles/20220818a/">MacのVPNをコマンドでスムーズに切り替えよう</a></li></ul><p>業務上、複数のVPNを利用する必要があるとき、GUIツールでマウスをポチポチ打ち込む場合VPNの切り替えに10秒ぐらい必要になります。しかし、ここでCLIツールでコマンドを打ち込んで切り替えができる場合、<a href="/articles/20220818a/#VPN%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E5%B0%8E%E5%85%A5%E3%81%AE%E5%8A%B9%E6%9E%9C">2秒ほどまで削減</a>⚡されかなりのストレス軽減になります。</p><p>時間削減もそうですが、GUIツールでマウスを所定の位置に動かして作業するということは思っている以上に脳のリソースを使う作業であり、山下さんの記事を参考にWindowsでのVPN切り替えツールを導入した結果、僕もかなり仕事が捗るようになりました！</p><h2 id="今回やりたいこと"><a href="#今回やりたいこと" class="headerlink" title="今回やりたいこと"></a>今回やりたいこと</h2><p>元記事と同様に筆者は2つのVPN接続ツールを使用しています。</p><ul><li>Cisco社のCisco AnyConnect</li><li>Windows標準のVPN機能</li></ul><p>以上の2つのVPN接続ツールのGUIでの接続&#x2F;切断環境は用意していますが、今回はCLI上のコマンドでVPN接続&#x2F;切断できるようにします。</p><p>目標はコマンド1つ打つことでVPNを切り替えることです。もし、別のOS、VPNツールを使っている場合、そのツールに対応したコマンドを用意しましょう。</p><p>今回はWindowsでのVPN切り替えコマンドの紹介とシェルスクリプトへのエイリアス作成方法も共有します。エイリアスとはコマンドに別名を付けることを指しており、一連のコマンド（シェルスクリプト）を一発で実行できるようになります。</p><p>適切にエイリアス設定が出来た場合CLIにて、 <code>backToTheFutureVpn</code>と打ち込むだけでVPNが切り替わります。<br>既存のコマンド名とダブっていなければ、好きな文字列を指定できます。なのでCLIに打ち込むコマンドは<code>bttf2</code>でも<code>delorean</code>でも<code>ToInfinityAndBeyond</code>でも<code>StriveForGreatness</code>でも<code>hogevpn</code>や<code>fvpn</code>などでも良くなります。</p><h2 id="結果だけ先に教えて欲しい人へ"><a href="#結果だけ先に教えて欲しい人へ" class="headerlink" title="結果だけ先に教えて欲しい人へ"></a>結果だけ先に教えて欲しい人へ</h2><p>煩わしいから、結果だけ頂戴という方のために、早速VPN切り替えコマンドとエイリアス記載箇所を共有します。</p><p>Windowsだと色んなシェルを使いますが、<code>GitBash</code>、<code>PowerShell</code>、<code>コマンドプロンプト</code>すべてのシェルのコマンドとエイリアス設定方法を共有します。（PJ異動したり勤続年数が増えると色んなシェルに詳しくなっていくものですね。）</p><p>各コマンドの<code>&#123;&#125;</code>、<code>$&#123;&#125;</code>の箇所は<strong>該当するVPN名、ユーザー名、パスワード、設定したいエイリアス名などに置き換えて</strong>下さい。または、環境変数に設定して下さい。</p><h3 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h3><h4 id="CiscoのCLIツールのパスを通す"><a href="#CiscoのCLIツールのパスを通す" class="headerlink" title="CiscoのCLIツールのパスを通す"></a>CiscoのCLIツールのパスを通す</h4><p>CiscoのCLIツールはWindowsの場合</p><p><code>/c/Program Files (x86)/Cisco/Cisco AnyConnect Secure Mobility Client</code></p><p>にvpncli.exeファイルとして存在してると思います。そのため、</p><figure class="highlight sh"><figcaption><span>vpncli</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#GitBash</span></span><br><span class="line"><span class="string">&quot;C:\Program Files (x86)\Cisco\Cisco AnyConnect Secure Mobility Client\vpncli&quot;</span></span><br><span class="line"><span class="comment">#PowerShell</span></span><br><span class="line">cmd /c <span class="string">&quot;C:\Program Files (x86)\Cisco\Cisco AnyConnect Secure Mobility Client\vpncli&quot;</span></span><br><span class="line"><span class="comment">#Command Prompt</span></span><br><span class="line"><span class="string">&quot;C:\Program Files (x86)\Cisco\Cisco AnyConnect Secure Mobility Client\vpncli&quot;</span></span><br></pre></td></tr></table></figure><p>とコマンドを打てばCLIツールを起動できますが、パスを通せば<code>vpncli</code>と打つだけで起動できるようになります。</p><p>本記事ではパスを通した前提で進めますが、パスの通し方が分からない方でも一旦<code>vpncli</code>を上記のコマンドに置き換えても動くはずです。本記事ではパスとパスの通し方に付いては割愛します。</p><h4 id="vpncli用の入力ファイルを作成する"><a href="#vpncli用の入力ファイルを作成する" class="headerlink" title="vpncli用の入力ファイルを作成する"></a>vpncli用の入力ファイルを作成する</h4><p>どのシェルでもCiscoのCLIツールの仕様により<strong>CLIへの入力を書いた</strong>テキストファイルをどこかに格納しないといけません。</p><p>今回は元記事と同様の箇所に保存します。</p><p>GUIでやってもいいですが、かっこよくCLIで作成します。<br>※Gitbashでしか動かないです。他のシェルでは<code>vi</code>を<code>notepad</code>に置き換えたり<code>code .</code>でvscodeを開いたりして適切に保存して下さい。</p><figure class="highlight sh"><figcaption><span>テキストファイル作成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.vpn</span><br><span class="line">vi ~/.vpn/CISCO_VPN.cre</span><br></pre></td></tr></table></figure><p>上記のコマンドでディレクトリとファイルが作成ができます。vi editorが開かられるので<code>i</code>ボタンを押し以下の内容を入力します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;CISCO_VPN_USER_NAME&#125;</span><br><span class="line">&#123;CISCO_VPN_PASSWORD&#125;</span><br><span class="line">y</span><br></pre></td></tr></table></figure><p>完了したら<code>escape</code>　➔ <code>:wq</code> ➔ <code>enter</code>キーの順番で押せばファイル保存ができます。</p><h3 id="各シェルでVPNを切り替えるコマンド"><a href="#各シェルでVPNを切り替えるコマンド" class="headerlink" title="各シェルでVPNを切り替えるコマンド"></a>各シェルでVPNを切り替えるコマンド</h3><p>エイリアス設定時に各コマンドをシェルスクリプトファイルとして保存していないといけません。</p><p>本記事では、<code>~/ShellScripts</code>に<code>ciscoVPN</code>、<code>winVPN</code>という名前で以下のスクリプトを保存した前提でエイリアス設定を次項でします。</p><p>実際にスクリプトファイルを作成する前に、各コマンドが動いていることを確認すると良いです。</p><p>■Cisco Anyconnect切断　➔　Windows標準接続</p><figure class="highlight sh"><figcaption><span>ciscoVPN</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitbash、PowerShell、Command Promptすべて同様</span></span><br><span class="line">vpncli disconnect</span><br><span class="line">rasdial <span class="variable">$&#123;WIN_VPN_NAME&#125;</span> <span class="variable">$&#123;WIN_VPN_USER_NAME&#125;</span> <span class="variable">$&#123;WIN_VPN_PASSWORD&#125;</span></span><br></pre></td></tr></table></figure><p>■Windows標準切断　➔　Cisco Anyconnect接続</p><figure class="highlight sh"><figcaption><span>winVPN</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitbashの場合</span></span><br><span class="line"><span class="comment"># スラッシュにエスケープが必要</span></span><br><span class="line">rasdial <span class="variable">$&#123;WIN_VPN_NAME&#125;</span> //disconnect</span><br><span class="line">vpncli -s &lt; ~/.vpn/CISCO_VPN.cre connect <span class="variable">$&#123;CISCO_VPN_NAME&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>winVPN</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PowerShellの場合</span></span><br><span class="line">rasdial <span class="variable">$&#123;WIN_VPN_NAME&#125;</span> /disconnect</span><br><span class="line"><span class="comment"># リダイレクト機能が未実装のためコマンドプロンプトを使う</span></span><br><span class="line">cmd /c <span class="string">&#x27;vpncli -s &lt; %HOMEPATH%\.vpn\CISCO_VPN.cre connect $&#123;CISCO_VPN_NAME&#125;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>winVPN</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Command Promptの場合</span></span><br><span class="line">rasdial <span class="variable">$&#123;WIN_VPN_NAME&#125;</span> /disconnect</span><br><span class="line">vpncli -s &lt; %HOMEPATH%\.vpn\CISCO_VPN.cre connect <span class="variable">$&#123;CISCO_VPN_NAME&#125;</span></span><br></pre></td></tr></table></figure><p>Gitbashでエイリアスの設定まで成功するとこういったログが表示されます。<br><code>hogevpn</code>が「Cisco Anyconnect切断　➔　Windows標準接続」で<code>backToTheFutureVpn</code>がその逆です。（普段はもっと短いエイリアス設定してます。）</p><img src="/images/20221115a/無題3.png" alt="無題3.png" width="990" height="1893" loading="lazy"><h3 id="エイリアス設定"><a href="#エイリアス設定" class="headerlink" title="エイリアス設定"></a>エイリアス設定</h3><p>前項で作成したスクリプトファイルを実行するエイリアスを<strong>各シェル起動時に読み込まれる設定ファイル（スクリプト）に追記</strong>します。</p><h4 id="GitBash"><a href="#GitBash" class="headerlink" title="GitBash"></a>GitBash</h4><p>Gitbashは<code>/.bash_profile</code>と<code>/.bashrc</code>がシェル起動時に読み込まれるので、好みで好きな方にエイリアスを貼ります。こういった設定は<code>~/.bashrc</code>に書くのが一般的な気がします。</p><p>もしファイルが存在しない場合は作成して下さい。</p><figure class="highlight sh"><figcaption><span>.bashrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> &#123;CISCO_ALIAS_NAME&#125;=<span class="string">&#x27;source ~/ShellScripts/cicoVPN.sh&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> &#123;WIN_ALIAS_NAME&#125;=<span class="string">&#x27;source ~/ShellScripts/winVPN.sh&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h4><p>PowerShellは<a href="https://qiita.com/smicle/items/0ca4e6ae14ea92000d18">この記事</a>を参考に設定しました。<a href="https://learn.microsoft.com/ja-jp/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.2">公式はここ</a>です。PowerShellではシェル起動時に読み込まれる設定ファイルをプロファイルと言うようです。</p><p>プロファイル作成前に<a href="https://qiita.com/smicle/items/0ca4e6ae14ea92000d18#powershellscript%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E6%A8%A9%E9%99%90%E3%82%92%E4%BB%98%E4%B8%8E">元記事</a>で言われているようにプロファイルでスクリプトを実行するための権限を付与します。</p><p>管理者権限で以下のコマンドを打ちます。</p><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> RemoteSigned</span><br></pre></td></tr></table></figure><p>そして、設定されるユーザーの範囲によって異なる箇所にプロファイルを置くようです。</p><p>僕は個人ユーザーで設定されるように、<code>$HOME\Document\WindowsPowerShell\Microsoft.PowerShell_profile.ps1</code>を作成しました。</p><p>プロファイルには以下の2行を書き込みます。</p><figure class="highlight ps1"><figcaption><span>Microsoft.PowerShell_profile.ps1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-Alias</span> &#123;WIN_ALIAS_NAME&#125; <span class="string">&quot;<span class="variable">$HOME</span>\ShellScripts\winVPN.ps1&quot;</span></span><br><span class="line"><span class="built_in">Set-Alias</span> &#123;CISCO_ALIAS_NAME&#125; <span class="string">&quot;<span class="variable">$HOME</span>\ShellScripts\ciscoVPN.ps1&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Command-Prompt"><a href="#Command-Prompt" class="headerlink" title="Command Prompt"></a>Command Prompt</h4><p>コマンドプロンプトは残念ながら他のシェルと違い分かりやすく読み込まれる設定ファイルはないようです。以下の<strong>2つの方法から選ぶことになります。</strong></p><p>今回はこちらの<a href="https://superuser.com/questions/144347/is-there-windows-equivalent-to-the-bashrc-file-in-linux">StackOverFlowの質問</a>を参考に調べました。</p><p>先に書き込むエイリアスを共有します。スクリプトはどこに置いても良いですが、今回は<code>ShellScripts/cmdProfile.bat</code>を作成します。</p><figure class="highlight ps1"><figcaption><span>cmdProfile.bat</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doskey &#123;WIN_ALIAS_NAME&#125; = <span class="string">&quot;%HOMEPATH%\ShellScripts\winVPN.bat&quot;</span></span><br><span class="line">doskey &#123;CISCO_ALIAS_NAME&#125; = <span class="string">&quot;%HOMEPATH%\ShellScripts\ciscoVPN.bat&quot;</span></span><br></pre></td></tr></table></figure><h5 id="1-レジストリのautorunの設定に読み込むスクリプトを指定する。"><a href="#1-レジストリのautorunの設定に読み込むスクリプトを指定する。" class="headerlink" title="1. レジストリのautorunの設定に読み込むスクリプトを指定する。"></a><strong>1. レジストリのautorunの設定に読み込むスクリプトを指定する。</strong></h5><p>レジストリとはWindowsのシステム、ハードウェアなどの設定がされているファイルです。<a href="https://learn.microsoft.com/en-us/windows/win32/sysinfo/registry">公式</a>では変更を加えることは推奨していません。コマンドプロンプトのcmd.exeのレジストリにAutorunという設定があり、Autorunに設定されたコマンドはコマンドプロンプト起動時に読み込むようになっているそうです。</p><p><a href="https://learn.microsoft.com/ja-jp/windows-server/administration/windows-commands/cmd">公式</a>には読み込まれるレジストリだけ書いてありAutorunが読み込まれるという記載はありませんでしたが、<a href="https://renenyffenegger.ch/notes/Windows/dirs/Windows/System32/cmd_exe/index">何人か</a>の方の<a href="https://hail2u.net/blog/software/cmd-autorun.html">解説記事</a>によるとそうなるようです。苦しいソースで心苦しいですが。。多分Autorunの値が読み込まれる認識で合ってると思います。レジストリ何も分からない。。</p><p>そのため、公式から用意している方法であるレジストリを編集するのが正しい姿な気がしますが、ほとんどの会社の業務用PCはセキュリティの都合上レジストリを編集することは禁止しているかと思いますので、今回は次の方法で設定します。</p><p>こちらの方法を取る場合は<a href="https://hail2u.net/blog/software/cmd-autorun.html">こちらの記事</a>などを参考に設定して下さい。</p><h5 id="2-cmd-exeのショートカットを作成し、起動オプションでスクリプトを実行してから開くようにする"><a href="#2-cmd-exeのショートカットを作成し、起動オプションでスクリプトを実行してから開くようにする" class="headerlink" title="2. cmd.exeのショートカットを作成し、起動オプションでスクリプトを実行してから開くようにする"></a><strong>2. cmd.exeのショートカットを作成し、起動オプションでスクリプトを実行してから開くようにする</strong></h5><p>こちらの<a href="https://learn.microsoft.com/ja-jp/windows-server/administration/windows-commands/cmd">公式の記載</a>や、<a href="https://ss64.com/nt/cmd.html">非公式</a>の有志のまとめてくれたコマンドプロンプトの仕様によると、コマンドプロンプトはいくつかのオプションを付けて起動できます。</p><p>今回使うのは <code>/q</code> <code>/k</code>オプションで、<code>/q</code>はログ出力をさせないオプションで、<code>/k</code>はコマンドプロンプト起動前に指定されたコマンドを実行するというオプションになります。</p><p>コマンドプロンプトは、<code>C:\Windows\System32\cmd.exe</code>を開けば開くようになっていると思いますので、まずこちらの<strong>ショートカットを作成します。</strong> そして、<strong>ショートカットのプロパティ　→　ショートカット　→　リンク先を以下のように書き換えます。</strong></p><p><code>%windir%\system32\cmd.exe /q /k &quot;%HOMEPATH%\ShellScripts\cmdProfile.bat&quot;</code></p><img src="/images/20221115a/無題.png" alt="" width="648" height="987" loading="lazy"><p>これで無事、設定ファイルを読み込みながらを起動するコマンドプロンプトのショートカットができました。ここで作成したショートカット以外を経由しないでコマンドプロンプトを開いた場合作成したプロファイルが読み込まれないので注意して下さい。適宜、タスクバーなどに追加して利用して下さい。</p><p>Windows Terminalを使っている方は、 <strong>設定　→　全般　→　コマンドライン</strong> の箇所に同様のオプションで設定ファイルを読み込むようにすればいいです。（筆者はこっちを使ってます。）</p><img src="/images/20221115a/無題2.png" alt="" width="1200" height="658" loading="lazy"><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>上記の設定を行いシェルを再度開けば、無事設定したエイリアス名を打ち込めばVPNが切り替わるようになります。</p><p>ちなみに、bashrcはlinuxやmacのターミナルでも読み込まれるので、実はMacとLinuxはGitbashの箇所を参考に設定すればエイリアス設定ができます。今回の記事の応用として、以下のようによく使うディレクトリの移動スクリプトを作ってエイリアス設定すれば煩わしいディレクトリ移動を一瞬でできるようになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &#123;移動したいディレクトリパス&#125;</span><br></pre></td></tr></table></figure><p>短いコマンドでディレクトリを自由に移動する様を周りに見せつければ何も知らない人から尊敬の念をきっと貰えると思います。</p><p>また、こういった設定ファイルは永続的に通さなくても良さげな環境変数やパスを通すことが多いです。筆者は学生の頃bashrcが何かについて1ミリも理解せず脳死で世の中の記事のコマンドをコピペしていった結果、bashrcがとても汚くなったことがあります。エラーが出ても何を行っているか理解してなかったので<strong>シェル怖い</strong>と思った過去もありますが、今はだいぶ分かるようになりました。</p><p>そのため、過去の自分が読んだときに勉強になるように、今回の記事ではできる限り丁寧に各項で何を行っているか説明しました。過去の僕のような「シェル怖い」な方の助けになったら幸いです。</p><h3 id="おまけ：各コマンドの解説-x2F-振り返り"><a href="#おまけ：各コマンドの解説-x2F-振り返り" class="headerlink" title="おまけ：各コマンドの解説&#x2F;振り返り"></a>おまけ：各コマンドの解説&#x2F;振り返り</h3><p>今回の一連のコマンドを見て疑問に思ったかもしれない箇所の解説&#x2F;振り返りをしたり気ままに語ります。</p><p>コマンドを打つときこんな感じで調べてるんだなと勉強になれば幸いです。</p><h4 id="シェルの違い"><a href="#シェルの違い" class="headerlink" title="シェルの違い"></a><strong>シェルの違い</strong></h4><p>各シェルの差分として大きかったのは以下の4つかと思います。</p><h5 id="パスの指定方法"><a href="#パスの指定方法" class="headerlink" title="パスの指定方法"></a><strong>パスの指定方法</strong></h5><p>こちらは、ホームディレクトリの記載方法が各シェルで違いましたね。<code>%HOMEPATH%</code>、<code>$HOME</code>、<code>~</code>だったかと思います。<code>%</code>や<code>$</code>は環境変数を読み込んでいるだけで、後は各シェルがホームディレクトリの変数をどう設定しているかの違いです。地味に<code>gitbash</code>以外は知らなかったのでググりました。</p><p>ちなみに、普通にホームディレクトリを打っても良いです。記事を書く都合上誰でもコピペして使えるように調べましたが、当初僕のスクリプトには<code>C:\Users\&#123;USER_NAME&#125;</code>と書いてありました。</p><p>また、大きな違いとして、<strong>パスの区切りがスラッシュ<code>/</code>とバックスラッシュ<code>\</code>で違った</strong>と思います。Windows系はバックスラッシュで、その他UNIX系はスラッシュが一般的です。歴史的な経緯があるそうですが、正直超絶初心者キラーです。何度パスが間違ってますと怒られたことか。。僕は未だにどっちがどっちか覚えておらず、いつも<code>pwd</code>などを打ってコピペして確認したりしてます。</p><h5 id="シェルスクリプトの拡張子"><a href="#シェルスクリプトの拡張子" class="headerlink" title="シェルスクリプトの拡張子"></a><strong>シェルスクリプトの拡張子</strong></h5><p>ちゃんと解説してないですし、そもそも調べてないですが、各シェルで実行するシェルスクリプトの拡張子が<code>.ps1</code>、<code>.bat</code>、<code>.sh</code>になっていたかと思います。これは各シェルでのシェルスクリプト実行時の拡張子で、正しい拡張子ではない場合上手く動かなかったのでしょうがなく対応する拡張子に変えました。（総当たりで全パターンを見た訳じゃないので互換性のある拡張子とシェルがあったかもしれないですが。。誰かどんなシェルでも動く神シェルスクリプト拡張子を教えて下さい。）</p><h5 id="エイリアス設定コマンド"><a href="#エイリアス設定コマンド" class="headerlink" title="エイリアス設定コマンド"></a><strong>エイリアス設定コマンド</strong></h5><p>各シェルで完全に違いましたね。<code>各シェル名　＋　エイリアス</code>でググってやりました。特段エラーに遭遇したりはしなかったです。<br>やってることは、</p><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;エイリアスを貼るコマンド&#125; &#123;付けたいコマンド名&#125; &#123;実行するコマンド（シェルスクリプトファイルを実行する）&#125;</span><br></pre></td></tr></table></figure><p>ですね。</p><p>ちなみに、シェルスクリプトを実行するコマンドは、Windowsのシェルはパスを指定するだけで実行してくれるし、Gitbashの場合<code>source</code>コマンドと後にパスを書くと実行することを利用してます。</p><h5 id="設定ファイル"><a href="#設定ファイル" class="headerlink" title="設定ファイル"></a><strong>設定ファイル</strong></h5><p>軽い気持ちで、「せや全シェルで動くようにしよう」と思い立ったのがこの長い記事の始まりです。元々VPN切り替えはGitbashで設定しようとして上手くいかなかった（WindowsVPN切断時のエスケープに気付かなった）のでPowerShellで設定していましたが、新PJでコマンドプロンプトを使うようになったのでどうせならと思い調べました。各シェルの設定方法が違いすぎてとても勉強になりましたね。</p><p>大学生のときはbashrcが何をやっているか知らずに5,6年ぐらいいじってましたが、「シェル起動時に読み込んでいる」、「bash系のシェルしか読み込んでない」という事実にようやく気付き感動したのが最近のことです。シェルで何気なく打っているコマンドの「<code>.exe</code>ファイルがPCに格納されている」、「OSが勝手に設定している環境変数がある」という事実に気付いたのも最近で、もっと昔にシェルの仕組みの勉強しとけば今まで脳死で実行してたコマンドを理解出来て成長できたろうなと思う今日この頃です。<br>皆さんも世の記事で当たり前のように書かれているオプションの意味を調べる癖を身に着けましょう。</p><p>余談ですが、bashrcを設定ファイルだったりプロファイルと呼ぶことも勉強になりました。実は設定ファイルとググるより<code>bashrc command prompt（コマンドプロンプト）</code>とか<code>bashrc PowerShell</code>と検索した方が記事が見つかりやすかったです。なのでこういったシェル起動時に読み込まれるファイルはbashrcと呼ぶのが世界共通認識のようです（違う</p><h4 id="VPN切り替えの振り返り"><a href="#VPN切り替えの振り返り" class="headerlink" title="VPN切り替えの振り返り"></a><strong>VPN切り替えの振り返り</strong></h4><h5 id="VPN切り替え"><a href="#VPN切り替え" class="headerlink" title="VPN切り替え"></a><strong>VPN切り替え</strong></h5><p>基本的にVPN切断　➔　VPN接続してるだけです。<br>山下さんの元記事を参考に調べました。感謝。</p><h5 id="Windows標準VPN接続・切断"><a href="#Windows標準VPN接続・切断" class="headerlink" title="Windows標準VPN接続・切断"></a><strong>Windows標準VPN接続・切断</strong></h5><p><code>rasdial</code>コマンドですね。dialと名前も付いてますし、オプションに電話帳とか書いてあったので多分古くからあるコマンドです。誰か歴史教えて下さい。</p><p>いくつかの記事を読んだり、コマンド自体のヘルプを見て書きました。今回はスクリプトにユーザー名とパスワードを書いてしまいましたが、外部ファイルに書き込んで読み込むという方法もあると思います。</p><p>ちなみに、<code>rasdial</code>のヘルプは以下のようになってます。</p><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\&#123;user_name&#125;&gt;rasdial /<span class="built_in">h</span></span><br><span class="line">使用法:</span><br><span class="line">        rasdial エントリ名 [ユーザー名 [パスワード|*]] [/<span class="type">DOMAIN</span>:ドメイン]</span><br><span class="line">                [/<span class="type">PHONE</span>:電話番号] [/<span class="type">CALLBACK</span>:コールバック番号]</span><br><span class="line">                [/<span class="type">PHONEBOOK</span>:電話帳ファイル] [/<span class="type">PREFIXSUFFIX</span>]</span><br><span class="line"></span><br><span class="line">        rasdial [エントリ名] /DISCONNECT</span><br><span class="line"></span><br><span class="line">        rasdial</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;https://go.microsoft.com/fwlink/?LinkId=521839&#x27;</span> にある</span><br><span class="line">        プライバシーに関する声明を参照してください</span><br></pre></td></tr></table></figure><p>接続は見てわかる通りVPN名、ユーザーネームとパスワード入れるだけですね。切断もだいぶ単純です。</p><p><code>gitbash</code>の切断だけスラッシュにエスケープが必要ということに気付かずだいぶ詰まりましたね。エスケープしないと下のエラーになります。</p><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> rasdial &#123;VPN_NAME&#125; /disconnect</span><br><span class="line">&#123;VPN_NAME&#125; に接続中...</span><br><span class="line">ユーザー名とパスワードを確認中...</span><br><span class="line"></span><br><span class="line">リモート アクセス エラー <span class="number">691</span> - 指定したユーザー名またはパスワードが認識されないか、選択した認証プロトコルがリモート アクセス サーバーで許可されていないため、リモート接続が拒否されました。</span><br><span class="line"></span><br><span class="line">このエラーの詳細については:</span><br><span class="line">        <span class="string">&#x27;hh netcfg.chm&#x27;</span> と入力してください。</span><br><span class="line">        ヘルプでトラブルシューティングのエラー メッセージをクリックし、<span class="number">691</span> を参照してください。</span><br></pre></td></tr></table></figure><p>ググっても原因が分からず諦めていたのですが、今回の記事作成時に再度見てたら単純に<code>/disconnect</code>がコマンドではなく、ユーザー名判定されてるということにようやく気付きました。試しに<code>rasdial &#123;VPN_NAME&#125; //disconnect</code>で上手く動いたときは感動しました。</p><p>rasdialはwindowsのコマンドだしwindows系のシェルでしか上手く動かないんだなと結論付けた数ヶ月前の自分は愚かだったなと思います。bashとwindowsのシェルのスラッシュのエスケープについて調べてないので、あるあるなのかどうかすら知らないので、誰か面白い話あったら教えて下さい。</p><h5 id="Cisco-AnyConnect-VPN接続・切断"><a href="#Cisco-AnyConnect-VPN接続・切断" class="headerlink" title="Cisco AnyConnect VPN接続・切断"></a>Cisco AnyConnect VPN接続・切断</h5><p>vpncliですね。山下さんの元記事があったのでそんな苦労はしてないです。山下さんの記事のリダイレクトとオプションが不思議だったのでそこらへんを調べたりしました。</p><p><code>vpncli</code>のヘルプは下になります。</p><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> vpncli /<span class="built_in">h</span></span><br><span class="line">Cisco AnyConnect Secure Mobility Client (version <span class="number">4.9</span>.<span class="number">06037</span>) .</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2004</span> - <span class="number">2021</span> Cisco Systems, Inc.  All Rights Reserved.</span><br><span class="line">    Usage: vpncli.exe [<span class="type">options</span>] | [<span class="type">cmd</span>] [<span class="type">host</span>]</span><br><span class="line"></span><br><span class="line">       options:</span><br><span class="line">            <span class="literal">-h</span>         Print this usage statement.</span><br><span class="line">            <span class="literal">-v</span>         Print version.</span><br><span class="line">            <span class="literal">-s</span>         Read commands from response file to work non<span class="literal">-interactively</span>.</span><br><span class="line">                       Example: vpncli.exe <span class="literal">-s</span> &lt; response.txt</span><br><span class="line"></span><br><span class="line">       commands: [<span class="type">connect</span>|<span class="type">disconnect</span>|<span class="type">hosts</span>|<span class="type">state</span>|<span class="type">stats</span>]</span><br></pre></td></tr></table></figure><p>vpncliは使ってみると分かりますが、vpncliのコマンドラインが開かれてしまいます。</p><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> vpncli</span><br><span class="line">Cisco AnyConnect Secure Mobility Client (version <span class="number">4.9</span>.<span class="number">06037</span>) .</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2004</span> - <span class="number">2021</span> Cisco Systems, Inc.  All Rights Reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &gt;&gt; state: Disconnected</span><br><span class="line">  &gt;&gt; state: Disconnected</span><br><span class="line">  &gt;&gt; notice: Ready to connect.</span><br><span class="line">  &gt;&gt; registered with local VPN subsystem.</span><br><span class="line">VPN&gt; <span class="literal">-h</span></span><br><span class="line"></span><br><span class="line">[ <span class="type">VPN</span> <span class="type">Connection</span> <span class="type">commands</span> ]</span><br><span class="line">    connect             disconnect        hosts         stats</span><br><span class="line">    state               block             cancel</span><br><span class="line"></span><br><span class="line">[ <span class="type">Misc</span> <span class="type">commands</span> ]</span><br><span class="line">    help                version           <span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">For</span> help with a specific command, <span class="keyword">try</span>: help &lt;command&gt;</span><br><span class="line"></span><br><span class="line">VPN&gt;</span><br></pre></td></tr></table></figure><p>この後、disconnectするなり、connectを押して指示に従いVPN名とユーザーネーム、パスワードを入れたりすることになります。ちなみに、connectとだけ打つとVPN名一覧を見れたりします。</p><p>今回使っている<code>-s</code>コマンドはヘルプに書いてある通り、vpncliのコマンドラインに渡す入力をファイルから貰うという意味になります。</p><p>そして、<code>rasdial</code>と違いユーザーネームとパスワードをオプションで指定出来ず、1つずつ入力しないといけない都合上、<code>-s</code>コマンドを使わなければコマンド一発で接続することが出来ませんでした。ちなみに、<code>connect &#123;CISCO_VPN_NAME&#125;</code>を<code>.cre</code>に書き込んでも上手く動いたりします。</p><p>また、面白いのがPowerShellの仕様で、リダイレクト機能である<code>&lt;</code>を打つと以下のエラーが出ます。</p><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\&#123;user_name&#125;&gt; vpncli <span class="literal">-s</span> &lt; %HOMEPATH%\.vpn\CISCO_VPN.cre connect &#123;CISCO_VPN_NAME&#125;</span><br><span class="line">発生場所 行:<span class="number">1</span> 文字:<span class="number">11</span></span><br><span class="line">+ vpncli <span class="literal">-s</span> &lt; %HOMEPATH%\.vpn\CISCO_VPN.cre connect &#123;CISCO_VPN_NAME&#125;</span><br><span class="line">+           ~</span><br><span class="line">演算子 <span class="string">&#x27;&lt;&#x27;</span> は、今後の使用のために予約されています。</span><br><span class="line">    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException</span><br><span class="line">    + FullyQualifiedErrorId : RedirectionNotSupported</span><br></pre></td></tr></table></figure><p>どうやら、<code>&lt;</code>を利用すること自体禁止されているようで、今後使えるようになるらしいです。知らないですけど、こんなシェル黎明期みたいな文言を見れるとは思いもしませんでした。</p><p>そのため、コマンドプロンプトは<code>cmd</code>で実行できるので、<code>/c</code>のコマンド実行後に閉じるオプションを付けてコマンドプロンプトで実行させてます。</p><h3 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h3><p>こんな長い記事を最後まで読んで頂きありがとうございます。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Windows/">Windows</category>
      
      <category domain="https://future-architect.github.io/tags/VPN/">VPN</category>
      
      
      <comments>https://future-architect.github.io/articles/20221115a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>パスワードレス技術の現状と未来について</title>
      <link>https://future-architect.github.io/articles/20221114a/</link>
      <guid>https://future-architect.github.io/articles/20221114a/</guid>
      <pubDate>Sun, 13 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG の吉岡です。&lt;a href=&quot;/articles/20221031a/&quot;&gt;秋のブログ週間&lt;/a&gt; 10</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG の吉岡です。<a href="/articles/20221031a/">秋のブログ週間</a> 10 本目の投稿です。</p><p>2022年の 5 月に Apple, Google, Microsoft そして FIDO Alliance が <a href="https://fidoalliance.org/white-paper-multi-device-fido-credentials/">マルチデバイス対応FIDO認証資格情報</a> を発表してから、パスワードレス技術に対する注目が高まっています。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> パスワードレスの概要について調査してまとめてみました。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ol><li>私たちとパスワード<ol><li>パスワードの抱える問題</li><li>パスワードマネージャ</li><li>公開鍵暗号の活用</li></ol></li><li>パスワードレスと FIDO Alliance<ol><li>FIDO v1.0</li><li>FIDO2</li><li>FIDO の認証フロー</li><li>Passkeys</li></ol></li><li>パスワードレスな未来</li></ol><h2 id="私たちとパスワード"><a href="#私たちとパスワード" class="headerlink" title="私たちとパスワード"></a>私たちとパスワード</h2><p>今日、私たちのデジタルアイデンティティはパスワードに支えられています。私たちは日々 Google で検索し、Netflix を観て、Twitter でつぶやき、Amazon で買い物をしますが、これらすべてのアカウントが、パスワードによって保護されています。</p><p>パスワードは通常 TLS によって安全にクライアントからサーバに転送され、サーバ上で難読化されて保存されるため、攻撃者が任意のパスワードを即座に奪取することは困難です。しかしながら、秘密鍵であるパスワードを他者と共有する方法は、本質的で避けることのできない問題を複数孕みます。</p><h3 id="パスワードの抱える問題"><a href="#パスワードの抱える問題" class="headerlink" title="パスワードの抱える問題"></a>パスワードの抱える問題</h3><ol><li>ユーザがパスワードを適切に管理するのは困難である</li><li>サーバや通信経路からパスワードが漏洩することがある</li><li>パスワードにはフィッシング耐性がない</li></ol><h4 id="ユーザがパスワードを適切に管理するのは困難である"><a href="#ユーザがパスワードを適切に管理するのは困難である" class="headerlink" title="ユーザがパスワードを適切に管理するのは困難である"></a>ユーザがパスワードを適切に管理するのは困難である</h4><p><a href="https://www.ipa.go.jp/security/anshin/account_security.html">IPA</a> によると、パスワードは、できるだけ長く、複雑で、使い回さないものとすべきだそうです。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>それはそうなのですが、このベストプラクティスを人間が実践することは事実上不可能です。私たちは数百のアカウントを保持しています。そのアカウント全てに対して、ユニークでランダムな文字列を記憶することはできないでしょう。残念なことに、複数のサービスでパスワードを使い回しているユーザも多くいるようです。</p><h4 id="サーバや通信経路からパスワードが漏洩することがある"><a href="#サーバや通信経路からパスワードが漏洩することがある" class="headerlink" title="サーバや通信経路からパスワードが漏洩することがある"></a>サーバや通信経路からパスワードが漏洩することがある</h4><p>ユーザがパスワードを適切に管理していたとしても、通信経路やサーバにセキュリティ上の不備がある場合、パスワードが漏洩し、ユーザのアカウントが危険に晒される場合があります。通常、パスワードは難読化された上でデータベースに保存されますが、<a href="https://www.ogis-ri.co.jp/news/1272165_6734.html">平文で保存されたパスワードが漏洩した事例</a> も存在します。ユーザにとって、ウェブサービスが適切に管理・運営されていることを断定的に知る術はなく、パスワードの使用には本質的な危険が伴います。</p><h4 id="パスワードにはフィッシング耐性がない"><a href="#パスワードにはフィッシング耐性がない" class="headerlink" title="パスワードにはフィッシング耐性がない"></a>パスワードにはフィッシング耐性がない</h4><p>パスワードは、人間であるユーザが直接入力することのできる文字列であり、フィッシング耐性がありません。普段からフィッシング詐欺の被害に遭わないよう注意している人であっても、急いでいるときや慌てているときに、適切に入力先ウェブサイトの真正性を確かめるよう徹底することは、簡単なことではありません。また、<a href="https://jpn.nec.com/cybersecurity/blog/220107/index.html">ミスリード URL やホモグラフ攻撃</a> に常に気をつける必要があるというのは、それだけでも大きな心理的負担です。パスワードには本質的にフィッシング耐性がなく、人間の注意力に期待するのは無謀でしょう。</p><h3 id="パスワードマネージャ"><a href="#パスワードマネージャ" class="headerlink" title="パスワードマネージャ"></a>パスワードマネージャ</h3><p>このようなパスワードの惨状に際して、パスワードマネージャを利用することが、現時点でのベストプラクティスであり、唯一のまともな解決策であると筆者は考えています。プラットフォーマーとして Apple は iCloud Keychain を、Google は Google Password Manager を提供していますし、サードパーティとしても 1Password や Bitwarden、Dashlane のような有力なプレイヤーが存在します。</p><p>ユーザは信頼できるパスワードマネージャを適切に使用することで、パスワードに潜む問題をある程度解消することができます。パスワードマネージャはユニークでランダムなパスワードを作成・管理することができ、また、常にオートフィル機能を使うようにすれば、フィッシング被害を受ける可能性も大きく下げることができます。</p><p>ところがパスワードマネージャも銀の弾丸ではありません。オートフィルが活用できないような場面では相変わらずフィッシングの被害を受ける可能性がありますし、サーバからパスワードが漏洩するような事態に対しても、ユーザは無防備のままです。</p><h3 id="公開鍵暗号の活用"><a href="#公開鍵暗号の活用" class="headerlink" title="公開鍵暗号の活用"></a>公開鍵暗号の活用</h3><p>根本的な問題は、秘密鍵であるパスワードをクライアントとサーバが共有する、という現状のモデルにあります。トランスポート層では 10 年以上前から SSL&#x2F;TLS として公開鍵暗号が大活躍しているのに、アプリケーション層で同様の技術を活用しない手はありません。公開鍵暗号を活用し、パスワードへの過度な依存を軽減するため、2012 年に Fido Alliance が設立されました。</p><h2 id="パスワードレスと-FIDO-Alliance"><a href="#パスワードレスと-FIDO-Alliance" class="headerlink" title="パスワードレスと FIDO Alliance"></a>パスワードレスと FIDO Alliance</h2><p><a href="https://fidoalliance.org/">FIDO Alliance</a> は、パスワードに対する依存を軽減するため、PayPal や Lenovo らにより 2012 年に結成された業界団体です。現在では Amazon, Apple, Google, Microsoft などが参加する一大アライアンスに成長しています。FIDO は、TPM や生体認証機能を備えた認証器 (スマートフォンやセキュリティキー) を活用し、ユーザがパスワードを利用することなくアカウントにログインできるようにすることを目的としており、そのための標準規格をいくつか定めています。</p><p>FIDO が発表した重要な規格には、FIDO 1.0 (2014) と FIDO2 (2018) があります。</p><h3 id="FIDO-v1-0"><a href="#FIDO-v1-0" class="headerlink" title="FIDO v1.0"></a>FIDO v1.0</h3><p>FIDO v1.0 は FIDO UAF (Universal Authentication Framework) と FIDO U2F (Universal 2nd Factor) から成ります。FIDO UAF はスマートフォンのネイティブアプリケーション向けに、公開鍵ベースのパスワードレス認証を規定します。FIDO U2F は、パスワードに加わる第 2 認証要素として、従来通りの OTP でなく、公開鍵暗号を利用できるようにした仕様です。</p><p>この UAF と U2F ですが、仕様編纂者を見るに、UAF は PayPal が、U2F は Google が主体となって仕様策定を進めたようで、全体として足並みが揃っていない感があります。FIDO として一貫性のある仕様の実現には、FIDO2 を待つ必要がありました。</p><h3 id="FIDO2"><a href="#FIDO2" class="headerlink" title="FIDO2"></a>FIDO2</h3><p>FIDO v1.0 にはいくつかの反省点がありました。UAF は半ばスマートフォンのネイティブアプリケーションで使うことを前提としていたため、ウェブブラウザへの応用がすすみませんでしたし、U2F はあくまで従来のパスワードを補完する技術要素にすぎず、完全なパスワードレスを実現するものではありませんでした。これらの問題を解決した最新の FIDO 仕様が、2018 年に発表された FIDO2 です。</p><p>FIDO2 は WebAuthn と CTAP から成る公開鍵ベースの認証技術仕様です。</p><h4 id="WebAuthn"><a href="#WebAuthn" class="headerlink" title="WebAuthn"></a>WebAuthn</h4><p><a href="https://www.w3.org/TR/webauthn/">WebAuthn (Web Authentication)</a> は、FIDO Alliance と W3C の共同作業として、2016 から作業が開始し、2019 年にウェブ標準となった仕様です。WebAuthn はウェブブラウザが認証器とコミュニケーションをとり、キーペアを作成したり、チャレンジに署名したりする方法を定めています。この仕様により、ウェブ開発者はユーザの認証器に対してキーペアの作成やチャレンジへの署名を依頼することができます。2022 年 11 月現在、WebAuthn は Firefox を除くすべての主要なブラウザで完全にサポートされています。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p><h4 id="CTAP"><a href="#CTAP" class="headerlink" title="CTAP"></a>CTAP</h4><p><a href="https://fidoalliance.org/specs/fido-v2.1-ps-20210615/fido-client-to-authenticator-protocol-v2.1-ps-errata-20220621.html">CTAP (Client to Authenticator Protocol)</a> は、OS がセキュリティキーのような外部認証器とやりとりする際の低レイヤープロトコルを規定しています。ウェブ開発者が普段意識しないような、ウェブブラウザよりも先にある世界のプロトコルです。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p><h3 id="FIDO-の認証フロー"><a href="#FIDO-の認証フロー" class="headerlink" title="FIDO の認証フロー"></a>FIDO の認証フロー</h3><p>FIDO は複数の仕様を規定しており、それらの関係が複雑なのですが、<strong>公開鍵暗号を利用した認証プロトコル</strong> であるという点は、すべてに共通しています。おおまかに言って、FIDO のパスワードレス認証は次のようなフローを採用しています。</p><h4 id="ユーザ登録"><a href="#ユーザ登録" class="headerlink" title="ユーザ登録"></a>ユーザ登録</h4><p>FIDO 認証のユーザ登録時にはユーザの認証器がキーペアを作成し、公開鍵をサーバに送信します。サーバは公開鍵を保存します。サーバは秘密鍵を知らないため、仮にサーバから情報が漏洩しても、第三者がユーザのアカウントを乗っ取ることはできません。</p><img src="/images/20221114a/register.png" alt="registerシーケンス" width="456" height="330" loading="lazy"><h4 id="ユーザ認証-サインイン"><a href="#ユーザ認証-サインイン" class="headerlink" title="ユーザ認証 (サインイン)"></a>ユーザ認証 (サインイン)</h4><p>ユーザ認証 (サインイン) 時にはサーバがランダムなチャレンジを生成し、クライアントに送信します。クライアントは秘密鍵でチャレンジに署名し、サーバに返却します。サーバはユーザ登録時に保存していた公開鍵で署名を検証し、有効な署名であれば、ユーザをサインインさせます。なお、このときサインイン先のドメイン名がユーザ登録したドメイン名と同一であることがクライアント側で検証されるため、FIDO 認証にはフィッシング耐性があります。</p><img src="/images/20221114a/signin.png" alt="signinシーケンス" width="549" height="372" loading="lazy"><h3 id="Passkeys"><a href="#Passkeys" class="headerlink" title="Passkeys"></a>Passkeys</h3><p>FIDO Alliance の設立から 10 年近くを経て、ベンダ中立な FIDO2 仕様群が策定され、多くの OS・ブラウザでサポートされるようになりましたが、この技術が一般に広く用いられるには、移行とリカバリの問題が残っていました。従来の FIDO 認証では、ユーザの秘密鍵はデバイスのセキュアストレージを出ることなく、ローカルに保存されていました。従って、ユーザが複数のデバイスを使用しているとき、デバイスごとにサービスに登録する必要がありました。また、デバイスを買い替えたとき、アカウントをシームレスに移行する機能はなく、すべてのアカウントについて、再登録が必要でした。さらに怖いことに、デバイスを紛失したり破損したりしてしまうと、アカウントに対するアクセスを完全に失ってしまう可能性がありました。</p><p>この問題を解決し、パスワードレス技術を真にユビキタスなものにするため、2022 年 5 月 5 日 (World Password Day) に、Apple, Google, Microsoft, FIDO Alliance が共同で声明を発表し、<a href="https://fidoalliance.org/white-paper-multi-device-fido-credentials/">マルチデバイス対応 FIDO 認証資格情報 (通称 passkeys)</a> への対応を推進していくことを宣言しました。Passkeys により、iCloud Keychain や Google Password Manager を通して秘密鍵をデバイス間で安全に同期することができ、移行とリカバリの問題も解消されます。Passkeys は macOS 13 Ventura や iOS 16 の Safari 16 ですでにサポートされており、Google も <a href="https://android-developers.googleblog.com/2022/10/bringing-passkeys-to-android-and-chrome.html">Android と Chrome で今秋に対応</a> することを発表しています。</p><h2 id="パスワードレスな未来"><a href="#パスワードレスな未来" class="headerlink" title="パスワードレスな未来"></a>パスワードレスな未来</h2><p>現状、広範に採用されているとは言い難い FIDO, WebAuthn, passkeys ですが、強力なプラットフォーマーが協力して推進していくことから、今後採用が進んでいくことが考えられます。直近では Apple, Google そして Microsoft といったプラットフォーマーによるサポートから始まっていますが、将来的には <a href="https://blog.1password.com/what-are-passkeys/">1Password</a> や <a href="https://support.dashlane.com/hc/en-us/articles/7888558064274-Passkeys-in-Dashlane">Dashlane</a> のようなパスワードマネージャも認証器機能を提供する予定だそうです。ユーザとサービス提供者をパスワードから解放するパスワードレス技術に今後も注目していきます。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">当社比</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">ちなみに、IPA のウェブサイトで紹介されている「コアパスワード」を使った管理方法を採用することはお勧めしません。パスワードが平文で漏洩したとき、プレフィクスを識別するのが容易で、コアパスワードが攻撃者に奪取されるためです。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><a href="https://caniuse.com/?search=WebAuthn">&quot;WebAuthn&quot; | Can I use... Support tables for HTML5, CSS3, etc</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">FIDO2 に含まれるのは CTAP2 と呼ばれる仕様です。FIDO v1.0 において FIDO U2F と呼ばれていたものは、FIDO2 において CTAP1 に改名されました。</span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/">認証認可</category>
      
      
      <category domain="https://future-architect.github.io/tags/WebAuthn/">WebAuthn</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%83%AC%E3%82%B9/">パスワードレス</category>
      
      <category domain="https://future-architect.github.io/tags/FIDO/">FIDO</category>
      
      <category domain="https://future-architect.github.io/tags/FIDO2/">FIDO2</category>
      
      <category domain="https://future-architect.github.io/tags/Passkeys/">Passkeys</category>
      
      
      <comments>https://future-architect.github.io/articles/20221114a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>データベースと向き合う決意</title>
      <link>https://future-architect.github.io/articles/20221111a/</link>
      <guid>https://future-architect.github.io/articles/20221111a/</guid>
      <pubDate>Thu, 10 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20221031a/">秋のブログ週間</a>の9本目のエントリーになります。この企画もこんなに書く人が出てくるように育っていいですね。</p><p>「中間層を増やして柔軟性を高めるのがソフトウェアの歴史」</p><p>これは大学時代に2つ上の先輩が言っていた言葉です。例えばマシン語を直接書くのではなく、アセンブラで書けば、変換（コンパイル）の手間はかかりますが、他のCPUへの移植はしやすくなります。高級アセンブラと名高いC言語を使えばさらに移植性は上がります。C言語で書かれたVMを使う言語、例えばJava、Python、Rubyなんかはさらに移植性は上がります。</p><p>ストレージもそうです。最終的にストレージはビット列を保存するものですが、それにOSのファイルシステムというレイヤーがあり、そこにスキーマで管理されたデータを入れるDBMSが乗っかり、SQLなどの問い合わせ言語でデータ取得できるようにします。DBMSを挟むことで、レプリケーションでバックアップを勝手に別マシンに取ってくれたり、複数のマシンを透過的に扱い、1台のマシンに収まらないデータを透過的に扱うことができるパーティショニングといった機能が得られます。</p><p>ウェブのフロントエンドもリッチ化の流れでどんどん高機能に、そしてバンドルされる.jsファイルのサイズもどんどん大きくなってきました。ウェブフロントエンドでは、DHTMLと呼ばれた時代、prototype.js、jQueryの時代から徐々にリッチにデスクトップGUI的な思想で重厚な開発が行われるようになり、Knockout.js、Backbone.jsとMustacheなどのテンプレートエンジンを使ったMVCがしばらく行われていました。データ保持のレイヤーと表示のレイヤーをきちんと用意する、通信とチェックなどのビジネス知識の層を分けるなどです。Angularもコンポーネントとサービスというレイヤー分けの仕組みがありますし、Vue.jsや　Reactでも、ストアを用意する使い方をみんなしていました。ストアを使うと、Reduxがモデル層、Reactがビューというレイヤー分けとなります。</p><h1 id="時々起きる中間層を壊すムーブメント"><a href="#時々起きる中間層を壊すムーブメント" class="headerlink" title="時々起きる中間層を壊すムーブメント"></a>時々起きる中間層を壊すムーブメント</h1><p>とはいえ、中間層を増やしていくコストはゼロではありません。MS-DOS時代にちょっとコンソールに色付けする2桁バイトのバイナリを作ったことがありますが、Cを使えばそのサイズでは収まりませんし、PythonやRubyはCと比べてどうしても速度ではかないません。</p><p>そのため、時々中間層を壊すイノベーションが起きています。イノベーションのジレンマの文脈で説明すると、中間層を足すことは、より複雑に、より便利に、より遅い方向への持続的イノベーションの進化ですが、中間層の破壊は、より単機能で、より手軽に、より速く、さらに新しい価値観が付与された方向への破壊的イノベーションです。例えば、JITは高級言語の「便利だが遅くて重い」インタプリタという層を破壊してC言語やアセンブラといった言語で作られる世界へのポータルを作るものです。</p><p>ウェブフロントエンドも近年は層を破壊する方向に進歩しています。モデルのレイヤーをブラウザ上で作り上げてビューがそれを使うという方向性だったのが、GraphQLやSWRといったデータアクセスライブラリが登場してきました。これらのライブラリが実現する世界は、サーバー側である程度フロントが期待するレスポンスを返し、それをそのままフロントエンドが表示に利用するということで、ブラウザ上でのモデル層がなくなり、ブラウザはビューとコントローラのみ、モデルはサーバー上にあり、そのキャッシュがブラウザ上にもある、という状態になります。</p><p>JavaScriptはES4でクラスを入れるので大騒ぎし、ES6でようやくクラスを導入しました。ES3→6ではJavaやPythonをお手本にJavaScriptがリッチな言語へと進化しましたが、その苦労の末入ったクラスは、現在ではあまり使われていません。Angularはクラスを使いますが、Reactはクラスベースのコンポーネントから関数を使ったコンポーネントが主流になりました。Vue.jsも一時期クラス形式がありましたが、Vue3になったときにクラスAPIのメンテナーがコアメンバーから外れました。</p><p>現在主流なのはオブジェクトや配列など、言語標準のデータをそのまま使います。クラスのようなSetter&#x2F;Getterといったアクセッサで正しい状態を保証するという考えはウェブフロントエンドでは完全に過去のものです。Reduxでは前の状態をもとに、新しい状態を新規に作るという動きになり、関数型チックに状態を扱います。しかし、Redux-ToolkitではImmer.jsを使い、それと同じような処理を、直接値を書き換えるようにコーディングできます。なんか時代が巻き戻っているような書き心地です。</p><p>もう1つのムーブメントはTypeScriptです。Facebook(現Meta）のFlowもありましたが、これは型情報を外から与えるものです。JavaScriptの「直接オブジェクトや配列を使う」使い方に合わせて、かなりマニアックな型定義もできるようになっています。これで直接いじるにしても想定外の型を入れようとすればコンパイラで検知できます。</p><p>中間層を壊すといっても、完全に過去に作られたものが消えるわけではなく、「あたかもなかったかのように振る舞う透明な層」に化けるという感じですね。仮想DOMにしても、SWRやGraphQLにしても、Immer.jsにしても、TypeScriptにしても。TypeScriptの前にはAltJSブームがありましたが、覇権を握ったのはBabelでした。これもリッチな言語を作るのではなく、リッチな文法を使ってJSを書いたら、ポータビリティの高いJSに書き換えますよ、というのもこれに近い思想かな、と思います。CSSのprefixerとかもですね。</p><p>中間層がなくなることで、隠される対象の底レイヤーだったDOMを開発者が意識して書くことになり、本来のセマンティクスや、アクセサビリティを大事にしよう、というところに業界全体が向かっている気がします。</p><h1 id="クラウドネイティブとデータ中心アプローチの未来"><a href="#クラウドネイティブとデータ中心アプローチの未来" class="headerlink" title="クラウドネイティブとデータ中心アプローチの未来"></a>クラウドネイティブとデータ中心アプローチの未来</h1><p>僕がフューチャーに入って学びたいと思っているのがデータベースをしっかり使う開発です。まあ、まだあまりその機会には恵まれてはいませんが・・・フューチャーではデータベースを第一に設計を固めようという開発を行います。ソフトウェア開発の試験だとオブジェクト指向と並んで紹介されるのがデータ中心アプローチです。しかし、本屋に行くと、データ中心アプローチ（DOA）を解説した本はほとんどありません。まあ、といってもオブジェクト指向も新しい本は出ておらず、ここ15年ぐらいは設計の本は不作の時代ですし、出版社がいくつか技術書から撤退したり、ということもあって過去の本も手に入らなくなっています。</p><p>しかし、この今やオープンには学べないDOAは、実はいわゆるSIerではしっかりと生きています。フューチャーはSIerではなくてITコンサルである、というのが会社の公式見解ですが、実装までやるのでSIerを内包しています。社内ポータルには動画やスライドやらのDBの教育コンテンツなどが充実しています。最近は時間を見つけて学習しています。</p><p>最近はいろいろクラウドの時代になっていますが、いろいろやっていると、データベース設計力が大事だな、と思うことが多くなってきました。たとえば、Firebaseはウェブフロントエンドから直接データストアにクエリーを投げられます。先ほど、ウェブフロントエンドはモデル層をサーバー側に持っていこうとしていると紹介しましたが、その場合、Firebase側でフロントエンドから使いやすいデータ構造が実現できればばっちりアプリ開発が決まる、ということです。例えばデータベースはアドホックに設計していき、BFFのような層を作ってフロントに優しいデータに変換するとなると、一層増えてしまうためにバックエンドレスにできるFirebaseのメリットが減ってしまいます。</p><p>DOAのツールとしてはそのようなデータ構造のためのERDという設計のツールがありますが、もう1つはDFDがあります。これもクラウドネイティブ時代にはかなり役立つツールなのではないかと思っています。DFDでは、データストアとプロセスを線で繋げた図です。処理の流れではなくてデータの流れを表現するものです。クラウドネイティブな大規模アプリケーションだと、LambdaなどのFaaSがトリガーなどで起動されたりと、「ピタゴラスイッチ」として表現されることが多いのですが、コンテナで実現されたアプリやFaaSといったサーバーレスでは、アプリが状態を持たない「関数」的な部品になります。各種ストレージやPub&#x2F;Subはデータストアとして扱うと、DFDはサーバーレスのアプリケーションの設計に最適なツールなんじゃないかと思っています。クラウドサービスを並べたブロック図をよく見かけますが、あれを物理設計とすると、ネットワーク系のサービスを抜いて、compute系とストレージ系だけを並べたような図となり、論理設計的になるかと思います。</p><img src="/images/20221111a/cloud.png" alt="cloud.png" width="951" height="321" loading="lazy"><p>CRUD表も、現代のクラウドデータベースのパフォーマンス問題を洗い出すときに役にたつという話も聞きます。どでかいデータを持つテーブルに大量データをスキャンするようなクエリーを投げていると問題になりがちなので、テーブルに対してだれが処理を投げているかがわかれば、だいたい当たりはつきますしね。</p><p>あと、余談ですが、　ReactアプリケーションのuseEffectとuseStateの連鎖も、DFDで表現すると綺麗にいけるんじゃないかな、というのも最近ぼんやり考えているところです。あとで紹介するSQL生成ツールは<a href="https://future-architect.github.io/articles/20221024a/">ウェブインターフェイス</a>をReactで作ったのですが、そのフックの関係をDFDで図示するとこんな感じです。useState&#x2F;useRefのストアと、useCallback&#x2F;useEffectのプロセスで表現できますね。テキスト入力はuncontrolled、コンボボックスはcontrolled、青線は生成したデータをURLに反映してシェアできる仕組み・・・みたいにうまく設計情報が反映できていますよね？</p><img src="/images/20221111a/react-dfd.png" alt="react-dfd.png" width="831" height="524" loading="lazy"><h1 id="そろそろSQL嫌いを卒業する時期が来たのではないか"><a href="#そろそろSQL嫌いを卒業する時期が来たのではないか" class="headerlink" title="そろそろSQL嫌いを卒業する時期が来たのではないか"></a>そろそろSQL嫌いを卒業する時期が来たのではないか</h1><p>僕自身はMongoDBだったりの案件が多く、RDBを直接扱う経験は数えるほどしかなく、経験値が足りないな、というのは実感していました。アプリ作るときもORマッパーを使ったりもしていましたが、どうも動きが気に入らなくて、直接コントロールしたいな、と思うことの方が増えてきています。</p><p>かつては（20年ぐらい前）はスケールアウトのようなものが一般的ではなく、CPU数に応じたライセンス料がかかるDBMSを使うことが多かったと思います。元オラクルの人から聞いたのですが、当時はソート処理など、アプリ側でもできる処理は貴重なサーバーリソースを節約するために非推奨というのがベストプラクティスとされていたそうです。しかし、近年はスケールアウトが組み込まれたマネージドなDBMSが増えてきて、フューチャーの案件でも当たり前のように選択されています。クエリー処理でCPUリソースが足りない、という時代ではなくなっています（帯域や書き込み性能は足りないということは聞きますが）。N+1問題も、本来はSQLを書けば解決する問題を、SQLを避けるために発生してしまっている問題といえます。</p><p>DBを直接扱わない理由としてはDBMSを切り替えてもアプリケーションの書き換えが不要にするという20年ぐらい前のエンタープライズアーキテクチャ的な思想もあると思います。しかし、実稼働すると、アプリケーションよりもデータベース、その特定のバージョンのデータベースよりも中のデータの方が寿命が長くなることはざらです。そもそも現代においては高額なライセンスは本番環境だけで、ローカルはH2を使う、みたいなことをする必要は少なく、本番はAWS Auroraで、ローカルはPostgreSQLで、と言った感じの開発をしているところがほとんどでしょう。もはやDB依存を毛嫌いする時代ではなくなってきていると思います。</p><p>また、データサイエンティストを中心に、SQLを使ってデータ分析をしようという本はたくさん出ていますし、SQLは当たり前の道具になってきています。開発者もSQLを書ける方が良いですよね。また、データ保持部分と、加工部分が別のサーバーにあると、毎度転送するコストが発生します。それに対して、安いノードをたくさん並べてデータを持つノードにバイトコードにした処理を投げつけて並列処理させるという方式も使われています。Apache Sparkで使われるようになった処理方式ですが、ビッグデータを扱う人がSQLを使うのも、このネットワークコストを削減するためでしょう。これも、DBサーバーにおけるコスト構造の変化に対する連続的な進化の流れに見えます。</p><h1 id="最近いろいろチャレンジしているもの"><a href="#最近いろいろチャレンジしているもの" class="headerlink" title="最近いろいろチャレンジしているもの"></a>最近いろいろチャレンジしているもの</h1><p>僕自身、SQLと向かい合ってこなかったので、最近はいろいろチャレンジしながらDBやSQLとの距離を縮めようとしているところです。あと、ウェブフロントエンドとかのツール群と比べると、もうちょっとスモールステップで作業を勧められるようなものがあったらいいなと思ってツールを作ったりしています。</p><p>例えば、僕が最近作っているのが、箇条書きでざっと書いたテーブル情報から、DDLやらERDを作るツールです。概念設計やら論理設計あたりで使えたら便利かなって。論物変換（日本だと日本語の名前から実際に使うシンボル名への変換）とかも乗せたいな、と思っているところです。</p><p><a href="https://shibukawa.github.io/md2sql/">https://shibukawa.github.io/md2sql/</a></p><p>テーブル構造が決まり、インデックスを貼る場所が決まればクエリーはある程度自動生成できそうです。データ量が少ないことがわかっているテーブル以外は、インデックス以外で検索することはないはずですからね。</p><p>もう1つはtwowaysql周りです。</p><p><a href="https://future-architect.github.io/articles/20220531a/">https://future-architect.github.io/articles/20220531a/</a></p><p>SQLは直接テストされることがなく、だいたいそれをラップしたリポジトリ層を使ってテストしたりします。SQLを直接テストできれば便利かな、と思い、twowaysqlにCLIツールを追加し、テストケースをYAMLで書いてテストできるようなテストランナーを実装してみました。十分にテストされた信頼されたSQLがあればレイヤードアーキテクチャのリポジトリ層っていらなくなって、プログラムをさらにシンプルにできるんじゃないかと思っているところです。</p><p>フロントエンドで関数型とかを意識する時代、OOPですべて統一する時代はもう過去のものと考えれば、バックエンドコードにSQLがいてもいいですよね？Goの場合は、だいたい他の言語経験者がORMを探してgormを触って絶望する、というのが「あーあ、またか」という感じでよく発生しますが、最近はsqlcやsqlxなど、SQLを書ける前提の良いライブラリが増えていますし、不便になることはありません。ORマッパーはオブジェクトのマッピングと、クエリービルダーで構成されますが、前者の構造体へのマッピングさえあれば十分かと思います。</p><p>ウェブフロントエンドではBabelやらCSSのprefixerがありましたが、　SQLも便利方言を吸収してくれるものはなんか欲しいですよね。::typeでキャストできるPostgreSQLの記法をCAST()という標準SQLに直してくれるようなやつとか、欲しいですよね。いつか作りたい。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ぼんやりと考えてきたことを紹介してきました。</p><ul><li>中間層をなくす進化というものが最近は多くなってきている。</li><li>クラウドネイティブな開発をスムーズに行うためには古のDOAが役に立つのではないか</li><li>ORマッパーも技術の進歩とベクトルが合わないもので、将来なくなるべきものと考えている</li></ul><p>自分で作っているツールはどれもまだ未熟だし、構想段階のものもありますが、ツールを作りながら自分なりの開発スタイルを磨いていきたいなと思っています。</p><p>今の仕事をしているとお客さんから「こんな新しいアーキテクチャは他のベンダーから提案されたことがなかった」と言われたりもするのですが、DOAを使っているSIerが本気でクラウドネイティブに取り組むと、ものすごいポテンシャルを発揮できるんじゃないかな、というのも将来期待しているところです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DB/">DB</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%8A%80%E8%A1%93%E9%81%B8%E5%AE%9A/">技術選定</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      <category domain="https://future-architect.github.io/tags/ORM/">ORM</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A8%E3%83%83%E3%82%BB%E3%83%BC/">エッセー</category>
      
      <category domain="https://future-architect.github.io/tags/DOA/">DOA</category>
      
      
      <comments>https://future-architect.github.io/articles/20221111a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Web API The Good Partsを読んだ感想</title>
      <link>https://future-architect.github.io/articles/20221110a/</link>
      <guid>https://future-architect.github.io/articles/20221110a/</guid>
      <pubDate>Wed, 09 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;金融グループ所属、新人の藤戸四恩です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>金融グループ所属、新人の藤戸四恩です。<a href="/articles/20221031a/">秋のブログ週間</a>9日目の記事です。</p><p>今までWeb APIに関してしっかりと勉強をしたことがなかったので、Web APIの設計方法や考え方をしっかりと学びたいと思い、おすすめの本を周りの人に聞いた際に「<a href="https://www.oreilly.co.jp/books/9784873116860/">Web API The Good Parts</a>」を薦めていただき、実際に購入して読みました。<br>この記事では本書を読んだ感想を書いていきたいと思います。</p><h1 id="書籍の概要"><a href="#書籍の概要" class="headerlink" title="書籍の概要"></a>書籍の概要</h1><p>Web APIの設計、開発、運用についての解説書。APIは設計次第で使いづらいものになってしまうだけでなく公開後の保守運用も難しくなってしまいます。そのためAPIを美しく設計することがとても重要です。</p><p>本書では「設計の美しいAPIは、使いやすい、変更しやすい、頑強である、恥ずかしくない」という考えのもと、APIをどのように設計し運用すればより効果的なのか、ありがちな罠や落とし穴を避けるにはどういう点に気をつけなければいけないのかを明らかにします。</p><p>ターゲットは、URIにアクセスするとXMLやJSONなどのデータが返ってくるシンプルなタイプ――XML over HTTP方式やJSON over HTTP方式――のAPIです。読者は、Web API設計の考え方と手法を知ることができます。</p><p><a href="https://www.oreilly.co.jp/books/9784873116860/">引用元 - O’REILLY</a></p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>1章 Web APIとは何か</li><li>2章 エンドポイントの設計とリクエストの形式</li><li>3章 レスポンスデータの設計</li><li>4章 HTTPの仕様を最大限利用する</li><li>5章 設計変更をしやすいWeb APIを作る</li><li>6章 堅牢なWeb APIを作る</li></ul><h1 id="特徴と感想"><a href="#特徴と感想" class="headerlink" title="特徴と感想"></a>特徴と感想</h1><h2 id="API-の歴史"><a href="#API-の歴史" class="headerlink" title="API の歴史"></a>API の歴史</h2><p>書籍内では歴史については下記のように記載がありました。</p><blockquote><p>非常に普及した古くから知られる成功したWeb APIとして、AmazonのProduct Advertising API があります。<br>これが初めて公開されたのは2003年前と10年以上も前です。<br>ちなみにEC2やS3などが公開されるよりもずっと前である当時はAWS(Amazon Web Service)という言葉そのものがProduct Advertising API のことを意味していました。<br>そしてこのAPIの公開はインターネットの世界にかなり大きなインパクトを与えました。<br>なぜならこのAPIはアフィリエイトに結び付けられており、これを使うことで誰でも簡単にAmazonの商品を自分のサイトから販売し、その収益の一部を得ることができたからです。</p></blockquote><p>この書籍の出版が2014年ということもあり、10年以上前と記載がありましたが記事投稿時(2022年)では、2003年は19年前ということでAPIの歴史の長さにびっくりしました。</p><p>APIの普及について書籍内ではAmazonのアフィリエイトリンクによって広まったと記載があります。また、<a href="https://developer.ntt.com/ja/blog/556bdab4-1583-4763-839b-19ba892252cf">APIとは。歴史を振り返る</a>の記事では、「スマートフォンアプリの普及によって、スマートフォンはデータの保存領域はそれほど大きくないため、その結果、データをクラウドに保存し、それを参照する仕組みが必要になります。データの保存と参照について、APIを使うということです。」と記載があり、普段の生活で使っているサービスや物がAPIの普及の礎になったのだと感じました。</p><h2 id="美しいWeb-API-2章"><a href="#美しいWeb-API-2章" class="headerlink" title="美しいWeb API(2章)"></a>美しいWeb API(2章)</h2><p>美しいWeb APIとは書籍内では、下記の6つ述べられていました。</p><ul><li>短くて入力しやすいURI</li><li>人間が読んで理解できるURI</li><li>大文字小文字が混在していないURI</li><li>改造いやすい(Hackableな)URI</li><li>サーバ側のアーキテクチャが反映されていないURI</li><li>ルールが統一されたURI</li></ul><p>恥ずかしながら今までAPIのURIを設計する際に、どのサービスでもURIは小文字を使用してるから小文字にしていましたが、ホスト名以降のパスは大文字と小文字は区別されていることを知りました。GitHubなどでは大文字を混ぜるとステータスコード404が返ってくるそうです。</p><p>また、改造しやすい(Hackableな)URIの説明に「開発の際にいちいちドキュメントを首っ引きで見なくてもわかるAPIにする」と記載があり、設計するときはこれを意識すべきだなと思いました。</p><h2 id="レスポンスデータの設計-3章"><a href="#レスポンスデータの設計-3章" class="headerlink" title="レスポンスデータの設計(3章)"></a>レスポンスデータの設計(3章)</h2><p>書籍内(2014年)では、APIのレスポンスデータのフォーマットがJSONとXMLでどちらを採用するのがよいかについて記載されており、JSONをデフォルトとして対応して、必要があればXMLに対応するのが最も現実に即していると述べられているます。出版当時はAmazonのAPIのレスポンスデータはXMLだけしか対応していなかったそうですが、現在はJSONだけ対応しています。<a href="https://developer-docs.amazon.com/amazon-business/docs/product-search-api-v1-reference">Amazon API</a></p><p>2014年時点のGoogleトレンドによる「json api」と「xml api」のトレンド比較が書籍内では「json api」が「xml api」を追い抜いた2年後でしたが、下図の2022年11月では、「json api」の圧勝でした。</p><img src="/images/20221110a/比較.png" alt="比較.png" width="1200" height="625" loading="lazy"><p>また、1つの作業をするために複数回のアクセスを必要とするAPIは <code>Chatty API</code>と呼ばれるためできるだけ少ないアクセス回数になるような設計が必要だが、データを詰め込みすぎてはデータサイズも大きくなってしまうのでレスポンスデータの内容はユーザが取捨選択できるようにすることでデータサイズを小さくし、データの階層はなるべくフラットにすることが必要だと感じました。</p><h2 id="HTTPの仕様を最大限利用する-4章"><a href="#HTTPの仕様を最大限利用する-4章" class="headerlink" title="HTTPの仕様を最大限利用する(4章)"></a>HTTPの仕様を最大限利用する(4章)</h2><p>HTTPの仕様を最大限利用するには、キャッシュをうまく活用し、サーバへのアクセス回数を減らしサーバ側のコストも抑えつつユーザ体験を良くしていくことが大切だと感じました。</p><p>HTTPのキャッシュにはExpiration Model (期限切れモデル)とValidation Model(検証モデル)の二つのタイプがあり、その内容を下記に記載します。</p><h3 id="Expiration-Model-期限切れモデル"><a href="#Expiration-Model-期限切れモデル" class="headerlink" title="Expiration Model(期限切れモデル)"></a>Expiration Model(期限切れモデル)</h3><p>あらかじめレスポンスデータに保存期限を決めておき、期限が切れたら再度アクセスをして取得を行います。<br>いつ期限が切れるかをサーバからのレスポンスに含めて返すことで実現できます。<br>方法としては2つあり、Cache-Controlレスポンスヘッダを使い現在時刻からの秒数を表す方法とExpiresレスポンスヘッダを使い期限が切れる絶対時間を表す方法があります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Expires: Fri, 01 Jan 2016 00:00:00 GMT</span><br><span class="line">Cache-Control: max-age=3600</span><br></pre></td></tr></table></figure><p>どちらを使うかの判断基準は更新日時がわかっている場合は、Expiresを使い、更新頻度が少ないものはCache-Controlを使うと良いとのことでした。<br>また、両方指定する新しい仕様のCache-Controlが優先されます。</p><h3 id="Validation-Model-検証モデル"><a href="#Validation-Model-検証モデル" class="headerlink" title="Validation Model(検証モデル)"></a>Validation Model(検証モデル)</h3><p>保持しているキャッシュが最新かを問い合わせて、データが更新されていた場合にのみ取得を行います。<br>更新の確認には最終更新日付とエンティティタグのどちらか使います。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Last-Modified: Tue, 01 Jul 2014 00:00:00 GMT</span><br><span class="line">ETag: &quot;16ddf21b3f21fcb2433e28cd2e3b33d8&quot;</span><br></pre></td></tr></table></figure><p>*ETagの値はハッシュ値で、今回は<a href="https://phpspot.net/php/pg%EF%BC%AD%EF%BC%A4%EF%BC%95%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E8%A8%88%E7%AE%97%E3%83%84%E3%83%BC%E3%83%AB.html">こちら</a>で文字列をEtagにして生成しました。</p><p>サーバ側はその内容をみて更新がなければステータスコード304を返し、更新があればステータスコード200でデータを返すします。</p><h3 id="確実にキャッシュしない方法"><a href="#確実にキャッシュしない方法" class="headerlink" title="確実にキャッシュしない方法"></a>確実にキャッシュしない方法</h3><p>Cache-Contorlには <code>no-cache</code> と <code>no-store</code> があり、<code>no-cache</code>はLast-ModifiedとETagを使って、サーバがステータスコード304を返した時にキャッシュが有効になるため、確実にキャッシュするわけではありません。<code>no-sotre</code>はキャッシュを利用しないでサーバへアクセスします。</p><h2 id="設計変更しやすいAPI-5章"><a href="#設計変更しやすいAPI-5章" class="headerlink" title="設計変更しやすいAPI(5章)"></a>設計変更しやすいAPI(5章)</h2><p>設計変更しやすいAPIとは、古いバージョンのAPIはアクセスできるようにそれまでの変わらないデータを送り、終了する際には、事前に終了日をアナウンスして周知を行うことが大切だと感じました。<br>API側のメンテナスコストも考え、古いバージョンは提供を終了していくことも重要だと思いました。</p><h2 id="堅牢なWeb-API-6章"><a href="#堅牢なWeb-API-6章" class="headerlink" title="堅牢なWeb API(6章)"></a>堅牢なWeb API(6章)</h2><p>APIを安全にするには、悪意のある第三者による攻撃や情報漏洩を防ぐ、認証されたユーザによる不正な操作を防ぐことが大切で、新しい攻撃方法や問題はどんどん発見されているため、常に情報収集を心がけ、自身の知識のアップデートに努めててほしいと筆者は述べています。</p><h3 id="サーバとクライアント間での情報の不正入手"><a href="#サーバとクライアント間での情報の不正入手" class="headerlink" title="サーバとクライアント間での情報の不正入手"></a>サーバとクライアント間での情報の不正入手</h3><p>HTTPS化することによりHTTP通信の暗号化することが大切で、HTTPSを使えば100%安全ではなく、SSL証明書の検証をきちんと行っていない場合に問題が発生する可能性があることも意識する必要があると感じました。</p><h3 id="セキュリティ関連の-HTTP-ヘッダ"><a href="#セキュリティ関連の-HTTP-ヘッダ" class="headerlink" title="セキュリティ関連の HTTP ヘッダ"></a>セキュリティ関連の HTTP ヘッダ</h3><ul><li>X-Content-Type-Options<br>サポートが終了したIEについても書籍内で記載がありました。<br>IEではContent-Typeのメディアタイプが指定されても、それを無視してコンテンツの内容や拡張子からデータ形式を推測する機能があったため、<br><code>X-Content-Type-Options</code>で無効にしていたそうです。</li></ul><p>他にもセキュリティ関係のHTTPヘッダはあり、この辺りも設計の際にはしっかりと考慮すべきだと感じました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>200ページとそこまで多くない分量なので短時間で読むことができます。APIの設計をまともに行なったことない自分でも詰まることなく読み切ることができました。</p><p>付録のWeb APIチェックリストが個人的には復習ができるのでおすすめです。ぜひ手にとってみてください。</p><p>ちなみに、フューチャーでは<a href="/articles/20200409/">OpenAPIを使うことが多い</a>です。</p><p>個人的に、ProtobufやgRPCとGraphQLが気になっているため、<a href="/articles/20220623a/">gRPCのGo実装の新星、Connect</a>などを含めて勉強して記事を書きたいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/WebAPI/">WebAPI</category>
      
      
      <comments>https://future-architect.github.io/articles/20221110a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「AIファースト・ヘルスケア」を読んでみた感想</title>
      <link>https://future-architect.github.io/articles/20221109a/</link>
      <guid>https://future-architect.github.io/articles/20221109a/</guid>
      <pubDate>Tue, 08 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;HealthCare Innovation</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>HealthCare Innovation Group(HIG)所属の山本です。<br>2021年10月に新卒入社し、初のブログ投稿となります。</p><p>この記事は「<a href="/articles/20221031a/">秋のブログ週間</a>」の7記事目です。<br>読書の秋ということで、ヘルスケアという部署に縁がある本を読んでみようと思いました。</p><p>読んでみたのはこちら、「<a href="https://www.oreilly.co.jp/books/9784814400034/">AIファースト・ヘルスケア</a>」です。</p><img src="/images/20221109a/image.png" alt="" width="465" height="660" loading="lazy"><h2 id="書籍の概要"><a href="#書籍の概要" class="headerlink" title="書籍の概要"></a>書籍の概要</h2><p>書籍のタイトルを一見すると、画像認識や強化学習などなど昨今次々に新しい技術が開発され続けている機械学習を医療現場に活用した事例紹介や技術的課題が書いてあるのかと当初は思いました。</p><p>ですが、本書では「AIは機械学習以上のものである」ということを大きなコンセプトとしており、</p><p>機械学習に関する技術的な詳細を扱う内容ではなく、医療現場の課題を考慮し、実際に医療の現場の中心に幅広くAIを導入するための方法について議論するといった内容になってます。</p><p>本書が機械学習に焦点を当てるのではなく、あくまでAIとして扱っている思想については以下の引用で納得できる部分があります。</p><blockquote><p>AIが機械学習と同じものだと見なしてしまうと、インテリジェントシステムを構築するために使用するソフトウェア郡のうち、機械学習出ない部分を無視したり否定してしまうことになります。さらに悪いことに、AIに何ができるかという私達の想像や知識は、機械学習によって実装可能な機能だけに限定されてしまいます。</p></blockquote><p>章立てとしては以下のようになっており、興味がある章からでも比較的読みやすい構成になっています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1章　AIの神話と現実</span><br><span class="line">    1.1　AIの起源と定義</span><br><span class="line">    1.2　AIヘルスケアの神話</span><br><span class="line">    1.3　AIの神話</span><br><span class="line">    1.4　AIテクノロジーの神話</span><br><span class="line">    1.5　AIファーストなヘルスケア</span><br><span class="line"></span><br><span class="line">2章　人間中心のAI（Human-Centered AI）</span><br><span class="line">    2.1　“人間中心のAI”に向けて</span><br><span class="line">    2.2　AIと人間の交叉</span><br><span class="line">    2.3　人間の倫理とAI</span><br><span class="line">    2.4　まとめ</span><br><span class="line"></span><br><span class="line">3章　モニタリング＋AI＝個別化医療への処方箋（Rx）</span><br><span class="line">    3.1　個人の健康に対する処方箋（Rx）</span><br><span class="line">    3.2　AIを用いた継続的なモニタリング</span><br><span class="line">    3.3　IoTとAIの医療への応用</span><br><span class="line">    3.4　まとめ</span><br><span class="line"></span><br><span class="line">4章　デジタルトランスフォーメーション（DX）とAI</span><br><span class="line">    4.1　ヘルスケアDX</span><br><span class="line">    4.2　デジタル・ヘルスケア</span><br><span class="line">    4.3　予防と慢性疾患の管理</span><br><span class="line">    4.4　AIと遠隔医療</span><br><span class="line">    4.5　AIと服薬管理</span><br><span class="line">    4.6　管理事務をデジタル化・AI化する</span><br><span class="line">    4.7　まとめ</span><br><span class="line"></span><br><span class="line">5章　不都合な事実</span><br><span class="line">    5.1　医療の無駄</span><br><span class="line">    5.2　管理費用</span><br><span class="line">    5.3　医療従事者の時間</span><br><span class="line">    5.4　まとめ</span><br><span class="line"></span><br><span class="line">6章　AIを使った医療アプリケーションの登場</span><br><span class="line">    6.1　人々の健康改善</span><br><span class="line">    6.2　テクノロジーを医療現場で機能させる</span><br><span class="line">    6.3　新時代のアプリケーションやサービスの到来</span><br><span class="line">    6.4　まとめ</span><br><span class="line"></span><br><span class="line">7章　医療機関のための大規模AI</span><br><span class="line">    7.1　大規模AIの実現</span><br><span class="line">    7.2　医療の変革</span><br><span class="line">    7.3　見えないエンジン：医療プラットフォーム</span><br><span class="line">    7.4　まとめ</span><br></pre></td></tr></table></figure><h2 id="書籍の感想"><a href="#書籍の感想" class="headerlink" title="書籍の感想"></a>書籍の感想</h2><h3 id="「AIファースト・ヘルスケア」とは？"><a href="#「AIファースト・ヘルスケア」とは？" class="headerlink" title="「AIファースト・ヘルスケア」とは？"></a>「AIファースト・ヘルスケア」とは？</h3><p>この書籍の3章以降では、AIを医療現場に現状活用できること、今後の課題について医師や患者、企業を始めとした様々な視点から議論しています。</p><ul><li>IoTデバイスを用いた血圧モニタリング、管理</li><li>処方薬のボトルキャップにセンサーをつけることでの服薬・治療管理</li><li>医師の業務効率化、治療補助</li><li>保険適応や診療報酬請求の自動化</li></ul><p>実際に挙げられている例のいくつかは研究レベルでの実施、あるいは一部限定された現場での適応は事例としてあるものです。</p><p>ですが、これらのAIが世界中の医療現場全体へ適応されているか？という疑問については2022年時点では残念ながらNoと言わざるを得ないと思います。</p><p>以下書籍の引用ですが、実際にあらゆる面へのAIの適応性を考え、医療を再構築するという点において、「AIファースト・ヘルスケア」の視点は取り入れていく必要があると感じます。</p><blockquote><p>AIファースト・ヘルスケアは、AIファースト企業と同義ではありません。AIファーストは技術的な声明ではありません。ヘルスケア分野の既存の企業がテクノロジー企業と競合することでもありません。AIをあらゆる面に適応することでペイシェント・ジャーニー、患者の体験、患者の治療に違いがでるかどうかを考えることです。あるいは、ICU(集中治療室)や家庭、その他のさまざまな場所の環境やインテリジェント・オブジェクトにAIを導入することで、医療を再構築することができます。</p></blockquote><h3 id="「個別化医療」について"><a href="#「個別化医療」について" class="headerlink" title="「個別化医療」について"></a>「個別化医療」について</h3><p>書籍では主に3章で触れられていますが、”個別化医療”といったトピックはAIを医療に適応する上で今後大きなトピックになるのではないかと考えているため興味深かったです。</p><p>書評から外れていくためあまり深くは触れませんが、日本でも近年、「医師主体の医療」から「患者主体の医療」へと移り変わるような流れがあります。</p><p>例としては、「インフォームドコンセント」といった、医師から患者が病気と治療について説明を受け、同意した上で治療を行うことであったり、「セカンドオピニオン」といった、現在の主治医ではない他の医師から治療法の意見を聞く、といったことなどですね。</p><p>この時代の1歩先としては、「患者に個別化された医療」が実現される可能性も十分考えられます。</p><p>そのような時代では本書で触れられているように、AIの適応が大きなインパクトを発揮するのではないでしょうか。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>“医療にAIを導入する入門書”という観点で記載されている本書ですが、1章、2章ではAI・機械学習とはそもそもなんなのか？といった導入から始まり、各章のトピックでは様々な視点から”AI”をどのように医療現場に導入できるのかといったことが書かれており、興味深いです。</p><p>実際に医療現場やそのシステムに携わる方は自分が思うところがあるトピックを読んでも面白いとおもいますし、医療システムに関して初めて触れる方も最初から読めばわかりやすい構成となっています。</p><p>“AI×医療”というトピックが気になる方にはオススメしたい書籍です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/">機械学習</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%98%E3%83%AB%E3%82%B9%E3%82%B1%E3%82%A2/">ヘルスケア</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      
      <comments>https://future-architect.github.io/articles/20221109a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
