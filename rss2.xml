<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Wed, 13 Mar 2024 00:32:43 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Terraform連載2024 Terraformにおける変数の制御について</title>
      <link>https://future-architect.github.io/articles/20240313a/</link>
      <guid>https://future-architect.github.io/articles/20240313a/</guid>
      <pubDate>Tue, 12 Mar 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240313a/terraform_top.png&quot; alt=&quot;&quot; width=&quot;900&quot; height=&quot;628&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240313a/terraform_top.png" alt="" width="900" height="628"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。フューチャーキャリア入社1年半の森と申します。</p><p>Terraformにおける変数を、構築するインフラの要件に合わせてどのように制御していくかについてまとめます。</p><p>Terraformにおける変数制御は、構築するインフラの要件を明確化させる上で重要です。そのため、どのような変数制御があるか、ユースケースを踏まえ見ていきます。</p><h2 id="Terraformの変数制御"><a href="#Terraformの変数制御" class="headerlink" title="Terraformの変数制御"></a>Terraformの変数制御</h2><p>Terraformには型による制約の他に、下記3種類の変数の制御方法があります。</p><ul><li>validation : 変数の<strong>静的な事前チェック</strong>を実施する</li><li>precondition(v1.2以降) : 変数の<strong>動的な事前チェック</strong>を実施する</li><li>postcondition(v1.2以降) : 変数の<strong>動的な事後チェック</strong>を実施する</li></ul><p>静的・動的の可不可や、事前・事後のチェックなどの違いがありますが、図にするとこのような感じです。</p><div class="scroll"><table><thead><tr><th></th><th>動的チェック</th><th>事前チェック</th><th>事後チェック</th></tr></thead><tbody><tr><td>validation</td><td>不可</td><td>可</td><td>不可</td></tr><tr><td>precondition</td><td>可</td><td>可</td><td>不可</td></tr><tr><td>postcondition</td><td>可</td><td>不可</td><td>可</td></tr></tbody></table></div><p>具体的に1つずつ確認していきましょう。</p><h2 id="validationについて"><a href="#validationについて" class="headerlink" title="validationについて"></a>validationについて</h2><p><code>validation</code>は3つの変数制御の中でも最もシンプルで簡単な制御の方法です</p><p>例えば、AWSのEC2でEBSを暗号化したい場合、以下のように<code>validation</code>ブロックを暗号化の有無に関する変数に追加します。</p><p>このブロックの<code>condition</code>の内容で真偽を判定し、偽の場合<code>error_message</code>で指定のエラーメッセージを出力できます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">  ami           = <span class="string">&quot;ami-020283e959651b381&quot;</span></span><br><span class="line">  instance_type = <span class="string">&quot;t2.micro&quot;</span></span><br><span class="line">  subnet_id     = <span class="string">&quot;subnet-xxxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line">  ebs_block_device &#123;</span><br><span class="line">    device_name = <span class="string">&quot;/dev/sdh&quot;</span></span><br><span class="line">    encrypted   = var.ebs_encryption</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable <span class="string">&quot;ebs_encryption&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">type</span> = bool</span><br><span class="line">  validation &#123;</span><br><span class="line">    condition     = var.ebs_encryption == <span class="literal">true</span></span><br><span class="line">    error_message = <span class="string">&quot;EBS Should Be Encrypted&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  description = <span class="string">&quot;A Boolean of EBS Encryption in the EC2 Instances&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ebs_encryption</code>に<code>false</code>を指定した場合、<code>terraform plan</code>時に<code>validation</code>ブロックで指定した下記のエラーメッセージが出されます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╷</span><br><span class="line">│ Error: Invalid value <span class="keyword">for</span> variable</span><br><span class="line">│</span><br><span class="line">│   on variables.tf line 1:</span><br><span class="line">│    1: variable <span class="string">&quot;ebs_encryption&quot;</span> &#123;</span><br><span class="line">│     ├────────────────</span><br><span class="line">│     │ var.ebs_encryption is <span class="literal">false</span></span><br><span class="line">│</span><br><span class="line">│ EBS Should Be Encrypted</span><br><span class="line">│</span><br><span class="line">│ This was checked by the validation rule at variables.tf:3,3-13.</span><br></pre></td></tr></table></figure><p>このように<code>condition</code>に条件式を書いておくことで、誤ってEBSの暗号化を無効にする事のないように事前にチェックをしてくれるのが<code>validation</code>の特徴です。</p><h3 id="validationのユースケース"><a href="#validationのユースケース" class="headerlink" title="validationのユースケース"></a>validationのユースケース</h3><p>構築したいインフラに対して、あらかじめ変数の条件をハードコードすることで制約を課したい場合に<code>validation</code>ブロックが使えます。</p><h2 id="preconditionについて"><a href="#preconditionについて" class="headerlink" title="preconditionについて"></a>preconditionについて</h2><p>上述の<code>validation</code>で課すことのできる制約は静的な条件に限りました。つまり、全て条件式にハードコードして制御する必要があり、動的にAWSから情報を取得して条件を絞ることは不可能でした。</p><p>これを解決したのがTerraform v1.2から追加された<code>precondition</code>です。例えば、EC2のインスタンスタイプを無料利用枠のみに制限したい場合、<code>aws_ec2_instance_type</code>データソースから最新の無料利用枠の情報をAWSから取得し、インスタンス構築の際の条件に課すことが可能です。</p><p><code>lifecycle</code>ブロック内に<code>precondition</code>ブロックを作成し、<code>condition</code>の条件で真偽を判定し、偽の場合に<code>error_message</code>に記載されているメッセージを出力できます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">data <span class="string">&quot;aws_ec2_instance_type&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">  instance_type = <span class="string">&quot;c5.xlarge&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">  ami           = <span class="string">&quot;ami-0f7b55661ecbbe44c&quot;</span></span><br><span class="line">  instance_type = data.aws_ec2_instance_type.example.instance_type</span><br><span class="line">  subnet_id     = <span class="string">&quot;subnet-xxxxxxxxxx&quot;</span></span><br><span class="line">  lifecycle &#123;</span><br><span class="line">    precondition &#123;</span><br><span class="line">      condition     = data.aws_ec2_instance_type.example.free_tier_eligible</span><br><span class="line">      error_message = <span class="string">&quot;This instance type is not free in AWS&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のようにインスタンスタイプを<code>c5.xlarge</code>(無料利用枠でないインスタンスタイプ)でplanを流してみるとどうなるでしょうか？</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╷</span><br><span class="line">│ Error: Resource precondition failed</span><br><span class="line">│</span><br><span class="line">│   on main.tf line 18, <span class="keyword">in</span> resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;example&quot;</span>:</span><br><span class="line">│   18:       condition     = data.aws_ec2_instance_type.example.free_tier_eligible</span><br><span class="line">│     ├────────────────</span><br><span class="line">│     │ data.aws_ec2_instance_type.example.free_tier_eligible is <span class="literal">false</span></span><br><span class="line">│</span><br><span class="line">│ This instance <span class="built_in">type</span> is not free <span class="keyword">in</span> AWS</span><br></pre></td></tr></table></figure><p>指定のエラーメッセージとともに無事？planが通らなくなりました。(当然、applyもできません。)</p><p>このように<code>validation</code>と違って動的な変数の制御を可能にするのが<code>precondition</code>の特徴です。</p><h3 id="preconditionのユースケース"><a href="#preconditionのユースケース" class="headerlink" title="preconditionのユースケース"></a>preconditionのユースケース</h3><p><code>validation</code>でハードコーディングするのが難しい場合に使うのが良いでしょう。</p><p>最新のAWSからの情報が常に反映されるため、より安定的なチェックが実施できます。</p><h2 id="postconditionについて"><a href="#postconditionについて" class="headerlink" title="postconditionについて"></a>postconditionについて</h2><p><code>varidation</code>や<code>precondition</code>はapply前に変数をチェックする<strong>事前チェック</strong>でした。一方で<code>postcondition</code>は、<strong>applyの後にエラーを追跡</strong>する事後チェックが可能です。</p><p>例としてオートスケーリンググループを作成する際、AZが２つ以上あるかどうかをチェックしたい場合を考えます。書き方は<code>precondition</code>と同様で、<code>postcondition</code>ブロックの<code>condition</code>でAZの数が1よりも大きくない場合に指定のエラーメッセージを出力するようにします。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_launch_configuration&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">  image_id      = <span class="string">&quot;ami-020283e959651b381&quot;</span></span><br><span class="line">  instance_type = <span class="string">&quot;t2.micro&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_autoscaling_group&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">  name                 = <span class="string">&quot;ASG&quot;</span></span><br><span class="line">  launch_configuration = aws_launch_configuration.example.name</span><br><span class="line">  vpc_zone_identifier  = [<span class="string">&quot;subnet-xxxxxxx&quot;</span>]</span><br><span class="line">  min_size             = 1</span><br><span class="line">  max_size             = 1</span><br><span class="line"></span><br><span class="line">  lifecycle &#123;</span><br><span class="line">    postcondition &#123;</span><br><span class="line">      condition     = length(self.availability_zones) &gt; 1</span><br><span class="line">      error_message = <span class="string">&quot;You need to choose more than 1 AZ to ensure high availability&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>planをしてみましょう。この時点でAZは<code>known after apply</code>とあるので、エラーは捕捉されずにplan自体は通ります。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># aws_autoscaling_group.example will be created</span></span><br><span class="line">  + resource <span class="string">&quot;aws_autoscaling_group&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">      + arn                              = (known after apply)</span><br><span class="line">      + availability_zones               = (known after apply)</span><br><span class="line">      + default_cooldown                 = (known after apply)</span><br><span class="line">      + desired_capacity                 = (known after apply)</span><br><span class="line">      + force_delete                     = <span class="literal">false</span></span><br><span class="line">      + force_delete_warm_pool           = <span class="literal">false</span></span><br><span class="line">      + health_check_grace_period        = 300</span><br><span class="line">      + health_check_type                = (known after apply)</span><br><span class="line">      + <span class="built_in">id</span>                               = (known after apply)</span><br><span class="line">      + ignore_failed_scaling_activities = <span class="literal">false</span></span><br><span class="line">      + launch_configuration             = (known after apply)</span><br><span class="line">      + load_balancers                   = (known after apply)</span><br><span class="line">      + max_size                         = 1</span><br><span class="line">      + metrics_granularity              = <span class="string">&quot;1Minute&quot;</span></span><br><span class="line">      + min_size                         = 1</span><br><span class="line">      + name                             = <span class="string">&quot;ASG&quot;</span></span><br><span class="line">      + name_prefix                      = (known after apply)</span><br><span class="line">      + predicted_capacity               = (known after apply)</span><br><span class="line">      + protect_from_scale_in            = <span class="literal">false</span></span><br><span class="line">      + service_linked_role_arn          = (known after apply)</span><br><span class="line">      + target_group_arns                = (known after apply)</span><br><span class="line">      + vpc_zone_identifier              = [</span><br><span class="line">          + <span class="string">&quot;subnet-xxxxxxx&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">      + wait_for_capacity_timeout        = <span class="string">&quot;10m&quot;</span></span><br><span class="line">      + warm_pool_size                   = (known after apply)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># aws_launch_configuration.example will be created</span></span><br><span class="line">  + resource <span class="string">&quot;aws_launch_configuration&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">      + arn                         = (known after apply)</span><br><span class="line">      + associate_public_ip_address = (known after apply)</span><br><span class="line">      + ebs_optimized               = (known after apply)</span><br><span class="line">      + enable_monitoring           = <span class="literal">true</span></span><br><span class="line">      + <span class="built_in">id</span>                          = (known after apply)</span><br><span class="line">      + image_id                    = <span class="string">&quot;ami-020283e959651b381&quot;</span></span><br><span class="line">      + instance_type               = <span class="string">&quot;t2.micro&quot;</span></span><br><span class="line">      + key_name                    = (known after apply)</span><br><span class="line">      + name                        = (known after apply)</span><br><span class="line">      + name_prefix                 = (known after apply)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 2 to add, 0 to change, 0 to destroy.</span><br></pre></td></tr></table></figure><p>この状態でapplyすると完了後に下記のエラーが出ます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╷</span><br><span class="line">│ Error: Resource postcondition failed</span><br><span class="line">│</span><br><span class="line">│   on main.tf line 38, <span class="keyword">in</span> resource <span class="string">&quot;aws_autoscaling_group&quot;</span> <span class="string">&quot;example&quot;</span>:</span><br><span class="line">│   38:       condition     = length(self.availability_zones) &gt; 1</span><br><span class="line">│     ├────────────────</span><br><span class="line">│     │ self.availability_zones is <span class="built_in">set</span> of string with 1 element</span><br><span class="line">│</span><br><span class="line">│ You need to choose more than 1 AZ to ensure high availability</span><br></pre></td></tr></table></figure><p>エラーは出力されていますが、<code>precondition</code>と異なり、planはちゃんと通ってリソースまで作成されているのが分かります。</p><p>これが<code>postcondition</code>の事後チェックというもので、apply後へのリソースの変数に対するチェックを実施することが可能になっています。</p><h3 id="postconditionのユースケース"><a href="#postconditionのユースケース" class="headerlink" title="postconditionのユースケース"></a>postconditionのユースケース</h3><p><code>validation</code>や<code>precondition</code>などの事前チェックのみで補足しきれない条件を課すのが良いでしょう。</p><p>上記のような例だと、apply時にリソースが作成されてしまうので、事前チェックのようにリソース作成前に制限を課すような強い制約ができないことには注意が必要です。</p><h2 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h2><p>インスタンスタイプの選定で<code>precondition</code>を使いましたが、<code>precondition</code>→<code>postcondition</code>と単純に置き換えてみたらどうなるでしょうか？</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">data <span class="string">&quot;aws_ec2_instance_type&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">  instance_type = <span class="string">&quot;c5.xlarge&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">  ami           = <span class="string">&quot;ami-0f7b55661ecbbe44c&quot;</span></span><br><span class="line">  instance_type = data.aws_ec2_instance_type.example.instance_type</span><br><span class="line">  subnet_id     = <span class="string">&quot;subnet-xxxxxxx&quot;</span></span><br><span class="line">  lifecycle &#123;</span><br><span class="line">    postcondition &#123;</span><br><span class="line">      condition     = data.aws_ec2_instance_type.example.free_tier_eligible</span><br><span class="line">      error_message = <span class="string">&quot;This instance type is not free in AWS&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記は<a href="#precondition%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">preconditionについて</a>におけるコードで<code>precondition</code>が<code>postcondition</code>に置き換わっているだけです。</p><p>planで下記エラーが出てきます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:</span><br><span class="line">  + create</span><br><span class="line"></span><br><span class="line">Terraform planned the following actions, but <span class="keyword">then</span> encountered a problem:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># aws_instance.example will be created</span></span><br><span class="line">  + resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">      + ami                                  = <span class="string">&quot;ami-0f7b55661ecbbe44c&quot;</span></span><br><span class="line">      + arn                                  = (known after apply)</span><br><span class="line">      + associate_public_ip_address          = (known after apply)</span><br><span class="line">      + availability_zone                    = (known after apply)</span><br><span class="line">      + cpu_core_count                       = (known after apply)</span><br><span class="line">      + cpu_threads_per_core                 = (known after apply)</span><br><span class="line">      + disable_api_stop                     = (known after apply)</span><br><span class="line">      + disable_api_termination              = (known after apply)</span><br><span class="line">      + ebs_optimized                        = (known after apply)</span><br><span class="line">      + get_password_data                    = <span class="literal">false</span></span><br><span class="line">      + host_id                              = (known after apply)</span><br><span class="line">      + host_resource_group_arn              = (known after apply)</span><br><span class="line">      + iam_instance_profile                 = (known after apply)</span><br><span class="line">      + <span class="built_in">id</span>                                   = (known after apply)</span><br><span class="line">      + instance_initiated_shutdown_behavior = (known after apply)</span><br><span class="line">      + instance_lifecycle                   = (known after apply)</span><br><span class="line">      + instance_state                       = (known after apply)</span><br><span class="line">      + instance_type                        = <span class="string">&quot;c5.xlarge&quot;</span></span><br><span class="line">      + ipv6_address_count                   = (known after apply)</span><br><span class="line">      + ipv6_addresses                       = (known after apply)</span><br><span class="line">      + key_name                             = (known after apply)</span><br><span class="line">      + monitoring                           = (known after apply)</span><br><span class="line">      + outpost_arn                          = (known after apply)</span><br><span class="line">      + password_data                        = (known after apply)</span><br><span class="line">      + placement_group                      = (known after apply)</span><br><span class="line">      + placement_partition_number           = (known after apply)</span><br><span class="line">      + primary_network_interface_id         = (known after apply)</span><br><span class="line">      + private_dns                          = (known after apply)</span><br><span class="line">      + private_ip                           = (known after apply)</span><br><span class="line">      + public_dns                           = (known after apply)</span><br><span class="line">      + public_ip                            = (known after apply)</span><br><span class="line">      + secondary_private_ips                = (known after apply)</span><br><span class="line">      + security_groups                      = (known after apply)</span><br><span class="line">      + source_dest_check                    = <span class="literal">true</span></span><br><span class="line">      + spot_instance_request_id             = (known after apply)</span><br><span class="line">      + subnet_id                            = <span class="string">&quot;subnet-xxxxxxx&quot;</span></span><br><span class="line">      + tags_all                             = (known after apply)</span><br><span class="line">      + tenancy                              = (known after apply)</span><br><span class="line">      + user_data                            = (known after apply)</span><br><span class="line">      + user_data_base64                     = (known after apply)</span><br><span class="line">      + user_data_replace_on_change          = <span class="literal">false</span></span><br><span class="line">      + vpc_security_group_ids               = (known after apply)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 1 to add, 0 to change, 0 to destroy.</span><br><span class="line">╷</span><br><span class="line">│ Error: Resource postcondition failed</span><br><span class="line">│</span><br><span class="line">│   on main.tf line 11, <span class="keyword">in</span> resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;example&quot;</span>:</span><br><span class="line">│   11:       condition     = data.aws_ec2_instance_type.example.free_tier_eligible</span><br><span class="line">│     ├────────────────</span><br><span class="line">│     │ data.aws_ec2_instance_type.example.free_tier_eligible is <span class="literal">false</span></span><br><span class="line">│</span><br><span class="line">│ This instance <span class="built_in">type</span> is not free <span class="keyword">in</span> AWS</span><br></pre></td></tr></table></figure><p>エラーメッセージは<code>precondition</code>とほぼ変わらないのですが、<code>postcondition</code>では plan によるリソース出力が成功します（<code>precondition</code>ではplanが失敗してリソース出力がされませんでした）。</p><p>これは<code>postcondition</code>が事後チェックであることを反映している例で、データソースやリソースが取得された後で値が評価されていることを如実に表しています。</p><p>こうなると <code>postcondition</code>で全部チェックしてしまっても良い気もしますが、事後チェックであるか事後チェックであるかを明示するため、<code>precondition</code>で制御できる箇所は<code>precondition</code>で制御するようにしましょう。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>多くの変数に対して制限を課すのはなかなか大変で工数を取る上、可読性にも影響します。</p><p>修正の際にupdate in placeなどで気軽にアップデート出来ない変数(EBS暗号化の有無など)に対する制約から優先的に実施するのが個人的には良いと思います。</p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="https://www.oreilly.co.jp/books/9784814400522/">詳解Terraform</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform1-2/">Terraform1.2</category>
      
      
      <comments>https://future-architect.github.io/articles/20240313a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Terraform連載2024 hclwriteを用いたtfコード生成入門</title>
      <link>https://future-architect.github.io/articles/20240312a/</link>
      <guid>https://future-architect.github.io/articles/20240312a/</guid>
      <pubDate>Mon, 11 Mar 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20240311a/&quot;&gt;Terraform 連載2024&lt;/a&gt; の2本目の記事です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20240311a/">Terraform 連載2024</a> の2本目の記事です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。</p><p>Terraformファイルをコード生成するため、hclwriteというGoパッケージの使い方を調べました。</p><h2 id="モチベーション"><a href="#モチベーション" class="headerlink" title="モチベーション"></a>モチベーション</h2><p>ある複数のリソースをセットで定義する設計開発ルールがあったとします。AWSの例ですが、以下のようにDynamoDBとその監視をCloudwatch Metricsを用いてセットで行いたいとします。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DynamoDB</span></span><br><span class="line">resource <span class="string">&quot;aws_dynamodb_table&quot;</span> <span class="string">&quot;myproduct_read&quot;</span> &#123;</span><br><span class="line">  name         = <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-myproduct-read&quot;</span></span><br><span class="line">  billing_mode = <span class="string">&quot;PAY_PER_REQUEST&quot;</span></span><br><span class="line">  hash_key     = <span class="string">&quot;user_id&quot;</span></span><br><span class="line">  range_key    = <span class="string">&quot;content_id&quot;</span></span><br><span class="line"></span><br><span class="line">  deletion_protection_enabled = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  attribute &#123;</span><br><span class="line">    name = <span class="string">&quot;user_id&quot;</span></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;S&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  attribute &#123;</span><br><span class="line">    name = <span class="string">&quot;content_id&quot;</span></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;S&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># DynamoDBに対して、Cloudwatch Metricsで監視する。例では1件だが複数あるとする</span></span><br><span class="line">resource <span class="string">&quot;aws_cloudwatch_metric_alarm&quot;</span> <span class="string">&quot;myproduct_read_dynamodb_throttledrequests&quot;</span> &#123;</span><br><span class="line">  alarm_name          = <span class="string">&quot;<span class="variable">$&#123;aws_dynamodb_table.myproduct_read.name&#125;</span>-ThrottledRequests&quot;</span></span><br><span class="line">  comparison_operator = <span class="string">&quot;GreaterThanOrEqualToThreshold&quot;</span></span><br><span class="line">  datapoints_to_alarm = <span class="string">&quot;1&quot;</span></span><br><span class="line">  evaluation_periods  = <span class="string">&quot;1&quot;</span></span><br><span class="line">  metric_name         = <span class="string">&quot;ThrottledRequests&quot;</span></span><br><span class="line">  namespace           = <span class="string">&quot;AWS/DynamoDB&quot;</span></span><br><span class="line">  period              = <span class="string">&quot;60&quot;</span></span><br><span class="line">  statistic           = <span class="string">&quot;Maximum&quot;</span></span><br><span class="line">  threshold           = <span class="string">&quot;1&quot;</span></span><br><span class="line">  alarm_actions       = aws_sns_topic.myproduct_alert.arn</span><br><span class="line">  dimensions = &#123;</span><br><span class="line">    TableName = aws_dynamodb_table.read.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここではスロットリング数だけを監視していますが、もう1~5個くらい監視したい項目があったとします。このような、あるリソースの追加に合わせて、整合性を保って別のリソースを追加することは難しく、抜け漏れがちです。</p><p>正攻法だとTerraform module化でしょう。しかし、このケースではモジュール化するにしてはリソース数が少なく、モジュール化すること自体が新規参画した開発者にとって認知負荷が高いことを考えると、もう少しプロダクトが成長して、関連するリソースが増えるかどうかを待って、対応を考えたいケースもあるでしょう。もちろんチームの方針としてこれくらいでもすぐにモジュール化に取り掛かる場合もあるかと思いますが、チームのTerraform習熟度にバラツキがあり設計パターンを抑えたいなど、様々な背景があったとします。</p><p>こうした場面で、あるTerraformで定義したリソース（ここではDynamoDB）をインプットに別のコード（Cloudwatch Metrics）を生成し、モジュール化しなくとも不整合が生じにくい開発フローを整備したいと思います。これでモジュール化の判断を先送りにできますね。</p><img src="/images/20240312a/dynamodb_hclwrite.drawio.png" alt="" width="1200" height="631" loading="lazy"><p>ちなみに、通常、DynamoDBはそこまで数が増えない（ほいほい増えるようであればおそらくDynamoDBを使うべきではない）し、監視項目もそう変更しないだろうから、コード生成もモジュール化しなくても良いんじゃないか？という意見もあるかと思いますが、それはそれとします。</p><h2 id="整合性チェック"><a href="#整合性チェック" class="headerlink" title="整合性チェック"></a>整合性チェック</h2><p>この回のケースではRego（<a href="https://www.conftest.dev/">Conftest</a>）を使って整合性チェックを入れるのも有効でしょう。しかし開発チームにRego経験者はほとんど供給され無いと思うので、学習コストが多少なりとも掛かります。また、不整合を検知できるのであれば自動でFixしてくれた方が開発者フレンドリーです。</p><p>そのため、この記事では .tf ファイルの自動生成に注目します。</p><h2 id="利用パッケージ"><a href="#利用パッケージ" class="headerlink" title="利用パッケージ"></a>利用パッケージ</h2><p>Terraformの .tf コードをパース、生成する方法として有名なのは、<a href="https://github.com/hashicorp/hcl">hashicorp&#x2F;hcl</a> を用いることです。Go言語でインポートしてライブラリとして使えます。HCLはTerraformの.tfファイルが利用するファイルフォーマットのことです。</p><p>管理されているパッケージはいくつかあり、以下のようなものが含まれていて、いい感じに使い分けるリテラシーが求められます。</p><p>パッケージの概略はthaimさんのZenn記事の<a href="https://zenn.dev/thaim/articles/2023-03-go-hcl">HCLファイルを hashicorp&#x2F;hcl で読み書きする</a>が実装もありイメージしやすいです。</p><p>ここでも簡単に一覧を載せます。</p><div class="scroll"><table><thead><tr><th>Name</th><th>Memo</th></tr></thead><tbody><tr><td>hclsimple</td><td>HCLをGoの構造体にマッピングする、encoding&#x2F;json 的な高レベルなパッケージです。しかし、拡張子.tf には対応しておらず、全ての.tfファイルに対応していないことを言外に伝えています。</td></tr><tr><td>hclparse</td><td>HCLファイルをパースして、結果を独自のStructで取得できます</td></tr><tr><td>hclwrite</td><td>HCLファイルを加工するのに適したペッケージです。元のHCLファイルの構造を壊さず、リソースの追加&#x2F;削除、コメントや属性などの編集を行えます</td></tr><tr><td>hclsyntax</td><td>HCLを解析してASTを作るパッケージです。hclparseなどにも使われています</td></tr></tbody></table></div><p>今回はTerraformコードの細かい解析は不要であるため、hclwriteパッケージを利用します。</p><h2 id="hclwrite-でファイル読み込み"><a href="#hclwrite-でファイル読み込み" class="headerlink" title="hclwrite でファイル読み込み"></a>hclwrite でファイル読み込み</h2><p>バージョンは <code>hashicorp/hcl/v2 v2.20.0</code> を利用します。</p><p>まずは.tfファイルを読み込みます。</p><p><code>hclwrite.ParseConfig()</code> でパースしたいファイルを指定します。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/hashicorp/hcl/v2&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hashicorp/hcl/v2/hclwrite&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) == <span class="number">1</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Usage: %s &lt;filepath&gt;\n&quot;</span>, os.Args[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hclFilePath := os.Args[<span class="number">1</span>]</span><br><span class="line">file, err := os.ReadFile(os.Args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Usage: %s &lt;filepath&gt;\n&quot;</span>, os.Args[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tfFile, diags := hclwrite.ParseConfig(file, hclFilePath, hcl.Pos&#123;Line: <span class="number">1</span>, Column: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> diags != <span class="literal">nil</span> &amp;&amp; diags.HasErrors() &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;hclwrite parse: %s&quot;</span>, diags)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> tfFile == <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;parse result is nil: %s&quot;</span>, hclFilePath)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">blocks := tfFile.Body().Blocks()</span><br><span class="line">referenceNames := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(blocks))</span><br><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> blocks &#123;</span><br><span class="line"><span class="keyword">if</span> b.Type() != <span class="string">&quot;resource&quot;</span> || b.Labels()[<span class="number">0</span>] != <span class="string">&quot;aws_dynamodb_table&quot;</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">referenceNames = <span class="built_in">append</span>(referenceNames, b.Labels()[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(referenceNames)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果の取得は <code>tfFile.Body().Blocks()</code> という部分で取得できます。</p><p>Blockとはなにかですが、 <code>resource</code>、<code>module</code>、<code>locals</code> のようなTerraform上でインデントをともなうような塊を指します。例えば、<code>resource &quot;aws_dynamodb_table&quot; &quot;table1&quot; &#123;...&#125;</code> といった定義が10あれば、for文が10呼ばれます。</p><p>次にわかりにくいのが <code>b.Labels()</code> の部分です。これは <code>aws_dynamodb_table</code>, <code>table1</code> といったブロックを開くときに設定されるTerraformのリソースタイプ、リソース名が入ります。</p><p>今回はTerraformのリソース名を取得して表示するとします。</p><p>次のようなファイルがあるとします。</p><figure class="highlight sh"><figcaption><span>dynamodb_table.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_dynamodb_table&quot;</span> <span class="string">&quot;myproduct_read&quot;</span> &#123;</span><br><span class="line">  name         = <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-myproduct-read&quot;</span></span><br><span class="line">  billing_mode = <span class="string">&quot;PAY_PER_REQUEST&quot;</span></span><br><span class="line">  hash_key     = <span class="string">&quot;user_id&quot;</span></span><br><span class="line">  range_key    = <span class="string">&quot;content_id&quot;</span></span><br><span class="line"></span><br><span class="line">  deletion_protection_enabled = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  attribute &#123;</span><br><span class="line">    name = <span class="string">&quot;user_id&quot;</span></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;S&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  attribute &#123;</span><br><span class="line">    name = <span class="string">&quot;content_id&quot;</span></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;S&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_dynamodb_table&quot;</span> <span class="string">&quot;myproduct_content&quot;</span> &#123;</span><br><span class="line">  name         = <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-myproduct-read&quot;</span></span><br><span class="line">  billing_mode = <span class="string">&quot;PAY_PER_REQUEST&quot;</span></span><br><span class="line">  hash_key     = <span class="string">&quot;content_id&quot;</span></span><br><span class="line"></span><br><span class="line">  deletion_protection_enabled = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  attribute &#123;</span><br><span class="line">    name = <span class="string">&quot;content_id&quot;</span></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;S&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>さきほどのコードを実行すると、Terraformリソース名が取れています。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go run . ../example/dynamodb_table.tf</span><br><span class="line">[myproduct_read myproduct_content]</span><br></pre></td></tr></table></figure><p>属性を取得するためには、<code>b.Body().GetAttribute()</code> などで取得できますので、目的に応じて条件を追加することができます。</p><h2 id="空リソース生成"><a href="#空リソース生成" class="headerlink" title="空リソース生成"></a>空リソース生成</h2><p>次に.tfフィアルを生成します。</p><p><code>hclwrite.NewFile()</code> で初期化し、そこにブロック（Terraformリソース）を追加していきます。</p><p>今回は新規コード生成なので、先頭に <code>// DO NOT EDIT</code> コメントを追加しましょう。</p><p>hclwriteを用いるとコメントを追加する便利な関数は（おそらく）存在しないので、いきなりですがトークンレベルの操作となる、<code>AppendUnstructedTokens()</code> を用います。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"></span><br><span class="line">newFile := hclwrite.NewFile()</span><br><span class="line">newFile.Body().AppendUnstructuredTokens(hclwrite.Tokens&#123; <span class="comment">// 先頭行にコメント追加</span></span><br><span class="line">&#123;</span><br><span class="line">Type:  hclsyntax.TokenIdent,</span><br><span class="line">Bytes: []<span class="type">byte</span>(<span class="string">&quot;// DO NOT EDIT, MADE BY hclwrite-dynamodb-generator\n&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, resourceName := <span class="keyword">range</span> referenceNames &#123;</span><br><span class="line">newFile.Body().AppendUnstructuredTokens(hclwrite.Tokens&#123;</span><br><span class="line">&#123;Type: hclsyntax.TokenNewline, Bytes: []<span class="type">byte</span>(<span class="string">&quot;\n&quot;</span>)&#125;, <span class="comment">// 先頭行に改行を入れる</span></span><br><span class="line">&#125;)</span><br><span class="line">labels := []<span class="type">string</span>&#123;<span class="string">&quot;aws_cloudwatch_metric_alarm&quot;</span>, fmt.Sprintf(<span class="string">&quot;dynamodb_throttledrequests_%s&quot;</span>, resourceName)&#125;</span><br><span class="line">newFile.Body().AppendNewBlock(<span class="string">&quot;resource&quot;</span>, labels)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out := hclwrite.Format(newFile.BuildTokens(<span class="literal">nil</span>).Bytes())</span><br><span class="line">_, _ = fmt.Fprint(os.Stdout, <span class="type">string</span>(out))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for 文の中にある、 <code>AppendNewBlock()</code> が今回出力したい本丸の、<code>aws_cloudwatch_metric_alarm</code> リソースを追加する部分です。</p><p>実行すると次のような空リソースが生成されます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go run . ../example/dynamodb_table_one.tf</span><br><span class="line">// DO NOT EDIT, MADE BY hclwrite-dynamodb-generator</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_cloudwatch_metric_alarm&quot;</span> <span class="string">&quot;dynamodb_throttledrequests_myproduct_read&quot;</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_cloudwatch_metric_alarm&quot;</span> <span class="string">&quot;dynamodb_throttledrequests_myproduct_content&quot;</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性の追加"><a href="#属性の追加" class="headerlink" title="属性の追加"></a>属性の追加</h2><p><code>SetAttributeRaw()</code> を用いて各属性ごとに項目を追加していきます。 <code>SetAttributeRaw()</code> は低レベルのAPIで、トークンを直接追加します。今回、<code>&quot;$&#123;aws_dynamodb_table.myproduct_read.name&#125;-throttledrequests&quot;</code> といったリファレンスを追加したいため利用しています。<code>SetAttributeValue()</code> を使う方法だと、 <code>$</code> がエスケープされて、 <code>$$</code> と出力されてしまうためです。</p><p>また、特記したいことは<a href="https://github.com/zclconf/go-cty">zclconf&#x2F;go-cty</a> というライブラリの型で値を競ってしないとならないことです。ここでさらに別のライブラリ？と一瞬焦る気持ちがありますが、慣れていきましょう。</p><p>属性の型がオブジェクトであり、その中にリファレンスが入ると、再び <code>AppendNewBlock()</code> を呼び出す必要があるなど、生成したい定義によっては試行錯誤する必要があるので、注意してください。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, resourceName := <span class="keyword">range</span> referenceNames &#123;</span><br><span class="line">newFile.Body().AppendUnstructuredTokens(hclwrite.Tokens&#123;</span><br><span class="line">&#123;Type: hclsyntax.TokenNewline, Bytes: []<span class="type">byte</span>(<span class="string">&quot;\n&quot;</span>)&#125;, <span class="comment">// 先頭行に改行を入れる</span></span><br><span class="line">&#125;)</span><br><span class="line">labels := []<span class="type">string</span>&#123;<span class="string">&quot;aws_cloudwatch_metric_alarm&quot;</span>, fmt.Sprintf(<span class="string">&quot;dynamodb_throttledrequests_%s&quot;</span>, resourceName)&#125;</span><br><span class="line">resource := newFile.Body().AppendNewBlock(<span class="string">&quot;resource&quot;</span>, labels).Body()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性の定義</span></span><br><span class="line">resource.SetAttributeRaw(<span class="string">&quot;alarm_name&quot;</span>, hclwrite.Tokens&#123;</span><br><span class="line">&#123;</span><br><span class="line">Type:  hclsyntax.TokenIdent,</span><br><span class="line">Bytes: []<span class="type">byte</span>(<span class="string">`&quot;$&#123;aws_dynamodb_table.myproduct_read.name&#125;-throttledrequests&quot;`</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">resource.SetAttributeValue(<span class="string">&quot;comparison_operator&quot;</span>, cty.StringVal(<span class="string">&quot;GreaterThanOrEqualToThreshold&quot;</span>))</span><br><span class="line">resource.SetAttributeValue(<span class="string">&quot;datapoints_to_alarm&quot;</span>, cty.StringVal(<span class="string">&quot;1&quot;</span>))</span><br><span class="line">resource.SetAttributeValue(<span class="string">&quot;evaluation_periods&quot;</span>, cty.StringVal(<span class="string">&quot;1&quot;</span>))</span><br><span class="line">resource.SetAttributeValue(<span class="string">&quot;metric_name&quot;</span>, cty.StringVal(<span class="string">&quot;ThrottledRequests&quot;</span>))</span><br><span class="line">resource.SetAttributeValue(<span class="string">&quot;namespace&quot;</span>, cty.StringVal(<span class="string">&quot;AWS/DynamoDB&quot;</span>))</span><br><span class="line">resource.SetAttributeValue(<span class="string">&quot;period&quot;</span>, cty.StringVal(<span class="string">&quot;60&quot;</span>))</span><br><span class="line">resource.SetAttributeValue(<span class="string">&quot;statistic&quot;</span>, cty.StringVal(<span class="string">&quot;Maximum&quot;</span>))</span><br><span class="line">resource.SetAttributeValue(<span class="string">&quot;threshold&quot;</span>, cty.StringVal(<span class="string">&quot;1&quot;</span>))</span><br><span class="line">resource.SetAttributeTraversal(<span class="string">&quot;alarm_actions&quot;</span>, hcl.Traversal&#123;</span><br><span class="line">hcl.TraverseRoot&#123;Name: <span class="string">&quot;aws_sns_topic&quot;</span>&#125;,</span><br><span class="line">hcl.TraverseAttr&#123;Name: <span class="string">&quot;myproduct_alert&quot;</span>&#125;,</span><br><span class="line">hcl.TraverseAttr&#123;Name: <span class="string">&quot;arn&quot;</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">dimensions := resource.AppendNewBlock(<span class="string">&quot;dimensions&quot;</span>, <span class="literal">nil</span>).Body()</span><br><span class="line">dimensions.SetAttributeTraversal(<span class="string">&quot;TableName&quot;</span>, hcl.Traversal&#123;</span><br><span class="line">hcl.TraverseRoot&#123;Name: <span class="string">&quot;aws_dynamodb_table&quot;</span>&#125;,</span><br><span class="line">hcl.TraverseAttr&#123;Name: <span class="string">&quot;myproduct_read&quot;</span>&#125;,</span><br><span class="line">hcl.TraverseAttr&#123;Name: <span class="string">&quot;name&quot;</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out := hclwrite.Format(newFile.BuildTokens(<span class="literal">nil</span>).Bytes())</span><br><span class="line">_, _ = fmt.Fprint(os.Stdout, <span class="type">string</span>(out))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを実行すると次のようにTerraformコードが生成されます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go run . example/dynamodb_table_one.tf</span><br><span class="line">// DO NOT EDIT, MADE BY hclwrite-dynamodb-generator</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_cloudwatch_metric_alarm&quot;</span> <span class="string">&quot;dynamodb_throttledrequests_myproduct_read&quot;</span> &#123;</span><br><span class="line">  alarm_name          = <span class="string">&quot;<span class="variable">$&#123;aws_dynamodb_table.myproduct_read.name&#125;</span>-throttledrequests&quot;</span></span><br><span class="line">  comparison_operator = <span class="string">&quot;GreaterThanOrEqualToThreshold&quot;</span></span><br><span class="line">  datapoints_to_alarm = <span class="string">&quot;1&quot;</span></span><br><span class="line">  evaluation_periods  = <span class="string">&quot;1&quot;</span></span><br><span class="line">  metric_name         = <span class="string">&quot;ThrottledRequests&quot;</span></span><br><span class="line">  namespace           = <span class="string">&quot;AWS/DynamoDB&quot;</span></span><br><span class="line">  period              = <span class="string">&quot;60&quot;</span></span><br><span class="line">  statistic           = <span class="string">&quot;Maximum&quot;</span></span><br><span class="line">  threshold           = <span class="string">&quot;1&quot;</span></span><br><span class="line">  alarm_actions       = aws_sns_topic.myproduct_alert.arn</span><br><span class="line">  dimensions &#123;</span><br><span class="line">    TableName = aws_dynamodb_table.myproduct_read.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_cloudwatch_metric_alarm&quot;</span> <span class="string">&quot;dynamodb_throttledrequests_myproduct_content&quot;</span> &#123;</span><br><span class="line">  alarm_name          = <span class="string">&quot;<span class="variable">$&#123;aws_dynamodb_table.myproduct_read.name&#125;</span>-throttledrequests&quot;</span></span><br><span class="line">  comparison_operator = <span class="string">&quot;GreaterThanOrEqualToThreshold&quot;</span></span><br><span class="line">  datapoints_to_alarm = <span class="string">&quot;1&quot;</span></span><br><span class="line">  evaluation_periods  = <span class="string">&quot;1&quot;</span></span><br><span class="line">  metric_name         = <span class="string">&quot;ThrottledRequests&quot;</span></span><br><span class="line">  namespace           = <span class="string">&quot;AWS/DynamoDB&quot;</span></span><br><span class="line">  period              = <span class="string">&quot;60&quot;</span></span><br><span class="line">  statistic           = <span class="string">&quot;Maximum&quot;</span></span><br><span class="line">  threshold           = <span class="string">&quot;1&quot;</span></span><br><span class="line">  alarm_actions       = aws_sns_topic.myproduct_alert.arn</span><br><span class="line">  dimensions &#123;</span><br><span class="line">    TableName = aws_dynamodb_table.myproduct_read.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hclwriteパッケージ自体は文法チェックを行いません。そのため　<code>alarm_actions       = aws_sns_topic.myproduct_alert.arn</code> としれっと存在しないリソースを参照してもエラーにはなりません。</p><p>説明を省きましたが <code>hclwrite.Format()</code> でフォーマットをかけられるので、お手軽です。</p><p>今回使用したコードの全量は↓のリポジトリにコミットしています。</p><p><a href="https://github.com/ma91n/hclwrite-dynamodb">https://github.com/ma91n/hclwrite-dynamodb</a></p><h2 id="hclwriteパッケージを利用すべきか"><a href="#hclwriteパッケージを利用すべきか" class="headerlink" title="hclwriteパッケージを利用すべきか"></a>hclwriteパッケージを利用すべきか</h2><p>生成したいTerraformコードがどんなものであるかによりますが、あるTerraformコードを読み取って別のファイルを生成するだけであれば、hclwriteパッケージを用いてもそれほど難しくはありません。</p><p>今回の内容であれば、パース部分もHCLの構造を無視し、スクラッチで解析しても良さそうなレベルではあります。しかし、複数のリソースタイプが混ざったり、ある属性の条件でのみを対象としたいといった拡張はしばしばありえるので、こういったライブラリを用いてパースすると良いでしょう。</p><p>一方で生成側です。今回の用途だと、既存ファイルの更新ではなく新規生成で、成果物の構造のシンプルです。この場合は、<code>hclwrite</code> の仕様を学んでゴリッと出力するより、Go Templateなどお好きなてプレートエンジンで生成するほうが遥かにメンテナンスがしやすいいと思います。フォーマットだけは使っても良いかもしれませんが、今回の用途では割に合わない気がしました。</p><p><code>hclwrite</code> ですが主な用途はすでに存在するTerraformのコードを破壊せず、一律でタグを付けたり属性を変えたりといった用途に向いているパッケージのようです。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>hclwriteというパッケージを用いてあるTerraformリソースから、別のリソースを生成しました。新規生成については別のテンプレートエンジンを利用する方が良いかなと個人的には思います。</p><p>こういった開発フローは少し特殊で、通常はTerraformモジュール化などを試みると思いますが、モジュール化するにしてはリソース対象が少なく、ちょっと抽象度が弱いんだよな～といった場面では、コード生成案も考えてみても良いのではないでしょうか。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/hclwrite/">hclwrite</category>
      
      
      <comments>https://future-architect.github.io/articles/20240312a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Terraform連載2024を開始します &amp; TerraformにおけるDR戦略を考える</title>
      <link>https://future-architect.github.io/articles/20240311a/</link>
      <guid>https://future-architect.github.io/articles/20240311a/</guid>
      <pubDate>Sun, 10 Mar 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240311a/terraform.png&quot; alt=&quot;terraform.png&quot; width=&quot;800&quot; height=&quot;418&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240311a/terraform.png" alt="terraform.png" width="800" height="418" loading="lazy"><p>こんにちは。技術ブログ運営の伊藤です。<br>本日、3&#x2F;11よりTerraform連載を開始します。</p><h2 id="昨年の連載振り返りと今年の連載について"><a href="#昨年の連載振り返りと今年の連載について" class="headerlink" title="昨年の連載振り返りと今年の連載について"></a>昨年の連載振り返りと今年の連載について</h2><p>昨年はTerraform v1.4がリリースされたことをトリガーとして技術ブログでは初となるTerraform連載2023を開催しました。その時の募集形態は以下です。</p><blockquote><ul><li>v1.4のリリース内容</li><li>これまでTerraformを触ってきたノウハウ、Tips</li><li>エコシステムについての調査、学習</li></ul></blockquote><p>今年の連載については上記の中から1点目を除き、社内に募集をかけました。すると、募集開始後数日であっという間に10人強集まり、社内でも利用者が増えていること、ナレッジが蓄積されてきていることを感じています。</p><p>さて、目を世の中に向けてみて、どれくらいTerraformに対しての興味関心があるのかと思い、Google Trendsで調べたところ、以下のグラフとなりました。</p><img src="/images/20240311a/スクリーンショット_2024-03-11_0.02.27.png" alt="" width="1000" height="244" loading="lazy">注) 青: Terraform, 赤: CloudFormation<p>Terraformとパブリッククラウドの中では利用比率が最も高い、AWSのCloudFormationとの比較ですが、大きく差が開いており、その興味関心度を伺うことができます。ちなみに、v1.0のリリースが2021年の夏頃でしたが、その半年後の2022年に入って以降が伸びているようです。</p><h2 id="連載スケジュール"><a href="#連載スケジュール" class="headerlink" title="連載スケジュール"></a>連載スケジュール</h2><p>今回の連載は10人を超すメンバーでお送りします。まだテーマ未定のところもありますが、公開時までのお楽しみということでしばらくお待ちください。</p><p>また、テーマが決まっているものも変更になったり順番が前後する可能性もありますが、ご了承ください。</p><div class="scroll"><table><thead><tr><th>日付</th><th>投稿者</th><th>テーマ</th></tr></thead><tbody><tr><td>3&#x2F;11(月)</td><td>伊藤太斉</td><td>本インデックス記事 &amp; <br> TerraformにおけるDR戦略を考える</td></tr><tr><td>3&#x2F;12(火)</td><td>真野隼記</td><td><a href="/articles/20240312a/">hclwriteを用いたtfコード生成入門</a></td></tr><tr><td>3&#x2F;13(水)</td><td>森大作</td><td><a href="/articles/20240313a/">Terraformにおける変数の制御について</a></td></tr><tr><td>3&#x2F;14(木)</td><td>原田達也</td><td>Stateの統合</td></tr><tr><td>3&#x2F;15(金)</td><td>岸下優介</td><td>TerraformのState,Variableについて</td></tr><tr><td>3&#x2F;18(月)</td><td>棚井龍之介</td><td>Terraformの実装を読む</td></tr><tr><td>3&#x2F;19(火)</td><td>原木翔</td><td>cfn-guard</td></tr><tr><td>3&#x2F;20(水)</td><td>大岩潤矢</td><td>TBD</td></tr><tr><td>3&#x2F;21(木)</td><td>前原応光</td><td>TerraformのMock</td></tr><tr><td>3&#x2F;22(金)</td><td>小林弘樹</td><td>TBD</td></tr><tr><td>3&#x2F;25(月)</td><td>真鍋優</td><td>TBD</td></tr></tbody></table></div><hr><h2 id="Terraformで考えるマルチリージョン構成"><a href="#Terraformで考えるマルチリージョン構成" class="headerlink" title="Terraformで考えるマルチリージョン構成"></a>Terraformで考えるマルチリージョン構成</h2><p>Terraform、もといIaCのメリット、思想として謳われるものの中には可搬性、再利用性があります。再利用性を上げておくことで、同じ構成のインフラ、サービス群を一括して作成することができ、手作業と比べた時の再現性、信頼度が大きくなることはいうまでもありません。</p><p>具体、業務を前提としたITインフラ環境を考えたときに、社会インフラとして稼働しているサービスや、どんな状況であろうとも24時間365日稼働していないといけないサービス、企業があります。このような企業では災害対策環境として、地理的に大きく離れたエリアにDCを構えることで、ある1点で甚大な災害が発生してサービス断になったとしても、別のDCで継続することが可能になります(もちろん一定時間のサービス断は発生しますが、数日、数ヶ月単位になることはほぼないでしょう）。</p><p>この災害対策環境（この後はDR環境と記載します）については…</p><ol><li>本環境と100％同じ環境で常時稼働</li><li>本環境→DR環境へ切り替え時に100%にする（一部はDRで常時稼働）</li><li>DRを一括して稼働（直前までDRでの稼働はなし）</li></ol><p>…のいくつかのパターンが考えられます。昨今のクラウドインフラを鑑みると、コストメリット、移行の容易性を考えると2が妥当と考えられるケースが多いかと思います。事前にDR環境へ作成するリソースについても本環境と同等、同様のものを作ることは少なく、このハンドリングについてはTerraformの記載に依存するものがあります。本記事ではいくつかのパターンに分けつつ、今私自身が実践している方法について説明します。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>今回のTerraformの構成はモジュールを利用して説明します。採用理由はモジュールという形でパッキングしておくことで、特定の単位のリソースを一括して起動することができることにあります。本環境とDR環境では基本的には同一のインフラができることが望ましいので、モジュールであれば任意の単位で横展開できることを考えています。</p><p>また、本環境のリージョンを東京（ap-northeast-1）、DR環境を大阪リージョン（ap-northeast-3)で構成することを前提とします。</p><h3 id="どの単位で分割するか"><a href="#どの単位で分割するか" class="headerlink" title="どの単位で分割するか"></a>どの単位で分割するか</h3><p>いくつか、分割する単位にも考える余地があるかと思います。これは、私自身が構築した所感ですが、1つのモジュールでDR環境まで表現することはせず、<strong>本環境向けで構築をした上で、DRにも展開できる様に手を入れる</strong>のが良いのではないかと考えています。これには</p><ul><li>Terraformの機能としてリソースの作成可否をハンドリングできること</li><li>1つのモジュールでDR環境まで表現するとモジュールが肥大化する</li></ul><p>があげられます。前者についてはさらに3点に場合分けして説明しますが、後者については肥大化することで可読性や重複した表現でリソースの適用漏れなどヒューマンエラーの元になります。また、肥大化したとしても本環境、DR環境にフォーカスするのであればあまり大きな問題にはなりません。ただ、実際にはDR環境まで作らない環境（開発環境など）にも同じモジュールを適用する場合、DR向けとして定義したリソースのハンドリングが煩雑になることが容易に想像されます。いきなりDR環境も同じモジュールで構築する、というのは難しいですが、本環境向けのみに作成の上、少々のテコ入れをすることが望ましいです。</p><p>前者について、さらに場合分けすると…</p><ul><li>本環境、DR環境に同等のリソースを作成する場合</li><li>本環境のパラメータ（リソース）を引用する形で作成する場合</li><li>本番のみに作成する場合<ul><li>DRは有事の際に作成する前提</li></ul></li></ul><p>…の3つが挙げられます。これらについてさらに説明します。</p><h3 id="本環境にもDR環境にも同等のリソースを作成する場合-純粋な複製"><a href="#本環境にもDR環境にも同等のリソースを作成する場合-純粋な複製" class="headerlink" title="本環境にもDR環境にも同等のリソースを作成する場合(純粋な複製)"></a>本環境にもDR環境にも同等のリソースを作成する場合(純粋な複製)</h3><p>まずは純粋な複製で済む場合です、ちょっと極端ですが、VPCのみをラップしているモジュールがあると仮定します。</p><figure class="highlight sh"><figcaption><span>vpc.tf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># vpc.tf</span></span><br><span class="line">resource <span class="string">&quot;aws_vpc&quot;</span> <span class="string">&quot;main&quot;</span> &#123;</span><br><span class="line">  cidr_block = var.vpc_cidr_block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable <span class="string">&quot;vpc_cidr_block&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">type</span> = string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">provider <span class="string">&quot;aws&quot;</span> &#123;</span><br><span class="line">  region = <span class="string">&quot;ap-northeast-1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">&quot;aws&quot;</span> &#123;</span><br><span class="line">  region = <span class="string">&quot;ap-northeast-3&quot;</span></span><br><span class="line">  <span class="built_in">alias</span>  = <span class="string">&quot;ap3&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module <span class="string">&quot;vpc&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;任意のディレクトリ&quot;</span></span><br><span class="line"></span><br><span class="line">  vpc_cidr_block = <span class="string">&quot;10.10.100.0/24&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module <span class="string">&quot;vpc_dr&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;任意のディレクトリ&quot;</span></span><br><span class="line"></span><br><span class="line">  providers = &#123;</span><br><span class="line">    aws = aws.ap3</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vpc_cidr_block = <span class="string">&quot;10.10.101.0/24&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>モジュールに、作成するリソースごと重複を許容できない場合には変数を切り出し、モジュールの呼び出し側で適切なパラメータを渡してあげるイメージになります。また、Providerがクラウドのエンドポイントをさし示しているので、モジュールごとエンドポイントの向く先も変わるでしょう。</p><h3 id="本環境のパラメータ（リソース）を引用する形で作成する場合"><a href="#本環境のパラメータ（リソース）を引用する形で作成する場合" class="headerlink" title="本環境のパラメータ（リソース）を引用する形で作成する場合"></a>本環境のパラメータ（リソース）を引用する形で作成する場合</h3><p>これは本環境、DR環境両方で常時稼働させるパターンのもの、かつ、本環境のリソースを引用、および継承してDRを作る場合がここに当てはまります。そもそもDR環境で稼働させるものは何かと考えたとき、迅速な回復、喪失を避けて通りたいのはDBやバケットなどのストレージ系が当てはまるかと思います。その中でRDSを例とします。</p><figure class="highlight sh"><figcaption><span>db_instance.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_db_instance&quot;</span> <span class="string">&quot;postgres&quot;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  db_name                  = var.db_primary_arn == null ? <span class="string">&quot;default&quot;</span> : null</span><br><span class="line">  engine                   = <span class="string">&quot;postgres&quot;</span></span><br><span class="line">  username                 = var.db_primary_arn == null ? <span class="string">&quot;admin&quot;</span> : null</span><br><span class="line">  password                 = var.db_primary_arn == null ? <span class="string">&quot;admin&quot;</span> : null</span><br><span class="line">  publicly_accessible      = <span class="literal">false</span></span><br><span class="line">  backup_retention_period  = 7</span><br><span class="line">  backup_window            = <span class="string">&quot;20:00-20:30&quot;</span></span><br><span class="line">  maintenance_window       = <span class="string">&quot;mon:06:00-mon:06:30&quot;</span></span><br><span class="line">  port                     = 5432</span><br><span class="line">  replicate_source_db      = var.db_primary_arn</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name  = <span class="string">&quot;prod-db&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable <span class="string">&quot;db_primary_arn&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">type</span>    = string</span><br><span class="line">  default = null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output <span class="string">&quot;db_arn&quot;</span> &#123;</span><br><span class="line">  value = aws_db_instance.postgres.arn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">provider <span class="string">&quot;aws&quot;</span> &#123;</span><br><span class="line">  region = <span class="string">&quot;ap-northeast-1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">&quot;aws&quot;</span> &#123;</span><br><span class="line">  region = <span class="string">&quot;ap-northeast-3&quot;</span></span><br><span class="line">  <span class="built_in">alias</span>  = <span class="string">&quot;ap3&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module <span class="string">&quot;db&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;任意のディレクトリ&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module <span class="string">&quot;db_dr&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;任意のディレクトリ&quot;</span></span><br><span class="line"></span><br><span class="line">  providers = &#123;</span><br><span class="line">    aws = aws.ap3</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  db_primary_arn = module.db.db_arn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ポイントだと考えているのは…</p><ul><li>プライマリ（本環境）のインスタンスについては通常のパラメータを入れること</li><li>環境ごと入れるパラメータ、nullにするパラメータをハンドリングすること</li></ul><p>…だと考えています。変数として<code>db_primary_arn</code>を書き出し、この変数に値が入っているかどうかを判定することで、プライマリのインスタンスになるか、DR向けのレプリカインスタンスかを判定して作成することが可能になります。</p><p>三項演算子を多く使っていることはもう少し改善ポイントですが、少ない変数でリソースのハンドリングができることで、使いやすさを意識しています。そして、<code>default = null</code>にしておくことで、不要な変数を定義を回避しています。</p><h3 id="DR環境では構築しないリソース"><a href="#DR環境では構築しないリソース" class="headerlink" title="DR環境では構築しないリソース"></a>DR環境では構築しないリソース</h3><p>コストの観点から、DRでは構築せず、有事の際に作成するリソースもあり得るでしょう。その際にはcountやfor_eachといったTerraformにおけるループ構文を用いてハンドリングしています。例ではEC2インスタンスを記載しています。</p><figure class="highlight sh"><figcaption><span>instance.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;instance&quot;</span> &#123;</span><br><span class="line">  count = length(var.instance_ip_address)</span><br><span class="line">  ...</span><br><span class="line">  vpc_security_group_ids  = [....]</span><br><span class="line">  private_ip              = var.instance_ip_address[count.index]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable <span class="string">&quot;instance_ip_address&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">type</span>    = list(string)</span><br><span class="line">  default = []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">provider <span class="string">&quot;aws&quot;</span> &#123;</span><br><span class="line">  region = <span class="string">&quot;ap-northeast-1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">&quot;aws&quot;</span> &#123;</span><br><span class="line">  region = <span class="string">&quot;ap-northeast-3&quot;</span></span><br><span class="line">  <span class="built_in">alias</span>  = <span class="string">&quot;ap3&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module <span class="string">&quot;instance&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;任意のディレクトリ&quot;</span></span><br><span class="line"></span><br><span class="line">  instance_ip_address = [<span class="string">&quot;xx.xx.xx.xx&quot;</span>, <span class="string">&quot;yy.yy.yy.yy&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module <span class="string">&quot;instance_dr&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;任意のディレクトリ&quot;</span></span><br><span class="line"></span><br><span class="line">  providers = &#123;</span><br><span class="line">    aws = aws.ap3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>instance_ip_address</code>の配列に対して、IPがあればその分だけリソースを作成し、空の配列（デフォルト値）が入ったときは<code>count = 0</code>になるので作成されないことになります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Terraformを使ったマルチリージョン構築は、IaC自体のメリットを最大限かせるものだと考えています。その中で再利用性、可搬性を意識していくと、私はここまでに記載したような方法でそれなりにスマートに実装ができたと思います。</p><p>途中にも記載しましが、まずは本環境向けの構築を中心におこない、その上でDR環境に向けて何を切り出さないといけないか、微修正を重ねながら実装していくことが1つの方法でしょう。<br>本記事以外の構成も気になるので、ぜひリアクションいただけると幸いです。</p><p>最後になりますが、今日から約10記事、Terraformのネタが続きますので、この連載や技術ブログにこれまで上がっているTerraformの記事もぜひご覧ください。</p><ul><li><a href="/articles/20230327a/">2023年 Terraform連載</a></li><li><a href="/tags/Terraform/">Terraformタグの記事</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>本記事では触れていませんが、1つのモジュールに対して2つのリージョンに投げる場合（CloudFrontとALB）の構成の場合には、<code>configuration_aliases</code>を使うことで対応できます。<br>(<code>configuration_aliases</code>の使い方は「<a href="https://qiita.com/kaedemalu/items/d148c86f901f654f2930">かゆいところに手が届く、Terraformの書き方 (configuration_aliasesの使い方)</a>」を参照ください。)</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/DR/">DR</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%9E%E3%83%AB%E3%83%81%E3%83%AA%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3/">マルチリージョン</category>
      
      
      <comments>https://future-architect.github.io/articles/20240311a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Goリリースノートから技術ブログを書く流れ基礎</title>
      <link>https://future-architect.github.io/articles/20240307a/</link>
      <guid>https://future-architect.github.io/articles/20240307a/</guid>
      <pubDate>Wed, 06 Mar 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240307a/image.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;818&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;The Gopher character is based on the Go mascot</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240307a/image.png" alt="" width="1200" height="818" loading="lazy"><p>The Gopher character is based on the Go mascot designed by Renée French</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。</p><p>フューチャーでは2021年の2月に公開されたGo 1.16から、Goのリリースノートを読んで気になったところをブログにまとめるというブログリレーを続けています。</p><ul><li><a href="/articles/20210207/">Go 1.16連載が始まります</a></li><li><a href="/articles/20210810a/">Go 1.17連載が始まります: コンパイラとgo mod</a></li><li><a href="/articles/20220209a/">Go 1.18集中連載 ジェネリクス</a></li><li><a href="/articles/20220801a/">Go 1.19リリース連載始まります GoDoc&#x2F;ツール周りのアップデート</a></li><li><a href="/articles/20230123a/">Go 1.20リリース連載が始まります＆メモリアリーナの紹介＆落ち穂拾い</a></li><li><a href="/articles/20230731a/">Go 1.21連載始まります＆slogをどう使うべきか</a></li><li><a href="/articles/20240129a/">Go 1.22リリース連載始まります &amp; ループの変化とTinyGo 0.31</a></li></ul><p>単なる翻訳ではなく自分たちならではの付加価値を提供するための執筆のフローや秘訣を、初心者向けにまとめます。社内外あるいはGoだけのとどまらず、次の新しいソフトウェアや技術のリリース時に技術ブログが増えると良いなと思っています。</p><h2 id="時期"><a href="#時期" class="headerlink" title="時期"></a>時期</h2><p><a href="https://go.dev/doc/devel/release">Release History</a>を見るとわかりやすいですが、Goは年2回のペースでメジャーアップデートを繰り返しています。だいたい、2月と8月です。</p><p>その1, 2ヶ月ほど前になるとRelease Candidate（RC）版が公開され、先立って機能を試すことができます。RC版は、 <code>Go1.x.rc1</code>, <code>Go1.x.rc2</code> などというサフィックスで公開され、<code>rc1</code>　とか <code>rc2</code> が出るともうそろそろメジャーリリースが出そうだなと個人的にはワイワイな気持ちになります。</p><p>フューチャーでは、この <code>RC</code> 版が公開されてから、実際にメジャーリリースされる期間（1ヶ月程度）の間に触ってみてブログを公開していくという流れを取ることが多いです。</p><p>リリース状況は以下のXのアカウントをフォローしておくと便利だなと思います。</p><p><a href="https://twitter.com/golang">https://twitter.com/golang</a></p><h2 id="お題の選定"><a href="#お題の選定" class="headerlink" title="お題の選定"></a>お題の選定</h2><p>リリースノートはRC版が公開されるころにはDraft版が公開されていますので、ざっと見て、各人の興味がある部分を選定します。テーマ選定が個人的に一番悩ましいポイントです。</p><p>Go 1.22を例にします。「私見」ですがリリースノートは大きく６つのブロックに分割できます。</p><img src="/images/20240307a/release_note.drawio_(2).png" alt="release_note.drawio_(2).png" width="1200" height="655" loading="lazy"><p>それぞれ、ブログに取り上げるテーマとして「私見」を述べます。</p><ol><li>言語レベルの変更<ul><li>Go 1.18だとジェネリクス、Go 1.22だとforループの変数についての変更など、メジャーリリース目玉と言っても良い項目です。注目度も高いゆえ多くの人によって発信されることが比較的多いです</li></ul></li><li>コマンド系の更新<ul><li><code>go test</code> のようなコマンドのアップデート系です</li><li>もし利用頻度が高いコマンドにアップデートがあれば、テーマに取り上げると差別化が図りやすいです</li><li><strong>お勧めです</strong></li></ul></li><li>ビルド,実行時の改善系<ul><li>個人的には中級者向けのアップデートです。GCやメモリ配置の最適化により実行時の性能改善や、コンパイラがインライン化するなどの更新があればここに含まれます。興味深いですが、中級者以上向けです</li><li>渋川さんの<a href="https://future-architect.github.io/articles/20220808a/">GCの記事</a> や<a href="https://future-architect.github.io/articles/20230123a/">メモリアリーナ</a>の記事が該当します。学びです</li></ul></li><li>新パッケージの追加<ul><li>新しい標準パッケージを使ってみるのはGoではGoDocやExampleがある程度整備されていることが多く、動かしやすいためお勧めです</li><li>ライブラリによっては人を選ぶものがあり（例えば、Go 1.20では<a href="https://tip.golang.org/doc/go1.20#library">crypto&#x2F;ecdh</a> という鍵交換の暗号周りに利用するパッケージが追加されました）、前提知識からキャッチアップが必要な内容もしばしばあります</li><li><code>net/http</code> など利用頻度が高いメジャーなパッケージの変更は、役立つことが多いので調べると多くの人にとっても学びになります</li><li><strong>お勧めです</strong></li></ul></li><li>マイナーアップデート<ul><li>すでに存在するパッケージに、APIが追加されたという内容です（Goの互換性ポリシーでは関数の削除や、シグネチャの変更はありません）</li><li><strong>お勧めです</strong></li></ul></li><li>OS&#x2F;プロセッサのサポート<ul><li>例えば、RISC-VやOpenBSDのサポートの更新についての紹介です</li><li>上級者向けです</li></ul></li></ol><p>「お勧め」と書いた部分も、メジャーバージョンごとに差異が大きく、実際にテーマ選定時には当然リリースノートを確認する必要があります。面白そうなアップデートだと思ったけど、Windows OS特有の修正で、検証が難しくて途中で諦めたケースなどが過去の連載でもありました。</p><p>※改めて強調しますが、全て個人の意見です。初心者だろうがベテランだろうが、気になったところを興味が赴くままに触ってみることが大事だと思っています。一方で、ピンと来る内容が無いことも初心者だと多いと思います。その時に、あえて絞り込むならという視点で書いています。</p><h2 id="アドバイスを出す-貰う"><a href="#アドバイスを出す-貰う" class="headerlink" title="アドバイスを出す&#x2F;貰う"></a>アドバイスを出す&#x2F;貰う</h2><p>初心者の場合は、どのテーマを深掘りすべきか決め手にかけるということも多いと思います。</p><p>その場合は、有識者に「書きやすそうなネタリスト」を出してもらって、そこから選ぶというのも良い進め方だと思います。</p><p>過去、わたしも社内で執筆メンバーを募集したときは以下のネタが書きやすいのでは？という内容をリストアップして告知しました。</p><img src="/images/20240307a/unnamed.png" alt="unnamed.png" width="731" height="374" loading="lazy"><p>改めて見ると、このリストアップもどうなんだ…とも思いますが、これを見てテーマを決めたという人もいました。</p><p>難易度を判定できる人に教えてもらう、というのは最初の取っ掛かりとして悪くないため、周囲に頼れる人がいれば頼り、テックリード的な人は補助線を引いて上げると良いかなと思います。</p><h2 id="環境を構築する"><a href="#環境を構築する" class="headerlink" title="環境を構築する"></a>環境を構築する</h2><p>お手軽な手法として、 <code>go install</code> を使う方法があります。例えば <code>go 1.22rc2</code> をインストールする場合は<a href="https://pkg.go.dev/golang.org/dl#section-readme">このページから</a>バージョンをたどり、次のコマンドが用意されています。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go install golang.org/dl/go1.22rc2@latest</span><br><span class="line">$ go1.22rc2 download</span><br></pre></td></tr></table></figure><p>これで <code>go</code> コマンドのように <code>go1.22rc2</code> コマンドを利用することができます。 <code>go1.22rc2 run main.go</code> といった形でいち早く新バージョンを動かせ、かつ既存のGoのバージョンを変えなくても済むので便利です。</p><p>GoLandを使っている人はさらに楽ができます。</p><img src="/images/20240307a/image_2.png" alt="image.png" width="903" height="470" loading="lazy"><p>設定＞Go＞GOROOT＞＋記号＞ダウンロードで、GoLand側でバージョンリストを出してくれ、指定したいバージョンをクリックするとダウンロードからIDE内でPATHまで諸々設定してくれます。GoLandのターミナルで実行する <code>go</code> コマンドまで指定のバージョンを利用してくれるため便利です。</p><h2 id="プロポーサル（Issue）を探す"><a href="#プロポーサル（Issue）を探す" class="headerlink" title="プロポーサル（Issue）を探す"></a>プロポーサル（Issue）を探す</h2><p>リリースノートからブログを書くと言いましたが、リリースノートの内容は簡略化した内容ですので、加えてGoDocやプロポーサルを確認して、背景や議論のやり取りを確認すると内容が深まります。</p><p>プロポーサル（Issue）の探し方ですが、一番簡単なのは、ページのHTMLを開き（Chromeであれば ctrl + U）、そこにコメントされているURLを取得する方法です。おそらくこの手法が最速です。</p><p>次のように range overが議論されていたIssueが見つかります。</p><img src="/images/20240307a/image_3.png" alt="image.png" width="959" height="273" loading="lazy"><p>それを開くとGitHub Issueに飛べると思います。</p><img src="/images/20240307a/image_4.png" alt="image.png" width="1149" height="445" loading="lazy"><p>時には長い議論になっていることも多いですので、サマリにまとめるだけでも良いとっかかりな記事にしやすいと思います。</p><p>社内メンバーは次のようなポイントを拾うことが多いです。</p><ul><li>背景（なぜそれが必要なのか、従来の課題は何か）</li><li>それがなかった場合、従来はどう対応していたか</li><li>受け入れられなかった別案にはどういったものがあったか</li><li>レビュアーが懸念していることにどんなことがあるか</li></ul><p>辻さんの<a href="https://future-architect.github.io/articles/20230128a/">HTTP ResponseController</a>記事では、互換性の立場からこっちのメソッドを拡張できずといった説明があります。ある断面だけだと不自然に思えることも、歴史的経緯を知ると理解しやすくなりますよね。</p><p>IssueからはコードレビューのURLがリンクされていることが多いので、どのようなファイルの修正があったかも確認できます。コードの修正内容まで踏み込めるとオリジナリティ溢れること間違いないです。</p><h2 id="触ってみる"><a href="#触ってみる" class="headerlink" title="触ってみる"></a>触ってみる</h2><p>実際にサンプルコードを書いて動かすと理解が深まります。</p><p>もし、標準パッケージの追加&#x2F;更新であればテストコードが存在するため、GoDocだけみて動かし方がわからない場合も、標準パッケージのテストコードを参考にするとよいです。それらをデバック実行してみて、どのような実装になっているか内部のコードを見ても面白いですね。</p><p>棚井さんは <code>encoding/base32</code> をテーマに、<a href="https://future-architect.github.io/articles/20240201a/">Base32そのものの変換処理の流れを解説</a>する記事を書いていました。こうした派生は面白いですね。</p><p>Bug Fix系であれば、新バージョンと旧バージョンで比較して動作検証してみても良いかもしれません。</p><p>また、性能が気になればベンチマークを取ってみるというのも、知見を増やしやすいポイントです。例えば、<a href="https://future-architect.github.io/articles/20240202a/#%E6%80%A7%E8%83%BD%E8%A8%88%E6%B8%AC">武田さんの記事</a>では、標準のnet&#x2F;httpとサードパーティ製ライブラリでベンチマークを取っていて、使えそうかそうじゃないかの1つの材料を提供しています。</p><p><a href="https://future-architect.github.io/articles/20240214a/">私もnet&#x2F;httpの記事</a>では、CPUプロファイルや、<code>strace</code> を用いて、システムコールの発行具合を調査した記事を書きました。Goは標準に様々なツールがあり分析できるので、引き出しを増やすという意味でも学びになります。</p><p>触ってみて得た知見や疑問点も、記事に書いたり周囲のGopherな人に雑談で話すと、ネタが広がることも多いので、記事を書く前にもどんどん発信してフィードバックをもらいましょう。</p><h2 id="コードリーディングのお供に"><a href="#コードリーディングのお供に" class="headerlink" title="コードリーディングのお供に"></a>コードリーディングのお供に</h2><p>コードリーディングのサポートとしてGitHub Copilotをうまく活用しているよというメンバーもいます。</p><p>途中で難易度の高い処理にぶつかっても、エディタ上でCopilotに質問すれば、処理内容を解説して頂けます。</p><p>VSCodeプラグインもあります。</p><img src="/images/20240307a/image_5.png" alt="image.png" width="1200" height="296" loading="lazy"><p><a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot">https://marketplace.visualstudio.com/items?itemName=GitHub.copilot</a></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>自分のレベルと興味にあったテーマの選定が最も難しく、決まればプロポーサルはリリースノートからすぐにたどり着けますので、あとはテストコードやデバック、ベンチマーク、プロファイルなどのツールを駆使していろいろ触ってみて得た知見を記事にしましょう、という内容でした。</p><p>リリースを記念に祝う目的でブログを書くと、良い感じの緩さ加減な期日感もあり機会としてはちょうどいいですし、適度に学びになります。</p><p>もっと良い方法があればXでぜひ教えてください。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%83%8E%E3%83%BC%E3%83%88/">リリースノート</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0/">技術ブログ</category>
      
      
      <comments>https://future-architect.github.io/articles/20240307a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Next.jsにするか他のフレームワークにするか迷っている人はNext.jsを選べばいい</title>
      <link>https://future-architect.github.io/articles/20240228a/</link>
      <guid>https://future-architect.github.io/articles/20240228a/</guid>
      <pubDate>Tue, 27 Feb 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240228a/top.jpg&quot; alt=&quot;&quot; width=&quot;640&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240228a/top.jpg" alt="" width="640" height="400"><p>タイトルで言いたいことは言ってしまっているのですが、2017年ぐらいからNext.jsを使ってきて、最新の情報のキャッチアップとかもそんなに苦労はなくて、こだわりがないならNext.jsでいいのでは？という記事です。</p><h2 id="Next-jsは大きすぎる？"><a href="#Next-jsは大きすぎる？" class="headerlink" title="Next.jsは大きすぎる？"></a>Next.jsは大きすぎる？</h2><p>フレームワークが大きいのはたいていそうで、提供されているすべての機能を使うわけではなく、その一部だけを使います。そのサブセット自体がシンプルであればフレームワークはどれだけ大きくても問題はないはずです。JavaとかPythonとかGoのコード書いてもごく一部のライブラリしか使わないわけで、でもそれに対して「ライブラリがでかすぎる」とは言わないですよね。</p><p>Next.jsは「より高速にする」機能がたくさんありますが、別にそんなの最初から使う必要はないですし、サービスによってはそもそもその機能が合わない、というのもあります。ユーザープロフィール画面にISGとかSSGは使わないでしょう。</p><p>最低限の部分を取り出せば、ファイルシステムベースのルーターがあって、SSRしてくれる、ぐらいでしょう。それ以外は素のReactをそのまま使う、という作戦でいいかと思います。データのフェッチも<code>getServerSideProps</code>とか使わずに<code>useEffect</code>とか<code>useSWR</code>で取得しちゃえばいい。そうなれば、ルーター周りのちょっとしたコードぐらいが差分で、あとはReactそのものになります。</p><p>静的なJSファイルを出したい、という場合はVite+Reactでも良いと思いますが、ルーターすらないので、「EasyよりもSimple！」派でないなら、ここもNext.jsでもいいかなって思っています。</p><ul><li><a href="https://future-architect.github.io/articles/20230530a/">管理画面等でNext.jsをBetter Reactとして使う</a></li></ul><p>Vercelを売るための機能が多い、みたいなのも見かけましたが、オプショナルな機能でいくつかあるだけかなって思います。ぱっと見つけたのはビデオファイルをVercel Blobにもおけるよ、とかOpenTelemetryとか。別に不要であれば使わなければ良い機能ぐらいかと思いますし。GoのPlan9対応みたいなものですよね。</p><h2 id="Next-jsは変化が早すぎる？"><a href="#Next-jsは変化が早すぎる？" class="headerlink" title="Next.jsは変化が早すぎる？"></a>Next.jsは変化が早すぎる？</h2><p>Next.js 4の時代からするとコードの書き方は大きく変わりました。クラスコンポーネントが関数コンポーネントになってhooksが登場し、TypeScriptが当たり前になって、Reduxでがんばってconnectの定義を書いていたのが、今では嘘のようです。</p><p>とはいえ、これってNext.js側の変化ではなくて、Reactの変化ですよね。Server Actionsは派手なNext.jsの機能に見えて、これも<a href="https://react.dev/reference/react-dom/components/form#handle-form-submission-with-a-server-action">React本家</a>の方の機能だったりします。</p><p>Next.js側も変化はありますが、機能追加はあっても機能の削減で困ることはいまのところなかったように思います。app routerの登場は大きかったですが、これはむしろ、React本家が導入したReact Server Componentを実現するためのNext.js側が用意した解、みたいな感じです。</p><p>ビルド周りとか設定周りは大きく改善されました。ビルドもかなり高速になりました。自前でかなり手を入れていた人には厳しいでしょうが、なるべく設定を変更せずに使う、というのが今時のウェブフロントエンドの渡世術かな、と思います。少ないコストでエコシステムの進化の恩恵を享受できるコツです。</p><h2 id="フレームワークを採用する上で大事なこと"><a href="#フレームワークを採用する上で大事なこと" class="headerlink" title="フレームワークを採用する上で大事なこと"></a>フレームワークを採用する上で大事なこと</h2><p>Next.jsの一番の価値は、JS界のさまざまなライブラリとの繋ぎ込み方法がexamplesというフォルダにあって、動作検証されていることかなって思います。JS界隈はライブラリが多いので組み合わせではまったり、とかはあるのですが、すくなくともNext.jsとこのバージョンのこのライブラリならつながる、という情報があるのは大変ありがたいことです。</p><p><a href="https://github.com/vercel/next.js/tree/canary/examples">https://github.com/vercel/next.js/tree/canary/examples</a></p><p>それだけではなく、たとえば認証どうしよう、とか、実現したいことに対する情報がたくさんあって、それを支えるライブラリもたくさんあって・・・というところですね。ようするにエコシステム。仕事で使う場合に、何かトラブルがあってもすぐに解決したい！というのであれば、ないよりはあった方が良いものですよね。</p><h2 id="あえて積極的にNext-jsを触る理由"><a href="#あえて積極的にNext-jsを触る理由" class="headerlink" title="あえて積極的にNext.jsを触る理由"></a>あえて積極的にNext.jsを触る理由</h2><p>Reactの開発は、それ自身に閉じるのではなく、サーバー側との連携機能などは外部のフレームワークともやっていくぞ！というのはReact Server Componentのときに語られています。Next.jsはReactフレームワークの中では旗手ではありますし、新機能が最初に使える環境となっています。React Compiler楽しみですよね？そういうReact側の機能を早く試してみたい人にはNext.jsが一番良いとも言えるかと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>強い意志を持ってAstro.js使いたい！とか、トラブルはむしろ大歓迎！みたいな人とか、趣味でやっているしむしろ人がやっていないことに価値がある！みたいに思っている人は、そちらを選べば良いと思います。</p><p>逆に、そういう強い思いがない人であれば、とりあえず朝くNext.jsを触るのがいいんじゃないかな、という記事でした。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%8A%80%E8%A1%93%E9%81%B8%E5%AE%9A/">技術選定</category>
      
      <category domain="https://future-architect.github.io/tags/React/">React</category>
      
      <category domain="https://future-architect.github.io/tags/Next-js/">Next.js</category>
      
      
      <comments>https://future-architect.github.io/articles/20240228a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ローカルプロキシで認証プロキシの煩わしさを解消！</title>
      <link>https://future-architect.github.io/articles/20240227a/</link>
      <guid>https://future-architect.github.io/articles/20240227a/</guid>
      <pubDate>Mon, 26 Feb 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>多くの企業では、セキュリティ対策の一環として認証プロキシを導入しています。これは、社内ネットワークからインターネットへのアクセスを制御し、不正なアクセスや情報漏洩を防ぐための重要な手段です。しかし、この認証プロキシを利用する際には、ユーザ名とパスワードの入力が必要であり、ソフトウェアごとにプロキシ設定する必要があります。これが、日々の業務において非常に煩わしい作業となっています。</p><p>今回は、この問題を解決するために、自分専用のローカルプロキシをセットアップし、認証プロキシの設定を一元管理する方法についてご紹介します。</p><h2 id="認証プロキシの課題"><a href="#認証プロキシの課題" class="headerlink" title="認証プロキシの課題"></a>認証プロキシの課題</h2><p>認証プロキシを利用する際の主な課題は以下の通りです。</p><ul><li><strong>設定の煩雑さ</strong>：各ソフトウェアごとにプロキシ設定する必要があり、設定漏れや誤設定が発生しやすい。</li><li><strong>認証プロキシ非対応ソフトウェアの存在</strong>：使用したいソフトウェアによっては、プロキシには対応しているものの認証には対応していない物<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>がしばしば存在する。</li><li><strong>認証情報の管理</strong>：ユーザ名とパスワードを多くの設定ファイルや環境変数に記載する必要があり、セキュリティリスクが高まる。ファイルが漏出しないよう、またリモート会議などでうっかりそれらを映してしまわないよう気を配る必要がある。</li><li><strong>パスワード変更の手間</strong>：パスワードポリシーによってはパスワードを変更する機会があり、その都度、多くの設定を更新する必要がある。</li></ul><img src="/images/20240227a/画像1.png" alt="画像1.png" width="1200" height="613" loading="lazy"><p>これらの課題を解決する方法として、手元のPCにローカルプロキシを立てて認証を肩代わりする方法をご紹介します。</p><img src="/images/20240227a/画像2.png" alt="画像2.png" width="1200" height="529" loading="lazy"><h2 id="ローカルプロキシのセットアップ"><a href="#ローカルプロキシのセットアップ" class="headerlink" title="ローカルプロキシのセットアップ"></a>ローカルプロキシのセットアップ</h2><p>ローカルプロキシをセットアップすることで、認証プロキシの設定を一元管理し、上記の課題を解決できます。多くのオープンソースソフトウェアが利用可能で、例として「Squid」や「CNTLM」、「stone」などが挙げられます。ここでは例として「mitmproxy」を取り上げます。具体的な手順は以下の通りです。</p><h3 id="1-mitmproxy-のセットアップ"><a href="#1-mitmproxy-のセットアップ" class="headerlink" title="1. mitmproxy のセットアップ"></a>1. mitmproxy のセットアップ</h3><p>mitmproxy は Python プログラムです。インストール方法は複数あるので<a href="https://docs.mitmproxy.org/stable/overview-installation/">公式サイト</a>を参照してください。</p><p>LinuxやWSL環境において最短でインストールするならパッケージリポジトリを（コミュニティ運営のため公式は積極的に推奨していませんが）使用して下記になります。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">aptでインストール</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br><span class="line">sudo apt install mitmproxy</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pipでインストール</span></span><br><span class="line">pip install mitmproxy</span><br></pre></td></tr></table></figure><details><summary>Python3環境構築からpipでインストールを実施するまでの手順はこちら</summary><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt install dirmngr ca-certificates software-properties-common apt-transport-https -y</span><br><span class="line">sudo gpg --list-keys</span><br><span class="line">sudo gpg --no-default-keyring --keyring /usr/share/keyrings/deadsnakes.gpg --keyserver keyserver.ubuntu.com --recv-keys F23C5A6CF475977595C89F51BA6932366A755776</span><br><span class="line">echo &#x27;deb [signed-by=/usr/share/keyrings/deadsnakes.gpg] https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy main&#x27; | sudo tee -a /etc/apt/sources.list.d/python.list</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3.8 -y</span><br><span class="line">sudo apt install python3-pip</span><br><span class="line"></span><br><span class="line">python3 -m pip install --upgrade pip setuptools</span><br><span class="line">pip install mitmproxy</span><br></pre></td></tr></table></figure></details><p><a href="https://github.com/mitmproxy/mitmproxy/blob/main/CONTRIBUTING.md">GitHub から clone して実行する</a>手もあります。</p><p>Docker を使った簡単な導入方法もありますが起動方法込みになるので次章にて纏めて記述します。</p><h3 id="2-mitmproxy-の実行"><a href="#2-mitmproxy-の実行" class="headerlink" title="2. mitmproxy の実行"></a>2. mitmproxy の実行</h3><p>導入形態によって変わりますので以下に列挙します。</p><p>※社内向け認証プロキシにありがちな独自証明書対策としてオプションに <code>--ssl-insecure</code> を使用したいケースもあります。</p><h4 id="バイナリ単体の場合"><a href="#バイナリ単体の場合" class="headerlink" title="バイナリ単体の場合"></a>バイナリ単体の場合</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mitmweb --mode upstream:http://[認証プロキシ]:[ポート]</span><br></pre></td></tr></table></figure><h4 id="Python-スクリプトの場合（Windows）"><a href="#Python-スクリプトの場合（Windows）" class="headerlink" title="Python スクリプトの場合（Windows）"></a>Python スクリプトの場合（Windows）</h4><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">.\venv\Scripts\activate</span><br><span class="line">mitmdump --<span class="built_in">mode</span> upstream:http://[認証プロキシ]:[ポート]</span><br></pre></td></tr></table></figure><h4 id="Python-スクリプトの場合（Linux-or-WSL）"><a href="#Python-スクリプトの場合（Linux-or-WSL）" class="headerlink" title="Python スクリプトの場合（Linux or WSL）"></a>Python スクリプトの場合（Linux or WSL）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ./venv/bin/activate</span><br><span class="line">mitmdump --mode upstream:http://[認証プロキシ]:[ポート]</span><br></pre></td></tr></table></figure><h4 id="Docker-の場合"><a href="#Docker-の場合" class="headerlink" title="Docker の場合"></a>Docker の場合</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm -it -v ~/.mitmproxy:/home/mitmproxy/.mitmproxy -p 127.0.0.1:8081:8081 -p 8080:8080 mitmproxy/mitmproxy mitmweb --web-host 0.0.0.0 --mode upstream:http://[認証プロキシ]:[ポート]</span><br></pre></td></tr></table></figure><p>コンテナの <code>/home/mitmproxy/.mitmproxy</code> には mitmproxy が生成する証明書が格納されます。run するたびに新たに生成されるとその都度証明書のインポートが必要になるのでこの例では永続化させていますが、一度 run した後はコンテナを使い回して start する運用とする場合にはこの考慮は不要です。</p><h3 id="3-mitmproxy-に認証プロキシの認証情報を設定"><a href="#3-mitmproxy-に認証プロキシの認証情報を設定" class="headerlink" title="3. mitmproxy に認証プロキシの認証情報を設定"></a>3. mitmproxy に認証プロキシの認証情報を設定</h3><p><a href="http://localhost:8081/">http://localhost:8081/</a> を開いて、 Options -&gt; Edit Options -&gt; upstream_auth に本来の認証情報を <code>[user]:[pass]</code> 形式で記入します。保存ボタンは無く、フォーカスを外せば設定完了です。</p><img src="/images/20240227a/image.png" alt="" width="1200" height="161" loading="lazy"><p>mitmproxy の起動コマンドに認証情報を書く事が気にならない方は、起動時のオプションに <code>--upstream-auth [user]:[pass]</code> を加える事でこのステップは無視できます。またその場合は起動コマンドを <code>mitmweb</code> ではなく <code>mitmdump</code> にすればWeb UIが起動しないので省リソースです。</p><h3 id="4-ソフトウェアのプロキシ設定をローカルプロキシに変更"><a href="#4-ソフトウェアのプロキシ設定をローカルプロキシに変更" class="headerlink" title="4. ソフトウェアのプロキシ設定をローカルプロキシに変更"></a>4. ソフトウェアのプロキシ設定をローカルプロキシに変更</h3><p>各ソフトウェアのプロキシ設定を、ローカルプロキシのアドレス（通常は<code>localhost:8080</code>）に変更します。これにより、すべてのソフトウェアで共通のプロキシ設定を利用できるようになります。</p><p>HTTPS通信は mitmproxy を通る際に一旦復号され独自の証明書により再暗号化されるようになります。よって mitmproxy が使用する証明書のインポートが必要になります。ブラウザのプロキシを mitmproxy に設定した状態で <a href="http://mitm.it/">http://mitm.it/</a> を開くと証明書をダウンロードする画面が開くので、プロキシのクライアントとなるOSごとに証明書のインポートを行ってください。<br>Windowsの場合は下記の手順になります。</p><ol><li>mitmproxy-ca-cert.p12 をダウンロード</li><li>mitmproxy-ca-cert.p12を実行（ダブルクリック）</li><li>保存場所：「現在のユーザ」</li><li>ファイル名：変更しない</li><li>パスワード：変更しない（空欄のまま）</li><li>「証明書をすべて次のストアに配置する」を選択して「参照」-&gt;「信頼されたルート証明機関」</li><li>完了</li></ol><p>他にも証明書の参照先が異なる物は対応が必要です。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">WSL</span></span><br><span class="line">sudo mv mitmproxy-ca-cert.pem /usr/local/share/ca-certificates/mitmproxy.crt</span><br><span class="line">sudo update-ca-certificates</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Java</span></span><br><span class="line">keytool -importcert -alias mycert -file mitmproxy-ca-cert.pem -keystore $JAVA_HOME/lib/security/cacerts -storepass *****</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Git</span></span><br><span class="line">git config --global http.sslCAInfo mitmproxy-ca-cert.pem</span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>Windowsでローカルプロキシを起動する場合、Windowsホスト上でそのまま起動するか、WSL上で起動するかといった選択肢があります。Windows上でそのまま起動した方がオーバーヘッドも無くWSLの起動状態に関わらず使用できるので便利ですが、WSLからWindows上のホストを通すにはWSL側で幾つか追加の手順が必要になると思います（WSLから見たホストマシンはIPアドレスが毎回ランダムで、かつ Docker でいう <code>host.docker.internal</code> のようなホスト名も無いので名前解決方法を実装する必要がある）</li><li>更に簡略化する方策として、ローカルプロキシを透過プロキシ化してプロキシの設定自体を無くしてしまう手もありますが、期待通りプロキシが空気のような存在となった頃に思わぬ不具合を踏んで原因追及に手間取ることも考えられるのでその点は留意が必要です</li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>認証プロキシの設定に伴う煩雑さは、多くの企業で共通の課題です。ローカルプロキシを導入することで、これらの課題を効果的に解決し、よりスムーズで安全なネットワーク環境を構築できます。ただし、導入にあたってはセキュリティ対策やネットワークポリシーの確認が必要ですので、注意が必要です。</p><p>今回ご紹介した方法が、認証プロキシの煩わしさに悩む多くの方々にとって、有効な解決策となることを願います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">例： <a href="https://cursor.sh/">AIエディタのCursor</a>のインストーラ等</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/">環境構築</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7/">プロキシ</category>
      
      <category domain="https://future-architect.github.io/tags/mitmproxy/">mitmproxy</category>
      
      
      <comments>https://future-architect.github.io/articles/20240227a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Lambdaのランタイムを provided.al2023 に更新する際、2バイナリをzipして対応してみた</title>
      <link>https://future-architect.github.io/articles/20240226a/</link>
      <guid>https://future-architect.github.io/articles/20240226a/</guid>
      <pubDate>Sun, 25 Feb 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;TIG真野です。&lt;/p&gt;
&lt;p&gt;2023年末にAWS Lambda界隈で話題だった「AWS LambdaのGo</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。</p><p>2023年末にAWS Lambda界隈で話題だった「AWS LambdaのGo 1.xランタイムのサポートが2023年12月31日で終了する」への対応を、あまりネットに無い特殊なやり方を採用して行ったので、考え方や実施メモを残します。</p><p>すでに大半のAWS LambdaのGoユーザの方は対応している時期かと思いますが、ご容赦ください。</p><h2 id="AWS-LambdaのGo-1-xランタイムのサポート終了について"><a href="#AWS-LambdaのGo-1-xランタイムのサポート終了について" class="headerlink" title="AWS LambdaのGo 1.xランタイムのサポート終了について"></a>AWS LambdaのGo 1.xランタイムのサポート終了について</h2><p>この影響で、AWS Lambdaにおいて <code>Go 1.x</code> のランタイムから <code>al2023</code> などに変更し、zipで固めるバイナリ名も <code>bootstrap</code> にする必要があります。</p><p>以下の記事が参考になります。</p><ul><li><a href="https://dev.classmethod.jp/articles/how-to-migrate-aws-sam-go-lambda-application/">AWS SAMのGo言語Lambdaアプリケーションのランタイムを更新してみた | DevelopersIO</a></li><li><a href="https://aws.amazon.com/jp/blogs/compute/migrating-aws-lambda-functions-from-the-go1-x-runtime-to-the-custom-runtime-on-amazon-linux-2/">Migrating AWS Lambda functions from the Go1.x runtime to the custom runtime on Amazon Linux 2 | AWS Compute Blog</a></li></ul><p>ちなみに、更新先は <code>provided.al2</code> と <code>provided.al2023</code> とで少し悩みましたが、より新しく保守期間も長い、<code>provided.al2023</code> を選択しています。作業を年末のギリギリまで引っ張ったメリットかもしれません。AWSのドキュメントも気がつけば <code>provided.al2023</code> 推しに変わっていました。</p><p>この更新作業の内容自体は通常、 <code>lambda</code>（今回のプロダクトで使っていたバイナリ名） を <code>bootstrap</code> という名称に変えて、TerraformのLambdaリソースの設定値を書き換えておしまいであるため、さほど難しく無いでしょう。</p><h2 id="課題"><a href="#課題" class="headerlink" title="課題"></a>課題</h2><p>しかし私が担当していたプロダクトでは、数十のLambdaが、Kinesis Data Streams、DynamoDB Streamsなどのイベント着火し、それもそれぞれが24&#x2F;365で停止タイムがないというものです。</p><p>本来であればイベントソースマッピングを無効にし、その間にLambdaランタイムを更新し、イベントソースマッピング再び有効に戻すという手順が必要です。それをせず、直接アプリデプロイ or ランタイム更新すると、そのタイミングでリクエストが来た場合に処理が失敗し、データロストを誘発してしまいかねません。</p><p>しかし、上記の方法では以下の面倒臭さがありました。</p><ul><li>前提として、鮮度が高くデータを処理する必要があり、disableにする時間をなるべく短くする必要がある</li><li>disableしてからアプリ更新、またenableに戻すというような運用順書とその検証する必要がある</li><li>そのような時間制約があるような神経質な作業を年末にやりたくないという、心理的なハードル（※年末に関しては、他の優先度タスクがあり移行作業を後ろ回しにした私の責任です）</li></ul><h2 id="対応方針"><a href="#対応方針" class="headerlink" title="対応方針"></a>対応方針</h2><p>幸い、対象のLambdaリソースを一括デプロイするための、Makefileをテンプレートベースで生成するツールが整えられていたため、これを改修して、<code>make deploy-prod</code> するだけでLambdaランタイムのアップデートを行えるようにすることを目指しました。</p><p>今回思いついた手段ですが、 Go 1.x で動く<code>lambda</code> と <code>provided.al2023</code> で動く <code>bootstrap</code> という2種類のバイナリをzipで同梱するという方法を取ることにしました。</p><p>手はずとしては、次のとおりです。</p><ol><li>作業前は <code>lambda</code> とうバイナリだけで動く</li><li>移行ステップ1で、<code>lambda</code>, <code>bootstrap</code> の2つのバイナリをデプロイする<ul><li>このとき、ランタイムは <code>Go 1.x</code> のままである</li><li>利用されるハンドラは <code>lambda</code> のままであり、 <code>bootstarp</code> は呼ばれない</li></ul></li><li>移行ステップ2で、ランタイムを <code>provided.al2023</code> に更新する<ul><li>そのタイミングで利用されるハンドは <code>bootstrap</code> になり切り替わる</li></ul></li><li>移行ステップ3では、動作が問題なければ、利用しなくなった <code>lambda</code> というバイナリはなくして、 <code>bootstrap</code> のみのzipに絞る。これは後々の対応で問題ない</li></ol><img src="/images/20240226a/lambda_runtime更新.drawio_(2).png" alt="lambda_runtime更新.drawio_(2).png" width="1200" height="1044" loading="lazy"><p>ポイントとして、zipに2つのバイナリを同梱しちゃっても、Lambdaとしては問題なく動く（zip時の50MBサイズ上限はありますが、利用するハンドラ以外のバイナリを渡しても問題ありませんでした）。それにより、Lambdaランタイム更新をコマンドで行っても、上モノのzipには新旧両方のランタイムで動くバイナリが存在するため、ダウンタイム無しで切り替え可能になったということです。</p><h2 id="デプロイスクリプト"><a href="#デプロイスクリプト" class="headerlink" title="デプロイスクリプト"></a>デプロイスクリプト</h2><p>今回は上記の方針を、Makefileで実施するようにしました。</p><p>ビルド、デプロイの流れは次のような流れです。</p><figure class="highlight makefile"><figcaption><span>移行時の特殊対応版</span></figcaption><table><tr><td class="code"><pre><span class="line">SHELL := /bin/bash</span><br><span class="line">.SHELLFLAGS := -eu -o pipefail -c</span><br><span class="line"></span><br><span class="line"><span class="comment"># build でlambda, bootstrapの2種類のバイナリを作成</span></span><br><span class="line"><span class="section">build:</span></span><br><span class="line">@CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags=<span class="string">&quot;-s -w -buildid=&quot;</span> -trimpath -o bin/lambda cmd/lambda/lambda.go</span><br><span class="line">@CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags=<span class="string">&quot;-s -w -buildid=&quot;</span> -trimpath -tags lambda.norpc -o bin/bootstrap cmd/lambda/lambda.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># zip で lambda, bootstrapを lambda.zip に同梱する</span></span><br><span class="line"><span class="section">zip: build</span></span><br><span class="line">@touch -t 202401010000 bin/lambda bin/bootstrap</span><br><span class="line">@zip -j -q bin/lambda.zip bin/lambda bin/bootstrap</span><br><span class="line"></span><br><span class="line"><span class="comment"># deploy-prod では最初に lambda.zip でアプリ更新、その次にランタイムを更新する</span></span><br><span class="line"><span class="comment"># wait function-updated でアプリ更新を待たないとconfigurationが落ちるケースがある</span></span><br><span class="line"><span class="section">deploy-prod: zip</span></span><br><span class="line">aws lambda --profile our_prod update-function-code --function-name prod-example-api \</span><br><span class="line">      --zip-file fileb://bin/lambda.zip | jq -c &#x27;&#123;FunctionName, Runtime, Handler, LastModified&#125;&#x27;</span><br><span class="line">aws lambda --profile our_prod wait function-updated --function-name prod-example-api</span><br><span class="line">aws lambda --profile our_prod update-function-configuration --function-name prod-example-api \</span><br><span class="line">      --runtime provided.al2023 --handler bootstrap | jq -c &#x27;&#123;FunctionName, Runtime, Handler, LastModified&#125;&#x27;</span><br></pre></td></tr></table></figure><p>Makefile中のコメント通りですが、いくつか補足します。</p><ul><li><code>build</code> ターゲット<ul><li><code>go build</code> で <code>lambda</code>, <code>bootstrap</code> の2種類のバイナリを作成します</li><li><code>-tags lambda.norpc</code> は <code>provided.al2</code> などで動かす場合にビルドサイズを下げることができるオプションです。このオプションを無視して、 <code>go build</code> を1度だけ呼び出し、コピー＋リネームで対応しても良かったかもしれません</li></ul></li><li><code>zip</code> ターゲット<ul><li>2バイナリを同梱し <code>lambda.zip</code> を作っています</li><li><code>touch</code> でバイナリの最終更新日時を固定して、zipのコードハッシュが変化しないようにしています</li></ul></li><li><code>deploy-prod</code> ターゲット<ul><li>1つ目の処理で、 <code>lambda.zip</code> をデプロイしています</li><li>2つ目の処理でアップデート完了までwaitします</li><li>3つ目の処理で、Lambdaランタイム更新とハンドラをbootstrapに更新しています</li><li>Lambdaランタイム更新のコマンドは、何度実行してもエラーにならないので、この形式のまま何度かアプリリリースしても問題ありません</li></ul></li></ul><p>上記の切り替えは1度だけ動かせば、Lambdaランタイムが切り替わるので、その後は次のように記述を戻してOKです。</p><figure class="highlight makefile"><figcaption><span>移行時の特殊対応を取り除いた例</span></figcaption><table><tr><td class="code"><pre><span class="line">SHELL := /bin/bash</span><br><span class="line">.SHELLFLAGS := -eu -o pipefail -c</span><br><span class="line"></span><br><span class="line"><span class="section">build:</span></span><br><span class="line">@CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags=<span class="string">&quot;-s -w -buildid=&quot;</span> -trimpath -tags lambda.norpc -o bin/bootstrap cmd/lambda/lambda.go</span><br><span class="line"></span><br><span class="line"><span class="section">zip: build</span></span><br><span class="line">@touch -t 202401010000 bin/bootstrap</span><br><span class="line">@zip -j -q bin/lambda.zip bin/bootstrap</span><br><span class="line"></span><br><span class="line"><span class="section">deploy-prod: zip</span></span><br><span class="line">aws lambda --profile our_prod update-function-code --function-name prod-example-api \</span><br><span class="line">      --zip-file fileb://bin/lambda.zip | jq -c &#x27;&#123;FunctionName, LastModified&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="移行してみて"><a href="#移行してみて" class="headerlink" title="移行してみて"></a>移行してみて</h2><p>作業手順としては <code>make deploy-prod</code> を実行するだけ（※数十のLambdaリソースを一括デプロイするラッパーのようなツールがあったため）ですので、非常に楽でした。慣れた手順で、ダウンタイム無しで切り替えられるため安心感があり、この手順を採用して良かったと思いました。</p><p>なお本題ではないですが、Go 1.x からのランタイム切り替えに際して、次のコード書き換えが1点必要でした。</p><p>一部のコードで次のようにタイムゾーンを読み込んでいる処理がありました。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">jst, _ = time.LoadLocation(<span class="string">&quot;Asia/Tokyo&quot;</span>)</span><br></pre></td></tr></table></figure><p>これが次のようなエラーでてしまいました。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;level&quot;</span><span class="punctuation">:</span><span class="string">&quot;error&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span><span class="string">&quot;2023-12-26T09:54:01Z&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;panic catch: time: missing Location in call to Time.Ingoroutine （略）&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>provided.al2023</code> ですとタイムゾーン情報をファイルから取れないのですね。対応としては、利用しているタイムゾーンがJSTのみだったため、<code>jst := time.FixedZone(&quot;Asia/Tokyo&quot;, 9*60*60)</code> と単純に書き換えてしのぎました。</p><p>この事象がなぜ発生したかは本記事のテーマとは少し外れるため、詳細は <a href="https://tutuz-tech.hatenablog.com/entry/2021/01/30/192956">辻さんの記事</a> などを参照ください。</p><p>それ以外、これといって課題は出ておらず安定しています。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>切り替え作業ですが、慣れた手順をそのままで中身のみを拡張するような方式だと、作業中のプレッシャーが格段に減り手順書も作る必要がないほどでしたので非常に楽ができました。zipに2つのバイナリを同梱するのはトリッキーであり、あまり聞かないやり方な気がしますが、覚えておくと今後もなにかの役に立つかもしれません。</p><p>本当は<code>amd64</code> から <code>arm64</code> に切り替えたかったのですが、これについては持ち越し（今回の手順だと対応もできないです）となりました。その場合は、イベントマッピングを無効化するといった手順が必要そうで、少し大変だと感じています。良い切り替えアイデアは絶賛募集中です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Lambda/">Lambda</category>
      
      <category domain="https://future-architect.github.io/tags/Makefile/">Makefile</category>
      
      
      <comments>https://future-architect.github.io/articles/20240226a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MacをWindows/Linux風な操作感にする、Hammerspoonで始める環境構築</title>
      <link>https://future-architect.github.io/articles/20240222a/</link>
      <guid>https://future-architect.github.io/articles/20240222a/</guid>
      <pubDate>Wed, 21 Feb 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。最近自宅チェアをバランスボールにして体幹を鍛えている、HealthCare Innovation</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。最近自宅チェアをバランスボールにして体幹を鍛えている、HealthCare Innovation Group(HIG)所属の山本です。</p><p>私用PCはLinux、会社PCはプロジェクトによってWindowsとMacのどちらかを使っている生活をしており、かつ自宅のモニターやキーボードは外付けで1つのものを使用しています。</p><p>その日々を過ごす中で、キーバインディングが異なるPCで混乱することがあり、ツール・操作感をできるだけ統一したいという願望がありました。</p><p>今回はMacを使用する際に、キーバインディングや操作感を私用PCに寄せるため「<a href="https://www.hammerspoon.org/">Hammerspoon</a>」を使用した、個人的な環境構築集を書きます。</p><h2 id="Hammerspoonとは？"><a href="#Hammerspoonとは？" class="headerlink" title="Hammerspoonとは？"></a>Hammerspoonとは？</h2><p><a href="https://www.hammerspoon.org/">https://www.hammerspoon.org/</a></p><p>macOSの操作をLua言語で行うことができるツールです。<br>アプリケーション、ウィンドウ、マウス ポインター、クリップボードなどできることは多岐に及びます。</p><p>キーバインド操作ツールとしては「Karabiner-Elements」や画面分割では「Shiftit」など、類似の操作ができるアプリはいくつかあります。</p><p>これらのツールのようにGUIで設定できない代わりに、スクリプトをゴリゴリ書くことでかなり自由度の高い操作をできることが特徴です。</p><p>今回はキーバインディングの操作や、ウィンドウの操作に主に使用させていただきました。</p><h2 id="操作環境"><a href="#操作環境" class="headerlink" title="操作環境"></a>操作環境</h2><ul><li>Mac OS: Ventura 13.5</li><li>キーボード：英字キーボード(Keychron K2)をUSB接続</li><li>ディスプレイ：3枚のディスプレイを外付け、本体PCは閉じて使用(Anker 564 USB-C ドッキングステーション+DisplayLink Manager)</li><li>開発ツール：WezTerm + Neovim</li></ul><p>今回の操作環境としては、上記のようなものです。</p><p>英字キーボードを外付けしている&amp;複数の外部ディスプレイを接続している、ということが記事の背景となります。</p><h2 id="やりたいこと"><a href="#やりたいこと" class="headerlink" title="やりたいこと"></a>やりたいこと</h2><p>Macを初めて使うユーザーのお悩みとして、以下のようなものがあるのではないでしょうか？</p><ul><li>Commandキーって一体なんのキー…？</li><li>Ctrl+C&#x2F;Ctrl+Vでコピペができない…</li><li>Ctrl↔Cmdの入れ替えを標準オプションから設定してみたはいいけど、求めてないキー操作まで入れ替わってしまう…</li><li>Windowsキー(の位置にあるCommandキー)＋矢印キーでウィンドウの半分表示や移動ができない</li><li>Windowsユーザーに共有されたフォルダパスで開けない…</li></ul><p>これらのうちの多くは、Macのキーバインディングやツールに慣れたり活用することで解決する、もしくはより効率的な操作できると思います。</p><p>思い…ますが、私はなるべくお手軽に単一のツールで解決し、かつ使用感はLinuxやWindowsに寄せたいです。</p><p>その頑固な意思が背景にありましたが、Hammerspoonであれば、Luaで設定ファイルを記載することで自在に管理できました。</p><h2 id="やったこと"><a href="#やったこと" class="headerlink" title="やったこと"></a>やったこと</h2><p>今回紹介することはシンプルな3つの設定です。</p><p><strong>1.キーバインディングの変更:</strong></p><ul><li>Ctrl+C&#x2F;Ctrl+Vでコピーペーストができるように（エディタ系のアプリを除いて）</li><li>Win+矢印キーでウィンドウの移動・半分化・最大化ができる（例: Win+左矢印でウィンドウを左半分に移動）</li></ul><p>※上記キーの名称はキーボードの刻印見たまま。</p><img src="/images/20240222a/IMG_20240219_174617.jpg" alt="IMG_20240219_174617.jpg" width="1200" height="675" loading="lazy"><p><strong>2.ウィンドウ操作の変更:</strong></p><ul><li>Windowsライクなウィンドウ操作（半分表示、最大化、ディスプレイ間移動）</li></ul><p><strong>3.パスの相互変換:</strong></p><ul><li>WindowsパスとMacパスの相互変換をメニューバーに常駐させることで簡単に実行</li></ul><img src="/images/20240222a/image_(12).png" alt="image_(12).png" width="284" height="146" loading="lazy"><p>特に、Windowsユーザーから共有されるパスの相互変換機能は、メニューバーにアイコンを常駐させることで、操作によりクリップボード上のパスを変換する方法としました。これにより、<code>\\ホスト名\フォルダ名</code> (Windows) と <code>smb://ホスト名/フォルダ名 </code>(Mac) の間での変換を簡単に行うことができます。</p><h2 id="キーボード設定"><a href="#キーボード設定" class="headerlink" title="キーボード設定"></a>キーボード設定</h2><p>すべての変更をHammerspoonで管理しています！と言いたいところですが、試行錯誤の結果、自然な操作感とするためModifier Keysについては以下のようにスワップしています。</p><img src="/images/20240222a/image.png" alt="image.png" width="672" height="403" loading="lazy"><p>上記設定とHammerspoon側の設定を合わせることで、キー操作を定義する形です。</p><h2 id="Hammerspoon設定編"><a href="#Hammerspoon設定編" class="headerlink" title="Hammerspoon設定編"></a>Hammerspoon設定編</h2><p>さて、ここからが本題です。実際にHammerspoonの設定例を紹介していきます。</p><p>Hammerspoonの設定ファイルは<code>~/.hammerspoon/init.lua</code>に配置され、Lua言語で記載します。</p><p>また、メニューバー上からも<code>Open Config</code>にて開くことができる親切仕様です。</p><p>設定ファイルの記載内容としては、ドキュメントがかなり整備されており下記を参照することで一通り記載されています。<br><a href="https://www.hammerspoon.org/docs/index.html">https://www.hammerspoon.org/docs/index.html</a></p><p>上記のドキュメントの中でも、今回紹介するものは、以下の4つです。</p><ul><li>キーバインディング操作</li><li>ウィンドウ操作</li><li>メニューバーへのアイテム作成</li><li>クリップボード操作</li></ul><p>以降のセクションでは実際の実装例として紹介していきます。</p><p>※1つのファイルに記載すると煩雑であったため、<code>init.lua</code>から各設定のLuaファイルを読み込むように分割して構成しています</p><h2 id="1-Hammerspoon設定-キーバインディング編"><a href="#1-Hammerspoon設定-キーバインディング編" class="headerlink" title="1. Hammerspoon設定(キーバインディング編)"></a>1. Hammerspoon設定(キーバインディング編)</h2><p><a href="https://www.hammerspoon.org/docs/hs.eventtap.html">https://www.hammerspoon.org/docs/hs.eventtap.html</a></p><p>キーバインディングについては、<code>hs.eventtap</code>の章に記載されている各関数使用することで、入力キーの入れ替えなどの操作ができます。</p><p>今回はCtrl&#x2F;Cmdキーの入れ替えをいい感じにしたかったので、以下のように実装しています。</p><p>標準設定でModifier Keysを一部入れ替えていることを前提に、スクリプトで一部操作を上書きするイメージですね。</p><figure class="highlight lua"><figcaption><span>modules/key_bindings.lua</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> key_bindings = &#123;&#125;</span><br><span class="line"><span class="comment">-- local logger = hs.logger.new(&quot;key_bindings.lua&quot;, &quot;debug&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> console_apps = &#123;</span><br><span class="line">  [<span class="string">&quot;Terminal&quot;</span>] = <span class="literal">false</span>,</span><br><span class="line">  [<span class="string">&quot;iTerm2&quot;</span>] = <span class="literal">true</span>,</span><br><span class="line">  [<span class="string">&quot;WezTerm&quot;</span>] = <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> special_combos = &#123;</span><br><span class="line">  c = <span class="literal">false</span>,</span><br><span class="line">  v = <span class="literal">false</span>,</span><br><span class="line">  space = <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- コンソールアプリ以外でCtrl,Cmdキーの入れ替えを行う</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">swapCmdCtrl</span><span class="params">(event)</span></span></span><br><span class="line">  <span class="keyword">local</span> flags = event:getFlags()</span><br><span class="line">  <span class="keyword">local</span> key_code = event:getKeyCode()</span><br><span class="line">  <span class="keyword">local</span> key_char = hs.keycodes.map[key_code]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">local</span> front_app = hs.application.frontmostApplication()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> console_apps[front_app:name()] <span class="keyword">and</span> flags[<span class="string">&quot;cmd&quot;</span>] <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> special_combos[key_char] <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> modifier_keys = &#123;<span class="string">&quot;ctrl&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> flags[<span class="string">&quot;shift&quot;</span>] <span class="keyword">then</span></span><br><span class="line">      modifier_keys[#modifier_keys + <span class="number">1</span>] = <span class="string">&quot;shift&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> flags[<span class="string">&quot;alt&quot;</span>] <span class="keyword">then</span></span><br><span class="line">      modifier_keys[#modifier_keys + <span class="number">1</span>] = <span class="string">&quot;alt&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    hs.eventtap.event.newKeyEvent(modifier_keys, key_char, <span class="literal">true</span>):post()</span><br><span class="line">    hs.eventtap.event.newKeyEvent(modifier_keys, key_char, <span class="literal">false</span>):post()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">key_bindings.start</span><span class="params">()</span></span></span><br><span class="line">  key_bindings.eventtap = hs.eventtap.new(&#123;hs.eventtap.event.types.keyDown&#125;, swapCmdCtrl)</span><br><span class="line">  key_bindings.eventtap:start()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">key_bindings.stop</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">if</span> key_bindings.eventtap <span class="keyword">then</span></span><br><span class="line">    key_bindings.eventtap:stop()</span><br><span class="line">    key_bindings.eventtap = <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> key_bindings</span><br></pre></td></tr></table></figure><figure class="highlight lua"><figcaption><span>init.lua</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">-- keyBindigsを有効化する</span></span><br><span class="line">key_bindings.start()</span><br><span class="line"></span><br><span class="line">hs.reload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">  key_bindings.stop()</span><br><span class="line">  hs.reload()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>ちょっぴり複雑な背景としては、ターミナル系アプリおよびエディタの操作時にはいくつか例外としたいものがあったためです。</p><p>他のOSから持ってきた設定ファイルをそのまま使いたかったことや、<code>Ctrl + C</code>で処理を中止(SIGINTシグナルを送信)できるようにしておきたかったことがあります。</p><p>素朴なキー入れ替えだとCtrl + Spaceでの文字入力変換や、他OSで定義したVimのショートカットをそのまま使うことができませんでした。</p><p>上記の設定にすることで、他OSで設定した設定ファイルをそのまま持ち込めています。</p><h2 id="2-Hammerspoon設定-ウィンドウ操作編"><a href="#2-Hammerspoon設定-ウィンドウ操作編" class="headerlink" title="2. Hammerspoon設定(ウィンドウ操作編)"></a>2. Hammerspoon設定(ウィンドウ操作編)</h2><p>ウィンドウ操作としては、Windowsのキーバインディングに寄せたいと思ってました。</p><p>画面の半分に移動したり、<br><img src="/images/20240222a/image_2.png" alt="" width="841" height="247" loading="lazy"></p><p>最大化したり、<br><img src="/images/20240222a/image_3.png" alt="" width="839" height="242" loading="lazy"></p><p>ディスプレイ間を移動したり、<br><img src="/images/20240222a/image_4.png" alt="" width="830" height="243" loading="lazy"></p><p>などの操作ですね。Windowsではこれらはデフォルトのショートカットキーとなっていますが、Macでも再現をしたいといったことがモチベーションです。</p><p><a href="https://www.hammerspoon.org/docs/hs.window.html#moveToUnit">https://www.hammerspoon.org/docs/hs.window.html#moveToUnit</a></p><p>Hammerspoonでは、<code>hs.window</code>に記載されている各関数でウィンドウの操作が可能になっています。</p><p>今回は、以下のように実装しました。</p><figure class="highlight lua"><figcaption><span>modules/window_manager.lua</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> window_management = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- アクティブウィンドウを画面の左半分に移動する関数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">window_management.moveWindowLeft</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> win = hs.window.focusedWindow()</span><br><span class="line">  <span class="keyword">if</span> win <span class="keyword">then</span></span><br><span class="line">    win:moveToUnit(hs.layout.left50)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- アクティブウィンドウを画面の右半分に移動する関数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">window_management.moveWindowRight</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> win = hs.window.focusedWindow()</span><br><span class="line">  <span class="keyword">if</span> win <span class="keyword">then</span></span><br><span class="line">    win:moveToUnit(hs.layout.right50)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- アクティブウィンドウを画面の最大化する</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">window_management.maximizeWindow</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> win = hs.window.focusedWindow()</span><br><span class="line">  <span class="keyword">if</span> win <span class="keyword">then</span></span><br><span class="line">    win:maximize()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- アクティブウィンドウを画面の最小化する</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">window_management.minimizeWindow</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> win = hs.window.focusedWindow()</span><br><span class="line">  <span class="keyword">if</span> win <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> app = win:application()</span><br><span class="line">    app:hide()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- アクティブウィンドウを次のスクリーンに移動</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">window_management.moveWindowNextScreen</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> win = hs.window.focusedWindow()</span><br><span class="line">  <span class="keyword">if</span> win <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> nextScreen = win:screen():<span class="built_in">next</span>()</span><br><span class="line">    win:moveToScreen(nextScreen, <span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- アクティブウィンドウを前のスクリーンに移動</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">window_management.moveWindowPrevScreen</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> win = hs.window.focusedWindow()</span><br><span class="line">  <span class="keyword">if</span> win <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> prevScreen = win:screen():previous()</span><br><span class="line">    win:moveToScreen(prevScreen, <span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> window_management</span><br></pre></td></tr></table></figure><figure class="highlight lua"><figcaption><span>init.lua</span></figcaption><table><tr><td class="code"><pre><span class="line">hs.hotkey.bind(&#123;<span class="string">&quot;option&quot;</span>&#125;, <span class="string">&quot;Left&quot;</span>, window_management.moveWindowLeft)</span><br><span class="line">hs.hotkey.bind(&#123;<span class="string">&quot;option&quot;</span>&#125;, <span class="string">&quot;Right&quot;</span>, window_management.moveWindowRight)</span><br><span class="line">hs.hotkey.bind(&#123;<span class="string">&quot;option&quot;</span>&#125;, <span class="string">&quot;Up&quot;</span>, window_management.maximizeWindow)</span><br><span class="line">hs.hotkey.bind(&#123;<span class="string">&quot;optionn&quot;</span>&#125;, <span class="string">&quot;Down&quot;</span>, window_management.minimizeWindow)</span><br><span class="line">hs.hotkey.bind(&#123;<span class="string">&quot;option&quot;</span>, <span class="string">&quot;shift&quot;</span>&#125;, <span class="string">&quot;Left&quot;</span>, window_management.moveWindowNextScreen)</span><br><span class="line">hs.hotkey.bind(&#123;<span class="string">&quot;option&quot;</span>, <span class="string">&quot;shift&quot;</span>&#125;, <span class="string">&quot;Right&quot;</span>, window_management.moveWindowPrevScreen)</span><br></pre></td></tr></table></figure><p>上記の設定により、Windowsライクなウィンドウの移動・サイズ変更操作ができています。</p><h2 id="3-Hammerspoon設定-パス相互変換編"><a href="#3-Hammerspoon設定-パス相互変換編" class="headerlink" title="3. Hammerspoon設定(パス相互変換編)"></a>3. Hammerspoon設定(パス相互変換編)</h2><p>最後に、パス変換の紹介です。</p><p>WindowsとMacのパス表記の間には、小さくそして大きな差異があることには度々苦しめられると思います。</p><p>区切り文字が違ったり、ファイルサーバーのパスが異なったりですね。<br>(<code>\\ホスト名\フォルダ名</code> &lt;-&gt; <code>smb://ホスト名/フォルダ名</code>のようなもの)</p><p>この変換については濁点の扱いであったりUTF-8の扱いなど闇が深い部分も多いので詳細は触れず、一部簡単にした例を紹介します。</p><p>パス変換の実施方法はいろいろあると思いますが、今回はメニューバーに変換を常駐させておき、操作によりクリップボード上のパスを変換する方法としました。</p><img src="/images/20240222a/image_(12)_2.png" alt="" width="284" height="146" loading="lazy"><p><a href="https://www.hammerspoon.org/docs/hs.menubar.html">https://www.hammerspoon.org/docs/hs.menubar.html</a></p><p>Hammerspoonでは、<code>hs.menubar</code>に記載された各関数を使用することで、Mac上のメニューバーにドロップダウンメニューを表示することができます。</p><p><a href="https://www.hammerspoon.org/docs/hs.pasteboard.html">https://www.hammerspoon.org/docs/hs.pasteboard.html</a></p><p>また、クリップボード操作については<code>hs.pasteboard</code>に記載された各関数を使用することで実施できます。</p><p>今回は、メニュー上に表示した変換メニューを押下することで、クリップボードからテキストを取得して変換し、クリップボードに返すような挙動としました。</p><p>実装例としては、以下のようになります。</p><figure class="highlight lua"><figcaption><span>modules/path_converter.lua</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MacのファイルパスをWindows形式に変換する</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertWindowsPathToMac</span><span class="params">(windowsPath)</span></span></span><br><span class="line">    <span class="keyword">local</span> macPath = windowsPath:<span class="built_in">gsub</span>(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>):<span class="built_in">gsub</span>(<span class="string">&quot;C:&quot;</span>, <span class="string">&quot;~/&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> macPath</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- MacのSMBパスをWindowsのUNC形式に変換する</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertMacPathToWindows</span><span class="params">(macPath)</span></span></span><br><span class="line">    <span class="keyword">local</span> windowsPath = macPath:<span class="built_in">gsub</span>(<span class="string">&quot;~/&quot;</span>, <span class="string">&quot;C:&quot;</span>):<span class="built_in">gsub</span>(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;\\&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> windowsPath</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- WindowsのファイルパスをMac形式に変換する</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertUncWindowsPathToMac</span><span class="params">(windowsPath)</span></span></span><br><span class="line">    <span class="keyword">local</span> macPath = windowsPath:<span class="built_in">gsub</span>(<span class="string">&quot;\\\\&quot;</span>,<span class="string">&quot;smb://&quot;</span>):<span class="built_in">gsub</span>(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> macPath</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- WindowsのUNC形式パスをMacのSMBパスに変換する</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertUncMacPathToWindows</span><span class="params">(macPath)</span></span></span><br><span class="line">    <span class="keyword">local</span> windowsPath = macPath:<span class="built_in">gsub</span>(<span class="string">&quot;smb://&quot;</span>, <span class="string">&quot;\\\\&quot;</span>):<span class="built_in">gsub</span>(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;\\&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> windowsPath</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> menuBarItem = hs.menubar.new()</span><br><span class="line"></span><br><span class="line">menuBarItem:setTitle(<span class="string">&quot;WinMac PathConverter&quot;</span>)</span><br><span class="line"></span><br><span class="line">menuBarItem:setMenu(&#123;</span><br><span class="line">    &#123;title = <span class="string">&quot;Convert Clipboard to Mac Path&quot;</span>, fn = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">local</span> clipboardContents = hs.pasteboard.getContents()</span><br><span class="line">        <span class="keyword">local</span> convertedPath = convertWindowsPathToMac(clipboardContents)</span><br><span class="line">        hs.pasteboard.setContents(convertedPath)</span><br><span class="line">        hs.alert.show(<span class="string">&quot;Converted to Mac Path: &quot;</span> .. convertedPath)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;title = <span class="string">&quot;Convert Clipboard to Windows Path&quot;</span>, fn = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">local</span> clipboardContents = hs.pasteboard.getContents()</span><br><span class="line">        <span class="keyword">local</span> convertedPath = convertMacPathToWindows(clipboardContents)</span><br><span class="line">        hs.pasteboard.setContents(convertedPath)</span><br><span class="line">        hs.alert.show(<span class="string">&quot;Converted to Windows Path: &quot;</span> .. convertedPath)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;title = <span class="string">&quot;Convert Clipboard to Mac Path(UNC)&quot;</span>, fn = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">local</span> clipboardContents = hs.pasteboard.getContents()</span><br><span class="line">        <span class="keyword">local</span> convertedPath = convertUncWindowsPathToMac(clipboardContents)</span><br><span class="line">        hs.pasteboard.setContents(convertedPath)</span><br><span class="line">        hs.alert.show(<span class="string">&quot;Converted to Mac Path: &quot;</span> .. convertedPath)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;title = <span class="string">&quot;Convert Clipboard to Windows Path(UNC)&quot;</span>, fn = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">local</span> clipboardContents = hs.pasteboard.getContents()</span><br><span class="line">        <span class="keyword">local</span> convertedPath = convertUncMacPathToWindows(clipboardContents)</span><br><span class="line">        hs.pasteboard.setContents(convertedPath)</span><br><span class="line">        hs.alert.show(<span class="string">&quot;Converted to Windows Path: &quot;</span> .. convertedPath)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;title=<span class="string">&quot;Quit&quot;</span>, fn= <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.hints.showTitleThresh =<span class="number">0</span> <span class="keyword">end</span>&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight lua"><figcaption><span>init.lua</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> path_converter = <span class="built_in">require</span> <span class="string">&quot;modules.path_converter&quot;</span></span><br></pre></td></tr></table></figure><p>上記の設定により、メニューバーからパス変換をし、変換内容についてはダイアログ表示できました。</p><p>実行時のイメージは以下のようなものです。</p><p>クリップボードにパスをコピーした上で、Macのメニューバー上に作成したプルダウンから、作成した関数をトリガーすることで画像のようなアラートを表示する＆クリップボードに変換後パスを保存できます。</p><img src="/images/20240222a/image_5.png" alt="image.png" width="720" height="355" loading="lazy"><p>Luaスクリプトをより煮詰めることで、さらにいろんなパスケースや文字列変換にも対応させることが可能です。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Hammerspoonを導入して実現したMacのキーバインディング・ウィンドウ操作・クリップボードの文字列としてのパス変換の3つを紹介しました。</p><p>こういったHammerspoonの設定を通して、Macの操作にいまだに不慣れな私でも、個人的にはWindows&#x2F;Linuxライクな操作ができるようになっています。</p><p>正直、今回記事で実施した操作は他のアプリの組み合わせでも実行できるとは思いますが、こういった設定はして暫く経つとどのツールを組み合わせているのか、どこに設定ファイルがあるのか、また記載内容が読めなくなっているのが私の常です。</p><p>そういった意味で、HammerspoonではLuaファイル一本で設定できるので振り返りやすく、また自由度も高いという意味で個人的には良かったです。<br>(NeovimのLuaファイル設定と同じ感覚でできました)</p><p>Macを使う、けど操作に慣れない…！スクリプトでゴリゴリいじりたい…！といった方におすすめしたいとおもいます。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.hammerspoon.org/docs/index.html">https://www.hammerspoon.org/docs/index.html</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/">環境構築</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88/">ショートカット</category>
      
      <category domain="https://future-architect.github.io/tags/Mac/">Mac</category>
      
      <category domain="https://future-architect.github.io/tags/Hammerspoon/">Hammerspoon</category>
      
      
      <comments>https://future-architect.github.io/articles/20240222a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【Firebase】GDG Tokyo Monthly Online Tech Talksに登壇しました</title>
      <link>https://future-architect.github.io/articles/20240221a/</link>
      <guid>https://future-architect.github.io/articles/20240221a/</guid>
      <pubDate>Tue, 20 Feb 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240221a/image.png&quot; alt=&quot;image.png&quot; width=&quot;660&quot; height=&quot;270&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240221a/image.png" alt="image.png" width="660" height="270" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。最近スギ花粉耐性がないことを実感しつつある山本です。</p><p>2024&#x2F;2&#x2F;1、GDG Tokyo主催の「<a href="https://gdg-tokyo.connpass.com/event/306983/">【Firebase】GDG Tokyo Monthly Online Tech Talks</a>」に「Flutter×Firebaseサービス達で高速でモバイルアプリを開発した話」というタイトルで登壇してきたので、その事後レポートです。</p><p>登壇資料：</p><script defer class="speakerdeck-embed" data-id="d4e715deb4044482a0aa0f0d3a5a492b" data-ratio="1.7772511848341233" src="//speakerdeck.com/assets/embed.js"></script><h2 id="GDG-Tokyo-Monthly-Online-Tech-Talksとは？"><a href="#GDG-Tokyo-Monthly-Online-Tech-Talksとは？" class="headerlink" title="GDG Tokyo Monthly Online Tech Talksとは？"></a>GDG Tokyo Monthly Online Tech Talksとは？</h2><blockquote><p>Google Developers Group (GDG) Tokyo は主にGoogleのテクノロジーに興味のある人たちで情報を共有しあう集いです</p></blockquote><blockquote><p>GDG Tokyoが毎月開催する「GDG Tokyo Monthly Online Tech Talks」は、Googleの技術に関心を持つ人々が集うオンラインMeetupです。このイベントは、Android、Google Cloud、Web、Firebase、Machine Learning（ML）、Flutter、Goなど、多様なGoogleの技術に焦点を当てています。参加者は、技術情報をキャッチアップし、エンジニア同士のコミュニケーションと交流の場としてご活用いただけます。</p></blockquote><p>(※GDG Tokyoの<a href="https://gdg-tokyo.connpass.com/">connpassページ</a>より引用)</p><hr><p>「GDG Tokyo」および「GDG Tokyo Monthly Online Tech Talks」についてはGDG Tokyoのグループの説明として上記が記載されています。</p><p>今回のイベントのテーマは「Firebase」に関わることで、15分枠 or 5分枠の登壇枠で開催されていました。</p><h2 id="登壇"><a href="#登壇" class="headerlink" title="登壇"></a>登壇</h2><p>最近お仕事でFirebaseに携わっていたこともあり、社内の人におすすめされたので登壇を申し込んでみました。(会社アカウントとしては初の登壇です…！)</p><p>登壇内容としては、新規事業プロジェクト周りでFlutterとFirebaseを活用していたのでそのユースケースの紹介をしてみました。</p><p>以下内容を一部抜粋して紹介していきます。</p><h2 id="アーキテクチャ紹介"><a href="#アーキテクチャ紹介" class="headerlink" title="アーキテクチャ紹介"></a>アーキテクチャ紹介</h2><p>今回紹介したユースケースとしてはモバイルアプリ側はFlutter、バックエンドサービス側をFirebaseのサービスを活用したものです。</p><img src="/images/20240221a/image_2.png" alt="image.png" width="962" height="540" loading="lazy"><p>どちらもGoogle製ということもあり、親和性がある&amp;ドキュメントが豊富ということでこのアーキテクチャが選定されています。</p><img src="/images/20240221a/image_3.png" alt="image.png" width="961" height="543" loading="lazy"><p>使用したサービスを一覧で並べてみると、Firebaseを主としたかなりモダンな構成と言えるのではないでしょうか？<br>自分は開発チームにあとから参画したのですが、なかなか良い経験となっています。</p><h2 id="ログ-アラートについて"><a href="#ログ-アラートについて" class="headerlink" title="ログ&amp;アラートについて"></a>ログ&amp;アラートについて</h2><img src="/images/20240221a/image_4.png" alt="image.png" width="963" height="536" loading="lazy"><p>Firebaseでログ・アラート周りに使用できるサービスとしては以下の2つがあります。</p><ul><li>Firebase Crashlytics</li><li>Google Analytics for Firebase</li></ul><p>構成としてはいろいろなものが考えられますが、今回はCrashlyticsについては主にクラッシュor致命的なエラーを通知するように、Google Analyticsにはユーザーログを出したりBigQueryに連携したりしてユーザーの操作の追跡や広告効果の測定といったことを行っていました。</p><p>※BigQueryへの連携については松井さんが以下記事で解説してます。</p><p><a href="https://future-architect.github.io/articles/20210316/">Firebaseで取得したログをBigQueryに連携してユーザー操作をトラッキングする</a></p><h2 id="Firebase-Remote-Configについて"><a href="#Firebase-Remote-Configについて" class="headerlink" title="Firebase Remote Configについて"></a>Firebase Remote Configについて</h2><img src="/images/20240221a/image_5.png" alt="image.png" width="964" height="538" loading="lazy"><p>その他に活用していてユニークだったサービスとしては、Remote Configがあります。</p><p><a href="https://firebase.google.com/docs/remote-config?hl=ja">https://firebase.google.com/docs/remote-config?hl=ja</a></p><p>詳しくは上記の公式ページを見ていただきたいですが、Remote Config Serverでパラメータ値などを管理することで、アプリストアへのリリースすることなくユーザーアプリの画面切り替えや強制アップデートなども行えます。</p><p>まだ導入できていませんが、A&#x2F;B testingなども行うことができるようなので将来的には触ってみたいですね。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はGDG Tokyoにて、最近触ったFirebaseサービスとFlutterの活用事例について登壇してきました！<br>会社アカウントで登壇することは初めてだったのですが、登壇になれた方やチームメンバーに手厚くフォロー頂き楽しく発表してくることができました。</p><p>今後もどんどん登壇やアウトプットできるようにがんばります。<br>※スギ花粉とも頑張って生きていこうと思います。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://firebase.google.com/docs/remote-config?hl=ja">https://firebase.google.com/docs/remote-config?hl=ja</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/Firebase/">Firebase</category>
      
      <category domain="https://future-architect.github.io/tags/Flutter/">Flutter</category>
      
      <category domain="https://future-architect.github.io/tags/GDG/">GDG</category>
      
      
      <comments>https://future-architect.github.io/articles/20240221a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>社内LANで必要かもしれないLocalstackへのカスタムCA証明書ダウンロード手順</title>
      <link>https://future-architect.github.io/articles/20240220a/</link>
      <guid>https://future-architect.github.io/articles/20240220a/</guid>
      <pubDate>Mon, 19 Feb 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240220a/localstack.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;400&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240220a/localstack.png" alt="" width="800" height="400"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG 真野です。</p><p>2023年3月31日にリリースされたLocalStack <a href="https://github.com/localstack/localstack/releases/tag/v2.0.0">v2.0.0</a>から、LocalStackのイメージ構成に変更が入りました。利用する環境によってはKinesis Data Streamsなど一部のサービスを利用するときにカスタムCA証明書をダウンロードする必要がありました（後述する通り、Kinesis Data Streamsに関しては現在のバージョンでは対応不要ですので安心ください）。</p><p>この記事では、DockerのマルチステージビルドでOpenSSLを使って証明書をダウンロードして、LocalStackのカスタムイメージを作成する流れをまとめます。</p><p><a href="https://github.com/localstack/localstack/issues/8782">#8782</a>のIssueを見つけて対応を考えている人や、<code>installation of kinesis-mock failed</code>といったエラーログが出ていて困っている場合、おそらくこの記事が参考になります。</p><p>ただし、少なくてもKinesis Data Streamsに関しては、<code>v2.3.0</code> からアップデートが入り本記事の対応が不要になりました。LocalStackのその他サービスでハマった場合にこの記事を確認いただくと良いかなと思います。エラーログでこの記事を見つけた方は、LocalStackのバージョンを上げることで解決することもあるようですので、まずバージョンアップを試してみることを推奨します。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>LocalStackは様々なAWSサービスをローカルやCI環境で再現してくれるエミュレータです。こういったサービスの難しいポイントの1つは、AWSのサービスや機能はどんどん増え豊富になっていくため、追随するためにはイメージサイズが肥大化しいくことでしょう。</p><p>そのため、v2.0.0からは起動時に一度だけ外部からサービスが必要とするパッケージ読み込みキャッシュ。それにより、開発者の利用しないサービスが依存するパッケージは元のイメージから取り除き、容量削減を狙う方式になりました。</p><p>少しばかり複雑な手順を踏んでいる気がしますが、イメージサイズと利用勝手のバランスを取った賢いやり方に思えます。CIで利用するユーザにとってはイメージのpull時間の節約、しいては費用削減となるため嬉しい施策出ると思います。</p><p>一方でこれにより、DynammoDBなどでは<a href="https://github.com/localstack/localstack/pull/8194">色々と問題</a>が多かったらしく、利用頻度が高いサービス（Issueではトップ15と書かれていますが今のところは数種類）が再びプリインストールする方向にするよという話も出ていました。</p><p>v3.1.0では、Dockerfileを見る限り、DynamoDBとLambdaはプリインストール方式に戻っていました（DynamoDBは（多分）DynamoDB LocalのJAR増加で、47MB程度イメージサイズが増えたようです）。</p><figure class="highlight dockerfile"><figcaption><span>https://github.com/localstack/localstack/blob/v3.1.0/Dockerfile#L184-L191</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install packages which should be shipped by default</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=cache,target=/root/.cache \</span></span><br><span class="line"><span class="language-bash">    --mount=<span class="built_in">type</span>=cache,target=/var/lib/localstack/cache \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">source</span> .venv/bin/activate &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    python -m localstack.cli.lpm install \</span></span><br><span class="line"><span class="language-bash">      lambda-runtime \</span></span><br><span class="line"><span class="language-bash">      dynamodb-local &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chown</span> -R localstack:localstack /usr/lib/localstack &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> -R 777 /usr/lib/localstack</span></span><br></pre></td></tr></table></figure><p>Kinesis Data StreamsなどもDynamoDBと同じようにプリインストールできないかという要望も<a href="https://github.com/localstack/localstack/issues/8300">#8300</a>で上げられましたが、やはりイメージサイズとのバランス問題で棄却されています。何かしらプリインストールしないと困るユースケースが無いと追加はされないような雰囲気があります。</p><h2 id="Installation-of-kinesis-mock-failed"><a href="#Installation-of-kinesis-mock-failed" class="headerlink" title="Installation of kinesis-mock failed"></a>Installation of kinesis-mock failed</h2><p>LocalStackでKinesis Data Streamsのストリームを作成しようとした場合に、<code>Installation of kinesis-mock failed</code> というエラーが出るケースについて話します。ログ内容としては次のようなものです。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">localstack-1  | SERVICES variable is ignored <span class="keyword">if</span> EAGER_SERVICE_LOADING=0.</span><br><span class="line">localstack-1  |</span><br><span class="line">localstack-1  | LocalStack version: 2.0.2</span><br><span class="line">localstack-1  | LocalStack Docker container <span class="built_in">id</span>: ed6628bad076</span><br><span class="line">localstack-1  | LocalStack build <span class="built_in">date</span>: 2023-04-17</span><br><span class="line">localstack-1  | LocalStack build git <span class="built_in">hash</span>: 6b436786</span><br><span class="line">localstack-1  |</span><br><span class="line">localstack-1  | 2024-02-18T08:40:45.683  WARN --- [-functhread3] hypercorn.error            : ASGI Framework Lifespan error, continuing without Lifespan support</span><br><span class="line">localstack-1  | 2024-02-18T08:40:45.683  WARN --- [-functhread3] hypercorn.error            : ASGI Framework Lifespan error, continuing without Lifespan support</span><br><span class="line">localstack-1  | 2024-02-18T08:40:45.695  INFO --- [-functhread3] hypercorn.error            : Running on https://0.0.0.0:4566 (CTRL + C to quit)</span><br><span class="line">localstack-1  | 2024-02-18T08:40:45.695  INFO --- [-functhread3] hypercorn.error            : Running on https://0.0.0.0:4566 (CTRL + C to quit)</span><br><span class="line">localstack-1  | Ready.</span><br><span class="line">localstack-1  | 2024-02-18T08:40:51.233  INFO --- [   asgi_gw_0] l.s.k.kinesis_mock_server  : Creating kinesis backend <span class="keyword">for</span> account 000000000000</span><br><span class="line">localstack-1  | 2024-02-18T08:40:52.044 ERROR --- [   asgi_gw_0] l.aws.handlers.logging     : exception during call chain: Installation of kinesis-mock failed.</span><br><span class="line">localstack-1  | 2024-02-18T08:40:52.050  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS kinesis.CreateStream =&gt; 500 (InternalError)</span><br><span class="line">localstack-1  | 2024-02-18T08:40:52.779  INFO --- [   asgi_gw_0] l.s.k.kinesis_mock_server  : Creating kinesis backend <span class="keyword">for</span> account 000000000000</span><br><span class="line">localstack-1  | 2024-02-18T08:40:53.108 ERROR --- [   asgi_gw_0] l.aws.handlers.logging     : exception during call chain: Installation of kinesis-mock failed.</span><br><span class="line">localstack-1  | 2024-02-18T08:40:53.113  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS kinesis.CreateStream =&gt; 500 (InternalError)</span><br><span class="line">localstack-1  | 2024-02-18T08:40:54.306  INFO --- [   asgi_gw_0] l.s.k.kinesis_mock_server  : Creating kinesis backend <span class="keyword">for</span> account 000000000000</span><br><span class="line">localstack-1  | 2024-02-18T08:40:54.384 ERROR --- [   asgi_gw_0] l.aws.handlers.logging     : exception during call chain: Installation of kinesis-mock failed.</span><br><span class="line">localstack-1  | 2024-02-18T08:40:54.387  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS kinesis.CreateStream =&gt; 500 (InternalError)</span><br><span class="line">localstack-1  | 2024-02-18T08:40:55.627  INFO --- [   asgi_gw_0] l.s.k.kinesis_mock_server  : Creating kinesis backend <span class="keyword">for</span> account 000000000000</span><br><span class="line">localstack-1  | 2024-02-18T08:40:55.694 ERROR --- [   asgi_gw_0] l.aws.handlers.logging     : exception during call chain: Installation of kinesis-mock failed.</span><br><span class="line">localstack-1  | 2024-02-18T08:40:55.697  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS kinesis.CreateStream =&gt; 500 (InternalError)</span><br><span class="line">localstack-1  | 2024-02-18T08:41:01.931  INFO --- [   asgi_gw_0] l.s.k.kinesis_mock_server  : Creating kinesis backend <span class="keyword">for</span> account 000000000000</span><br><span class="line">localstack-1  | 2024-02-18T08:41:02.086 ERROR --- [   asgi_gw_0] l.aws.handlers.logging     : exception during call chain: Installation of kinesis-mock failed.</span><br><span class="line">localstack-1  | 2024-02-18T08:41:02.089  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS kinesis.CreateStream =&gt; 500 (InternalError)</span><br><span class="line">localstack-1  |</span><br><span class="line">localstack-1  | An error occurred (InternalError) when calling the CreateStream operation (reached max retries: 4): exception <span class="keyword">while</span> calling kinesis.CreateStream: Installation of kinesis-mock failed.</span><br></pre></td></tr></table></figure><p>公式ドキュメント<a href="https://docs.localstack.cloud/references/custom-tls-certificates/">Custom TLS certificates</a>にも触れられています。非標準の TLS 証明書を使用するプロキシサーバーを利用する場合に発生するようです。原因はプロキシ、慣れたものです。</p><p>ドキュメントにDockerfileを拡張して証明書をインストールする手順があり、<a href="https://shihaowey.medium.com/installation-of-kinesis-mock-failed-in-localstack-8c4bcb8a3b20">Installation of kinesis-mock failed in LocalStack</a>の記事では、<code>https://api.github.com</code>のCA 証明書にアクセスして取得する例が書かれています。</p><p>しかし、チームメンバー全員にこの手順を行ってもらうのは手間ですし、証明書をGit管理にもしたくないでしょう。ファイルサーバやGoogle Driveのようなコラボレーションツール上にも、こういった手順は廃れがちであるため、あまり配備したくない場合が多いでしょう。</p><h2 id="Dockerfile上で対応する"><a href="#Dockerfile上で対応する" class="headerlink" title="Dockerfile上で対応する"></a>Dockerfile上で対応する</h2><p>サーバからTLS証明書をダウンロードするために、OpenSSLを利用します。</p><p><a href="https://www.shellhacks.com/get-ssl-certificate-from-server-site-url-export-download/">Get SSL Certificate from Server (Site URL) – Export &amp; Download</a> という記事が参考になります。</p><p>さきほどの <code>https://api.github.com</code> から証明書を取得するのであれば次のようなコマンドです。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo | openssl s_client -servername api.github.com -connect api.github.com:443 | sed -ne &#x27;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&#x27; &gt; custom-ca.cer</span><br></pre></td></tr></table></figure><p>取得した <code>custom-ca.cer</code> を公式ドキュメント通り、 <code>CURL_CA_BUNDLE</code>、 <code>REQUESTS_CA_BUNDLE</code>、<code>NODE_EXTRA_CA_CERTS</code> の環境変数にセットしたイメージを作れば対応完了です。</p><p>Dockerfileのマルチステージビルドを利用すると次のようになると思います。</p><figure class="highlight dockerfile"><figcaption><span>localstack/Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine/openssl:<span class="number">3.1</span>.<span class="number">3</span> AS build</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> | openssl s_client -servername api.github.com -connect api.github.com:443 | sed -ne <span class="string">&#x27;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&#x27;</span> &gt; custom-ca.cer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> localstack/localstack:<span class="number">3.1</span>.<span class="number">0</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build custom-ca.cer /usr/local/share/ca-certificates/cert-bundle.crt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> update-ca-certificates</span></span><br><span class="line"><span class="keyword">ENV</span> CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt</span><br><span class="line"><span class="keyword">ENV</span> REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt</span><br><span class="line"><span class="keyword">ENV</span> NODE_EXTRA_CA_CERTS=/etc/ssl/certs/ca-certificates.crt</span><br></pre></td></tr></table></figure><p>docker-compose経由で起動したいので、次のようなYAMLファイルを準備します。</p><figure class="highlight yaml"><figcaption><span>docker-compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">localstack:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">localstack/Dockerfile</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:4566:4566/tcp&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICES=kinesis</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$&#123;LOCALSTACK_VOLUME_DIR:-./volume&#125;:/var/lib/localstack&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br></pre></td></tr></table></figure><p><code>docker-compose up localstack</code> などで起動すると、Kinesis Data Streamsのリソース作成ができるようになっていると思います。3つのほどストリームを作成してみたときのログです。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">localstack-1  |</span><br><span class="line">localstack-1  | LocalStack version: 3.1.0</span><br><span class="line">localstack-1  | LocalStack Docker container <span class="built_in">id</span>: 16f65452edc8</span><br><span class="line">localstack-1  | LocalStack build <span class="built_in">date</span>: 2024-01-25</span><br><span class="line">localstack-1  | LocalStack build git <span class="built_in">hash</span>: d48ada8a</span><br><span class="line">localstack-1  |</span><br><span class="line">localstack-1  | 2024-02-17T06:13:47.737  INFO --- [-functhread4] hypercorn.error            : Running on https://0.0.0.0:4566 (CTRL + C to quit)</span><br><span class="line">localstack-1  | 2024-02-17T06:13:47.737  INFO --- [-functhread4] hypercorn.error            : Running on https://0.0.0.0:4566 (CTRL + C to quit)</span><br><span class="line">localstack-1  | Ready.</span><br><span class="line">localstack-1  | 2024-02-17T06:13:48.375  INFO --- [   asgi_gw_0] l.s.k.kinesis_mock_server  : Creating kinesis backend <span class="keyword">for</span> account 000000000000</span><br><span class="line">localstack-1  | 2024-02-17T06:13:48.705  INFO --- [-functhread7] l.s.k.kinesis_mock_server  : [info] kinesis.mock.KinesisMockService$ 2024-02-17T06:13:48.695706Z contextId=6f22bed3-15b2-4a68-b292-f31016e5e8dc, cacheConfig=&#123;<span class="string">&quot;awsAccountId&quot;</span>:<span class="string">&quot;000000000000&quot;</span>,<span class="string">&quot;awsRegion&quot;</span>:<span class="string">&quot;us-east-1&quot;</span>,<span class="string">&quot;createStreamDuration&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;,<span class="string">&quot;deleteStreamDuratio</span></span><br><span class="line"><span class="string">n&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;,<span class="string">&quot;deregisterStreamConsumerDuration&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;,<span class="string">&quot;initializeStreams&quot;</span>:null,<span class="string">&quot;logLevel&quot;</span>:<span class="string">&quot;INFO&quot;</span>,<span class="string">&quot;mergeShardsDuration&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;,<span class="string">&quot;onDemandStreamCountLimit&quot;</span>:10,<span class="string">&quot;persistConfig&quot;</span>:&#123;<span class="string">&quot;fileName&quot;</span>:<span class="string">&quot;000000000000.json&quot;</span>,<span class="string">&quot;interval&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:5,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;SECONDS&quot;</span>&#125;,<span class="string">&quot;loadIfExists&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;pat</span></span><br><span class="line"><span class="string">h&quot;</span>:<span class="string">&quot;../../../tmp/localstack/state/kinesis&quot;</span>,<span class="string">&quot;shouldPersist&quot;</span>:<span class="literal">true</span>&#125;,<span class="string">&quot;registerStreamConsumerDuration&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;,<span class="string">&quot;shardLimit&quot;</span>:100,<span class="string">&quot;splitShardDuration&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;,<span class="string">&quot;startStreamEncryptionDuration&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;,<span class="string">&quot;stopStreamEncryptionDuration&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;,<span class="string">&quot;updateSha</span></span><br><span class="line"><span class="string">rdCountDuration&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;&#125; Logging Cache Config</span><br><span class="line">localstack-1  | 2024-02-17T06:13:48.828  INFO --- [-functhread7] l.s.k.kinesis_mock_server  : [info] kinesis.mock.KinesisMockService$ 2024-02-17T06:13:48.827840Z  Starting Kinesis TLS Mock Service on port 39987</span><br><span class="line">localstack-1  | 2024-02-17T06:13:48.828  INFO --- [-functhread7] l.s.k.kinesis_mock_server  : [info] kinesis.mock.KinesisMockService$ 2024-02-17T06:13:48.828511Z  Starting Kinesis Plain Mock Service on port 41755</span><br><span class="line">localstack-1  | 2024-02-17T06:13:48.836  INFO --- [-functhread7] l.s.k.kinesis_mock_server  : [info] kinesis.mock.KinesisMockService$ 2024-02-17T06:13:48.835677Z contextId=e05f1b29-e4a3-4bf7-a3d3-3861c68c7e95 Starting persist data loop</span><br><span class="line">localstack-1  | 2024-02-17T06:13:49.026  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS kinesis.CreateStream =&gt; 200</span><br><span class="line">localstack-1  | 2024-02-17T06:13:49.472  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS kinesis.CreateStream =&gt; 200</span><br><span class="line">localstack-1  | 2024-02-17T06:13:49.936  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS kinesis.CreateStream =&gt; 200</span><br></pre></td></tr></table></figure><p>動的にパッケージを取得し、Kinesisのストリームが上手く作成されていることが分かります。</p><h2 id="LocalStack側でアップデートが入ったのか、Kinesis-Data-Streamsに対しては対応が不要になったようです"><a href="#LocalStack側でアップデートが入ったのか、Kinesis-Data-Streamsに対しては対応が不要になったようです" class="headerlink" title="LocalStack側でアップデートが入ったのか、Kinesis Data Streamsに対しては対応が不要になったようです"></a>LocalStack側でアップデートが入ったのか、Kinesis Data Streamsに対しては対応が不要になったようです</h2><p>この記事を書くにあたり、元のエラーログを発生させようとしていて気がついたのですが、<code>v2.3.0</code> でアップデートが入ったようで、Kinesis Data Streamsについては対応が不要です。</p><ul><li><code>v2.0.2</code> →✘ エラー発生</li><li><code>v2.1.0</code> →✘</li><li><code>v2.2.0</code> →✘</li><li><code>v2.3.0</code> →✅ 正常動作</li><li><code>v3.0.0</code> →✅</li><li><code>v3.1.0</code> →✅</li></ul><p>おそらく、Kinesisのモックをバイナリからscala.js版に入れ替えた <a href="https://github.com/etspaceman/kinesis-mock/pull/531">Use scala.js for executable and docker image #531</a> で解消されたのかなと予測しますが、詳細は未調査です。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>LocalStack v2からイメージの構成が変わって、起動時に動的にパッケージをインストールするケースがあります。その場合にネットワーク環境によっては外部リソースの取得に失敗するため、CA証明書の設定が必要。OpenSSLで自動化すると楽になるかもしれない、という記事でした。</p><p>みんなハマっていないのかな？と思っていましたが、NGだった期間は <code>v2.0.0</code> が公開されたときから、<code>v2.3.0</code> が公開された <code>2023.3.31</code> ～ <code>2023.9.29</code> と半年足らずだったので、レアな経験だったのかもしれません。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/LocalStack/">LocalStack</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7/">プロキシ</category>
      
      <category domain="https://future-architect.github.io/tags/OpenSSL/">OpenSSL</category>
      
      
      <comments>https://future-architect.github.io/articles/20240220a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2024年 フューチャー技術ブログリレー企画</title>
      <link>https://future-architect.github.io/articles/20240219a/</link>
      <guid>https://future-architect.github.io/articles/20240219a/</guid>
      <pubDate>Sun, 18 Feb 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240219a/16635b2c-ebe0-4421-9aae-f0aab18d45f3.jpeg&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;700&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240219a/16635b2c-ebe0-4421-9aae-f0aab18d45f3.jpeg" alt="" width="700" height="700" loading="lazy"><p>2024年に計画している、ブログリレーの企画スケジュールをを取り上げます。</p><h1 id="連載計画を発表する背景"><a href="#連載計画を発表する背景" class="headerlink" title="連載計画を発表する背景"></a>連載計画を発表する背景</h1><ul><li>どういったブログリレーを行おうとしているか、会社のカラーが出ると思うので、興味がある人に対してアクセスできるようにしたい</li><li>ブログリレーは寄稿者募集のリードタイムが発生するため、予めのスケジュールを周知したい</li><li>日々の業務をしながらだと、どういった企画を考えたか忘れがちなので、最初に大枠を固めて置けると運営的に楽</li></ul><h1 id="2024年のスケジュール"><a href="#2024年のスケジュール" class="headerlink" title="2024年のスケジュール"></a>2024年のスケジュール</h1><p>2024年にはじめて開催する連載は初心者マーク（🔰）を付けてみました。</p><p>フューチャーで最も利用頻度が高い重要技術要素である、JavaやVue.jsを今回始めてテーマに加えたことが変わったポイントです。実はフューチャーはJavaやVue.jsの会社でもあります。</p><p>アドカレリバイバルは、QiitaアドベントカレンダーでQiita側に書かれているか、フューチャー技術ブログ側で書かれているかたまに混乱することがあるという意見を某メンバーからもらい、せっかくだからリバイバルと称してアップデートしてこちらのブログに転記してもらったらどうか？ということで企画しました。</p><div class="scroll"><table><thead><tr><th>Month</th><th>Title</th><th>Memo</th><th>Link</th></tr></thead><tbody><tr><td>1月</td><td>-</td><td>-</td><td></td></tr><tr><td>2月</td><td>Go 1.22</td><td>Go 1.22リリース記念</td><td><a href="/articles/20240129a/">Go1.22</a></td></tr><tr><td>3月</td><td>Terraform</td><td>Terraform全般をテーマ</td><td>2024 <a href="/articles/20230327a/">2023</a></td></tr><tr><td>4月</td><td>春の入門祭り</td><td>初心者向けに入門記事を書いてみよう</td><td>2024 <a href="/articles/20230417a/">2023</a> <a href="/articles/20220418a/">2022</a>、<a href="/articles/20210414a/">2021</a> <a href="/articles/20200529/">2020</a></td></tr><tr><td>5月</td><td>🔰Cloudflare</td><td>Cloudflare</td><td>2024</td></tr><tr><td>6月</td><td>🔰アドカレリバイバル</td><td>過去のアドベントカレンダー記事をリバイバル</td><td>2024</td></tr><tr><td>7月</td><td>Go1.23</td><td>Go 1.23リリース記念</td><td>Go1.23</td></tr><tr><td>8月</td><td>夏休み自由研究</td><td>夏休みに行った自由研究と銘うって、個人的に関心があることを深堀りして調べる連載</td><td>2024 <a href="/articles/20230830a/">2023</a> <a href="/articles/20220822a/">2022</a> <a href="/articles/20210823a/">2021</a> <a href="/articles/20200726/">2020</a></td></tr><tr><td></td><td>🔰Python</td><td>Pythonリリース記念</td><td>2024</td></tr><tr><td>9月</td><td>🔰Java</td><td>Java23記念&#x2F;Java全般</td><td>2024</td></tr><tr><td>10月</td><td>秋のブログ週間</td><td>秋の夜長に楽しめるように、いつもより文章が多めな読み物</td><td>2024 <a href="/articles/20231030a/">2023</a> <a href="/articles/20221031a/">2022</a> <a href="/articles/20211027a/">2021</a> <a href="/articles/20201026/">2020</a></td></tr><tr><td>11月</td><td>🔰Vue.js</td><td>Vue.js全般</td><td>2024</td></tr><tr><td>12月</td><td>アドベントカレンダー</td><td>Qiitaさんのアドベントカレンダーのイベントに乗っかる連載</td><td>2024 <a href="advent2023">2023</a> <a href="https://qiita.com/advent-calendar/2022/future">2022</a> <a href="https://qiita.com/advent-calendar/2021/future">2021</a> <a href="https://qiita.com/advent-calendar/2020/future">2020</a> <a href="https://qiita.com/advent-calendar/2019/future">2019</a> <a href="https://qiita.com/advent-calendar/2017/future">2018</a> <a href="https://qiita.com/advent-calendar/2017/future">2017</a> <a href="https://qiita.com/advent-calendar/2016/future">2016</a> <a href="https://qiita.com/advent-calendar/2015/future">2015</a></td></tr></tbody></table></div><p>新しい風を入れつつ、春・夏・秋などの定番企画は引き続き開催しようと思っています。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>これまでの経緯を踏まえテーマをブラッシュアップしています。2024年も皆様にとって有益な情報発信を活発にしていきますので、応援よろしくおねがいします！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/TechBlog/">TechBlog</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/">運営</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB/">スケジュール</category>
      
      
      <comments>https://future-architect.github.io/articles/20240219a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LocustとGKEでスケーラブルな負荷テスト</title>
      <link>https://future-architect.github.io/articles/20240216a/</link>
      <guid>https://future-architect.github.io/articles/20240216a/</guid>
      <pubDate>Thu, 15 Feb 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;本記事では、負荷テストツールである&lt;a href=&quot;https://locust.io/&quot;&gt;Locust&lt;/a&gt;と&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>本記事では、負荷テストツールである<a href="https://locust.io/">Locust</a>と<a href="https://cloud.google.com/kubernetes-engine?hl=ja">Google Kubernetes Engine(GKE)</a>と組み合わせて負荷テストを体感します。Kubernetesの柔軟なスケールアップ・ダウン能力によって、負荷の大きさを変えながらテストを行うことが可能となります。</p><p>参考：<a href="https://cloud.google.com/architecture/distributed-load-testing-using-gke?hl=ja">Google Kubernetes Engineを使用した負荷分散テスト</a></p><h2 id="Locustとは"><a href="#Locustとは" class="headerlink" title="Locustとは"></a>Locustとは</h2><p><a href="https://locust.io/">Locust</a>はPythonベースで書かれたオープンソースの負荷テストツールとなります。<br>GitHub: <a href="https://github.com/locustio/locust">https://github.com/locustio/locust</a></p><p>公式ページにも載っておりますが、特徴としては以下の3つになります。</p><ul><li>コードに基づいたユーザー挙動の定義<ul><li>ダサいUIや膨れ上がったXMLは必要無し</li><li>コードのみのわかりやすい記述が可能</li></ul></li><li>分散型でスケーラブル<ul><li>複数のマシンに分散された負荷テストの実行をサポート</li><li>数百万の同時ユーザーによるシミュレーションが可能</li></ul></li><li>歴戦の覇者（battle-tested）で実績がある<ul><li>GoogleやMicrosoft、AWSといった多くのユーザー（会社）がLocustを支持</li><li>Battlefield<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の戦績確認用Webアプリ開発時に負荷テストとして利用されたため、本当の意味でbattle-tested🤣</li></ul></li></ul><h2 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h2><p>では早速、検証を行うための環境を構築していきます。必要なものは以下です。</p><ul><li>Google Cloud環境<ul><li>GKE</li><li>AppEngine</li><li>Artifact Registry</li></ul></li><li>ローカル環境<ul><li>gcloud</li><li>kubectl</li></ul></li></ul><p>インフラ側は全てTerraformを利用して構築しようと思います。<br>※ProjectやVPCの構築、gcloud、kubectlのインストールは割愛します。</p><h3 id="GKE"><a href="#GKE" class="headerlink" title="GKE"></a>GKE</h3><p>GKEのTerraformコードは量が多いため、以下のリポジトリに配置しました。<br><a href="https://github.com/bigface0202/terraform-useful-modules/tree/main/google-cloud">https://github.com/bigface0202/terraform-useful-modules/tree/main/google-cloud</a><br>また、GKEを利用した検証に関するTIPSになりますが、GKEは立ち上げるまでに約20分少々かかるため、一番最初にGKEを構築しておくと検証がスムーズになります。</p><h3 id="AppEngine"><a href="#AppEngine" class="headerlink" title="AppEngine"></a>AppEngine</h3><details><summary>Terraform</summary><figure class="highlight sh"><figcaption><span>app_engine.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;google_app_engine_application&quot;</span> <span class="string">&quot;app&quot;</span> &#123;</span><br><span class="line">  project     = google_project.project_one.project_id</span><br><span class="line">  location_id = <span class="string">&quot;asia-northeast1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="Artifact-Registry"><a href="#Artifact-Registry" class="headerlink" title="Artifact Registry"></a>Artifact Registry</h3><details><summary>Terraform</summary><figure class="highlight sh"><figcaption><span>artifact_registry.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;google_artifact_registry_repository&quot;</span> <span class="string">&quot;my-repo&quot;</span> &#123;</span><br><span class="line">  project       = google_project.project_one.project_id</span><br><span class="line">  location      = local.region</span><br><span class="line">  repository_id = <span class="string">&quot;my-repository&quot;</span></span><br><span class="line">  description   = <span class="string">&quot;example docker repository&quot;</span></span><br><span class="line">  format        = <span class="string">&quot;DOCKER&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h3><p>ここからはターミナルでの作業がメインとなるため、頻繁に利用する定数などを定義しておきます。適宜、自身で定義した内容に変更してください。</p><figure class="highlight shell"><figcaption><span>terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">export PROJECT=test-project</span><br><span class="line">export REGION=asia-northeast1</span><br><span class="line">export AR_REPO=my-repository</span><br><span class="line">export LOCUST_IMAGE_NAME=locust-tasks</span><br><span class="line">export LOCUST_IMAGE_TAG=latest</span><br><span class="line">export SAMPLE_APP_TARGET=$&#123;PROJECT&#125;.appspot.com</span><br><span class="line">export GKE_CLUSTER_NAME=my-cluster</span><br></pre></td></tr></table></figure><p>AppEngineにデプロイするアプリケーションはGoogle Cloudが提供するサンプルアプリを利用します。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Clone the repository</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/GoogleCloudPlatform/distributed-load-testing-using-kubernetes</span><br><span class="line"><span class="built_in">cd</span> distributed-load-testing-using-kubernetes</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deploy the application</span></span><br><span class="line">gcloud app deploy sample-webapp/app.yaml --project=<span class="variable">$&#123;PROJECT&#125;</span></span><br></pre></td></tr></table></figure><p>App Engineへのデプロイが完了後、表示されたURLへ移動すると以下のような画面が表示されます。</p><img src="/images/20240216a/image.png" alt="image.png" width="1084" height="283" loading="lazy"><AppEngineの画面><p>次にGKEにLocustと負荷テスト用のタスクをデプロイしたいので、まずはLocustのイメージをビルドします。<br>各エンドポイント<code>/login</code>と<code>/metrics</code>に対して、1:999の割合で呼び出すようなタスクが定義されております。詳細は以下を参照してください。<br><a href="https://github.com/GoogleCloudPlatform/distributed-load-testing-using-kubernetes/blob/HEAD/docker-image/locust-tasks/tasks.py">docker-image&#x2F;locust-tasks&#x2F;tasks.py</a></p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">gcloud builds submit \</span><br><span class="line">    --tag <span class="variable">$&#123;REGION&#125;</span>-docker.pkg.dev/<span class="variable">$&#123;PROJECT&#125;</span>/<span class="variable">$&#123;AR_REPO&#125;</span>/<span class="variable">$&#123;LOCUST_IMAGE_NAME&#125;</span>:<span class="variable">$&#123;LOCUST_IMAGE_TAG&#125;</span> \</span><br><span class="line">    docker-image</span><br></pre></td></tr></table></figure><p>Cloud Buildを利用することでイメージのビルドとプッシュがgcloudコマンド1回でできるので便利ですね。<br>イメージがちゃんとビルドできているかどうかをコンソールから確認してみましょう。<br><img src="/images/20240216a/image_2.png" alt="image.png" width="1200" height="465" loading="lazy"></p><p>イメージのビルドができたのでデプロイしていきます。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Get cluster&#x27;s credential</span></span><br><span class="line">gcloud container clusters get-credentials <span class="variable">$&#123;GKE_CLUSTER&#125;</span> --region <span class="variable">$&#123;REGION&#125;</span> --project <span class="variable">$&#123;PROJECT&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check the connection</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"><span class="comment"># Expected output below</span></span><br><span class="line"><span class="comment"># NAME                                                  STATUS   ROLES    AGE    VERSION</span></span><br><span class="line"><span class="comment"># gke-test-gke-cluster-test-gke-node-po-2165d20a-gztn   Ready    &lt;none&gt;   6m6s   v1.27.3-gke.100</span></span><br><span class="line"><span class="comment"># gke-test-gke-cluster-test-gke-node-po-7c71f952-7tvz   Ready    &lt;none&gt;   6m4s   v1.27.3-gke.100</span></span><br><span class="line"><span class="comment"># gke-test-gke-cluster-test-gke-node-po-f80380d5-4209   Ready    &lt;none&gt;   6m5s   v1.27.3-gke.100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deploy Locust</span></span><br><span class="line">envsubst &lt; kubernetes-config/locust-master-controller.yaml.tpl | kubectl apply -f -</span><br><span class="line">envsubst &lt; kubernetes-config/locust-worker-controller.yaml.tpl | kubectl apply -f -</span><br><span class="line">envsubst &lt; kubernetes-config/locust-master-service.yaml.tpl | kubectl apply -f -</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check the deployment</span></span><br><span class="line">kubectl get pods</span><br><span class="line"><span class="comment"># Expected output below</span></span><br><span class="line"><span class="comment"># NAME                             READY   STATUS    RESTARTS   AGE</span></span><br><span class="line"><span class="comment"># locust-master-849c6b8799-j8hqt   1/1     Running   0          8m59s</span></span><br><span class="line"><span class="comment"># locust-worker-5466444784-8c474   1/1     Running   0          8m48s</span></span><br><span class="line"><span class="comment"># locust-worker-5466444784-b42l9   1/1     Running   0          8m53s</span></span><br><span class="line"><span class="comment"># locust-worker-5466444784-msw66   1/1     Running   0          8m45s</span></span><br><span class="line"><span class="comment"># locust-worker-5466444784-prrwg   1/1     Running   0          8m53s</span></span><br><span class="line"><span class="comment"># locust-worker-5466444784-rntx6   1/1     Running   0          8m53s</span></span><br></pre></td></tr></table></figure><p>初めて<code>envsubst</code>コマンドを知ったのですが、ターミナル上で定義済みの環境変数を代入出来て便利ですね。<br>無事にLocustをデプロイすることができたので、ポートフォワードして画面に接続してみます。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl port-forward svc/locust-master-web -n default 8080:8089</span><br><span class="line"><span class="comment"># Expected output below</span></span><br><span class="line"><span class="comment"># Forwarding from 127.0.0.1:8080 -&gt; 8089</span></span><br><span class="line"><span class="comment"># Forwarding from [::1]:8080 -&gt; 8089</span></span><br></pre></td></tr></table></figure><p><a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a><br>にアクセスして、以下の画面が表示されることを確認します。<br><img src="/images/20240216a/image_3.png" alt="image.png" width="1200" height="709" loading="lazy"></p><h2 id="負荷テストしてみる"><a href="#負荷テストしてみる" class="headerlink" title="負荷テストしてみる"></a>負荷テストしてみる</h2><p>“Number of users”は負荷テストに利用するユーザーの同時接続数、”Spawn rate”は1秒当たりに何人のユーザーがリクエストを開始するかの数、Hostは接続先になります。<br>“Start swarming”を押すことでテストが開始されます。<br>以下の条件でテストを開始したときの画面が次のようになります。</p><ul><li>Number of users: 10</li><li>Spawn rate: 1<img src="/images/20240216a/image_4.png" alt="image.png" width="1200" height="237" loading="lazy"></li></ul><p>右上のSTATUSの部分では現在接続中のユーザー数（5 Users）が表示されており、10Usersまで増えていきます。RPSはRequest Per Secondで、秒間のリクエスト数を表しております。<br>また、各種タブを切り替えることでテストに関する情報を見ることができます。</p><ul><li>Statistics<ul><li>Requestに対するレスポンスの統計情報</li><li>テストを行っている各Pathに対して個別にみることが可能</li></ul></li><li>Charts<ul><li>RPSやレスポンスタイムの時系列情報をグラフで確認することが可能</li></ul></li><li>Failures<ul><li>リクエストが失敗した場合に、どのPathに対してどのMethod失敗したのか、エラーコードは何なのかを確認することが可能</li></ul></li><li>Exceptions<ul><li>例外発生時のTracebackを確認することが可能</li></ul></li><li>Current Ratio<ul><li>Locustのイメージビルド時にPythonファイルで設定した各種Pathに対するリクエスト数の割合を確認することが可能</li></ul></li><li>Download Data<ul><li>テスト結果をCSVやレポートとして出力可能</li></ul></li><li>Workers<ul><li>現在Locustを動作させているPodの数を確認可能</li></ul></li></ul><p>シンプルなUIの作りになっているため、直観的でわかりやすいです。<br>また、”Download Data”にてレポートを出力することができるのですが、テスト結果に対して自動でサマリした状態で出力してくれるので非常に便利です。<br><img src="/images/20240216a/image_5.png" alt="image.png" width="1200" height="735" loading="lazy"><br><img src="/images/20240216a/image_6.png" alt="image.png" width="1200" height="897" loading="lazy"><br><img src="/images/20240216a/image_7.png" alt="image.png" width="1200" height="776" loading="lazy"></p><p>また、かなり大きめの負荷をかけたい場合は、Podの数を増やすことで対応可能です。Kubernetesならではですね。<br>Podを増やしたい場合は以下のコマンドで増やします。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl scale deployment/locust-worker --replicas=10</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、GKEとLocustを利用した分散型の負荷テストをハンズオン形式で紹介させていただきました。</p><p>Locustはシンプルな作りになっているため、特別なキャッチアップも必要なくサクッと使うことができます。</p><p>もしアプリのローンチを計画している方は、ローンチ前にLocustを利用した負荷テストをやってみてはいかがでしょうか？</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://www.ea.com/ja-jp/games/battlefield">https://www.ea.com/ja-jp/games/battlefield</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%80%A7%E8%83%BD%E6%A4%9C%E8%A8%BC/">性能検証</category>
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%B2%A0%E8%8D%B7%E3%83%86%E3%82%B9%E3%83%88/">負荷テスト</category>
      
      <category domain="https://future-architect.github.io/tags/GoogleCloudArchitectureCenter/">GoogleCloudArchitectureCenter</category>
      
      <category domain="https://future-architect.github.io/tags/locust/">locust</category>
      
      
      <comments>https://future-architect.github.io/articles/20240216a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>龍が如く7のすごいテストをなぜ我々は採用できないのか</title>
      <link>https://future-architect.github.io/articles/20240215a/</link>
      <guid>https://future-architect.github.io/articles/20240215a/</guid>
      <pubDate>Wed, 14 Feb 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;僕自身は龍が如くシリーズは、クロヒョウ2、極1、極2、０、3、4、5、6、0とやって、7はRPGだし主人公違うしなぁと思って、買うだけ買って後でやろうと積んでいたところ、CEDECのすごいテストの話を聞いて、（オリジナル版を積んでいたのに)インターナショナル版を買って始めて</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>僕自身は龍が如くシリーズは、クロヒョウ2、極1、極2、０、3、4、5、6、0とやって、7はRPGだし主人公違うしなぁと思って、買うだけ買って後でやろうと積んでいたところ、CEDECのすごいテストの話を聞いて、（オリジナル版を積んでいたのに)インターナショナル版を買って始めてしまうぐらいインパクトがあり（そして積んでたのを後悔したぐらいよかった）ました。それ以降、維新極、7外伝、8は発売日に買ってプレイしてます。</p><p>こちらにその講演の詳細なレポートがこちらにあります。</p><p><a href="https://www.famitsu.com/news/202009/11205564.html">https://www.famitsu.com/news/202009/11205564.html</a></p><p>その8の発売前に龍が如くスタジオの技術責任者の方がXのアカウントを開設して、C++のコードを投稿されていたのですが、それに対してエンプラ開発目線で意見しているようなツイートを見かけて、「いや、システムの特性全然違うから」と思い筆を取った次第です。</p><h1 id="ユニットテストの限界"><a href="#ユニットテストの限界" class="headerlink" title="ユニットテストの限界"></a>ユニットテストの限界</h1><p>大学時代、アジャイルソフトウェア開発というかエクストリームプログラミング(XP)が日本に来た時に、僕はその本に熱狂しました。こんな開発がしてみたいと。そして自分が社会人になるころにはアジャイル開発できる会社が増えたらいいなと日本XPユーザーグループの運営委員に入ったり本を書いたり翻訳したりしたわけです。ですが、学生の身分では、実際お客さんのいる開発などはできなく、できることといえば、テストとリファクタリングのコーディング周りのプラクティスぐらいだったので、ユニットテスト周りで自分でテスティングフレームワークを作ったりしてました。</p><p>そんなときに、サークルの先輩から言われたことがひとことがありました。</p><p>「テストファーストプログラミングを見て見たけど、研究のプログラムには使えなさそうだよね」</p><p>先輩がやられていたのはニューラルネットワークか何かだったか詳細は忘れてしまいましたが、確かに、1つ1つのニューロンの動きはテストできたとしても、システム全体だと荒すぎます。精度が70%以上みたいなユニットテストはナンセンスです。あくまでも入力に対して出力もすぱっと決まる、小さいモジュールの集合体としてプログラムが作れる場合にしかテストファーストプログラミングは適用できません。そんでもって、内部のロジックを大幅に書き換えました！というときにはテストも結局捨てて作り直すことが多くなります。業務システムにありがちな「内部のロジックは変わってもインタフェースは保とう」という方針が取れるのはかなり限定的な状況といえます。</p><p>一方、テストファーストプログラミング、現代的な言葉で言うと（といってもこっちももう20年以上歴史がある)テスト駆動開発が対象としているのは業務システムです。業務システムは状態を持ちません。</p><p>「データベースがあるじゃないか」と思われるかもしれませんが、業務的なシステムからするとデータベースはあくまでも外部システムです。業務システムのユニットテストは、DB含め、観測可能な外部の状態を固定し（Arrange)、中のロジックを実行し(Act)、結果を検証する(Assertion)というのがとても浅いシステムということになります。データベースが外部の状態ということはシステム自身は状態を持たず、イミュータブルであるとみなせます。</p><img src="/images/20240215a/image.png" alt="" width="512" height="512" loading="lazy"><p><a href="https://en.wikipedia.org/wiki/Hexagonal_architecture_%28software%29">Wikipedia</a>より引用</p><h1 id="ゲームのコードというのはどういうものか"><a href="#ゲームのコードというのはどういうものか" class="headerlink" title="ゲームのコードというのはどういうものか"></a>ゲームのコードというのはどういうものか</h1><p>一方でゲームのコードというのはどういうものかというと、エンプラ系のシステムと比較すると大きな特徴は2つあるかと思います</p><ul><li>データ駆動</li><li>積分</li></ul><p>1つ目は、ゲーム開発で一番使うツールはExcelと言われるぐらい、データ中心ということです。エンプラ開発でもマスターデータはありますが、キャラクターの絵やモデル、アニメーション、音は専用のツールで作りますが、それをどのタイミングでどう使うか、ユーザーが探索するマップと倒す敵の組み合わせとか出現頻度、アニメーション、セリフなど、ユーザーが触れる体験のほとんどはデータで駆動されます。</p><p>プログラムだけ単体テストしてもあまり意味はなく、データとの組み合わせで作品ができてきます。データ側に不具合というのありえます。データ単体もバリデーションでチェックをしたりも行われたりはしますが、データとプログラムを組み合わせて初めて発現するエラーも当然あります。Rustとかの型チェックの強い言語を使って言語側だけ強化しても限界があります。</p><p>あとは積分ですね。プログラムはフレーム単位でちょっとずつ変数を加工していくのですが、どんなに単体テストで1フレームの処理を「正しいだろう」と検証しても、プレイしつづけるとおかしくなったりします。物理エンジンで、ぶつかり方によってすごい勢いでふっとんでいくのをゲームで実感したことがある人はいると思います。</p><p>フレーム単位の小さいテストを書いても全体は見えないし、10秒間600フレーム回した後にテスト、みたいなテストを書いても、結局問題の発見には程遠い品質の低いテストにしかなりません。問題発見に2時間回し続けるバグがあったとして、他の全部のテストケースのループ数を7200秒x60フレームにするのか、というとそんなことはしないですよね。自動テストの限界として、一度作られてパスしたテストは、その後新しいバグを発見することは少ないというものがあります。時間をかければかけるほどリターンは小さくなります。研究の単体テストがうまく書けないのと同じ感じかと思います。</p><h1 id="結局、龍が如くのテストというのはソフトウェア的にみるとどんなものなのか？"><a href="#結局、龍が如くのテストというのはソフトウェア的にみるとどんなものなのか？" class="headerlink" title="結局、龍が如くのテストというのはソフトウェア的にみるとどんなものなのか？"></a>結局、龍が如くのテストというのはソフトウェア的にみるとどんなものなのか？</h1><p>公開された情報からの推測でしかないですが、あえて別の言い方をすると、「複数のテストケースを並列実行する耐久E2Eテスト」なんじゃないかと思います。ビルド周りとの連携や、チケット管理システムへの自動起票などCI&#x2F;CDとの連携周りがここ最近では強化されていそうですが、コア部分を見てみると、おそらくC&#x2F;C++時代にはよくお世話になった（ユーザーがMFCとかでよくはまったと思われる)ASSERTが活躍しているのではないかと思います。</p><p>スライドにもゼロ除算の例がありました。これは単純にクラッシュする例ですが、マップでは入れてはいけない建物の中にすり抜けて入ってしまった！とかはおそらく地面がないので奈落に落ちることになると思うのでZ座標がマップ中に存在する最低点よりも低いというASSERTにできると思います。変な状態を検知したらクラッシュするようなASSERTを大量に埋め込んだプログラムにしておくことで、1つの「歩く」というテストケースの中に、たくさんのテスト条件を同居させているということなのかな、と。</p><p>もちろん、「期待した目的が達成できたかどうか」というのを表現する上では大事です。「A地点に行け」といったら、数秒以内にその地点に付くはずだ、というものです。おそらくこれはPythonで書かれているというテストケースで、このPythonのテストコードとC++レイヤーのASSERTの組み合わせで、状態が積分されていく＆データ駆動という、業務システムとは毛色の異なるシステムの検証が行われているのではないかと想像しています。</p><p>テスト技法は、爆発する入力の組み合わせを減らして少ないケース数で効率よくテストを行う手法と言い換えられます。境界値テストは、同じ結果になる範囲のテストケースをいくら増やしても利得は少ないよね、じゃあ減らそうとか。悪く言えば怒られない程度に手を抜く手法と言えます。</p><p>ゲームの状態の組み合わせ数は業務システムの比ではなく膨大なので、それに対応した方法になっているのではないかと思います。業務システムが扱うテストケース数なんて、それと比べたらたかが知れてますよね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>システムの特性が大きく変われば求められるテストの性質も大きく変わります。ゲームにはゲームならではの事情はあります。基本的にはそのままこの手法を取り込む必要のない業務システムが多いのではと思います。</p><p>ただ、ASSERTを活用（しているというのは僕の予想でしかないのですが）というのはいろいろ応用できそうな気がしています、業務システムのステートフルなコンポーネントのテストとか、研究用のプログラムとか、そういうところに応用が効くのではないかと思います。数理最適化案件なんかはゲームとかとだいぶ近そうですね。AIとかもいけるかもしれん。例えば、キャッシュを持つシステムで、キャッシュがあたたまった状態で実行したときのパフォーマンスが期待値よりも上になるはず、みたいなコードは極めてステートフルといえます。HPをMAX100として、キャッシュヒットしたらHPが回復、ヒットしなかったらダメージを受けて、HPがゼロになったらエラー、みたいなのとか良さそうです。今でもスロークエリーでエラーログを出すシステムとかは多いと思いますが、同一ユーザーに対して連続で起きなければOKとか、遅さ加減を見て、すごく遅ければ一発KOとかそういうのもありな気がしますね。あんまり厳しい条件で1つでも出たらエラーとか出しすぎてもオオカミ少年になりそうですし、そういうちょっと踏ん張るテストケースは面白そうです。</p><p>龍が如くスタジオは、完全新作タイトルである7外伝を11月末、8を１月末と、通常あり得ない2ヶ月スパンで発売するという離れ技をやってのけたので、今年のCEDECではまたすごいテストの発表があるのではないかと期待しています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/">テスト</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%BE%8D%E3%81%8C%E5%A6%82%E3%81%8F7/">龍が如く7</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B2%E3%83%BC%E3%83%A0/">ゲーム</category>
      
      
      <comments>https://future-architect.github.io/articles/20240215a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.22リリース連載 net, net/http, net/netip</title>
      <link>https://future-architect.github.io/articles/20240214a/</link>
      <guid>https://future-architect.github.io/articles/20240214a/</guid>
      <pubDate>Tue, 13 Feb 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240214a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;534&quot;&gt;

&lt;p&gt;The Gopher character is based on the Go mascot designed by Renée</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240214a/top.png" alt="" width="800" height="534"><p>The Gopher character is based on the Go mascot designed by Renée French</p><p>TIG 真野です。<a href="/articles/20240129a/">Go1.22連載</a>の8本目です。</p><p>Go 1.22 ライブラリのマイナーアップデートである <code>net</code>, <code>net/http</code>, <code>net/netip</code> を取り上げます。</p><h2 id="アップデートサマリ"><a href="#アップデートサマリ" class="headerlink" title="アップデートサマリ"></a>アップデートサマリ</h2><ul><li><strong>net:</strong> <code>TCPConn</code>から<code>UnixConn</code>への<code>io.Copy()</code> で、Linux’s splice(2)システムコールが使われ性能改善 <a href="https://github.com/golang/go/issues/58808">#58808</a></li><li><strong>net:</strong> WindowsでDNSリゾルバは<code>-tags=netgo</code> 付きでビルドすると、DNSクエリの前に<code>%SystemRoot%\System32\drivers\etc\hosts</code> から検索するようになる [#57757]<a href="https://github.com/golang/go/issues/57757">https://github.com/golang/go/issues/57757</a>)</li><li><strong>net&#x2F;http:</strong> <code>ServeFileFS()</code>, <code>FileServerFS()</code>, <code>NewFileTransportFS()</code> が新規追加 <a href="https://github.com/golang/go/issues/51971">#51971</a></li><li><strong>net&#x2F;http:</strong> HTTPクライアント、サーバともに、空っぽの<code>Content-Length</code> ヘッダを拒否するようになった <a href="https://github.com/golang/go/issues/61679">#61679</a></li><li><strong>net&#x2F;http:</strong> <code>Request.PathValue()</code> が新規追加 <a href="https://github.com/golang/go/issues/61410">#61410</a></li><li><strong>net&#x2F;netip:</strong>  <code>AddrPort.Compare()</code> が新規追加 <a href="https://github.com/golang/go/issues/61642">#61642</a></li></ul><h2 id="net-TCPConnからUnixConnへのio-Copy-で、Linux’s-splice-2-システムコールが使われ性能改善-58808"><a href="#net-TCPConnからUnixConnへのio-Copy-で、Linux’s-splice-2-システムコールが使われ性能改善-58808" class="headerlink" title="net: TCPConnからUnixConnへのio.Copy() で、Linux’s splice(2)システムコールが使われ性能改善 #58808"></a>net: TCPConnからUnixConnへのio.Copy() で、Linux’s splice(2)システムコールが使われ性能改善 <a href="https://github.com/golang/go/issues/58808">#58808</a></h2><p>前提知識となる、 <code>splice(2)</code> ですが、入力用と出力用のファイルディスクリプタを繋ぎ、カーネル空間とユーザー空間でのデータコピーを行わず（ゼロコピーと言われる所以です）、データ転送を行うシステムコールです。<code>(2)</code> の <code>2</code> は引数ではなく、システムコールを指す番号です。</p><p>例えば静的ファイルをホストしているGoのHTTPサーバを構築するとします。極めて素朴に実装すると、ファイルの要求に対して、<code>os.Open()</code> でファイルを開き、 <code>io.ReadAll()</code> で<code>[]byte</code> を取得し、<code>http.ResponseWriter</code> に <code>Write()</code>で実現できます（※実際は <code>http.FileServer()</code> を使うでしょうが）。このとき <code>io.ReadAll()</code> するとカーネル空間から、ユーザー空間にデータコピーが行われます。また、読み取った値を <code>Write()</code>で書き込みHTTP応答する際に、再びユーザー空間からカーネル空間にデータコピーが行われます。</p><img src="/images/20240214a/データコピー.drawio.png" alt="データコピー.drawio.png" width="1200" height="783" loading="lazy"><p>これを <code>splice(2)</code> を用いて、ユーザー空間にメモリコピーせず、カーネル空間上に閉じてやり取りをさせたいよね、というのは背景となるモチベーションです。順序的には <code>pipe(2)</code> のシステムコールを呼び、次に左の<code>splice(2)</code>でパイプに書き込み、最後に右側の<code>splice(2)</code>を呼びパイプから読み取りネットワークインターフェースに書き込ませます。</p><img src="/images/20240214a/データコピー-ページ2.drawio.png" alt="データコピー-ページ2.drawio.png" width="1200" height="760" loading="lazy"><p><code>splice(2)</code> を利用するためには、2つのファイルディスクリプタのうち、1つがパイプである必要があるそうです。そのため <code>pipe(2)</code> を呼び出しています。パイプにコピーしているからゼロコピーじゃないじゃん！って思いましたが、多分カーネル空間に閉じていればノーカンなんだと思います。多分。</p><p>参考:</p><ul><li><a href="https://www.sobyte.net/post/2022-03/golang-zero-copy/">Zero-Copy Optimization in the Golang</a>）</li><li><a href="https://x.com/BdKozlovski/status/1667466644635938816?s=20">Apache Kafkaの中の人によるzero copyの解説ポスト</a></li><li>Goとシステムコール周りについては、澁川さんの<a href="https://ascii.jp/elem/000/001/267/1267477/">Goから見たシステムコール</a>記事がオススメです。<a href="https://www.lambdanote.com/products/go-2">書籍</a>もありますがWeb版で相当な分量です</li></ul><p>Go1.21以前のステータスでは、以下のケースは <code>splice(2)</code> を用いてゼロコピーになるように <code>io.Copy()</code> が実装されていました。</p><ul><li>TCPソケットからTCPソケット</li><li>UnixドメインソケットからTCPソケット</li><li>ファイルからTCPソケット</li><li>TCPソケットからファイル</li><li>Unixドメインソケットからファイル</li><li>ファイルからファイル</li></ul><p>先ほど例に上げた静的ファイルをHTTP応答で返すケースは、ファイル→TCPソケットで対応済み、例えば、<code>http.FileServer()</code> は内部で <code>io.Copy()</code> を使っているのですでに最適化されています。</p><p><code>#58808</code> ではこの対応を以下の2つにも広げようというものです。</p><ul><li>ファイルからUnixドメインソケット</li><li>TCPソケットからUnixドメインソケット</li></ul><p>そレを実現するため、Go1.22では、<code>net.TCPConn</code> と <code>os.File</code> に <code>WriteTo(io.Writer)</code> を追加されました。それらの内部で、 <code>splice(2)</code> や <code>sendfile(2)</code> を可能であれば利用する実装になっています。</p><h3 id="io-Copy-の内部実装"><a href="#io-Copy-の内部実装" class="headerlink" title="io.Copy()の内部実装"></a>io.Copy()の内部実装</h3><p><a href="https://pkg.go.dev/io#Copy">io.Copy()</a> ですが、引数に <code>io.Writer</code>, <code>io.Reader</code> を取りますが、 GoDocにも書かれている通り <code>io.WriterTo</code> が実装されていれば <code>src.WriteTo(dst)</code>が、<code>io.ReaderFrom</code> が実装されていれば <code>dst.ReadFrom(src)</code> が呼ばれます。<code>io.WriterTo</code> で条件が揃えばシステムコールの<code>sendfile(2)</code> や <code>splice(2)</code> を呼び、無理であれば <code>genericWriteTo()</code>という<code>io.Writer</code>と<code>io.Reader</code>をfor分でループさせて転送する処理にフォールバックします。</p><p>例として、ファイル→Unixドメインソケットにデータをコピーし、どのように呼び出し階層が変わるか <code>go tool</code> で可視化します。</p><p>まずはサーバ側の実装です。こちらはUnixドメインソケットに書き込まれた内容を標準出力するだけで、今回は特に何もしません。</p><figure class="highlight go"><figcaption><span>Unixドメインサーバ</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">os.Remove(<span class="string">&quot;/tmp/go122.sock&quot;</span>)</span><br><span class="line">listener, err := net.Listen(<span class="string">&quot;unix&quot;</span>, <span class="string">&quot;/tmp/go122.sock&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">bytes, err := io.ReadAll(conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != io.EOF &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;error: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;receive: %s\n&quot;</span>, <span class="type">string</span>(bytes))</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>続いてUnixドメインソケットのクライアント側です。</p><p>メソッド呼び出しのコールグラフを作りたかったので、ベンチマーク形式で作っています。</p><figure class="highlight go"><figcaption><span>Unixドメインクライアント</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> unixdomainclient</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkUnixDomainClient</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">w, err := net.Dial(<span class="string">&quot;unix&quot;</span>, <span class="string">&quot;/tmp/go122.sock&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r, err := os.Open(<span class="string">&quot;example.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err = io.Copy(w, r); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;finish&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを実行し、可視化します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -cpuprofile cpu.prof -memprofile mem.prof -bench .</span><br><span class="line">$ go tool pprof -http :8080 cpu.prof</span><br></pre></td></tr></table></figure><p>そうすると、<code>io.Copy()</code> から システムコール <code>sendfile(2)</code> が呼ばれているのが分かります。</p><img src="/images/20240214a/image.png" alt="image.png" width="1200" height="644" loading="lazy"><p>比較のため、Go1.21.7 で動かしてみます。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.21.7 linux/amd64</span><br><span class="line"></span><br><span class="line">$ go test -v -cpuprofile cpu.prof -memprofile mem.prof -bench .</span><br><span class="line">$ go tool pprof -http :8081 cpu.prof</span><br></pre></td></tr></table></figure><p>そうすると、今度は <code>sendfile(2)</code> ではなく <code>read(2)</code> が呼ばれていることが分かります。</p><img src="/images/20240214a/image_2.png" alt="image.png" width="1200" height="772" loading="lazy"><p>今回は <code>go tool</code> でシステムコールがどのような流れ呼び出されているか確認しました。</p><p><a href="https://ascii.jp/elem/000/001/267/1267477/2/">Goならわかるシステムプログラミング 第5回 Goから見たシステムコール</a> に書かれている通り、 <code>strace</code> を見て確認するのも良いかと思います。</p><p>先ほどとほぼ類似の <code>main.go</code> を作ります。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">w, err := net.Dial(<span class="string">&quot;unix&quot;</span>, <span class="string">&quot;/tmp/go122.sock&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r, err := os.Open(<span class="string">&quot;example.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err = io.Copy(w, r); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;finish&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>stace</code> でシステムコールの発行状況を確認します。 <code>Go1.22</code> の場合は <code>sendfile(2)</code> を利用しています。</p><figure class="highlight sh"><figcaption><span>Go1.22 strace結果</span></figcaption><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.22.0 linux/amd64</span><br><span class="line"></span><br><span class="line">$ go build</span><br><span class="line">$ strace ./main</span><br><span class="line">(...省略...)</span><br><span class="line">fcntl(7, F_GETFL)                       = 0x8800 (flags O_RDONLY|O_NONBLOCK|O_LARGEFILE)</span><br><span class="line">fcntl(7, F_SETFL, O_RDONLY|O_LARGEFILE) = 0</span><br><span class="line">sendfile(3, 7, NULL, 4194304)           = 15</span><br><span class="line">sendfile(3, 7, NULL, 4194304)           = 0</span><br><span class="line">write(1, <span class="string">&quot;finish\n&quot;</span>, 7finish</span><br><span class="line">)                 = 7</span><br><span class="line">exit_group(0)                           = ?</span><br><span class="line">+++ exited with 0 +++</span><br></pre></td></tr></table></figure><p><code>Go1.21</code> の場合は <code>read(2)</code>, <code>write(2)</code> を用いていることが分かります。</p><figure class="highlight sh"><figcaption><span>Go1.21 strace結果</span></figcaption><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.21.7 linux/amd64</span><br><span class="line"></span><br><span class="line">$ go build</span><br><span class="line">$ strace ./main</span><br><span class="line">(...省略...)</span><br><span class="line">fcntl(7, F_GETFL)                       = 0x8800 (flags O_RDONLY|O_NONBLOCK|O_LARGEFILE)</span><br><span class="line">fcntl(7, F_SETFL, O_RDONLY|O_LARGEFILE) = 0</span><br><span class="line"><span class="built_in">read</span>(7, <span class="string">&quot;1\r\n2\r\n3\r\n4\r\n5\r\n&quot;</span>, 32768) = 15</span><br><span class="line">write(3, <span class="string">&quot;1\r\n2\r\n3\r\n4\r\n5\r\n&quot;</span>, 15) = 15</span><br><span class="line"><span class="built_in">read</span>(7, <span class="string">&quot;&quot;</span>, 32768)                      = 0</span><br><span class="line">write(1, <span class="string">&quot;finish\n&quot;</span>, 7finish</span><br><span class="line">)                 = 7</span><br><span class="line">exit_group(0)                           = ?</span><br><span class="line">+++ exited with 0 +++</span><br></pre></td></tr></table></figure><p>私の業務範囲だとUnixドメインソケットを使う場面はあまり考えられないのですが、Linuxの機能を上手く活用した改善が入るのは嬉しいですね。</p><h2 id="net-WindowsでDNSリゾルバ挙動更新-57757"><a href="#net-WindowsでDNSリゾルバ挙動更新-57757" class="headerlink" title="net: WindowsでDNSリゾルバ挙動更新 #57757"></a>net: WindowsでDNSリゾルバ挙動更新 <a href="https://github.com/golang/go/issues/57757">#57757</a></h2><p><code>-tags=netgo</code> をつけてビルドした場合、Windowsで <code>%SystemRoot%\System32\drivers\etc\hosts</code> の<code>hosts</code> を参照しない不備があったようです。<a href="https://github.com/golang/go/blob/d52883f443e1d564b0300acdd382af1769bf0477/src/net/conf.go#L134-L145">TODO</a> が残っていたとのこと。</p><p><code>netgo</code> ってなんだ？という方も多いかと思いますが、<a href="https://okzk.hatenablog.com/entry/2018/04/16/154644">golangの名前解決について - okzkメモ</a>に説明されている通り、GoではDNS名前解決の方法が2種類あり、pure Go実装版を利用するためには、 <code>CGO_ENABLED=0</code> か <code>-tags=netgo</code> を付けてビルドする必要があります。</p><p>今回はpure Go版かつWindowsで <code>hosts</code> ファイルを見る実装が漏れていたので修正したということです。Windowsサーバ上もそうですが、GoでCLIツールを開発して展開している人なんかは、ちゃんと <code>hosts</code> を見るようになって嬉しいかもしれませんね。</p><h2 id="net-http-ServeFileFS-など新規追加-51971"><a href="#net-http-ServeFileFS-など新規追加-51971" class="headerlink" title="net&#x2F;http: ServeFileFS()など新規追加 #51971"></a>net&#x2F;http: ServeFileFS()など新規追加 <a href="https://github.com/golang/go/issues/51971">#51971</a></h2><p><code>net/http</code> には <a href="https://pkg.go.dev/net/http#ServeFile">ServeFile()</a>、<a href="https://pkg.go.dev/net/http#ServeContent">ServeContent()</a> など静的ファイルをホストするような便利関数が存在します。しかし、これらは <code>io/fs</code> パッケージが登場した<a href="https://go.dev/doc/go1.16#fs">Go 1.16</a> 以前に開発されていたもので、互換性のため <code>io.FS</code>で動作する版を追加しようという提案です。</p><p>サーバ側には2つ追加されました。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ServeFileFS</span><span class="params">(w ResponseWriter, r *Request, fsys fs.FS, name <span class="type">string</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FileServerFS</span><span class="params">(root fs.FS)</span></span> Handler</span><br></pre></td></tr></table></figure><p>クライアント側には1つ追加されました。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFileTransportFS</span><span class="params">(fsys fs.FS)</span></span> RoundTripper</span><br></pre></td></tr></table></figure><p><code>http.NewFileTransportFS()</code> を取り上げます。</p><p>最初に検証用のファイルを作成します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;test\ntest\ntest&quot;</span> &gt; ~/example.txt</span><br></pre></td></tr></table></figure><p>続いて <code>RegisterProtocol()</code>で <code>file</code> スキーマに <code>http.NewFileTransportFS()</code> 登録します。アクセス先は先ほど作成した <code>example.txt</code> です。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := &amp;http.Transport&#123;&#125;</span><br><span class="line">t.RegisterProtocol(<span class="string">&quot;file&quot;</span>, http.NewFileTransportFS(os.DirFS(<span class="string">&quot;/&quot;</span>))) <span class="comment">// ★ポイント</span></span><br><span class="line">c := &amp;http.Client&#123;Transport: t&#125;</span><br><span class="line"> </span><br><span class="line">res, err := c.Get(<span class="string">&quot;file:///home/mano/example.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// TODO 検証用コードのためFatalで落とす</span></span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line"></span><br><span class="line">all, err := io.ReadAll(res.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// TODO 検証用コードのためFatalで落とす</span></span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(<span class="type">string</span>(all))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そうすると実行結果は次のように、先ほど作成した <code>example.txt</code> の結果が表示されます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>従来ですと次のように <code>FS</code> がついていない <code>http.NewFileTransport()</code> を使っていました。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line"><span class="deletion">-&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">t := &amp;http.Transport&#123;&#125;</span><br><span class="line"><span class="deletion">-t.RegisterProtocol(&quot;file&quot;, http.NewFileTransportFS(os.DirFS(&quot;/&quot;))) // ★ポイント</span></span><br><span class="line"><span class="addition">+t.RegisterProtocol(&quot;file&quot;, http.NewFileTransport(http.Dir(&quot;/&quot;))) // ★従来実装</span></span><br><span class="line">c := &amp;http.Client&#123;Transport: t&#125;</span><br><span class="line"> </span><br><span class="line">res, err := c.Get(&quot;file:///home/mano/example.txt&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">// TODO 検証用コードのためFatalで落とす</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">defer res.Body.Close()</span><br><span class="line"></span><br><span class="line">all, err := io.ReadAll(res.Body)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">// TODO 検証用コードのためFatalで落とす</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(string(all))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>挙動としては同じですし、deprecatedという訳でもないですが、今後は <code>FS</code> がついている方を利用する方が拡張性などの観点で良いでしょう。</p><h2 id="net-http-空っぽのContent-Lengthヘッダ拒否-61679"><a href="#net-http-空っぽのContent-Lengthヘッダ拒否-61679" class="headerlink" title="net&#x2F;http: 空っぽのContent-Lengthヘッダ拒否 #61679"></a>net&#x2F;http: 空っぽのContent-Lengthヘッダ拒否 <a href="https://github.com/golang/go/issues/61679">#61679</a></h2><p><code>Content-Length: 0</code> ではなく、 <code>Content-Length: </code> をサーバにHTTPリクエストした場合、従来ですと200が返ってきた（400ではない）ことが、<a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-content-length">RFC 9110 のセクション 8.6</a>などに反しているということで、修正されました。この拒否する挙動は、ApacheやNginxと同じらしく、影響を受けるユーザーはほぼゼロだろうということも話されていました。</p><p>..にも関わらず、従来の挙動で動かしたい場合 <code>GODEBUG</code> に <code>httplaxcontentlength=1</code> を設定すれば切り戻し可能だそうです。芸が細かい..!!</p><h2 id="net-http-Request-PathValue-新規追加-61410"><a href="#net-http-Request-PathValue-新規追加-61410" class="headerlink" title="net&#x2F;http: Request.PathValue()新規追加 #61410"></a>net&#x2F;http: Request.PathValue()新規追加 <a href="https://go.dev/issue/61410">#61410</a></h2><p>Go1.22リリースの目玉機能の1つで、HTTPサーバのルーティングが大幅に強化されました。</p><p>武田さんの<a href="/articles/20240202a/">Go1.22 リリース連載 HTTPルーティングの強化 </a> を参照ください。機能面の紹介だけではなく性能面もベンチマークを取っており、参考になります。</p><h2 id="net-netip-AddrPort-Compare-新規追加-61642"><a href="#net-netip-AddrPort-Compare-新規追加-61642" class="headerlink" title="net&#x2F;netip: AddrPort.Compare()新規追加  #61642"></a>net&#x2F;netip: AddrPort.Compare()新規追加  <a href="https://github.com/golang/go/issues/61642">#61642</a></h2><p><a href="https://pkg.go.dev/net/netip@master#AddrPort.Compare"><code>func (p AddrPort) Compare(p2 AddrPort) int</code></a> が追加され、<code>AddrPort</code> の比較ができるようになりました。 <code>time.Compare()</code> などと同様、 <code>p&lt;p2 → -1</code>、<code>p=p2 → 0</code>、<code>ip&gt;ip2 → 1</code>を返します。</p><p>背景としては、Go1.21で追加された <code>slices.SortFunc()</code> と組み合わせたいとのことです。</p><ul><li>【参考】 <code>slices.SortFunc()</code> について → <a href="/articles/20230816a/">Go1.21:slicesパッケージのチートシート</a></li></ul><p>どのような感じになるか <code>slices.SortFunc()</code> に <code>netip.Compare()</code> を組み合わせてみます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/netip&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">inputs := []<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;1.2.3.4:80&quot;</span>,</span><br><span class="line"><span class="string">&quot;1.2.3.4:443&quot;</span>,</span><br><span class="line"><span class="string">&quot;2.3.4.5:22&quot;</span>,</span><br><span class="line"><span class="string">&quot;[::1]:80&quot;</span>,</span><br><span class="line"><span class="string">&quot;[::1]:443&quot;</span>,</span><br><span class="line"><span class="string">&quot;[::2]:22&quot;</span>,</span><br><span class="line"><span class="string">&quot;[0102:0304::0]:80&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addrs := <span class="built_in">make</span>([]netip.AddrPort, <span class="number">0</span>, <span class="built_in">len</span>(inputs))</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> inputs &#123;</span><br><span class="line">addrs = <span class="built_in">append</span>(addrs, netip.MustParseAddrPort(s))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slices.SortFunc(addrs, <span class="function"><span class="keyword">func</span><span class="params">(a, b netip.AddrPort)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a.Compare(b)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, a := <span class="keyword">range</span> addrs &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%+v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行すると次のような並び順になります。まずIP部分でソート、その後ポート番号でソートといった形で、直感的だと思います。IPv4とIPv6を混ぜた場合は、v4→v6の順になるようです。</p><figure class="highlight console"><figcaption><span>出力結果</span></figcaption><table><tr><td class="code"><pre><span class="line">1.2.3.4:80</span><br><span class="line">1.2.3.4:443</span><br><span class="line">2.3.4.5:22</span><br><span class="line">[::1]:80</span><br><span class="line">[::1]:443</span><br><span class="line">[::2]:22</span><br><span class="line">[102:304::]:80</span><br></pre></td></tr></table></figure><p>ちなみに、元のIssueでは <code>netip.Prefix</code> にも <code>Compare()</code> を追加しようという提案でしたが、次回以降に持ち越しとなりました。理由として <code>10.0.0.0/8</code> → <code>0.0.0.0/32</code> のような違和感ある並び順となる実装になっていたようで、既存の標準順序があればそれに合わせようということで、取り下げられました。</p><p><code>Compare()</code> 1つ追加するにしても、どのような順序が一般的か（慣習に乗っ取っていて、利用者の驚きが最小化されるか）、周辺知識も深めていかないと駄目だなと感じました。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>Go1.22の<code>net</code>, <code>net/http</code>, <code>net/netip</code> の3パッケージのアップデートについて取り上げました。</p><p>最近、低レイヤーについてどこまで抑えておくべきか、といった言説をXで見かけた気がしており、私が新人のときの研修リーダー的な先輩に、「自分の業務で用いる1つ下まで抑えるべき。2つ下まで深掘りできたら相当差がつく、凄い」と言われたことを思い出しました。</p><p>リリースノートの内容も、「Goならわかるシステムプログラミング」を理解していればもっと解像度が高く理解できていたなと反省&#x2F;痛感しています。引き続き理解できる範囲も広げていこうと思います。最後まで読んでいただき、ありがとうございます。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-22/">Go1.22</category>
      
      <category domain="https://future-architect.github.io/tags/net-http/">net/http</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%B3%E3%83%BC%E3%83%AB/">システムコール</category>
      
      <category domain="https://future-architect.github.io/tags/splice/">splice</category>
      
      
      <comments>https://future-architect.github.io/articles/20240214a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ダイアログもアラートも、Reactで子コンポーネントの開閉管理を実装する</title>
      <link>https://future-architect.github.io/articles/20240208a/</link>
      <guid>https://future-architect.github.io/articles/20240208a/</guid>
      <pubDate>Wed, 07 Feb 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;Reactでは、画面に関わる表示の制御はかならず何かしらのステート管理を行いそれで行います。ダイアログの場合は開閉をuseState()で作ったフラグで管理するみたいな感じです。&lt;/p&gt;
&lt;p&gt;たとえば、ウェブブラウザのJavaScriptから呼べる&lt;code&gt;alert(</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>Reactでは、画面に関わる表示の制御はかならず何かしらのステート管理を行いそれで行います。ダイアログの場合は開閉をuseState()で作ったフラグで管理するみたいな感じです。</p><p>たとえば、ウェブブラウザのJavaScriptから呼べる<code>alert()</code>や<code>confirm()</code>は、関数を呼び出せばダイアログが表示されますし、ダイアログが閉じたら処理が戻ってきます。<code>confirm()</code>ならユーザーが選択したものと一緒に返ってきます。標準の<code>&lt;dialog&gt;</code>タグが今時ですが、このタグはDOMインスタンスの<code>showModal()</code>や<code>show()</code>メソッドを呼ぶ必要があります。命令志向ですね。</p><p>一方、Reactでダイアログを実装する場合を考えます。メソッド呼び出しが直接扱えればシンプルですが、Reactでは基本的にステート管理でやりましょう、というのが流儀です。<code>useImperativeHandle()</code>を使うとか、<code>forwardRef()</code>を使うとか、いろいろ手はありますが、できることならrefは複雑化して利用者が動きを理解するのが難しくなりがちなので、呼び元で<code>ref</code>を使わなくても良い方法を考えました。</p><h1 id="親と子のコンポーネントの関心を考える"><a href="#親と子のコンポーネントの関心を考える" class="headerlink" title="親と子のコンポーネントの関心を考える"></a>親と子のコンポーネントの関心を考える</h1><p>親コンポーネントの立場で見れば、関心があることは次の2つです。</p><ul><li>ダイアログを開く</li><li>ダイアログが閉じられた時に結果を受け取る</li></ul><p>この操作のためにrefで子コンポーネントの参照を取得するとか、ダイアログの開閉状態の管理をする、というのは本来やりたくない仕事のはずです。</p><p>一方で子供の方を見て見ましょう。</p><ul><li>ユーザーがダイアログ操作を行った場合にダイアログを閉じて結果を送る</li><li>ダイアログの開く指示を受けてダイアログを開く</li></ul><p>これは違和感はないと思いますが、Reactでは複数のコンポーネントが関心を持つステートは、共通の先祖かそれよりも上位のコンポーネントが持つことになります。これはReduxとかJotaiとかRecoilを使ってもそうです。親は子ダイアログを開きたいので、開閉ステートの管理は親が持つことになります。</p><p>そうなると親側でステートを<code>useState()</code>で作成し、それを変更したりというのも必要になりますが、そういうのはカスタムフックでまとめれば良さそうです。</p><p>以前の<a href="https://future-architect.github.io/articles/20221213a/">ブログ記事</a>でも紹介したようなDFD風の図で、親の関心が最小になるような構成を考えて見ました。</p><p>ダイアログの開閉状態はカスタムフックの中に閉じ込められたので、親コンポーネントと子コンポーネントはそれぞれ必要最低限の関心ごとにのみ触れれば良い状況がつくれそうです。</p><img src="/images/20240208a/名称未設定ファイル.drawio.png" alt="名称未設定ファイル.drawio.png" width="881" height="391" loading="lazy"><h1 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h1><p><code>useOpener</code>というカスタムフックを作ってみます。呼び出しもとのイメージはこんな感じです。変更はカスタムフックに渡すコールバックで受け取ります。今回は確認ダイアログなので、booleanの値を受け取っていますが、ここは呼び出すダイアログによってはテキストかもしれないし、はジェネリクスの型パラメータにしたいですね。</p><p>ダイアログを開くボタンに渡すコールバックや、子コンポーネントで必要な情報一式がカスタムフックのレスポンスには含まれています。これをこのまま子コンポーネントに渡します。</p><figure class="highlight tsx"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useOpener &#125; <span class="keyword">from</span> <span class="string">&quot;./opener&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ConfirmDialog</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Dialog&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> callback = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">v: <span class="built_in">boolean</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`選択された: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [open, opener] = <span class="title function_">useOpener</span>(callback)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;open&#125;</span>&gt;</span>Open Dialog<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ConfirmDialog</span> <span class="attr">message</span>=<span class="string">&#123;</span>&quot;<span class="attr">サンプル</span>&quot;&#125; <span class="attr">opener</span>=<span class="string">&#123;opener&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>カスタムフックは次のような実装です。</p><figure class="highlight ts"><figcaption><span>opener.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCallback, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> useOpener&lt;T&gt;(callback?: <span class="function">(<span class="params">v: T, isOpen: <span class="built_in">boolean</span></span>) =&gt;</span> <span class="built_in">void</span>): [<span class="function">()=&gt;</span><span class="built_in">void</span>, &#123;<span class="attr">isOpen</span>: <span class="built_in">boolean</span>, <span class="attr">close</span>: <span class="function">()=&gt;</span><span class="built_in">void</span>, <span class="attr">callback</span>:<span class="function">(<span class="params">isOpen: <span class="built_in">boolean</span>, v: T</span>)=&gt;</span><span class="built_in">void</span>&#125;] &#123;</span><br><span class="line">    <span class="keyword">const</span> [ isOpen, setIsOpen ] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> cb = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">isOpen: <span class="built_in">boolean</span>, v: T</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">            <span class="title function_">callback</span>(v, isOpen)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [callback])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> open = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setIsOpen</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> close = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setIsOpen</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="comment">// 親コンポーネント向け</span></span><br><span class="line">        open,</span><br><span class="line">        <span class="comment">// 子コンポーネント向け</span></span><br><span class="line">        &#123;</span><br><span class="line">            isOpen,</span><br><span class="line">            close,</span><br><span class="line">            <span class="attr">callback</span>: cb,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Opener</span>&lt;T&gt; = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> useOpener&lt;T&gt;&gt;[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>最後にダイアログの実装です。カスタムフックの情報からダイアログのオープンが必要であれば<code>&lt;dialog&gt;</code>の<code>showModal()</code>を呼び出してモーダルを開きます。ダイアログ操作でダイアログを閉じた場合は<code>&lt;dialog&gt;</code>を閉じつつ、再度呼べるようにカスタムフックのステートを閉じるに設定します。また、カスタムフック作成時に渡されたコールバックを呼びます。</p><p>カスタムフックを媒介させることで、親と子の結合はだいぶ弱くできました。すくなくとも、内部実装を知らないと使いにくい<code>ref</code>のようなものを親コンポーネントから除外できたのは大きいでしょう。</p><figure class="highlight tsx"><figcaption><span>Dialog.tsx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef, useEffect, useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Opener</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./opener&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ConfirmDialog</span>(<span class="params">&#123; message, opener &#125;: &#123;message: <span class="built_in">string</span>, opener: Opener&lt;<span class="built_in">boolean</span>&gt;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dialog = useRef&lt;<span class="title class_">HTMLDialogElement</span>&gt;(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">const</span> &#123; close, isOpen, callback &#125; = opener</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isOpen) &#123;</span><br><span class="line">            dialog.<span class="property">current</span>?.<span class="title function_">showModal</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [isOpen])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ok = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">        <span class="title function_">close</span>()</span><br><span class="line">        dialog.<span class="property">current</span>?.<span class="title function_">close</span>()</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ng = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">        <span class="title function_">close</span>()</span><br><span class="line">        dialog.<span class="property">current</span>?.<span class="title function_">close</span>()</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">dialog</span> <span class="attr">ref</span>=<span class="string">&#123;dialog&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card card-compact w-96 bg-base-100 shadow-xl p-1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card-actions justify-end&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;ok&#125;</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-secondary&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;ng&#125;</span>&gt;</span>NG<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実際に表示してみたのが次のものになります。daisyUIを使っています。</p><img src="/images/20240208a/スクリーンショット_2024-01-26_19.48.05.png" alt="スクリーンショット_2024-01-26_19.48.05.png" width="1045" height="502" loading="lazy"><h1 id="アラートも表示してみる"><a href="#アラートも表示してみる" class="headerlink" title="アラートも表示してみる"></a>アラートも表示してみる</h1><p>今回のカスタムフック本体は単にbooleanの開閉状態を持っているだけでした。つまり、子コンポーネントはダイアログ以外にも、ドロワーやアラートなんかの表示にも使えます。</p><p>実際にアラート表示としてそのまま使ってみましょう。アラートは表示されたら勝手に消えるものなので、終了のコールバックを受ける必要はありません。</p><figure class="highlight tsx"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useOpener &#125; <span class="keyword">from</span> <span class="string">&quot;./opener&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Alert</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Alert&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [openAlert, alertOpener] = <span class="title function_">useOpener</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-secondary&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;openAlert&#125;</span>&gt;</span>Open Alert<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Alert</span> <span class="attr">opener</span>=<span class="string">&#123;alertOpener&#125;</span>&gt;</span>メッセージ<span class="tag">&lt;/<span class="name">Alert</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><p>実装してみたアラートがこんな感じです。表示されたらタイマーで5秒後にクローズしています。</p><figure class="highlight tsx"><figcaption><span>Alert.tsx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, <span class="title class_">ReactNode</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Opener</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./opener&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Alert</span>(<span class="params">&#123;children, opener&#125;: &#123;children : ReactNode, opener: Opener&lt;<span class="built_in">void</span>&gt;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; close, isOpen &#125; = opener</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isOpen) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">close</span>()</span><br><span class="line">            &#125;, <span class="number">5000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [isOpen])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        isOpen ? </span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;alert&quot;</span> <span class="attr">className</span>=<span class="string">&quot;alert alert-error fixed bottom-2 left-1 right-1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> : <span class="literal">null</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>かんたんですね。</p><img src="/images/20240208a/スクリーンショット_2024-01-26_20.07.00.png" alt="スクリーンショット_2024-01-26_20.07.00.png" width="1045" height="502" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Reactは状態管理を複雑にしようとおもえば結構複雑にできてしまいますが、それぞれのコンポーネントで必要な関心ごとはどれか、というのを考えて、それらのみに触れれば良い状況を作ることで、かなりシンプルにできます。パズルみたいで楽しいですよね。スクリーンリーダー等を考えれば、ダイアログはネイティブなタグの<code>&lt;dialog&gt;</code>を使うべきですが、このAPIが命令的でReactとの相性が良くない（コードが長くなりがち）というのも回避できました。<br>状態を整理してお互いの依存のないカスタムフックにできたので、当初の予定のダイアログ以外のアラートにも応用ができました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/TypeScript/">TypeScript</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/React/">React</category>
      
      
      <comments>https://future-architect.github.io/articles/20240208a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>30種類のプログラミング言語で、ループ処理を書いてみた</title>
      <link>https://future-architect.github.io/articles/20240206a/</link>
      <guid>https://future-architect.github.io/articles/20240206a/</guid>
      <pubDate>Mon, 05 Feb 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240206a/top.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;695&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240206a/top.png" alt="" width="1000" height="695"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。CSIG 所属の棚井です。<br>タイトルの内容が気になる方は、先に「<a href="#%E8%89%B2%E3%80%85%E3%81%AA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E%E3%81%AE%E3%80%8C%E3%83%AB%E3%83%BC%E3%83%97%E5%87%A6%E7%90%86%E3%80%8D%E3%82%92%E8%A6%8B%E3%81%A6%E3%81%BF%E3%82%8B">こちら</a>」をご覧ください。</p><br><p>本ブログは、<a href="https://tip.golang.org/doc/go1.22">Go 1.22 Release Notes</a> の内容を紹介する「<a href="/articles/20240129a/">フューチャー技術ブログ Go 1.22 リリース連載</a>」７本目の記事です。</p><p>Go 1.22 では、「<a href="https://future-architect.github.io/articles/20240129a/">澁川さんの記事</a>」や「<a href="https://tech.every.tv/entry/2023/12/09/1">こちらの記事</a>」にて取り上げられているように <strong>for ループのアップデート</strong> が入りました。アップデート分のうち、<code>range over integer</code> と <code>range over function</code> はこちらの issue（<a href="https://github.com/golang/go/issues/61405">spec: add range over int, range over func #61405</a>）に Proposal が記載されています。</p><p>本記事ではこのうち、<code>range over integer</code> にフォーカスして取り上げていきます。</p><h2 id="Go-1-22-range-over-integer"><a href="#Go-1-22-range-over-integer" class="headerlink" title="Go 1.22 range over integer"></a>Go 1.22 range over integer</h2><p>Go の言語仕様が記載された <a href="https://tip.golang.org/ref/spec#For_range">For statements with range clause</a> にて、<code>for-range ループ</code> は以下のように説明されています。</p><blockquote><p>A “for” statement with a “range” clause iterates through all entries of an array, slice, string or map, values received on a channel, or integer values from zero to an upper limit [<a href="https://tip.golang.org/ref/spec#Go_1.22">Go 1.22</a>].</p></blockquote><p><code>Range expression</code> に渡す値のデータ型により、ループ変数にどのような値が渡されるのかが整理されています。例えば、<code>Range</code> に渡したデータ型が配列やスライスであれば、1st value と 2nd value に渡される値は「int型のインデックス、インデックスに対応する値」であり、マップ型であれば「キー、キーに対応する値」という言語仕様が説明されています。</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Range expression                          1st value          2nd value</span><br><span class="line"></span><br><span class="line">array or slice  a  [n]E, *[n]E, or []E    index    i  int    a[i]       E</span><br><span class="line">string          s  string type            index    i  int    see below  rune</span><br><span class="line">map             m  map[K]V                key      k  K      m[k]       V</span><br><span class="line">channel         c  chan E, &lt;-chan E       element  e  E</span><br><span class="line">integer         n  integer type           value    i  see below</span><br></pre></td></tr></table></figure><p>Range の説明に <strong>see below</strong> と記載された項目のうち、integer については以下の説明が Go 1.22 から追記されています。</p><blockquote><ol start="5"><li>For an integer value n, the iteration values 0 through n-1 are produced in increasing order. If n &lt;&#x3D; 0, the loop does not run any iterations.</li></ol></blockquote><p><code>range over integer</code> の挙動としては</p><ul><li>range に渡された <code>n</code> が integer型の場合は<ul><li>n &gt; 0 ならば、0 から n-1 まで +1 だけインクリメントしながらループを継続する</li><li>n &lt;&#x3D; 0 ならば、ループしない</li></ul></li></ul><p>との説明があります。</p><p>実際に Go 1.22（<a href="https://github.com/golang/go/tree/release-branch.go1.22">release-branch.go1.22</a>）を動かしてみると、仕様通りの挙動が得られました。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="keyword">range</span> <span class="number">5</span> &#123;</span><br><span class="line">                fmt.Println(i)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="keyword">range</span> <span class="number">0</span> &#123;</span><br><span class="line">                fmt.Println(i)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i := <span class="keyword">range</span> <span class="number">-1</span> &#123;</span><br><span class="line">                fmt.Println(i)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:（なし）</span></span><br></pre></td></tr></table></figure><p><code>Range expression</code> に自然数を渡した場合は、0からその数分だけ+1インクリメントしながらループが繰り返されていること、また、0以下の整数を渡した場合にはループ自体がスキップされていることが分かります。</p><p>Go 1.21 以前に「指定の回数だけループを繰り返したい」場合には以下のような「C言語から続く伝統的なループ処理」で実装する必要がありました。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// C言語からの伝統のループ</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">                fmt.Println(i)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>「伝統的なループ処理」のコードレビューでは「あー、for で回数指定のループね。ここの処理は配列やマップに依存していないから、拡張for文は使えないのか。ループの開始値は x で、終了条件は x &lt; y だから、ループ回数は z になる。よし、テストコード側も確認しよう。」のように「境界条件を脳内でイメージした上、ループ回数を演算して、妥当性を確認する」必要がありました。今後は「伝統的なループの記述が不要」になりましたので、Go 1.22 からは少しだけレビューが楽になりました。予めループの回数が決まっている処理は <code>range over integer</code> で書き換えられると思いますので、発見次第リファクタリングの Pull Request を作成してみてはいかがでしょうか。</p><h1 id="色々なプログラミング言語の「ループ処理」を見てみる"><a href="#色々なプログラミング言語の「ループ処理」を見てみる" class="headerlink" title="色々なプログラミング言語の「ループ処理」を見てみる"></a>色々なプログラミング言語の「ループ処理」を見てみる</h1><p>Go 1.22 連載での「<a href="https://future-architect.github.io/articles/20240129a/#%E3%83%AB%E3%83%BC%E3%83%97%E3%81%AE%E5%A4%89%E5%8C%96-2">渋川さんの記事</a>」にある <strong>C言語からの伝統のループ</strong> とのワードを読み</p><ul><li>そういえば、他のプログラミング言語では、ループ処理をどうやって書いてたっけ？</li><li>開発言語を変えた直後は、絶妙な違いでコンパイルエラーや文法エラーにぶつかっている気がする</li></ul><p>との感情が湧き出てきました。</p><p>さらに、ちょうど今読み進めている「<a href="https://www.ohmsha.co.jp/book/9784274226298/">達人プログラマー</a>」の「達人の哲学」には</p><blockquote><p><strong>毎年少なくとも一つの言語を習得する。</strong><br>言語が異なると、同じ問題でも違った解決方法が採用されています。つまり、いくつかの異なったアプローチを学習することにより、幅広い思考が可能になるわけです。</p></blockquote><p>と書かれていることにインスパイアされましたので、<br><strong>30種類のプログラミング言語で、同じ出力が得られるループ処理</strong><br>を書いてみたら何か学びがあるのかなと思い、調べてみました。</p><p>これまでの業務で利用した言語もあれば、名前を聞いたことはある程度の言語、せっかくの機会なので「（私にとっては）伝説の言語」までピックアップしています。  </p><p>肝心のループ処理内容は、<a href="https://tip.golang.org/doc/go1.22">Go 1.22 Release Notes</a> に <a href="https://go.dev/play/p/ky02zZxgk_r?v=gotip">example</a> として提示されている以下コードをベースとしています。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="keyword">range</span> <span class="number">10</span> &#123;</span><br><span class="line">    fmt.Println(<span class="number">10</span> - i)</span><br><span class="line">  &#125;</span><br><span class="line">  fmt.Println(<span class="string">&quot;go1.22 has lift-off!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// go1.22 has lift-off!</span></span><br></pre></td></tr></table></figure><p>また、言語選定には、以下サイトを参考にしています。</p><ul><li><a href="https://madnight.github.io/githut/#/pull_requests/2023/4">GitHut 2.0</a></li><li><a href="https://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E%E4%B8%80%E8%A6%A7">ウィキペディア プログラミング言語一覧</a></li></ul><p>それでは、30種類のプログラミング言語でのループ処理を見ていきましょう。</p><h2 id="対象言語"><a href="#対象言語" class="headerlink" title="対象言語"></a>対象言語</h2><ol><li>Python</li><li>Ruby</li><li>Java</li><li>JavaScript</li><li>TypeScript</li><li>C言語</li><li>C++</li><li>Bash</li><li>PHP</li><li>Rust</li><li>Kotlin</li><li>Swift</li><li>Objective-C</li><li>C#</li><li>Dart</li><li>Perl</li><li>Scala</li><li>Haskell</li><li>Prolog</li><li>R言語</li><li>Julia</li><li>FORTRAN</li><li>LISP</li><li>MATLAB</li><li>PowerShell</li><li>Vim Script</li><li>Emacs Lisp</li><li>Visual Basic .NET</li><li>COBOL</li><li>RPG</li><li>Smalltalk</li></ol><h3 id="実行時の-Output"><a href="#実行時の-Output" class="headerlink" title="実行時の Output"></a>実行時の Output</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">go1.22 has lift-off!</span><br></pre></td></tr></table></figure><p>:::note warn<br>本ブログでは「実装の正しさ」よりも「各言語ごとのループ処理の雰囲気を味わうこと」を優先してます。<br>「その実装だと、ループ回数が多いよ！」などの粗が見つかるかもしれませんが、温かい目で見守っていただけると幸いです。<br>:::</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Python">Python</a></li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">10</span> - i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;go1.22 has lift-off!&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">10</span> - i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;go1.22 has lift-off!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Ruby">Ruby</a></li></ul><figure class="highlight rb"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span>.times <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">  puts <span class="number">10</span> - i</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">&quot;go1.22 has lift-off!&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight rb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">9</span> <span class="keyword">do</span></span><br><span class="line">  puts <span class="number">10</span> - i</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">&quot;go1.22 has lift-off!&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Java">Java</a></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="number">10</span> - i);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;go1.22 has lift-off!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2023&#x2F;09&#x2F;19 にリリースされた Java 21 のプレビュー機能では、以下の表記が可能<ul><li><a href="https://qiita.com/nowokay/items/174f75b9e48cc7a80838#445-unnamed-classes-and-instance-main-methods-preview">Java 21新機能まとめ</a></li><li><a href="https://nowokay.hatenablog.com/entry/2023/06/12/153755">Javaがﾊﾟﾌﾞﾘｯｸｽﾀﾃｨｯｸｳﾞｫｲﾄﾞﾒｲﾝの呪文から解放される</a></li><li><a href="https://openjdk.org/jeps/445">JEP 445: Unnamed Classes and Instance Main Methods (Preview)</a></li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="number">10</span> - i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;go1.22 has lift-off!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul><li><a href="https://ja.wikipedia.org/wiki/JavaScript">JavaScript</a></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> - i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;go1.22 has lift-off!&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><ul><li><a href="https://ja.wikipedia.org/wiki/TypeScript">TypeScript</a></li></ul><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> <span class="attr">i</span>: <span class="built_in">number</span> = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> - i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;go1.22 has lift-off!&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="C言語"><a href="#C言語" class="headerlink" title="C言語"></a>C言語</h2><ul><li><a href="https://ja.wikipedia.org/wiki/C%E8%A8%80%E8%AA%9E">C言語</a></li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">10</span> - i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;go1.22 has lift-off!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><ul><li><a href="https://ja.wikipedia.org/wiki/C%2B%2B">C++</a></li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="number">10</span> - i &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;go1.22 has lift-off!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Bash">Bash</a></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;0..9&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> $((<span class="number">10</span> - i))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;go1.22 has lift-off!&quot;</span></span><br></pre></td></tr></table></figure><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><ul><li><a href="https://ja.wikipedia.org/wiki/PHP_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)">PHP</a></li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="number">10</span> - <span class="variable">$i</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;go1.22 has lift-off!\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Rust_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)">Rust</a></li></ul><figure class="highlight rs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="number">10</span> - i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;go1.22 has lift-off!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Kotlin">Kotlin</a></li></ul><figure class="highlight kt"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">10</span>) &#123;</span><br><span class="line">        println(<span class="number">10</span> - i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;go1.22 has lift-off!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Swift_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)">Swift</a></li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">10</span> <span class="operator">-</span> i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;go1.22 has lift-off!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C"></a>Objective-C</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Objective-C">Objective-C</a></li></ul><figure class="highlight h"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            NSLog(@<span class="string">&quot;%d&quot;</span>, <span class="number">10</span> - i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        NSLog(@<span class="string">&quot;go1.22 has lift-off!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-1"><a href="#C-1" class="headerlink" title="C#"></a>C#</h2><ul><li><a href="https://ja.wikipedia.org/wiki/C_Sharp">C#</a></li></ul><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="number">10</span> - i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;go1.22 has lift-off!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>C# 9.0 から以下の表記が可能<ul><li><a href="https://ufcpp.net/study/csharp/misc/miscentrypoint/#top-level-statements">C# のエントリー ポイント - ufcpp.net</a></li><li><a href="https://devblogs.microsoft.com/dotnet/welcome-to-c-9-0/">Welcome to C# 9.0 - .NET Blog</a></li></ul></li></ul><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="number">10</span> - i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;go1.22 has lift-off!&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Dart">Dart</a></li></ul><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">10</span> - i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;go1.22 has lift-off!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Perl">Perl</a></li></ul><figure class="highlight pl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"><span class="keyword">use</span> warnings;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">my</span> $i (<span class="number">0</span>..<span class="number">9</span>) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="number">10</span> - $i, <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;go1.22 has lift-off!\n&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Scala">Scala</a></li></ul><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Countdown</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until <span class="number">10</span>) &#123;</span><br><span class="line">      println(<span class="number">10</span> - i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;go1.22 has lift-off!&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Haskell">Haskell</a></li></ul><figure class="highlight hs"><table><tr><td class="code"><pre><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">let</span> countdown = [<span class="number">0</span>..<span class="number">9</span>]</span><br><span class="line">    mapM_ (\i -&gt; putStrLn (show (<span class="number">10</span> - i))) countdown</span><br><span class="line"></span><br><span class="line">    putStrLn <span class="string">&quot;go1.22 has lift-off!&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Prolog"><a href="#Prolog" class="headerlink" title="Prolog"></a>Prolog</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Prolog">Prolog</a></li></ul><figure class="highlight pl"><table><tr><td class="code"><pre><span class="line">start_countdown :- </span><br><span class="line">    between(<span class="number">0</span>, <span class="number">9</span>, N), </span><br><span class="line">    writeln(<span class="number">10</span> - N), </span><br><span class="line">    N = <span class="number">9</span>, </span><br><span class="line"></span><br><span class="line">    writeln(<span class="string">&quot;go1.22 has lift-off!&quot;</span>).</span><br></pre></td></tr></table></figure><h2 id="R言語"><a href="#R言語" class="headerlink" title="R言語"></a>R言語</h2><ul><li><a href="https://ja.wikipedia.org/wiki/R%E8%A8%80%E8%AA%9E">R言語</a></li></ul><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>i <span class="keyword">in</span> <span class="number">0</span><span class="operator">:</span><span class="number">9</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">  cat<span class="punctuation">(</span><span class="number">10</span> <span class="operator">-</span> i<span class="punctuation">,</span> <span class="string">&quot;\n&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">cat<span class="punctuation">(</span><span class="string">&quot;go1.22 has lift-off!\n&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h2 id="Julia"><a href="#Julia" class="headerlink" title="Julia"></a>Julia</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Julia_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)">Julia</a></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in 0:9</span><br><span class="line">    println(10 - i)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">println(&quot;go1.22 has lift-off!&quot;)</span><br></pre></td></tr></table></figure><h2 id="FORTRAN"><a href="#FORTRAN" class="headerlink" title="FORTRAN"></a>FORTRAN</h2><ul><li><a href="https://ja.wikipedia.org/wiki/FORTRAN">FORTRAN</a></li></ul><figure class="highlight f90"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> Countdown</span><br><span class="line">  <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">  <span class="keyword">integer</span> :: i</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> i = <span class="number">0</span>, <span class="number">9</span>, <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span> *, <span class="number">10</span> - i</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span> *, <span class="string">&quot;go1.22 has lift-off!&quot;</span></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> Countdown</span><br></pre></td></tr></table></figure><h2 id="LISP"><a href="#LISP" class="headerlink" title="LISP"></a>LISP</h2><ul><li><a href="https://ja.wikipedia.org/wiki/LISP">LISP</a></li></ul><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">(<span class="name">dotimes</span> (<span class="name">i</span> <span class="number">10</span>)</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">&quot;~a~%&quot;</span> (<span class="name">-</span> <span class="number">10</span> i)))</span><br><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">&quot;go1.22 has lift-off!~%&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="MATLAB"><a href="#MATLAB" class="headerlink" title="MATLAB"></a>MATLAB</h2><ul><li><a href="https://ja.wikipedia.org/wiki/MATLAB">MATLAB</a></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i = 0:9</span><br><span class="line">    disp(10 - i)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">disp(&#x27;go1.22 has lift-off!&#x27;)</span><br></pre></td></tr></table></figure><h2 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h2><ul><li><a href="https://ja.wikipedia.org/wiki/PowerShell">PowerShell</a></li></ul><figure class="highlight ps1"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="built_in">Write-Host</span> (<span class="number">10</span> - <span class="variable">$i</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Write-Host</span> <span class="string">&quot;go1.22 has lift-off!&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Vim-Script"><a href="#Vim-Script" class="headerlink" title="Vim Script"></a>Vim Script</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Vim_script">Vim Script</a></li></ul><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">9</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">echo</span> <span class="number">10</span> - i</span><br><span class="line"><span class="keyword">endfor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;go1.22 has lift-off!&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Emacs-Lisp"><a href="#Emacs-Lisp" class="headerlink" title="Emacs Lisp"></a>Emacs Lisp</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Emacs_Lisp">Emacs Lisp</a></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(dotimes (i 10)</span><br><span class="line">  (message &quot;%d&quot; (- 10 i)))</span><br><span class="line"></span><br><span class="line">(message &quot;go1.22 has lift-off!&quot;)</span><br></pre></td></tr></table></figure><h2 id="Visual-Basic-NET"><a href="#Visual-Basic-NET" class="headerlink" title="Visual Basic .NET"></a>Visual Basic .NET</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Visual_Basic_.NET">Visual Basic .NET</a></li></ul><figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Imports</span> System</span><br><span class="line"></span><br><span class="line"><span class="keyword">Module</span> Program</span><br><span class="line">    <span class="keyword">Sub</span> Main()</span><br><span class="line">        <span class="keyword">For</span> i <span class="keyword">As</span> <span class="type">Integer</span> = <span class="number">0</span> <span class="keyword">To</span> <span class="number">9</span></span><br><span class="line">            Console.WriteLine(<span class="number">10</span> - i)</span><br><span class="line">        <span class="keyword">Next</span> i</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;go1.22 has lift-off!&quot;</span>)</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Module</span></span><br></pre></td></tr></table></figure><h2 id="COBOL"><a href="#COBOL" class="headerlink" title="COBOL"></a>COBOL</h2><ul><li><a href="https://ja.wikipedia.org/wiki/COBOL">COBOL</a></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IDENTIFICATION DIVISION.</span><br><span class="line">PROGRAM-ID. Countdown.</span><br><span class="line">DATA DIVISION.</span><br><span class="line">WORKING-STORAGE SECTION.</span><br><span class="line">01 I PIC 9(2) VALUE 0.</span><br><span class="line"></span><br><span class="line">PROCEDURE DIVISION.</span><br><span class="line">PERFORM VARYING I FROM 0 BY 1 UNTIL I &gt; 9</span><br><span class="line">    DISPLAY FUNCTION NUMVAL(10 - I)</span><br><span class="line">END-PERFORM.</span><br><span class="line"></span><br><span class="line">DISPLAY &quot;go1.22 has lift-off!&quot;.</span><br><span class="line">STOP RUN.</span><br></pre></td></tr></table></figure><h2 id="RPG"><a href="#RPG" class="headerlink" title="RPG"></a>RPG</h2><ul><li><a href="https://ja.wikipedia.org/wiki/RPG_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E8%A8%80%E8%AA%9E)">RPG</a></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**FREE</span><br><span class="line">/COPY QRPGLESRC,QRPGLECPY</span><br><span class="line"></span><br><span class="line">DCL-S i INT(2);</span><br><span class="line"></span><br><span class="line">FOR i = 0 TO 9;</span><br><span class="line">DSPLY (&#x27; &#x27; + %CHAR(10 - i));</span><br><span class="line">ENDFOR;</span><br><span class="line"></span><br><span class="line">DSPLY &#x27;go1.22 has lift-off!&#x27;;</span><br><span class="line">*INLR = *ON;</span><br><span class="line"></span><br><span class="line">/END-FREE</span><br></pre></td></tr></table></figure><h2 id="Smalltalk"><a href="#Smalltalk" class="headerlink" title="Smalltalk"></a>Smalltalk</h2><ul><li><a href="https://ja.wikipedia.org/wiki/Smalltalk">Smalltalk</a></li></ul><figure class="highlight st"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> to: <span class="number">10</span> do: [:i |</span><br><span class="line">    (<span class="number">11</span> - i) displayNl.</span><br><span class="line">].</span><br><span class="line"><span class="string">&#x27;go1.22 has lift-off!&#x27;</span> displayNl.</span><br></pre></td></tr></table></figure><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>30種類の言語を書く予定でしたが、ブログ前半の <code>Go</code> と最後の <code>Smalltalk</code> を合わせて、合計 32 個のループ処理となりました。</p><p>普段は Go で開発しており、久しぶりに見た Java の文法で <code>ﾊﾟﾌﾞﾘｯｸｽﾀﾃｨｯｸｳﾞｫｲﾄﾞﾒｲﾝ</code> を回避する方法が出てきた、というのが一番の発見でした。</p><p><a href="https://openjdk.org/jeps/445">JEP 445: Unnamed Classes and Instance Main Methods (Preview)</a> で「Hello World!」のコードが</p><blockquote><p>There is too much clutter here — too much code, too many concepts, too many constructs — for what the program does.<br>…<br>Educators often offer the admonition, “don’t worry about that, you’ll understand it later.” This is unsatisfying to them and their students alike, and leaves students with the enduring impression that Java is complicated.</p></blockquote><p>と言われているのは、「それはそう」と久しぶりに仕様書で笑いました。</p><p>ここまで読んでいただけた方であれば、本記事冒頭の「Go 1.22 で追加された <code>range over integer</code> の仕様紹介」はメイントピックではなく、「色々なプログラミング言語を書いてみること」が執筆モチベーションになっていることをご理解いただけると思います。Go 1.22 のマイナーアップデートという「きっかけ」を利用して、多種多様なプログラミング言語を眺めてみました。</p><p>また、執筆後に <a href="https://twitter.com/kujirahand">クジラ飛行机</a> さんの書かれた「<a href="https://gihyo.jp/book/2020/978-4-297-11347-6">プログラミング言語大全</a>」を見つけまして、早速購入させていただきました。</p><p>私自身の開発言語経験と比較しますと、今回取り上げたプログラミング言語の殆どは初見です。<br>達人プログラマーの「毎年少なくとも一つの言語を習得する。」には「習得する」とあります。そのレベルまで達成している言語を増やせるように、これからも頑張らねばと思いました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-22/">Go1.22</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AB%E3%83%BC%E3%83%97%E5%87%A6%E7%90%86/">ループ処理</category>
      
      
      <comments>https://future-architect.github.io/articles/20240206a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.22リリース連載 vet, log/slog, testing/slogtest</title>
      <link>https://future-architect.github.io/articles/20240205a/</link>
      <guid>https://future-architect.github.io/articles/20240205a/</guid>
      <pubDate>Sun, 04 Feb 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240205a/top.png&quot; alt=&quot;&quot; width=&quot;900&quot; height=&quot;601&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240205a/top.png" alt="" width="900" height="601"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG 真野です。<a href="/articles/20240129a/">Go1.22連載</a>の6本目です。</p><p>Go 1.22のアップデートのツーリングのうち <code>Vet</code> と、ライブラリのマイナーアップデートである <code>log/slog</code>, <code>testing/slogtest</code> を取り上げて紹介します。</p><h2 id="アップデートサマリ"><a href="#アップデートサマリ" class="headerlink" title="アップデートサマリ"></a>アップデートサマリ</h2><ul><li><code>Vet</code>でループ変数の変数キャプチャを検知しなくなった <a href="https://github.com/golang/go/issues/63888">#63888</a></li><li><code>Vet</code>で <code>slice1 = append(slice1)</code> の操作を検知するようになりました <a href="https://github.com/golang/go/issues/60448">#63888</a></li><li><code>Vet</code>で <code>defer</code> で <code>time.Since()</code> が呼ぶ操作を検知するようになりました <a href="https://github.com/golang/go/issues/60048">#60448</a></li><li><code>Vet</code>で不正な <code>log/slog</code> なキーと値のペアを検知するようになりました <a href="https://github.com/golang/go/issues/59407">#59407</a></li><li><code>log/slog</code> で <code>SetLogLoggerLevel()</code>が追加されました <a href="https://github.com/golang/go/issues/62418">#62418</a></li><li><code>testing/slogtest</code>で <code>Run()</code> 関数が追加されサブテストの制御がしやすくなりました <a href="https://github.com/golang/go/issues/61758">#61758</a></li></ul><h2 id="Vet-ループ変数の変数キャプチャ-63888"><a href="#Vet-ループ変数の変数キャプチャ-63888" class="headerlink" title="Vet ループ変数の変数キャプチャ #63888"></a>Vet ループ変数の変数キャプチャ <a href="https://github.com/golang/go/issues/63888">#63888</a></h2><p><a href="https://future-architect.github.io/articles/20240129a/#%E3%83%AB%E3%83%BC%E3%83%97%E3%81%AE%E5%A4%89%E5%8C%96-1">Go 1.22リリース連載始まります &amp; ループの変化とTinyGo 0.31</a>で説明されている通り、Goのループ変数は単なる参照だったためgoroutineにループ変数を渡すときにはいくつかのお作法がありました。go vetではありがちなミスを検知してくれていました。</p><figure class="highlight go"><figcaption><span>よくありがちな例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> N = <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; N; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="keyword">defer</span> wg.Done(); fmt.Println(i) &#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go1.21以前ですと、次のように0から4の値を出力するはずが、全く直感と反する挙動です。go vetコマンドでその間違いを検知してくれました。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">&gt;go vet</span><br><span class="line">main.go:13:44: loop variable i captured by func literal</span><br></pre></td></tr></table></figure><p>go1.22以降では、goroutine起動なので順序制御はされないものの（これは想定通りですね）、ループ変数が1つずつgoroutineに渡っていることが分かります。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go run vetloop.go </span><br><span class="line">3</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>正しく動いたので、go vetも検知しないようになりました。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go vet                   </span><br><span class="line">.\main.go:13:44: loop variable i captured by func literal</span><br></pre></td></tr></table></figure><p>…ってあれ、変わらないですね。なんででしょう。試したのは <code>go1.22rc2</code> です。まだ作業中なのかも知れません。後で調査したいと思います。</p><h2 id="Vet-Sliceの意味のないappend-63888"><a href="#Vet-Sliceの意味のないappend-63888" class="headerlink" title="Vet Sliceの意味のないappend #63888"></a>Vet Sliceの意味のないappend <a href="https://github.com/golang/go/issues/60448">#63888</a></h2><p>みなさんは知っていましたでしょうか？ <code>append()</code> が引数を取らなくても文法上は有効なことを。例えば次のようなコードはコンパイルもでき実行できます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">sli1 := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">sli2 := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> sli1 &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">sli2 = <span class="built_in">append</span>(sli2) <span class="comment">// ★ポイント</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sli2) <span class="comment">// []</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本来の想定は <code>sli2 = append(sli2, v)</code> だと思いますが、手違いで上記のようなコードが生まれると、良くて混乱の元、通常はバグの元なので、go vetで検知する事になりました。</p><p>さて、Vetに追加するには<a href="https://github.com/golang/go/blob/go1.21.6/src/cmd/vet/README#L18-L23">ポリシー</a>に沿っているかが重要です。ポリシーは次のようなものです。</p><ul><li>Vetは利用頻度が高く、実行時間が重要</li><li>バグである可能性が高い静的解析であっても、既存リポジトリで該当が少ないのであれば追加しない</li></ul><p>今回のチェック内容ですが、<a href="https://github.com/golang/go/issues/60448#issuecomment-1577418105">約 276,000 の Go プロジェクトのうち650 のプロジェクトで 727 の問題を検知した</a>ようです。これは数が少ないので基準を満たしていない？といったコメントもありました。<a href="https://github.com/golang/go/issues/60448#issuecomment-1582993504">検知した内容でモジュールの利用頻度でソートしたトップ20を提示して</a>、どうするかをディスカッションしています。</p><img src="/images/20240205a/table.png" alt="" width="1200" height="607" loading="lazy"><p>これで流れが決まり、Vetに含まれることになりました。空中戦にならず集計調査を実施しファクトから判断する流れは気持ちが良いですね。</p><p>ちなみにですが、このチェック内容、<a href="https://staticcheck.dev/docs/checks/#SA4021">StaticCheckにはすでに入っている</a> ということで、それを使っている方や、StaticCheckはgolangci-lintのデフォルトリンターでもあるので、golangci-lintをカスタマイズせずに使っている方は、この変更で追加で検知されることは多分無いです。ええええ、残念。</p><p><a href="https://github.com/golang/go/blob/go1.21.6/src/cmd/vet/README#L18-L23">https://github.com/golang/go/blob/go1.21.6/src/cmd/vet/README#L18-L23</a></p><h2 id="Vet-deferで-time-Since-の呼び出し-60048"><a href="#Vet-deferで-time-Since-の呼び出し-60048" class="headerlink" title="Vet deferで time.Since() の呼び出し #60048"></a>Vet deferで time.Since() の呼び出し <a href="https://github.com/golang/go/issues/60048">#60048</a></h2><p><code>time.Since()</code> のユースケースは何かしらの時間を計測するときに用いられます。例えば、処理性能をロギングしたい場合は次のように書きがちです。</p><figure class="highlight go"><figcaption><span>time.Sinceの誤用例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(time.Since(start))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 何かしらの処理の代わりに、1秒スリープする</span></span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを実行すると <code>0s</code> が出力されます。</p><p>正しくは以下です。</p><figure class="highlight diff"><figcaption><span>正しい例</span></figcaption><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line"><span class="deletion">-defer fmt.Println(time.Since(start))</span></span><br><span class="line"><span class="addition">+defer func() &#123; fmt.Println(time.Since(start)) &#125;()</span></span><br><span class="line"></span><br><span class="line">// 何かしらの処理の代わりに、1秒スリープする</span><br><span class="line">time.Sleep(1 * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行すると <code>1.0081377s</code> などと想定通りの結果となります。</p><p><code>defer</code> へ渡された関数の呼び出しは、元の関数がreturnするタイミングですが、その関数に渡した <strong>引数は即時評価</strong>されるためです。 <code>defer\ [^&#123;]*time.Since</code> などで検索すると、<code>GoogleCloudPlatform/prometheus</code>　など大物リポジトリでもヒット、他にも多数該当するリポジトリがあるということで、Vet入りが決まりました。</p><p>検知されると次のようなメッセージが出力されます。分かりやすいですね。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;go vet</span><br><span class="line">main.go:11:20: call to time.Since is not deferred</span><br></pre></td></tr></table></figure><h2 id="Vet-log-slogで不正なキーと値のペア-59407"><a href="#Vet-log-slogで不正なキーと値のペア-59407" class="headerlink" title="Vet log&#x2F;slogで不正なキーと値のペア #59407"></a>Vet log&#x2F;slogで不正なキーと値のペア <a href="https://github.com/golang/go/issues/59407">#59407</a></h2><p>slogのキーと値のペアのうち、以下の2条件で検知してくれるようになりました。</p><ol><li>キーがstringでもslog.Attrでもない</li><li>最後のキーが見つからない（ペアになっていない）</li></ol><p>簡単な例です。この実装では <code>2</code> が本来キー名に当たるのですが、数値型となり不正です。</p><figure class="highlight go"><figcaption><span>1のパターン</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;log/slog&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">slog.Info(<span class="string">&quot;&quot;</span>, <span class="string">&quot;key1&quot;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, slog.String(<span class="string">&quot;attr1&quot;</span>, <span class="string">&quot;b&quot;</span>)) <span class="comment">// key1=1 !BADKEY=2 !BADKEY=3 attr1=b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>run</code> と <code>vet</code> の結果は次の通りです。vetでは<code>2</code> が <code>string</code> か <code>slog.Attr</code> にしろと教えてくれますね。便利。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">2024/01/30 11:16:35 INFO  key1=1 !BADKEY=2 !BADKEY=3 attr1=b</span><br><span class="line"></span><br><span class="line">&gt;go vet</span><br><span class="line">.\main.go:6:27: slog.Info arg <span class="string">&quot;2&quot;</span> should be a string or a slog.Attr (possible missing key or value)</span><br></pre></td></tr></table></figure><p>しかし、<code>...</code> を利用したスプレッド構文で渡した場合は検知できません。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;log/slog&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">args := []any&#123;<span class="string">&quot;key1&quot;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, slog.String(<span class="string">&quot;attr1&quot;</span>, <span class="string">&quot;b&quot;</span>)&#125;</span><br><span class="line">slog.Info(<span class="string">&quot;&quot;</span>, args...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記は次のように、 <code>run</code> では正しく無いレイアウトでありますが、 <code>vet</code> では検知されません。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">2024/01/30 11:23:01 INFO  key1=1 !BADKEY=2 !BADKEY=3 attr1=b</span><br><span class="line"></span><br><span class="line">&gt;go vet</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>この点はプロポーサルでも触れられており、スプレッド構文は一律NGとしてはどうか、という話もありましたが、こちらは誤検知が考えられ、vetのポリシーから外れるとして棄却されていました。方針と対応が一貫しており、有無を言わさない感じがGoぽいと思いました。</p><h2 id="log-slog-SetLogLoggerLevel-の追加-62418"><a href="#log-slog-SetLogLoggerLevel-の追加-62418" class="headerlink" title="log&#x2F;slog SetLogLoggerLevel()の追加 #62418"></a>log&#x2F;slog SetLogLoggerLevel()の追加 <a href="https://github.com/golang/go/issues/62418">#62418</a></h2><p>slog繋がりで <code>log/slog</code> アップデートです。</p><p><code>SetLogLoggerLevel()</code> 関数の新規追加されました。<code>SetLogLoggerLevel()</code> でデフォルトlogパッケージ側のログレベルを変更することができます（現状はINFO固定だと思います）。</p><p>本当にレベルを変えて出力したい場合は、標準の<code>log.Printf()</code>などではなく、<code>slog.Warn()</code> などを使えば良いので、悪くないデフォルト値だと思いますが、プロポーサルでは、デフォルト <code>log</code> パッケージはデフォルトで <code>stderr</code>に出力するため、ログレベルを変更できたほうが便利だろう、という提案です。 </p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetLogLoggerLevel</span><span class="params">(level Level)</span></span> (oldLevel Level)</span><br></pre></td></tr></table></figure><p>この関数ですが、<code>slog.SetDefault()</code> が呼ばれる前と後で、<code>slog.Debug()</code> など、slog経由のロギングにも影響します。業務などでは <code>slog.SetDefault()</code> をおそらくmainのエントリーポイントに近い場所で呼び出すと思うため、通常は細かい挙動の差を意識しなくても良いと思います。繰り返しますが本来の意図としては、標準のlogパッケージのログレベルを変更するためのものです。</p><p>…と言いながらもも <code>slog.SetDefault()</code> を呼び出さず、<br><code>SetLogLoggerLevel()</code> を呼んで、slogと標準のlogパッケージで挙動がどう変わるか試します。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;log/slog&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;========デフォルトのログレベルはINFO=========&quot;</span>)</span><br><span class="line">log.Print(<span class="string">&quot;log debug🐛&quot;</span>)   <span class="comment">// log debug</span></span><br><span class="line">slog.Debug(<span class="string">&quot;slog debug🐛&quot;</span>) <span class="comment">// ★no output</span></span><br><span class="line">slog.Info(<span class="string">&quot;slog info🔍&quot;</span>)   <span class="comment">// INFO info</span></span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">&quot;========ログレベルをDEBUGに変更=========&quot;</span>)</span><br><span class="line">slog.SetLogLoggerLevel(slog.LevelDebug)</span><br><span class="line">log.Print(<span class="string">&quot;log debug🐛&quot;</span>)   <span class="comment">// log debug</span></span><br><span class="line">slog.Debug(<span class="string">&quot;slog debug🐛&quot;</span>) <span class="comment">// ★「DEBUG debug」となり出力されるようになる</span></span><br><span class="line">slog.Info(<span class="string">&quot;slog info🔍&quot;</span>)   <span class="comment">// INFO info</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">2024/01/30 12:53:14 ========デフォルトのログレベルはINFO=========</span><br><span class="line">2024/01/30 12:53:14 log debug🐛</span><br><span class="line">2024/01/30 12:53:14 INFO slog info🔍</span><br><span class="line">2024/01/30 12:53:14 ========ログレベルをDEBUGに変更=========</span><br><span class="line">2024/01/30 12:53:14 log debug🐛</span><br><span class="line">2024/01/30 12:53:14 DEBUG slog debug🐛</span><br><span class="line">2024/01/30 12:53:14 INFO slog info🔍</span><br></pre></td></tr></table></figure><p>動きを見ると、<code>slog.SetLogLoggerLevel(slog.LevelDebug)</code> を呼び出すと、<code>slog.Debug()</code> が出力されるようになったことが分かります。<code>slog.SetDefault()</code>を呼び出さない前提だと、<code>slog</code> パッケージ経由のログ出力を、ログレベルでフィルターするような挙動となります。</p><p>次に、 <code>slog.SetDefault()</code> でlogパッケージで用いるロガーをslog形式に変更した場合に、<code>slog.SetLogLoggerLevel()</code> がどう影響するか試します。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;log/slog&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">slog.SetLogLoggerLevel(slog.LevelError)</span><br><span class="line">slog.SetDefault(slog.New(slog.NewJSONHandler(os.Stdout, <span class="literal">nil</span>)))</span><br><span class="line"></span><br><span class="line">slog.Info(<span class="string">&quot;slog info: go1.22 blog series🔍&quot;</span>)</span><br><span class="line">slog.Warn(<span class="string">&quot;slog warn: go1.22 blog series⚠️&quot;</span>)</span><br><span class="line">slog.Error(<span class="string">&quot;slog error: go1.22 blog series🚨&quot;</span>)</span><br><span class="line"></span><br><span class="line">log.Print(<span class="string">&quot;log print: go1.22 blog series📝&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを実行すると次のように、logパッケージ経由の出力も、ログレベルがERRORで出力されることがわかります。このケースですと、ややこしいですがslog側のERROR未満のログは抑制されません。</p><figure class="highlight plaintext"><figcaption><span>出力結果</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt;go run main2.go</span><br><span class="line">&#123;&quot;time&quot;:&quot;2024-01-30T13:02:46.9325009+09:00&quot;,&quot;level&quot;:&quot;INFO&quot;,&quot;msg&quot;:&quot;slog info: go1.22 blog series🔍&quot;&#125;</span><br><span class="line">&#123;&quot;time&quot;:&quot;2024-01-30T13:02:46.9659968+09:00&quot;,&quot;level&quot;:&quot;WARN&quot;,&quot;msg&quot;:&quot;slog warn: go1.22 blog series⚠️&quot;&#125;</span><br><span class="line">&#123;&quot;time&quot;:&quot;2024-01-30T13:02:46.966573+09:00&quot;,&quot;level&quot;:&quot;ERROR&quot;,&quot;msg&quot;:&quot;slog error: go1.22 blog series🚨&quot;&#125;</span><br><span class="line">&#123;&quot;time&quot;:&quot;2024-01-30T13:02:46.966573+09:00&quot;,&quot;level&quot;:&quot;ERROR&quot;,&quot;msg&quot;:&quot;log print: go1.22 blog series📝&quot;&#125;</span><br></pre></td></tr></table></figure><p>少しややこしいですが、 <code>slog.SetLogLoggerLevel()</code> は <code>slog.SetDefault()</code> の呼び出し有無で、 <code>slog.Debug()</code>や<code>slog.Info()</code> などを制御するモードが変わると思った方が理解しやすいです。</p><p>ちなみに、次のように、 <code>slog.SetLogLoggerLevel()</code> ではERRORレベル、 <code>slog.SetDefault()</code> にわたすHandlerのログレベルにWARNを渡しても、 標準の<code>log</code> パッケージの出力はERRORレベルで出力されます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;log/slog&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">slog.SetLogLoggerLevel(slog.LevelError) <span class="comment">// ERROR</span></span><br><span class="line">slog.SetDefault(slog.New(slog.NewJSONHandler(os.Stdout, &amp;slog.HandlerOptions&#123;</span><br><span class="line">Level: slog.LevelWarn, <span class="comment">//WARN</span></span><br><span class="line">&#125;)))</span><br><span class="line">log.Print(<span class="string">&quot;log print: go1.22 blog series🐙&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>出力結果</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; go run main.go</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;time&quot;</span><span class="punctuation">:</span><span class="string">&quot;2024-01-30T13:20:15.5788942+09:00&quot;</span><span class="punctuation">,</span><span class="attr">&quot;level&quot;</span><span class="punctuation">:</span><span class="string">&quot;ERROR&quot;</span><span class="punctuation">,</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;log print: go1.22 blog series🐙&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>逆に、<code>slog.SetLogLoggerLevel()</code> ではINFOレベルに返ると出力されません。logパッケージのログレベルがINFO、デフォルトロガーのレベルがWARNのため、WARN未満である <code>log.Print()</code> の内容は出力されません。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;log/slog&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"><span class="deletion">-slog.SetLogLoggerLevel(slog.LevelError) // ERROR</span></span><br><span class="line"><span class="addition">+slog.SetLogLoggerLevel(slog.LevelInfo) // INFO</span></span><br><span class="line">slog.SetDefault(slog.New(slog.NewJSONHandler(os.Stdout, &amp;slog.HandlerOptions&#123;</span><br><span class="line">Level: slog.LevelWarn, //WARN</span><br><span class="line">&#125;)))</span><br><span class="line">log.Print(&quot;log print: go1.22 blog series🐙&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>理にかなった挙動に見えますが、それぞれにしたログレベル値によっては、<code>log</code>, <code>slog</code> どちらも併用すると混乱しそうですね。</p><h2 id="testing-slogtest-Run-の追加-61758"><a href="#testing-slogtest-Run-の追加-61758" class="headerlink" title="testing&#x2F;slogtest Run()の追加 #61758"></a>testing&#x2F;slogtest Run()の追加 <a href="https://github.com/golang/go/issues/61758">#61758</a></h2><p>slogは <code>slog.Handler</code> インターフェースを満たすことで、最終的な出力レイアウトを切り替える仕組みがあります。さきほどの <code>slog.NewJSONHandler()</code> はJSONで出力するHandlerでしたよね。調べると<a href="https://github.com/go-slog/awesome-slog">go-slog&#x2F;awesome-slog</a> のようなAwesomeなリポジトリも見つかるほど、多くのHandlerが存在することが分かります。</p><p>Go1.21のslogの登場とともに、Handlerをテストする <code>testing/slogtest</code> というパッケージが追加されましたが、そこにRun()関数が追加されました。</p><p>まずslogtestパッケージってなに？ってことですが、簡単にいうと予め準備されたslogのテストケースを呼び出すテストヘルパーです。どのようなケースかと言いますと、<a href="https://tip.golang.org/src/testing/slogtest/slogtest.go">slogtest.go</a> のcases変数を見ると分かります。</p><figure class="highlight go"><figcaption><span>slogtestのテストケース</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cases = []testCase&#123;</span><br><span class="line">&#123;</span><br><span class="line">name:        <span class="string">&quot;built-ins&quot;</span>,</span><br><span class="line">explanation: withSource(<span class="string">&quot;this test expects slog.TimeKey, slog.LevelKey and slog.MessageKey&quot;</span>),</span><br><span class="line">f: <span class="function"><span class="keyword">func</span><span class="params">(l *slog.Logger)</span></span> &#123;</span><br><span class="line">l.Info(<span class="string">&quot;message&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checks: []check&#123;</span><br><span class="line">hasKey(slog.TimeKey),</span><br><span class="line">hasKey(slog.LevelKey),</span><br><span class="line">hasAttr(slog.MessageKey, <span class="string">&quot;message&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name:        <span class="string">&quot;attrs&quot;</span>,</span><br><span class="line">explanation: withSource(<span class="string">&quot;a Handler should output attributes passed to the logging function&quot;</span>),</span><br><span class="line">f: <span class="function"><span class="keyword">func</span><span class="params">(l *slog.Logger)</span></span> &#123;</span><br><span class="line">l.Info(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;v&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checks: []check&#123;</span><br><span class="line">hasAttr(<span class="string">&quot;k&quot;</span>, <span class="string">&quot;v&quot;</span>),</span><br><span class="line"><span class="comment">//以下略</span></span><br></pre></td></tr></table></figure><p>GoDocの<a href="https://pkg.go.dev/testing/slogtest@master">Example</a>に書いてある使い方としては、テスト対象のslog.Handlerを引数に渡して、 <code>slogtest.TestHandler(h, results)</code> のように呼び出すと、上記であげたテストケースが実行されます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;log/slog&quot;</span></span><br><span class="line"><span class="string">&quot;testing/slogtest&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMySlogHandler</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">h := slog.NewJSONHandler(&amp;buf, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">results := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> []<span class="keyword">map</span>[<span class="type">string</span>]any &#123;</span><br><span class="line"><span class="keyword">var</span> ms []<span class="keyword">map</span>[<span class="type">string</span>]any</span><br><span class="line"><span class="keyword">for</span> _, line := <span class="keyword">range</span> bytes.Split(buf.Bytes(), []<span class="type">byte</span>&#123;<span class="string">&#x27;\n&#x27;</span>&#125;) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(line) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]any</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(line, &amp;m); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err) <span class="comment">// JSONに変換できない場合は失敗扱い</span></span><br><span class="line">&#125;</span><br><span class="line">ms = <span class="built_in">append</span>(ms, m)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ms</span><br><span class="line">&#125;</span><br><span class="line">err := slogtest.TestHandler(h, results)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">&quot;report from testing/slogtest.TestHandler: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この課題ですが、<a href="https://github.com/golang/go/issues/61758#issue-1836738770">プロポーサル</a>に記載されているように、TestSlogHandler という1つのフラットな関数でテストが実行されるため、どこか1ケースが落ちた際に切り分けがしにくいということが上げられていました。そこで<code>go test -run TestSlogHandler/ignore.an.empty.Attr</code> のように各1ケースごとサブテストで動かすことを行う <code>Run()</code> 関数が追加されました。</p><p>slog.Handlerを作る人は要チェックだと思います。作り方は<a href="https://github.com/golang/example/blob/master/slog-handler-guide/README.md">ガイドライン</a>もあるようなので、併せて確認すると良さそうです。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>実はGo1.22の2本目です。プロポーサルやそのやり取りを見るのが楽しくて2枠いただきました。</p><p>Vetは好きで、<a href="/articles/20231005a/">go vet に含まれないスタンドアロンな静的解析ツールたち </a>記事を書いたり、日々golangci-lintのenableとするLinterを増やす活動を行い徳を積んでいます。</p><p>slogは実践導入ができていないですが、これを機会にチャレンジしていきたいです。</p><p>引き続きフューチャー技術ブログをよろしくお願いします。Go言語で開発できる仲間を募集しています。キャリア採用での応募を待っています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Linter/">Linter</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-22/">Go1.22</category>
      
      <category domain="https://future-architect.github.io/tags/slog/">slog</category>
      
      
      <comments>https://future-architect.github.io/articles/20240205a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go1.22 リリース連載 HTTPルーティングの強化</title>
      <link>https://future-architect.github.io/articles/20240202a/</link>
      <guid>https://future-architect.github.io/articles/20240202a/</guid>
      <pubDate>Thu, 01 Feb 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240202a/top.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;661&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240202a/top.png" alt="" width="1000" height="661"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="/articles/20240129a/">Go1.22リリース連載</a> の5本目です。<br>本記事ではGoの標準ライブラリである net&#x2F;http の ServeMux におけるルーティング周りの強化について取り上げます。</p><p>関連する Release Note と Issue はこちらを参照してください。</p><p><a href="https://tip.golang.org/doc/go1.22#enhanced_routing_patterns">https://tip.golang.org/doc/go1.22#enhanced_routing_patterns</a></p><p><a href="https://github.com/golang/go/issues/61410">https://github.com/golang/go/issues/61410</a></p><h2 id="変更点"><a href="#変更点" class="headerlink" title="変更点"></a>変更点</h2><h3 id="HTTPメソッドの指定が可能に"><a href="#HTTPメソッドの指定が可能に" class="headerlink" title="HTTPメソッドの指定が可能に"></a>HTTPメソッドの指定が可能に</h3><p>ServeMux.Handle や ServeMux.HandleFunc を使用してハンドラを登録する際に <code>GET /xxx</code> のようにHTTPメソッド指定して、ハンドラを呼び分けることができるようになりました。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mux := http.NewServeMux()</span><br><span class="line"><span class="comment">// GETを指定したハンドラの登録</span></span><br><span class="line">mux.HandleFunc(<span class="string">&quot;GET /hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>従来はハンドラの中で、自前でHTTPメソッドによって処理を呼び分ける（もしくは <a href="https://github.com/go-chi/chi">chi</a> のようなHTTPメソッドの呼び分けに対応したルーティングライブラリを利用する）必要がありました。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mux := http.NewServeMux()</span><br><span class="line"><span class="comment">// 従来はハンドラを登録する際にHTTPメソッドを指定できない</span></span><br><span class="line">mux.HandleFunc(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.Method == http.MethodGet &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>HTTPメソッドの指定について、3点ほど詳細を補足しておきます。</p><ul><li>メソッド指定のパターン（<code>GET /hello</code>）とメソッドを指定しないパターン（<code>/hello</code>）の両方が登録された場合は、メソッド指定のハンドラが優先されます。</li><li>ハンドラをGETメソッドで登録した場合は、自動的にHEADメソッドでも登録されます。</li><li>存在しない（標準仕様として定められていない）HTTPメソッドを指定した場合でも特に起動時のエラーは発生しません。（ちなみにパスに <code>&quot;HOGE /&quot;</code> を指定した場合 <code>curl -X HOGE ...</code> で呼び出すことが可能です。）</li></ul><h3 id="ワイルドカードの指定が可能に"><a href="#ワイルドカードの指定が可能に" class="headerlink" title="ワイルドカードの指定が可能に"></a>ワイルドカードの指定が可能に</h3><p>HTTPメソッドが指定できるようになっただけでなく、<code>/items/&#123;id&#125;</code> のようにワイルドカードが使用できるようになりました。ワイルドカードにマッチしたパスセグメントの値については Request.PathValue でアクセスできます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mux := http.NewServeMux()</span><br><span class="line"><span class="comment">// GET /items/1234   -&gt; 1234</span></span><br><span class="line"><span class="comment">// GET /items/1234/0 -&gt; 404 page not found</span></span><br><span class="line">mux.HandleFunc(<span class="string">&quot;GET /items/&#123;id&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;%s&quot;</span>, r.PathValue(<span class="string">&quot;id&quot;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>また、<code>/files/&#123;path...&#125;</code> のように <code>...</code> で終わるワイルドカードを指定することで、特定のパスに続く全てのセグメントにマッチさせることができます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mux := http.NewServeMux()</span><br><span class="line"><span class="comment">// GET /files/hoge      -&gt; hoge</span></span><br><span class="line"><span class="comment">// GET /files/hoge/fuga -&gt; hoge/fuga</span></span><br><span class="line">mux.HandleFunc(<span class="string">&quot;GET /files/&#123;path...&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;%s&quot;</span>, r.PathValue(<span class="string">&quot;path&quot;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>従来は <code>/items/&#123;id&#125;</code> のようなパスパラメータに対するワイルドカードマッチを実現するためには、<code>/items/</code> のように末尾スラッシュをつけることで、<code>/items/</code>で始まる全てのリクエストをハンドリングし、ハンドラの中で、自前でパスパラメータをパースする必要がありました。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mux := http.NewServeMux()</span><br><span class="line">mux.HandleFunc(<span class="string">&quot;/items/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// フルパス（URL.Path）から取得したいパスパラメータをパースして取得する必要がある</span></span><br><span class="line">id := r.URL.Path[<span class="built_in">len</span>(<span class="string">&quot;/items/&quot;</span>):]</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;%s&quot;</span>, id)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Go1.22においても末尾にスラッシュを指定した場合の挙動（指定したパスで始まる全てのエンドポイントがハンドリングされる挙動）は従来と変わりませんが、末尾スラッシュで終わるパスのみに完全にマッチさせたい場合は <code>/items/&#123;$&#125;</code> のように <code>&#123;$&#125;</code> を付与することで完全なパターンマッチを実現できます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mux := http.NewServeMux()</span><br><span class="line"><span class="comment">// GET /items/     -&gt; Matched!</span></span><br><span class="line"><span class="comment">// GET /items/1234 -&gt; Matched!</span></span><br><span class="line">mux.HandleFunc(<span class="string">&quot;GET /items/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Matched!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// GET /items/     -&gt; Matched!</span></span><br><span class="line"><span class="comment">// GET /items/1234 -&gt; 404 page not found</span></span><br><span class="line">mux.HandleFunc(<span class="string">&quot;GET /items/&#123;$&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Matched!&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="後方互換性について"><a href="#後方互換性について" class="headerlink" title="後方互換性について"></a>後方互換性について</h2><p><a href="https://pkg.go.dev/net/http@go1.22rc2#hdr-Compatibility">https://pkg.go.dev/net/http@go1.22rc2#hdr-Compatibility</a></p><p>ほとんどのユースケースにおいて問題になることはないと思いますが、パスに <code>&#123;&#125;</code> を使用していたケースなどでは問題が起きるかもしれません。</p><p>例えば、ワイルドカードが存在しなかった従来のバージョンでは下記のように <code>/items/&#123;hoge&#125;</code> と <code>items/&#123;fuga&#125;</code> は別々のパスとして認識され、異なるハンドラを登録し、呼び分けることができました。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mux := http.NewServeMux()</span><br><span class="line">mux.HandleFunc(<span class="string">&quot;/items/&#123;hoge&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// (略)</span></span><br><span class="line">&#125;)</span><br><span class="line">mux.HandleFunc(<span class="string">&quot;/items/&#123;fuga&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// (略)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>しかしながらGo1.22では <code>&#123;&#125;</code> で囲んだ部分はワイルドカードとなるため、<code>/items/&#123;hoge&#125;</code> と <code>items/&#123;fuga&#125;</code> は同一のパターンと認識され、起動時に panic となります。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">panic: pattern &quot;/items/&#123;fuga&#125;&quot; (registered at xxxxx) conflicts with pattern &quot;/items/&#123;hoge&#125;&quot; (registered at xxxxx):</span><br><span class="line">/items/&#123;fuga&#125; matches the same requests as /items/&#123;hoge&#125;</span><br></pre></td></tr></table></figure><p>もしワイルドカードなどの新しい仕様が許容できない場合は、環境変数に <code>GODEBUG=httpmuxgo121=1</code> を設定することで、Go1.22を使いつつ以前の動作のまま動かすことが可能です。</p><h2 id="性能計測"><a href="#性能計測" class="headerlink" title="性能計測"></a>性能計測</h2><p>Go標準のベンチマーク機能を用いて ServeMux とルーティング機能を提供する主要ライブラリである <a href="https://github.com/go-chi/chi">chi</a> と <a href="https://github.com/gorilla/mux">Gorilla</a> の性能を比較してみます。</p><h3 id="シナリオ"><a href="#シナリオ" class="headerlink" title="シナリオ"></a>シナリオ</h3><p>各ライブラリを利用して以下の4パターンのAPIを定義し、それぞれ ServeHTTP をテストする形で性能を計測します。</p><ul><li>パスパラメータが存在しないケース</li><li>パスパラメータが1個存在するケース</li><li>パスパラメータが5個存在するケース</li><li>パスパラメータが10個存在するケース</li></ul><p>ソースコードは<a href="https://github.com/rhumie/go-1.22-feature/blob/main/mux_benchmark_test.go">こちら</a>で公開してますが、各ハンドラ内ではパスパラメータ値の取得まで行っております。</p><h3 id="実行結果"><a href="#実行結果" class="headerlink" title="実行結果"></a>実行結果</h3><p>実行結果に表示されている各ケースの命名については、<code>Benchmark$&#123;ライブラリ名&#125;$&#123;パスパラメータ数&#125;</code> (例. BenchmarkServeMux0)となります。</p><p>結果を見ると、パスパラメータが存在しない or 1個のみの場合は ServeMux &gt; chi &gt; Gorilla となり、パスパラメータが5個、10個と増えた場合は chi &gt; ServeMux &gt; Gorilla となっています。</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go <span class="built_in">test</span> -bench . -benchmem</span></span><br><span class="line">goos: linux</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: github.com/rhumie/go-1.22-feature</span><br><span class="line">cpu: Intel(R) Core(TM) i7-8569U CPU @ 2.80GHz</span><br><span class="line">BenchmarkServeMux0-4            18774772                53.84 ns/op            0 B/op          0 allocs/op</span><br><span class="line">BenchmarkServeMux1-4             7989613               139.1 ns/op            16 B/op          1 allocs/op</span><br><span class="line">BenchmarkServeMux5-4             2139224               562.3 ns/op           240 B/op          4 allocs/op</span><br><span class="line">BenchmarkServeMux10-4            1147263              1054 ns/op             496 B/op          5 allocs/op</span><br><span class="line">BenchmarkChi0-4                  4200387               279.1 ns/op           336 B/op          2 allocs/op</span><br><span class="line">BenchmarkChi1-4                  3440340               328.7 ns/op           336 B/op          2 allocs/op</span><br><span class="line">BenchmarkChi5-4                  2231761               530.8 ns/op           336 B/op          2 allocs/op</span><br><span class="line">BenchmarkChi10-4                 1559656               782.3 ns/op           336 B/op          2 allocs/op</span><br><span class="line">BenchmarkGorilla0-4              1668428               731.7 ns/op           784 B/op          7 allocs/op</span><br><span class="line">BenchmarkGorilla1-4               900196              1251 ns/op            1088 B/op          8 allocs/op</span><br><span class="line">BenchmarkGorilla5-4               373233              2799 ns/op            1152 B/op          8 allocs/op</span><br><span class="line">BenchmarkGorilla10-4              161706              6421 ns/op            1814 B/op          9 allocs/op</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure><p>一般的にAPIのパスパラメータはそこまで多くならない（通常は0 ~ 2個）よう設計されることが多いと思います。<br>ルーティングライブラリを導入せず、標準の ServeMux だけで十分というケースが増えそうですね。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%8A%80%E8%A1%93%E9%81%B8%E5%AE%9A/">技術選定</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-22/">Go1.22</category>
      
      <category domain="https://future-architect.github.io/tags/chi/">chi</category>
      
      
      <comments>https://future-architect.github.io/articles/20240202a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.22 リリース連載 encoding, encoding/json</title>
      <link>https://future-architect.github.io/articles/20240201a/</link>
      <guid>https://future-architect.github.io/articles/20240201a/</guid>
      <pubDate>Wed, 31 Jan 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240201a/top.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;672&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240201a/top.png" alt="" width="1000" height="672"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>CSIGの棚井です。</p><p>本ブログは、<a href="https://tip.golang.org/doc/go1.22">Go 1.22 Release Notes</a> の内容を紹介する「<a href="/articles/20240129a/">フューチャー技術ブログ Go 1.22リリース連載</a>」の4本目の記事です。</p><p>今回は <code>encoding</code> のアップデートを取り上げます。</p><ul><li>encoding&#x2F;base32,base64,hex</li><li>encoding&#x2F;json</li></ul><p>また、本ブログは <a href="https://github.com/golang/go/tree/release-branch.go1.22">release-branch.go1.22</a> での動作をベースとしています。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.22rc2 linux/amd64</span><br></pre></td></tr></table></figure><h2 id="encoding-base32-base64-hex"><a href="#encoding-base32-base64-hex" class="headerlink" title="encoding&#x2F;base32, base64, hex"></a>encoding&#x2F;base32, base64, hex</h2><h3 id="TL-DR-1"><a href="#TL-DR-1" class="headerlink" title="TL;DR(1)"></a>TL;DR(1)</h3><ul><li>encoding&#x2F;base32, encoding&#x2F;64, encoding&#x2F;hex に、byte slice を利用したエンコード関数とデコード関数が追加されまし<ul><li>エンコード関数: AppendEncode</li><li>デコード関数: AppendDecode</li></ul></li><li>base32.Encoding と base64.Encoding の Padding に「マイナスの値」を指定すると、panic を起こすようになりました<ul><li>1.21 以前は「文字化け」していたので、今回の 1.22 で fix されました</li></ul></li></ul><h3 id="アップデート内容-1"><a href="#アップデート内容-1" class="headerlink" title="アップデート内容(1)"></a>アップデート内容(1)</h3><p>Go 1.22 のリリースノート原文には、以下の説明があります。</p><blockquote><p>The new methods AppendEncode and AppendDecode added to each of the Encoding types in the packages encoding&#x2F;base32, encoding&#x2F;base64, and encoding&#x2F;hex simplify encoding and decoding from and to byte slices by taking care of byte slice buffer management.</p></blockquote><p>該当する issue は「<a href="https://github.com/golang/go/issues/53693">encoding: provide append-like variants #53693</a>」です。issue には、以下のような説明があります。</p><ul><li>最近は、Append ライクな API が提供されるようになっている<ul><li><a href="https://github.com/golang/go/issues/47609">unicode&#x2F;utf8: add AppendRune #47609</a></li><li><a href="https://github.com/golang/go/issues/47579">fmt: add Append, Appendf, Appendln #47579</a></li><li><a href="https://github.com/golang/go/issues/50601">encoding&#x2F;binary: add AppendByteOrder #50601</a></li><li><a href="https://github.com/golang/go/issues/51644">encoding&#x2F;binary: add AppendUvarint and AppendVarint #51644</a></li></ul></li><li>というのも、Put ライクな API では、予め「バッファのサイズ」を確認した上で、適切なバッファを用意してから、Put 操作を呼び出す必要があるから</li><li>encoding&#x2F;hex, encoding&#x2F;base32, encoding&#x2F;base64 には、まだ Append ライクな API がないので追加しましょう</li></ul><p>ちなみに、今回追加された Append ライクなエンコード関数とデコード関数の追加は、こちらのコミット（<a href="https://github.com/golang/go/commit/469d9e26eec76341da8ebc4ef9cedb5bdb32ce73">encoding: add AppendEncode and AppendDecode</a>）にて確認できます。</p><p><code>base32</code>, <code>base64</code>, <code>hex</code> のそれぞれに同じ機能の関数が追加されているので、今回は <code>base32</code> での処理内容をメインに、<code>AppendEncode</code> と <code>AppendDecode</code> を見ていきます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AppendEncode appends the base32 encoded src to dst</span></span><br><span class="line"><span class="comment">// and returns the extended buffer.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(enc *Encoding)</span></span> AppendEncode(dst, src []<span class="type">byte</span>) []<span class="type">byte</span> &#123;</span><br><span class="line"> n := enc.EncodedLen(<span class="built_in">len</span>(src))</span><br><span class="line"> dst = slices.Grow(dst, n)</span><br><span class="line"> enc.Encode(dst[<span class="built_in">len</span>(dst):][:n], src)</span><br><span class="line"> <span class="keyword">return</span> dst[:<span class="built_in">len</span>(dst)+n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AppendDecode appends the base32 decoded src to dst</span></span><br><span class="line"><span class="comment">// and returns the extended buffer.</span></span><br><span class="line"><span class="comment">// If the input is malformed, it returns the partially decoded src and an error.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(enc *Encoding)</span></span> AppendDecode(dst, src []<span class="type">byte</span>) ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line"> n := enc.DecodedLen(<span class="built_in">len</span>(src))</span><br><span class="line"> dst = slices.Grow(dst, n)</span><br><span class="line"> n, err := enc.Decode(dst[<span class="built_in">len</span>(dst):][:n], src)</span><br><span class="line"> <span class="keyword">return</span> dst[:<span class="built_in">len</span>(dst)+n], err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="base32-変換について"><a href="#base32-変換について" class="headerlink" title="base32 変換について"></a>base32 変換について</h3><p>Go での <code>base32</code> のエンコード・デコード処理は、もちろんソースコード内に実装されています。</p><ul><li><a href="https://github.com/golang/go/blob/master/src/encoding/base32/base32.go#L111-L187">Encode</a></li><li><a href="https://github.com/golang/go/blob/master/src/encoding/base32/base32.go#L291-L398">Decode</a></li></ul><p>私の場合、実装コードとテストコードを眺めるだけでは、いまいち処理内容がつかめなかったので、base32 のエンコード・デコード処理を「手計算」で実施してみました。</p><p>以下、「Hello」という文字列を、base32 の値にエンコードするまでの流れです。</p><h4 id="①「Hello」を-Ascii-コードに変換する"><a href="#①「Hello」を-Ascii-コードに変換する" class="headerlink" title="①「Hello」を Ascii コードに変換する"></a>①「Hello」を Ascii コードに変換する</h4><p>まず、「Hello」の文字列を、1つずつ <a href="https://ja.wikipedia.org/wiki/ASCII">Asciiコード</a> に変換します。</p><div class="scroll"><table><thead><tr><th></th><th>H</th><th>e</th><th>l</th><th>l</th><th>o</th></tr></thead><tbody><tr><td>10進数</td><td>72</td><td>101</td><td>108</td><td>108</td><td>111</td></tr><tr><td>16進数</td><td>0x48</td><td>0x65</td><td>0x6c</td><td>0x6c</td><td>0x6f</td></tr></tbody></table></div><h4 id="②-8-ビットのバイナリに変換する"><a href="#②-8-ビットのバイナリに変換する" class="headerlink" title="② 8 ビットのバイナリに変換する"></a>② 8 ビットのバイナリに変換する</h4><p>続いて、IP アドレスやサブネットマスクで見慣れた「2進数、バイナリ値」に変換します。</p><div class="scroll"><table><thead><tr><th></th><th>H</th><th>e</th><th>l</th><th>l</th><th>o</th></tr></thead><tbody><tr><td>10進数</td><td>72</td><td>101</td><td>108</td><td>108</td><td>111</td></tr><tr><td>16進数</td><td>0x48</td><td>0x65</td><td>0x6c</td><td>0x6c</td><td>0x6f</td></tr><tr><td>binary</td><td>01001000</td><td>01100101</td><td>01101100</td><td>01101100</td><td>01101111</td></tr></tbody></table></div><h4 id="③-バイナリ値を連結する"><a href="#③-バイナリ値を連結する" class="headerlink" title="③ バイナリ値を連結する"></a>③ バイナリ値を連結する</h4><p>②で変換したバイナリ値を連結すると、8 × 5 &#x3D; 40 ビットのバイナリストリームができあがります。</p><div class="scroll"><table><thead><tr><th></th><th>H</th><th>e</th><th>l</th><th>l</th><th>o</th></tr></thead><tbody><tr><td>binary</td><td>01001000</td><td>01100101</td><td>01101100</td><td>01101100</td><td>01101111</td></tr></tbody></table></div><p>↓</p><p>0100100001100101011011000110110001101111</p><h4 id="④-バイナリストリームを-5ビットごとに区切る"><a href="#④-バイナリストリームを-5ビットごとに区切る" class="headerlink" title="④ バイナリストリームを 5ビットごとに区切る"></a>④ バイナリストリームを 5ビットごとに区切る</h4><p>0と1で連結された文字列を、5つごとに区切ります。</p><p>0100100001100101011011000110110001101111</p><p>↓</p><p>01001, 00001, 10010, 10110, 11000, 11011, 00011, 01111</p><h4 id="⑤-5ビットの値ごとに、10進数へと変換する"><a href="#⑤-5ビットの値ごとに、10進数へと変換する" class="headerlink" title="⑤ 5ビットの値ごとに、10進数へと変換する"></a>⑤ 5ビットの値ごとに、10進数へと変換する</h4><p>2進数の値を10進数に変換します。</p><div class="scroll"><table><thead><tr><th>binary per 5 bits</th><th>01001</th><th>00001</th><th>10010</th><th>10110</th><th>11000</th><th>11011</th><th>00011</th><th>01111</th></tr></thead><tbody><tr><td>10進数</td><td>9</td><td>1</td><td>18</td><td>22</td><td>24</td><td>27</td><td>3</td><td>31</td></tr></tbody></table></div><h4 id="⑥-10進数を-base32-変換する"><a href="#⑥-10進数を-base32-変換する" class="headerlink" title="⑥ 10進数を base32 変換する"></a>⑥ 10進数を base32 変換する</h4><p>10進数の値それぞれを、1つずつ <a href="https://en.wikipedia.org/wiki/Base32">base32</a> で変換（エンコード）します。</p><div class="scroll"><table><thead><tr><th>binary per 5 bits</th><th>01001</th><th>00001</th><th>10010</th><th>10110</th><th>11000</th><th>11011</th><th>00011</th><th>01111</th></tr></thead><tbody><tr><td>10進数</td><td>9</td><td>1</td><td>18</td><td>22</td><td>24</td><td>27</td><td>3</td><td>31</td></tr><tr><td>base32</td><td>J</td><td>B</td><td>S</td><td>W</td><td>Y</td><td>3</td><td>D</td><td>P</td></tr></tbody></table></div><p>エンコードされたそれぞれの文字を結合してできる文字列が、最終的な base32変換された値となります。</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"># 元の文字列 -&gt; base32エンコード後の文字列</span><br><span class="line"></span><br><span class="line">Hello -&gt; JBSWY3DP</span><br></pre></td></tr></table></figure><p>検証用に、以下の Go コードを動かしてみると、base32 変換後の値が一致することも確認できます。</p><figure class="highlight go"><figcaption><span>base32_encode.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;encoding/base32&quot;</span></span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">        <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) &lt; <span class="number">2</span> &#123;</span><br><span class="line">                fmt.Println(<span class="string">&quot;Usage: go run main.go [String to encode]&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        src := []<span class="type">byte</span>(os.Args[<span class="number">1</span>])</span><br><span class="line">        enc := base32.StdEncoding.EncodeToString(src)</span><br><span class="line">        fmt.Println(enc)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go run base32_encode.go <span class="string">&quot;Hello&quot;</span></span><br><span class="line">JBSWY3DP</span><br></pre></td></tr></table></figure><p>また、base32は「5バイト（40ビット）」ごとに分割して、5バイトからの不足分は「<code>=</code>」によりパディングするルールがあります。</p><ul><li>1バイト不足 -&gt; 「<code>=</code>」を1つパディング</li><li>2バイト不足 -&gt; 「<code>=</code>」を3つパディング</li><li>3バイト不足 -&gt; 「<code>=</code>」を4つパディング</li><li>4バイト不足 -&gt; 「<code>=</code>」を6つパディング</li><li>不足なし -&gt; パディングなし</li></ul><p>例えば「Golang」の文字列であれば、  </p><p>8bit × 6文字<br>&#x3D; 48 bit<br>&#x3D; 6 byte<br>&#x3D; 5 byte + 1 byte<br>&#x3D; 5 byte + (5 byte - 4 byte) ← 4バイト不足</p><p>なので、「<code>=</code>」は6つ追加されます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go run base32_encode.go <span class="string">&quot;Golang&quot;</span></span><br><span class="line">I5XWYYLOM4======</span><br></pre></td></tr></table></figure><p>ちなみに、「Hello」の文字列はちょうど5バイトなので、パディングは発生しません。</p><h3 id="AppendEncode-AppendDecode-を動かしてみる"><a href="#AppendEncode-AppendDecode-を動かしてみる" class="headerlink" title="AppendEncode, AppendDecode を動かしてみる"></a>AppendEncode, AppendDecode を動かしてみる</h3><p>それでは、今回追加されたエンコード関数とデコード関数を動かしてみます。</p><figure class="highlight go"><figcaption><span>append_encode_decode.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;encoding/base32&quot;</span></span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        src := []<span class="type">byte</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">        dst := []<span class="type">byte</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        enc := base32.StdEncoding</span><br><span class="line"></span><br><span class="line">        dst = enc.AppendEncode(dst, src)</span><br><span class="line">        fmt.Println(<span class="string">&quot;Encode: &quot;</span>, <span class="type">string</span>(dst))</span><br><span class="line"></span><br><span class="line">        dec := []<span class="type">byte</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        dec, err := enc.AppendDecode(dec, dst)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                fmt.Println(<span class="string">&quot;Error: &quot;</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Decode: &quot;</span>, <span class="type">string</span>(dec))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="comment">// Encode:  JBSWY3DP</span></span><br><span class="line"><span class="comment">// Decode:  Hello</span></span><br></pre></td></tr></table></figure><p>提案元の issue に記載されているように「Append ライク」な動作ということなので、関数の呼び出し側でバッファを意識せずとも「Append」が可能です。  </p><p>以下のサンプルコードは、こちらの「<a href="https://github.com/golang/go/blob/master/src/encoding/base32/base32_test.go#L60-L61">テストコード</a>」をもとに作成しました。</p><figure class="highlight go"><figcaption><span>append_encode.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;encoding/base32&quot;</span></span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        src := []<span class="type">byte</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">        dst := []<span class="type">byte</span>(<span class="string">&quot;lead&quot;</span>)</span><br><span class="line"></span><br><span class="line">        enc := base32.StdEncoding</span><br><span class="line"></span><br><span class="line">        dst = enc.AppendEncode(dst, src)</span><br><span class="line">        fmt.Println(<span class="type">string</span>(dst))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="comment">// leadJBSWY3DP</span></span><br></pre></td></tr></table></figure><h3 id="パディング値に「negative-value」を代入してみる"><a href="#パディング値に「negative-value」を代入してみる" class="headerlink" title="パディング値に「negative value」を代入してみる"></a>パディング値に「negative value」を代入してみる</h3><p>こちらのコミット（<a href="https://github.com/golang/go/commit/243c8c0eec20d981d8e76a3aac82f97cca991571">encoding: require unique alphabet for base32 and base64</a>）で修正された「パディングの受け取る値」について、以前のバージョンでの挙動と比較しながら確認してみます。</p><p>base32 エンコードでは、5バイトごとに分割した際の「不足分」が、「<code>=</code>」によりパディングされるというルールがありました。<br>Go の実装では、パディングの値は「<a href="https://github.com/golang/go/blob/release-branch.go1.22/src/encoding/base32/base32.go#L28-L31">こちら</a>」で定義されています。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line"> StdPadding <span class="type">rune</span> = <span class="string">&#x27;=&#x27;</span> <span class="comment">// Standard padding character</span></span><br><span class="line"> NoPadding  <span class="type">rune</span> = <span class="number">-1</span>  <span class="comment">// No padding</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>パディングの値を「<code>$</code>」に指定すると、base32エンコードの結果が以下のようになります。</p><figure class="highlight go"><figcaption><span>change_padding.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;encoding/base32&quot;</span></span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        src := []<span class="type">byte</span>(<span class="string">&quot;Golang&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> padding <span class="type">rune</span> = <span class="string">&#x27;$&#x27;</span></span><br><span class="line">        enc := base32.StdEncoding.WithPadding(padding).EncodeToString(src)</span><br><span class="line"></span><br><span class="line">        fmt.Println(<span class="type">string</span>(enc))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="comment">// I5XWYYLOM4$$$$$$</span></span><br></pre></td></tr></table></figure><p>リリースノートには以下の記載があります。</p><blockquote><p>The methods base32.Encoding.WithPadding and base64.Encoding.WithPadding now panic if the padding argument is a negative value other than NoPadding.</p></blockquote><p>試しに <code>WithPadding</code> へ <code>-2</code> を代入して動かしてみます。</p><figure class="highlight go"><figcaption><span>invalid_padding.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;encoding/base32&quot;</span></span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        src := []<span class="type">byte</span>(<span class="string">&quot;Golang&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> padding <span class="type">rune</span> = <span class="number">-2</span></span><br><span class="line">        enc := base32.StdEncoding.WithPadding(padding).EncodeToString(src)</span><br><span class="line"></span><br><span class="line">        fmt.Println(<span class="type">string</span>(enc))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go build -trimpath -o invalid_padding invalid_padding.go</span><br><span class="line">$ ./invalid_padding</span><br><span class="line">panic: invalid padding</span><br><span class="line"></span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">encoding/base32.Encoding.WithPadding(...)</span><br><span class="line">        encoding/base32/base32.go:103</span><br><span class="line">main.main()</span><br><span class="line">        ./with_padding.go:12 +0x2a</span><br></pre></td></tr></table></figure><p>Go 1.22 で動かすと、リリースノートの記載通り panic が起きました。</p><p>比較検証として、Go 1.21 で動かしてみると、panic にはならず「パディングの値が文字化けして」表示されました。<br>このバグを踏むケースがあまりイメージできませんが、1.22 で回避されるようになりました。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go run invalid_padding.go</span><br><span class="line">I5XWYYLOM4������</span><br></pre></td></tr></table></figure><h2 id="encoding-json"><a href="#encoding-json" class="headerlink" title="encoding&#x2F;json"></a>encoding&#x2F;json</h2><h3 id="TL-DR-2"><a href="#TL-DR-2" class="headerlink" title="TL;DR(2)"></a>TL;DR(2)</h3><ul><li>これまでのマーシャリングとエンコードでは、<code>&#39;\b&#39;</code> と <code>&#39;\f&#39;</code> はそれぞれ、<code>\u0008</code> と <code>\u000c</code> に変換されていました</li><li>Go 1.22 から、<code>&#39;\b&#39;</code> は <code>\b</code> に、<code>&#39;\f&#39;</code> は <code>\f</code> に変換されるようになりました</li><li>これにより、<code>RFC 8259</code> で定義された5つの制御文字全てへの対応が完了しました</li></ul><h3 id="アップデート内容-2"><a href="#アップデート内容-2" class="headerlink" title="アップデート内容(2)"></a>アップデート内容(2)</h3><p>リリースノートには、1行だけ説明があります。</p><blockquote><p>Marshaling and encoding functionality now escapes ‘\b’ and ‘\f’ characters as \b and \f instead of \u0008 and \u000c.</p></blockquote><p>本アップデートは、こちらの「コミットログ（<a href="https://github.com/golang/go/commit/2763146099384e320e2d1c0fc41b3b3906050652">encoding&#x2F;json: encode \b and \f as ‘\b’ and ‘\f’ in JSON strings</a>）」に詳しい説明があります。</p><p><code>EFC 8259</code> には5つの制御文字があり、</p><ul><li><a href="https://go.dev/cl/4678046">https://go.dev/cl/4678046</a> で <code>\r</code> と <code>n</code> に対応</li><li><a href="https://go.dev/cl/162340043">https://go.dev/cl/162340043</a> で <code>\t</code> に対応</li></ul><p>する中で、残りの <code>\b</code> と <code>\f</code> に対応したのが今回のアップデートのようです。</p><p>また、コミットログには以下の記載があります。</p><blockquote><p>This change is to prepare the path forward for a potential v2 “json” package, which has more consistent encoding of JSON strings.</p></blockquote><p>「v2 json package への準備」とのことなので、今回のリリースにて <a href="https://tip.golang.org/doc/go1.22#math_rand_v2">math&#x2F;rand&#x2F;v2</a> が追加されたこともり、今後のアップデートが楽しみだなと思いました。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>本ブログでは、<code>encoding</code> パッケージへの追加機能、bugfix 内容を紹介しました。<br>今回の連載記事の内容を調べるなかで「アップデートの背景を、issue を通して知る」ことの面白さに気付きました。</p><p>コードを読む中で、以外と小さな単位のコミットがマージされているケースも見つかりましたので、私もできるところから OSSにコミットしていきたいなと思いました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-22/">Go1.22</category>
      
      
      <comments>https://future-architect.github.io/articles/20240201a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.22リリース連載 archive/tar, archive/zip, bufio, io</title>
      <link>https://future-architect.github.io/articles/20240131a/</link>
      <guid>https://future-architect.github.io/articles/20240131a/</guid>
      <pubDate>Tue, 30 Jan 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240131a/top.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;642&quot;&gt;

&lt;p&gt;The Gopher character is based on the Go mascot designed by &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240131a/top.png" alt="" width="1000" height="642"><p>The Gopher character is based on the Go mascot designed by <a href="http://reneefrench.blogspot.com/">Renée French</a></p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG 真野です。<a href="/articles/20240129a/">Go1.22連載</a>の3本目です。</p><p>Go 1.22のマイナーアップデートのうち、ファイルなどの入出力に関連しそうな <code>archive/tar</code> ・<code>archive/zip</code>・<code>bufio</code>・<code>io</code> を取り上げて紹介します。</p><h2 id="アップデートサマリ"><a href="#アップデートサマリ" class="headerlink" title="アップデートサマリ"></a>アップデートサマリ</h2><ul><li>archive&#x2F;zip に <code>Writer.AddFS</code> が追加された <a href="https://go.dev/issue/54898">#54898</a></li><li>archive&#x2F;tar に <code>Writer.AddFS</code> が追加された <a href="https://github.com/golang/go/issues/58000">#58000</a></li><li>bufio の Scannerが、<code>SplitFunc</code> が <code>ErrFinalToken</code> を返すときに即時停するようになった。従来は <code>[]byte&#123;&#125;</code>を返していた <a href="https://github.com/golang/go/issues/56381">#56381</a></li><li>io の <code>SectionReader.Outer()</code> メソッドが追加された <a href="https://github.com/golang/go/issues/61870">#61870</a></li></ul><h2 id="archive-zip-54898"><a href="#archive-zip-54898" class="headerlink" title="archive&#x2F;zip #54898"></a>archive&#x2F;zip <a href="https://go.dev/issue/54898">#54898</a></h2><p>archive&#x2F;zipパッケージに<a href="https://pkg.go.dev/archive/zip@master#Writer.AddFS">Writer.AddFS</a> というメソッドが追加されました。処理としては、FS、つまりファイルシステムを入力として、ルートからディレクトリツリーを辿ってフォルダ構成を維持しながら全ファイルをzip化します。便利ですね。</p><p>これが登場する以前は、<a href="https://stackoverflow.com/questions/37869793/how-do-i-zip-a-directory-containing-sub-directories-or-files-in-golang">Stack Overflow</a>など複数の記事でいくつか実装例を参考にしながら各自が実装していたようで、揺れていたり実装ミスが発生したようです。zip.NewWriter()でzipに追加したいファイルを1つ1つ追加する必要がありました。</p><p>Stack Overflowの例もFileWalkerなどを使って（それなりの量を）実装する必要があります。また、w.Create()の前に書いてあるコメント通り、指定されたパスが相対パスにする必要があったり、Windowsでも動作するようにするためには、一工夫がさらに必要です。</p><figure class="highlight go"><figcaption><span>StackOverflowトップ回答の実装例からコメント追加</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;archive/zip&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;path/filepath&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Zips &quot;./input&quot; into &quot;./output.zip&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    zipFile, err := os.Create(<span class="string">&quot;output.zip&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err) <span class="comment">// サンプルコードなのでpanicしています</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> zipFile.Close()</span><br><span class="line"></span><br><span class="line">    w := zip.NewWriter(zipFile)</span><br><span class="line">    <span class="keyword">defer</span> w.Close()</span><br><span class="line"></span><br><span class="line">    walker := <span class="function"><span class="keyword">func</span><span class="params">(path <span class="type">string</span>, info os.FileInfo, err <span class="type">error</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> info.IsDir() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span> <span class="comment">// ディレクトリは無視してOK（ファイル追加のときに自動で追加されるため）</span></span><br><span class="line">        &#125;</span><br><span class="line">        file, err := os.Open(path)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Ensure that `path` is not absolute; it should not start with &quot;/&quot;.</span></span><br><span class="line">        <span class="comment">// This snippet happens to work because I don&#x27;t use </span></span><br><span class="line">        <span class="comment">// absolute paths, but ensure your real-world code </span></span><br><span class="line">        <span class="comment">// transforms path into a zip-root relative path.</span></span><br><span class="line">        f, err := w.Create(path)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _, err = io.Copy(f, file)</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> err = filepath.Walk(<span class="string">&quot;input&quot;</span>, walker); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err) <span class="comment">// サンプルコードなのでpanicしています</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これが次のように書き換わります。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;archive/zip&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">zipFile, err := os.Create(<span class="string">&quot;output.zip&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err) <span class="comment">// サンプルコードなのでpanicしています</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> zipFile.Close()</span><br><span class="line"></span><br><span class="line">w := zip.NewWriter(zipFile)</span><br><span class="line"><span class="keyword">defer</span> w.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := w.AddFS(os.DirFS(<span class="string">&quot;input&quot;</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>とても楽ですし、直感的ですね！ちなみに、空フォルダはzip化されないようです。</p><p>また、何かしらのファイルを除去したいなどのフィルター処理をしたい場合は、それを行う <code>fs.FS</code> を作成して回避するといった考えのようです。</p><p><code>fs.FS</code> を引数に取るということは、別の応用も効かせられます。<a href="https://github.com/jszwec/s3fs">jszwec&#x2F;s3fs</a> はS3の指定されたバケットに対して<code>fs.FS</code> インターフェースを満たすライブラリです。例えばこれを用いると、S3バケットがそのままzip化されます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;archive/zip&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/aws&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/aws/endpoints&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/aws/session&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/service/s3&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/jszwec/s3fs&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">zipFile, err := os.Create(<span class="string">&quot;output.zip&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> zipFile.Close()</span><br><span class="line"></span><br><span class="line">w := zip.NewWriter(zipFile)</span><br><span class="line"><span class="keyword">defer</span> w.Close()</span><br><span class="line"></span><br><span class="line">fs := s3fs.New(s3.New(session.Must(session.NewSessionWithOptions(session.Options&#123;</span><br><span class="line">Profile:           <span class="string">&quot;YOUR PROFILE&quot;</span>,</span><br><span class="line">SharedConfigState: session.SharedConfigEnable,</span><br><span class="line">Config: aws.Config&#123;</span><br><span class="line">Region: aws.String(endpoints.ApNortheast1RegionID),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;))), <span class="string">&quot;my-example-bucket&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := w.AddFS(fs); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;finish&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ビルディングブロック的に、zip化ができるようになったのは画期的だと思います。</p><p>【注意】上記のコードはS3バケットまるごとダウンロードするので、バケットのデータ量によっては利用を控えたほうが無難です。また、s3fs側の実装とAddFS()の組み合わせが悪いのか、S3に空フォルダオブジェクト（キー名が<code>/</code>で終わるオブエジェクト）が含まれる場合は、上手くzip化されないようです（実行時エラーとなります）。ご注意ください。</p><h2 id="archive-tar-58000"><a href="#archive-tar-58000" class="headerlink" title="archive&#x2F;tar #58000"></a>archive&#x2F;tar <a href="https://github.com/golang/go/issues/58000">#58000</a></h2><p>archive&#x2F;tarパッケージに<a href="https://pkg.go.dev/archive/tar@master#Writer.AddFS">Writer.AddFS</a> というメソッドが追加されました。背景や内容については、<code>archive/zip</code> と全く同じでしたので割愛します。</p><h2 id="bufio-56381"><a href="#bufio-56381" class="headerlink" title="bufio #56381"></a>bufio <a href="https://github.com/golang/go/issues/56381">#56381</a></h2><p>Scannerが、<a href="https://pkg.go.dev/bufio@master#SplitFunc">bufio.SplitFunc</a> を受け取り、 <code>ErrFinalToken</code> を返した場合は停止するようになりました。従来は <code>[]byte</code> を返していました。</p><p>まずScannerには<a href="https://pkg.go.dev/bufio@master#Scanner.Split">Split()</a> という関数があり、<code>Split()</code> は <code>SplitFunc</code> を引数に取ります。</p><figure class="highlight go"><figcaption><span>Scanner</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scanner)</span></span> Split(split SplitFunc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SplitFunc <span class="function"><span class="keyword">func</span><span class="params">(data []<span class="type">byte</span>, atEOF <span class="type">bool</span>)</span></span> (advance <span class="type">int</span>, token []<span class="type">byte</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>例としてIssueにあったScannerの実装を上げます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> input = <span class="string">&quot;1,2,STOP,4,&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// Scannerの宣言</span></span><br><span class="line">scanner := bufio.NewScanner(strings.NewReader(input))</span><br><span class="line"></span><br><span class="line"> <span class="comment">// SplitFunc</span></span><br><span class="line">onComma := <span class="function"><span class="keyword">func</span><span class="params">(data []<span class="type">byte</span>, atEOF <span class="type">bool</span>)</span></span> (advance <span class="type">int</span>, token []<span class="type">byte</span>, err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(data); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> data[i] == <span class="string">&#x27;,&#x27;</span> &#123;</span><br><span class="line"><span class="comment">// if the token is &quot;STOP&quot;, ignore the rest</span></span><br><span class="line"><span class="keyword">if</span> <span class="type">string</span>(data[:i]) == <span class="string">&quot;STOP&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>, <span class="literal">nil</span>, bufio.ErrFinalToken</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>, data[:i], <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, data, bufio.ErrFinalToken</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// ScannerにSplitFuncを設定</span></span><br><span class="line">scanner.Split(onComma)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 読み取り処理（SplitFuncで入力を分割しながら読み取れる）</span></span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Got a token %q\n&quot;</span>, scanner.Text())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := scanner.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintln(os.Stderr, <span class="string">&quot;reading input:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記で、scanner.Scan() ですが、inputは1行ですが、ループはカンマごとにSplitFunc() で分割され、またSTOPという文字列で停止するために2回ループが実行されるのが想定だと思います。</p><p>go1.21以前では、これが3回実行されていましたが、go1.22以降では2回の実行となります。</p><p>go1.21以前:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Got a token &quot;1&quot;</span><br><span class="line">Got a token &quot;2&quot;</span><br><span class="line">Got a token &quot;&quot;</span><br></pre></td></tr></table></figure><p>go1.22以降：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Got a token &quot;1&quot;</span><br><span class="line">Got a token &quot;2&quot;</span><br></pre></td></tr></table></figure><p>変更理由は、このデータを取りたいケースは存在しないだろうということで、どちらかといえばあるべき動きに訂正されたようです。</p><h2 id="io-61870"><a href="#io-61870" class="headerlink" title="io(#61870)"></a>io(<a href="https://github.com/golang/go/issues/61870">#61870</a>)</h2><p><code>io.SectionReader</code> に以下のメソッドが追加されました。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SectionReader)</span></span> Outer() (r ReaderAt, off <span class="type">int64</span>, n <span class="type">int64</span>)</span><br></pre></td></tr></table></figure><p>SectionReader自体はRead(), Seek(), ReadAt() を実装する、入力を指定された オフセット～長さに区切ったReaderです。GoDocのExampleを見ると何をするようなものか一目瞭然です。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := strings.NewReader(<span class="string">&quot;some io.Reader stream to be read\n&quot;</span>)</span><br><span class="line">s := io.NewSectionReader(r, <span class="number">5</span>, <span class="number">17</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err := io.Copy(os.Stdout, s); err != <span class="literal">nil</span> &#123; <span class="comment">// 「io.Reader stream」と出力</span></span><br><span class="line"> log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これに <code>Outer()</code> を追加します。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">r := strings.NewReader(&quot;some io.Reader stream to be read\n&quot;)</span><br><span class="line">s := io.NewSectionReader(r, 5, 17)</span><br><span class="line"></span><br><span class="line">if _, err := io.Copy(os.Stdout, s); err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="addition">+outer, off, n := s.Outer()</span></span><br><span class="line"><span class="addition">+fmt.Println(reflect.TypeOf(outer), off, n) // 「io.Reader stream *strings.Reader 5 17」が出力</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行すると、引数で渡した<code>strings.Reader, offset=5, length=17</code> が取得できます。</p><p>さて、機能はわかったところで、これが追加された理由です。<code>io</code> 側のコメントを追っていくと、<a href="https://github.com/golang/go/issues/61727">net: support zero-copy send on TCPConn when reading from File via SectionReader #61727</a>がモチベーションのようです。</p><p><code>#61727</code> の内容は私が理解しきれた範囲だと以下です（補足、訂正大歓迎です）</p><ul><li><code>net.TCPConn</code> でファイル送信する場合に、ゼロコピーになるのは現在、<code>LimitedReader</code> のみ<ul><li><a href="https://github.com/golang/go/blob/cc85462b3d23193e4861813ea85e254cfe372403/src/net/sendfile_linux.go#L23-L28">https://github.com/golang/go/blob/cc85462b3d23193e4861813ea85e254cfe372403/src/net/sendfile_linux.go#L23-L28</a> の実装を見ると、 handled&#x3D;trueの場合はゼロコピーとなる。</li><li>そうじゃない場合は、netパッケージのgenericReadFromが呼ばれる</li></ul></li><li><code>SectionReader</code> もゼロコピー対応したい</li><li>対応できると、FD（File descriptor）を同時に使用して同じファイルを複数の TCP 接続に送信できるようになり、他のユースケース (範囲リクエストなど) もサポートできる</li><li>今でもそれはできるが、システムコールやメモリ割り当てが発生してしまう（≒genericReadFromが呼ばれる）</li></ul><p>この対応が入れば、GoのHTTPサーバの応答性能がさらに上がりそう、というのがわかります。今後に期待ですね。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>派手さはないですが、こういった細かいアップデートを確認していくと、Stack Overflowなどでコミュニティ側が混乱していそうな点を標準パッケージ側で吸収しGoアプリケーションとしての品質向上に努めたり、性能観点など、確実にGoが良くなっているのが感じられます。</p><p>個人的には、fs.FSをインターフェースにzip化できるのは、便利で応用力が高くて良い設計だな感嘆しました。私が設計者なら、普通にディレクリパスを渡して、あるフォルダごとzip化するようなインターフェースを考えてしまいそうです。</p><p>ライブラリのAPI設計の勉強にもなり学びでした。次のバージョンでもこのブログ連載に参加しようと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-22/">Go1.22</category>
      
      <category domain="https://future-architect.github.io/tags/tar/">tar</category>
      
      <category domain="https://future-architect.github.io/tags/zip/">zip</category>
      
      
      <comments>https://future-architect.github.io/articles/20240131a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.22 リリース連載 slicesのマイナーアップデート</title>
      <link>https://future-architect.github.io/articles/20240130a/</link>
      <guid>https://future-architect.github.io/articles/20240130a/</guid>
      <pubDate>Mon, 29 Jan 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240130a/top.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;675&quot;&gt;

&lt;p&gt;The Gopher character is based on the Go mascot designed by &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240130a/top.png" alt="" width="1000" height="675"><p>The Gopher character is based on the Go mascot designed by <a href="http://reneefrench.blogspot.com/">Renée French</a></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIGの辻です。<a href="/articles/20240129a/">Go1.22連載</a>の2本目です。</p><p>この記事では、マイナーアップデートから slices パッケージを取り上げて紹介します。</p><h1 id="slices-のアップデート内容"><a href="#slices-のアップデート内容" class="headerlink" title="slices のアップデート内容"></a>slices のアップデート内容</h1><ul><li>slice を連結する <code>Concat()</code> API が追加になった(<a href="https://github.com/golang/go/issues/56353">#56353</a>)</li><li>slice の長さを小さくする関数で、破棄された slice の要素をゼロ値とする(<a href="https://github.com/golang/go/issues/63393">#63393</a>)</li><li><code>Insert()</code> で引数が範囲外の場合に、常に panic させる(<a href="https://github.com/golang/go/issues/63913">#63913</a>)</li></ul><h2 id="slice-を連結する-Concat-API-が追加になった-56353"><a href="#slice-を連結する-Concat-API-が追加になった-56353" class="headerlink" title="slice を連結する Concat() API が追加になった(#56353)"></a>slice を連結する <code>Concat()</code> API が追加になった(<a href="https://github.com/golang/go/issues/56353">#56353</a>)</h2><p>以下の API が追加になりました。渡された slice を連結して新しい slice を返却します</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Concat</span>[<span class="title">S</span> ~[]<span class="title">E</span>, <span class="title">E</span> <span class="title">any</span>]<span class="params">(slices ...S)</span></span> S</span><br></pre></td></tr></table></figure><p>コード例です</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">n2 := []<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line">n3 := []<span class="type">int</span>&#123;<span class="number">100</span>, <span class="number">200</span>&#125;</span><br><span class="line">result := slices.Concat(n1, n2, n3)</span><br><span class="line">fmt.Println(result) <span class="comment">// [1 2 10 20 100 200]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみにGo 1.21ですと appned() では複数の slice を連結できず、slice を unpack して以下のように実装する必要がありました。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">n2 := []<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line">n3 := []<span class="type">int</span>&#123;<span class="number">100</span>, <span class="number">200</span>&#125;</span><br><span class="line">result := <span class="built_in">append</span>(n1, <span class="built_in">append</span>(n2, n3...)...)</span><br><span class="line">fmt.Println(result) <span class="comment">// [1 2 10 20 100 200]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="slice-の長さを小さくする関数で、破棄された-slice-の要素をゼロ値とする-63393"><a href="#slice-の長さを小さくする関数で、破棄された-slice-の要素をゼロ値とする-63393" class="headerlink" title="slice の長さを小さくする関数で、破棄された slice の要素をゼロ値とする(#63393)"></a>slice の長さを小さくする関数で、破棄された slice の要素をゼロ値とする(<a href="https://github.com/golang/go/issues/63393">#63393</a>)</h2><p>以下のAPIの機能改善です。slice の長さが小さくなる関数で、破棄すべき slice の要素をゼロ値でクリアするようになっています</p><ul><li>Delete()</li><li>DeleteFunc()</li><li>Compact()</li><li>CompactFunc()</li><li>Replace()</li></ul><p><code>Delete()</code> のコード例です</p><h3 id="Go1-21"><a href="#Go1-21" class="headerlink" title="Go1.21"></a>Go1.21</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">src := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">result := slices.Delete(src, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元の slice では Delete() 後に元々あった 4, 5番目の要素が残っている</span></span><br><span class="line">fmt.Println(src) <span class="comment">// [1 4 5 6 5 6]</span></span><br><span class="line"></span><br><span class="line">fmt.Println(result) <span class="comment">// [1 4 5 6]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go1-22"><a href="#Go1-22" class="headerlink" title="Go1.22"></a>Go1.22</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">src := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">result := slices.Delete(src, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元の slice では Delete() 後に元々あった 4, 5番目の要素はゼロ値でクリアされている</span></span><br><span class="line">fmt.Println(src) <span class="comment">// [1 4 5 6 0 0]</span></span><br><span class="line"></span><br><span class="line">fmt.Println(result) <span class="comment">// [1 4 5 6]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>横道にそれますが <code>Delete()</code> に関して CL#541477 からコードの変更内容を見てみました。<br><a href="https://go-review.googlesource.com/c/go/+/541477">https://go-review.googlesource.com/c/go/+/541477</a></p><p>変更前は要素を除いた値を <code>appned()</code> しているだけですが、変更後は明示的に <code>clear()</code> しています</p><ul><li>変更前</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Delete</span>[<span class="title">S</span> ~[]<span class="title">E</span>, <span class="title">E</span> <span class="title">any</span>]<span class="params">(s S, i, j <span class="type">int</span>)</span></span> S &#123;</span><br><span class="line">_ = s[i:j] <span class="comment">// bounds check</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">append</span>(s[:i], s[j:]...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>変更後</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Delete</span>[<span class="title">S</span> ~[]<span class="title">E</span>, <span class="title">E</span> <span class="title">any</span>]<span class="params">(s S, i, j <span class="type">int</span>)</span></span> S &#123;</span><br><span class="line">_ = s[i:j] <span class="comment">// bounds check</span></span><br><span class="line"></span><br><span class="line">oldlen := <span class="built_in">len</span>(s)</span><br><span class="line">s = <span class="built_in">append</span>(s[:i], s[j:]...)</span><br><span class="line">clear(s[<span class="built_in">len</span>(s):oldlen]) <span class="comment">// zero/nil out the obsolete elements, for GC</span></span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Insert-で引数が範囲外の場合に、常に-panic-させる-63913"><a href="#Insert-で引数が範囲外の場合に、常に-panic-させる-63913" class="headerlink" title="Insert() で引数が範囲外の場合に、常に panic させる(#63913)"></a><code>Insert()</code> で引数が範囲外の場合に、常に panic させる(<a href="https://github.com/golang/go/issues/63913">#63913</a>)</h2><p><code>Insert()</code> APIの機能改善です。<br>Go1.21では範囲外の Index が渡されても、挿入する要素が存在しない場合は panic しませんでした。<br>ただドキュメント上での説明では <code>Insert panics if i is out of range</code> とあり動きにドキュメントと動作に乖離がありました。<br><a href="https://pkg.go.dev/slices@go1.21.0#Insert">https://pkg.go.dev/slices@go1.21.0#Insert</a></p><p>Go1.21では以下のコードが実行できます</p><h3 id="Go1-21-1"><a href="#Go1-21-1" class="headerlink" title="Go1.21"></a>Go1.21</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">s = slices.Insert(s, <span class="number">-1</span>) <span class="comment">// panic は起きない</span></span><br><span class="line"></span><br><span class="line">fmt.Println(s) <span class="comment">// [a b c]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ただし範囲外の Index に値を追加する場合はGo.1.21でも panic になります</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// panic: runtime error: slice bounds out of range [:-1]</span></span><br><span class="line">s = slices.Insert(s, <span class="number">-1</span>, <span class="string">&quot;x&quot;</span>) <span class="comment">// panic が起きる</span></span><br><span class="line">    </span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go1-22-1"><a href="#Go1-22-1" class="headerlink" title="Go1.22"></a>Go1.22</h3><p>Go1.22では範囲外の Index が指定されている場合は要素の有無に関わらず、panic するようになります</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// panic: runtime error: slice bounds out of range [-1:]</span></span><br><span class="line">s = slices.Insert(s, <span class="number">-1</span>) <span class="comment">// panic が起きる</span></span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>slices パッケージの機能追加&#x2F;更新を紹介しました。<br>slices パッケージはGo1.21で標準ライブラリに追加されましたが、ユーザーに見える&#x2F;見えにくい内容含めて、まだまだ進化しそうでこれからも楽しみですね</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-22/">Go1.22</category>
      
      
      <comments>https://future-architect.github.io/articles/20240130a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.22リリース連載始まります &amp; ループの変化とTinyGo 0.31</title>
      <link>https://future-architect.github.io/articles/20240129a/</link>
      <guid>https://future-architect.github.io/articles/20240129a/</guid>
      <pubDate>Sun, 28 Jan 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240129a/top.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;615&quot;&gt;

&lt;p&gt;The Gopher character is based on the Go mascot designed by &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240129a/top.png" alt="" width="1000" height="615"><p>The Gopher character is based on the Go mascot designed by <a href="http://reneefrench.blogspot.com/">Renée French</a></p><p>Future Tech Blog恒例のGoリリース連載が始まります。</p><div class="scroll"><table><thead><tr><th align="center">Date</th><th align="center">Title</th><th align="center">Author</th></tr></thead><tbody><tr><td align="center">1&#x2F;29</td><td align="center">インデックス &amp; ループの変化とtinygo 1.31</td><td align="center">渋川</td></tr><tr><td align="center">1&#x2F;30</td><td align="center"><a href="/articles/20240130a/">slicesのマイナーアップデート</a></td><td align="center">辻大志郎</td></tr><tr><td align="center">1&#x2F;31</td><td align="center"><a href="/articles/20240131a/">archive&#x2F;tar, archive&#x2F;zip, bufio, io</a></td><td align="center">真野隼記</td></tr><tr><td align="center">2&#x2F;1</td><td align="center"><a href="/articles/20240201a/">encoding, encoding&#x2F;json</a></td><td align="center">棚井龍之介</td></tr><tr><td align="center">2&#x2F;2</td><td align="center"><a href="/articles/20240202a/">HTTPルーティング強化</a></td><td align="center">武田大輝</td></tr><tr><td align="center">2&#x2F;5</td><td align="center"><a href="/articles/20240205a/">vet, log&#x2F;slog, testing&#x2F;slogtest</a></td><td align="center">真野隼記</td></tr><tr><td align="center">2&#x2F;6</td><td align="center"><a href="/articles/20240206a/">30種類のプログラミング言語で、ループ処理を書いてみた</a></td><td align="center">棚井龍之介</td></tr><tr><td align="center">2&#x2F;14</td><td align="center"><a href="/articles/20240214a/">net, net&#x2F;http, net&#x2F;netip</a></td><td align="center">真野隼記</td></tr></tbody></table></div><p>Go 1.22のトピックとしては以下のようなものがあります。だいぶ安定版になってきたからか、言語もライブラリもこつぶなものが多くなってきたかな、という印象です。</p><ul><li>ループ変数の挙動の変化</li><li>ツール系<ul><li>GO111MODULE&#x3D;offオプションの廃止</li><li>トレースツールのUI改善</li><li>net&#x2F;httpのServeMuxでパス変数が扱えるように</li><li>go vet強化</li><li>コンパイラでGCが1-3%高速化。PGOで2-14%改善</li><li>リンカーの生成するバイナリがよりデバッガフレンドリーに</li></ul></li><li>ライブラリ<ul><li>math&#x2F;rand&#x2F;v2追加</li><li>database&#x2F;sql.NUllの追加</li><li>net&#x2F;httpのルーターがパスパラメータをとれるように</li><li>その他</li></ul></li></ul><p>個人的に注目しているHTTP&#x2F;3やQUICへの対応は、準標準ライブラリのgolang.org&#x2F;x&#x2F;net&#x2F;internal&#x2F;quicの中で進行中。将来的にはinternalが外れたgolang.org&#x2F;x&#x2F;net&#x2F;quicができて、そののちに標準ライブラリ化される予定のようですが、まだ時間かかりそうですね。</p><p><a href="https://github.com/golang/net/tree/master/internal/quic">https://github.com/golang/net/tree/master/internal/quic</a></p><p><strong>2&#x2F;1追記</strong><br>database&#x2F;sqlのNullの追加は以下のブログエントリーが詳しいです。コミットした本人によるブログ記事なので日本だけでなく海外含めてもこれよりも詳しい説明は存在しないでしょう。<br><a href="https://methane.hatenablog.jp/entry/2024/01/25/sql.Null%5BT%5D_%E3%82%92Go_1.22%E3%81%AB%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F">methaneのブログ: sql.Null[T] をGo 1.22に追加しました</a></p><h1 id="ループの変化-1"><a href="#ループの変化-1" class="headerlink" title="ループの変化(1)"></a>ループの変化(1)</h1><p>Go 1.22は言語の変化としては<a href="https://go.dev/wiki/LoopvarExperiment">ループ変数の扱いが変わったり</a>、固定回数のループが描きやすくなったり、今後のバージョンで入る予定の<a href="https://go.dev/wiki/RangefuncExperiment">range over function</a>という機能が <code>GOEXPERIMENT=rangefunc</code> という環境変数のスイッチで有効になったりします。まずはループ変数の扱いの変化から説明します。</p><p>Goのループ変数は単なる参照でした。で、goroutineの起動には時間がかかります。次のようなコードを1.21までのGoで実行するとgoroutineが起動するころには呼び出し元のループは終わっていました。iは単なる参照で、iの最終の値は9なので、だいたい9が出力されます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">values := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="built_in">len</span>(values))</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> values &#123;</span><br><span class="line">        <span class="comment">// ループごとにgoroutineを起動</span></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">             <span class="comment">// goroutineの起動は単なるforループよりは重い処理なので</span></span><br><span class="line">             <span class="comment">// ここが実行されるころにはもうループは終わっている</span></span><br><span class="line">      fmt.Println(i)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>これに対処するために、わざわざ新しいメモリ領域が確保されるようにする必要がありました。主に2つの方法がありました。しかし、</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ループの中で変数を定義して代入</span></span><br><span class="line"><span class="comment">// この変数はクロージャ（別の関数）から参照されるため、エスケープ解析により</span></span><br><span class="line"><span class="comment">// ヒープ領域にメモリが確保される</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> values &#123;</span><br><span class="line">    i := i</span><br><span class="line">    :</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// goroutine作成時に明示的に渡す</span></span><br><span class="line"><span class="comment">// goroutine側のスタックメモリにコピーされる</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> values &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        :</span><br><span class="line">    &#125;(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go 1.22からは、ループ変数が内部のクロージャなどから参照されたりした場合は<code>i := i</code>を自動で差し込むようになり、呼び出したタイミングでのループ変数の値が中でも利用できます。</p><p>Goでgoroutineをループであつかう場合のよくある落とし穴が塞がれました。</p><h1 id="ループの変化-2"><a href="#ループの変化-2" class="headerlink" title="ループの変化(2)"></a>ループの変化(2)</h1><p>range over intというのが入りました。今まで、10回繰り返したい！みたいなループはC言語からの伝統のループを書く必要がありました。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C言語からの伝統のループ</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これがこのように書けるようなります。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.22からの新しいループ</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> <span class="number">10</span> &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ループの変化-3"><a href="#ループの変化-3" class="headerlink" title="ループの変化(3)"></a>ループの変化(3)</h1><p>Go 1.23以降に入る予定だが、1.22で実験的に実装されているものがrange over functionです。</p><p>古の書のデザインパターンを読んだことがある人もいるかもしれません。その中で「イテレーターパターン」というものがありました。繰り返し処理を自前で実装する方法を表現したものです。Goの標準ライブラリの中にもいくつかあります。イテレーターパターンはその実装方法から、内部と外部と2種類の分類が知られています</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内部イテレータ</span></span><br><span class="line"><span class="comment">// ループ条件の判断などは　Walk()関数が行い、ユーザーはループの中身だけ実装する</span></span><br><span class="line">err := filepath.Walk(rootpath, <span class="function"><span class="keyword">func</span><span class="params">(path <span class="type">string</span>, info os.FileInfo, err <span class="type">error</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// ここでファイルごとの繰り返し処理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部イテレータ</span></span><br><span class="line"><span class="comment">// ループの条件判断はイテレータオブジェクトのNext()メソッドなどで行う</span></span><br><span class="line"><span class="comment">// Next()はboolを返したり、値を返すがEOFのような番兵を返すことで有効なデータがあるか</span></span><br><span class="line"><span class="comment">// 判断する</span></span><br><span class="line">rows := db.Query(<span class="string">&quot;select name, email from users&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    <span class="comment">// ここで行ごとの繰り返し処理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>だいたいの言語にはforループがあり、うまく外部イテレータを言語が定めるプロトコル通りに実装することで言語標準の文法の中で使えるような言語がいくつもあります。C++やJavaScriptのfor ofループや、Pythonの__iter__メソッドなどです。range over functionも、この仲間です。</p><p>使い方とかはすでに詳しくわかりやすく解説してくれているブログ記事があったりするのでそちらを見てもらえればよいかな、と思います。</p><ul><li><a href="https://qiita.com/kidach1/items/afa4c6c29a6eb6be487a">every Tech Blog: Go 1.22で追加予定のrange over intと、GOEXPERIMENT入り予定のrange over funcを触ってみる</a></li></ul><p>これらがリリースされると、そのうち、次のように書けるようになるかと思います。まだExperimentalで変更もありえるので詳しくは説明しません。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// メソッド名は適当です</span></span><br><span class="line"><span class="keyword">for</span> path, info := <span class="keyword">range</span> filepath.WalkOver(rootpath) &#123;</span><br><span class="line">    <span class="comment">// ここでファイルごとの繰り返し処理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// メソッド名は適当です</span></span><br><span class="line"><span class="keyword">for</span> row := <span class="keyword">range</span> db.QueryOver(<span class="string">&quot;select name, email from users&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// ここで行ごとの繰り返し処理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="TinyGo-0-31"><a href="#TinyGo-0-31" class="headerlink" title="TinyGo 0.31"></a>TinyGo 0.31</h1><p>Go本体のリリースしかあまり見てなかったのですが、以下のtakasagoさんの投稿を見て、TinyGoもリリースを予定していることを知りました。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Go 1.22 リリースに合わせて TinyGo 0.31 がリリースされる予定です。 Go 1.22 の encoding/json で新たに必要となった reflect.TypeFor の実装を足せばリリースできそうな感じ。<br>大きな変更として net package が TinyGo 内に用意され大幅に更新されました。このあたりは、別途。</p>&mdash; takasago (@sago35tk) <a href="https://twitter.com/sago35tk/status/1747763656329400788?ref_src=twsrc%5Etfw">January 17, 2024</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>ここ数年のGoのリリースと、それらのバージョンにあわせたTinyGoのバージョンを表にしたものが次の通りです。READMEの説明を見ると、昔は「完全ではない」という表現もあったりしたのですが、おおむね、2-3週間のラグで対応するバージョンが出ているようです。</p><div class="scroll"><table><thead><tr><th align="center"></th><th align="center">リリース日</th><th align="center">対応するTinyGoバージョン(リリース日)</th></tr></thead><tbody><tr><td align="center">Go 1.21</td><td align="center">2023&#x2F;8&#x2F;8</td><td align="center">0.29 (2023&#x2F;8&#x2F;26)</td></tr><tr><td align="center">Go 1.20</td><td align="center">2023&#x2F;2&#x2F;1</td><td align="center">0.27 (2023&#x2F;2&#x2F;12)</td></tr><tr><td align="center">Go 1.19</td><td align="center">2022&#x2F;8&#x2F;2</td><td align="center">0.24 (2022&#x2F;7&#x2F;1、ただしベータ扱い), 0.25? (2022&#x2F;8&#x2F;3)</td></tr><tr><td align="center">Go 1.18</td><td align="center">2022&#x2F;3&#x2F;15</td><td align="center">0.23 (2022&#x2F;4&#x2F;29、ただし全機能ではない)</td></tr><tr><td align="center">Go 1.17</td><td align="center">2021&#x2F;8&#x2F;16</td><td align="center">0.20 (2021&#x2F;9&#x2F;22)</td></tr></tbody></table></div><p>せっかくなので、Go 1.22サポートを目指している開発版のTinyGoをインストールしてみます。手順はTinyGoのウェブサイトの<a href="https://tinygo.org/docs/guides/build/">Build from source</a>のページにあります。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive https://github.com/tinygo-org/tinygo.git</span><br><span class="line">$ <span class="built_in">cd</span> tinygo</span><br><span class="line">$ git checkout dev</span><br><span class="line">$ git submodule update --init</span><br><span class="line">// macなので。他の環境のやり方は上記ウェブサイト参照</span><br><span class="line">$ brew install llvm</span><br><span class="line">$ go install</span><br></pre></td></tr></table></figure><p>さっそく実行してみようとすると、Go 1.22がないぞ、とのエラー。Go 1.22 rc 1をインストールして以下のrange over intのコードを動かしてみます。もう最新の言語サーバーのgoplsはrange over intを正しく解釈してくれるのですね。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> <span class="number">10</span> &#123;</span><br><span class="line">        fmt.Println(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下のように実行すると、Go 1.22のコードをコンパイルして実行できました。小さいバイナリができてWASMでの利用もしやすいし、今後はちょくちょく触ってみようと思います。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tinygo run main.go</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">:</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-22/">Go1.22</category>
      
      
      <comments>https://future-architect.github.io/articles/20240129a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ぼくのかんがえたさいきょうのキャッシュ戦略</title>
      <link>https://future-architect.github.io/articles/20240124a/</link>
      <guid>https://future-architect.github.io/articles/20240124a/</guid>
      <pubDate>Tue, 23 Jan 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240124a/キャッシュ.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;686&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240124a/キャッシュ.png" alt="" width="1200" height="686" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG村瀬です。</p><p>動作が遅いサービスはストレスがたまるので利用したくないですよね。</p><p>例えばネットショッピングする際に商品ページの表示が遅かったり検索してもすぐに結果が表示されないとそのサービスを利用するのをやめてしまいたくなります。</p><p>ページの表示や検索結果を高速化する手段の一つとしてキャッシュがあります。ということで今回はぼくのかんがえたさいきょうのキャッシュ戦略に関して解説します。</p><h1 id="キャッシュとは"><a href="#キャッシュとは" class="headerlink" title="キャッシュとは"></a>キャッシュとは</h1><p>キャッシュとは現金を意味するcashではなく、cacheであり、</p><p><code>一度読み込んだ情報を一時的に保存しておき、次回参照する際に素早く読み込めるようにする仕組み</code></p><p>です。</p><h1 id="なぜキャッシュを使うのか"><a href="#なぜキャッシュを使うのか" class="headerlink" title="なぜキャッシュを使うのか"></a>なぜキャッシュを使うのか</h1><p>大別して3つ理由があります。</p><ol><li>システムにおける処理高速化のため</li><li>RDBなどの負荷軽減のため</li><li>コスト削減のため</li></ol><h2 id="1-システムにおける処理高速化のため"><a href="#1-システムにおける処理高速化のため" class="headerlink" title="1.システムにおける処理高速化のため"></a>1.システムにおける処理高速化のため</h2><p>冒頭でも軽く説明した通り、何らかの処理の遅いサービスを高速化したい場合に、そのサービスを提供するために裏で動作しているシステムを高速化する必要があります。高速化の方法は一度処理した情報をキャッシュに保存し、次回参照する際に素早く読み込めるようにすることであり、書き込みや一度目の計算処理が高速化するわけではないのでそれを意識した上で設計することになります。</p><h2 id="2-RDBなどの負荷軽減のため"><a href="#2-RDBなどの負荷軽減のため" class="headerlink" title="2.RDBなどの負荷軽減のため"></a>2.RDBなどの負荷軽減のため</h2><p>よくあるシステムの構成としてバックエンドではRDBが利用されていることでしょう。RDBを利用していないシステムにおいては何か負荷の高い処理をするサーバと読み替えてください。システム全体においては、大量データを保持し、計算処理を実行するRDBの負荷が大きくなるかと思います。</p><p>負荷が大きくなると処理が遅延し、許容時間内にレスポンスが返却できなくなったり、ハングアップしてしまうことでしょう。システムの心臓部とも言えるRDBがこのような状態になってしまうとサービスの提供が困難になります。</p><p>サービスを提供し続ける為、計算済みの結果は一定時間キャッシュに保持し、計算済みの結果がある場合はRDBにアクセスすることなくキャッシュから結果を取得することでRDBに掛かる負荷を軽減することが可能です。</p><h2 id="3-コスト削減"><a href="#3-コスト削減" class="headerlink" title="3.コスト削減"></a>3.コスト削減</h2><p>クラウドサービスを利用している場合、コンピューティングリソースを利用した分だけコストが掛かる料金体系になっているかと思います。</p><p>その場合にコストを低減するためにはコンピューティングに要する時間を短縮するのが効果的です。RDBの処理時間が長くクライアント側が待たされるようであれば、キャッシュにアクセスし短時間でレスポンスを受けられるようにすることでコスト削減が期待できます。</p><p>クラウドサービスを利用しキャッシュを実現するのであればそのキャッシュ自体のコストも考慮すべきではありますが、中・大規模システムであればまずキャッシュ自体のコストよりも削減できるコストやメリットの方が大きいことでしょう。</p><h1 id="キャッシュするデータ"><a href="#キャッシュするデータ" class="headerlink" title="キャッシュするデータ"></a>キャッシュするデータ</h1><p>キャッシュするデータに相応しいのはどのようなものでしょうか？</p><p>キャッシュの特性と利用用途を踏まえると以下のようなものをキャッシュするのが良いでしょう。</p><ol><li>変更がリアルタイムに必要ではないもの</li><li>計算処理に時間を要するもの</li><li>変更が発生しないまたは滅多に発生しないもの</li><li>参照頻度が高いもの</li></ol><h1 id="どこにキャッシュを配置すべきか"><a href="#どこにキャッシュを配置すべきか" class="headerlink" title="どこにキャッシュを配置すべきか"></a>どこにキャッシュを配置すべきか</h1><p>よくある構成を元にどこにキャッシュを配置すべきかを検討していきます。</p><img src="/images/20240124a/キャッシュ_構成.png" alt="キャッシュ_構成.png" width="867" height="165" loading="lazy"><h2 id="クライアント"><a href="#クライアント" class="headerlink" title="クライアント"></a>クライアント</h2><img src="/images/20240124a/キャッシュ_構成_クライアント.png" alt="キャッシュ_構成_クライアント.png" width="860" height="151" loading="lazy"><p>速度を最優先に考えた場合、クライアントにキャッシュを設けるのが最も効果的です。</p><p>クライアントにキャッシュがある場合にはネットワーク通信が不要のため、高速に結果を取り出すことが可能です。クライアントが何で構成されているかにもよりますが、Webブラウザベースの構成でない限り、キャッシュ機能を何らかの形で用意する必要があり、キャッシュを用意しない場合と比較すると開発コストは増加します。</p><p>データをどれぐらいの期間保持するかのルールはWeb APIにてデータを取得する場合はHTTPにおけるCache-Controlに倣った保持期間するのがデファクトスタンダードかと思います。</p><p>常にキャッシュを表示するのではなく、ユーザによる簡単な操作(※)でクライアントのキャッシュを破棄し、最新情報を取得できるようにすると良いでしょう。</p><p>※スマホアプリであれば、更新ボタンのタップやリストを下にスワイプするなど</p><h2 id="Web-APIバックエンド"><a href="#Web-APIバックエンド" class="headerlink" title="Web APIバックエンド"></a>Web APIバックエンド</h2><p>Web APIバックエンドにキャッシュを配置する場合、サーバの内、外の2パターンあるので分けて説明します。</p><h3 id="Web-APIサーバ内"><a href="#Web-APIサーバ内" class="headerlink" title="Web APIサーバ内"></a>Web APIサーバ内</h3><img src="/images/20240124a/キャッシュ_構成_webapi1.png" alt="キャッシュ_構成_webapi1.png" width="847" height="153" loading="lazy"><p>代表的なサービスとしてはMemcachedやRedisがあります。</p><p>Web APIサーバと同一のサーバ内に設けるパターン。Web APIサーバからキャッシュまでのアクセスにおいてネットワークを介さないため高速にキャッシュから結果を取り出すことが可能です。</p><p>しかしながら一方で同一サーバ内に設けるため、Web APIサーバが複数存在する場合にキャッシュを共有できません。Web APIサーバが1台の構成であれば効率よく動作しますが、可用性を考慮すると進んで採用したい構成ではありません。またナウでヤングなコンテナを利用したい場合、コンテナの原則である1コンテナ1プロセスから逸脱するためおすすめできません。</p><h3 id="Web-APIサーバ外"><a href="#Web-APIサーバ外" class="headerlink" title="Web APIサーバ外"></a>Web APIサーバ外</h3><img src="/images/20240124a/キャッシュ_構成_webapi2.png" alt="キャッシュ_構成_webapi2.png" width="850" height="205" loading="lazy"><p>Web APIサーバ外にキャッシュを設ける王道パターン。Web APIが複数台ある場合にキャッシュを共用できます。</p><p>他のキャッシュ配置と比較してキャッシュのコントロールが容易であり、例えばキーを指定した一部データの削除が行えます。</p><p>システムにキャッシュを配置するとなった際に一番最初に思いつくのがこのパターンかと思います。MemcachedやRedisが利用でき、Web APIの開発チームがキャッシュをコントロールしたい場合に最適です。</p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><img src="/images/20240124a/キャッシュ_構成_rdb.png" alt="キャッシュ_構成_rdb.png" width="856" height="153" loading="lazy"><p>大抵のRDBではキャッシュを内蔵しています。これにより初回のアクセスよりも二回目以降のアクセスの方がレスポンスを素早く返すことがあります。キャッシュのコントロールはRDB外からはできないため、キャッシュ設定はONにするけれど過信はしないようにしましょう。</p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><img src="/images/20240124a/キャッシュ_構成_CDN.png" alt="キャッシュ_構成_CDN.png" width="851" height="155" loading="lazy"><p>クライアントでキャッシュを持たない場合に最も近い場所でキャッシュを提供できます。</p><p>サーバサイドとクライアントサイドを別のチームが開発する場合、サーバサイドのチームからするとクライアントサイドでキャッシュしてくれる保証はありません。クライアントサイドで適切なキャッシュがなされず、サーバサイドへのアクセス量が多くなることを想定するとCDNでキャッシュするのが有効です。</p><p>CDNの後方に位置するサーバサイドをクラウドサービスを利用して構築している場合、クラウドサービスに対するアクセスを低減でき、その結果クラウドサービスのコンピューティングリソースの利用量を低減できます。利用量が低減されるということはクラウドサービスのコストが低減できます。</p><p>一方でキャッシュキーに関しては慎重に取り扱う必要があり、Web APIにおいてどのキーの値が同一であれば同一のキャッシュキーとするか詳細に設計する必要があります。CDNのキャッシュは細かなコントロールが出来ず、一部のデータを削除できないのが大半かと思います。</p><h2 id="で結局どこに配置すれば良いの？"><a href="#で結局どこに配置すれば良いの？" class="headerlink" title="で結局どこに配置すれば良いの？"></a>で結局どこに配置すれば良いの？</h2><p>複数の選択肢の中から一つのみ選択する必要はなく、適切な箇所を必要な分だけ選択するのが良いと思います。選択の際にはサービスの特性、費用対効果、開発者が調達できるかなど複数の観点で検討が必要になります。</p><p>複数個所にキャッシュを配置した場合、エンドユーザからするとストレスなく利用できるため嬉しい一方で運用者は大変になるかと思います。万能なものはありません。トレードオフを考慮し決定しましょう。</p><h1 id="キャッシュアルゴリズムの選択"><a href="#キャッシュアルゴリズムの選択" class="headerlink" title="キャッシュアルゴリズムの選択"></a>キャッシュアルゴリズムの選択</h1><p>キャッシュは保持期間を指定するため、保持期間を過ぎると削除されていきますが、保持期間内であってもキャッシュ可能なサイズを超えた場合はキャッシュアルゴリズムに従い、何れかのデータが削除されます。</p><p>代表的なキャッシュアルゴリズムは以下の通りです。</p><ul><li>FIFO（First-In, First-Out）: 最初にキャッシュされたデータを最初に削除する。</li><li>LFU（Least Frequently Used）: 最も使用頻度が低いデータを削除する。</li><li>LIFO（Last-In, First-Out）: 最後にキャッシュされたデータを最初に削除する。</li><li>LRU（Least Recently Used）: 最も長い間、使用されていないデータを削除する。</li></ul><p>システムの特性を踏まえて選択すべきですが、一般的にはLFU（Least Frequently Used）かLRU（Least Recently Used）を選択するのが良いと思います。</p><p>コストとの兼ね合い次第ですが必要なデータが全て保存可能なサイズのキャッシュを用意できるのがキャッシュヒット率の観点では理想です。</p><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>キャッシュを利用する上で注意すべき点があります。</p><ul><li>何らかの理由でキャッシュを全て削除した際にRDBに対する負荷が集中することになります。サービス停止にならないよう流量制御するなどの対策が必要になるかもしれません。</li><li>初回アクセス(正確に言うとキャッシュが作成されるまでの間に実行されたアクセス)はキャッシュにデータがないので遅くなります。最初にアクセスしたユーザはストレスに感じるかもしれません。ユーザにストレスを与えないようにキャッシュにデータを用意する仕組みが有効かもしれません。</li><li>変更が発生しないと思われるデータでも無期限にキャッシュするのはおすすめしません。設計当初は変更が発生しないと考えられるものであっても後々変更が発生したり、誤ってキャッシュしてしまった際に削除が困難にならないよう保持期間を設けましょう。最長でも1日とかで様子を見るところからスタートするのがよろしいかと思います。</li><li>個人情報のキャッシュは慎重に扱う必要があります。ユーザ自身の名前や電話番号などの情報はRDBから取得するにしても計算処理時間は短いためキャッシュしなくても良いでしょう。一方でネットショッピングであれば購入履歴など計算処理に時間を要するものがありキャッシュしたくなります。CDNの仕様理解不足などにより誤って他者に閲覧可能な状態になると個人情報漏洩インシデントになりかねません。キャッシュするのであればクライアントにキャッシュすることを優先的に検討したいところです。とはいえCDNの仕様理解不足によりCDNに意図せずキャッシュされてしまったり、Web APIの不具合により他者の情報を誤って返却してしまうことがありえます。システム全体で複数人で同時期にアクセスした際に非機能要件面だけではなく機能要件面でのテストを十分実施することで個人情報漏洩リスクを低減できることでしょう。</li></ul><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>性能要件が緩いサービスであればキャッシュを設けない方がシンプルな設計となり、開発や保守も楽でしょう。しかしながら高い性能要件が求められるサービスになると話が別です。</p><p>Amazonの調査によると、サイト表示が0.1秒遅くなると、売り上げが1%減少し、1秒高速化すると10%の売上が向上するとのことなのでクライアントへ如何に早く表示するか・レスポンスを返すかが重要となり、その対応の一つとしてキャッシュが必要となります。</p><p>冒頭で、キャッシュとは現金を意味するcashではなく、cacheであると言う説明をしましたが、cacheを利用することでcashを増やすことが可能です。この記事を参考にしていただき、世の中から遅いサービスが減り、ユーザのストレスが低減できれば幸いです。</p><p>以上、ぼくのかんがえたさいきょうのキャッシュ戦略でした。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      <category domain="https://future-architect.github.io/tags/Redis/">Redis</category>
      
      <category domain="https://future-architect.github.io/tags/CDN/">CDN</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5/">キャッシュ</category>
      
      <category domain="https://future-architect.github.io/tags/memcached/">memcached</category>
      
      
      <comments>https://future-architect.github.io/articles/20240124a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>人工知能学会ビジネス・インフォマティクス研究会で登壇しました。</title>
      <link>https://future-architect.github.io/articles/20240122a/</link>
      <guid>https://future-architect.github.io/articles/20240122a/</guid>
      <pubDate>Sun, 21 Jan 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>2023年11月にフューチャーにキャリア入社した引網康暁です。前職の総合商社で物流ビジネスに従事した後、現在は、フューチャーアーキテクトの物流サービス事業部で、物流DXのコンサルティングやビジネス・ディベロップメントをしています。</p><p>現在51歳。人生100年時代のリスキリングとして、働きながら<a href="https://ai.rikkyo.ac.jp/index.html">大学院</a>で人工知能の研究をしている私が、2023年9月に開催された<a href="http://sig-bi.jp/">人工知能学会ビジネス・インフォマティクス研究会</a>に登壇して、研究発表をしましたので、その体験記をご紹介します！</p><img src="/images/20240122a/図1.png" alt="図1.png" width="821" height="555" loading="lazy"><h1 id="人工知能学会ビジネス・インフォマティクス研究会"><a href="#人工知能学会ビジネス・インフォマティクス研究会" class="headerlink" title="人工知能学会ビジネス・インフォマティクス研究会"></a>人工知能学会ビジネス・インフォマティクス研究会</h1><p>人工知能学会ビジネス・インフォマティクス研究会とは、経営に関連する知能情報技術を表す<strong>ビジネス・インフォマティクス</strong>をキーワードとして、経営に関わる基礎から応用までの幅広い研究課題を対象に、経営分野において人工知能で取り組むべき課題を発掘する課題発掘型研究を目的とした、人工知能学会が開催する研究会です。</p><p>2023年9月23日と24日の2日間にわたり、慶應義塾大学三田キャンパスとオンラインのハイブリッド形式で開催され、16件の研究が発表されました。ビジネス・インフォマティクスを主題としている研究会であるため、社会的な課題や経営戦略への人工知能の応用に関する研究が目立っていた印象があります。また、9月という季節柄、研究の中間報告をここで発表し、多くの知見をお持ちの聴講者からのフィードバックを取り入れて修士論文に仕上げていく、という発表者も多くいらっしゃいました。</p><h1 id="私の発表内容"><a href="#私の発表内容" class="headerlink" title="私の発表内容"></a>私の発表内容</h1><p><strong>物流の2024年問題</strong>という言葉をお聞きになられたことはありますか？2024年4月から、トラックドライバーの時間外労働の960時間上限規制等が適用され、労働時間が短くなることで輸送能力の不足が懸念される社会的な問題です。実は、商品を出荷する側の倉庫でも、トラックドライバーをお待たせすることができませんので、出荷業務の効率化のため、<strong>倉庫ロボット</strong>の導入が始まっています。</p><p><a href="https://www.gov-online.go.jp/pr/media/tv/miraino/movie/20230920.html">https://www.gov-online.go.jp/pr/media/tv/miraino/movie/20230920.html</a></p><p>倉庫ロボットは、倉庫で働いてくださるヒトとの協調システムであり、作業員の方々には身体の屈伸や段取り替えなど、さまざまな付帯作業が発生します。人手不足が待ったなしの課題である中、作業員の方々の疲労の軽減も考慮した業務の効率化が求められます。そこで、私は「倉庫ロボットによる稼働時間の最小化」と「作業員による作業時間の最小化」で構成される<strong>多目的最適化問題</strong>を<strong>イジングモデル</strong>を用いて求解することで、出荷業務の効率化につながる、<strong>最適な商品配置計画</strong>を明らかにしました。</p><img src="/images/20240122a/image.png" alt="image.png" width="480" height="230" loading="lazy">・最適化された商品配置計画を可視化した一例<p>当日は緊張してしまい、うまく発表できませんでしたが、聴講者の皆さまからたくさんのフィードバックを頂き、とても励みとなる機会になりました。研究の内容もさることながら、学会発表を機に、論文をまとめたり、プレゼンテーション資料を作成したりすることで、自分の考えが整理できたことが貴重な経験となりました。</p><h1 id="イジングモデルとは"><a href="#イジングモデルとは" class="headerlink" title="イジングモデルとは"></a>イジングモデルとは</h1><p>私が研究で使用した<strong>イジングモデル</strong>についても触れておきたいと思います。イジングモデルとは、粒子の量子力学的な内部自由度の一つであるスピンが格子状に整列し、定められた向き及びその反対向きの2つの向きだけをとり、最近接のスピン同士だけに相互作用があるとするモデルです[1]。</p><p>一般的なイジングモデルは、以下の式で示されるエネルギー関数で表されます。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.112ex;" xmlns="http://www.w3.org/2000/svg" width="35.317ex" height="5.261ex" role="img" focusable="false" viewBox="0 -950 15610 2325.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munder" transform="translate(2221.6,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(179.3,-1123.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mi" transform="translate(1123,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="msub" transform="translate(3832.2,0)"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="TeXAtom" transform="translate(588,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="msub" transform="translate(5005.5,0)"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="TeXAtom" transform="translate(604,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="msub" transform="translate(5903.5,0)"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="TeXAtom" transform="translate(604,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7071,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="munder" transform="translate(8071.2,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(600,-1084.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="msub" transform="translate(9681.9,0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(609,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="msub" transform="translate(10584.8,0)"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="TeXAtom" transform="translate(604,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(11649.5,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="mo" transform="translate(1237.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2293.6,0)"><path data-c="B1" d="M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z"></path></g><g data-mml-node="mn" transform="translate(3071.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3571.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.032ex" height="1.332ex" role="img" focusable="false" viewBox="0 -431 898 588.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="TeXAtom" transform="translate(604,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container>は入力変数、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="2.654ex" height="2.211ex" role="img" focusable="false" viewBox="0 -683 1173.3 977.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="TeXAtom" transform="translate(588,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container>は二体の相互作用パラメータ、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.043ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 903 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(609,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container>は一体のパラメータ（磁場）で、これらのパラメータをイジングマシンに入力することで、エネルギー関数が最小となる組合せ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.292ex" height="1ex" role="img" focusable="false" viewBox="0 -431 571 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g></g></g></svg></mjx-container>の近似解が出力される仕組みです[2]。</p><p>イジングマシンの一種であり、量子焼きなまし法の原理に基づいて動くマシンを<strong>量子アニーリングマシン</strong>と言い、カナダの<a href="https://www.dwavesys.com/">D-Wave</a>が有名です。量子アニーリングマシンやイジングマシンは、世の中に数多く存在する、さまざまな組合せ最適化問題を解くための特化型マシンであり、物流の最適化にも力を発揮していくと期待されています。</p><p><a href="https://www.dwavesys.com/">https://www.dwavesys.com/</a></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>いかがでしたか？今回のブログでは、人工知能関連の研究会で登壇した経験を書いてみました。こんな形でブログで発表するのであれば、もっとピシッとした服装の方が良かったかなとすこし反省しています。次回は5月に開催される人工知能学会全国大会での発表を目指して、研究を続けていきます！</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1]松下貢、物理学講座 統計力学入門、裳華房、2019<br>[2]株式会社Fixstars Amplifyホームページ</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%89%A9%E6%B5%81/">物流</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AD%E3%83%9C%E3%83%83%E3%83%88/">ロボット</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%82%B8%E3%83%B3%E3%82%B0%E3%83%A2%E3%83%87%E3%83%AB/">イジングモデル</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%9A%E7%9B%AE%E7%9A%84%E6%9C%80%E9%81%A9%E5%8C%96/">多目的最適化</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD%E5%AD%A6%E4%BC%9A/">人工知能学会</category>
      
      
      <comments>https://future-architect.github.io/articles/20240122a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>リリース直前にライブラリのインストールエラーが発生した際にどのように対応したか</title>
      <link>https://future-architect.github.io/articles/20240119a/</link>
      <guid>https://future-architect.github.io/articles/20240119a/</guid>
      <pubDate>Thu, 18 Jan 2024 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20240119a/d6788854-dfac-4797-979e-3f40531a1eee.jpeg&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;1024&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;(DALL-E3</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20240119a/d6788854-dfac-4797-979e-3f40531a1eee.jpeg" alt="" width="1024" height="1024" loading="lazy"><p>(DALL-E3 で生成)</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>先日、本番リリースを控えたシステムで OSS ライブラリのインストール起因のエラーが発生しました。<br>実際に起きた事象と、どのように検討して対応したのかを残すべく、ポストモーテムの形式で当記事を書きました。</p><h2 id="ポストモーテム"><a href="#ポストモーテム" class="headerlink" title="ポストモーテム"></a>ポストモーテム</h2><h3 id="発生日"><a href="#発生日" class="headerlink" title="発生日"></a>発生日</h3><p>2023&#x2F;12&#x2F;30</p><h3 id="サマリ"><a href="#サマリ" class="headerlink" title="サマリ"></a>サマリ</h3><p>AWS Glue (PythonShell)を起動する際に、<a href="https://pypi.org/project/awswrangler/">awswrangler</a> ライブラリをインストールする工程で、依存関係にある <a href="https://pypi.org/project/lxml/">lxml</a> のインストールに失敗しました。その結果、Glue ジョブの起動に失敗しエラーとなりました。</p><h4 id="バージョン"><a href="#バージョン" class="headerlink" title="バージョン"></a>バージョン</h4><div class="scroll"><table><thead><tr><th>システム&#x2F;ライブラリ</th><th>バージョン</th></tr></thead><tbody><tr><td>AWS Glue PythonShell</td><td>Glue version&#x3D;3.0 <br>Python version&#x3D;Python3.9<br>DPU&#x3D;0.0625</td></tr><tr><td><a href="https://pypi.org/project/awswrangler/">awswrangler</a></td><td>1.5.2</td></tr><tr><td><a href="https://pypi.org/project/lxml/">lxml</a></td><td>5.0.0</td></tr></tbody></table></div><h3 id="インパクト"><a href="#インパクト" class="headerlink" title="インパクト"></a>インパクト</h3><p>AWS Glue PythonShell の Libraries 設定に、  </p><p>wheel 形式で <a href="https://pypi.org/project/awswrangler/">awswrangler</a>  を指定<br>or<br>wheel形式で <a href="https://pypi.org/project/awswrangler/">awswrangler</a> に依存しているライブラリを指定</p><p>している Glue ジョブが全て実行エラーとなりました。</p><h3 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h3><p><a href="https://pypi.org/project/awswrangler/">awswrangler</a> が依存している、<a href="https://pypi.org/project/lxml/">lxml</a> ライブラリの最新バージョン <code>5.0.0</code> のインストール時に、以下 2種類のエラーが発生しました。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wheel パッケージで lxml のインストールに失敗</span></span><br><span class="line"></span><br><span class="line">Using legacy <span class="string">&#x27;setup.py install&#x27;</span> <span class="keyword">for</span> lxml, since package <span class="string">&#x27;wheel&#x27;</span> is not installed.</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setup.py でインストール時に、</span></span><br><span class="line"><span class="comment"># gcc で src/lxml/etree.c をコンパイルする際に、out of memory エラーが発生</span></span><br><span class="line"></span><br><span class="line">× Running setup.py install <span class="keyword">for</span> lxml did not run successfully.  </span><br><span class="line">│ <span class="built_in">exit</span> code: 1  </span><br><span class="line">╰─&gt; [112 lines of output]</span><br><span class="line">(省略)</span><br><span class="line">    gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -DCYTHON_CLINE_IN_TRACEBACK=0 -I/usr/include/libxml2 -Isrc -Isrc/lxml/includes -I/.pyenv/versions/python39_loaded/include -I/.pyenv/versions/3.9.10/include/python3.9 -c src/lxml/etree.c -o build/temp.linux-x86_64-3.9/src/lxml/etree.o -w  </span><br><span class="line">      </span><br><span class="line">    cc1: out of memory allocating 65536 bytes after a total of 31883264 bytes  </span><br><span class="line">    Compile failed: <span class="built_in">command</span> <span class="string">&#x27;/usr/bin/gcc&#x27;</span> failed with <span class="built_in">exit</span> code 1  </span><br><span class="line">    creating tmp  </span><br><span class="line">    cc -I/usr/include/libxml2 -I/usr/include/libxml2 -c /tmp/xmlXPathInit3c3vwixm.c -o tmp/xmlXPathInit3c3vwixm.o  </span><br><span class="line">    cc tmp/xmlXPathInit3c3vwixm.o -lxml2 -o a.out  </span><br><span class="line">    error: <span class="built_in">command</span> <span class="string">&#x27;/usr/bin/gcc&#x27;</span> failed with <span class="built_in">exit</span> code 1  </span><br><span class="line">    [end of output]  </span><br><span class="line">  </span><br><span class="line">note: This error originates from a subprocess, and is likely not a problem with pip.  </span><br><span class="line">error: legacy-install-failure</span><br><span class="line">× Encountered error <span class="keyword">while</span> trying to install package.  </span><br><span class="line">╰─&gt; lxml</span><br></pre></td></tr></table></figure><h3 id="発生要因"><a href="#発生要因" class="headerlink" title="発生要因"></a>発生要因</h3><p><a href="https://pypi.org/project/lxml/">lxml</a> 最新バージョン <code>5.0.0</code> が、<a href="https://pypi.org/project/lxml/5.0.0/">2023&#x2F;12&#x2F;30 05:29 (JST)</a> にリリースされたためです。</p><h3 id="検出"><a href="#検出" class="headerlink" title="検出"></a>検出</h3><p>Glue ジョブの実行時に、 <code>Internal service error</code> 、タイムアウトエラー、もしくは以下のエラーが発生しました。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CommandFailedException: /tmp/glue-python-libs-XXXX/&lt;ライブラリ&gt;.whl installation failed after 2th retry due to exception: CalledProcessError</span><br></pre></td></tr></table></figure><h3 id="対応"><a href="#対応" class="headerlink" title="対応"></a>対応</h3><h4 id="対応案の検討"><a href="#対応案の検討" class="headerlink" title="対応案の検討"></a>対応案の検討</h4><p>以下の A と B、 2 つの対応案を検討しました。</p><h5 id="A-awswrangler-を-AWS-Glue-PythonShell-で事前にパッケージ済みのライブラリ利用へ変更"><a href="#A-awswrangler-を-AWS-Glue-PythonShell-で事前にパッケージ済みのライブラリ利用へ変更" class="headerlink" title="A. awswrangler を AWS Glue PythonShell で事前にパッケージ済みのライブラリ利用へ変更"></a>A. <a href="https://pypi.org/project/awswrangler/">awswrangler</a> を AWS Glue PythonShell で事前にパッケージ済みのライブラリ利用へ変更</h5><p>今回利用していた <code>awswrangler==1.5.2</code> は、AWS Glue PythonShell において事前にパッケージ済みのライブラリセットに含まれています。</p><p><a href="https://docs.aws.amazon.com/ja_jp/glue/latest/dg/add-job-python.html">参考: AWS Glueでの Python シェルジョブ - AWS Glue (amazon.com)</a></p><p>そのため、 <code>awswrangler</code> を明示的にインストールせずとも利用することが可能であるため、<br>AWS Glue ジョブの Libraries 設定から awswrangler の指定を削除することで、起動時のインストールを防ぎ、ライブラリの利用継続を行う案です。</p><p>メリット</p><ul><li>AWS 側で用意されたライブラリが利用でき、一般に利用できることから、ライブラリの状態は枯れている</li><li>起動時のインストール処理が省略され、実処理を実行するまでの時間が早くなり、全体的な処理速度向上が見込める<ul><li>※ 最大30秒程度の短縮であるため、全体のジョブ実行時間次第で支配的かどうか判断する</li></ul></li></ul><p>デメリット</p><ul><li>単体テスト&#x2F;結合テスト時にインストールしていたバージョンと、 <code>awswrangler==1.5.2</code> に依存する他パッケージのバージョンに差異が生まれる可能性がある</li></ul><h5 id="B-Glue-ジョブ設定の、DPU-0-0625-から-DPU-1-へ設定変更"><a href="#B-Glue-ジョブ設定の、DPU-0-0625-から-DPU-1-へ設定変更" class="headerlink" title="B. Glue ジョブ設定の、DPU&#x3D;0.0625 から DPU&#x3D;1 へ設定変更"></a>B. Glue ジョブ設定の、DPU&#x3D;0.0625 から DPU&#x3D;1 へ設定変更</h5><p>根本原因にて記載した通り、<a href="https://pypi.org/project/lxml/">lxml</a>を setup.py にてインストールする際に、<code>out of memory</code> エラーが発生していました。<br>そのため、マシンスペックを上げることで解消できないかと推測し、検証環境にて DPU&#x3D;0.0625 → DPU&#x3D;1 へ変更して実行したところ、正常に処理が完了しました。</p><p>メリット</p><ul><li>エラーが発生する前のライブラリのバージョン状態に近い環境で、Glue ジョブを動作させることができる<ul><li><a href="https://pypi.org/project/awswrangler/">awswrangler</a>に依存するライブラリのバージョンをエラー直前の成功したバージョンに近い状態とできる<ul><li>※ 近いという表現は、設定次第で依存する他のライブラリバージョンも変更される可能性があることに由来する(後述するが、そもそも実行時にバージョンが揺れること自体が本当の根本原因である)</li></ul></li></ul></li></ul><p>デメリット</p><ul><li>ビルドして作成する必要があり、wheel でのインストールに失敗する <a href="https://pypi.org/project/lxml/">lxml</a>のバージョンが利用される</li><li>DPU 値を上げるため、金銭的なコストが増加する</li></ul><h4 id="対応案の選択"><a href="#対応案の選択" class="headerlink" title="対応案の選択"></a>対応案の選択</h4><p>結論、対応案 A を選択しました。</p><p>判断基準として、”不具合を追加で発生させないこと” を置きました。<br>システム性質上、本番環境での継続的な実行ではなく、数回の実行を安定して行うことが求められていました。その結果、ライブラリの最新バージョン追従よりも、成熟し安定したバージョンでの実行を優先しました。</p><p>リスク評価としては、インストールエラーが発生した、最新の <a href="https://pypi.org/project/lxml/">lxml</a> により発生する不具合リスクと、<a href="https://pypi.org/project/awswrangler/">awswrangler</a>に依存するライブラリのバージョンが下がることで発生する不具合のリスクを考慮し、定量的ではないですが後者のほうがより発生するリスクが低いと判断しました。</p><p>ただ、どちらにせよリスクは発生するため、単体テストと AWS 環境上での結合テストを再度実行し、動作保証の上で本番稼働を行いました。</p><h4 id="修正事項"><a href="#修正事項" class="headerlink" title="修正事項"></a>修正事項</h4><p>AWS Glue ジョブの Libraries 設定に指定している wheel ライブラリ内で、<a href="https://pypi.org/project/awswrangler/">awswrangler</a> をインストールしない設定へ修正しました。<br>具体的には、 <code>poetry build -f wheel</code> で独自ライブラリを wheel ファイルへビルドしていたため、<a href="https://pypi.org/project/awswrangler/">awswrangler</a> を <code>poertry</code> における <code>dev group</code>   の依存へ変更しました。</p><p>before</p><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pyproject.toml</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dependencies]</span></span><br><span class="line"><span class="attr">awswrangler</span> = <span class="string">&quot;2.15.1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.group.dev.dependencies]</span></span><br></pre></td></tr></table></figure><p>after</p><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pyproject.toml</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dependencies]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.group.dev.dependencies]</span></span><br><span class="line"><span class="attr">awswrangler</span> = <span class="string">&quot;2.15.1&quot;</span> <span class="comment"># dev group へ変更</span></span><br></pre></td></tr></table></figure><h3 id="学び"><a href="#学び" class="headerlink" title="学び"></a>学び</h3><h4 id="うまくいったこと"><a href="#うまくいったこと" class="headerlink" title="うまくいったこと"></a>うまくいったこと</h4><p>幸いなことに、単体テスト&#x2F;結合テストにて追加の問題が発生せず、本番環境での実行も安定していました。</p><h4 id="振り返り"><a href="#振り返り" class="headerlink" title="振り返り"></a>振り返り</h4><p>後から振り返ると、リスク判断において正確な要素を抽出できていなかった点がありました。<br>その点は、<a href="https://pypi.org/project/lxml/">lxml</a> に対して実際に依存している処理があったのか否かです。<a href="https://pypi.org/project/lxml/">lxml</a>への依存は、<a href="https://pypi.org/project/awswrangler/">awswrangler</a> (正確には、内部で利用している <code>pandas</code> )内の処理のため、ライブラリの実装を読む必要がありましたが、正確なリスク評価としては必要だったのではと思いました。<br>時間的余裕次第ですが、調査をする選択肢をもっておくべきでした。</p><p>また、案の比較時に、インストールエラーが発生した <a href="https://pypi.org/project/lxml/">lxml</a> を利用すること自体が心理的障壁となり、選択時にバイアスがかかってしまったという点もありました。これは、エラーが発生したバージョンを使いたくないという感情から来るものでした。<br>客観的な判断で、より正確にリスク評価ができるとより良かったなと感じています。</p><h4 id="そもそもの話"><a href="#そもそもの話" class="headerlink" title="そもそもの話"></a>そもそもの話</h4><p>根本的には、実行時のライブラリのバージョンが固定されていないことが発生の要因です。<br>バージョンが固定 “されている”・”されていない” (※1) で少しメリット・デメリットを考えてみると、<br>メリットとしては、設定次第ではありますが最新のバージョンに近いバージョンが選択されることで、脆弱性の修正や性能向上等のバージョンアップによる改善を取り込むことができます。<br>デメリットとしては、当事象のようにバージョンが揺れることで、テスト時に発生していなかった不具合が突然発生するリスクが生まれます。</p><p>ケースバイケースではありますが、安定して運用することが第一である場合はデメリットは許容できないことが多い印象です。<br>そのため、ライブラリのバージョンを lock ファイル等を利用して固定の上で安定運用しつつ、もし継続して利用されるシステムの場合、適切にメンテナンスして如何にバージョンを上げていくかを考えることになるのかなと思います。(余談ですが、メンテナンスが検討できておらず、塩漬けにされて、いざ大きめの脆弱性が発見され、いきなり対応できないといった問題はありがちな気がします。)</p><p>ちなみに、AWS Glue の追加ライブラリにおいて、lock ファイル利用したライブラリのバージョン固定を行う方法は現時点ではわかりませんでした。</p><p><strong>※1 <code>バージョンが固定されていない</code> とは、ライブラリに対する依存ライブラリ設定に沿っている上という前提になります。</strong></p><p>例えば、<a href="https://github.com/aws/aws-sdk-pandas/blob/9d5c1a67af3f5e7e8d7aa506da1b97277d3e3bd6/pyproject.toml#L28">pyproject.toml - awswrangler</a> の設定を参考にすると、以下の通りです。</p><ul><li>boto3 は <code>1.20.32</code> 以上のバージョンに依存</li><li>pandas の場合<ul><li>python version が 3.9 より小さい場合は、 <code>1.2.0 &lt;= version &lt; 2.1.0</code> の間のバージョンに依存</li><li>python version が 3.9 以上の場合は、 <code>1.2.0 &lt;= version &lt; 3.0.0</code> の間のバージョンに依存</li></ul></li></ul><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参考: https://github.com/aws/aws-sdk-pandas/blob/9d5c1a67af3f5e7e8d7aa506da1b97277d3e3bd6/pyproject.toml#L28</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dependencies]</span></span><br><span class="line"><span class="attr">python</span> = <span class="string">&quot;&gt;=3.8, &lt;4.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Required</span></span><br><span class="line"><span class="attr">boto3</span> = <span class="string">&quot;^1.20.32&quot;</span></span><br><span class="line"><span class="attr">botocore</span> = <span class="string">&quot;^1.23.32&quot;</span></span><br><span class="line"><span class="attr">pandas</span> = [</span><br><span class="line">    &#123; version = <span class="string">&quot;&gt;=1.2.0,&lt;2.1.0&quot;</span>, markers = <span class="string">&quot;python_version &lt; \&quot;3.9\&quot;&quot;</span> &#125;,</span><br><span class="line">    &#123; version = <span class="string">&quot;&gt;=1.2.0,&lt;3.0.0&quot;</span>, markers = <span class="string">&quot;python_version &gt;= \&quot;3.9\&quot;&quot;</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>上記設定のため、boto3 であれば実行時に <code>1.20.32</code> 以上のバージョン (最新バージョン) が利用され、pandas もバージョン指定内の最新バージョンが利用される可能性があります。</p><h2 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h2><h3 id="lxml-の-wheel-インストールエラー自体の解消"><a href="#lxml-の-wheel-インストールエラー自体の解消" class="headerlink" title="lxml の wheel インストールエラー自体の解消"></a><a href="https://pypi.org/project/lxml/">lxml</a> の wheel インストールエラー自体の解消</h3><p>バージョン 5.0.1 と 5.1.0 にて、解消されたバージョンがリリースされています。</p><p>参考: <a href="https://lxml.de/5.1/changes-5.1.0.html">lxml changelog</a><br><img src="/images/20240119a/image.png" alt="image.png" width="1200" height="358" loading="lazy"></p><h3 id="wheel-とは"><a href="#wheel-とは" class="headerlink" title="wheel とは"></a>wheel とは</h3><p><a href="https://peps.python.org/pep-0427/">PEP 427</a> で定義された Python のパッケージファイルフォーマットを指します。拡張子は <code>.whl</code> であり、中身としては ZIP 形式のアーカイブです。</p><p>フォルダ構成は、ZIP 解凍をすることでわかりますが、以下の通りです。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">├─ &lt;ライブラリディレクトリ&gt;</span><br><span class="line">   ├─ ...</span><br><span class="line">└─ &lt;ライブラリ名&gt;.dist-info</span><br><span class="line">   ├─ METADATA</span><br><span class="line">   ├─ RECORD</span><br><span class="line">   └─ WHEEL</span><br></pre></td></tr></table></figure><p>当事象に関連する内容としては、 <code>.dist-info</code> 以下の <code>METADATA</code> に依存するライブラリのバージョンが記載されています。<br><code>pip</code> で <code>wheel</code> ファイルを指定してインストールした際に、<code>Requires-Dist</code> に記載されているライブラリがインストールされます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Metadata-Version: 2.1</span><br><span class="line">Name: &lt;ライブラリ名&gt;</span><br><span class="line">Version: 1.0.0</span><br><span class="line">Summary: </span><br><span class="line">Author: XXX</span><br><span class="line">Requires-Python: &gt;=3.9.10,&lt;3.11</span><br><span class="line">Classifier: Programming Language :: Python :: 3</span><br><span class="line">Classifier: Programming Language :: Python :: 3.10</span><br><span class="line">Requires-Dist: boto3 (==1.28.64)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Description-Content-Type: text/markdown</span><br><span class="line"></span><br><span class="line">(README.md の内容が記載)</span><br></pre></td></tr></table></figure><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>ポストモーテムとして、振り返りをまとめてみました。<br>数年に一回あるかないかの問題ではありますが、同様の問題が発生した際に判断の参考になれば良いなと思います。</p><h2 id="参考情報"><a href="#参考情報" class="headerlink" title="参考情報"></a>参考情報</h2><ul><li><a href="https://qiita.com/an_sony/items/0565ad980f9097c76d11#fn1">ポストモーテムを理解する #運用 - Qiita</a></li><li><a href="https://lxml.de/5.1/changes-5.1.0.html">lxml changelog</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Glue/">Glue</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%88/">トラブルシュート</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%9D%E3%82%B9%E3%83%88%E3%83%A2%E3%83%BC%E3%83%86%E3%83%A0/">ポストモーテム</category>
      
      <category domain="https://future-architect.github.io/tags/awswrangler/">awswrangler</category>
      
      
      <comments>https://future-architect.github.io/articles/20240119a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
