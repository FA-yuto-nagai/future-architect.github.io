<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Thu, 09 Nov 2023 00:34:46 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>「自在化身体論」の読書感想文</title>
      <link>https://future-architect.github.io/articles/20231109a/</link>
      <guid>https://future-architect.github.io/articles/20231109a/</guid>
      <pubDate>Wed, 08 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;a href=&quot;https://www.amazon.co.jp//dp/4860436857&quot;&gt;
&lt;img src=&quot;/images/20231109a/jisai.jpg&quot; alt=&quot;&quot; width=&quot;499&quot; height=&quot;543&quot;&gt;
&lt;/a&gt;

&lt;h1</description>
          
        
      
      
      
      <content:encoded><![CDATA[<a href="https://www.amazon.co.jp//dp/4860436857"><img src="/images/20231109a/jisai.jpg" alt="" width="499" height="543"></a><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、2022年4月新卒入社、金融グループ所属の森です。</p><p><a href="/articles/20231030a/">秋のブログ週間2023</a>2週目の記事として、<a href="http://www.nts-book.co.jp/item/detail/summary/setubi/20210200_97.html">自在化身体論</a>の感想文を掲載します。</p><p>私はフロントエンドやアルゴリズム関連の書籍を読むことが多いのですが、読書の秋！ということで、思い切って普段は読まないような分野の本を手に取ってみました。</p><h1 id="本の概要"><a href="#本の概要" class="headerlink" title="本の概要"></a>本の概要</h1><p>「自在化身体」という概念や、それに関する研究、技術についての本です。<br>「自在化」の概念は本書で以下のように述べられています。</p><blockquote><p>「 機械によって拡張された能力を、人が自在に扱えること」</p></blockquote><p>想像しやすいところで言えば、人間の筋力を増強する「パワードスーツ」などが「自在化身体」の一つと言えるでしょう。</p><p>しかし、ロボットによる人体の拡張に限らず、バーチャル世界での身体、ひとりで複数の身体を扱うこと、逆に複数人でひとつの身体を制御することなど、「自在化身体」の様々な在り方が紹介されていきます。</p><p>章立てです。</p><p>各章で「自在化身体」の各研究グループのリーダーが自身の経歴や研究の内容、将来像について紹介していく形式になっています。</p><ul><li>第1章　変身・分身・合体まで ― 自在化身体が作る人類の未来</li><li>第2章　身体の束縛から人を開放したい ― コミュニケーションの変革も</li><li>第3章　拡張身体の内部表現を通して脳に潜む謎を暴きたい</li><li>第4章　自在化身体は第4世代ロボット ― 神経科学で境界を超える</li><li>第5章　今役立つロボットで自在化を促す ― 飛び込んでみないと自分はわからない</li><li>第6章　バーチャル環境を活用した身体自在化とその限界を探る</li><li>第7章　柔軟な人間と機械との融合</li><li>第8章　情報的身体変工としての自在化技術 ― 美的価値と社会的倫理観の醸成に向けて</li></ul><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>「パワードスーツ」のような、ロボット工学の話題を中心に構成されていると思っていましたが、バーチャル空間上での身体についての研究や、心理学、脳科学の知見を利用した自在化身体の応用、自在化身体と美的感覚、倫理観の関係など非常に幅広い話題があり驚かされました。</p><p>興味深く感じた話題について紹介します。</p><h2 id="自在と自動"><a href="#自在と自動" class="headerlink" title="自在と自動"></a>自在と自動</h2><p>「自在化」において大切なことは、あくまで人間に新しい能力を授けることだとされています。</p><p>書籍では自動運転技術とドラえもんのタケコプターを比較して説明しています。どちらの技術でもユーザーは移動という目的を達成できますが、自在化で目指すのはタケコプターのように人間に移動能力を付加することです。</p><p>あくまで主体は人間であるという点と、行動の結果のみを重要視しているわけではない点に、単に利便性のための技術にとどまらない可能性を感じて好印象でした。</p><h2 id="第3の腕"><a href="#第3の腕" class="headerlink" title="第3の腕"></a>第3の腕</h2><p>ロボットハンドを体に装着し自由自在に扱えるようにする研究や、ロボットハンドを自身の体から離れたところに設置し動かす研究が紹介されていました。</p><p>ロボットハンドを遠隔操作する場合、操作している腕の位置や角度に応じて操作者の背中に刺激を与えると作業効率が上がる実験結果が得られているそうです。</p><p>ロボットハンドという本来自分の体にないパーツからのフィードバックに脳が対応できる点が非常に興味深かったです。</p><p>この他にも人間の適応能力の高さを利用した研究や、逆に脳がどれだけの身体拡張を許容できるのか調べる研究についても紹介されていました。</p><h2 id="身体感覚の編集"><a href="#身体感覚の編集" class="headerlink" title="身体感覚の編集"></a>身体感覚の編集</h2><p>モーションキャプチャでユーザーの全身の動きを取得し、VR空間上のアバターの動きに反映させるシステムを用いた実験が紹介されていました。</p><p>ユーザーはヘッドマウントディスプレイを通してVR空間上で自身の動きをリアルタイムに観測します。ここで、アバターの表示に遅延を入れる、もしくはアバターの次の動きを予測し、数フレーム先の動作を表示すると、ユーザーは「体が重い」もしくは「体が軽い」という感覚を得るそうです。</p><p>アバターという拡張された身体を経由することで人間の感覚の制御ができる、という話を聞くと、いずれ自身の思い通りに感覚を制御しながら生活ができるのでは？と夢が広がりますね！</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>自分にとって初めての概念が多く登場する本でしたが、具体的な研究内容の紹介や図表による説明が十分にあったため、あまり困ることなく読み進めることができました。</p><p>子供の頃に夢見たSFの世界がすぐそこに迫っている事実にワクワクが止まりません。（書籍の内容ではありませんが、自在化身体研究プロジェクトで作成された<a href="https://jizai-arms.com/">自在肢</a>がカッコイイ…）</p><p>SFが好きな方、VR、ロボット工学、心理学、脳科学に興味がある方など様々な人にオススメできる本です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%87%AA%E5%9C%A8%E5%8C%96%E8%BA%AB%E4%BD%93%E8%AB%96/">自在化身体論</category>
      
      
      <comments>https://future-architect.github.io/articles/20231109a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>土地勘に頼らずに地の利がある場所をみつける方法</title>
      <link>https://future-architect.github.io/articles/20231108a/</link>
      <guid>https://future-architect.github.io/articles/20231108a/</guid>
      <pubDate>Tue, 07 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231108a/top.jpeg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;640&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;本記事は「&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231108a/top.jpeg" alt="" width="640" height="640" loading="lazy"><p>本記事は「<a href="/articles/20231030a/">秋のブログ週間2023</a>」2週目の記事です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>旅行をするときや引っ越しをするとき、周辺の商業地域や、観光地にアクセスのよい「地の利」のある場所を探したいですよね？</p><p>「地の利」がある場所を探すには、インターネットで調べるか、長らくその地域に住んでいて土地勘のある人に聞くのが一般的ではないでしょうか。</p><p>今回は、<strong>数理的なアプローチで「地の利」の良い場所を見つける方法</strong>を紹介します。</p><ul><li><input checked="" disabled="" type="checkbox"> 「地の利」とは”地形や土地の位置が、ある事をするために有利な条件を備えていること”です（引用:<a href="https://kotobank.jp/word/%E5%9C%B0%E3%81%AE%E5%88%A9-566283">コトバンク</a>）。<strong>本記事では単純に、他の場所へ行きやすい「アクセスが良い場所」のような意味で使っております</strong>。</li></ul><p>本記事は<strong>都市と地域を数理的に分析する楽しさ</strong>を伝えたいという気持ちと、共著『<a href="https://amzn.asia/d/aUFog4S">スマートモビリティ時代の地域とクルマ</a>』を手にとってくれる方が一人でも増えるといいなという邪な気持ちで書いております。</p><h1 id="地利値とは"><a href="#地利値とは" class="headerlink" title="地利値とは"></a>地利値とは</h1><p>アクセシビリティは、電車などのモビリティの発達や、山や川などの自然環境に左右されますが、今回は汎用的な議論を可能にするため、シンプルに<strong>地域と地域の隣接関係</strong>のみに着目します。</p><p>例えば、下図のような３つの隣り合うまちがあるときを考えます。</p><img src="/images/20231108a/例１.png" alt="例１" width="400" height="211" loading="lazy"><p>「この３つのまちから住む場所を選んでください」と命令された場合、真ん中のＢ市がなんとなく「地の利」がある気がしませんか？</p><p>この「なんとなく地の利あるが気がする感覚」を定量化するために「地利値」という概念を用います。詳細は省きますが、下図のような基礎的な<a href="https://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%A9%E3%83%95%E7%90%86%E8%AB%96">グラフ理論</a>で算出できます。</p><img src="/images/20231108a/これが地利値_(1).png" alt="これが地利値_(1).png" width="768" height="547" loading="lazy"><p>例で示した３つの隣り合うまちの場合、B市の地利値が「1.0」で最も高く、地の利のある場所であることが分かります。</p><img src="/images/20231108a/例１の地利値.png" alt="例１の地利値.png" width="400" height="272" loading="lazy"><p>参考として、他の単純な例も示します。</p><img src="/images/20231108a/例2.png" alt="例2.png" width="400" height="138" loading="lazy"><p><del>このように、あるまち（＝交通の結節点）を頂点、まちをつなぐ道を辺としたグラフの隣接行列の最大固有値に属する固有ベクトルを地利値といいます。</del> 今回は難しいことは考えずに、いろいろな地域の地利値を算出して遊んでみましょう。</p><h1 id="地利値で遊んでみる"><a href="#地利値で遊んでみる" class="headerlink" title="地利値で遊んでみる"></a>地利値で遊んでみる</h1><p>それでは実際の地域に地利値を当てはめてみます。例えば、私の卒業した大学がある<strong>茨城県の市町村</strong>で考えると、地利値の高い市はどこになるでしょうか？県庁所在地の水戸市でしょうか？</p><img src="/images/20231108a/茨城県の地利値_(1).png" alt="茨城県の地利値_(1).png" width="768" height="466" loading="lazy"><p>上図のように茨城県で地利値がもっとも高い市は<strong>つくば市</strong>となりました。</p><p>つくば市は2023年の調査では人口増加率が全国トップの2.30%という数字でした<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。東京へのアクセスが良いつくばエクスプレスの駅周辺に子育て世帯が継続的に転入していることが理由のひとつだと思われます。</p><p>地利値を算出するのに鉄道網や経済指標などは加味していませんが、土地勘のある人にとってもある程度納得できる結果なのではないでしょうか？</p><p>他の地域でも地利値を見てみます。例えば私の地元、岩手県。</p><img src="/images/20231108a/岩手県.png" alt="岩手県.png" width="283" height="400" loading="lazy"><p>県庁所在地である<strong>盛岡市</strong>の地利値がもっとも大きくなります。盛岡市は県央に位置しており、周辺市町村からたくさんの人が働きにくる都市です。</p><img src="/images/20231108a/岩手県と秋田県.png" alt="岩手県と秋田県.png" width="282" height="400" loading="lazy"><p>秋田県と並べてみても<strong>盛岡市</strong>の地利値が一番大きいです。西側が海に面している秋田市と比べて地の利があるのは盛岡市なのかもしれません。</p><p>九州に飛んで長崎県ではどうでしょう？</p><img src="/images/20231108a/長崎県.png" alt="長崎県.png" width="282" height="400" loading="lazy"><p><strong>佐世保市</strong>です。Googleで検索すると、県庁所在地である長崎市との対決をあおる記事<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>が複数出てきますので、佐世保市が長崎市に並んで住みやすい市であるという感覚があるようです。</p><img src="/images/20231108a/九州.png" alt="九州.png" width="282" height="400" loading="lazy"><p>九州地方で地利値がもっとも高い場所は<strong>福岡県飯塚市</strong>です。これだけだと少し感覚と外れるかもしれませんが、九州全体でみると<strong>地利値が高い地域は福岡県に集中</strong>しており、政令指定都市2市が位置する福岡県の地の利が読み取れます。</p><p>最後に、全国の市町村で比べてみた時、最も地利値が大きい場所はどこでしょうか？</p><img src="/images/20231108a/長野県松本市_(1).png" alt="長野県松本市_(1).png" width="768" height="386" loading="lazy"><p>ぐちゃっとしていて分かりづらいですが、<strong>長野県松本市</strong>です。松本市と言えば、松本城がありますが、日本で最も地の利がある市と言われてもピンと来ないかもしれません。</p><p>気になる方は松本市の地利値が最も高くなる理由を考えてみてください（投げっぱなし）。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>本記事では、土地勘に頼らずに地の利がある場所をみつけられる「<strong>地利値</strong>」という概念を紹介しました。</p><p>グラフの中心性を図る尺度は他にも様々ありますし<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>、グラフ理論に限らない他のアプローチでも定量的に「地の利」がある場所を探すことが出来るかもしれません。</p><p>地図は眺めたり、分析したりすることで、いつも新しい発見を得られます。本記事を読んで興味を持った方はぜひ探求してみてください。</p><p>共著『<a href="https://amzn.asia/d/aUFog4S">スマートモビリティ時代の地域とクルマ</a>』では、（地利値は出てきませんが）都市と地域の課題を数理的アプローチで分析&#x2F;解決しています。秋の読書候補におすすめです。</p><p>また、本記事冒頭のイラストはBingのImage Creatorによって生成したものです。</p><p>次は森さんの<a href="/articles/20231109a/">「自在化身体論」の読書感想文</a>です。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jstage.jst.go.jp/article/aija/60/470/60_KJ00004221154/_article/-char/ja/">野田 洋:街路網の形態的特性に基づく定量的地利値の導入とその基礎的考察化</a><br><a href="https://www.jstage.jst.go.jp/article/aija/73/633/73_633_2417/_article/-char/ja/">大澤 義明, 林 利充:隣接グラフと地利値最大化</a><br><a href="https://amzn.asia/d/1JA9leO">R.J. ウィルソン:グラフ理論入門</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://www.soumu.go.jp/main_sosiki/jichi_gyousei/daityo/jinkou_jinkoudoutai-setaisuu.html">総務省：住民基本台帳に基づく人口、人口動態及び世帯数</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">例えばこちらの記事：<a href="https://www.miraidiver.com/series/buzzpro50_nagasakivssasebo">【長崎市VS佐世保市】どっちが魅力的な街なのか！？はっきりさせたい出身者の学生同士がガチバトル！！ - 未来ダイバー</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">こちらの記事が分かりやすいです。：<a href="https://www.ajimatics.com/entry/2018/01/30/133238">日本の中心はどの県だ？グラフ理論（ネットワーク）の基本的な諸概念</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/GIS/">GIS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%9C%B0%E5%9B%B3/">地図</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%95%B0%E7%90%86/">数理</category>
      
      
      <comments>https://future-architect.github.io/articles/20231108a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>エッセイ: 小学2X年生、計算ドリルをしている</title>
      <link>https://future-architect.github.io/articles/20231107a/</link>
      <guid>https://future-architect.github.io/articles/20231107a/</guid>
      <pubDate>Mon, 06 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20231030a/&quot;&gt;秋のブログ週間2023&lt;/a&gt;の6本目です。&lt;/p&gt;
&lt;h2 id=&quot;導入&quot;&gt;&lt;a href=&quot;#導入&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20231030a/">秋のブログ週間2023</a>の6本目です。</p><h2 id="導入"><a href="#導入" class="headerlink" title="導入"></a>導入</h2><p>小学校を卒業して云十年。</p><p>この年になって<a href="https://www.gakusan.com/home/result.php?series=%E3%81%8F%E3%82%8A%E3%81%8B%E3%81%88%E3%81%97%E7%B7%B4%E7%BF%92%E5%B8%B3%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA">100マス計算のドリル</a>を毎日1問解いているTIGの原木です。</p><p>念のため、100マス計算を知らない方に説明すると、<br>100マス計算とは、下記のように縦横にランダムに数字を並べて、<br>四則演算(足し算、引き算、掛け算、割り算)のどれか一つにしたがって、<br>縦と横の数字を計算した答えを(一般的には)左上から順番に空白へ埋めていくものだ。</p><img src="/images/20231107a/image.png" alt="" width="640" height="480" loading="lazy"><p>100マス計算をするために必要なのは、以下の3つ。</p><p>100マス計算の白紙、シャーペン、そしてストップウォッチ。</p><p>100マス計算をやるのにストップウォッチは欠かせない。<br>時間という制限に追われて初めて真価を発揮するからだ。</p><p>スマホの時計アプリで開始ボタンを押した瞬間、自分は小学二年生だったころの自分と接続する。教室の片隅でクラスメイトと教室の時計を見つめながら呪文のように九九を唱えていたあの頃に。</p><p>何代目かもう忘れてしまったグラフギア500が走る音だけがこだまする。7,8あたりが来た時にかすかに脳裏から訴える不調音に耳をそばだてる時間などない。</p><p>考える間もなく次の問題へ移る。書き損じに消しゴムを使う余裕などない。とっさに6を伸ばして4に書き換える。0と1が左にあればそれはもうボーナスステージだ。計算すらやめて必死に書き写す。あと、3行。あと、2行。ラスト!</p><p>…そして、スプラトゥーンの鮭狩り1ゲームにも満たない時間が終わりを告げる。</p><p>調子がいい時で1分20秒、悪い時で1分30秒、そこから上がる気配はない。</p><p>情けないがそれが今の自分だ。</p><p>右手の外側を鉛筆カスで真っ黒にしながら中学受験の勉強をしていた当時の自分ならもっと早かっただろう。栄光学園だけに過去の栄光だけどね、HAHAHA<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><h2 id="計算ドリルの魅力"><a href="#計算ドリルの魅力" class="headerlink" title="計算ドリルの魅力"></a>計算ドリルの魅力</h2><p>私はドリルに飢えていた。いや、正確にいえば、何も考えずに一心不乱に書きこむという経験に飢えていた。</p><p>そのことに気づかされたのは、とある若手社員に質問を受けたことがきっかけだった。会社のチームメンバーに質問されたことから流れで「ソフトウェアテスト技法練習帳」をやることになり、はっと思ったのだ。</p><p><a href="https://gihyo.jp/book/2020/978-4-297-11061-1">https://gihyo.jp/book/2020/978-4-297-11061-1</a></p><p>昭和生まれのアラサーでも公文式はやるのは楽しい、と。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> </p><p>公文式の要領は、ちょっと引っかかりを感じるが、深く考え込むまでもない問題を、パターンを変えて何回も何回も繰り返すことだ。</p><p>この体験に当てはまる仕事は残念ながらインフラエンジニアには少ない。</p><p>ソフトウェアを書く機会はそれなりにあるが、ちょっとでも似た作業が続けば怠惰の登場だ。それどころか、最近では社内用のAzure OpenAI Serviceを利用して、ちょっとでも楽をすることが増えてしまった。 </p><p>そもそも、仕事で解答を問われる仕事は大体次の3パターンに分かれる。</p><ul><li>今までやったことがない新規性が非常に問われる問題</li><li>深く考えぬき、悩んでも、正解がはっきりしないが回答は求められる問題</li><li>過去にどこかで解決した問題、その解答の繰り返し</li></ul><p>そのどれでもない体験が計算ドリルには秘められている。</p><p>正解はあらかじめ与えられている。そこにブレはない。</p><p>人の顔をした新規の案件が反転して正解がない泥沼案件へと変わる恐れ、そこから必死に脱出しようとするストレス地獄もここにはないのだ。</p><p>ちょっと考えられれば解ける問題というのも重要だ。1分ですら長すぎる。深入りも不要だ。AIじゃないし、思考の連鎖は1回でいい。</p><p>もちろん、後から振り返ればいくらでも課題は見えてくる。1+1&#x3D;2であることにすら考察が求められる世界もあることはある。だが、少なくともここでは深く考えなくていいのだ。ちいかわである。</p><p>そしてゴールが明確なのもいい。</p><p>短い時間の中で、思考の100m走に追われる中でいつの間にか後味よく終わる。計算ドリルたーのしーという後味とともに、忘れていた四十肩が返却されてくる。</p><p>それらすべてが、自分が長く続けられる理由だろう。</p><h2 id="この計算ドリルの体験を横展できないか？"><a href="#この計算ドリルの体験を横展できないか？" class="headerlink" title="この計算ドリルの体験を横展できないか？"></a>この計算ドリルの体験を横展できないか？</h2><p>計算ドリルの魅力を踏まえると次のように分析できるだろう。</p><ul><li>解答とそこに至るまでの道筋が明快であること<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li><li>圧倒的な物量を時間に追われながら消化することによる、適度な認知負荷がかかること<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></li><li>正解率を下げるのはケアレスミスと老化だけという大人げない自信<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></li></ul><p>これらの美点を抑えたうえで、IT業界の仕事に役立つ書籍や問題集はないかと探してみた。</p><h3 id="ソフトウェアテスト技法練習帳-～知識を経験に変える40問～"><a href="#ソフトウェアテスト技法練習帳-～知識を経験に変える40問～" class="headerlink" title="ソフトウェアテスト技法練習帳 ～知識を経験に変える40問～"></a><a href="https://gihyo.jp/book/2020/978-4-297-11061-1">ソフトウェアテスト技法練習帳 ～知識を経験に変える40問～</a></h3><p>「同値分割法と境界値分析」「デシジョンテーブル」「状態遷移テスト」「組み合わせテスト」の4観点による、ソフトウェアテスト技法の練習問題集。</p><p>計算ドリルの魅力に嵌まるきっかけとなった書籍。</p><p>構成が非常にわかりやすく工夫されており、左のページに設問、右のページにジャポニカ学習帳のようなメモ欄、そしてページをめくると答えという風になっているので、実本を購入した方が良い。</p><p>100マス計算と同じで、とりあえずシャーペンを動かしてる間に思考がまとまるという懐かしい追体験もできる。</p><h3 id="Python初学者のためのPandas100本ノック"><a href="#Python初学者のためのPandas100本ノック" class="headerlink" title="Python初学者のためのPandas100本ノック"></a><a href="https://qiita.com/kunishou/items/bd5fad9a334f4f5be51c">Python初学者のためのPandas100本ノック</a></h3><p>Pandasの基本的な使い方について100ケースの問題をjupyter notebookでひたすらコーディングしながら学べる。</p><p>去年、BIサービスのシステム構築に関するプロジェクトにいた時に、上物のアプリケーションで何をしているのか知りたいなと思って初めてPandasに手を出した時に、一番最初にお世話になった。ありがたい。</p><p>10ケースぐらいに分割して、写経-&gt;解答というパターンでかならず2回踏むことで、考える前に入力できるようになったら、圧倒的に徳を積み重ねることができた。</p><h3 id="応用情報技術者試験ドットコム"><a href="#応用情報技術者試験ドットコム" class="headerlink" title="応用情報技術者試験ドットコム"></a><a href="https://www.ap-siken.com/apkakomon.php">応用情報技術者試験ドットコム</a></h3><p>応用情報技術者試験の試験問題をひたすら解くことができる。</p><p>お勧めの使い方は「過去問道場」-&gt; 「分野を指定して出題」-&gt; 「出題ジャンルを一点に絞り込み&#x2F;計算問題を出題しない」を選択して、計100問ぐらいをわからなくていいので毎日解くことだ。</p><p>もちろん、これは最初から計算ドリルという使い方はできない。スルメ化により計算ドリルと化すまでには相応の時間がかかる。だが、中身の把握より先に「問題」と「解答」が分かった状態に至るころには、無味乾燥な解説に理解も追いつくはずだ。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>以上が計算ドリルの魅力と、それを体験することができる書籍の紹介である。<br>もし他に計算ドリルのような体験ができる書籍があれば、教えていただきたい。</p><p>次は高瀬さんの<a href="/articles/20231108a/">土地勘に頼らずに地の利がある場所をみつける方法</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">神奈川にある高校の名前。おじさんとなったOBの1割が必ず言うはず(個人調べ)。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">ゼルダの伝説のBotW-&gt;TotKで試練の祠の周回はやめてしまった。一つで充分ですよ。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">たとえば、大河ドラマを見ながら手慰みでやる無限プチプチと、時計で測りながらつぶしていく競技プチプチは圧倒的に異なる。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">最近、クラウドベンダー系の資格試験で、100%完全に解答した!といえることが少なくなってしまった。実質80%ぐらい解答できて残りは正直あやふやだけど、その分野はチームで詳しい○○さんがいるからいっか...みたいなことが続いて、まずいのでは？と内心思っている。</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;">同時に昭和生まれのアラサーは2025年に絶滅することにも気づいてしまった。自分も数少ない生き残りである。</span><a href="#fnref:5" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/pandas/">pandas</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E3%83%A1%E3%83%A2/">勉強メモ</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%83%86%E3%82%B9%E3%83%88%E6%8A%80%E6%B3%95%E7%B7%B4%E7%BF%92%E5%B8%B3/">ソフトウェアテスト技法練習帳</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%BF%9C%E7%94%A8%E6%83%85%E5%A0%B1/">応用情報</category>
      
      
      <comments>https://future-architect.github.io/articles/20231107a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「プロになるためのWeb技術入門」を新人が読んでみた</title>
      <link>https://future-architect.github.io/articles/20231106a/</link>
      <guid>https://future-architect.github.io/articles/20231106a/</guid>
      <pubDate>Sun, 05 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231106a/61YVe2oD4CL._SX342_SY445_.jpg&quot; alt=&quot;&quot; width=&quot;342&quot; height=&quot;429&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231106a/61YVe2oD4CL._SX342_SY445_.jpg" alt="" width="342" height="429"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>2023年4月に新卒で入社したTIGコアテクノロジーユニット所属の木元と申します。<a href="/articles/20231030a/">秋のブログ週間2023</a>の5本目です。</p><p>今回は新人研修の期間で先輩社員の方に薦めていただいた<a href="https://gihyo.jp/book/2010/978-4-7741-4235-7">「プロになるためのWeb技術入門」</a>を読んだ感想を書いていきます。</p><p>特にIT未経験の同期の中で評判が良く、読んでいる人が多い書籍です。IT未経験の人やWebアプリケーションの基本を改めて復習したい人におすすめできる一冊です。</p><h2 id="書籍の概要"><a href="#書籍の概要" class="headerlink" title="書籍の概要"></a>書籍の概要</h2><p>Web技術を体系的に解説した書籍です。</p><p>主にJavaを元に説明しており、JSPやサーブレットを用いたソースコードがでてくるので、ある程度知識がないと理解できない部分があります。</p><p>Webアプリケーション発展の歴史に沿って具体的に解説されており、非常にわかりやすいです。また、Web開発をしている上で一度は聞いたことのあるような基礎的な用語や技術の説明が書かれています。Web技術に必要なプログラミングやネットワーク、HTML、アプリケーションサーバなど幅広い知識を理解することができます。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Lesson1 「Webアプリケーション」とは何か</li><li>Lesson2　Webはどのように発展したか</li><li>Lesson3　HTTPを知る</li><li>Lesson4　CGIからWebアプリケーションへ</li><li>Lesson5　Webアプリケーションの構成要素</li><li>Lesson6　Webアプリケーションを効率よく開発するための仕組み</li><li>Lesson7　セキュリティを確保するための仕組み</li></ul><h2 id="Webアプリケーションの説明と歴史（Lesson1〜2）"><a href="#Webアプリケーションの説明と歴史（Lesson1〜2）" class="headerlink" title="Webアプリケーションの説明と歴史（Lesson1〜2）"></a>Webアプリケーションの説明と歴史（Lesson1〜2）</h2><p>Webアプリケーションについて何も知らない人でもわかるように基礎的な部分から説明されています。</p><p>主な内容</p><ul><li>デスクトップアプリケーションとWebアプリケーションの違い</li><li>WebサーバとWebクライアントの違い</li><li>WWWやURL、通信プロトコルの説明</li><li>CGIからサーブレット、JSP、フレームワークへと発展していくWebアプリケーションの歴史</li></ul><p>以下のデスクトップアプリケーションとWebアプリケーションの違いの様に基礎的な内容の説明が書かれています。（p12 表より編集）</p><div class="scroll"><table><thead><tr><th align="center"></th><th align="center">デスクトップアプリケーション</th><th align="center">Webアプリケーション</th></tr></thead><tbody><tr><td align="center">処理の主体</td><td align="center">手元のOS</td><td align="center">サーバ</td></tr><tr><td align="center">画面の表示</td><td align="center">OS上で表示</td><td align="center">Webブラウザ上で表示</td></tr><tr><td align="center">インストール</td><td align="center">必要</td><td align="center">不必要</td></tr></tbody></table></div><p>Lesson2ではWebアプリケーション開発には必ず必要な知識ではないため、読み飛ばして構わないと書かれていましたが、この後のLessonで出てくる技術要素や用語の説明が書かれているため、理解するためにもよく読んだ方が良い内容だと思います。</p><h2 id="HTTPについて（Lesson3）"><a href="#HTTPについて（Lesson3）" class="headerlink" title="HTTPについて（Lesson3）"></a>HTTPについて（Lesson3）</h2><p>初学者の中でも特につまづきやすいHTTPの内容について説明されています。</p><p>主な内容</p><ul><li>HTTPにおける基本的なやりとり（リクエストやレスポンスなど）</li><li>IPアドレスやDNSの実現方法</li><li>GETリクエストやPOSTリクエストの説明</li></ul><p>HTTP通信の流れやHTTPリクエストやレスポンスが具体的にどのように受け渡しされるかが詳しく説明されています。GETやPOSTメソッドの違いについても記載されており、文章による説明だけではなく、ツールを用いてHTTPリクエストやレスポンスの中身を見ている点がわかりやすいです。</p><p>ただ、ツールに関しては10年以上前に出版されたということもあり、かなり古臭い印象を受けました。サイトには載っていましたが、最近ではブラウザのデベロッパーツールを使用して開発をしている人が多いので、デベロッパーツールを用いた説明を書籍に記載してほしいと感じました。</p><h2 id="Cookieとセッション（Lesson4）"><a href="#Cookieとセッション（Lesson4）" class="headerlink" title="Cookieとセッション（Lesson4）"></a>Cookieとセッション（Lesson4）</h2><p>Lesson4では実際にPHPで作成された宅配ピザの注文サイトをもとにWebアプリケーションの技術要素を学ぶことができます。</p><p>主な内容</p><ul><li>リダイレクトの仕組み</li><li>Cookieとセッションの考え方と実現方法</li></ul><p>Cookieとセッションについては私自身の理解が浅かったこともあり、非常に学べることが多かったです。</p><p>宅配ピザの注文サイトはログイン機能と注文を選択する機能からなる簡易なアプリケーションのため、Cookieとセッションについてを理解するにはとてもわかりやすかったです。JavaではなくPHPでコードが書かれているため、少しPHPの理解が必要ですが、他のプログラミング言語を学んだことがある人であれば難しくないと思います。</p><h2 id="Webアプリケーションの構造（Lesson5）"><a href="#Webアプリケーションの構造（Lesson5）" class="headerlink" title="Webアプリケーションの構造（Lesson5）"></a>Webアプリケーションの構造（Lesson5）</h2><p>Webサーバ、データベースサーバ、アプリケーションサーバの3層構造について説明されています。</p><p>主な内容</p><ul><li>Webサーバ、データベースサーバ、アプリケーションサーバの必要性と役割</li></ul><p>図やイラストが他のLessonより多いこともあり、わかりやすい印象を受けますが、実際に開発経験がない人にとってはイメージが少ししづらいかもしれません。Javaで用いるTomcatやmod_jkについて触れており、何をしているかはよくわからずに使用している人にとっては非常にタメになる内容だと思います。</p><p>データベースサーバの説明でデータベースに対する操作であるCRUD操作について触れられており、SQLについても少しだけ書かれています。</p><h2 id="Webアプリケーションの仕組み（Lesson6）"><a href="#Webアプリケーションの仕組み（Lesson6）" class="headerlink" title="Webアプリケーションの仕組み（Lesson6）"></a>Webアプリケーションの仕組み（Lesson6）</h2><p>ロジックとデザインを分離することに基づいて必要な考え方やアーキテクチャ、フレームワークについて説明されています。</p><p>主な内容</p><ul><li>サーブレットとJSPの連携によるロジックとデザインの分離方法</li><li>リクエストスコープとセッションスコープの違い</li><li>Webアプリケーションで利用されるアーキテクチャ（MVCモデルやレイヤパターン）</li><li>フレームワークの必要性</li></ul><p>この本の中では一番難しい内容であり、開発経験やJavaに関する知識が無いと理解することが難しいと思います。</p><p>ここではWebアプリケーションの構築をするときにはロジックとデザインを分離させることが大切であり、分離させるにはどのようにするかが詳しく書かれています。ロジックとはユーザが入力された情報が正しいか判定する処理のことを指し、デザインはユーザが目にする画面表示部分を意味しています。</p><p>また、Lessonの最後ではフレームワークの必要性がメリットとデメリットと共に書かれています。フレームワークは便利である反面、ブラックボックスになる箇所が多く、長期的にみると技術力が低下する可能性があると述べられていたことが印象的でした。</p><h2 id="セキュリティについて（Lesson7）"><a href="#セキュリティについて（Lesson7）" class="headerlink" title="セキュリティについて（Lesson7）"></a>セキュリティについて（Lesson7）</h2><p>Webアプリケーションを開発する上で重要なセキュリティについて説明されています。</p><p>主な内容</p><ul><li>Webアプリケーションにおけるセキュリティの必要性</li><li>代表的なWebアプリケーションに対する攻撃手法とその対策</li><li>セキュリティ問題の原因と対策</li></ul><p>Webアプリケーションの代表的な攻撃手法とその対策について書かれています。代表的なセキュリティに対する攻撃手法については以下の例が挙げられていました。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.SQLインジェクション</span><br><span class="line">2.クロスサイトスクリプション（XSS）</span><br><span class="line">3.セッションハイジャック</span><br><span class="line">4.クロスサイトリクエストフォージェリ（CSRF）</span><br><span class="line">5.強制ブラウズ</span><br><span class="line">6.ディレクトリトラバーサル</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>この書籍はWebに関する基礎的な知識を広く浅く把握するにはとても良い本だと思います。Web開発する上での重要ポイントがまとまっており読みやすかったです。</p><p>この本だけではWebの知識が十分とは言えないと思いますが、Webに関する全体像を把握したい人にはおすすめします。</p><p>次は原木さんの<a href="/articles/20231107a/">小学2X年生、100マス計算を毎日している</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Java/">Java</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AEWeb%E6%8A%80%E8%A1%93%E5%85%A5%E9%96%80/">プロになるためのWeb技術入門</category>
      
      
      <comments>https://future-architect.github.io/articles/20231106a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初心者が暗号の基礎と歴史を勉強して見た</title>
      <link>https://future-architect.github.io/articles/20231102a/</link>
      <guid>https://future-architect.github.io/articles/20231102a/</guid>
      <pubDate>Wed, 01 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231102a/CipherDisk.jpg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;


&lt;p&gt;&lt;a href=&quot;/articles/20231030a/&quot;&gt;秋のブログ週間2023&lt;/a&gt;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231102a/CipherDisk.jpg" alt="" width="800" height="800"><p><a href="/articles/20231030a/">秋のブログ週間2023</a> の4本目です。</p><p>こんにちは。金融グループ所属、新卒2年目の斎藤大樹です。</p><p>社会人になってから勉強する時間をなかなか取れていないなと思い、暗号の基礎と、暗号の進化の歴史を勉強してみました。<br>暗号をテーマに選んだ理由は、先日プロジェクト内の定期勉強会で先輩社員の方が暗号・認証についてお話してくれたのが興味深かったからです。</p><h2 id="書籍の紹介"><a href="#書籍の紹介" class="headerlink" title="書籍の紹介"></a>書籍の紹介</h2><p>今回の勉強のお供は「<a href="https://www.amazon.co.jp/dp/B08QRZ4WTN">Pythonでいかにして暗号を破るか</a>」というソシム社出版の本です。<br>内容はどちらかというと古典暗号よりですが、暗号の基礎と歴史を学ぶにはもってこいです。<br>暗号だけでなく、Pythonの解説も豊富で、ソースコードも章が進むごとにレベルアップしていく構成になっているので、Pythonの初学者の方にもおすすめの一冊です。</p><h2 id="暗号とは何か"><a href="#暗号とは何か" class="headerlink" title="暗号とは何か"></a>暗号とは何か</h2><p>本書によれば、暗号を構成する要素は「アルゴリズム」と「暗号鍵」の2つです。</p><p>暗号文は受信者が平文（暗号化される前の元の文章）を読み解けなければ意味がないので、出鱈目に作っていいわけではなく、どんな暗号文も一定のルール・決まり事をもとに作られています。このルールが暗号におけるアルゴリズムです。子供の頃に独自の暗号のルールを考え、暗号文を友達と交換して遊んだことのある方もいるのではないでしょうか。</p><p>一方、暗号鍵はその文字通り暗号文を解いて平文に戻すための鍵になります。鍵の形は数字だったり、文字列だったりと様々です。</p><p>ハッカーから身を守る上で重要なのは、ハッカーに「鍵」を知られないことです。ハッカーは暗号化のアルゴリズムは熟知しており、暗号を解く暗号鍵だけ知らないと考えなければなりません。鍵がいかにバレにくいかが、暗号の強固さの指標になります。</p><h2 id="暗号の進化の歴史を辿る"><a href="#暗号の進化の歴史を辿る" class="headerlink" title="暗号の進化の歴史を辿る"></a>暗号の進化の歴史を辿る</h2><p>それでは、本書で紹介されている暗号をいくつかピックアップしながら、暗号の進化の歴史を辿っていきたいと思います。また、本書のタイトルは「Pythonでいかにして暗号を破るか」ですから、暗号のハッキング方法も簡単に紹介していきます。（※法に触れるようなものではございません）</p><h3 id="シーザー暗号"><a href="#シーザー暗号" class="headerlink" title="シーザー暗号"></a>シーザー暗号</h3><p>アルファベットをシフトすることで、メッセージの各文字を別の新しいを文字に置き換える暗号です。シーザー暗号においては、アルファベットをいくつ右にシフトするかの数字が暗号鍵になります。表1に鍵10でにアルファベットが変換した例を示します。シフトした結果がZを超えてしまった場合はAに戻ります（ラップアラウンド）。例えば、鍵10のときに「FUTURE ARCHITECT」という文字列を暗号化すると、「PEDEBO KBMRSDOMD」になります。</p><p><strong>表1：シーザー暗号の鍵10で暗号化した例</strong></p><div class="scroll"><table><thead><tr><th align="center">インデックス</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th><th align="center">11</th><th align="center">12</th><th align="center">13</th><th align="center">14</th><th align="center">15</th><th align="center">16</th><th align="center">17</th><th align="center">18</th><th align="center">19</th><th align="center">20</th><th align="center">21</th><th align="center">22</th><th align="center">23</th><th align="center">24</th><th align="center">25</th></tr></thead><tbody><tr><td align="center">平文の文字</td><td align="center">A</td><td align="center">B</td><td align="center">C</td><td align="center">D</td><td align="center">E</td><td align="center">F</td><td align="center">G</td><td align="center">H</td><td align="center">I</td><td align="center">J</td><td align="center">K</td><td align="center">L</td><td align="center">M</td><td align="center">N</td><td align="center">O</td><td align="center">P</td><td align="center">Q</td><td align="center">R</td><td align="center">S</td><td align="center">T</td><td align="center">U</td><td align="center">V</td><td align="center">W</td><td align="center">X</td><td align="center">Y</td><td align="center">Z</td></tr><tr><td align="center">暗号化後の文字</td><td align="center">K</td><td align="center">L</td><td align="center">M</td><td align="center">N</td><td align="center">O</td><td align="center">P</td><td align="center">Q</td><td align="center">R</td><td align="center">S</td><td align="center">T</td><td align="center">U</td><td align="center">V</td><td align="center">W</td><td align="center">X</td><td align="center">Y</td><td align="center">Z</td><td align="center">A</td><td align="center">B</td><td align="center">C</td><td align="center">D</td><td align="center">E</td><td align="center">F</td><td align="center">G</td><td align="center">H</td><td align="center">I</td><td align="center">J</td></tr></tbody></table></div><p>シーザー暗号のハッキングは簡単です。英語の文章の場合はアルファベットが26個なので、考えられる鍵の総数は25個です。短い文章であれば、25通り試せばいいだけですので、手作業でも簡単に解読できそうです（このように考えられる鍵をすべて試すような解読の手法は<strong>総当たり</strong>と言います）。もし日本語の場合はアルファベット（ひらがな、カタカナ、漢字）の個数が多いので手作業での総当たりは難しそうですが、コンピュータがあれば短時間で解読可能です。</p><p>シーザー暗号の名前の由来は、「ブルータス、お前もか」の格言でおなじみのジュリアス・シーザーです。シーザーは2000年前の軍人ですから、こんな大昔から暗号という概念があったというのは驚きです。</p><h3 id="乗法暗号とアフィン暗号"><a href="#乗法暗号とアフィン暗号" class="headerlink" title="乗法暗号とアフィン暗号"></a>乗法暗号とアフィン暗号</h3><p>シーザー暗号では鍵の値だけアルファベットを加減算して文字を変換しましたが、<strong>乗法暗号</strong>ではアルファベットのインデックスに鍵の数をかけ合わせます。例えば、鍵5で文字Cを暗号化させたい場合、Cのインデックス2に鍵5をかけて、暗号化された文字のインデックス2×5=10を得ます。インデックス10に対応する文字はKです。</p><p>表2に、鍵5を使ってアルファベットA～Zを暗号化させた例を示します。シーザー暗号と同様に、暗号化後の文字がZを超える（インデックスが25を超える）場合はAに戻ります。このラップアラウンド処理の計算は「（インデックス×鍵） mod（アルファベットの個数）」で計算できます。例えば、鍵5のときに「FUTURE ARCHITECT」という文字列を暗号化すると、「ZWRWHU AHKJORUKR」になります。</p><p>乗法暗号を単独で使用すると、インデックス0の文字は暗号化後も同じ文字になってしまいます。そのため、乗法暗号で暗号化したのちに、シーザー暗号でさらに暗号化してやることで、より強力になります。このステップで作られた暗号は<strong>アフィン暗号</strong>と呼ばれます。</p><p><strong>表2：乗法暗号の鍵5で暗号化した例</strong></p><div class="scroll"><table><thead><tr><th align="center">インデックス</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th><th align="center">11</th><th align="center">12</th><th align="center">13</th><th align="center">14</th><th align="center">15</th><th align="center">16</th><th align="center">17</th><th align="center">18</th><th align="center">19</th><th align="center">20</th><th align="center">21</th><th align="center">22</th><th align="center">23</th><th align="center">24</th><th align="center">25</th></tr></thead><tbody><tr><td align="center">平文の文字</td><td align="center">A</td><td align="center">B</td><td align="center">C</td><td align="center">D</td><td align="center">E</td><td align="center">F</td><td align="center">G</td><td align="center">H</td><td align="center">I</td><td align="center">J</td><td align="center">K</td><td align="center">L</td><td align="center">M</td><td align="center">N</td><td align="center">O</td><td align="center">P</td><td align="center">Q</td><td align="center">R</td><td align="center">S</td><td align="center">T</td><td align="center">U</td><td align="center">V</td><td align="center">W</td><td align="center">X</td><td align="center">Y</td><td align="center">Z</td></tr><tr><td align="center">インデックス×鍵</td><td align="center">0</td><td align="center">5</td><td align="center">10</td><td align="center">15</td><td align="center">20</td><td align="center">25</td><td align="center">30</td><td align="center">35</td><td align="center">40</td><td align="center">45</td><td align="center">50</td><td align="center">55</td><td align="center">60</td><td align="center">65</td><td align="center">70</td><td align="center">75</td><td align="center">80</td><td align="center">85</td><td align="center">90</td><td align="center">95</td><td align="center">100</td><td align="center">105</td><td align="center">110</td><td align="center">115</td><td align="center">120</td><td align="center">125</td></tr><tr><td align="center">（インデックス×鍵）mod 26</td><td align="center">0</td><td align="center">5</td><td align="center">10</td><td align="center">15</td><td align="center">20</td><td align="center">25</td><td align="center">4</td><td align="center">9</td><td align="center">14</td><td align="center">19</td><td align="center">24</td><td align="center">3</td><td align="center">8</td><td align="center">13</td><td align="center">18</td><td align="center">23</td><td align="center">2</td><td align="center">7</td><td align="center">12</td><td align="center">17</td><td align="center">22</td><td align="center">1</td><td align="center">6</td><td align="center">11</td><td align="center">16</td><td align="center">21</td></tr><tr><td align="center">暗号化後の文字</td><td align="center">A</td><td align="center">F</td><td align="center">K</td><td align="center">P</td><td align="center">U</td><td align="center">Z</td><td align="center">E</td><td align="center">J</td><td align="center">O</td><td align="center">T</td><td align="center">Y</td><td align="center">D</td><td align="center">I</td><td align="center">N</td><td align="center">S</td><td align="center">X</td><td align="center">C</td><td align="center">H</td><td align="center">M</td><td align="center">R</td><td align="center">W</td><td align="center">B</td><td align="center">G</td><td align="center">L</td><td align="center">Q</td><td align="center">V</td></tr></tbody></table></div><p>26文字のアルファベットに対するシーザー暗号の鍵の個数は25個しかありませんでしたが、アフィン暗号では2つの鍵を組み合わせるため、鍵の総数は数百通りとなります。このように、アフィン暗号はシーザー暗号よりは遥かに安全になったものの、総当たりによるハッキングはまだまだ容易に出来てしまいます。</p><h3 id="単一換字式暗号"><a href="#単一換字式暗号" class="headerlink" title="単一換字式暗号"></a>単一換字式暗号</h3><p>シーザー暗号やアフィン暗号のように鍵の総数が少ない暗号は総当たりが容易です。その問題を解決するのが<strong>単一換字式暗号</strong>です。<br>単一換字式暗号では変換後の文字を、送信者が「AはYに、BはJに変えよう」という具合に、重複のないように任意に決定します（重複があると、復号の時に困ってしまいます）。「え、そんなのでアルゴリズムって呼べるの？」という気もしますが、26文字のアルファベットを暗号化する場合の鍵の総数は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.229ex;" xmlns="http://www.w3.org/2000/svg" width="13.855ex" height="2.183ex" role="img" focusable="false" viewBox="0 -864 6124.1 965"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1000,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g><g data-mml-node="mo" transform="translate(1555.8,0)"><path data-c="2252" d="M15 541Q15 569 33 585T75 601T117 585T135 541Q135 514 118 498T75 481T32 498T15 541ZM56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153ZM642 -41Q642 -17 658 0T702 18Q726 18 744 3T762 -41Q762 -67 745 -84T702 -101Q676 -101 659 -85T642 -41Z"></path></g><g data-mml-node="mn" transform="translate(2611.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(3333.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(4334,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container>通りと膨大で、通常のコンピュータでは解読に数年かかります。</p><p>暗号化のポイントは、「鍵をハッカーにバレてはいけない」ことですから、鍵の数が多いということはシンプルながら非常に強力な暗号になります。単一換字式暗号は総当たり攻撃には強い一方で、頻度解析や単語パターン解析には弱く、ハッキングされやすいといった欠点もあります。</p><h3 id="ヴィジュネル暗号"><a href="#ヴィジュネル暗号" class="headerlink" title="ヴィジュネル暗号"></a>ヴィジュネル暗号</h3><p>総当たり攻撃、頻度解析、単語パターン検索に強い、夢のような暗号が1553年に発表されました。これが<strong>ヴィジュネル暗号</strong>（多表換字暗号）です。古典暗号の中では最も強力な部類で、19世紀まで解読されることがなかったようです。</p><p>ヴィジュネル暗号の鍵は単一英単語のような文字列で、この文字列が複数の1文字の鍵（サブ鍵と呼ぶ）に分割され、平文を暗号化します。各サブ鍵は整数（インデックス）に変換され、シーザー暗号の鍵として扱います。例えば、文字Cはシーザー暗号の鍵2に対応します（表1を参照）。</p><p>例えば、「FUTURE ARCHITECT」という文字列を鍵「DOG」で暗号化すると「IIZXFK DFIKWZHRZ」になります。<br>暗号化の仕組みを表3に示します。1文字目の「F（インデックス5）」は「D（インデックス3）」により右に3シフトするので「I（インデックス8）」に変換されます。次の文字U、Tも同様にO、Gを使って変換していきます。鍵「DOG」は3文字なので、4文字目はまたDに戻る…という要領です。シーザー暗号と同様、Zを超えた場合はAに戻ります。</p><p><strong>表2：ヴィジュネル暗号の鍵DOGで暗号化を行う例</strong></p><div class="scroll"><table><thead><tr><th align="center">平文の文字</th><th align="center">F(5)</th><th align="center">U(20)</th><th align="center">T(19)</th><th align="center">U(20)</th><th align="center">R(17)</th><th align="center">E(4)</th><th align="center">A(0)</th><th align="center">R(17)</th><th align="center">C(2)</th><th align="center">H(7)</th><th align="center">I(8)</th><th align="center">T(19)</th><th align="center">E(4)</th><th align="center">C(3)</th><th align="center">T(19)</th></tr></thead><tbody><tr><td align="center">サブ鍵</td><td align="center">D(3)</td><td align="center">O(14)</td><td align="center">G(6)</td><td align="center">D(3)</td><td align="center">O(14)</td><td align="center">G(6)</td><td align="center">D(3)</td><td align="center">O(14)</td><td align="center">G(6)</td><td align="center">D(3)</td><td align="center">O(14)</td><td align="center">G(6)</td><td align="center">D(3)</td><td align="center">O(14)</td><td align="center">G(6)</td></tr><tr><td align="center">暗号文の文字</td><td align="center">I(8)</td><td align="center">I(8)</td><td align="center">Z(25)</td><td align="center">X(23)</td><td align="center">F(5)</td><td align="center">K(10)</td><td align="center">D(3)</td><td align="center">F(5)</td><td align="center">I(8)</td><td align="center">K(10)</td><td align="center">W(22)</td><td align="center">Z(25)</td><td align="center">H(7)</td><td align="center">R(17(</td><td align="center">Z(25)</td></tr></tbody></table></div><p>ヴィジュネル暗号の鍵は長ければ長いほど安全です。<br>「DOG」のように3文字の鍵で暗号化する場合の鍵の総数は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="11.923ex" height="2.139ex" role="img" focusable="false" viewBox="0 -863.3 5270.1 945.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(1714.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2770.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1500,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(2000,0)"></path></g></g></g></svg></mjx-container>通りしかありませんが、もし20文字の鍵を使う場合の鍵の総数は約<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.947ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 3512.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(1722.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container>通りにもなり、総当たりでの解読は現実的ではなくなります。鍵の長さが1つ増えるたびに、鍵の候補数が26倍に増えるのが、ヴィジュネル暗号の強みです。</p><p>ヴィジュネル暗号の弱点は、鍵に周期性があることです。例えば、「<strong>THE</strong> CAT IS OUT OF <strong>THE</strong> BAG」を鍵「SPILLTHEBEANS」で暗号化すると「<strong>LWM</strong>NLMPWPYTBX<strong>LWM</strong>MLZ」になります。太字で記したように、暗号文で文字列LWMが2回反復しているのが分かります。これは、平文の単語THEが同じ鍵SPIで暗号化されたからです。例文は簡単な例ですが、ヴィジュネル暗号ではこのように同じ文字の反復が現れるので、この反復の間隔を調べることで鍵長を推定出来ます。鍵長の推定が出来たら、頻度分析にかけていき、鍵の候補をさらに絞り込んでいきます。鍵の候補が絞り込めれば、後は総当たりにかけてやることで、この強力な暗号も解読されてしまいます。</p><h3 id="ワンタイムパッド暗号"><a href="#ワンタイムパッド暗号" class="headerlink" title="ワンタイムパッド暗号"></a>ワンタイムパッド暗号</h3><p>ヴィジュネル暗号の弱点を補い、<strong>解読不可能</strong>となった暗号が<strong>ワンタイムパッド暗号</strong>です。ワンタイムパッド暗号は次の3つの条件を満たします。</p><ol><li>ヴィジュネル暗号において、鍵は暗号化するメッセージと同じ長さを持つ。</li><li>鍵は真にランダムである</li><li>鍵はメッセージの暗号化に一度だけ使用し、再び使用しない</li></ol><p>鍵長がメッセージ長と等しい場合、平文の各文字にサブ鍵が一意に使われ、各文字は同等の確率で任意の文字に置き換えられるため、周期性が失われ頻度分析にも強くなります。</p><p>例えば、「FUTURE ARCHITECT」の文字列を鍵「KLABIITPFQWZLGN」で暗号化すると、「PFTVZMTGHXESPIG」になります。「FUTURE ARCHITECT」は15文字なので、鍵の総数は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.229ex;" xmlns="http://www.w3.org/2000/svg" width="15.616ex" height="2.183ex" role="img" focusable="false" viewBox="0 -864 6902.1 965"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1000,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g><g data-mml-node="mo" transform="translate(1555.8,0)"><path data-c="2252" d="M15 541Q15 569 33 585T75 601T117 585T135 541Q135 514 118 498T75 481T32 498T15 541ZM56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153ZM642 -41Q642 -17 658 0T702 18Q726 18 744 3T762 -41Q762 -67 745 -84T702 -101Q676 -101 659 -85T642 -41Z"></path></g><g data-mml-node="mn" transform="translate(2611.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(4111.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(5112,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container>です。実は、ハッカーがこれを総当たり出来る強力なコンピュータを持っていても、ワンタイムパッド暗号は解読できません。それは、どの暗号文でも、すべての平文が等しく候補となりうるためです。</p><p>どういうことかというと、例えば上で得られた暗号文「PFTVZMTGHXESPIG」を鍵「KLABIITPFQWZLGN」で復号すれば「FUTURE ARCHITECT」になりますが、別の鍵「MXYRIULBZVEZHUT」で復号すると、全く別の単語「DIVERSIFICATION（多様化）」になります。</p><p>多くの暗号が解読されやすい理由は、分かりやすい英語に復号する鍵が通常1つしかないからですが、ワンタイムパッド暗号では全く異なる2つ以上の平文から同じ暗号文が得られてしまうため、ハッカーがいかに強力なコンピュータを持っていようが元のメッセージがどれであるか判定することはできません。</p><h2 id="公開鍵と秘密鍵"><a href="#公開鍵と秘密鍵" class="headerlink" title="公開鍵と秘密鍵"></a>公開鍵と秘密鍵</h2><p>暗号の歴史を追ってきて、絶対にハッキング不可能な暗号が出来ることが分かりました。しかしこれで終わりではありません。送信者が暗号文を相手に送るとき、受信者が暗号文を解読できるように鍵を一緒に渡さなければなりません。暗号がどれだけ強力であっても、鍵ごとハッキングされたらどうでしょうか。メッセージは簡単にハッカーに知れ渡ってしまいます。</p><p>この問題を解決するのが<strong>公開鍵暗号方式</strong>です。今まで記述した暗号では、暗号化と復号に同じ鍵を使っていましたが、公開鍵暗号方式では暗号化と復号に異なる鍵を使います。そして、暗号鍵で暗号化されたメッセージは、それと対となる復号鍵だけで復号できます。暗号鍵ではメッセージを解読できず、世界中で共有できるので<strong>公開鍵</strong>と呼ばれています。一方で、復号鍵は誰にもバレてはいけないので<strong>秘密鍵</strong>と呼ばれます。</p><p>例えば、AがBにメッセージを送りたいとき、AはBから公開鍵を受け取り、その公開鍵を使ってメッセージを暗号化します。公開鍵はメッセージを復号できないので、他の人にバレても問題ありません。<br>BはAから暗号化されたメッセージを受け取ると、自分の秘密鍵でそれを復号します。Bだけが、Bの公開鍵で暗号化されたメッセージを復号できる秘密鍵を持っているのです（秘密鍵は他の人にバレてはいけません）。</p><p>BがAに返信したい場合、今度はBがAの公開鍵を使ってメッセージを暗号化します。AはBから受け取った暗号文を、Aの秘密鍵を使って復号します。</p><p>このように、公開鍵暗号方式では、メッセージをハッカーに傍受される心配をせずにメッセージを交換できます。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回は、暗号について知らない初心者が、暗号の歴史を辿っていくという内容でした。</p><p>記事では紹介できませんでしたが、書籍には教科書的RSA暗号を用いた公開鍵・秘密鍵の作成についても触れられていますので、この記事で興味を持っていただけましたら、ぜひ手に取ってみて下さい。</p><p>久々にガッツリ勉強しましたが、自分の知識が少しでも増えていくのを感じられるとやはり楽しいですね。せっかく暗号の基礎を勉強できたので、今度は公開鍵暗号の課題でもある認証についても学んでみたいと思います。</p><p>最後まで読んでいただき、ありがとうございました。</p><p>アイキャッチは<a href="https://en.wikipedia.org/wiki/Caesar_cipher">Caesar cipher - Wikipedia</a>より、シーザー暗号の換字ディスクを利用させていただきました。</p><p>次は木元さんの <a href="/articles/20231030a/">プロになるためのWeb技術入門」を新人が読んでみた</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Security/">Security</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9A%97%E5%8F%B7/">暗号</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85/">初心者</category>
      
      <category domain="https://future-architect.github.io/tags/Python%E3%81%A7%E3%81%84%E3%81%8B%E3%81%AB%E3%81%97%E3%81%A6%E6%9A%97%E5%8F%B7%E3%82%92%E7%A0%B4%E3%82%8B%E3%81%8B/">Pythonでいかにして暗号を破るか</category>
      
      
      <comments>https://future-architect.github.io/articles/20231102a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>設計ドキュメント腐る問題、Git管理で運用してみた結果</title>
      <link>https://future-architect.github.io/articles/20231101a/</link>
      <guid>https://future-architect.github.io/articles/20231101a/</guid>
      <pubDate>Tue, 31 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231101a/document_kusaru.png&quot; alt=&quot;&quot; width=&quot;353&quot; height=&quot;502&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231101a/document_kusaru.png" alt="" width="353" height="502"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。</p><p><a href="/articles/20231030a/">秋のブログ週間2023</a> の3本目は、設計ドキュメントをGit管理して腐らせないようにがんばってみた話をします。</p><p>前段として6年前、「<a href="https://medium.com/@laqiiz/%E6%88%91%E3%80%85%E3%81%AF%E3%81%84%E3%81%8B%E3%81%AB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E9%96%8B%E7%99%BA%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E8%85%90%E3%82%8B%E5%95%8F%E9%A1%8C%E3%81%A8%E6%88%A6%E3%81%88%E3%81%B0%E8%89%AF%E3%81%84%E3%81%AE%E3%81%8B-7c7c3774689f">我々はいかにシステム開発におけるドキュメント腐る問題と戦えば良いのか</a>」という記事を書いたのですが、その後の試行錯誤はどこにも残していないことに気づきました。普段のフューチャー技術ブログですとちょっと引け目を感じるテーマですが、秋の夜長を楽しむため読み物成分を多めに書くというテーマのこのブログリレーにピッタリな気がするため、この機会をお借りします。</p><p>ドキュメントも色々な種別があるかと思いますが、この記事では設計ドキュメントを指すことにします。設計ドキュメントは開発メンバーが参照するもので、ステークホルダーへの説明資料に引用して使うことはあれど、主目的は異なるという前提です。Design Docの場合もありますし、システム構成図、ERD、システム間連携I&#x2F;F定義書、開発規約、環境構築手順などを含みます。</p><h2 id="ドキュメント腐る問題とは"><a href="#ドキュメント腐る問題とは" class="headerlink" title="ドキュメント腐る問題とは"></a>ドキュメント腐る問題とは</h2><p>ドキュメント腐る問題とは、設計時に作成した各種ドキュメントがGoogle Driveやファイルサーバ上で陳腐化してしまい、現状の正しい状態を指していない状態を指します。せっかく新規参画者がキャッチアップしようとしてもドキュメントが真実を示していないという、困った問題です。</p><p>一部の界隈でこう読んでいる名称ですが、少なからず誰しもが経験してきたことでしょう。</p><h2 id="設計ドキュメントをGit管理に寄せる"><a href="#設計ドキュメントをGit管理に寄せる" class="headerlink" title="設計ドキュメントをGit管理に寄せる"></a>設計ドキュメントをGit管理に寄せる</h2><p>対策としてここ4,5年ほど、コードと同期すべき設計ドキュメント全てをGit管理に寄せる方針を取ってきました。なるべくテキストベースで設計ドキュメントを記載し、コードと同じくPull Requestでレビューするフローです。<a href="/articles/20230417b/">markdownlintで設計書の品質を高める</a> の記事にも書いたように、以下のフォーマット&#x2F;ツールを使っています。</p><ul><li>Github-flavored Markdown<ul><li>基本的にフォルダを切ってREADME.mdに書いていきます</li><li>参照はGitHubなどのブランディングで見ることが多いです（ローカルのVS Codeなどで見ても良いですが）</li><li><a href="https://chrome.google.com/webstore/detail/widescreen-for-github/elikdceclccjilahimjfceoalhdbndan">Widescreen for GitHub</a> のChrome拡張はオススメです。横幅が広くなり視認性があがります</li></ul></li><li>PlantUML<ul><li>シーケンス図、業務フロー図はMarkdown中にPlantUMLで記載し、Markdownから<code>![xxx構成図](xxx_構成図.drawio.png)</code> などで画像参照しています</li><li>参照はGitHub上からも見れるように、<a href="https://chrome.google.com/webstore/detail/pegmatite/jegkfbnfbfnohncpcfcimepibmhlkldo">pegmatite</a> というChrome拡張を利用</li><li>今ならMermaidを採用するかもしれませんが、ミンさんが作った<a href="https://future-architect.github.io/articles/20211108a/">PlantUMLのテーマ</a>を推したかったのもあり、継続して使っています</li></ul></li><li>Diagrams.net<ul><li>システム構成図はDiagrams.net（draw.io）で作成し、<code>.drawio.png</code> の拡張子でMarkdownから参照</li><li>レビューが難しいような作り込んだ画像のケースは、Pull Request時に差分を赤丸で囲ったバージョンも用意してもらったり、テキストでポイントを書いてもらったりします</li></ul></li><li>Web API定義<ul><li>OpenAPI SpecのYAMLファイル</li><li>参照はGitHub上からも見れるように、<a href="https://chrome.google.com/webstore/detail/swagger-viewer/nfmkaonpdmaglhjjlggfhlndofdldfag">swagger-viewer</a> を利用していましたが、最近動かなくなって対策を検討中</li></ul></li><li>ERD<ul><li><a href="https://a5m2.mmatsubara.com/index.html">A5:SQL Mk-2</a> の .a5er 拡張子のファイルをコミット</li><li>ini形式のテキストファイルであるため、差分がわかりやすい</li></ul></li><li>その他、DynamoDBなどのデータモデル<ul><li>Markdown中に表形式で表現。A5:SQL Mk-2に寄せても良い気はしています</li></ul></li></ul><p>markdownlintの記事でも書いていますが、単体テストデータ管理や区分値管理など、一部Excelを利用する場面はありますが、このようなファイルを同時に複数のブランチで変更することは今の私の環境においては、あまりありません。したがって、Git上でConflictが発生するのはテキストファイルのみとなり、Conflictの解消に大きな手間はかかりません。</p><h2 id="Git管理にしていない成果物"><a href="#Git管理にしていない成果物" class="headerlink" title="Git管理にしていない成果物"></a>Git管理にしていない成果物</h2><p>一方で以下のファイルは、Git対象外で管理することが多く、多くはスライドやスプレッドシートで作成しています。理由として、下記の資料は基本的にはワンショットでの作成で、何か状況が変化したとしても大本の資料を修正することはない（腐っても良いというかそれが当たり前）であるためです。</p><ul><li>ステークホルダーへの進捗報告、仕様相談など</li><li>テスト計画、テストケース一覧、実施エビデンス</li><li>チームの振り返り資料（KPT的な）</li><li>障害調査、報告</li></ul><h2 id="フォルダ構成について"><a href="#フォルダ構成について" class="headerlink" title="フォルダ構成について"></a>フォルダ構成について</h2><p>アプリケーション開発と同一のリポジトリで <code>docs</code> フォルダを切って管理しています。</p><p>イメージとしては次のようなフォルダ構成です。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.                           <span class="comment"># リポジトリルート</span></span><br><span class="line">├── README.md               <span class="comment"># 全体のインデックス</span></span><br><span class="line">├── backend                 <span class="comment"># バックエンドのコード</span></span><br><span class="line">│   └── ...</span><br><span class="line">├── docs                    <span class="comment"># ドキュメント全般</span></span><br><span class="line">│   ├── 01. 業務ドメイン</span><br><span class="line">│   ├── 02. システム設計</span><br><span class="line">│   ├── 03. データモデル</span><br><span class="line">│   ├── 04. ProgramDesign</span><br><span class="line">│   ├── 05. システム間I/F</span><br><span class="line">│   ├── ...</span><br><span class="line">│   ├── 91. 環境構築</span><br><span class="line">│   └── ...</span><br><span class="line">├── frontend                 <span class="comment"># フロントエンドのコード</span></span><br><span class="line">│   └── ...</span><br><span class="line">├── infrastrucutre           <span class="comment"># Terraform, Ansibleなどの構成管理</span></span><br><span class="line">│   └── ...</span><br><span class="line">└── ...</span><br></pre></td></tr></table></figure><p>ドキュメントのみを管理する独立したリポジトリを作成することも考えましたが、以下の理由でこの形に落ち着きました。</p><ul><li>私達のチーム特性やガバナンス上、基本的にはリポジトリの参照&#x2F;書き込みの権限は設計ドキュメントとコードで分ける必要はなかった</li><li>あるアプリケーション開発で複数リポジトリのInviteするなどの管理が面倒</li><li>リポジトリが別だと設計書とコードで同期をとったPull Requestも別になってしまうため、本当の意味での同期が難しくなるため</li></ul><h2 id="運用のコツ、やってみた感想"><a href="#運用のコツ、やってみた感想" class="headerlink" title="運用のコツ、やってみた感想"></a>運用のコツ、やってみた感想</h2><p>EditorConnfig、Prettierなどのフォーマットと、Markdownlintでのリント、CSpellなどのスペルチェックなどをCIに組み込んでといったテクニカル面の話はここでは割愛して、運用周りで感じたコツのようなものと感想をまとめていきます。あくまで私が経験した中で機能するなと感じた内容ですので、かいつまんで読んでいただければです。Tips的には、ドキュメントをコードから自動生成したり、ドキュメントからコードを自動生成するといったフローを踏むことで強制的に同期させることもありますが、これもテクニカル面が強くなるので割愛しています。</p><h3 id="Wiki管理は高速で腐っていった"><a href="#Wiki管理は高速で腐っていった" class="headerlink" title="Wiki管理は高速で腐っていった"></a>Wiki管理は高速で腐っていった</h3><p>実は設計ドキュメントをGit管理する前に、数名の小さなチームでしたが一度Wikiで管理できないか試してみました。結果としては全くメンテナンスがされずで、下手をするとGoogle Drive（ファイルサーバ）時代より酷いありさまだった気がします。</p><p>理由:</p><ul><li>Wikiだと、設計ドキュメントを作成&#x2F;更新する際のレビュープロセスを整えるのが厳しい<ul><li>コードと同じようにPull Request上で議論して、より良い物にしていくフローができず、モチベーションが上がらなかったのかなと思いました</li><li>逆に開発プロセスと同様の設計ドキュメントをPull Requestベースで行うのは、そのような開発フローに慣れていないメンバーでもそこまで違和感を感じていなかったように見えます</li></ul></li><li>Issueに紐づけての管理が難しい<ul><li>設計ドキュメントの陳腐化に気が付き、Issueだけ起票して対応のタイミングや担当者を別で管理したい場合でも、Wikiの場合は具体的にどのように直したか不明確になりがちでした</li></ul></li></ul><p>GitLab Handbookでも類似の話題があったと思います。同じ結論です。</p><h3 id="設計ドキュメントを外部に共有したい時に困らないか？"><a href="#設計ドキュメントを外部に共有したい時に困らないか？" class="headerlink" title="設計ドキュメントを外部に共有したい時に困らないか？"></a>設計ドキュメントを外部に共有したい時に困らないか？</h3><p>正直なところ、面倒に思うときがしばしばあります。スライドで作成した場合は、そのURLや成果物ファイルを直接共有できますが、リポジトリ管理の場合は権限付与から実施しないとならないため、少し面倒です。適切な権限設定と、有効期間をどう考えるかは悩みです。</p><p>ただし、ステークホルダー向けの資料は従来どおりスライドなどで作成しているため、常日頃からそれなりに適切に議題に出していれば、振り返ってみてもそこまで開発チーム向けの設計ドキュメントを渡す必要があるケースは少なかったです。記憶の中で情報提供で多いのは以下です。</p><ul><li>AWSインフラ構成図、ネットワーク構成図（どのサービスを利用するかのレビューや、監視運用などガバナンスチェックなど）</li><li>API定義（これはOpenAPI Specを使っているため、そのままYAMLを渡したりHTMLを渡していました）</li><li>ERD定義（A5:SQL Mk-2 はERDをPDF出力できるためそれを渡していました）</li></ul><h3 id="コードを修正したとき、どのドキュメントを一緒に直すか分からない問題"><a href="#コードを修正したとき、どのドキュメントを一緒に直すか分からない問題" class="headerlink" title="コードを修正したとき、どのドキュメントを一緒に直すか分からない問題"></a>コードを修正したとき、どのドキュメントを一緒に直すか分からない問題</h3><p>同期を取らないドキュメントを修正せず、コードだけ直してPull Requestに出しちゃう問題です。しばしば発生します。参画歴が浅いメンバーどころか、立ち上げからいる自分ですら見落とすときがあります。例えばバックエンドのWeb APIで、どのAPIがどのDBにCRUDするかを、プログラム詳細設計に書いていたとします。SQLに結合テーブルを追加してテストを直すので手一杯で、ドキュメントのアップデートが追いつかないと行ったケースです。</p><p>対策としては次がありますが、自動化しない限りはレビュアー含めて全員でチェックする必要があります。がんばりましょう。</p><ul><li>SQLを解析してCRUD表を自動生成する&#x2F;チェックする</li><li>Pull Requestのテンプレートに、設計ドキュメントも修正したみたいなチェックボックスを追加する</li><li>開発規約の作業フローに、そういった同期を取るべきリソースを記載し、ルール化しておく</li></ul><h3 id="設計ドキュメントとコードを同じPull-Requestで出すのに慣れ過ぎると、設計レビューがおざなりになりがち"><a href="#設計ドキュメントとコードを同じPull-Requestで出すのに慣れ過ぎると、設計レビューがおざなりになりがち" class="headerlink" title="設計ドキュメントとコードを同じPull Requestで出すのに慣れ過ぎると、設計レビューがおざなりになりがち"></a>設計ドキュメントとコードを同じPull Requestで出すのに慣れ過ぎると、設計レビューがおざなりになりがち</h3><p>チームの開発規約をきっちり定義すれば防げるかと思いますが、設計書とコードを同期をとるために同じPull Requestでレビューするのに慣れると、粒度が大きい改修内容であっても、コードが実装された状態で設計ドキュメントもレビューすることになります。DBにカラムを1つ追加くらいで内容に議論の余地がなければその方が効率的ですが、設計レベルで手戻りがあるケースが何度か発生しました。</p><p>そのため、以下のような方針が推奨であると、開発規約に以下の流れを推奨すると追記しました。</p><ol><li>設計ドキュメントのみのPull Requestを作成して、チーム内レビューを通すこと</li><li>1が終わった後に、コード改修を実施したPull Requestを出すこと</li></ol><p>小さなものも含めて、全て設計ドキュメントレビューとコード改修のPRを分離すると、それはそれで不効率であるため、判断は各メンバーに委ねるレベルにしていますが、大規模開発になると一律分離するといった判断にも繋がってくるかなと思います。</p><p>これの効果ですが、レビュアーとしても次の観点で有益でした。</p><ul><li>設計ドキュメントとコードが同じPull Requestに無いので、設計内容に集中してレビューできる</li><li>設計上、必達ではないもののWANTで直して欲しい内容があっても、すでにコードが実装されていて手戻りになるため、スケジュールを盾にApproveせざるを得ない状況がある。最初に設計レビューだけすると、これらの不健全な状況を防ぐことができる</li></ul><p>ごく一般論ですし、言うまでもなく当たり前の話ですが、設計→レビュー→実装→レビュー のステップは分けましょうといった内容です。下手に全てGit管理なので、人によっては設計という行為が実装と概念が混ざってしまい、こういう必要な手順をスキップしてしまう人もでてくるんだなといった所感です。</p><h3 id="結局人で管理する部分が残るのであれば、陳腐化しちゃいますよね"><a href="#結局人で管理する部分が残るのであれば、陳腐化しちゃいますよね" class="headerlink" title="結局人で管理する部分が残るのであれば、陳腐化しちゃいますよね"></a>結局人で管理する部分が残るのであれば、陳腐化しちゃいますよね</h3><p>はい、自動生成系、静的解析での整合性チェックを完全に整えない限りは、必ず設計ドキュメントは陳腐化します。ただ、改善するチャンスはいくつかあると思います。</p><p>例えば、私は以下のタイミングで設計ドキュメントをよく修正します</p><ol><li>新規参画者向けにオンボーディングする場合</li><li>自分が開発していた機能を、だれかに引き継いでもらうタイミング</li><li>あるメンバーが開発していた機能を、自分などが引き継ぐタイミング</li><li>だれかに機能仕様などの質問を受け、設計ドキュメントのURLだけ渡して終わらせたい場合</li></ol><p>1, 2, 4は自分自身がだれかに状況を説明すると思うのですが、その際に設計ドキュメントを使うようにします。そうすると、説明を通して過不足や話しにくい部分、陳腐化している部分に気がつくことができます。また、説明を受けているメンバーからの質問も、ドキュメントをアップデートするチャンスです。</p><p>良いドキュメントの状態をキープできると、その後の開発生産性や開発者体験にプラスに働きますので、最初は直すべき部分が多くて大変かと思いますが、継続して良い状態になるよう手入れしてきましょう。</p><p>「あとでドキュメントを直す時間を取ろう」は大体、そんな時間は来ません。直すべきは、直したほうが効率が上がるその都度のタイミングだと思いますので、ドキュメントを直すと自分も楽になる範囲内でキレイにしていきましょう。</p><p>意識するのは、設計ドキュメントのURLを送るだけで説明できる余地を増やすことだと思います。これもGitLab Handbookの考え方に近しいと思います。</p><h3 id="drawioで作るコツ"><a href="#drawioで作るコツ" class="headerlink" title="drawioで作るコツ"></a>drawioで作るコツ</h3><p><a href="/articles/20200116/">実践Drawio</a> 記事がおすすめです。個人的には「3.2. Lineジャンプ」は必ず設定して欲しいと思っています。</p><p>レイヤー化はシンプルな図であれば不要かと思いますが、次の背景色は必ず設定したほうが良いと思います。これがないと構成図が透過になり、ダークモードのエディタなどで見る時に不便と感じる時がありました。（もちろん、出力時に背景を透明にするにチェックを入れなければ良いのですが..）</p><img src="/images/20231101a/drawio.png" alt="" width="331" height="290" loading="lazy"><p>チームメンバー以外に作成した構成図などを共有することがほとんど無い資料に関しては、基本的にタイトル、作成者、作成日、更新者などのヘッダは不要かと思います。</p><h3 id="PlantUML-vs-draw-io"><a href="#PlantUML-vs-draw-io" class="headerlink" title="PlantUML vs draw.io"></a>PlantUML vs draw.io</h3><p>シーケンス図などはどちらでも活用できるため、最初はどちらで書こうか迷うこともあるかもしれません。</p><p>基本的にはPlantUMLで書けるものは、全てPlantUMLで書くべきだと思います。テキストベースであるため、おそらく少し慣れればdraw.ioより生産性が高いのと、細かいインデントなどの好みの違いが出にくいため、レビューもスムーズだと思います。何より、いったん作ってしまえばその後の改修での、git diffが見やすいため、レビューやトレーサビリティでも優位なためです。</p><p>とはいえ、複雑度が高いものには余計に時間がかかるため、一点もの構成図などは素直にdraw.ioを使ったほうが良いかなと思います。</p><h3 id="docs配下の画像でどれがdraw-ioで編集可能か分かるように"><a href="#docs配下の画像でどれがdraw-ioで編集可能か分かるように" class="headerlink" title="docs配下の画像でどれがdraw.ioで編集可能か分かるように"></a>docs配下の画像でどれがdraw.ioで編集可能か分かるように</h3><p>基本的には拡張子を <code>.drawio.png</code> や <code>.drawio.svg</code> にするようにしています。ときには報告資料で作成したスライドの図表をそのまま、設計図に転用したい場合もあります（xxxの会議での決定事項です、といった背景説明の時にゆうこうなため）。その場合は <code>xxx.png</code> といった拡張子にして、区別するようにしています。</p><h3 id="チケットに記載した内容と設計ドキュメントで内容が重複する"><a href="#チケットに記載した内容と設計ドキュメントで内容が重複する" class="headerlink" title="チケットに記載した内容と設計ドキュメントで内容が重複する"></a>チケットに記載した内容と設計ドキュメントで内容が重複する</h3><p>しばしば、チケットに課題や背景、対応案などしっかり記載すると、設計ドキュメント側と重複する内容になりうることがあります。このケースだと、何かしら背景部分にアップデートが入ると、チケット・設計ドキュメントのダブルメンテになり、冗長です。</p><p>この場合は、チケットのリンクを設計ドキュメントに貼って省略するでよいでしょう。もし、設計開発上、差分や注意事項があれば追記すると良いと思います。その対応が後日、別メンバーへの引き継ぎなどで困る場合は、改めてチケットの内容を振り下ろすなどすると良いと思います。これはその機能の粒度やニーズ（ユーザーの関心事が大きく、改修頻度が多いかどうか）にも依存してくると思います。</p><h3 id="Markdownで表を作るのが面倒"><a href="#Markdownで表を作るのが面倒" class="headerlink" title="Markdownで表を作るのが面倒"></a>Markdownで表を作るのが面倒</h3><p>分かります。私は初回の表は、スプレッドシートで作成したのち、<a href="https://www.tablesgenerator.com/markdown_tables">tablegenerator</a>というWebツールで、Markdown変換しています。</p><p>業務システムだと列数がとにかく多くなってくるため、コツとしては絵文字などを上手く取り入れ、視認性が高く、楽しいドキュメントにすることだと思います。</p><p>例えば、「参照可能&#x2F;参照不可」 といった内容をセルに書くのではなく、「✅、✔、✘、❌」 といったアイコンで代用できないか考えます（凡例をつければよいのです）。</p><p>楽しく見せるというのは設計ドキュメントを維持管理する上で重要なモチベーションとなります。GitHubなどで有名なリポジトリのREADMEを見ると、各種バッチを付けたり、ターミナルの動画を駆使したり工夫が満載です。ぜひそういった技を取り入れていくと良いかなと思います。</p><h3 id="ドキュメントのレビューで、表現が伝わる-x2F-伝わりにくいでやり取りのホップ数が増える"><a href="#ドキュメントのレビューで、表現が伝わる-x2F-伝わりにくいでやり取りのホップ数が増える" class="headerlink" title="ドキュメントのレビューで、表現が伝わる&#x2F;伝わりにくいでやり取りのホップ数が増える"></a>ドキュメントのレビューで、表現が伝わる&#x2F;伝わりにくいでやり取りのホップ数が増える</h3><p>設計ドキュメントをこまめにアップデートしていると、その表現だと伝わりにくいといったレビューコメントが発生します。どうしても差分だけ見てコメントするとそのような感想になりがちですが、全体を通して読むと文脈上は自明であることも多いため、そういったレビューコメントを付けられても困惑してしまうことが多いです。</p><p>そのため、設計ドキュメントについても、できる限りsuggestionを用いることを徹底しています。コードより人それぞれの受け取り方が異なりやすいため、どう直してほしいかがダイレクトに伝わります。</p><img src="/images/20231101a/image.png" alt="image.png" width="1172" height="295" loading="lazy"><h3 id="tocは腐る"><a href="#tocは腐る" class="headerlink" title="tocは腐る"></a>tocは腐る</h3><p>toc（Table of Contents）をREADMEに手動で書いてくれる人がいます。しかししばしば陳腐化して本文と同期が取れなくなった設計ドキュメントを見てきました。チームルールとして一律、書かないようにするのが良いと思います。</p><p>もし、必要な場合は<a href="https://dev.classmethod.jp/articles/auto-generate-toc-on-readme-by-actions/">[GitHub]README.mdの目次生成をAction「toc-generator」による自動化で楽しよう | DevelopersIO</a> のような仕組みで統一すると良いと思います。</p><h3 id="気になったらすぐ直す習慣を"><a href="#気になったらすぐ直す習慣を" class="headerlink" title="気になったらすぐ直す習慣を"></a>気になったらすぐ直す習慣を</h3><p>1ファイルだけであれば、鉛筆マークから直接編集→Pull Requestまでブラウザで完結して作業できます。</p><img src="/images/20231101a/image_2.png" alt="image.png" width="1058" height="338" loading="lazy"><p>おそらく、設計ドキュメントを参照する場合、大半はブラウザで参照していると思うので、エディタに切り替えなくて済むため、便利です。</p><p>ドキュメント修正の敷居はなるべく高くせず気軽に直していく文化をチームで作れると良いと思います。</p><h2 id="やってみた結果"><a href="#やってみた結果" class="headerlink" title="やってみた結果"></a>やってみた結果</h2><p>運用のコツや所感で書いたように、ナレッジはいくつかあるものの、基本的には設計ドキュメントをGit管理することのメリットは大きいように思えます。</p><p>開発の制約として、テキストベースの設計書が許容できないなどといった前提がなければ、これからもこのような形式を採用すると思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>設計書をテキストファイルで作成し、Git管理することで、ドキュメントの陳腐化を防げないかトライしてみました。</p><p>最終的には開発メンバー各々の意識に支えられる面もありますが、コードをレビューするのと同様に設計レビューを行えるため、フローに載せやすさはあります。</p><p>自動生成、静的解析などCIでワークフローをより強化させやすい面も気に入っています。この方向で数年はドキュメント腐る問題にあらがってみたいと思います。</p><p>次は斎藤さんの<a href="/articles/20231102a/">初心者が暗号の基礎と歴史を勉強して見た</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88/">ドキュメント</category>
      
      <category domain="https://future-architect.github.io/tags/Git/">Git</category>
      
      
      <comments>https://future-architect.github.io/articles/20231101a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>時を駆けるモバイルアプリUI設計: 2007-2023の理論とトレンドを調べてみた</title>
      <link>https://future-architect.github.io/articles/20231031a/</link>
      <guid>https://future-architect.github.io/articles/20231031a/</guid>
      <pubDate>Mon, 30 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;※この記事は、&lt;a href=&quot;/articles/20231030a/&quot;&gt;秋のブログ習慣2023&lt;/a&gt;の２本目の記事となります&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>※この記事は、<a href="/articles/20231030a/">秋のブログ習慣2023</a>の２本目の記事となります</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>2023年の秋、スマートフォンやタブレットは私たちの日常生活に欠かせない存在となっています。</p><p>これらのデバイスに対するアプリケーション開発の中でも、UI(User Interface)とUX(User Experience)設計の議論については欠かすことができません。</p><p>「UI」という単語は広範囲にわたる意味を持ちますが、今回は「モバイルアプリのUI設計」という文脈に焦点を絞り、その理論の歴史とトレンドについて調べてみました。</p><h2 id="モバイルアプリのUI設計について"><a href="#モバイルアプリのUI設計について" class="headerlink" title="モバイルアプリのUI設計について"></a>モバイルアプリのUI設計について</h2><p>優れた「モバイルアプリのUI」は、どのようなものがあるでしょうか？</p><p>イメージしやすいものだと、以下のようなものがあります。</p><ul><li>ボタンの色や配置がわかりやすい。ホームボタンであれば家の形をしていたり、検索ボタンでは虫眼鏡の形をしているなど</li><li>タップしたときに何が起こるのか、ユーザーにわかりやすいこと。アプリヘッダーに「←」(左矢印)が表示されていれば、前の画面に戻るなど</li><li>通信が発生するボタンを押したときに、スピナー(通常は回転するアイコン)が表示され、かつ短時間で処理が終わり待ち時間が少ないこと</li></ul><p>逆に、優れていないUIについては以下のような報告もあります。</p><ul><li>モバイルショッピングアプリのUIの使いやすさがユーザーの購買意欲に直接影響するといったことを示唆する<a href="https://www.sciencedirect.com/science/article/pii/S1877050917322147">研究</a></li><li>ユーザーの90%がパフォーマンスの低下でアプリの使用を停止したとする<a href="https://www.toptal.com/designers/ux/ux-statistics-insights-infographic">調査レポート</a></li></ul><p>せっかく良い内容のアプリを作っても、UIがその価値を下げては台無しです。</p><p>では、良いUIとはどのようなものでしょうか？その設計とは？</p><p>次の項からは、モバイルアプリのUI設計の理論や思想について、どのようなものがあるのか。また、その歴史について書籍や論文などから調べてみました。</p><h2 id="モバイルアプリUI設計理論・思想の歴史"><a href="#モバイルアプリUI設計理論・思想の歴史" class="headerlink" title="モバイルアプリUI設計理論・思想の歴史"></a>モバイルアプリUI設計理論・思想の歴史</h2><p>モバイルアプリのUI設計の歴史を振り返ると、2007年のApple初代iPhoneの発表が大きなマイルストーンとして挙げられます。</p><p>それ以前にも、モバイルデバイスは存在していました。パーソナルデジタルアシスタント（PDA）やタッチスクリーン携帯電話と呼ばれるようなものです。これらのデバイスの中にはタッチスクリーンを備えたものもありましたが、多くはスタイラスによって操作されるもので、指タッチによる操作はあまり前提としていないものが多かったようです。</p><p>初代iPhoneでは、現在ではモバイルデバイス操作の標準となっている指タッチでの操作が導入され、それが世界的な流行を引き起こしました。これにより、モバイルデバイスの操作方法は劇的に変化し、モバイルアプリのUI設計についても新たな時代を迎えました。</p><p>そこからも、マルチタッチ技術の進化、Android,iOSなどのプラットフォームの進化、折りたたみデバイスの登場、あるいはユーザー自体の期待の向上など、様々な変化が起こってきました。それらに応じるように、近年のモバイルアプリのUI設計に至るまで、様々な理論や思想が議論され、そして進化し続けています。</p><p>以下では、今回調べたモバイルアプリUI設計理論や思想に関わる書籍・論文について、いくつかピックアップして時系列順に紹介していきます。</p><ol><li>Human Interface Guidelines(1977-現在)</li><li>Mobile Design and Development: Practical concepts and techniques for creating mobile sites and web apps(2009)</li><li>Brave NUI World: Designing Natural User Interfaces for Touch and Gesture by Daniel Wigdor and Dennis Wixon (2011)</li><li>Mobile First(2011)</li><li>Microinteractions: Designing with Details (2013)</li><li>Material Design (2014)</li></ol><p>※総務省の調査によると、日本のスマートフォン普及率は以下のような推移をたどっているようです。<br>時系列と普及率を見比べてご覧いただければと思います。</p><img src="/images/20231031a/image.png" alt="image.png" width="875" height="720" loading="lazy">[総務省「通信利用動向調査」より引用](https://www.soumu.go.jp/johotsusintokei/statistics/statistics05.html)<h3 id="1-Human-Interface-Guidelines-1977-現在"><a href="#1-Human-Interface-Guidelines-1977-現在" class="headerlink" title="1. Human Interface Guidelines(1977-現在)"></a>1. Human Interface Guidelines(1977-現在)</h3><p><a href="https://developer.apple.com/design/human-interface-guidelines">https://developer.apple.com/design/human-interface-guidelines</a></p><p>時系列順に紹介すると、最初に来るのはAppleが提唱した「HumanInterface Guidelines(HIG)」です。こちらは、Appleが定期的にアップデートをしているインターフェースのガイドラインで、歴史を遡ると初版である「The Apple II Human Interface Guidelines」は1977年のものとなります。</p><p>とはいえ、「Macintosh GUI」についての原則と設計哲学が記載されたものとなり、モバイルデバイスに関わるものとしては、「iPhone Human Interface Guidelines」が初代iPhoneの発売と同年である2007年に公表されています。</p><p>このHIGは現在に至るまで様々な製品、OSのアップデートに伴い改定され続けており、iOSの普及や統一されたインターフェースに大きな貢献をしているのではないでしょうか？</p><p>※余談ですが、弊社にもHIG(Healthcare Innovation Group)があって時々まぎらわしかったりします</p><h3 id="2-Mobile-Design-and-Development-Practical-concepts-and-techniques-for-creating-mobile-sites-and-web-apps-2009"><a href="#2-Mobile-Design-and-Development-Practical-concepts-and-techniques-for-creating-mobile-sites-and-web-apps-2009" class="headerlink" title="2. Mobile Design and Development: Practical concepts and techniques for creating mobile sites and web apps(2009)"></a>2. Mobile Design and Development: Practical concepts and techniques for creating mobile sites and web apps(2009)</h3><p><a href="https://www.oreilly.com/library/view/mobile-design-and/9780596806231/">https://www.oreilly.com/library/view/mobile-design-and/9780596806231/</a></p><p>次に紹介するのはBrian Flingによる執筆、O’Reilly Mediaから出版されている「Mobile Design and Development」です。この書籍では、モバイルアプリの設計や開発について網羅的に解説されています。</p><p>目次としては、以下のようになっており、記載当時のモバイルアプリ開発の状況についてや、モバイルUI設計の状況について知る上でとてもわかりやすいものでした。</p><blockquote><p>Chapter 1, A Brief History of Mobile<br>Chapter 2, The Mobile Ecosystem<br>Chapter 3, Why Mobile?<br>Chapter 4, Designing for Context<br>Chapter 5, Developing a Mobile Strategy<br>Chapter 6, Types of Mobile Applications<br>Chapter 7, Mobile Information Architecture<br>Chapter 8, Mobile Design<br>Chapter 9, Mobile Web Apps Versus Native Applications<br>Chapter 10, Mobile 2.0<br>Chapter 11, Mobile Web Development<br>Chapter 12, iPhone Web Apps<br>Chapter 13, Adapting to Devices<br>Chapter 14, Making Money in Mobile<br>Chapter 15, Supporting Devices<br>Chapter 16, The Future of Mobile</p></blockquote><p>目次を見るだけでも、当時のモバイルアプリ開発としてはネイティブアプリが絶対的な選択肢とはならず、Webアプリとどちらを選択するのかといったことも大きな議論の対象のひとつであったことが伺えます。</p><p>また、この書籍だけでなく、2011年ごろの論文<a href="https://dl.acm.org/doi/10.1145/1966989.1968203">6</a>,<a href="https://dl.acm.org/doi/pdf/10.1145/1941487.1941504#:~:text=,native">7</a>でも、ネイティブアプリ vs ウェブアプリといった文脈で盛んに議論がかわされていたようです。</p><p>2023年の現時点においても、ネイティブアプリとWebページをネイティブアプリのように表示できるPWA(Progressive Web Apps)の比較について議論されることがありますが、当時の状況では議論の内容が少々異なったようです。</p><blockquote><p>The mobile web historically has been so horrendous to deal with that<br>  the only way to create a compelling experience was to go native.<br>(p.156を引用)</p></blockquote><p>本書では上記で記載されているように、筆者によるとモバイルWebアプリケーションを開発すること自体に一定のハードルがあったようです。</p><p>背景として、当時のMobile SafariではCSSの<code>position:fixed</code>の動作に課題があったり<a href="https://stackoverflow.com/questions/743123/fixed-positioning-in-mobile-safari">8</a>、特定のOS標準のブラウザでは描画に課題があったり<a href="https://www.anandtech.com/show/3880/blackberry-torch-9800-review-keeping-rims-flame-alive/7">9</a>したように、モバイルブラウザ自体の技術が成熟していなかったことが考えられます。</p><p>次に、本記事のテーマであるUIについて触れられている項を見てみましょう。</p><blockquote><p>Although information architecture has become a common discipline in<br>    the web industry, unfortunately, the mobile industry—like software—has<br>    only a handful of specialized mobile information architects. Although<br>    mobile information architecture is hardly a discipline in its own right,<br>    it certainly ought to be. This is not because it is so dissimilar from its<br>    desktop cousin, but because of context, added technical constraints, and<br>    needing to display on a smaller screen as much information as we would on<br>    a desktop.<br>(p.104を引用)</p></blockquote><p>とあるように、モバイルに限らないUI&#x2F;UXといった議論は行われていたようですが<a href="http://www.jjg.net/elements/pdf/elements.pdf">10</a>、モバイルアプリのUI設計に特異な議論はまだ主流でなかったことが考えられます。</p><p>本書においては、「Chapter 7, Mobile Information Architecture」のセクションでは、モバイルアプリの情報アーキテクトとして、サイトマップやクリックストリームについて記載されています。既存のWebサイト構築とは異なるTipsとして、ユーザーの操作タスクが短いことがあげられています。</p><p>また、2023年と異なる興味深い点として、間違ったページに遷移しやすい構成である場合にユーザーに与える悪影響として以下が挙げられています。</p><ul><li>ユーザーが前のページに迅速に戻るための信頼性のあるブロードバンド接続を持っているとは限らないことを想定する必要があること</li><li>通信が発生することで、通信料金が発生すること</li></ul><p>「Chapter 8, Mobile Design」のセクションでは、モバイルアプリのデザイン構築についてのTipsが網羅的にわかりやすく記載されていました。特に、モバイルデバイスは通常のWebサイトとは違い、画面が小さいことを意識することの重要性について述べられている部分が多かったように感じます。</p><p>今ではResponsible Designと呼ばれる概念に近いですが、「Responsive Web Design」という単語自体が2010年にEthan Marcotteによって提唱されたものだそうで<a href="https://alistapart.com/article/responsive-web-design/">6</a>、記事執筆時に単語としては普及していなかった可能性もあります。</p><p>モバイルデバイスも考慮したレイアウトの議論についても、盛んに行われていたようです。</p><h3 id="3-Brave-NUI-World-Designing-Natural-User-Interfaces-for-Touch-and-Gesture-by-Daniel-Wigdor-and-Dennis-Wixon-2011"><a href="#3-Brave-NUI-World-Designing-Natural-User-Interfaces-for-Touch-and-Gesture-by-Daniel-Wigdor-and-Dennis-Wixon-2011" class="headerlink" title="3. Brave NUI World: Designing Natural User Interfaces for Touch and Gesture by Daniel Wigdor and Dennis Wixon (2011)"></a>3. Brave NUI World: Designing Natural User Interfaces for Touch and Gesture by Daniel Wigdor and Dennis Wixon (2011)</h3><p><a href="https://www.amazon.co.jp/Brave-NUI-World-Designing-Interfaces/dp/0123822319">https://www.amazon.co.jp/Brave-NUI-World-Designing-Interfaces/dp/0123822319</a></p><p>次に紹介するのはDaniel Wigdorによる執筆、Morgan Kaufmannから出版されている「Brave NUI World」です。この書籍では、タッチとジェスチャーを中心としたナチュラルユーザーインターフェース(NUI)の設計について記載されています。</p><p>NUI自体は、モバイルデバイスの文脈に閉じる話ではなく、あらゆる入力テクノロジーを活用して構築された自然なインターフェースに意味が及びます。ですが、本書では特にタッチとジェスチャーの相互作用に重点が置かれて紹介されており、この時期に盛んとなっているタッチジェスチャーに関する文献の中でも著名なものであったので本記事でピックアップします。</p><p>目次としては、以下のようになっています。(なかなかボリュームある本でした)</p><blockquote><p>PartⅠ Introducing the NUI<br>CHAPTER 1 Introduction<br>CHAPTER 2 The Natural User Interface<br>CHAPTER 3 Ecological Niche: Computing, the Social Environment, and Ways of Working<br>Part Ⅱ Design Ethos of NUI<br>CHAPTER 4 Less Is More<br>CHAPTER 5 Contextual Environments<br>CHAPTER 6 The Spatial NUI<br>CHAPTER 7 The Social NUI<br>CHAPTER 8 Seamless<br>CHAPTER 9 Super Real<br>CHAPTER 10 Scaffolding<br>CHAPTER 11 User Defferentiation<br>Part Ⅲ NewTechnologies: Understanding and Technological Artifacts<br>CHAPTER 12 The State-Transition Model Of Input<br>CHAPTER 13 Fat Fingers<br>CHAPTER 14 No Touch Left Behind: Feedback Is Essential<br>CHAPTER 15 Touch versus In-Air Gestures<br>Part Ⅳ Creating an Interaction Language<br>CHAPTER 16 Mechanics, Dynamics, and Aesthetics: The Application of MDA<br>CHAPTER 17 New Primitives<br>CHAPTER 18 The Anatomy of a Gesture<br>CHAPTER 19 Properties of a Gesture Language<br>CHAPTER 20 Self-Revealing Gesture<br>CHAPTER 21 A Model of the Mode and Flow of a Gesture System<br>Part Ⅴ No Such Thing as Touch<br>CHAPTER 22 Know Your Platform<br>CHAPTER 23 The Fundamentals Have to Work<br>CHAPTER 24 Numbers of Contents<br>CHAPTER 25 Contact Data: Shape, Pressure, and Hover<br>CHAPTER 26 Vertical, Horizontal, and Mobile<br>Part Ⅵ Process: How Do You Get There?<br>CHAPTER 27 The User-Derived Interface(UDI)<br>CHAPTER 28 Lessons in False-Gesture Recognition<br>CHAPTER 29 RITE with a Purpose<br>CHAPTER 30 A Word About Engineering</p></blockquote><p>本書では、GUIを中心とした既存のマウス入力と、タッチ入力を中心としたデバイス操作には大きな違いがあることを認識した上で設計をする必要性を強く主張しています。</p><p>具体的なタッチとジェスチャーに関する項目はPart Ⅲ以降から様々な角度、考え方から科学的に記載をされています。</p><p>全編通して参考になる本でしたが、一つ興味深い例を上げるとするのであれば「CHAPTER 13 Fat Fingers」が挙げられます。このセクションでは、指タッチで生じる課題として、①指はマウスよりも大きな領域で接触するため、画面のピクセル単位での正確なタッチが難しいこと②タッチしている箇所が指自体で見えなくなること、を課題として挙げています。言われてみれば当然と思う方もいるかもしれませんが、自身としてはUIを考える上であまり意識していなかった部分であったので興味深かったです。</p><p>この課題への対応として、①タッチオブジェクトを十分に大きくすることや、②「Iceberg Targets」と呼ばれる、画面領域をいくつかに分割し、タッチポイントに最も近いオブジェクトに対してアクションを発生させること、などが記載されていました。</p><p>現在のモバイルデバイスでは一般的となっていて、ユーザーとしても慣れ親しんでいるタッチ入力ですが、タッチ、タップ、フリック、ピンチ操作など、基本的な操作方法としては大きな変化はないように感じます。そういった意味でも、本書はそれらの基本操作をいかにユーザーに自然に操作できるように設計できるかという部分で大きく勉強になる本でした。</p><p>この書籍と同時期に、タッチジェスチャーに関する研究・書籍についても多く出ているようです。iPad (第1世代)も本書の出版と同年の2010年に発売され、他にもタッチスクリーン採用のモバイルデバイスが次々発売されていた時期のようで、タッチ入力がより普及していたことが伺えます。</p><h3 id="4-Mobile-First-2011"><a href="#4-Mobile-First-2011" class="headerlink" title="4. Mobile First(2011)"></a>4. Mobile First(2011)</h3><p><a href="https://www.amazon.co.jp/Mobile-First-Luke-Wroblewski/dp/1937557022">https://www.amazon.co.jp/Mobile-First-Luke-Wroblewski/dp/1937557022</a></p><p>次に紹介するのは、Luke Wroblewskiによる執筆、Ingramから出版された「Mobile First」です。統計的にはモバイルデバイスの普及が爆発的に始まった2010年近辺の出版であり、いよいよモバイルアプリの立ち位置が向上したことを思わせるタイトルです。</p><p>この書籍の内容としては、タイトル通り「モバイルファースト」、ウェブサイトやアプリケーションをまずモバイル向けに設計・構築することを推奨するものです。</p><p>目次は以下のようなものです。</p><blockquote><p>Part1 Why Mobile First?<br>CHAPTER1 Growth<br>CHAPTER2 Contstraints<br>CHAPTER3 Capabilities<br>Part2 How to go Mobile<br>CHAPTER4 Organization<br>CHAPTER5 Actions<br>CHAPTER6 Inputs<br>CHAPTER7 Layout</p></blockquote><p>「Part1 Why Mobile First?」では、当時のモバイルデバイスのシェア率の拡大を背景に、「モバイルファースト」とするメリットをさまざまな角度から論じています。</p><blockquote><p>So it’s not hard to imagine how another bold prediction<br>like “mobile phones will overtake PCs as the most common<br>web access devices worldwide by 2013” will happen much<br>earlier than predicted as well (<a href="http://bkaprt.com/mf/10">http://bkaprt.com/mf/10</a>).<br>(p.8を引用)</p></blockquote><p>上記では、「したがって、「モバイル電話は2013年までに世界中で最も一般的なウェブアクセスデバイスとしてパソコンを上回るだろう」というような大胆な予測が、予想よりもはるかに早く実現するのは難しくありません」と言った趣旨の内容が記載されており、「2013年までに」こそ日本では実現しましたが、現時点では実際にスマートフォンの普及率がPCと逆転していることもあり感慨深いです。</p><p>また、UI設計に関するセクションとしては、CHATPTER5 ~ 7が具体的な内容に踏み込んでいます。</p><p>「CHAPTER5 Actions」では、タップ操作を始めとしたタッチ対象オブジェクトのサイズについてや、タッチジェスチャーについて言及されています。また、本記事の前項で紹介したNUIが紹介されていますが、GUIとNUIの過渡期にあることを念頭にインターフェースデザインを考える必要があると記載されてもいます。</p><p>「CHAPTER6 Inputs」では、モバイルアプリでの入力タイプについて言及されています。ウェブサイトで使用されてきた、チェックボックスやラジオボタン、パスワード、ドロップダウン、ファイルの選択、送信ボタン、プレーンテキストなどについて、モバイルデバイス特有の意識すべきことなどが記載されています。</p><p>「CHAPTER7 Layout」では、モバイルデバイス特有のレイアウトについて言及されています。レスポンシブルの必要性や、シンプルに作ることの重要性については、今も変わらない重要なことであると感じさせられました。</p><p>本書では、モバイルデバイスの急速な普及を背景に、「モバイルファースト」の思想について記載されていました。優れたUIについて言及する中で、様々な既存アプリの比較も行っており、モバイルアプリの発展自体が背景にあるようにも考えられる内容で興味深かったです。</p><h3 id="5-Microinteractions-2013"><a href="#5-Microinteractions-2013" class="headerlink" title="5. Microinteractions (2013)"></a>5. Microinteractions (2013)</h3><p><a href="https://www.oreilly.com/library/view/microinteractions/9781449342760/">https://www.oreilly.com/library/view/microinteractions/9781449342760/</a></p><p>次はこちらのDan Safferによる執筆、O’Reilly Media出版の書籍を紹介します。<br>本書は以下の目次で構成されています。</p><blockquote><p>Chapter 1, Designing Microinteractions<br>Chapter 2, Triggers<br>Chapter 3, Rules<br>Chapter 4, Feedback<br>Chapter 5, Loops and Modes<br>Chapter 6, Putting It All Together</p></blockquote><p>本書では、「Microinteractions」を製品の機能的のうち細部のインタラクティブなものを示しています。例えば、パスワードのバリデーションチェック(今入力しているのものが、OKなのか、文字数不足なのかのリアルタイム表示)が挙げられます。</p><p>詳細については本書を読んでいただきたいのですが、マイクロインタラクションについて、本書では「Triggers」「Rules」「Feedback」「Loop&amp;Modes」の４つで構成される、として定義し、それぞれの定義や原則について詳細に記載されています。</p><p>ユーザーが直感的に操作する上で、明確なフィードバックがあることは重要で、常に意識して設計していきたい要素であると感じました。</p><h3 id="6-Material-Design-2014-x2F-2018-x2F-2021"><a href="#6-Material-Design-2014-x2F-2018-x2F-2021" class="headerlink" title="6. Material Design (2014&#x2F;2018&#x2F;2021)"></a>6. <strong>Material Design (2014&#x2F;2018&#x2F;2021)</strong></h3><p><a href="https://m1.material.io/">https://m1.material.io/</a><br><a href="https://m2.material.io/">https://m2.material.io/</a><br><a href="https://m3.material.io/">https://m3.material.io/</a></p><p>モバイルアプリに固有の内容ではありませんが、こちらは2014年にGoogleが提唱したUI&#x2F;UXのデザインである「Material Design」の紹介です。</p><p>※Material DesignはM1,M2,M3の3つが存在しますが、2014年に提唱された最初のものがM1となります</p><p>当時提唱されたMaterial Designの目標としては、以下の2つが記載されています。</p><blockquote><p>Create a visual language that synthesizes classic principles of good design with the innovation and possibility of technology and science.<br>(直訳: 良いデザインの古典的な原則と技術や科学の革新と可能性を統合する視覚言語を作成する。)</p></blockquote><blockquote><p>Develop a single underlying system that allows for a unified experience across platforms and device sizes. Mobile precepts are fundamental, but touch, voice, mouse, and keyboard are all ﬁrst-class input methods.<br>(直訳: プラットフォームやデバイスのサイズを問わず、統一された体験を可能にする単一の基盤となるシステムを開発する。モバイルの原則は基本的であるが、タッチ、音声、マウス、キーボードすべてが第一級の入力方法である。)</p></blockquote><p>また、原則として以下の3つも掲げており、次が特徴として記載されています。</p><ol><li><strong>Material is the metaphor</strong><ul><li>紙のような物理的性質を持つインターフェースを意識し、ユーザーが直感的に操作しやすいUIを作る基盤となること</li></ul></li><li><strong>Bold, graphic, intentional</strong><ul><li>意図的な色の選択、エッジツーエッジの画像、大規模なタイポグラフィ、意図的な空白は、ユーザーをエクスペリエンスに没頭させる大胆でグラフィックなインターフェイスを作成すること</li></ul></li><li><strong>Motion provides meaning</strong><ul><li>モーションが意味があり適切であり、注意を集中させ、継続性を維持させること</li></ul></li></ol><p>これらの思想だけではなく、Material Designに沿ったダイアログ、カードを始めとした多様なコンポーネントを例示していることも大きな特徴です。これらの導入により、特にAndroidではモバイルアプリのUI設計においても一貫性が強調することができたのではないでしょうか？</p><p>2023年時点ではMaterial Design 3が最新となっていますが、アプリ開発をする上で個人的にも多用させていただいているものとなります。</p><h2 id="近年・将来のモバイルアプリUI設計のトレンドについて考察"><a href="#近年・将来のモバイルアプリUI設計のトレンドについて考察" class="headerlink" title="近年・将来のモバイルアプリUI設計のトレンドについて考察"></a>近年・将来のモバイルアプリUI設計のトレンドについて考察</h2><p>前のセクションでは、モバイルアプリUI設計に関する理論や代表的な書籍を選び、簡単に紹介させていただきました。</p><p>このセクションでは、将来のトレンドに焦点を当てて、私の個人的な考えを共有します。</p><p>まず、モバイルアプリUI設計の過去の推移を振り返ると、2007年のiPhone登場以降、初期段階では既存のウェブサイトのレイアウトをモバイルに適応・進化させる試みが盛んに行われました。その後、モバイルデバイスのシェアが急速に拡大する中、「モバイルファースト」、「レスポンシブデザイン」、「NUI（Natural User Interface）」といった理論が発展し、ガイドラインが整備され、設計プロセスが成熟していきました。</p><p>これらの理論の中でも、「タッチ入力」によるユーザーインターフェイスの進化が中心的な役割を果たしていると考えることができます。</p><p>それでは、これからのトレンドはどのようなものが考えられるでしょうか？</p><p>1つ目のトレンドとして、デバイスの進化、特に「タッチ入力」を補完または置き換える新しい入力方法の登場が考えられます。例えば、SiriやAlexa、Google Assistantに挙げられるような、音声ユーザーインターフェイス（VUI）や、Meta Quest3に搭載されている視線追跡技術などがあげられます。これらの技術がモバイルデバイスで「あたりまえ」になれば、「タッチ入力」が時代を変えたように、モバイルアプリUI設計も大きく変わるかもしれません。</p><p>2つ目のトレンドとして、AIを活用したモバイルアプリUI設計の変革が考えられます。ChatGPTをはじめとする近年のAI技術の進化は著しく、実際に以下のような、強化学習を用いた適応型UI、AUI(Adapting User Interface)の研究もされており、ユーザーの行動を学習し、UIを自動で最適化したり、あるいは個々のユーザーに合わせたUIを提供できる時代が来るかもしれません。</p><ul><li><a href="https://ar5iv.labs.arxiv.org/html/2103.06807">Adapting User Interfaces with Model-based Reinforcement Learning</a></li><li><a href="https://arxiv.org/abs/2209.12660">MARLUI: Multi-Agent Reinforcement Learning for Adaptive UIs</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、モバイルアプリUI設計に関わる書籍や理論をいくつかピックアップし、簡単に紹介を行いました。</p><p>現在では、これらの設計・理論・技術を基盤として、新たな入力インターフェースや、AIを用いたUIの最適化などが研究・議論されています。</p><p>本記事が、モバイルアプリのUI設計についてなにか考えるきっかけになれば幸いです。</p><p>次は真野さんの <a href="/articles/20231101a/">設計ドキュメント腐る問題、Git管理で運用してみた結果</a> です。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>Wonjin Jung. “The Effect of Representational UI Design Quality of Mobile Shopping Applications on Users’ Intention to Shop”. Procedia Computer Science, Volume 121, 2017, Pages 166-169, 2017</li><li>Designers. “Know Your User – UX Statistics and Insights (with Infographic)”.  <a href="https://www.toptal.com/designers/ux/ux-statistics-insights-infographic">https://www.toptal.com/designers/ux/ux-statistics-insights-infographic</a></li><li>情報通信統計データベース.”通信利用動向調査”. <a href="https://www.soumu.go.jp/johotsusintokei/statistics/statistics05.html">https://www.soumu.go.jp/johotsusintokei/statistics/statistics05.html</a></li><li>Apple. “Human Interface Guidelines”. <a href="https://developer.apple.com/design/human-interface-guidelines">https://developer.apple.com/design/human-interface-guidelines</a></li><li>Brian Fling.『Mobile Design and Development: Practical concepts and techniques for creating mobile sites and web apps』. O’Reilly Media. 2009</li><li>Andre Charland, Brian LeRoux. “Mobile Application Development: Web vs. Native: Web apps are cheaper to develop and deploy than native apps, but can they match the native user experience?”. Queue. Volume 9, Issue 4. 2011</li><li>Andre Charland, Brian LeRoux, Nitobi.”Mobile Application Development:Web vs. Native”. Queue.</li><li>stack overflow. “Fixed positioning in Mobile Safari” .<a href="https://stackoverflow.com/questions/743123/fixed-positioning-in-mobile-safari">https://stackoverflow.com/questions/743123/fixed-positioning-in-mobile-safari</a></li><li>ANANDTECH. “BlackBerry Torch 9800 Review: Keeping RIM’s Flame Alive”.<a href="https://www.anandtech.com/show/3880/blackberry-torch-9800-review-keeping-rims-flame-alive/7">https://www.anandtech.com/show/3880/blackberry-torch-9800-review-keeping-rims-flame-alive/7</a></li><li>Jesse James Garrett. “The Elements of User Experience”.<a href="http://www.jjg.net/elements/pdf/elements.pdf">http://www.jjg.net/elements/pdf/elements.pdf</a></li><li>A LIST APART.Ethan Marcotte. “Responsive Web Design”. 2010</li><li>Daniel Wigdor, Dennis Wixon. 『Brave NUI World: Designing Natural User Interfaces for Touch and Gesture by Daniel Wigdor and Dennis Wixon』. Morgan Kaufmann. 2011.</li><li>Luke Wroblewski.『Mobile First』.Ingram. 2011</li><li>Dan Saffer.『Microinteractions』. O’Reilly Media. 2013</li><li>Google. “Material Design”. <a href="https://m1.material.io/">https://m1.material.io/</a></li><li>Kashyap Todi,Gilles Bailly, Luis A. Leiva, Antti Oulasvirta. “Adapting User Interfaces with Model-based Reinforcement Learning”. 2021</li><li>Thomas Langerak, Sammy Christen, Mert Albaba, Christoph Gebhardt, Otmar Hilliges. “Thomas Langerak, Sammy Christen, Mert Albaba, Christoph Gebhardt, Otmar Hilliges”. arxiv. 2022</li></ol>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA/">モバイルアプリ</category>
      
      <category domain="https://future-architect.github.io/tags/UI/">UI</category>
      
      
      <comments>https://future-architect.github.io/articles/20231031a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>腰痛と闘うプログラマー</title>
      <link>https://future-architect.github.io/articles/20231030b/</link>
      <guid>https://future-architect.github.io/articles/20231030b/</guid>
      <pubDate>Sun, 29 Oct 2023 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231030b/maintain_good_posture.png&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;1024&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231030b/maintain_good_posture.png" alt="" width="1024" height="1024" loading="lazy"><p><a href="/articles/20231030a/">秋のブログ週間2023</a>の1日目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><strong>※この記事やこの本を読んだからと言って自身で診断を行わず、まずは整形外科などの医療機関にて診断を受けて、医師の方と治療方針を決定しましょう。また既に治療中の方は、取り組む前に一度医師や理学療法士の方と相談しましょう。</strong></p><p>腰が痛くて仕事にならない、プログラマーこそが天職なのにこの痛みと一生付き合っていかないといけないのか…と思っている方は結構多いのではないでしょうか？<br>かく言う自分も腰痛持ちで、20代前半で椎間板ヘルニアと診断されました。当時はヘルニアが神経を圧迫し歩くのもつらい時期もありましたが、通院によってなんとか回復しました。<br>しかし完全にはよくならず、残りの人生全てを腰を気にしながら生きないといけないのか、、、と絶望しておりました。</p><p>そんなこんなで腰痛人生を送ってきたわけですが、<a href="https://www.ido-netshopping.com/products/detail.php?product_id=5886">ケリー・スターレット式　「座りすぎ」ケア完全マニュアル</a>は自分の人生を変える一冊となりました。<br>本記事では読書の秋・スポーツの秋にぜひ読んで頂きたい本書を紹介していきたいと思います。</p><h2 id="本書の構成"><a href="#本書の構成" class="headerlink" title="本書の構成"></a>本書の構成</h2><p>本書は全7セクションに分かれていて、順序立てて姿勢を改善していく方法を紹介していきます。<br>また、本書は腰痛のみならずデスクワークが引き起こす全ての痛み（肩、首、腰）に対応しております。</p><ul><li><strong>姿勢の改善</strong><ul><li>Section1: 悪い姿勢がもたらすもの</li><li>Section2: アライメントが整い、安定した脊柱の重要性</li></ul></li><li><strong>運動の改善</strong><ul><li>Section3: 上手に動く～歩行、ヒンジ、スクワット、安定した肩～</li></ul></li><li><strong>習慣の改善</strong><ul><li>Section4: 立位ワークステーションのガイドライン</li><li>Section5: 座位のバイオメカニクスを最適化する</li></ul></li><li><strong>セルフケア</strong><ul><li>Section6: 基本的な身体のメンテナンス</li><li>Section7: 全身の可動性改善の処方箋</li></ul></li></ul><p>Section1～3では、論文の引用も挟みつつ主に科学的な視点で悪い姿勢による身体への影響や、なぜこの姿勢・運動が良いのかを説明していきます。<br>Section4～5は、姿勢が悪くならないようにどうやって習慣を改善していくかについて説明していきます。スタンディングデスクを始めたい方は、Section4を読んでから環境構築すると効果を最大化することができます。<br>Section6～7は、自分の現在地を知るための柔軟性テストに始まり、凝り硬まった身体に対してアプローチするためのストレッチ方法が紹介されています。もし、スタンディングデスクをやる気がない人でもこのセクションで紹介されている可動性改善メソッドは十分に読む・実践する価値がある内容です。</p><p>本書を新冊で買うと「<strong>”Know how”ではなく”Know why”が書かれた本</strong>」と記載された帯がついてくるのですが、まさにその通りの内容となっております。問題に対して「なぜ（Why）」が先に説明された後に「どのように（How）」アプローチしていくかが紹介されているため、理解を深めやすいです。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><h3 id="丸くなった背中"><a href="#丸くなった背中" class="headerlink" title="丸くなった背中"></a>丸くなった背中</h3><p>ケリー氏は言います。</p><blockquote><p>「食事の度にチョコレートドーナツを食べて、食後にタバコを1箱吸うことが長期的に健康に有益な影響をもたらさないことは直観的にわかるだろう。一方、姿勢に対しても同じレベルで直観が働かないことが問題なのである。」</p></blockquote><p>姿勢の悪さを気にしている人って案外少ないと思います。というよりも多分気づかないんですよね。<br>これは恐らく、自分自身の姿勢が目に見えないからなんだろうなーと思っています。例え鏡を使ったとしても、正面から見た状態では自分の姿勢がどうなっているかなんてほとんどわからないですよね。<br>かく言う自分も人に言われるまでは、日常的に猫背でストレートネックな状態であることに気づきませんでした。</p><p>ケリー氏は姿勢の悪い状態を、この木と同じ状態であると表現します。</p><img src="/images/20231030b/tree.png" alt="tree.png" width="1024" height="1024" loading="lazy"><blockquote><p>「この木は支えられていない。大雪は簡単にこの木を半分に折るか、川へと倒すだろう。」</p></blockquote><p>本来、人体には重量に対して均一に吸収できるような分散システムが備わっています。しかし、姿勢が悪いことによって一部の箇所に重量を集中させてしまうことで酷使され、破綻を招いてしまうわけです。<br>エンジニアはシステムを設計するうえで、一部の箇所が過負荷に陥らないように負荷分散をさせることが重要だと認識していると思います。それと同じように身体の負荷分散にも目を向ける必要があります。</p><h3 id="椅子に座るな、立て"><a href="#椅子に座るな、立て" class="headerlink" title="椅子に座るな、立て"></a>椅子に座るな、立て</h3><p>この本で主張したいことはこういうことだろ？と想像すると思いますが、まさにその通りです。<br>しかし、ただ立てばいいということではありません。<strong>姿勢良く</strong>立つ必要があります。<br>また環境によっては立って仕事ができない場合もあります。ケリー氏はこう言っています。</p><blockquote><p>「結局は座る方法が重要なのだ。」</p></blockquote><p>この本で一貫して主張していることは<strong>姿勢が良い状態を保ちましょう</strong>になります。<br>Section5に「座位のバイオメカニクスを最適化する」を設けているようにケリー氏は「椅子に座ること」に対して切り捨てているわけではありません。<br>また、スタンディングデスクを導入するだけでは姿勢の問題は解決に至りません。</p><h3 id="姿勢を整える"><a href="#姿勢を整える" class="headerlink" title="姿勢を整える"></a>姿勢を整える</h3><p>ケリー氏はブレーシングシーケンスと呼ばれる以下の3つの要素によって構成された姿勢の整え方を紹介します。</p><ul><li>腹式呼吸</li><li>殿筋（お尻の筋肉）の収縮</li><li>肩の外旋</li></ul><p>スタンディングデスクを導入したうえで、ブレーシングシーケンスによって姿勢を整えることで問題の改善に兆しが見えてきます。<br>しかし、ケリー氏は厳しく言い放ちます。</p><blockquote><p>（ブレーシングシーケンスは）少しの練習で習得可能である。問題は、習慣化できるかどうかである。何においても同じだが、実直な実践こそが習慣につながる。</p></blockquote><p>私たちは正しい姿勢がDNAにプログラミングされており、<strong>一時的に</strong>取り戻すことは可能ですが、コンピュータのように初期化して取り戻すことはできません。<br>デスクバウンド（机に張り付いている）な社会において、長年積み重なった悪い姿勢を改善するには時間がかかります。常に姿勢のチェックを繰り返し、自然に染み込ませることで習慣化する必要があります。</p><h3 id="立って仕事をするという選択"><a href="#立って仕事をするという選択" class="headerlink" title="立って仕事をするという選択"></a>立って仕事をするという選択</h3><blockquote><p>立って仕事をすることは、座って仕事をするよりもずっとよい選択である。なぜなら、立つことが運動への入り口となるからだ。</p></blockquote><p>多くの人々は人生の大半を仕事に費やすこととなりますが、その時間のほぼ全てを立つことによって姿勢に良い影響をもたらすことが可能となります。またケリー氏が言うように、立つことが運動への入り口となり、日常に運動を取り入れることが更なる身体への好影響となります。</p><p>しかし、一日中同じ姿勢で立っていると非常に疲れますし、結局座位と同じで筋肉が同じ長さで凝り硬まってしまいます。そこでケリー氏は姿勢のルーティンを紹介します。ルーティンを取り入れることによって、筋肉を作用させ続け、身体の血流を保ち、一日中立っていることを可能とします。</p><h3 id="セルフケア"><a href="#セルフケア" class="headerlink" title="セルフケア"></a>セルフケア</h3><blockquote><p>より重要なこととして、そもそも組織が適応的に硬直して、機能不全となって最初に痛みを感じる前に、予防のために基本的なメンテナンスを行う方法を理解しなければならない。言い換えれば、腰部が痛んだり、股関節が硬くなったりするのを待つ必要はない。</p></blockquote><p>痛みのあるなしに関わらず、<strong>予防としてのセルフケアストレッチ</strong>は非常に有用なもとのなります。また、長時間のセルフケア時間を取る必要はなく、就寝前に10～15分程度行えばよいともケリー氏は述べております。<br>自分も就寝前に行っており、一日で硬まりきった身体をほぐした状態で睡眠に入れるため非常におススメです。</p><blockquote><p>痛みがない生活を送り、間接と軟部組織が最適な状態になるように、戦略的かつ体系的なアプローチをとらなければならない。たとえば、腰部が痛む場合、その部位の軟部組織でフォームローラーを転がすだけでは、症状は回復しない。本当にこの問題を取り除くためには、計画的に、日常生活で脊柱のバイオメカニクスを改善して、（胸椎と股関節のような）腰部の上部・下部の部位にある軟部組織と間接制限も対象にすることを入れなければならない。</p></blockquote><p>つまり、「<strong>痛みのある部位ばかりが問題ではない</strong>」<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>ということを理解する必要があります。<br>最近フォームローラーがやたらと流行っていますが、痛みのある個所でコロコロやりがちです。結局、なぜその動きをするのか、なぜその姿勢をとるのかを理解していないと、自己満足コロコロで終わってしまいます。セルフケアを取り入れるには、まず<strong>HowよりもWhyを理解すること</strong>が非常に重要です。</p><p>Section6では自身の可動性を確認するための、以下8つのテストを紹介しています。</p><ul><li>ディープスクワットテスト</li><li>ピストルテスト</li><li>ヒップヒンジテスト</li><li>ソファーストレッチテスト</li><li>オーバーヘッドテスト</li><li>肩の内旋テスト</li><li>足趾・足部テスト</li><li>手関節テスト</li></ul><p>そしてSection7では上記のテスト結果に対する処方箋として、ストレッチ方法が紹介されております。どこが悪いかが分かったあとにちゃんと処方箋も用意されているため、すぐに改善へとつなげることができます。</p><h3 id="バイオメカニクス、ライフスタイル、可動性"><a href="#バイオメカニクス、ライフスタイル、可動性" class="headerlink" title="バイオメカニクス、ライフスタイル、可動性"></a>バイオメカニクス、ライフスタイル、可動性</h3><blockquote><p>セルフメンテナンスを1日10分～15分費やすことは、潜在的な問題が本格的な炎症になるのを防ぐのに役立つ。しかし、セルフメンテナンスは痛みの解消と可動域の改善における一部分にすぎないことも同時に理解してほしい。可動性を高めることによる変化を持続させ、真の利点を得るために、さらに2つの要素－バイオメカニクスとライフスタイル－を扱う必要がある</p></blockquote><p>しかしストレッチこそが銀の弾丸になるわけではないとケリー氏は釘を刺します。<br>ストレッチはあくまで硬くなった身体をほぐす役割であって、正しく動けない状態（バイオメカニクスが悪い状態）で、かつ座りすぎ（ライフスタイルが悪い状態）ではその効果が十分に発揮されないとケリー氏は述べています。また、そのような状態を穴の空いたタイヤに空気を入れ続けていると表現しております。まずは穴を埋めなければタイヤに空気は入りません。</p><blockquote><p>硬いせいで、うまく動けないのか、うまく動かないから硬まるのか？</p></blockquote><p>卵が先か、鶏が先かといった話に陥りますが、ケリー氏にとって答えは両方であると述べております。色々な複合要因から痛みが生じるのであって、一つ一つ紐解いていく必要があり、痛みを改善するには長い目で問題の根本を潰していく必要があります。<strong>週に1回マッサージに行ったからと言って痛みの問題は解決しないのです</strong>。</p><p>問題に対して論理立てながらアプローチしていくことが好きなエンジニアにとって、実は身体機能を理解して科学的に腰痛を改善するためのアプローチをとることは実は非常に相性がいいのではないかと思っています。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>硬まりきった身体を元の状態へ戻していくのは中々骨の折れるプロセスではありますが、地道にコツコツと続けていけば確実に成果が表れます。<br>自分も痛みが取れるまで2年くらいかかりましたが、今では趣味の筋トレにてBIG3<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>で腰を酷使しても問題ない状態にまで戻りました。<br>ぜひデスクワーク中の痛みを感じている方は一読してみてください。</p><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><h3 id="実際に立って仕事をしてみた"><a href="#実際に立って仕事をしてみた" class="headerlink" title="実際に立って仕事をしてみた"></a>実際に立って仕事をしてみた</h3><p>ここまで読んでスタンディングデスクをAmazonの買い物カゴに入れた方は一旦立ち止まりましょう。まずはスタンディングでの仕事を試してみて、買うかどうかを決めた方が良いと思います。</p><img src="/images/20231030b/PXL_20230905_010848231.jpg" alt="PXL_20230905_010848231.jpg" width="1200" height="2134" loading="lazy"><p><strong>※手作りスタンディングデスクの恒久的な利用は事故の元となるため、一時的な利用のみに留めて下さい。ある程度利用の目途が立ったら専用デスクを買いましょう。</strong></p><p>テーブルにこたつ机を設置することでスタンディングデスクを作ってみました。こたつ机の足には滑り止めがついており、ちょっとした揺れでは机がずれないようになっています。<br>実際1か月ほど、立って仕事をしてみたところ、</p><ul><li>疲れる<ul><li>めっちゃ疲れます。カロリー消費してる感。</li><li>かかとが痛い。<ul><li>スリッパを履く or 抗疲労マット買うなど足裏を労わること大切</li></ul></li></ul></li><li>眠くならない<ul><li>同じ姿勢でいられないので、自然と体が動いて眠くならないです。</li></ul></li><li>頭が冴える<ul><li>考え事をするとき歩き回れるので頭が働いている感あります。</li></ul></li><li>姿勢を気にしやすい<ul><li>座っているときよりも姿勢が悪い状態に気づきやすい気がします。</li><li>姿勢が悪くなったらブレーシングシーケンス</li></ul></li></ul><p>というのが実感です。<br>自分は初日から業務時間フルで立ってしまったために、ものすごく疲れて太ももパンパンでした。そのため、いきなり業務時間フルで立つ必要はなく、休み休みで身体を慣らしていく形がよさそうです。<br>また、昇降式デスクを買うかどうかは難しいところになります。ケリー氏も以下のように言っております。</p><blockquote><p>座位・立位のワークスステーションに関するコーネル大学の研究によれば、（昇降式デスクを）導入して最初の数か月は立つが（おそらく、珍しいため）、次第に机を低くして、座ることに戻ってしまい、再び立たなくなってしまう傾向があることが示されている<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p></blockquote><p>強制力がなくなると強い意志を持っていない限り、楽な状態をとってしまうのが人間です。こうなると値段の高い机だけが残ってしまいます。<br>これらを考えると、下げることのできないスタンディングデスクと座面の高い椅子を用意したほうが安く済んで、なおかつ立って仕事をする習慣が続くのではないかなーと思います。</p><p><a href="/articles/20231030a/">秋のブログ週間2023</a>の1日目でした。次は山本さんの<a href="/articles/20231031a/">時を駆けるモバイルアプリUI設計</a>です。</p><p>また、本記事のイラストはすべてDALL-E 3によって生成したものとなります。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://www.ido-netshopping.com/products/detail.php?product_id=5230">強める!殿筋</a>著のJohn Gibbons氏の名言。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">ベンチプレス、スクワット、デッドリフトといったパワーリフティング3種目の総称。現在、著者の3種目トータルは455kg。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">Bryan Walsh, &quot;The Dangers of Sitting at Work-and Standing,&quot; Time, April 13, 2011, <a href="https://healthland.time.com/2011/04/13/the-dangers-of-sitting-at-work%E2%80%94and-standing/">https://healthland.time.com/2011/04/13/the-dangers-of-sitting-at-work—and-standing/</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/">環境構築</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/">リモートワーク</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%98%E3%83%AB%E3%82%B9%E3%82%B1%E3%82%A2/">ヘルスケア</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%85%B0%E7%97%9B/">腰痛</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%98%87%E9%99%8D%E3%83%87%E3%82%B9%E3%82%AF/">昇降デスク</category>
      
      
      <comments>https://future-architect.github.io/articles/20231030b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>秋のブログ週間2023はじめます</title>
      <link>https://future-architect.github.io/articles/20231030a/</link>
      <guid>https://future-architect.github.io/articles/20231030a/</guid>
      <pubDate>Sun, 29 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231030a/halloween-gece73ccea_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;286&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231030a/halloween-gece73ccea_640.jpg" alt="" width="640" height="286" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG 真野です。</p><p>10&#x2F;31より秋のブログ週間というブログリレーを始めます。この記事はそのインデックスです。</p><h2 id="秋のブログ週間とは"><a href="#秋のブログ週間とは" class="headerlink" title="秋のブログ週間とは"></a>秋のブログ週間とは</h2><p>2020年から始まったブログリレーの企画です。元ネタは、秋の読書週間（文化の日を中心とした10&#x2F;27〜11&#x2F;9の2週間）です。これに合わせて、平日にブログ記事を投稿していこうというブログリレーなイベントです。</p><p>「春の入門祭り」、「夏の自由研究」、「秋のブログ週間」、「冬のアドベントカレンダー」と四季の名を冠に持つ、フューチャー技術ブログ4大ブログリレーの1つと言われています。</p><p>テーマは秋の読書週間のイメージで、普段のソースコードがでてくる技術記事ではなく、ソファーでゆっくり読めるような、読み物（エッセー）よりの記事を書いていこう、としています。元ネタが読書週間ですし、積読消化を進めるための書評記事もOKとしています。気になるタイトルの記事を読んで読書欲を刺激していきましょう。</p><p>12月にはお馴染みQiitaさんのアドベントカレンダーにも参加したいと思いますので、秋のブログ週間はちょうどその中間のまったりとした、秋の夜長を楽しむためにも読み物成分を中心として楽しんでいただければです。</p><p>過去のインデックスのリンクはこちらです。</p><ul><li><a href="/articles/20221031a/">秋のブログ週間連載2022を始めます</a></li><li><a href="/articles/20211027a/">秋のブログ週間連載2021を始めます</a></li><li><a href="/articles/20201026/">秋のブログ週間連載をはじめます</a></li></ul><h2 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h2><p>2023年は曜日の区切り的に、10&#x2F;30（月）から開始することになりました。例年になく活況で参加者が多いです。</p><div class="scroll"><table><thead><tr><th>Date</th><th>Name</th><th>Title</th></tr></thead><tbody><tr><td><strong>1週目</strong></td><td>🎃👻🍬</td><td>-</td></tr><tr><td>10&#x2F;30(月)</td><td>岸下優介</td><td><a href="/articles/20231030b/">腰痛と闘うプログラマー</a></td></tr><tr><td>10&#x2F;31(火)</td><td>山本竜玄</td><td><a href="/articles/20231031a/">時を駆けるモバイルアプリUI設計: 2007-2023の理論とトレンドを調べてみた</a></td></tr><tr><td>11&#x2F;1(水)</td><td>真野隼記</td><td><a href="/articles/20231101a/">設計ドキュメント腐る問題、Git管理で運用してみた結果</a></td></tr><tr><td>11&#x2F;2(木)</td><td>斎藤大樹</td><td><a href="/articles/20231102a/">初心者が暗号の基礎と歴史を勉強して見た</a></td></tr><tr><td>11&#x2F;3(金)</td><td>文化の日</td><td>-</td></tr><tr><td><strong>2週目</strong></td><td>🍄</td><td>-</td></tr><tr><td>11&#x2F;6(月)</td><td>木元颯人</td><td><a href="/articles/20231030a/">プロになるためのWeb技術入門」を新人が読んでみた</a></td></tr><tr><td>11&#x2F;7(火)</td><td>原木翔</td><td><a href="/articles/20231107a/">小学2X年生、100マス計算を毎日している</a></td></tr><tr><td>11&#x2F;8(水)</td><td>高瀬陸</td><td><a href="/articles/20231108a/">土地勘に頼らずに地の利がある場所をみつける方法</a></td></tr><tr><td>11&#x2F;9(木)</td><td>森直也</td><td><a href="/articles/20231109a/">「自在化身体論」の読書感想文</a></td></tr><tr><td>11&#x2F;10(金)</td><td>栗栖大樹</td><td>to be determined</td></tr><tr><td><strong>3週目</strong></td><td>🍂</td><td>-</td></tr><tr><td>11&#x2F;13(月)</td><td>大野朱理</td><td>魔法使いが夜更かしする場所</td></tr><tr><td>11&#x2F;14(火)</td><td>清水雄一郎</td><td>Docker・Kubernetes周りの本</td></tr><tr><td>11&#x2F;15(水)</td><td>工藤駿泰</td><td>to be determined</td></tr><tr><td>11&#x2F;16(木)</td><td>島ノ江励</td><td>人を選ぶ技術（仮）</td></tr><tr><td>11&#x2F;17(金)</td><td>佐藤更星</td><td>to be determined</td></tr><tr><td><strong>4週目</strong></td><td>🍁</td><td>-</td></tr><tr><td>11&#x2F;20(月)</td><td>寒河江功悟</td><td>カイゼン・ジャーニー</td></tr><tr><td>11&#x2F;21(火)</td><td>藤戸四恩</td><td>to be determined</td></tr></tbody></table></div><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>いつもはコードが本文に書かれていることも多いフューチャー技術ブログですが、この連載はスマホ片手で読めるような記事成分を高めたいと思います。約3週間+αですがどうぞお付き合いください。</p><p>アイキャッチ画像は<a href="https://pixabay.com/users/pixel2013-2364555/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2901944">S. Hermann &#x2F; F. Richter</a> from <a href="https://pixabay.com//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2901944">Pixabay</a>を利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%A7%8B%E3%83%96%E3%83%AD%E3%82%B0%E9%80%B1%E9%96%93/">秋ブログ週間</category>
      
      
      <comments>https://future-architect.github.io/articles/20231030a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【Flutter】Proxyがある社内ネットワーク環境でAndroidエミュレータからインターネットに接続する方法</title>
      <link>https://future-architect.github.io/articles/20231026a/</link>
      <guid>https://future-architect.github.io/articles/20231026a/</guid>
      <pubDate>Wed, 25 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。思い出をショートムービーとして残すアプリ、&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。思い出をショートムービーとして残すアプリ、<a href="https://postpix.jp/">PostPix</a>を作っている後藤田です。</p><p><a href="https://postpix.jp/">PostPix</a>はFlutterで作っています。ぜひ、ダウンロードしてあなたの思い出をショートムービーにしてみてください！</p><style>.linkable_img:hover {opacity:0.5;}</style><a  target="_blank" rel="noopener" class="linkable_img" title="PostPix | 旅行を通じた、ノスタルジックエクスペリエンスサービス" href="https://postpix.jp/" >    <img src="/images/20231026a/b6fc4438-8326-63c9-a373-1143d4d88207.png" alt="" width="1200" height="1067" loading="lazy"></a><h2 id="Androidエミュレータからプロキシサーバを超えてインターネットに出たい"><a href="#Androidエミュレータからプロキシサーバを超えてインターネットに出たい" class="headerlink" title="Androidエミュレータからプロキシサーバを超えてインターネットに出たい"></a>Androidエミュレータからプロキシサーバを超えてインターネットに出たい</h2><p>プロキシが存在するネットワーク内で、Androidエミュレータからインターネット接続ができず、頭を悩ませたことはありませんか？</p><p>私たちは、この課題に対する解決策として、<a href="https://github.com/ma91n/middleproxy/releases/tag/v0.0.3">middleproxy</a>（社内のエンジニアが作ってくれたツール）とFlutterの<a href="https://pub.dev/packages/native_flutter_proxy">native_flutter_proxy</a>ライブラリを活用しています。</p><p>この記事ではそれらについて解説します。</p><p>最終的な構成は次のようになります。</p><img src="/images/20231026a/env.png" alt="" width="945" height="529" loading="lazy"><p>なお、開発環境はWindows。プロキシは認証つきで、独自の証明書を利用する前提とします。</p><h2 id="1-Android仮想デバイスの作成"><a href="#1-Android仮想デバイスの作成" class="headerlink" title="1. Android仮想デバイスの作成"></a>1. Android仮想デバイスの作成</h2><p>まずは、Android仮想デバイス（AVD）を作成します。今回は <code>Pixel_4_XL</code> を利用するとします。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ %UserProfile%\AppData\Local\Android\sdk\emulator\emulator -writable-system -avd Pixel_4_XL_API_30</span><br></pre></td></tr></table></figure><p><code>%USERPROFILE%/.android</code>に <code>advancedFeatures.ini</code> を作成し、以下の2行を追加します。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">Vulkan</span> = <span class="literal">off</span></span><br><span class="line"><span class="attr">GLDirectMem</span> = <span class="literal">on</span></span><br></pre></td></tr></table></figure><h2 id="2-adbのインストール"><a href="#2-adbのインストール" class="headerlink" title="2. adbのインストール"></a>2. adbのインストール</h2><p><a href="https://source.android.com/docs/setup/build/adb?hl=ja">Android Debug Bridge（adb）</a>をインストールします。</p><p>必要に応じて、adbにPATHは通しておきます。</p><p>以下のように出力されればOKです。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; adb --version</span><br><span class="line">Android Debug Bridge version 1.0.41</span><br><span class="line">Version 33.0.3-8952118</span><br><span class="line">Installed as C:\Program Files\platform-tools\adb.exe</span><br></pre></td></tr></table></figure><h2 id="3-CA証明書のエミュレータへの転送"><a href="#3-CA証明書のエミュレータへの転送" class="headerlink" title="3. CA証明書のエミュレータへの転送"></a>3. CA証明書のエミュレータへの転送</h2><p>プロキシが要求する証明書が <code>custom_ca.cer</code> であり、その証明書をDesktop直下に配備したとします。</p><p>これをホストPCから、Androidエミュレータ側の、 <code>/sdcard/Download</code> にパスに転送します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> %USERPROFILE%\Desktop</span><br><span class="line">$ adb root</span><br><span class="line">$ adb disable-verity</span><br><span class="line">$ adb shell avbctl disable-verification</span><br><span class="line">$ adb reboot</span><br><span class="line"><span class="comment"># reboot 後に待機</span></span><br><span class="line">$ adb root</span><br><span class="line">$ adb remount</span><br><span class="line">$ adb push custom_ca.cer /sdcard/Download</span><br></pre></td></tr></table></figure><h2 id="4-証明書の読み込み"><a href="#4-証明書の読み込み" class="headerlink" title="4. 証明書の読み込み"></a>4. 証明書の読み込み</h2><p>エミュレータ上のAndroidを操作します。</p><p><code>歯車マーク</code> &gt; <code>Security</code> &gt; <code>Advanced</code> &gt; <code>Encryption &amp; credentials</code> &gt; <code>Install a certificate</code> &gt; <code>CA certificate</code> &gt; <code>Install anyway</code> &gt; 上のハンバーガーメニューから <code>Android SDK build for x86 を選択</code> &gt; <code>Download を開く</code></p><p>…すると、先ほど追加した、<code>custom_ca.cer</code> があるので、クリックして読み込みます。</p><h2 id="5-ローカルプロキシ起動"><a href="#5-ローカルプロキシ起動" class="headerlink" title="5. ローカルプロキシ起動"></a>5. ローカルプロキシ起動</h2><p><a href="https://github.com/ma91n/middleproxy/releases/tag/v0.0.3">middleproxy</a>から <code>middleproxy_0.0.3_Windows_i386.tar.gz</code> をダウンロード &amp; 解凍（ご自身の環境に合わせてダウンロードしてください）します。</p><p>次のようにプロキシ情報を環境変数に設定して、起動します。</p><figure class="highlight sh"><figcaption><span>起動イメージ</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=http://&#123;username&#125;:&#123;password&#125;@proxy.example.com:8000</span><br><span class="line"><span class="built_in">set</span> http_proxy_username=&#123;username&#125;</span><br><span class="line"><span class="built_in">set</span> http_proxy_password=&#123;password&#125;</span><br><span class="line">middleproxy.exe <span class="comment">#起動してもログは出ません。</span></span><br></pre></td></tr></table></figure><h2 id="6-エミュレータ上のプロキシ設定"><a href="#6-エミュレータ上のプロキシ設定" class="headerlink" title="6. エミュレータ上のプロキシ設定"></a>6. エミュレータ上のプロキシ設定</h2><p><code>WiFiマークを長押し</code> &gt; <code>AndroidWifi の歯車マーク</code> &gt; <code>右上の鉛筆マーク</code> &gt; <code>Advanced options</code> &gt; <code>Proxy</code> &gt; <code>Manual</code></p><ul><li>Proxy hostname <code>10.0.2.2</code></li><li>Proxy port: <code>9000</code></li></ul><p>を入力して保存します。</p><p>補足ですが、 <code>10.0.2.2</code> はエミュレータ上のAndroidからみた、ホスト側のIPです。</p><h2 id="7-アプリ側の設定をする"><a href="#7-アプリ側の設定をする" class="headerlink" title="7. アプリ側の設定をする"></a>7. アプリ側の設定をする</h2><p>設定ファイルに以下のネットワーク・セキュリティ設定を加えます。</p><figure class="highlight xml"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:networkSecurityConfig</span>=<span class="string">&quot;@xml/network_security_config&quot;</span></span></span><br></pre></td></tr></table></figure><p><code>res/xml/network_security_config.xml</code> を作成し、次を追加します。</p><figure class="highlight xml"><figcaption><span>res/xml/network_security_config.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span> <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">debug-overrides</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">certificates</span> <span class="attr">src</span>=<span class="string">&quot;@raw/custom_ca&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">debug-overrides</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>res/raw</code> に <code>custom_ca.cer</code> を配備して参照できるようにします。</p><h2 id="8-native-flutter-proxy"><a href="#8-native-flutter-proxy" class="headerlink" title="8. native_flutter_proxy"></a>8. native_flutter_proxy</h2><p>さて、やっとDartのコードです。<code>native_flutter_proxy</code> ライブラリの力を借りて、エミュレータ上のAndroidアプリからもインターネット接続を可能にします。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Flutterのmain.dartや適当な初期化箇所に以下を追加</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:native_flutter_proxy/custom_proxy.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:native_flutter_proxy/native_proxy_reader.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  WidgetsFlutterBinding.ensureInitialized();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> enabled = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">String?</span> host;</span><br><span class="line">  <span class="built_in">int?</span> port;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ProxySetting settings = <span class="keyword">await</span> NativeProxyReader.proxySetting;</span><br><span class="line">    enabled = settings.enabled;</span><br><span class="line">    host = settings.host;</span><br><span class="line">    port = settings.port;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">print</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (enabled &amp;&amp; host != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">final</span> proxy = CustomProxy(ipAddress: host, port: port);</span><br><span class="line">    proxy.enable();</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;proxy enabled&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>native_flutter_proxy</code> ですが、エミュレータの端末に設定されたシステムのプロキシ設定を読み込み、インターネット接続を行えるようにしてくれます。</p><h3 id="※それでもインターネット接続できない場合"><a href="#※それでもインターネット接続できない場合" class="headerlink" title="※それでもインターネット接続できない場合"></a>※それでもインターネット接続できない場合</h3><ol><li>Androidエミュレータ側のプロキシ設定を外してみる。（direct）</li><li>localhost:9000 にmiddleproxyが起動しているか確認する。（例： ホスト側のプロキシをproxy.example.com:8000 から、 localhost:9000 に変えてみて、ホスト側のブラウザが起動するか、もしくはcurlが通るか、確認してみる）</li></ol><h2 id="（任意）AndroidエミュレータへのChromeインストール"><a href="#（任意）AndroidエミュレータへのChromeインストール" class="headerlink" title="（任意）AndroidエミュレータへのChromeインストール"></a>（任意）AndroidエミュレータへのChromeインストール</h2><p>ここは任意ですが、エミュレータAndroid上にChromeをインストールしておくと、疎通などで便利なことがあるので合わせて設定しておくことをオススメします。</p><p><a href="https://www.apkmirror.com/apk/google-inc/chrome/chrome-69-0-3497-86-release/chrome-browser-69-0-3497-86-3-android-apk-download/?redirected=thank_you_invalid_nonce">こちら</a>からapkをダウンロードし、エミュレータ画面にdrag &amp; dropします。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>本記事では、Flutterにおけるプロキシが存在するネットワーク環境での、Androidエミュレータのインターネット接続方法について紹介しました。</p><p>この手順を参考に、効果的にエミュレータを利用し、みなさんの開発に役立てれば幸いです。</p><p>最後にまた宣伝させてください！！  </p><p><a href="https://postpix.jp/">PostPix</a>であなたの思い出をショートムービーという新しい形で残してみませんか？？<br><a href="https://postpix.jp/">PostPix</a>はFlutterで作成しています。ぜひダウンロードのほどお願いします！</p><a  target="_blank" rel="noopener"  class="linkable_img" title="PostPix | 旅行を通じた、ノスタルジックエクスペリエンスサービス" href="https://postpix.jp/">    <img src="/images/20231026a/PostPix2.png" alt="" width="1200" height="1067" loading="lazy"></a>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Android/">Android</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7/">プロキシ</category>
      
      <category domain="https://future-architect.github.io/tags/Flutter/">Flutter</category>
      
      <category domain="https://future-architect.github.io/tags/Android%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BF/">Androidエミュレータ</category>
      
      
      <comments>https://future-architect.github.io/articles/20231026a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rundeck(Community版)を触ってみた</title>
      <link>https://future-architect.github.io/articles/20231025a/</link>
      <guid>https://future-architect.github.io/articles/20231025a/</guid>
      <pubDate>Tue, 24 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Rundeckというジョブ管理ソフトウェアを用いて、IaCツールを運用フェーズでの利用促進を図れないか、検証してみます。本検証はAWS環境を用いて行っております。</p><p>何か調査や検証事項に不備・誤りがあれば、X（旧Twitter）などで連絡ください。タイトルの右上の鉛筆マークからPull Request形式で直接依頼も行うことができます。</p><h2 id="経緯"><a href="#経緯" class="headerlink" title="経緯"></a>経緯</h2><p>システムの構築フェーズではAnsibleやTerraformといったIaC関連のツールを利用したものの、運用フェーズでは生かされないことを、しばしば見てきました。品質管理の重要な要素として５Ｗ１Ｈ思考が求められますが、インフラ運用での変更はアプリケーションのインシデント(更改、障害など)に基づいて<strong>受動的</strong>に発生することが多く、そのマインドセットが失われてしまうことがあるように感じます。例えば、変更履歴はアプリケーション変更側で管理されるが、その変更内容がインフラ変更に紐づけられていない、あるいはインシデントへの対応を急ぐあまり、個別のサーバソースに無秩序に直接手を加えてしまうといった対応が挙げられます。</p><p><strong>インシデントに対して、いかに早急に対応するかということが最優先のミッションになる。</strong>それはインフラ運用管理者としての責任感に基づくものであり否定されるものではありませんが、構成管理上は望ましい結果を生み出さないでしょう。</p><p>インフラの運用は比較的少人数で数多くのサーバ管理を行っていることは多いです。数百台のサーバを10人に満たない人数で管理していることがあります。そのためインフラ変更は属人化された変更手法が暗黙に承認されている状況が多々あります。いかにサーバソースを直接の編集を防ぐか、実施履歴、変更内容(変更前、変更後ソース)を残すか。アプリケーション運用でも同様のことが言えますが、アプリケーション運用ではCI&#x2F;CDにより統制された運用が行われているケースが多く見受けられます。</p><p>CI&#x2F;CDではアプリケーションのデプロイ手法を画一されたワークフローに取り込めており、ソースコードを直接編集・置き換えるといったことが<strong>ご法度</strong>であるというマインドセットが形成されているという部分が大きいと考えてられます。</p><p>インフラ構築で利用されたIaCツールは仕様書・手順書といったドキュメントベースので引き継いでいるでしょう。これをCI&#x2F;CDと同じようにワークフローツールを用い変更手法を具現化したものと合わせて引き継ぐことで運用フェーズでの構成管理(品質均一化、構成管理)が向上するのではないかと考えてみました。</p><p>ワークフローツールについて、モノリシックなシステムでは、ジョブ管理システムに商用ソフトウェアを採用することは多いです。安定性もあり、運用主管部門が既知のツールで習熟度が高い場面ではすべからく採用となります。ただしジョブ数も少なく、実装するワークフローも単純な構成が予定されている案件においてはもう少しライトな構成の選択肢（つまり、Rundeck）があってよいとも思われます。</p><h2 id="Rundeckとは"><a href="#Rundeckとは" class="headerlink" title="Rundeckとは"></a>Rundeckとは</h2><ul><li>PagerDuty, Inc.によって開発されたジョブ管理ソフトウェア</li><li>Javaで動作</li><li>オープンソース版の「Rundeck Community」と、有償のエンタープライズ版の「Rundeck Enterprise」がある</li></ul><p>Community版とEnterprise版の違い<br><a href="https://www.rundeck.com/community-vs-enterprise">https://www.rundeck.com/community-vs-enterprise</a></p><p>この検証では、Community版のRundeckを利用しています。</p><ul><li>Rundeck Community：BUILD:4.17.0-20230925</li></ul><h2 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h2><p>Rundeckを構築するにあたりいくつかの構成を試してみました。結果としてCommunity版ではあまり意味のない構成も含まれます。</p><ol><li>シングルインスタンス構成</li><li>シングルインスタンス構成 + 外部データベース</li><li>デュアルインスタンス構成 + 外部データベース + ELB</li><li>シングルコンテナ構成 + 外部データベース</li><li>シングルコンテナ構成 + 外部データベース + シングルノード</li><li>伝統的なクラスタ構成(クラスタウェア＋ミラーディスクによるHAクラスタ)</li></ol><h3 id="1-シングルインスタンス構成"><a href="#1-シングルインスタンス構成" class="headerlink" title="1. シングルインスタンス構成"></a>1. シングルインスタンス構成</h3><p>最も基本的な構成です。</p><p>サポートされているサーバOSにJavaとRundeckをインストールすればすぐに利用でき、データベースにH2DB(H2 Database Engine)が組み込まれているようで、手軽に活用できます。</p><p>Rundeckのジョブ管理の使用感などを試したいのであれば最も適しています。</p><img src="/images/20231025a/image.png" alt="" width="264" height="258" loading="lazy"><h3 id="2-シングルインスタンス構成-＋-外部データベース"><a href="#2-シングルインスタンス構成-＋-外部データベース" class="headerlink" title="2. シングルインスタンス構成　＋　外部データベース"></a>2. シングルインスタンス構成　＋　外部データベース</h3><p>シングルインスタンス構成からデータベースのみを外部のRDBに配置したものです。</p><p>検証ではEC2上に作成したmariadbを利用しましたがRDSを用いることも可能です。基本構成からデータベースの堅牢性向上を狙ったものです。</p><img src="/images/20231025a/image_2.png" alt="" width="583" height="236" loading="lazy"><h3 id="3-デュアルインスタンス構成-＋-外部データベース-＋-ELB"><a href="#3-デュアルインスタンス構成-＋-外部データベース-＋-ELB" class="headerlink" title="3. デュアルインスタンス構成　＋　外部データベース　＋　ELB"></a>3. デュアルインスタンス構成　＋　外部データベース　＋　ELB</h3><p>Rundeckサービスを冗長構成としたものです。</p><p>データベースの他、ジョブスクリプトやログも共有する必要があるためS3を利用してます。ログのS3化はプラグインが利用できます。スクリプトに関してはジョブ定義のスクリプトパスをURLで指定できるので、S3にウェブサイトアクセス許可を設定することで可能となります。</p><p><strong>結果としてはCommunity版では可用性の向上は計れませんでした。</strong>ジョブ実行に関してはジョブ実行指示を行ったサーバを識別(rundeck.server.uuid)していて特定のインスタンスで実行されてしまうようです。Enterprise版ではクラスタ関連機能(High Availability Clusters、Auto Takeover)が利用でき排他的に複数のサーバで実行可能となるようです。</p><img src="/images/20231025a/image_3.png" alt="" width="874" height="361" loading="lazy"><h3 id="4-シングルコンテナ構成-＋-外部データベース"><a href="#4-シングルコンテナ構成-＋-外部データベース" class="headerlink" title="4. シングルコンテナ構成　＋　外部データベース"></a>4. シングルコンテナ構成　＋　外部データベース</h3><p>Rundeckはコンテナ環境でも利用可能です。基本構成としてはシングルインスタンス構成と同等です。</p><p>コンテナは揮発性であることからデータは外部に配置しております。</p><p>コンテナ化によってRundeckそのものの構成管理が容易になります。</p><img src="/images/20231025a/image_4.png" alt="" width="757" height="269" loading="lazy"><h3 id="5-シングルコンテナ構成-＋-外部データベース-＋-ノード"><a href="#5-シングルコンテナ構成-＋-外部データベース-＋-ノード" class="headerlink" title="5. シングルコンテナ構成　＋　外部データベース　＋　ノード"></a>5. シングルコンテナ構成　＋　外部データベース　＋　ノード</h3><p>ジョブ実行環境をノードとして登録しジョブを実行させることが可能です。Jenkinsのslaveノードや商用SWのエージェントと同じような利用方法でしょうか。ノードは先に紹介したいずれの構成でも利用可能です。</p><p>ジョブの実行環境をRundeckから排除することでRundeck側のSW構成が簡素化できます。RundeckからノードはSSH接続ができればよいです。</p><img src="/images/20231025a/image_5.png" alt="" width="895" height="278" loading="lazy"><h3 id="6-伝統的なクラスタ構成-クラスタウェア＋ミラーディスクによるHAクラスタ"><a href="#6-伝統的なクラスタ構成-クラスタウェア＋ミラーディスクによるHAクラスタ" class="headerlink" title="6. 伝統的なクラスタ構成(クラスタウェア＋ミラーディスクによるHAクラスタ)"></a>6. 伝統的なクラスタ構成(クラスタウェア＋ミラーディスクによるHAクラスタ)</h3><p>商用ジョブ管理ソフトウェアではしばしば用いられる冗長構成です。</p><p>Actinve&#x2F;StandbyのHAクラスタリング方式。パブリッククラウド環境ではストレージミラーリング機能を用いて実装することは一般的だと思います。クラスタソフトウェアが必要になるためRundeck構成が複雑になりがちです。データベースを同居させるか否かでも構成が変わってきます。</p><img src="/images/20231025a/image_6.png" alt="" width="830" height="396" loading="lazy"><h3 id="構成検証における考察"><a href="#構成検証における考察" class="headerlink" title="構成検証における考察"></a>構成検証における考察</h3><ul><li>基本構成<ul><li>インストールも容易ですぐに利用できます。Rundeckの利用を検討される場合はまずはこれで十分だと思います</li><li>開発環境やテスト環境などで本番環境のジョブ管理システムが利用できないケースなど、一時的にジョブワークフローを利用したい場合などでの用途もあると考えます</li><li>利用できるジョブ管理ツールがなく、複数のサーバ上でcronなどを用いて実行している非ミッションクリティカルなジョブを統制管理するために利用するといった用途にもよいかもしれません</li></ul></li><li>データ保全性を重視する構成<ul><li>Rundeckにおいて一定の耐久性(データ保全性)を必要とするのであればデータベースは外部データベース(RDB)を利用するべきでしょう</li><li>Enterprise版にあるクラスタ関連機能が利用できないため可用性の向上は難しいですが、データベースをRDB化することでデータ保全性は大きく向上させることが可能です</li></ul></li><li>可用性を重視する場合<ul><li>ミッションクリティカルな業務ジョブを想定する場合は、Enterprise版の検討を行うことがよいと考えます。非ミッションクリティカルな運用であっても可用性を高めたい場合はインスタンス&#x2F;コンテナのAutorecovery機能をを検討することがよいと思います。そのためにRundeckは常にシンプルな構成を維持する(データ外出し)ことが望まれます</li></ul></li><li>非推奨な構成<ul><li>伝統的なHAクラスタアーキテクチャはActive&#x2F;Standby構成であることが多く、その場合はサーバサイジングを負荷ピークで考えるためオーバースペックが生じたり、Standbyノードのリソースが平常に無駄に課金されることが生じてしまいます。パブリッククラウド環境では個人的にはあまり望ましい構成ではないと考えます。(Rundeckに限らずですが。。。)</li></ul></li><li>コンテナ化<ul><li>システムプラットフォームとしてコンテナアーキテクチャをすでに採用している場面であれば、Rundeckもコンテナ化することで低コストのジョブ管理システムを構成できます。コンテナ化することでRundeck構成の簡素化を維持継続しやすく障害時の回復も高速に実施できるでしょう。コンテナ化によって環境ごと(JT、ST、STG、PRD等)に個別コンテナを作成し、必要時のみ起動するといった運用も低コストで実現可能です</li></ul></li></ul><h2 id="ジョブ定義"><a href="#ジョブ定義" class="headerlink" title="ジョブ定義"></a>ジョブ定義</h2><h3 id="Community版での制約"><a href="#Community版での制約" class="headerlink" title="Community版での制約"></a>Community版での制約</h3><p>Community版ではEnterprise版で実装されている多くの機能が利用できません。その中でも業務アプリ運用で影響の大きいと思われる機能を紹介します。</p><ul><li><strong>Job Queuing</strong>: ジョブキューイング機能が実装されていません。同一ジョブを連続実行する場合などは考慮が必要です</li><li><strong>Failed Job Resume</strong>: ジョブステップでの再実行ができません。ジョブのリカバリポイントをジョブ単位で構成することが必要です</li><li><strong>Workflow Visualization、Ruleset Workflow Strategy Plugin</strong>: 商用ソフトウェアでは通常実装されているジョブワークフローのグラフィカルな表示・修正ができません。複雑なジョブ構築・修正は困難です</li><li><strong>Blackout Calendaring</strong>: カレンダー設定がありません。祝日など特殊な営業日の対応が難しいです</li></ul><h3 id="複雑なジョブワークフロー"><a href="#複雑なジョブワークフロー" class="headerlink" title="複雑なジョブワークフロー"></a>複雑なジョブワークフロー</h3><p>前述の制約事項でも記載した通り、RundeckのCommunity版では複雑なジョブワークフローを作成するのは難しいです。</p><p>基本的には実行単位はジョブであり、そのなかでステップに分割することで複数のタスクを実行します。ジョブネットという概念が見つけられませんでした。ジョブステップから別のジョブをトリガーしてつなげることは可能です。</p><p>リカバリポイントを加味した並列ジョブワークフローを作成してみました。</p><img src="/images/20231025a/image_7.png" alt="" width="1153" height="629" loading="lazy"><p>もう少しうまいやり方があるかもしれません。ご存知の方がいらっしゃればコメントをいただければです。</p><h4 id="ジョブ定義に関する考察"><a href="#ジョブ定義に関する考察" class="headerlink" title="ジョブ定義に関する考察"></a>ジョブ定義に関する考察</h4><p>複雑なジョブワークフローが要求される場合、Community版のRundeckを利用することは難しいです。</p><p>複雑なジョブフローを実装するためのツールがなく、実装する場合は構築工数のコストが大きくなることが想定されます。またジョブ障害時のリカバリ操作も難しくなります。</p><p>Community版を利用する場合のジョブフローとしては、直列に順列で実行するようはワークフローであったり、並列処理においても後続タスクに複数のジョブディペンデンシーを用いないジョブ構成が望ましいものと考えます。</p><h2 id="IaCワークフロー"><a href="#IaCワークフロー" class="headerlink" title="IaCワークフロー"></a>IaCワークフロー</h2><p>RundeckにはいくつかのIaC関連ツールへのプラグインが実装されており、Community版でも利用できるものがあります。先述したようにIaCツールを運用フェーズで利用促進するにはワークフローが必要と考えておりました。</p><p>モノリシックな構成では、システムの変更余地が高く、またそのために変更された内容が検出しづらいです。システム更改などの際、システム規模によっては現状調査に多大な工数が発生します。業務システムとしてはマイクロサービス化が進んでいますが、オンプレミス環境・パブリッククラウド環境で依然モノリシックなシステム環境は多数存在してします。</p><p>変更管理がきちんと行われている環境であっても、変更履歴はあるものの、それがサーバ構成管理ときっちり紐づけられている環境は多くはありません。オンプレミスの環境ではサーバ構成管理はHW構成(CPU,RAM,DISK等)のみであったりすることもあります。それをそのままパブリッククラウドに展開してしまうと、インスタンスの管理はインスタンスタイプやEBSサイズといったもののみになってしまいます。そのためサーバ内部の構成管理(SW,各パラメータなど)は疎かになりがちです。</p><p>また変更管理のトリガーは業務インシデント(更改、障害など)であることがほとんどであり、その結果としてインシデントのクローズで完了となり、サーバ構成変更として履歴として損なわれる状態になるといったこともあると感じております。</p><p>インフラへの変更をジョブワークフローとして生成しログとして残すことで各サーバへの変更履歴を明確化し、かつ、AnsibleやTerraformのコードが変更内容として外部に保存されることがワークフロー管理ツールを用いることで比較的容易に実現できると考えています。</p><h3 id="IaCワークフロー検証構成"><a href="#IaCワークフロー検証構成" class="headerlink" title="IaCワークフロー検証構成"></a>IaCワークフロー検証構成</h3><ul><li>RundeckとAnsibleをインストールしたコンテナを作成</li><li>Terraformをインストールしたコンテナを作成</li><li>TerraformコンテナをRundeckのノードとして追加</li></ul><img src="/images/20231025a/image_8.png" alt="" width="1131" height="629" loading="lazy"><h3 id="IaCワークフロー操作"><a href="#IaCワークフロー操作" class="headerlink" title="IaCワークフロー操作"></a>IaCワークフロー操作</h3><ol><li>IaC実行ユーザはS3バケットに実行するスクリプト類を格納(追加・修正)<ul><li>Terraformで構築するためのtfファイル、ジョブスクリプト、Ansible-playbookを格納</li></ul></li><li>Rundeckにジョブを登録<ul><li>Terraformでインフラ環境を構築ジョブ</li><li>Ansiblleでサービスパッケージの導入及びコンフィグレーヨンジョブ</li></ul></li></ol><img src="/images/20231025a/image_9.png" alt="" width="977" height="449" loading="lazy"><h4 id="IaCワークフロージョブ例"><a href="#IaCワークフロージョブ例" class="headerlink" title="IaCワークフロージョブ例"></a>IaCワークフロージョブ例</h4><ol><li>Terraform<ul><li>S3からtfファイル(providers.tf,backend.tf,各種tfファイル)ダウンロード</li><li>Terraform init</li><li>Terraform validate、Terraform apply</li></ul></li><li>Ansible<ul><li>S3からAnsible-playbookファイル(inventory,task,file,template)ダウンロード</li><li>パッケージインストール</li><li>パッケージ設定ファイル配布</li><li>サービス起動</li></ul></li></ol><p><strong>※実運用では、terraform planやAnsible dryrunなどで実行前に検証を行いますが、実行検証のため省略しております。</strong></p><img src="/images/20231025a/image_10.png" alt="" width="1116" height="412" loading="lazy"><h3 id="IaCワークフロー環境でのコンテナ化のメリット"><a href="#IaCワークフロー環境でのコンテナ化のメリット" class="headerlink" title="IaCワークフロー環境でのコンテナ化のメリット"></a>IaCワークフロー環境でのコンテナ化のメリット</h3><h4 id="運用コスト"><a href="#運用コスト" class="headerlink" title="運用コスト"></a>運用コスト</h4><p>既にコンテナ環境が整備されているのであれば、IaCワークフローで利用する場合はコンテナで運用することがおすすめです。</p><p>IaCリクエストは常時必要であることは稀で必要な時だけ起動できればよいことが多いと思われます。かつコンテナ化することでRundeck自体もリポジトリを利用することで低コストで変更管理できます。</p><h5 id="ノイズの防止"><a href="#ノイズの防止" class="headerlink" title="ノイズの防止"></a>ノイズの防止</h5><p>IaCの運用において実施過程で生じる不用意な修正が品質を大きく損なうケースがあります。</p><p>一時的に行ってしまった誤ったtfファイルやAnsible-playbookの修正が既設の構成状態との乖離を発生してしまい、同期した状態に回復することに多大な工数が生じてしまう、あるいは最悪運用が破綻してしまう場合があります。以前に実行したファイルが不要となったにもかかわらず、そのまま配置されていて意図しない修正が発生していまったなどということもありえなくはありません。</p><p>ユーザがサーバ上でtfファイルやAnsible-playbookなど設定ファイルの直接変更を防ぐことや、設定ファイルをSCM(S3やSubversionなど)で版管理することはIaCを維持するためには重要だと考えます。</p><p>コンテナの揮発性の性質は、ノイズの防止には都合のよいことだと考えます。</p><h5 id="セキュリティ"><a href="#セキュリティ" class="headerlink" title="セキュリティ"></a>セキュリティ</h5><p>環境ごと(開発環境、テスト環境、ステージング環境、本番環境など)それぞれにコンテナを用意しセキュリティ制限を設けることで環境間での誤った更新を防ぐといった点も便利かと思います。むろんサーバで分離することも可能ですが、コスト面や環境維持の観点でコンテナの方がメリット大きいと思われます。</p><p>セキュリティ制限とは、AWS環境でいえば各環境のコンテナごとにIAMロールやセキュリティーグループを設定し意図しない環境へのアクセスをブロックといった制御を指しております。</p><p>データベースは各環境ごとに作成するとコストが大きいため、１つのインスタンス上にデータベース・スキーマ等で分離することで十分であると考えます。IaCワークフローではジョブの実行多重度は多くなく、DB負荷は低いものと想定されるため環境ごとにDBインスタンスを用意するのは費用対効果が悪く感じます。</p><h4 id="IaCワークフローに関する考察"><a href="#IaCワークフローに関する考察" class="headerlink" title="IaCワークフローに関する考察"></a>IaCワークフローに関する考察</h4><p>IaCワークフローでの活用では、Rundeckでなければならないというものではありません。コンテナ化が容易であることやIaC関連のプラグインが存在することなどはRundeckのメリットではありますが、他のツールでも実現は可能かと思います。</p><p>Rundeckはそれを比較的容易にIaCワークフロー構築できるツールの一つであるということだと考えます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>ジョブ管理ツールとして、Rundeck Community版はミッションクリティカルな状況下において可用性・運用性の観点から採用は困難。ミッションクリティカル環境でRundeckの特性(豊富な他ツールとのプラグインなど)を利用したい場合はEnterprise版を検討する</li><li>Rundeck Community版は導入が容易であることから、非ミッションクリティカルな状況では利用価値はある。開発・テスト環境でのジョブワークフロー、非ミッションクリティカルなcronジョブの統制、CI&#x2F;CD、IaCワークフローツールとしてなど</li><li>IaCワークフローにおいてRundeckは有効なツールの一つとなりえる</li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/IaC/">IaC</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%BF%9D%E5%AE%88%E9%81%8B%E7%94%A8/">保守運用</category>
      
      <category domain="https://future-architect.github.io/tags/rundeck/">rundeck</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%83%AA%E3%83%95%E3%83%88/">クラウドリフト</category>
      
      
      <comments>https://future-architect.github.io/articles/20231025a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PostgreSQLのtimestamp with time zone型とGoのtime.Location</title>
      <link>https://future-architect.github.io/articles/20231024a/</link>
      <guid>https://future-architect.github.io/articles/20231024a/</guid>
      <pubDate>Mon, 23 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231024a/postgresql_logo.png&quot; alt=&quot;&quot; width=&quot;610&quot; height=&quot;280&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231024a/postgresql_logo.png" alt="" width="610" height="280"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。育休明けです。</p><p>PostgreSQLには <code>timestamp with time zone</code>（<code>timestamptz</code>: 長いので以後こちらで表記します）型が存在します。一見、タイムゾーン付きで日時データを保持してくれそうな名称ですが、そうではないよという話をさせてください。</p><h2 id="timestampz-の仕様"><a href="#timestampz-の仕様" class="headerlink" title="timestampz の仕様"></a>timestampz の仕様</h2><p><a href="https://www.postgresql.jp/docs/15/datatype-datetime.html">PostgreSQLのドキュメント 8.5.1.3. タイムスタンプ</a> には以下のような仕様が書かれています。</p><ol><li><code>timestampz</code>の内部に格納されている値は <strong>UTC</strong> である</li><li>入力文字列にタイムゾーンが指定されていれば、そのタイムゾーンを元にUTCに変換され保持される</li><li><code>timestampz</code>の値を取得すると、UTCから現行のタイムゾーンに変換されて表示される</li></ol><p>1,2 は timestamp <strong>with time zone</strong> という名称から、書き込み時のタイムゾーンも保持していると勘違いしちゃいがちですが、実際はそうじゃないよと認識すればOKです。理解できました。</p><p>個人的には、3は少しややこしいかなと思います。現行のタイムゾーンとは、すなわちDBセッションで有効なタイムゾーンを用いられると考えられ、確かに<code>to_char()</code> で文字列化したときや、 <code>psql</code>など一部のクライアントツール（いわゆるテキストフォーマットでやり取りする場合）に対しては正しいです。一方で、<code>jackc/pgx</code> のドライバー経由でDBを利用するクライアントアプリの世界から見ると、これは適用されません（理由を先に書くと、バイナリフォーマットではタイムゾーン情報を送信しないからです）。</p><h2 id="timestampz-を扱う際の留意事項"><a href="#timestampz-を扱う際の留意事項" class="headerlink" title="timestampz を扱う際の留意事項"></a>timestampz を扱う際の留意事項</h2><p>ということでGoで <code>jackc/pgx</code> を用いた時に <code>timestampz</code> 型のデータを扱う上で留意すべきことを言い換えてみます。</p><ul><li><code>timestampz</code> カラムは、内部的には64bit整数で保持しており、どのタイムゾーンで書き込まれたかは残っていない</li><li><code>timestampz</code> カラムをSQLで <code>to_char()</code> で表示する場合はセッションのタイムゾーンが利用される</li><li>セッションのタイムゾーンは、<code>jackc/pgx</code> がデフォルトで利用するバイナリフォーマットでは、クライアント側に送信されない（その代わり性能は高い）</li><li><code>timestampz</code> カラムをGoの <code>time.Time</code> にマッピングした場合に設定されるタイムゾーンは、書き込み時に用いたタイムゾーンでもなく、セッションで有効なタイムゾーンでもなく、<code>time.Time</code> パッケージのタイムゾーンの扱いに準拠する（※少なくても <code>jackc/pgx</code> を使う場合は）</li></ul><p>DBサーバにも、Goアプリ側にもタイムゾーンがあり少し混乱しやすいポイントかなと思います。少なくても私は混乱しました。反省と繰り返し防止のため、何がどう作用するか内容を整理して残します。</p><h2 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h2><p>ここから、PostgreSQLに <code>timestampz</code> を含むテーブルを作成し、タイムゾーンを変えたいくつかのパターンで、Goでデータを書き込み・読み込みして挙動を確認していきます。</p><p>検証用のPostgreSQLはdocker compose経由で利用します。タイムゾーン <code>TZ</code> は <code>Asia/Tokyo</code> を指定しています。<code>TZ</code> を指定すると <code>postgresql.conf</code> に設定されシステムデフォルトのタイムゾーンとなります。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.9&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:16.0-bullseye</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">pg</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">postgres</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">pass</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">postgres</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Tokyo&quot;</span></span><br><span class="line">      <span class="attr">POSTGRES_INITDB_ARGS:</span> <span class="string">&quot;--encoding=UTF-8 --locale=C&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pgdata:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5432:5432&quot;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">postgres</span> <span class="string">-c</span> <span class="string">log_destination=stderr</span> <span class="string">-c</span> <span class="string">log_statement=all</span> <span class="string">-c</span> <span class="string">log_connections=on</span> <span class="string">-c</span> <span class="string">log_disconnections=on</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">pgdata:</span></span><br></pre></td></tr></table></figure><p>起動します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>クライアントツールはこの記事ではターミナルでログを残したかったので <code>psql</code> を用います（パスワードはブログ用に分かりやすさ優先で環境変数経由でラフに渡しています。本来は <code>~/.pgpass</code> などを利用すべきかもしれませんが、ここでは簡易さを優先しています）。</p><p><code>psql</code> でセッションで有効なタイムゾーンを表示すると、 <code>Asia/Tokyo</code> であることがわかります。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ PGPASSWORD=pass psql -h localhost -p 5432 -U postgres -c <span class="string">&quot;select current_setting(&#x27;timezone&#x27;);&quot;</span></span><br><span class="line"> current_setting </span><br><span class="line">-----------------</span><br><span class="line"> Asia/Tokyo</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><h2 id="検証用のテーブル作成"><a href="#検証用のテーブル作成" class="headerlink" title="検証用のテーブル作成"></a>検証用のテーブル作成</h2><p>検証用にtimestamp with time zone（timestampz）型を含む <code>event</code> テーブルを用意します。</p><figure class="highlight sql"><figcaption><span>schema.sql</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> event</span><br><span class="line">(</span><br><span class="line">    event_id <span class="type">varchar</span>(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    event_at timestamptz <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>psql</code> を用いてDDLを流します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ PGPASSWORD=pass psql -h localhost -p 5432 -U postgres -f schema.sql</span><br><span class="line">CREATE TABLE</span><br></pre></td></tr></table></figure><h2 id="Go経由でDB操作"><a href="#Go経由でDB操作" class="headerlink" title="Go経由でDB操作"></a>Go経由でDB操作</h2><p>Goのアプリ経由で、データの書き込み&#x2F;読み込みを行ってみます。</p><h3 id="データ書き込み"><a href="#データ書き込み" class="headerlink" title="データ書き込み"></a>データ書き込み</h3><p>Go経由で <code>event</code> テーブルに2レコード書き込みます。内容は以下です。</p><div class="scroll"><table><thead><tr><th>イベントID</th><th>イベント時間</th></tr></thead><tbody><tr><td>0001</td><td>タイムゾーンなし（UTC）で現在日時</td></tr><tr><td>0002</td><td>JSTで現在日時</td></tr></tbody></table></div><p>ドライバーは <code>jackc/pgx/v5</code> です。フューチャー技術ブログに関連記事がありますので、よければ参照ください。</p><ul><li><a href="/articles/20210916a/">lib&#x2F;pq から jackc&#x2F;pgx への移行</a></li><li><a href="/articles/20210727a/">GoとPoatgreSQLでCOPY</a></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/jackc/pgx/v5&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">connURL := <span class="string">&quot;postgres://postgres:pass@localhost:5432/postgres?sslmode=disable&quot;</span></span><br><span class="line">conn, err := pgx.Connect(ctx, connURL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;pgx connect: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close(ctx)</span><br><span class="line"></span><br><span class="line">jstZone := time.FixedZone(<span class="string">&quot;Asia/Tokyo&quot;</span>, <span class="number">9</span>*<span class="number">60</span>*<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">args := [][]any&#123;</span><br><span class="line">&#123;<span class="string">&quot;0001&quot;</span>, time.Now()&#125;,</span><br><span class="line">&#123;<span class="string">&quot;0002&quot;</span>, time.Now().In(jstZone)&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">copyCount, err := conn.CopyFrom(ctx, pgx.Identifier&#123;<span class="string">&quot;event&quot;</span>&#125;,</span><br><span class="line">[]<span class="type">string</span>&#123;<span class="string">&quot;event_id&quot;</span>, <span class="string">&quot;event_at&quot;</span>&#125;, pgx.CopyFromRows(args))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;copy exec: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;copy: %d\n&quot;</span>, copyCount)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行して以下のような実行結果が出れば登録できました。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;go run .</span><br><span class="line">copy: 2</span><br></pre></td></tr></table></figure><h3 id="データ読み込み"><a href="#データ読み込み" class="headerlink" title="データ読み込み"></a>データ読み込み</h3><p>続いて読み込みです。Structを用意します。</p><figure class="highlight go"><figcaption><span>model.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Event <span class="keyword">struct</span> &#123;</span><br><span class="line">ID <span class="type">string</span></span><br><span class="line">At time.Time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>読み込みのときは<code>pgx.Connect()</code> を使っていましたが、ここでは <code>pgx.ParseConfig()</code> を利用しています。後々別のオプションを利用するために差分を小さくする目的であり、気にしないでください。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/jackc/pgx/v5&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">connURL := <span class="string">&quot;postgres://postgres:pass@localhost:5432/postgres?sslmode=disable&quot;</span></span><br><span class="line">config, err := pgx.ParseConfig(connURL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">conn, err := pgx.ConnectConfig(ctx, config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;pgx connect: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close(ctx)</span><br><span class="line"></span><br><span class="line">rows, err := conn.Query(ctx, <span class="string">&quot;select * from event&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;select query: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> e Event</span><br><span class="line"><span class="keyword">if</span> err := rows.Scan(&amp;e.ID, &amp;e.At); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;scan: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s %s\n&quot;</span>, e.ID, e.At.Format(time.RFC3339))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>タイムゾーンをUTCにして実行します。timeパッケージのGoDocを見ると、<code>TZ</code> 環境変数があればUnixシステムではそれを用いるとあるので、切り替えはこちらで行います。</p><blockquote><p>On Unix systems, Local consults the TZ environment variable to find the time zone to use.<br><a href="https://pkg.go.dev/time#Location">https://pkg.go.dev/time#Location</a></p></blockquote><p>動かすと、 <code>0001</code>はUTC、 <code>0002</code> はJSTにしたtime.Timeの値をDBに登録したのですが、結果は <strong>どちらもUTC</strong>になっていることがわかります。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ TZ=UTC go run .</span><br><span class="line">0001 2023-10-21T12:04:20Z</span><br><span class="line">0002 2023-10-21T12:04:20Z</span><br></pre></td></tr></table></figure><p>OSがWindowsの場合は <code>TZ</code> 環境変数を読み込んでくれなかったので、tzutilコマンドで切り替えます。こちらも当然結果は同じく、2レコードとも、AtフィールドがUTCのタイムゾーンとなっていることが確認できます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># UTCにタイムゾーン切り替え</span></span><br><span class="line">$ tzutil /s <span class="string">&quot;UTC&quot;</span></span><br><span class="line"></span><br><span class="line">$ go run .</span><br><span class="line">0001 2023-10-21T12:04:20Z</span><br><span class="line">0002 2023-10-21T12:04:20Z</span><br><span class="line"></span><br><span class="line"><span class="comment"># もとに戻す（JSTの場合）</span></span><br><span class="line">$ tzutil /s <span class="string">&quot;Tokyo Standard Time&quot;</span> </span><br></pre></td></tr></table></figure><p>今度はタイムゾーンをJSTに登録すると2レコードともJSTのタイムゾーンになることが確認できます（Windows側の実行例は割愛します）。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ $ TZ=Asia/Tokyo go run .</span><br><span class="line">0001 2023-10-21T21:04:20+09:00</span><br><span class="line">0002 2023-10-21T21:04:20+09:00</span><br></pre></td></tr></table></figure><p>つまり、最初に書いた挙動をすることがわかります。</p><ul><li>timestampz カラムをGoのアプリで読み取りする時は、<strong>Go側のタイムゾーン設定に依存</strong>する（環境変数 <code>TZ</code> や端末のタイムゾーンなど、time.Timeパッケージの仕様の値が用いられる）</li><li>DBのセッションで有効になっているタイムゾーンが、Goアプリの time.Time のタイムゾーンで利用されるわけでもない</li><li>まして、書き込み時に利用したタイムゾーンが使われるわけでもない</li></ul><h2 id="接続URLにタイムゾーンを設定すると？"><a href="#接続URLにタイムゾーンを設定すると？" class="headerlink" title="接続URLにタイムゾーンを設定すると？"></a>接続URLにタイムゾーンを設定すると？</h2><p>ドライバーによっては、DBを接続時にタイムゾーンを渡せるものもあります（例えばPostgreSQLのJDBCドライバーも <code>-Duser.timezone=Asian/Tokyo</code> で渡せるようです）。<code>pgx</code> の場合は次のような <code>RuntimeParams</code> を利用することで、セッションのタイムゾーンを変更できます。</p><p>例としてシンガポールのタイムゾーンを指定して結果がどう変わるか確認します。念のためセッションのタイムゾーンが本当に変わった確認するため、SELECT句に <code>current_setting(&#39;timezone&#39;)</code> を追加もしています。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">type Event struct &#123;</span><br><span class="line">ID string</span><br><span class="line">At time.Time</span><br><span class="line"><span class="addition">+TZ string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">connURL := &quot;postgres://postgres:pass@localhost:5432/postgres?sslmode=disable&quot;</span><br><span class="line">config, err := pgx.ParseConfig(connURL)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="addition">+config.RuntimeParams[&quot;timezone&quot;] = &quot;Asia/Singapore&quot;</span></span><br><span class="line"></span><br><span class="line">conn, err := pgx.ConnectConfig(ctx, config)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatalf(&quot;pgx connect: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">defer conn.Close(ctx)</span><br><span class="line"></span><br><span class="line"><span class="deletion">-rows, err := conn.Query(ctx, &quot;select * from event&quot;)</span></span><br><span class="line"><span class="addition">+rows, err := conn.Query(ctx, &quot;select *, current_setting(&#x27;timezone&#x27;) as tz from event&quot;)</span></span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatalf(&quot;select query: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">defer rows.Close()</span><br><span class="line"></span><br><span class="line">for rows.Next() &#123;</span><br><span class="line">var e Event</span><br><span class="line"><span class="deletion">-if err := rows.Scan(&amp;e.ID, &amp;e.At); err != nil &#123;</span></span><br><span class="line"><span class="addition">+if err := rows.Scan(&amp;e.ID, &amp;e.At, &amp;e.TZ); err != nil &#123;</span></span><br><span class="line">log.Fatalf(&quot;scan: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="deletion">-fmt.Printf(&quot;%s %s %s\n&quot;, e.ID, e.At.Format(time.RFC3339), e.TZ)</span></span><br><span class="line"><span class="addition">+fmt.Printf(&quot;%s %s %s\n&quot;, e.ID, e.At.Format(time.RFC3339))</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行します。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ TZ=UTC go run .</span><br><span class="line">0001 2023-10-21T12:04:20Z Asia/Singapore</span><br><span class="line">0002 2023-10-21T12:04:20Z Asia/Singapore</span><br></pre></td></tr></table></figure><p>セッションのタイムゾーンが <code>Asia/Singapore</code> に変わったものの、time.Timeに設定されるタイムゾーンはUTCのまま（time.Timeの仕様で <code>TZ=UTC</code> に設定されたタイムゾーンが利用される）であることが分かります。</p><p>接続時のパラメータで指定するタイムゾーンをいい感じに <code>time.Time</code> に設定してほしかったかもしれませんが、残念ながらそのような挙動ではないです。</p><h2 id="Goの設定として"><a href="#Goの設定として" class="headerlink" title="Goの設定として"></a>Goの設定として</h2><p><code>timestampz</code>型を扱う上で、time.TimeのタイムゾーンはDB側とは別に設定する必要があるという話をしました。<br>アプリ内で色々なタイムゾーンが混在すると不具合や、ログで表示される時刻などが乱れることで運用コストも増えてしまうので、通常はアプリ内である設定値に統一した方が良いでしょう。</p><p>一律的にGo側のタイムゾーンを変更するには、さきほどの <code>TZ</code> の環境変数を用いるといった手法の他に、以下のように直接ハードコードするという手もあります。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    time.Local = time.FixedZone(<span class="string">&quot;Asia/Tokyo&quot;</span>, <span class="number">9</span>*<span class="number">60</span>*<span class="number">60</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ただ、上記の手法だとtutuzさんの<a href="https://tutuz-tech.hatenablog.com/entry/2021/01/30/192956">GoでJSTのタイムゾーンを扱う方法</a>の記事にあるように、DATA RACEする可能性があるようです。回避するためにブランクimportなどの措置も面倒なので万能の解では無いですが、お手軽ではあります（私もよく利用してしまいます）。</p><p>個別対応になるため設定し忘れが怖いですが、プロジェクトルールとして <code>time.In()</code> を設定するという決めにするというのもあります。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jst = time.FixedZone(<span class="string">&quot;Asia/Tokyo&quot;</span>, <span class="number">9</span>*<span class="number">60</span>*<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// ...(中略)...</span></span><br><span class="line"><span class="keyword">for</span> _, e := <span class="keyword">range</span> events &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s %s\n&quot;</span>, e.ID, e.At.In(jst)) <span class="comment">// Inでタイムゾーンを指定する</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>書き込み時はともかく、読込み時もタイムゾーンを指定しないとならないのは、少し釈然としないところもありますが、忘れないようにしましょう。</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p>よく思いつきそうな疑問について、まとめます。</p><h3 id="DBセッションで用いるタイムゾーンってどう決まるの？"><a href="#DBセッションで用いるタイムゾーンってどう決まるの？" class="headerlink" title="DBセッションで用いるタイムゾーンってどう決まるの？"></a>DBセッションで用いるタイムゾーンってどう決まるの？</h3><p>bisqueさんの<a href="https://zenn.dev/team_zenn/articles/postgresql-timestamp">PostgreSQLのTimeZoneを理解する</a> が詳しいのでそちらも参照ください。</p><p>この記事で簡単にざっくり説明しますと、次の優先度で決まります。</p><ol><li><code>SET TIMEZONE TO &#39;xxx&#39;</code> で指定された値</li><li>コネクション接続時に指定された値</li><li>postgresql.confに書かれたデフォルト値</li></ol><h3 id="psql-などのSQLクライアントとして用いると、DB側のタイムゾーンを利用しているようですが？"><a href="#psql-などのSQLクライアントとして用いると、DB側のタイムゾーンを利用しているようですが？" class="headerlink" title="psql などのSQLクライアントとして用いると、DB側のタイムゾーンを利用しているようですが？"></a><code>psql</code> などのSQLクライアントとして用いると、DB側のタイムゾーンを利用しているようですが？</h3><p>確かに、<code>psql</code> は <code>select current_setting(&#39;timezone&#39;);</code> で表示されるタイムゾーンによって、<code>timestampz</code> の表示が変わります。他にも、<code>psqledit</code>、<code>DataGrip</code>でも同様の挙動でした。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">select</span> current_setting(<span class="string">&#x27;timezone&#x27;</span>);</span><br><span class="line"> current_setting </span><br><span class="line"><span class="comment">-----------------</span></span><br><span class="line"> Asia<span class="operator">/</span>Tokyo</span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> event;</span><br><span class="line"> event_id <span class="operator">|</span>           event_at            </span><br><span class="line"><span class="comment">----------+-------------------------------</span></span><br><span class="line"> <span class="number">0001</span>     <span class="operator">|</span> <span class="number">2023</span><span class="number">-10</span><span class="number">-21</span> <span class="number">21</span>:<span class="number">04</span>:<span class="number">20.445974</span><span class="operator">+</span><span class="number">09</span></span><br><span class="line"> <span class="number">0002</span>     <span class="operator">|</span> <span class="number">2023</span><span class="number">-10</span><span class="number">-21</span> <span class="number">21</span>:<span class="number">04</span>:<span class="number">20.445974</span><span class="operator">+</span><span class="number">09</span></span><br><span class="line">(<span class="number">2</span> <span class="keyword">rows</span>)</span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">set</span> timezone <span class="keyword">to</span> <span class="string">&#x27;UTC&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> event;</span><br><span class="line"> event_id <span class="operator">|</span>           event_at            </span><br><span class="line"><span class="comment">----------+-------------------------------</span></span><br><span class="line"> <span class="number">0001</span>     <span class="operator">|</span> <span class="number">2023</span><span class="number">-10</span><span class="number">-21</span> <span class="number">12</span>:<span class="number">04</span>:<span class="number">20.445974</span><span class="operator">+</span><span class="number">00</span></span><br><span class="line"> <span class="number">0002</span>     <span class="operator">|</span> <span class="number">2023</span><span class="number">-10</span><span class="number">-21</span> <span class="number">12</span>:<span class="number">04</span>:<span class="number">20.445974</span><span class="operator">+</span><span class="number">00</span></span><br><span class="line">(<span class="number">2</span> <span class="keyword">rows</span>)</span><br></pre></td></tr></table></figure><p><code>psql</code> およびその利用ライブラリである <code>libpq</code> の仕様に私は詳しくないですが、おそらく <code>libpq</code> はPostgreのDBサーバとのやり取りを、バイナリフォーマットではなく、テキストフォーマットを利用しています。テキストプロトコルの場合は。DBサーバ側がセッションのタイムゾーンの値を元に<code>timestampz</code> 型の表示を変えて、その値をクライアントである <code>psql</code> に送信するため、直感的な動作をします。</p><p>ちなみに、<code>libpq</code> は <code>PGTZ</code> という環境変数で、タイムゾーンを変更することができます（<a href="https://www.postgresql.jp/docs/15/libpq-envars.html#:~:text=PGTZ%E3%81%AF%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%AE%E6%99%82%E9%96%93%E5%B8%AF%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%BE%E3%81%99%E3%80%82%20(SET%20timezone%20TO%20...%E3%81%A8%E7%AD%89%E4%BE%A1%E3%81%A7%E3%81%99%E3%80%82)">SET timezone TO …と等価である</a> とありますが、DB側のログにはSET timezone To … が出てこなかったので、接続時に指定していると思われます）。</p><p>環境変数<code>PGTZ</code>でのタイムゾーンを<code>UTC</code>にした、<code>psql</code> コマンドを利用する例です。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ PGTZ=UTC PGPASSWORD=pass psql -h localhost -p 5432 -U postgres -c <span class="string">&#x27;select * from event;&#x27;</span></span><br><span class="line"> event_id |           event_at            </span><br><span class="line">----------+-------------------------------</span><br><span class="line"> 0001     | 2023-10-21 12:04:20.445974+00</span><br><span class="line"> 0002     | 2023-10-21 12:04:20.445974+00</span><br><span class="line">(2 rows)</span><br></pre></td></tr></table></figure><p>ちなみに、DBeaver 23.2.2 では、<code>set timezone to &#39;UTC&#39;</code> などをしても <code>timestampz</code> カラムを表示する際に利用するタイムゾーンに変わりはありませんでした（<code>+0900</code> のまま）。DBeaverはローカルのタイムゾーンを利用するため、もしローカル端末のタイムゾーンと、DBのタイムゾーンが異なる場合は、<code>dbeaver.ini</code> に <code>-Duser.timezone=xxx</code> を追加して、タイムゾーンを一致させる必要があるようです。</p><h3 id="timestampz-だけPostgreSQLのDBサーバからテキストフォーマットで受け取れば、セッションのタイムゾーン付きで受信できるため、それを元に-time-Time-にタイムゾーンを指定すればよいでは？"><a href="#timestampz-だけPostgreSQLのDBサーバからテキストフォーマットで受け取れば、セッションのタイムゾーン付きで受信できるため、それを元に-time-Time-にタイムゾーンを指定すればよいでは？" class="headerlink" title="timestampz だけPostgreSQLのDBサーバからテキストフォーマットで受け取れば、セッションのタイムゾーン付きで受信できるため、それを元に time.Time にタイムゾーンを指定すればよいでは？"></a><code>timestampz</code> だけPostgreSQLのDBサーバからテキストフォーマットで受け取れば、セッションのタイムゾーン付きで受信できるため、それを元に time.Time にタイムゾーンを指定すればよいでは？</h3><p>同じことを思ったのですが、<a href="https://github.com/jackc/pgx/issues/924#issuecomment-770910226">Scanning of timestamp without time zone forces UTC #924</a> を読んだところ、いくつか課題があるようです。</p><ul><li>PostgreSQL側で持つタイムゾーンと、クライアント側で持つタイムゾーンに互換性があるとは限らない</li><li>夏時間のため単純にテキストから時刻に変換すると、壊れる可能性がある</li></ul><p>これらの理由のため、対応は難しいようです。PRコントリビュートチャンスかと思いましたが、やはり簡単ではないですね…。</p><h3 id="DB接続時のセッションで有効なタイムゾーンってGoアプリの場合、どこに影響するの？"><a href="#DB接続時のセッションで有効なタイムゾーンってGoアプリの場合、どこに影響するの？" class="headerlink" title="DB接続時のセッションで有効なタイムゾーンってGoアプリの場合、どこに影響するの？"></a>DB接続時のセッションで有効なタイムゾーンってGoアプリの場合、どこに影響するの？</h3><p>セッションのタイムゾーンを、DBから取得した<code>timestampz</code>の列データを<code>time.Time</code>に適用してくれないなら、どこに影響するのかという疑問ですよね。</p><p>最もわかりやすい影響しそうな箇所は、「文字列」↔ <code>timestampz</code> にSQL 側で変換を行う場合でしょう。</p><p>具体例をあげると、SQL側で以下のような <code>timestampz</code> の項目を <code>to_char</code> で文字列に変換する場合には、セッションで有効なタイムゾーンが利用されます（この例だと <code>Asia/Tokyo</code> を利用していますね）。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ PGPASSWORD=pass psql -h localhost -p 5432 -U postgres \</span><br><span class="line">  -c <span class="string">&quot;select event_id, to_char(event_at, &#x27;YYYY-MM-DD HH24:MI:SS&#x27;) from event;&quot;</span></span><br><span class="line"> event_id |       to_char       </span><br><span class="line">----------+---------------------</span><br><span class="line"> 0001     | 2023-10-21 21:04:20</span><br><span class="line"> 0002     | 2023-10-21 21:04:20</span><br><span class="line">(2 rows)</span><br></pre></td></tr></table></figure><p>同様にGo側から日時情報を文字列で渡し、SQL側でパースして<code>timestampz</code>カラムに登録するような処理フローを行うと影響を受けるでしょう。</p><p>そのため、DBデフォルトのタイムゾーンや、DB接続時に指定するタイムゾーンは、Goアプリケーション側で利用するタイムゾーンと合わせることは必ず行うべきだと思います。<code>to_date()</code> や <code>to_char()</code> を将来に渡って必ず用いないという保証はないと思うからです。</p><h3 id="DB接続セッションのタイムゾーン値を利用してクエリ結果を-time-Time-型のフィールドにマッピングするときに自動で設定する実装をしたい"><a href="#DB接続セッションのタイムゾーン値を利用してクエリ結果を-time-Time-型のフィールドにマッピングするときに自動で設定する実装をしたい" class="headerlink" title="DB接続セッションのタイムゾーン値を利用してクエリ結果を time.Time 型のフィールドにマッピングするときに自動で設定する実装をしたい"></a>DB接続セッションのタイムゾーン値を利用してクエリ結果を time.Time 型のフィールドにマッピングするときに自動で設定する実装をしたい</h3><p>pgxにも同じような旨のIssueである、<a href="https://github.com/jackc/pgx/issues/520">How do you set the timezone connection variable? #520</a> が上がっていますが、少なくてもpgxにはそのような機能は無いようです。あまり探していませんがそういったライブラリが無いような気がします。（みんな、 <code>TZ</code> で指定するか、 <code>time.Local</code> に設定している？）。pgxは拡張性が高いパッケージなので、下回りを操作すれば実現できるかもしれませんが、私は試していません。こうやれば良いよと言うのがあればぜひ教えてください。</p><p><code>select current_setting(&#39;TIMEZONE&#39;)</code> で取得したタイムゾーンを、<code>time.In()</code> に設定して欲しい気持ちはよくわかります。</p><h3 id="go-sql-driver-x2F-mysql-みたいな-loc-x3D-Asia-2FTokyo”-オプションは無いの？"><a href="#go-sql-driver-x2F-mysql-みたいな-loc-x3D-Asia-2FTokyo”-オプションは無いの？" class="headerlink" title="go-sql-driver&#x2F;mysql みたいな loc&#x3D;Asia%2FTokyo” オプションは無いの？"></a>go-sql-driver&#x2F;mysql みたいな loc&#x3D;Asia%2FTokyo” オプションは無いの？</h3><p>自信がなくなってきましたが、少なくても <code>jackc/pgx</code> については、私が探した範囲では見つけられませんでした。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li><code>timestamp with time zone</code>(<code>timestampz</code>) 型はUTCでデータを保持する</li><li>セッションで利用されるタイムゾーン（DBデフォルトのタイムゾーンや接続文字列で指定した値など）は、少なくても <code>pgx</code> を利用する限りにおいては利用されず、 <code>time.Location</code> のタイムゾーンが設定される。別のタイムゾーンにしたい場合は、一般的には環境変数<code>TZ</code>を用いるか、<code>time.Location</code> の値を書き換えるか、個別に <code>time.In()</code> でタイムゾーンを書き換える必要がある</li><li>通常は、DB側のタイムゾーンと、Goアプリ側の <code>time.Time</code> が利用するタイムゾーンを一致させておくと良い</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.postgresql.jp/docs/15/datatype-datetime.html">https://www.postgresql.jp/docs/15/datatype-datetime.html</a></li><li><a href="https://scientre.hateblo.jp/entry/20150407/datetime_with_time_zone">https://scientre.hateblo.jp/entry/20150407/datetime_with_time_zone</a></li><li><a href="https://anakage.com/blog/how-to-setup-time-zone-in-windows-system/">https://anakage.com/blog/how-to-setup-time-zone-in-windows-system/</a></li><li><a href="https://tutuz-tech.hatenablog.com/entry/2021/01/30/192956">https://tutuz-tech.hatenablog.com/entry/2021/01/30/192956</a></li><li><a href="https://github.com/jackc/pgx/issues/520">https://github.com/jackc/pgx/issues/520</a></li><li><a href="https://stackoverflow.com/questions/72771272/how-to-setup-pgx-to-get-utc-values-from-db">https://stackoverflow.com/questions/72771272/how-to-setup-pgx-to-get-utc-values-from-db</a></li><li><a href="https://www.postgresql.org/docs/current/protocol-overview.html#PROTOCOL-FORMAT-CODES">https://www.postgresql.org/docs/current/protocol-overview.html#PROTOCOL-FORMAT-CODES</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/PostgreSQL/">PostgreSQL</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%BE%E3%83%BC%E3%83%B3/">タイムゾーン</category>
      
      <category domain="https://future-architect.github.io/tags/jackc-pgx/">jackc/pgx</category>
      
      <category domain="https://future-architect.github.io/tags/psql/">psql</category>
      
      
      <comments>https://future-architect.github.io/articles/20231024a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【技育祭2023秋 登壇レポート】エンジニアを目指す君たちはどう生きるか ～ソフトウェアアーキテクトのすゝめ～</title>
      <link>https://future-architect.github.io/articles/20231023a/</link>
      <guid>https://future-architect.github.io/articles/20231023a/</guid>
      <pubDate>Sun, 22 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231023a/geeksai2023fall.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;430&quot;&gt;

&lt;p&gt;TIG DX Unitの武田です。&lt;/p&gt;
&lt;p&gt;技育祭2023秋のDAY1 14:30 -</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231023a/geeksai2023fall.png" alt="" width="800" height="430"><p>TIG DX Unitの武田です。</p><p>技育祭2023秋のDAY1 14:30 - 15:15のセッションにて登壇させていただいた報告記事です。</p><h2 id="技育祭について"><a href="#技育祭について" class="headerlink" title="技育祭について"></a>技育祭について</h2><p><a href="https://talent.supporterz.jp/geeksai/2023autumn/">https://talent.supporterz.jp/geeksai/2023autumn/</a></p><p>技育祭はサポーターズさんが運営している、「技術者を育てる」ことを目的としたエンジニアを目指す学生のための日本最大のオンラインカンファレンスです。</p><p>弊社はスポンサーとして毎年登壇枠を頂いており、今回は私が登壇させていただく運びになりました。初めての参加でしたが、その名のとおり「お祭り感」満載の雰囲気があってとても楽しいイベントでした。</p><h2 id="当日の内容"><a href="#当日の内容" class="headerlink" title="当日の内容"></a>当日の内容</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/fd2e4a40329a4b5b801faa8bef04f950" title="エンジニアを目指す君たちはどう生きるか　～ソフトウェアアーキテクトのすゝめ～" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p><a href="https://speakerdeck.com/rhumie/enziniawomu-zhi-sujun-tatihadousheng-kiruka">https://speakerdeck.com/rhumie/enziniawomu-zhi-sujun-tatihadousheng-kiruka</a></p><p>まずタイトルについて「エンジニアを目指す君たちはどう生きるか ～ソフトウェアアーキテクトのすゝめ～」ということで、流行りのタイトルに乗っかろうとしましたが、安易に乗っかりすぎたかもしれません。登壇陣にはCEOやCTOクラスの方が多数いらっしゃる中、肩書のインパクトだとどうしても負けてしまうので、タイトルはとても大事です。<br>キャッチーで注目を集めつつ、自分の伝えたい内容を的確に伝えられるタイトルというのを目指したいですね。</p><p>発表については、「生き方」を軸としつつ、下記の2点をゴールとして構成しました。</p><ul><li>ソフトウェアアーキテクトとしての「生き方」を知る&#x2F;学ぶ</li><li>これからのエンジニアとしての「生き方」のヒントを得る</li></ul><p>このような内容にした背景として、そもそもソフトウェアアーキテクトやソフトウェアアーキテクチャがどのようなものなのか、私自身昔はうまく言語化できていなかったことが挙げられます。<br>アーキテクチャという言葉自体にまだ馴染みのない学生の方が多かったと思いますが、ソフトウェアアーキテクチャとは何たるかのイメージが少しでも明確になり、アーキテクティングの魅力を感じてもらえたら、という想いで資料は作りました。</p><p>アーキテクチャという抽象的な領域をわかりやすく伝えたいと思う一方で、デフォルメしすぎると正確さを欠いてしまうため、そのあたりのバランス感覚を意識するようにしました。</p><p>なお2022年秋の技育祭では、私の先輩である真野さんがソフトウェアアーキテクチャに関する話を発表しているため、合わせて読んでみると理解が深まると思います。<br><a href="https://future-architect.github.io/articles/20221019a/">https://future-architect.github.io/articles/20221019a/</a></p><h2 id="登壇してみて"><a href="#登壇してみて" class="headerlink" title="登壇してみて"></a>登壇してみて</h2><ul><li><p>Zoomのチャットを利用して学生と双方向のやり取りができるので、次回は（もしあれば）もっと活用しながら進めた方が盛り上がりますね。思いつきですが、何かのお題に対して一緒にアーキテクチャを考えるというのもトライしてみたいと思ったりしました。</p></li><li><p>発表時間について45分だと勘違い（実際は40分）をしており、やや早口になってしまった点は猛反省です。この場を借りてお詫び申し上げます。</p></li><li><p>技育祭は情報系の学生の参加者が多いと思いますが、私が文系出身だったこともあり学生のレベル感が掴み切れていない部分があるので、わかりやすかった&#x2F;わかりにくかった、簡単だった&#x2F;難しかった等々フィードバックを参考にしたいと思います。</p></li></ul><h2 id="当日頂いた質問"><a href="#当日頂いた質問" class="headerlink" title="当日頂いた質問"></a>当日頂いた質問</h2><p>質問いただいた方ありがとうございます。<br>頂いた質問についてはチャットログから拾ってここで回答させていただきます。</p><h3 id="質問1"><a href="#質問1" class="headerlink" title="質問1"></a>質問1</h3><p>Q. 個人で構成を設計してから開発に入る場合、間違いなく開発中に不備があり修正してしまうのですが、プロのアーキテクチャの方が設計した場合、開発中に修正はありますか？もしある場合、どのくらいの頻度の、そしてどれくらいの規模間の修正を経験したことがありますか？<br>　<br>A. 不備の度合いにもよりますが、今回お話した構成設計、技術選定、処理方式設計などのアーキテクチャ設計は、システムの開発を進める上で土台になる重要な部分であり、間違いがあった場合の影響（手戻り）が大きく、致命傷になる可能性があります。そのため実際の現場では、本開発に入る前にアーキテクチャのPoC（概念実証）を行い、小さく動くものを作りながら、ノックアウトファクター（致命的な不備）が無いか確認した上でアーキテクチャを確定させるというプロセスを踏んだりします。<br>もちろん設計段階で完璧なものができることは無く、開発を進める中やサービスをリリースした後で「こうすればよかった」という改善点はいろいろと出てくるので、そういったものは費用対効果（修正に費やす費用に対して効果があるか）を鑑みた上で、継続的に改善していく形になります。</p><h3 id="質問2"><a href="#質問2" class="headerlink" title="質問2"></a>質問2</h3><p>Q. クリーンアーキテクチャやオニオンアーキテクチャなど、ソフトウェア構造を決めるに当たってどんなことを考えて選定するのか聞いてみたいです。</p><p>A. クリーンアーキテクチャもオニオンアーキテクチャもヘキサゴナルアーキテクチャもレイヤの責務と依存関係を明確にするという意味では本質的には大差ありません。アーキテクトとして、実際の現場で意識するのは、開発者の「品質」と「生産性」を如何に向上させ、均質化（ムラのない状態に）できるかという点です。<br>実際の現場では複数人の開発者（私のこれまでの現場では20人から30人程度が多いですが、多いところでは100人を超える現場もあります。）で開発を進めますが、全員が全員スキルレベルが高いというわけではありません。</p><ul><li>開発者がどれだけすぐにアーキテクチャをキャッチアップして理解できるか。</li><li>開発者が実際にコードを書くときにどこに何を書くか迷いが生じたりしないか、開発者によってバラつきが生じたりしないか。（責務が明確に定義できるか。）</li><li>開発者が書くコードの量が過剰に増えていないか。</li><li>テストしやすいようになっているか。</li></ul><p>などいろいろなスキルレベルの開発者がいることを前提として、開発者の視点で考えることが多いです。</p><h3 id="質問3"><a href="#質問3" class="headerlink" title="質問3"></a>質問3</h3><p>Q. ソフトウェアアーキテクト目指すならこれ読んどけ！っていう本とかってありますか。</p><p>A. 発表資料中に引用している書籍も含めて、いくつか自分自身のためになった書籍をいくつか紹介します。個別具体のアーキテクチャに特化した書籍というよりは、全体が理解できるようなものを紹介しておきます。</p><ul><li><p><a href="https://www.oreilly.co.jp//books/9784873119823/">ソフトウェアアーキテクチャの基礎</a><br>Mark Richards、Neal Ford　著、島田 浩二　訳</p></li><li><p><a href="https://www.oreilly.co.jp//books/9784814400065/">ソフトウェアアーキテクチャ・ハードパーツ</a><br>Neal Ford、Mark Richards、Pramod Sadalage、Zhamak Dehghani　著、島田 浩二　訳</p></li><li><p><a href="https://www.oreilly.co.jp/books/9784873118956/">Design It! ―プログラマーのためのアーキテクティング入門</a><br>Michael Keeling　著、島田 浩二　訳</p></li><li><p><a href="https://www.oreilly.co.jp/books/9784873118567/">進化的アーキテクチャ ―絶え間ない変化を支える</a><br>Neal Ford、Rebecca Parsons、Patrick Kua　著、島田 浩二　訳</p></li></ul><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>技育祭、優秀な学生の方々からフレッシュな刺激を頂き、とても楽しかったです。<br>登壇を通じて、私自身改めてアーキテクティングについて自分の中で体系的に整理ができ、一緒にアーキテクティングをする仲間を増やすためにもこういった情報はどんどんオープンに発信していきたいという気持ちが一層強くなりました。</p><p>また機会があれば面白いコンテンツを引っ提げて登壇したいなと思います。<br>最後になりますが、3セッションある中で聞きに来てくれた方、この記事を読んでくださった方、本当にありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%8A%80%E8%82%B2%E7%A5%AD/">技育祭</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%88/">ソフトウェアアーキテクト</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3/">アーキテクチャ</category>
      
      
      <comments>https://future-architect.github.io/articles/20231023a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>超薄いGoのCLI作成パッケージ google/subcommands 入門</title>
      <link>https://future-architect.github.io/articles/20231020a/</link>
      <guid>https://future-architect.github.io/articles/20231020a/</guid>
      <pubDate>Thu, 19 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231020a/subcommands.png&quot; alt=&quot;&quot; width=&quot;491&quot; height=&quot;213&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231020a/subcommands.png" alt="" width="491" height="213"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。育休明けです。</p><p>GoでCLI（コマンドラインインターフェイス）の開発に役立つツールといえばいくつか選択肢があります。大きく分ければフラグのパースを支援するもの（<a href="https://pkg.go.dev/flag">標準のflagパッケージ</a>、<a href="https://github.com/jessevdk/go-flags">alecthomas&#x2F;kong&#x2F;go-flags</a>、<a href="https://github.com/alecthomas/kong">alecthomas&#x2F;kong</a>など）と、開発フレームワークと言っても良い包括的に支援するもの（<a href="https://github.com/urfave/cli">urfave&#x2F;cli</a>、<a href="https://github.com/spf13/cobra">spf13&#x2F;cobra</a>など）の2つに分けられるかなと思います（※概念的に分けてみただけで捉え方によっては全てパーサだしフレームワークとみなしても良いかもしれません。あくまで個人的なイメージです）。</p><p>私は <code>urfave/cli</code> を利用することが多いのですが、<code>spf13/cobra</code> も人気ですよね。どちらも広く利用されていますが、支配的と言った感じではなく、例えば私がよく用いるterraformコマンドは<a href="https://github.com/mitchellh/cli">mitchellh&#x2F;cli</a>という<a href="https://github.com/hashicorp/terraform/blob/main/main.go#L29C3-L29C27">ライブラリが使われていました</a>し、Go製のテンプレートエンジンで有名なHugoは、Hugoの要件にフィットするように<a href="https://github.com/bep/simplecobra">bep&#x2F;simplecobra</a>というライブラリを開発しているようでした。Protocol Bufferのprotocコマンドに至っては<a href="https://github.com/golang/protobuf/blob/master/protoc-gen-go/main.go#L32">標準パッケージのflag</a>を使っています。気に入ったのを好きに使えば良いんだ感があります。</p><h2 id="subcommands"><a href="#subcommands" class="headerlink" title="subcommands"></a>subcommands</h2><p>そんな中、今回取り上げるのは<a href="https://github.com/google/subcommands">google&#x2F;subcommands</a> です。</p><p>私がこの存在を認識したのは、<a href="https://google.github.io/styleguide/go/">Google Go Coding Guide</a> のベストプラクティス編の<a href="https://google.github.io/styleguide/go/best-practices#complex-command-line-interfaces">complex-command-line-interfaces</a>に記載されているのを読んだことがキッカケです。</p><p>その部分を引用＋意訳します。</p><ul><li><code>kubectl create</code>、<code>kubectl run</code> といったサブコマンドを含むCLI開発の場合は、シンプルで正しく利用しやすい <code>subcommands</code> がお勧め</li><li><code>subcommands</code> が提供されていない機能を求める場合は<code>cobra</code>がお勧め</li></ul><p><code>subcommands</code> は開発元がGoogleだけあって推しを感じますね（なお、READMEには “This is not an official Google product（「Google公式プロダクトじゃないよ」）” とあります。）。ちなみに、<code>kubectl</code> は<code>cobra</code>を使っています。さらに余談ですが、 <code>docker</code> コマンドも <code>cobra</code> で開発されています。</p><p>Goのコーディング規約として、<code>Google Coding Guide</code> には今後少なからず影響を受けていくと思うので、 <code>subcommands</code> について理解を深めようと思います。</p><h2 id="subcommands-を使っているプロダクト"><a href="#subcommands-を使っているプロダクト" class="headerlink" title="subcommands を使っているプロダクト"></a>subcommands を使っているプロダクト</h2><p>subcommandsのGoDocにある<a href="https://pkg.go.dev/github.com/google/subcommands?tab=importedby">importedby</a>から調べると、<a href="https://github.com/google/wire">wire</a>、<a href="https://github.com/google/gvisor">gvisitor</a>、<a href="https://github.com/future-architect/vuls">vuls</a>などのプロダクトなどがsubcommandsを利用しています。Vuls、お前もそうだったのか。</p><p>importbyはForkされたリポジトリ数も拾われますし、スター数で絞れるわけではないので単純化できませんが、2023.10.13時点でsubcommandsは628パッケージインポートされていました。ちなみに、cobraは9.4万、urfave&#x2F;cliは1.4万で桁違いでした。擁護するわけではないですがsubcommandsの公開が2019年2月（1.0.0のRelease日）と比較的新しいことがあるかもしれません（cobra v0.0.1の2017年10月、urfave&#x2F;clin v0.0.1の2013年6月。どのバージョンと比較するのが適切か難しいですが）。</p><h2 id="使ってみた"><a href="#使ってみた" class="headerlink" title="使ってみた"></a>使ってみた</h2><p>subcommandsですが、利用ガイド的なものは見当たらなく、<a href="https://github.com/google/subcommands">README.md</a>も色気は無いですが、実装は<a href="https://github.com/google/subcommands/blob/master/subcommands.go">subcommands.go</a>のみ（！）で、こちらが500行程度と、とても薄いライブラリだという事がわかります。この薄さが魅力だと感じるかどうかがsubcommandsを使う判断ポイントな気がします。READMEにはprintコマンドのサンプルが載っていますが、少しだけオリジナリティを出すため簡単なオプションを追加したクリップボードを読み取り&#x2F;書き込みする簡単なツールを作ります。</p><p>なお、クリップボードを操作するためのパッケージは<a href="https://github.com/golang-design/clipboard">golang-design&#x2F;clipboard</a>を使いました。</p><p>最初に、<code>printCmd</code>、<code>writeCmd</code> を実装していきます。実装すべきは <code>Name()</code>、<code>Synopsis()</code>、 <code>Usage()</code>、<code>SetFlags()</code>、<code>Execute()</code> です。<code>Name()</code>、<code>Synopsis()</code>、 <code>Usage()</code> はヘルプメッセージに用いるメソッドで、実態は <code>SetFlags()</code>、<code>Execute()</code> の2種類です。シンプルですね。</p><figure class="highlight go"><figcaption><span>commands.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/google/subcommands&quot;</span></span><br><span class="line"><span class="string">&quot;golang.design/x/clipboard&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> printCmd <span class="keyword">struct</span> &#123;</span><br><span class="line">num  <span class="type">int</span></span><br><span class="line">trim <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*printCmd)</span></span> Name() <span class="type">string</span>     &#123; <span class="keyword">return</span> <span class="string">&quot;print&quot;</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*printCmd)</span></span> Synopsis() <span class="type">string</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Print clipboard to stdout.&quot;</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*printCmd)</span></span> Usage() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`print [-n number] [-trim]:</span></span><br><span class="line"><span class="string">  Print clipboard content.</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *printCmd)</span></span> SetFlags(f *flag.FlagSet) &#123;</span><br><span class="line">f.IntVar(&amp;p.num, <span class="string">&quot;n&quot;</span>, <span class="number">0</span>, <span class="string">&quot;display within particular line number&quot;</span>)</span><br><span class="line">f.BoolVar(&amp;p.trim, <span class="string">&quot;trim&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;enable trimming space chars&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *printCmd)</span></span> Execute(_ context.Context, f *flag.FlagSet, _ ...any) subcommands.ExitStatus &#123;</span><br><span class="line">err := clipboard.Init()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[clip] %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> subcommands.ExitFailure</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reader := bufio.NewReader(bytes.NewReader(clipboard.Read(clipboard.FmtText)))</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; ; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> p.num != <span class="number">0</span> &amp;&amp; i == p.num &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">line, _, err := reader.ReadLine()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[clip] %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> subcommands.ExitFailure</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out := <span class="type">string</span>(line)</span><br><span class="line"><span class="keyword">if</span> p.trim &#123;</span><br><span class="line">out = strings.TrimSpace(out)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(out)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> subcommands.ExitSuccess</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> writeCmd <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*writeCmd)</span></span> Name() <span class="type">string</span>     &#123; <span class="keyword">return</span> <span class="string">&quot;write&quot;</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*writeCmd)</span></span> Synopsis() <span class="type">string</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Write to clipboard&quot;</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*writeCmd)</span></span> Usage() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`write [text]:</span></span><br><span class="line"><span class="string">  Write to clipboard.</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *writeCmd)</span></span> SetFlags(_ *flag.FlagSet) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *writeCmd)</span></span> Execute(_ context.Context, f *flag.FlagSet, _ ...any) subcommands.ExitStatus &#123;</span><br><span class="line">err := clipboard.Init()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[clip] %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> subcommands.ExitFailure</span><br><span class="line">&#125;</span><br><span class="line">clipboard.Write(clipboard.FmtText, []<span class="type">byte</span>(strings.Join(f.Args(), <span class="string">&quot;\n&quot;</span>)))</span><br><span class="line"><span class="keyword">return</span> subcommands.ExitSuccess</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>宣言した、<code>printCmd</code>, <code>writeCmd</code> を <code>subcommands</code> パッケージに登録します。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/google/subcommands&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">subcommands.Register(subcommands.HelpCommand(), <span class="string">&quot;&quot;</span>)</span><br><span class="line">subcommands.Register(subcommands.FlagsCommand(), <span class="string">&quot;&quot;</span>)</span><br><span class="line">subcommands.Register(subcommands.CommandsCommand(), <span class="string">&quot;&quot;</span>)</span><br><span class="line">subcommands.Register(&amp;printCmd&#123;&#125;, <span class="string">&quot;&quot;</span>)</span><br><span class="line">subcommands.Register(&amp;writeCmd&#123;&#125;, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag.Parse()</span><br><span class="line">ctx := context.Background()</span><br><span class="line">os.Exit(<span class="type">int</span>(subcommands.Execute(ctx)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これをビルドして、ヘルプコマンドを表示します。 </p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go build -o subclip .</span><br><span class="line">$ subclip <span class="built_in">help</span></span><br><span class="line">Usage: subclip &lt;flags&gt; &lt;subcommand&gt; &lt;subcommand args&gt;</span><br><span class="line"></span><br><span class="line">Subcommands:</span><br><span class="line">commands         list all <span class="built_in">command</span> names</span><br><span class="line">flags            describe all known top-level flags</span><br><span class="line"><span class="built_in">help</span>             describe subcommands and their syntax</span><br><span class="line"><span class="built_in">print</span>            Print clipboard to stdout.</span><br><span class="line">write            Write to clipboard</span><br></pre></td></tr></table></figure><p>見ると分かる通り、<code>Name()</code> で宣言したコマンドの一覧と <code>Synopsis()</code> で書いた説明が表示されます。<code>commands</code>, <code>flags</code>, <code>help</code> は <code>subcommands</code> パッケージに予め宣言されたコマンドたちで、main関数内で登録しています。特にhelpは必須かなと思います。</p><p>さて、printにはオプションを2つ追加しています。どうやって確認するのでしょうか。答えはflagsかhelp の引数に、オプションを確認したいコマンド名を渡す必要があります。</p><figure class="highlight sh"><figcaption><span>オプションを確認</span></figcaption><table><tr><td class="code"><pre><span class="line">$ subclip flags <span class="built_in">print</span> </span><br><span class="line">  -n int</span><br><span class="line">        display within particular line number</span><br><span class="line">  -trim</span><br><span class="line">        <span class="built_in">enable</span> trimming space chars</span><br><span class="line"></span><br><span class="line">$ subclip <span class="built_in">help</span> <span class="built_in">print</span></span><br><span class="line"><span class="built_in">print</span> [-n number] [-trim]:</span><br><span class="line">  Print clipboard content.</span><br><span class="line">  -n int</span><br><span class="line">        display within particular line number</span><br><span class="line">  -trim</span><br><span class="line">        <span class="built_in">enable</span> trimming space chars</span><br></pre></td></tr></table></figure><p>こうしてみると、 <code>flags</code> は <code>help</code> に包含されている内容であるため、コマンドラインとして用意しなくても良い気がしますね（wireなんかはすべて登録しているので、subcommandsを利用する場合はすべて登録する流れかもしれませんが）。</p><p>続いて予め用意された<code>commands</code> ですが、これはコマンドの一覧を表示します。<code>help</code> で詳細を確認するとその通りの内容です（どういうケースで嬉しいのかいまいち掴みきれませんが）。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ subclip commands</span><br><span class="line"><span class="built_in">help</span></span><br><span class="line">flags</span><br><span class="line">commands</span><br><span class="line"><span class="built_in">print</span></span><br><span class="line">write</span><br><span class="line"></span><br><span class="line">$ subclip <span class="built_in">help</span> commands </span><br><span class="line">commands:</span><br><span class="line">        Print a list of all commands.</span><br></pre></td></tr></table></figure><p><code>help</code> と <code>commands</code> の並び順も異なるのが気になりましたが、、おそらく仕様なのでしょう。</p><h2 id="help-でサブコマンドのオプションを表示する。"><a href="#help-でサブコマンドのオプションを表示する。" class="headerlink" title="help でサブコマンドのオプションを表示する。"></a><code>help</code> でサブコマンドのオプションを表示する。</h2><p>利用頻度が高く重要なオプションは、 <code>help</code> コマンドで表示してほしいことも多いと思います。<code>subcommands.ImportantFlag()</code> が対応してくれそうですが、これはトップレベルのフラグにしか対応していないようです（awscli で言えば、 –profile などの全コマンドに適用するオプションのイメージ）。<br>そのため、必要であれば、 <code>Synopsis()</code> に利用例を書くなどの工夫が必要そうです。</p><h2 id="グループ化"><a href="#グループ化" class="headerlink" title="グループ化"></a>グループ化</h2><p>subcommandsに登録する際、第2引数にgroup名を登録することが可能です。以下の様に書き換えます。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line"><span class="deletion">-subcommands.Register(subcommands.HelpCommand(), &quot;&quot;)</span></span><br><span class="line"><span class="deletion">-subcommands.Register(subcommands.FlagsCommand(), &quot;&quot;)</span></span><br><span class="line"><span class="deletion">-subcommands.Register(subcommands.CommandsCommand(), &quot;&quot;)</span></span><br><span class="line"><span class="addition">+subcommands.Register(subcommands.HelpCommand(), &quot;help&quot;)</span></span><br><span class="line"><span class="addition">+subcommands.Register(subcommands.FlagsCommand(), &quot;help&quot;)</span></span><br><span class="line"><span class="addition">+subcommands.Register(subcommands.CommandsCommand(), &quot;help&quot;)</span></span><br><span class="line"><span class="deletion">-subcommands.Register(&amp;printCmd&#123;&#125;, &quot;&quot;)</span></span><br><span class="line"><span class="deletion">-subcommands.Register(&amp;writeCmd&#123;&#125;, &quot;&quot;)</span></span><br><span class="line"><span class="addition">+subcommands.Register(&amp;printCmd&#123;&#125;, &quot;main&quot;)</span></span><br><span class="line"><span class="addition">+subcommands.Register(&amp;writeCmd&#123;&#125;, &quot;main&quot;)</span></span><br><span class="line">// 省略</span><br></pre></td></tr></table></figure><p>そうすると <code>help</code> メッセージを出すときにグルーピングが行われます。類似性の高いサブコマンドごとに設定すると便利かもしれません。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ subclip <span class="built_in">help</span>     </span><br><span class="line">Usage: subclip &lt;flags&gt; &lt;subcommand&gt; &lt;subcommand args&gt;</span><br><span class="line"></span><br><span class="line">Subcommands <span class="keyword">for</span> <span class="built_in">help</span>:</span><br><span class="line">        commands         list all <span class="built_in">command</span> names</span><br><span class="line">        flags            describe all known top-level flags</span><br><span class="line">        <span class="built_in">help</span>             describe subcommands and their syntax</span><br><span class="line"></span><br><span class="line">Subcommands <span class="keyword">for</span> main:</span><br><span class="line">        <span class="built_in">print</span>            Print clipboard to stdout.</span><br><span class="line">        write            Write to clipboard</span><br></pre></td></tr></table></figure><h2 id="サブコマンドのエイリアス"><a href="#サブコマンドのエイリアス" class="headerlink" title="サブコマンドのエイリアス"></a>サブコマンドのエイリアス</h2><p>サブコマンドのエイリアスもつけることができます。 <code>subcommands.Alias()</code> を利用すればいけました。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    // 省略</span><br><span class="line">subcommands.Register(&amp;printCmd&#123;&#125;, &quot;main&quot;)</span><br><span class="line">subcommands.Register(&amp;writeCmd&#123;&#125;, &quot;main&quot;)</span><br><span class="line"><span class="addition">+subcommands.Register(subcommands.Alias(&quot;p&quot;, &amp;printCmd&#123;&#125;), &quot;main&quot;)</span></span><br><span class="line"><span class="addition">+subcommands.Register(subcommands.Alias(&quot;w&quot;, &amp;writeCmd&#123;&#125;), &quot;main&quot;)</span></span><br></pre></td></tr></table></figure><p>ヘルプメッセージにも表現されています。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ subclip <span class="built_in">help</span></span><br><span class="line">Usage: subclip &lt;flags&gt; &lt;subcommand&gt; &lt;subcommand args&gt;</span><br><span class="line"></span><br><span class="line">Subcommands <span class="keyword">for</span> <span class="built_in">help</span>:</span><br><span class="line">        commands         list all <span class="built_in">command</span> names</span><br><span class="line">        flags            describe all known top-level flags</span><br><span class="line">        <span class="built_in">help</span>             describe subcommands and their syntax</span><br><span class="line"></span><br><span class="line">Subcommands <span class="keyword">for</span> main:</span><br><span class="line">        <span class="built_in">print</span>, p         Print clipboard to stdout.</span><br><span class="line">        write, w         Write to clipboard</span><br></pre></td></tr></table></figure><p>利用頻度が高そうだと思いました。</p><h2 id="サブコマンドのサブコマンド"><a href="#サブコマンドのサブコマンド" class="headerlink" title="サブコマンドのサブコマンド"></a>サブコマンドのサブコマンド</h2><p><a href="https://yunomu.hatenablog.jp/entry/2020/06/16/170027">Goでsubcommandsを使う - yunomuのブログ</a> にかかれている通り、<code>subcommands.Commander</code> を自前で重ねることでN階層にネストしたコマンドを作れるそうです。READMEに実装例が無かったので実現できないと私は最初、勘違いしていました。おそらく勘違いしやすいポイントなので、覚えておくと良いと思います。</p><h2 id="その他の機能"><a href="#その他の機能" class="headerlink" title="その他の機能"></a>その他の機能</h2><p>以下のような機能は無さそうでした。</p><p>フラグのパースは標準パッケージのflagを用いているため、同様の壁がある。</p><ul><li><code>--number</code>, <code>-n</code> のような、ロング・ショートバージョンのオプション<ul><li>フラグのパースは、標準パッケージのflagを使っているため、必要であれば自前で実装する必要があります</li></ul></li><li>環境変数からオプション指定、上書き<ul><li>標準パッケージのflagを用いているため、必要であれば自前で実装する必要があります</li></ul></li></ul><p>コマンドのtypoから一番近いコマンドを提案するような機能。</p><ul><li><code>subclip wite</code> じゃなくて、<code>subclip write</code> みたいな提案をする機能は無いです<ul><li>存在しないコマンドを指定した場合、 <code>help</code> が表示されます</li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>subcommandsは非常に薄く、シンプルであるため機能を特化したCLIツールを作るのに適していると思います。また、subcommandsの<a href="https://github.com/google/subcommands/blob/master/go.mod">go.mod</a> を見ると3rdパーティパッケージの依存がゼロなため依存先のパッケージのアップデートで壊れるといったことが無いため安定的で、おそらくバイナリサイズも小さくできると思います（こちらは誤差レベルでしょうが）。</p><p>その割にはコマンドのエイリアスや階層化できたりとパワフルなところもあり、リッチに作り込むこともできます。</p><p>オプションのショート・ロングバージョンの準備や、環境変数とのマージなど、細かな作り込みを不要とできるのであれば採用してみても良いのではないでしょうか。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://osinet.fr/go/en/articles/cli-google-subcommands/#13-passing-non-cli-arguments-to-commands">https://osinet.fr/go/en/articles/cli-google-subcommands/#13-passing-non-cli-arguments-to-commands</a></li><li><a href="https://osinet.fr/go/en/articles/cli-google-subcommands/">https://osinet.fr/go/en/articles/cli-google-subcommands/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/CLI/">CLI</category>
      
      <category domain="https://future-architect.github.io/tags/subcommands/">subcommands</category>
      
      
      <comments>https://future-architect.github.io/articles/20231020a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>VPC外からCloud SQL Auth Proxyを利用したPrivate IP Cloud SQLへの接続</title>
      <link>https://future-architect.github.io/articles/20231019a/</link>
      <guid>https://future-architect.github.io/articles/20231019a/</guid>
      <pubDate>Wed, 18 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;本記事では、Private IPしか持たないCloud SQLへ接続する方法として、Cloud SQL Auth</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>本記事では、Private IPしか持たないCloud SQLへ接続する方法として、Cloud SQL Auth Proxyを利用した接続方法について紹介致します。</p><h2 id="Cloud-SQL"><a href="#Cloud-SQL" class="headerlink" title="Cloud SQL"></a>Cloud SQL</h2><p><a href="https://cloud.google.com/sql/docs/introduction?hl=ja">Cloud SQL</a>はMy SQL、PostgreSQL、SQL Server用のフルマネージドリレーショナルデータベースのサービスです。</p><p>Google Cloudには、AlloyDB、Spanner、Firestore、Bigtableなど様々なデータベースサービスが存在しますが、Cloud SQLもその内の1つになります。たくさんあってどれ選べばいいのかわからない！という状況に陥った場合は、<a href="https://cloud.google.com/blog/topics/developers-practitioners/your-google-cloud-database-options-explained?hl=en">Your Google Cloud database options, explained</a>からベストプラクティスを探るのが良いと思います。</p><h3 id="Cloud-SQLへの接続方法"><a href="#Cloud-SQLへの接続方法" class="headerlink" title="Cloud SQLへの接続方法"></a>Cloud SQLへの接続方法</h3><p>Cloud SQLへは<code>mysql</code>や<code>psql</code>コマンドなどで接続でき、接続方法として以下の2つの方法が用意されています。</p><ol><li>プライベートIPアドレス<ul><li>同一VPCから接続できる内部接続</li></ul></li><li>パブリックIPアドレス<ul><li>インターネット経由でアクセスできる外部接続</li></ul></li></ol><p>SQLインスタンスをインターネット上に晒したくないというセキュアな条件を満たしたい場合は、1のプライベートIPアドレスのみを利用するケースが多いかと思われます。但し、上記で記載した通り同一VPC内からの接続となるため、</p><ol><li>接続元となるPC・VMをそのVPC内に構築する必要</li><li>もしくはそのVPC内へのアクセス経路を持つ必要</li></ol><p>があります。<br>1の場合は、Cloud SQLインスタンスのプライベートIPに対して直接接続できるので一番手っ取り早い方法かと思います。</p><img src="/images/20231019a/image.png" alt="image.png" width="782" height="550" loading="lazy"><p>2の場合は、Cloud SQLが存在するVPC内へアクセス経路を持つ必要があるため、VPC PeeringやCloud VPN、Cloud Interconnectによって接続元が利用するVPCがお互いに経路を確保し、Cloud SQLのPrivate IPが広報される必要があります。<br>※本記事では<a href="https://cloud.google.com/network-connectivity/docs/vpn/concepts/topologies?hl=ja">HA-VPN構成</a>を例に取り扱わせて頂きます。</p><img src="/images/20231019a/image_2.png" alt="image.png" width="1200" height="394" loading="lazy"><p>但し、Cloud SQLのプライベートIPアドレスが既に割り振られている場合、広報先のVPC内でそのIPアドレスが既に使われている場合は多々あります。そのような状況で広報をしてしまうと、IPアドレスが被ってしまい広報することができない、もしくはネットワーク事故につながることになります。さて、この場合どうしましょう🤔</p><h3 id="Cloud-SQL-Auth-Proxy"><a href="#Cloud-SQL-Auth-Proxy" class="headerlink" title="Cloud SQL Auth Proxy"></a>Cloud SQL Auth Proxy</h3><p>ここで出番となるのが、<a href="https://cloud.google.com/sql/docs/postgres/sql-proxy?hl=ja">Cloud SQL Auth Proxy</a>です。公式では「Cloud SQL Auth Proxyは承認済みネットワークやSSLの構成を必要とせず、安全にインスタンスにアクセスできるCloud SQLコネクタです」とあり、Auth Proxy経由でCloud SQLインスタンスへ接続できるようになります。また、認可にIAM権限を利用することになるため、よりセキュアな接続となります。</p><p>このCloud SQL Auth Proxyを利用して、Cloud SQLインスタンスが存在するVPC内外から接続経路を構築していきます。</p><h2 id="Cloud-SQL-Auth-Proxyを利用した接続"><a href="#Cloud-SQL-Auth-Proxyを利用した接続" class="headerlink" title="Cloud SQL Auth Proxyを利用した接続"></a>Cloud SQL Auth Proxyを利用した接続</h2><img src="/images/20231019a/image_3.png" alt="image.png" width="1200" height="397" loading="lazy"><p>アーキテクチャ上で変わった部分としては黄色の箇所で、Cloud SQLインスタンスが存在するVPC-AにCloud SQL Auth Proxyを立てておくためのDB Bastion VMを構築しておく必要があります。また、Cloud SQLインスタンスは複数あることを想定しております。</p><p>HA VPNの構築は公式のドキュメントにお任せします。公式がTerraformの例まで用意しているのは非常にありがたいですね。</p><ul><li><a href="https://cloud.google.com/network-connectivity/docs/vpn/how-to/creating-ha-vpn2?hl=ja#create_an_additional_tunnel_on_a_single-tunnel_gateway">HA VPN ゲートウェイを作成して VPC ネットワークに接続する</a></li><li><a href="https://cloud.google.com/network-connectivity/docs/vpn/how-to/automate-vpn-setup-with-terraform?hl=ja">HA VPN ゲートウェイ向けの Terraform の例</a></li></ul><p>HA VPN構築後、DB Bastionで利用するサブネットワークのIPアドレス範囲をVPC-B側に広報することを忘れないように気を付けましょう。</p><p>また、VPC-B側のVMの構築、VPC-A側のCloud SQLの構築についても省略させて頂きます。<br>以下のTerraform公式が参考になると思います。</p><ul><li><a href="https://registry.terraform.io/providers/hashicorp/google/latest/docs/data-sources/compute_instance.html">Compute Engine</a></li><li><a href="https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance#private-ip-instance">Cloud SQL - Private IP Instance</a></li></ul><p>DB Bastion VMについてですが、Startup ScriptにてCloud SQL Auth Proxyをsystemdとして起動するように設定しておくと、起動時に確実にAuth Proxyが起動され、更に状態を管理しやすくなります。</p><p>以下にそのStartup Scriptを記載します。</p><p>※<a href="https://cloud.google.com/sql/docs/postgres/sql-proxy?hl=ja#install">最新ver.は公式からチェック</a>してください。</p><figure class="highlight bash"><figcaption><span>cloudsql_auth_proxy_setup.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define your variables</span></span><br><span class="line">PROJECT_ID=test_pj</span><br><span class="line"><span class="built_in">declare</span> -a INSTANCES=(<span class="string">&quot;test-db1&quot;</span> <span class="string">&quot;test-db2&quot;</span>)</span><br><span class="line"><span class="built_in">declare</span> -a REGIONS=(<span class="string">&quot;asia-northeast1&quot;</span> <span class="string">&quot;asia-northeast2&quot;</span>)</span><br><span class="line"><span class="built_in">declare</span> -a PORTS=(<span class="string">&quot;5432&quot;</span> <span class="string">&quot;5433&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Download Cloud SQL Auth Proxy from the bucket and isntall</span></span><br><span class="line">curl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.6.1/cloud-sql-proxy.linux.amd64</span><br><span class="line"><span class="built_in">mv</span> cloud-sql-proxy /usr/local/bin/</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/cloud-sql-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create systemd service for each Cloud SQL instance</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="variable">$&#123;!INSTANCES[*]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  instance=<span class="variable">$&#123;INSTANCES[$index]&#125;</span></span><br><span class="line">  region=<span class="variable">$&#123;REGIONS[$index]&#125;</span></span><br><span class="line">  port=<span class="variable">$&#123;PORTS[$index]&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a systemd service file</span></span><br><span class="line">  sudo bash -c <span class="string">&quot;cat &lt;&lt;EOF &gt; /etc/systemd/system/cloud-sql-proxy-<span class="variable">$&#123;instance&#125;</span>.service</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=Google Cloud SQL Auth Proxy <span class="variable">$&#123;instance&#125;</span></span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">ExecStart=/usr/local/bin/cloud-sql-proxy --address 0.0.0.0 --private-ip <span class="variable">$&#123;PROJECT_ID&#125;</span>:<span class="variable">$&#123;region&#125;</span>:<span class="variable">$&#123;instance&#125;</span> --port <span class="variable">$&#123;port&#125;</span></span></span><br><span class="line"><span class="string">Restart=always</span></span><br><span class="line"><span class="string">User=root</span></span><br><span class="line"><span class="string">Type=simple</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Enable and start the service</span></span><br><span class="line">  sudo systemctl <span class="built_in">enable</span> cloud-sql-proxy-<span class="variable">$&#123;instance&#125;</span>.service</span><br><span class="line">  sudo systemctl start cloud-sql-proxy-<span class="variable">$&#123;instance&#125;</span>.service</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>ここで気を付けたいのがCloud SQL Auth Proxyの実行コマンドで<code>--address</code>を指定する際に、<code>127.0.0.1</code>と指定してしまうとlocalhostからの接続しか受け付けなくなってしまいます。今回はDB Bastion外から接続を行う必要があるため、<code>0.0.0.0</code>で指定しております。</p><p>作成したStartup scriptはDB Bastion VM構築時に<code>startup-script</code>として指定しましょう。<br>また、ネットワークタグ：<code>tags</code>も設定しておきます</p><figure class="highlight sh"><figcaption><span>compute_instance.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;google_compute_instance&quot;</span> <span class="string">&quot;db_bastion&quot;</span> &#123;</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    tags = [<span class="string">&quot;db-bastion&quot;</span>]</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    metadata = &#123;</span><br><span class="line">        startup-script = <span class="string">&quot;startup-scripts/cloudsql_auth_proxy_setup.sh&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DB上のデータ外部持ち出しを防ぐためにDB BastionのEGRESSを全て拒否しているケースもあると思います。その場合、Cloud SQL Auth Proxy用に<strong>Cloud SQLインスタンスのプライベートIPアドレスに対してPort:3307を介したEGRESSを許可</strong>するFirewallを設定しておく必要があります。</p><p>参考：<a href="https://cloud.google.com/sql/docs/mysql/connect-auth-proxy?hl=ja#:~:text=%E9%80%81%E4%BF%A1%E3%83%95%E3%82%A1%E3%82%A4%E3%82%A2%E3%82%A6%E3%82%A9%E3%83%BC%E3%83%AB,%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%20%E3%83%9D%E3%83%BC%E3%83%88%E3%81%A7%E3%81%99%E3%80%82">Cloud SQL Auth Proxyの接続経路</a></p><figure class="highlight sh"><figcaption><span>compute_firewall.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;google_compute_firewall&quot;</span> <span class="string">&quot;db_bastion2cloudsql&quot;</span> &#123;</span><br><span class="line">  name               = <span class="string">&quot;db-bastion2cloudsql&quot;</span></span><br><span class="line">  network            = &lt;YOUR_VPC_NAME&gt;</span><br><span class="line">  direction          = <span class="string">&quot;EGRESS&quot;</span></span><br><span class="line">  target_tags        = [<span class="string">&quot;db-bastion&quot;</span>]</span><br><span class="line">  destination_ranges = [</span><br><span class="line">    google_sql_database_instance.instance1.ip_address.0.ip_address,</span><br><span class="line">    google_sql_database_instance.instance2.ip_address.0.ip_address,</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  allow &#123;</span><br><span class="line">    protocol = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">    ports    = [<span class="string">&quot;3307&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>※<code>google_sql_database_instance.instance1</code>, <code>google_sql_database_instance.instance2</code>というリソース名でCloud SQLインスタンスを構築していることを想定しております。</p><p>また、Cloud SQL Auth Proxyのセクションでも述べましたがIAM権限を利用した認可となるため、以下の権限をDB BastionのService Accountへ設定する必要があります。</p><ul><li>roles&#x2F;cloudsql.client</li></ul><p>これで構築・設定は完了となります。試しにCloud SQLにPostgreSQLを設定し、VPC Bのインスタンスからpsqlコマンドで接続してみます。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">psql <span class="string">&quot;host=&lt;DB Bastion&#x27;s IP address&gt; port=5432 dbname=test_db sslmode=disable user=test_user password=****&quot;</span></span><br><span class="line">psql (12.15 (Ubuntu 12.15-0ubuntu0.20.04.1), server 13.10)</span><br><span class="line">WARNING: psql major version 12, server major version 13.</span><br><span class="line">         Some psql features might not work.</span><br><span class="line">Type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line">postgres=&gt;</span><br></pre></td></tr></table></figure><p>無事に接続できました！</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事ではプライベートIPしか持たないCloud SQLインスタンスに対して、インスタンスが存在するVPCの外からCloud SQL Auth Proxyを介して接続する方法を紹介しました。</p><p>Cloud SQL Auth Proxy自体、全くキャッチアップなく簡単に使えて非常に便利なサービスです。<a href="https://cloud.google.com/sql/docs/sqlserver/connect-docker?hl=ja">Cloud SQL Auth Proxy Docker イメージを使用した SQL サーバー クライアントの接続</a>で説明されているようにDockerとして起動することも可能なので、自身の要件に合わせて構成してみて下さい。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/CloudSQL/">CloudSQL</category>
      
      <category domain="https://future-architect.github.io/tags/CloudSQLAuthProxy/">CloudSQLAuthProxy</category>
      
      
      <comments>https://future-architect.github.io/articles/20231019a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>タグを利用したBigQueryのアクセス制御</title>
      <link>https://future-architect.github.io/articles/20231018a/</link>
      <guid>https://future-architect.github.io/articles/20231018a/</guid>
      <pubDate>Tue, 17 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>BigQueryは完全マネージドな、ペタバイトスケールかつコスパのよいデータウェアハウスとして知られております。そのため、ほぼリアルタイムで膨大な量のデータを解析することを可能としております。</p><p>便利なツールである一方、BigQueryで取り扱うデータには個人情報が含まれていることもあり、適切なアクセス制御が望まれます。<br>本記事では、Resource Managerのタグ機能を利用して、Terraformによるアクセス制御の実装を紹介したいと思います。</p><h2 id="Resource-Managerのタグとは"><a href="#Resource-Managerのタグとは" class="headerlink" title="Resource Managerのタグとは"></a>Resource Managerのタグとは</h2><p>Google Cloudのリソースに対して、Key-Valueペアでタグを付与してIAMの条件に含めることができる機能です。</p><p>例えばBigQueryのデータセットであれば、Key:<code>environment</code>に対してValue:<code>dev</code>, <code>stg</code>, <code>prd</code>を用意したり、Key:<code>dataset_type</code>に対してValue:<code>non-pii</code>, <code>pii</code>（個人情報を含むか否か）を用意したりなど、データの種類に応じてタグを付与して、より詳細な条件でIAMを管理することができます。</p><p><a href="https://cloud.google.com/resource-manager/docs/tags/tags-creating-and-managing?hl=ja#before_you_begin">タグの作成と管理 - Google Cloud</a></p><h2 id="KeyとValueを作ってみる"><a href="#KeyとValueを作ってみる" class="headerlink" title="KeyとValueを作ってみる"></a>KeyとValueを作ってみる</h2><p>早速Terraformを書いていきます。</p><p>タグはOrganization配下での管理となります。まずはKeyを作ります。</p><figure class="highlight sh"><figcaption><span>tags_tag_key.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;google_tags_tag_key&quot;</span> <span class="string">&quot;env_key&quot;</span> &#123;</span><br><span class="line">  parent      = <span class="string">&quot;organizations/<span class="variable">$&#123;local.organization.id&#125;</span>&quot;</span></span><br><span class="line">  short_name  = <span class="string">&quot;environment&quot;</span></span><br><span class="line">  description = <span class="string">&quot;Environment key&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このKeyに対してValueを作ります。</p><figure class="highlight sh"><figcaption><span>tags_tag_value.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;google_tags_tag_value&quot;</span> <span class="string">&quot;dev_tag&quot;</span> &#123;</span><br><span class="line">  parent      = <span class="string">&quot;tagKeys/<span class="variable">$&#123;google_tags_tag_key.env_key.name&#125;</span>&quot;</span></span><br><span class="line">  short_name  = <span class="string">&quot;dev&quot;</span></span><br><span class="line">  description = <span class="string">&quot;Development tag&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_tags_tag_value&quot;</span> <span class="string">&quot;stg_tag&quot;</span> &#123;</span><br><span class="line">  parent      = <span class="string">&quot;tagKeys/<span class="variable">$&#123;google_tags_tag_key.env_key.name&#125;</span>&quot;</span></span><br><span class="line">  short_name  = <span class="string">&quot;stg&quot;</span></span><br><span class="line">  description = <span class="string">&quot;Staging tag&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_tags_tag_value&quot;</span> <span class="string">&quot;prd_tag&quot;</span> &#123;</span><br><span class="line">  parent      = <span class="string">&quot;tagKeys/<span class="variable">$&#123;google_tags_tag_key.env_key.name&#125;</span>&quot;</span></span><br><span class="line">  short_name  = <span class="string">&quot;prd&quot;</span></span><br><span class="line">  description = <span class="string">&quot;Production tag&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>適用後、コンソールを見てみましょう。<br><img src="/images/20231018a/71638260-a888-a69d-56d2-bcb92fb94825.png" alt="" width="1200" height="489" loading="lazy"></p><p><code>environment</code>に対して、<code>dev</code>, <code>stg</code>, <code>prd</code>というKey-Valueペアが生成されました。</p><h2 id="BigQueryのDatasetにタグを付与する"><a href="#BigQueryのDatasetにタグを付与する" class="headerlink" title="BigQueryのDatasetにタグを付与する"></a>BigQueryのDatasetにタグを付与する</h2><p>今回生成したタグをBigQueryのDatasetに付与していきましょう。<br>まずは以下のデータセットを用意します。</p><figure class="highlight sh"><figcaption><span>bigquery.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;google_bigquery_dataset&quot;</span> <span class="string">&quot;dataset_dev&quot;</span> &#123;</span><br><span class="line">  project    = google_project.project.project_id</span><br><span class="line">  dataset_id = <span class="string">&quot;dataset_dev&quot;</span></span><br><span class="line">  location   = <span class="string">&quot;asia-northeast1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_bigquery_dataset&quot;</span> <span class="string">&quot;dataset_stg&quot;</span> &#123;</span><br><span class="line">  project    = google_project.project.project_id</span><br><span class="line">  dataset_id = <span class="string">&quot;dataset_stg&quot;</span></span><br><span class="line">  location   = <span class="string">&quot;asia-northeast1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_bigquery_dataset&quot;</span> <span class="string">&quot;dataset_prd&quot;</span> &#123;</span><br><span class="line">  project    = google_project.project.project_id</span><br><span class="line">  dataset_id = <span class="string">&quot;dataset_prd&quot;</span></span><br><span class="line">  location   = <span class="string">&quot;asia-northeast1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>データセットへタグを付与する方法ですが、</p><ul><li>Terraform</li><li>gcloudコマンド</li><li>Google Cloudコンソール</li></ul><p>の3つの方法が存在します。</p><h3 id="Terraformでタグを付与する"><a href="#Terraformでタグを付与する" class="headerlink" title="Terraformでタグを付与する"></a>Terraformでタグを付与する</h3><p>Terraformでは、<code>google_tags_location_tag_binding</code>を利用してタグを付与します。<br>※本リソースは、現時点（2023&#x2F;10&#x2F;15）ではGoogle Betaとなっております。</p><p><a href="https://registry.terraform.io/providers/hashicorp/google-beta/latest/docs/resources/google_tags_location_tag_binding?source=post_page-----6ec09bc31ae--------------------------------">Terraform公式 - google_tags_location_tag_binding</a></p><figure class="highlight sh"><figcaption><span>tags_location_tag_binding.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">data <span class="string">&quot;google_tags_tag_key&quot;</span> <span class="string">&quot;env_key&quot;</span> &#123;</span><br><span class="line">  parent     = <span class="string">&quot;organizations/<span class="variable">$&#123;local.organization.id&#125;</span>&quot;</span></span><br><span class="line">  short_name = <span class="string">&quot;environment&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">&quot;google_tags_tag_value&quot;</span> <span class="string">&quot;dev_tag&quot;</span> &#123;</span><br><span class="line">  parent     = <span class="string">&quot;tagKeys/<span class="variable">$&#123;data.google_tags_tag_key.env_key.name&#125;</span>&quot;</span></span><br><span class="line">  short_name = <span class="string">&quot;dev&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">&quot;google_tags_tag_value&quot;</span> <span class="string">&quot;stg_tag&quot;</span> &#123;</span><br><span class="line">  parent     = <span class="string">&quot;tagKeys/<span class="variable">$&#123;data.google_tags_tag_key.env_key.name&#125;</span>&quot;</span></span><br><span class="line">  short_name = <span class="string">&quot;stg&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">&quot;google_tags_tag_value&quot;</span> <span class="string">&quot;prd_tag&quot;</span> &#123;</span><br><span class="line">  parent     = <span class="string">&quot;tagKeys/<span class="variable">$&#123;data.google_tags_tag_key.env_key.name&#125;</span>&quot;</span></span><br><span class="line">  short_name = <span class="string">&quot;prd&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_tags_location_tag_binding&quot;</span> <span class="string">&quot;dev&quot;</span> &#123;</span><br><span class="line">  provider  = google-beta</span><br><span class="line">  parent    = <span class="string">&quot;//bigquery.googleapis.com/projects/<span class="variable">$&#123;google_project.project_one.project_id&#125;</span>/datasets/<span class="variable">$&#123;google_bigquery_dataset.dataset_dev.dataset_id&#125;</span>&quot;</span></span><br><span class="line">  tag_value = data.google_tags_tag_value.dev_tag.id</span><br><span class="line">  location  = <span class="string">&quot;asia-northeast1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_tags_location_tag_binding&quot;</span> <span class="string">&quot;stg&quot;</span> &#123;</span><br><span class="line">  provider  = google-beta</span><br><span class="line">  parent    = <span class="string">&quot;//bigquery.googleapis.com/projects/<span class="variable">$&#123;google_project.project_one.project_id&#125;</span>/datasets/<span class="variable">$&#123;google_bigquery_dataset.dataset_stg.dataset_id&#125;</span>&quot;</span></span><br><span class="line">  tag_value = data.google_tags_tag_value.stg_tag.id</span><br><span class="line">  location  = <span class="string">&quot;asia-northeast1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_tags_location_tag_binding&quot;</span> <span class="string">&quot;prd&quot;</span> &#123;</span><br><span class="line">  provider  = google-beta</span><br><span class="line">  parent    = <span class="string">&quot;//bigquery.googleapis.com/projects/<span class="variable">$&#123;google_project.project_one.project_id&#125;</span>/datasets/<span class="variable">$&#123;google_bigquery_dataset.dataset_prd.dataset_id&#125;</span>&quot;</span></span><br><span class="line">  tag_value = data.google_tags_tag_value.prd_tag.id</span><br><span class="line">  location  = <span class="string">&quot;asia-northeast1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gcloudコマンドでタグを付与する"><a href="#gcloudコマンドでタグを付与する" class="headerlink" title="gcloudコマンドでタグを付与する"></a>gcloudコマンドでタグを付与する</h3><p>以下のコマンドで付与することができます。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">gcloud alpha resource-manager tags bindings create \</span><br><span class="line">    --tag-value=&lt;ORGANIZATION_ID&gt;/environment/dev \</span><br><span class="line">    --parent=//bigquery.googleapis.com/projects/my_project/datasets/dataset_dev \</span><br><span class="line">    --location=asia-northeast1</span><br></pre></td></tr></table></figure><p>権限が不足している場合は、Organizationにて以下の権限が必要になります。</p><ul><li>roles&#x2F;resourcemanager.tagUser</li></ul><h3 id="コンソールでタグを付与する"><a href="#コンソールでタグを付与する" class="headerlink" title="コンソールでタグを付与する"></a>コンソールでタグを付与する</h3><p>BigQueryのページから、データセットをクリックすると以下のようなデータセット情報が表示されます。<br>この画面から詳細を編集に移動して下さい。</p><img src="/images/20231018a/fe171bd5-fe90-8ef9-cb20-1eeb945b2560.png" alt="" width="1200" height="499" loading="lazy"><p>タグを追加を押すことで、所望のタグを付与することができます。</p><img src="/images/20231018a/4358d88e-757f-d924-3c7f-a6a0a59ae98c.png" alt="" width="852" height="1222" loading="lazy"><p>付与されたタグは「タグ」の箇所に記載されるようになります。</p><img src="/images/20231018a/a310bef6-a3e4-fa3f-713c-4118f1f30511.png" alt="" width="1200" height="492" loading="lazy"><h2 id="IAMを付与する"><a href="#IAMを付与する" class="headerlink" title="IAMを付与する"></a>IAMを付与する</h2><p>データセットにタグも付与できたので、最後にIAMを付与しましょう。<br>IAM条件も記載し、<code>dev</code>タグが一致するデータセットのみを閲覧許可します。</p><figure class="highlight sh"><figcaption><span>project_iam_member.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;google_project_iam_member&quot;</span> <span class="string">&quot;test_user&quot;</span> &#123;</span><br><span class="line">  project = google_project.project.project_id</span><br><span class="line">  role    = <span class="string">&quot;roles/bigquery.dataViewer&quot;</span></span><br><span class="line">  member  = <span class="string">&quot;user:test@xxx.com&quot;</span></span><br><span class="line">  condition &#123;</span><br><span class="line">    title       = <span class="string">&quot;only-dev&quot;</span></span><br><span class="line">    expression  = <span class="string">&quot;resource.matchTag(\&quot;<span class="variable">$&#123;local.organization.id&#125;</span>/environment\&quot;, \&quot;dev\&quot;)&quot;</span></span><br><span class="line">    description = <span class="string">&quot;Only view the dataset with tag of dev.&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>適用後、BigQueryを見てみるとちゃんとdevのデータセットのみが見えていることがわかります。</p><img src="/images/20231018a/aab47fe7-e64b-ad96-2772-2434b2a716fd.png" alt="" width="1200" height="616" loading="lazy"><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事ではタグを利用したBigQueryデータセットのアクセス権限制御について紹介しました。</p><p>データセット1つ1つのアクセス制御を行うには、各データセットに対してIAM(roles&#x2F;bigquery.dataViewerなど)を割り当てる必要があったのですが、データセットに付与されたタグでまとめてIAMを管理できると適切な粒度でアクセス制御ができ、タグで閲覧可能な範囲がまとめられるので管理も楽できるなーと思いました。</p><p>データのセキュリティを強固にするには、内部のメンバーに対してのデータアクセス制御も非常に重要となります。ぜひタグベースのIAM制御を試してみてはいかがでしょうか？</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/IAM/">IAM</category>
      
      <category domain="https://future-architect.github.io/tags/BigQuery/">BigQuery</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E5%88%B6%E5%BE%A1/">アクセス制御</category>
      
      
      <comments>https://future-architect.github.io/articles/20231018a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>実務経験ゼロからのアルバイト体験記</title>
      <link>https://future-architect.github.io/articles/20231017a/</link>
      <guid>https://future-architect.github.io/articles/20231017a/</guid>
      <pubDate>Mon, 16 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231017a/Pixel_Working_11.jpg&quot; alt=&quot;&quot; width=&quot;900&quot; height=&quot;370&quot;&gt;

&lt;h2 id=&quot;自己紹介&quot;&gt;&lt;a href=&quot;#自己紹介&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231017a/Pixel_Working_11.jpg" alt="" width="900" height="370"><h2 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h2><p>SAIG(=Strategic AI Group)でアルバイトとして働いている戸北です。<a href="https://jobs.atcoder.jp/">AtCoderJobs</a>からアルバイトに応募して、現在6ヶ月くらい勤務しています。</p><p>記事を執筆する機会をいただいたので、アルバイト体験記と題して、この半年で行った業務やその感想、成長できたことを振り返ります。</p><h2 id="アルバイトが始まるまで"><a href="#アルバイトが始まるまで" class="headerlink" title="アルバイトが始まるまで"></a>アルバイトが始まるまで</h2><p>私は、情報工学を専攻しておらず、また、実務経験がなかったので、就職を考える上で、まずは何かIT業界での経験を積んでみようと考えました。</p><p>プログラミングについては、ほぼ独学で、競技プログラミングに関連する話題に知識が偏っていて、また、GitやVSCode等をまともに使ったことがありませんでした。そのため、よくあるIT系のアルバイトに応募しても、ミスマッチが起こりそうだと考えていました。</p><p>そこで、競技プログラミングへの理解がありそうな企業で働くことを決め、<a href="https://jobs.atcoder.jp/offers/11">フューチャーの機械学習・AI研究開発者/エンジニアアルバイト</a>に応募し、採用されました。</p><p>採用されると、はじめに、それぞれの興味・関心に合わせたプロジェクトに割り当てられます。<br>私は、スケジューリングの最適化を行うエンジンを開発するプロジェクトに加わることになりました。</p><h2 id="業務内容"><a href="#業務内容" class="headerlink" title="業務内容"></a>業務内容</h2><p>私がこれまでに行ってきた業務を、大まかに3つに分けてそれぞれ説明します。</p><ul><li>テストの作成<ul><li>スケジューリングの最適化を行う上で、入力を受け取って、アルゴリズムを適用できる状態までデータを変形する必要があります。</li><li>その過程がとても複雑なので、違反な入力を正しく検出できるか、意図したエラー処理ができているのか等を確認するテストを作成します。</li><li>他には、小さな入力を与えて、予期した出力を得られるかを確認することもあります。</li></ul></li><li>挙動の調査<ul><li>例えば、意図していた動作が行われているか分からないとき、あるパラメータを特定の値に設定するとエラーが出るときなどに、調査して原因を特定します</li></ul></li><li>小規模な機能の追加<ul><li>ざっくりしているので、一つ具体例を挙げます。もともと、テストではそれぞれ、フォルダに入力に必須なファイルを10個程度入れておく必要がありました。そこで、デフォルトのファイルを設定し、それを使い回すことでファイルを削減しました。デフォルトのファイルを使っていないということが、そのファイルで特殊な入力をしていることと対応するようになるので、テストの意図が明示的になりました。</li><li>他には、エラーの処理を追加したことや、エラーメッセージ等を一括で管理できるようにしたことなどもあります</li></ul></li></ul><h2 id="フューチャーのSAIGでアルバイトして良かった点"><a href="#フューチャーのSAIGでアルバイトして良かった点" class="headerlink" title="フューチャーのSAIGでアルバイトして良かった点"></a>フューチャーのSAIGでアルバイトして良かった点</h2><p>次に、業務内容の良い点と、業務を行う環境の良い点をそれぞれ挙げます。</p><h3 id="業務内容の良い点-～ヒューリスティックコンテストと実務のかかわりについて～"><a href="#業務内容の良い点-～ヒューリスティックコンテストと実務のかかわりについて～" class="headerlink" title="業務内容の良い点 ～ヒューリスティックコンテストと実務のかかわりについて～"></a>業務内容の良い点 ～ヒューリスティックコンテストと実務のかかわりについて～</h3><p>フューチャーSAIGアルバイトの特筆すべき魅力を伝えたいので、業務内容の良い点を、競技プログラミングとのかかわりという側面から書きます。</p><p>プロジェクトで扱うスケジューリングの最適化問題は、現実的な時間で最適解を求めることができないような問題のうちの一つであると知られています。ヒューリスティックコンテストは、このような問題に対して、出来るだけ良い解を求めるプログラムを書くコンテストです。</p><p>そのような問題の例として、<a href="https://future-architect.github.io/articles/20211201a/">巡回セールスマン問題</a>を考えます。簡単に説明すると、セールスマンが、ある地点を出発し、いくつか存在する都市すべてを一度ずつ巡ってもといた地点に戻るような最短経路を求めるという問題です。</p><p>例えば、都市 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> から 都市 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="0.932ex" height="1.957ex" role="img" focusable="false" viewBox="0 -661 412 865"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></svg></mjx-container> に距離 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="3.717ex" height="2.211ex" role="img" focusable="false" viewBox="0 -683 1642.9 977.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(623,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container> で移動するという設定は、実務では、地図上の地点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> から <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="0.932ex" height="1.957ex" role="img" focusable="false" viewBox="0 -661 412 865"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></svg></mjx-container> に <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="3.717ex" height="2.211ex" role="img" focusable="false" viewBox="0 -683 1642.9 977.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(623,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container> 時間で移動することに対応します。地図上の2地点と、移動する道路が計算できると、現実に存在するセールスマンが車に乗り、計算した経路に沿って車を運転して移動する様子をありありと思い浮かべることができます。</p><p>ヒューリスティックコンテストに参加したことがある方なら、プログラムが完成したら、提供されたビジュアライザを使って解を可視化して、それをうっとりと眺めたことがある方も多いと思います。この業務では、それに実在する人間が動いているイメージが伴います。現実の問題を解決しているという実感が得られるのは、楽しいですし、モチベーションになります。</p><h3 id="業務を行う環境の良い点"><a href="#業務を行う環境の良い点" class="headerlink" title="業務を行う環境の良い点"></a>業務を行う環境の良い点</h3><p>一つずつ列挙して説明します。</p><ul><li>PCが支給され、それを使ってリモートで業務を行います。移動時間が負担にならず、働く時間帯にも融通が利くので、ありがたいです</li><li>個人の習熟度によって、粒度や難易度の異なるタスクを行えます<ul><li>タスクを順にこなしながら、自然に知識や経験を増やして、行える作業の幅を増やせるので、モチベーションを保ちやすいです</li></ul></li><li>定期的に上長に次に行いたいタスクの方向性や、業務を行う上での悩み等を相談できます<ul><li>タスクを行う上でのやりとりでは伝えにくい意思や感情を伝えることができます</li></ul></li><li>業務上の質問をしやすい雰囲気が醸成されています<ul><li>行き詰まったときや、疑問が浮かんだときに、チャットで気楽に質問できます</li></ul></li></ul><p>総じて、個々人に応じた適当なタスクを順にこなして、過剰な負担がかからずに自然に成長できるような環境が整えられていることは、アルバイトに応募する側からすると特に良い点だと思います。</p><h2 id="身についたこと"><a href="#身についたこと" class="headerlink" title="身についたこと"></a>身についたこと</h2><p>業務に取り組む上で、最適化エンジンのプログラムを見る機会が多く、そこからいろいろなことを吸収できます。具体的には、以下のようなものがあります。</p><ul><li>適切なコメント、変数の命名の仕方</li><li>エラーの処理、適切なログやエラーのメッセージ</li><li>何をテストとして記述すべきか、どのようなテストケースでテストを行えばよいか</li><li>構造体等を使って、複雑な問題をうまく切り分ける方法</li></ul><p>次に、それ以外のことを挙げます。</p><ul><li>Git や VSCode の基本的な操作<ul><li>始めた頃はいろいろと苦戦していましたが、業務を進行する上で差し障りがない程度には覚えました</li></ul></li><li>報告や質問等のコミュニケーション<ul><li>始めた頃は、プログラム上の問題をどのくらい自然言語に寄せて説明するべきなのか、要領がつかめずに悩んでいた記憶があります</li><li>性格的に手が詰まったら何とかできないか長時間考えてしまうことが多かったですが、自分の知識、理解で解決できる問題なのかを考え直して、適当なところで見切りをつけて、現状をきちんと説明するように心がけるようになりました</li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>ここまでの内容を簡単にまとめます。</p><ul><li>私は、スケジューリングの最適化を行うエンジンを開発するプロジェクトで、テスト作成や挙動の確認、小規模な機能の開発等を行っています</li><li>ヒューリスティックコンテストと実務のかかわりを感じられるのは、このアルバイトの他にはない良い点だと思います</li><li>質問や相談をしやすい環境で、個々人に応じたタスクを順にこなして、自然に成長できるような場が整えられています</li><li>最適化エンジンのプログラムに触れ、業務のやりとりを行いながら、プログラミングの技術や適切なコミュニケーションなどさまざまなものを学ぶことができます</li></ul><p>アイキャッチ画像は<a href="https://www.vecteezy.com/free-vector/person">Person Vectors by Vecteezy</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%83%AB%E3%83%90%E3%82%A4%E3%83%88/">アルバイト</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/">テスト</category>
      
      <category domain="https://future-architect.github.io/tags/AtCoder/">AtCoder</category>
      
      
      <comments>https://future-architect.github.io/articles/20231017a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Cloudflare R2でTerraformのStateを管理する方法: Cloudflare Meetup Nagano Vol.2 に登壇しました</title>
      <link>https://future-architect.github.io/articles/20231016a/</link>
      <guid>https://future-architect.github.io/articles/20231016a/</guid>
      <pubDate>Sun, 15 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231016a/cloudflare_nagano.png&quot; alt=&quot;&quot; width=&quot;660&quot; height=&quot;371&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;イベントリンク： &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231016a/cloudflare_nagano.png" alt="" width="660" height="371" loading="lazy"><p>イベントリンク： <a href="https://cfm-cts.connpass.com/event/295067/">https://cfm-cts.connpass.com/event/295067/</a></p><p>こんにちは。TIGの伊藤です。</p><p>10&#x2F;14に開催されたCloudflare Meetup Naganoに登壇したので発表内容のサマリとイベントのレポートです。</p><h2 id="当日のセッション内容"><a href="#当日のセッション内容" class="headerlink" title="当日のセッション内容"></a>当日のセッション内容</h2><p>当日のセッション内容は以下のスライドになります。</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/25755a81f5c64cebad8f4f8d4e3e4fc1" title="Cloudflare Meetup Nagano Vol.2" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p><a href="https://github.com/kaedemalu/cf-teraform-handson">https://github.com/kaedemalu/cf-teraform-handson</a></p><h3 id="Cloudflare-R2でTerraformのStateを管理する方法"><a href="#Cloudflare-R2でTerraformのStateを管理する方法" class="headerlink" title="Cloudflare R2でTerraformのStateを管理する方法"></a>Cloudflare R2でTerraformのStateを管理する方法</h3><p>今回の登壇では、CloudflareのR2でTerraformのStateを管理できるのか、を調べたので、これを登壇ネタとしました。</p><p>TerraformのStateは一般的にはクラウドプロバイダーが提供するストレージサービスで管理します。例えばAWSであればS3、Google CloudであればGCSのようなものです。</p><p>この時に、S3にホストさせるのであればいかのようなブロックを書いてBackendの設定を行います。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  backend <span class="string">&quot;s3&quot;</span> &#123;</span><br><span class="line">    bucket = <span class="string">&quot;sample-tfstate&quot;</span> <span class="comment"># バケット名</span></span><br><span class="line">    key    = <span class="string">&quot;state&quot;</span> <span class="comment"># オブジェクトのパスを指定</span></span><br><span class="line">    region = <span class="string">&quot;us-east-1&quot;</span> <span class="comment"># バケットのリージョン</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もし、Cloudflareの管理はCloudflareのみで行いたい思いが出てきた時は、ストレージサービスであるR2をBackendとする場合、以下のように書けるとおよそ想像できます(サポートされている前提ですが)。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  backend <span class="string">&quot;r2&quot;</span> &#123;</span><br><span class="line">    bucket = <span class="string">&quot;sample-tfstate&quot;</span></span><br><span class="line">    key    = <span class="string">&quot;state&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ただ、R2を直接的にBackendとして指定することは現時点では対応していない状態です。が、リクエストはTerraform側に出ています。</p><p><a href="https://github.com/hashicorp/terraform/issues/33847">https://github.com/hashicorp/terraform/issues/33847</a></p><p>そこで目をつけたのが、<a href="https://developers.cloudflare.com/r2/api/s3/api/">S3 API compatibility</a>に記載されている、R2とS3の互換性です。R2ではS3の一定のAPIを担保しており、<code>aws</code>コマンドでR2を操作することができます。そのため同様にTerraformでも、<code>backend</code>ブロックでS3を宣言していても実態はR2を見せることができるのではないかと思って今回のネタにしました。</p><h4 id="R2でState管理を実際に行う"><a href="#R2でState管理を実際に行う" class="headerlink" title="R2でState管理を実際に行う"></a>R2でState管理を実際に行う</h4><p>R2のバケットや、クレデンシャルの作成については登壇資料でもある程度触れているので、記事では実際に遭遇したエラーの解消過程を書いていきます。</p><p>S3に互換性のあるAPIを利用するということで、TerraformからはS3を使っているように見せることが必要になります。そのため、利用するBackendタイプは<code>s3</code>を使います。</p><p>まずは単純にR2バケット名を指定して<code>terraform init</code>コマンドを実行しました。</p><figure class="highlight sh"><figcaption><span>backend.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  backend <span class="string">&quot;s3&quot;</span> &#123;</span><br><span class="line">    bucket = <span class="string">&quot;kaedemalu-tfstate&quot;</span></span><br><span class="line">    key    = <span class="string">&quot;default.state&quot;</span></span><br><span class="line">    region = <span class="string">&quot;us-east-1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># エラー1</span></span><br><span class="line">terraform init</span><br><span class="line"></span><br><span class="line">Initializing the backend...</span><br><span class="line">╷</span><br><span class="line">│ Error: error configuring S3 Backend: error validating provider credentials: error calling sts:GetCallerIdentity: InvalidClientTokenId: The security token included <span class="keyword">in</span> the request is invalid.</span><br><span class="line">│       status code: 403, request <span class="built_in">id</span>: 98614ab4-7f7d-46c6-a5fb-1a8aae073866</span><br><span class="line">│ </span><br><span class="line">│ </span><br><span class="line">╵</span><br></pre></td></tr></table></figure><p><code>error validating provider credentials</code>ということでクレデンシャルのバリデーションに失敗しているようです。これはまず回避するために、<code>skip_credentials_validation = true</code>を追加して再度コマンド実行しました。</p><figure class="highlight sh"><figcaption><span>backend.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  backend <span class="string">&quot;s3&quot;</span> &#123;</span><br><span class="line">    bucket                      = <span class="string">&quot;kaedemalu-tfstate&quot;</span></span><br><span class="line">    key                         = <span class="string">&quot;default.state&quot;</span></span><br><span class="line">    region                      = <span class="string">&quot;us-east-1&quot;</span></span><br><span class="line">    skip_credentials_validation = <span class="literal">true</span> <span class="comment"># 追加</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># エラー2</span></span><br><span class="line">terraform init</span><br><span class="line"></span><br><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Successfully configured the backend <span class="string">&quot;s3&quot;</span>! Terraform will automatically</span><br><span class="line">use this backend unless the backend configuration changes.</span><br><span class="line">Error refreshing state: InvalidAccessKeyId: The AWS Access Key Id you provided does not exist <span class="keyword">in</span> our records.</span><br><span class="line">        status code: 403, request <span class="built_in">id</span>: W0GM5Q8918T7P5AT, host <span class="built_in">id</span>: 55kKe3sn45n/RxCHZA5V2fR7lg0TE3OH0CGZlN6gi2bDzQfey8/oQALJWbRo9h1czaK7+f9t4i0=</span><br></pre></td></tr></table></figure><p>S3としてTerraformに対して見せることはできているようですが、<code>The AWS Access Key Id you provided does not exist in our records.</code>とエラーが返ってきて、AWSで発行するアクセスキーIDではないと怒られました。Cloudflareから発行するアクセスキーIDとAWSのそれとは異なるので、このエラーに対しても納得できます。</p><p>このエラーをよく考えてみると、上記の書き方ではS3エンドポイントのBackendを使うので、デフォルトでは<code>https://s3.us-east-1.amazonaws.com</code>を見に行っていることが考えられました。R2では<code>https://&lt;CLOUDFLARE_ACCOUNT_ID&gt;.r2.cloudflarestorage.com</code>をエンドポイントとしているので、<code>endpoint</code>パラメータでエンドポイントを上書きしました。。この状態で<code>terraform init</code>コマンドを実行することで、無事、R2をS3と見せかけた状態で成功しました。</p><figure class="highlight sh"><figcaption><span>backend.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  backend <span class="string">&quot;s3&quot;</span> &#123;</span><br><span class="line">    bucket                      = <span class="string">&quot;kaedemalu-tfstate&quot;</span></span><br><span class="line">    key                         = <span class="string">&quot;default.state&quot;</span></span><br><span class="line">    region                      = <span class="string">&quot;us-east-1&quot;</span></span><br><span class="line">    endpoint                    = <span class="string">&quot;https://&lt;CLOUDFLARE_ACCOUNT_ID&gt;.r2.cloudflarestorage.com&quot;</span> <span class="comment"># 追加</span></span><br><span class="line">    skip_credentials_validation = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで、無事R2でState管理をできるようになり、リソース作成を行うと、実際にStateファイル(<code>default.state</code>)が配置されたり、更新されることがわかりました。そのため、現在のS3互換のAPIサポート状況でも問題なく利用できることがわかりました。</p><p>　</p><h2 id="ほかの登壇内容"><a href="#ほかの登壇内容" class="headerlink" title="ほかの登壇内容"></a>ほかの登壇内容</h2><h3 id="Cloudflare-亀田さんのセッション"><a href="#Cloudflare-亀田さんのセッション" class="headerlink" title="Cloudflare 亀田さんのセッション"></a>Cloudflare 亀田さんのセッション</h3><p>当日のハンズオン資料：<a href="https://zenn.dev/kameoncloud/articles/ee68d54bcadf90">Cloudflare AI Gateway を試してみた</a></p><p>今回はイベント当時ベータ版であるAI Gatewayを経由して、Cloudflare WorkersからOpenAI(Chat GPT)にリクエストを実行するハンズオンでした。今回はOpenAIでしたが、プロキシするサービスはこれ以外にも複数選択することが可能で、これはマルチクラウドで使うことが考えられるCloudflareならではと感じたサービスでした。</p><p>ハンズオンを通して、Workersの手軽さはもちろん、デプロイに利用するWranglerも含めてしっかり整っていることを感じました。また、ハンズオンの時間が少々余ったので、ほかのハンズオン資料として、<a href="https://zenn.dev/kameoncloud/articles/707b3b623bdb87">Cloudflare Workers AI のハンズオン手順</a>も試してみました。これはCloudflareのエッジポイントに配置されているGPUをWorkersで利用し、推論などを行うハンズオンでした。そのため、</p><ul><li>ほかのサービスを利用する場合：AI Gateway</li><li>Cloudflare上で完結させる場合：Workers AI</li></ul><p>と感じました。Clouflare内で構築済みのモデルを利用して私自身もいくつか質問を投げてみましたが、現状は英語での質問がそれなりの精度になる一方日本語については文章の組み立てなどに課題がありそうでした。</p><h3 id="Cloudflare-Pages入門してみた"><a href="#Cloudflare-Pages入門してみた" class="headerlink" title="Cloudflare Pages入門してみた"></a>Cloudflare Pages入門してみた</h3><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/b7619952be484ddc9be5780247ab0f63" title="Cloudflare Pages に入門してみた / 2023-10-14 Cloudflare Meetup Nagano Vol.2" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>Cloudflare Pagesの話ではありましたが、モダンフロントエンド、Webフレームワークの話として参考になりました。私自身、Next.jsを最近触っていることもあり、機能としてフルに生かすために、やほかのフレームワークとの比較がなんとなくイメージつくLTでした。</p><h3 id="Cloudflare-WorkersでOpenAIのLINE-Chatbotを作ってみた"><a href="#Cloudflare-WorkersでOpenAIのLINE-Chatbotを作ってみた" class="headerlink" title="Cloudflare WorkersでOpenAIのLINE Chatbotを作ってみた"></a>Cloudflare WorkersでOpenAIのLINE Chatbotを作ってみた</h3><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/d263bb47e8cf4438a958135a550fe97e" title="Cloudflare Workers で OpenAI の LINE Chatbotを作ってみた" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>LTのネタとして昨今話題になっているOpenAIについて取り上げていましたが、作成の動機がお子さんにAIに触れる機会を作りたい、という親心に心を打たれました。肝心のLINE Chatbotについても半日くらいで作れたようで、開発体験の良さなどのメリット、いまいちなポイントなども知れました。フレームワークについても<a href="https://hono.dev/">hono</a>を利用されていたので、以下のリポジトリ試してみようと思います。</p><p><a href="https://github.com/koda-masaru/chat-bot">https://github.com/koda-masaru/chat-bot</a></p><h3 id="Cloudflare-Zero-Trustを設定して使ってもらってみた"><a href="#Cloudflare-Zero-Trustを設定して使ってもらってみた" class="headerlink" title="Cloudflare Zero Trustを設定して使ってもらってみた"></a>Cloudflare Zero Trustを設定して使ってもらってみた</h3><p>こちらは、前回のCloudflare Meetup Nagano Vol.1に参加して、Cloudflareに興味を持ったことから実際に仕事でZero Trustを導入した話でした。</p><p>仕事で開発されているシステムのデモ環境への接続のスピード、セキュリティの担保をするためにZero Trustを導入して、導入前でもできていたポイントはもちろん、課題とされていた接続スピードについても解消されているということで、Cloudflareのサービス群の導入に対するフットワークの軽さ・導入コストの低さを改めて感じました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>前回に引き続きVol.2も参加し、かつ今回は登壇の機会をいただけたので、調べても出てこなかったことをネタにして形にすることができました。<br>また、イベントの開催地が私の地元である長野であるということもあり、地元のコミュニティに関われたことがとても嬉しかったので、今後もなんらかの形で関われればと考えています。</p><h2 id="余談）地方勉強会参加のススメ"><a href="#余談）地方勉強会参加のススメ" class="headerlink" title="余談）地方勉強会参加のススメ"></a>余談）地方勉強会参加のススメ</h2><p>今回、長野のイベントに参加するきっかけは帰省しながら参加できることにつきますが、これに限らず地方で開催される勉強会も改めて足をのばすと良いなと思いました。普段足を伸ばすきっかけがない土地でも、技術やイベントに誘われて参加しつつ、近隣の観光やその土地の料理を味わえるのも地方勉強会ならではの良さだと考えています。今回は懇親会で長野の日本酒をたくさん楽しめました。</p><img src="/images/20231016a/IMG_3553.jpg" alt="" width="1200" height="1093" loading="lazy"><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>技術ブログのほかのClouflare記事<ul><li><a href="https://future-architect.github.io/articles/20230427a/">CDN 入門とエッジでのアプリケーション実行</a></li><li><a href="https://future-architect.github.io/articles/20230502a/">cf-terraformingで入門するCloudflare</a></li></ul></li><li>イベント当日のハッシュタグ <a href="https://twitter.com/hashtag/CloudflareUG_mmj">#CloudflareUG_mmj</a></li><li><a href="https://togetter.com/li/2241595">Togetter</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/Cloudflare/">Cloudflare</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/">登壇資料</category>
      
      
      <comments>https://future-architect.github.io/articles/20231016a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Meta Quest 3開封の儀＆フルカラーパススルーで家にテルミンを置いた</title>
      <link>https://future-architect.github.io/articles/20231013a/</link>
      <guid>https://future-architect.github.io/articles/20231013a/</guid>
      <pubDate>Thu, 12 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DX</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DX ユニット所属、金欠コンサルタントの藤井です。</p><p>2023年10月10日、とうとう発売されましたね。<a href="https://www.meta.com/jp/quest/quest-3/">Meta Quest 3</a>（以下 Quest3 と略記）が。しっかり予約して発売日に手に入れようとしたんですが、何故か配達日がズレて 1 日遅れで入手しました。<br>せっかくなので、開封の儀と、Quest3 の目玉機能の一つである、<a href="https://www.meta.com/ja-jp/help/quest/articles/getting-started/getting-started-with-quest-pro/full-color-passthrough/">フルカラーパススルー</a>を使って遊んでみようと思います。</p><p>ちなみに、この記事は<a href="https://immersed.com/">immersed</a>を用いて、VR 空間のバーチャルディスプレイを使って書いています。バーチャルデスクトップについては<a href="/articles/20221031b">井上さんの記事をご参照</a>ください。</p><h2 id="開封の儀"><a href="#開封の儀" class="headerlink" title="開封の儀"></a>開封の儀</h2><h3 id="外観確認・Quest2-との比較"><a href="#外観確認・Quest2-との比較" class="headerlink" title="外観確認・Quest2 との比較"></a>外観確認・Quest2 との比較</h3><p>それでは早速開封していきます。<br>ケースと箱はシンプルで、思ったよりコンパクトでした。（ダンボールに梱包されて届いた時点で想像より小さかったのでちょっと驚きました。）</p><img src="/images/20231013a/box.jpg" alt="box.jpg" width="1200" height="1091" loading="lazy"><p>箱から取り出して Quest2 と比較してみます。</p><p>まずは本体を上から見た図です。（右が Quest3）</p><img src="/images/20231013a/up.jpg" alt="up.jpg" width="1200" height="841" loading="lazy"><p>ディスプレイ部分が明らかに薄くなっており、全体的にコンパクトに感じます。<br>レンズをパンケーキレンズに変更したことでサイズダウンするとは聞いていましたが、思ったより大幅に薄くなっていました。</p><p>装着する部分のバンドも明らかに見た目が違うのですが、これは私が Quest2 のバンドをバッテリー付きの Elite ストラップに変更しているからというのもあります。</p><p>この Elite ストラップというのが非常につけ心地が良いのもあり、正直 Quest3 のバンドはちょっと微妙でした。あまり頭にフィットせず、調整も難しいです。Quest3 用の Elite ストラップも買うことにしました。</p><p>一応 Quest2 の頃から改修は加えられており、頭頂部～後頭部部分が Y 字になって、よりフィットしやすくなってはいるようです。（この Y 字が開くことで締め付けが調整できる、というのになかなか気づけず…Quest3 を装着してから見ることができるチュートリアルで調整の仕方が紹介されるため、先にチュートリアルを進めるのが良いかもしれません。）</p><p>次に前から見た図がこちらです。（下が Quest3）ついでにコントローラーも並べています。</p><img src="/images/20231013a/front.jpg" alt="front.jpg" width="1200" height="1155" loading="lazy"><p>本体には特徴的な三つ目がついており、左右のそれぞれに RGB カメラと IR カメラが1つずつ、真ん中には深度センサーが取り付けられています。これらを用いてフルカラーパススルー及び MR のための空間認識機能を提供しているようです。<br>また、これに加えて、底面側に 2 つカメラがついているので、トータルで 6 つのカメラと 1 つの深度センサーが搭載されています。</p><p>コントローラーも大幅に変化していて、Quest2 のコントローラーにあったリングが無くなっています。元々このリングは赤外線を発しており、それを本体の赤外線カメラで検知することでコントローラーのトラッキング（位置・姿勢の取得）していました。</p><p>Quest3 ではリングが無くなった分、上面（ボタンやスティックが配置されている面）から赤外線を発しているようです。ただ、コントローラーを握っていたり、回転させると本体に赤外線が届かなくなってしまいます。そこで赤外線の検知に加え、ハンドトラッキングも並列で行ったり、加速度センサー・ジャイロセンサーの入力で補正したりと、多角的にトラッキングを行うことで安定したトラッキングを実現しているようです。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>ハンドトラッキングに関しては<a href="/articles/20220823a/">私の記事</a>でちょっとだけ解説しています。（この記事はもう一回参照します。）実際の使用感としても、リングが無くなったことでトラッキングの精度が落ちた実感はありませんでした。</p><h3 id="フルカラーパススルーと-MR-を体験してみる"><a href="#フルカラーパススルーと-MR-を体験してみる" class="headerlink" title="フルカラーパススルーと MR を体験してみる"></a>フルカラーパススルーと MR を体験してみる</h3><p>開封も済んだので、三つ目を活かしたフルカラーパススルー・MR を体験してみようと思います。Meta が Quest3 の MR 体験用に提供しているゲームである<a href="https://www.meta.com/ja-jp/experiences/6236169136472090/">First Encounters</a>をプレイしてみました。何枚かキャプチャも撮ったのですが、あんまりキャプチャだと凄さが伝わりそうになかったため、あえて文字だけで紹介してみます。できれば体験会や持っている知人に頼んで実際にプレイしてみていただきたいです。</p><p>まずゲームが始まる前に、プレイエリアを認識するため、部屋のスキャンを行います。と言っても、やることは部屋中をぐるりと眺めるぐらいです。ここで三つ目が活用され、リアルタイムに壁や障害物が認識されていきます。部屋のスキャンが完了すればゲーム開始です。ゲーム内容は簡単な FPS（ちょっとだけパズル要素あり）という感じなのですが、そこは MR、舞台は今自分がいる部屋なので、慣れ親しんだ空間がプレイエリアになるのでとても楽しい…と言う話ではありません（多分それは AR）。なんとゲームが始まると早々に天井の一部が崩れ落ちて宇宙船が落ちてきたのです。上階の人が床をぶち抜いたのかと思いました。</p><p>その後もちっちゃい宇宙人が壁を壊して部屋に入り込んできたり、自分が撃った弾が壁を壊したりと、だんだんと自分の部屋だったはずの空間が広大な空間（どこかの星）に変わっていきます。</p><p>こうなるともう脳はしっかり騙されてしまい、段々とどこが自分の部屋でどこがゲーム空間かわからなくなってきます。シームレスに現実と仮想空間が混ざり合っていく。なるほどこれが Mixed Reality か、という気持ちになりました。<br>（なお、二度ほど壁にぶつかりました。痛い。）</p><p>繰り返しになりますが、スクリーンショットやプレイ動画、文章だけではこの感覚は伝わらないので、ぜひとも何らかの方法で一度体験していただきたいです。</p><h2 id="フルカラーパススルーを使って、家にテルミンを置いてみる"><a href="#フルカラーパススルーを使って、家にテルミンを置いてみる" class="headerlink" title="フルカラーパススルーを使って、家にテルミンを置いてみる"></a>フルカラーパススルーを使って、家にテルミンを置いてみる</h2><p>さて、公式のしっかりした MR を体験したところで、自分でも触ってみたくなったので、まずはフルカラーパススルーを試してみます。<br>とはいえ一からコンテンツを作っていると時間がかかるので、<a href="/articles/20220823a/">以前作成したハンドトラッキングテルミンシミュレータ</a>を流用して、我が家にテルミンを召喚してみましょう。</p><p>Oculus Integration のパッケージを導入していましたが、かなりアップデートが入っていたため、執筆時最新バージョンである 57.0 にアップデートした上で開発していきます。（その他 Unity のバージョンも 2022 まで上げたりしています。）</p><p>いつの間にか Oculus Integration が非常に便利になっており、直感的に必要なあれこれをシーンに追加できるようになっていました。メニューバーから Oculus -&gt; Tools -&gt; Building Blocks と行くと、各機能ごとのブロックが表示されるので、この中から必要なものをヒエラルキーに D&amp;D するだけで導入が完了します。</p><p>今回は Camera Rig と Hand Tracking（以前テルミンシミュレータを作ったときのもとと競合するので、そちらは削除してから）を導入し、加えてパススルーを提供してくれる、Background Passthrough を導入します。</p><img src="/images/20231013a/image.png" alt="image.png" width="1200" height="906" loading="lazy"><p>あとはテルミン側のスクリプトから、ハンドトラッキングの参照を設定し直せば準備完了です。ビルドして動かしてみましょう。</p><p>我が家にテルミンが来た！（思ったより大きい）</p><img src="/images/20231013a/6e962269ed7aea050fd5c2cf96faf4fa.png" alt="6e962269ed7aea050fd5c2cf96faf4fa.png" width="1200" height="1066" loading="lazy"><p>床にもちゃんと接してますね。（画像だとわかりにくいですが）</p><p>ただ、自分の手との前後関係はパススルーのみでは判定しようがないので、（本当はテルミンのほうが奥にあるのに）手の手前にテルミンが描画されてしまっています。このあたりはおそらく深度センサーを適切に使うことで解決する気はします。</p><p>ところでテルミンの 3D モデル、全く作り込んでいないのであからさまに 3D オブジェクト、という感じなのですが、それでもフルカラーパススルーで現実世界に登場させると、一気にそこに物があるような錯覚に襲われます。（ぶつかりそうになったら無意識に避けようとしてしまうぐらい）</p><p>もっとリアルなものを登場させたり、逆に First Encounters のようなコミカルなものと現実世界を融合させたりと、可能性は非常に広そうだと改めて感じました。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>テルミン、やっぱり難しい。</p><p>というのは冗談として、やはり新しいデバイスというのは胸が躍りますね。私が XR 系が好きだというのもありますが、特に XR 系の発展は身近に未来を感じられてハッピーです。</p><p>今後も新しい技術・デバイスが現れる度に色々とトライしていきたいと思います。</p><p>とりあえず直近は、深度センサーも活用してなにか作って遊べないか試したいです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">Meta Reveals How Quest 3 Controller Tracking Works As Beat Saber Founder Gives His Take <a href="https://www.uploadvr.com/meta-explains-quest-3-controller-tracking/">https://www.uploadvr.com/meta-explains-quest-3-controller-tracking/</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/VR/">VR</category>
      
      
      <category domain="https://future-architect.github.io/tags/VR/">VR</category>
      
      <category domain="https://future-architect.github.io/tags/MetaQuest3/">MetaQuest3</category>
      
      
      <comments>https://future-architect.github.io/articles/20231013a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Makefile覚書: Goアプリ開発に役立ちそうな基礎知識</title>
      <link>https://future-architect.github.io/articles/20231012a/</link>
      <guid>https://future-architect.github.io/articles/20231012a/</guid>
      <pubDate>Wed, 11 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231012a/gnu-make.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;418&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231012a/gnu-make.png" alt="" width="800" height="418"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。育休明けです。</p><p>フューチャー社内のタスクランナーはmakeや<a href="https://taskfile.dev/">Task</a>など複数の流派があり、チームによって使い分けられています。個人的にはmakeで良いんじゃないかと思っていますが、Taskも良いですよね。</p><p>makeは細かい記法をいつも忘れる＋調べるとC言語向けの情報が出てきて脳内変換に手間を感じたため、makeを用いてWebバックエンドアプリをGoで開発するということをテーマに、役立ちそうな情報をまとめます。</p><p>なお、今記事におけるmakeは、GNU Makeを指します。バージョンは以下で動かしています。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ make -v | <span class="built_in">head</span> -n 1</span><br><span class="line">GNU Make 4.2.1</span><br></pre></td></tr></table></figure><h2 id="MakefileのためのEditorConfig"><a href="#MakefileのためのEditorConfig" class="headerlink" title="MakefileのためのEditorConfig"></a>MakefileのためのEditorConfig</h2><p>Makefileのインデントはハードタブである必要があります。誤りを防ぐためにも<a href="https://editorconfig.org/">EditorConfig</a>を設定しておくと良いでしょう。</p><p>makeは通常、Makefileという名称をデフォルトで認識しますが、同一フォルダに複数のファイルを用意したいときや、includeように共通の変数などを定義したファイルを作る場合は、<code>.mk</code> という拡張子を付けますので、<code>[&#123;Makefile,**.mk&#125;]</code> というセクションが良いでしょう（<a href="https://www.gnu.org/software/make/manual/html_node/Makefile-Names.html">小文字の<code>makefile</code> より <code>Makefile</code> の方を推奨する</a>とのことなので小文字の方はあえて入れてません）。</p><figure class="highlight ini"><figcaption><span>.editorconfig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">root</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[*]</span></span><br><span class="line"><span class="attr">indent_style</span> = space</span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">end_of_line</span> = lf</span><br><span class="line"><span class="attr">charset</span> = utf-<span class="number">8</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">insert_final_newline</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[*.go]</span></span><br><span class="line"><span class="attr">indent_style</span> = tab</span><br><span class="line"></span><br><span class="line"><span class="section">[&#123;Makefile,**.mk&#125;]</span></span><br><span class="line"><span class="attr">indent_style</span> = tab</span><br></pre></td></tr></table></figure><p>記事によっては以下のように <code>indent_size</code> を指定する設定例もよく見かけます。こちらを指定していると、ハードタブの場合でも、エディタやGitHub上の表示幅を制御してくれるため、チーム開発で見た目まで統一を効かせたい場合は追加すると良いでしょう。個人的にはここは個々人に委ねても良い領域だと感じたので上の例から省いています。</p><figure class="highlight ini"><figcaption><span>.editorconfig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[&#123;Makefile,**.mk&#125;]</span></span><br><span class="line"><span class="comment"># 表示幅もEditorconfigで制御したい場合はindent_sizeの設定を加える</span></span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">indent_style</span> = tab</span><br></pre></td></tr></table></figure><h2 id="リンター"><a href="#リンター" class="headerlink" title="リンター"></a>リンター</h2><p>Makefileのリンターとして<a href="https://github.com/mrtazz/checkmake">mrtazz&#x2F;checkmake</a> があります。2023.10.6時点でv0.2.2、<code>experimental tool</code> とREADMEにかかれているGo製のツールです。まだ実験的な取り組みのようですが、すでに <a href="https://github.com/oxsecurity/megalinter">MegaLinter</a>にネイティブで組み込まれており、利用しているチームも増えているように感じます。</p><p>v0.2.2時点での<a href="https://github.com/mrtazz/checkmake/tree/main/rules">実装</a>から、次の4種類のチェックを行ってくれるようです。</p><ol><li>ターゲットボディがN行以内（デフォルト5）</li><li>all, clean, testのターゲットがPHONYにあること</li><li>ボディがないターゲットはPHONY宣言すること</li><li>ビルドの一貫性のためdateの利用有無</li></ol><p>また、先のEditorConfigの設定値が正しく反映されたエディタで編集されているかチェックするため、<a href="https://github.com/editorconfig-checker/editorconfig-checker">editorconfig-checker</a>を使うという考え方もあります。こちらはMakefile以外のファイルに対しても利用できるものなので、一律設定しておくとベターだと思います。</p><p>リンターと合わせてフォーマッターについても触れたかったですが、有益なものを探せませんでした。もし、ご存知の方がいれば教えてください。</p><h2 id="コーディング規約"><a href="#コーディング規約" class="headerlink" title="コーディング規約"></a>コーディング規約</h2><p>Makefileそのものの、コーディング規約（スタイルガイド）で広く周知されているものの1つが<a href="https://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html">GNUのマニュアル</a> でしょう。多くの慣習がここから来ていそうな大本です。</p><p>重要そうなものを抜粋します。</p><ul><li>Makefile Basics（Makefile基礎）<ul><li>すべてのMakefileは <code>SHELL = /bin/sh</code> が含まれるべきとある</li><li>こちらについては後述しますが、 <code>bash</code> の方がベターだと思います</li></ul></li><li>Standard Targets（標準ターゲット）<ul><li>すべてのGNUプログラムには次のターゲットが含まれるべきとある<ul><li><code>all</code>、<code>install</code>、<code>install-html</code>、(中略)、<code>clean</code>、(中略)、<code>TAGS</code>、<code>info</code>、<code>dvi</code>、<code>html</code>、<code>pdf</code>、<code>ps</code>、<code>dist</code>、<code>check</code>、(省略)</li></ul></li><li><code>install-html</code> の例にある通り、 <strong>ターゲット名はハイフン区切り</strong> が推奨だと思われます</li></ul></li></ul><p>ターゲット名はこれをベースにできるのが嬉しいですね。GoでWebバックエンドアプリ開発だと、<code>all</code>, <code>install</code>, <code>uninstall</code>, <code>clean</code>, <code>dist</code>, <code>check</code> あたりは使えそうですが、変わって来ているものもあります。</p><ul><li><code>all</code>: make の慣習でプログラム全体をビルドするターゲット名です。<code>make</code>コマンドのみでターゲット名を指定しない場合に通常呼び出されます。<code>test</code>、<code>build</code> などすべてを実施しておくとよいでしょう。デプロイは行わないほうが良いかと思います</li><li><code>check</code>: <code>test</code> にすることがWebアプリ開発では多いように思います。先程の<code>mrtazz/checkmake</code>も<code>test</code>想定です。</li><li><code>install</code>: 本来は開発中のプログラムのインストールを行うターゲットで、開発環境セットアップの意味では無いです。そのため <code>setup</code> と別の用語を用いることも多いと思います。しかし Goだと <code>go install</code> で必要なツールを入れることも多いこともあり、 <code>install</code> を使っている場面もよく見ますが、意味合いが異なるため <code>setup</code> がベターだと思います</li><li><code>dist</code>: サーバデプロイ用にzipで固める場合などに使っても良い気がしますし、開発者にとってはさして重要でなければ <code>bootstrap.zip</code> などというターゲット名のみにして良い気がします</li><li><code>clean</code>: 生成したバイナリを削除したり、Goアプリ開発の場合は<code>go clean</code> なども合わせて実施すると良いでしょう</li></ul><p>次にメジャーだと思われる規約に<a href="https://clarkgrubb.com/makefile-style-guide">clarkgrubbのスタイルガイド</a>があります。こちらについてはまた別の機会で紹介します。</p><h2 id="Makefileオプション"><a href="#Makefileオプション" class="headerlink" title="Makefileオプション"></a>Makefileオプション</h2><p>Makefileの先頭によく設定するオプションは次です。それぞれ説明していきます。</p><figure class="highlight makefile"><figcaption><span>Makefile</span></figcaption><table><tr><td class="code"><pre><span class="line">SHELL := bash</span><br><span class="line">.SHELLFLAGS := -eu -o pipefail -c</span><br><span class="line">.DEFAULT_GOAL := help</span><br></pre></td></tr></table></figure><ul><li><p><code>SHELL</code>: 次の <code>.SHELLFLAGS</code> を利用するために <code>bash</code> を宣言します。<code>/bin/bash</code> でも良いと思いますが、<code>bash</code> そのままの方が移植性が高いと考えます</p></li><li><p><code>.SHELLFLAGS</code>: シェルスクリプトの実行時オプション（疑似ターゲット）です</p><ul><li><code>-eu</code>: <code>-e</code> はbashで実行したコマンドが失敗した場合に終了させるものです。<code>;</code> などで複数のコマンドをワンライナーで記述した場合でも止めたいのでオプションに加えます。 <code>-u</code> はbashで変数未定義の場合にエラーで止めるためのオプションです</li><li><code>-o pipefail</code>: パイプを使った処理を書いた場合に、パイプの最初や途中で処理が失敗した場合、全体を失敗したとみなすためのオプションです</li><li><code>-c</code>: <code>.SHELLFLAGS</code> オプションを用いるときには最後につけるのが必須です。理由は内部的には各行が <code>$(SHELL) -$(SHELLFLAGS) 何かしらのcommands</code> といった形で動くためです（<code>bash -c &quot;echo &#39;Hello&#39;&quot;</code> のようにコマンドとして評価させるためのオプションです）。<code>.SHELLFLAGS</code>のデフォルト値は <code>-c</code> が入っています。</li></ul></li><li><p><code>.DEFAULT_GOAL</code>: デフォルト（ターゲットを未指定にした場合に選ばれる対象）は一番最初に定義したターゲットです。慣習的には <code>all</code> ターゲットを最初に定義することが多いようです。しかし、後述するスクリプトを機械的に追加して、<code>help</code> にしておくと便利だと思います（allだと実行時間が長いので）。これは好みなのでチームによってはなくしても良いと思います</p></li></ul><p>特に <code>.SHELLFLAGS</code> で渡す値は個人的に重要で、指定を忘れるとその後、高確率でハマるメンバーが出現する体感がありますので、Makefileには機械的につける慣習化しておくと良いかなと思います。</p><p>makeには様々な設定ができますが、以下は1度は付けたものの運用をとして外した設定値です。備忘に残しておきます</p><ul><li><code>MAKEFLAGS += --warn-undefined-variables</code>: makeの実行オプションで、<code>--warn-undefined-variables</code> はmake上で未定義の変数を $(undefined_var) などで利用すると警告を上げるものです。これ自体は良さそうだと思いましたが、後述する <code>go test $(option) ./...</code> のように拡張用のパラメータを指定するときにノイズだったので削除しました</li><li><code>MAKEFLAGS += --no-print-directory</code>: 後述がありますが、こちらは一律指定しても良いレベルだと思います。この記事では先頭行をあまり増やすのも、makeを難しいものと思われそうだったので除外しています</li><li><code>MAKEFLAGS += --no-builtin-rules</code>: <code>make</code> が暗黙的に探すファイルを無効化する設定です。性能向上が見込まれるようですが、Go環境だと大きな差は生まれなかったため、シンプル化のためなくします</li><li><code>.SUFFIXES:</code>:  <code>MAKEFLAGS += --no-builtin-rules</code> と同様です</li><li><code>.DELETE_ON_ERROR</code>: レシピが失敗した場合にターゲットのファイルを削除するオプション（疑似ターゲット）です。便利そうですがmakeを知らない開発者からするとこの挙動が直感的ではないため、make上級者が集うチームでない限りは未設定で良いと思いました</li><li><code>.ONESHELL</code>: <code>make</code>は通常1行ごと別のプロセスで起動しますが、これを1つのシェルとして動かすオプションです（<code>;</code>や<code>\</code>を減らせて便利です）。 規模感にもよりますが私が関わったGo Webアプリ開発の規模感では <code>make</code> にそれほど複雑な処理を行うことはなかったので、なるべく先頭の宣言部分をシンプルにしたかったため外す方針としました</li></ul><h2 id="Goアプリに環境変数を渡す"><a href="#Goアプリに環境変数を渡す" class="headerlink" title="Goアプリに環境変数を渡す"></a>Goアプリに環境変数を渡す</h2><p>クラウドネイティブなアプリケーション開発のためにThe Twelve-Factor Appを守っているチームは多いと思います。そうすると、DBや外部接続先など、それなりの数の環境変数をGoのアプリケーションに渡す必要が出てくるでしょう。</p><p>このとき、有名なよくある間違いは次のようなターゲット内のコマンドに変数をexportして記載するパターンです（※パスワードはラフに扱ってますのがイメージとして捉えてください）。</p><figure class="highlight ini"><figcaption><span>Makefile（NG例）</span></figcaption><table><tr><td class="code"><pre><span class="line">SHELL := bash</span><br><span class="line">.SHELLFLAGS := -eu -o pipefail -c</span><br><span class="line"></span><br><span class="line">.PHONY: run</span><br><span class="line"></span><br><span class="line"><span class="comment"># run is launching server</span></span><br><span class="line">run:</span><br><span class="line">@export <span class="attr">DB_HOST</span>=localhost</span><br><span class="line">@export <span class="attr">DB_PORT</span>=<span class="number">5432</span></span><br><span class="line">@export <span class="attr">DB_NAME</span>=pg</span><br><span class="line">@export <span class="attr">DB_USER</span>=pg</span><br><span class="line">@export <span class="attr">DB_PASS</span>=xxxxx</span><br><span class="line">@go run cmd/main/main.go</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>cmd/main/main.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/kelseyhightower/envconfig&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DBConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">Host <span class="type">string</span></span><br><span class="line">Port <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">User <span class="type">string</span></span><br><span class="line">Pass <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> dc DBConfig</span><br><span class="line"><span class="keyword">if</span> err := envconfig.Process(<span class="string">&quot;db&quot;</span>, &amp;dc); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;Load env: %+v\n&quot;</span>, dc)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>環境変数は適用されません。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ make run</span><br><span class="line">Load <span class="built_in">env</span>: &#123;Host: Port:0 Name: User: Pass:&#125;</span><br></pre></td></tr></table></figure><p>これは make のターゲットのレシピ1行1行でシェルスクリプトのプロセスが別々になるためです（※ <code>.ONESHELL:</code> の疑似ターゲットが無い場合）。</p><p>回避するには、インラインで変数宣言するか（エスケープで改行しているのでインライン感は無いですが）、<code>&amp;&amp;</code> で同一シェル内で宣言するかなどが考えられます。</p><figure class="highlight ini"><figcaption><span>Makefile(インラインパターン）</span></figcaption><table><tr><td class="code"><pre><span class="line">run:</span><br><span class="line">@<span class="attr">DB_HOST</span>=localhost \</span><br><span class="line">    <span class="attr">DB_PORT</span>=<span class="number">5432</span> \</span><br><span class="line">    <span class="attr">DB_NAME</span>=pg \</span><br><span class="line">    <span class="attr">DB_USER</span>=pg \</span><br><span class="line">    <span class="attr">DB_PASS</span>=pgpass \</span><br><span class="line">    go run cmd/main/main.go</span><br></pre></td></tr></table></figure><figure class="highlight ini"><figcaption><span>Makefile（同一シェルで動かすパターン）</span></figcaption><table><tr><td class="code"><pre><span class="line">run:</span><br><span class="line">@export <span class="attr">DB_HOST</span>=localhost &amp;&amp; \</span><br><span class="line">export <span class="attr">DB_PORT</span>=<span class="number">5432</span> &amp;&amp; \</span><br><span class="line">export <span class="attr">DB_NAME</span>=pg &amp;&amp; \</span><br><span class="line">export <span class="attr">DB_USER</span>=pg &amp;&amp; \</span><br><span class="line">export <span class="attr">DB_PASS</span>=pgpass &amp;&amp; \</span><br><span class="line">go run cmd/main/main.go</span><br></pre></td></tr></table></figure><p>どちらもgit差分がわかりやすくするため改行を入れています。また先頭行はmake実行時にコマンドを非表示にするため<code>@</code>を追加しています。</p><p>個人的には開発上もっとも利用頻度が高い値に関してはトップレベルで変数宣言 + export（これだけ記載すると全変数をexportする）するのがてっとり早いと思います。たまに <code>.EXPORT_ALL_VARIABLES</code> という疑似ターゲットで説明した例がありますが、<a href="https://www.gnu.org/software/make/manual/html_node/Variables_002fRecursion.html">古いmakeのバージョンで用いるもの</a>であるとのことで、通常はexportを使えば良いと思います。</p><figure class="highlight ini"><figcaption><span>Makefile</span></figcaption><table><tr><td class="code"><pre><span class="line">SHELL := bash</span><br><span class="line">.SHELLFLAGS := -eu -o pipefail -c</span><br><span class="line"></span><br><span class="line">.PHONY: run</span><br><span class="line"></span><br><span class="line">export</span><br><span class="line"><span class="attr">DB_HOST</span>=localhost</span><br><span class="line"><span class="attr">DB_PORT</span>=<span class="number">5432</span></span><br><span class="line"><span class="attr">DB_NAME</span>=pg</span><br><span class="line"><span class="attr">DB_USER</span>=pg</span><br><span class="line"><span class="attr">DB_PASS</span>=pgpass</span><br><span class="line"></span><br><span class="line"><span class="comment"># run is launching server</span></span><br><span class="line">run:</span><br><span class="line">@go run cmd/main/main.go</span><br></pre></td></tr></table></figure><p>あるいは、 <code>make</code> に慣れないメンバーが多い場合、 <code>export</code> が少しわかりにくいのでいっそ変数毎に付けたほうが直感的かもしれません。</p><figure class="highlight makefile"><figcaption><span>Makefile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># ...省略...</span></span><br><span class="line"><span class="keyword">export</span> DB_HOST=localhost</span><br><span class="line"><span class="keyword">export</span> DB_PORT=5432</span><br><span class="line"><span class="keyword">export</span> DB_NAME=pg</span><br><span class="line"><span class="keyword">export</span> DB_USER=pg</span><br><span class="line"><span class="keyword">export</span> DB_PASS=pgpass</span><br><span class="line"></span><br><span class="line"><span class="comment"># run is launching server</span></span><br><span class="line"><span class="section">run:</span></span><br><span class="line">@go run cmd/main/main.go</span><br></pre></td></tr></table></figure><p>すこし冗長ですが、こちらの方がサブプロセスに引き継がせたくない変数が出てきた場合に都合が良いため、すべての変数を環境変数としてGoのプロセスに与えたい場合も、あえてこちらの方針を採用するのもありじゃないかと思います。</p><h2 id="env-を読み込む"><a href="#env-を読み込む" class="headerlink" title=".env を読み込む"></a>.env を読み込む</h2><p>チームによっては <code>.env</code> で環境変数を管理している場合もあるでしょう。記載された変数をGoのプログラムにすべて渡すには以下のように <code>include</code> を用います。<a href="https://dev.to/serhatteker/get-environment-variables-from-a-file-into-makefile-2m5l">こちら</a>を参考にしました。</p><figure class="highlight makefile"><figcaption><span>Makefile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="variable">$(PWD)</span>/.env</span><br><span class="line"><span class="keyword">export</span></span><br><span class="line"></span><br><span class="line"><span class="section">run:</span></span><br><span class="line">go run cmd/main/main.go</span><br></pre></td></tr></table></figure><p>これは少しテクニカルで、 <code>include</code> は本来は別のMakefileを読み込むディレクティブです。たまたま <code>.env</code> のファイルレイアウトがMakefileとして読み込める形式であったため、このように扱えます。 私は <code>.env</code> の形式に詳しくないため、厳密には扱えないケースがあるかもしれませんが、key1&#x3D;value1、key2&#x3D;${value1} といった代表的なユースケースであれば問題なかったので、シンプルな使い方に留めるのであれば利用して良いのではないかと考えています。</p><p>ここでややこしいのは、developなど別環境に接続したい場合です。利用する環境変数を書き換える必要があります。もし、 <code>.env.develop</code> などのファイルが存在する場合は、<code>.env</code> の読み込みを変数化して切り替えられるようにすると良いかもしれません。基本的にはローカル環境、動作確認など限られたケースでのみクラウド上の開発環境に接続するといった場合を想定しています。</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">DOTENV := <span class="variable">$(PWD)</span>/.env</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(DOTENV)</span></span><br><span class="line"><span class="keyword">export</span></span><br><span class="line"></span><br><span class="line"><span class="section">run: ## run launches go server</span></span><br><span class="line">go run cmd/main/main.go</span><br></pre></td></tr></table></figure><p>develop環境に接続する場合は、次のように<code>DOTENV</code> 変数を指定して実行します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ make DOTENV=.env.develop run</span><br></pre></td></tr></table></figure><p>もし、 <code>run-dev</code> のようなターゲットを補完目的などで個別に定義したい場合は厄介です。ターゲット内のコマンドをインラインで変数上書きするか、以下のように <code>$(MAKECMDGOALS)</code> で includeするファイルを動的に <code>.env.develop</code> を書き換える必要があります。後者の例をあげます。 <code>lastword</code> は最後の文字列が一致するか判定するmakeの関数で <code>-dev</code> で終わっているかどうかを示します。</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">DOTENV := <span class="variable">$(PWD)</span>/.env</span><br><span class="line"></span><br><span class="line"><span class="comment"># run-dev 時に環境変数を書き換えたいため、includeをmakeのゴールのsuffixによって分岐する</span></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(<span class="built_in">lastword</span> <span class="variable">$(MAKECMDGOALS)</span>)</span>, -dev)</span><br><span class="line">DOTENV := <span class="variable">$(PWD)</span>/.env.develop</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(DOTENV)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span></span><br><span class="line"></span><br><span class="line"><span class="section">run: ## run launches go server</span></span><br><span class="line">go run cmd/main/main.go</span><br><span class="line"></span><br><span class="line"><span class="section">run-dev: ## run-dev launches go server with development configurations</span></span><br><span class="line">go run cmd/main/main.go</span><br></pre></td></tr></table></figure><p>このあたりから、初見の人から見ると魔術感が漂ってくるため、ベタに環境変数をインラインで上書きするの戦略としてありだと思います。用法用量はチームメンバーのスキルセットも鑑み、調整していきましょう。</p><h2 id="サブフォルダのMakefileを呼び出す"><a href="#サブフォルダのMakefileを呼び出す" class="headerlink" title="サブフォルダのMakefileを呼び出す"></a>サブフォルダのMakefileを呼び出す</h2><p>クラウドネイティブ時代になり、複数の機能を1つのAPサーバにデプロイするのではなく、レポート、監視、システム間I&#x2F;Fなどの非同期処理はAWS Lambdaなど別サービスにデプロイすることが多くなりました。そのため、あるサービスを開発中にも複数のmainパッケージを持つプログラムを開発していると思います。それに相応してMakefile自体もそれぞれ存在していると思います。例えば、以下のようにMakefileを束ねるMakefileが存在し、一括でテスト、デプロイなどをしたいケースが出てくるかと思います。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── Makefile         <span class="comment"># ルートのMakefile</span></span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── batch</span><br><span class="line">│   ├── Makefile     <span class="comment"># ラッパー（一括実行用）</span></span><br><span class="line">│   ├── ***batch1</span><br><span class="line">│   │   └── Makefile <span class="comment"># 個別のMakefile</span></span><br><span class="line">│   ├── ***batch2</span><br><span class="line">│       └── Makefile <span class="comment"># 個別のMakefile</span></span><br><span class="line">├── send</span><br><span class="line">│   ├── Makefile     <span class="comment"># ラッパー（一括実行用）</span></span><br><span class="line">│   ├── enterprisesystem1</span><br><span class="line">│   │   └── Makefile <span class="comment"># 個別のMakefile</span></span><br><span class="line">│   ├── enterprisesystem2</span><br><span class="line">│       └── Makefile <span class="comment"># 個別のMakefile</span></span><br><span class="line">├── receive</span><br><span class="line">│   ├── Makefile     <span class="comment"># ラッパー（一括実行用）</span></span><br><span class="line">│   ├── johoukeisystem1</span><br><span class="line">│       └── Makefile <span class="comment"># 個別のMakefile</span></span><br><span class="line">├── job</span><br><span class="line">│   ├── Makefile     <span class="comment"># ラッパー（一括実行用）</span></span><br><span class="line">│   ├── ***-db-snapshot</span><br><span class="line">│       └── Makefile <span class="comment"># 個別のMakefile</span></span><br><span class="line">├── webapi</span><br></pre></td></tr></table></figure><p>Makefileが多段になるイメージですが、注意としてサブフォルダ側のMakefileは親フォルダ側のMakefileに依存しないように作るべきでしょう。例えば親側で環境変数のロードしたとして、それが無いと子ども側のMakefileが実行できないといった状態は避けるべきです。</p><p>上記のようなあるMakefileから別のMakefileを呼ぶ方法は次のように書くと良いでしょう。</p><figure class="highlight makefile"><figcaption><span>Makefile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">build:</span></span><br><span class="line">    <span class="variable">$(MAKE)</span> -C batch   build --no-print-directory</span><br><span class="line">    <span class="variable">$(MAKE)</span> -C send    build --no-print-directory</span><br><span class="line">    <span class="variable">$(MAKE)</span> -C receive build --no-print-directory</span><br><span class="line">    <span class="variable">$(MAKE)</span> -C job     build --no-print-directory</span><br><span class="line">    <span class="variable">$(MAKE)</span> -C webapi  build --no-print-directory</span><br></pre></td></tr></table></figure><ul><li><code>$(MAKE)</code>: <code>make</code> ではなく <code>$(MAKE)</code> の変数を利用することで、<a href="https://www.gnu.org/software/make/manual/html_node/MAKE-Variable.html">-t (–touch), -n (–just-print) or –q (–question) のオプションが引き継がれたり</a>、<code>make ENV=dev build</code> などの変数を引き継いだりします</li><li><code>-C</code>: <code>--directory</code> と同義で、 <code>cd subdir &amp;&amp; $(MAKE)</code> と <code>$(MAKE) -C subdir</code> は同義です</li><li><code>--no-print-directory</code>: サブディレクトリへの移動したことの標準出力を抑制します。Goアプリ開発でmakeをタスクランナーのように利用する場合において、そこまで有益ではない情報なので消して良いでしょう。これについては、<code>MAKEFLAGS += --no-print-directory</code> をMakefileの先頭行に毎回つけるルールにするのもありかもしれません。</li></ul><p>ちなみにですが、次のように <code>-f</code> でMakefileを指定することもができますがこの場合には、makeを動かす作業ディレクトリが<code>subdir</code>ではなく、親側のディレクトリであるためおそらくうまく動作しません。たまにハマる人を見かけますのでご注意ください。</p><figure class="highlight makefile"><figcaption><span>Makefile（うまく動かない例）</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">run:</span></span><br><span class="line"><span class="variable">$(MAKE)</span> -f subdir/Makefile build --no-print-directory</span><br></pre></td></tr></table></figure><p>余談ですが、おそらく上述の <code>go build</code> はbatch, sendなどのパッケージ間で依存関係はないので、並列実行ができそうです（元の書き方では、batch→send→receive→job→webapiの順番で同期的に動作します）</p><p>面倒ですが個別にターゲットを定義する＋前提条件（Prerequisites）に追加すると、並列実行できます（前提条件同士は依存が無いと認識できるので、makeが並列で動かしてくれます）。例えばCIでビルドが可能か一括でチェックしているなどの場面で高速化したいケースがあるかと思います。</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">build-batch: ## build all batch packages</span></span><br><span class="line">    <span class="variable">$(MAKE)</span> -C batch build --no-print-directory</span><br><span class="line"></span><br><span class="line"><span class="section">build-send: ## build all send packages </span></span><br><span class="line">    <span class="variable">$(MAKE)</span> -C send build --no-print-directory</span><br><span class="line"></span><br><span class="line"><span class="section">build-receive: ## build all receive packages </span></span><br><span class="line">    <span class="variable">$(MAKE)</span> -C receive build --no-print-directory</span><br><span class="line"></span><br><span class="line"><span class="section">build-job: ## build all job packages </span></span><br><span class="line">    <span class="variable">$(MAKE)</span> -C job build --no-print-directory</span><br><span class="line"></span><br><span class="line"><span class="section">build-webapi: ## build all webapi package</span></span><br><span class="line">    <span class="variable">$(MAKE)</span> -C webapi build --no-print-directory</span><br><span class="line"></span><br><span class="line"><span class="section">build: build-batch build-send build-receive build-job build-webapi</span></span><br></pre></td></tr></table></figure><p>実行する場合には、<code>-j</code> オプションで並列度を指定します。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make build -j 4</span><br></pre></td></tr></table></figure><p>ここまでチューニングが必要な場合、このMakefileを手動でメンテナンスすることは大変なので、Makefileを自動生成するコードを準備すると良さそうです。</p><h2 id="CIサービスとの棲み分け"><a href="#CIサービスとの棲み分け" class="headerlink" title="CIサービスとの棲み分け"></a>CIサービスとの棲み分け</h2><p>意識しないと、 <code>make</code> と CI（CircleCIやGitHub Actions）で用いるYAMLに重複した内容を記述してしまいがちです。ポリシーとしては、リント・フォーマッタ・ビルド・デプロイなど基本的な操作はMakefileに記載し、CIからは makeコマンド経由でそれらを呼び出す形がよいでしょう。</p><p>例えば、<a href="https://circleci.com/docs/parallelism-faster-jobs/">CircleCIにはテスト並列</a>の仕組みがあります。Go側のテストがDBのデータに依存し、 <code>go test -p 4</code> で分割すると、同じテーブルに対しての複数のテストで書き込みされることでうまく動作しないことがあります。そのため、アプリ・DBのセットでまとめて並列実行してくれるようなCI側の仕組みを用いると便利です。</p><p>この場合もYAMLに記載するのではなく、Makefile側に <code>circleci tests split</code> というテスト並列の仕組みを記載すると統一感を維持できます。あまり Makefileにif文を記載するのはおすすめしませんが、この程度であれば許容しても良いでしょう。</p><figure class="highlight makefile"><figcaption><span>Makefile</span></figcaption><table><tr><td class="code"><pre><span class="line">SHELL := bash</span><br><span class="line">.SHELLFLAGS := -eu -o pipefail -c</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: test</span></span><br><span class="line"></span><br><span class="line">PACKAGES ?= <span class="variable">$(<span class="built_in">shell</span> go list ./...)</span></span><br><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(CIRCLECI)</span>,)</span><br><span class="line">PACKAGES=<span class="variable">$(<span class="built_in">shell</span> go list ./... | circleci tests split --split-by=timings)</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="section">test: ## test calls go test</span></span><br><span class="line">go test -p 1 -race -timeout 30m <span class="variable">$(PACKAGES)</span></span><br></pre></td></tr></table></figure><h2 id="環境別のデプロイ"><a href="#環境別のデプロイ" class="headerlink" title="環境別のデプロイ"></a>環境別のデプロイ</h2><p>CI&#x2F;CDパイプラインが整理されており、開発者が手動でデプロイするケースが減っているかもしれませんが、緊急パッチなど運用として環境別のデプロイが行えると一定の利便性があると思います。よくある構成例として、develop（dev）, staging（stg）, production（prod） の3つの環境へのデプロイを行うとします。</p><p>通常は各環境でリソース名に命名体系を持たせることが多いため、環境識別子だけ異なるにコマンドが並んでしまうと見通しが悪い場合があります。一方で、makeの引数に環境識別子を渡すときのチェックも行いたいです。そこで<a href="https://dev.classmethod.jp/articles/lambda-deploy-with-make/">make は強いタスクランナーだった。Lambda Function のライフサイクルを Makefile でまわす | DevelopersIO</a> にあるように、<code>gurd-%</code>のターゲットを前提条件とすることで、環境識別子（env）を必須入力とさせることがおすすめです。</p><p>また、<code>deploy-dev</code>, <code>deploy-stg</code>, <code>deploy-prod</code> などのターゲット名を宣言すると、ターミナルの補完が効くため利便性が高くなります。合わせると以下のような設定になると思います。AWS Lambdaにデプロイする例で書いています。</p><figure class="highlight makefile"><figcaption><span>Makefile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># ...(省略)....</span></span><br><span class="line"></span><br><span class="line"><span class="section">deploy-dev: ## deploy development</span></span><br><span class="line"><span class="variable">$(MAKE)</span> deploy env=dev -s</span><br><span class="line"></span><br><span class="line"><span class="section">deploy-stg: ## deploy staging</span></span><br><span class="line"><span class="variable">$(MAKE)</span> deploy env=stg -s</span><br><span class="line"></span><br><span class="line"><span class="section">deploy-prod: ## deploy production</span></span><br><span class="line"><span class="variable">$(MAKE)</span> deploy env=prod -s</span><br><span class="line"></span><br><span class="line"><span class="section">deploy: guard-env build</span></span><br><span class="line">echo <span class="string">&quot;deploy $&#123;env&#125;&quot;</span></span><br><span class="line">aws lambda update-function-code --profile my_$&#123;env&#125; --region ap-northeast-1 --function-name $&#123;env&#125;-fuga-web-api --zip-file fileb://bin/bootstrap.zip</span><br><span class="line"></span><br><span class="line"><span class="section">guard-%:</span></span><br><span class="line">@ if [ <span class="string">&quot;$&#123;$&#123;*&#125;&#125;&quot;</span> = <span class="string">&quot;&quot;</span> ]; then \</span><br><span class="line">echo <span class="string">&quot;[ERROR] Environment variable <span class="variable">$*</span> not set&quot;</span>; \</span><br><span class="line">exit 1; \</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>本来であれば、 <code>deploy</code> や <code>guard-%</code> のターゲットはプライベート関数のような扱いで、直接開発者には呼び出しも補完もされず非可視化したかったのですが、残念ながらmakeにはそのような仕組みはありません（共通化したいターゲットを別Makefileにしてincludeしても無駄でした）。どこまでコードの冗長さを許容するかですが、扱うリソースや環境は増えやすいので、これくらいの集約は行ったほうがオススメしたいと思います。</p><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p><a href="https://postd.cc/auto-documented-makefile/">Makefileを自己文書化する | POSTD</a> から流用して、ファイルの最後に次のようにhelpコマンドを追加します。そうすると、 ターゲットの右側に <code>help: ## display this help screen</code> といったコメントを記載すると、helpコマンドで内容が表示されるようになります。</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ...(省略)...</span></span><br><span class="line">.DEFAULT_GOAL := help</span><br><span class="line"><span class="comment"># ...(省略)...</span></span><br><span class="line"></span><br><span class="line"><span class="section">help: ## display this help screen</span></span><br><span class="line">    @grep -E &#x27;^[a-zA-Z_-]+:.*?<span class="comment">## .*$$&#x27; $(MAKEFILE_LIST) | sort | awk &#x27;BEGIN &#123;FS = &quot;:.*?## &quot;&#125;; &#123;printf &quot;\033[36m%-30s\033[0m %s\n&quot;, $$1, $$2&#125;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ make <span class="built_in">help</span></span><br><span class="line">run                  run launches go server</span><br><span class="line"><span class="built_in">test</span>                 <span class="built_in">test</span> calls go <span class="built_in">test</span></span><br><span class="line">deploy-dev           deploy development</span><br><span class="line">deploy-stg           deploy staging</span><br><span class="line">deploy-prod          deploy production</span><br><span class="line"><span class="built_in">help</span>                 display this <span class="built_in">help</span> screen</span><br></pre></td></tr></table></figure><p>さきほど、<code>deploy</code>、<code>guard-%</code> などのターゲットは内部処理用でなるべく外に出したくないという話をしました。完全ではないですが、この<code>help</code>コマンドではそういった内部処理用のターゲットはコメントを書かないことで、公開用のターゲットではないという意図を込めることができます（やや婉曲的ですが）。</p><p>もし、ターゲットの右側にコメントを書くのではなく、以下のようにコメント＋改行で表現したい場合は、Songmuさんの<a href="https://github.com/Songmu/make2help">Songmu&#x2F;make2help</a>というツールもあります。コメントを記載するお作法としてはこちらの方がおそらく直感的であるため、コマンドのインストールが必要ですが、チームの方針としてこちらを採用することもお勧めです。</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Run tests</span></span><br><span class="line"><span class="section">test:</span></span><br><span class="line">    go test ./...</span><br><span class="line"></span><br><span class="line"><span class="comment">## Show help</span></span><br><span class="line"><span class="section">help:</span></span><br><span class="line">  @make2help <span class="variable">$(MAKEFILE_LIST)</span></span><br></pre></td></tr></table></figure><h2 id="ターゲット名をtypoした場合にhelpメッセージを出す"><a href="#ターゲット名をtypoした場合にhelpメッセージを出す" class="headerlink" title="ターゲット名をtypoした場合にhelpメッセージを出す"></a>ターゲット名をtypoした場合にhelpメッセージを出す</h2><p>趣味的な作り込みですが、<code>make bulid</code> や <code>make h</code>のように、タイポしたり短縮形のコマンドを入力してしまった場合に、helpメッセージを出したいとします（helpが実装されているかどうか気が付かない場合があるので、気づきやすくする目的です）。その場合、全てに一致する <code>%</code> というターゲットを利用するのも手です。</p><p>例として次のように定義します。</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">%:</span></span><br><span class="line">@echo &#x27;command <span class="string">&quot;<span class="variable">$@</span>&quot;</span> is not found.&#x27;</span><br><span class="line">@<span class="variable">$(MAKE)</span> help</span><br><span class="line">@exit 2</span><br></pre></td></tr></table></figure><p>実行すると、 “h” というターゲット名が存在しない場合は、helpの内容を出すことができます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ make h</span><br><span class="line"><span class="built_in">command</span> <span class="string">&quot;h&quot;</span> is not found.</span><br><span class="line">run                  run launches go server</span><br><span class="line"><span class="built_in">test</span>                 <span class="built_in">test</span> calls go <span class="built_in">test</span></span><br><span class="line">deploy-dev           deploy development</span><br><span class="line">deploy-stg           deploy staging</span><br><span class="line">deploy-prod          deploy production</span><br><span class="line"><span class="built_in">help</span>                 display this <span class="built_in">help</span> screen</span><br><span class="line">make: *** [Makefile:80: 1] エラー 2</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>元の挙動と合わせるために、終了ステータスを2に設定しているため、エラー文が出てしまうのがノイズですね。なるべく <code>help</code> を出して問い合わせを減らしたい場合など、状況を見て追加すると良いでしょう。</p><h2 id="標準的なターゲット名と成果物ファイル名"><a href="#標準的なターゲット名と成果物ファイル名" class="headerlink" title="標準的なターゲット名と成果物ファイル名"></a>標準的なターゲット名と成果物ファイル名</h2><p>開発者フレンドリーを目指すと、<code>make build</code> でコードがビルドできたほうが直感的でしょう。一方でmakeの成果物管理を考えると、 <code>go build -o bootstrap main.go</code> などで用いる、コンパイル対象の.goのファイルや ビルド結果の <code>bootstrap</code> をmakeファイルとして定義していきたいです。両者をバランスを取ると、どちらも定義していくことが多いと思います。</p><p>例えば次のように、 <code>build</code> は <code>bootstrap</code> への依存のみで、実態は <code>bootstrap</code> 側に処理を記載すると行った具合です。</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ...(省略)...</span></span><br><span class="line">GO_FILES:=<span class="variable">$(<span class="built_in">shell</span> find . -type f -name &#x27;*.go&#x27; -print)</span></span><br><span class="line"><span class="comment"># ...(省略)...</span></span><br><span class="line"></span><br><span class="line"><span class="section">build: bootstrap ## build creates go binary</span></span><br><span class="line">@:</span><br><span class="line"></span><br><span class="line"><span class="section">bootstrap: <span class="variable">$(GO_FILES)</span> go.mod go.sum .git/HEAD .git/refs/tags .git/refs/heads</span></span><br><span class="line">@GOOS=linux GOARCH=amd64 go build \</span><br><span class="line">-ldflags=<span class="string">&quot;-s -w -buildid= -X main.version=$(shell git describe --tags --abbrev=0) -X main.revision=$(shell git rev-parse --short HEAD)&quot;</span> \</span><br><span class="line">-trimpath -o bootstrap cmd/main/main.go</span><br></pre></td></tr></table></figure><p>bootstrapターゲット内で <code>go build</code> を行っています。業務でよく使いそうなオプションを渡したり、GitタグやGitリビジョンも埋め込むようにしています。依存関係として <code>.go</code> のファイル以外にもgo.mod, go.sum を追加しています。<code>.git</code> 系の3フォルダは通常不要ですが、Gitのタグ名やリビジョンをビルド時に含めているため追加しています。他にも <code>go:embed</code> で外部ファイルを埋め込みしている場合は個別に依存関係に追加する必要があります（ややこしいので、goファイルが配備されるパッケージ配下すべてを追加するのもありですね）。</p><p><code>build</code> ターゲットで <code>@:</code> としているのは、もしbootstrapが作成済みの場合に<code>make: &#39;build&#39; に対して行うべき事はありません.</code> という警告を無視するためのハックです。<code>@</code>がコマンドを表示させないという意味で、<code>:</code> は何も行わないシェルスクリプト側のコマンドです。<code>@:</code> は無くても構いません。</p><p>他にも有名な標準ターゲットは定義しておくと良いでしょう。追加で私がよく用いるターゲットもまとめます。</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">all: generate fmt lint test build</span></span><br><span class="line"></span><br><span class="line"><span class="section">setup: ## install tools for development</span></span><br><span class="line">    @go install xxxx  </span><br><span class="line"></span><br><span class="line"><span class="section">generate: ## code generate</span></span><br><span class="line">    @<span class="comment"># コード生成処理があれば</span></span><br><span class="line"></span><br><span class="line"><span class="section">fmt: ## code format</span></span><br><span class="line">    @<span class="comment"># フォーマット処理</span></span><br><span class="line"></span><br><span class="line"><span class="section">lint: ## Lint</span></span><br><span class="line">    @<span class="comment"># リント処理（go vet ./...など）、markdownlint、misspell、govulncheck、など（いくつかは前提条件にしたほうが並列化が効く）</span></span><br><span class="line"></span><br><span class="line"><span class="section">test: ## test calls go test（e.g. make option=-v test、 make option=&quot;-v -short&quot; test、 make option=&quot;-run TestAttach&quot;）</span></span><br><span class="line">date</span><br><span class="line">go test -race -timeout 30m <span class="variable">$(option)</span> ./...</span><br><span class="line"></span><br><span class="line"><span class="section">test-coverage: cover.html ## test-coverage displays code coverage per package</span></span><br><span class="line">@go tool cover -func cover.out</span><br><span class="line"></span><br><span class="line"><span class="section">cover.out:</span></span><br><span class="line">@go test -race -timeout 30m -cover ./... -coverprofile=cover.out</span><br><span class="line">@echo <span class="string">&quot;create cover.out&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">cover.html: cover.out</span></span><br><span class="line">@go tool cover -html=cover.out -o cover.html</span><br><span class="line">@echo <span class="string">&quot;create cover.html&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean: ## Remove output files and clean cache</span></span><br><span class="line">    @rm -rf bootstrap</span><br><span class="line">    @go clean</span><br></pre></td></tr></table></figure><p>Goのテストですが、<code>$(option)</code> というオプションを追加しています。Goでテスト実行の場合、特定のテストだけ実行したい場合は <code>-run TestSum</code> などと指定したいときや、 <code>-v</code>、<code>-short</code>、<code>-vet=all</code> など様々なオプションを渡したいときがあります。その場合にmake経由で対応できるようにするため拡張用に用意しています。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通常</span></span><br><span class="line">$ make <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -v を渡したい</span></span><br><span class="line">$ make option=-v <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -v と-short を渡したい</span></span><br><span class="line">$ make option=<span class="string">&quot;-v -short&quot;</span> <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -run を渡したい</span></span><br><span class="line">$ make option=<span class="string">&quot;-run TestCalcPoint&quot;</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>ここ数年間、業務ではGoを用いてアプリケーションを開発してきました。そのお供にとしてMakefileもよく編集してきたのですが、一度仕様が固まるとめったに書き換えないため、知識が定着しないのが悩みでした。今回、複数チームで利用頻度が高そう＋実践的な内容を抽出して、まとめました。よい機会でした。</p><p>それでは良いmakeライフを。ありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%81%E3%83%BC%E3%83%A0%E9%96%8B%E7%99%BA/">チーム開発</category>
      
      <category domain="https://future-architect.github.io/tags/Makefile/">Makefile</category>
      
      <category domain="https://future-architect.github.io/tags/EditorConfig/">EditorConfig</category>
      
      <category domain="https://future-architect.github.io/tags/checkmake/">checkmake</category>
      
      <category domain="https://future-architect.github.io/tags/dotenv/">dotenv</category>
      
      
      <comments>https://future-architect.github.io/articles/20231012a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Prompt Flowをローカルで動かす＆コードで管理する</title>
      <link>https://future-architect.github.io/articles/20231011a/</link>
      <guid>https://future-architect.github.io/articles/20231011a/</guid>
      <pubDate>Tue, 10 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、SAIG&amp;#x2F;MLOpsチームでアルバイトをしている板野です。&lt;/p&gt;
&lt;p&gt;AzureのPrompt</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、SAIG&#x2F;MLOpsチームでアルバイトをしている板野です。</p><p>AzureのPrompt Flowをローカル環境で動かし、作成したフローをコードで管理する方法をご紹介します。</p><p>Prompt Flowとは、Azure Machine Learning上の機能で、Azure OpenAIで提供されているLLMを利用したアプリケーション開発を円滑にするためのツールです。</p><p>実際にLLMアプリケーションを開発する場合、「プロンプトを入力して終わり」ではなく、ベクトル検索など複数の要素を組み合わせることもあります。このため、Prompt Flowでは処理のフローをDAG(有向非巡回グラフ)で可視化することで、開発効率が大きく向上します。</p><p>Prompt FlowはPython<a href="https://github.com/microsoft/promptflow">ライブラリ</a>（2023&#x2F;09&#x2F;27時点ではMITライセンス）として提供されており、Azureのコンソール画面だけでなく、ローカル環境でも実行することができます。</p><p>ローカルで実行できることには以下の利点があります。</p><ul><li>特定のクラウドベンダーに依存しないので開発の選択肢が広がる</li><li>フローをコードで管理できる<ul><li>よくアップデートされるGUIの変化に戸惑う必要がない</li><li>コード編集の差分を記録できる</li></ul></li></ul><p>※本記事では、読者は「Azureのコンソール画面でのPrompt Flowの操作をしたことがある」という前提でご説明します。</p><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><h3 id="1-Pythonのインストール"><a href="#1-Pythonのインストール" class="headerlink" title="1. Pythonのインストール"></a>1. Pythonのインストール</h3><p>Prompt Flowを動かすには、<code>Python 3.9</code>あるいは<code>Python 3.10</code>以上がインストールされている必要があります。</p><h3 id="2-Prompt-Flowライブラリのインストール"><a href="#2-Prompt-Flowライブラリのインストール" class="headerlink" title="2. Prompt Flowライブラリのインストール"></a>2. Prompt Flowライブラリのインストール</h3><p>以下のコマンドで<code>promptflow</code>,<code>promptflow-tools</code>のライブラリをインストールします</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install promptflow promptflow-tools</span><br></pre></td></tr></table></figure><p>インストールが完了したら以下のコマンドでpromptflowのバージョンが出力されます</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (例) &quot;0.1.0b5&quot;</span></span><br><span class="line">pf -v </span><br></pre></td></tr></table></figure><h3 id="3-VSCode拡張機能をインストール"><a href="#3-VSCode拡張機能をインストール" class="headerlink" title="3. VSCode拡張機能をインストール"></a>3. VSCode拡張機能をインストール</h3><p>Prompt FlowのVSCode拡張機能をインストールします。</p><p>VSCodeの拡張機能にて「Prompt Flow」で検索すると出てきます。</p><img src="/images/20231011a/image.png" alt="Prompt Flow for VS Code" width="1200" height="560" loading="lazy"><p>VSCode拡張機能が無くてもPrompt Flow自体は動かせますが、フローの可視化機能があるので、VSCodeが使用できる場合は入れておきましょう。</p><p>本記事ではVSCode拡張機能がインストールされている前提で説明していきます。</p><h2 id="シンプルな標準フローを作成する"><a href="#シンプルな標準フローを作成する" class="headerlink" title="シンプルな標準フローを作成する"></a>シンプルな標準フローを作成する</h2><p>以下のコマンドで、最もシンプルな標準フローが作成できます。<br><code>my-simple-flow</code>の部分はお好きなフロー名に変更してください。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pf flow init --flow my-simple-flow</span><br></pre></td></tr></table></figure><p>コマンドを実行したディレクトリの直下に<code>my-simple-flow</code>ディレクトリが自動生成されます。</p><p>中身は以下の通りです。</p><img src="/images/20231011a/image_2.png" alt="my-simple-flow, \pycache_, promptflow, flow.tools.json, .gitignore, data.jsonl, flow.dag.yaml, hello.jinja, hello.py, requirements.txt" width="432" height="330" loading="lazy"><ul><li><code>__pycache__</code>: Pythonを実行する際に生成されるキャッシュディレクトリ（削除しても特に問題はない）</li><li><code>.promptflow/flow.tools.json</code>: flow.dag.yamlから参照されるToolsのメタデータ（修正する必要はない） </li><li><code>data.jsonl</code>: フローに入力するデータ</li><li><code>flow.dag.yaml</code>: 入出力・ノード・バリアント等を含むフローの全てを定義したファイル</li><li><code>.py, .jinja2等のファイル</code>: フロー内のツールが参照するコードスクリプト</li><li><code>requirements.txt</code>: フローの実行に必要なPythonパッケージのリスト</li></ul><p><code>flow.dag.yaml</code>ファイルの中身は以下の通りです。テキストベースなフロー定義データなので、直感では何をするフローか分かりにくいですね。</p><p>そこで赤枠の<code>Visual editor</code>を押してみます。</p><img src="/images/20231011a/コメント_2023-09-25_163948.png" alt="Visual editoor(Ctrl + k, v)" width="1156" height="1140" loading="lazy"><p>すると、Azureコンソールでお馴染みのGUIベースの編集画面が出てきます。</p><p>「入力されたテキストをシステムプロンプトに含めて出力する」という、LLMを使わない簡単なフローのようです。</p><img src="/images/20231011a/pic.png" alt="" width="1200" height="612" loading="lazy"><p>このVisual editorで編集した内容は、<code>flow.dag.yaml</code>のテキストデータに反映されるので、GUIベース及びテキストベースのどちらからでも編集可能です。</p><p>一度、フローを動かしてみます。</p><p>上図赤枠の部分に好きなテキスト（ここでは<code>Hello World!</code>）を入力し、<code>my-simple-flow</code>の親ディレクトリから以下のコマンドを打ちます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pf flow <span class="built_in">test</span> --flow my-simple-flow</span><br></pre></td></tr></table></figure><p>すると、以下のようなコンソール出力が返ってきます。</p><img src="/images/20231011a/pic2.png" alt="output_prompt: Prompt: Write a simple Hello World! program that displays the greeting message when executed." width="1200" height="147" loading="lazy"><p>「入力されたテキストをシステムプロンプトに含めて出力する」というシンプルな標準フローが実行できました。</p><h2 id="LLM付きの標準フローを作成する"><a href="#LLM付きの標準フローを作成する" class="headerlink" title="LLM付きの標準フローを作成する"></a>LLM付きの標準フローを作成する</h2><p>ここでは、入力された質問に対する応答をしてもらうフローを作っていきます。</p><p>前章で作成したフローの中にLLM（Prompt FlowではLLMツール&#x2F;LLMノードと呼ぶ）を追加し、少し複雑になったフローです。</p><h3 id="1-Connectionの設定"><a href="#1-Connectionの設定" class="headerlink" title="1. Connectionの設定"></a>1. Connectionの設定</h3><p>まずはConnection（接続）の設定を行います。</p><p>任意のディレクトリ上で、接続先を定義するYAMLファイルを作成します。（ここでは<code>connection-azure-openai.yaml</code>という名前で作成）</p><p>YAMLファイルの中身は<a href="https://microsoft.github.io/promptflow/how-to-guides/manage-connections.html">公式Docs</a>を参考に以下のように作ります。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$schema:</span> <span class="string">https://azuremlschemas.azureedge.net/promptflow/latest/AzureOpenAIConnection.schema.json</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">connection-azure-openai</span> <span class="comment"># 好きなコネクション名に設定可</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">azure_open_ai</span></span><br><span class="line"><span class="attr">api_key:</span> <span class="string">&lt;API_KEY&gt;</span> <span class="comment"># Azure OpenAIリソースのAPIキー</span></span><br><span class="line"><span class="attr">api_base:</span> <span class="string">&lt;API_BASE&gt;</span> <span class="comment"># Azure OpenAIリソースのベース（エンドポイントURL）</span></span><br><span class="line"><span class="attr">api_type:</span> <span class="string">azure</span></span><br><span class="line"><span class="attr">api_version:</span> <span class="number">2023-07-01</span><span class="string">-preview</span> <span class="comment"># バージョンは変わる可能性あり</span></span><br></pre></td></tr></table></figure><p>YAMLファイルが作成できたら、以下のコマンドでconnectionを追加します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pf connection create -f &lt;YAMLファイルのパス&gt;</span><br></pre></td></tr></table></figure><p>以下のように詳細が表示されればConnection（接続）の設定は完了です。</p><img src="/images/20231011a/pic3.png" alt="" width="1200" height="257" loading="lazy"><h3 id="2-LLMツールの追加"><a href="#2-LLMツールの追加" class="headerlink" title="2. LLMツールの追加"></a>2. LLMツールの追加</h3><p>続いて、LLMツールを追加していきます。<code>flow.dag.yaml</code>のVisual editorの画面から「+LLM」を押します。</p><img src="/images/20231011a/pic4.png" alt="+LLM" width="1200" height="436" loading="lazy"><p>上部に、LLMツールの名前入力が求められるので好きな名前を設定します。（ここでは<code>llm_node</code>と設定）</p><img src="/images/20231011a/image_3.png" alt="llm_node" width="889" height="97" loading="lazy"><p>名前入力が完了すると、「new file」を選択します。（<code>&lt;LLMツール名&gt;.jinja2</code>というファイルが新規生成されます）</p><img src="/images/20231011a/image_4.png" alt="new file" width="885" height="131" loading="lazy"><p>LLMツールが追加されました。connectionには先程設定した接続先が選択できるようになっています。</p><img src="/images/20231011a/pic5.png" alt="connection:connection-azure-openai api:chat deployment_name:***-gpt35-01 temperature:1 stop: max_tokens:" width="1200" height="266" loading="lazy"><h3 id="3-フローの編集"><a href="#3-フローの編集" class="headerlink" title="3. フローの編集"></a>3. フローの編集</h3><p>入力された質問に対する応答をしてもらうフローを作っていきます。</p><p>Azureコンソールでは、1つの画面で全てのソースコードやプロンプトを直接編集できますが、ここではソースファイル毎に編集する必要があります。</p><p>フローの概略は以下の通りです。</p><p><code>Inputs</code>でユーザーからの質問を受け取り、<code>system_prompt</code>でシステムプロンプトにユーザーの質問を埋め込み、<code>llm_node</code>でLLMにプロンプトを投げ、<code>echo_llm_output</code>でLLMからの回答を加工して<code>output</code>に出力します。</p><img src="/images/20231011a/image_5.png" alt="inputs -> system_prompt -> llm_node -> echo_llm_output -> outputs" width="1200" height="1266" loading="lazy"><details><summary>flow.dag.yaml</summary><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">python_requirements_txt:</span> <span class="string">requirements.txt</span></span><br><span class="line"><span class="attr">inputs:</span></span><br><span class="line">  <span class="attr">question:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">default:</span> <span class="string">東京はどこの国の都市？</span></span><br><span class="line"><span class="attr">outputs:</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">reference:</span> <span class="string">$&#123;echo_llm_output.output&#125;</span></span><br><span class="line"><span class="attr">nodes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">system_prompt</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">prompt</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">code</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">system_prompt.jinja2</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">question:</span> <span class="string">$&#123;inputs.question&#125;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">echo_llm_output</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">python</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">code</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">echo_llm_output.py</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">input:</span> <span class="string">$&#123;llm_node.output&#125;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">llm_node</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">llm</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">code</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">llm_node.jinja2</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">input_prompt:</span> <span class="string">$&#123;system_prompt.output&#125;</span></span><br><span class="line">    <span class="attr">deployment_name:</span> <span class="string">gpt35-01</span></span><br><span class="line">    <span class="attr">max_tokens:</span> <span class="number">256</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">connection-azure-openai</span></span><br><span class="line">  <span class="attr">api:</span> <span class="string">chat</span></span><br></pre></td></tr></table></figure></details><p>各ノードの詳細は以下の通りです。</p><h4 id="Inputs-amp-Outputs"><a href="#Inputs-amp-Outputs" class="headerlink" title="Inputs&amp;Outputs"></a>Inputs&amp;Outputs</h4><img src="/images/20231011a/image_6.png" alt="question string 東京はどこの国の都市？" width="1200" height="333" loading="lazy"><h4 id="system-prompt"><a href="#system-prompt" class="headerlink" title="system_prompt"></a>system_prompt</h4><img src="/images/20231011a/image_7.png" alt="${inputs.question}" width="1200" height="222" loading="lazy"><details><summary>system_prompt.jinja2</summary><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system:</span><br><span class="line">あなたは優秀なAIチャットボットです。ユーザーからの質問に答えて下さい。</span><br><span class="line"></span><br><span class="line">user: </span><br><span class="line">&#123;&#123;question&#125;&#125; </span><br><span class="line"></span><br><span class="line">AI:</span><br></pre></td></tr></table></figure></details><h4 id="llm-node"><a href="#llm-node" class="headerlink" title="llm_node"></a>llm_node</h4><img src="/images/20231011a/pic6.png" alt="" width="1200" height="309" loading="lazy"><details><summary>llm_node.jinja2</summary><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;input_prompt&#125;&#125;</span><br></pre></td></tr></table></figure></details><h4 id="echo-llm-output"><a href="#echo-llm-output" class="headerlink" title="echo_llm_output"></a>echo_llm_output</h4><img src="/images/20231011a/image_8.png" alt="" width="1200" height="218" loading="lazy"><details><summary>echo_llm_output.py</summary><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> promptflow <span class="keyword">import</span> tool</span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">echo_llm_output</span>(<span class="params"><span class="built_in">input</span>: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;LLM出力: &quot;</span> + <span class="built_in">input</span></span><br></pre></td></tr></table></figure></details><h3 id="4-フローの実行"><a href="#4-フローの実行" class="headerlink" title="4. フローの実行"></a>4. フローの実行</h3><p>フローの編集が終わったら、先程と同様に以下のコマンドで実行します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pf flow <span class="built_in">test</span> --flow my-simple-flow</span><br></pre></td></tr></table></figure><p>Outputsの欄に出力が表示されます。</p><img src="/images/20231011a/image_9.png" alt="" width="914" height="440" loading="lazy"><h3 id="5-フローの一括実行"><a href="#5-フローの一括実行" class="headerlink" title="5. フローの一括実行"></a>5. フローの一括実行</h3><p>複数の入力を一括で実行することもできます。</p><p>まずは<code>flow.dag.yaml</code>ファイルを編集し、<code>default: 東京はどこの国の都市？</code>の行をコメントアウトします。</p><details><summary>flow.dag.yaml（コメントアウト後）</summary><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">python_requirements_txt:</span> <span class="string">requirements.txt</span></span><br><span class="line"><span class="attr">inputs:</span></span><br><span class="line">  <span class="attr">question:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="comment"># default: 東京はどこの国の都市？</span></span><br><span class="line"><span class="attr">outputs:</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">reference:</span> <span class="string">$&#123;echo_llm_output.output&#125;</span></span><br><span class="line"><span class="attr">nodes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">system_prompt</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">prompt</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">code</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">system_prompt.jinja2</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">question:</span> <span class="string">$&#123;inputs.question&#125;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">echo_llm_output</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">python</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">code</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">echo_llm_output.py</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">input:</span> <span class="string">$&#123;llm_node.output&#125;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">llm_node</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">llm</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">code</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">llm_node.jinja2</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">input_prompt:</span> <span class="string">$&#123;system_prompt.output&#125;</span></span><br><span class="line">    <span class="attr">deployment_name:</span> <span class="string">gpt35-01</span></span><br><span class="line">    <span class="attr">max_tokens:</span> <span class="number">256</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">connection-azure-openai</span></span><br><span class="line">  <span class="attr">api:</span> <span class="string">chat</span></span><br></pre></td></tr></table></figure></details><p>次に、フローのディレクトリ内にあった<code>data.jsonl</code>を編集し、以下のような内容を記載します。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;question&quot;</span><span class="punctuation">:</span> <span class="string">&quot;オーストラリアの首都は？&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;question&quot;</span><span class="punctuation">:</span> <span class="string">&quot;アメリカの首都は？&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;question&quot;</span><span class="punctuation">:</span> <span class="string">&quot;イギリスの首都は？&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>1行が1つの入力に相当します。質問文を変えたり行を追加したりしても大丈夫です。</p><p>最後に、フローの親ディレクトリから以下のコマンドを実行します。（<code>my_run_001</code>の部分は任意）</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pf run create --flow my-simple-flow --data ./my-simple-flow/data.jsonl --name my_run_001</span><br></pre></td></tr></table></figure><p>以下のような出力が返ってくれば一括実行は成功です。</p><img src="/images/20231011a/7.png" alt="" width="1200" height="297" loading="lazy"><p>複数実行の結果はログとして記録されており、以下のコマンドでいつでも可視化できます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pf run show-details --name my_run_001</span><br></pre></td></tr></table></figure><img src="/images/20231011a/8.png" alt="" width="1007" height="312" loading="lazy"><h2 id="作成したフローをコードで管理する"><a href="#作成したフローをコードで管理する" class="headerlink" title="作成したフローをコードで管理する"></a>作成したフローをコードで管理する</h2><p>今回作成したファイル群は以下の通りです。</p><img src="/images/20231011a/image_10.png" alt="" width="472" height="368" loading="lazy"><p>これらはgitで管理することができます。</p><p>予め<code>.gitignore</code>ファイルが含まれているため、余計なキャッシュ等を含まずプッシュすることができますが、connection情報が入ったYAMLファイルは後で作成したファイルなので、プッシュしてしまう恐れがあります。</p><p>該当ファイルを<code>.gitignore</code>に追記するなどして、十分注意してください。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事ではAzureのPrompt Flowをローカル環境で動かし、作成したフローをコードで管理する方法をご紹介しました。</p><p>LLMの開発や運用(LLMOps)に携わっている方々や、Prompt Flowを試している方々の参考となれば幸いです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/Azure/">Azure</category>
      
      <category domain="https://future-architect.github.io/tags/LLM/">LLM</category>
      
      <category domain="https://future-architect.github.io/tags/Prompt-Flow/">Prompt Flow</category>
      
      <category domain="https://future-architect.github.io/tags/AzureOpenAIService/">AzureOpenAIService</category>
      
      
      <comments>https://future-architect.github.io/articles/20231011a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go vet に含まれないスタンドアロンな静的解析ツールたち</title>
      <link>https://future-architect.github.io/articles/20231005a/</link>
      <guid>https://future-architect.github.io/articles/20231005a/</guid>
      <pubDate>Wed, 04 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20231005a/etactics-inc-g3PsF4_y7ZY-unsplash.jpg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;533&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20231005a/etactics-inc-g3PsF4_y7ZY-unsplash.jpg" alt="" width="800" height="533"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。育休明けです。</p><p>Go言語の特徴の一つに、静的解析ツールがリッチということがあると思いますが、代表格である <code>go vet</code> と付随する（という表現が正しいか不明ですが）ツール群についてまとめます。知っておくと似たようなツールを作ってしまうことを防げるかなという点と、類似のチェックを行いたい場合に参考にしたいこと、ユースケースが合えばこれらを利用してハッピーになりたいという思いがあります。</p><h2 id="go-vetとは"><a href="#go-vetとは" class="headerlink" title="go vetとは"></a>go vetとは</h2><p><a href="https://pkg.go.dev/cmd/vet">go vet</a> はGo言語に標準で組み込まれた静的解析ツールで、コンパイラによってキャッチされないエラーや懸念を検出し報告してくれます。Linter（リンター）の一種です。</p><p>チェック内容の一覧は <code>go tool vet help</code> コマンドで確認できます。デフォルトでは全て有効になっており（<code>-asmdecl=false</code> などで個別に無効化は可能）、Go1.21時点では30のチェックが存在します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.21.1 linux/amd64</span><br><span class="line"></span><br><span class="line">$ go tool vet <span class="built_in">help</span></span><br><span class="line">(中略)</span><br><span class="line">Registered analyzers:</span><br><span class="line"></span><br><span class="line">    asmdecl      report mismatches between assembly files and Go declarations</span><br><span class="line">    assign       check <span class="keyword">for</span> useless assignments</span><br><span class="line">    atomic       check <span class="keyword">for</span> common mistakes using the <span class="built_in">sync</span>/atomic package</span><br><span class="line">    bools        check <span class="keyword">for</span> common mistakes involving boolean operators</span><br><span class="line">    buildtag     check //go:build and // +build directives</span><br><span class="line">    cgocall      detect some violations of the cgo pointer passing rules</span><br><span class="line">    composites   check <span class="keyword">for</span> unkeyed composite literals</span><br><span class="line">    copylocks    check <span class="keyword">for</span> locks erroneously passed by value</span><br><span class="line">    directive    check Go toolchain directives such as //go:debug</span><br><span class="line">    errorsas     report passing non-pointer or non-error values to errors.As</span><br><span class="line">    framepointer report assembly that clobbers the frame pointer before saving it</span><br><span class="line">    httpresponse check <span class="keyword">for</span> mistakes using HTTP responses</span><br><span class="line">    ifaceassert  detect impossible interface-to-interface <span class="built_in">type</span> assertions</span><br><span class="line">    loopclosure  check references to loop variables from within nested <span class="built_in">functions</span></span><br><span class="line">    lostcancel   check cancel func returned by context.WithCancel is called</span><br><span class="line">    nilfunc      check <span class="keyword">for</span> useless comparisons between <span class="built_in">functions</span> and nil</span><br><span class="line">    <span class="built_in">printf</span>       check consistency of Printf format strings and arguments</span><br><span class="line">    <span class="built_in">shift</span>        check <span class="keyword">for</span> shifts that equal or exceed the width of the <span class="built_in">integer</span></span><br><span class="line">    sigchanyzer  check <span class="keyword">for</span> unbuffered channel of os.Signal</span><br><span class="line">    slog         check <span class="keyword">for</span> invalid structured logging calls</span><br><span class="line">    stdmethods   check signature of methods of well-known interfaces</span><br><span class="line">    stringintconv check <span class="keyword">for</span> string(int) conversions</span><br><span class="line">    structtag    check that struct field tags conform to reflect.StructTag.Get</span><br><span class="line">    testinggoroutine report calls to (*testing.T).Fatal from goroutines started by a <span class="built_in">test</span>.</span><br><span class="line">    tests        check <span class="keyword">for</span> common mistaken usages of tests and examples</span><br><span class="line">    timeformat   check <span class="keyword">for</span> calls of (time.Time).Format or time.Parse with 2006-02-01</span><br><span class="line">    unmarshal    report passing non-pointer or non-interface values to unmarshal</span><br><span class="line">    unreachable  check <span class="keyword">for</span> unreachable code</span><br><span class="line">    unsafeptr    check <span class="keyword">for</span> invalid conversions of uintptr to unsafe.Pointer</span><br><span class="line">    unusedresult check <span class="keyword">for</span> unused results of calls to some <span class="built_in">functions</span></span><br><span class="line">(省略)</span><br></pre></td></tr></table></figure><p>vetは<a href="https://tip.golang.org/doc/go1.19#vet">Go1.19でerrorsas</a>が、<a href="https://tip.golang.org/doc/go1.20#vet">Go1.20でloopclosureとtimeformat</a>が追加されるなど、高品質にメンテナンスされているため安心して利用しているチームがほとんどだと思います。さすが標準ツールです。</p><p>Go1.20のvetについては<a href="https://tip.golang.org/doc/go1.20#vet">Go 1.20 vetのアップデート</a>の記事もあります。</p><p>ちなみに、<code>go test</code> を実行すると<a href="https://budougumi0617.github.io/2018/08/19/go-testing2018/#go110%E3%81%8B%E3%82%89%E4%BA%8B%E5%89%8D%E3%81%ABgo-vet%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%8C%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B">Go 1.10から内部的にgo vetも動作するようになっている</a> そうです。注意として、go testでgo vetのすべてのチェックが動くのではなく、信頼性の高い以下9つののサブセットに限る点です。<code>go test</code> で <code>go vet</code> の30種類すべてを動かしたい場合は <code>go test -vet=all</code> とオプションつけましょう。</p><ol><li>atomic</li><li>bools</li><li>buildtags</li><li>directive</li><li>errorsas</li><li>ifaceassert</li><li>nilfunc</li><li>printf</li><li>stringintconv</li></ol><h2 id="go-vetを構成する要素"><a href="#go-vetを構成する要素" class="headerlink" title="go vetを構成する要素"></a>go vetを構成する要素</h2><p><code>go vet</code> の実装のうち、 <a href="https://github.com/golang/go/blob/master/src/cmd/vet/main.go#L48">mainパッケージのコード</a>から抜粋します。 <code>unitchecker.Main()</code> の引数が先程の <code>go tool vet help</code> 結果で出てきたチェック一覧と一致することがわかると思います。</p><figure class="highlight go"><figcaption><span>cmd/vet/main.goから抜粋</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">objabi.AddVersionFlag()</span><br><span class="line"></span><br><span class="line">unitchecker.Main(</span><br><span class="line">asmdecl.Analyzer,</span><br><span class="line">assign.Analyzer,</span><br><span class="line">atomic.Analyzer,</span><br><span class="line">bools.Analyzer,</span><br><span class="line">buildtag.Analyzer,</span><br><span class="line">cgocall.Analyzer,</span><br><span class="line">composite.Analyzer,</span><br><span class="line">copylock.Analyzer,</span><br><span class="line">directive.Analyzer,</span><br><span class="line">errorsas.Analyzer,</span><br><span class="line">framepointer.Analyzer,</span><br><span class="line">httpresponse.Analyzer,</span><br><span class="line">ifaceassert.Analyzer,</span><br><span class="line">loopclosure.Analyzer,</span><br><span class="line">lostcancel.Analyzer,</span><br><span class="line">nilfunc.Analyzer,</span><br><span class="line">printf.Analyzer,</span><br><span class="line">shift.Analyzer,</span><br><span class="line">sigchanyzer.Analyzer,</span><br><span class="line">slog.Analyzer,</span><br><span class="line">stdmethods.Analyzer,</span><br><span class="line">stringintconv.Analyzer,</span><br><span class="line">structtag.Analyzer,</span><br><span class="line">tests.Analyzer,</span><br><span class="line">testinggoroutine.Analyzer,</span><br><span class="line">timeformat.Analyzer,</span><br><span class="line">unmarshal.Analyzer,</span><br><span class="line">unreachable.Analyzer,</span><br><span class="line">unsafeptr.Analyzer,</span><br><span class="line">unusedresult.Analyzer,</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>では、引数の <code>asmdecl.Analyzer</code> ～ <code>unusedresult.Analyzer</code> たちが何かというと、import元のパッケージを見ると、 <a href="https://pkg.go.dev/golang.org/x/tools/go/analysis/passes">golang.org&#x2F;x&#x2F;tools&#x2F;go&#x2F;analysis&#x2F;passes</a> であることがわかります。 <code>passes</code> パッケージは <code>golang.org/x/tools/go/analysis</code> パッケージの静的解析のAPIを利用して作られている集合で、各パッケージごとに静的解析のチェックが実装されているというわけです。わかりやすい構成ですね。</p><h2 id="スタンドアロンドライバー"><a href="#スタンドアロンドライバー" class="headerlink" title="スタンドアロンドライバー"></a>スタンドアロンドライバー</h2><p>さて、<a href="https://pkg.go.dev/golang.org/x/tools/go/analysis/passes">golang.org&#x2F;x&#x2F;tools&#x2F;go&#x2F;analysis&#x2F;passes</a> のGoDocを見ると、 foo&#x2F;cmd&#x2F;foo といった形式で存在するドライバー（コマンド）が存在します。2023年9月5日公開 Version: v0.13.0だと、以下の5種類です。日本語訳はChatGPTさんにお願いしました。なぜかifaceassert、lostcancel、stringintconv、unmarshal、unusedresultはcmdパッケージがあるものの、go vetに含まれているため除外しています。</p><p>これらは先程紹介した<code>go tool vet help</code> にも <code>cmd/vet/main.go</code> にも含まれないため、<code>golang.org/x/tools/go/analysis/passes</code> パッケージに存在すれど <code>go vet</code> で行われないチェックツールです。この記事の趣旨はこいつらってどういう存在か抑えておこうというものです。これらの使い方は後述します。</p><div class="scroll"><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://pkg.go.dev/golang.org/x/tools@v0.13.0/go/analysis/passes/defers">defers</a></td><td>package defersは、defer文の一般的な間違いをチェックするAnalyzerを定義します。</td></tr><tr><td><a href="https://pkg.go.dev/golang.org/x/tools@v0.13.0/go/analysis/passes/fieldalignment">fieldalignment</a></td><td>package fieldalignmentは、フィールドがソートされている場合に、より少ないメモリを使用するstructを検出するAnalyzerを定義します。</td></tr><tr><td><a href="https://pkg.go.dev/golang.org/x/tools@v0.13.0/go/analysis/passes/fieldalignment">findcall</a></td><td>package findcallは、Analysis APIの単純な例とテストとして機能するAnalyzerを定義します。</td></tr><tr><td><a href="https://pkg.go.dev/golang.org/x/tools@v0.13.0/go/analysis/passes/nilness">nilness</a></td><td>package nilnessは、SSA関数の制御フローグラフを検査し、nilポインタの参照や退化したnilポインタの比較などのエラーを報告します。</td></tr><tr><td><a href="https://pkg.go.dev/golang.org/x/tools@v0.13.0/go/analysis/passes/shadow">shadow</a></td><td>package shadowは、シャドウされた変数をチェックするAnalyzerを定義します。</td></tr></tbody></table></div><p>使い方は5種類すべて同様に以下の流れで利用できます。</p><ol><li>各 xxx&#x2F;cmd&#x2F;xxx をインストールする</li><li><code>go vet</code> の <code>-vettool</code> オプションでインストールしたコマンドのパスを渡す<ul><li><code>-vettool</code> で渡す値は、絶対パスである必要があるので注意ください（後述で <code>command -v</code> やらを使っている理由がそれです）</li></ul></li></ol><p>まずは5つのツールをすべてインストールします。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">go install golang.org/x/tools/go/analysis/passes/defers/cmd/defers@latest</span><br><span class="line">go install golang.org/x/tools/go/analysis/passes/fieldalignment/cmd/fieldalignment@latest</span><br><span class="line">go install golang.org/x/tools/go/analysis/passes/findcall/cmd/findcall@latest</span><br><span class="line">go install golang.org/x/tools/go/analysis/passes/nilness/cmd/nilness@latest</span><br><span class="line">go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@latest</span><br></pre></td></tr></table></figure><h2 id="defers"><a href="#defers" class="headerlink" title="defers"></a>defers</h2><p>defersはdefer構文でのよくある間違いを検知してくれるツールです。</p><p>検知するためのコードを準備します。このコードはdefersのGoDocに掲載されていた内容なので新規性は無いです。</p><figure class="highlight go"><figcaption><span>defersで検知するコード</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Defers</span><span class="params">()</span></span> &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line"><span class="keyword">defer</span> recordLatency(time.Since(start)) <span class="comment">// error: call to time.Since is not deferred</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// any logic</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recordLatency</span><span class="params">(d time.Duration)</span></span> &#123;</span><br><span class="line"><span class="comment">// any logging</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>defersの実行</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># （Windowsでは $()の部分を %USERPROFILE%\go\bin\defer などに書き換えてください）</span></span><br><span class="line">$ go vet -vettool=$(<span class="built_in">command</span> -v defers) ./...</span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">.\vetdefers.go:7:22: call to time.Since is not deferred</span><br></pre></td></tr></table></figure><p><code>-vettool</code> オプションで<code>defers</code> を渡すことで実行できました。最後の行に出ているのが検知したメッセージです。</p><p>検知した内容としては vetders.go のL7行目の deferで呼ばれる <code>recordLatency()</code> の引数、 <code>time.Since(start)</code> がdeferが呼ばれるタイミングではなく、即時評価されちゃっているということです。</p><p>おそらく以下が正しいのでは？という検知です。うっかりやっちゃいそうですね。</p><figure class="highlight go"><figcaption><span>おそらく正しいと思われる実装</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; recordLatency(time.Since(start)) &#125;()</span><br></pre></td></tr></table></figure><p>これが標準で入っていない理由ですが、ハッキリとしたIssueやレビューのやり取りを見つけられずでした。推測ですが、検知するのが time.Since のみなのでピンポイントすぎる内容であること、影響度も処理時間計測で用いられるものが大半だと思われるので、クリティカルで無いとみなされたのかなと思います。</p><h2 id="fieldalignment"><a href="#fieldalignment" class="headerlink" title="fieldalignment"></a>fieldalignment</h2><p>fieldalignmentはフィールドを並び替えた場合にメモリ消費量が抑えられるstructを検出してくれるツールです。</p><p>例えば以下のようなコードがあったとします（※GoDocから引っ張ってきているのでコード例にも新規性は無いです）。</p><figure class="highlight go"><figcaption><span>fieldalignment.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Good <span class="keyword">struct</span> &#123;</span><br><span class="line">y <span class="type">int32</span> <span class="comment">//4byte</span></span><br><span class="line">x <span class="type">byte</span>  <span class="comment">// 1byte</span></span><br><span class="line">z <span class="type">byte</span>  <span class="comment">// 1byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bad <span class="keyword">struct</span> &#123;</span><br><span class="line">x <span class="type">byte</span>  <span class="comment">// 1byte</span></span><br><span class="line">y <span class="type">int32</span> <span class="comment">// 4byte</span></span><br><span class="line">z <span class="type">byte</span>  <span class="comment">// 1byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">go vet -vettool=$(<span class="built_in">command</span> -v fieldalignment) ./...</span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">.\fieldalignment.go:9:10: struct of size 12 could be 8</span><br></pre></td></tr></table></figure><p>実行すると、9行目の Bad という structが検知されます。byte型は1byteです。メモリは4byteごとに確保され（64bit OSだと最大8byteまでは同じ領域に連続して格納できるため）、x,zを連続させると4byteで格納できます。int32(4byte) + byte型の2フィールド(4byte) &#x3D; 8byteにできるわけです。もし、int32を間に入れると(Bad structの場合）、4byte(x分) + 4byte（y分） + 4byte（z分）で12byteとなってしまい、無駄が生じているよというわけです。</p><p>一応、Playgroundも用意しました。気になる方は確認ください。</p><p><a href="https://go.dev/play/p/BMtHxH9B_cF">https://go.dev/play/p/BMtHxH9B_cF</a></p><p>これも <code>go vet</code> 標準に含めな議論を見つけられなかったですが、推測するとStructのフィールドを並び替えることで可読性などを落としメモリ省力化を追求することで利点が多いユースケースがメジャーではないこと（組み込みなど厳しいマッチしたケースは当然あると思います）があるのかなと思います。有用ですがデフォルトで有効にするものではないよねということです。</p><h2 id="findcall"><a href="#findcall" class="headerlink" title="findcall"></a>findcall</h2><p>findcallは特定の関数・メソッドが呼ばれているかチェックするツールです。 <code>-name</code> オプションで対象の関数・メソッドを指定します。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">println</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">go vet -vettool=$(<span class="built_in">command</span> -v findcall) -name println ./...</span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">.\findcall.go:4:9: call of println(...)</span><br></pre></td></tr></table></figure><p>これについてはユースケースがピンと来ず、CIで組み込むというよりは開発中に個別で気になった関数・メソッドの利用可否をチェックするといった使われ方でしょうか。検査対象の名称を引数で渡す必要があるため、現在の形式では <code>go vet</code> 標準で組み込まれることはない認識です。</p><p>静的解析の題材としてtennntenさんが取り上げているイメージがあるので、これを土台として有用なツールが作られており、その観点では重要な位置づけにあるツールに見えます。</p><p><a href="https://engineering.mercari.com/blog/entry/2018-12-16-150000/">https://engineering.mercari.com/blog/entry/2018-12-16-150000/</a></p><h2 id="nilness"><a href="#nilness" class="headerlink" title="nilness"></a>nilness</h2><p>nilness は nil ポインターの逆参照などを検知するツールです。例えばif分でnil検査をしているにもかかわらず、その変数にアクセスするとpanicが生じます。そういった実装を検知してくれます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> X <span class="keyword">struct</span>&#123; f, g <span class="type">int</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fnilness</span><span class="params">(x, y *X)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">print</span>(x.f) <span class="comment">// L7 ★検知</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">print</span>(x.f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="literal">nil</span> != y &#123;</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">panic</span>(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">x.f = <span class="number">1</span> <span class="comment">// L17 ★検知</span></span><br><span class="line">y.f = <span class="number">1</span> <span class="comment">// L18 ★検知</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;go vet -vettool=$(<span class="built_in">command</span> -v nilness) ./...</span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">.\nilness.go:7:11: nil dereference <span class="keyword">in</span> field selection</span><br><span class="line">.\nilness.go:17:5: nil dereference <span class="keyword">in</span> field selection</span><br><span class="line">.\nilness.go:18:5: nil dereference <span class="keyword">in</span> field selection</span><br></pre></td></tr></table></figure><p>便利そうな気もしますね。なぜこれが <code>go vet</code> 標準でないのかは良く分かりませんでしたが、プロポーサルに理由が書いてありました。</p><ul><li><a href="https://github.com/golang/go/issues/59714">proposal: cmd&#x2F;vet: enable nilness checker by default #59714</a></li></ul><p>それによると、<code>go vet</code> は <code>go test</code> に最終的にはすべて含まれることを目指しており、 <code>nilness</code> はそのための（速度）基準をまだ満たしていないといったことが壁のようです。</p><h2 id="shadow"><a href="#shadow" class="headerlink" title="shadow"></a>shadow</h2><p>shadowはシャドウイングを検知してくれるツールです。シャドウイングについてはmattnさんの<a href="https://mattn.kaoriya.net/software/lang/go/20200227102218.htm">Go 言語で変数のシャドウイングを避けたいなら shadow を使おう。</a>記事を参考ください（まさにshadowの紹介もしていますね）。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BadRead</span><span class="params">(f *os.File, buf []<span class="type">byte</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span> <span class="comment">// L10L</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">_, err := f.Read(buf) <span class="comment">// L12</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// L14</span></span><br><span class="line">&#125;</span><br><span class="line">foo(buf)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(buf []<span class="type">byte</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>これに対してshadowを実行します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;go vet -vettool=$(<span class="built_in">command</span> -v shadow) ./...</span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">.\shadow.go:12:6: declaration of <span class="string">&quot;err&quot;</span> shadows declaration at line 10</span><br></pre></td></tr></table></figure><p>12行目の <code>, err := f.Read(buf)</code> で、 <code>:=</code> で代入しているため、L10行目で宣言した <code>err</code> とは同一名称で異なる変数が宣言されています。そのためL14でbreakしても戻り値のerrはnilのままです。いい感じに検知してくれていますね。</p><p>シャドウイング自体はGoの言語機能として本来問題ないはずなのでgo vet標準には組み込まれていないのだと思います。</p><h2 id="vettool-に複数プログラムを指定できない"><a href="#vettool-に複数プログラムを指定できない" class="headerlink" title="-vettool に複数プログラムを指定できない"></a>-vettool に複数プログラムを指定できない</h2><p>なんとなく、以下のように一括でチェックができるイメージがありましたが、以下のような指定はできません。</p><figure class="highlight sh"><figcaption><span>NGケース（複数の-vettoolオプションは渡せない）</span></figcaption><table><tr><td class="code"><pre><span class="line">go vet -vettool=$(<span class="built_in">command</span> -v defers) \</span><br><span class="line">  -vettool=$(<span class="built_in">command</span> -v fieldalignment)  \</span><br><span class="line">  -vettool=$(<span class="built_in">command</span> -v nilness) \</span><br><span class="line">  -vettool=$(<span class="built_in">command</span> -v shadow) ./...</span><br></pre></td></tr></table></figure><p>そのため、go vetを複数回起動することになると思います。<code>go vet</code> 標準と、スタンドアロンドライバー4種類を実行する場合は以下のようにコマンドを並べることになると思います。</p><figure class="highlight sh"><figcaption><span>OKケース</span></figcaption><table><tr><td class="code"><pre><span class="line">go vet ./...</span><br><span class="line">go vet -vettool=$(<span class="built_in">command</span> -v defers) ./...</span><br><span class="line">go vet -vettool=$(<span class="built_in">command</span> -v fieldalignment) ./...</span><br><span class="line">go vet -vettool=$(<span class="built_in">command</span> -v nilness) ./...</span><br><span class="line">go vet -vettool=$(<span class="built_in">command</span> -v shadow) ./...</span><br></pre></td></tr></table></figure><p>また、 <code>-vettool</code> を指定すると、go vet組み込み＋vettoolのチェックを行うと私は勘違いしてしまいましたが、あくまで<code>vettool</code>のチェックのみ行われることに注意ください。 </p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>go vet に近い静的解析ツールを5種類紹介しました。それらが解決する課題がチームにマッチする場合は、有効にして取り入れてると良いかなと思いました。また、類似の課題の場合はそれらのコードを参考に、自分たちで解析ツールを作るといったことにも役立つと思います。</p><p>アイキャッチは<a href="https://unsplash.com/ja/%E5%86%99%E7%9C%9F/g3PsF4_y7ZY?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>の<a href="https://unsplash.com/ja/@etactics?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Etactics Inc</a>が撮影した写真です。 </p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Linter/">Linter</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90/">静的解析</category>
      
      
      <comments>https://future-architect.github.io/articles/20231005a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>アクセシビリティに考慮した出力値のHTMLマークアップ</title>
      <link>https://future-architect.github.io/articles/20231003a/</link>
      <guid>https://future-architect.github.io/articles/20231003a/</guid>
      <pubDate>Mon, 02 Oct 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;strong&gt;10&amp;#x2F;4追記:&lt;/strong&gt; 本記事の中で不具合のような動作があると書いていたのですが、&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><strong>10&#x2F;4追記:</strong> 本記事の中で不具合のような動作があると書いていたのですが、<a href="https://github.com/microsoft/playwright/issues/27403">issueで報告したところ</a>、すぐに修正されました。次のバージョン1.39で修正版がリリースされるようです。</p><p>以前書いたCypressの記事で、アクセシビリティ情報を使うことで壊れにくくなるよ、と（今では当たり前のようにみんな言っていますが）いう記事を書きました。</p><ul><li><a href="/articles/20210226/">アクセシビリティ情報を使った壊れにくいE2Eテスト</a></li></ul><p>この時は出力に使うべきロールが何か？というのがわかっていませんでした。</p><blockquote><p>サーバーからとってきた動的な値を表示するテキストって、DOM上は単なるテキストなのでロールを持っていないのですよね。テスト上はここにロールがあって要素取得できるととても助かる。</p><p>次のどちらかな、と思っているのですが、どちらの方がスクリーンリーダーユーザーにとって自然なロール指定のかはちょっとわかってません。とりあえず前者にしています。</p></blockquote><p>先日、「実際使えるロールとか、それに適したタグって全部でどのぐらいあるんだろうか？」というのが気になってPlaywrightのソースコードを眺めていたところ、それが定義されているファイルが<a href="https://github.com/microsoft/playwright/blob/ac9d1ec421b572d6ac23f1dd169f292a1108e102/packages/playwright-core/src/server/injected/roleUtils.ts">playwright-core&#x2F;src&#x2F;server&#x2F;injected&#x2F;roleUtils.ts</a>であることがわかり、その中で <code>&lt;output&gt;</code> タグがあるというのを知りました。<code>&lt;output&gt;</code>タグにはデフォルトで<code>status</code>というaria-roleがついていることがわかります。</p><p>多くのブラウザが <code>aria-live</code> の領域としてこのタグを扱ってくれるため、何かしらのロジックが走って結果が変わった時のとかにうまく変更をユーザーに知らせてくれるらしいです。ReactとかVueで計算した結果を出す先をマークアップするには良さそうですね。</p><h1 id="lt-output-gt-タグを使ってみる"><a href="#lt-output-gt-タグを使ってみる" class="headerlink" title="&lt;output&gt;タグを使ってみる"></a><code>&lt;output&gt;</code>タグを使ってみる</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output">MDNの説明</a>を読むと、<code>&lt;output&gt;</code>タグは<code>for</code>属性を使って、フォーム要素っぽく、HTMLとして<code>&lt;label&gt;</code>と関連付けられることがわかりました。これを使うのがHTMLのセマンティクス的に良さそうですね。</p><p>viteでReactの雛形を作って、サンプルアプリを作ってみました。2つの数値のフォームがあり、それに数値を入れると合計値、積算した結果を表示します。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCallback, useState, <span class="title class_">ChangeEvent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [value1, setValue1] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [value2, setValue2] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> updateValue1 = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">e: ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setValue1</span>(<span class="title class_">Number</span>(e.<span class="property">target</span>.<span class="property">value</span>));</span><br><span class="line">  &#125;, [setValue1])</span><br><span class="line">  <span class="keyword">const</span> updateValue2 = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">e: ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setValue2</span>(<span class="title class_">Number</span>(e.<span class="property">target</span>.<span class="property">value</span>));</span><br><span class="line">  &#125;, [setValue2])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;grid grid-cols-2 gap-4&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;value1&quot;</span>&gt;</span>Value1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;value1&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;updateValue1&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;value2&quot;</span>&gt;</span>Value2<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;value2&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;updateValue2&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;sum&quot;</span>&gt;</span>Sum<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">&quot;sum&quot;</span>&gt;</span>&#123;value1 + value2&#125;<span class="tag">&lt;/<span class="name">output</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;mul&quot;</span>&gt;</span>Mul<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">&quot;mul&quot;</span>&gt;</span>&#123;value1 * value2&#125;<span class="tag">&lt;/<span class="name">output</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><p>Playwrightで書いてみたテストは次の通りです。<code>&lt;output&gt;</code>タグについたラベルを使って取得できています。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; test, expect &#125; <span class="keyword">from</span> <span class="string">&#x27;@playwright/test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;calc&#x27;</span>, <span class="keyword">async</span> (&#123; page &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;http://localhost:5173&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">getByLabel</span>(<span class="string">&quot;Value1&quot;</span>).<span class="title function_">fill</span>(<span class="string">&quot;10&quot;</span>)</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">getByLabel</span>(<span class="string">&quot;Value2&quot;</span>).<span class="title function_">fill</span>(<span class="string">&quot;20&quot;</span>)</span><br><span class="line">  <span class="title function_">expect</span>(<span class="keyword">await</span> page.<span class="title function_">getByLabel</span>(<span class="string">&quot;Sum&quot;</span>)).<span class="title function_">toHaveText</span>(<span class="string">&quot;30&quot;</span>)</span><br><span class="line">  <span class="title function_">expect</span>(<span class="keyword">await</span> page.<span class="title function_">getByLabel</span>(<span class="string">&quot;Mul&quot;</span>)).<span class="title function_">toHaveText</span>(<span class="string">&quot;200&quot;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="/images/20231003a/スクリーンショット_2023-10-01_17.37.45.png" alt="test('calc', async ({ page }) => { にハイライトがあたったPlaywright画面" width="1200" height="535" loading="lazy"><h1 id="getByRole-‘status’-は現状使えなそう→1-39から使えます！"><a href="#getByRole-‘status’-は現状使えなそう→1-39から使えます！" class="headerlink" title="# getByRole(‘status’)は現状使えなそう→1.39から使えます！"></a># getByRole(‘status’)は現状使えなそう→1.39から使えます！</h1><p><del>ラベルの選択ができたし、<code>getByRole()</code>ではどうかな、と試してみましたがうまくいきません。これは見つけられませんでした。</del></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">expect</span>(<span class="keyword">await</span> page.<span class="title function_">getByRole</span>(<span class="string">&#x27;status&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;Sum&#x27;</span> &#125;)).<span class="title function_">toBeVisible</span>()</span><br></pre></td></tr></table></figure><p><del>名前とロールは違うものだし、仕方ない気もしないでもないけど<code>&lt;input&gt;</code>タグの中にはラベルをnameで指定するのが普通の要素もあります。</del></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment">/* ボタンのテキスト */</span>&#125;</span><br><span class="line">&lt;button&gt;<span class="title class_">Button</span> <span class="title class_">Sample</span>&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">/* labelで指定(checkbox) */</span>&#125;</span><br><span class="line">&lt;label&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span> <span class="title class_">Subscribe</span></span><br><span class="line">&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">/* 同様の記法でlabelを付与したoutput */</span>&#125;</span><br><span class="line">&lt;label&gt;</span><br><span class="line">  <span class="title class_">Output</span> &lt;output&gt;test&lt;/output&gt;</span><br><span class="line">&lt;/label&gt;</span><br></pre></td></tr></table></figure><p>Playwrightで実験してみると次のようになりました。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 成功</span></span><br><span class="line"><span class="title function_">expect</span>(<span class="keyword">await</span> page.<span class="title function_">getByRole</span>(<span class="string">&#x27;button&#x27;</span>, &#123;　<span class="attr">name</span>: <span class="string">&quot;Button Sample&quot;</span>　&#125;)).<span class="title function_">toBeVisible</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line"><span class="title function_">expect</span>(<span class="keyword">await</span> page.<span class="title function_">getByRole</span>(<span class="string">&#x27;checkbox&#x27;</span>, &#123;　<span class="attr">name</span>: <span class="string">&#x27;Subscribe&#x27;</span> &#125;)).<span class="title function_">toBeVisible</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 失敗(1.38)</span></span><br><span class="line"><span class="title function_">expect</span>(<span class="keyword">await</span> page.<span class="title function_">getByRole</span>(<span class="string">&#x27;status&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;Output&#x27;</span> &#125;)).<span class="title function_">toBeVisible</span>()</span><br></pre></td></tr></table></figure><p><del><code>&lt;output&gt;</code>はフォーム属性ではないせいか、ラベルをroleのnameとしては認識しないようです。checkboxはいけるんですけどね。</del></p><p><del>ARIA周りの仕様とかを完全に理解したわけではないので、これはissue報告すべきなのかどうなのか悩むところではありますが、現状 <code>getByLabel()</code>で情報が取れることはわかったので、一旦これでよしとしようかと思います。</del></p><p>→報告したところ修正されました。1.39で治るようです。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>数年前に発表した資料でもわからん、と書いていた、喉に使えた骨だった悩みが解決しました。一方でPlaywrightの挙動があるべきものなのか悩ましいのですが、今後は積極的に使ってみようと思います。</p><p>自分がスクリーンリーダー等を使っていなかったりもあって、アクセシビリティに関しては自信をもって「これだ！」とまではまだ言えないので、識者のフィードバックがあるといいな、と思いつつ技術ブログにしています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/HTML/">HTML</category>
      
      <category domain="https://future-architect.github.io/tags/accessibility/">accessibility</category>
      
      <category domain="https://future-architect.github.io/tags/Playwright/">Playwright</category>
      
      <category domain="https://future-architect.github.io/tags/E2E/">E2E</category>
      
      
      <comments>https://future-architect.github.io/articles/20231003a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ローカルでGoのHTTP/3サーバーを立てて接続テストを行う</title>
      <link>https://future-architect.github.io/articles/20230927a/</link>
      <guid>https://future-architect.github.io/articles/20230927a/</guid>
      <pubDate>Tue, 26 Sep 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;Go 1.21ではcrypto&amp;#x2F;tlsパッケージでQUIC関連の更新が少しありましたが、QUICそのものは入りませんでした。QUICとかHTTP&amp;#x2F;3周りをどうするかは&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>Go 1.21ではcrypto&#x2F;tlsパッケージでQUIC関連の更新が少しありましたが、QUICそのものは入りませんでした。QUICとかHTTP&#x2F;3周りをどうするかは<a href="https://github.com/golang/go/issues/58547">いろいろ議論があり</a>、次のことが決定しています。</p><ul><li>最終的にはnet&#x2F;quicが作られる</li><li>ただし、APIの安定化のために、まずは準標準パッケージとして golang.org&#x2F;x&#x2F;net&#x2F;quicを作っていく</li><li>github.com&#x2F;quic-go&#x2F;quic-goという実装はあるが、それをそのまま取り込むことはしない</li></ul><p>ということで、もう少ししばらくかかりそうです。</p><p>といっても、HTTP&#x2F;3のリクエストをエンドのアプリケーションサーバーが直接受けることはおそらく稀で、CDNとか、最前面にたつエンドポイントがHTTP&#x2F;2やHTTP&#x2F;3をしゃべって、その裏はHTTP&#x2F;1.1(非TLS)が多いと思いますし、より固くしようとしてもmTLSでHTTP&#x2F;2じゃないですかね。もともとHTTP&#x2F;3の強みはエラー率の高い回線でも速度が落ちにくいことなので、回線品質の安定したデータセンターとかクラウド内部はHTTP&#x2F;3にしてもうまみがあまりないといえるので、そんな悲観的になることもないかな、と思います。</p><p>とはいえ、HTTP&#x2F;3に触ってみたい方もいるかと思うので試してみました。</p><p>上記の議論の中でも出てきた github.com&#x2F;quic-go&#x2F;quic-go　は、このパッケージの作者のMarten SeemannはIETFのQUICワーキンググループの初期からのメンバーでもあり、このパッケージ自身もIETFの他のQUICエージェントとの相互接続テストを行っており、品質はばっちりだと思われます。なのでこれを試してみます。</p><h1 id="quic-goでのHTTPサーバー"><a href="#quic-goでのHTTPサーバー" class="headerlink" title="quic-goでのHTTPサーバー"></a>quic-goでのHTTPサーバー</h1><p>Goの標準ライブラリのサーバー実装と似たようなAPIでサーバーをたてられます。ハンドラ周りはnet&#x2F;httpの<code>http.Handler</code>インタフェースそのものなので、いろんなフレームワークをそのまま上で動かせます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;log&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;github.com/quic-go/quic-go/http3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   mux := http.NewServeMux()</span><br><span class="line">   mux.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">       fmt.Fprintf(w, <span class="string">&quot;Hello, %s&quot;</span>, r.Proto)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   log.Println(<span class="string">&quot;start at https://localhost:8443&quot;</span>)</span><br><span class="line">   log.Println(http3.ListenAndServe(<span class="string">&quot;0.0.0.0:8443&quot;</span>, <span class="string">&quot;localhost.pem&quot;</span>, <span class="string">&quot;localhost-key.pem&quot;</span>, mux))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Goを書いたことがある人にはおなじみですね？HTTP&#x2F;2と同じく、TLS必須なので証明書を作成する必要があります。こちらは参考情報がいろいろあるので、お好きな文献などを参考に作ってみてください。Real World HTTPでも紹介しています。</p><p><code>localhost</code>のホスト名で証明書を作ったので、<code>localhost:8443</code>でアクセスするとバッチリ表示されます。Safariでアクセスしてみると、すぐに表示されて案外簡単？と思いつつ、ここから深くなってきます。</p><img src="/images/20230927a/スクリーンショット_2023-09-21_15.03.06.png" alt="スクリーンショット_2023-09-21_15.03.06.png" width="806" height="336" loading="lazy"><h1 id="quic-goの内部ではサーバーが2つ起動する"><a href="#quic-goの内部ではサーバーが2つ起動する" class="headerlink" title="quic-goの内部ではサーバーが2つ起動する"></a>quic-goの内部ではサーバーが2つ起動する</h1><p>http3パッケージには<code>ListenAndServeQUIC()</code>という関数もあります。どう違うのでしょうか？最初はこちらで実装してみたのですが動かず、上記の<code>ListenAndServe()</code>にしたら動きました。</p><p>こちらの方は内部的には、こんな感じのコードと同じような動きになります。よくよくみると、HTTP&#x2F;2のサーバーも起動していますね。<code>Alt-Svc</code>フィールドを付与しています。</p><p>QUICはUDPですが、現在のブラウザはまずTCPでサーバーアクセスしに行きます。しかし、HTTP&#x2F;3のみのサーバーがたっていても、そこにはTCPのサーバーはいません。そのため、HTTP&#x2F;2のサーバーを裏でたてて、そのレスポンスの <code>Alt-Svc</code>フィールドを返し「こちらでHTTP&#x2F;3のサーバーがいるよ」とブラウザをHTTP&#x2F;3の方に誘導しているというわけです。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;context&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;log&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">   <span class="string">&quot;os&quot;</span></span><br><span class="line">   <span class="string">&quot;os/signal&quot;</span></span><br><span class="line">   <span class="string">&quot;sync&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;github.com/quic-go/quic-go/http3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   mux := http.NewServeMux()</span><br><span class="line">   mux.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">       w.Header().Add(<span class="string">&quot;Alt-Svc&quot;</span>, <span class="string">`h3=&quot;:8443&quot;; ma=2592000`</span>)</span><br><span class="line">       fmt.Fprintf(w, <span class="string">&quot;Hello via %s&quot;</span>, r.Proto)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   ctx, <span class="built_in">close</span> := signal.NotifyContext(context.Background(), os.Interrupt)</span><br><span class="line">   <span class="keyword">defer</span> <span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line">   h2server := &amp;http.Server&#123;</span><br><span class="line">       Addr:    <span class="string">&quot;0.0.0.0:8443&quot;</span>,</span><br><span class="line">       Handler: mux,</span><br><span class="line">   &#125;</span><br><span class="line">   h3server := &amp;http3.Server&#123;</span><br><span class="line">       Addr:    <span class="string">&quot;0.0.0.0:8443&quot;</span>,</span><br><span class="line">      Handler: mux,</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   wg := &amp;sync.WaitGroup&#123;&#125;</span><br><span class="line">   wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">       log.Println(<span class="string">&quot;start at http/2 server at (TCP)https://localhost:8443&quot;</span>)</span><br><span class="line">       log.Println(h2server.ListenAndServeTLS(<span class="string">&quot;localhost.pem&quot;</span>, <span class="string">&quot;localhost-key.pem&quot;</span>))</span><br><span class="line">       wg.Done()</span><br><span class="line">   &#125;()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">       log.Println(<span class="string">&quot;start at http/3 server at (UDP)https://localhost:8443&quot;</span>)</span><br><span class="line">       log.Println(h3server.ListenAndServeTLS(<span class="string">&quot;localhost.pem&quot;</span>, <span class="string">&quot;localhost-key.pem&quot;</span>))</span><br><span class="line">       wg.Done()</span><br><span class="line">   &#125;()</span><br><span class="line"></span><br><span class="line">   &lt;-ctx.Done()</span><br><span class="line">   h2server.Shutdown(ctx)</span><br><span class="line">   h3server.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="プロトコル選択"><a href="#プロトコル選択" class="headerlink" title="プロトコル選択"></a>プロトコル選択</h1><p>HTTP&#x2F;3ではいくつかの箇所でプロトコル選択をさせるようになっています。</p><ul><li>DNSのHTTPSレコード</li><li>TLSのハンドシェイクのALPN(Application-Layer Protocol Negotiation)</li><li>上記で紹介したAlt-Svcフィールド</li></ul><p>上から順番に実行されます。DNSであれば、最初のサーバーアクセスの前に情報を得ることができます。TLSのハンドシェイクはTCP&#x2F;UDPを決めた後に行えるため、最初のTCPのアクセスの空撃ちは必要です。Alt-Svcフィールドのタイミングはさらに遅く、一度HTTP&#x2F;2のサーバーがリクエストを処理するまで、ブラウザはHTTP&#x2F;3のサーバーの存在を知ることはできません。</p><p>個人的には103 Early HintsでAlt-Svcフィールドを返せば僅かばかりAlt-Svcをレスポンスで返すよりも効率的かな、と思いましたが、103 Early Hintsはサンプル見てもプリロードの用途しか見ませんね。</p><h1 id="CoreDNSをたててみた"><a href="#CoreDNSをたててみた" class="headerlink" title="CoreDNSをたててみた"></a>CoreDNSをたててみた</h1><p>さて、上記のHTTP&#x2F;3サーバーですが、Safariからはばっちり3の方につながるのですが、ChromeとFirefoxは2ばかり。たまに開発者ツールを開いてリロードしたタイミングだけ3でつながったりといまいち安定しません。そんな中、Twitter(X)で、まえかわさんという方から、HTTPSレコードでばっちりいけるというお話を伺い、ちょっと試してみることにしました。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">allt-svcに加えてHTTPSレコードをつけたらchromeは確実に3でfirefoxは半々ぐらいの確率になりますね<br>自分も壊れてるのかと思いました</p>&mdash; まえかわ (@kiwithe2027) <a href="https://twitter.com/kiwithe2027/status/1703264967510954453?ref_src=twsrc%5Etfw">September 17, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>ちなみに、現在出ている<a href="https://gihyo.jp/magazine/SD/archive/2023/202310">Software Design 2023年10月号</a>がたまたまHTTP&#x2F;3特集でしたが、HTTPSレコードはCDN上の設定で付与していました。</p><p>今回あつかった<a href="https://coredns.io/">CoreDNS</a>は、CNCFの傘下にいるプロジェクトで、Kubernetesでもよく使われています。もっとも、その理由がetcdでエントリーの管理ができて、そちらの情報を元に情報を返せるため管理が楽、というところがあるのだと思いますが、今回はetcdは使いません。</p><p><a href="https://brendanthompson.com/posts/2021/12/coredns-on-macos-for-local-development">こちら</a>をみながらmacOSでやってみた例になりますが、サービスの起動部分以外はポータブルなはずです。<a href="https://hnakamur.github.io/blog/2019/10/30/coredns-wrapper-for-runnning-as-windows-service/">hnakamurさんがWindowsでサービス化するラッパー</a>を作られているのでこちらに変えればWindowsでも動くかと思います。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># インストール</span></span><br><span class="line">$ brew install coredns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 起動</span></span><br><span class="line">$ sudo brew services start coredns</span><br></pre></td></tr></table></figure><p><code>http3.test</code>というホスト名だけ特別扱いしてHTTPSレコードをつけてあげたいので、<code>/opt/homebrew/etc/coredns/Corefile</code>ファイルを次のようにしました</p><figure class="highlight sh"><figcaption><span>/opt/homebrew/etc/coredns/Corefile</span></figcaption><table><tr><td class="code"><pre><span class="line">. &#123;</span><br><span class="line">    forward . 8.8.8.8</span><br><span class="line">    <span class="built_in">log</span></span><br><span class="line">    errors</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http3.test &#123;</span><br><span class="line">  file /Users/shibu/.config/coredns/test</span><br><span class="line">  <span class="built_in">log</span></span><br><span class="line">  errors</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記の設定からインポートされる自分のホーム以下に追加の設定ファイル(&#x2F;Users&#x2F;shibu&#x2F;.config&#x2F;coredns&#x2F;test)をおきます。こんな感じにしてみました。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ORIGIN</span> <span class="built_in">test</span>.</span><br><span class="line"><span class="variable">$TTL</span> 1m</span><br><span class="line"></span><br><span class="line">@                 IN  SOA     ns.test. admin.test. (</span><br><span class="line">                                   2020010510     ; Serial</span><br><span class="line">                                   1m             ; Refresh</span><br><span class="line">                                   2m             ; Retry</span><br><span class="line">                                   4m             ; Expire</span><br><span class="line">                                   1m)            ; Minimum TTL</span><br><span class="line">@                 IN  A       127.0.0.1</span><br><span class="line">@                 IN  NS      <span class="built_in">test</span>.</span><br><span class="line">ns                IN  CNAME   @</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http3   IN A     127.0.0.1</span><br><span class="line">        IN AAAA  ::1</span><br><span class="line">        INHTTPS 1 . alpn=h3 port=8443</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 再起動</span></span><br><span class="line">$ sudo brew services restart coredns</span><br></pre></td></tr></table></figure><p>最後にネットワーク設定でDNSに127.0.0.1を追加してあげれば完了です。</p><p>これでSafariでアクセスしてみると、無事に <code>https://http3.test</code>というURLでアクセスできました。HTTPSレコードはプロトコル以外にもポートを設定できるのでポート番号を省略できるようになります。いいですね。</p><img src="/images/20230927a/スクリーンショット_2023-09-21_15.02.30.png" alt="" width="699" height="336" loading="lazy"><p>しかし、実はChromeとFirefox、EdgeはこのDNSサーバーを見に行ってくれませんでした。昔はDNS設定があったと思いますが、いまはDNS over HTTPSのみです。ChromeでHTTP&#x2F;3に繋ぎたくてCoreDNSを入れてみたのですが、ここはうまく行っていません。DNS over HTTPSをCoreDNSで建ててみてもそこにアクセスしてくれなかったり、設定を拒否されたり。ここはぼちぼちやっていこうと思います。dnsmasqを入れた時はアクセスはしてくれたものの、HTTPSレコードの追加が分からずCoreDNSでやりましたが、別の方法も試そうかと。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>というわけで、HTTP&#x2F;3のサーバーを起動してブラウザでアクセスしてみました。Safariからはうまくつながりました。しかし、実際に試す時間の90%はDNS周りを操作する時間だったりして、ちょっと敷居が高い気がしました。</p><p>将来的にはもう開発体験がちょっと改善されたらいいな、と思いました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-21/">Go1.21</category>
      
      <category domain="https://future-architect.github.io/tags/HTTP3/">HTTP3</category>
      
      <category domain="https://future-architect.github.io/tags/QUIC/">QUIC</category>
      
      <category domain="https://future-architect.github.io/tags/CoreDNS/">CoreDNS</category>
      
      
      <comments>https://future-architect.github.io/articles/20230927a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>stree：S3バケットをtreeするCLIコマンド</title>
      <link>https://future-architect.github.io/articles/20230926a/</link>
      <guid>https://future-architect.github.io/articles/20230926a/</guid>
      <pubDate>Mon, 25 Sep 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230926a/stree-display.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;600&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230926a/stree-display.png" alt="" width="1200" height="600" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG&#x2F;EXユニット所属の宮永です。</p><p>本記事ではS3バケットをtreeするCLIコマンドを紹介します。</p><p>クラスメソッドさんの記事(<a href="https://dev.classmethod.jp/articles/s3-tree-aws-s3-ls/">S3 バケットの中身を tree 形式で表示してくれる s3-tree を Amazon Linux 2 にインストールして使ってみた</a>)を拝見して、<a href="https://pypi.org/project/s3-tree/">s3-tree</a>というツールの存在を知ったのですが、profileを指定できなかったり、バケット単位でしか指定できなかったりと細かな部分で不自由さを感じたためGoでCLIツールを作成しました。</p><p>作成したツールは以下リンク先で公開しています。</p><p><a href="https://github.com/orangekame3/stree"><img src="https://gh-card.dev/repos/orangekame3/stree.svg" alt="orangekame3/stree - GitHub"></a></p><blockquote><p>streeは「エスツリー」と読みます。先に語感の良い名称を思いついたため、衝動に身を任せて開発しました。</p></blockquote><h1 id="機能概要"><a href="#機能概要" class="headerlink" title="機能概要"></a>機能概要</h1><p>まずは利用画面を見ていただいたほうがイメージ付きやすいかと思いますのでgif画像を添付します。</p><img src="/images/20230926a/demo.gif" alt="demo" width="1200" height="686" loading="lazy"><p>streeは以下の機能をサポートしています。</p><ul><li>バケット名、プレフィックス名指定によるtree表示</li><li>プロファイル、リージョンの指定</li><li>LocalStack上のS3バケットのtree表示</li><li>カラー表示（オプションで無効化も可能です）</li></ul><h1 id="インストール方法"><a href="#インストール方法" class="headerlink" title="インストール方法"></a>インストール方法</h1><p>GoとHomebrew経由でインストール可能です。</p><p>各種ビルド済みのバイナリも公開しているので<a href="https://github.com/orangekame3/stree/releases">Release</a>から手動インストールもできます。</p><h2 id="Goによるインストール"><a href="#Goによるインストール" class="headerlink" title="Goによるインストール"></a>Goによるインストール</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go install github.com/orangekame3/stree@latest</span><br></pre></td></tr></table></figure><h2 id="Homebrewによるインストール"><a href="#Homebrewによるインストール" class="headerlink" title="Homebrewによるインストール"></a>Homebrewによるインストール</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install orangekame3/tap/stree</span><br></pre></td></tr></table></figure><h1 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h1><div class="note warn" style="background: #fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p><strong>前提</strong><br>aws cliで利用するconfig及びcredentialsは事前に設定しておく必要があります。</p></div><p>以降、configとcredentialsが以下の通り設定されているものとします。</p><figure class="highlight ini"><figcaption><span>~/.aws/config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[my_profile]</span></span><br><span class="line"><span class="attr">region</span> = ap-northeast-<span class="number">1</span></span><br><span class="line"><span class="attr">output</span> = json</span><br></pre></td></tr></table></figure><figure class="highlight ini"><figcaption><span>~/.aws/credentials</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[my_profile]</span></span><br><span class="line"><span class="attr">aws_access_key_id</span>=XXXXXXXXXXXXXXXXXXXXX</span><br><span class="line"><span class="attr">aws_secret_access_key</span>=XXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure><h2 id="基本的なコマンド"><a href="#基本的なコマンド" class="headerlink" title="基本的なコマンド"></a>基本的なコマンド</h2><p>バケット名とprofileを指定して、以下のコマンドを実行します。</p><p>プロファイルは<code>--profile(-p)</code>で指定します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">stree my-bucket -p my_profile</span><br></pre></td></tr></table></figure><p>以下のような出力が得られます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">my-bucket</span><br><span class="line">└── <span class="built_in">test</span></span><br><span class="line">    ├── dir1</span><br><span class="line">    │   ├── dir1_1</span><br><span class="line">    │   │   └── dir1_1_1</span><br><span class="line">    │   │       ├── file1.csv</span><br><span class="line">    │   │       └── file2.csv</span><br><span class="line">    │   └── dir1_2</span><br><span class="line">    │       ├── file1.csv</span><br><span class="line">    │       ├── file2.csv</span><br><span class="line">    │       └── file3.csv</span><br><span class="line">    ├── dir2</span><br><span class="line">    │   └── dir2_1</span><br><span class="line">    │       └── dir2_1_1</span><br><span class="line">    │           ├── file1.csv</span><br><span class="line">    │           ├── file2.csv</span><br><span class="line">    │           └── file3.csv</span><br><span class="line">    └── dir3</span><br><span class="line">        ├── file1.csv</span><br><span class="line">        └── file2.csv</span><br><span class="line"></span><br><span class="line">9 directories, 10 files</span><br></pre></td></tr></table></figure><h2 id="プレフィックスを指定"><a href="#プレフィックスを指定" class="headerlink" title="プレフィックスを指定"></a>プレフィックスを指定</h2><p>通常のユースケースを考えると、バケットの中には大量のオブジェクトが存在していることが予想されます。</p><p>そのため、バケット指定しかできない状況では使い物になりません。バケット名に続けてprefixを指定することで、ユーザーが確認したいパスの情報のみを確認することができます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">stree my-bucket/test/dir2 -p my_profile</span><br></pre></td></tr></table></figure><p>このコマンドの実行結果は以下のようになります。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">my-bucket</span><br><span class="line">└── <span class="built_in">test</span></span><br><span class="line">    └── dir2</span><br><span class="line">        └── dir2_1</span><br><span class="line">            └── dir2_1_1</span><br><span class="line">                ├── file1.csv</span><br><span class="line">                ├── file2.csv</span><br><span class="line">                └── file3.csv</span><br><span class="line"></span><br><span class="line">4 directories, 3 files</span><br></pre></td></tr></table></figure><h2 id="リージョンのオーバーライド"><a href="#リージョンのオーバーライド" class="headerlink" title="リージョンのオーバーライド"></a>リージョンのオーバーライド</h2><p><code>--region(-r)</code>でリージョンを指定できます。</p><p>profileに記載しているリージョンとは別のリージョンを指定したいときなどは<code>--region</code>フラグを利用してオーバーライドしてください。</p><h2 id="Localstackでの利用"><a href="#Localstackでの利用" class="headerlink" title="Localstackでの利用"></a>Localstackでの利用</h2><p>Localstackでも利用できます。</p><p>ローカルスタックで利用する場合、endpointとregionはデフォルトで以下の通り設定していると思います。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">endpoint = http://localhost:4566</span><br><span class="line">region = us-east-1</span><br></pre></td></tr></table></figure><p>大多数の場合は↑の設定で利用しているかと思いますのでLocalstack用のフラグを追加しています。<code>--local(-l)</code>がそれです。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">stree my-bucket/test/dir2 -l</span><br></pre></td></tr></table></figure><p>特別な事情でエンドポイントやリージョンを変更する場合もあるかと思いますので、<code>--region(-r)</code> フラグと<code>--endpoint(-e)</code>でオーバーライドすることもできます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">stree my-bucket/test/dir2 -r us-east-1 -e http://localhost:4537</span><br></pre></td></tr></table></figure><p>出力は同じであるため省略します。</p><h2 id="カラー出力を無効化"><a href="#カラー出力を無効化" class="headerlink" title="カラー出力を無効化"></a>カラー出力を無効化</h2><p><code>--no-color(-n)</code>でカラー出力を無効化できます。</p><p>▼カラーつき<br><img src="/images/20230926a/color.png" alt="color.png" width="479" height="391" loading="lazy"></p><p>▼カラーなし<br><img src="/images/20230926a/no-color.png" alt="no-color.png" width="504" height="391" loading="lazy"></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>実装に取り掛かるうえでtreeは骨が折れそうだなと思ったのですが、既にgteeというパッケージがGitHubで公開されていました。</p><p><a href="https://github.com/ddddddO/gtree"><img src="https://gh-card.dev/repos/ddddddO/gtree.svg" alt="ddddddO/gtree - GitHub"></a></p><p>パッケージの利用方法なども記事で公開されていて実装に困ることはありませんでした。</p><p>▼参考</p><ul><li><a href="https://zenn.dev/ddddddo/articles/ad97623a004496">Markdown形式の入力からtreeを出力するCLI</a></li><li><a href="https://zenn.dev/ddddddo/articles/8cd85c68763f2e">Goでtreeを表現する</a></li><li><a href="https://zenn.dev/ddddddo/articles/460d12e8c07763">Markdown形式の入力からファイル&#x2F;ディレクトリを生成するCLI&#x2F;Goパッケージ</a></li></ul><p>また、gtreeの作者である<a href="https://twitter.com/ddddddOpppppp">@ddddddO</a>さんにはstreeに<a href="https://github.com/orangekame3/stree/issues/9">issue</a>を起票いただいており、本記事公開前に致命的なバグを修正することができました。ありがとうございます。</p><p>gtreeでstreeの機能の核は難なく実装することができたため、着想から実装完了まで１日もかかりませんでした。</p><p>S3をtreeしてみたくなったらぜひstreeを利用してみてください。</p><p>本記事をお読みいただきありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/S3/">S3</category>
      
      <category domain="https://future-architect.github.io/tags/CLI/">CLI</category>
      
      
      <comments>https://future-architect.github.io/articles/20230926a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
