<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Tue, 28 Mar 2023 02:30:52 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>TerraCurl でProviderがサポートしていないリソースを作成する</title>
      <link>https://future-architect.github.io/articles/20230328a/</link>
      <guid>https://future-architect.github.io/articles/20230328a/</guid>
      <pubDate>Mon, 27 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230328a/top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;356&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230328a/top.png" alt="" width="600" height="356" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Terraformがv1.4のリリースおめでとうございます。<a href="/articles/20230327a/">Terraform連載2023</a> の2リソース目の記事です。</p><p>v1.4リリースとは関係ないですが、<a href="https://registry.terraform.io/providers/devops-rob/terracurl/latest/docs">TerraCurl</a>というツールが面白そうだったので触ってみました。TerraCurlは以下の2023.2.22 のHashiCorpさんのブログで紹介されています。</p><ul><li><a href="https://www.hashicorp.com/blog/writing-terraform-for-unsupported-resources">Writing Terraform for unsupported resources - HashiCorp Blog</a></li></ul><p>リポジトリは<a href="https://github.com/devops-rob/terraform-provider-terracurl">devops-rob&#x2F;terraform-provider-terracurl</a>です。</p><h2 id="TerraCurlの使いどころ"><a href="#TerraCurlの使いどころ" class="headerlink" title="TerraCurlの使いどころ"></a>TerraCurlの使いどころ</h2><p>AWS、Google Cloud、Azureなど、日進月歩で新しいサービス、新機能が追加されています。例えば以下は <a href="https://www.itmedia.co.jp/enterprise/articles/2103/08/news067.html">ITmediaさんのページ</a> から引用した、AWSの機能追加の推移ですがその勢いは加速しています。</p><img src="/images/20230328a/kz_wk220322_02_MASK.jpg" alt="kz_wk220322_02_MASK.jpg" width="590" height="333" loading="lazy"><p>クラウドベンダー、SaaSサービス側の機能追加に合わせて、Terraform Provider側の開発が進むので、新しい機能を利用しようとしても、まだ対応していない、といった場面がまれに発生します。Provider側へPull Requestを出しOSSコントリビュートして推進に関与するというのがあるべきアプローチの1つだと思いますが、業務スケジュール上、できるだけ急ぎで対応したいということが多いでしょう。</p><p>こういった場面で役立つのが今回紹介するTerraCurlです。</p><h2 id="local-exec"><a href="#local-exec" class="headerlink" title="local-exec"></a>local-exec</h2><p>従来、Providerが対応していないとか、そもそもProviderが存在しないリソースを管理したい時、頼りにしていたのは <a href="https://developer.hashicorp.com/terraform/language/resources/provisioners/local-exec#example-usage">local-exec</a> Provisioner でした。Provisionerというのは、Terraform側が用意した脱出ハッチのような仕組みで、任意のスクリプトをTerraformコマンド経由で呼び出せる機能です<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。<a href="https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax#provisioners-are-a-last-resort">ドキュメント</a>にも a Last Resort（最終手段）と書いてある奥の手です。</p><p>通常は <code>terraform apply</code>で呼ばれるスクリプトを定義できますが、 <code>when=destory</code> と合わせると <code>terraform destroy</code> に対応させることもできます。さらにがんばるなら <code>null_resource</code>の<code>triggers</code> で実行スクリプトなどのハッシュ値を管理しておくことで、実行スクリプトに更新をトリガーにすることもできます（もちろん、実行スクリプトは冪等に作る必要があります）。書き出してみると複雑に見えますが、大部分は <code>local-exec</code> で初期作成時に呼び出すスクリプトを作れば事足りることが多いため、こだわらず簡易的にリソースをTerraform管理下に置くときは、よく使われると思います。</p><figure class="highlight sh"><figcaption><span>local-execイメージ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;my_custom_resource&quot;</span> &#123;</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">  triggers = &#123;</span><br><span class="line">    my_custom_resource_id = <span class="string">&quot;<span class="variable">$&#123;sha256(file(&quot;my_custom_resource.sh&quot;))&#125;</span>&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  provisioner <span class="string">&quot;local-exec&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">command</span> = <span class="string">&quot;./my_custom_resource.sh create&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  provisioner <span class="string">&quot;local-exec&quot;</span> &#123;</span><br><span class="line">    when    = destroy</span><br><span class="line">    <span class="built_in">command</span> = <span class="string">&quot;./my_custom_resource.sh destroy&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>私の観測上、よく見るやり方としては、<code>local-exec</code> で一時的にしのぎ（AWSであれば<code>awscli</code>をラップしたシェルスクリプトを用意して）、Providerが新機能の追加されたタイミングで <code>local-exec</code> から Providerが提供する機能に置き換えていくというものです。GUIや個別のスクリプトを用意する方法と違い、 <code>terraform apply</code> で書く環境にリリースできるため、CI&#x2F;CD定義もシンプルに、オペミスも減らせるということでした。</p><p>今回紹介するTerraCurlも、上記で説明した脱出ハッチ的な <code>local-exec</code>の使い方と似たようなユースケースになります。ネイティブのProviderではサポートされていないけど、サービス側のAPIではサポートされている場合に利用します。Provider側ですでにリソース作成が提供されていればTerraCurlを使う必要はありません。</p><h2 id="TerraCurlでAPI呼び出し"><a href="#TerraCurlでAPI呼び出し" class="headerlink" title="TerraCurlでAPI呼び出し"></a>TerraCurlでAPI呼び出し</h2><p><a href="https://registry.terraform.io/providers/devops-rob/terracurl/latest/docs/resources/request">TerraCurlドキュメントのExcample</a> を元に、Qiita APIを用いてダミーの記事を作成しています。Qiita記事をTerraform管理する対象したいユースケースは皆無だと思います。TerraCurlを使うという1点のみが理由です。</p><p>利用しているトークンは<a href="https://qiita.com/settings/tokens/new">アクセストークンの発行</a>ページから取得します。<code>write_qiita</code> のスコープも必要です。</p><p>取得したQiitaトークンは環境変数にセットして参照できるようにしておきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> TF_VAR_qiita_token=xxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    terracurl = &#123;</span><br><span class="line">      <span class="built_in">source</span>  = <span class="string">&quot;devops-rob/terracurl&quot;</span></span><br><span class="line">      version = <span class="string">&quot;1.1.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">&quot;terracurl&quot;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">variable <span class="string">&quot;qiita_token&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">type</span>      = string</span><br><span class="line">  sensitive = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;terracurl_request&quot;</span> <span class="string">&quot;qiita_article&quot;</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;qiita-article&quot;</span></span><br><span class="line"></span><br><span class="line">  url          = <span class="string">&quot;https://qiita.com/api/v2/items&quot;</span></span><br><span class="line">  method       = <span class="string">&quot;POST&quot;</span></span><br><span class="line">  request_body = &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;&quot;title&quot;:&quot;TerraCurl投稿テスト2023.3.27&quot;, &quot;body&quot;:&quot;# Example\nTerraCurlやってみた&quot;, &quot;private&quot;:true, &quot;tags&quot;:[&#123;&quot;name&quot;:&quot;TerraCurl&quot;&#125;]&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">  headers = &#123;</span><br><span class="line">    Authorization = <span class="string">&quot;Bearer <span class="variable">$&#123;var.qiita_token&#125;</span>&quot;</span></span><br><span class="line">    Content-Type  = <span class="string">&quot;application/json&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  response_codes = [</span><br><span class="line">    201</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output <span class="string">&quot;qiita_article_response&quot;</span> &#123;</span><br><span class="line">  value = <span class="built_in">basename</span>(jsondecode(terracurl_request.qiita_article.response).url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行すると最後に output の内容が表示されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">$ terraform apply</span><br><span class="line">2023-03-27T10:59:30.450+0900 [INFO]  Terraform version: 1.3.3</span><br><span class="line">2023-03-27T10:59:30.522+0900 [INFO]  Go runtime version: go1.19.1</span><br><span class="line">2023-03-27T10:59:30.527+0900 [INFO]  CLI args: []string&#123;<span class="string">&quot;terraform&quot;</span>, <span class="string">&quot;apply&quot;</span>&#125;</span><br><span class="line">(中略)</span><br><span class="line"></span><br><span class="line">Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:</span><br><span class="line">  + create</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># terracurl_request.qiita_article will be created</span></span><br><span class="line">  + resource <span class="string">&quot;terracurl_request&quot;</span> <span class="string">&quot;qiita_article&quot;</span> &#123;</span><br><span class="line">      + destroy_retry_interval = 10</span><br><span class="line">      + headers                = &#123;</span><br><span class="line">          + <span class="string">&quot;Authorization&quot;</span> = (sensitive)</span><br><span class="line">          + <span class="string">&quot;Content-Type&quot;</span>  = <span class="string">&quot;application/json&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      + <span class="built_in">id</span>                     = (known after apply)</span><br><span class="line">      + method                 = <span class="string">&quot;POST&quot;</span></span><br><span class="line">      + name                   = <span class="string">&quot;qiita-article&quot;</span></span><br><span class="line">      + request_body           = jsonencode(</span><br><span class="line">            &#123;</span><br><span class="line">              + body    = &lt;&lt;-<span class="string">EOT</span></span><br><span class="line"><span class="string">                    # Example</span></span><br><span class="line"><span class="string">                    TerraCurlやってみた</span></span><br><span class="line"><span class="string">                EOT</span></span><br><span class="line">              + private = <span class="literal">true</span></span><br><span class="line">              + tags    = [</span><br><span class="line">                  + &#123;</span><br><span class="line">                      + name = <span class="string">&quot;TerraCurl&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">              + title   = <span class="string">&quot;TerraCurl投稿テスト2023.3.27&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">      + request_url_string     = (known after apply)</span><br><span class="line">      + response               = (known after apply)</span><br><span class="line">      + response_codes         = [</span><br><span class="line">          + <span class="string">&quot;201&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">      + retry_interval         = 10</span><br><span class="line">      + status_code            = (known after apply)</span><br><span class="line">      + url                    = <span class="string">&quot;https://qiita.com/api/v2/items&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 1 to add, 0 to change, 0 to destroy.</span><br><span class="line"></span><br><span class="line">Changes to Outputs:</span><br><span class="line">  + qiita_article_response = (known after apply)</span><br><span class="line"></span><br><span class="line">Do you want to perform these actions?</span><br><span class="line">  Terraform will perform the actions described above.</span><br><span class="line">  Only <span class="string">&#x27;yes&#x27;</span> will be accepted to approve.</span><br><span class="line"></span><br><span class="line">  Enter a value: <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">Apply complete! Resources: 1 added, 0 changed, 0 destroyed.</span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line"></span><br><span class="line">qiita_article_response = <span class="string">&quot;6410f22e585d0907005e&quot;</span></span><br></pre></td></tr></table></figure><p>限定公開で記事を作成したのでブラウザで確認します。URLのIDが出力された値と一致していることがわかります。</p><img src="/images/20230328a/response.png" alt="" width="1200" height="924" loading="lazy"><p>※URLまでキャプチャに載せていますが、テスト投稿した記事は削除済みです</p><h2 id="Destoryする時どうするの？"><a href="#Destoryする時どうするの？" class="headerlink" title="Destoryする時どうするの？"></a>Destoryする時どうするの？</h2><p>Qiita APIの記事投稿に関して、IDは公開後に分かります（APIで指定すれば固定できるかも知れませんが）。そのため、以下のような <code>output</code> で取得した値を、<code>destory_url</code> に指定できると良いのですが、これは <code>terraform apply</code> に決定する値ですので、循環参照となり指定できません。このあたりはどうするか一工夫が必要そうです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;terracurl_request&quot;</span> <span class="string">&quot;qiita_article&quot;</span> &#123;</span><br><span class="line">  <span class="comment"># 中略</span></span><br><span class="line"></span><br><span class="line">  destroy_url    = <span class="string">&quot;https://qiita.com/api/v2/items/<span class="variable">$&#123;output.qiita_article_response.value&#125;</span>&quot;</span> // ★これが使えたら良いが..</span><br><span class="line">  destroy_method = <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">  destroy_headers = &#123;</span><br><span class="line">      Authorization = <span class="string">&quot;Bearer <span class="variable">$&#123;var.qiita_token&#125;</span>&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="TerraCurl所感"><a href="#TerraCurl所感" class="headerlink" title="TerraCurl所感"></a>TerraCurl所感</h2><p>ドキュメントを見ると、相互TLS認証やリトライなど作り込みが良さそうな部分が見られ、フィットするのであれば非常に有用そうでした。</p><p>一方で、ことAWSに関しては、 <code>awscli</code> が対応していない部分を探すのが難しく、<code>awscli</code> がサポートしているなら若干の移植性は下がるものの、 <code>local-exec</code> 経由で<code>awscli</code> を利用するほうが保守性が高まりそうだなと思いました。一方で、プラットフォーム側が意図的にサポートしない機能（ブログではVault Providerはあえて、クラスタのunsealコマンドをサポートしていないとある）の場合は、有用だなと思いました。</p><p>また、前章のDestoryにも書きましたが作成時のレスポンスに含まれる値を保持したいときの取り扱いは面倒そうと思います。Createだけの限定された条件とか、Destory時のURLやパラメータが apply する前に分かるのであれば便利そうだという印象です。</p><p>もし、上記に一致するような条件で、従来 <code>local-exec</code> で実行していたけど、内部的には <code>curl</code> コマンドだけだった場合には、 <code>tf</code> ファイルで完結するので素晴らしいツールだと思います。スクリプトを別途用意しなくてよいのは開発、保守的にも嬉しいと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>TerraCurlを使ってみました。ツールの命名が素晴らしくcurlで済ませられるようなリソースに関してはシンデレラフィットしそうなProviderです。</p><p>作成時のレスポンスの値を、Destory時などに使いまわしたい場合などは少し取り回しが難しそうなので、取り扱いに注意して導入したいと思います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">他にも <code>file</code> や <code>remote-exec</code> のProvisionerがあります。過去にはChef、Habitat、Puppet、Salt Masterless のProvisionerがあったようですが、 Terraform v0.15.0で削除されたようです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/TerraCurl/">TerraCurl</category>
      
      
      <comments>https://future-architect.github.io/articles/20230328a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Terraform 1.4 Update:Private Service Connectを利用したbackend/gcsへのアクセス</title>
      <link>https://future-architect.github.io/articles/20230327b/</link>
      <guid>https://future-architect.github.io/articles/20230327b/</guid>
      <pubDate>Sun, 26 Mar 2023 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot; title=&quot;初めに&quot;&gt;&lt;/a&gt;初めに&lt;/h1&gt;&lt;p&gt;こんにちは！筋肉エンジニアのTIG渡邉です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>こんにちは！筋肉エンジニアのTIG渡邉です。<a href="/articles/20230327a/">Terraform連載2023</a> の1リソース目の記事です。</p><p>Terraform 1.4.0の<code>ENHANCEMENTS</code>で以下の機能が追加されました。</p><blockquote><p>backend&#x2F;gcs: Add storage_custom_endpoint argument, to allow communication with the backend via a Private Service Connect endpoint.</p></blockquote><p>内容はtfstateが保存されているGCSへのアクセスがインターネット経由ではなく、Private Service Connectエンドポイントを利用したプライベートネットワーク経由でbackendに指定したGCSへアクセスすることができる機能です。今回はこの機能を検証します。</p><p>以下のリソースは構築済みとします。</p><ul><li>Google Cloud Project</li><li>Network系リソース（VPC&#x2F;Subnet&#x2F;Cloud Nat&#x2F;Cloud Router&#x2F;Firewall）</li><li>GCE</li><li>GCS</li></ul><h1 id="Private-Service-Connectを利用しない構成"><a href="#Private-Service-Connectを利用しない構成" class="headerlink" title="Private Service Connectを利用しない構成"></a>Private Service Connectを利用しない構成</h1><p>Private Service Connectを利用しない構成はこちらです。</p><p>GCEにTerraformをインストールし、Terraform Serverとしています。Terraform Serverでterraform initを実行するとVPCに構築済みのCloud Nat&#x2F;インターネット経由でGCSへアクセスされます。</p><p>この構成は皆さんお使いのいつもの構成だと思います。</p><img src="/images/20230327b/architecture01.drawio.png" alt="" width="772" height="591" loading="lazy"><h1 id="Private-Service-Connectを利用した構成"><a href="#Private-Service-Connectを利用した構成" class="headerlink" title="Private Service Connectを利用した構成"></a>Private Service Connectを利用した構成</h1><p>Private Service Connectを利用した構成はこちらになります。</p><p>こちらもGCEにTerraformをインストールし、Terraform Serverとしています。Terraform Serverでterraform initを実行するとVPCに構築済みのCloud Nat&#x2F;インターネットを経由するのではなく、Private Service Connect Endpoint(10.0.3.0)を経由してGCSへアクセスされます。</p><p>今回はこの構成を検証します。</p><img src="/images/20230327b/architecture02.drawio.png" alt="architecture02.drawio.png" width="772" height="591" loading="lazy"><h2 id="Private-Service-Connectとは"><a href="#Private-Service-Connectとは" class="headerlink" title="Private Service Connectとは"></a>Private Service Connectとは</h2><p>Private Service Connectとは一言でいうと、Google Cloud API にプライベートネットワーク経由でアクセスするための機能になります。</p><p>詳しくはG-genの杉村さんの技術ブログがすごくわかりやすくまとまっているのでこちらを参照ください。</p><ul><li><a href="https://blog.g-gen.co.jp/entry/google-api-private-service-connect-explained">https://blog.g-gen.co.jp/entry/google-api-private-service-connect-explained</a></li></ul><h2 id="Private-Service-Connectの作成"><a href="#Private-Service-Connectの作成" class="headerlink" title="Private Service Connectの作成"></a>Private Service Connectの作成</h2><p>以下公式ドキュメントを参考にPrivate Service Connectを作成します。</p><p><a href="https://cloud.google.com/vpc/docs/configure-private-service-connect-apis?hl=ja#console_1">https://cloud.google.com/vpc/docs/configure-private-service-connect-apis?hl=ja#console_1</a></p><p>ネットワークサービス→Private Service Connectをクリックします。<br>Private Service Connectから「エンドポイントを接続」をクリックします。</p><img src="/images/20230327b/image.png" alt="" width="1200" height="856" loading="lazy"><ul><li>対象：すべてのGoogle API</li><li>エンドポイント名：sampleendpoint</li><li>ネットワーク：my-stg-environment01-vpc</li><li>sample-endpoint-ip (10.0.3.0)</li><li>リージョン：asia-northeast1</li><li>名前空間：自動割り当て済みのものを設定</li></ul><p>を設定し、「エンドポイントを追加」をクリックします。</p><img src="/images/20230327b/image_2.png" alt="" width="1200" height="847" loading="lazy"><p>するとPrivate Service Connectの接続エンドポイントが作成されます。</p><img src="/images/20230327b/image_3.png" alt="" width="1200" height="855" loading="lazy"><p>Service Directoryも作成されています。</p><img src="/images/20230327b/image_4.png" alt="" width="1200" height="851" loading="lazy"><p>限定公開DNSゾーンも作成されています。<br><img src="/images/20230327b/image_5.png" alt="" width="1200" height="852" loading="lazy"></p><p>ここまででPrivate Service Connectの設定は完了です。</p><p>Private Service Connectエンドポイントが正しく機能しているかを確認するために、GCEへSSHしてcurlコマンドを実行してエンドポイントへアクセスします。</p><p>エンドポイントが機能している場合は、HTTP 204 レスポンス コードが表示されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ curl -v 10.0.3.0/generate_204</span><br><span class="line">*   Trying 10.0.3.0:80...</span><br><span class="line">* TCP_NODELAY <span class="built_in">set</span></span><br><span class="line">* Connected to 10.0.3.0 (10.0.3.0) port 80 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET /generate_204 HTTP/1.1</span><br><span class="line">&gt; Host: 10.0.3.0</span><br><span class="line">&gt; User-Agent: curl/7.68.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">* Mark bundle as not supporting multiuse</span><br><span class="line">&lt; HTTP/1.1 204 No Content　★204のレスポンスを確認</span><br><span class="line">&lt; Content-Length: 0</span><br><span class="line">&lt; Cross-Origin-Resource-Policy: cross-origin</span><br><span class="line">&lt; Date: Sat, 25 Mar 2023 05:02:30 GMT</span><br><span class="line">&lt;</span><br><span class="line">* Connection <span class="comment">#0 to host 10.0.3.0 left intact</span></span><br></pre></td></tr></table></figure><h2 id="Terraform-の設定"><a href="#Terraform-の設定" class="headerlink" title="Terraform の設定"></a>Terraform の設定</h2><p>準備ができたのでTerraform 1.4.0の追加機能を検証していきます。<br>Terraform公式ドキュメント(1.4.0)のBackend&#x2F;gcsにstorage_custom_endpointが追加されていることが確認できます。</p><p><a href="https://developer.hashicorp.com/terraform/language/settings/backends/gcs">https://developer.hashicorp.com/terraform/language/settings/backends/gcs</a></p><blockquote><p>storage_custom_endpoint &#x2F; GOOGLE_BACKEND_STORAGE_CUSTOM_ENDPOINT &#x2F; GOOGLE_STORAGE_CUSTOM_ENDPOINT - (Optional) A URL containing three parts: the protocol, the DNS name pointing to a Private Service Connect endpoint, and the path for the Cloud Storage API (&#x2F;storage&#x2F;v1&#x2F;b, see here). You can either use a DNS name automatically made by the Service Directory or a custom DNS name made by you. For example, if you create an endpoint called xyz and want to use the automatically-created DNS name, you should set the field value as <a href="https://storage-xyz.p.googleapis.com/storage/v1/b">https://storage-xyz.p.googleapis.com/storage/v1/b</a>. For help creating a Private Service Connect endpoint using Terraform, see this guide.</p></blockquote><h2 id="Private-Service-Connect経由のGCSアクセス確認"><a href="#Private-Service-Connect経由のGCSアクセス確認" class="headerlink" title="Private Service Connect経由のGCSアクセス確認"></a>Private Service Connect経由のGCSアクセス確認</h2><h3 id="Terraform-Backendの設定"><a href="#Terraform-Backendの設定" class="headerlink" title="Terraform Backendの設定"></a>Terraform Backendの設定</h3><p>backend.tfにterraform 1.4で追加された<code>storage_custom_endpoint</code>を追加してみます。</p><p>こちらの設定を追加することで、tfstateが保存されているbackendのGCSへのアクセスをPrivate Service Connectのエンドポイント経由にすることができます。<br><code>https://storage-xyz.p.googleapis.com/storage/v1/b</code>をベースに値の置き換えをします。</p><ul><li>xyz→sampleendpoint（Private Service Connectのエンドポイント名）</li></ul><figure class="highlight plaintext"><figcaption><span>backend.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  backend &quot;gcs&quot; &#123;</span><br><span class="line">    bucket                  = &quot;xxxxxxxxxxxxxxxxx&quot;</span><br><span class="line">    prefix                  = &quot;terraform/state&quot;</span><br><span class="line">    storage_custom_endpoint = &quot;https://storage-sampleendpoint.p.googleapis.com/storage/v1/b&quot; ★追加</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tcpdumpを利用したPrivate-Service-Connect経由のGCSアクセス確認"><a href="#tcpdumpを利用したPrivate-Service-Connect経由のGCSアクセス確認" class="headerlink" title="tcpdumpを利用したPrivate Service Connect経由のGCSアクセス確認"></a>tcpdumpを利用したPrivate Service Connect経由のGCSアクセス確認</h3><p>tcpdumpを利用してPrivate Service Connectのエンドポイント(10.0.3.0)を経由してbackendのgcsへアクセスできていることを確認します。</p><p>コンソールを2つ開きます。</p><ul><li>terraform initを実行するコンソール</li><li>tcpdumpを実行するコンソール</li></ul><p>先にtcpdumpを実行するコンソールからtcpdumpコマンド<code>sudo tcpdump dst 10.0.3.0</code>を実行し、Private Service Connectのエンドポイント(10.0.3.0)を経由するパケットをキャプチャする準備をします。</p><p>tcpdumpコマンドを実行後に、terraform initを実行するコンソールからterraform initを実行するとPrivate Service Connectのエンドポイント(10.0.3.0)を経由するパケットがキャプチャされていることが確認できました。Private Service Connectのエンドポイント(10.0.3.0)を経由して無事GCSにアクセスできたようです。</p><figure class="highlight bash"><figcaption><span>terraform init実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ <span class="built_in">date</span> &amp;&amp; terraform init</span><br><span class="line">Sat Mar 25 02:13:50 UTC 2023</span><br><span class="line"></span><br><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">- Reusing previous version of hashicorp/google from the dependency lock file</span><br><span class="line">- Using previously-installed hashicorp/google v4.57.0</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br><span class="line"></span><br><span class="line">You may now begin working with Terraform. Try running <span class="string">&quot;terraform plan&quot;</span> to see</span><br><span class="line">any changes that are required <span class="keyword">for</span> your infrastructure. All Terraform commands</span><br><span class="line">should now work.</span><br><span class="line"></span><br><span class="line">If you ever <span class="built_in">set</span> or change modules or backend configuration <span class="keyword">for</span> Terraform,</span><br><span class="line">rerun this <span class="built_in">command</span> to reinitialize your working directory. If you forget, other</span><br><span class="line">commands will detect it and remind you to <span class="keyword">do</span> so <span class="keyword">if</span> necessary.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>tcpdumpの実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~$ <span class="built_in">date</span> &amp;&amp; sudo tcpdump dst 10.0.3.0</span><br><span class="line">Sat Mar 25 02:13:49 UTC 2023</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on ens4, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">02:13:50.920469 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [S], <span class="built_in">seq</span> 665228907, win 65320, options [mss 1420,sackOK,TS val 3343093648 ecr 0,nop,wscale 7], length 0</span><br><span class="line">02:13:50.921158 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 692049395, win 511, options [nop,nop,TS val 3343093649 ecr 2560562916], length 0</span><br><span class="line">02:13:50.921387 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 0:305, ack 1, win 511, options [nop,nop,TS val 3343093649 ecr 2560562916], length 305</span><br><span class="line">02:13:50.959772 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 7041, win 479, options [nop,nop,TS val 3343093687 ecr 2560562955], length 0</span><br><span class="line">02:13:50.959781 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 9820, win 467, options [nop,nop,TS val 3343093687 ecr 2560562955], length 0</span><br><span class="line">02:13:50.975543 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 305:369, ack 9820, win 501, options [nop,nop,TS val 3343093703 ecr 2560562955], length 64</span><br><span class="line">02:13:50.975657 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 369:455, ack 9820, win 501, options [nop,nop,TS val 3343093703 ecr 2560562955], length 86</span><br><span class="line">02:13:50.975798 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 9913, win 501, options [nop,nop,TS val 3343093703 ecr 2560562971], length 0</span><br><span class="line">02:13:50.975857 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 455:1659, ack 9913, win 501, options [nop,nop,TS val 3343093703 ecr 2560562971], length 1204</span><br><span class="line">02:13:50.976394 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 1659:1690, ack 9913, win 501, options [nop,nop,TS val 3343093704 ecr 2560562971], length 31</span><br><span class="line">02:13:50.993635 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 11081, win 501, options [nop,nop,TS val 3343093721 ecr 2560562989], length 0</span><br><span class="line">02:13:50.993983 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 11151, win 501, options [nop,nop,TS val 3343093722 ecr 2560562989], length 0</span><br><span class="line">02:13:50.994012 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 1690:1729, ack 11151, win 501, options [nop,nop,TS val 3343093722 ecr 2560562989], length 39</span><br><span class="line">02:13:51.194072 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 1729:1854, ack 11151, win 501, options [nop,nop,TS val 3343093922 ecr 2560562994], length 125</span><br><span class="line">02:13:51.213234 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 11863, win 501, options [nop,nop,TS val 3343093941 ecr 2560563208], length 0</span><br><span class="line">02:13:51.213423 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 1854:1893, ack 11863, win 501, options [nop,nop,TS val 3343093941 ecr 2560563208], length 39</span><br><span class="line">02:13:51.213662 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 1893:2137, ack 11863, win 501, options [nop,nop,TS val 3343093941 ecr 2560563208], length 244</span><br><span class="line">02:13:51.237109 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 12963, win 501, options [nop,nop,TS val 3343093965 ecr 2560563232], length 0</span><br><span class="line">02:13:51.237265 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 2137:2176, ack 12963, win 501, options [nop,nop,TS val 3343093965 ecr 2560563232], length 39</span><br><span class="line">02:13:51.237810 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 2176:2256, ack 12963, win 501, options [nop,nop,TS val 3343093965 ecr 2560563232], length 80</span><br><span class="line">02:13:51.257360 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 13326, win 501, options [nop,nop,TS val 3343093985 ecr 2560563253], length 0</span><br><span class="line">02:13:51.257569 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 13396, win 501, options [nop,nop,TS val 3343093985 ecr 2560563253], length 0</span><br><span class="line">02:13:51.257665 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 2256:2295, ack 13396, win 501, options [nop,nop,TS val 3343093985 ecr 2560563253], length 39</span><br><span class="line">02:13:51.257755 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 2295:2450, ack 13396, win 501, options [nop,nop,TS val 3343093985 ecr 2560563253], length 155</span><br><span class="line">02:13:51.273998 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 14405, win 501, options [nop,nop,TS val 3343094002 ecr 2560563269], length 0</span><br><span class="line">02:13:51.274108 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 14475, win 501, options [nop,nop,TS val 3343094002 ecr 2560563269], length 0</span><br><span class="line">02:13:51.274127 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 2450:2489, ack 14475, win 501, options [nop,nop,TS val 3343094002 ecr 2560563269], length 39</span><br><span class="line">02:13:51.707967 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [F.], <span class="built_in">seq</span> 2489, ack 14475, win 501, options [nop,nop,TS val 3343094436 ecr 2560563274], length 0</span><br><span class="line">02:13:51.708100 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 14476, win 501, options [nop,nop,TS val 3343094436 ecr 2560563703], length 0</span><br></pre></td></tr></table></figure><p>また、nslookupコマンドでbackend.tfのstorage_custom_endpointに設定している<code>storage-sampleendpoint.p.googleapis.com</code>を指定して実行すると10.0.3.0で名前解決されることも確認できました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ nslookup storage-sampleendpoint.p.googleapis.com</span><br><span class="line">Server:         127.0.0.53</span><br><span class="line">Address:        127.0.0.53<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:   storage-sampleendpoint.p.googleapis.com</span><br><span class="line">Address: 10.0.3.0</span><br></pre></td></tr></table></figure><h1 id="余談"><a href="#余談" class="headerlink" title="余談"></a>余談</h1><p>余談ですが、<code>tcpdump -n -vv dst port 443</code>コマンドを実行してterraform initを実施し、GCEから443ポートへアクセスしたパケットをキャプチャしてみました。</p><figure class="highlight bash"><figcaption><span>tcpdump -n -vv dst port 443コマンド実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ sudo tcpdump -n -vv dst port 443</span><br><span class="line">tcpdump: listening on ens4, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">05:14:59.618319 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11848, offset 0, flags [DF], proto TCP (6), length 60)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [S], <span class="built_in">cksum</span> 0x1730 (incorrect -&gt; 0xad7d), <span class="built_in">seq</span> 1890652633, win 65320, options [mss 1420,sackOK,TS val 3353962346 ecr 0,nop,wscale 7], length 0</span><br><span class="line">05:14:59.618778 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11849, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x3d3b), <span class="built_in">seq</span> 1890652634, ack 3216389491, win 511, options [nop,nop,TS val 3353962346 ecr 1133339465], length 0</span><br><span class="line">05:14:59.619011 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11850, offset 0, flags [DF], proto TCP (6), length 357)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x1859 (incorrect -&gt; 0x80b7), <span class="built_in">seq</span> 0:305, ack 1, win 511, options [nop,nop,TS val 3353962347 ecr 1133339465], length 305</span><br><span class="line">05:14:59.655194 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11851, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x2063), <span class="built_in">seq</span> 305, ack 7041, win 477, options [nop,nop,TS val 3353962383 ecr 1133339501], length 0</span><br><span class="line">05:14:59.655208 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11852, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x1596), <span class="built_in">seq</span> 305, ack 9822, win 461, options [nop,nop,TS val 3353962383 ecr 1133339501], length 0</span><br><span class="line">05:14:59.671136 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11853, offset 0, flags [DF], proto TCP (6), length 116)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x1768 (incorrect -&gt; 0x3471), <span class="built_in">seq</span> 305:369, ack 9822, win 501, options [nop,nop,TS val 3353962399 ecr 1133339501], length 64</span><br><span class="line">05:14:59.671287 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11854, offset 0, flags [DF], proto TCP (6), length 138)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x177e (incorrect -&gt; 0x3286), <span class="built_in">seq</span> 369:455, ack 9822, win 501, options [nop,nop,TS val 3353962399 ecr 1133339501], length 86</span><br><span class="line">05:14:59.671463 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11855, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x145b), <span class="built_in">seq</span> 455, ack 9915, win 501, options [nop,nop,TS val 3353962399 ecr 1133339517], length 0</span><br><span class="line">05:14:59.671615 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11856, offset 0, flags [DF], proto TCP (6), length 1246)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x1bd2 (incorrect -&gt; 0xb465), <span class="built_in">seq</span> 455:1649, ack 9915, win 501, options [nop,nop,TS val 3353962399 ecr 1133339517], length 1194</span><br><span class="line">05:14:59.671989 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11857, offset 0, flags [DF], proto TCP (6), length 83)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x1747 (incorrect -&gt; 0xfb7a), <span class="built_in">seq</span> 1649:1680, ack 9915, win 501, options [nop,nop,TS val 3353962400 ecr 1133339517], length 31</span><br><span class="line">05:14:59.695902 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11858, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x0ab2), <span class="built_in">seq</span> 1680, ack 11114, win 501, options [nop,nop,TS val 3353962423 ecr 1133339542], length 0</span><br><span class="line">05:14:59.696324 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11859, offset 0, flags [DF], proto TCP (6), length 91)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x174f (incorrect -&gt; 0x000a), <span class="built_in">seq</span> 1680:1719, ack 11153, win 501, options [nop,nop,TS val 3353962424 ecr 1133339542], length 39</span><br><span class="line">05:14:59.896847 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11860, offset 0, flags [DF], proto TCP (6), length 177)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x17a5 (incorrect -&gt; 0x7c61), <span class="built_in">seq</span> 1719:1844, ack 11153, win 501, options [nop,nop,TS val 3353962624 ecr 1133339548], length 125</span><br><span class="line">05:14:59.919871 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11861, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x0577), <span class="built_in">seq</span> 1844, ack 11841, win 501, options [nop,nop,TS val 3353962647 ecr 1133339766], length 0</span><br><span class="line">05:14:59.920025 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11862, offset 0, flags [DF], proto TCP (6), length 91)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x174f (incorrect -&gt; 0xf0a1), <span class="built_in">seq</span> 1844:1883, ack 11841, win 501, options [nop,nop,TS val 3353962648 ecr 1133339766], length 39</span><br><span class="line">05:14:59.920303 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11863, offset 0, flags [DF], proto TCP (6), length 296)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x181c (incorrect -&gt; 0x465c), <span class="built_in">seq</span> 1883:2127, ack 11841, win 501, options [nop,nop,TS val 3353962648 ecr 1133339766], length 244</span><br><span class="line">05:14:59.935230 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11864, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x001d), <span class="built_in">seq</span> 2127, ack 12897, win 501, options [nop,nop,TS val 3353962663 ecr 1133339781], length 0</span><br><span class="line">05:14:59.935406 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11865, offset 0, flags [DF], proto TCP (6), length 91)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x174f (incorrect -&gt; 0x01e6), <span class="built_in">seq</span> 2127:2166, ack 12936, win 501, options [nop,nop,TS val 3353962663 ecr 1133339781], length 39</span><br><span class="line">05:14:59.935919 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11866, offset 0, flags [DF], proto TCP (6), length 133)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x1779 (incorrect -&gt; 0x2c27), <span class="built_in">seq</span> 2166:2247, ack 12936, win 501, options [nop,nop,TS val 3353962663 ecr 1133339781], length 81</span><br><span class="line">05:14:59.959617 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11867, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0xfde0), <span class="built_in">seq</span> 2247, ack 13300, win 501, options [nop,nop,TS val 3353962687 ecr 1133339806], length 0</span><br><span class="line">05:14:59.959735 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11868, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0xfd9a), <span class="built_in">seq</span> 2247, ack 13370, win 501, options [nop,nop,TS val 3353962687 ecr 1133339806], length 0</span><br><span class="line">05:14:59.959759 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11869, offset 0, flags [DF], proto TCP (6), length 91)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x174f (incorrect -&gt; 0x5782), <span class="built_in">seq</span> 2247:2286, ack 13370, win 501, options [nop,nop,TS val 3353962687 ecr 1133339806], length 39</span><br><span class="line">05:14:59.959992 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11870, offset 0, flags [DF], proto TCP (6), length 208)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x17c4 (incorrect -&gt; 0x4db0), <span class="built_in">seq</span> 2286:2442, ack 13370, win 501, options [nop,nop,TS val 3353962688 ecr 1133339806], length 156</span><br><span class="line">05:14:59.975804 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11871, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0xf8ac), <span class="built_in">seq</span> 2442, ack 14405, win 501, options [nop,nop,TS val 3353962703 ecr 1133339822], length 0</span><br><span class="line">05:14:59.975974 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11872, offset 0, flags [DF], proto TCP (6), length 91)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x174f (incorrect -&gt; 0x1781), <span class="built_in">seq</span> 2442:2481, ack 14444, win 501, options [nop,nop,TS val 3353962704 ecr 1133339822], length 39</span><br><span class="line">05:14:59.990384 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49768, offset 0, flags [DF], proto TCP (6), length 60)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [S], <span class="built_in">cksum</span> 0xe6c8 (incorrect -&gt; 0x3154), <span class="built_in">seq</span> 804049769, win 65320, options [mss 1420,sackOK,TS val 118988064 ecr 0,nop,wscale 7], length 0</span><br><span class="line">05:14:59.992174 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49769, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x36cd), <span class="built_in">seq</span> 804049770, ack 2881392399, win 511, options [nop,nop,TS val 118988066 ecr 3287754621], length 0</span><br><span class="line">05:14:59.992465 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49770, offset 0, flags [DF], proto TCP (6), length 339)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [P.], <span class="built_in">cksum</span> 0xe7df (incorrect -&gt; 0xcbaf), <span class="built_in">seq</span> 0:287, ack 1, win 511, options [nop,nop,TS val 118988066 ecr 3287754621], length 287</span><br><span class="line">05:14:59.994083 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49771, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x1fc4), <span class="built_in">seq</span> 287, ack 5633, win 485, options [nop,nop,TS val 118988068 ecr 3287754623], length 0</span><br><span class="line">05:14:59.995701 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49772, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x1dd9), <span class="built_in">seq</span> 287, ack 6105, win 501, options [nop,nop,TS val 118988069 ecr 3287754625], length 0</span><br><span class="line">05:14:59.996879 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49773, offset 0, flags [DF], proto TCP (6), length 116)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [P.], <span class="built_in">cksum</span> 0xe700 (incorrect -&gt; 0x0739), <span class="built_in">seq</span> 287:351, ack 6105, win 501, options [nop,nop,TS val 118988070 ecr 3287754625], length 64</span><br><span class="line">05:14:59.996970 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49774, offset 0, flags [DF], proto TCP (6), length 138)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [P.], <span class="built_in">cksum</span> 0xe716 (incorrect -&gt; 0x6424), <span class="built_in">seq</span> 351:437, ack 6105, win 501, options [nop,nop,TS val 118988071 ecr 3287754625], length 86</span><br><span class="line">05:14:59.997049 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49775, offset 0, flags [DF], proto TCP (6), length 184)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [P.], <span class="built_in">cksum</span> 0xe744 (incorrect -&gt; 0xeaa5), <span class="built_in">seq</span> 437:569, ack 6105, win 501, options [nop,nop,TS val 118988071 ecr 3287754625], length 132</span><br><span class="line">05:14:59.998619 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49776, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x1be0), <span class="built_in">seq</span> 569, ack 6322, win 501, options [nop,nop,TS val 118988072 ecr 3287754628], length 0</span><br><span class="line">05:14:59.998648 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49777, offset 0, flags [DF], proto TCP (6), length 83)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [P.], <span class="built_in">cksum</span> 0xe6df (incorrect -&gt; 0x4699), <span class="built_in">seq</span> 569:600, ack 6322, win 501, options [nop,nop,TS val 118988072 ecr 3287754628], length 31</span><br><span class="line">05:15:00.001052 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27837, offset 0, flags [DF], proto TCP (6), length 60)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [S], <span class="built_in">cksum</span> 0xe6d1 (incorrect -&gt; 0xe0d7), <span class="built_in">seq</span> 4293780694, win 65320, options [mss 1420,sackOK,TS val 2768777777 ecr 0,nop,wscale 7], length 0</span><br><span class="line">05:15:00.002878 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27838, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x5b53), <span class="built_in">seq</span> 4293780695, ack 1618472241, win 511, options [nop,nop,TS val 2768777778 ecr 4104875756], length 0</span><br><span class="line">05:15:00.003079 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27839, offset 0, flags [DF], proto TCP (6), length 339)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe7e8 (incorrect -&gt; 0xa7d9), <span class="built_in">seq</span> 0:287, ack 1, win 511, options [nop,nop,TS val 2768777779 ecr 4104875756], length 287</span><br><span class="line">05:15:00.015189 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27840, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x4435), <span class="built_in">seq</span> 287, ack 5633, win 485, options [nop,nop,TS val 2768777791 ecr 4104875768], length 0</span><br><span class="line">05:15:00.019172 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27841, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x4245), <span class="built_in">seq</span> 287, ack 6105, win 501, options [nop,nop,TS val 2768777795 ecr 4104875772], length 0</span><br><span class="line">05:15:00.020132 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27842, offset 0, flags [DF], proto TCP (6), length 116)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe709 (incorrect -&gt; 0x4fa9), <span class="built_in">seq</span> 287:351, ack 6105, win 501, options [nop,nop,TS val 2768777796 ecr 4104875772], length 64</span><br><span class="line">05:15:00.020226 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27843, offset 0, flags [DF], proto TCP (6), length 138)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe71f (incorrect -&gt; 0xbc63), <span class="built_in">seq</span> 351:437, ack 6105, win 501, options [nop,nop,TS val 2768777796 ecr 4104875772], length 86</span><br><span class="line">05:15:00.020313 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27844, offset 0, flags [DF], proto TCP (6), length 171)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe740 (incorrect -&gt; 0x1e38), <span class="built_in">seq</span> 437:556, ack 6105, win 501, options [nop,nop,TS val 2768777796 ecr 4104875772], length 119</span><br><span class="line">05:15:00.025659 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27845, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x4052), <span class="built_in">seq</span> 556, ack 6322, win 501, options [nop,nop,TS val 2768777801 ecr 4104875779], length 0</span><br><span class="line">05:15:00.025711 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27846, offset 0, flags [DF], proto TCP (6), length 83)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe6e8 (incorrect -&gt; 0xd5e8), <span class="built_in">seq</span> 556:587, ack 6322, win 501, options [nop,nop,TS val 2768777801 ecr 4104875779], length 31</span><br><span class="line">05:15:00.043638 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49778, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x1665), <span class="built_in">seq</span> 600, ack 7648, win 501, options [nop,nop,TS val 118988117 ecr 3287754629], length 0</span><br><span class="line">05:15:00.233601 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27847, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x2bd4), <span class="built_in">seq</span> 587, ack 11121, win 501, options [nop,nop,TS val 2768778009 ecr 4104875987], length 0</span><br><span class="line">05:15:00.234626 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27848, offset 0, flags [DF], proto TCP (6), length 87)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe6ec (incorrect -&gt; 0x6bac), <span class="built_in">seq</span> 587:622, ack 11152, win 501, options [nop,nop,TS val 2768778010 ecr 4104875987], length 35</span><br><span class="line">05:15:00.434281 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27849, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [F.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x2ac5), <span class="built_in">seq</span> 622, ack 11152, win 501, options [nop,nop,TS val 2768778210 ecr 4104875990], length 0</span><br><span class="line">05:15:00.434304 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49779, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [F.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x14dd), <span class="built_in">seq</span> 600, ack 7648, win 501, options [nop,nop,TS val 118988508 ecr 3287754629], length 0</span><br><span class="line">05:15:00.434314 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11873, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [F.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0xf68d), <span class="built_in">seq</span> 2481, ack 14444, win 501, options [nop,nop,TS val 3353963162 ecr 1133339827], length 0</span><br><span class="line">05:15:00.434467 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11874, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0xf4c6), <span class="built_in">seq</span> 2482, ack 14445, win 501, options [nop,nop,TS val 3353963162 ecr 1133340281], length 0</span><br><span class="line">05:15:00.436252 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27850, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x29fb), <span class="built_in">seq</span> 623, ack 11153, win 501, options [nop,nop,TS val 2768778212 ecr 4104876189], length 0</span><br><span class="line">05:15:00.436271 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49780, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x1325), <span class="built_in">seq</span> 601, ack 7649, win 501, options [nop,nop,TS val 118988510 ecr 3287755066], length 0</span><br></pre></td></tr></table></figure><p>以下はGCE(10.0.0.2)からPrivate Service Connectエンドポイント(10.0.3.0)へのアクセスしてGCSへアクセスしているパケットのキャプチャだと思います。</p><blockquote><p>05:14:59.618319 IP (tos 0x0, ttl 64, id 11848, offset 0, flags [DF], proto TCP (6), length 60)<br>    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [S], cksum 0x1730 (incorrect -&gt; 0xad7d), seq 1890652633, win 65320, options [mss 1420,sackOK,TS val 3353962346 ecr 0,nop,wscale 7], length 0</p></blockquote><p>もう一つterraform init時にGCE(10.0.0.2)から18.65.202.87へアクセスしているパケットをキャプチャすることができました。</p><blockquote><p>05:15:00.436271 IP (tos 0x0, ttl 64, id 49780, offset 0, flags [DF], proto TCP (6), length 52)<br>    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], cksum 0xe6c0 (incorrect -&gt; 0x1325), seq 601, ack 7649, win 501, options [nop,nop,TS val 118988510 ecr 3287755066], length 0</p></blockquote><p>こちらについてもう少し調べてみます。<br>tcpdump -n -vv dst port 53コマンドを実行してterraform initを実施し、GCEから53ポートへアクセスしたパケットをキャプチャしてみました。</p><figure class="highlight bash"><figcaption><span>tcpdump -n -vv dst port 53コマンド実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ sudo tcpdump -n -vv dst port 53</span><br><span class="line">tcpdump: listening on ens4, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">05:28:31.201384 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 52411, offset 0, flags [DF], proto UDP (17), length 96)</span><br><span class="line">    10.0.0.2.59890 &gt; 169.254.169.254.53: [bad udp <span class="built_in">cksum</span> 0x5e5c -&gt; 0xa496!] 31699+ [1au] AAAA? storage-sampleendpoint.p.googleapis.com. ar: . OPT UDPsize=512 (68)</span><br><span class="line">05:28:31.201482 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 37003, offset 0, flags [DF], proto UDP (17), length 96)</span><br><span class="line">    10.0.0.2.52697 &gt; 169.254.169.254.53: [bad udp <span class="built_in">cksum</span> 0x5e5c -&gt; 0x3727!] 8284+ [1au] A? storage-sampleendpoint.p.googleapis.com. ar: . OPT UDPsize=512 (68)</span><br><span class="line">05:28:31.596564 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 831, offset 0, flags [DF], proto UDP (17), length 78)</span><br><span class="line">    10.0.0.2.43466 &gt; 169.254.169.254.53: [bad udp <span class="built_in">cksum</span> 0x5e4a -&gt; 0x143a!] 35627+ [1au] A? registry.terraform.io. ar: . OPT UDPsize=512 (50)</span><br><span class="line">05:28:31.596653 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27444, offset 0, flags [DF], proto UDP (17), length 78)</span><br><span class="line">    10.0.0.2.58257 &gt; 169.254.169.254.53: [bad udp <span class="built_in">cksum</span> 0x5e4a -&gt; 0x126e!] 14384+ [1au] AAAA? registry.terraform.io. ar: . OPT UDPsize=512 (50)</span><br></pre></td></tr></table></figure><p>すると、<code>storage-sampleendpoint.p.googleapis.com</code>のほかに<code>registry.terraform.io</code>を名前解決していることがわかりました。</p><blockquote><p>05:28:31.596564 IP (tos 0x0, ttl 64, id 831, offset 0, flags [DF], proto UDP (17), length 78)<br>    10.0.0.2.43466 &gt; 169.254.169.254.53: [bad udp cksum 0x5e4a -&gt; 0x143a!] 35627+ [1au] A? registry.terraform.io. ar: . OPT UDPsize&#x3D;512 (50)<br>05:28:31.596653 IP (tos 0x0, ttl 64, id 27444, offset 0, flags [DF], proto UDP (17), length 78)<br>    10.0.0.2.58257 &gt; 169.254.169.254.53: [bad udp cksum 0x5e4a -&gt; 0x126e!] 14384+ [1au] AAAA? registry.terraform.io. ar: . OPT UDPsize&#x3D;512 (50</p></blockquote><p>今度はdigコマンドを利用して<code>registry.terraform.io</code>を名前解決してみます。<br>すると先ほどの<code>tcpdump -n -vv dst port 443</code>コマンドを実行して出力されたIPアドレス<code>18.65.202.87</code>が存在することがわかりました。<br>registry.terraform.io(18.65.202.87)への通信はCloud Nat&#x2F;インターネット経由でアクセスしています。</p><figure class="highlight bash"><figcaption><span>dig registry.terraform.ioコマンド実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ dig registry.terraform.io</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; registry.terraform.io</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 7463</span></span><br><span class="line"><span class="string">;; flags: qr rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 65494</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;registry.terraform.io.         IN      A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">registry.terraform.io.  80      IN      CNAME   d3rdzqodp6w8cx.cloudfront.net.</span></span><br><span class="line"><span class="string">d3rdzqodp6w8cx.cloudfront.net. 60 IN    A       18.65.202.96</span></span><br><span class="line"><span class="string">d3rdzqodp6w8cx.cloudfront.net. 60 IN    A       18.65.202.27</span></span><br><span class="line"><span class="string">d3rdzqodp6w8cx.cloudfront.net. 60 IN    A       18.65.202.107</span></span><br><span class="line"><span class="string">d3rdzqodp6w8cx.cloudfront.net. 60 IN    A       18.65.202.87　★該当IPアドレス</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 52 msec</span></span><br><span class="line"><span class="string">;; SERVER: 127.0.0.53#53(127.0.0.53)</span></span><br><span class="line"><span class="string">;; WHEN: Sat Mar 25 05:32:10 UTC 2023</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 157</span></span><br></pre></td></tr></table></figure><p>このことからTerraform 1.4.0で追加されたPrivate Service Connectを利用したbackend&#x2F;gcsへのアクセスの機能を利用してもbackendのGCSへの通信のみプライベート接続され、Terraformのgoogle providerなどを利用するためにregistry.terraform.ioへのインターネットアクセスは避けられず完全プライベートではterraformは利用できないことが分かりました（当たり前か…）</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回はTerraform 1.4で追加されたPrivate Service Connectエンドポイント経由でbackendに指定したGCSへアクセスできることができる機能を検証しました。</p><p>Private Service Connect自体も実務で使用したことがなかったので、勉強になりました。Private Service Connectを利用しプライベートネットワーク経由で backendのGCSへアクセスすることは確認できましたが、結局Terraformを利用するためには、インターネットへ接続できることが条件なので、Private Service Connectの構築・運用コストを考えるとよほどのセキュリティ要件がなければ通常のインターネット経由でbackendのGCSへアクセスする構成が無難かと思いました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform1-4/">Terraform1.4</category>
      
      
      <comments>https://future-architect.github.io/articles/20230327b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Terraform連載2023を開始します</title>
      <link>https://future-architect.github.io/articles/20230327a/</link>
      <guid>https://future-architect.github.io/articles/20230327a/</guid>
      <pubDate>Sun, 26 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230327a/terraform.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;418&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230327a/terraform.png" alt="" width="800" height="418" loading="lazy"><p>こんにちは。TIGの伊藤太斉です。</p><p>Terraform連載のインデックス記事です。</p><h2 id="最近の社内-Terraform-事情について"><a href="#最近の社内-Terraform-事情について" class="headerlink" title="最近の社内 Terraform 事情について"></a>最近の社内 Terraform 事情について</h2><p>最近では当社も前提としてクラウドを利用する案件が増えてきました。その際に利用するツールとしては</p><ul><li>Terraform</li><li>CloudFormation</li><li>Serverless Framework</li></ul><p>と、マネージドのも含めて広く利用しているように感じております。ことにTerraformについては対象とするサービスもAWS、Google Cloudだけでなく、Auth0などのSaaSに対して管理対象としたり、管理を検討しているプロジェクトなどもあります。</p><h2 id="テーマについて"><a href="#テーマについて" class="headerlink" title="テーマについて"></a>テーマについて</h2><p>きっかけは、Terraformがv1.4になったことから始まりました。<br><a href="https://github.com/hashicorp/terraform/releases/tag/v1.4.0">https://github.com/hashicorp/terraform/releases/tag/v1.4.0</a></p><p>元々、社内でパブリッククラウドを利用する際に、多くの案件でIaC化されていたり、Terraformも利用されることが多いことから、連載企画やろう、という声はありました。そして、先日Terraformのv1.4がリリースされたことから、この機会に連載を募集、開始することになりました。</p><p>今回、連載を募集するに当たり、以下の内容で募集しました。</p><ul><li>v1.4のリリース内容</li><li>これまでTerraformを触ってきたノウハウ、Tips</li><li>エコシステムについての調査、学習</li></ul><p>など、Terraformを含む内容はOKとしています。</p><h2 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h2><p>スケジュールは以下の形で進んでいきます。TBDになっているところも随時埋まっていきますので、お楽しみにしてください。<br>順番が前後したり、内容が変更になる可能性がございますが、ご了承ください。</p><div class="scroll"><table><thead><tr><th>日付</th><th>投稿者</th><th>テーマ</th></tr></thead><tbody><tr><td>3&#x2F;27(月)</td><td>伊藤太斉</td><td>本インデックス記事</td></tr><tr><td></td><td>渡邉光</td><td><a href="/articles/20230327b/">Terraform 1.4 Update:Private Service Connectを利用したbackend&#x2F;gcsへのアクセス</a></td></tr><tr><td>3&#x2F;28(火)</td><td>真野隼記</td><td><a href="/articles/20230328a/">TerraCurl でProviderがサポートしていないリソースを作成する</a></td></tr><tr><td>3&#x2F;29(水)</td><td>宮永崇史</td><td>tftarget:Terraformターゲットを選択的に実行するためのGo製CLIツール</td></tr><tr><td>3&#x2F;30(木)</td><td>渡邉光</td><td>JenkinsでのTerraform CI&#x2F;CD</td></tr><tr><td>3&#x2F;31(金)</td><td>岸下優介</td><td>Terraformでの機密情報の取り扱い on Google Cloud</td></tr><tr><td>4&#x2F;3(月)</td><td>川口翔大</td><td>Terraform x GitOps</td></tr><tr><td>4&#x2F;4(火)</td><td>棚井龍之介</td><td>TBD</td></tr><tr><td>4&#x2F;5(水)</td><td>前原応光</td><td>TBD</td></tr><tr><td>4&#x2F;6(木)</td><td>大岩潤矢</td><td>TBD</td></tr><tr><td>4&#x2F;7(金)</td><td>伊藤太斉</td><td>Terraform 1.4 リリース周り</td></tr></tbody></table></div><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>Terraform連載は今回が初の試みとなりますが、多くの社員が参加表明してくれました。<br>どんな内容が出てくるか非常に楽しみです！</p><p>他の連載やこれまでのTerraform記事もぜひご覧ください。</p><ul><li><a href="/articles/20230314a/">2023年 フューチャー技術ブログ連載の企画スケジュール</a></li><li><a href="/tags/Terraform/">Terraformタグの記事</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform1-4/">Terraform1.4</category>
      
      
      <comments>https://future-architect.github.io/articles/20230327a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>究極の？トランザクションスクリプト用言語Verse</title>
      <link>https://future-architect.github.io/articles/20230324a/</link>
      <guid>https://future-architect.github.io/articles/20230324a/</guid>
      <pubDate>Thu, 23 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;Unreal Engineで有名なEpic Gamesが、現在開催中のGDC（Game Developer Conference)でVerseの詳細を解説しており、その動画が公開されています。&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>Unreal Engineで有名なEpic Gamesが、現在開催中のGDC（Game Developer Conference)でVerseの詳細を解説しており、その動画が公開されています。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/teTroOAGZjM?start=22486" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>ドキュメントもすでに公開されています。</p><p><a href="https://dev.epicgames.com/documentation/en-us/uefn/verse-language-reference">https://dev.epicgames.com/documentation/en-us/uefn/verse-language-reference</a></p><p>現在処理系は、Unreal Editor for Fortnite(UEFN)の中に組み込まれているようですが、Windowsにしか対応していません。ちょろっと動かした程度で、まだコードをしっかり書いてはなくて、プレゼンを見た感想で書いているので、いろいろ間違ったところとかもあるかもしれませんが、そういうのはご指摘いただいたり、Pull Request（ブログの上の鉛筆アイコンで送れます)を出してもらえれば、と思います。</p><img src="/images/20230324a/image.png" alt="image.png" width="1200" height="505" loading="lazy"><p>UEFNのVerseボタンを押すと、こんな感じでVSCodeがぴょこっと起動します。</p><img src="/images/20230324a/スクリーンショット_2023-03-23_18.57.26.png" alt="スクリーンショット_2023-03-23_18.57.26.png" width="1200" height="804" loading="lazy"><p>Verseはメタバース用の言語です。メタバースではすでにある3Dの空間の上に、いろいろな企業や個人がコンテンツを作っていきます。一般的なゲームと違い、どのような3Dモデルがあるか、どういう動き（プログラム）があるかは事前には決まらず、後から追加されたコンテンツをロードしてユーザーが実行するという、スクリプト言語が必要であり、そのために作られた、とあります。</p><p>将来的にはオープンソースになり、ブラウザでも動くことを目指しているようです。</p><p>10億人規模のユーザーがプレイしている、今まさに動いている環境に後から100万人規模の開発者がコンテンツを作っていくという、そういう世界観です。ある意味、Smalltalkが目指していた世界のさらに先、という感じですね(おっさんにしか伝わらない例）。</p><h1 id="基本的な言語設計"><a href="#基本的な言語設計" class="headerlink" title="基本的な言語設計"></a>基本的な言語設計</h1><p>関数型言語、オブジェクト指向、命令型のエッセンスを集めて作られた言語となっています。12月に発表されたときは関数型言語、というのを押し出した感じの紹介になっていて、特に追いかけてなかったのですが、色んなパラダイムをバランスよく取り入れている感じがしました。</p><p>基本的な設計は今時の言語っぽい感じです。</p><ul><li>mutable&#x2F;immutable</li><li>静的型つけ(TypeScript的な後置)</li><li>構造体</li><li>クラス、インタフェース(継承も)</li><li>ジェネリクス(クラス、関数)</li><li>Pathと呼ばれるネームスペース（Javaのpackageっぽい)</li></ul><p>タプルとかもあるし、配列、辞書もあって、タプルで関数の引数をまとめて渡したり、デフォルト引数があったり。</p><h2 id="関数型っぽい要素"><a href="#関数型っぽい要素" class="headerlink" title="関数型っぽい要素"></a>関数型っぽい要素</h2><p>forループ構文は、他の言語にも良くある構文に一見見えますが、forとは見ないで、C#のLINQだったり、Javaのストリームだったり、汎用リスト処理っぽいもの、と考えた方が良さそうです。</p><p>シンプルな例としては、配列の中の要素に対するループだけど、追加でフィルタを指定できたりするところは面白いですね。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (X : SomeArray; X &lt;&gt; <span class="number">100</span>):</span><br><span class="line">    Print(X)</span><br></pre></td></tr></table></figure><p>なんかすごいループの例がこれです。マインスイーパの隣接するセルの爆弾の数のカウントを1つのループでするそうな。<code>Y-&gt;CellRow:Cells</code>はループごとに、インデックスを<code>Y</code>に、値を<code>CellRow</code>にアサインするようです。その下の<code>X-&gt;Cell:CellRow</code>はそれを<code>X</code>と<code>Cell</code>にやっていて2重ループになります。そのX, Yに対して隣接する9つのX, Y（それぞれ-1から1のオフセット)の組みを次の2行で作り出しており、4重ループになりました。その後は<code>Cell&lt;&gt;AdjacentCell</code>で自分自身をのぞき、　<code>AdjacentCell.Mined?</code>で爆弾があるセルだけにフィルタリングするという・・・値からリストを作り出したりしつつ多重ループをしていくという流れですね。このあたりは関数型を意識した機能になっているように見えます。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>:</span><br><span class="line">    Y-&gt;CellRow:Cells</span><br><span class="line">    X-&gt;Cell:CellRow</span><br><span class="line">    AdjacentX:=X<span class="number">-1.</span>.X+<span class="number">1</span></span><br><span class="line">    AdjacentY:=Y<span class="number">-1.</span>.Y+<span class="number">1</span></span><br><span class="line">    AdjacentCell := Cells[AdjacentY][AdjacentX]</span><br><span class="line">    Cell&lt;&gt;AdjacentCell</span><br><span class="line">    AdjacentCell.Mined?</span><br><span class="line"><span class="keyword">do</span>:</span><br><span class="line">    <span class="built_in">set</span> Cell.AdjacentMines += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Fail"><a href="#Fail" class="headerlink" title="Fail"></a>Fail</h2><p>if文も他の言語とちょっと違っていて、成功・失敗の可能性のある式に対して適用する、ということになっています。次の式は、インデックスが配列の範囲に入っていて成功したときだけ後ろが実行される、という感じです。今時の他の言語だと、null安全とかで、「nullになっていない」という条件を媒介にして「失敗しないコード」を書きますが、Verseだと、失敗した場合は、関数型言語でいうところの空配列に対してリスト処理する（実行されない）ぐらいの軽い感覚で、アプローチは違いますが、安全なコードをシンプルに書けます。こういう割り切りは面白いな、と思いました。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Element := MyArray[Index]): Log(Element)</span><br></pre></td></tr></table></figure><p>これらに近いのは、Reactの<code>Suspense</code>とか<code>ErrorBoundary</code>ですかね。正常ケースで書いていくが、未ロード時とか失敗時にはこれらのコンポーネントが拾ってフォールバックします。</p><h1 id="トランザクション"><a href="#トランザクション" class="headerlink" title="トランザクション"></a>トランザクション</h1><p>ifは他の言語と違うと紹介しましたが、前のFailはまだまだ序の口です。これには述語的な条件文が書けます。この場合、実行後にこの条件にマッチしないと、それまでに行った操作が巻き戻るらしいです。ドキュメントによると、ファイルI&#x2F;Oやログ出力などの言語の外へのインタラクションとか、no_rollbackがついた処理以外にはこれが適用されるとのことです。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>:</span><br><span class="line">    DoSomeEffect()</span><br><span class="line">    X &lt; <span class="number">100</span></span><br><span class="line">then:</span><br><span class="line">    SomethingElse()</span><br></pre></td></tr></table></figure><p>これはプレゼンテーションで紹介された言語の基盤となるアイディアの2番目にも書かれています。100万人規模の開発者が並行性を管理する唯一の方法とあります。確かに、絶対成功するのであれば、Goで採用されているCSP(Communicating Sequential Process)はパフォーマンスを維持しつつ並行処理を進めるには最適です。あるいは、やりとりの方向性が一方通行であっても問題はないでしょう。しかし、失敗時のロールバックを別のプロセスに依頼というをミスなく組み込むのは困難です。</p><img src="/images/20230324a/スクリーンショット_2023-03-23_18.11.04.png" alt="スクリーンショット_2023-03-23_18.11.04.png" width="1200" height="716" loading="lazy"><p>ゲームの場合は、たくさんのオブジェクトが並行で動いていて相互に複雑にインタラクションしますので、こういう方向性になっているんじゃないかと思います。ゲームは速度が命、と思われるかもしれませんが、「ボタンを押した」「物体同士がぶつかった」「ビヘイビアツリーの思考ルーチンで何かやることを決めた」みたいなイベントはそれほど多くは起きません。そして、それらによって決まったアクションを毎フレーム実行する（たくさんの破片が回転しながら飛んでいくなど）部分では大量に並行で動作します。このトランザクションは前者のコントロールフロー部分で使い、後者の大量にCPU使って効率を上げられるところはエンジン内部で・・・みたいな使い分けなんじゃないかと思います。</p><h1 id="非同期周りの機能が面白い"><a href="#非同期周りの機能が面白い" class="headerlink" title="非同期周りの機能が面白い"></a>非同期周りの機能が面白い</h1><p>ゲームだと、同時に発生するさまざまな事象を同時に扱う必要があります。格闘ゲームの開始前のシーケンスを見ても、1P側のキャラクターのアニメーションが再生されて、その後2P側のアニメーションも再生されるが、ボタンを押すとスキップできるよ、とか、ゲージ類が移動アニメーションしながら画面にカットインするとか、そういうやつです。フレームを跨いで処理を記述する必要があり、たいていゲームエンジンには、直列だったり並列のイベントを扱う仕組みがあったりします（以下はCocos2d-xの例）。</p><img src="/images/20230324a/スクリーンショット_2023-03-23_15.23.46.png" alt="スクリーンショット_2023-03-23_15.23.46.png" width="1200" height="678" loading="lazy"><p>Verseでは同期のblockも含めて、5つの制御構文があります。JavaScriptの<code>Promise</code>と一部似ていますね。<code>sync</code>は<code>Promise.all()</code>相当です。<code>Promise.race()</code>相当は<code>rush</code>で、<code>race</code>は別物な点は要注意です。</p><p>先ほどのFail&#x2F;トランザクションとの組み合わせでゲームのコンテンツを作る事例が動画にあります。1本のスクリプトだけど、プレーヤーが特定のエリアに行ったら敵がでる、火が燃える、安全なエリアに到達したら敵を削除、ヘリに乗ったらアニメーション再生して完了など、ユーザーの体験に従ったスクリプトになっています。この複雑なユーザー体験を駆動する部分に、これらの非同期のブロックが活用されています。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/teTroOAGZjM?start=24695" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>Cypressのテストコードがこれに近いものを目指していますが、JavaScriptの上に作り上げているので通常の構文と組み合わせられなくて変数の取り扱いがちょっと不便だったりしますが、これは最初からこの非同期をうまく使うことを考慮しているので、なんかエレガントですね。</p><h1 id="トランザクションスクリプト"><a href="#トランザクションスクリプト" class="headerlink" title="トランザクションスクリプト"></a>トランザクションスクリプト</h1><p>エリック・エヴァンスのDDD本では、オブジェクト指向型のドメインモデルと対比してトランザクションスクリプトはダメだ、と言っています。</p><blockquote><p>利口なUIについて議論したのは、レイヤ化アーキテクチャのようなパターンが、ドメイン層を隔離するために必要になる理由と、それがどういう時なのかを明確にするためだけだ。利口なUIとレイヤ化アーキテクチャとの中間には、他にも解決策がある。例えば、Fowler（2002）が説明しているトランザクションスクリプト（TRANSACTIONSCRIPT）は、ユーザインタフェースをアプリケーションから分離はするが、オブジェクトモデルは提供しない。<br>:<br>他の開発スタイルにもそれなりの存在意義があるが、複雑さと柔軟性において、さまざまな限界があることを認めなければならない。ドメインの設計を分離し損ねると、状況によっては実に悲惨なことになりかねない。アプリケーションが複雑で、モデル駆動設計に取り組むつもりなら、歯を食いしばり、必要な専門家をそろえた上で、利口なUIを避けるべきである。</p><p>Eric Evans. エリック・エヴァンスのドメイン駆動設計 (Japanese Edition) (pp.76-77). Kindle 版.</p></blockquote><p>オブジェクト指向はそれぞれのオブジェクトが責務を果たせば、すべてのタスクが正しく完了するという考え方です。センサーオブジェクトが何か信号を得たら、それをオブザーバーオブジェクトが検知して、異常かどうか判定するストラテジーオブジェクトが状態を・・・というように、責務ごとに分担します。DDDはこれを推しています。しっかりしたモデルができれば、新しい機能を追加しようとした場合に、オブジェクトが勝手にやってくれる（ようにすでにプログラミングされている）ので、少ないコードで重複を減らせる、みたいな考えなんじゃないかと思います。</p><p>ですが、業務はまずみんなフローで考えます。オブジェクトにしてしまうと、そのフローは複数のメソッドに分かれてしまいます。ステートによって条件分岐が変わるとすると、そのステートが変わるイベントも探して、1本の業務フローがようやく見つけられる、ということになります。</p><p>現在の世の中も、ウェブフロントエンドの関数型を取り入れたUIフレームワークが流行ったりして、オブジェクト指向でモデリングというのとは別の流れを作っています。もちろん、オブジェクト指向は有用なことには変わりはないのですが、どちらかというと、配列クラスとか、リクエストクラスとか、便利な部品を作るところがオブジェクト指向で、それらを活用してアプリケーションの流れを作る、変化が大きい部分に関数型や、手続型を組み合わせる、という流れが一般的になってきているように思います。</p><p>エンプラ開発でも、フレームワーク的なレイヤーや共通部品はオブジェクト指向で作っても、SQLを使ってDBの読み書きをして、それをもとに別のクエリーを発行するとか、DBが中心でオブジェクト指向でモデルってあんまり作らないですよね。オブジェクトを作って元気にN+1してもいいんですけど。</p><p>Verseは他の言語などをしっかり研究している、とプレゼンの最初の説明にもありましたが、まさに今の世の中が目指していて既存の言語の上に作られたフローをゼロベースから最適な形で実現した言語と言えます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Unreal Engineは、新しいビジョンを作り出し、それを実現するための機能を載せてきます。１２月の発表では、このVerseはOSSであり、Unityなどの別のゲームエンジンでも使えるオープンな標準にしていこう、としています。とはいえ、おそらく業務システムに使えるようになるかどうかというと、そういう未来はすぐには来ないかもしれません。ですが、Verseが解決しようとしている問題とか、それに対するアプローチは、ゲーム業界ではない人にも刺激があるんじゃないでしょうか？少なくとも、僕はかなり刺激を受けました。今までの言語とかフレームワークでちょっといまいちだな？と思っていた部分も鮮やかに解決されていたりして、別の言語の開発でも参考にしたくなりますよね？（トランザクションは難しいですが）。今後もちょくちょく追いかけてみようと思います。</p><img src="/images/20230324a/スクリーンショット_2023-03-23_19.52.29.png" alt="スクリーンショット_2023-03-23_19.52.29.png" width="1200" height="626" loading="lazy"><ul><li>参考: Haskellのイベントで発表された言語の紹介</li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/832JF1o7Ck8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Verse/">Verse</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/">トランザクションスクリプト</category>
      
      
      <comments>https://future-architect.github.io/articles/20230324a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>数字と振り返るフューチャー技術ブログ（2022年）</title>
      <link>https://future-architect.github.io/articles/20230320a/</link>
      <guid>https://future-architect.github.io/articles/20230320a/</guid>
      <pubDate>Sun, 19 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230320a/graph-gee8b181db_640.png&quot; alt=&quot;graph-gee8b181db_640.png&quot; width=&quot;640&quot; height=&quot;363&quot; loading=&quot;lazy&quot;&gt;


&lt;h2</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230320a/graph-gee8b181db_640.png" alt="graph-gee8b181db_640.png" width="640" height="363" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>技術ブログ運営の真野です。桜のつぼみが芽吹く時期ですが、<a href="/articles/20201127/">2020年</a>、<a href="/articles/20220120a/">2021年</a>に引き続き2022年の技術ブログ振り返りをお届けします。</p><h2 id="キーメトリクスについて"><a href="#キーメトリクスについて" class="headerlink" title="キーメトリクスについて"></a>キーメトリクスについて</h2><p>この技術ブログ運営の指標としてPVやSNSでのリアクション数などは追っていません。理由は次です。</p><ol><li>PV数向上のみを目的にすると、タイトル釣りやエッセー的な内容を増やしたくなり、趣旨であるフューチャーのITコンサルティング業務を通して得た知見を共有するという趣旨が薄まる恐れがある</li><li>ITコンサルティングや自社サービス運営を通して、自分たちの知見・ナレッジを公開するというアウトプット文化醸造の目的をもっと強化したい</li><li>PVが少なくても、特定の領域を追っている人に刺さる記事は重要であると認識していること</li><li>一般ウケしない記事を書いてしまっても次回作以降で、バズる記事を書いてくれる人もいる。あまりそこに囚われないようにしたい</li><li>運営上、PVやSNSでのリアクションを追わないけど、バズった場合はチームで礼賛すれば良い</li></ol><p>そのため、このブログで気にしているのは以下です。</p><ol><li>投稿数</li><li>寄稿者のユニークユーザ（UU）数</li><li>1本目を踏み出してくれた新しい寄稿者数&#x2F;年</li><li>連載企画数、それぞれの参加人数</li></ol><p>投稿数がある程度活発であれば、IT技術組織的な活動がある一面ではヘルシーに行われていると思うからです。さらに寄稿者UUですが、寄稿者が増えれば増えるほど様々な観点の記事が増えるためユニークな媒体になると考えており、広く当社の技術的な成果を伝えられるのでは？と考えています。連載企画も発信内容の偏りを意思入れで散らすことや、単発だと出てこないようなテーマを拾い上げるキッカケにしたいため、企画本数やそこに参加しているメンバーの数にはこだわっていきたいと思っていました。</p><p>また、企業技術ブログだとどうしても寄稿者が同じ顔ぶれに偏りがちだと思います。これはある意味、避けようがないと考えていますが、一方で新しい参画者が増えないと尻すぼみするのも事実だと思います。持続可能性も考慮し、新しく寄稿してくれた人の数もウォッチし、適切に運営できているか見ようとしています。</p><h2 id="2022年の結果"><a href="#2022年の結果" class="headerlink" title="2022年の結果"></a>2022年の結果</h2><h3 id="投稿数"><a href="#投稿数" class="headerlink" title="投稿数"></a>投稿数</h3><p>2022年は207本でした。2021年が現時点でピークとなる281本でした。なおこの記事を書いている2023年3月時点で合計850を超える記事を公開しています。</p><p>投稿推移としては以下です。2021年には負けるものの、200本前後の公開ができたのである程度、ブログでナレッジを公開するという慣習が、組織に少しずつ定着し始めているのかなと思います。</p><img src="/images/20230320a/2016年～2022年の推移.png" alt="2016年～2022年の推移" width="1200" height="245" loading="lazy"><p>こちらが2022年の月別投稿数です。12月の落ち込みはアドベントカレンダーで、基本的には個人アカウントのQiita側に投稿してしまうため、本技術ブログとしては記事数が減ります。月平均で17本以上なので、平日は大概、1つ以上記事を公開していたというかたちです。5月はGWで大型連休にする人が多かったから減ったのでしょうか。</p><img src="/images/20230320a/2022年の月別投稿数.png" alt="2022年の月別投稿数.png" width="1200" height="359" loading="lazy"><p>SNSの良いねやシェア数はキーメトリクスとして数値を追っていないと話していましたが、集計自体はしています。2021年は総シェア数が <code>30652</code> と2022年の倍以上に突出しており成長していない？と思いますが、<a href="/articles/20210621a/">HTML5記事</a>がずば抜けたノイズなので、それを除くと平年並みといった具合です。</p><h3 id="寄稿者のユニークユーザ（UU）数"><a href="#寄稿者のユニークユーザ（UU）数" class="headerlink" title="寄稿者のユニークユーザ（UU）数"></a>寄稿者のユニークユーザ（UU）数</h3><p>寄稿者のUU数ですが、2021名が105名と突出し、2022年は73名と低調でした。目標が130名だったので未達ず、やり方を変えないとまずいと認識しています。</p><img src="/images/20230320a/寄稿者数.png" alt="寄稿者数" width="1200" height="217" loading="lazy"><p>社員数も増えていることと、世間的にもリスキリング・自己研鑽の風潮が来ており、技術ブログ執筆は良い機会だと思いますので、流れを味方にしていきます。</p><h3 id="1本目を踏み出してくれた新しい寄稿者数"><a href="#1本目を踏み出してくれた新しい寄稿者数" class="headerlink" title="1本目を踏み出してくれた新しい寄稿者数"></a>1本目を踏み出してくれた新しい寄稿者数</h3><p>新規寄稿者数は25名でした。34%の人が2022年に初めてフューチャー技術ブログに寄稿してくれたということで割合は思ったより高い状態です。</p><p>課題としては、むしろ2021年以前に寄稿してくれた人が継続してくれなかった、という点にあると思いますので、継続するような仕掛けづくりが必要だなと再認識しました。</p><p>2023年はすでに投稿してくれた人に対して、継続して投稿してくれるような仕組みづくりや、きっかけづくりが必要だと考えています。今期はメトリクスとしてウォッチしたほうが良さそうです。</p><h3 id="連載企画数"><a href="#連載企画数" class="headerlink" title="連載企画数"></a>連載企画数</h3><p><a href="/articles/20220117a/">2022年のブログ連載予定を発表します</a> にまとめている通り、アドベントカレンダーを除き12本でした。2021年は14本からは少し減りましたが、底堅く運営はできているかなと思います。</p><h3 id="（おまけ）PV数"><a href="#（おまけ）PV数" class="headerlink" title="（おまけ）PV数"></a>（おまけ）PV数</h3><p>PVを追っていないと言いながらも共有です。上がると嬉しいですね。6月はスパイクして32万PV&#x2F;月を声、2021年下期は12～14万PV&#x2F;月でした。2020年と比較すると、記事のストック効果もあり1~2割成長しているのかな？と思っています。月当たりのピークは6月の18万PV、最も低いのは2月の12万PVでした。</p><img src="/images/20230320a/PV.png" alt="PV" width="1200" height="338" loading="lazy"><p>定期的に寄稿してくださる社員のみなさまに助けられた結果かなと思います。</p><h2 id="べすぶろ"><a href="#べすぶろ" class="headerlink" title="べすぶろ"></a>べすぶろ</h2><p>Best Blogger of the Year（べすぶろ）は、社外に影響を与えた記事を執筆した人を表彰する2020年より開催している仕組みです。詳細は<a href="/articles/20220121a/">Best Blogger of the Year 2021 受賞者を発表します </a>を参照ください。2022年も讃えさせていただきました。選抜したのは3名です。</p><ul><li>青柳雄登さん<ul><li><a href="/articles/20220107a/">Future社員が使っているWindows便利ツール（新人さん向け）</a></li><li>「新人時代を思い返しながらフューチャーの方が使っている便利ツールをまとめてみたきじで、予想以上に多くの方に読んで頂くことができ驚いています」</li></ul></li><li>原木翔さん<ul><li><a href="/articles/20220518a/">OpenSLOについて</a></li><li>「自分がフューチャーに入ったのも技術ブログで名前を知ったことがきっかけでした。自分の記事がまた、どこかのエンジニアの助けやきっかけになれば幸いです。」</li></ul></li><li>澁川喜規さん　🏅3年連続受賞・殿堂入り🏅<ul><li><a href="https://future-architect.github.io/articles/20210611a/">サーバーアプリ開発環境(Python／FastAPI)</a></li><li>「今年も選定していただきありがとうございます。フォロワーシップを発揮してフューチャーを盛り上げようという気持ちでコンテンツ提供側として活動しています。来年も引き続き活動していこうと思いますが、他の人の投稿を増やす貢献もしたいので、ネタをお持ちの方とか、書いてみたいけどネタがない、という方はぜひお気軽にDMで相談を投げていただければと思います」</li></ul></li></ul><p>最後の澁川さんは、べすぶろができてから3年連続で選ばれ、最速で殿堂入りということになりました。感謝です。</p><h2 id="YouTube動画"><a href="#YouTube動画" class="headerlink" title="YouTube動画"></a>YouTube動画</h2><p>ブログではないですが、キャリア採用チームと協力して行っているIT勉強会もYouTubeに動画をアップロードするようにしました。</p><ul><li><a href="https://www.youtube.com/watch?v=6_C-GnwIz3U">Future Tech Night #17 「embeddingの活用」と「MLOps」のAI勉強会</a></li><li><a href="https://www.youtube.com/watch?v=rpT4VVOL2qQ">Future Tech Night #18 Go 1.18 Release Notes みんなで読む会</a></li><li><a href="https://www.youtube.com/watch?v=YuDTNGW-wZY">Future Tech Night #19 AWS CodePipelineと新聞向けCMS構築事例</a></li><li><a href="https://www.youtube.com/watch?v=fpSAwLWnfFo">Future Tech Night #20 Terraform State縛りの勉強会</a></li><li><a href="https://www.youtube.com/watch?v=o0oZnX1Ai-k">Future Tech Night #21 Google Cloud: データエンジニア＋MLOps</a></li></ul><p>ポッドキャストと同様に、それぞれのチャネルに適したコンテンツを増やしつつ、技術ブログと相乗効果を出せたらなと考えています。</p><h2 id="ブログ記事から執筆へ"><a href="#ブログ記事から執筆へ" class="headerlink" title="ブログ記事から執筆へ"></a>ブログ記事から執筆へ</h2><p>Software Designさんに、フューチャー技術ブログがキッカケで寄稿の流れができました。運営冥利に尽きます。</p><ul><li><a href="https://gihyo.jp/magazine/SD/archive/2022/202201">Software Design 2022年1月号</a><ul><li>Cypressで作る“消耗しない”E2Eテスト環境 【1】Cypressで快適なテストライフを（木戸さん）</li><li>木戸さんの<a href="/articles/20211218a/">紹介記事</a></li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2022/202202">Software Design 2022年2月号</a><ul><li>Cypressで作る“消耗しない”E2Eテスト環境 【2】実運用に効くコードの書き方＆便利な機能（枇榔さん）</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2022/202203">Software Design 2022年3月号</a><ul><li>［短期連載］Cypressで作る“消耗しない”E2Eテスト環境 【3】ソフトウェアの品質をアップさせるテストの書き方…… 渋川 よしき</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2022/202204">Software Design 2022年4月号</a><ul><li>【最終回】［短期連載］Cypressで作る“消耗しない”E2Eテスト環境【4】アドバンストな機能を使いこなす…… 渋川 よしき，枇榔 晃裕</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2022/202208">Software Design 2022年8月号</a><ul><li>第4章：OpenAPIを使ったWeb API開発の実際 スキーマファーストで効果的に開発するコツ（武田さん，宮崎さん，大岩さん）</li></ul></li></ul><h2 id="記事・寄稿者を増やす取り込み"><a href="#記事・寄稿者を増やす取り込み" class="headerlink" title="記事・寄稿者を増やす取り込み"></a>記事・寄稿者を増やす取り込み</h2><p>IT技術以外にも、マネジメントや業界ドメイン知識を増やそう連載など、幅広いテーマを扱うようになりました。ITコンサルティングをはじめとした、フューチャーの開発現場で得たナレッジを共有するという目的を大事にしながら、皆様に少しでも役立つ内容を、進化しつつより推進していきたいと思っています。</p><p>また、社内のオンサイト（ハイブリッド）イベントとしてはFriday Night Barや、BPYに技術広報メンバーが参加し、運営アピールや寄稿のメリットをプッシュしたりしました。認知度は上がっているはず！</p><h2 id="2023年に向けて"><a href="#2023年に向けて" class="headerlink" title="2023年に向けて"></a>2023年に向けて</h2><p>業界ドメイン知識を増やすようなビジネス記事は昨年以上に広げていければと考えています。また、新人研修リーダー観点での記事など、面白いネタがあることも分かってきたので、運営でできる範囲で寄稿をお願いしていこうと思います。</p><ul><li><a href="/articles/20230306a/">GitLab CIを新人研修に導入した話</a></li></ul><p>個人的には、AWSインフラ命名規約、OpenAPISpecfication規約、PlantUML規約などを進めるタスクフォースを始めました。このあたりのある程度の規模におけるチーム開発で必須となるベースライン系の力点を入れようと思います。</p><p>技術ブログ運営も技術広報と名前を変えたようで、体制も微妙に増えてきたので、記事を書くか迷っているメンバーの背中をそっと押したり、ときには伴奏して引き上げていきたいと考えています。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>2022年のフューチャー技術ブログの振り返りを行いました。フィーバーした2021年超えは残念ながら未達ですが、1年で200本を超えた記事を公開することができました。</p><p>注視しているメトリクスから不足している面も見えてきたため、継続して執筆依頼を行って行きたいと思います。</p><p>アイキャッチはImage by <a href="https://pixabay.com/users/wallusy-7300500/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=6249047">Yvette W</a> from <a href="https://pixabay.com//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=6249047">Pixabay</a>を使わせていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/TechBlog/">TechBlog</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/">運営</category>
      
      <category domain="https://future-architect.github.io/tags/PV/">PV</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%99%E3%82%B9%E3%83%96%E3%83%AD/">ベスブロ</category>
      
      
      <comments>https://future-architect.github.io/articles/20230320a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>データライフサイクルとトレードオフ</title>
      <link>https://future-architect.github.io/articles/20230317a/</link>
      <guid>https://future-architect.github.io/articles/20230317a/</guid>
      <pubDate>Thu, 16 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;ソフトウェアの中身を大きく2つに分解すると、プログラムとデータに分かれます。コードコンプリートやA Philosophy of Software</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>ソフトウェアの中身を大きく2つに分解すると、プログラムとデータに分かれます。コードコンプリートやA Philosophy of Software Designなど、評判の良いソフトウェア設計の本はいくつかありますが、それらはどれもプログラムの説明がメインでデータのライフサイクルについての説明はなかったと思います。しかし、データの表現にもいくつもの方針があって、それによるトレードオフがあるな、というのはもやもやと考えていたので、その考えをまとめて文章にしてみました。</p><p>データといっても、処理中の短期間の間では変わらない、いわゆるマスターデータ的なデータです。ジャーナルというか、トランザクション的なデータはここでは触れません。</p><p>この記事では、それぞれのトレードオフについて考えていきます。</p><ul><li>即値（リテラル）</li><li>定数</li><li>コマンドライン引数</li><li>環境変数</li><li>設定ファイル</li><li>ダウンロードコンテンツ</li><li>オンラインデータベース</li></ul><p>データの扱い方が決まると、それを扱うソフトウェアの設計も決まります。むしろ、外部設計に影響を強く与える部分なので、クラス分けをどうしようとか、そういうレベルの話よりも、設計におけるプライオリティはこちらの方が上です。起動時にどこかの情報をパースして読み込むのか、リアルタイムの更新を扱う必要があるのかなど、ソースコードへの影響も大きくなります。</p><h1 id="データの表現方式"><a href="#データの表現方式" class="headerlink" title="データの表現方式"></a>データの表現方式</h1><h2 id="即値（リテラル）"><a href="#即値（リテラル）" class="headerlink" title="即値（リテラル）"></a>即値（リテラル）</h2><p>一番簡単なものはこれでしょう。ソースコード中の利用する箇所に直接データを設定します。ブール型、整数、浮動小数点数、文字列など、プログラミング言語でサポートされているプリミティブ型を入れるのがわかりやすいでしょう。言語によっては構造体リテラルや複合リテラルといった機能があり、複雑なオブジェクトや配列を使った深いデータもリテラルで書けるものもあります。</p><p>たとえば、華氏の温度を摂氏に変換するコードを考えてみましょう。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ftoc</span>(<span class="params">f</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (f - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`w 0 -&gt; c <span class="subst">$&#123;ftoc(<span class="number">0</span>)&#125;</span>`</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`f 70 -&gt; c <span class="subst">$&#123;ftoc(<span class="number">70</span>)&#125;</span>`</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`f 100 -&gt; c <span class="subst">$&#123;ftoc(<span class="number">100</span>)&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p>32や1.8という定数がでていますが、温度の定義が変わるまではここが変化することはありません。プログラム全体を見回して1度しかでてこないのであれば即値でハードコードしても問題ありません。</p><p>少し変わり種でいえば、アノテーションの引数やGoの構造体のタグなどもこれに該当します。以下のようなクラスを定義があったとします。ここでは、ウェブサーバーのパスと、クッキーの名前が文字列リテラルで即値でハードコードされています。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"> <span class="meta">@PostMapping(&quot;/hello-world&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">doService</span><span class="params">(<span class="meta">@CookieValue(&quot;last-login&quot;)</span> String rank)</span> &#123;</span><br><span class="line">   <span class="comment">// 何かしらのロジック</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Goの構造体はJSONなどのデータから読み込んで初期化するときのメタデータをタグとしてバッククオートで書きます。この中もキーの名前もハードコードされていて、後から変更はできないため、即値でのハードコードと変わりません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line"> name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line"> age <span class="type">int</span>     <span class="string">`json:&quot;int&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即値でハードコードというのを聞くと原始的な文明のないコードに思えるかもしれませんが、設定ファイルのキーなど、動的に変わるものがないのであればテクニックに走る必要はありませんし、プリミティブや構造体のタグなどのようにAPIの仕様としてハードコードしかできないケースもあります。</p><h2 id="定数"><a href="#定数" class="headerlink" title="定数"></a>定数</h2><p>プログラミングを学んだ人が最初に触れる「ソフトウェアエンジニアリング」の要素がこの定数でしょう。リテラルで全部書いても良いのすが、「あとからまとめて変更することや読みやすさを考慮して定数にしましょう」といった感じの文脈で説明されることがよくあります。</p><p>多くの言語には一度代入したら変更できない「定数」が機能として提供されています。Javaには <code>final</code> 修飾子がありますし、JavaScript&#x2F;TypeScript&#x2F;C&#x2F;C++には<code>const</code>があります。C++にはさらにコンパイル時に確定し、テンプレート引数にも渡せる <code>constexpr</code> もあります。C言語やC++では、マクロとして実現する手段があります。ただし、プリミティブ型であれば再代入を禁止するだけで問題ありませんが、言語によってはオブジェクト自体の変更を禁止できないこともあります。ゲッターだけを用意してセッターを公開しない、JavaScriptの<code>Object.freeze()</code>、TypeScriptの<code>readonly</code>などを利用するなど、言語によっていくつか選択肢があります。</p><p>ソースコード中で何度も参照される場合は即値よりもこちらを使うべきでしょう。基本的にはコンパイルの段階で値が決まってしまい、実行時に変更はできません。円周率みたいなものは定数化するのは良いのですが、たとえば、消費税率などのパラメータなどはルール変更によって後から変わる可能性がありますし、基本的に定数は使わないでしょう。より動的に変更できる方針が必要とされます。</p><p><code>const</code>や<code>final</code>などは、処理途中のデータを保持するのにも使われますが本エントリーはあくまでもマスター的なデータであり、関数の外のパッケージグローバル定義だったり、クラスの静的フィールドだったりのものを想定しています。</p><p>言語によっては、コンパイル時にいくつかの定数セットを環境によって切り替えられる機構を持っているものもあります。C&#x2F;C++などの条件コンパイル、GoのBuild Constraintsなどがあります。定数宣言はこれらの機能と組み合わせると、環境ごとのデータセットの切り替えが実現できます。</p><h2 id="コマンドライン引数"><a href="#コマンドライン引数" class="headerlink" title="コマンドライン引数"></a>コマンドライン引数</h2><p>CLIやサーバーに外部から値を設定するよくある方法としては、コマンドライン引数があります。これまでの2つと異なり、実行時に値が決まります。同じプログラムでもコンパイルせずに利用者が自由にデータを入れられ、柔軟性が得られます。</p><p>各種コマンドラインパーサを使った引数の解釈の実装が必要となります。大量のデータを入れようとすると少々入れにくいなどがありますが、シェルスクリプトなどを使ってまとめておくこともできます。</p><p>なお、柔軟であるということはデメリットもあり、要素の有無がコンパイル時には確定しないという問題があります。これ以降に紹介するものではエラーハンドリングの実装が必要となります。デフォルト値を持たせておき、何も設定しない場合にも適当な値を使って動くようにしておくことで致命的なエラーを回避することは可能でしょう。ただし、設定がなかったり、間違った値が設定されるのはデプロイプロセスのバグであり、デフォルト値は発覚を遅らせるし、致命的なエラーとして扱うべき、という考えもあります。ちょっとした開発用ミドルウェアがぱっと起動するのは便利だったりするので、少ない設定で開発者モードでは起動できる、ぐらいが落とし所でしょうか？</p><h2 id="環境変数"><a href="#環境変数" class="headerlink" title="環境変数"></a>環境変数</h2><p>以前からも使われてきましたが、クラウド時代になってさらに活発に利用されるようになったのが環境変数です。クラウドネイティブなアプリケーションの設計指針の<a href="https://12factor.net/ja/">The 12 Factor App</a>でも利用が推奨されています。</p><p>環境変数は完全に設定を外部から与えられるのが保証されています。設定をすべて環境変数で与えられるようなコンテナイメージやEC2などのイメージを作っておけば、1つのイメージが、開発環境、ステージング、本番環境のどの環境にも使えるようになります。この場合、ファイルシステム上に設定値が残らず重要情報を保持している場所が限定されるようになるため、イメージを見られても重要な情報が漏洩しにくくなるなるというおまけ付きです。</p><p>本番環境用、ステージング用などの設定を外部ファイル化し、その選択だけ環境変数で行うといった少し自由度が下がる方法もよく使われています（が、The 12 Factor Appではこれは推奨していない)。</p><h2 id="設定ファイル"><a href="#設定ファイル" class="headerlink" title="設定ファイル"></a>設定ファイル</h2><p>設定ファイルをアプリケーションとは完全に別のファイルにしておきます。</p><p>ネイティブ系のアプリケーション系ではmacOSでは<code>~/Library/Preferences/&lt;APPNAME&gt;</code>、Windowsでは<code>C:/Users/&lt;USER&gt;/AppData/Local/&lt;APPNAME&gt;</code>、<code>C:/ProgramData/&lt;APPNAME&gt;</code>、Linuxなどの他のPOSIX系OSだと<code>~/.config/&lt;APPNAME&gt;</code>、<code>/etc/xdg/&lt;APPNAME&gt;</code>、Androidは<code>&lt;APPROOT&gt;/files/settings</code>、iOSは<code>&lt;APPROOT&gt;/Library/Preferences/&lt;APPNAME&gt;</code>などにあるファイルを読み込むようにすると、行儀の良いアプリケーションになります。</p><p>サーバーで動くアプリケーションだと、Ruby on Railsの<code>config/database.yml</code>など、フレームワークごとに設定ファイルの置き場が決まっていたりするので、そちらに合わせることもあるでしょう。</p><p>外部ファイル化しておくと、ハイパーパラメータチューニングを使って、最適化を別システムに行わせるというのも一般的なようです。</p><h2 id="ダウンロードコンテンツ方式"><a href="#ダウンロードコンテンツ方式" class="headerlink" title="ダウンロードコンテンツ方式"></a>ダウンロードコンテンツ方式</h2><p>これまでは、設定ファイルはコンパイル時、あるいはデプロイ時には設定がもう決まっているという方式でしたが、このダウンロードコンテンツ方式は起動時にサーバーなどに設定を取りにいって読み込む方式です。</p><p>たとえば、SQLiteのファイルやJSON、YAMLファイル、Protocol Buffers、MessagePackなどをCDNなどにアップロードしておき、起動時に取得してロードします。起動時にニュースを表示する、週次のイベントを配信するなど、スマートフォンのゲームなどではお馴染みの方法でしょう。これはゲームではマスターデータと呼ばれます。</p><p>ゲームというのは、たとえば敵の強さとか、武器の強さといったパラメータはソースコードに直接書くことはありません。よほどリソースに余裕がなかったROMカセットのファミコン時代だと違ったかもしれませんが、今時はプログラマーではなく、ゲームプランナーがこのようなデータを一括で責任をもって作成します（Excelなどで)。オンラインのモバイルのゲームなどの場合は、それを設定ファイルとして配信することで、強さを後から調整したりといったことができるようにしています。ただし、ゲームなどのアプリだと、この手のダウンロードは起動中にしか行えないため、バックグラウンド処理ができないため、ユーザーを長く待たせる原因になったりはします。</p><h2 id="オンラインデータベース"><a href="#オンラインデータベース" class="headerlink" title="オンラインデータベース"></a>オンラインデータベース</h2><p>ダウンロードコンテンツ方式は、起動時にデータが書き込まれたスナップショットのファイルを読み込んでいましたが、オンラインデータベース方式では、ずっと起動しているRDBにデータを入れて利用します。静的なデータセットではなく、より動的な方式です。</p><p>RDBを使うことで、データの変更を即座にシステムに反映できます。また、トランザクションデータも同じRDBにあるのであれば、処理の中でマスターテーブルの情報とトランザクションテーブルの情報をJOINして使うなどができます。たとえば、POSのようなシステムでは商品情報を追加するのに、わざわざシステムを再起動したり、アプリケーションをビルドしなおしてデプロイはしないでしょう。これもマスターデータです。RDBの中には業務で追加されるテーブル（トランザクションテーブル）もあり、それと区別するためにマスターテーブルと呼ばれることもあります。</p><p>一括でデータを入れる場合は、ロックの時間を減らすために、別名でがっとインポートし、古いテーブルをドロップしてからリネームして置き換えるというのが時短になります。</p><h1 id="トレードオフを考慮する視点"><a href="#トレードオフを考慮する視点" class="headerlink" title="トレードオフを考慮する視点"></a>トレードオフを考慮する視点</h1><p>プログラミング言語やビルドツールのサポートによってはもしかしたら柔軟な方が実装しやすい、というところもたまにあるかもしれませんが、紹介した方式は基本的に柔軟性が増えれば増えるほど、だいたい初期の実装は面倒になっていきます。そのため、不必要に高機能な方式を選択するのはよくありませんし、ファイル化したりデータベースをメンテナンスしたり手間暇が余計にかかったりします。たとえば、動的にマスターの更新が必要だ、とか要件に照らして判断する必要があります。</p><h2 id="デプロイまでの手順"><a href="#デプロイまでの手順" class="headerlink" title="デプロイまでの手順"></a>デプロイまでの手順</h2><p>データの更新をデプロイするまでの手順の多さがまず判断基準になるでしょう。ソースコードに記述する方が実装者の実装の手間は少ないのですが、それをビルドしてデプロイする手間が必要です。また、反映のために再起動するだけでいいとか、再起動すらいらないなど、いろいろな方式があります。</p><p>設定ファイル方式やデータベースなどは、それを実装する手間は大きいのですが、一度実装してしまうと、設定の変更で開発者の手を煩わせる必要はない、というところはメリットです。開発者がソースをいじる場合は、どうしても伝言ゲーム＆転記作業になってしまうので、プログラマーがなかなか雇えないという状況だと、そこが仕事のボトルネックになってしまう可能性もあります。</p><p>最近はライブリロードというものが用意されることもあります。</p><h2 id="複数のデータセットのハンドリング"><a href="#複数のデータセットのハンドリング" class="headerlink" title="複数のデータセットのハンドリング"></a>複数のデータセットのハンドリング</h2><p>データのセットをまるごと入れ替える必要があるかどうか、というのも判断基準になります。即値や定数ではまるごと設定を置き換えるのはしにくいです。</p><p>複数設定が欲しくなるのは、ローカル環境やら、本番環境やら、ステージング環境などの環境ごとの設定、というのが思い浮かぶかもしれませんが、たとえば表示メッセージの日本語、英語のメッセージカタログの切り替えなどもある意味データの置き換えになります。これも、多言語を実現するライブラリごとにも方式がいろいろあります。外部化された設定ファイル群を置き換える（JSONなど)方式だったり、AngularやNext.jsなどのように事前ビルドで各言語ごとの訳語のデータを焼き込んだページを別のパスに生成する方式もあります。オンラインのデータベースを使うこともあります。フロントエンドとバックエンドで別々の方式を選ぶこともあります。</p><h2 id="起動時間"><a href="#起動時間" class="headerlink" title="起動時間"></a>起動時間</h2><p>ハードコードされているもの、定数として実装されたものは、すでにメモリ上に配置された状態となっています。最速で起動できます。</p><p>コマンドライン引数や環境変数はそれらをパースしたり解釈する処理が少し入りますが、これらによって大きく遅くなるということはないでしょう。</p><p>設定ファイルを使う方式の場合はファイルのパースが入ることがあります。また、設定ファイルを外出しするケースだと機械学習のモデルだったり、言語モデルだったりすることもあり、データの量によっては起動時間が遅くなることもあります。FaaS系のサーバーレスでの運用には適さないかもしれません。</p><p>ダウンロードコンテンツ方式はネットワークアクセスが入りますし、ユーザーに眼に見えるほどの遅延があります。</p><h2 id="セキュリティ"><a href="#セキュリティ" class="headerlink" title="セキュリティ"></a>セキュリティ</h2><p>データの中には、漏洩されたり、メモリを直接書き換えられることで提供者の意図しない被害が生じるものもあります。一番大きな被害をもたらすものはAPIキーやアクセストークンです。これらをソースコード中にハードコードして、リポジトリにでもプッシュしようものなら、大変なことになります。コマンドライン引数も危険です。シェルスクリプトや、Dockerイメージ、コマンドの実行履歴などには引数も残ってしまうからです。</p><p>他のデータでも、改ざんされることでゲームが不正に有利に改変されてしまうなどもあります。ダウンロードコンテンツ方式やファイルは暗号化されることもあります。どうしてもメモリ中に持たないといけないデータは何らかの難読化を加えて、処理するときに復号するということもあります。</p><h1 id="ハイブリッド方式"><a href="#ハイブリッド方式" class="headerlink" title="ハイブリッド方式"></a>ハイブリッド方式</h1><p>いくつか方式を紹介しましたが、すべて独立しているわけではなく、2つの特徴を持った方式などもあります。</p><h2 id="複数のデータソースの透過利用"><a href="#複数のデータソースの透過利用" class="headerlink" title="複数のデータソースの透過利用"></a>複数のデータソースの透過利用</h2><p>言語標準のコマンドラインパーサーでは見たことがありませんが、高機能なサードパーティ製のコマンドラインパーサーの中には、環境変数を読み取って、コマンドライン引数に渡したのと同様に処理してくれるものがあります。なお、複数ソースに対応する場合は、優先順位を決める必要があります。</p><p>また、寡黙にして僕はそれに対応したライブラリは知らないのですが、JavaScriptの世界では、設定ファイルとコマンドライン引数を透過的に扱えるツールが多い気がします。</p><p>Cypressなんかは、デフォルト値、環境変数、CLI、設定ファイルなどに対応しており、どの設定がどこをソースにして読み込まれたのかが一覧で見えたりします。便利ですね。Cypressは、デフォルト値 &lt; 設定ファイル &lt; 環境変数 &lt; コマンドライン引数 &lt; 動的設定という優先度で上書きできるようになっています。他のツールもだいたいこのような優先順位でしょう。</p><img src="/images/20230317a/image.png" alt="image.png" width="1200" height="537" loading="lazy"><p>スマートフォンのゲームだと、最近は初回起動時に大量のデータのダウンロードをさせるのが普通に行われていますが、バンドルされた設定ファイルと、後からダウンロードしたファイルの串刺し検索ができるようにしておいて、初回のチュートリアル突破までは追加ダウンロードでユーザーを待たせることなく行わせ、そのゲームの裏でバックグラウンドでこっそりダウンロードコンテンツをダウンロードさせる、ということをやったことはありました。</p><h2 id="ソースコードの自動生成"><a href="#ソースコードの自動生成" class="headerlink" title="ソースコードの自動生成"></a>ソースコードの自動生成</h2><p>JSONやYAMLなどのファイルをパースすると処理時間がかかりますし、パーサーもバンドルしないといけませんし、エラーチェックも必要になります。</p><p>昔から、行われてきた手法としては、データを解析した結果を、それぞれの言語のリテラルに変換してソースコードとしてバンドルしてしまうというものがあります。CSVを2次元配列として埋め込んだりとかですね。こうすることで、元のデータは外部化でき、プログラマー以外がデータを作ることもできながら、即値や定数と同じような起動時間が得られます。</p><h2 id="設定DSL"><a href="#設定DSL" class="headerlink" title="設定DSL"></a>設定DSL</h2><p>スクリプト言語の場合はコンパイル不要で必要な時に読み込めばよいので、スクリプト言語自身を設定用DSLとして使うこともよくあります。Pythonのパッケージ情報を記述した<code>setup.py</code>とか、Homebrewのパッケージ情報を書いたRubyスクリプトとかありますね。JavaScript界隈だと、設定をコマンドライン引数と、JSONファイルと、YAMLファイルとともに、JSファイルも環境設定フォーマットとして指定できるようになっていたりします。JavaScriptの場合はちょっとしたロジックを書いて、本番環境だと最適化する、といった機能も本体側で対応しなくても実現できます。</p><p><a href="https://jsonnet.org/">Jsonnet</a>や<a href="https://cuelang.org/">cue</a>など構造化プログラミングを一部サポートするような設定用DSLがあります。また、Luaなどの小さい言語の処理系をバンドルすることもあります。</p><h2 id="設定ファイルをバンドル"><a href="#設定ファイルをバンドル" class="headerlink" title="設定ファイルをバンドル"></a>設定ファイルをバンドル</h2><p>Javaには<code>application.properties</code>や<code>application.yaml</code>を実行ファイルにバンドルする方法があります。Goにはgo.embedで静的ファイルをバンドルできるので、アプリケーションの中に設定ファイルを焼き込むことができます。zipファイルを実行ファイルに後付けするという方法もあります。</p><p>自然言語処理やAIなどでは、少し大きなデータセットが必要になったりします。この辞書ファイル辞書ファイルがバンドルされているツールやライブラリは、インストール後すぐに使えて便利です。たとえば、Pythonの<a href="https://mocobeta.github.io/janome/">Janome</a>やGoの<a href="https://qiita.com/ikawaha/items/ff27ac03e22b7f36811b">kagome</a>もありますし、OSS版のStableDiffutionやその派生モデルについては、配布モデルを組み込んだ、数ギガバイトの圧縮ファイルが配布されています。</p><h2 id="ライブリロード"><a href="#ライブリロード" class="headerlink" title="ライブリロード"></a>ライブリロード</h2><p>紹介した方式の中には、デプロイまでに手間がかかるものなどもあります。ローカルのテストで頻繁にパラメータを調整したいようなゲームの場合には、ゲームの中に編集画面があったり、PC側からデータセットの更新をスマホ端末に送りつけて検証する、といったことが行われます。それ用のツールや、編集画面といったものの設計もセットで行う必要があるでしょう。</p><p>単に再起動して再読み込みさせる、といった方法もあれば、オンメモリで持っているデータを更新し、再起動せずに更新できるようにする、など方式があります。</p><h2 id="envファイル"><a href="#envファイル" class="headerlink" title=".envファイル"></a>.envファイル</h2><p>近年はRuby on Rails由来の環境変数を列挙した<code>.env</code>ファイルを使うシステムが増えています。これは最近は高度に発展したエコシステムになっています。これは設定ファイルでもあり、環境変数でもあります。このファイルに対応していないシステムも<a href="https://direnv.net/">direnv</a>を使えば環境変数として読み込めますし、このファイルに対応したライブラリも各言語用にあります。Node.jsだと<a href="https://www.npmjs.com/package/dotenv">dotenv</a>ですね。また、ウェブのフロントエンドのビルドツールでは、たいてい.envファイルをビルド時にアプリケーションに焼き込む機能を備えています。</p><img src="/images/20230317a/名称未設定ファイル.drawio.png" alt="名称未設定ファイル.drawio.png" width="501" height="291" loading="lazy"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PORT=8000</span><br></pre></td></tr></table></figure><p>次のようなコードがあると、ビルドツールが<code>process.env.PORT</code>を8000というリテラルに上書きした上で、デプロイ用のプログラムへのトランスパイルを行います。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ビルド前</span></span><br><span class="line">app.<span class="title function_">listen</span>(process.<span class="property">env</span>.<span class="property">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//ビルド後</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="string">&quot;8000&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>これも定数と同様に、リンク時に決定されるのですが、ビルド時のCI設定で、複数のバリエーションを作るというのが比較的やりやすくなります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>データをどのようにアプリケーションに読み込ませるかの戦略をいろいろ紹介してきました。それぞれメリットやデメリットがあります。実装の複雑さ、変更頻度がどれぐらいあるのか、誰が変更するのか、どのタイミングでアプリケーションに読み込ませるのかなど、さまざまな要件ごとにトレードオフがあります。</p><p>設計というのは意思決定の連続です。単純に「定数化しましょう」というのは設計の指標にはなりません。かならずトレードオフがあります。数箇所しか使われておらず変更されることもない場合はリテラルで直接書いても問題ありませんし、逆に頻繁に変更される場合は外部から読み込ませるなどの仕組みを用意すべきです。</p><p>これまでの方式を表にまとめました。こういうのが好きな人向けに。</p><div class="scroll"><table><thead><tr><th align="left">方式</th><th align="center">確定タイミング</th><th align="center">扱えるデータ量</th><th align="center">切り替え容易性</th><th align="center">起動時間</th><th align="center">実装の楽さ</th></tr></thead><tbody><tr><td align="left">即値（リテラル）</td><td align="center">ビルド時</td><td align="center"></td><td align="center"></td><td align="center">★★★★★</td><td align="center">★★★★★★</td></tr><tr><td align="left">定数</td><td align="center">ビルド時</td><td align="center">★</td><td align="center">★</td><td align="center">★★★★★</td><td align="center">★★★★★</td></tr><tr><td align="left">コマンドライン引数</td><td align="center">起動時</td><td align="center"></td><td align="center">★★★</td><td align="center">★★★</td><td align="center">★★★</td></tr><tr><td align="left">環境変数</td><td align="center">起動時</td><td align="center">★★</td><td align="center">★★★★</td><td align="center">★★★</td><td align="center">★★★</td></tr><tr><td align="left">設定ファイル</td><td align="center">起動時</td><td align="center">★★★</td><td align="center">★★★</td><td align="center">★★★</td><td align="center">★★★</td></tr><tr><td align="left">ダウンロードコンテンツ</td><td align="center">起動時</td><td align="center">★★★★</td><td align="center">★★★★</td><td align="center"></td><td align="center">★</td></tr><tr><td align="left">オンラインデータベース</td><td align="center">リアルタイム</td><td align="center">★★★★★</td><td align="center">★★</td><td align="center">★★★</td><td align="center"></td></tr></tbody></table></div><p>これらの評価はアプリケーションの種類などによっても多少は変動します。例えばコマンドライン引数はサーバーアプリケーションの場合はコンテナイメージ作成時に固定されます。環境変数はデプロイ時に固定されます。スマホアプリのダウンロードコンテンツであればユーザーが手元で起動すれば更新されるので、同じ起動時でも大きく評価が変わる点は要注意です。</p><p>設計を事前に全部きちんと決め切るのか、コアの部分でない部分は後回しでいいよ、とかいろいろありますが、「どうしてもこれは譲れない」という要件は最初から見込めるわけで、そういう「わかりきっていること」を無視して手戻りが発生というのは誰も幸せにならないですし、逆に最初からオーバースペックで作ってしまうのも問題ですし、みなさんの残業時間が減って、家族と過ごす時間が増えたり、映画を見にいったり、楽しくなることを期待しています。</p><p>本エントリーは多くの人との議論で何度かブラッシュアップしました。@tokoroten, @johtani, @_2F_1, @r_rudi, @_SmallAnimal, @kumagi, @lambda_sakura, @mopemope, @takabow各位に感謝します。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3/">アーキテクチャ</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2/">ソフトウェア</category>
      
      
      <comments>https://future-architect.github.io/articles/20230317a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Jenkinsのエージェントノードをストレージを永続化しながらスポットインスタンスで運用する</title>
      <link>https://future-architect.github.io/articles/20230315a/</link>
      <guid>https://future-architect.github.io/articles/20230315a/</guid>
      <pubDate>Tue, 14 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230315a/logo-title-opengraph.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;250&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230315a/logo-title-opengraph.png" alt="" width="500" height="250"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。フューチャーインスペースの平井です。</p><p>昨今の円安でAWS使用料が増加したことにより、構成見直し等で費用削減を図っている方も多いと思います。</p><p>私の現場でも費用削減の一環として、先日Jenkinsで使用している<a href="https://www.jenkins.io/blog/2020/06/18/terminology-update/">エージェントノード</a>(※1)をオンデマンドインスタンスからスポットインスタンスに移行しました。</p><p>※1:昨今の<code>マスター</code>や<code>スレーブ</code>といったプログラミング用語置き換えの流れにより、Jenkinsもマスターノードをコントローラーノード、スレーブノードをエージェントノードへと改名したようです。</p><p>今回は移行時に工夫した点を紹介いたします。</p><h1 id="環境-x2F-構成"><a href="#環境-x2F-構成" class="headerlink" title="環境&#x2F;構成"></a>環境&#x2F;構成</h1><ul><li>コントローラーノード<ul><li>OS:CentOS Linux release 7.7.1908 (Core)</li><li>Jenkins: 2.190</li><li>EC2 Plugin: 1.50.3</li></ul></li><li>エージェントノード<ul><li>OS:CentOS Linux release 7.7.1908 (Core)</li><li>openjdk:1.8.0_232</li></ul></li></ul><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>まず、元々オンデマンドインスタンスで動かしていたジョブについて説明します。</p><p>対象のジョブではプロジェクト開発支援のため日々ソースファイル解析が行われていました。<br>解析対象ソースはSubversionで管理されており、以下のような課題がありました。</p><ul><li>取得処理の課題<ul><li>svnリポジトリが100超あり、65万ファイル、容量70GBと巨大</li><li>ソース解析の中でファイル間の依存関係解決をするため、常に全量取得する必要がある</li><li>ジョブはソースタイプ毎に分かれているため、ジョブ単位で取得するとストレージが肥大化する</li></ul></li></ul><p>そこで、処理短縮とストレージ節約を図るため、対および実現案を考えました。</p><ul><li>対策<ul><li>svn checkoutしたワーキングディレクトリを保持してsvn updateにより差分で最新ソース取得し時間を短縮化させる</li><li>svn checkout&#x2F;updateするジョブを1つに制限し、複数ジョブで1つのworkspaceを直接参照する</li></ul></li><li>実現案<ol><li><a href="https://plugins.jenkins.io/shared-workspace/">Shared Workspace Plugin</a>(※2)を使って各ジョブで共有<ul><li>※2:共有元ジョブのworkspaceををzipに固めてmasterノードに転送、共有先ジョブではmasterから転送してzip解凍するJenkinsプラグイン</li></ul></li><li><a href="https://plugins.jenkins.io/copyartifact/">Copy Artifact Plugin</a>(※3)を使ってworkspaceを成果物保存して各ジョブでコピー<ul><li>※3:ジョブで作られたファイルを成果物としてmasterノードに転送、共有先ジョブではmasterから転送するJenkinsプラグイン</li></ul></li><li>1つのsvn checkout&#x2F;updateジョブのworkspaceをs3に転送して永続化、次回実行時はs3から取得してsvn update実行</li><li>エージェントノード（オンデマンドインスタンス）でsvn checkout状態をEBSに永続化<ul><li>オンデマンドインスタンスはジョブ実行時のみ起動・停止</li></ul></li></ol></li></ul><p>1,2は大量ファイルの場合転送コストが大きく、ストレージもジョブごとに消費するためコストメリットがなく却下。</p><p>3も1,2と同様転送コストが大きいことに加えSCMポーリングとの相性が悪いため却下。</p><p>4のオンデマンドインスタンス方式を採用していました。</p><h1 id="スポットインスタンスへの移行"><a href="#スポットインスタンスへの移行" class="headerlink" title="スポットインスタンスへの移行"></a>スポットインスタンスへの移行</h1><p>その後もオンデマンドインスタンスで運用していましたが、冒頭の通り費用削減の一環でスポットインスタンス移行を検討することとなりました。</p><p>結果、費用削減の他にもメリットがあることを確認し、本格的に移行する流れとなりました。</p><h2 id="主なメリット"><a href="#主なメリット" class="headerlink" title="主なメリット"></a>主なメリット</h2><h3 id="費用削減"><a href="#費用削減" class="headerlink" title="費用削減"></a>費用削減</h3><p>インスタンスクラスにもよりますが、オンデマンドインスタンスと比較して約70%の割引を受けることができます。<br>参考:<a href="https://www.stylez.co.jp/columns/how_to_use_spot_instances_to_reduce_aws_costs/">AWSコスト削減のためのスポットインスタンス活用術</a></p><p>また、オンデマンド・スポット共通ですが、高負荷な処理にエージェントノードを使うことでマスターノードのインスタンスタイプを小さくして運用することができます。</p><p>つまり、コスト削減と高パフォーマンスの両取りが可能です。</p><h3 id="構成のシンプル化"><a href="#構成のシンプル化" class="headerlink" title="構成のシンプル化"></a>構成のシンプル化</h3><p>現在の構成では起動&#x2F;停止ジョブでエージェントノード（オンデマンドインスタンス）を制御する必要がありました。</p><p>しかし移行後の構成では<a href="https://plugins.jenkins.io/ec2/">Amazon EC2 Plugin</a>(※4)でエージェントノード（スポットインスタンス）を制御できるため、構成がシンプルになりました。</p><p>※4:ジョブ実行時に自動でEC2を作成し、エージェントノードとして使用できるようにするプラグイン。EC2はジョブ終了後に自動で終了される。</p><ul><li>現在の構成（ジョブによるエージェントノード制御）<img src="/images/20230315a/image.png" alt="image.png" width="1200" height="68" loading="lazy"></li><li>移行後の構成（Amazon EC2 Pluginによるエージェントノード制御）<img src="/images/20230315a/image_2.png" alt="image.png" width="1154" height="154" loading="lazy"></li></ul><h3 id="リタイアメント対応が不要"><a href="#リタイアメント対応が不要" class="headerlink" title="リタイアメント対応が不要"></a>リタイアメント対応が不要</h3><p>スポットインスタンスはジョブ実行毎に作成&#x2F;終了されるため、オンデマンドインスタンスで意識する必要のあったEC2リタイアメント対応が不要となりました。</p><p>参考:<a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/instance-retirement.html">インスタンスのリタイア</a></p><h1 id="実装のポイント"><a href="#実装のポイント" class="headerlink" title="実装のポイント"></a>実装のポイント</h1><p>checkout状態をEBSで永続化する構成のため、スポットインスタンスの場合は起動時にEBSをアタッチさせる必要があります。なお起動時のEBSアタッチについては起動テンプレートを使う方法がAWS公式から案内されています。</p><p>参考：<a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/ec2-linux-spot-instance-attach-ebs-volume/">起動時に永続的なセカンダリ EBS ボリュームを新しい EC2 Linux スポットインスタンスに自動的に添付するにはどうすればよいですか。</a></p><p>当初、Amazon EC2 Pluginに起動テンプレートを指定してスポットインスタンスを動かせれば、と考えたのですが、<strong>プラグインが起動テンプレートに対応していませんでした。</strong></p><p>そこで起動テンプレート以外の方法を探り、最終的に<strong>同プラグインのinit scriptにEBSアタッチ処理を組み込んで実現できるか</strong>確認することとしました。</p><h2 id="init-scriptについて"><a href="#init-scriptについて" class="headerlink" title="init scriptについて"></a>init scriptについて</h2><p>init scriptではスポットインスタンス起動時に実行したい処理をshellで書くことができます。<br>今回は以下の通りとしました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 初期化</span></span><br><span class="line">INSTANCE_ID=</span><br><span class="line">UUID=</span><br><span class="line"></span><br><span class="line"><span class="comment">## EBSアタッチ</span></span><br><span class="line">INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$&#123;INSTANCE_ID&#125;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    aws ec2 attach-volume --volume-id &lt;ボリュームID&gt; --device /dev/sdb --instance-id <span class="variable">$&#123;INSTANCE_ID&#125;</span> --region ap-northeast-1</span><br><span class="line">    <span class="built_in">sleep</span> 10</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## /dataマウント</span></span><br><span class="line">UUID=$(lsblk -f | grep nvme1n1 | sed -e <span class="string">&#x27;s/ \+/ /g&#x27;</span> |<span class="built_in">cut</span> -f 3 -d <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$&#123;UUID&#125;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    sudo mount UUID=<span class="variable">$&#123;UUID&#125;</span> /data</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## マウント確認</span></span><br><span class="line"><span class="keyword">if</span> ! mountpoint /data; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>順に解説します。</p><ul><li>EBSアタッチ処理<br><code>http://169.254.169.254/latest/meta-data/instance-id</code>(※5)でインスタンスIDを取得し、後続のEBSアタッチ処理に渡しています。<br>&lt;ボリュームID&gt;にはアタッチしたいEBSを指定します。また、sleep 10によりEBSアタッチが未完了のまま次処理に進むことを防いでいます。<br>  ※5:<code>169.254.169.254</code>はAWSインスタンスメタデータサービスの固定IPです。<br>参考：<a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html">インスタンスメタデータの取得</a><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## EBSアタッチ</span></span><br><span class="line">INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$&#123;INSTANCE_ID&#125;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    aws ec2 attach-volume --volume-id &lt;ボリュームID&gt; --device /dev/sdb --instance-id <span class="variable">$&#123;INSTANCE_ID&#125;</span> --region ap-northeast-1</span><br><span class="line">    <span class="built_in">sleep</span> 10</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li>EBSをjenkins_homeのパスにマウント<br>EBSのデバイス名には規則があり、追加順に<code>/dev/nvme[0-26]n1</code>で採番されていきます。<br>参考：<a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/nvme-ebs-volumes.html">Linux インスタンスの Amazon EBS および NVMe</a><br>ルートボリュームのデバイス名は<code>/dev/nvme0n1</code>のため、今回のアタッチ分は<code>/dev/nvme1n1</code>となります。また、今回はjenkins_homeのパスを<code>/data/jenkins_home</code>としたいため、<code>/data</code>配下をマウントしました。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## /dataマウント</span></span><br><span class="line">UUID=$(lsblk -f | grep nvme1n1 | sed -e <span class="string">&#x27;s/ \+/ /g&#x27;</span> |<span class="built_in">cut</span> -f 3 -d <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$&#123;UUID&#125;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    sudo mount UUID=<span class="variable">$&#123;UUID&#125;</span> /data</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## マウント確認</span></span><br><span class="line"><span class="keyword">if</span> ! mountpoint /data; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="スポットインスタンスへの変更"><a href="#スポットインスタンスへの変更" class="headerlink" title="スポットインスタンスへの変更"></a>スポットインスタンスへの変更</h1><p>実際にエージェントノードをスポットインスタンスに変更し、想定通りの動きとなるか確認しました。</p><p>変更に伴い発生した作業を記載します。</p><h2 id="AWS"><a href="#AWS" class="headerlink" title="AWS"></a>AWS</h2><h3 id="エージェントノード用のIAM-Role作成"><a href="#エージェントノード用のIAM-Role作成" class="headerlink" title="エージェントノード用のIAM Role作成"></a>エージェントノード用のIAM Role作成</h3><p>エージェントノード内でEBSのアタッチを行うため、ec2:AttachVolume権限を付与したIAM Roleを作成しました。</p><h3 id="エージェントノード用のセキュリティグループ作成"><a href="#エージェントノード用のセキュリティグループ作成" class="headerlink" title="エージェントノード用のセキュリティグループ作成"></a>エージェントノード用のセキュリティグループ作成</h3><p>エージェントノード立ち上げ時、コントローラーノードからエージェントノードへssh接続する処理があるため、エージェントノードにSSH(22)を許可したセキュリティグループが必要となります。<br>今回は元々使用していたセキュリティグループを流用しました。</p><h3 id="エージェントノード用のAMI作成"><a href="#エージェントノード用のAMI作成" class="headerlink" title="エージェントノード用のAMI作成"></a>エージェントノード用のAMI作成</h3><p>以下1~4を実施してAMIを作成しました。</p><h4 id="1-Javaのインストール"><a href="#1-Javaのインストール" class="headerlink" title="1. Javaのインストール"></a>1. Javaのインストール</h4><p>エージェントノードは起動時にslave.jarを実行するためインストールしました。</p><h4 id="2-AWS-CLIのインストール"><a href="#2-AWS-CLIのインストール" class="headerlink" title="2. AWS CLIのインストール"></a>2. AWS CLIのインストール</h4><p>AWS CLIコマンドでEBSをアタッチするためインストールしました。</p><h4 id="3-ジョブ実行用ユーザ作成"><a href="#3-ジョブ実行用ユーザ作成" class="headerlink" title="3. ジョブ実行用ユーザ作成"></a>3. ジョブ実行用ユーザ作成</h4><p>デフォルトユーザ（例:AL2ならec2-user）が使えるため作成しなくても良いのですが、既存のエージェントノードでjenkinsという専用ユーザを用意していたため今回も踏襲して作成しました。</p><h4 id="4-visudo編集"><a href="#4-visudo編集" class="headerlink" title="4. visudo編集"></a>4. visudo編集</h4><p>ジョブ実行ユーザがNOPASSWDでmountコマンドを実行できるようにするため設定しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenkins    ALL=(ALL)       NOPASSWD: /usr/bin/mount</span><br></pre></td></tr></table></figure><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><h3 id="EC2-Pluginインストール"><a href="#EC2-Pluginインストール" class="headerlink" title="EC2 Pluginインストール"></a>EC2 Pluginインストール</h3><p>jenkinsにAmazon EC2 Pluginをインストールしておきます。</p><h3 id="エージェントノードの起動設定"><a href="#エージェントノードの起動設定" class="headerlink" title="エージェントノードの起動設定"></a>エージェントノードの起動設定</h3><p>「Jenkinsの管理 → システムの設定」のクラウド項目で「Amazon EC2」を選択すると表示されます。<br>今回は意識して設定した項目を抜粋します。</p><ul><li><p><strong>AMI ID</strong></p><ul><li>上述の手順で作成したエージェント用のAMIを設定しました。</li></ul></li><li><p><strong>Instance Type</strong></p><ul><li>エージェントを起動するインスタンスタイプを設定します。<br>今回は変更前と同タイプにしました。</li></ul></li><li><p><strong>Use Spot Instance</strong></p><ul><li>スポットインスタンスで起動させるためチェックを入れました。</li></ul></li><li><p><strong>Spot Max Bid Price</strong></p><ul><li>スポットインスタンス起動に許容できる最高価格を設定します。<br>今回はできるだけ中断のリスクを避けたかったためデフォルト（オンデマンドインスタンスの価格）としました。</li></ul></li><li><p><strong>Security group names</strong></p><ul><li>エージェントノード用のセキュリティグループを設定しました。</li></ul></li><li><p><strong>Remote FS root</strong></p><ul><li>エージェントノードのjenkins_homeとなるパスを設定します。<br>今回はアタッチするEBSを&#x2F;data配下にマウントするため、<code>/data/jenkins_home/</code>としました。</li></ul></li><li><p><strong>Remote user</strong></p><ul><li>エージェントノードにログインするユーザを設定します。今回はjenkinsユーザとしました。</li></ul></li><li><p><strong>Labels</strong></p><ul><li>一意なラベルを設定します。ここで指定したラベルを後述のジョブで設定します。</li></ul></li><li><p><strong>Init script</strong></p><ul><li>EBSアタッチ処理を記載します。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 初期化</span></span><br><span class="line">INSTANCE_ID=</span><br><span class="line">UUID=</span><br><span class="line"></span><br><span class="line"><span class="comment">## EBSアタッチ</span></span><br><span class="line">INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$&#123;INSTANCE_ID&#125;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    aws ec2 attach-volume --volume-id &lt;ボリュームID&gt; --device /dev/sdb --instance-id <span class="variable">$&#123;INSTANCE_ID&#125;</span> --region ap-northeast-1</span><br><span class="line">    <span class="built_in">sleep</span> 10</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## /dataマウント</span></span><br><span class="line">UUID=$(lsblk -f | grep nvme1n1 | sed -e <span class="string">&#x27;s/ \+/ /g&#x27;</span> |<span class="built_in">cut</span> -f 3 -d <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$&#123;UUID&#125;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    sudo mount UUID=<span class="variable">$&#123;UUID&#125;</span> /data</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## マウント確認</span></span><br><span class="line"><span class="keyword">if</span> ! mountpoint /data; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number of Executors</strong></p><ul><li>ジョブの並列度を指定します。今回は変更前と同じとしています。</li></ul></li><li><p><strong>IAM Instance Profile</strong></p><ul><li>エージェントノード用に作成したIAM Roleを設定しました。</li></ul></li></ul><h3 id="ジョブの設定"><a href="#ジョブの設定" class="headerlink" title="ジョブの設定"></a>ジョブの設定</h3><p>ジョブの設定 → 実行するノードを制限からさきほど設定したラベルを指定します。</p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>スポットインスタンスがEBSアタッチされた状態でエージェントノードとして起動するかを確認します。<br>なお一部情報はマスクしています。</p><ul><li>まずログからスポットインスタンスが立ち上がることを確認します。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2 21, 2023 2:48:02 午後 情報 hudson.plugins.ec2.EC2Cloud<span class="variable">$1</span> call</span><br><span class="line">SlaveTemplate&#123;ami=<span class="string">&#x27;&lt;AMI ID&gt;&#x27;</span>, labels=<span class="string">&#x27;&lt;ラベル名&gt;&#x27;</span>&#125; Node EC2 (&lt;エージェントノード名&gt;) - &lt;インスタンス名&gt; (&lt;インスタンスID&gt;) moved to RUNNING state <span class="keyword">in</span> 5 seconds and is ready to be connected by Jenkins</span><br><span class="line">2 21, 2023 2:48:03 午後 情報 hudson.plugins.ec2.EC2RetentionStrategy start</span><br><span class="line">Start requested <span class="keyword">for</span> EC2 (&lt;エージェントノード名&gt;) - &lt;インスタンス名&gt; (&lt;インスタンスID&gt;)</span><br><span class="line">2 21, 2023 2:48:03 午後 情報 hudson.plugins.ec2.EC2Cloud <span class="built_in">log</span></span><br><span class="line">Launching instance: &lt;インスタンスID&gt;</span><br></pre></td></tr></table></figure><ul><li>立ち上がった段階ではルートボリュームのみ存在しています。<img src="/images/20230315a/2023-02-21_14h48_27.png" alt="2023-02-21_14h48_27.png" width="1200" height="325" loading="lazy"></li><li>サーバ上でもルートボリューム（<code>/dev/nvme0n1p1</code>）のみであることが確認できます。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[jenkins@&lt;インスタンス名&gt; ~]$ <span class="built_in">df</span> -h</span><br><span class="line">ファイルシス   サイズ  使用  残り 使用% マウント位置</span><br><span class="line">devtmpfs          16G     0   16G    0% /dev</span><br><span class="line">tmpfs             16G     0   16G    0% /dev/shm</span><br><span class="line">tmpfs             16G   17M   16G    1% /run</span><br><span class="line">tmpfs             16G     0   16G    0% /sys/fs/cgroup</span><br><span class="line">/dev/nvme0n1p1    30G   24G  6.1G   80% /</span><br><span class="line">tmpfs            3.1G     0  3.1G    0% /run/user/1101</span><br></pre></td></tr></table></figure></li></ul></li><li>SSH接続後、init scriptが実行されます。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2 21, 2023 2:48:18 午後 情報 hudson.plugins.ec2.EC2Cloud <span class="built_in">log</span></span><br><span class="line">Connected via SSH.</span><br><span class="line">2 21, 2023 2:48:18 午後 情報 hudson.plugins.ec2.EC2Cloud <span class="built_in">log</span></span><br><span class="line">Creating tmp directory (/tmp) <span class="keyword">if</span> it does not exist</span><br><span class="line">2 21, 2023 2:48:18 午後 情報 hudson.plugins.ec2.EC2Cloud <span class="built_in">log</span></span><br><span class="line">Executing init script</span><br></pre></td></tr></table></figure><ul><li>このタイミングで追加するEBSのアタッチを確認できます。<img src="/images/20230315a/2023-02-21_14h48_44.png" alt="2023-02-21_14h48_44.png" width="1200" height="355" loading="lazy"></li><li>サーバ上でも追加したEBSがデバイス<code>/dev/nvme1n1</code>として<code>/data</code>にマウントされました。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[jenkins@&lt;インスタンス名&gt; ~]$ <span class="built_in">df</span></span><br><span class="line">ファイルシス   1K-ブロック     使用   使用可 使用% マウント位置</span><br><span class="line">devtmpfs          16128016        0 16128016    0% /dev</span><br><span class="line">tmpfs             16152604        0 16152604    0% /dev/shm</span><br><span class="line">tmpfs             16152604    16940 16135664    1% /run</span><br><span class="line">tmpfs             16152604        0 16152604    0% /sys/fs/cgroup</span><br><span class="line">/dev/nvme0n1p1    31445996 25533000  5912996   82% /</span><br><span class="line">tmpfs              3230524        0  3230524    0% /run/user/1101</span><br><span class="line">tmpfs              3230524        0  3230524    0% /run/user/1301</span><br><span class="line">tmpfs              3230524        0  3230524    0% /run/user/0</span><br><span class="line">/dev/nvme1n1     104832000 62866356 41965644   60% /data</span><br></pre></td></tr></table></figure></li></ul></li><li>最後に<code>java  -jar /tmp/remoting.jar -workDir /data/jenkins_home/</code>が実行され、スポットインスタンスの起動を確認できました。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2 21, 2023 2:48:32 午後 情報 hudson.plugins.ec2.EC2Cloud <span class="built_in">log</span></span><br><span class="line">Copying remoting.jar to: /tmp</span><br><span class="line">2 21, 2023 2:48:32 午後 情報 hudson.plugins.ec2.EC2Cloud <span class="built_in">log</span></span><br><span class="line">Launching remoting agent (via SSH client process): ssh -o StrictHostKeyChecking=no -i /tmp/ec2_8484693589346546536.pem jenkins@&lt;エージェントノードIP&gt; -p 22  java  -jar /tmp/remoting.jar -workDir /data/jenkins_home/</span><br><span class="line">2 21, 2023 2:48:37 午後 情報 hudson.slaves.CommandLauncher launch</span><br><span class="line">agent launched <span class="keyword">for</span> EC2 (&lt;エージェントノード名&gt;) - &lt;インスタンス名&gt; (&lt;インスタンスID&gt;)</span><br></pre></td></tr></table></figure></li></ul><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>Amazon EC2 Pluginはinit scriptで自由に構成を変えられるので、ベースとなるAMIが一つで済むのも強みだと思いました。</p><p>また、今回は処理を直接init scriptに書きましたが、以下の方式にすれば処理内容をgitで管理することもできそうです。</p><ol><li>git管理している実行ファイルをgit clone</li><li>git cloneした実行ファイルを呼び出す</li></ol><p>今回の検証を足掛かりにし、引き続き構成改善をしていこうと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Jenkins/">Jenkins</category>
      
      <category domain="https://future-architect.github.io/tags/ebs/">ebs</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%83%9D%E3%83%83%E3%83%88%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9/">スポットインスタンス</category>
      
      
      <comments>https://future-architect.github.io/articles/20230315a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2023年 フューチャー技術ブログ連載の企画スケジュール </title>
      <link>https://future-architect.github.io/articles/20230314a/</link>
      <guid>https://future-architect.github.io/articles/20230314a/</guid>
      <pubDate>Mon, 13 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230314a/board-ge3fc44724_640.jpg&quot; alt=&quot;board-ge3fc44724_640.jpg&quot; width=&quot;640&quot; height=&quot;427&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230314a/board-ge3fc44724_640.jpg" alt="board-ge3fc44724_640.jpg" width="640" height="427" loading="lazy"><p>2023年に計画している、ブログ連載のスケジュールを紹介します。</p><h2 id="連載計画を発表する背景"><a href="#連載計画を発表する背景" class="headerlink" title="連載計画を発表する背景"></a>連載計画を発表する背景</h2><p><a href="/articles/20210112/">2021年</a>、<a href="/articles/20220117a/">2022年</a>の記事でも説明しましたが、あらためてまとめます。</p><ul><li>募集が開催の1~3ヶ月ほぼ前で準備期間が短いため、すでにネタがある人しか参加できなくなりがち<ul><li>本当はもっと初心者の方でも参加できるようにするため、事前に告知しておきたい</li></ul></li><li>参加者募集のアナウンス強化<ul><li>まったくメールを見ない（私です）人もいれば、Slack,Google Chatをみない人など様々なので、チャネルを増やしてヒット率を上げたい</li></ul></li><li>寄稿者の幅を広げたい<ul><li>リモートワークになってからの他チームにジョインしたメンバーなどに少しでも届くように</li><li>スケジュールをSlack、Google Chatでリマインドしても見逃しがちなのと、ふとした瞬間にググって見つけられるようにする</li></ul></li><li>企画が増えてくると、寄稿者を募集するスケジューリングが忘れがちになるため備忘にしたい<ul><li>スプレッドシート管理はファイルがどこにいったか分からなくなりがち</li></ul></li><li>「こういった連載テーマはどうか？」といったフィードバックを得られるように<ul><li>ケーパビリティの限界はありますが、社内、社外問わず、様々な需要に応えていきたいと思っています</li></ul></li><li>実施の振り返りに<ul><li>予実管理として、当初見込んだ企画の遂行率を見れるように</li></ul></li></ul><p>昨年は11月予定だったPython 3.11連載をやり切れず（秋のブログ週間で息切れ）、同月のTerraform連載も開催できずだった1割ほどは計画未達でした。年末はBPYは評価シーズンなど当社に取って繁忙期なので、11月にイベントを重ねないように注意しないと、という学びを得ました。</p><h2 id="2023年の計画"><a href="#2023年の計画" class="headerlink" title="2023年の計画"></a>2023年の計画</h2><p>2023年にはじめて開催する連載は初心者マーク（🔰）を付けてみました。CNCF連載は3年ぶり、Python連載は2年ぶりの開催予定です。2022年に初めて行ったGIS連載は2連続で開催。昨年まで行っていた電子工作&#x2F;IoT連載は今年はスキップの予定です。</p><div class="scroll"><table><thead><tr><th>Month</th><th>Title</th><th>Memo</th><th>Link</th></tr></thead><tbody><tr><td>1月</td><td>Go1.20</td><td>Go言語のリリースノートからテーマをピックアップして深堀りする連載</td><td><a href="/articles/20230123a/">Go1.20</a></td></tr><tr><td>2月</td><td>🔰読書感想文</td><td>積読を消化するためにみんなで書評を書く</td><td><a href="/articles/20230217a/">2023</a></td></tr><tr><td>3月</td><td>🔰Terraform 1.4 リリース記念</td><td>Terraform 1.4リリースを記念にTerraform全般でネタを書く</td><td>2023</td></tr><tr><td>4月</td><td>春の入門祭り</td><td>初心者向けに入門記事を書いてみようという連載</td><td>2023、<a href="/articles/20220418a/">2022</a>、<a href="/articles/20210414a/">2021</a>、<a href="/articles/20200529/">2020</a></td></tr><tr><td>5月</td><td>CNCF連載</td><td>Cloud Native Computing Foundationやプロダクトについて</td><td>2023、<a href="/articles/20200928">2020</a></td></tr><tr><td>6月</td><td>地図・GIS・位置特定に関する連載</td><td>住所、地図、地理、GIS、位置特定などについての連載</td><td>2023、<a href="/articles/20220719a/">2022</a></td></tr><tr><td>7月</td><td>Go1.21</td><td>Go言語のリリースノートからテーマをピックアップして深堀りする連載</td><td>Go1.21</td></tr><tr><td>8月</td><td>夏休み自由研究</td><td>夏休みに行った自由研究と銘うって、個人的に関心があることを深堀りして調べる連載</td><td>2023、<a href="/articles/20220822a/">2022</a>、<a href="/articles/20210823a/">2021</a>、<a href="/articles/20200726/">2020</a></td></tr><tr><td>9月</td><td>🔰ETL連載</td><td>ETL (Extract, Transform, Load)についての設計、実装手法や、関連するミドルウェア、ライブラリ、サービスについて</td><td>2023</td></tr><tr><td>10月</td><td>秋のブログ週間</td><td>秋の夜長に楽しめるように、いつもより文章が多めな読み物、エッセーを集める</td><td>2023、<a href="/articles/20221031a/">2022</a>、<a href="/articles/20211027a/">2021</a>、<a href="/articles/20201026/">2020</a></td></tr><tr><td>11月</td><td>Python 3.12 リリース記念</td><td>Python 3.12リリース記念で、Python全般についての連載</td><td>2023、<a href="/articles/20210927b/">2021</a></td></tr><tr><td>12月</td><td>アドベントカレンダー</td><td>Qiitaさんのアドベントカレンダーのイベントに乗っかる連載</td><td><a href="https://qiita.com/advent-calendar/2022/future">2022</a>、<a href="https://qiita.com/advent-calendar/2021/future">2021</a>、<a href="https://qiita.com/advent-calendar/2020/future">2020</a>、<a href="https://qiita.com/advent-calendar/2019/future">2019</a>、<a href="https://qiita.com/advent-calendar/2017/future">2018</a>、<a href="https://qiita.com/advent-calendar/2017/future">2017</a>、<a href="https://qiita.com/advent-calendar/2016/future">2016</a>、<a href="https://qiita.com/advent-calendar/2015/future">2015</a></td></tr></tbody></table></div><p>新しい風を入れつつ、春・夏・秋などの定番企画は引き続き開催しようと思っています。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>これまでの経緯を踏まえテーマをブラッシュアップしています。2022年も皆様にとって有益な情報発信を活発にしていきますので、応援よろしくおねがいします！</p><p>社員の皆さんへ：</p><p><a href="/articles/20200908/">フューチャー技術ブログで行っている連載企画が良いよって話</a> でも記載しましたが、読み手にとっても、書き手にとっても色々とメリットがあります。引き継ぎ資料としても有用です。セルフブランディングとしても重要ですし、評価される立派な業務活動です。興味があるけどブログに載せるほどのネタになるか不安という声はよく聞きます。どういうレベル感の記事を書くべきかにも相談を承っています。ハードルは限りなく低いので、DMなどで連絡いただけるとです。お気軽に参加いただけるとです。だいたい2～4週間前に寄稿者募集を投げるためレスポンスをいただけると助かります。チャージコードを用意してお待ちしています。</p><p>アイキャッチ画像は、<a href="https://pixabay.com/ja/users/skitterphoto-324082/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=761586">Rudy and Peter Skitterians</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=761586">Pixabay</a>を利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/TechBlog/">TechBlog</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/">運営</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB/">スケジュール</category>
      
      
      <comments>https://future-architect.github.io/articles/20230314a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【エネルギー業界】国家資格「高圧ガス第二種販売主任者」合格までの道のり</title>
      <link>https://future-architect.github.io/articles/20230313a/</link>
      <guid>https://future-architect.github.io/articles/20230313a/</guid>
      <pubDate>Sun, 12 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは。&lt;br&gt;フューチャー株式会社TIG&amp;#x2F;EX（Energy Transformation）ユニットの久保 樹礼（くぼ</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは。<br>フューチャー株式会社TIG&#x2F;EX（Energy Transformation）ユニットの久保 樹礼（くぼ たつあき）です。</p><p>私は2017年フューチャーに新卒入社し、これまでメディア業・アパレル業・防災事業にわたりパートナー企業様の事業効率化・拡大に携わってきましたが、昨年より総合エネルギー業の企業様とご一緒させていただいております。2022年度は、フューチャーの従業員代表も努めさせていただきました。（<a href="https://note.future.co.jp/n/n17eabb81ba94">従業員代表活動記事はこちら</a>）</p><p>そんな私が、2023年1月にLPガス小売業では必須と言える国家資格「<strong>高圧ガス第二種販売主任者</strong>」に合格したので、なぜITコンサルタントである私が本資格取得に挑戦したのか、資格取得に向けどのように勉強したのかご紹介します。</p><p>第二種販売主任者免状取得に向けて、挑戦しようとしている方の参考になると嬉しいです。</p><img src="/images/20230313a/高圧ガス販売主任者第二種合格通知書.png" alt="高圧ガス販売主任者第二種合格通知書.png" width="1200" height="630" loading="lazy"><p>参考までに：</p><p>高圧ガス販売主任者免状には、「第一種」と本記事で紹介する「第二種」があります。第二種は、LPガスの販売に係る保安の実務を含む統括的な業務を行う方に必要な免状です。一方で、第一種はLPガス以外の高圧ガス（詳細は<a href="https://elaws.e-gov.go.jp/document?lawid=341M50000400053#Mp-At_72">一般則第七十二条</a>参照）を対象としています。ガスの種類の違いなので、一種・二種に上下関係などはありません。</p><h1 id="「高圧ガス第二種販売主任者」受験の動機"><a href="#「高圧ガス第二種販売主任者」受験の動機" class="headerlink" title="「高圧ガス第二種販売主任者」受験の動機"></a>「高圧ガス第二種販売主任者」受験の動機</h1><p>第二種販売主任者受験の動機は、パートナー企業様の現場や実務をより詳しく知りたいと考えたからです。<br>当然、経営とITをデザインするフューチャーですから、パートナー企業様の実務に詳しいですが”まだ足りない!!!”と感じたからです（笑</p><p>私は昨年より、総合エネルギー事業を営むパートナー企業様と共に、LPガス託送の配送最適化に挑戦しています。<br>その中で、実際にLPガスの充填基地に訪れ、ボンベを担がせていただいたり、配送員の方々と会話させていただいたりと現場に触れる機会をいただきました。</p><p>しかし配送最適化に向けた議論をパートナーと重ねる中で、自身の配送現場の理解不足をしばしば痛感していました。</p><img src="/images/20230313a/充填場訪問.png" alt="充填場訪問.png" width="1200" height="630" loading="lazy"><p>そんな最中、現場担当者様と会話させていただいた折、「IT知っている人はすごいと思う。私も自身の業務を動かしているシステムがどうやって作られているのか、理解を深めようとITパスポート挑戦してみたが本当に難しいと実感した」とおっしゃられていました。</p><p>私が現場の知識を求める一方で、配送現場の方もこちら（IT）の理解を深めたいと必死なことを改めて認識し、この方と同じレベルで託送について語りたい！と思いました。LPガス現場の方々と同じ視点で語るためには、何が必要か、どんな手段があるかと調べた時に見つけたのが国家資格「高圧ガス第二種販売主任者」でした。</p><p>本資格合格後に得られる「第二種販売主任者免状」は、パートナー企業様社員や、LPガス小売業社員であれば皆保有している資格です。私は「高圧ガス第二種販売主任者」資格取得に挑戦することで、より深い知見を習得し、またパートナー様と同じ目線で会話したい思い受験しました。</p><p>第二種販売主任者免状を得ると、LPガスの販売事業所の統括的な業務主任者に選任されることができます。</p><p>業務主任者に選任されるためには、免状を取得していることの他に高圧ガスの販売に関する実務経験を６ヶ月必要としますが、条件を満たすことでLPガス販売事業では欠かせない人材となることができます。</p><blockquote><p>LPガスの販売事業所において、LPガスの販売に係る保安の実務を含む統括的な業務を行う方に必要な資格で、工業用のLPガスの販売主任者（高圧ガス保安法）として、また、一般家庭等で生活の用に供するLPガスを販売するLPガス販売所の業務主任者又は業務主任者の代理者（液化石油ガス法）として選任されることができ、LPガスの販売に関する保安に携わることができます。</p><blockquote><p>引用元：<a href="https://www.khk.or.jp/qualification/national_qualification/examination/examination_range.html">高圧ガス保安協会＞国家資格の概要及び職務範囲</a></p></blockquote></blockquote><h1 id="実施した勉強方法"><a href="#実施した勉強方法" class="headerlink" title="実施した勉強方法"></a>実施した勉強方法</h1><p>私が実施した勉強方法は以下です。</p><ul><li>高圧ガス保安法の熟読（<a href="https://elaws.e-gov.go.jp/document?lawid=326AC0000000204">E-GOV</a>というサイトから）</li><li>液化石油ガス法関係法令の熟読（<a href="https://elaws.e-gov.go.jp/document?lawid=342AC0000000149">E-GOV</a>というサイトから）</li><li>講習テキストの熟読</li><li>過去問５年分の実施</li></ul><img src="/images/20230313a/高圧ガス販売主任者第二種-学習ツール.png" alt="高圧ガス販売主任者第二種-学習ツール.png" width="1200" height="630" loading="lazy"><p>高圧ガス販売主任者第二種試験は、法令・保安管理がありそれぞれ60点以上で合格となります。</p><p>法令試験問題では、高圧ガス保安法・液化石油ガス法関係法令があり、法の目的や対象範囲、法の各項目に対する問題です。</p><p>保安管理技術試験問題では、LPガス販売に係る保安技術に対する問題です。</p><p>例えば法令では、以下の記述が正しいかどうかの判断。</p><blockquote><p>高圧ガス保安法は、高圧ガスによる災害を防止して公共の安全を確保する目的のため、高圧ガスの製造、貯蔵、販売、移動及び移動を規制することのみを定めている。</p></blockquote><p>例えば保安管理技術では、以下の記述が正しいかどうかの判断。</p><blockquote><p>マイコンメータSは、遮断弁の復帰操作を行った後、マイコンメータより下流のガス漏れをチェックし、ガス漏れを検知した場合に再遮断する機能を有している。</p></blockquote><p>のような出題形式です。具体的には各問に対し、記述が（イ）（ロ）（ハ）（ニ）と用意され、どの記述が正しいのか組み合わせを選択する（例：イ、ハ）形です。</p><p>試験の難易度は、私の所感では一夜漬けや１週間程度の学習では到底合格できないと感じるレベル感でした。<br>私の場合は、パートナー企業の方から誰でも合格するレベルの問題と伺っていたため、学習に入ったのが試験から２ヶ月ほど前からでしたが、かなり苦労しました。おそらく実際にLPガス小売業の現場で働かれている方からすると、現場での知見の量が膨大なため、ある程度簡単に感じるのかもしれません。</p><p>まだ実務経験が十分でない方や、未経験である方は十分な学習期間と覚悟が必要です。</p><p>本受験は年に一度（１１月）のみ実施のため、不合格の場合はまた１年後までお預けです。どうしても合格の確率をあげたい！という方は、事前の講習・試験を受けておくことをおすすめします。講習の受講とその後の試験に合格された方は、第二種試験の際に保安管理技術試験が免除されます。</p><p>令和４年の第二種販売試験の合格率は54.6%だったのですが、通常（法令・保安管理）受験の合格率は <strong>37.0%</strong> 、保安管理技術免除の方々の合格率は90.0%と、合格率が大きく違います。</p><p>たびたび、高圧ガス第二種販売主任者試験の合格率は60%前後と記述されているメディアを見かけますが、講習参加による免除科目を有している方も入れた全受験者の合格率です。</p><p>全科目受験された方の合格率は37.0%であることは、資格勉強へ臨む前に認識しておいた方が良いと思います。</p><img src="/images/20230313a/image.png" alt="image.png" width="1200" height="555" loading="lazy"><p>数値引用：<a href="http://www.khk.or.jp/qualification/national_qualification/announcement/announcement.html">高圧ガス保安協会＞国家試験の合格率の公表</a>（令和４年度の合格率）</p><p>また既に高圧ガスに関する他資格を有する方など、他の免除項目もあるため興味のある方は「<a href="https://www.khk.or.jp/qualification/national_qualification/examination/examination_exemption.html">試験科目一部免除制度</a>」を参考にしてみてください。</p><h1 id="受験振り返りと実務への活用"><a href="#受験振り返りと実務への活用" class="headerlink" title="受験振り返りと実務への活用"></a>受験振り返りと実務への活用</h1><p>私は試験勉強としては約２ヶ月、免除科目なしで挑んだ受験でしたが、正直なところ受験終わりの時点では、合否に自信はありませんでした。</p><p>稀に、ひたすら過去問を解けば合格できる！のような情報を見ますが、今年の試験でも例年出題されていなかった類の問題がありました。過去問を暗記しているだけでは合格できません。実務として普段から高圧ガス周辺に携わっている人でなければ、ある程度の覚悟を持って勉強の臨んだ方が良いと思います。</p><p>理想としては、</p><ul><li>法令（高圧ガス保安法・液化石油ガス法関係法令）全ての理解と暗記。</li><li>講習テキストの内容を全て理解と暗記。</li></ul><p>ただし試験合格を最低限の目的とするならば、</p><ul><li>Step1：法令・講習テキストを流し読み（かなり難しいのでこの時点で全て理解しきらずで大丈夫です）</li><li>Step2：過去問実施</li><li>Step3：過去問回答とその周辺理解のために、再度法令と講習テキストを熟読。<br>Step2~3の繰り返しが効果的と思いました。</li></ul><p>または実際に、LPガス容器やメーターを見に現地に訪れ、具体的なイメージを持つと良いかもしれません。</p><img src="/images/20230313a/image_2.jpg" alt="" width="282" height="176" loading="lazy"><p>引用：<a href="http://www.aichilpg.or.jp/strong/">実は災害に強いLPガス | 愛知県LPガス協会</a></p><p>都市部の場合は都市ガスが普及しているため、LPガス容器を見かけることも少ないかもしれません。地方に出かけた際や、都市部でもラーメン屋や中華屋にもあります。ただし、当然不用意に敷地内へ入ったり、近づいたりしていいものではないため、遠くから眺める程度でお願いします。</p><p>合格後の現在、試験内容を全て理解しているかというと、正直今でもなお法令や講習テキストを日々開いています。実業務で普段から高圧ガス周辺に携わっている人と、試験取得に向けた勉強をした私とでは今もなお理解の深さには大きな差があるのは事実です。</p><p>しかし資格挑戦前と今では、マイコンメータを見かけた際に何号のメータか、マイコンメータSかEかなど目に付く機会が増えました。</p><p>またパートナー企業様と日々会話する中で、何か問題が突き当たった時に「法令の◯◯に触れなかったか、条件があった覚えがある」のように、その勘所は身についたかと思います。パートナー企業様からも「法令にある。久保さん見ておいてよ！」のように、第二種販売主任者免状を取得している信頼から、期待の声も生まれます。</p><p>資格挑戦のきっかけとなった現場担当者様にお伝えしたところ、「次は、液化石油ガス設備士に挑戦と、一緒にLPガス配送回ろう！」とお喜びいただきました。</p><p>IT業界では、担当のシステムについて仕様に詳しくなることは当然ありますが、そのシステムのインプットである現場がどう動いているのか、どんなルールがあるのか、どんな人がどういう手順で働いているのか。現場を抑えた上で、システム仕様を語ることの重要性を改めて感じる機会となりました。</p><p>高圧ガスという危険物を扱うからこそ、試験のための勉強で終わらせず、現場の方と同じ目線・知識であるべきを語り、理想の追及に向けて活用と理解を深めていきたいです。</p><h1 id="EX（Energy-Transformation）ユニット設立"><a href="#EX（Energy-Transformation）ユニット設立" class="headerlink" title="EX（Energy Transformation）ユニット設立"></a>EX（Energy Transformation）ユニット設立</h1><p>エネルギーは国家、経済、産業の礎です。</p><p>しかし昨今、地政学的リスク顕在化によるエネルギー価格の高騰や、安全保障政策の変化、あるいは気候変動など現在進行形で産業構造・経済・社会に大きなパラダイムシフトが起きています。</p><p>フューチャーに2022年11月に発足したEX（Energy Transformation）ユニットに私は所属しています。EXユニットでは最近様々な企業様からお声をいただいております。エネルギーは、その種類から、サプライチェーンの大きさまでとても幅広いテーマで、求められる知見や経験も膨大です。</p><blockquote><p>EX（Energy Transformation）ユニット<br>弊社のTIG（Technology Innovation Group）ではユニット制があり、その中でEXUは、世界の経済活動や安全保障戦略の礎となるエネルギー業界の在り方を、我々そしてクライアントやパートナーと共にテクノロジーを軸に根幹から変革していく組織です。</p></blockquote><p>そんなエネルギー業界が今、急激に変わりつつあります。</p><p>期待をお寄せいただいた企業様に、スピーディかつ大きな価値を提供できるよう、私たちITコンサルタントは深い知見と幅広い技術スキルが必要となります。</p><p>技術に強いITコンサルタント集団のイメージが強いフューチャーですが、私はエネルギー業界の現場から経営、トレンドまで抑えたITコンサルタントを目指しています。</p><p>今後も現場と同じ目線で問題提起し、経営陣とあるべきを追求し、またエネルギー業界のトレンドにアンテナを貼って未来価値を創造していきます。</p><h1 id="エネルギー業界記事一覧"><a href="#エネルギー業界記事一覧" class="headerlink" title="エネルギー業界記事一覧"></a>エネルギー業界記事一覧</h1><ul><li><a href="https://future-architect.github.io/articles/20220519a/">【エネルギー業界】LPガス基礎part1 超入門編</a></li><li><a href="https://future-architect.github.io/articles/20220530a/">【エネルギー業界】LPガス基礎part2 供給設備編</a></li><li><a href="https://future-architect.github.io/articles/20220620a/">【エネルギー業界】LPガス基礎part3 充填編</a></li><li><a href="https://future-architect.github.io/articles/20220630a/">【エネルギー業界】電力基礎知識編</a></li><li><a href="https://future-architect.github.io/articles/20220713a/">【エネルギー業界】LPガス基礎part4 バルク配送入門</a></li></ul><p>p.s.<br>最近はエネルギー×メタバースに興味を持ち、日々情報収集しています。リアルなメタバース空間を実現しようとしている <a href="https://meta-shelf.com/everdome-start/">EVERDOME（エバードーム）プロジェクト</a>は、メタバース空間でのエネルギー活用で何かできないかと期待しています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9/">ビジネス</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%B3%87%E6%A0%BC/">資格</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A5%AD%E7%95%8C%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3/">業界ドメイン</category>
      
      <category domain="https://future-architect.github.io/tags/LP%E3%82%AC%E3%82%B9%E6%A5%AD%E7%95%8C/">LPガス業界</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A8%E3%83%8D%E3%83%AB%E3%82%AE%E3%83%BC%E6%A5%AD%E7%95%8C/">エネルギー業界</category>
      
      <category domain="https://future-architect.github.io/tags/IT%E3%82%B3%E3%83%B3%E3%82%B5%E3%83%AB/">ITコンサル</category>
      
      
      <comments>https://future-architect.github.io/articles/20230313a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>本当は怖い、逆コンウェイ戦略</title>
      <link>https://future-architect.github.io/articles/20230310a/</link>
      <guid>https://future-architect.github.io/articles/20230310a/</guid>
      <pubDate>Thu, 09 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;アーキテクチャの議論でよく出てくるのが、コンウェイの法則と、逆コンウェイ戦略です。これについては、うっかりIT用語をバズらせてしまう達人の&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>アーキテクチャの議論でよく出てくるのが、コンウェイの法則と、逆コンウェイ戦略です。これについては、うっかりIT用語をバズらせてしまう達人の<a href="https://bliki-ja.github.io/ConwaysLaw/">マーチン・ファウラーのブログ</a>にも詳しい説明があります。角さん、いつも翻訳ありがとうございます。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">「逆コンウェイの法則」が持ち出された議論が苦手なんどけど、なんでなのかな。コンウェイの法則はよく理解できるんだがー。</p>&mdash; Kazunori Otani (@katzchang) <a href="https://twitter.com/katzchang/status/1630529667106226176?ref_src=twsrc%5Etfw">February 28, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>この<a href="https://twitter.com/katzchang">@katzchang</a>さんのツイートもそうですが、逆コンウェイ戦略に関しては僕も少しモヤモヤするところが個人的にあり、そのあたりを周りの人（<a href="https://twitter.com/katzchang">@katzchang</a>さんや<a href="https://twitter.com/tokoroten">@tokoroten</a>、<a href="https://twitter.com/__garsue__">@__garsue__</a>氏）と議論したらいろいろ自分が思っていなかった知見も得られたりしたので、まとめてみます。</p><h1 id="コミュニケーションがかえって増える問題"><a href="#コミュニケーションがかえって増える問題" class="headerlink" title="コミュニケーションがかえって増える問題"></a>コミュニケーションがかえって増える問題</h1><p>コンウェイの法則は、1960年代にコンウェイが書いた記事が元になっています。物理的に離れた3箇所で分担してシステムを開発したら、システムも自然とそのチーム構成に合わせたアーキテクチャになってしまったと。それを逆に応用し、分割したいソフトウェアの単位でチームもモジュールも一緒に分割すれば良い、というのが逆コンウェイ戦略（もしくは作戦）です。逆じゃない方は、観測された事実から導きだされたものなので「法則」ですが、逆の方はそれを積極的にプロジェクト運営に活用するためのアクティブな選択なので、「法則」ではなく「戦略」などが用いられているようです。</p><h2 id="モジュール分割の失敗"><a href="#モジュール分割の失敗" class="headerlink" title="モジュール分割の失敗"></a>モジュール分割の失敗</h2><p>マイクロサービスだと、すぐに「逆コンウェイだ」という話が出てくるのですが、適切なモジュール分割の方法は？という話がセットで出てくることがあまりないように思います。これが僕のモヤモヤポイントです。</p><p>ソフトウェアのモジュール分けについては、多くの流儀や方法論があります。最近読んでいていいな、と思っているのは、<a href="https://amzn.to/3SAvM6I">A Philosophy of Software Design</a>の提唱するデザインで、外部との接点が少なくて済む、最小のAPIセットで分けられる単位でモジュールを分けましょう、というものです。正規表現などは内部でステートマシンなど複雑な要素を持っていますが、利用者はパターンを入力し、match&#x2F;search程度の簡単なAPIで利用できます。そのように接点が少なく、中が深いモジュールが良いと述べています。</p><p>この場合、正規表現のステートマシンを開発するチームと、その外のAPIのチームを分けると、大量の接点が生まれてしまい、かえってコミュニケーションが増えてしまいます。チームを分ける＝チームを跨いだコミュニケーションを減らす、という観点では、接点が少ない境界を見つけるのが大切、というのがわかると思います。</p><h2 id="データベース分割の失敗"><a href="#データベース分割の失敗" class="headerlink" title="データベース分割の失敗"></a>データベース分割の失敗</h2><p>あとは、RDB観点の切り方もありますね。DBのテーブルには日々の業務で増えて行くテーブル＝トランザクションと、読み込み専用で変化が少ないデータ＝マスターがあります。テーブル間には外部参照があってJOINをしたりしますが、読み込み専用のマスターは各アプリケーションにコピーを配っても問題ありません。問題はトランザクションです。トランザクションのテーブル同士のJOINが必要なら同じシステムに収めるべきです。JOINが必要がない境界線がうまくひけると、そのモジュール間では複雑な参照はないということになります。1+Nクエリー問題もおそらく減るでしょう。うまく分割できるとシステムの境界でデータベースのインスタンスも一緒に分割できます。インスタンスもモジュールとセットで分けられれば、モジュールの都合でDBスキーマの変更も自由にできることになります。</p><p>一方で、インスタンスの境界とモジュールが一致しないと、システム間で大量の1+Nクエリーを発射する必要がでてきますし、スキーマ変更やら何やらではチーム間の調整が必要になります。こちらも、コミュニケーションがかえって増えるのは想像に難くありません。マイクロサービスなのに、リリースサイクルやデプロイの調整が大変というのがボトルネックになります。</p><h1 id="モジュールをまたいだ改善がやりにくくなる"><a href="#モジュールをまたいだ改善がやりにくくなる" class="headerlink" title="モジュールをまたいだ改善がやりにくくなる"></a>モジュールをまたいだ改善がやりにくくなる</h1><p>マイクロサービスでつくられるが、言語やフレームワークなどのそれぞれの要素技術が違いすぎて、知見が生かせない、という事例も聞いたことがあります。同じようなロジックを、別の言語で別々に実装すると。</p><p>独立した組織に裁量を与えて自由を与えるとその分他の組織と独立した進化を始めてしまいます。<a href="https://logmi.jp/tech/articles/322218">メルカリのマイクロサービス開発</a>は言語の選択はさせないようにして、共通のスターターキットを提供して、アーキテクチャを均質化しているという話がありました。何かしらの横断チームをおいて、良い設計の水平展開は必要ですね。</p><p>また、複数のモジュール間をまたいだ改善が必要な場合には、それぞれ歩調を合わせてやる必要があるため、チーム間の密なコミュニケーションは発生します。これは、技術ではなくて、相当なマネジメント力が必要な必要になるし、リーダーシップも必要になります。特定のチーム内だけのリーダーシップだとチーム間調整で空回りしたり・・・という事例はよく聞きます。なんかチーム間の調整の打ち合わせが増える、というのが副作用としてよく観測されます。</p><h1 id="本来必要なコミュニケーションもなくなる"><a href="#本来必要なコミュニケーションもなくなる" class="headerlink" title="本来必要なコミュニケーションもなくなる"></a>本来必要なコミュニケーションもなくなる</h1><p>この観点は僕は持っていなかったやつです。本来は別のサービスと連携するには、IT部門に調整してAPIを出してもらってやるのが「壊れにくいシステム」には不可欠ですが、その調整が面倒、手っ取り早く済ますという目的で利用されるのがRPAですね。システム向けのAPIがないところを強制的にAPI化します。</p><p>まあ、僕の経験上はそこまでの状況はないのですが、アサイン権限とモジュール設計権限の両方があると、嫌いな人を会話しなくてもいいチームに押し込む、というのもあるとかなんとか。そういう殺伐現場、経験ある方いますか？</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">逆コンウェイの法則なー<br>嫌いな奴、話をしたくない奴は誰だ？という目線から設計が行われて、最悪な設計が出来上がりそうな気がするんだよな<br>設計するやつが嫌いな奴と付き合わないように気持ちよく業務を進めるためのデザインになる</p>&mdash; ところてん (@tokoroten) <a href="https://twitter.com/tokoroten/status/1630547119726792707?ref_src=twsrc%5Etfw">February 28, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h1 id="そもそも、コンウェイの法則は21世紀も現役なのかどうか"><a href="#そもそも、コンウェイの法則は21世紀も現役なのかどうか" class="headerlink" title="そもそも、コンウェイの法則は21世紀も現役なのかどうか"></a>そもそも、コンウェイの法則は21世紀も現役なのかどうか</h1><p>そもそもコンウェイの法則は1968年の事例で、チームというのはアメリカ大陸を横断して作られたものでした。当時の技術ではチーム間のコミュニケーションはかなりやりにくく、チーム同士を打ち合わせも飛行機での移動が必須で、ソフトウェアの構造もこれに引きずられるというのはわかります。</p><img src="/images/20230310a/image.png" alt="image.png" width="560" height="300" loading="lazy"><p>一方で、現代はチャットもテレビ会議もあり、ソースコードはネットワークを超えて管理しやすいGitなどを使って管理されますし、Pull Requestなどの非同期コミュニケーションを主体とした開発プロセスが一般化しています。いくつものオープンソースのプロジェクトが世界中に分散して開発されていたりします。フューチャーも<a href="https://note.future.co.jp/n/na656c4058272">ロケーションフリー制度</a>があり、チームリーダーがいつもオンライン、みたいなチームもあります。そのため、チームが分かれると会話がなくなる、というのは現代ではないでしょう。</p><p>リモートワーク以前にも、木構造でチームを編成して関連するチームを近い場所にしたり、職能で分けたチーム（横串）と、プロジェクト（縦串）でマトリックス組織にするというのも行われていますし、必要なコミュニケーションの量の流量の大小を勘案したチーム分けというのがこれまでも試行されてきました。チームが分かれると即座にコミュニケーションがゼロということはなく、チーム同士の繋がりはもっと有機的なものになっています。</p><p>コンウェイの法則という言葉を知っている人はアムダールの法則もご存知でしょう。結局チームが1箇所であっても、チーム内をどんどん非同期で動けるようにしないことには、チーム全体のスループットは上がりません。そして非同期にする仕組みというのは、ちょっとぐらい場所が違っても、作業効率を減らさない方法です。地球の真裏で時差がすごい場合はちょっと大変ですが、日本とインドぐらいなら全然平気だな、というのが僕の実感としてあります。</p><p>これらの話を総合すると、現代で同じ状況で開発を行ったら、おそらく1968年とは別の結果になるということは容易に想像できます。そうであれば、コンウェイの法則はほとんどの場合では当てはまらなくなるし、そうなると逆コンウェイ戦略もそんなに意識する必要もなくなるのかな、と思います。</p><p>もちろん、組織間の調停のために内部裁判所を作ったみずほ銀行のプロジェクトとか、マイクロソフトのOS開発とかだとよりシビアなチーム編成が求められるのでしょうけども、ほとんどのプロジェクトでそこまで意識するほどチーム分けなんて考えなくてもいいんじゃないかな、と思います。チーム分けたってどうせ一部の人に質問が集中したりするんですよね。「逆コンウェイが〜とか言ってる人らそんなにチーム分割できるほどデカい組織で働いてるのかも怪しい」(@__garsue__曰く)という意見もあります。マイクロサービスだから、とかそういう言葉に引きづられて、余計なことをしているんじゃないでしょうかね。</p><p>宇宙開拓時代になって、光の速度ではリアルタイム通信ができないという時代が来たら、大陸間の分断と同じ効果はあるので、宇宙に進出するまではコンウェイの法則は気にしないでいいんじゃないですかね。</p><p>あとは、外注する境界がシステムの境界になったり、というのはあるかもしれません。請負契約だと発注側と、作業員同士での直接の会話は基本的にするな、というのがあります。複数のサブサービスを別の企業に請負契約していたりすると、チーム間の会話は発注者を介在する必要があって減るので、大陸間の分断と同じ効果はありそうですが、まあこういうのは今後減らしていこうねというのがDXではコンセンサスのとれている話だと思うのでみなかったことにしておきますかね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>コンウェイの法則は経験則から導き出されたもののようですが、それを逆転させてみよう、というのが逆コンウェイ戦略です。ですが、この逆転させるためには、「コミュニケーションが少なくなるような適切なモジュール分け」が必要だろうということを説明しました。それに失敗すると逆にコミュニケーションが増えることになるぞ、というリスクも説明しました。それ以外にもチームを分けることで生じるデメリットもいくつか紹介しました。</p><p>あとは、コンウェイの法則自体も、時代の変化で影響が減っているのでは、という話もしました。</p><p>まあ、このツイートの攻撃力の前にはすべての細っかい議論は吹っ飛びますけどね。今度から冷静な気持ちでコンウェイの法則に向き合えなくなる呪いがかかります。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">中央道を山梨から東京に走ってて、八王子料金所過ぎたあたりでAmwayのでかいビル見るといつも「コンウェイの法則」が連想される。</p>&mdash; Yoshi Yamaguchi (@ymotongpoo) <a href="https://twitter.com/ymotongpoo/status/1630553254047408128?ref_src=twsrc%5Etfw">February 28, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Management/">Management</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%B5%84%E7%B9%94%E8%AB%96/">組織論</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A8%E3%83%83%E3%82%BB%E3%83%BC/">エッセー</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%83%B3%E3%82%A6%E3%82%A7%E3%82%A4%E3%81%AE%E6%B3%95%E5%89%87/">コンウェイの法則</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3/">アーキテクチャ</category>
      
      
      <comments>https://future-architect.github.io/articles/20230310a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Gatekeeper Validating Admission WebhookでPVCリソースの削除を防止する</title>
      <link>https://future-architect.github.io/articles/20230309a/</link>
      <guid>https://future-architect.github.io/articles/20230309a/</guid>
      <pubDate>Wed, 08 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;フューチャーインスペース株式会社の岩崎です。&lt;/p&gt;
&lt;p&gt;みなさん、&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>フューチャーインスペース株式会社の岩崎です。</p><p>みなさん、<a href="https://argo-cd.readthedocs.io/en/stable/">ArgoCD</a>は使っていますか？<br>業務で<a href="https://aws.amazon.com/jp/eks/">EKS</a>（Elastic Kubernetes Service）クラスタにArgoCDをデプロイして、Kubernetesリソースを管理しています。</p><p>ArgoCDはGitOpsに則ったCDツールで、WebUIが優れていてKubernetesリソースの作成や更新がとても簡単で便利ですね。</p><p>しかし、ArgoCDから<a href="https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack">kube-prometheus-stack</a>アプリケーションの削除時に、<a href="https://kubernetes.io/ja/docs/concepts/workloads/controllers/statefulset/">StatefulSet</a>で作成されたGrafanaのPVC(Persistent Volume Claim 永続化ボリューム要求)も想定外に削除されてしまうことに気づきました。<br>※ StatefulSetはステートフルなアプリケーションを管理するオブジェクトで、本来はStatefulSetで関連付けられたPVCは削除されません。</p><p>GrafanaのPVCには、ダッシュボードやアラートなどの設定が入っているため、PVCが削除される度にGrafanaを設定しなおす必要がありました。</p><p>そこで、同環境でデプロイしている<a href="https://open-policy-agent.github.io/gatekeeper/website/docs/">Gatekeeper</a>から、PVCの削除を防げないかを模索していたところ、「Validating Admission Webhook」でArgoCDによるPVCの削除リクエストを拒否することができたので、設定から検証までを書いていきます。</p><h2 id="環境-x2F-構成"><a href="#環境-x2F-構成" class="headerlink" title="環境&#x2F;構成"></a>環境&#x2F;構成</h2><ul><li>OS: Amazon Linux2</li><li>EKS: 1.23</li><li>ArgoCD: v2.4.15</li><li>Gatekeeper: v3.10.0</li></ul><h2 id="Validating-Admission-Webhook"><a href="#Validating-Admission-Webhook" class="headerlink" title="Validating Admission Webhook"></a>Validating Admission Webhook</h2><p>Validating Admission Webhookの前に、KubernetesのAdmission Controlを理解する必要があります。<br>調べるにあたって、以下の記事がとてもわかりやすかったので、載せておきます。<br>・<a href="https://blog.mosuke.tech/entry/2022/05/15/admission-webhook-1/">https://blog.mosuke.tech/entry/2022/05/15/admission-webhook-1/</a></p><p>Validating Admission Webhookはリクエストがポリシーを満たしているか否かを監視し、ポリシーに反したリクエストが飛んで来た場合は、そのリクエストを拒否するように動作します。<br>そして、Validating Admission Webhookのポリシーの作成には、以下の3つが必要になります。</p><ul><li>Gatekeeper</li><li>Constraint-Template</li><li>Constraint</li></ul><h3 id="Gatekeeper"><a href="#Gatekeeper" class="headerlink" title="Gatekeeper"></a>Gatekeeper</h3><p>Gatekeeperは汎用的なポリシーエンジン<a href="https://www.openpolicyagent.org/docs/latest/">Open Policy Agent（OPA）</a>をベースに作成されており、KubernetesのAdmission Controlの仕組みを活用し、Kubernetes APIへのリクエストに対して、Mutation（追加・更新・削除）、Validation(検証)などのポリシーをカスタマイズできます。</p><h3 id="Constraint-Template"><a href="#Constraint-Template" class="headerlink" title="Constraint-Template"></a>Constraint-Template</h3><p>Constraint-TemplateはConstraintに必要なパラメータを用意します。Rego言語で記述したポリシーの定義を埋め込んだ、Constraint CRDを定義するテンプレートです。</p><h3 id="Constraint"><a href="#Constraint" class="headerlink" title="Constraint"></a>Constraint</h3><p>Constraintは条件に合致したリクエストを拒否します。Constraint-Templateで定義した内容に従って、監視対象のリソースの種類とアノテーションやラベルなどといったリクエストの拒否条件を記述します。</p><h2 id="PVCの削除を防止するポリシーを作成"><a href="#PVCの削除を防止するポリシーを作成" class="headerlink" title="PVCの削除を防止するポリシーを作成"></a>PVCの削除を防止するポリシーを作成</h2><p>本題のPVCの削除を防止するポリシーを作成します。<br>今回はPVCリソースを削除しないポリシーをnamespace毎に管理する必要があったため、「特定のnamespaceにおけるPVCリソースを削除しないポリシー」を作成していきます。</p><h3 id="Gatekeeperデプロイ"><a href="#Gatekeeperデプロイ" class="headerlink" title="Gatekeeperデプロイ"></a>Gatekeeperデプロイ</h3><p><a href="https://open-policy-agent.github.io/gatekeeper/website/docs/install">公式ドキュメント</a>通りに<a href="https://github.com/open-policy-agent/gatekeeper/blob/master/deploy/gatekeeper.yaml">gatekeeper.yaml</a>をArgoCDでデプロイします。<br>なお、デフォルトのGatekeeperのValidating Admission Webhookでは、CREATE, UDPATE（作成、更新）を監視する設定になっているため、次のように、ValidatingWebhookConfigurationリソースの<code>webhooks.rules.operations</code>にDELETE（削除）を追加することで、削除リクエストも監視対象に設定する必要があります。<br>参考: <a href="https://open-policy-agent.github.io/gatekeeper/website/docs/customize-admission/#how-to-enable-validation-of-delete-operations">https://open-policy-agent.github.io/gatekeeper/website/docs/customize-admission/#how-to-enable-validation-of-delete-operations</a></p><figure class="highlight yaml"><figcaption><span>gatekeeper.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">admissionregistration.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ValidatingWebhookConfiguration</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"></span><br><span class="line"> <span class="string">（中略）</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="attr">apiVersions:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="attr">operations:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">CREATE</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">UPDATE</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DELETE</span>  <span class="comment"># DELETEを追加</span></span><br></pre></td></tr></table></figure><h3 id="Constraint-Templateデプロイ"><a href="#Constraint-Templateデプロイ" class="headerlink" title="Constraint-Templateデプロイ"></a>Constraint-Templateデプロイ</h3><p>以下の通り、<code>k8sdeletepvc</code>CRDとポリシーを作成します。</p><figure class="highlight yaml"><figcaption><span>constraint-template.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">templates.gatekeeper.sh/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConstraintTemplate</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># 任意の名前</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8sdeletepvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">crd:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="comment"># metadata.nameの値</span></span><br><span class="line">        <span class="attr">kind:</span> <span class="string">k8sdeletepvc</span></span><br><span class="line">      <span class="attr">validation:</span></span><br><span class="line">        <span class="comment"># Schema for the `parameters` field</span></span><br><span class="line">        <span class="attr">openAPIV3Schema:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">          <span class="attr">properties:</span></span><br><span class="line">            <span class="attr">operation:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">            <span class="attr">namespace:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">targets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">target:</span> <span class="string">admission.k8s.gatekeeper.sh</span></span><br><span class="line">      <span class="attr">rego:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        # metadata.nameの値</span></span><br><span class="line"><span class="string">        package k8sdeletepvc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">        <span class="string">violation[</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;msg&quot;:</span> <span class="string">msg</span>,</span><br><span class="line">            <span class="attr">&quot;details&quot;:</span> &#123;</span><br><span class="line">              <span class="attr">&quot;operation_chk&quot;:</span> <span class="string">match_operation</span>,</span><br><span class="line">              <span class="attr">&quot;namespace_chk&quot;:</span> <span class="string">match_namespace</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="string">]</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">          <span class="string">provided_operation</span> <span class="string">:=</span> <span class="string">input.review.operation</span></span><br><span class="line">          <span class="string">constraint_operation</span> <span class="string">:=</span> <span class="string">input.parameters.operation</span></span><br><span class="line">          <span class="string">match_operation</span> <span class="string">:=</span> <span class="string">constraint_operation</span></span><br><span class="line">          <span class="string">match_operation</span> <span class="string">==</span> <span class="string">provided_operation</span></span><br><span class="line"></span><br><span class="line">          <span class="string">provided_namespace</span> <span class="string">:=</span> <span class="string">input.review.namespace</span></span><br><span class="line">          <span class="string">constraint_namespace</span> <span class="string">:=</span> <span class="string">input.parameters.namespace</span></span><br><span class="line">          <span class="string">match_namespace</span> <span class="string">:=</span> <span class="string">constraint_namespace</span></span><br><span class="line">          <span class="string">match_namespace</span> <span class="string">==</span> <span class="string">provided_namespace</span></span><br><span class="line"></span><br><span class="line">          <span class="string">msg</span> <span class="string">:=</span> <span class="string">sprintf(&quot;:</span> <span class="string">%v</span> <span class="string">request</span> <span class="string">detected</span> <span class="string">in</span> <span class="string">%v</span> <span class="string">namespace.</span> <span class="string">Cancel</span> <span class="string">the</span> <span class="string">request</span> <span class="string">for</span> <span class="string">PVC</span> <span class="string">to</span> <span class="string">prevent</span> <span class="string">deletion&quot;</span>, [<span class="string">provided_operation</span>, <span class="string">provided_namespace</span>]<span class="string">)</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>Constraint-Templateの<code>spec.crd.spec.validation.openAPIV3Schema</code>以降には、ConstraintのParametersフィールドに関するスキーマを定義しています。また、<code>spec.targets</code>以降にnamespaceと操作情報に関するポリシーの定義を記述しています。</p><p><code>input.review</code>はデプロイしているKubernetesリソースから値を取得し、<code>input.parameters</code>は後に説明するConstraint.yamlのparametersフィールドの値を参照します。<br>上記のテンプレートでは、<code>input.review.operation</code>でArgoCDの<code>CREATE</code>や<code>DELETE</code>などの操作情報を取得、<code>input.review.namespace</code>で対象リソースのnamespaceを取得します。<br>これらをAND条件で判別することにより、「特定のnamespaceにおけるリソースを削除しないポリシー」を実現しています。</p><p>Rego言語を用いてポリシーを記述するにあたり、<code>input.review</code>（Kubernetesリソース）から取得できる情報は<a href="https://open-policy-agent.github.io/gatekeeper/website/docs/howto/#input-review">公式ドキュメント</a>にまとめられています。</p><p>また、Regoで記述したポリシーをテストできるサイトもあり、想定通りのポリシーになっているかの確認に便利だったので、載せておきます。</p><p><a href="https://play.openpolicyagent.org/">https://play.openpolicyagent.org/</a></p><h3 id="Constraintデプロイ"><a href="#Constraintデプロイ" class="headerlink" title="Constraintデプロイ"></a>Constraintデプロイ</h3><p>constraint-template.yamlで定義したConstraint CRD : <code>k8sdeletepvc</code>でポリシーの内容を明示的に宣言します。</p><p>以下のマニフェストをデプロイすることで、「monitoringのnamespaceにおけるPVCリソースの削除を防止するポリシー」が作成されます。</p><figure class="highlight yaml"><figcaption><span>constraint.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">constraints.gatekeeper.sh/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">k8sdeletepvc</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># 任意の名前</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pvc-constraint</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">match:</span></span><br><span class="line">    <span class="attr">kinds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">        <span class="attr">kinds:</span> [<span class="string">&quot;PersistentVolumeClaim&quot;</span>] <span class="comment"># 監視するリソース</span></span><br><span class="line">  <span class="attr">parameters:</span></span><br><span class="line">    <span class="comment"># リクエストを拒否する条件</span></span><br><span class="line">    <span class="attr">operation:</span> <span class="string">DELETE</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">monitoring</span></span><br></pre></td></tr></table></figure><h2 id="作成したポリシーの検証"><a href="#作成したポリシーの検証" class="headerlink" title="作成したポリシーの検証"></a>作成したポリシーの検証</h2><p>作成したポリシーがmonitoringのnamespaceにおけるPVCリソースの削除を防止するかを確認します。</p><p>今回は、削除されたGrafanaのPVC<code>storage-kube-prometheus-stack-grafana-0</code>を対象にアプリケーションを削除してもPVCが残っているかの検証とDELETE以外のリクエストは問題なく承認されるかの検証を行います。</p><h3 id="ArgoCDによる削除"><a href="#ArgoCDによる削除" class="headerlink" title="ArgoCDによる削除"></a>ArgoCDによる削除</h3><p><code>storage-kube-prometheus-stack-grafana-0</code>はkube-prometheus-stackのサブチャートで定義されているので、kube-prometheus-stackのアプリケーションを削除します。</p><p>削除前のArgoCDの画面は以下の通りです。</p><img src="/images/20230309a/image.png" alt="image.png" width="1200" height="386" loading="lazy"><p>ArgoCDの画面からアプリケーションをForegroundで削除した結果が以下になります。</p><img src="/images/20230309a/image_2.png" alt="image.png" width="1200" height="389" loading="lazy"><p>エラーが起こり、APP CONDITIONSにて以下のエラーログが表示されます。</p><pre><code>admission webhook &quot;validation.gatekeeper.sh&quot; denied the request: [pvc-constraint] : DELETE request detected in monitoring namespace. Cancel the request for PVC to prevent deletion</code></pre><p>pvc-constraint（Constraint名）より、リクエストが拒否されたエラーログが表示され、Comstraint-Templateで記述した通りのエラー文があることから、作成したポリシーによってPVCリソースの削除リクエストが拒否されたことがわかります。</p><p>また、リクエストが拒否されると、ArgoCDが削除処理状態（一部リソースがSyncを受け付けない）になるため、アプリケーションをNon-cascading削除することで、ArgoCDの削除処理状態を外します。<br>これで、PVCを削除することなく、アプリケーションを削除できることを確認しました。</p><p>ちなみにですが、kubectlコマンドでも削除リクエストが拒否されることが確認できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pvc -n monitoring storage-kube-prometheus-stack-grafana-0</span><br><span class="line">&gt; Error from server (Forbidden): admission webhook <span class="string">&quot;validation.gatekeeper.sh&quot;</span> denied the request: [pvc-operation-constraint] : DELETE request detected <span class="keyword">in</span> monitoring namespace. Cancel the request <span class="keyword">for</span> PVC to prevent deletion</span><br></pre></td></tr></table></figure><h3 id="ArgoCDによるPVCの作成"><a href="#ArgoCDによるPVCの作成" class="headerlink" title="ArgoCDによるPVCの作成"></a>ArgoCDによるPVCの作成</h3><p>先ほどの検証で、削除リクエストが想定通り拒否されることが確認できました。<br>では、削除以外のリクエストは承認されるかをPVCリソースのデプロイ（作成リクエスト）で検証を行います。</p><p>まず、<code>storage-kube-prometheus-stack-grafana-0</code>を削除した状態が以下の通りです。</p><img src="/images/20230309a/image_3.png" alt="image.png" width="1200" height="421" loading="lazy"><p>kube-prometheus-stackにSyncをかけてPVCをデプロイします。</p><img src="/images/20230309a/image_4.png" alt="image.png" width="1200" height="384" loading="lazy"><p>無事にPVCが作成されたため、作成リクエストが無事に承認されたことが確認できました。</p><p>これは、<a href="#constraint-template%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4">Constraint-Template</a>で説明した通り、<code>namespace</code>と<code>operation</code>をAND条件で判別しているため、operationがCREATE（作成）の場合は、リクエストが承認されてPVCがデプロイされます。</p><p>そのため、PVCがデプロイしている状態で、operationがDELETE（削除）の場合は、リクエストが拒否されるため、<a href="#argocd%E3%81%AB%E3%82%88%E3%82%8B%E5%89%8A%E9%99%A4">ArgoCDによる削除</a>と同様のエラーが表示されます。<br>以上より、削除以外のリクエストは承認されることが確認できました。</p><h2 id="一工夫加える（削除管理）"><a href="#一工夫加える（削除管理）" class="headerlink" title="一工夫加える（削除管理）"></a>一工夫加える（削除管理）</h2><p>以上より、「各namespaceのPVCリソースの削除リクエストを拒否するポリシー」ができました。</p><p>しかし、この状態では1点だけ問題が発生してしまいます。それは、ポリシーを削除しない限り、Constraintの条件を満たしているリソースの削除ができないことです。</p><p>時と場合によっては、リソースを削除することはあると思います。リソースを削除する度にポリシーを外す運用では、外したポリシーを再度適用するのを忘れるリスクがあります。そのため、PVCリソースを削除するためのフラグをラベルで管理します。</p><h3 id="Constraint-Template（削除用ラベル）"><a href="#Constraint-Template（削除用ラベル）" class="headerlink" title="Constraint-Template（削除用ラベル）"></a>Constraint-Template（削除用ラベル）</h3><p><a href="#constraint-template%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4">Constraint-Template</a>で作成したマニフェストを以下のように編集します。</p><figure class="highlight yaml"><figcaption><span>constraint.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">    <span class="string">--------</span></span><br><span class="line">      <span class="string">中略</span></span><br><span class="line">    <span class="string">--------</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">openAPIV3Schema:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">        <span class="attr">properties:</span></span><br><span class="line">          <span class="comment"># labelsを追加</span></span><br><span class="line">          <span class="attr">labels:</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line"></span><br><span class="line"><span class="attr">targets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">target:</span> <span class="string">admission.k8s.gatekeeper.sh</span></span><br><span class="line">    <span class="attr">rego:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      package k8sdeletepvc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="string">violation[</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;msg&quot;:</span> <span class="string">msg</span>,</span><br><span class="line">          <span class="attr">&quot;details&quot;:</span> &#123;</span><br><span class="line">            <span class="attr">&quot;operation_chk&quot;:</span> <span class="string">match_operation</span>,</span><br><span class="line">            <span class="attr">&quot;namespace_chk&quot;:</span> <span class="string">match_namespace</span>,</span><br><span class="line">            <span class="attr">&quot;label_chk&quot;:</span> <span class="string">delete_labels</span> <span class="comment"># 追加</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="string">]</span></span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">--------</span></span><br><span class="line">          <span class="string">中略</span></span><br><span class="line">        <span class="string">--------</span></span><br><span class="line"></span><br><span class="line">        <span class="string">provided_label</span> <span class="string">:=</span> &#123;<span class="string">label</span> <span class="string">|</span> <span class="string">input.review.object.metadata.labels</span>[<span class="string">label</span>]&#125;</span><br><span class="line">        <span class="string">constraint_label</span> <span class="string">:=</span> &#123;<span class="string">label</span> <span class="string">|</span> <span class="string">label</span> <span class="string">:=</span> <span class="string">input.parameters.labels</span>[<span class="string">_</span>]&#125;</span><br><span class="line">        <span class="string">delete_labels</span> <span class="string">:=</span> <span class="string">constraint_label</span> <span class="bullet">-</span> <span class="string">provided_label</span></span><br><span class="line">        <span class="string">count(delete_labels)</span> <span class="string">&gt;</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="string">msg</span> <span class="string">:=</span> <span class="string">sprintf(&quot;:</span> <span class="string">%v</span> <span class="string">request</span> <span class="string">detected</span> <span class="string">in</span> <span class="string">%v</span> <span class="string">namespace.</span> <span class="string">Cancel</span> <span class="string">the</span> <span class="string">request</span> <span class="string">for</span> <span class="string">PVC</span> <span class="string">to</span> <span class="string">prevent</span> <span class="string">deletion&quot;</span>, [<span class="string">provided_operation</span>, <span class="string">provided_namespace</span>]<span class="string">)</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>ラベルは複数個管理することができるため、Parametersフィールドの定義もラベルを複数個管理できるようにarray型で定義しています。</p><p>また、削除用のラベルが複数個でも対応するように、配列の減算を用います。上記では、Constraintで定義したラベルをすべて含んでいたら、<code>delete_labels</code>の要素が0になり、含んでいなければ、要素が1以上になります。今回は、Constraintで定義したラベルをすべて含む場合に削除リクエストを承認するので、<code>count(delete_labels) &gt; 0</code>で比較を行っています。</p><h3 id="Constraint（削除用ラベル）"><a href="#Constraint（削除用ラベル）" class="headerlink" title="Constraint（削除用ラベル）"></a>Constraint（削除用ラベル）</h3><p>parametersフィールドにlabelsを追加するだけです。</p><figure class="highlight yaml"><figcaption><span>conostraint.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">match:</span></span><br><span class="line">    <span class="attr">kinds:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">        <span class="attr">kinds:</span> [<span class="string">&quot;PersistentVolumeClaim&quot;</span>]</span><br><span class="line">  <span class="attr">parameters:</span></span><br><span class="line">    <span class="comment"># Note that &quot;labels&quot; is now contained in an array item, rather than an object key under &quot;parameters&quot;</span></span><br><span class="line">    <span class="attr">operation:</span> <span class="string">DELETE</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">monitoring</span></span><br><span class="line">    <span class="attr">labels:</span> [<span class="string">&quot;delete-pvc&quot;</span>] <span class="comment"># 削除用ラベルを追加</span></span><br></pre></td></tr></table></figure><p>上記では、ラベルを1つ設定していますが、2つ以上設定することもできます。</p><p>以上で、PVCリソースに<code>delete-pvc</code>というラベルを含んでいれば、削除リクエストが承認されます。<br>これにより、想定外なPVCの削除がなくなり、ポリシーを外すことなくいつでもPVCリソースが削除可能な環境になりました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>GatekeeperのValidating Admission Webhookを用いてPVCリソースの削除リクエストを拒否することができました。バックアップを取得していれば、リソースの復元は可能ですが、リソースを予期せぬ削除から守ることも重要だと思います。</p><p>また、ポリシーを記述するRegoですが、Kubernetesリソースのデータ取得とルールの記述方法を押さえれば、自由にポリシーを作れるのではと感じました。</p><p>最後に、この検証を始めたときはKubernetesのAPIリクエストのことを全く理解しておらず、Rego言語も初めて知りました。何も知らない状態から調べていったので、少々時間がかかりましたが、Kubernetesへの理解が深まり、ポリシーを自分の手で作成できるようになったので、とても良い勉強になりました。</p><h2 id="参考記事"><a href="#参考記事" class="headerlink" title="参考記事"></a>参考記事</h2><ul><li>OPA&#x2F;Gatekeeper<ul><li><a href="https://www.openpolicyagent.org/docs/latest/">https://www.openpolicyagent.org/docs/latest/</a></li><li><a href="https://open-policy-agent.github.io/gatekeeper/website/docs/howto/">https://open-policy-agent.github.io/gatekeeper/website/docs/howto/</a></li><li><a href="https://github.com/open-policy-agent/gatekeeper">https://github.com/open-policy-agent/gatekeeper</a></li></ul></li><li>Admission Webhook<ul><li><a href="https://blog.mosuke.tech/entry/2022/05/15/admission-webhook-1/">https://blog.mosuke.tech/entry/2022/05/15/admission-webhook-1/</a></li><li><a href="https://tech.jxpress.net/entry/2019/12/01/kubernetes-admission-webhook-getting-started">https://tech.jxpress.net/entry/2019/12/01/kubernetes-admission-webhook-getting-started</a></li></ul></li><li>Constraint-Template、Constraint<ul><li><a href="https://qiita.com/yokawasa/items/fe1ce8311db84fd1394b">https://qiita.com/yokawasa/items/fe1ce8311db84fd1394b</a></li><li><a href="https://github.com/open-policy-agent/gatekeeper-library/tree/master/library/general">https://github.com/open-policy-agent/gatekeeper-library/tree/master/library/general</a></li></ul></li><li>Rego<ul><li><a href="https://zenn.dev/mizutani/articles/5b1cd56b4b3f4f">https://zenn.dev/mizutani/articles/5b1cd56b4b3f4f</a></li><li><a href="https://adventar.org/calendars/6601">https://adventar.org/calendars/6601</a></li><li><a href="https://play.openpolicyagent.org/">https://play.openpolicyagent.org/</a></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Kubernetes/">Kubernetes</category>
      
      <category domain="https://future-architect.github.io/tags/OpenPolicyAgent/">OpenPolicyAgent</category>
      
      <category domain="https://future-architect.github.io/tags/ArgoCD/">ArgoCD</category>
      
      <category domain="https://future-architect.github.io/tags/EKS/">EKS</category>
      
      <category domain="https://future-architect.github.io/tags/Rego/">Rego</category>
      
      
      <comments>https://future-architect.github.io/articles/20230309a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>今どきJavaのウェブ開発体験(Helidon)</title>
      <link>https://future-architect.github.io/articles/20230308a/</link>
      <guid>https://future-architect.github.io/articles/20230308a/</guid>
      <pubDate>Tue, 07 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;JavaでWebサービス開発というと、SpringBoot、という時代が長く続いていますが、Javaの世界もいろいろ進歩があるよ、ということで、MicroProfileというのを教えてもらいました。&lt;/p&gt;
&lt;p&gt;豆蔵さんの技術ブログや、masatarouさんのJJUGのレ</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>JavaでWebサービス開発というと、SpringBoot、という時代が長く続いていますが、Javaの世界もいろいろ進歩があるよ、ということで、MicroProfileというのを教えてもらいました。</p><p>豆蔵さんの技術ブログや、masatarouさんのJJUGのレポートが詳しいです。</p><ul><li><a href="https://developer.mamezou-tech.com/msa/mp/cntrn01-what-mp/">MicroProfileってなにそれ？ - MicroProfileの登場</a></li><li><a href="https://qiita.com/masatarou/items/fd17d37c8d215af082f5">JJUGナイトセミナー　メモ２（JakartaEE・MicroProfile）</a></li></ul><p>歴史的な経緯をまとめるとこんな感じですかね。</p><ul><li>Javaのウェブアプリケーション開発の基盤としてJavaEE（昔の名前はJ2EE）があった</li><li>2016年により活発な開発を求めて、Eclipse FoundationがJavaEEをフォークしてMicroProfileを作った</li><li>2017年にOracleはJava EEをEclipse Foundationに移管を発表し、JakartaEEとなることを発表</li><li>2019年にJakartaEE 8がリリース</li><li>2020年にMicroProfileの最初のJakartaEE準拠版の4.0がリリース</li><li>2022年にJakartaEE 10 Core Profileを内包したMicroProfile 6.0がリリース</li></ul><p>フォークしたけど、どちらもEclipse Foundationに入り、2020年からは仲良く歩調を合わせている、という感じですかね。JavaEEやJakartaEEは過去との互換性を重視している感じで、MicroProfileの方はイケイケな感じということを当初狙っていたみたいですが、2022年12月に出た6.0では、含まれるプロファイルにJakartaEE 10 Core Profileという文字が見えます。</p><img src="/images/20230308a/スクリーンショット_2023-02-21_18.44.43.png" alt="スクリーンショット_2023-02-21_18.44.43.png" width="1200" height="447" loading="lazy"><p>これまではJakartaEEの要素でもあったJSON-B、JSON-P、JAX-RS、CDIなどが個別に指定されていたのですが、最新版ではJakartaEE 10とも歩調を合わせた、と言う感じみたいです。それにしても、OpenTelemetry対応とか、イケイケですね。参考までにMicroProfile 5.0はこんな感じ。</p><img src="/images/20230308a/スクリーンショット_2023-02-21_18.48.43.png" alt="スクリーンショット_2023-02-21_18.48.43.png" width="1200" height="428" loading="lazy"><p>ソフトウェアの歴史で何度か見たことがあるような流れではあります。<a href="https://jakarta.ee/release/10/">Jakarta EE 10の仕様の構成要素の図</a>にMicroProfile 6.0の項目も合わせてみたのが以下の図です。クラウドネイティブなフレームワークとなるために、どのような部分を切りすてて、何が必要とされているのかが一目瞭然ですね。これは他の言語のユーザーがフレームワークを考えるうえでも興味深い図なんじゃないでしょうか？ちょっと補足すると、Interceptorsというのは他の言語のフレームワークではDIコンテナと呼んでいるやつですね。</p><img src="/images/20230308a/image.png" alt="image.png" width="870" height="684" loading="lazy"><h1 id="Helidon"><a href="#Helidon" class="headerlink" title="Helidon"></a>Helidon</h1><p>MicroProfile準拠のウェブアプリケーションフレームワークは、<a href="https://quarkus.io/">Quarkus</a>(RedHat), <a href="https://helidon.io/">Helidon</a>(Oracle), <a href="https://openliberty.io/">Open Liberty</a>(IBM)などたくさん出ています。ただし、対応するMicroProfileのバージョンは微妙に違うようです。</p><p>MicroProfileに準拠していれば、Webサービスのパスや、リクエストやレスポンスの定義、DIコンテナなどのアノテーションはどれも同じように使えるようです。フレームワークが変わってもアプリケーションの実装をほとんど変えなくて済む、と。前述のJJUGナイトセミナーのレポートを見ると、ストレージ周りに組み込まれている機能とかがフレームワークによって個性があるみたいですね。</p><p>まあ、他の言語ユーザーからすると、ここまでフレームワーク間で画一的にしないで、個性を発揮してくれてもいいのに・・・という思いはあったりしますが、J2EEを引き継いでいるからですかね。</p><p>HelidonはOracleが開発しているウェブアプリケーションサーバーのフレームワークです。MicroProfileの対応バージョンは5.0と最新よりはちょっと古いぐらいですが、Oracleが開発しているので、いろいろアドバンスな感じが期待できそうです。</p><p>Helidonには2つのフレーバーがあります。<a href="https://helidon.io/docs/v3/#/about/introduction:~:text=flavor%20to%20use%20%E2%80%93-,use%20Helidon%20MP.,-Prerequisites">迷ったらMPの方を使え</a>、とドキュメントにはあります。Helidon SEはLambdaみたいなやつで、複数のハンドラを持っていてパス違いで起動し分けるルーターが不要な場合に良さそうです。今回はMicroProfileが目的なのでMPの方で作ってみました。</p><ul><li>Helidon SE: スパルタンな軽量サーバー</li><li>Helidon MP: MicroProfile互換のサーバー</li></ul><h1 id="Helidon-MPの環境設定"><a href="#Helidon-MPの環境設定" class="headerlink" title="Helidon MPの環境設定"></a>Helidon MPの環境設定</h1><p><a href="https://helidon.io/starter/3.1.1?step=1">Helidon Starter</a>というWebサイトがあり、ここをぽちぽちするだけでプロジェクトの雛形ができあがります。Spring Starterみたいですね。それ以外にも、<a href="https://helidon.io/docs/v3/#/about/cli">helidon CLI</a>というのがあり、今時なシンプルコマンドラインでビルドしたりができます。mvnとかgradleを叩く必要はなくなります。</p><p>インストールはバイナリを落としてきてパスを通すだけです。init&#x2F;dev&#x2F;buildのサブコマンドだけで色々できるようになります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># プロジェクト作成</span></span><br><span class="line">$ helidon init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 開発サーバー起動</span></span><br><span class="line">$ helidon dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># jarビルド</span></span><br><span class="line">$ helidon build</span><br></pre></td></tr></table></figure><h1 id="Helidonのコードを見てみる"><a href="#Helidonのコードを見てみる" class="headerlink" title="Helidonのコードを見てみる"></a>Helidonのコードを見てみる</h1><p><code>helidon init</code>で出来上がったプロジェクトを見てみます。Helidon MPを使うよとか、パッケージ名とかを適当に入れるだけでできます。Spring Starterよりもかなりシンプルです（ウェブに特化していてSpring Batchとかそういうバリエーションがないからですが）。</p><p>出来上がったコードは、全部が1カ所にまとまっています。パッケージを細かく分けるとか、レイヤードアーキテクチャのレイヤーをパッケージとして分ける、というのはもう今時ではないみたいですね。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">src/main/java/me/shibu/mp/quickstart</span><br><span class="line">  GreetResource.java</span><br><span class="line">  GreetingProvider.java</span><br><span class="line">  Message.java</span><br><span class="line">  SimpleGreetResource.java</span><br><span class="line">  package-info.java</span><br></pre></td></tr></table></figure><p><code>GreetingProvider</code>はリポジトリ層というかサービス層というか、ですかね。いわゆるビジネスロジック。まあオンメモリで保存して返しているだけの実装になっています。<code>Message</code>は、値オブジェクトというか、構造体というか、単なる箱です。</p><p>2つ<code>Resource</code>がついているクラスがあります。これはSpringでいういわゆる「コントローラ」ですね。コメントとか省いてシンプルにしていくと、こんな感じです。SpringBootを見たことがある人にはだいたい見たことがあるものですね。</p><p>他の言語を使ったことがある人も<code>@Path/@GET/@Produces</code>あたりは見てすぐわかりますね。<code>@RequestScoped/@Inject</code>はDIコンテナのアノテーションっぽいですね。クラスのライフサイクルの指示と、このコンストラクタ起動時に<code>GreetingProvider</code>のインスタンスを作って渡してね、というDIコンテナへの指示かと思います。</p><figure class="highlight java"><figcaption><span>GreetingProvider.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Path(&quot;/greet&quot;)</span></span><br><span class="line"><span class="meta">@RequestScoped</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetResource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GreetingProvider greetingProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GreetResource</span><span class="params">(GreetingProvider greetingConfig)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.greetingProvider = greetingConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    <span class="meta">@Produces(MediaType.APPLICATION_JSON)</span></span><br><span class="line">    <span class="keyword">public</span> Message <span class="title function_">getDefaultMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createResponse(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>実行は<code>helidon dev</code>コマンドで行えます。デバッグモード起動です。<code>helidon build</code>して<code>java -jar target/[アプリケーション].jar</code>でもいけます。Go並に簡単。</p><h1 id="コンテナのビルド"><a href="#コンテナのビルド" class="headerlink" title="コンテナのビルド"></a>コンテナのビルド</h1><p>すでにjarへのビルドは触れました。コンテナのビルドもDockerfileが生成されているので簡単です。Dockerfileは3つあり、今時のJavaのアップデートの恩恵が受けられます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JDKでjarを起動するイメージ</span></span><br><span class="line">$ docker build .</span><br><span class="line"></span><br><span class="line"><span class="comment"># jlinkで小さいランタイムを生成してjarを起動するイメージ</span></span><br><span class="line">$ docker build -f Dockerfile.jlink .</span><br><span class="line"></span><br><span class="line"><span class="comment"># GraalVMでネイティブイメージを生成</span></span><br><span class="line">$ docker build -f Dockerfile.native .</span><br></pre></td></tr></table></figure><p>実行してみると、ネイティブビルドはなんかエラーが出てしまったのですが、GitHubで教えてもらった対策でビルドができました（次節で説明します）。レスポンスが早くもらえるのは嬉しいですね。エコシステム大事。</p><p>デフォルトのjar版は417MBが、jlink版が126MB、GraalVM版が186MBでした。GraalVMがちょっと大きいですが、jlinkのベースの<code>debian:stretch-slim</code>が50MBで、GraalVM版の<code>ghcr.io/oracle/oraclelinux:9-slim</code>が107MBで、ベースイメージの差であって上の部分のサイズはだいたい同じぐらいですね。</p><p>GraalVM版は圧倒的な起動の速さですし、消費メモリも少ないです。気になるビルド時間は手元のM2 Airでダウンロード周りが20秒、ネイティブ実行イメージ生成が110秒ぐらいですね。まあCI環境だけでやるならいいんじゃないでしょうか？とはいえ、JVM版、jlink版もそこまで起動は遅くはないです。</p><p>思ったよりもいいな、と思ったのがjlink版。300MBぐらい小さいイメージになったし、ビルドも実行もそんなに遅くないです。とりあえず手元でコンテナをさっと作ってローカル結合テストをするときはjlink版で、本番環境に撒く前提だったり、ステージングでテストする場合にGraalVMと使い分けるのが良さそうですね。</p><div class="scroll"><table><thead><tr><th align="center"></th><th align="center">JVM(jar)</th><th align="center">jlink</th><th align="center">GraalVM(native)</th></tr></thead><tbody><tr><td align="center">Dockerイメージサイズ</td><td align="center">417MB</td><td align="center">126MB</td><td align="center">186MB</td></tr><tr><td align="center">Dockerイメージビルド時間(ベースイメージダウンロード除く)</td><td align="center">21秒</td><td align="center">42秒</td><td align="center">165秒</td></tr><tr><td align="center">Docker起動時間(HTTPリクエスト受付開始まで)</td><td align="center">1.2秒</td><td align="center">1.2秒</td><td align="center">0.4秒</td></tr><tr><td align="center">起動後のメモリ(Docker上で計測&#x2F;100回リクエスト後)</td><td align="center">180MB</td><td align="center">176MB</td><td align="center">85MB</td></tr></tbody></table></div><p>起動時間は以下のGoアプリコードでやりました。dockerコマンドと同時に走らせて、HTTPリクエストが受付開始されて正常なレスポンスが返ってくるまでの時間を10ms単位で計測しています。</p><figure class="highlight go"><figcaption><span>bench.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line">t := time.NewTicker(<span class="number">10</span> * time.Millisecond)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">now := &lt;-t.C</span><br><span class="line">_, err := http.Get(<span class="string">&quot;http://localhost:8080/greet&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(now.Sub(start))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ネイティブビルドのエラー対策"><a href="#ネイティブビルドのエラー対策" class="headerlink" title="ネイティブビルドのエラー対策"></a>ネイティブビルドのエラー対策</h2><p><a href="https://github.com/helidon-io/helidon/issues/6260">こちらのissue</a>を立てたところ、contributorの方に反応していただけました。少し<code>Dockerfile.native</code>の修正と<code>pom.xml</code>の修正が必要です。</p><ol><li><code>Dockerfile.native</code>の最初の<code>RUN</code>の<code>-Pnative-image -Dnative.image.skip</code>を削除</li><li><code>Dockerfile.native</code>の実行イメージを<code>FROM scratch</code>から<code>FROM ghcr.io/oracle/oraclelinux:9-slim</code>に変更</li><li><code>pom.exe</code>に<code>native-maven-plugin</code>の変更を追加↓（com.acmeの部分は自分のアプリケーションのパッケージ名にする）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.graalvm.buildtools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>native-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">buildArgs</span>&gt;</span>--initialize-at-build-time=com.acme<span class="tag">&lt;/<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>これでビルドできました！</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ということで、コードを書かずにサンプルを動かしただけですが、今時のJavaの開発を体験してみました。ネイティブイメージのビルドはまだエラーがありますが（回避は可能）、<code>helidon</code>コマンドでプロジェクト作成から開発サーバーの起動ができ、jarもビルドできました。また、Dockerイメージのビルドも、最初からDockerfileがついてくるので簡単にでき、デプロイも簡単そうです。ウェブ開発に必要なものがコンパクトにまとまっていますね。PythonでFastAPI環境を作るよりも簡単なぐらい。</p><p>現在のJavaはSpringBootと、このMicroProfileの2つの潮流に集約されてきているようです。チャンスがあればこのHelidonとかのMicroProfileを実開発に投入してみたいですね。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Java/">Java</category>
      
      <category domain="https://future-architect.github.io/tags/MicroProfile/">MicroProfile</category>
      
      <category domain="https://future-architect.github.io/tags/Helidon/">Helidon</category>
      
      
      <comments>https://future-architect.github.io/articles/20230308a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CircleCIでPullRequest作成時の負荷を軽減する</title>
      <link>https://future-architect.github.io/articles/20230307a/</link>
      <guid>https://future-architect.github.io/articles/20230307a/</guid>
      <pubDate>Mon, 06 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230307a/theme.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;673&quot; loading=&quot;lazy&quot;&gt;



&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230307a/theme.png" alt="" width="1200" height="673" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。<br>フューチャーアーキテクト株式会社、TIG&#x2F;EXユニット所属の宮永です。</p><blockquote><p>※TIG(Technology Innovation Group)はテクノロジーカットでお客様の課題解決を行う部門です。<br>中でもEX(Energy Transformation)ユニットは2022年に新設されたエネルギー業界特化型のコンサルティング集団で、「エネルギー×テクノロジー」をコンセプトにエネルギーサプライチェーン全体での需給の最適化やレジリエンス強化を図り、地域の活性化やビジネスモデルを変革することで透明性の高いフェアなマーケット形成を目指します。</p></blockquote><p>本記事ではCircleCIでGitHubのPR作成時の負荷を軽減するために、PR作成者の自動アサインおよびラベルの付与を自動化した話をご紹介します。</p><h1 id="経緯"><a href="#経緯" class="headerlink" title="経緯"></a>経緯</h1><p>CircleCIでGitHubのPullRequest作成時の負荷を軽減したいと思った経緯について説明します。</p><p>私が所属するチームのブランチモデルは簡易的なgit-flowモデルに則っており、<code>main</code>、<code>develop</code>、<code>feature</code>の3つのブランチで運用しています。</p><p>デフォルトブランチを<code>develop</code>として、改修する時は<code>develop</code>ブランチから<code>feature</code>ブランチを切ります。改修が完了したら<code>feature</code>→<code>develop</code>ブランチにマージして、リリースするタイミングで<code>develop</code>→<code>main</code>ブランチにマージします。</p><p>最近まで、リリースするときには<code>develop</code>→<code>main</code>へのPullRequestを手動作成する運用を行っていましたが機械的な作業なので<a href="https://github.com/x-motemen/git-pr-release">git-pr-release</a>を使って自動化しました。</p><p><a href="https://github.com/x-motemen/git-pr-release">git-pr-release</a>の導入は<a href="https://songmu.jp/riji/entry/2019-07-28-circleci-git-pr-release.html">こちらのSongmu</a>さんの記事が非常に参考になりました。</p><blockquote><p>余談にはなりますが、弊チームは<a href="https://github.com/Songmu/flextime">Songmu&#x2F;flextime</a>のヘビーユーザーであり、非常にお世話になっております。時刻操作系のGoのテストをする時はflextimeが欠かせません!</p></blockquote><p><a href="https://github.com/x-motemen/git-pr-release">git-pr-release</a>の導入に合わせてGitHubの標準機能である<a href="https://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes">リリースノート自動生成</a>も導入しました。</p><p>以下のymlファイルをリポジトリの<code>.github</code>配下に格納するだけでリリースノートを自動生成することができます。</p><figure class="highlight yaml"><figcaption><span>release.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github/release.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">changelog:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ignore-for-release</span></span><br><span class="line">    <span class="attr">authors:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">octocat</span></span><br><span class="line">  <span class="attr">categories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Breaking</span> <span class="string">Changes</span> <span class="string">🛠</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Semver-Major</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">breaking-change</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Exciting</span> <span class="string">New</span> <span class="string">Features</span> <span class="string">🎉</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Semver-Minor</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">enhancement</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Other</span> <span class="string">Changes</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>release.ymlについて少し説明します。<code>-title</code>と<code>-label</code>タグが必須項目であり、<code>-title</code>にはリリースノートのセクションを、<code>-label</code>にはそのセクションに記載するPullRequestのラベルを記載します。</p><p>例えば、前回リリース時から今回のリリースまでに<code>main</code>にとりこまれた<code>enhancement</code>ラベルをもつPullRequestはすべてExciteing New Featuresのセクションに記載されるようになります。</p><p>release.ymlを作成したらリリース時にGenerate release noteを押下するだけでリリースノートが自動生成されます。</p><img src="/images/20230307a/image.png" alt="image.png" width="1200" height="934" loading="lazy"><blockquote><p>GitHub標準機能を用いずにtagのPUSHをトリガーにCircleCIで自動化する場合は<a href="https://future-architect.github.io/articles/20210708a/">当技術ブログの過去記事</a>が参考になると思います。</p></blockquote><p>今回、「CircleCIでPullRequest作成時の負荷を軽減したい」と思った経緯ですが、このリリースノートの自動生成が背景にあります。</p><p>既に記載したように自動生成したChangeLogはPullRequestのラベルに依存しているため、きちんと運用をまわすには、メンバー全員にラベルの付与を徹底させる必要があります。</p><p>この「きちんとラベルを付与する」というのは簡単な作業に思えますが案外忘れてしまいがちです。せっかくリリースノートの自動生成まで行ったのですから、ラベルの付与も自動化してしまいたいと思い、CircleCIベースでラベルの付与を自動化しました。</p><h1 id="ラベルの振り分け方"><a href="#ラベルの振り分け方" class="headerlink" title="ラベルの振り分け方"></a>ラベルの振り分け方</h1><p>さて、ラベルの振り分け方ですがいくつか方法が考えられます。例えば特定のディレクトリの変更に依存してラベルを付与する方法です。</p><p>これを実現するには<a href="https://github.com/actions/labeler">actions&#x2F;labeler</a>を利用するのが最も導入コストが低いと思います。</p><p>他にはブランチ名に依存してラベルを振り分ける方法なども考えられます。今回私が採用したのはブランチ名に依存してラベルの振り分けを行う方法です。</p><p>ブランチ名ベースでラベルを振り分ける方法を採用したのは、弊チームのリポジトリが複数サービスが含まれたモノリポ構成であることが大きな理由です。</p><p>一部機能は同じ階層のファイルを共有していたりするため、果たして改修部分がservice Aの改修なのか、service Bの改修なのかはコードを見ないと判断できません。ブランチ名ベースでラベルの振り分けを行えば正確にラベルを付与することができます。</p><p>そこで、「<a href="https://github.com/actions/labeler">actions&#x2F;labeler</a>にそんな機能搭載されていないかな?」と思い、確認しましたが2020年に<a href="https://github.com/actions/labeler/issues/54">Issue#54</a>が起票されてから2023年現在もOpenのままで、簡単に導入とはいかないようです。</p><p>加えて、諸事情がありGitHub ActionsではなくCircleCI上に導入したかったので、<a href="https://github.com/actions/labeler">actions&#x2F;labeler</a>の導入は見送りました。</p><h1 id="GitHub-CLIの利用"><a href="#GitHub-CLIの利用" class="headerlink" title="GitHub CLIの利用"></a>GitHub CLIの利用</h1><p>どうやら、自前でGitHubAPIを操作する必要が出てきそうでしたので、まずはGitHub CLIでラベルの付与操作などがサポートされていないかを調査したところ、それらしい機能がサポートされていることがわかりました。</p><p><a href="https://cli.github.com/manual/gh_pr_edit">GitHub CLI gh pr edit</a></p><p>GitHub CLIをインストールして、以下コマンドを実行することでPullRequestを操作することができます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gh pr edit [&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;] [flags]</span><br></pre></td></tr></table></figure><p><code>[&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;]</code>を空のまま実行した場合、現在チェックアウトしているブランチに対して実行されます。</p><p><code>flags</code>には以下オプションがサポートされています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">--add-assignee &lt;login&gt;</span><br><span class="line">Add assigned <span class="built_in">users</span> by their login. Use <span class="string">&quot;@me&quot;</span> to assign yourself.</span><br><span class="line">--add-label &lt;name&gt;</span><br><span class="line">Add labels by name</span><br><span class="line">--add-project &lt;name&gt;</span><br><span class="line">Add the pull request to projects by name</span><br><span class="line">--add-reviewer &lt;login&gt;</span><br><span class="line">Add reviewers by their login.</span><br><span class="line">-B, --base &lt;branch&gt;</span><br><span class="line">Change the base branch <span class="keyword">for</span> this pull request</span><br><span class="line">-b, --body &lt;string&gt;</span><br><span class="line">Set the new body.</span><br><span class="line">-F, --body-file &lt;file&gt;</span><br><span class="line">Read body text from file (use <span class="string">&quot;-&quot;</span> to <span class="built_in">read</span> from standard input)</span><br><span class="line">-m, --milestone &lt;name&gt;</span><br><span class="line">Edit the milestone the pull request belongs to by name</span><br><span class="line">--remove-assignee &lt;login&gt;</span><br><span class="line">Remove assigned <span class="built_in">users</span> by their login. Use <span class="string">&quot;@me&quot;</span> to unassign yourself.</span><br><span class="line">--remove-label &lt;name&gt;</span><br><span class="line">Remove labels by name</span><br><span class="line">--remove-project &lt;name&gt;</span><br><span class="line">Remove the pull request from projects by name</span><br><span class="line">--remove-reviewer &lt;login&gt;</span><br><span class="line">Remove reviewers by their login.</span><br><span class="line">-t, --title &lt;string&gt;</span><br><span class="line">Set the new title.</span><br></pre></td></tr></table></figure><p>今回利用するのは<code>--add-label</code>です。</p><h1 id="CircleCIの設定"><a href="#CircleCIの設定" class="headerlink" title="CircleCIの設定"></a>CircleCIの設定</h1><p>GitHub CLIでなんとかなりそうなことが判明しましたので、あとはCircleCIでの実行環境です。</p><p>利用者の多そうなツールなのでOrbsで環境が提供されていないかなと思い探してみたところ、最適な環境を見つけました。<a href="https://circleci.com/developer/ja/orbs/orb/circleci/github-cli">circleci&#x2F;github-cli</a></p><p>あとは、このOrbsを利用してGitHub CLIコマンドを実行するだけです。</p><p>以下、設定ファイルです。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>Orbsとは<br>OrbsはCircleCI 2.1で追加された機能で、CircleCIの設定を再利用可能なパッケージとして提供したものです。<br>Slack連携などは利用している方も多いのではないでしょうか。<a href="https://circleci.com/docs/ja/slack-orb-tutorial/">Slack連携のOrbs</a></p></div><figure class="highlight yaml"><figcaption><span>config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .cicleci/config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="attr">gh:</span> <span class="string">circleci/github-cli@2.2.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">executors:</span></span><br><span class="line">  <span class="attr">base:</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">&quot;cimg/base:stable&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">add-label:</span></span><br><span class="line">    <span class="attr">executor:</span> <span class="string">base</span></span><br><span class="line">    <span class="attr">working_directory:</span> <span class="string">~/repo</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">gh/setup:</span></span><br><span class="line">          <span class="attr">version:</span> <span class="number">2.23</span><span class="number">.0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">checkout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Add-Label</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            bash add_label.sh</span></span><br><span class="line"><span class="string"></span><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">add-label:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">add-label</span></span><br></pre></td></tr></table></figure><p><code>-gh/setup</code>でGitHub CLIの初期設定を行います。この際のCicleCIの環境変数に<code>GITHUB_TOKEN</code>の設定が必要です。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>GITHUB_TOKENの権限<br>GITHUB＿TOKENの権限はPullRequestに対して操作を行うためrepoの権限が必要です。<a href="https://docs.github.com/ja/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token">GITHUB_TOKENのアクセス許可</a></p></div><p>GitHub CLIのセットアップ完了後ブランチにチェックアウトします。<br>その後GitHub CLIのコマンドを記載したShellスクリプトを実行しています。</p><p>以下、実行対象のShellスクリプトです。</p><figure class="highlight sh"><figcaption><span>add_label.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -euxo pipefail</span><br><span class="line">prinfo=$(gh <span class="built_in">pr</span> view --json author,headRefName --jq .author.login,.headRefName)</span><br><span class="line">assignees=$(gh <span class="built_in">pr</span> view --json assignees --jq .assignees[].login)</span><br><span class="line">labels=$(gh <span class="built_in">pr</span> view --json labels --jq .labels[].name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取得した情報を配列に変換して変数に格納</span></span><br><span class="line"><span class="built_in">mapfile</span> -t infoarray &lt;&lt;&lt; <span class="string">&quot;<span class="variable">$prinfo</span>&quot;</span></span><br><span class="line">author=<span class="string">&quot;<span class="variable">$&#123;infoarray[0]&#125;</span>&quot;</span></span><br><span class="line">branch=<span class="string">&quot;<span class="variable">$&#123;infoarray[1]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PR作成者を自動アサイン</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$assignees</span> == <span class="string">&quot;&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;assigne&quot;</span> <span class="string">&quot;<span class="variable">$author</span>&quot;</span></span><br><span class="line">    gh <span class="built_in">pr</span> edit --add-assignee <span class="string">&quot;<span class="variable">$author</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> <span class="string">&quot;<span class="variable">$&#123;labels&#125;</span>&quot;</span></span><br><span class="line">attachlabels=(<span class="string">&quot;bug&quot;</span> <span class="string">&quot;docs&quot;</span> <span class="string">&quot;refactoring&quot;</span> <span class="string">&quot;enhancement&quot;</span> <span class="string">&quot;fix&quot;</span>)</span><br><span class="line"><span class="comment"># ブランチ名にそってラベル付与</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;attachlabels[@]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$branch</span> == *<span class="variable">$name</span>* ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">printf</span> <span class="string">&#x27;%s\n&#x27;</span> <span class="string">&quot;<span class="variable">$&#123;labels[@]&#125;</span>&quot;</span> | grep -qx <span class="string">&quot;<span class="variable">$name</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span>&quot;</span> <span class="string">&quot;label is already attached&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;attach&quot;</span> <span class="string">&quot;<span class="variable">$name</span>&quot;</span> <span class="string">&quot;label&quot;</span></span><br><span class="line">        gh <span class="built_in">pr</span> edit --add-label <span class="string">&quot;<span class="variable">$name</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>GitHub CLIを利用することで複雑なスクリプトを書かずにすみました。</p><p>ラベルの自動付与のついでにAssigneesにPullRequest作成者の付与も自動化しています。</p><p>ブランチ名やPullRequest作成者の情報は<a href="https://cli.github.com/manual/gh_pr_view">gh pr view</a>コマンドで取得します。とても便利なことに<code>--jq</code>オプションでフィルタリングできます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-c, --comments</span><br><span class="line">View pull request comments</span><br><span class="line">-q, --jq &lt;expression&gt;</span><br><span class="line">Filter JSON output using a jq expression</span><br><span class="line">--json &lt;fields&gt;</span><br><span class="line">Output JSON with the specified fields</span><br><span class="line">-t, --template &lt;string&gt;</span><br><span class="line">Format JSON output using a Go template; see <span class="string">&quot;gh help formatting&quot;</span></span><br><span class="line">-w, --web</span><br><span class="line">Open a pull request <span class="keyword">in</span> the browser</span><br></pre></td></tr></table></figure><p>試しに、<code>gh pr view --json author</code>を実行してみると、以下のレスポンスを取得できます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">❯❯❯ gh pr view --json author</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XXXXXXXXXX&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;is_bot&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;login&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XXXXX&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XXXXX&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>これを<code>jq</code>をつかってフィルタリングして<code>author</code>変数に代入するには以下のようにします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author=$(gh <span class="built_in">pr</span> view --json author --jq .author.login)</span><br></pre></td></tr></table></figure><p><code>--json</code>オプションはカンマ区切りで複数指定ができますので以下のようにして一回のリクエストにまとめることができます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prinfo=$(gh <span class="built_in">pr</span> view --json author,headRefName --jq .author.login,.headRefName)</span><br></pre></td></tr></table></figure><p>あとは事前に設定してあるラベル名にブランチ名が合致しているかを確認して文字列一致していればPullRequestにラベルを付与していきます。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>Shellスクリプト初心者のため、<a href="https://qiita.com/Hayao0819/items/0e04b39b0804a0d16020">こちらの記事</a>を参考にさせていただきました。</p></div><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="string">&quot;<span class="variable">$&#123;labels&#125;</span>&quot;</span></span><br><span class="line">attachlabels=(<span class="string">&quot;bug&quot;</span> <span class="string">&quot;docs&quot;</span> <span class="string">&quot;refactoring&quot;</span> <span class="string">&quot;enhancement&quot;</span> <span class="string">&quot;fix&quot;</span>)</span><br><span class="line"><span class="comment"># ブランチ名にそってラベル付与</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;attachlabels[@]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$branch</span> == *<span class="variable">$name</span>* ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">printf</span> <span class="string">&#x27;%s\n&#x27;</span> <span class="string">&quot;<span class="variable">$&#123;labels[@]&#125;</span>&quot;</span> | grep -qx <span class="string">&quot;<span class="variable">$name</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span>&quot;</span> <span class="string">&quot;label is already attached&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;attach&quot;</span> <span class="string">&quot;<span class="variable">$name</span>&quot;</span> <span class="string">&quot;label&quot;</span></span><br><span class="line">        gh <span class="built_in">pr</span> edit --add-label <span class="string">&quot;<span class="variable">$name</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h1><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>CircleCIのOnly build pull requests<br>今回CircleCIの発火はPullRequestが作成されている状態を想定しています。そのためリリースフローに支障がない場合は<a href="https://circleci.com/docs/oss/#only-build-pull-requests">こちら</a>に記載のOnly build pull requestの設定をONにすることをおすすめします</p></div><p>▼成功すると以下のようにPR作成時にブランチ名にしたがってラベルの付与とPR作成者の自動アサインができます</p><img src="/images/20230307a/image_2.png" alt="image.png" width="1200" height="569" loading="lazy"><div class="note warn" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-exclamation-circle"></span><p>GitHubアカウントのユーザー名<br>add_label.shでは、author.nameがスペースで区切られていないことを想定しています。<br>アカウント名にスペースが含まれる場合は、author.nameを別にリクエストして変数に格納するなどしてください。</p></div><h1 id="少しハマったところ"><a href="#少しハマったところ" class="headerlink" title="少しハマったところ"></a>少しハマったところ</h1><p><a href="https://circleci.com/developer/orbs/orb/circleci/github-cli">circleci&#x2F;github-cli</a>の<code>- gh/setup</code>は何も指定しないとGitHub CLIのデフォルトバージョンは2.3.0です。<br>記事執筆時の2023年2月18日にローカルにインストールされていたGitHub CLIは2.23.0でした。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯❯❯ gh --version</span><br><span class="line">gh version 2.23.0 (2023-02-08)</span><br><span class="line">https://github.com/cli/cli/releases/tag/v2.23.0</span><br></pre></td></tr></table></figure><p>どうやらバージョン2.3.0では<code>gh pr view --json author</code>のレスポンスに<code>name</code>という属性はなかったようで、ローカルのバージョンとの差分に気づかずにPullRequest作成者の情報の取得ができずに悩んでいました。(スクリプトではnameではなく、loginで取得しています)<br>バージョン情報を事前に確認しておくことは大事ですね。<br><code>- gh/setup</code>には<code>version</code>を指定することができるので、最新のバージョンを確認しつつ指定してください。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">gh/setup:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">2.23</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回、諸事情がありGitHubActionsではなくCircleCIで実装しましたが、GitHubActionsであればGitHub CLIはプリインストールされているので本記事よりも簡単に導入できます。</p><ul><li><a href="https://docs.github.com/ja/actions/using-workflows/using-github-cli-in-workflows">ワークフローで GitHub CLI を使用する</a></li></ul><p>まだ自動化の運用を初めて日が浅く、今後運用を続けていく中で改善点などでてくるかと思いますが、現状では満足しています。</p><p>開発体験の向上は生産性の向上に直結すると思っていますので、今後も機械的な作業は積極的に自動化していきたいです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/CircleCI/">CircleCI</category>
      
      <category domain="https://future-architect.github.io/tags/GitHub/">GitHub</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9/">リリース</category>
      
      
      <comments>https://future-architect.github.io/articles/20230307a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GitLab CIを新人研修に導入した話</title>
      <link>https://future-architect.github.io/articles/20230306a/</link>
      <guid>https://future-architect.github.io/articles/20230306a/</guid>
      <pubDate>Sun, 05 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230306a/gitlab-ci-cd-logo_2x.png&quot; alt=&quot;&quot; width=&quot;340&quot; height=&quot;380&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230306a/gitlab-ci-cd-logo_2x.png" alt="" width="340" height="380"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。フューチャーアーキテクト株式会社、HR(新人研修)チームの柳澤です。</p><p>ブログへの投稿をサボりにサボった結果、なんと3年強もの空白期間が空いてしまいました。さすがに3年以上もブログ投稿をしていない人間をウォッチし続けている奇特な方はいないと思うので、簡単に略歴から紹介させていただこうと思います。</p><p>私はフューチャーにキャリア入社し、その後はTechnology Innovation GroupにてITコンサルタント業務に4年ほど従事したのち、昨年の6月よりHR部門にて新人研修を担当しています。ITコンサルタントとしては主にクラウドインフラをメインで担当し、小売、製造、金融など事業ドメイン問わずプロジェクトを経験してきました。</p><p>HRへ転属となった契機ですが、今後の自身のキャリアとして、チームリーディングの経験をより積んでいきたいという思いがありました。</p><p>当社では、新人研修を一つのプロジェクトとして、その企画・推進から運営まで担う研修リーダーというロールが用意されています。私自身、教育に強い興味関心があったため、このロールが自分のニーズにもはまると考え、HRという未知の領域ではありましたが、異動を決意しました。</p><h3 id="ブログ執筆の契機"><a href="#ブログ執筆の契機" class="headerlink" title="ブログ執筆の契機"></a>ブログ執筆の契機</h3><p>「HRなのに技術ブログ？」と思われる方がいるかもしれません。</p><p>前述の通り、当社の新人研修は現場の人間が主体となって推進していきます。</p><p>この新人研修を通して、当社には <strong>現場の人間がバックオフィスに回り、現場で得た知見を還元できる</strong> 環境が整っていることの宣伝として執筆させていただくことにしました。</p><h3 id="フューチャーにおける研修の全体像"><a href="#フューチャーにおける研修の全体像" class="headerlink" title="フューチャーにおける研修の全体像"></a>フューチャーにおける研修の全体像</h3><p>まず、フューチャーにおける研修の全体像説明は<a href="https://note.future.co.jp/n/na63d4f4ff465?magazine_key=mf7f58c11c205">こちら</a>の記事に譲りたいと思います。</p><p>全体像の説明だけでなく、カリキュラムの背景などについても語られているので、興味のある方はぜひご覧ください。</p><p>もちろん、今回の記事のように新人研修は常に改善を繰り返しているので、細かな部分ではすでに変更されていたりもします。</p><p>余談ですが、当ブログには<a href="/articles/20200613/">新人研修後の配属先にかける新人の思いを歌った投稿</a>もありますので、ぜひご覧ください。</p><h2 id="GitLab-CIを導入した話"><a href="#GitLab-CIを導入した話" class="headerlink" title="GitLab CIを導入した話"></a>GitLab CIを導入した話</h2><h3 id="研修の流れ"><a href="#研修の流れ" class="headerlink" title="研修の流れ"></a>研修の流れ</h3><p>さて、長々と「はじめに」が続きましたが、ようやく本題に入っていきたいと思います。</p><p>当社の新人研修で用意しているITカリキュラムはざっくりと <code>アルゴリズム</code> -&gt; <code>Java</code> -&gt; <code>DB(SQL)</code> -&gt; <code>Webアプリケーションの構築</code> という順番で進んでいきます。</p><p>特にアルゴリズム～DB(SQL)までは予め所定のGitLabリポジトリ<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>で用意された問題(ソースコード)をclone&#x2F;pullし、制限時間内で解答する流れになっています。(筆記試験)</p><p>また、 <strong>とりあえず書いたら当たった</strong> ではなく、本質的な理解までできているかを確認するため、上記の筆記試験に合格したら研修リーダーが試験官を担う、社内ではITカリキュラムで一番の鬼門と噂される「口頭試問」に進みます。</p><p>そして、口頭試問まで合格して初めて、そのカリキュラムに合格となり、次のカリキュラムへと進むことができます。</p><p>表題のGitLab CIは上記の筆記試験(Java～DB(SQL))の部分に対して導入しました。</p><h3 id="改善活動を行うまで"><a href="#改善活動を行うまで" class="headerlink" title="改善活動を行うまで"></a>改善活動を行うまで</h3><p>今回のトピックは運用改善なので、改善前の姿もお伝えしておこうと思います。<br>当社は年間通して100名以上の新入社員がいますが、従来は以下のフローで採点が行われていました。</p><ol><li>新人さん一人一人がpushしたブランチを手元にpull</li><li>ローカルに置いてあるJUnitのコードを所定の場所に格納</li><li>ローカルでJUnitを実行</li><li>テスト結果を確認し、新人さんへ共有</li></ol><p>100人を超える新人さんに対して、このフローをオペレーションする忍耐も覚悟もなかった私はアサイン直後にこのフローを目の当たりにしたとき、即座に自動化の計画を立てる決意を固めたのでした。</p><p>なお、教育というコンテンツの性質上(単純なハードスキルのフォローだけでなく新人さんのメンタル面のフォローなど含む)、こういった運用改善活動にかける時間がおのずと少なかったことには触れておきたいと思います。</p><p>ちなみに、上記はJavaの例で、DBに関してはテストコードもなかったので、お手軽にpytestで実装しました。<br>今回その内容は割愛します。</p><h3 id="改善活動開始"><a href="#改善活動開始" class="headerlink" title="改善活動開始"></a>改善活動開始</h3><p>自動化をするにあたってまず考えたのは</p><ul><li>既存のリソースを有効利用しつつ、なるべく少ない手数で実装すること<ul><li>当然、自分が研修リーダーをする場合も運用改善に割ける時間は限られるため</li></ul></li><li>研修推進側の負担を限りなく0にしつつ、新人さん側の作業フローも大きく変わらない(増えない)こと</li><li>なるべく新人さんの学びになる形で改善を行うこと</li></ul><p>ということでした。<br>その結果、</p><ul><li>GitLabという既存のプラットフォームを利用でき</li><li>既存のJUnitのテストコードも利用可能で</li><li>CIという、おそらく新人さんがあまりなじみのないであろう技術要素の存在を伝えられる</li></ul><p>上記を満たすGitLab CIの利用がよいのではないかという判断をしました。</p><h3 id="実際の実装"><a href="#実際の実装" class="headerlink" title="実際の実装"></a>実際の実装</h3><p>ここまできてようやく実装についてのお話が始まります。<br>いろいろと試行錯誤しながらCIをテストしていった結果、最終的にリポジトリ構成は以下の通りに落ち着きました。(一部実際のものから変更しています)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">future</span><br><span class="line">├── 2022</span><br><span class="line">│   └── October</span><br><span class="line">│       └── single-work</span><br><span class="line">│           ├── 📦java</span><br><span class="line">│           └── 📦db</span><br><span class="line">└── training-leader</span><br><span class="line">    ├── answer</span><br><span class="line">    │   ├── 📦java</span><br><span class="line">    │   └── 📦db</span><br><span class="line">    ├── exam</span><br><span class="line">    │   ├── 📦java</span><br><span class="line">    │   └── 📦db</span><br><span class="line">    ...</span><br><span class="line">📦: リポジトリ</span><br></pre></td></tr></table></figure><p>グループ<code>future</code>を親として、その配下に以下のサブグループを配置しました。</p><div class="scroll"><table><thead><tr><th>サブグループパス</th><th>用途</th></tr></thead><tbody><tr><td>2022&#x2F;October&#x2F;single-work</td><td>新人さんが試験に解答するためのリポジトリを配置</td></tr><tr><td>training-leader&#x2F;exam</td><td>single-work配下のリポジトリをForkして作成するためのマスターリポジトリを配置</td></tr><tr><td>training-leader&#x2F;answer</td><td>試験問題、および正答が記載されたコードとテストコードを格納するリポジトリを配置</td></tr></tbody></table></div><p>CIの機能とテストコードの配置に際して、以下を考慮しました</p><ul><li>新人さんが解答をしたあと、すぐに試験結果を確認できるようにするためには解答したリポジトリ内でテストを回す必要がある</li><li>ただし、テストコードが見えてしまうと正答を教えているのと同義になってしまうのでテストコードは新人さんが利用するリポジトリから分離する必要がある</li></ul><p>結果として、新人さんが利用するリポジトリ配下に以下の<code>.gitlab-ci.yml</code>を配置しました。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">gradle:alpine</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">GRADLE_OPTS:</span> <span class="string">&quot;-Dorg.gradle.daemon=false&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GRADLE_USER_HOME=&quot;$(pwd)/.gradle&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">export</span> <span class="string">GRADLE_USER_HOME</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apk</span> <span class="string">add</span> <span class="string">git</span> <span class="string">tree</span></span><br><span class="line">  <span class="comment"># (1)</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ACCESS_TOKEN=`printenv</span> <span class="string">TEST_CODE_ACCESS_TOKEN`</span></span><br><span class="line">  <span class="comment"># (2)</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://$&#123;deploy_token_username&#125;:$&#123;ACCESS_TOKEN&#125;@$&#123;gitlab_url&#125;/training-leader/answer/java.git</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">src/test/java</span></span><br><span class="line">  <span class="comment"># (3)</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cp</span> <span class="string">-r</span> <span class="string">java/src/test/java/$&#123;CI_BUILD_REF_NAME##*-&#125;</span> <span class="string">src/test/java</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">tree</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">gradle</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">reports:</span></span><br><span class="line">      <span class="attr">junit:</span> <span class="string">build/test-results/test/**/TEST-*.xml</span></span><br></pre></td></tr></table></figure><p>上記ファイルのポイントを三つ、お伝えしたいと思います。</p><h4 id="1-アクセストークンの隠蔽"><a href="#1-アクセストークンの隠蔽" class="headerlink" title="(1) アクセストークンの隠蔽"></a>(1) アクセストークンの隠蔽</h4><p>この構成では、研修チームのリポジトリをCloneしてテストコードを取りに行く必要があります。<br>研修チームのリポジトリで払い出したトークンをべた書きしてしまうと悪用される恐れがあるため、環境変数に埋め込んで隠蔽します。</p><p>もちろん、新人さんには最低限の権限(Developer)しか与えていないため、環境変数を見ることはできません。</p><p>なお、GitLabにはいくつかトークンの種類がありますが、実装当時は時間の余裕がなく、強めの権限で動かせるDeploy Tokenで実装してしまっています。<br><a href="https://www.gitlab.jp/blog/2021/12/06/access-token/">GitLabの解説</a>によると今回のケースは問答無用でCI&#x2F;CD Job Tokenを利用するのが適切とのことなので、いつか差し替えたいと思います…</p><h4 id="2-テストコードのClone"><a href="#2-テストコードのClone" class="headerlink" title="(2) テストコードのClone"></a>(2) テストコードのClone</h4><p>1で環境変数から呼び出したトークンを使い、テストコードの入っている研修チームのリポジトリからコードをCloneしてきます。</p><h4 id="3-所定回数の試験のテストコードのみコピー"><a href="#3-所定回数の試験のテストコードのみコピー" class="headerlink" title="(3) 所定回数の試験のテストコードのみコピー"></a>(3) 所定回数の試験のテストコードのみコピー</h4><p>新人さん側のリポジトリ構成(一部)は以下のようになっており、CIの中で以下の<code>src</code>配下に<code>test/java/java8</code>(テストコードの格納場所)をｶﾞｯﾁｬﾝｺするイメージです</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── build.gradle</span><br><span class="line">├── gradlew</span><br><span class="line">├── gradlew.bat</span><br><span class="line">├── settings.gradle</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        └── java</span><br><span class="line">            └── java8</span><br><span class="line">                ├── Clazz.java</span><br><span class="line">                ├── Question1_1.java</span><br><span class="line">                ├── Question1_2.java</span><br><span class="line">                ├── Question2_1.java</span><br><span class="line">                ├── Question2_2.java</span><br><span class="line">                ├── Question3_1.java</span><br><span class="line">                ├── Question3_2.java</span><br><span class="line">                ├── Question4_1.java</span><br><span class="line">                ├── Question4_2.java</span><br><span class="line">                ...</span><br></pre></td></tr></table></figure><p>また、特定の試験回のみテストが実行されるよう、試験のルール面でも工夫を加えました。</p><p>新人さん側がpushするブランチ名を <code>feature/$&#123;社内アカウント名&#125;_java$&#123;試験回数&#125;</code>というブランチ名に縛ることで、意図しないテストコードが実行されることを防ぐことができました。</p><p>なお、副作用としてブランチ名誤りでテストが正しく回らず、失格扱いになった新人さんも見かけましたが、Gitの訓練と思ってもらうことにしています(笑)</p><h3 id="運用を開始してみて"><a href="#運用を開始してみて" class="headerlink" title="運用を開始してみて"></a>運用を開始してみて</h3><p>まず、実際に効果を感じたのは、<strong>新人さんが過去に出した問題の復習にCIを利用しはじめて</strong>くれたということでした。<br>また、CIですぐに結果を確認するためにGitに触る回数もおのずと増えるため、特に未経験者が躓きがちなGitの習熟スピードが明らかに早くなったと感じました。</p><p>一方、進捗の早い新人さんの中にはCIをはじめインフラに興味を持ってくれるメンバーも現れ、こちらの予想していたよりも大きな効果が得られたかなと思っています。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>技術的な密度のわりにかなり長い記事になってしまいましたが、フューチャーの新人研修は自前で運営しているからこその、現場の知見を活かした活動ができると思っています。</p><p>この記事を読んで、技術ドリブンで若手の成長を促してみたいと思った方、ぜひフューチャーで研修リーダー、やってみませんか？</p><p>もちろん、新しい技術を現場の社員から盗みたいという学生さんのエントリーも大歓迎です！！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">GitLabではリポジトリのことをプロジェクトと呼称しますが、ここではコードの格納場所を表す単語として一般的に使われる「リポジトリ」で統一します</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%96%B0%E4%BA%BA%E7%A0%94%E4%BF%AE/">新人研修</category>
      
      <category domain="https://future-architect.github.io/tags/CI-CD/">CI/CD</category>
      
      <category domain="https://future-architect.github.io/tags/GitLab/">GitLab</category>
      
      
      <comments>https://future-architect.github.io/articles/20230306a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>エンジニア歴６ヶ月による「SQLアンチパターン」書評（クエリのアンチパターン編）</title>
      <link>https://future-architect.github.io/articles/20230303a/</link>
      <guid>https://future-architect.github.io/articles/20230303a/</guid>
      <pubDate>Thu, 02 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230303a/picture_large978-4-87311-589-4.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;511&quot;&gt;

&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230303a/picture_large978-4-87311-589-4.jpg" alt="" width="400" height="511"><p><a href="/articles/20230217a/">読書感想文連載</a> の9冊目の記事です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>今回はエンジニア界隈で名著と名高いBill Karwin著「SQLアンチパターン」を読んだので書評をかいていきたいと思います。</p><p>私が基本的な研修を終えて、現場に配属後に「SQLを触ろう」となった際に、先輩に「アンチパターンさえやらなきゃいいよ」とアドバイスされたことがこの本を読むきっかけだったので、同じような境遇の初心者の方が現場でSQLを触ることになった時、最低限避けるべき項目の雰囲気を掴む、容易に確認することができる記事になれば幸いです。</p><h2 id="本書のスタイルと本記事で注目すること"><a href="#本書のスタイルと本記事で注目すること" class="headerlink" title="本書のスタイルと本記事で注目すること"></a>本書のスタイルと本記事で注目すること</h2><p>本書は「データベース論理設計のアンチパターン」「データベース物理設計のアンチパターン」「クエリのアンチパターン」「アプリケーション開発のアンチパターン」の4部からなりそれぞれアンチパターンが数種類紹介されています。アンチパターンごとに「目的」「アンチパターン」「アンチパターンの見つけ方」「アンチパターンを用いても良い場合」「解決策」に分けて解説されています。</p><p>本記事では上記のうち、初心者が一番触れることが多い「クエリのアンチパターン」の5つにフォーカスして、書評を書いていきたいと思います。</p><h2 id="クエリのアンチパターン"><a href="#クエリのアンチパターン" class="headerlink" title="クエリのアンチパターン"></a>クエリのアンチパターン</h2><h3 id="1-フィア・オブ・ジ・アンノウン"><a href="#1-フィア・オブ・ジ・アンノウン" class="headerlink" title="1. フィア・オブ・ジ・アンノウン"></a>1. フィア・オブ・ジ・アンノウン</h3><p><strong>〜NULLは数字でも文字でもない！！〜</strong></p><p>プログラミング初心者がわかるようで分からないものの一つがNULLだと思います。</p><p>SQLのアンチパターンでもNULLに関して言及がありました。やりがちなミスとして、NULLを数値や文字列などと同列に扱ってしまう例などが上げられていました。（NULLをスカラー式論理式で使うと想定外の結果を返す等）</p><p>実はこの本を読んでいたおかげでアンチパターンを回避できた場面がありました。やりたかったこととしては、金額がはいっている列の合計が欲しかったので以下のようなクエリを書いていました。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(kingaku) <span class="keyword">FROM</span> <span class="keyword">Table</span></span><br></pre></td></tr></table></figure><p>ただ、kingaku列はNULLを許容する列だったのでもし一つでもNULLが設定されていた場合上記のクエリが返す結果はNULLになってしまいます。それをこの書籍で知識として得ていたおかげで、NULLを０として扱うように以下のクエリに事前に修正することができました。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(<span class="built_in">COALESCE</span>(kingaku,<span class="number">0</span>)) <span class="keyword">FROM</span> <span class="keyword">Table</span></span><br></pre></td></tr></table></figure><p>基本的なことかもしれませんが、先に知識としてインプットしておくことで「気づく」ことができたため、余裕があるときの勉強って大事だなと身に染みて感じました。</p><p>また、NULLがデータベースにあることで上記のような余計な気配りが必要になることから、NOT NULL制約を使ったり、他の値（0、-1）に置き換えてその手間を省く方法があるようですがそれに関しても推奨されていないようです。</p><h3 id="2-アンビギュアスグループ"><a href="#2-アンビギュアスグループ" class="headerlink" title="2. アンビギュアスグループ"></a>2. アンビギュアスグループ</h3><p><strong>〜GROUP BYを使用した時、グループ内で一意でない値は取得できない！！〜</strong></p><p>SQLを始めて勉強してクエリを書いている際に出てきたエラーに対して「なんでエラーが出るの？」と思った時に大抵の原因だったのがこのアンチパターンを踏んでいることでした。</p><p>例えば、動物の種類ごとに一番重いペットの名前を取得しようと（謎設定）以下のクエリを書いてもエラーになります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,<span class="built_in">MAX</span>(weight),animal</span><br><span class="line"><span class="keyword">FROM</span> Pets</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> animal</span><br></pre></td></tr></table></figure><p>これはanimalでグループ化しているのにも関わらず、nameが一意に特定できないからです。（MAXは集約関数で一意に特定できる）</p><p>この意図としてはMAX(weight)と同じ行にあるnameを取得したいのですが、SQL側にはその意図を認識するすべがないため、どのnameを返すべきか分からずエラーになってしまいます。</p><p>本書の内容を踏まえて改善したSQLが以下になります。</p><p>この場合は、GROUP BYを使わずに以下のようなクエリを実装することで想定の値を取得することができます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p1.name,m.weight,m.animal</span><br><span class="line"><span class="keyword">FROM</span> pets p1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">   (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(p2.weight) <span class="keyword">AS</span> weight,p2.animal</span><br><span class="line"><span class="keyword">FROM</span> pets p2</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> p2.animal) <span class="keyword">AS</span> m</span><br><span class="line"><span class="keyword">ON</span>  m.animal<span class="operator">=</span>p1.animal <span class="keyword">AND</span> m.weight<span class="operator">=</span>p1.weight</span><br></pre></td></tr></table></figure><p>基本的にはこのアンチパターンを踏んでいる際はエラーが起きるおかげで成果物として提出してしまうことはないと思いますが、私のようにエラーが出てきた際に「？？？」とならないように押さえておきたいですね。</p><h3 id="3-ランダムセレクション"><a href="#3-ランダムセレクション" class="headerlink" title="3. ランダムセレクション"></a>3. ランダムセレクション</h3><p><strong>〜データをRAND関数を使ってソートすると無駄なコストがかかる！！〜</strong></p><p>データをランダムに取得したいときはRAND関数を使うことが普通だと思っている方は知らないうちに非常にコストの高いクエリを作成してしまっているかもしれません。</p><p>というのも本書によるとRAND関数というものは手作業でソートしており、</p><blockquote><p>これはテーブルスキャンと呼ばれる手法で多くの場合、全ての結果を一時的なテーブルとして保存し、物理的に行を入れ替える処理を行います。</p></blockquote><p>データが大きければ大きいほどパフォーマンスが悪化するようなので今一度自身の実装を見直してみる必要があるかもしれません…。</p><p>ランダムに値を取得したい場面は今のプロジェクトではないため、今のところは私は頭の片隅に入れておく程度になると思いますが、パフォーマンスの観点を持って指摘を入れられるエンジニアは一段レベルが違い、チームの中で重宝される存在だと思っているので、そのような存在になれるよう温めておきたい知識でした。</p><h3 id="4-スパゲッティクエリ"><a href="#4-スパゲッティクエリ" class="headerlink" title="4. スパゲッティクエリ"></a>4. スパゲッティクエリ</h3><p><strong>〜複雑なソースはどんなプログラミングでも悪！！〜</strong></p><p>私は研修で初めに触れた言語がJavaだったのですが、その際にも「複雑なスパゲッティコードは良くない」というようなことを言われました。</p><p>「一度にやりたいことをできた方が良さそう！」と思って善意でひとまとめにしようとし、あくせくしながら実装し、いざ完成しても、深すぎるネストや、飛び飛びの処理のせいで、自分が何を考えて実装したのかすら分からなくなっている、といった経験はみなさんあると信じています。</p><p>やはり、SQLでも複雑な実装は他言語と同様ご法度とされているようですね。</p><p>SQLで複雑なクエリを実装すると、全ての行が結合してしまう「デカルト積」なるものが発生してしまい、実際の結果より多くの結果が返されることもあるようです。</p><p>SQLではそこまで複雑な実装をする必要が現場でないのですが、Javaで一度スパゲッティコードをしてしまい、指摘をされた際にも、そもそもコードの意図を説明することが大変だった経験もあるため、そういった副次的なコストも回避するためにも常にシンプルでスマートな実装をできるように心がけていきます！</p><h3 id="5-インプリシットカラム"><a href="#5-インプリシットカラム" class="headerlink" title="5. インプリシットカラム"></a>5. インプリシットカラム</h3><p><strong>〜「とりあえず何でも頂戴！」はトラブルの元！！〜</strong></p><p>列を指定せずにワイルドカード機能を使うSELECT、INSERTはテーブル定義が変わった時に元の想定と違う動きをすることがあるので避けるべき手法のようです。</p><p>もしワイルドカードを使用したクエリがテーブル定義変更により返す結果が変わって、クエリ実装時に省略した何倍ものタイプ数を費やして修正作業しなければならない場面を想像すると、丁寧に列の指定くらいは行わなければという強迫観念めいたものが生まれました。（修正作業は実装の何倍もコストがかかるのはエンジニアの歴が浅くても痛いほど身に染みているので…）</p><p>また、以下のようにワイルドカードを使って取得すると余計なデータまで取ってきてパフォーマンス低下に繋がるようなので、「パフォーマンスを考慮できるかっこいいエンジニア」を目指している身としてはより気をつけたいポイントだと思いました。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">Table</span></span><br></pre></td></tr></table></figure><p>これは書籍には載っていなかったのですが、「往復するデータが増えてパフォーマンスが落ちる」という話題に関して現場での経験から得た、紹介したいアンチパターンがあり、それは「SQLを何度も呼び出すな」というものです。</p><p>現プロジェクトではJavaのServiceクラスからクエリを実行しDBアクセスする仕組みなのですが、参照するテーブルが同じだったり、検索条件が多少違うだけの場合、何度もSQLを呼び出すのではなく、一度のDBアクセスで必要な値を取り出してJava側で必要な値を場面に応じて参照することでデータベースとアプリケーションを往復するデータ量を減らし、パフォーマンス向上につなげることができます。</p><p>頭の片隅にでも置いておいて、少しでも質の良い成果物作成に貢献できたら幸いです！</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今まで自分が思いっきり踏んでいたアンチパターンから本書で知ることで未然に防げたアンチパターンまで載っていたため、非常に有用な書籍だったなと感じました。原著ではより細かいデータベース設定の中でより多くのアンチパターン回避方法について触れているので、今後SQLに触れていく同志にはぜひ読んでいただき、より質の高い成果物を作成していただければと思います。</p><p>本記事で少しでも情報を得ることができ、皆様の日々の開発の一助になれていれば幸いです。ご拝読ありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DB/">DB</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/SQL%E3%82%A2%E3%83%B3%E3%83%81%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3/">SQLアンチパターン</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%83%B3%E3%83%81%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3/">アンチパターン</category>
      
      
      <comments>https://future-architect.github.io/articles/20230303a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Google Cloudのしくみと技術がしっかりわかる教科書を読んだ感想</title>
      <link>https://future-architect.github.io/articles/20230302a/</link>
      <guid>https://future-architect.github.io/articles/20230302a/</guid>
      <pubDate>Wed, 01 Mar 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>金融グループ所属、新人の藤戸四恩です。<br>インデックス記事に書かせていただきましたが、積読消化目的で参加させていただきました。<br><img src="/images/20230302a/image.png" alt="" width="400" height="564" loading="lazy"></p><p><a href="/articles/20230217a/">読書感想文連載</a> の8冊目は、技術評論社から出版されている <a href="https://gihyo.jp/book/2021/978-4-297-12301-7">図解即戦力 Google Cloudのしくみと技術がこれ1冊でしっかりわかる教科書</a> です。</p><p>この書籍を選んだ理由としては、CCoE(クラウド活用推進組織)メンバーに参加しGoogle Cloud に触れる機会があったのですが、いままではCloudというものに触れてこなかったため全体像を掴みたいと考えたからです。</p><p>気になったところについて感想を書いていきたいと思います。</p><h2 id="書籍の概要"><a href="#書籍の概要" class="headerlink" title="書籍の概要"></a>書籍の概要</h2><p>この書籍は2021年9月3日に発売された本で、Google Cloudに関する基本的な知識を学ぶことができます。<br>下記の通り10章から構成されています。</p><ul><li>1章 Google Cloud の基礎知識</li><li>2章 クラウドの仕組みとGoogleの取り組み</li><li>3章 Google Cloud を使うには</li><li>4章 サーバーサービス「Compute Engine」</li><li>5章 ネットワークサービス「VPC」</li><li>6章 ストレージサービス「Cloud Storage」</li><li>7章 コンテナとサーバーレスのサービス</li><li>8章 データベースサービス</li><li>9章 データ分析のサービス</li><li>10章 そのほかに知っておきたい Google Cloud のサービス</li></ul><h2 id="Google-Cloudのシェア率と検索比率について"><a href="#Google-Cloudのシェア率と検索比率について" class="headerlink" title="Google Cloudのシェア率と検索比率について"></a>Google Cloudのシェア率と検索比率について</h2><p>書籍内の内容ではないですが、読み進めるにあたり、Google Cloud がどれくらいのシェアがあるのか気になり、調べてみました。</p><p>Publickey社の記事内では<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、Canalys社が調査した、2022年度第2四半期時点のクラウドのシェア率について記載されており、AWS が31%で1位、 Azure が24%で2位、Google Cloud が8%が記載されています。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><p>また、Googleでの検索比率を Google Trends でそれぞれのクラウドサービス名を検索しました。<br>比較したクラウドサービスは、Amazon Web Services (以下AWS)、Microsoft Azure (以下Azure)、Google Cloudの三つです。</p><p>※Google Cloud は2022年6月に Google Cloud Platform から Goolge Cloud に<a href="https://cloud.google.com/blog/ja/topics/developers-practitioners/introducing-new-homepage-google-cloud">名称変更</a>されたため、Google Cloud Platform をトピックにいれています。</p><img src="/images/20230302a/スクリーンショット_2023-02-27_19.54.39.png" alt="" width="1160" height="686" loading="lazy"><p>個人的には、Google Cloud のシェアが思っていたよりも低く驚きました。</p><h2 id="ライブマイグレーションについて"><a href="#ライブマイグレーションについて" class="headerlink" title="ライブマイグレーションについて"></a>ライブマイグレーションについて</h2><p>4章 サーバーサービス「Compute Engine」の障害発生時の対応①~ライブマイグレーション(p.92)でCompute Engine の障害発生時の対応方法についての説明があり、対応方法の一つとして<code>ライブマイグレーション</code>が紹介されています。</p><blockquote><p>Compute Engineは、ハードウェアを購入することなくオンデマンドで仮想マシンを利用できるコンピューティングサービスです。<br>Compute Engineでは仮想マシンが、仮想マシンを実行するためのソフトウェアであるハイパーバイザ上で複数実行されます。</p></blockquote><p>Compute Engineは仮想マシンのことで、AWSだとAmazon EC2、AzureだとAzure Virtual Machineのことです。</p><blockquote><p>ComputeEngineには障害発生時の対応として、ライブマイグレーションとホストエラー対応という、大きく2つの機能が備わっています。<br>ライブマイグレーションとは、仮想マシンを稼働した状態のまま、仮想マシンを実行する物理サーバを別の物理サーバに移動する仕組みです。</p></blockquote><p><code>ライブマイグレーション</code>という単語は初めて知ったのですが、　Compute Engineはどのようにライブマイグレーションを実現しているのか調べてみました。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p><img src="/images/20230302a/image_2.png" alt="" width="875" height="661" loading="lazy">※ライブマイグレーションのコンポーネントの図を引用<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup><p>VMの移行は3つのステップで行われます。</p><ol><li>VM上のメモリやディスクを移行先のVMにコピーします。</li><li>移行元のVMは停止し、1でコピーしたメモリの差分を移行先にコピーします。</li><li>VMが移行先のVMで実行されます。</li></ol><p>移行が完了すると、移行元のVMが削除されることによって実現されます。<br>Google Cloud は障害の事前検知を行っているため<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>、検知した際にライブマイグレーションに影響がない場合は、上記のようなライブマイグレーションで障害対応を行っていることがわかりました。</p><h3 id="BigQuery-と-RDB-の違い"><a href="#BigQuery-と-RDB-の違い" class="headerlink" title="BigQuery と RDB の違い"></a>BigQuery と RDB の違い</h3><p>9章 データ分析のサービスのBigQueryとRDBの違い(p.253)で下記の記載があります。</p><blockquote><p>BigQueryは、RDB同様にテーブルを持ち、SQLによってデータの処理要求を行います。<br>では、どのような点がRDBと異なるのでしょうか。<br>1つ目は、カラム型ストレージである点です。必要なカラムにのみアクセスできるため、データ走査を最小化できます。<br>2つ目は、ツリーアーキテクチャである点です。クライアントから受け取ったクエリの処理をツリー構造の処理に分解して、複数のサーバーに分散することで、大規模な分散処理を実現しています。<br>…..<br>BigQueryはSQLの構文をサポートしつつ、NoSQLの特徴を併せ持つハイブリットなシステムといえます。</p></blockquote><p>2022年11月18日に開催された国際度量衡総会では新しい単位ロナ(ronna)10の27乗とクエタ(quetta)10の30乗が追加された<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>ことからも<br>データ量はどんどん大規模になっていて、大規模なデータを高速で処理する必要性はどんどん増しているように感じています。</p><p>カラム型ストレージ(列指向)とツリーアーキテクチャは、どのような仕組みか気になったため、調べてみました。</p><p>理由の1つ目のカラム型ストレージについては、弊社の2021年に開催された、春の入門連載2021の4日目の<code>IT初学者がカラムナデータベースを勉強してみた</code>で解りやすく解説されていました。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup><br>つまりカラム型ストレージは、データを列方向に保持するとデータの定義情報(型など)や値が同一のデータを格納しているため圧縮効率が高いため高速化されていることがわかりました。</p><p>理由の2つ目のツリーアーキテクチャは、クエリをRootServer、MixerServer、LeafServerの順にツリー構造分解されることにより分散処理を実行することで高速されています。<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></p><p>これらによりBigQueryは大規模なデータを効率よく処理されています。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>図解即戦力 Google Cloudのしくみと技術がこれ1冊でしっかりわかる教科書の読書感想文でした。</p><p>クラウドサービスを触ったことがなかった自分でも躓くことなく読み進めることができました。<br>Google Cloudを使用する上で基礎的な知識を学ぶことができたと思います。<br>クラウドサービスを触ったことがなく、Google Cloudをこれから使う方にはぜひ手に取ってみてください。</p><p>明日の読書感想連載は工藤さんの<a href="/articles/20230303a/">SQLアンチパターン</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://www.publickey1.jp/blog/22/202221aws2azure3google_cloud3.html">https://www.publickey1.jp/blog/22/202221aws2azure3google_cloud3.html</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://www.canalys.com/newsroom/global-cloud-services-Q2-2022">https://www.canalys.com/newsroom/global-cloud-services-Q2-2022</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><a href="https://cloud.google.com/compute/docs/instances/live-migration-process?hl=ja">https://cloud.google.com/compute/docs/instances/live-migration-process?hl=ja</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;"><a href="https://cloud.google.com/support/docs/dashboard?hl=ja#lifecycle_of_an_incident">https://cloud.google.com/support/docs/dashboard?hl=ja#lifecycle_of_an_incident</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;"><a href="https://www.asahi.com/articles/ASQCL441NQC6ULBH006.html">https://www.asahi.com/articles/ASQCL441NQC6ULBH006.html</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;"><a href="https://future-architect.github.io/articles/20210419b/">https://future-architect.github.io/articles/20210419b/</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="vertical-align: top; padding-right: 10px;">7.</span><span style="vertical-align: top;"><a href="https://tech.plaid.co.jp/inside_bigquery">https://tech.plaid.co.jp/inside_bigquery</a></span><a href="#fnref:7" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      
      <comments>https://future-architect.github.io/articles/20230302a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>マイクロサービスパターン MicroServicePatterns の感想文</title>
      <link>https://future-architect.github.io/articles/20230301a/</link>
      <guid>https://future-architect.github.io/articles/20230301a/</guid>
      <pubDate>Tue, 28 Feb 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230301a/51ChNGhBinL._SX390_BO1,204,203,200_.jpg&quot; alt=&quot;51ChNGhBinL._SX390_BO1,204,203,200_.jpg&quot; width=&quot;392&quot; height=&quot;499&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230301a/51ChNGhBinL._SX390_BO1,204,203,200_.jpg" alt="51ChNGhBinL._SX390_BO1,204,203,200_.jpg" width="392" height="499" loading="lazy"><p>積読を消化しようというテーマの、<a href="/articles/20230217a/">読書感想文連載</a> の 7冊目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG コアテクの川口です。</p><p>こちらの本は <strong>2020年3月23日</strong> に発売された本で、当時は私が社会人1年目となった年でもありました。（会社は、フューチャーではなかったですが。）</p><p>最初に配属されたチームでは、いわゆるマイクロサービスアーキテクチャが導入されておりました。ただ当時は、マイクロサービスアーキテクチャは経験したことがなく本書を読んで勉強した覚えがあります。それからはまた別でその知見を活かし、リアーキテクチャということでゼロイチでマイクロサービスアーキテクチャの設計をしたりしていました。</p><p>読書感想文として本書を選んだ理由としては、私自身のマイクロサービスアーキテクチャとやらについての考え方の整理ができたらなー！といったものになります。</p><p>改めて本書を読み直してみると、マイクロサービスアーキテクチャに関する考慮事項が網羅的に記載されているような気がしています。しかし、詳細な部分に関してはどうしても紙面の都合上、書ききれない部分も多かったのかこれを読んだだけでマイクロサービスアーキテクチャを設計・開発・実装までできるかというと、そこにはちょっとステップがあるかなというイメージです。</p><p>ただこれからマイクロサービスアーキテクチャについて知りたい！とか、導入を検討している！とかという方にはオススメの本かなと個人的には思っております！</p><p>さて改めて、本書の紹介に戻ります。基本情報は以下です。<br>※ この記事の執筆時点では、Google ブックス等で試し読みも可能でした。</p><ul><li><strong>発売日:</strong> 2020年3月23日</li><li><strong>ページ数:</strong> 549ページ</li><li><strong>コードサンプル:</strong> Java（考え方がメインなので、Java 未経験でもそんなに問題もないかなと思います。）</li></ul><p>目次とそれらのテーマとしては、以下のようになります。（テーマは、私自身が独断と偏見でつけたものになりますが。）</p><ul><li><strong>マイクロサービスとは。</strong><ul><li>Chapter 1: モノリシック地獄からの脱出</li><li>Chapter 2: サービスへの分割</li></ul></li><li><strong>マイクロサービス間通信について。</strong><ul><li>Chapter 3: マイクロサービスアーキテクチャで使われるプロセス間通信</li><li>Chapter 4: サーガによるトランザクションの管理</li></ul></li><li><strong>マイクロサービス特有の実装課題と解決について。</strong><ul><li>Chapter 5: マイクロサービスアーキテクチャにおけるビジネスロジックの設計</li><li>Chapter 6: イベントソーシングを使ったビジネスロジックの開発</li><li>Chapter 7: マイクロサービスアーキテクチャでのクエリーの実装</li><li>Chapter 8: 外部 API パターン</li></ul></li><li><strong>マイクロサービスのテストについて。</strong><ul><li>Chapter 9: マイクロサービスのテスト（前編）</li><li>Chapter 10: マイクロサービスのテスト（後編）</li></ul></li><li><strong>マイクロサービスの運用・保守について。</strong><ul><li>Chapter 11: 本番環境に耐えられるサービスの開発</li><li>Chapter 12: マイクロサービスのデプロイ</li></ul></li><li><strong>モノリスからマイクロサービスへ。</strong><ul><li>Chapter 13: マイクロサービスのリファクタリング</li></ul></li></ul><p>それでは、それぞれのテーマごとに所感を述べていく感じで本記事では進めていこうと思います。</p><h1 id="Ch-1-2-「マイクロサービスとは。」"><a href="#Ch-1-2-「マイクロサービスとは。」" class="headerlink" title="Ch. 1 ~ 2 「マイクロサービスとは。」"></a>Ch. 1 ~ 2 「マイクロサービスとは。」</h1><p>最初の Chapter 2つでは、マイクロサービスのメリット・デメリット。そもそもマイクロサービスとはということと、必ず悩まざるをえなくなるサービスの分割方法といったことについて述べられています。</p><p>まず、マイクロサービスアーキテクチャを導入するということであればこの部分が整理できていないと、後で必ず後悔する（後の章を見るとわかりますが、本当にマイクロサービスアーキテクチャは、モノリスと比べて考慮事項が多くなります。）と思うので、必ずこの部分は整理できているとよいなと思いました。</p><p>気になりトピックは以下にまとめておきます。（※ 以降、斜字部分は本書からの引用です。）</p><ul><li><em>マイクロサービスは、チームに自主性・自律性を与え、開発チーム間の結合が疎になる</em><ul><li>こちらは、マイクロサービスアーキテクチャを導入するメリットとして記載されているものです。</li><li>このような組織構造としてのメリットというのは、蔑ろにされがちのような気がする？（熟達したエンジニアであればそうではないと思いますが。）のですが真のメリットとしてこちらを考慮できていたらナルホドヨサソウ。と思いました。</li><li>コンウェイ・逆コンウェイの法則（ <a href="https://bliki-ja.github.io/ConwaysLaw/">逆コンウェイの方は、作戦とかと言い換える方が多いような気もしますが…。</a> ）の記載も本書中にありましたが、やっぱり組織構造とアーキテクチャというのは切っても切り離せない関係なのかなーと再認識しました。（本当の本当に、マイクロサービスアーキテクチャを考えるうえではその通りだなと思っています。）</li></ul></li><li><em>マイクロサービスアーキテクチャを使う時、個々の境界づけられたコンテキスト（DDD の bounded context）はサービス、またはサービスのグループになります</em><ul><li>こちらは、マイクロサービスアーキテクチャと DDD の相性は非常に良いよねという文脈で記載されているものです。</li><li>この記載だと、境界づけられたコンテキストのグループが1つのサービスになるという風には読み取れないですかね…。しかし、組織の構造やその他のメリット・デメリットを整理したうえで境界づけられたコンテキストのグループを1つのモジュラーモノリスとして定義することは可能なのかな（むしろそうしておくべきタイミングは多々あるのではないか。）とも思いました！</li></ul></li></ul><h1 id="Ch-3-4-「マイクロサービス間通信について。」"><a href="#Ch-3-4-「マイクロサービス間通信について。」" class="headerlink" title="Ch. 3 ~ 4 「マイクロサービス間通信について。」"></a>Ch. 3 ~ 4 「マイクロサービス間通信について。」</h1><p>以降、だんだんとマイクロサービスアーキテクチャ特有の考慮事項に入っていきます。<br>こちらでは、マイクロサービス間での通信や、マイクロサービス間でのトランザクション処理について述べられています。</p><p>同期・非同期通信の使い分けや API のあり方、各種通信プロトコル、非同期処理のベストプラクティス etc… といった内容が幅広く紹介がされており、この辺はマイクロサービスアーキテクチャによらず重要な考え方だなと思いました。<br>また、マイクロサービス間におけるトランザクション処理も必ず悩まざるをえなくなるものの1つで、よく Saga といったものが挙げられますがこちらも非常にわかりやすくまとめられていました。</p><p>気になりトピックは以下になります。</p><ul><li><em>可用性をできるかぎりあげたいなら、同期通信をできるかぎり減らさなければなりません。（非同期通信を増やさなければなりません。）</em><ul><li>複数システムを利用する場合は、それらの可用性の積になるからね。といった文脈で述べられています。</li><li>特にこれは、コマンド系のものに限定した話かとは思うのですが（もちろん参照系のものでは、非同期通信は有効な手段ではないため。）全てのリソースにおいてこちらの話を適用しようとするとなかなか壮大になりそうな気もしたので使い所はあるのかなとも思いました。</li></ul></li><li><em>ごく単純なサーガを除き、オーケストレーションを使うことをお勧めします。</em><ul><li>サーガにて、コレオグラフィベースとオーケストレーションベースどちらがよいかという文脈で述べられています。</li><li>こちらは確かにソウデスネー！と思いました。上記の通り全てコマンド系のものは、オーケストレーションベースのサーガに則ってハンドリングするかと言われると悩ましいところではありますが…。（ACID トランザクションのうち分離性を担保できないため、不必要に複雑さが増してしまう可能性がありそう？）</li><li>（ただ、一度マイクロサービス内でオーケストレータを飼える仕組みを整理できれば絶対できないことでもないのかなー？とも思ったり？）</li></ul></li></ul><h1 id="Ch-5-8-「マイクロサービス特有の実装課題と解決について。」"><a href="#Ch-5-8-「マイクロサービス特有の実装課題と解決について。」" class="headerlink" title="Ch. 5 ~ 8 「マイクロサービス特有の実装課題と解決について。」"></a>Ch. 5 ~ 8 「マイクロサービス特有の実装課題と解決について。」</h1><p>こちらでは、マイクロサービス特有の実装課題がいくつか紹介されていて、またそれらに対する解決方法も述べられていました。</p><p>ナルホドナーポイントがたくさんあるのですが、Chapter ごとに1つの記事が書けるくらいのボリュームがあるものなので、ここでは軽い紹介程度にとどめておきますがざっと以下のようなものについて述べられています。</p><ul><li>マイクロサービスと DDD の相性の良さとは。アグリゲートや Domain event の関連・有効性。</li><li>マイクロサービスにおけるイベントソーシング。</li><li>マイクロサービスにおけるクエリーの実装。（API composition。CQRS。API gateway。）</li></ul><p>気になりトピックは以下になります。</p><ul><li><em>1つのトランザクションで1つのアグリゲートを作成または更新する。</em><ul><li>こちらは、アグリゲートのルールということで3つ目のルールとして述べられていたものです。</li><li>筆者もこちらには初めて読んだ時驚いたという記載がありましたが、私も ？？？ となりました。今まで開発してきたモノリスのものであっても、トランザクションの扱いには幾分悩まされましたので（そのような場合には、しっかりとデータ設計ができていない場合が多かったのもありますが。）、一考の余地はありそうかなと思いました。</li></ul></li><li><em>API ゲートウェイの開発と運用を担当するかは重要な問題です。</em><ul><li>こちらは、いわゆるマイクロサービスにおけるクエリーの実装部分で API gateway のオーナーシップについて述べられていたときの一節です。</li><li>API gateway には本書中に記載がありますが、普通いくつかの役割が含まれています。特にこの部分では、いわゆるプレゼンテーション的な役割に焦点をあてて述べられています。このプレゼンテーション的な役割は、どのチームが責任を持つようにするかは、きちんと最初に整理しておく必要があるかなーとも思いました。（もちろん、その他の役割についてもそうですが。）</li></ul></li><li><em>GraphQL を使った API ゲートウェイの実装</em><ul><li>こちらは、API ゲートウェイを実装する際にはといった文脈で述べられています。</li><li>最近？だと、<a href="https://www.apollographql.com/">Appolo</a> が、マイクロサービスの API gateway として活躍してくれる <a href="https://www.apollographql.com/docs/federation/">Appolo Federation</a> や、 <a href="https://www.apollographql.com/docs/router/">Apollo Router</a> を開発してくれているのでそちらも取り入れるのも1つの手かもしれません。</li><li>ただ GraphQL が全てのマイクロサービス間通信にとってかわるものになるかと言うと、一概にそうとは言えないかなと個人的には思っています。（そこまで本書中でも述べていたとも思っていないですが。）こちらもメリット・デメリットを整理したうえでの話となるかとは思いますが、適切な部分では適切な通信プロトコルを用いるのがよいのかなーと思っていたりします。（ <a href="https://book.productionreadygraphql.com/">Production Ready GraphQL</a> でも、そのような記載があった気がします。）</li></ul></li></ul><h1 id="Ch-9-10-「マイクロサービスのテストについて」"><a href="#Ch-9-10-「マイクロサービスのテストについて」" class="headerlink" title="Ch. 9 ~ 10 「マイクロサービスのテストについて」"></a>Ch. 9 ~ 10 「マイクロサービスのテストについて」</h1><p>こちらでは、やや毛色が変わりテストの文脈に入っていきます。<br>はじめにテストとは？ということが述べられており、段々とマイクロサービスにおいてはね。という流れで話が進んでいきます。</p><p>ユニットテストから始まり、統合テスト、コンポーネントテスト、エンドツーエンドテストという順序でテストに関しておおよそ網羅的に述べられていました。<br>それぞれのテストにおける得意な部分・不得意な部分に明示的に触れられていたのと、具体的にどのようにそれぞれのテストを記載するのがよいのかといったことが述べられていたので、テストに対する考え方が整理できるものになっていました。</p><p>気になりトピックは以下になります。</p><ul><li><em>サービスの受け入れテストとしては、エンドツーエンドテストよりもコンポーネントテストのほうがはるかに優れています。</em></li><li><em>エンドツーエンドテストは、できる限り少なくするに越したことはありません。そのためには、ユーザージャーニーテストを書くようにするとよいでしょう。</em><ul><li>これらは、エンドツーエンドテストの使いどころに関するところで述べられていたものになります。</li><li>マイクロサービスにおいて、いわゆるエンドツーエンドテストを行おうとすると、意外と考慮することが多く大変なイメージがあります。他のマイクロサービスに関しては、自身の管理下にないことが多いため。（組織構造をもとに設計しているとなおのことかなと。）</li><li>ユーザージャーニーテストを普段から扱う（負荷試験等では扱うことが多かったですが。）というのはなかなか考えになかったので、ナルホドナーと思いました。</li></ul></li></ul><h1 id="Ch-11-12-「マイクロサービスの運用・保守について。」"><a href="#Ch-11-12-「マイクロサービスの運用・保守について。」" class="headerlink" title="Ch. 11 ~ 12 「マイクロサービスの運用・保守について。」"></a>Ch. 11 ~ 12 「マイクロサービスの運用・保守について。」</h1><p>こちらでは、また毛色が変わりましてマイクロサービスの運用・保守等について述べられています。<br>マイクロサービスでは、デプロイはもちろんのこと監視といった部分も途端に複雑になっていきます。また、マイクロサービス間での認証や認可も考慮する必要が出てくるといったことはモノリスとの決定的な違いの1つですね。</p><p>監視の文脈で取り上げられていたものは、以下になります。</p><ul><li><em>Health Check API</em><ul><li>これはマイクロサービスに限った話でもないとは思いますが、いわゆる Health Check のためのエンドポイントを公開しておくというやつですね。</li></ul></li><li><em>Log aggregation</em><ul><li>マイクロサービスだと1つの不具合が複数のマイクロサービスにまたがっておきている場合がほとんどです。そのような場合に原因を突き止めるためのログはどのように管理しておけばよいのかというやつです。</li></ul></li><li><em>Distributed tracing</em><ul><li>Log aggregation と同様に、何かパフォーマンス的な課題を解決したいとなったときにどのようにトレースを管理しておけばよいのだろうかというやつです。</li></ul></li><li><em>Exception tracking</em><ul><li>イメージとしては Log aggregation のエラーレベル ver. といったものかなと。ただ、エラーログはその後の障害管理・追跡が困難なため、分けて述べられているようでした。</li></ul></li><li><em>Application metrics</em><ul><li>こちらもマイクロサービスに限った話ではないですが、各サービスでメトリクスを収集するためにはといったことが述べられています。</li></ul></li><li><em>Audit logging</em><ul><li>こちらも（略）ですが、ユーザーの動きをロギングしたやつですね。</li></ul></li></ul><p>特に、ログやトレースの管理というのはマイクロサービスならではのものになるので、しっかりと整理できていないといけないなと思いました。またこれらを実現するためにはということで、マイクロサービスシャシーやサービスメッシュも導入程度ではありますが述べられています。</p><p>デプロイ部分では、Google Cloud や AWS の具体的なサービスも取り入れて、どのように実現することができるかが詳細に述べられていました。</p><p>やや発売日から日にちが経ってしまったこともあり、現在ではまた様々なサービスが新しく出て実現方法は色々と変わってきてはいそうですが、これらの考え方は決して無くなったわけではないので現在でも非常に有用な知識なのかなと思います。</p><h1 id="Ch-13-「モノリスからマイクロサービスへ。」"><a href="#Ch-13-「モノリスからマイクロサービスへ。」" class="headerlink" title="Ch. 13 「モノリスからマイクロサービスへ。」"></a>Ch. 13 「モノリスからマイクロサービスへ。」</h1><p>こちらでは、モノリスからマイクロサービスへ移行していくにはといったことが述べられています。</p><p>こういった Chapter では、混み入ったものは出てこなそうだなーとも思ったのですが…。なかなか具体的にどのようにしてモノリスからマイクロサービスへ移行すればよいのかといったことが述べられていました。</p><p>基本的に、モノリスからマイクロサービスにダウンタイム無く移行したいといった場合には、既存のモノリスのシステムも動かしつつ、そこから段階的に新たなマイクロサービスのシステムへと移行するといった風なものが自然かなと思います。</p><p>そのような場合には、以下のようなことが悩みポイントとして出てくるはずです。これらを整理してくれているのがこちらの Chapter です。</p><ul><li>そもそも移行作業をどのように価値として他チーム（主にビジネス領域のチーム）に訴求していくべきか。</li><li>そもそもどのようなアーキテクチャで2つのシステムを組み合わせるか。</li><li>既存の認証・認可機構があった場合にはどのようにするべきか。</li><li>マイクロサービスアーキテクチャに移行する順序はどうするべきか。</li><li>マイクロサービスへの分割はどのような粒度で行うべきか。</li><li>モノリスとマイクロサービスでのトランザクションはどのように担保するべきか。</li><li>新たなマイクロサービスに移行するうえでより適切なモデリングも行うとなった場合にそれらのモデルの変換はどのように行うか。</li></ul><p>モノリスからマイクロサービスに移行しようと考えている場合には、こちらも必ず整理しておきたいものになりそうですね！</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p><strong>マイクロサービスパターン MicroServicePatterns 実践的システムデザインのためのコード解説</strong> の読書感想文でした。</p><p>マイクロサービスアーキテクチャとはなんぞや！どうやって実現するんや！といったことが本書を読めば一定は理解できるものかなと思っています。</p><p>アーキテクチャを検討するうえでは、同時にしっかりと組織（組織構成・既存メンバーの能力・採用 etc…）のことも一緒くたにして考えなくてはならないものなのカナーと思った次第でした！</p><p>またおそらくモノリスであったとしても、いわゆる外部サービス（メール送信や、Push 通知、何かに特化した別の Data Store etc…。）を使う際にも一部は導入できる考え方もあったりするのかなーとも思いましたので、まだまだマイクロサービスアーキテクチャを導入する予定もない。という方でも一読の価値はあるものかなと思ってます。</p><p>次は、藤戸さんの <a href="/articles/20230302a/">図解即戦力 Google Cloudのしくみと技術がこれ1冊でしっかりわかる教科書</a> です！よろしくお願いいたします！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9/">マイクロサービス</category>
      
      
      <comments>https://future-architect.github.io/articles/20230301a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「リーダブルコード」を読んでTerraformの可読性について考える</title>
      <link>https://future-architect.github.io/articles/20230228a/</link>
      <guid>https://future-architect.github.io/articles/20230228a/</guid>
      <pubDate>Mon, 27 Feb 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230228a/top.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;565&quot;&gt;

&lt;p&gt;こんにちは。TIGの伊藤太斉です。&lt;/p&gt;
&lt;p&gt;この記事は、&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230228a/top.jpg" alt="" width="400" height="565"><p>こんにちは。TIGの伊藤太斉です。</p><p>この記事は、<a href="/articles/20230217a/">読書感想連載</a>の6日目です。</p><p>今回取り上げる書籍は、多くのエンジニアが通過するであろう、「<a href="https://www.oreilly.co.jp/books/9784873115658/">リーダブルコード</a>」についてです。</p><p>最近、「<a href="https://tech.mntsq.co.jp/entry/2022/12/27/144435">もし「リーダブルコード」を弁護士が読んだら？</a>」という記事をたまたま見かけて読んでみました。記事としては契約書にも同じことが言える、と自分が知らない世界でも使える部分はあるのだと読んでいました。そして、ふと考えてみると、「うちにも本があったじゃないか。しかも積読している。」と思い出し、今回積読解消の機会としてこの連載に参加しました。</p><p>リーダブルコードを書評や感想については既に多くの方が書いている内容があるので、今回はTerraformと絡めて書いていければと思います。私は、俗にいうプログラミング言語に対しては明るくない方なので、自分が理解できうるTerraformにおいて考えたらどうなるか、について地震の頭の整理、理解のためにも本記事を書いてみました。</p><h2 id="Terraformにおける「リーダブル」"><a href="#Terraformにおける「リーダブル」" class="headerlink" title="Terraformにおける「リーダブル」"></a>Terraformにおける「リーダブル」</h2><p>Terraformは<a href="https://github.com/hashicorp/hcl2">HCL</a>(HashiCorp <strong>Configuration</strong> Language, 現在はHCL2)に則って書かれている言語です。名前にConfigurationと含まれているくらい、「クラウドリソースをソースコードとして定義する」ことに長けた記法、ツールであるため、書籍に含まれている内容でなぞらえることが出来ない、難しいものもいくつかあります。</p><p>そのため、今回リーダブルコードの概要を元にTerraformについて考えるのではなく、私が一通り読んでみて、「これはTerraformにも言えることだろう」や「意識したほうがよりわかりやすくなるだろう」と思ったことを絞って紹介できればと思います。</p><h2 id="章立て、概要"><a href="#章立て、概要" class="headerlink" title="章立て、概要"></a>章立て、概要</h2><p>章立てについては<a href="https://www.oreilly.co.jp/books/9784873115658/#:~:text=%E7%9B%AE%E6%AC%A1-,%E7%9B%AE%E6%AC%A1,-%E8%A8%B3%E8%80%85%E3%81%BE%E3%81%88%E3%81%8C%E3%81%8D%0A%E3%81%AF%E3%81%98%E3%82%81">こちらのリンク</a>より参照ください。</p><p>中身は多くの技術書のように、前の章に紐づいて順番に読み進める形ではなく、各章が独立しているため、「これは自分では意識できている」「すでに取り組めている」などの内容は読み飛ばすこともできます。また、終わりになるにつれてより改善するとして難しくなる内容になっていくので、チェックシート的に手前の章から確認していくのも良いと思いました。今回、私自身も「Terraformに生かせるところ」という目で読んだため、流し読みになっている部分も精読した部分もどちらもあります。</p><p>チームで購入して、ある章をテーマに議論したり、大事にしたいことを会話できるきっかけにできそうと思いました。</p><h2 id="7章-制御フローを読みやすくする"><a href="#7章-制御フローを読みやすくする" class="headerlink" title="7章　制御フローを読みやすくする"></a>7章　制御フローを読みやすくする</h2><p>ここで取り上げられている内容は、条件式やループなど、ソースコードを簡単にすることも複雑にすることもできることについて言及されています。<br>Terraformにおいては、if文やgotoなどは存在はしません。ですが、countやfor文、dynamic構文など繰り返し処理など通常のTerraformのリソース定義に追加できるfunctionsが存在します。これらについて考えていきます。</p><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>countは、以下の例①のようにリソースを単純に複製する使い方はもちろん、例②のような使い方をすることで、リソースの作成要否を担うこともできます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例①</span></span><br><span class="line">resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;count&quot;</span> &#123;</span><br><span class="line">  count = 3</span><br><span class="line">  provisioner <span class="string">&quot;local-exec&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">command</span> = <span class="string">&quot;echo \&quot;これは<span class="variable">$&#123;count.index&#125;</span>番目のリソースです。\&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例②</span></span><br><span class="line">resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;bool_count&quot;</span> &#123;</span><br><span class="line">  count = local.create_resource ? 1 : 0</span><br><span class="line">  provisioner <span class="string">&quot;local-exec&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">command</span> = <span class="string">&quot;echo \&quot;このリソースは<span class="variable">$&#123;local.create_resource&#125;</span>なので、作成されます。\&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">locals &#123;</span><br><span class="line">  create_resource = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>書籍の中では三項演算子についても触れている節があり、Terraformでも同様に気をつけようと考えました。<br>例②では<code>create_resource</code>という変数にbool値を渡し、リソースを作るかどうかを決めています。ここではtrueを渡しているため、作成され、「このリソースはtrueなので、作成されます。」というテキストが出力されます。また、この書き方であれば変数も直接的で一通りソースを読むことで「いつ」必要な変数を渡すかがある程度明確になります。<br>一方、次のケースを見てみましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;bool_count&quot;</span> &#123;</span><br><span class="line">  count = local.unnessesary_resource ? 0 : 1</span><br><span class="line">  provisioner <span class="string">&quot;local-exec&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">command</span> = <span class="string">&quot;echo \&quot;このリソースは<span class="variable">$&#123;local.create_resource&#125;</span>の時に作成されます。\&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>変数を<code>unnessesary_resource</code>に変更しました。先ほどの例では変数は「必要ならtrueを」渡すため、肯定的な命名に対してtrueを渡すことであまり違和感がありません。しかし、この例では「不要であるならばtrueを」渡さないといけないため、否定に対して肯定をする、ような気持ち悪さを感じます。すごく。<br>このように、一回頭で考える時間を要する変数の作りになっていると、それだけで気持ち悪いものと感じました。変数や、その取り回しについては「直接的に、最終的にどうなるかわかりやすく」を考えるべきですね。ことわざの「名は体を表す」というのは言い得て妙だなと思いました。<br>ここで触れた、変数名、特にBoolについては「3.6　ブール値の名前」や「9章　変数と読みやすさ」で触れているので、こちらも合わせて読んでみてください。</p><h3 id="Dynamic構文"><a href="#Dynamic構文" class="headerlink" title="Dynamic構文"></a>Dynamic構文</h3><p>Terraformの<code>count</code>や<code>for_each</code>はリソースそのものを繰り返し、複数リソースを作成する際に利用します。一方、Dynamic構文についてはリソース内で同様の設定をするときに利用する構文です。以下の例ではdynamicを使ってセキュリティグループを作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  ingress_web = &#123;</span><br><span class="line">    https = &#123;</span><br><span class="line">      description = <span class="string">&quot;HTTPS from VPC&quot;</span></span><br><span class="line">      from_port   = 443</span><br><span class="line">      to_port     = 443</span><br><span class="line">      protocol    = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">      cidr_blocks = <span class="string">&quot;10.0.0.0/8&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    http = &#123;</span><br><span class="line">      description = <span class="string">&quot;HTTP from VPC&quot;</span></span><br><span class="line">      from_port   = 80</span><br><span class="line">      to_port     = 80</span><br><span class="line">      protocol    = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">      cidr_blocks = <span class="string">&quot;192.168.0.0/16&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_security_group&quot;</span> <span class="string">&quot;web&quot;</span> &#123;</span><br><span class="line">  name        = <span class="string">&quot;allow-web&quot;</span></span><br><span class="line">  vpc_id      = aws_vpc.main.id</span><br><span class="line"></span><br><span class="line">  dynamic <span class="string">&quot;ingress&quot;</span> &#123;</span><br><span class="line">    for_each = &#123; <span class="keyword">for</span> i <span class="keyword">in</span> local.ingress_web : i.protocol =&gt; i &#125;</span><br><span class="line">    content &#123;</span><br><span class="line">      description = ingress.value.description</span><br><span class="line">      from_port   = ingress.value.from_port</span><br><span class="line">      to_port     = ingress.value.to_port</span><br><span class="line">      protocol    = ingress.value.protocol</span><br><span class="line">      cidr_blocks = ingress.value.cidr_blocks</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例では、dynamicを単発で利用し、セキュリティグループのインバウンドを許可する設定をしています。（例は<a href="/articles/20211029a/">Terraformerとしてコードを書いて思うこと</a>の例を一部改変したものです)この例であれば、dynamic内部のネストが深くならないため、当てはめていくパラメータも容易に想像がつきやすいものだと感じます。</p><p>一方、公式でも記載されているdynamicブロックを<a href="https://developer.hashicorp.com/terraform/language/expressions/dynamic-blocks#multi-level-nested-block-structures">複数ネストさせるケース</a>をみてみます。(以下、公式より引用)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dynamic <span class="string">&quot;origin_group&quot;</span> &#123;</span><br><span class="line">  for_each = var.load_balancer_origin_groups</span><br><span class="line">  content &#123;</span><br><span class="line">    name = origin_group.key</span><br><span class="line"></span><br><span class="line">    dynamic <span class="string">&quot;origin&quot;</span> &#123;</span><br><span class="line">      for_each = origin_group.value.origins</span><br><span class="line">      content &#123;</span><br><span class="line">        hostname = origin.value.hostname</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらはdynamicを2つ利用し、ネストが通常より深くなっています。</p><p>この場合は、ソースを見た時の理解がやや遅くなり、具体的に代入するパラメータの形式もわかりにくくなっています。「変数にはなるべく同じことを書かない」などのポリシーがある場合ではやむを得ないところがあるとは思います。この場合は変数の記載がいくらか重複させたとしてもネストを浅くすることでソースの可読性や流れが掴みやすくなると思います。<br>公式ドキュメントでも</p><blockquote><p>Overuse of dynamic blocks can make configuration hard to read and maintain,</p></blockquote><p>と記載があるので、dynamicブロックの利用は用法・用量を守って使っていきましょう。<br>本の中では対象としている章以外にも、「8.5　例：複雑なロジックと格闘する」と合わせて読むと、理解や納得感が増すと感じました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はリーダブルコードを読んでTerraformをどう見るか、応用するか、について考えてみました。元々Terraform自体が、</p><ul><li>このリソースについて記述する</li><li>リソースに渡すパラメータは決まっている</li></ul><p>など、自由度という意味ではある程度限られてきますが、とはいえ、繰り返し構文にあたる<code>for_each</code>や<code>count</code>をはじめとしたTerraformの「機能」として割り振られているものについてはリーダブルコードを読んだことで考えることがあるように感じました。<br>リーダブルコード自体は普段意識していることでも、気がついたら忘れてしまうような大事なことが多く書かれていると感じました。私は物理本で買いましたが、近くに手に取れるところに置き、時々見返しても良いなと思いました。<br>また、冒頭でも触れた弁護士の方が読んでも納得する部分があるということはつまるところ「言語」全般に対しても言えるのではと改めて感じたところでもありますので、リーダブルなソースだけではなく、リーダブルな日本語も書けるように日々積み重ねていければと思います。</p><p>明日の読書連載は川口さんの<a href="/articles/20230301a/">マイクロサービスパターン MicroServicePatterns 実践的システムデザインのためのコード解説</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%AA%AD%E6%9B%B8/">読書</category>
      
      
      <comments>https://future-architect.github.io/articles/20230228a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「スッキリわかるJava入門 実践編 第3版」の読書感想文</title>
      <link>https://future-architect.github.io/articles/20230227a/</link>
      <guid>https://future-architect.github.io/articles/20230227a/</guid>
      <pubDate>Sun, 26 Feb 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230227a/top.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;567&quot;&gt;

&lt;h1 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230227a/top.jpg" alt="" width="400" height="567"><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次</a></li><li><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</a></li><li><a href="#%E3%81%A9%E3%82%93%E3%81%AA%E4%BA%BA%E3%81%AB%E3%82%AA%E3%82%B9%E3%82%B9%E3%83%A1%E3%81%8B">どんな人にオススメか？</a></li><li><a href="#%E6%84%9F%E6%83%B3%E3%83%A1%E3%83%A2">感想メモ</a><ul><li><a href="#%E7%B7%9A%E3%81%A7%E6%8D%89%E3%81%88%E3%82%8B%E9%80%B2%E6%8D%97%E3%81%A8%E9%9D%A2%E3%81%A7%E6%8D%89%E3%81%88%E3%82%8B%E9%80%B2%E6%8D%97">線で捉える進捗と、面で捉える進捗</a></li><li><a href="#%E3%83%81%E3%83%BC%E3%83%A0%E3%81%AB%E3%82%88%E3%82%8B%E9%96%8B%E7%99%BA">チームによる開発</a></li></ul></li><li><a href="#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB">おわりに</a></li></ul><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。<br>フューチャーアーキテクト株式会社の棚井です。</p><p>略歴として、フューチャーに新卒入社、Technology Innovation Group で IT コンサルタントを 3 年、Global Design Group で新規事業開発を 1 年と担当し、現在は Human Resources（つまり HR）でバックオフィスの新卒採用業務を担当しております。2023 年 4 月には当社に 100 名超の新卒が入社予定でして、その新人研修のリーダーを担当する予定です。</p><p>今回は <a href="/articles/20230217a/">読書感想文連載</a> ということで、私のパートでは「<a href="https://book.impress.co.jp/books/1119101169">スッキリわかる Java 入門 実践編 第 3 版</a>」を選びました。同じ著者から「<a href="https://book.impress.co.jp/books/1119101083">スッキリわかる Java 入門 第 3 版</a>」というベストセラー本も出版されており、新人研修での参考書籍としてや Java の習得が必要になったタイミングで同書のお世話になったエンジニアは多いのではと思います。私の周囲でも「スッキリ Java」の単語だけで話が通じるくらい普及しており、「プログラミング初心者におすすめの本は何ですか？」と聞かれた際にその人の職場が Java 環境であれば、真っ先にこの本の「入門編」を進めています。</p><p>ただし、今回取り上げたのは「<strong>実践編</strong>（ブックカバーが濃い緑）」の方です（以降、「スッキリわかる Java 入門 第 3 版」を「入門本」、「スッキリわかる Java 入門 実践編 第 3 版」を「実践本」と呼びます）。</p><p>当社の新人研修でも「入門編」と「実践編」の両方が参考図書に指定されており、購入経費が会社から支給されるほどには購入が推奨されています。</p><p>「入門編」は Java の基本文法からオブジェクト指向についてまで説明されているため多くの新人が購入するのですが、「実践編」の内容については <strong>実践</strong> というワードからも「まだ自分には早いのでは？」感があり、「配属後に必要となったら購入しよう」→「購入せずのまま」の流れにいる方も多いのではと思います。恥ずかしながら私もその 1 人で、研修時代に書店で流し読みした際に「いまは不要かな」と判断して購入までには至りませんでした。</p><p>そして時は経過し、エンジニア歴 4 年目にして偶然に「実践本」の内容を見返す機会がありました。</p><p>一通り目を通したところ、本書後半の特に「第 Ⅲ 部 効率的な開発の実現」の内容が、まさに「現場エンジニアとして最初に求められるスキル」を体系的に説明していると感じまして、今回の読書感想文連載の本として選ばせていただきました。</p><p>以下に、実践編の目次を記載します。</p><ul><li>第 0 章 Java を使いこなす技術者をめざそう</li><li>第 I 部 さまざまな基本機能<ul><li>「入門本」の理解を前提とした応用編</li></ul></li><li>第 Ⅱ 部 外部資源へのアクセス<ul><li>データベースやネットワークの利用</li></ul></li><li>第 Ⅲ 部 効率的な開発の実現<ul><li>チーム作業や品質を意識した開発について</li></ul></li><li>第 Ⅳ 部 より高度な設計をめざして<ul><li>デザインパターン、並列処理</li></ul></li></ul><p>本記事は「読書感想文」なので、特に目を引いた「第 Ⅲ 部 効率的な開発の実現（第 10 章 ~ 第 14 章）」のみを限定して取り上げます。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>章立てや中身の詳細を知りたい方は、インプレスブックスの<a href="https://book.impress.co.jp/books/1119101169">書籍案内</a>や、IT 入門書籍 スッキリシリーズの<a href="https://sukkiri.jp/books/sukkiri_javap3">書籍案内</a>をご覧ください。</p></div><h1 id="どんな人にオススメか？"><a href="#どんな人にオススメか？" class="headerlink" title="どんな人にオススメか？"></a>どんな人にオススメか？</h1><p>この「実践本」は、</p><ul><li>プログラミング経験はあるが、チーム開発は未経験の駆け出しエンジニア</li><li>研修は一通り完了し、配属までのアベイラブル期間の学習教材を探している新人</li><li>チームに新人を受け入れる予定だが、まずは何を教えるべきか迷っている人</li></ul><p>のようなステータスの方にオススメです。</p><p>本記事を執筆時点（2023 年 2 月下旬頃）の私は、新卒採用業務を担当しています。「採用」の業務範囲は幅広く、「会社説明会の準備・実施」「採用面接の調整・遂行」「学生向けのイベント企画・推進」「採用広報活動」などを進めております。</p><p>そんな業務の中では「当社に入社予定の新人さん」から HR 宛に質問をいただくこともあります。入社予定の学生さんから受ける質問には「入社後に活躍するために、入社前に何をやっておくべきですか？」というのが多くあります。「やっておいて欲しいこと」はもちろん沢山あるのですが、個々の状況により適切なアドバイスは変わってくるため、一律の回答が難しい質問です。なので私は、以下のように「プログラミング経験はあるか」と「Git によるコード共有を前提としたチーム開発の経験はあるか」という判断軸のもと、アドバイス内容を調整しております。</p><ul><li>プログラミング経験なし（グループ A）</li><li>プログラミング経験あり<ul><li>Git によるコード共有を前提としたチーム開発の経験がない（グループ B）</li><li>Git によるコード共有を前提としたチーム開発の経験がある（グループ C）</li></ul></li></ul><p>今回取り上げた「実践本（第 10 章 ~ 第 14 章）」がオススメなのは、特に「グループ B」に所属する方々です。<br>このグループに属する人達には、</p><ul><li>大学時代にプログラミングの経験あり</li><li>経験内容の大まかな方向性は<ul><li>Python 経済圏でのデータ分析</li><li>競技プログラミング</li><li>個人趣味レベルでの Web サービス開発（フレームワークを動かしてみた）</li></ul></li><li>Git の本格的な利用経験なし（コマンドは知っているが）</li><li>チーム開発の経験なし（別エンジニアとの共同作業経験なし）</li></ul><p>のように、これまでのプログラミングの範囲が「個人で完結」していたという特徴があります。</p><p>「IT によるアウトプット ≒ コーディング」のフレームでも十分なアウトプットが出せていた方々、とも表現できます。</p><p>本書はこのような、プログラミングの基本・基礎は身につけているが「チームでの開発経験」が不足しているエンジニアに読んでもらいたいと思います。また視点を変えると、チームに新人メンバーを受け入れる予定の上司エンジニアが「まず、キャッチアップして欲しい内容をリストアップするための参考教材」としても有効活用できると思います。</p><h1 id="感想メモ"><a href="#感想メモ" class="headerlink" title="感想メモ"></a>感想メモ</h1><p>第 10 章 ~ 第 14 章を読んで、特に「この考え方は現場で大事だな」と思ったところから、さらに厳選した 2 つです。</p><h2 id="線で捉える進捗と、面で捉える進捗"><a href="#線で捉える進捗と、面で捉える進捗" class="headerlink" title="線で捉える進捗と、面で捉える進捗"></a>線で捉える進捗と、面で捉える進捗</h2><p>仕事で大事なことの一つに、アウトプットの認識合わせがあります。より具体化すると、上司にとっての「ここまでやって欲しいライン」と、部下にとっての「これくらいやれば大丈夫のライン」という 2 つのラインについて、そのズレを早い段階で無くして「成果物に求められれるラインを双方で合意すること」が手戻りなく作業を進める上では重要です。この合意ラインの設定作業を怠って先に資料作成や開発作業を進めてしまうと、後になって「それ、聞いてないし間違っている。」からの手戻り作業で「もっと早く確認しておくべきだった。」の後悔ルートというのは、おおよそ殆どの新人が最初に通る道だと思います。（目線を変えると、新人は最初にこんな感じで転ぶことを知っている上司の元に配属になっていたら、その手戻り分も裏のバッファで考慮されていたりして、後から先輩社員の凄さに気づいたりします。）</p><p>開発フェーズでの具体的な認識合わせとしては「進捗確認」があります。チーム単位であれば毎日の朝会や、規模の大きいプロジェクトなら週次での「進捗確認」が開かれており、いろいろなドラマが繰り広げられているのだと思います。進捗確認にて、上司が不安になるタイミングの会話を再現すると、</p><p>（上司）「この A 機能、来週末にリリース予定ですが、開発進捗に問題ありませんか？」<br>（部下）「はい。開発は予定通りに進んでいまして、オンスケでリリース可能です。」</p><p>というものです。</p><p>この 2 人の間で既に「成果物の積み重ねに基づいた信頼関係」が築かれているならばこの会話でも違和感はありませんが、配属して間も無くあまり実績を残していない新人さんがこの回答を投げてきたら黄色信号だと思います。というのも、進捗を聞かれている時点で「上司は何かしらの問題を感じている」のであり、それを部下側は認知できていない（≒ 上司のここまでやって欲しいラインと、部下のここまでやれば大丈夫のラインがズレている）可能性があるからです。（もちろん、マイクロマネジメント的な属性を持つ場合や、1 人 1 人全員に進捗を聞くという非効率なマネジメント方法を取っているならば話は別ですが。）</p><p>私自身の経験やいくつかのプロジェクトを見てきて、この認識ズレは「進捗の捉え方」で説明可能なケース多く、本書の「線で捉える進捗と、面で捉える進捗」の進捗イメージによる説明がまさにその通りだと思いました。詳細内容は「実践本の p.407」を参照頂きたいのですが、ざっくり表現すると</p><p>① 進捗状況を、<strong>開発の 1 軸</strong> でイメージしているパターン<br>② 進捗状況を、<strong>開発と品質の 2 軸</strong> でイメージしているパターン</p><p>という 2 パターンの話です。もちろん、② が望ましい進捗把握です。</p><p>新人さんの進捗認識だと「進捗率は『完成した機能数と残りの機能数』で表現でき、0%~100%の間になる。全 5 機能中 3 機能完成しているならば、進捗率は 3&#x2F;5 で 60%である。残りは 40%なのでスケジュール的に問題なし。」だったとしても、レビュアーの視点では「機能開発は 60%進んでいるが、品質テストが十分になされておらず、リリース可能とは言い難い。」のように、視点の数で認識相違が発生するパターンです。① の視点だとオンスケで問題なしですが、② の視点だとアラート or リスケ調整というように、視点の違いで状況判断が反転することもあります。通常の開発進捗に加えて <strong>品質の視点</strong> を意識できているかどうかが、脱新人に向けた一歩になるのだと思います。</p><p>より上級職のマネジメントになると、視点の数がより増えて面を超えて立体で把握するだけにとどまらず、数多の経験から洗練された「進捗把握の視点」があるのだとろう思いました。普段の業務に加えて、読書により「代理経験」を積むことでより多くの視座を獲得することが重要なんだなと、改めて理解させられる内容でした。</p><h2 id="チームによる開発"><a href="#チームによる開発" class="headerlink" title="チームによる開発"></a>チームによる開発</h2><p>実践本の第 Ⅲ 部では「開発効率を向上する方法」が取り上げられ、その大枠として以下の 3 つが提示されています。</p><p>① 個人の知識と技能を上げる<br>② 道具を使う<br>③ 複数人で手分けする（つまり「分業」）</p><p>「実践本」では、① と ② に比べて ③ の分業は <strong>諸刃の剣</strong> であると指摘し、③ の「手分けしたことによって生じる非効率性」として以下の 2 点をあげています。</p><p>（1）連携が悪いと開発効率に悪影響を与える<br>（2）人数が増えるほど連携が難しくなる</p><p>「実践本」では上記問題を提示して以降はスコープを「開発者の連携」に絞り込み、Git によるソースコードの共有、アジャイルな開発話へと進んでいきます。<br>ここでは「諸刃の剣」について、ポストコロナの働き方を絡めて考えていきます。</p><p>プロジェクトでの働き方は「分業」が基本になるとはいえ、最初から業務が細分化されている訳ではありません。「規模の拡張に合わせて、メンバーを増員する」ことに伴い、これまで個人が処理していた業務が分割され、分割されたそれぞれの業務により細やかに対応できるようになる、ということが繰り返されるのが分業の進み方 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> だと思います。</p><p>この「メンバーの増員」についてはソフトウェア業界では昔からの難題らしく、<a href="https://www.amazon.co.jp/dp/B0998ZTVTD/">人月の神話</a>では「遅れているソフトウェアプロジェクトへの要員追加は、プロジェクトをさらに遅らせる」というブルックスの法則が語られています。なぜ人員追加が更なるスケジュールの遅延につながるかというと、新規メンバーの参画直後は「既存メンバーの作業リソースの一部を、新規参画メンバーのフォローアップに割り当てる必要がある」からです。もちろん人員追加は「フォローアップ後の活躍」を期待したものですが、プロジェクの状況次第ではこの「フォローアップ中の一時的な作業遅延」を許容できない（人員追加したはずが、アウトプット量が減ってしまうことが耐えられない）ために、既存メンバーがより疲弊することもあります。（この件の話は、<a href="https://www.amazon.co.jp/dp/B08KRHDS84/">Clean Agile 基本に立ち戻れ</a>に詳しい記述があります。）</p><p>また、業務の引き継ぎではなく、分業のためにメンバーを追加する場合はその新規メンバーに「担当範囲が限定される分、現状よりも細やかな対応を期待する」ということになり、フォローアップ期間の延長要因となります。メンバーのリモートワーク適正次第では、知らないうちに取り返しのつかないトラブルが発生していることもあります。</p><p>ポストコロナの働き方については巨人の肩に乗った方がより将来を見通せると思うので、中島聡さんの「<a href="https://www.amazon.co.jp/dp/B08ZCVBFQL">ニュー・エリートの時代 ポストコロナ「３つの二極化」を乗り越える</a>」参照すると、社会への進化圧として以下 3 つが進行するとの記載があります。</p><p>① 時代遅れな習慣の淘汰<br>② 職務の明確化<br>③ 個人の能力・生産性の可視化</p><p>これらの内容詳細は書籍を読んで頂きたいのですが、直近の数年に会社で進んだ「仕事の進め方の変化」を思い返すと、この進化圧に沿ったものが多くあるため、今後の「チームによる開発の進め方」についても、このような法則を踏まえた計画・設計・実践が必要になるのだと思いました。</p><p>また「実践本」では、「分業のメリットを最大限に発揮するために」という注意書きにて</p><blockquote><p>分業のデメリットを抑制し、メリットを享受するためには、連携を維持改善するための方法、道具、ループ、メンバーの努力が欠かせない。</p></blockquote><p>との記述に加えて、その直後に</p><blockquote><p>「くれぐれも、ただ席を並べているだけでチームメンバーになれるとは思うなよ。」</p></blockquote><p>という登場人物のセリフがあります。（p.468）</p><p>常に知識や方法論をアップデートしなければいつの間にか「席がなくなっている」かもしれないので、ナレッジの吸収と実践・発信は継続しなければと思いました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回は読書感想文連載ということで、オススメの本の紹介と、本を読んで触発された思考内容をフリーに書かせていただきました。色々な本を読むと「この内容、あの本では違う切り口で語られていた気がする。Kindle でもう一度読み直してみよう。お、いい感じにライン引いてメモが付いている。前の私はどんなメモを残したのだろうか」と思考が広がるのが面白かったりします。まだまだ積読本はたくさん眠っているので、引き続き消化していきたいと思います。</p><p>ここまで長文にお付き合いいただきありがとうございました。読書感想文連載はまだ続きますのでお楽しみに！</p><p>次は伊藤さんの<a href="/articles/20230228a/">「リーダブルコード」を読んでTerraformの可読性について考える</a>です。</p><hr><p><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> プロジェクトの初期メンが色々なことを知っているように見えるのは、業務が細分化される前に色々担当していただけで、より正確に言語化すると「1 つ 1 つの業務が細分化・詳細化されておらず、少人数でも回るレベルの作業量で業務が回っていた」だけなのだと思います。いざ初期メンが最前線に戻ってくると、実務ではあまり活躍できず、むしろ顔の広さを活用した調整役として動いてもらった方が有難かったりします。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Java/">Java</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%96%B0%E4%BA%BA%E7%A0%94%E4%BF%AE/">新人研修</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      
      <comments>https://future-architect.github.io/articles/20230227a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>プログラマーのためのCPU入門</title>
      <link>https://future-architect.github.io/articles/20230224a/</link>
      <guid>https://future-architect.github.io/articles/20230224a/</guid>
      <pubDate>Thu, 23 Feb 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230224a/image.png&quot; alt=&quot;image.png&quot; width=&quot;862&quot; height=&quot;1214&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230224a/image.png" alt="image.png" width="862" height="1214" loading="lazy"><p><a href="/articles/20230217a/">読書感想文連載</a> 4冊目のエントリーです。なんか最近、積読が増えてきてしまったなーと思い、社内に読書連載しましょうよ、と投げたところ若い人も含めてぱぱっとすぐに人が集まってこのような連載ができて、良い会社に育っている！と思っているところです。集まるのが早すぎて本を急いで読む必要があって大変だったぐらいです。</p><p>で、僕が選びたかった本は、<a href="https://amzn.to/3lWq0jF">A Philosophy of Software Design</a>だったり、<a href="https://gihyo.jp/book/2022/978-4-297-12769-5">遠くへ行きたければ、みんなで行け</a>だったり、たくさんあったのですが、とりあえずスタックの一番上に積まれていた<a href="https://www.lambdanote.com/products/cpu">プログラマーのためのCPU入門</a>を読みました。</p><h1 id="CPUは地味に早くなっている"><a href="#CPUは地味に早くなっている" class="headerlink" title="CPUは地味に早くなっている"></a>CPUは地味に早くなっている</h1><p>僕が中学の、初めてパソコンを買った時は、お店で発売されている機種がi486 DX4(100MHz)から、i386 SX(16MHz)まで、上から下までの差が激しい時代でした。またパソコンも高かったので中古で買ったり、部室のパソコンは先輩のお下がり（それこそ5年以上落ち）という状況で、現役マシンの差が4MHzあたりから100MHzで数10倍は周波数が違うという感じでした。その後はどんどん周波数が上がり、大学のころにはAMDとインテルが競争して、1GHzを超えたと思ったらPentium 4の3.8GHzまで周波数はどんどん伸びていきました。また、ハイパースレッディングとか、デュアルコアとか性能もどんどん伸びていました。</p><p>その後は、ムーアの法則は終わりだ、と言われたりして、周波数は頭打ちになりました。最近になってブースト時は6GHzを公式に超えるようになりましたが、3GHzから6GHzまでは20年かかっています。クロック周波数自体はずっと2GHzとか3GHzあたりをずっと行ったり来たりしていますし、僕が買った10th CoreのMacBook Airは1.1GHzで周波数大幅に下がったりしています。数年前に知人が「なんか最近のパソコンはコア数は増えたりするけどあんまり変わり映えしないよね」とか言ってる人もいました。でも、そうじゃないんです。</p><p>自分で使ってみた（会社支給も含めて)のパソコンのCPUと、だいたいのシングルコアの性能をリストアップしたのが以下のものです。基本ノートばっかりで、途中で低消費電力モデルとかに変わったりしていますが、ガンガン伸びているのがわかります。なお、これはシングルコア性能なので、コア数が増えまくっている現在、マルチコア性能はさらに大きな差になっています。</p><div class="scroll"><table><thead><tr><th align="center">年</th><th align="center">CPUモデル</th><th align="center">周波数</th><th align="center">Geekbench Single Coreスコア</th></tr></thead><tbody><tr><td align="center">2010</td><td align="center">Core 2 Duo L9600</td><td align="center">2GHz</td><td align="center">300</td></tr><tr><td align="center">2011</td><td align="center">Core i7-2600QM</td><td align="center">2GHz-3GHz</td><td align="center">600</td></tr><tr><td align="center">2013</td><td align="center">Core i7-4500U</td><td align="center">1.8GHz-3GHz</td><td align="center">700</td></tr><tr><td align="center">2017</td><td align="center">Core i5-8250U</td><td align="center">1.6GHz-3GHz</td><td align="center">800</td></tr><tr><td align="center">2019</td><td align="center">Core i5-1030NG7</td><td align="center">1.1GHz</td><td align="center">1000</td></tr><tr><td align="center">2020</td><td align="center">Core i7-1185G7</td><td align="center">1.2GHz-3GHz</td><td align="center">1500</td></tr><tr><td align="center">2020</td><td align="center">Apple M1</td><td align="center">3.2GHz</td><td align="center">1700</td></tr><tr><td align="center">2022</td><td align="center">Apple M2</td><td align="center">3.4GHz</td><td align="center">1900</td></tr></tbody></table></div><p>まあ後半のインテルのモデルになると同じCPUでも熱設計で性能が大きく変わったり、ブースト時の性能だったり、いろいろあるのであくまでも数字は目安ですが、無視できないほど大きくなっているのがわかります。特に、Ryzenが元気なここ5-6年の競争による進化がすごいです。</p><p>なぜ5-6倍も性能が上がったのか、というのをすぐに言葉できちんと説明できる人はあまりいないと思います。最近、更新がなくなってしまい、Facebook（なぜか友達にしていただいた)上でも活動がみられなくて、悲しいのですが、<a href="https://pc.watch.impress.co.jp/docs/column/kaigai/index.html">後藤弘茂のWeekly海外ニュース</a>の連載をずっと読んでいた人であれば、「命令デコーダーが増えたのね」とかなんとなく強くなった部分のイメージがつくとは思いますが、そのなぜ、というのに、実験付きで数値の根拠も含めてわかりやすく説明してくれているのが本書です。</p><h1 id="CPU実験がおもしろい"><a href="#CPU実験がおもしろい" class="headerlink" title="CPU実験がおもしろい"></a>CPU実験がおもしろい</h1><p>本書は、豊富な図で(<a href="https://www.lambdanote.com/products/cpu">LambdaNoteのページでサンプル見れます</a>)、CPUが行っている数々の仕事が説明されています。最初はスーパースカラなどの高速化技法だったりしますが、中盤からは、OSが要求する複雑な機構（仮想メモリとかシステムコールとか）などを、CPUがどう扱っているのかを説明してくれます。後半になると、キャッシュの整合性（コヒーレンス）、メモリモデル、マルチコアなどの説明になっていきます。</p><p>高速化の機構の効果と、それが失敗したときにどれぐらいペナルティがあるのかをアセンブラのプログラムで見せてくれます。本当に、ちょっとした違いで性能が数倍も変わるような、鮮やかな実験結果が見せてくれているのはありがたいな、と思いました。</p><p>同じジャンルの類書としては<a href="https://gihyo.jp/book/2011/978-4-7741-4521-1">WEB+DB PRESS plusシリーズのプロセッサを支える技術</a>もあり、これも良い本なのですが、プログラムを高速に書きたい人向けという視点で書かれており、この実験があるのが大きな違いだな、と思いました。あとは、ARMやRISC-Vについても解説してくれています。アセンブラにもちょっと親しみを持てる本です。</p><h1 id="個人的に面白かった章"><a href="#個人的に面白かった章" class="headerlink" title="個人的に面白かった章"></a>個人的に面白かった章</h1><p>言葉としては知っているが、どういう実装になっていたのかがいまいちわからなかった4章の予測分岐と、5章のキャッシュですね。内部の仕組みまで解説されていますし、性能アップに効くL1キャッシュがなぜこれ以上大きく増やせないのか、といったことがわかる章になっていました。</p><p>僕がちょっと深く知りたいな、と思っていて、まさにストレートに知りたい情報があったのが11章のメモリの順序付け、いわゆるメモリモデルの話です。<a href="https://future-architect.github.io/articles/20220808a/">Go 1.19ではメモリモデルが更新されたよ</a>、という更新があり、がんばって英語のドキュメントを何本も読んで解説を書いたりしたのですが、どのような不整合がありえるのか、というのが豊富な絵と事例で紹介されていてよくわかりました。</p><p>あとは、<a href="https://netflixtechblog.com/seeing-through-hardware-counters-a-journey-to-threefold-performance-increase-2721924a2822">Netflixの64バイトのキャッシュを意識した改善で性能3.5倍</a>という話が、いまいち理解できなかったのですが、この本をみながらだと「わかる！わかるぞ！」と読めます。関係ないですが、<a href="https://www.netflix.com/jp/title/81231974">NetflixのWednesday</a>を最近みているのですが、面白いです。4話まで見ました。</p><h1 id="もう少し知りたかったこと"><a href="#もう少し知りたかったこと" class="headerlink" title="もう少し知りたかったこと"></a>もう少し知りたかったこと</h1><p>本書は、コンパクトにまとまっているし、CPUが自分で実装できるほどの情報はなく、その上で動くソフトウェア開発者が道具として使うのに便利な情報に割り切って書かれている気がするので、今後改訂がされてもあまり増えることはないかもしれませんが、マイクロコードの違いみたいなのをもっと知りたいな、と思いました。</p><p>書籍でもIntelとかのサイトへのリンクは貼られているのですが、同じARMでも吊るしのARM製の実装と、Appleの実装、そしてSparcを作ってきた富士通のA64FX。それぞれだいぶ性能差もあるし、命令セットは同じだとしても内部は全然違いますし。RISC-Vも命令セットはオープンだけど、実装によってだいぶ変わりそうだし、今まで以上にマイクロコードの違いを意識する時代になっていきそうだなーとなんとなく思っています。</p><p>あとは、M1&#x2F;M2が、Intelのエミュレーション向けにメモリモデルを変えているとかなんとかという話を見かけた気がするのでそのあたりもちょっと知りたかったな、と。まあどちらも知りたい人は読者の1&#x2F;100ぐらいかもしれませんが。</p><p>あとは、最近モバイルCPUによく詰まれ始めたNPU。どんなもので、どういう気持ちで動いているのかがわからないので、別の本でもいいので書いて欲しい！と思っています。本書の内容からは大きくはずれちゃいますが。</p><h1 id="ぜひGoならわかるシステムプログラミングの読者も"><a href="#ぜひGoならわかるシステムプログラミングの読者も" class="headerlink" title="ぜひGoならわかるシステムプログラミングの読者も"></a>ぜひGoならわかるシステムプログラミングの読者も</h1><p>僕は実は、<a href="https://www.lambdanote.com/products/go-2">Goならわかるシステムプログラミング</a>という本を書いていたりするのですが、この本は、自分の本とセットでぜひ読んでもらいたいな、と思う内容も多かったです。実は2版の3刷の増刷で、参考文献に足させてもらったりしました。CPUの核の高速化の部分は僕の本当はあまりオーバーラップはしないのですが、第6章の仮想記憶、第7章のI&#x2F;O、第8章のシステムコール、例外、割り込み、第12章の不可分操作あたりは、この本を一緒に読んでもらうと、理解が一層進みそうな気がします。よりCPUの気持ちがわかると思います。</p><p>不可分操作は、ミューテックスやロックがないので、ソースコード上は「ロックフリーじゃん」と思って、結構良いものでは、と思ったのですが、実はこんなにペナルティがあるよ、というのは新鮮でした。　Go上でもきちんと測定しないといかんですね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>これを読んだら誰もがスーパーエンジニアになれるわけではないのですが、スーパーエンジニアなら理解した方が良いだろうことが書かれている本です。というよりも、今まではごく一部のすごい人が知っている知識であったものが、この本が出版されてしまったことで、スーパーなエンジニアなら当然知っているよね？という水準がぐっと上がったように思います。僕もさらなるスキルアップのために、枕元に置いて生活しようと思います。</p><p>また、前に触れた後藤さんの連載を追いかけてこなかった人も、この本を読むと、最近のCPUの工夫の一旦の知識レベルが一定水準までぐっと底上げされると思います。<a href="https://qiita.com/hotpepsi/items/3cbc865b1742e2aa61a8">他の書評</a>にあったように、省電力周りとかはなかったりもしますが、この辺りの知識があると、日々のニュースの中でCPUネタとか半導体ネタに対する情報感度や解像度があがって、楽しくなると思うのですよね。ぜひ、おすすめです。</p><p>次は棚井さんの<a href="/articles/20230227a/">スッキリわかるJava 実践編 第3版</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/CPU/">CPU</category>
      
      
      <comments>https://future-architect.github.io/articles/20230224a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>スモールデータ解析と機械学習 を読んだ感想</title>
      <link>https://future-architect.github.io/articles/20230222a/</link>
      <guid>https://future-architect.github.io/articles/20230222a/</guid>
      <pubDate>Tue, 21 Feb 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;積読を消化しようというテーマの、&lt;a href=&quot;/articles/20230217a/&quot;&gt;読書感想文連載&lt;/a&gt; の3冊目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>積読を消化しようというテーマの、<a href="/articles/20230217a/">読書感想文連載</a> の3冊目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>2022年12月キャリア入社の大村俊輔です。</p><p><a href="https://www.kaggle.com/">Kaggle</a>(競技データサイエンス)、<a href="https://atcoder.jp/">AtCoder</a>(競技プログラミング)等の趣味が高じてフューチャーに入社しました。このような背景の人がフューチャーに入社後、何が不足していると感じ、どのようにそれを埋めていこうとしているのか。といった目線でお読みいただければ幸いです。</p><img src="/images/20230222a/51yTAYkJ9XL._SY291_BO1,204,203,200_QL40_ML2_.jpg" alt="" width="207" height="293" loading="lazy"><h2 id="本書を読んだ背景"><a href="#本書を読んだ背景" class="headerlink" title="本書を読んだ背景"></a>本書を読んだ背景</h2><p>入社後最初に配属されたプロジェクトで、とあるデータからの予測タスクを任されました。私も一応Kaggle等のコンペの経験者なので、予測タスクの土地勘はあります。まずはデータをLightGBMに入れてベースラインを作り、その後でクロスバリデーション(CV)の結果を見ながら特徴量を追加したり、ニューラルネットワーク系のモデルを中心に試す感じでしょうか。</p><h4 id="早速コンペの経験が活きそうです！"><a href="#早速コンペの経験が活きそうです！" class="headerlink" title="早速コンペの経験が活きそうです！"></a>早速コンペの経験が活きそうです！</h4><p>ですが、受け取ったデータはデータ数が300くらいしかありません。これはいわゆるスモールデータ。基礎的なデータ解析の力が重要になる分析です。</p><h4 id="私の経験だけでは足りません！"><a href="#私の経験だけでは足りません！" class="headerlink" title="私の経験だけでは足りません！"></a>私の経験だけでは足りません！</h4><p>当然データサイエンスの基礎をきちんと学んだ上でコンペに参加している方であれば話は違うはずです。しかし私は、必要になった知識を都度学ぶスタイルで、データサイエンスの基礎を体系的に学んだ経験がありません。ですので、経験のある分野ではある程度のパフォーマンスを出せると思いますが、何か初歩的な内容で不足してる知識があるかもしれません。このままプロジェクトに入るのは不安です。</p><p>また、上司に聞いても、スモールデータの分析はよくあるとのことです。</p><h4 id="良い機会なので、ここでしっかり基礎を固めておきましょう。"><a href="#良い機会なので、ここでしっかり基礎を固めておきましょう。" class="headerlink" title="良い機会なので、ここでしっかり基礎を固めておきましょう。"></a>良い機会なので、ここでしっかり基礎を固めておきましょう。</h4><p>というわけで、前置きが長くなりましたが、このような背景で本書を読んで学ぶことにした者による書評です。</p><h2 id="本書の概要"><a href="#本書の概要" class="headerlink" title="本書の概要"></a>本書の概要</h2><p>ビッグデータを扱う際は、CVの結果を見て特徴量やモデルを選定する方法が有効ですが、スモールデータの解析では、誤差の影響が大きくなるためCV結果以外の重要度が高くなります。</p><p>本書はそのような背景を踏まえ、重回帰分析の重要性、理論的な背景、実際に適用する上での注意事項や対処方法の提案等に重点が置かれています。</p><p>また、通常のデータサイエンスの書籍は、複雑な式が多く理解するのは難しいですが、本書では、複雑な式をわかりやすいPythonコードに落とし込んだ説明が多く、競技プログラミングや競技データサイエンスの素養のある方には理解しやすくなっていると感じました。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><p>章立ては下記の通りです。</p><details><summary>第１章　スモールデータとは</summary><dd>1.1  ビッグデータからスモールデータへ</dd><dd>1.2  スモールデータ解析の特徴</dd><dd>1.3  本書の構成</dd></details><details><summary>第２章　相関関係と主成分分析</summary><dd>2.1  データの前処理</dd><dd>2.2  共分散と相関関係</dd><dd>2.3  相関関係≠因果関係</dd><dd>2.4  多変数間の相関関係</dd><dd>2.5  主成分分析(PCA)とは</dd><dd>2.6  データの特徴</dd><dd>2.7  第1主成分の導出</dd><dd>2.8  第r主成分の導出</dd><dd>2.9  PCAの数値例</dd><dd>2.10 主成分数の決定</dd><dd>2.11 PCAの行列表現</dd><dd>2.12 PCAと特異値分解</dd></details><details><summary>第３章　回帰分析と最小二乗法</summary><dd>3.1  回帰分析とは</dd><dd>3.2  最小二乗法</dd><dd>3.3  回帰係数と相関係数</dd><dd>3.4  最小二乗法の幾何学的意味</dd><dd>3.5  ガウス-マルコフの定理</dd><dd>3.6  最尤法と最小二乗法</dd><dd>3.7  多重共線性の問題</dd><dd>3.8  サンプル数が入力変数の数よりも少ない場合</dd><dd>3.9  疑似逆行列を用いる方法</dd><dd>3.10 主成分回帰(PCR)</dd><dd>3.11 リッジ回帰</dd><dd>3.12 部分的最小二乗法(PLS)</dd><dd>3.13 PLS1モデルの導出</dd><dd>3.14 PLS1モデルのNIPALSアルゴリズム</dd><dd>3.15 重回帰モデルへの変換</dd><dd>3.16 出力変数が複数ある場合(PLS2)</dd><dd>3.17 PLSと固有値問題・特異値分解</dd><dd>3.18 ハイパーパラメータの調整</dd><dd>3.19 回帰モデルの性能評価</dd><dd>3.20 分光分析による物性推定</dd><dd>　　3.20.1 分光法</dd><dd>　　3.20.2 ディーゼル燃料の物性推定</dd></details><details><summary>第４章　線形回帰モデルにおける入力変数選択</summary><dd>4.1  オッカムの剃刀とモデルの複雑さ</dd><dd>4.2  赤池情報量規準(AIC)</dd><dd>4.3  ステップワイズ法</dd><dd>4.4  Lasso回帰</dd><dd>　　4.4.1 リッジ回帰に近似する方法</dd><dd>　　4.4.2 最小角回帰(LARS)</dd><dd>4.5  PLS向けの変数選択手法</dd><dd>4.6  相関関係に基づいた変数クラスタリングによる入力変数選択</dd><dd>　　4.6.1 クラスタリング</dd><dd>　　4.6.2 k-平均法</dd><dd>　　4.6.3 NCスペクトラルクラスタリング(NCSC)</dd><dd>　　4.6.4 NCSCの例題</dd><dd>　　4.6.5 NCSCを用いた入力変数選択(NCSC-VS)</dd><dd>4.7  NIRスペクトルの検量線入力波長選択</dd></details><details><summary>第５章　分類問題と不均衡データ問題</summary><dd>5.1  分類問題とは</dd><dd>5.2  線形判別分析</dd><dd>5.3  線形判別分析とレイリー商</dd><dd>5.4  カットオフの決定</dd><dd>5.5  線形判別分析と最小二乗法</dd><dd>5.6  分類モデルの性能評価</dd><dd>5.7  ROC曲線とAUC</dd><dd>5.8  線形判別分析における不均衡データ問題</dd><dd>5.9  データの不均衡度</dd><dd>5.10 サンプリング手法</dd><dd>5.11 アンダーサンプリング</dd><dd>　　5.11.1 サンプル選択型アンダーサンプリング</dd><dd>　　5.11.2 サンプル生成型アンダーサンプリング</dd><dd>　　5.11.3 オーバーサンプリング</dd><dd>　　5.11.4 アンダーサンプリングとオーバーサンプリングの組み合わせ</dd><dd>5.12 アンサンブル学習</dd><dd>5.13 判別木</dd><dd>5.14 バンキングとランダムフォレスト</dd><dd>5.15 ブースティング</dd><dd>　　5.15.1 AdaBoost</dd><dd>5.16 サンプリング手法とアンサンブル学習の組み合わせ</dd><dd>5.17 不均衡データにおける性能評価</dd><dd>5.18 ケーススタディ</dd><dd>　　5.18.1 データセットの準備</dd><dd>　　5.18.2 モデルの学習</dd><dd>　　5.18.3 モデル学習結果</dd></details><details><summary>第６章　異常検知問題</summary><dd>6.1  局所外れ値因子法(LOF)</dd><dd>　　6.1.1 局所密度</dd><dd>　　6.1.2 到達可能性距離</dd><dd>6.2  アイソレーションフォレスト</dd><dd>6.3  多変量統計的プロセス管理(MSPC)</dd><dd>　　6.3.1  USPCとMSPC</dd><dd>　　6.3.2  T<SUP>2</SUP>統計量とQ統計量</dd><dd>　　6.3.3  寄与プロットによる異常診断</dd><dd>6.4  オートエンコーダ(AE)</dd><dd>6.5  管理限界の調整</dd><dd>6.6  時系列データの取り扱い</dd><dd>6.7  砂山のパラドックス</dd><dd>6.8  Tennessee Eastman プロセスの異常検知</dd><dd>　　6.8.1  TEプロセス</dd><dd>　　6.8.2  データの前処理</dd><dd>6.9  モデルの学習と異常検知</dd><dd>6.10 異常検知結果</dd><dd>　　6.10.1 異常診断</dd></details><details><summary>第７章　データ収集や解析の心構え</summary><dd>7.1  機械学習の手順</dd><dd>7.2  そもそもデータを使って何をやりたいのか</dd><dd>7.3  PICO</dd><dd>7.4  データの文脈を理解する</dd><dd>7.5  現地現物と三現主義</dd><dd>7.6  現場とのコミュニケーション</dd><dd>7.7  解析データセット構築に責任を持つ</dd><dd>7.8  どうしてもうまくいかないときは</dd></details><details><summary>付録</summary><dd>A.1  標本分散と母分散</dd><dd>A.2  LARSアルゴリズム</dd><dd>A.3  Mcut法と固有値問題</dd><dd>A.4  主成分分析と自己符号化器の関係</dd></details><h2 id="本書の良かった-役に立った-点"><a href="#本書の良かった-役に立った-点" class="headerlink" title="本書の良かった(役に立った)点"></a>本書の良かった(役に立った)点</h2><h3 id="2-3章"><a href="#2-3章" class="headerlink" title="2,3章"></a>2,3章</h3><p>2,3章では、重回帰分析の理論的な背景,共分散の回避方法等について述べられています。</p><p>Kaggle等に参加する方であれば、それらがどのようなものか、「ある程度の知識」をお持ちの方が多いと思います。しかし、プロジェクトで行うデータ解析は、社内や、クライアント等とのチームで進めるものです。よって必要な知識、理解のレベルは、自分で使えれば良いレベルではなく、他者に説明できて、プロジェクトを進められるレベルです。</p><p>本章を通じ、重回帰分析の長所と短所、なぜ共分散を回避しなければならないのか、回避する選択肢として選べる方法等の理解を深めました。そして今も、「ある程度の知識」レベルから他者に説明しながらプロジェクトを進められるレベルを目指して学習しています。</p><h3 id="4章"><a href="#4章" class="headerlink" title="4章"></a>4章</h3><p>4章では特徴量の選択について述べられています。</p><p>予測に使用する特徴量は、ドメイン知識等から決定できれば良いですが、常にそれができるとは限りません。プロジェクト進行上本章の内容はまだ直接役立ってはいませんが、一般的に用いられる特徴量選択手法の中から目的に合った方法を選択・提案し、チームの納得を得て使用する特徴量を採択する場面が生じるはずです。本章により体系的な知識の備えができたことで、自信を持ってプロジェクトに携わることができています。</p><h3 id="5章"><a href="#5章" class="headerlink" title="5章"></a>5章</h3><p>5章は不均衡データへの対応について述べられています。</p><p>異常値検出等、分類タスクの中にはクラス毎のデータ数が著しく偏っているケースもあります。そのような場合に、どのようにサンプリングするか、結果を評価するか等が中心です。この辺りは、コンペの経験者であれば何度か痛い目に合って身につけた内容かと思います。ただ、体系的に学ぶことができましたので、今後このような場面でも、基本的な知識で不足しているものがないか不安を覚えることなくタスクに取り組むことができます。</p><h2 id="本書では扱わない点"><a href="#本書では扱わない点" class="headerlink" title="本書では扱わない点"></a>本書では扱わない点</h2><p>scikit-learn等のライブラリを使用した実用的なコードに関しては本書の対象外です。そちらが必要な場合は、他で学習する必要がありますので、ご注意ください。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>データ解析の分野を１冊の本で理解できることは少ないと思いますが、競技データサイエンス、競技プログラミング出身の方等で、数式よりもPythonコードの方が理解が速い、という方の学習に役に立つ１冊だと感じました。</p><p>これからも新しい業務と出会えるたびに学び直しを行いますが、その際に使用した書籍を記事にしていきたいと思います。</p><p>次は、澁川さんの<a href="/articles/20230224a/">プログラマーのためのCPU入門</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/">機械学習</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      
      <comments>https://future-architect.github.io/articles/20230222a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「実践Redis入門」所感 ~「E.G.コンバット」の観点から語る~</title>
      <link>https://future-architect.github.io/articles/20230221a/</link>
      <guid>https://future-architect.github.io/articles/20230221a/</guid>
      <pubDate>Mon, 20 Feb 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230221a/redis.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;500&quot;&gt;

&lt;p&gt;積読を消化しようというテーマの、&lt;a href=&quot;/articles/20230217a/&quot;&gt;読書感想文連載&lt;/a&gt;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230221a/redis.jpg" alt="" width="400" height="500"><p>積読を消化しようというテーマの、<a href="/articles/20230217a/">読書感想文連載</a> の2冊目です。</p><h2 id="導入"><a href="#導入" class="headerlink" title="導入"></a>導入</h2><p>『自分たちは、クラウドネイティブじゃなくてマネージドネイティブなんだよ…』</p><p>TIGの原木です。</p><p>最近、冒頭のような開発者の嘆きを人づてに聞く機会があり、今も脳裏に残り続けています。</p><p>昨今のITシステムにおいて、クラウドサービスは欠かせないものとなっています。しかしユーザー、そして開発者として大きな利便性を享受する裏で、クラウドサービスによって巧妙に隠蔽された裏のソフトウェアを意識する機会は減り続けているのではないでしょうか？</p><p>Webサービスにおいて、RedisやMemcachedに代表されるキャッシュサーバーもそのようなソフトウェアの1つです。</p><p>キャッシュサーバーは、Webアプリケーションなどデータの読み込みや保存を効率化するために欠かせない存在ですが、同じデータストアであるRDBMSなどと比較していま一歩隠れた存在だと思います。</p><p>RDBMSならDBAやテーブル設計のスペシャリストが割り当てられるようなことがあっても、キャッシュサーバーなら他の専門職が兼任することは少なくありません。</p><p>「実践Redis入門」は、そのような現状に対する問題提起のきっかけとなりました。</p><h2 id="実践Redis入門とは？"><a href="#実践Redis入門とは？" class="headerlink" title="実践Redis入門とは？"></a>実践Redis入門とは？</h2><p>「実践Redis入門」は、2023年現在AWSのAmazon EMR開発チーム、システム開発エンジニアとして働いている林 昌吾さんという方が書かれた『Redisの基礎から、実践、運用や調査に役立つ仕様などの詳細について解説した入門書です。』</p><p>入門書とありますが、単なる機能紹介にとどまらず、筆者が実際にRedisを運用して培った知見が450ページにわたってこれでもかと詰め込まれており、Redisを扱う上で末長くお付き合いするであろう本だと思います。</p><p>本書は下記の通り三部構成になっています。</p><ul><li>基本<ul><li>第1章~第4章</li><li>Redisの概要、基本的なデータ型やコマンド、アプリケーションの構築事例について説明しています</li></ul></li><li>実践・運用<ul><li>第5章~第10章</li><li>Redisの運用で必要となるパフォーマンスチューニングや耐障害対応、Redisを支えるメモリー管理制御、Amazon ElastiCache for Redisについて説明しています</li></ul></li><li>発展<ul><li>第11章</li><li>Redisの開発という側面から、運用時に必要な知見について説明しています</li></ul></li></ul><p>このブログでは、「実践Redis入門」を自分の愛読書に絡めてご紹介したいと思います。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>本書の中身や構成を正確に知りたい方は、技術評論社の <a href="https://gihyo.jp/book/2022/978-4-297-13142-5">書籍案内</a>をご覧ください。</p></div><h2 id="「E-G-コンバット」に学ぶ"><a href="#「E-G-コンバット」に学ぶ" class="headerlink" title="「E.G.コンバット」に学ぶ"></a>「E.G.コンバット」に学ぶ</h2><p>「実践Redis入門」って「E.G.コンバット」に出てきそうだな…というのが初見の印象でした。</p><p>「E.G.コンバット」を知らない方に説明すると、原著は秋山瑞人という方が25年前に執筆、電撃文庫より出版されたSF小説です。あらすじに軽く触れると、戦場から左遷された歴戦の英雄が月の訓練校教官として劣等生ばかりの訓練生を任されて、七転八倒するという話になります。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>なぜ、そんな小説と本書を結び付けたかというと、背景にはクラウドサービスが当たり前のように存在し、AIが開発現場で使われるようになった昨今の状況が小説の舞台とよく似ていたからです。</p><ul><li>現在: クラウドサービスが浸透したことでインフラエンジニアの仕事は、従来の調達、構築、設定といった定型的な業務から非機能要件のチェックや運用費の見積もりという、より正解のない業務へ変わりつつあります。<ul><li>小説: 自分の役割や生き残るための方法という正解のない問いが数多く出てきます。</li></ul></li><li>現在: ChatGPT、Prometheusが組み込まれたBingやGitHub Copilotが、プロンプトやコメントに従ってプログラムを自動生成するのを見て、コーディングいらねーじゃん…と自虐的なぼやきを聞くようになりました。<ul><li>小説: 流体脊髄と呼ばれる支援AI<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>が当たり前になった世界で同様の疑問が出てきます。</li></ul></li></ul><p>現状の変化は少なからず、自分たちITエンジニアのマインドにも影響を与えています。そんな中で、小説の中で描写されたメッセージが「実践Redis入門」に、そして25年後の現代<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>にも強く通じると思います。</p><p>それはいったいどんなメッセージでしょうか？</p><p>まずは「E.G.コンバット」からトピックを取り上げたいと思います。</p><h2 id="「E-G-コンバット」の見どころ-その1"><a href="#「E-G-コンバット」の見どころ-その1" class="headerlink" title="「E.G.コンバット」の見どころ: その1"></a>「E.G.コンバット」の見どころ: その1</h2><p>「E.G.コンバット」の第1巻では、教官は訓練生らに対して、双脚砲台と呼ばれる自立型兵器を支援AIのアシスト無しで、手動で起動するように求められる姿が描かれます。</p><p>当初やり方も知らなかった彼女らが最初からうまくいくはずがありません。当然のように失敗を繰り返し、トライアンドエラーを積み重ねます。延々と繰り返される訓練はやがて苛立ちとなり、教官に不満が爆発しました。</p><blockquote><p>「こっちが聞きたいね！ 何のためのシミュレーションだよ？ 流体脊髄凍結させて訓練してるのなんてうちらだけだぞ！ GARP(注: 支援AIの愛称)の支援を受けないことに何の意味があるんだよ!?」</p></blockquote><p>教官は冷静に受け止めました。</p><blockquote><p>「では聞く」ルノアは一度、全員の顔を見渡してから、静かに口を開いた。</p><p>「それではなぜ、最初から最後までGARPにやらせなかった？ 少なくとも今の段階では、GARPはお前ら全員を合わせたよりもずっとましな操機をする。GARPに全部任せてしまえば、フラグを五つも取りこぼさずにすんだはずだし、味方を三度も誤射せずにすんだはずだ」</p><p>全員が言葉に詰まった。しかし、現実には──ルノアのとどめは冷酷だった。</p><p>「なぜ、お前らはここにいる？」</p></blockquote><hr><p>この場面、辛辣な言葉ではありますが、教官も疑問に答えて直接回答をしているわけではありません。</p><p>訓練生が聞きたいのは、どうすれば双脚砲台を手動で起動できるのか、手順や機能の抽象的な説明ではなく、それらの機能の知識がどのような開発&#x2F;運用状況で生きるのかという訓練目的です。</p><p>教官は教官で、戦場上がり故に『実戦で(目的を)説明されなければできないようではだめだ』とコミュニケーションに不足している節があり、両者の不幸なすれ違いは今しばらく続くことになります。</p><p>そもそも、高度にシステムが自動化された世界で、あえて手動による兵器運用という訓練をなぜ教官は行っているのでしょうか…？</p><p>その真意について解き明かす前に「実践Redis入門」の推しポイントについて説明したいと思います。</p><h2 id="「実践Redis入門」の良いところ-機能説明と開発-x2F-運用の関連"><a href="#「実践Redis入門」の良いところ-機能説明と開発-x2F-運用の関連" class="headerlink" title="「実践Redis入門」の良いところ: 機能説明と開発&#x2F;運用の関連"></a>「実践Redis入門」の良いところ: 機能説明と開発&#x2F;運用の関連</h2><p>往々にして、一般的な入門書にもこの教官のように真意に直接答えないわかりづらさがあります。</p><p>一見、具体的でいて抽象的な機能説明が続き、その目的について迷子になることも珍しくありません。</p><p>しかし、「実践Redis入門」は機能説明を詳細に行いつつも</p><ul><li>Redisを利用してWebアプリケーションを構築したい開発者</li><li>Redisを使ったシステムを安定的に稼働したい運用者</li></ul><p>というどちらの対象者の目的も違えぬ素晴らしい本でした。</p><p>たとえば、「実践Redis入門」第6章「トラブルシューティング」では、章題の通り、Redisで問題が発生した時にどのように問題を切り分ければよいか、解消のヒントがどのようなメトリクス情報に隠されているかを解説した、筆者肝いりの内容となっています。</p><p>パフォーマンスチューニングが、開発者、運用者と立場を問わず重要なことは言うまでもありません。</p><p>しかし、開発者目線で実際に <code>INFO</code> コマンドの内容を見てくださいと言われたら、13個のセクションにわたって出力された内容は辛うじて <code>Memory</code> は追えるものの、どれを見ればボトルネックが解決できるのか、宇宙猫となること間違いないでしょう。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span>  <p></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">INFOコマンドによるメモリー使用量の内訳の様子</span></span><br><span class="line">127.0.0.1:6379&gt; INFO Memory</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Memory</span></span><br><span class="line">used_memory:960080</span><br><span class="line">used_memory_human:937.58K</span><br><span class="line">used_memory_rss:13864960</span><br><span class="line">used_memory_rss_human:13.22M</span><br><span class="line">used_memory_peak:1089232</span><br><span class="line">used_memory_peak_human:1.04M</span><br><span class="line">used_memory_peak_perc:88.14%</span><br><span class="line">used_memory_overhead:864192</span><br><span class="line">used_memory_startup:862208</span><br><span class="line">used_memory_dataset:95888</span><br><span class="line">used_memory_dataset_perc:97.97%</span><br><span class="line">allocator_allocated:1385200</span><br><span class="line">allocator_active:1683456</span><br><span class="line">allocator_resident:5099520</span><br><span class="line">total_system_memory:8287895552</span><br><span class="line">total_system_memory_human:7.72G</span><br><span class="line">used_memory_lua:31744</span><br><span class="line">used_memory_vm_eval:31744</span><br><span class="line">used_memory_lua_human:31.00K</span><br><span class="line">used_memory_scripts_eval:0</span><br><span class="line">number_of_cached_scripts:0</span><br><span class="line">number_of_functions:0</span><br><span class="line">number_of_libraries:0</span><br><span class="line">used_memory_vm_functions:32768</span><br><span class="line">used_memory_vm_total:64512</span><br><span class="line">used_memory_vm_total_human:63.00K</span><br><span class="line">used_memory_functions:184</span><br><span class="line">used_memory_scripts:184</span><br><span class="line">used_memory_scripts_human:184B</span><br><span class="line">maxmemory:0</span><br><span class="line">maxmemory_human:0B</span><br><span class="line">maxmemory_policy:noeviction</span><br><span class="line">allocator_frag_ratio:1.22</span><br><span class="line">allocator_frag_bytes:298256</span><br><span class="line">allocator_rss_ratio:3.03</span><br><span class="line">allocator_rss_bytes:3416064</span><br><span class="line">rss_overhead_ratio:2.72</span><br><span class="line">rss_overhead_bytes:8765440</span><br><span class="line">mem_fragmentation_ratio:14.76</span><br><span class="line">mem_fragmentation_bytes:12925552</span><br><span class="line">mem_not_counted_for_evict:0</span><br><span class="line">mem_replication_backlog:0</span><br><span class="line">mem_total_replication_buffers:0</span><br><span class="line">mem_clients_slaves:0</span><br><span class="line">mem_clients_normal:1800</span><br><span class="line">mem_cluster_links:0</span><br><span class="line">mem_aof_buffer:0</span><br><span class="line">mem_allocator:jemalloc-5.2.1</span><br><span class="line">active_defrag_running:0</span><br><span class="line">lazyfree_pending_objects:0</span><br><span class="line">lazyfreed_objects:0</span><br></pre></td></tr></table></figure><p>これって、日常的にキャッシュサーバーの運用をしている方にはどう見えているのでしょうか...</p></div><p>本書を読めば、そのうちどの辺を最低限抑えればいいのかという指標について解説されているのでスコープを決めることができます。「6.2. レイテンシーの調査」、「6.3. メモリー問題」で必要とする別のコマンド ( <code>SLOWLOG</code> や <code>MEMORY STATS</code> 等)と合わせて苦しみながら頭に入ってきます。</p><p>個人的にはメモリのフラグメンテーションに関して、放置するとパフォーマンス低下～ページング～メモリ不足に至るガンみたいなやつだと雑な理解にとどまっていたのですが、メトリクスの見方やスペシャリストの肌感覚が掲載されており、勉強になりました。</p><p>(カンファレンスなど機会があったら、この辺AWSのGameDayっぽく実演されている姿も正直拝見したいです)</p><p>このように煩雑になりがちな「機能の説明」も、「開発&#x2F;運用でどのように生かされるのか？」というプロセスを踏むことで筆者の実戦経験をもとに関連付けて覚えられるので、Redisの運用の素人である私にも理解が進みました。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span></p><p>個人的に印象に残ったのは、第5章「Redisの運用管理」のコラムであるRDBファイルのフォーマットに関する話です。</p><p>RDBファイルとは、Redisがメモリー上に蓄えたデータをスナップショットとして永続ストレージに出力するときに使うファイルの形式です。本書ではスナップショットを取得するときの手順はもちろんのこと、RDBファイルのバイナリー形式のフォーマットの仕様についても踏み込んで解説されています。</p><p>「運用者がダンプファイルのデータ形式なんて知る必要あるのか？」と思われた方がいるかもしれません。ですが、その理由について、本書では次の通り順序だててフォローされています。</p><ul><li>RDBファイルのAUXフィールドと言われる領域に <code>redis-ver</code> というバージョンに関するメタ情報が埋め込まれていること</li><li>RDBのバージョンはRedisのバージョンに連動すること</li><li>RDBのバージョン互換性を吸収する機能があるので、マスターとレプリカのエンジンのバージョン差異を気にせずに、同じバージョンのRDBをレプリケーションできること<ul><li>古いバージョンのRedis(3.2.1以前)だとRDBのバージョン互換性がないので、上記機能は使えないこと</li></ul></li><li>古いバージョンのまま放置し続けてしまったキャッシュノードに対してレプリケーションできるかというときにこのバージョン情報が判断材料になること</li><li>逆にそれより新しいバージョンのRedisであれば、現行バージョンのレプリケーションを組んでおくことで、 <strong>Redisのバージョンアップ時にダウンタイムを小さくすることができること</strong></li></ul><p>ソフトウェアのバージョンアップという運用負荷が特に高い作業において、RDBのバイナリから読み取ったバージョン情報を頭にいれておくことで、結果として手続きが楽になるんですね。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rdbファイルの中身</span></span><br><span class="line">user@HOST:~/work/redis/data/redis$ sudo hexdump -C dump.rdb</span><br><span class="line">00000000  52 45 44 49 53 30 30 31  30 fa 09 72 65 64 69 73  |REDIS0010..redis|</span><br><span class="line">00000010  2d 76 65 72 05 37 2e 30  2e 38 fa 0a 72 65 64 69  |-ver.7.0.8..redi|</span><br><span class="line">00000020  73 2d 62 69 74 73 c0 40  fa 05 63 74 69 6d 65 c2  |s-bits.@..ctime.|</span><br><span class="line">00000030  52 ad e7 63 fa 08 75 73  65 64 2d 6d 65 6d c2 d0  |R..c..used-mem..|</span><br><span class="line">00000040  e1 0d 00 fa 08 61 6f 66  2d 62 61 73 65 c0 00 ff  |.....aof-base...|</span><br><span class="line">00000050  9e c5 7c a6 0a 9a fb ab                           |..|.....|</span><br><span class="line">00000058</span><br></pre></td></tr></table></figure></div><p>さて、また「E.G.コンバット」の話に戻りたいと思います。</p><h2 id="「E-G-コンバット」の見どころ-その2"><a href="#「E-G-コンバット」の見どころ-その2" class="headerlink" title="「E.G.コンバット」の見どころ: その2"></a>「E.G.コンバット」の見どころ: その2</h2><p>1巻目でなんやかんやとあったあとも、教官と訓練生らの日常は変わりません。いつまでもチームはへっぽこのまま。教官の多忙な一日は終わるところを知りません。</p><p>その状況を見かねて、別のチームの訓練生が教官に対して自分のチームの先生になってほしいと直談判します。</p><p>自分たちのほうが優秀だという自尊心から、お願いはいつの間にかヒートアップし、訓練生は抑えが効かなくなります。</p><blockquote><p>『あんな連中、だれが指導してもどうせ…』</p></blockquote><p>昂った感情のまま、思わず口走った言葉は教官の逆鱗に触れました。</p><p>教官は返す刀で訓練生に質問します。</p><p>双脚砲台が攻撃を受けてAIが瞬断した。システム制御の支援を受けられない状況下でどのように機体のリカバリーを行えば良いか？<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p><p>口ごもりながら必死に手順を考える訓練生。そこへ、さらに浴びせられた教官の「攻撃」に、訓練生は「戦死」したことを自覚しました。</p><p>教官が想定した状況はすべて、へっぽこチームが毎日訓練で行っていた内容でした。</p><p>どうしてその訓練を行っていたのか、ここで真意が初めて明かされます。</p><blockquote><p>今の地球の工業生産力って、百年前と比べたら百分の一がいいとこでしょ？ 損傷箇所の部品の補給が受けられないことなんてしょっちゅうだったもの。そのくせ、兵器は強い分だけぐちゃぐちゃに電子化されててめちゃくちゃに複雑で、機能の半分でも理解してる奴が部隊にひとりもいないなんて当ったり前でさ。&gt;</p><p>でも、それじゃだめなんだってわかった。</p><p>なぜトリガーを引けば弾が出るのか、姿勢制御系はどんな理屈で機を水平に保つのか、たったひとつの操作で双脚砲台が起動するとき、流体脊髄(注釈: AIのこと)は何をどうやって関節をアクティブにするのか。それがわかってないと、大丈夫じゃなかった百回目がきたとき、なにもできないもの。</p><p>さっきの「バイパス回路接続とその間の回避運動」っていうのもさ、確かに普通は流体脊髄がオペレートするプロセスだし、その方が手動でやるより何倍も早いし、だからオルドリンのカリキュラムは、「自動制御」のひと言で流しちゃうけどさ。</p><p>でも、もしそのメカニズムが正常に作動しなかったら、そのときがあなたの戦死するときかもしれないのよ。だからわたしは、あんなやり方であの五人を訓練してるの。</p><p>…(中略)…</p><p>だから、多分、わたしは連中が卒業するまでこのやり方を変えないと思う。なにも、実戦でも流体脊髄のアシストを受けるなって言ってるんじゃないけど、GARPの──流体脊髄のアシストを受けなくても実戦をこなせるくらい、双脚砲台について知り尽くしていないと、転んだときに誰も絆創膏を貼ってくれない地球では、生き残れないから。</p></blockquote><hr><p>99回素振りして問題なかったシステムが、100回目にトラブルを起こす。あるいは、傍目には問題なくても微細なトラブルを日常的に訴えていたシステムが、ある日突然障害を顕在化して大問題につながる。いわゆるハインリッヒの法則として知られているそれは、ITシステムの運用の場面でもよくあります。</p><p>この問題に対処するためには、もちろん普段から予防を手掛けるというのが大原則ではありますが、いざ起こったときに火消しに奔走するのは運用管理者であり、必要とされる背景知識は多岐にわたります。</p><p>どんな知識が必要か？その示唆が、このシーンだと自分は思います。</p><p>小説の中の話に戻りますが、何も制約がない戦場であれば、AIという補助システムを最大限に活用した方が当然活躍します。つまりオペレーターとしての技量に熟達して、AIにうまい指示出しを下した方が、人間が手動で操作するよりも何倍もうまく兵器を運用できるでしょう。</p><p>しかし、小説の中の世界は決してそううまくはいきません。兵器に対して十分なメンテナンスが行われないことなど日常茶飯事ですし、CRM(クルーリソースマネジメント)は軽視され、人員不足も深刻です。</p><p>その中で教え子たちが生き残るためには何が必要か？</p><p>教官がたどり着いた答え──それは、通常ならAIによってうまく隠されている領域について手動操作を敢えて行い、兵器そのものへの造詣を深めることでした。</p><h2 id="クラウドやAIを利用するということは、決して中身を理解しなくていいということにはつながらない"><a href="#クラウドやAIを利用するということは、決して中身を理解しなくていいということにはつながらない" class="headerlink" title="クラウドやAIを利用するということは、決して中身を理解しなくていいということにはつながらない"></a>クラウドやAIを利用するということは、決して中身を理解しなくていいということにはつながらない</h2><p>現実世界ではこんなに極端ではありませんが、2025年の壁が警鐘を鳴らすようにITのプロフェッショナル人材は慢性的に不足しています。また、プロジェクトは流動的であり、いつも同じメンバー、同じプロセスで業務を行えるとは限りません。</p><p>クラウド全盛期の現在、マネージドサービスがあるがゆえにビジネスドメインへの理解があれば、構築だけならだいたいなんとかなってしまうし、動かせてしまいます。</p><p>しかし、運用というフェーズに移行した瞬間、何となくでなおざりにしていたところが性能のボトルネックとして牙をむき、魔法使いのようなスーパーエンジニアが召喚されることが稀によくあります。</p><p>今まで助けていただいた方は皆、要求に耐えうる深い知識を持ってました。</p><p>どうしてそんなことを知っていらっしゃるのか？お話を伺う中で知ったのは、それらの知識は、マネージドサービスの皮をはぎ取り、裏で動いているソフトウェアを構築し、動かしてみて得られた気づきをさらに積み重ねて得られたものだということでした。</p><p>「実践Redis入門」の解説を読む中で、筆者もまたその一人なのだと深く感じました。</p><h2 id="「実践Redis入門」の良いところ-実践に裏打ちされた濃厚な説明欄"><a href="#「実践Redis入門」の良いところ-実践に裏打ちされた濃厚な説明欄" class="headerlink" title="「実践Redis入門」の良いところ: 実践に裏打ちされた濃厚な説明欄"></a>「実践Redis入門」の良いところ: 実践に裏打ちされた濃厚な説明欄</h2><p>Redisの運用者はまだしも、Redisを利用する立場にある開発者にとって、その中身は理解から遠いところだと思います。</p><p>しかし、「実践Redis入門」にしたがって、</p><ul><li>第4章のアプリケーション実装例(PHP, Ruby, Pythonの例があります)で感じを掴んで、Webアプリケーションを実装し、</li><li>第5章のアーキテクチャパターンに従ってキャッシュ戦略を把握し、</li><li>第8章のRedisクラスターの導入方法にしたがってDocker上で動かせば、</li></ul><p>なんも考えずにHash型で行ったキー設計<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>、あるいはなんも考えずにKEYSコマンドを利用してデータ参照を行った実装<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>が、回りまわってメトリクスとして火を噴くところまでなにが起きていたのか把握できるでしょう(自省)。</p><p>もちろん、その辺は既に通った道である開発者にも本書が通じるのは言うまでもありません。</p><p>自分が良いなと思ったのは、エフェメラルスクリプトのコマンドの説明です。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p><p>Redisコマンドの中にはオプションとしてTTL──指定したキーの有効期間のこと。期限切れのセッション情報を追い出すために欠かせない存在です──を設定できないものがあり、別途キーに対して <code>EXPIRE</code> を投げる必要があります。</p><p>しかし、要するにそれはRedisに二回コマンドを投げるため、無駄な帯域使用だったり、二つのコマンドがセットで確実に送信&amp;実行されたかというアトミック性<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>が保証されません。</p><p>それを防ぐために、シェルスクリプトのヒアドキュメント風にキャッシュサーバー側に2回のコマンドを1つのスクリプトとして送り、実行する <code>EVAL</code> や <code>EVALSHA</code> があります。</p><p>…と、ここまでならちょっとでもTTLを意識したら目にすると思うし、公式ドキュメントもあるので迷いにくいところだと思います。</p><p>本書の深いなぁと思うのはここからで、</p><ul><li>コマンド実行時にスクリプトを随時送る <code>EVAL</code> とスクリプトを1回あらかじめプリロードすれば送らなくていい <code>EVALSHA</code> のうち、<code>EVALSHA</code> の方が適していると単純に考えがちだが、戦略として あえて <code>EVAL</code> もありだというユースケースとその解説</li><li><a href="https://github.com/redis/redis/issues/10576">ロールバック機能は課題も多くまだ実装されていないため、</a> 厳密なアトミック性は保証されていないこと。途中でスクリプトがエラーにより処理が終わるケースもありえるため、アプリ側でそれを念頭に避けるべく開発したほうがよい忠告</li><li><code>EVALSHA</code> のようにコマンドを腹持ちさせるなかで、それがRedisサーバーに何かしらの影響を与えているのでは…? という疑問への回答と改善した方がいいエッジケース</li><li><code>SCRIPT FLUSH</code> コマンドによるスクリプトキャッシュの削除方法</li><li><code>EVALSHA</code> コマンドは事前に <code>SCRIPT LOAD</code> コマンドでロード処理を実行する必要があるが、それらのコマンド間で再起動が行われてないか(それによりスクリプトが飛んでないか)、チェックする方法</li></ul><p>という風に、様々な角度で解説されています。</p><p>これだけのことが450ページの中の数ページに詰まってます。ぜひ直接、書籍を手に取って該当箇所をご一読ください。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>以上、「実践Redis入門」の所感でした。<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup></p><p>ところで、EGFﾏﾀﾞｰ？</p><p>次は大村さんの<a href="/articles/20230222a/">スモールデータ解析と機械学習 を読んだ感想</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">「プラネリアム」という、人類と敵対する知的生命体に地球が侵略されている舞台設定があるのですが、第1巻ではそのプラネリアムはほとんど登場しません。マブラヴのUNLIMITED編でもBETAは空気ですがあれと同じです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">令和5年に突如秋山瑞人著「E.G.コンバット」が電子書籍化されました。瑞っ子(秋山瑞人氏の熱烈なフォロワーの自称)は久々に見つかったオアシスに狂喜乱舞し、Amazonのジャンル別ベストセラー一位を獲得するに至りました。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">正確には流体脊髄と呼ばれる <strong>生き物</strong> です。&quot;彼ら流体脊髄ユニットを「コンピュータ」と呼ぶことは差別表現にあたるという。差別かどうかはともかくとしても、人間の脳がコンピュータでないとするなら、彼らもコンピュータではない。彼らは、ある種の遺伝子改造された菌類の織り成す大規模神経繊維集積──生体素子の集合した「思考する物体」であり、まごうまごうかたなき「生き物」である。&quot; 秋山瑞人.Ｅ．Ｇ．コンバット(電撃文庫)(p.75).株式会社ＫＡＤＯＫＡＷＡ.Kindle版.</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">第4章「コラム: データ型を適切に選ぶ」P193</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;">&quot;「脚部損傷、電圧異常時のバイパス回路接続とその間の回避運動。やることを最初から順に言ってみて」ルノア教官が怒っている。自分がいつ、どこで地雷を踏んでしまったのかわからない。カデナはただただ狼狽する。「──そ、そんな制御、VOGUSが、流体脊髄がオペレートする……」「脚部損傷、って言ったでしょ。姿勢制御系まで過電圧でやられてたら？　流体脊髄だって、データが入ってこなかったら何もできないよ。手動でやるには？」瞬間、カデナは頭が真っ白になった。絡み合っている知識を必死になって解きほぐし、懸命になって回路構造を思い浮かべる。「え、ええと、まず──電源、そう、損傷箇所の電源遮断、三軸の機体傾斜角確認、地表傾斜角確認、そ、それから──」言葉に詰まる。その次、次は、母線からの脚関節への電力分配？違う……そう、関節の状態確認だ、多分。でも、どうやって──!?　頭の中の時計の秒針がひと回りしたのを確認して、ルノアは言った。「はい、戦死」&quot; 秋山瑞人.Ｅ．Ｇ．コンバット２ｎｄ(電撃文庫)(pp.74-75).株式会社ＫＡＤＯＫＡＷＡ.Kindle版.</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;">第3章「3.2 Lua」P126~P145</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="vertical-align: top; padding-right: 10px;">7.</span><span style="vertical-align: top;">第2章「2.7.6. データ型を問わず利用できるコマンド/汎用的なコマンド-押さえておきたいコマンドの動作の詳細」P117~P119</span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="vertical-align: top; padding-right: 10px;">8.</span><span style="vertical-align: top;">アトミック性: コンピュータ上のプログラムの動作で、密接に関連する複数の処理が外部から一つの操作に見え、途中の状態を観測したり介入できない性質 <a href="https://e-words.jp/w/%E5%8E%9F%E5%AD%90%E6%80%A7.html">https://e-words.jp/w/原子性.html</a></span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="vertical-align: top; padding-right: 10px;">9.</span><span style="vertical-align: top;">おさまりが悪かったので注釈ではありますが、「実践Redis入門」を読んでて気になったことをこちらに記します。自分が本書を読んでいだいたイメージは、全能の技術者が傍にいて関連する機能や活用事例や懸念事項を1アクションごとにずっと喋ってもらうような感じです。具体的なユースケースや障害発生時など目的をもって質問したいとき、そのような包括的な知識は大いに励みとなります。反対に、正直、本書はさくっとコマンドを調べたい用途には向いていません。Bing先生やChatGPT先生にRedisドキュメントのリンクを出して説明してもらう方が早いです。ただ、ある程度責務を持って実装する中で、コマンドの字引としてドキュメント以上に詳細な説明を知りたいといったケースも当然あるとおもいます。そのような時は索引でページをひっかけたあと、そのページの章/節の頭から丁寧に読んだ方がいいと思います。関連するコマンドが検討材料になるからです。たとえば、「キーを削除したい」=&gt;「雰囲気的に <code>DEL</code> やな」 =&gt; 「<code>DEL</code> コマンドとよく似た <code>UNLINK</code> というコマンドがあるぞ?」 =&gt; 「<code>DEL</code> による同期削除処理は性能問題になるケースがあるのか」 =&gt; 「非同期削除処理である <code>UNLINK</code> で済ませられないか設計の再検討をしてみよう」 =&gt; 「Lazy Freeingちょっと理解した!」 =&gt; 「<code>lazyfreee_pending_objects</code> メトリクスもちょっと理解した!」 という風に連鎖的に理解が進みます。また、コマンドによっては文面に説明が埋め込まれており、それがすべてのケースもあります。スナップショットを取得するコマンドである <code>SAVE</code> / <code>BGSAVE</code> コマンドがP197に記載されていますが、このページだけだと取得方法がわからず、自分はググりました。。。もちろんこれらは本書の魅力を損なうものでは決してありませんが、その辺を意識して読むとより活用できると思います。</span><a href="#fnref:9" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/Redis/">Redis</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      
      <comments>https://future-architect.github.io/articles/20230221a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>単体テストの考え方/使い方 の感想文</title>
      <link>https://future-architect.github.io/articles/20230220a/</link>
      <guid>https://future-architect.github.io/articles/20230220a/</guid>
      <pubDate>Sun, 19 Feb 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230220a/top.jpeg&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;386&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230220a/top.jpeg" alt="" width="300" height="386" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG EXU真野です。</p><p>積読を消化しようというテーマの、<a href="/articles/20230217a/">読書感想文連載</a> の1冊目は、<a href="https://book.mynavi.jp/ec/products/detail/id=134252">単体テストの考え方&#x2F;使い方</a> です。</p><p>書籍の基礎情報です</p><ul><li>2022年12月28日発売</li><li><a href="https://www.amazon.co.jp/-/en/Vladimir-Khorikov/dp/1617296279">Unit Testing Principles, Practices, and Patterns</a> の翻訳書。原著は2020年1月14日に発売</li><li>テーマ<ul><li>質の高いテストを行い、ソフトウェアに価値をもたらそう！単体（unit）テストの原則・実践とそのパターン</li><li>プロジェクトの持続可能な成長を実現するための戦略</li><li>単体テストの原則・実践とそのパターン</li></ul></li><li>コード例は C# であるものの、どの言語でも適用できる汎用的な内容とのこと<ul><li>中を見ると、微妙にC#特有ぽいところに1箇所悩みましたが、それ以外はその通り</li></ul></li><li>翻訳者の須田さんは、他にも<a href="https://www.amazon.co.jp//dp/B09F697K2V/ref=sr_1_2">セキュア・バイ・デザイン: 安全なソフトウェア設計</a> や<a href="https://www.amazon.co.jp/dp/B07L5M7DXS/ref=sr_1_3">OAuth徹底入門 セキュアな認可システムを適用するための原則</a>、<a href="https://www.amazon.co.jp/dp/B06XGYSHCN/ref=sr_1_4">RxJavaリアクティブプログラミング</a> の翻訳もされており、知らずに3冊まで私の本棚に揃ってました<ul><li>どれもキレイに訳されており、日本語として自然だった記憶があります</li></ul></li><li>表紙は北欧ぽい服装をした女性については、詳細が末ページに記載がありますのでお楽しみに</li></ul><p>私が観測している範囲では非常に評判がよく、ソフトウェア設計品質全般に役立つといった声も聞こえてきます。実際に、単体テストのTips的な書き方だけではなく、どういった単体テストが長期間有効なテストとなりえるのか、といったことを説明されています。 <strong>持続可能性</strong> というワードが入っているのも最近のトレンドがあるなと個人的に感じています。</p><p>個人的に書籍で学びたいと思ったのは以下のポイントでした。</p><ul><li>テストコードのレビューはアプリケーションコードより難しいと感じる点、どうにかならないのか</li><li>テストデータの正しさの確認が難しい</li><li>テスト密度が増えるとどんどん、テスト実行時間が増える。効果的な運用とは</li></ul><p>内部は4つの部で構成されているため、それぞれごとに書簡を述べていくスタイルとします。</p><h2 id="第1部-単体-unit）テストとは"><a href="#第1部-単体-unit）テストとは" class="headerlink" title="第1部 単体(unit）テストとは"></a>第1部 単体(unit）テストとは</h2><p>3つの章で構成されています</p><ul><li>1 なぜ、単体（unit)テストを行うのか</li><li>2 単体テストとはなにか？</li><li>3 単体テストの構造解析</li></ul><p>ここで出てくる書籍に一貫して伝えられるメッセージである、「テストの労力を抑えつつ、テストから最大限の価値を引き出すこと」とはどういうことかは、慣れた開発者ならだれしもが意識することだなと思いますが、うまく言語化されて凄いと感じました。</p><p>個人的にはC#の文化圏と、 Goの文化圏の違いを大きく感じたところで、例えばテスト対象メソッド（Method Under Test: MUT）の名前についてや、AAAパターン（Arrange, Act, Assert）については、<a href="https://github.com/golang/go/wiki/TableDrivenTests">TableDrivenTests</a> のGoコミュニティ（？）の刷り込みがあって、少しだけギャップを感じました。</p><p>もちろん、書籍の考え方自体はかなり有用で、ギャップは細かい部分です。例えば、メソッド名についてはTableDrivenTestsのケース名に値するねとか、AAAパターンについては特に意識しなくてもそうなりそうとか、11章のアンチパターンに記載されていた、ドメイン知識のテストコードへの流出についても、ほぼ発生しないだろうなといった具合です。</p><p>以下、個別トピックで気になった部分です。</p><ul><li>良いテストについて、定量的にに見る方法としてカバレッジ・分岐網羅などの話もでてきます<ul><li>これをKPIにすると間違った運用になるので、メトリクスとして使おうねといった趣旨には納得感があります<ul><li>実践的には、どれくらいの数値がベターなのか、指針となる数値があると良いなと感じました（※ただし、言い出すとキリがなく書籍のスコープ外という気もします）</li></ul></li></ul></li><li>モックテストの流派（古典学派、ロンドン学派）の違いもそれなりのページを取って説明しています<ul><li>正直、興味がなかったのですが、それぞれの違いを理解し使い分けようという感じではなく、著者が最初から主張している哲学でいくのであれば、古典学派の考え方を採用すべき、とハッキリ推奨していたのが印象的でした。納得感がありました。やっと流派の違いを理解できた気がします</li></ul></li><li>単体テストで複数のシナリオをつなげることのメリットとでメリット<ul><li>テストの実行速度は早くなるものの基本NGということと、これは統合テストでやるべきだよねという話は同意しかなかったです</li><li>なんとなく、TableDrivenTestsで前のテストケースに依存したケースを書いてしまうアンチパターンに似ているなと感じました</li></ul></li><li>テスト対象メソッド名に should be （～であるべき）は入れない用にしようといった話があり、従おうと思いました</li><li>C#のコンストラクタについて<ul><li>以下のようにコンストラクタや <code>setter</code> で <code>FormatName()</code> のようにロジックを差し込むと、<code>location.Name = newName</code> みたいにフィールドに直接代入しても <code>FormatName()</code> が呼ばれるようで、少し混乱しました。C# わかっていないので、勘違いしたらすいません</li><li>参考: <a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members#constructors">https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members#constructors</a></li></ul></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Location</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">string</span> locationName;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Location</span>(<span class="params"><span class="built_in">string</span> name</span>)</span> =&gt; Name =  FormatName(name);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">get</span> =&gt; locationName;</span><br><span class="line">      <span class="keyword">set</span> =&gt; locationName =  FormatName(<span class="keyword">value</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第2部-単体テストとその価値"><a href="#第2部-単体テストとその価値" class="headerlink" title="第2部 単体テストとその価値"></a>第2部 単体テストとその価値</h2><p>4つの章で構成されています。</p><ul><li>4 良い単体テストを構成する4本の柱</li><li>5 モックの利用とテストの壊れやすさ</li><li>6 単体テストの3つの手法</li><li>7 単体テストの価値を高めるリファクタ林</li></ul><p>2部はかなり楽しい内容でした。良い単体テストの観点は、個人的には想定した仕様を満たすか検証を早くできる・改修で壊れたときに検知できるなどと思っていましたが、それらをより明示的に言語化して4つに整理したなと感じます。それぞれの観点について、SN比での説明や、ホワイトボックステスト&#x2F;ブラックボックステストのどちらをテストケース洗い出しに活用し、どちらを分析に利用すべきといった話はとても納得感があります。</p><p>ここで一番わたし個人の経験と紐づいてグっと来たのは、観測可能な振る舞いをテストすべきで、実装詳細をテストすると壊れやすい（保守性が下がる）という点です。例えばORマッパーの生成するSQLクエリの文字列を検証すると、壊れやすいテストになるなといった具合で、過去を思い出してうなりました（クエリ系のテストについては3部でも説明があります）。How, Whatのどちらに絞ってテストを書くべきか、読み進めると納得感が深まると思います。</p><p>以下、個別トピックで気になった部分です。</p><ul><li>良い単体テストの4本柱については、改めてこの領域に絞って深く考えたことが無かったので良い振り返りになりました<ul><li>「テストを書くことは当たり前になっている人で、自動テストの価値も理解している」が、「どういうテストであるべきか、悩んでいる人がいると、指針になる」と書いてあって、その通りな内容です！</li></ul></li><li>4つのパラメータがあると、当然出てくる（考えたい）のがトレードオフ構造ですよね<ul><li>例えば、DBまで接続したE2Eテストだと、間違いに気が付きやすいが、テスト実行速度が犠牲になりフィードバック間隔が遅れるといった話</li><li>面白いのは、全てトレードオフではなく、ある観点は捨てることができないので、実質制御できるのは2軸になるという点です。トレードオフ構造が好きな界隈の人には、共通認識としてあると良いかもと感じます</li></ul></li><li>トレードオフ構造については、明らかに「CAP定理」を意識しています（本書にも言及があります）<ul><li>CAP定理は<a href="https://www.oreilly.co.jp/books/9784873118703/">データ指向アプリケーションデザイン</a> 本を見れば、もはやそれ自体は過去の存在になったと思いましたが、そのフレームに関して業界に与えたインパクトの大きさを再認識しました</li></ul></li><li>トレードオフ構造ですが、 完全性・純粋正・性能のトリレンマがあるという、kawashimaさんの<a href="https://architect-club.connpass.com/event/272854/">強いて言えば「集約どう実装するのかな、を考える」会</a>勉強会を思い出させます。繋がっていると感じます<ul><li>※詳しくは、 syobochimさんの<a href="https://syobochim.hatenablog.com/entry/2023/01/24/163000">参加レポート</a>を参考に</li></ul></li><li>（物議ある）モックについて書かれているのも、2部からです<ul><li>テストダブルの分類（モックかスタブかなど）は分かりやすく、DBはこっちで外部メールサービスがこっちなら、マイクロサービスのWeb APIはどっちなんだ。DBにそのマイクロサービス経由でアクセスしたら話が変わらないか？と一瞬思ったものの、すぐ後ろの文章で考えの軸があり、すぐ疑問が消失したのが良い文章の流れだなと感じた記憶です</li></ul></li><li>少し面白いのは、CQS（コマンド・クエリ分離の原則）について言及があり、テスト対象メソッドについても、コマンド・クエリのどちらかであるべき。それぞれどちらかの性質を持つのであればモック、もう片方であればスタブとして作成すべきといった話です<ul><li>モックとスタブすら区別して考えていなかった自分には斬新な整理の話に感じました</li><li>あと、書籍では「コマンドの戻り値は無い」と話していますが、実際は生成したリソースのIDや、errorは返すべきなので適度に読み替えが必要そうです<ul><li>（後者はC# だとExceptionで広域脱出できるので、 error を毎回返すGoの流儀が特殊なだけではあります）</li></ul></li></ul></li><li>関数型アーキテクチャ<ul><li>モデルの完全性を取るか、純粋性を取るかの話に近いと感じました</li><li>前の感想と重複しますが、<a href="https://syobochim.hatenablog.com/entry/2023/01/24/163000">アーキ部：強いて言えば「集約どう実装するのかな、を考える」会に参加してきた！</a> を併せて読むと味わい深かったです</li><li>万能なアーキテクチャなんて無いんだという話と、伝統的なアーキテクチャがうまく機能する場面も多いといった話。結局そうなんだよなぁ..</li></ul></li><li>フレームワークと紐づく場合のテストについて<ul><li>テストしにくいから、という前提がある議論に思えました</li><li>他のフレームワークへの移植性という話はなかったと思うので、逆にフレームワーク側がテストヘルパーを提供していて、それがマッチするなら依存しても良いのでは？という話にもなりそうと感じました</li></ul></li></ul><h2 id="第3部-統合（integration）テスト"><a href="#第3部-統合（integration）テスト" class="headerlink" title="第3部 統合（integration）テスト"></a>第3部 統合（integration）テスト</h2><p>3つの章で構成されています。</p><ul><li>8 なぜ、統合（integration）テストを行うのか</li><li>9 モックのベスト・プラクティス</li><li>10 データベースに対するテスト</li></ul><p>先程までは単体テストでしたが、統合テストについての部です（違いは書籍内でしっかり説明されています）。私の所属するチームではDB接続までするテストを単体テストと定義しているので、名前がミスマッチでややこしい！となりました。</p><p>以下、個別トピックで気になった部分です。</p><ul><li>テストの効率を上げるために、アプリケーションコード側についても言及があって楽しかったです<ul><li>抽象化のためのインターフェイスは具体が1つだったら意味がないのでやらない。YAGNI原則違反になる<ul><li>心から同意しました</li><li>個人的にはテスト用のモックを作るためのインターフェースもなるべく避けたく、Goであれば net&#x2F;http&#x2F;httptest のテストサーバ側を立てて管理する側に寄せたいと思っています。このへんの議論はもっと深めていきたいと思っています</li></ul></li><li>レイヤーを減らそうという話<ul><li>間接参照（indirection）の層を追加しようとする人が少なくないが、コードベースのどこに何があるか把握することが難しいのでやめよう</li><li>これも同意です。澁川さんの <a href="https://future-architect.github.io/articles/20221111a/">データベースと向き合う決意 </a> にも中間層を壊すムーブメントがあると言われていますが、慣習でレイヤーを設けるのではなく、最適な設計の落とし所を見つけるようにすべきだと再認識しました。</li></ul></li></ul></li><li>データベースを用いるテストの並列実行が難しいという話（テストケースごとに依存するテーブル、レコードが重複すると影響を受けるため）<ul><li>とても分かる</li><li>Dockerコンテナをテストケース（テスト関数）ごとに、インスタンスを分けて利用することは推奨しない（生成・破棄など考慮すべきことが多い）とあったが、これは<a href="https://github.com/ory/dockertest">ory&#x2F;dockertest</a> でどれくらい緩和されるのかは、どこかで検証してみたいと思いました</li></ul></li><li>データの後始末について<ul><li><a href="https://github.com/future-architect/go-exceltesting">go-exceltesting</a> といったツールがあり、逆にこういうのを育てて行きたいと思います<ul><li>このあたりの界隈は、日本の業界のほうがナレッジが溜まっていそうと感じます</li></ul></li></ul></li><li>OR Mapper<ul><li>「クエリの単体テストは効果が薄いのでやらないべき（実装の詳細になる）。むしろ統合テストのシナリオの一部にすべき」とあり、納得感がありました<ul><li>単体テストでOR Mapper が生成したSQLクエリをテストすることも可能でしょうが、それがどのくらい役立つかは限定的だと理解しています</li></ul></li></ul></li></ul><h2 id="第4部-単体テストのアンチ・パターン"><a href="#第4部-単体テストのアンチ・パターン" class="headerlink" title="第4部 単体テストのアンチ・パターン"></a>第4部 単体テストのアンチ・パターン</h2><p>4部は1つだけの章で構成されています。</p><ul><li>11 単体テストのアンチ・パターン</li></ul><p>主要なアンチパターン（慣れればその通りだけど、テストコードを書きはじめのときは悩むことが多い、というか私は悩んだ）ことがまとまっています。</p><p>1点、気になったところがあります。</p><ul><li>テストで用いる現在時刻について（実行するたびに動的に検証項目の値が変わるのをどう制御してテストするか）<ul><li>Goで私がテストでよく用いる、 <a href="https://github.com/Songmu/flextime">Songmu&#x2F;flextime</a> は書籍に記載があった、環境コンテキスト型だと思います。これはプロダクションコードを汚す（テストのために書き換える）ので、推奨しないと書いてありました<ul><li>この意見には納得できますが、flextimeは許容しても良いんじゃないかと思っていて、自分の中で要言語化だと感じました。今は3つの理由が思い付けます。もっとあるかもしれません<ul><li>インターフェースが標準の time.Time と同じだから</li><li>テスト実行フラグのON&#x2F;OFFで挙動を変えるものでも無いから</li><li>テストコードのために書き換えが発生するが、際限無く書き換えを促す変更ではなく、勘違いも発生しにくい</li></ul></li></ul></li></ul></li></ul><h2 id="全体を通して"><a href="#全体を通して" class="headerlink" title="全体を通して"></a>全体を通して</h2><ul><li>訳が良い（日本語として読みやすい）<ul><li>個人的には、リグレッション検知→デグレ検知、統合テスト→結合テスト と呼ぶことが多かったのですが、一般的には書籍の表記が正しいと感じます</li></ul></li><li>各部にある「まとめ」が非常に丁寧でまとまっているなと感じました<ul><li>全体で400pと、それなりの分量があるため、まとめを読んで納得できないところがあれば立ち戻れるので、良い構成だと感じています</li></ul></li><li>単体テスト～統合テストまでの整理が素晴らしい<ul><li>何を重視すべきか、自分の中で考えの指針を作れたのは感謝しかない</li></ul></li><li>効率的なテストデータの作り方、レビューの仕方といったところは物足りなかった<ul><li>データパターンの網羅などの観点はあまり無く（これはこれで深いので、別分野なんだろうなとは思っています）</li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>単体テストの考え方&#x2F;使い方 についての感想文でした。非常に興味深い内容で、良いテストを作るという観点から、アプリケーションコードの設計レベルまで踏み込んで考えることもできると思います。</p><p>次は原木さんの<a href="/articles/20230221a/">実践Redis入門 技術の仕組みから現場の活用まで</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/">テスト</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88/">単体テスト</category>
      
      
      <comments>https://future-architect.github.io/articles/20230220a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>読書感想文連載始めます</title>
      <link>https://future-architect.github.io/articles/20230217a/</link>
      <guid>https://future-architect.github.io/articles/20230217a/</guid>
      <pubDate>Thu, 16 Feb 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230217a/books-gfe2d97ef8_1920.jpg&quot; alt=&quot;books-gfe2d97ef8_1920.jpg&quot; width=&quot;1200&quot; height=&quot;800&quot; loading=&quot;lazy&quot;&gt;

&lt;h1</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230217a/books-gfe2d97ef8_1920.jpg" alt="books-gfe2d97ef8_1920.jpg" width="1200" height="800" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。技術ブログ運営の藤戸四恩です。<br>寒くて乾燥した日が続いており、ボディクリームが欠かせないです。</p><p>読書の秋ならぬ、読書の春ということで読書感想文ブログ連載を始めます！開始のキッカケは最近良い本がたくさん出ているため、積読消化のためにみんなで読書連載をしたいと、とあるメンバーがSlackで呟いたことです。</p><p>この連載に私も参加するのですが、本棚の積読解消したく参加しました。</p><h2 id="読書感想文ブログ連載について"><a href="#読書感想文ブログ連載について" class="headerlink" title="読書感想文ブログ連載について"></a>読書感想文ブログ連載について</h2><p>本企画は初めての連載企画で、2&#x2F;20(月)～3&#x2F;3(金)の平日にブログ記事を投稿していこうというイベントです。</p><p>技術書&#x2F;自己研鑽&#x2F;ビジネス本をテーマです。結果的にはIT技術系ですが、CPU、Linux、言語、ミドルウエア、クラウドなど幅広い題材で、かつ初心者～上級者的な内容までバラエティ豊かな連載になったと思います。</p><p>普段ブログに掲載されないような内容の記事もあるので、普段フューチャー技術ブログをあまり読まない人にも記事が届くと良いなと考えています。</p><h2 id="投稿スケジュール・タイトル"><a href="#投稿スケジュール・タイトル" class="headerlink" title="投稿スケジュール・タイトル"></a>投稿スケジュール・タイトル</h2><p>本連載は以下のスケジュールで進めます。</p><div class="scroll"><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>2&#x2F;20</td><td>真野隼記</td><td><a href="/articles/20230220a/">単体テストの考え方&#x2F;使い方 プロジェクトの持続可能な成長を実現するための戦略</a></td></tr><tr><td>2&#x2F;21</td><td>原木翔</td><td><a href="/articles/20230221a/">実践Redis入門 技術の仕組みから現場の活用まで</a></td></tr><tr><td>2&#x2F;22</td><td>大村俊輔</td><td><a href="/articles/20230222a/">スモールデータ解析と機械学習 を読んだ感想</a></td></tr><tr><td>2&#x2F;24</td><td>澁川喜規</td><td><a href="/articles/20230224a/">プログラマーのためのCPU入門</a></td></tr><tr><td>2&#x2F;27</td><td>棚井龍之介</td><td><a href="/articles/20230227a/">スッキリわかるJava 実践編 第3版</a></td></tr><tr><td>2&#x2F;28</td><td>伊藤太斉</td><td><a href="/articles/20230228a/">「リーダブルコード」を読んでTerraformの可読性について考える</a>]</td></tr><tr><td>3&#x2F;1</td><td>川口翔大</td><td><a href="/articles/20230301a/">マイクロサービスパターン MicroServicePatterns 実践的システムデザインのためのコード解説</a></td></tr><tr><td>3&#x2F;2</td><td>藤戸四恩</td><td><a href="/articles/20230302a/">図解即戦力 Google Cloudのしくみと技術がこれ1冊でしっかりわかる教科書</a></td></tr><tr><td>3&#x2F;3</td><td>工藤駿泰</td><td><a href="/articles/20230303a/">SQLアンチパターン</a></td></tr></tbody></table></div><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>是非読んでいただき、シェアしていただけると嬉しいです！</p><p>アイキャッチ画像は、<a href="https://pixabay.com/ja/users/hermann-130146/">Hermann</a> from <a href="https://pixabay.com/ja/">Pixabay</a>を利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      
      <comments>https://future-architect.github.io/articles/20230217a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Mac 慣れした私に Windows が支給されたので、まず設定したこと</title>
      <link>https://future-architect.github.io/articles/20230216a/</link>
      <guid>https://future-architect.github.io/articles/20230216a/</guid>
      <pubDate>Wed, 15 Feb 2023 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20230216a/top.png&quot; alt=&quot;top.png&quot; width=&quot;1200&quot; height=&quot;676&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20230216a/top.png" alt="top.png" width="1200" height="676" loading="lazy"><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li>はじめに<ul><li>このブログを書いたきっかけ</li></ul></li><li>キーボードの購入・設定<ul><li>作業用キーボードの購入</li><li>キーボードの設定<ul><li>無変換&#x2F;変換</li><li>zh, zj, zk, zl</li><li>caps lock + [H,F,B,P,N,A,E]</li></ul></li></ul></li><li>ランチャーアプリの設定</li><li>その他の設定</li><li>おわりに</li></ul><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。</p><p>フューチャーアーキテクト株式会社、HR&#x2F;新卒採用チームの棚井です。</p><p>略歴として、フューチャーに新卒入社、Technology Innovation Group で IT コンサルタントを 3 年、Global Design Group で新規事業開発を 1 年と担当し、現在は Human Resources（つまり HR）でバックオフィスの新卒採用業務を担当しております。</p><p>これまでは Mac ユーザでしたが、Windows が支給されその利用を開始しました。Windows の環境整備として実施した内容を備忘録としての意味も込めてブログ化しました。概要は以下です。</p><ul><li>Mac で身についた入力癖により、Windows 作業が難化</li><li>Windows のキーボード設定を Mac に寄せることで対応しました<ul><li>新しいキーボードを購入しました<ul><li><a href="https://www.logicool.co.jp/ja-jp/products/keyboards/mx-keys-mini.920-010516.html">MX KEYS mini KX700GR（グラファイト）</a></li></ul></li><li>キーバインドを設定しました<ul><li>Microsoft IME</li><li><a href="https://forest.watch.impress.co.jp/library/software/changekey/">Change Key</a></li><li><a href="https://www.autohotkey.com/">AutoHotkey</a></li></ul></li><li>ランチャーを設定しました<ul><li><a href="https://ueli.app/#/">ueli</a></li><li><a href="https://forest.watch.impress.co.jp/library/software/everything/">Everything</a></li></ul></li></ul></li></ul><p>このブログの内容は、Windows ユーザにとっては基本的な内容だと思います。<br>ターゲット読者は「普段は JIS 配列の Mac を利用しているが、緊急で Windows を使う状況になった」方々を想定しています。</p><h2 id="このブログを書いたきっかけ"><a href="#このブログを書いたきっかけ" class="headerlink" title="このブログを書いたきっかけ"></a>このブログを書いたきっかけ</h2><p>学生時代からずっと Mac を利用しており、フューチャーへの新卒入社後も、新人研修期間を除いては Mac で開発作業、資料作成、MTG&#x2F;会議をこなしてきました。パソコンで作業をするといったらそれは「Mac で作業をする」ことが前提であり、数年の蓄積により無意識レベルでショートカット &amp; 各種操作を会得済みの Mac だからこそ、あらゆる方面の日常業務にて生産性を発揮できたとも考えています。</p><p>しかしここにきて、業務上の理由により「Mac を継続利用できない（≒ Mac を会社に返却して、Windows に交換する）」イベントが発生し、対応を迫られる状況となりました。もちろん、業務外のパソコンとしては Mac（MacBook Pro, Apple M1 Pro, 32GB）を利用しているため、「普段用は Mac、仕事では Windows のハイブリット方式」スタイルで生きてくことになりました。</p><p>Windows が支給された後、<strong>windows + (色々なボタン)</strong> によるショートカット</p><ul><li>ファイル名を指定して実行（windows + r）</li><li>仮想デスクトップ操作<ul><li>追加（windows + ctrl + d）</li><li>移動（windows + ctrl + ← or →）</li><li>削除（windows + ctrl + f4）</li></ul></li><li>画面ロック（windows + l）</li><li>エクスプローラーの起動（windows + e）</li><li>スクリーンショット（windows + shift + s）</li><li>etc.</li></ul><p>などを<a href="https://support.microsoft.com/ja-jp/windows/windows-%E3%81%AE%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89-%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88-dcc61a57-8ff0-cffe-9796-cb9706c75eec#WindowsVersion=Windows_11">Microsoft のサイト</a>を参照して実際に動かしながら覚えていきました。</p><p>基本的なショートカットを覚えたら、あとは業務で使いながら「Windows に慣れるのを待とう」として仕事に取り組んでいましたが、無理でした。キーボード配置影響によるミスタイプが連発してまともにテキスト入力ができないのと、Mac で無意識レベルに会得していたショートカットを Windows 側で打ち込んでしまう癖（特に、<code>caps lock/英数</code> ボタンで「英数 ⇄ かな」が切り替わるところ）が治りませんでした。一時的に矯正しても、業務外ではバリバリ Mac ユーザとして生きているので、そこで矯正が外れて、仕事に戻ってくると再矯正することの繰り返しで「入力したい文字が意図した通りに入力できないストレス」でまともに仕事ができない状況です。</p><p>かといって、業務用のパソコンを Windows → Mac に切り戻すこともできないので、対応としては「支給された Windows を、普段の Mac っぽく動かせるようになる」ことを考えました。ネットで「Windows と Mac のハイブリット対応」を検索すると、大まかには ①Windows に寄せる ②Mac に寄せる ③ 両方の中間を取るの 3 パターンに分けられ、私の場合は「②Mac に寄せる」を選択したということです。</p><h1 id="キーボードの購入・設定"><a href="#キーボードの購入・設定" class="headerlink" title="キーボードの購入・設定"></a>キーボードの購入・設定</h1><p>Mac → Windows への移行時に最も頻発したのが「タイプミス」と「Mac 専用のショートカットを Windows に打ち込むこと」です。Mac がデフォルトで提供するキーボード・ショートカットに自分を最適化しているため、それを矯正せずとも Windows で作業ができるようになるべく、キーボードの購入とキーバインドの設定を入れました。</p><h2 id="作業用キーボードの購入"><a href="#作業用キーボードの購入" class="headerlink" title="作業用キーボードの購入"></a>作業用キーボードの購入</h2><p>普段の Mac では、PC 標準搭載のキーボードか「Magic Keyboard - 日本語（JIS）」を利用しています。US 配列の方が好みという人もいますが、私はそこにこだわりはなく JIS 配列を使い続けています。</p><img src="/images/20230216a/MK2A3J.jpeg" alt="MK2A3J.jpeg" width="1144" height="1144" loading="lazy"><p>（画像引用元: <a href="https://www.apple.com/jp/shop/product/MK2A3J/A/magic-keyboard-%E6%97%A5%E6%9C%AC%E8%AA%9Ejis">Magic Keyboard - 日本語（JIS）</a>）</p><p>このキーボードは Windows でも利用できますが、私の環境下ではスペースキーの左右にある「英数」と「かな」が検知されず、テキスト入力時にこのボタンを多用する身としては致命的でした。色々探したところ、ガジェット系 Youtuber やブログが絶賛しており見た目的にも Magic Keyboard に近い、logicool の「<a href="https://www.logicool.co.jp/ja-jp/products/keyboards/mx-keys-mini.920-010516.html">MX KEYS mini KX700GR（グラファイト）</a>」を購入しました。</p><img src="/images/20230216a/71e2SZ0PfyL._AC_SL1500_.jpg" alt="71e2SZ0PfyL._AC_SL1500_.jpg" width="1200" height="539" loading="lazy"><p>（画像引用元: <a href="https://www.amazon.co.jp/dp/B09HQCW3P8/">ロジクール MX KEYS mini KX700GR</a>）</p><p>どちらのキーボードもパンタグラフで、Magic Keyboard はパチパチと叩いている感覚、MX KEYS mini はちゃんと指で押している打鍵感、のような違いがあります。本体重量の違いもあり、重量感・安定感のある MX KEYS mini は購入して割と気に入りました。</p><h2 id="キーボードの設定"><a href="#キーボードの設定" class="headerlink" title="キーボードの設定"></a>キーボードの設定</h2><p>リアルで使うキーボードが用意できたので、これまで利用していた Mac での動作を目標としての Windows キーボード設定を進めていきます。基本的には OS が標準提供する機能を利用して、それだと難しい部分でツールを利用していきます。本ブログでは、私が多様する以下のキー&#x2F;コマンド入力をベースにキーバインドの設定方法を見ていきます。</p><div class="scroll"><table><thead><tr><th>#</th><th>Mac での操作</th><th>Windows での対応操作</th><th>動作内容</th><th>利用機能</th></tr></thead><tbody><tr><td>1</td><td>英数&#x2F;かな</td><td>無変換&#x2F;変換</td><td>日本語入力と英字入力の切り替え</td><td>Microsoft IME</td></tr><tr><td>2</td><td>zh,zj,zk,zl</td><td>zh,zj,zk,zl</td><td>zh:←<br> zj:↓<br> zk:↑<br> zl:→</td><td>AutoHotkey</td></tr><tr><td>3</td><td>control +<br> [H,F,B,P,N,A,E]</td><td>caps lock +<br> [H,F,B,P,N,A,E]</td><td>H:Backspace<br> F:カーソルの移動（右）<br> B:カーソルの移動（左）<br> P:カーソルの移動（上）<br> N:カーソルの移動（下）<br> A:カーソルの移動（行頭）<br> E:カーソルの移動（行末）</td><td>Change Key<br> AutoHotkey</td></tr></tbody></table></div><ul><li>Microsoft IME（Windows OS 標準提供）</li><li><a href="https://forest.watch.impress.co.jp/library/software/changekey/">Change Key</a></li><li><a href="https://www.autohotkey.com/">AutoHotkey</a></li></ul><h2 id="無変換-x2F-変換"><a href="#無変換-x2F-変換" class="headerlink" title="無変換&#x2F;変換"></a>無変換&#x2F;変換</h2><div class="scroll"><table><thead><tr><th>#</th><th>Mac での操作</th><th>Windows での対応操作</th><th>動作内容</th><th>利用機能</th></tr></thead><tbody><tr><td>1</td><td>英数&#x2F;かな</td><td>無変換&#x2F;変換</td><td>日本語入力と英字入力の切り替え</td><td>Microsoft IME</td></tr></tbody></table></div><p>Mac と同じ入力方法での英数&#x2F;かな変換のため、キーボード的にちょうど同じ場所にある「無変換」と「変換」を利用します。この機能についてはニーズがあったのか、Windows OS が標準提供する Microsoft IME の設定を変えるだけで設定できます（以下、Windows 10 Pro の環境を前提とします）。</p><p>まずは検索バーに「IME」入力し、候補の中から「日本語 IME 設定（システム設定）」を開きます。</p><img src="/images/20230216a/ime_1.png" alt="ime_1.png" width="974" height="786" loading="lazy"><p>続いて、「キーとタッチのカスタマイズ」を選択。</p><img src="/images/20230216a/ime_2.png" alt="ime_2.png" width="593" height="583" loading="lazy"><p>キーの割り当てにある各キーに好みの機能を割り当てるをオンにして、</p><ul><li>無変換キー → IME-オフ</li><li>変換キー → IME-オン</li></ul><p>に設定します。</p><img src="/images/20230216a/ime_3.png" alt="ime_3.png" width="491" height="865" loading="lazy"><p>この設定により、Windows の無変換&#x2F;変換が、Mac での英数&#x2F;かな変換と同じ機能を果たすようになります。</p><h2 id="zh-zj-zk-zl"><a href="#zh-zj-zk-zl" class="headerlink" title="zh,zj,zk,zl"></a>zh,zj,zk,zl</h2><div class="scroll"><table><thead><tr><th>#</th><th>Mac での操作</th><th>Windows での対応操作</th><th>動作内容</th><th>利用機能</th></tr></thead><tbody><tr><td>2</td><td>zh,zj,zk,zl</td><td>zh,zj,zk,zl</td><td>zh:←<br> zj:↓<br> zk:↑<br> zl:→</td><td>AutoHotkey</td></tr></tbody></table></div><p>矢印文字の入力として、Mac では「zh,zj,zk,zl」という便利なショートカットがあります。例えば「→」という文字を入力したいとき、通常ならば</p><ul><li>ローマ字で「migi」と入力</li><li>変換で「右」が最初にヒット</li><li>2,3 回変換して「→」になる</li></ul><p>と 3 ステップぐらいのプロセスがかかりますが、Mac の全角状態で「zl」を入力すると、即時「→」に変換されて非常に便利です。この入力方法に慣れてしまうと、むしろ「→」が一発で出力されない環境ではストレスフルになるので、Windows にもこれを適応します。このキーバインドの設定のために、<a href="https://www.autohotkey.com/">AutoHotkey</a> を利用します。</p><img src="/images/20230216a/auk_1.png" alt="auk_1.png" width="1200" height="637" loading="lazy"><p>ダンロードするバージョンとして「v1.1」と「v2.0」の 2 つ候補があります。GitHub のリポジトリを確認したところ、メジャーアップデートとなる v2.0 は <a href="https://github.com/AutoHotkey/AutoHotkey/releases">2022 年 12 月 20 日にリリース</a>されています。文法改善に伴い後方互換性を捨てたことで v1 系で動作していたスクリプトは一部修正が必要になるようです。ネットの情報としては v1 系のサンプルが多い（最近のリリースというのもあり、v2 系の日本語情報はほとんど見つからない）のですが、それほど複雑な文法を入れる見込みはない点と、AutoHotkey のトップページのメッセージには</p><blockquote><p>AutoHotkey has been released and will be considered the default&#x2F;main version. We are in a transition period: the website and forums will be updated accordingly. Please see the <a href="https://www.autohotkey.com/boards/viewtopic.php?f=24&t=112989">announcement</a> for more information.</p></blockquote><p>とある上に、<a href="https://www.autohotkey.com/docs/v2/">ドキュメント</a> が <a href="https://www.autohotkey.com/docs/v2/Tutorial.htm">tidbit チュートリアル</a> を含めて充実しているので、<strong>v2.0</strong> をダウンロードして利用していきます。</p><p>ダウンロードが一通り完了すると、画面右クリックで <code>AutoHotkey Script</code> が選択肢に追加され、AutoHotkey 用のスクリプトが GUI から作れるようになります。</p><img src="/images/20230216a/auk_2.png" alt="auk_2.png" width="689" height="440" loading="lazy"><p><code>New Script</code> にてファイル情報の入力・選択が求められるので、今回は</p><ul><li>ファイル名は　 tech_blog.ahk（拡張子は <code>.ahk</code> にする）</li><li>保存場所はデスクトップ</li><li><code>Minimal for v2</code> を選択</li></ul><p>の設定でファイルを作成しました。</p><img src="/images/20230216a/auk_3.png" alt="auk_3.png" width="413" height="281" loading="lazy"><p>（作成後のアイコン）</p><img src="/images/20230216a/auk_4.png" alt="auk_4.png" width="123" height="113" loading="lazy"><p>ファイルを開くと、デフォルトで 1 行目（#Requires AutoHotkey.0）だけが記入されたファイルの生成を確認できます。<br>VSCode では AutoHotkey 専用の拡張機能 <a href="https://marketplace.visualstudio.com/items?itemName=mark-wiemer.vscode-autohotkey-plus-plus">AutoHotkey Plus Plus</a> があり、code highlighting や code formatting によるサポートが便利です。</p><img src="/images/20230216a/auk_5.png" alt="auk_5.png" width="410" height="89" loading="lazy"><p><code>.ahk</code> ファイルの編集環境は準備できたので、キーバインドの設定を登録します。<br>以下のキーバインドを設定したいので、そのまま .ahk ファイルに追記していきます。</p><div class="scroll"><table><thead><tr><th>入力コマンド</th><th>アウトプット</th></tr></thead><tbody><tr><td>zh</td><td>←</td></tr><tr><td>zj</td><td>↓</td></tr><tr><td>zk</td><td>↑</td></tr><tr><td>zl</td><td>→</td></tr></tbody></table></div><figure class="highlight ahk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;上下左右矢印の入力</span></span><br><span class="line"></span><br><span class="line"><span class="title">:*:zh::</span>←</span><br><span class="line"><span class="title">:*:zj::</span>↓</span><br><span class="line"><span class="title">:*:zk::</span>↑</span><br><span class="line"><span class="title">:*:zl::</span>→</span><br></pre></td></tr></table></figure><p>キーバインドの設定は</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">::&lt;入力する文字列&gt;::&lt;出力する文字列&gt;</span><br></pre></td></tr></table></figure><p>の文法により定義していきます。<br>先頭文字 <code>::</code> と <code>:*:</code> の違いは、<a href="https://www.autohotkey.com/docs/v2/Tutorial.htm#s24">チュートリアルのサンプル</a> に</p><blockquote><p>::btw::by the way ; Replaces “btw” with “by the way” as soon as you press an <a href="https://www.autohotkey.com/docs/v2/Hotstrings.htm#EndChars">default ending character</a>.<br>:*:btw::by the way ; Replaces “btw” with “by the way” without needing an ending character.</p></blockquote><p>と記載があるように、&lt;入力する文字列&gt;の入力後に終了文字を押してから変換して欲しいか、それとも即時変換して欲しいかの違いを表現しています。今回は「<code>zl</code> が入力されたら即時 <code>→</code> に変換してほしい」ので、<code>:*:</code> で定義しています。</p><p>作成した <code>.ahk</code> ファイルはダブルクリックにより適応可能です。ファイルのショートカットを作成して <code>windows + r</code> → <code>shell:startup</code> に配置すれば、Windows 立ち上げ時に AutoHotkey の設定を自動適応できます。</p><h2 id="caps-lock-H-F-B-P-N-A-E"><a href="#caps-lock-H-F-B-P-N-A-E" class="headerlink" title="caps lock + [H,F,B,P,N,A,E]"></a>caps lock + [H,F,B,P,N,A,E]</h2><div class="scroll"><table><thead><tr><th>#</th><th>Mac での操作</th><th>Windows での対応操作</th><th>動作内容</th><th>利用機能</th></tr></thead><tbody><tr><td>3</td><td>control +<br> [H,F,B,P,N,A,E]</td><td>caps lock +<br> [H,F,B,P,N,A,E]</td><td>H:Backspace<br> F:カーソルの移動（右）<br> B:カーソルの移動（左）<br> P:カーソルの移動（上）<br> N:カーソルの移動（下）<br> A:カーソルの移動（行頭）<br> E:カーソルの移動（行末）</td><td>Change Key<br> AutoHotkey</td></tr></tbody></table></div><p>Backspace とカーソル移動のキーバインドを登録していきます。</p><p>AutoHotkey の定義により「caps lock を別のボタンに置き換える」ことは可能なのですが、OS レベルでの caps lock ボタン操作「down（押し込み）&#x2F; up（放し）」と AutoHotkey でのボタン押下検知タイミングの差分により、「caps lock が押されっぱなしになり、置き換え先のボタンが長押し状態になってしまう」問題が多数報告されています。これを回避するために、今回は <a href="https://forest.watch.impress.co.jp/library/software/changekey/">Change Key</a> を利用して caps lock に F13 を割り当て、F13 にキーバインドを設定する方法を使います。</p><p>まずは、caps lock を F13 に変更する設定から。<br>Change Key のダウンロードが完了したら「管理者として実行(A)」により起動します。</p><img src="/images/20230216a/ck_0.png" alt="ck_0.png" width="665" height="173" loading="lazy"><p>変更対象のキーである <code>CapsLock 英数</code> を選択します。</p><img src="/images/20230216a/ck_1.png" alt="ck_1.png" width="877" height="295" loading="lazy"><p>続いて、変更先の F13 を指定したいのですが、デフォルトでは F12 以降の F13 から F24 までは表示されていません。この場合は、右上の <code>Scan code</code> を利用して、対応するスキャンコードを直接入力していきます。</p><img src="/images/20230216a/ck_2.png" alt="ck_2.png" width="879" height="297" loading="lazy"><p>F13 から F24 と スキャンコードの対応表</p><div class="scroll"><table><thead><tr><th>Key</th><th>Scan code</th></tr></thead><tbody><tr><td>F13</td><td>0x0064</td></tr><tr><td>F14</td><td>0x0065</td></tr><tr><td>F15</td><td>0x0066</td></tr><tr><td>F16</td><td>0x0067</td></tr><tr><td>F17</td><td>0x0068</td></tr><tr><td>F18</td><td>0x0069</td></tr><tr><td>F19</td><td>0x006A</td></tr><tr><td>F20</td><td>0x006B</td></tr><tr><td>F21</td><td>0x006C</td></tr><tr><td>F22</td><td>0x006D</td></tr><tr><td>F23</td><td>0x006E</td></tr><tr><td>F24</td><td>0x0076</td></tr></tbody></table></div><p>F13 の <code>0x</code> に続く <code>0064</code> のスキャンコードを登録します。</p><img src="/images/20230216a/ck_3.png" alt="ck_3.png" width="435" height="259" loading="lazy"><p>登録が完了すると、作業前は <code>CapsLock 英数</code> だった場所が、<code>Scan code</code> に変わっていることが分かります。</p><img src="/images/20230216a/ck_4.png" alt="ck_4.png" width="880" height="295" loading="lazy"><p>この状態で「登録(R)」→「現在の設定内容で登録します(R)」を選択すると、PC が再起動してキーの入れ替えが完了します。再起動後、<a href="https://anysweb.co.jp/advancedkeycheck/">こちらのサイト</a> などで入力チェックを行うと、caps lock が F13 と認識されているか確認できます。切り替えがうまくいかない場合、一度 Change Key での「リセット(C)」を利用した上で、caps lock から F13 に 1 ステップで切り替えるのではなく、caps lock → home → F13 のように、別のボタンへの変更を 1 度挟むとうまくいくケースもあるようです。</p><p>F13 への配置換えが完了したら .ahk ファイルに追記していきます。</p><div class="scroll"><table><thead><tr><th>入力コマンド</th><th>アウトプット</th></tr></thead><tbody><tr><td>caps lock + H</td><td>Backspace</td></tr><tr><td>caps lock + F</td><td>カーソルの移動（右）</td></tr><tr><td>caps lock + B</td><td>カーソルの移動（左）</td></tr><tr><td>caps lock + P</td><td>カーソルの移動（上）</td></tr><tr><td>caps lock + N</td><td>カーソルの移動（下）</td></tr><tr><td>caps lock + A</td><td>カーソルの移動（行頭）</td></tr><tr><td>caps lock + E</td><td>カーソルの移動（行末）</td></tr></tbody></table></div><p>caps lock は F13 に変更済みなので、F13 にキーバインドを設定します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">;文字の削除</span><br><span class="line">F13 &amp; H::Send &quot;&#123;Blind&#125;&#123;Backspace&#125;&quot;</span><br><span class="line"></span><br><span class="line">;カーソルの移動(上下左右)</span><br><span class="line">F13 &amp; F::Send &quot;&#123;Blind&#125;&#123;Right&#125;&quot;</span><br><span class="line">F13 &amp; B::Send &quot;&#123;Blind&#125;&#123;Left&#125;&quot;</span><br><span class="line">F13 &amp; P::Send &quot;&#123;Blind&#125;&#123;Up&#125;&quot;</span><br><span class="line">F13 &amp; N::Send &quot;&#123;Blind&#125;&#123;Down&#125;&quot;</span><br><span class="line"></span><br><span class="line">;カーソルの移動(行頭・行末)</span><br><span class="line">F13 &amp; A::Send &quot;&#123;Blind&#125;&#123;Home&#125;&quot;</span><br><span class="line">F13 &amp; E::Send &quot;&#123;Blind&#125;&#123;End&#125;&quot;</span><br></pre></td></tr></table></figure><p>Send の文法詳細や各 Keys の解説は <a href="https://www.autohotkey.com/docs/v2/lib/Send.htm">こちらのドキュメント</a> に記載があります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Send Keys</span><br><span class="line">&lt;入力コマンド&gt;::Send &quot;&lt;操作内容&gt;&quot;</span><br></pre></td></tr></table></figure><p>&lt;入力コマンド&gt;を複数キーにする場合、&amp; で繋いで表現します。また、<code>&#123;Blind&#125;</code> を入れることで、他キーとの同時打鍵が可能となります。例えば、<code>F13 &amp; B::Send &quot;&#123;Left&#125;&quot;</code> は「F13+B」でカーソルをひとつ左に動かすコマンドですが、<code>&#123;Blind&#125;</code> を追加すれば「Shift+F13+B」により「範囲選択しながらの左へのカーソル移動」が可能となります。カーソル移動は別コマンドと組み合わせても効果が増えるので、今回のキーバインドには全て <code>&#123;Blind&#125;</code> を入れています。</p><h3 id="Mac-の-JIS-配列でのカーソル操作"><a href="#Mac-の-JIS-配列でのカーソル操作" class="headerlink" title="Mac の JIS 配列でのカーソル操作"></a>Mac の JIS 配列でのカーソル操作</h3><p><strong>control + [H,F,B,P,N,A,E]</strong> → <strong>caps lock + [H,F,B,P,N,A,E]</strong><br>そもそもの、これは何が嬉しいの？という疑問を持たれた方向けの解説です。</p><p>JIS 配列 Mac の場合、control ボタンが A ボタンの左（US 配列であれば caps lock があるところ）に配置されています。私はこの配置を前提として Mac の <a href="https://support.apple.com/ja-jp/HT201236#text">書類に関するショートカット</a> を利用しています。つまり、テキスト作業・コーディング作業での「Backspace とカーソル移動」は全て「左手小指で control を押しながら」ショートカットを実行しており、これによりホームポジションのままの操作を実現していました。Windows 環境でもこれを再現するために、「control ボタン + X を caps lock ボタン + X に置き換える」設定を入れています。</p><h1 id="ランチャーの設定"><a href="#ランチャーの設定" class="headerlink" title="ランチャーの設定"></a>ランチャーの設定</h1><p>パソコン操作の基本である「テキスト入力」が私の使い慣れた Mac 風に近づいてきたので、次は「ランチャー」です。Mac では <a href="https://www.alfredapp.com/">Alfred</a> を使っているので、これに近い操作性のある <a href="https://ueli.app/">ueli</a> と ueli 内から呼び出す <a href="https://forest.watch.impress.co.jp/library/software/everything/">Everything</a> を設定していきます。</p><p>ueli の <a href="https://ueli.app/#/download">Windows 版をダウンロード</a>して、設定作業を進めます。</p><img src="/images/20230216a/ueli_1.png" alt="ueli_1.png" width="1200" height="695" loading="lazy"><p>設定が完了すると、<code>alt + space</code> によりランチャーの起動が確認できます。</p><p>この起動感、Alfred と同じで快適です。ueli の検索範囲はディレクトリ単位で指定可能なので、使いたいアプリケーションやファイルがヒットしない場合は、設定項目を追加すると検索範囲が拡張できます。</p><img src="/images/20230216a/ueli_2.png" alt="ueli_2.png" width="765" height="90" loading="lazy"><p>ファイル検索としては ueli から <code>es?&lt;検索ワード&gt;</code> による Everything の呼び出しが可能なので、その設定作業も進めていきます。</p><p>こちらの <a href="https://www.voidtools.com/downloads/">ダウンロードサイト</a> から、<code>Everything本体</code> と <code>Download Everything Command-line Interface</code> の 2 つをダウンロードします。Everything 本体は <a href="https://forest.watch.impress.co.jp/library/software/everything/">窓の杜</a> からもダウンロード可能です。Command-line Interface 側はダウンロード後の解凍 &amp; <code>es.exe</code> の配置が完了したら、ueli コンソールの “es.exe” のパスに登録します。</p><img src="/images/20230216a/ueli_3.png" alt="ueli_3.png" width="1200" height="907" loading="lazy"><p>アプリケーションの起動は ueli 単体、ファイル検索は ueli+Everything の使い方が便利です。ueli の起動コマンドはデフォルトで <code>alt + space</code> ですが、このコマンドの組み合わせも任意の形に変更可能なため、この点も含めてポイントの高いランチャーアプリだと思います。私は後述の「右 alt キーを右 Ctrl キーに変更」していることもあり、ueli の起動は <code>ctrl + space</code> をホットキーに登録しています。</p><img src="/images/20230216a/ueli_4.png" alt="ueli_4.png" width="1200" height="491" loading="lazy"><h1 id="その他の設定"><a href="#その他の設定" class="headerlink" title="その他の設定"></a>その他の設定</h1><p>ここまでに「キーボードの設定」と「ランチャーの設定」まで進めてきて、Windows のデフォルト状態から Mac の操作性に少しづつ近づけています。<br>操作デバイスとして新しく購入した <a href="https://www.logicool.co.jp/ja-jp/products/keyboards/mx-keys-mini.920-010516.html">logicool のキーボード</a> を利用しながら検知した「Mac 慣れ起因による誤作動」を正常化していきます。</p><ul><li>左上の「1」を狙って「半角&#x2F;全角漢字」を押してしまうケースがある。気持ち少し右を狙って再度「1」を押すと全角で入力されて変換処理が入る<ul><li>→ 半角&#x2F;全角漢字を 1 に変更</li></ul></li><li>左下にしか Ctrl が無いのが不便。右下にも欲しい（Mac JIS 配列の右下 command キーに対応する「右下 Ctrl」が欲しい）</li><li>右下にある「alt キー」と「カタカナ&#x2F;ひらがなキー」を使った試しがない<ul><li>→ alt 右とカタカナ&#x2F;ひらがなを Ctrl 右に変更</li></ul></li><li>英数入力の切り替えのため「無変換」を狙うが「alt 左」を押してしまい、カーソルのフォーカスが外れることがある</li><li>Mac の左下 command キーに対応する「左下 Ctrl」が欲しい<ul><li>→ alt 左を Ctrl 左に変更（これにより、alt キーが喪失）</li></ul></li><li>タスクマネージャーの起動用に「alt, shift, delete」は必ず残しておく必要があることが判明<ul><li>→ ヘルプ起動機能の F1 に alt 左を配置</li></ul></li></ul><p>このように Change Key を利用して「自分の入力癖に Windows を矯正する」ことを繰り返します。Change Key の設定はコンソールの「参照(F)」→「スキャンコードを含む変更されたキーを一覧表示します(R)」から確認可能なので見てみると、色々な設定が反映されていることが分かります。</p><img src="/images/20230216a/other_2.png" alt="other_2.png" width="548" height="427" loading="lazy"><p>変更した場所は赤枠で囲まれて表示されるようです。<br>このキー配置が、現時点の私にとっては最適のようです。</p><img src="/images/20230216a/other_3.png" alt="other_3.png" width="881" height="298" loading="lazy"><p>ここまで設定して、Mac でのテキスト操作コマンドや「使い慣れた指の操作」をそのまま Windows でも実現でき、Mac にて無意識レベルで習得したコマンドを Windows 下においてもストレスなく正しく利用できるようになってきました。まだ Windows を使い始めて 2 週間も経っていないので、このコマンド設定を利用しつつ何かしらの不便があれば「Mac でどうやって操作してたっけ？」→「Windows で再現しよう」を繰り返しながら、Windwos を使いやすい形にセルフアップデートし続ける予定です。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>JIS 配列の Mac でショートカットを会得した私が、Windows の操作性を Mac に近づけるという内容のブログでした。</p><p>最初に「Mac から Windows に切り替える」と決まった時には、もうこの会社では仕事はできないなと目の前が真っ暗になりました。しかし、Windows の外部ツールを利用したカスタマイズ性の高さに助けられて、なんとか「Windows のキーボード操作を Mac っぽくする」ことに成功して今に至ります。Windows 歴が短いため知らなかったのですが、こういった各種加工が割と簡単にできるというのが、今回の学びでした。「使い慣れた環境から、あえてズレてみる」というのも、技術キャッチアップには刺激になるのかもしれません。ただし、その支給された Windows を Mac の UI&#x2F;UX に寄せようとしている時点で、ズレによるストレスを受け入れるのではなく「（自分なりの方法で）回避している」とも言えますが。いずれは Mac に戻す予定ですが、もしまた何かしらの偶然の連鎖により「Windows を使わざるを得ない状況」になった場合に備えて、支給直後に設定した内容を備忘録的に残すことにしました。</p><p>Windows の機能で便利だなと思ったのは <code>windows + shift + s</code> でのスクショ内容がクリップボードに貼り付けられて、そのまま任意の場所に貼り付け可能なところです。ただし、Mac の場合でも <code>command + shift + 4</code> でスクショするときに <code>controlを押しっぱなし</code> にすることでクリップボードに記録されることを知って、ああそうかとなりました。開発環境としては Mac に優位性がある理解でいますが、Windows 歴が短すぎてまだそれを実感できていません。「Mac ユーザから見た Windows 環境における開発作業の難しさ」については、ネタが溜まったらまたブログ化しようと思います。</p><p>以上、長文にお付き合いいただき、ありがとうございました。<br>みなさま、良い Mac ユーザライフを！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/">環境構築</category>
      
      <category domain="https://future-architect.github.io/tags/Windows/">Windows</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88/">ショートカット</category>
      
      <category domain="https://future-architect.github.io/tags/Mac/">Mac</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89/">キーボード</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%AD%E3%83%BC%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89/">キーバインド</category>
      
      
      <comments>https://future-architect.github.io/articles/20230216a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
