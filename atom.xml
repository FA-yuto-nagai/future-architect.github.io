<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  <icon>https://future-architect.github.io/feed_icon.png</icon>
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2023-02-16T01:01:20.583Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac 慣れした私に Windows が支給されたので、まず設定したこと</title>
    <link href="https://future-architect.github.io/articles/20230216a/"/>
    <id>https://future-architect.github.io/articles/20230216a/</id>
    <published>2023-02-15T15:00:00.000Z</published>
    <updated>2023-02-16T01:01:20.583Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230216a/top.png" alt="top.png" width="1200" height="676" loading="lazy"><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li>はじめに<ul><li>このブログを書いたきっかけ</li></ul></li><li>キーボードの購入・設定<ul><li>作業用キーボードの購入</li><li>キーボードの設定<ul><li>無変換&#x2F;変換</li><li>zh, zj, zk, zl</li><li>caps lock + [H,F,B,P,N,A,E]</li></ul></li></ul></li><li>ランチャーアプリの設定</li><li>その他の設定</li><li>おわりに</li></ul><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。</p><p>フューチャーアーキテクト株式会社、HR&#x2F;新卒採用チームの棚井です。</p><p>略歴として、フューチャーに新卒入社、Technology Innovation Group で IT コンサルタントを 3 年、Global Design Group で新規事業開発を 1 年と担当し、現在は Human Resources（つまり HR）でバックオフィスの新卒採用業務を担当しております。</p><p>これまでは Mac ユーザでしたが、Windows が支給されその利用を開始しました。Windows の環境整備として実施した内容を備忘録としての意味も込めてブログ化しました。概要は以下です。</p><ul><li>Mac で身についた入力癖により、Windows 作業が難化</li><li>Windows のキーボード設定を Mac に寄せることで対応しました<ul><li>新しいキーボードを購入しました<ul><li><a href="https://www.logicool.co.jp/ja-jp/products/keyboards/mx-keys-mini.920-010516.html">MX KEYS mini KX700GR（グラファイト）</a></li></ul></li><li>キーバインドを設定しました<ul><li>Microsoft IME</li><li><a href="https://forest.watch.impress.co.jp/library/software/changekey/">Change Key</a></li><li><a href="https://www.autohotkey.com/">AutoHotkey</a></li></ul></li><li>ランチャーを設定しました<ul><li><a href="https://ueli.app/#/">ueli</a></li><li><a href="https://forest.watch.impress.co.jp/library/software/everything/">Everything</a></li></ul></li></ul></li></ul><p>このブログの内容は、Windows ユーザにとっては基本的な内容だと思います。<br>ターゲット読者は「普段は JIS 配列の Mac を利用しているが、緊急で Windows を使う状況になった」方々を想定しています。</p><h2 id="このブログを書いたきっかけ"><a href="#このブログを書いたきっかけ" class="headerlink" title="このブログを書いたきっかけ"></a>このブログを書いたきっかけ</h2><p>学生時代からずっと Mac を利用しており、フューチャーへの新卒入社後も、新人研修期間を除いては Mac で開発作業、資料作成、MTG&#x2F;会議をこなしてきました。パソコンで作業をするといったらそれは「Mac で作業をする」ことが前提であり、数年の蓄積により無意識レベルでショートカット &amp; 各種操作を会得済みの Mac だからこそ、あらゆる方面の日常業務にて生産性を発揮できたとも考えています。</p><p>しかしここにきて、業務上の理由により「Mac を継続利用できない（≒ Mac を会社に返却して、Windows に交換する）」イベントが発生し、対応を迫られる状況となりました。もちろん、業務外のパソコンとしては Mac（MacBook Pro, Apple M1 Pro, 32GB）を利用しているため、「普段用は Mac、仕事では Windows のハイブリット方式」スタイルで生きてくことになりました。</p><p>Windows が支給された後、<strong>windows + (色々なボタン)</strong> によるショートカット</p><ul><li>ファイル名を指定して実行（windows + r）</li><li>仮想デスクトップ操作<ul><li>追加（windows + ctrl + d）</li><li>移動（windows + ctrl + ← or →）</li><li>削除（windows + ctrl + f4）</li></ul></li><li>画面ロック（windows + l）</li><li>エクスプローラーの起動（windows + e）</li><li>スクリーンショット（windows + shift + s）</li><li>etc.</li></ul><p>などを<a href="https://support.microsoft.com/ja-jp/windows/windows-%E3%81%AE%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89-%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88-dcc61a57-8ff0-cffe-9796-cb9706c75eec#WindowsVersion=Windows_11">Microsoft のサイト</a>を参照して実際に動かしながら覚えていきました。</p><p>基本的なショートカットを覚えたら、あとは業務で使いながら「Windows に慣れるのを待とう」として仕事に取り組んでいましたが、無理でした。キーボード配置影響によるミスタイプが連発してまともにテキスト入力ができないのと、Mac で無意識レベルに会得していたショートカットを Windows 側で打ち込んでしまう癖（特に、<code>caps lock/英数</code> ボタンで「英数 ⇄ かな」が切り替わるところ）が治りませんでした。一時的に矯正しても、業務外ではバリバリ Mac ユーザとして生きているので、そこで矯正が外れて、仕事に戻ってくると再矯正することの繰り返しで「入力したい文字が意図した通りに入力できないストレス」でまともに仕事ができない状況です。</p><p>かといって、業務用のパソコンを Windows → Mac に切り戻すこともできないので、対応としては「支給された Windows を、普段の Mac っぽく動かせるようになる」ことを考えました。ネットで「Windows と Mac のハイブリット対応」を検索すると、大まかには ①Windows に寄せる ②Mac に寄せる ③ 両方の中間を取るの 3 パターンに分けられ、私の場合は「②Mac に寄せる」を選択したということです。</p><h1 id="キーボードの購入・設定"><a href="#キーボードの購入・設定" class="headerlink" title="キーボードの購入・設定"></a>キーボードの購入・設定</h1><p>Mac → Windows への移行時に最も頻発したのが「タイプミス」と「Mac 専用のショートカットを Windows に打ち込むこと」です。Mac がデフォルトで提供するキーボード・ショートカットに自分を最適化しているため、それを矯正せずとも Windows で作業ができるようになるべく、キーボードの購入とキーバインドの設定を入れました。</p><h2 id="作業用キーボードの購入"><a href="#作業用キーボードの購入" class="headerlink" title="作業用キーボードの購入"></a>作業用キーボードの購入</h2><p>普段の Mac では、PC 標準搭載のキーボードか「Magic Keyboard - 日本語（JIS）」を利用しています。US 配列の方が好みという人もいますが、私はそこにこだわりはなく JIS 配列を使い続けています。</p><img src="/images/20230216a/MK2A3J.jpeg" alt="MK2A3J.jpeg" width="1144" height="1144" loading="lazy"><p>（画像引用元: <a href="https://www.apple.com/jp/shop/product/MK2A3J/A/magic-keyboard-%E6%97%A5%E6%9C%AC%E8%AA%9Ejis">Magic Keyboard - 日本語（JIS）</a>）</p><p>このキーボードは Windows でも利用できますが、私の環境下ではスペースキーの左右にある「英数」と「かな」が検知されず、テキスト入力時にこのボタンを多用する身としては致命的でした。色々探したところ、ガジェット系 Youtuber やブログが絶賛しており見た目的にも Magic Keyboard に近い、logicool の「<a href="https://www.logicool.co.jp/ja-jp/products/keyboards/mx-keys-mini.920-010516.html">MX KEYS mini KX700GR（グラファイト）</a>」を購入しました。</p><img src="/images/20230216a/71e2SZ0PfyL._AC_SL1500_.jpg" alt="71e2SZ0PfyL._AC_SL1500_.jpg" width="1200" height="539" loading="lazy"><p>（画像引用元: <a href="https://www.amazon.co.jp/dp/B09HQCW3P8/">ロジクール MX KEYS mini KX700GR</a>）</p><p>どちらのキーボードもパンタグラフで、Magic Keyboard はパチパチと叩いている感覚、MX KEYS mini はちゃんと指で押している打鍵感、のような違いがあります。本体重量の違いもあり、重量感・安定感のある MX KEYS mini は購入して割と気に入りました。</p><h2 id="キーボードの設定"><a href="#キーボードの設定" class="headerlink" title="キーボードの設定"></a>キーボードの設定</h2><p>リアルで使うキーボードが用意できたので、これまで利用していた Mac での動作を目標としての Windows キーボード設定を進めていきます。基本的には OS が標準提供する機能を利用して、それだと難しい部分でツールを利用していきます。本ブログでは、私が多様する以下のキー&#x2F;コマンド入力をベースにキーバインドの設定方法を見ていきます。</p><div class="scroll"><table><thead><tr><th>#</th><th>Mac での操作</th><th>Windows での対応操作</th><th>動作内容</th><th>利用機能</th></tr></thead><tbody><tr><td>1</td><td>英数&#x2F;かな</td><td>無変換&#x2F;変換</td><td>日本語入力と英字入力の切り替え</td><td>Microsoft IME</td></tr><tr><td>2</td><td>zh,zj,zk,zl</td><td>zh,zj,zk,zl</td><td>zh:←<br> zj:↓<br> zk:↑<br> zl:→</td><td>AutoHotkey</td></tr><tr><td>3</td><td>control +<br> [H,F,B,P,N,A,E]</td><td>caps lock +<br> [H,F,B,P,N,A,E]</td><td>H:Backspace<br> F:カーソルの移動（右）<br> B:カーソルの移動（左）<br> P:カーソルの移動（上）<br> N:カーソルの移動（下）<br> A:カーソルの移動（行頭）<br> E:カーソルの移動（行末）</td><td>Change Key<br> AutoHotkey</td></tr></tbody></table></div><ul><li>Microsoft IME（Windows OS 標準提供）</li><li><a href="https://forest.watch.impress.co.jp/library/software/changekey/">Change Key</a></li><li><a href="https://www.autohotkey.com/">AutoHotkey</a></li></ul><h2 id="無変換-x2F-変換"><a href="#無変換-x2F-変換" class="headerlink" title="無変換&#x2F;変換"></a>無変換&#x2F;変換</h2><div class="scroll"><table><thead><tr><th>#</th><th>Mac での操作</th><th>Windows での対応操作</th><th>動作内容</th><th>利用機能</th></tr></thead><tbody><tr><td>1</td><td>英数&#x2F;かな</td><td>無変換&#x2F;変換</td><td>日本語入力と英字入力の切り替え</td><td>Microsoft IME</td></tr></tbody></table></div><p>Mac と同じ入力方法での英数&#x2F;かな変換のため、キーボード的にちょうど同じ場所にある「無変換」と「変換」を利用します。この機能についてはニーズがあったのか、Windows OS が標準提供する Microsoft IME の設定を変えるだけで設定できます（以下、Windows 10 Pro の環境を前提とします）。</p><p>まずは検索バーに「IME」入力し、候補の中から「日本語 IME 設定（システム設定）」を開きます。</p><img src="/images/20230216a/ime_1.png" alt="ime_1.png" width="974" height="786" loading="lazy"><p>続いて、「キーとタッチのカスタマイズ」を選択。</p><img src="/images/20230216a/ime_2.png" alt="ime_2.png" width="593" height="583" loading="lazy"><p>キーの割り当てにある各キーに好みの機能を割り当てるをオンにして、</p><ul><li>無変換キー → IME-オフ</li><li>変換キー → IME-オン</li></ul><p>に設定します。</p><img src="/images/20230216a/ime_3.png" alt="ime_3.png" width="491" height="865" loading="lazy"><p>この設定により、Windows の無変換&#x2F;変換が、Mac での英数&#x2F;かな変換と同じ機能を果たすようになります。</p><h2 id="zh-zj-zk-zl"><a href="#zh-zj-zk-zl" class="headerlink" title="zh,zj,zk,zl"></a>zh,zj,zk,zl</h2><div class="scroll"><table><thead><tr><th>#</th><th>Mac での操作</th><th>Windows での対応操作</th><th>動作内容</th><th>利用機能</th></tr></thead><tbody><tr><td>2</td><td>zh,zj,zk,zl</td><td>zh,zj,zk,zl</td><td>zh:←<br> zj:↓<br> zk:↑<br> zl:→</td><td>AutoHotkey</td></tr></tbody></table></div><p>矢印文字の入力として、Mac では「zh,zj,zk,zl」という便利なショートカットがあります。例えば「→」という文字を入力したいとき、通常ならば</p><ul><li>ローマ字で「migi」と入力</li><li>変換で「右」が最初にヒット</li><li>2,3 回変換して「→」になる</li></ul><p>と 3 ステップぐらいのプロセスがかかりますが、Mac の全角状態で「zl」を入力すると、即時「→」に変換されて非常に便利です。この入力方法に慣れてしまうと、むしろ「→」が一発で出力されない環境ではストレスフルになるので、Windows にもこれを適応します。このキーバインドの設定のために、<a href="https://www.autohotkey.com/">AutoHotkey</a> を利用します。</p><img src="/images/20230216a/auk_1.png" alt="auk_1.png" width="1200" height="637" loading="lazy"><p>ダンロードするバージョンとして「v1.1」と「v2.0」の 2 つ候補があります。GitHub のリポジトリを確認したところ、メジャーアップデートとなる v2.0 は <a href="https://github.com/AutoHotkey/AutoHotkey/releases">2022 年 12 月 20 日にリリース</a>されています。文法改善に伴い後方互換性を捨てたことで v1 系で動作していたスクリプトは一部修正が必要になるようです。ネットの情報としては v1 系のサンプルが多い（最近のリリースというのもあり、v2 系の日本語情報はほとんど見つからない）のですが、それほど複雑な文法を入れる見込みはない点と、AutoHotkey のトップページのメッセージには</p><blockquote><p>AutoHotkey has been released and will be considered the default&#x2F;main version. We are in a transition period: the website and forums will be updated accordingly. Please see the <a href="https://www.autohotkey.com/boards/viewtopic.php?f=24&t=112989">announcement</a> for more information.</p></blockquote><p>とある上に、<a href="https://www.autohotkey.com/docs/v2/">ドキュメント</a> が <a href="https://www.autohotkey.com/docs/v2/Tutorial.htm">tidbit チュートリアル</a> を含めて充実しているので、<strong>v2.0</strong> をダウンロードして利用していきます。</p><p>ダウンロードが一通り完了すると、画面右クリックで <code>AutoHotkey Script</code> が選択肢に追加され、AutoHotkey 用のスクリプトが GUI から作れるようになります。</p><img src="/images/20230216a/auk_2.png" alt="auk_2.png" width="689" height="440" loading="lazy"><p><code>New Script</code> にてファイル情報の入力・選択が求められるので、今回は</p><ul><li>ファイル名は　 tech_blog.ahk（拡張子は <code>.ahk</code> にする）</li><li>保存場所はデスクトップ</li><li><code>Minimal for v2</code> を選択</li></ul><p>の設定でファイルを作成しました。</p><img src="/images/20230216a/auk_3.png" alt="auk_3.png" width="413" height="281" loading="lazy"><p>（作成後のアイコン）</p><img src="/images/20230216a/auk_4.png" alt="auk_4.png" width="123" height="113" loading="lazy"><p>ファイルを開くと、デフォルトで 1 行目（#Requires AutoHotkey.0）だけが記入されたファイルの生成を確認できます。<br>VSCode では AutoHotkey 専用の拡張機能 <a href="https://marketplace.visualstudio.com/items?itemName=mark-wiemer.vscode-autohotkey-plus-plus">AutoHotkey Plus Plus</a> があり、code highlighting や code formatting によるサポートが便利です。</p><img src="/images/20230216a/auk_5.png" alt="auk_5.png" width="410" height="89" loading="lazy"><p><code>.ahk</code> ファイルの編集環境は準備できたので、キーバインドの設定を登録します。<br>以下のキーバインドを設定したいので、そのまま .ahk ファイルに追記していきます。</p><div class="scroll"><table><thead><tr><th>入力コマンド</th><th>アウトプット</th></tr></thead><tbody><tr><td>zh</td><td>←</td></tr><tr><td>zj</td><td>↓</td></tr><tr><td>zk</td><td>↑</td></tr><tr><td>zl</td><td>→</td></tr></tbody></table></div><figure class="highlight ahk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;上下左右矢印の入力</span></span><br><span class="line"></span><br><span class="line"><span class="title">:*:zh::</span>←</span><br><span class="line"><span class="title">:*:zj::</span>↓</span><br><span class="line"><span class="title">:*:zk::</span>↑</span><br><span class="line"><span class="title">:*:zl::</span>→</span><br></pre></td></tr></table></figure><p>キーバインドの設定は</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">::&lt;入力する文字列&gt;::&lt;出力する文字列&gt;</span><br></pre></td></tr></table></figure><p>の文法により定義していきます。<br>先頭文字 <code>::</code> と <code>:*:</code> の違いは、<a href="https://www.autohotkey.com/docs/v2/Tutorial.htm#s24">チュートリアルのサンプル</a> に</p><blockquote><p>::btw::by the way ; Replaces “btw” with “by the way” as soon as you press an <a href="https://www.autohotkey.com/docs/v2/Hotstrings.htm#EndChars">default ending character</a>.<br>:*:btw::by the way ; Replaces “btw” with “by the way” without needing an ending character.</p></blockquote><p>と記載があるように、&lt;入力する文字列&gt;の入力後に終了文字を押してから変換して欲しいか、それとも即時変換して欲しいかの違いを表現しています。今回は「<code>zl</code> が入力されたら即時 <code>→</code> に変換してほしい」ので、<code>:*:</code> で定義しています。</p><p>作成した <code>.ahk</code> ファイルはダブルクリックにより適応可能です。ファイルのショートカットを作成して <code>windows + r</code> → <code>shell:startup</code> に配置すれば、Windows 立ち上げ時に AutoHotkey の設定を自動適応できます。</p><h2 id="caps-lock-H-F-B-P-N-A-E"><a href="#caps-lock-H-F-B-P-N-A-E" class="headerlink" title="caps lock + [H,F,B,P,N,A,E]"></a>caps lock + [H,F,B,P,N,A,E]</h2><div class="scroll"><table><thead><tr><th>#</th><th>Mac での操作</th><th>Windows での対応操作</th><th>動作内容</th><th>利用機能</th></tr></thead><tbody><tr><td>3</td><td>control +<br> [H,F,B,P,N,A,E]</td><td>caps lock +<br> [H,F,B,P,N,A,E]</td><td>H:Backspace<br> F:カーソルの移動（右）<br> B:カーソルの移動（左）<br> P:カーソルの移動（上）<br> N:カーソルの移動（下）<br> A:カーソルの移動（行頭）<br> E:カーソルの移動（行末）</td><td>Change Key<br> AutoHotkey</td></tr></tbody></table></div><p>Backspace とカーソル移動のキーバインドを登録していきます。</p><p>AutoHotkey の定義により「caps lock を別のボタンに置き換える」ことは可能なのですが、OS レベルでの caps lock ボタン操作「down（押し込み）&#x2F; up（放し）」と AutoHotkey でのボタン押下検知タイミングの差分により、「caps lock が押されっぱなしになり、置き換え先のボタンが長押し状態になってしまう」問題が多数報告されています。これを回避するために、今回は <a href="https://forest.watch.impress.co.jp/library/software/changekey/">Change Key</a> を利用して caps lock に F13 を割り当て、F13 にキーバインドを設定する方法を使います。</p><p>まずは、caps lock を F13 に変更する設定から。<br>Change Key のダウンロードが完了したら「管理者として実行(A)」により起動します。</p><img src="/images/20230216a/ck_0.png" alt="ck_0.png" width="665" height="173" loading="lazy"><p>変更対象のキーである <code>CapsLock 英数</code> を選択します。</p><img src="/images/20230216a/ck_1.png" alt="ck_1.png" width="877" height="295" loading="lazy"><p>続いて、変更先の F13 を指定したいのですが、デフォルトでは F12 以降の F13 から F24 までは表示されていません。この場合は、右上の <code>Scan code</code> を利用して、対応するスキャンコードを直接入力していきます。</p><img src="/images/20230216a/ck_2.png" alt="ck_2.png" width="879" height="297" loading="lazy"><p>F13 から F24 と スキャンコードの対応表</p><div class="scroll"><table><thead><tr><th>Key</th><th>Scan code</th></tr></thead><tbody><tr><td>F13</td><td>0x0064</td></tr><tr><td>F14</td><td>0x0065</td></tr><tr><td>F15</td><td>0x0066</td></tr><tr><td>F16</td><td>0x0067</td></tr><tr><td>F17</td><td>0x0068</td></tr><tr><td>F18</td><td>0x0069</td></tr><tr><td>F19</td><td>0x006A</td></tr><tr><td>F20</td><td>0x006B</td></tr><tr><td>F21</td><td>0x006C</td></tr><tr><td>F22</td><td>0x006D</td></tr><tr><td>F23</td><td>0x006E</td></tr><tr><td>F24</td><td>0x0076</td></tr></tbody></table></div><p>F13 の <code>0x</code> に続く <code>0064</code> のスキャンコードを登録します。</p><img src="/images/20230216a/ck_3.png" alt="ck_3.png" width="435" height="259" loading="lazy"><p>登録が完了すると、作業前は <code>CapsLock 英数</code> だった場所が、<code>Scan code</code> に変わっていることが分かります。</p><img src="/images/20230216a/ck_4.png" alt="ck_4.png" width="880" height="295" loading="lazy"><p>この状態で「登録(R)」→「現在の設定内容で登録します(R)」を選択すると、PC が再起動してキーの入れ替えが完了します。再起動後、<a href="https://anysweb.co.jp/advancedkeycheck/">こちらのサイト</a> などで入力チェックを行うと、caps lock が F13 と認識されているか確認できます。切り替えがうまくいかない場合、一度 Change Key での「リセット(C)」を利用した上で、caps lock から F13 に 1 ステップで切り替えるのではなく、caps lock → home → F13 のように、別のボタンへの変更を 1 度挟むとうまくいくケースもあるようです。</p><p>F13 への配置換えが完了したら .ahk ファイルに追記していきます。</p><div class="scroll"><table><thead><tr><th>入力コマンド</th><th>アウトプット</th></tr></thead><tbody><tr><td>caps lock + H</td><td>Backspace</td></tr><tr><td>caps lock + F</td><td>カーソルの移動（右）</td></tr><tr><td>caps lock + B</td><td>カーソルの移動（左）</td></tr><tr><td>caps lock + P</td><td>カーソルの移動（上）</td></tr><tr><td>caps lock + N</td><td>カーソルの移動（下）</td></tr><tr><td>caps lock + A</td><td>カーソルの移動（行頭）</td></tr><tr><td>caps lock + E</td><td>カーソルの移動（行末）</td></tr></tbody></table></div><p>caps lock は F13 に変更済みなので、F13 にキーバインドを設定します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">;文字の削除</span><br><span class="line">F13 &amp; H::Send &quot;&#123;Blind&#125;&#123;Backspace&#125;&quot;</span><br><span class="line"></span><br><span class="line">;カーソルの移動(上下左右)</span><br><span class="line">F13 &amp; F::Send &quot;&#123;Blind&#125;&#123;Right&#125;&quot;</span><br><span class="line">F13 &amp; B::Send &quot;&#123;Blind&#125;&#123;Left&#125;&quot;</span><br><span class="line">F13 &amp; P::Send &quot;&#123;Blind&#125;&#123;Up&#125;&quot;</span><br><span class="line">F13 &amp; N::Send &quot;&#123;Blind&#125;&#123;Down&#125;&quot;</span><br><span class="line"></span><br><span class="line">;カーソルの移動(行頭・行末)</span><br><span class="line">F13 &amp; A::Send &quot;&#123;Blind&#125;&#123;Home&#125;&quot;</span><br><span class="line">F13 &amp; E::Send &quot;&#123;Blind&#125;&#123;End&#125;&quot;</span><br></pre></td></tr></table></figure><p>Send の文法詳細や各 Keys の解説は <a href="https://www.autohotkey.com/docs/v2/lib/Send.htm">こちらのドキュメント</a> に記載があります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Send Keys</span><br><span class="line">&lt;入力コマンド&gt;::Send &quot;&lt;操作内容&gt;&quot;</span><br></pre></td></tr></table></figure><p>&lt;入力コマンド&gt;を複数キーにする場合、&amp; で繋いで表現します。また、<code>&#123;Blind&#125;</code> を入れることで、他キーとの同時打鍵が可能となります。例えば、<code>F13 &amp; B::Send &quot;&#123;Left&#125;&quot;</code> は「F13+B」でカーソルをひとつ左に動かすコマンドですが、<code>&#123;Blind&#125;</code> を追加すれば「Shift+F13+B」により「範囲選択しながらの左へのカーソル移動」が可能となります。カーソル移動は別コマンドと組み合わせても効果が増えるので、今回のキーバインドには全て <code>&#123;Blind&#125;</code> を入れています。</p><h3 id="Mac-の-JIS-配列でのカーソル操作"><a href="#Mac-の-JIS-配列でのカーソル操作" class="headerlink" title="Mac の JIS 配列でのカーソル操作"></a>Mac の JIS 配列でのカーソル操作</h3><p><strong>control + [H,F,B,P,N,A,E]</strong> → <strong>caps lock + [H,F,B,P,N,A,E]</strong><br>そもそもの、これは何が嬉しいの？という疑問を持たれた方向けの解説です。</p><p>JIS 配列 Mac の場合、control ボタンが A ボタンの左（US 配列であれば caps lock があるところ）に配置されています。私はこの配置を前提として Mac の <a href="https://support.apple.com/ja-jp/HT201236#text">書類に関するショートカット</a> を利用しています。つまり、テキスト作業・コーディング作業での「Backspace とカーソル移動」は全て「左手小指で control を押しながら」ショートカットを実行しており、これによりホームポジションのままの操作を実現していました。Windows 環境でもこれを再現するために、「control ボタン + X を caps lock ボタン + X に置き換える」設定を入れています。</p><h1 id="ランチャーの設定"><a href="#ランチャーの設定" class="headerlink" title="ランチャーの設定"></a>ランチャーの設定</h1><p>パソコン操作の基本である「テキスト入力」が私の使い慣れた Mac 風に近づいてきたので、次は「ランチャー」です。Mac では <a href="https://www.alfredapp.com/">Alfred</a> を使っているので、これに近い操作性のある <a href="https://ueli.app/">ueli</a> と ueli 内から呼び出す <a href="https://forest.watch.impress.co.jp/library/software/everything/">Everything</a> を設定していきます。</p><p>ueli の <a href="https://ueli.app/#/download">Windows 版をダウンロード</a>して、設定作業を進めます。</p><img src="/images/20230216a/ueli_1.png" alt="ueli_1.png" width="1200" height="695" loading="lazy"><p>設定が完了すると、<code>alt + space</code> によりランチャーの起動が確認できます。</p><p>この起動感、Alfred と同じで快適です。ueli の検索範囲はディレクトリ単位で指定可能なので、使いたいアプリケーションやファイルがヒットしない場合は、設定項目を追加すると検索範囲が拡張できます。</p><img src="/images/20230216a/ueli_2.png" alt="ueli_2.png" width="765" height="90" loading="lazy"><p>ファイル検索としては ueli から <code>es?&lt;検索ワード&gt;</code> による Everything の呼び出しが可能なので、その設定作業も進めていきます。</p><p>こちらの <a href="https://www.voidtools.com/downloads/">ダウンロードサイト</a> から、<code>Everything本体</code> と <code>Download Everything Command-line Interface</code> の 2 つをダウンロードします。Everything 本体は <a href="https://forest.watch.impress.co.jp/library/software/everything/">窓の杜</a> からもダウンロード可能です。Command-line Interface 側はダウンロード後の解凍 &amp; <code>es.exe</code> の配置が完了したら、ueli コンソールの “es.exe” のパスに登録します。</p><img src="/images/20230216a/ueli_3.png" alt="ueli_3.png" width="1200" height="907" loading="lazy"><p>アプリケーションの起動は ueli 単体、ファイル検索は ueli+Everything の使い方が便利です。ueli の起動コマンドはデフォルトで <code>alt + space</code> ですが、このコマンドの組み合わせも任意の形に変更可能なため、この点も含めてポイントの高いランチャーアプリだと思います。私は後述の「右 alt キーを右 Ctrl キーに変更」していることもあり、ueli の起動は <code>ctrl + space</code> をホットキーに登録しています。</p><img src="/images/20230216a/ueli_4.png" alt="ueli_4.png" width="1200" height="491" loading="lazy"><h1 id="その他の設定"><a href="#その他の設定" class="headerlink" title="その他の設定"></a>その他の設定</h1><p>ここまでに「キーボードの設定」と「ランチャーの設定」まで進めてきて、Windows のデフォルト状態から Mac の操作性に少しづつ近づけています。<br>操作デバイスとして新しく購入した <a href="https://www.logicool.co.jp/ja-jp/products/keyboards/mx-keys-mini.920-010516.html">logicool のキーボード</a> を利用しながら検知した「Mac 慣れ起因による誤作動」を正常化していきます。</p><ul><li>左上の「1」を狙って「半角&#x2F;全角漢字」を押してしまうケースがある。気持ち少し右を狙って再度「1」を押すと全角で入力されて変換処理が入る<ul><li>→ 半角&#x2F;全角漢字を 1 に変更</li></ul></li><li>左下にしか Ctrl が無いのが不便。右下にも欲しい（Mac JIS 配列の右下 command キーに対応する「右下 Ctrl」が欲しい）</li><li>右下にある「alt キー」と「カタカナ&#x2F;ひらがなキー」を使った試しがない<ul><li>→ alt 右とカタカナ&#x2F;ひらがなを Ctrl 右に変更</li></ul></li><li>英数入力の切り替えのため「無変換」を狙うが「alt 左」を押してしまい、カーソルのフォーカスが外れることがある</li><li>Mac の左下 command キーに対応する「左下 Ctrl」が欲しい<ul><li>→ alt 左を Ctrl 左に変更（これにより、alt キーが喪失）</li></ul></li><li>タスクマネージャーの起動用に「alt, shift, delete」は必ず残しておく必要があることが判明<ul><li>→ ヘルプ起動機能の F1 に alt 左を配置</li></ul></li></ul><p>このように Change Key を利用して「自分の入力癖に Windows を矯正する」ことを繰り返します。Change Key の設定はコンソールの「参照(F)」→「スキャンコードを含む変更されたキーを一覧表示します(R)」から確認可能なので見てみると、色々な設定が反映されていることが分かります。</p><img src="/images/20230216a/other_2.png" alt="other_2.png" width="548" height="427" loading="lazy"><p>変更した場所は赤枠で囲まれて表示されるようです。<br>このキー配置が、現時点の私にとっては最適のようです。</p><img src="/images/20230216a/other_3.png" alt="other_3.png" width="881" height="298" loading="lazy"><p>ここまで設定して、Mac でのテキスト操作コマンドや「使い慣れた指の操作」をそのまま Windows でも実現でき、Mac にて無意識レベルで習得したコマンドを Windows 下においてもストレスなく正しく利用できるようになってきました。まだ Windows を使い始めて 2 週間も経っていないので、このコマンド設定を利用しつつ何かしらの不便があれば「Mac でどうやって操作してたっけ？」→「Windows で再現しよう」を繰り返しながら、Windwos を使いやすい形にセルフアップデートし続ける予定です。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>JIS 配列の Mac でショートカットを会得した私が、Windows の操作性を Mac に近づけるという内容のブログでした。</p><p>最初に「Mac から Windows に切り替える」と決まった時には、もうこの会社では仕事はできないなと目の前が真っ暗になりました。しかし、Windows の外部ツールを利用したカスタマイズ性の高さに助けられて、なんとか「Windows のキーボード操作を Mac っぽくする」ことに成功して今に至ります。Windows 歴が短いため知らなかったのですが、こういった各種加工が割と簡単にできるというのが、今回の学びでした。「使い慣れた環境から、あえてズレてみる」というのも、技術キャッチアップには刺激になるのかもしれません。ただし、その支給された Windows を Mac の UI&#x2F;UX に寄せようとしている時点で、ズレによるストレスを受け入れるのではなく「（自分なりの方法で）回避している」とも言えますが。いずれは Mac に戻す予定ですが、もしまた何かしらの偶然の連鎖により「Windows を使わざるを得ない状況」になった場合に備えて、支給直後に設定した内容を備忘録的に残すことにしました。</p><p>Windows の機能で便利だなと思ったのは <code>windows + shift + s</code> でのスクショ内容がクリップボードに貼り付けられて、そのまま任意の場所に貼り付け可能なところです。ただし、Mac の場合でも <code>command + shift + 4</code> でスクショするときに <code>controlを押しっぱなし</code> にすることでクリップボードに記録されることを知って、ああそうかとなりました。開発環境としては Mac に優位性がある理解でいますが、Windows 歴が短すぎてまだそれを実感できていません。「Mac ユーザから見た Windows 環境における開発作業の難しさ」については、ネタが溜まったらまたブログ化しようと思います。</p><p>以上、長文にお付き合いいただき、ありがとうございました。<br>みなさま、良い Mac ユーザライフを！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230216a/top.png&quot; alt=&quot;top.png&quot; width=&quot;1200&quot; height=&quot;676&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="環境構築" scheme="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"/>
    
    <category term="Windows" scheme="https://future-architect.github.io/tags/Windows/"/>
    
    <category term="ショートカット" scheme="https://future-architect.github.io/tags/%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88/"/>
    
    <category term="Mac" scheme="https://future-architect.github.io/tags/Mac/"/>
    
    <category term="キーボード" scheme="https://future-architect.github.io/tags/%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89/"/>
    
    <category term="キーバインド" scheme="https://future-architect.github.io/tags/%E3%82%AD%E3%83%BC%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89/"/>
    
  </entry>
  
  <entry>
    <title>Recoilドキュメント入門</title>
    <link href="https://future-architect.github.io/articles/20230215a/"/>
    <id>https://future-architect.github.io/articles/20230215a/</id>
    <published>2023-02-14T15:00:00.000Z</published>
    <updated>2023-02-15T01:23:05.546Z</updated>
    
    <content type="html"><![CDATA[<p>RecoilはFacebookのMeta社製のReact用状態管理ライブラリです。この分野はFacebook自体がFluxという概念を発表してから、さまざまなライブラリが開発されてきました。</p><p>特に広く利用されたのがReduxです。Reduxはとても小さなライブラリにもかかわらず、Reactだけで解決しようとすると大変だったことがエレガントに解決できましたが、非同期がネイティブ対応でなくプラグインが必要だったり、ちょっとディープに使おうとするとたくさんのボイラープレートコードが必要になったり大変だったり、というのはありました。また、TypeScriptの普及する前の時代からのものなので、正しい型つけをするのが面倒だったり、といろいろ大変なところもありました。</p><p>Redux本体もそれらを改善したRedux-Toolkitというのも出していたりするのですが、Meta自体が開発しているライブラリで、今までのさまざまなライブラリの使い勝手が悪く手間暇かかっていたところを改善したものがRecoilです。</p><p>僕自身、「もうRedux-Toolkitをだいたい覚えたし、新しいのはいいかな」という気持ちでいたのですが、ドキュメントを見ると、かなり洗練されたデザインになっており、ドキュメントを読むだけでも「そうか、今まで認識してなかったけど、ここには設計上の見えない制約が課されていたのか」と、目から鱗な体験があるものでした。</p><h1 id="Recoilのドキュメントには癖がある"><a href="#Recoilのドキュメントには癖がある" class="headerlink" title="Recoilのドキュメントには癖がある"></a>Recoilのドキュメントには癖がある</h1><p>だいたいのドキュメントというものは、先頭から読んでいけば理解できるものなのですが、Recoilのドキュメントはちょっと癖があり、まだ学習していないはずの概念がポロポロ出てきます。なんというかWikipediaの沼を彷徨っているような、そんな感じです。</p><p>どの分野もそうですが「一次情報が大事だ、まずはそこに当たれ」ということはよく言われますが、その一次情報がこんな感じで迷子になってしまいがちです。未知の概念を推測しながら読んでいくのは結構大変です。途中で挫折したり、結構重要そうなポイントを読み飛ばしたりしてしまう恐れがあります。</p><p>ということで、Recoilのドキュメントを読むための基礎知識をまとめてみます。本エントリーは「Recoil入門」ではなくて、「Recoilドキュメント入門」としているのはそのためです。</p><h1 id="Recoilで一番大事なものはatom。ついでにselector"><a href="#Recoilで一番大事なものはatom。ついでにselector" class="headerlink" title="Recoilで一番大事なものはatom。ついでにselector"></a>Recoilで一番大事なものはatom。ついでにselector</h1><p>Recoilの構成要素として、<code>atom</code>と<code>selector</code>というのがよく出てきます。<code>atom</code>は値のストレージです。何個も作ることができます。例えば誕生日を保持する、といった感じです。例えば「ユーザー」みたいな単位でオブジェクトを保持させることもできます。</p><p>もう1つが<code>selector</code>です。<code>selector</code>も、利用するコンポーネントからすると<code>atom()</code>と区別はつきませんが、これは「関数的なストレージ」です。他の<code>atom</code>や<code>selector</code>の値を参照し、計算した上でキャッシュします。Vue.jsのcomputedが一番近いと思います。Reactだと<code>useMemo()</code>ですね</p><img src="/images/20230215a/名称未設定ファイル-ページ1.drawio.png" alt="名称未設定ファイル-ページ1.drawio.png" width="411" height="351" loading="lazy"><p>コンポーネントとRecoilのステート（<code>atom</code>&#x2F;<code>selector</code>)との接続はフックを使って行います。Reactの<code>useState()</code>は値と変更関数をセットで取得しますが、それ以外のも含めて、フックがいろいろあります。<code>selector</code>は<code>atom</code>から導出される関数なので値取得はできるが書き込みはできなかったりするので、接続先や用途によってフックを選びます。</p><div class="scroll"><table><thead><tr><th align="center">フック</th><th align="center">値</th><th align="center">書き込み関数</th><th align="center">リセット関数</th></tr></thead><tbody><tr><td align="center"><a href="https://recoiljs.org/docs/api-reference/core/useRecoilState">useRecoilState()</a></td><td align="center">○</td><td align="center">○</td><td align="center"></td></tr><tr><td align="center"><a href="https://recoiljs.org/docs/api-reference/core/useRecoilValue">useRecoilValue()</a></td><td align="center">○</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://recoiljs.org/docs/api-reference/core/useSetRecoilState">useSetRecoilState()</a></td><td align="center"></td><td align="center">○</td><td align="center"></td></tr><tr><td align="center"><a href="https://recoiljs.org/docs/api-reference/core/useResetRecoilState">useResetRecoilState()</a></td><td align="center"></td><td align="center"></td><td align="center">○</td></tr></tbody></table></div><p><code>atom</code>と<code>selector</code>の実装は簡単です。キーというアプリケーション全体でユニークな属性を与えないといけないという制約はありますが、それを除けば<code>selector</code>が依存する状態さえ渡してあげれば、好きな場所で好きなように定義できます。上記の図の誕生日の<code>atom</code>と、それをもとにした年齢の<code>selector</code>は次のようになります。</p><figure class="highlight ts"><figcaption><span>state.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; atom, selector &#125; <span class="keyword">from</span> <span class="string">&quot;recoil&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> birthdayState = <span class="title function_">atom</span>(&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;birthday&quot;</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ageState = <span class="title function_">selector</span>(&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;age&quot;</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="function">(<span class="params">&#123;get&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> bd = <span class="title function_">get</span>(birthdayState)</span><br><span class="line">        <span class="keyword">const</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">        <span class="keyword">const</span> thisYearsBirthday = <span class="keyword">new</span> <span class="title class_">Date</span>(today.<span class="title function_">getFullYear</span>(), bd.<span class="title function_">getMonth</span>(), bd.<span class="title function_">getDay</span>());</span><br><span class="line">        <span class="keyword">if</span> (today &lt; thisYearsBirthday) &#123;</span><br><span class="line">            <span class="keyword">return</span> today.<span class="title function_">getFullYear</span>() - bd.<span class="title function_">getFullYear</span>() - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> today.<span class="title function_">getFullYear</span>() - bd.<span class="title function_">getFullYear</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>利用する側のコードはこんな感じです。初期の誕生日の値はフューチャーの創業日にしてます。33歳ですね。僕まだ30周年ってロゴの入った名刺を使い切ってないのですが。</p><figure class="highlight ts"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCallback, useEffect, <span class="title class_">ChangeEvent</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useRecoilValue, useRecoilState &#125; <span class="keyword">from</span> <span class="string">&quot;recoil&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; birthdayState, ageState &#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [birthday, setBirthday] = <span class="title function_">useRecoilState</span>(birthdayState)</span><br><span class="line">  <span class="keyword">const</span> age = <span class="title function_">useRecoilValue</span>(ageState)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初期化</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setBirthday</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1989</span>, <span class="number">10</span>, <span class="number">28</span>))</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="comment">// テキストボックスが変更されたら呼ばれるコールバック</span></span><br><span class="line">  <span class="keyword">const</span> onChange = <span class="title function_">useCallback</span>(<span class="keyword">function</span> <span class="title function_">changeState</span>(<span class="params">ev: ChangeEvent&lt;HTMLInputElement&gt;</span>) &#123;</span><br><span class="line">    <span class="title function_">setBirthday</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(ev.<span class="property">target</span>.<span class="property">value</span>))</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span>誕生日:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">id</span>=<span class="string">&quot;start&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1989-11-28&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>誕生日 &#123;birthday.toString()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>年齢 &#123;age&#125;歳<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="atomFamily-selectorFamilyとは"><a href="#atomFamily-selectorFamilyとは" class="headerlink" title="atomFamily, selectorFamilyとは"></a>atomFamily, selectorFamilyとは</h1><p><code>atom</code>と<code>selector</code>に似た<code>atomFamily</code>と<code>selectorFamily</code>があります。ドキュメントを読んでいると説明なく出てくるのですが、これは<code>atom</code>と<code>selector</code>のファクトリー関数です。</p><p>例えば、家族全員の情報を入力するパネルを作りたいとします。家族の人数は可変です。徳川11代将軍の徳川家斉の情報を入力するには53人分の子供欄が必要です。そのような時に、<code>atomFamily</code>, <code>selectorFamily</code>を使うと、子どもIDなどをもとにバリエーションを簡単に増やせます。先ほどのモデルに、数値でIDを渡してバリエーションを作るのを図示したのが次の絵です。別のコンポーネントから使う場合も、1つ実装すれば使いまわせます。</p><img src="/images/20230215a/名称未設定ファイル-ページ2.drawio.png" alt="名称未設定ファイル-ページ2.drawio.png" width="681" height="261" loading="lazy"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> birthdayFamilyState = <span class="title function_">atomFamily</span>(&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;birthday&quot;</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ageFamilyState = <span class="title function_">selectorFamily</span>(&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;age&quot;</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="function">(<span class="params">p: <span class="built_in">number</span></span>) =&gt;</span> <span class="function">(<span class="params">&#123;get&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> bd = <span class="title function_">get</span>(<span class="title function_">birthdayFamilyState</span>(p))</span><br><span class="line">        <span class="keyword">const</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> thisYearsBirthday = <span class="keyword">new</span> <span class="title class_">Date</span>(today.<span class="title function_">getFullYear</span>(), bd.<span class="title function_">getMonth</span>(), bd.<span class="title function_">getDay</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (today &lt; thisYearsBirthday) &#123;</span><br><span class="line">            <span class="keyword">return</span> today.<span class="title function_">getFullYear</span>() - bd.<span class="title function_">getFullYear</span>() - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> today.<span class="title function_">getFullYear</span>() - bd.<span class="title function_">getFullYear</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>xxxFamilyにパラメータを渡すと、<code>atom</code>&#x2F;<code>selector</code>が出てきます。利用するコンポーネントでパラメータp(ここでは<code>childId</code>を設定）を入れると、コンポーネントごとにstateが持てます。Reduxでは地味に面倒だったやつ。</p><figure class="highlight ts"><figcaption><span>ShowBirthday.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRecoilValue &#125; <span class="keyword">from</span> <span class="string">&quot;recoil&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; birthdayFamilyState, ageFamilyState &#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123;</span><br><span class="line">  <span class="attr">childId</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ShowBirthday</span>(<span class="params">&#123;childId&#125;: Props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> birthday = <span class="title function_">useRecoilValue</span>(<span class="title function_">birthdayFamilyState</span>(childId))</span><br><span class="line">  <span class="keyword">const</span> age = <span class="title function_">useRecoilValue</span>(<span class="title function_">ageFamilyState</span>(childId))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>誕生日 &#123;birthday.toString()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>年齢 &#123;age&#125;歳<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="スナップショット"><a href="#スナップショット" class="headerlink" title="スナップショット"></a>スナップショット</h1><p>他にドキュメントを読んでいるとこれまた説明なしに出てくるのがスナップショットです。<code>atom</code>や<code>selector</code>は定義側は独立して作れますが、実態としては<code>key</code>をキーにして、まとまった状態として管理されます。その状態をまるごと取り出したり、書き込んだりする機能がスナップショットのようです。テスト目的でまるごと状態を差し替えたり、といった用途に使えるようです。</p><h1 id="おまけ-Redux-Toolkitとの違い"><a href="#おまけ-Redux-Toolkitとの違い" class="headerlink" title="おまけ: Redux-Toolkitとの違い"></a>おまけ: Redux-Toolkitとの違い</h1><p>Reactで関数コンポーネントを使い、Redux-Toolkitとの接点でフックを使う前提で話をします。最初のReduxやHOCの使い方については触れません。</p><p>Redux-Toolkitの場合は、<code>configureStore()</code>を使ってストアという大きな箱を1つ作ります。このストアの中には<code>createSlice()</code>を使って、サブのストアを作ります。Recoilは<code>atom()</code>をどこでも定義できて自由に使えますが、Redux-Toolkitではこのストア<code>&lt;Provider&gt;</code>コンポーネントに渡し、Reactアプリケーションの根っこの部分にリンクさせる必要があります。</p><p>コンポーネントとの接点はフックを使います。<code>useSelector()</code>でストアの中の状態のうち、コンポーネントが必要のある部分だけを選択してコンポーネントから参照できるようにします。また、<code>useDispatch()</code>を使ってストアの更新を行います。この時の呼ぶ処理は「Reducer」と呼ばれます。関数型チックな用語が使われていますが、元々のReduxは</p><p>　古い状態→Reducer→新しい状態</p><p>という感じで状態を変更していました。状態も純粋関数で変更するという形式です。まあさすがに潔癖すぎたのか、Redux-ToolkitのSliceではオブジェクト指向にちょっと回帰した感じのAPIになっています。　</p><img src="/images/20230215a/名称未設定ファイル-ページ3.drawio.png" alt="名称未設定ファイル-ページ3.drawio.png" width="591" height="291" loading="lazy"><p>Redux-ToolkitはRecoilと比べると、<code>selector</code>的なものがありません。おそらく、次のどれかで代替する必要があります。</p><ul><li>ちょっとした計算だったら毎回計算してしまえ</li><li>Reduxの外で<code>useMemo()</code>を使う</li><li>計算結果もストアに入れてしまう</li></ul><p>ストアにはアプリケーション全体の状態が集まってしまい、密結合になってしまいます。Slice単位では再利用はReduxよりかはしやすい感じですが、コンポーネントが特定のパスにマウントされているSliceに依存する感じになりがちで、コンポーネントの再利用製がやや低くなってしまうのだな、とRecoilと比較すると思います。</p><p>ただ、状態一元管理されており、ストアとコンポーネント間の読み書きの流れもフックで隔離されているし、コード解析して状態を知るにはRedux-Toolkitの方が追いかけやすいと思うので、超大人数でアプリ開発するエンプラ開発のノリだとこっちの方が良いのかも？とか思ったりはします。きちんと分析して、アプリの持つ状態の構造とか全体像がきちんと把握できるのであればそこまで悪くはないと思います。うちはVue.jsを使う会社なのでRedux-Toolkitは使いませんが、フューチャーぐらい設計をしっかり固める会社ならこちらの方が向いているかな、と。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Recoilはまだバージョンが1.0になっておらず、リファレンスを見ると<code>UNSTABLE</code>がついた関数もたくさんあります。ですが、今回触れなかった非同期の対応などの柔軟さ、エラー処理、Suspense対応など、Reactとの親和性が高まっており、今まで不便と感じてなかった部分についても「こんな改善がありえたのか」という発見がある、楽しいライブラリになっています。</p><p>ですが、ドキュメントもまだ発展途上なのか、説明が十分にない単語が堂々と出てきたりして、読んでいると不安になるところも少しあります。多くの人がすでにわかっていると思うRedux-Toolkitとの比較していますし、本エントリーで、そういうところの不安の解消ができれば、と思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;RecoilはFacebookのMeta社製のReact用状態管理ライブラリです。この分野はFacebook自体がFluxという概念を発表してから、さまざまなライブラリが開発されてきました。&lt;/p&gt;
&lt;p&gt;特に広く利用されたのがReduxです。Reduxはとても小さなライブ</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
    <category term="Recoil" scheme="https://future-architect.github.io/tags/Recoil/"/>
    
  </entry>
  
  <entry>
    <title>対応ブラウザバージョンを考える</title>
    <link href="https://future-architect.github.io/articles/20230214a/"/>
    <id>https://future-architect.github.io/articles/20230214a/</id>
    <published>2023-02-13T15:00:00.000Z</published>
    <updated>2023-02-14T04:21:46.451Z</updated>
    
    <content type="html"><![CDATA[<p>新しいウェブベースのシステムを開発する場合、あるいは更新する場合に問題になるのがブラウザのバージョンです。アプリケーションを実装する場合、場合によっては最新の機能を利用したいと思うかもしれませんが、場合によってはその機能を実装したブラウザのシェアが高くないかも？ということが考えられます。どの機能が使えるのかを選択するには、まずはブラウザのバージョンを決めなければなりません。</p><h1 id="セキュリティアップデートがされているブラウザのバージョン状況"><a href="#セキュリティアップデートがされているブラウザのバージョン状況" class="headerlink" title="セキュリティアップデートがされているブラウザのバージョン状況"></a>セキュリティアップデートがされているブラウザのバージョン状況</h1><p>基本的にはセキュリティ更新がされているOSとそれがサポートしているブラウザのみを対象にするのが良いでしょう。また、最近はOSのバージョンとブラウザのバージョンは独立していてブラウザは自動更新となっているケースがほとんどです。</p><p>詳細は後で別項目にまとめますが（まとめたら分量が多くなって読みにくくなったので後ろに分割して移動した)、2023年2月現在このセキュリティ更新されているかどうかでフィルタしたサポートすべきバージョンは以下の通りかと思います。</p><ul><li>デスクトップ<ul><li>Chrome(Win&#x2F;Mac&#x2F;Linux): 最新のみ</li><li>Safari(Mac): 最新のみ</li><li>Edge(Win&#x2F;Mac&#x2F;Linux&#x2F;組み込みブラウザ): 最新のみ</li><li>Firefox(Win&#x2F;Mac&#x2F;Linux): 最新 or 延長サポート版(最大1年)</li></ul></li><li>モバイル<ul><li>Android(含む組み込みブラウザ): Chrome最新版のみ</li><li>iOS Safari(含むSFSafariViewController): 12.x, 15.x, 16.x</li><li>iOS WKWebView: iOS 12, 15, 16</li></ul></li></ul><p>Chrome&#x2F;Edge&#x2F;Firefox通常版に関しては最新版のみサポートなので対応ブラウザバージョンも最新で良いと思います。Safariはデスクトップ版に関しては<a href="https://en.wikipedia.org/wiki/Safari_version_history">アクティブなmacOSには最新Safariが提供</a>されているようです。</p><p>iOS版Safariがややこしいのですが、<a href="https://endoflife.date/ios">現在セキュリティ更新がきているOSバージョン</a>が12, 15, 16で、<a href="https://qiita.com/yoshitake_1201/items/05a13fd77c18ff380eb6">iOSのバージョンとSafariのメジャーバージョンは一致</a>しているのでこうなっています。あと、iOSの組み込みブラウザで使われるWKWebViewが、どうもSafariよりも少し古いようで機能が弱そうなので要注意です。なお、iOS 12までしかあげられない端末はiPhone 5S&#x2F;iPhone 6&#x2F;iPhone 6 Plus&#x2F;iPad Air(初代)&#x2F;iPad mini(2, 3)で、どれも9年ぐらい前の端末です。</p><h1 id="業務向け"><a href="#業務向け" class="headerlink" title="業務向け"></a>業務向け</h1><p>基本的にはセキュリティ更新がされているバージョンのみを相手にすれば良いと思います。最新以外を対象にする必要があるのはモバイルのSafariだけですが、業務向けだと、セキュリティパッチはだいたい当てていると思いますし、情シスが決めているサポートポリシーや導入している端末によって、サポート対象が絞れる可能性があります。</p><p>もちろん、社外と繋がっていないイントラネットで、アップデートされていないOSとブラウザを使う、というケースは考えられますが、そういう特殊ケースはここでは考えないこととします。</p><h1 id="コンシューマー向け"><a href="#コンシューマー向け" class="headerlink" title="コンシューマー向け"></a>コンシューマー向け</h1><p>コンシューマー向けだと、ストレージがないとかでバージョンアップをしていないユーザーもいたりします。また、古い端末を使っているユーザーが実は重課金ヘビーユーザーだった、ということでサポートが切るにきれないということは現実問題としてあったりもします。</p><p>銀行サービスとかお金のやり取りがあったりするケースであれば、最新のセキュリティ対応がされているブラウザに対応する条件で良いと思います。それ以外のサービスだと、97%-99%ぐらいのシェアを見て、古い機種やOSでしか動かないブラウザはサポート対象外とする、という運用がされることが多いようです。</p><h1 id="欲しい機能がどのブラウザバージョンで使えるか知る"><a href="#欲しい機能がどのブラウザバージョンで使えるか知る" class="headerlink" title="欲しい機能がどのブラウザバージョンで使えるか知る"></a>欲しい機能がどのブラウザバージョンで使えるか知る</h1><p>ブラウザのバージョンが決まると、どの程度の機能をつかえるのかがわかります。</p><p>これを知るための情報源として有用なのは<a href="https://caniuse.com/">caniuse.com</a>です。ドメインの意味はCan I Use?です。例えば、WebPイメージが使えるかどうかを見るには上の検索パネルに<code>webp</code>と入れれば<a href="https://caniuse.com/webp">表示されます</a>。</p><img src="/images/20230214a/スクリーンショット_2023-02-08_13.18.48.png" alt="スクリーンショット_2023-02-08_13.18.48.png" width="1200" height="606" loading="lazy"><p>caniuse.com はブラウザのシェア情報を集合知でメンテナンスして持っていて、国を日本に設定すれば日本のシェアも取れます。このシェア情報は<a href="https://www.npmjs.com/package/caniuse-lite">caniuse-lite</a>というnpmパッケージにもなっており、JSのバンドルツールが「シェア95%程度のブラウザで動くようにコードを修正する」といったような指定がされたときの情報源としても利用されています。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Windows 8.1のサポートがなくなったことで、正式にInternet Explorerが退任することになりました。一方で、システム開発の要件のブラウザはどうなるのか、というのが気になったので調べてみました。</p><p>今どきはバージョン固定ができないブラウザが増えているので、基本的には要件では「最新ブラウザ」という書き方になりそうです。あとは、Mobile Safariが要注意ですね。</p><p>本エントリーに関しては <a href="https://twitter.com/tkihira">@tkihira</a> さんと、 <a href="https://twitter.com/isoparametric">@isoparametric</a> さんにいくつか助言をもらいました。ありがとうございました。</p><h1 id="おまけ：ブラウザのサポート状況を知る（詳細"><a href="#おまけ：ブラウザのサポート状況を知る（詳細" class="headerlink" title="おまけ：ブラウザのサポート状況を知る（詳細)"></a>おまけ：ブラウザのサポート状況を知る（詳細)</h1><p>参考にしたのは以下のウェブサイトです。まあOSのバージョンはおまけです。</p><ul><li>ソフトウェアのリリース期限調査: <a href="https://endoflife.date/">endoflife.date</a></li><li>ブラウザのバージョンごとのシェア: <a href="https://caniuse.com/usage-table">caniuse.com</a></li><li>OSのバージョンごとのシェア<ul><li><a href="https://moduleapps.com/mobile-marketing/android-ver/">moduleapps.comのAndroidページ(随時更新)</a></li><li><a href="https://moduleapps.com/mobile-marketing/ios-ver/">moduleapps.comのiOSページ(随時更新)</a></li></ul></li></ul><h2 id="デスクトップブラウザ"><a href="#デスクトップブラウザ" class="headerlink" title="デスクトップブラウザ"></a>デスクトップブラウザ</h2><p>基本的にはどれも最新版のみを対象とすれば良さそうです。</p><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><p>4週間ごとのメジャーバージョン更新があります。<a href="https://support.google.com/chrome/a/answer/9027636?hl=en">8週間ごとの更新になるExtended Stable Channel</a>なるものもあるらしい。知らなかった。基本的には過去2バージョンのみがサポート対象と見ておけば良さそうです。</p><h3 id="Edge"><a href="#Edge" class="headerlink" title="Edge"></a>Edge</h3><p><a href="https://learn.microsoft.com/en-us/deployedge/microsoft-edge-support-lifecycle">4週間ごとのリリースで、最新3バージョンをサポート</a>とのことなので、3ヶ月ほどのサポート期間になりますが、ほぼ最新のものだけを見ておけば良さそうです。</p><p>なお、Windowsの組み込みブラウザには通称WebView1とWebView2があります。WebView1はIE7相当のエンジンが積まれており、現在も公式に使える脱法IEと言えます。WebView2はEdgeベースです。WebView2は<a href="https://forest.watch.impress.co.jp/docs/news/1462785.html">OSアップデートと追従するEvergreen版と、アプリ開発者が固定するFix版</a>があるとのことです。</p><h3 id="Safari"><a href="#Safari" class="headerlink" title="Safari"></a>Safari</h3><p>SafariはmacOSのバージョンとセットです。<a href="https://en.wikipedia.org/wiki/Safari_version_history">現在アクティブにサポートされているOSバージョンには最新版がダウンロードされてくる</a>ようです。</p><h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><p>1年間の長期サポートバージョンもありますが、基本的には最新版のみがサポート対象で、4週間ごとに更新されます。</p><h2 id="モバイルブラウザ"><a href="#モバイルブラウザ" class="headerlink" title="モバイルブラウザ"></a>モバイルブラウザ</h2><h3 id="AndroidのChrome"><a href="#AndroidのChrome" class="headerlink" title="AndroidのChrome"></a>AndroidのChrome</h3><p>AndroidのChromeはデスクトップと同じく、最新版のみがサポート対象です。常に更新されているため、最新版だけ見ておけば良いでしょう。</p><p>組み込みブラウザは過去にいろいろ変遷があり、Android 4まではOSバージョンとハードリンクしていましたが、5, 6はAndroid System WebViewというブラウザコンポーネントでストアから更新されるようになりました。Android 7からは<a href="https://developer.android.com/about/versions/nougat/android-7.0?hl=ja#webview">Chromeアプリ</a>がWebViewとしても使われるようになりました。まあ<a href="https://moduleapps.com/mobile-marketing/android-ver/">4以前のAndroidシェアは無視できるレベル</a>ですし、<a href="https://endoflife.date/android">現在サポートされているAndroidバージョンも10以降</a>なので、組み込みブラウザも常に最新とみなして良さそうです。</p><h3 id="iOSのSafari"><a href="#iOSのSafari" class="headerlink" title="iOSのSafari"></a>iOSのSafari</h3><p>アプリ版のSafariは<a href="https://qiita.com/yoshitake_1201/items/05a13fd77c18ff380eb6">iOSのバージョンとSafariのバージョン</a>がリンクしています。つまり、<a href="https://moduleapps.com/mobile-marketing/ios-ver/">iOSのバージョンのシェア</a>も見てあげる必要があります。iOSユーザーはだいたい最新の3バージョンに収まることが知られています。</p><p>組み込みブラウザは現在は主に２つあります。かつてはUIWebViewもありましたが今使われることはないと思います。</p><ul><li>WKWebView: Safariとは別物で、少しバージョンが古く、Safariで使える機能がちょっと使えなかったりするが、実際にどのバージョンなのかの情報は見つからず。組み込み利用時の柔軟性は高い。</li><li>SFSafariViewController: Safariを起動する。Safariとクッキーやセッション情報を共有している。バージョンはアプリ版のSafariと同等。組み込み利用時のカスタマイズ項目が少ない。</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;新しいウェブベースのシステムを開発する場合、あるいは更新する場合に問題になるのがブラウザのバージョンです。アプリケーションを実装する場合、場合によっては最新の機能を利用したいと思うかもしれませんが、場合によってはその機能を実装したブラウザのシェアが高くないかも？ということが</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Web" scheme="https://future-architect.github.io/tags/Web/"/>
    
    <category term="バージョン管理" scheme="https://future-architect.github.io/tags/%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86/"/>
    
    <category term="ブラウザ" scheme="https://future-architect.github.io/tags/%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vertex AI PipelinesのTips</title>
    <link href="https://future-architect.github.io/articles/20230213a/"/>
    <id>https://future-architect.github.io/articles/20230213a/</id>
    <published>2023-02-12T15:00:00.000Z</published>
    <updated>2023-02-13T02:25:27.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、フューチャーでアルバイトをしている平野です。今回は、Vertex AI Pipelinesを利用してみて分かったTipsについて、いくつかピックアップしてまとめました。なお、コードは全てPython・Kubeflowを用いた場合を記載しています。</p><h1 id="前提知識"><a href="#前提知識" class="headerlink" title="前提知識"></a>前提知識</h1><p>Vertex AI Pipelinesとは、GCP上でMLパイプライン機能を提供するサービスです。サーバーレス方式でMLワークフローをオーケストレートします。</p><p>基本的な使い方などについては様々なドキュメントがあるので今回は省略しますが、主には以下の公式ドキュメントを参考にしました。</p><p><a href="https://cloud.google.com/vertex-ai/docs?hl=ja">Vertex AI のドキュメント</a><br>公式のドキュメントです。Vertex AIの概要、チュートリアル、コードサンプルなどがまとめられています。</p><p><a href="https://www.kubeflow.org/docs/">Kubeflowのドキュメント</a><br>Vertex AI Pipelinesを使う際に参照することになる、Kubeflowの公式ドキュメントです。こちらもKubeflowの概要からコンポーネントの作成・パイプラインの実行、サンプルなどがまとめてあります。</p><h2 id="関連用語"><a href="#関連用語" class="headerlink" title="関連用語"></a>関連用語</h2><p><a href="https://recruit.gmo.jp/engineer/jisedai/blog/vertex-ai-pipelines-intro/">MLOps on GCP 入門 〜Vertex AI Pipelines 実践〜</a>で分かりやすく解説されていたため、参考にさせていただきました。</p><ul><li>パイプライン<br>機械学習の一連の処理をカプセル化したものです。Pythonで定義します。前処理やモデル学習、エンドポイントへのデプロイなどの一つ一つの処理（コンポーネント）の実行順序を記述します。パイプラインを定義する関数には<code>@pipeline</code>デコレータを付けます。パイプラインの内部には「精度がある値を超えたらデプロイする」などの条件分岐を含ませることも可能です。</li><li>コンポーネント<br>パイプラインで実行する一つ一つの処理のことを指します。例えば、preprocess -&gt; train -&gt; deployを実行するパイプラインの場合、「preprocess」、「train」、「deploy」がコンポーネントです。コンポーネントを定義する関数には<code>@component</code>デコレータを付けます。コンポーネントの実装には以下の3つが存在します。<br><strong>コンポーネントの実装パターン</strong><ul><li>① GCR に push されている<strong>Docker image</strong>を使う  （詳細は<a href="#%E8%87%AA%E5%89%8D%E3%81%AEdocker-image%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF">自前のDocker imageを使って実装するには？</a>）<br>  GCRにpushされているimageのURIを引数として与えることで処理を行う関数が用意されています。</li><li>② パイプラインのソースコードに<strong>関数ベース</strong>で書く （詳細は<a href="#%E4%BA%8B%E5%89%8D%E3%81%AEdocker-image%E3%81%AE%E6%BA%96%E5%82%99%E3%81%AA%E3%81%97%E3%81%A7python%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AE%E3%81%BF%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%AB%E3%81%AF">事前のDocker imageの準備なしでPythonスクリプトのみで実装には？</a>）<br>  dockerのimageを使わずPythonベースで好きな処理を書くことができるため、簡単な処理を試したい場合などに向いています。</li><li>③ <strong>Google Cloudパイプラインコンポーネント</strong>を使う<br>  よく利用される処理についてはGoogle側がすでに用意してくれているため、事前に関数一発で呼び出して実行してくれるものになっています。</li></ul></li></ul><img src="/images/20230213a/pipeline_example.png" alt="pipeline_example.png" width="960" height="540" loading="lazy"><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://recruit.gmo.jp/engineer/jisedai/blog/vertex-ai-pipelines-intro/">MLOps on GCP 入門 〜Vertex AI Pipelines 実践〜</a></li></ul><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h2 id="【基本】パイプラインを実装するには？"><a href="#【基本】パイプラインを実装するには？" class="headerlink" title="【基本】パイプラインを実装するには？"></a>【基本】パイプラインを実装するには？</h2><p>おさらいとしてパイプラインの実装方法から始めます。ここではコンポーネントを実装する方法の内、以下２つを紹介します。</p><p>① 自前のDocker imageを使って実装<br>② 事前のDocker imageの準備なしでPythonスクリプトのみで実装</p><h3 id="①-自前のDocker-imageを使って実装するには？"><a href="#①-自前のDocker-imageを使って実装するには？" class="headerlink" title="① 自前のDocker imageを使って実装するには？"></a>① 自前のDocker imageを使って実装するには？</h3><h4 id="1-コンポーネントの作成"><a href="#1-コンポーネントの作成" class="headerlink" title="1. コンポーネントの作成"></a>1. コンポーネントの作成</h4><p><strong>コンテナ（Dockerfile+src）とコンポーネント定義yamlを用意する</strong></p><p>こちらの方法では、コンポーネントごとにDocker imageを用意して、そのDocker imageにコンポーネントの処理の内容を記述したPythonスクリプトを含ませることでコンポーネントを作成します。この方法は、利用するDocker imageのDockerfileやコンポーネントの各種設定を記述したyamlファイルを用意する必要がありますが、ローカルで動かしていたPythonスクリプトをそのままコンポーネント化することができます。Docker imageでコンポーネントを作成するために必要なファイルは以下の3つになります。</p><ul><li>Pythonスクリプト：コンポーネントの処理の内容を記述する。</li><li>Dockerfile：Pythonスクリプトの実行に必要なパッケージをインストールする。Pythonスクリプトのコピーも。</li><li>yamlファイル：コンポーネントの入出力、使用するDocker image、Pythonスクリプト実行の際の引数の設定などを記述する。</li></ul><p>それぞれのファイルの記述例を以下に示します。<br>Pythonスクリプトの記述例</p><figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse  <span class="comment"># 必要なパッケージのインポート</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">csv_path: <span class="built_in">str</span>, ...</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># コンポーネントの処理を記述</span></span><br><span class="line">    df = pd.read_csv(csv_path)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">'Print text'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--csv_path'</span>, <span class="built_in">type</span>=<span class="built_in">str</span>)</span><br><span class="line">    ...</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    run(**<span class="built_in">vars</span>(args))</span><br></pre></td></tr></table></figure><p>Dockerfileの記述例</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-slim</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 必要なパッケージのインストール</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install pandas</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># srcファイルのコピー</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">"python"</span>, <span class="string">"main.py"</span>]</span></span><br></pre></td></tr></table></figure><p>yamlファイルの記述例</p><figure class="highlight yaml"><figcaption><span>foo.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">bar</span></span><br><span class="line"></span><br><span class="line"><span class="attr">inputs:</span></span><br><span class="line">  <span class="bullet">-</span> {<span class="attr">name:</span> <span class="string">src_csv</span>, <span class="attr">type:</span> <span class="string">String</span>, <span class="attr">description:</span> <span class="string">'Path to csv file'</span>}</span><br><span class="line">  <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">implementation:</span></span><br><span class="line">  <span class="attr">container:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gcr.io/&lt;GCP_PROJECT_ID&gt;/&lt;IMAGE_NAME&gt;:latest</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">python</span>, <span class="string">main.py</span>]</span><br><span class="line">    <span class="attr">args:</span> [</span><br><span class="line">      <span class="string">--csv_path</span>, {<span class="attr">inputValue:</span> <span class="string">src_csv</span>},</span><br><span class="line">      <span class="string">...</span></span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h4 id="2-パイプラインの作成"><a href="#2-パイプラインの作成" class="headerlink" title="2. パイプラインの作成"></a>2. パイプラインの作成</h4><p><strong>Pythonでパイプラインを定義する（コンポーネントの依存関係定義など）</strong></p><p>コンポーネントの作成が終わったら、続いてそれらのコンポーネントをつなげてパイプラインを作成します。</p><p>パイプラインを定義した関数には<code>@pipeline</code>デコレータを付けます。引数にはパイプラインの名前、説明、<code>pipeline_root</code>を指定できます。<code>pipeline_root</code>にCloud Storageのバケットを指定することで、指定したバケットに各処理で生成されるアーティファクトを保持しておくことができます。</p><p>また、パイプラインをコンパイルするには<code>compiler.Compiler().compile</code>関数を使用します。引数にはコンパイルする関数、コンパイル結果を出力するjsonファイルのパスを渡します。</p><p>パイプラインの定義、コンパイルを行うPythonスクリプトの例は以下の通りです。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> compiler, components, dsl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'vertex-ai-pipelines-sample'</span>,  <span class="comment"># パイプラインを定義する関数には@pipelineデコレータを付ける。</span></span></span></span><br><span class="line"><span class="params"><span class="meta">              description=<span class="string">'Vertex AI Piplines sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              pipeline_root=ROOT_BUCKET</span>)  </span><span class="comment"># pipeline_rootにGCSのバケットを指定すると、指定したバケットに各処理で生成されるアーティファクトを保持できる</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>(<span class="params"><span class="built_in">input</span>: <span class="built_in">str</span>, ...</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    foo_op = components.load_component_from_file(  <span class="comment"># 「Docker imageでコンポーネント作成」で作ったyamlファイルを渡す。</span></span><br><span class="line">        <span class="string">'foo.yaml'</span>)</span><br><span class="line">    foo_task = foo_op(src_csv=<span class="built_in">input</span>, ...)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">compiler.Compiler().<span class="built_in">compile</span>(pipeline_func=pipeline,</span><br><span class="line">                            package_path=<span class="string">'pipeline.json'</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>パイプラインを定義したファイルを実行すると、パイプライン実行時に必要なjsonファイルが<code>compiler.Compiler().compile()</code>の<code>package_path</code>に指定したパス（上記の例では<code>pipeline.json</code>）に生成されます。</p><h3 id="②-事前のDocker-imageの準備なしでPythonスクリプトのみで実装には？"><a href="#②-事前のDocker-imageの準備なしでPythonスクリプトのみで実装には？" class="headerlink" title="② 事前のDocker imageの準備なしでPythonスクリプトのみで実装には？"></a>② 事前のDocker imageの準備なしでPythonスクリプトのみで実装には？</h3><p>Vertex AI Pipelinesでは、コンポーネントの処理内容をPythonの関数として記述することでPythonスクリプトのみでコンポーネントを作成することができます。その一方で関数の定義の仕方には若干の癖があります。コンポーネントの関数はstandaloneである必要があり、以下の要件を満たす必要があります。</p><ul><li>関数の外で定義された関数や変数を含まない</li><li>関数内で必要なパッケージ・モジュールは関数内でimportする</li><li>関数の入出力の型を明記する</li></ul><p>この方法でのコンポーネントの作成例を以下に示します。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">'python:3.8'</span>,  <span class="comment"># 関数を実行するベースイメージを指定</span></span></span></span><br><span class="line"><span class="params"><span class="meta">               packages_to_install=[<span class="string">"numpy"</span>, ...]</span>)  </span><span class="comment"># 必要なパッケージをここで指定、バージョンの指定も可能</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 必要なパッケージ・モジュールは関数内でimportする</span></span><br><span class="line"></span><br><span class="line">    a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">    b = np.array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">    c = a + b</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>コンポーネントを定義する関数には<code>@component</code>デコレータを付け、<code>base_image</code>引数でコンポーネントを実行するコンテナイメージを指定、<code>packages_to_install</code>引数にリストで必要なパッケージを指定します。また、<code>create_component_from_func</code>で関数をラップすることでもコンポーネント化することができます（この場合は<code>@component</code>デコレータは必要ありません）。<code>create_component_from_func</code>の引数にも<code>base_image</code>、<code>packages_to_install</code>があるので、そちらでコンテナイメージ、必要なパッケージを指定できます。</p><p>コンポーネントの作成が終わったら、続いてそれらのコンポーネントをつなげてパイプラインを作成します。</p><p>パイプラインの定義、コンパイルを行うPythonスクリプトの例は以下の通りです。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> compiler, dsl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'vertex-ai-pipelines-sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              description=<span class="string">'Vertex AI Piplines sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              pipeline_root=ROOT_BUCKET</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    foo_task = foo(<span class="built_in">input</span>=...)  <span class="comment"># コンポーネントの関数に@compoentデコレータを付けた場合</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># コンポーネントの関数に@compoentデコレータを付けなかった場合</span></span><br><span class="line">    bar_op = components.create_component_from_func(</span><br><span class="line">        func=bar,</span><br><span class="line">        base_image=<span class="string">"python:3.8"</span>,</span><br><span class="line">        packages_to_install=[<span class="string">"numpy&gt;=1.22.1"</span>, ...]</span><br><span class="line">    )</span><br><span class="line">    bar_task = bar_op(<span class="built_in">input</span>=...)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">compiler.Compiler().<span class="built_in">compile</span>(pipeline_func=pipeline,</span><br><span class="line">                            package_path=<span class="string">'pipeline.json'</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zenn.dev/dhirooka/articles/71a5fc473baefb">Vertex Pipelinesによる機械学習パイプラインの実行</a></li><li><a href="https://www.kubeflow.org/docs/components/pipelines/v1/sdk/python-function-components/">Building Python function-based components</a></li></ul><h2 id="コンポーネントの依存関係を制御するには？"><a href="#コンポーネントの依存関係を制御するには？" class="headerlink" title="コンポーネントの依存関係を制御するには？"></a>コンポーネントの依存関係を制御するには？</h2><p>①パイプラインの実行順序は基本的にはコンポーネントの入出力の関係から自動的に決定されます。</p><p>例えば、以下のようなパイプラインの場合、<code>add_op</code>→<code>mul_op</code>→<code>print_op</code>の順に実行されます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl, compiler</span><br><span class="line"><span class="keyword">import</span> google.cloud.aiplatform <span class="keyword">as</span> aip</span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">"python:3.8"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_op</span>(<span class="params">a:<span class="built_in">int</span>, b:<span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">"python:3.8"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_op</span>(<span class="params">a:<span class="built_in">int</span>, b:<span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">"python:3.8"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_op</span>(<span class="params">a:<span class="built_in">int</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"result = {}"</span>.<span class="built_in">format</span>(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">"dependancy-check"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>(<span class="params">a:<span class="built_in">int</span>, b:<span class="built_in">int</span>, c:<span class="built_in">int</span></span>):</span><br><span class="line">    add_task = add_op(a, b)</span><br><span class="line">    mul_task = mul_op(add_task.output, c) <span class="comment"># mul_opはadd_opの出力が必要</span></span><br><span class="line">    print_op(mul_task.output) <span class="comment"># print_opはmul_opの出力が必要</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    compiler.Compiler().<span class="built_in">compile</span>(pipeline_func=pipeline, package_path=<span class="string">'pipeline.json'</span>)</span><br><span class="line"></span><br><span class="line">    job = aip.PipelineJob(</span><br><span class="line">        display_name=<span class="string">"dependancy-check"</span>,</span><br><span class="line">        template_path=<span class="string">"pipeline.json"</span>,</span><br><span class="line">        location=<span class="string">"asia-northeast1"</span>,</span><br><span class="line">        parameter_values={<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>, <span class="string">"c"</span>: <span class="number">3</span>}</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    job.run()</span><br></pre></td></tr></table></figure><img src="/images/20230213a/dependancy.png" alt="dependancy.png" width="413" height="408" loading="lazy"><p>②パイプラインの実行順序を明示的に制御したい場合には、<code>ContainerOp.after</code>関数を使うことで可能です。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'dependancy-check'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    component1_task = component1()</span><br><span class="line">    component2_task = component2()</span><br><span class="line">    component3_task = component3()</span><br><span class="line"></span><br><span class="line">    component2_task.after(component1_task)</span><br><span class="line">    component3_task.after(component2_task)</span><br></pre></td></tr></table></figure><p>上のようなコードの場合、以下の図のようなパイプラインとなります。<br><img src="/images/20230213a/dependancy1.png" alt="dependancy1.png" width="396" height="376" loading="lazy"></p><p>また、<code>after</code>関数は複数のコンポーネントを受け取ることもできます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'dependancy-check'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    component1_task = component1()</span><br><span class="line">    component2_task = component2()</span><br><span class="line">    component3_task = component3()</span><br><span class="line"></span><br><span class="line">    component3_task.after(component1_task, component2_task)</span><br></pre></td></tr></table></figure><p>この場合、以下のようなパイプラインとなります。</p><img src="/images/20230213a/dependancy2.png" alt="dependancy2.png" width="792" height="246" loading="lazy"><h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.kubeflow.org/docs/components/pipelines/v2/author-a-pipeline/tasks/#explicitly-dependent-tasks">Explicitly dependent tasks</a></li><li><a href="https://qiita.com/f6wbl6/items/ef2603bf47a47ffd63ac#%E3%82%B8%E3%83%A7%E3%83%96%E3%81%AE%E5%AE%9F%E8%A1%8C%E9%A0%86%E5%BA%8F%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B">ジョブの実行順序を指定する</a></li></ul><h2 id="パイプラインを起動するには？"><a href="#パイプラインを起動するには？" class="headerlink" title="パイプラインを起動するには？"></a>パイプラインを起動するには？</h2><p>パイプラインの起動方法としては、GUIから起動する方法とPythonスクリプトやノートブックから起動する方法があります。GUIから起動する方法については以下の参考の<code>コンソール</code>をご確認ください。</p><p>Pythonスクリプトから起動する場合は、以下のようなスクリプトを作成し、実行することでパイプラインを起動できます。ノートブック（Vertex AI Workbenchなど）の場合は、以下のコードを最後のセルで実行することで起動できます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> google.cloud.aiplatform <span class="keyword">as</span> aip</span><br><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> compiler, components, dsl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'vertex-ai-pipelines-sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              description=<span class="string">'Vertex AI Piplines sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              pipeline_root=ROOT_BUCKET</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># パイプラインを定義</span></span><br><span class="line">    foo_task = foo(<span class="built_in">input</span>=...)</span><br><span class="line">    bar_task = bar_op(<span class="built_in">input</span>=...)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># パイプラインをコンパイル</span></span><br><span class="line">compiler.Compiler().<span class="built_in">compile</span>(pipeline_func=pipeline,</span><br><span class="line">                            package_path=<span class="string">'pipeline.json'</span>)</span><br><span class="line"></span><br><span class="line">job = aip.PipelineJob(</span><br><span class="line">    display_name=<span class="string">"vertex-ai-pipelines-sample"</span>,</span><br><span class="line">    template_path=<span class="string">"pipeline.json"</span>,  <span class="comment"># パイプラインをコンパイルした際のpackage_pathを渡す</span></span><br><span class="line">    location=<span class="string">"asia-northeast1"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">job.submit()</span><br></pre></td></tr></table></figure><p><code>job.submit()</code>のほかに<code>job.run()</code>も利用することができ、両者の違いは、<code>submit()</code>はジョブを投げ終わると終了、<code>run()</code>はジョブを投げた後、パイプラインの状態を定期的に表示してくれます。</p><h3 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://cloud.google.com/vertex-ai/docs/pipelines/run-pipeline?hl=ja#console">パイプラインを実行する</a></li></ul><h2 id="各コンポーネントに指定したスペックを割り当てるには？"><a href="#各コンポーネントに指定したスペックを割り当てるには？" class="headerlink" title="各コンポーネントに指定したスペックを割り当てるには？"></a>各コンポーネントに指定したスペックを割り当てるには？</h2><p>マシンタイプを指定しない場合にはデフォルトで<code>e2-standard-4</code>（4コアのCPUと16GBのメモリ）が利用されます。コンポーネントのマシンタイプを指定するには、<code>set_cpu_limit</code>、<code>set_memory_limit</code>、<code>add_node_selector_constraint</code>、<code>set_gpu_limit</code>を利用します。マシンタイプを指定するとVertex AI Pipelines側が指定されたスペックに最も近いマシンを自動で割り当てます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl</span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'custom-container-pipeline'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>():</span><br><span class="line">    preprocess_task = preprocess_op().set_cpu_limit(<span class="string">"16"</span>).set_memory_limit(<span class="string">"20"</span>)</span><br><span class="line">    train_task = train_op(preprocess_task.output).add_node_selector_constraint(<span class="string">"cloud.google.com/gke-accelerator"</span>, <span class="string">"NVIDIA_TESLA_A100"</span>).set_gpu_limit(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>また、<code>CustomJob.jobSpec.workerPoolSpecs</code>から指定することもできます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> compiler, components, dsl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'vertex-pipelines-sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              description=<span class="string">'Vertex Piplines sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              pipeline_root=ROOT_BUCKET</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>(<span class="params">learning_rate: <span class="built_in">float</span> = <span class="number">0.1</span>, max_depth: <span class="built_in">int</span> = <span class="number">10</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    foo_op = components.load_component_from_file(<span class="string">'path/to/component.yaml'</span>)</span><br><span class="line">    foo_task = foo_op(<span class="built_in">input</span>=...)</span><br><span class="line">    foo_task.custom_job_spec = {  <span class="comment"># custom_job_specでジョブ実行の詳細を設定できる</span></span><br><span class="line">        <span class="string">"display_name"</span>: display_name,</span><br><span class="line">        <span class="string">"job_spec"</span>: {</span><br><span class="line">            <span class="string">"worker_pool_specs"</span>: [</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"machine_spec"</span>: {</span><br><span class="line">                        <span class="string">"machine_type"</span>: <span class="string">"n1-standard-4"</span>,</span><br><span class="line">                        <span class="string">"accelerator_type"</span>: aiplatform.gapic.AcceleratorType.NVIDIA_TESLA_K80,</span><br><span class="line">                        <span class="string">"accelerator_count"</span>: <span class="number">1</span>,</span><br><span class="line">                    },</span><br><span class="line">                    <span class="string">"replica_count"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">"container_spec"</span>: {</span><br><span class="line">                        <span class="string">"image_uri"</span>: container_image_uri,</span><br><span class="line">                        <span class="string">"command"</span>: [],</span><br><span class="line">                        <span class="string">"args"</span>: [],</span><br><span class="line">                    },</span><br><span class="line">                }</span><br><span class="line">            ]</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></table></figure><h3 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://cloud.google.com/vertex-ai/docs/pipelines/machine-types?hl=ja">パイプライン ステップのマシンタイプを指定する</a></li><li><a href="https://cloud.google.com/vertex-ai/docs/training/configure-compute?hl=ja#create_custom_job_machine_types-python">カスタム トレーニング用のコンピューティング リソースを構成する</a></li></ul><h2 id="実行結果のキャッシュを利用するには？"><a href="#実行結果のキャッシュを利用するには？" class="headerlink" title="実行結果のキャッシュを利用するには？"></a>実行結果のキャッシュを利用するには？</h2><p>Vertex AI Pipelinesでは、パイプライン全体、タスク単位でキャッシュを利用するかどうかを選択できます。パイプライン全体でキャッシュを利用する場合には、コンパイルしたパイプラインを実行する際に<code>enable_caching</code>を<code>True</code>にすることでキャッシュを利用できます。なお、<code>enable_caching</code>はデフォルトで<code>True</code>となっているのでむしろキャッシュを利用したくない場合に<code>False</code>にすることになると思います。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pl = PipelineJob(</span><br><span class="line">    display_name=<span class="string">"My first pipeline"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Whether or not to enable caching</span></span><br><span class="line">    <span class="comment"># True = enable the current run to use caching results from previous runs</span></span><br><span class="line">    <span class="comment"># False = disable the current run's use of caching results from previous runs</span></span><br><span class="line">    <span class="comment"># None = defer to cache option for each pipeline component in the pipeline definition</span></span><br><span class="line">    enable_caching=<span class="literal">False</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Local or Cloud Storage path to a compiled pipeline definition</span></span><br><span class="line">    template_path=<span class="string">"pipeline.json"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Cloud Storage path to act as the pipeline root</span></span><br><span class="line">    pipeline_root=pipeline_root,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>タスク単位でキャッシュを利用する場合は、<code>&lt;task_name&gt;.set_caching_options(True)</code>で利用することができます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dsl.pipeline(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">    name=<span class="string">'vertex-ai-pipelines-sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">    description=<span class="string">'Vertex AI Piplines sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">    pipeline_root=ROOT_BUCKET</span></span></span><br><span class="line"><span class="params"><span class="meta"></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    foo_op = components.load_component_from_file(<span class="string">'path/to/component.yaml'</span>)</span><br><span class="line">    foo_task = foo_op(<span class="built_in">input</span>=...)</span><br><span class="line">    foo_task.set_caching_options(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>キャッシュが利用されたかどうかは、パイプラインのGUIから確認することができます。キャッシュが利用されている場合にはコンポーネントの右に以下のような矢印マークが付きます。また、ノード情報からもキャッシュ済みかを確認できます。</p><img src="/images/20230213a/cached.png" alt="cached.png" width="380" height="127" loading="lazy"><img src="/images/20230213a/component_detail_cached.png" alt="component_detail_cached.png" width="641" height="317" loading="lazy"><h3 id="参考-5"><a href="#参考-5" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://cloud.google.com/vertex-ai/docs/pipelines/configure-caching?hl=ja">実行キャッシュの構成</a></li></ul><h2 id="パイプラインを定期実行するには？"><a href="#パイプラインを定期実行するには？" class="headerlink" title="パイプラインを定期実行するには？"></a>パイプラインを定期実行するには？</h2><p>パイプラインの定期実行はCloud Schedulerを利用することで可能です。</p><p>パイプラインの定期実行までの流れは以下のようになります。</p><ol><li>コンパイルしたパイプラインjsonファイルをGoogle Cloud Storageにアップロード<br>以下のコマンドでローカルのファイルをバケットにアップロードします。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsutil <span class="built_in">cp</span> &lt;ローカルファイルまでのパス&gt; gs://&lt;BUCKET_NAME&gt;/&lt;ファイル名&gt;</span><br></pre></td></tr></table></figure></li><li>HTTPリクエストに応じてパイプラインを実行するPythonスクリプトの作成<br>Cloud FunctionsでHTTPリクエストが送信された場合にパイプラインを実行するコードを作成します。<br>以下がPythonスクリプトの例です。HTTPリクエストのbodyに、実行するパイプラインのjsonファイルまでのパス、パイプラインに渡すパラメータが含まれているという想定です。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> aiplatform</span><br><span class="line"></span><br><span class="line">PROJECT_ID = <span class="string">'your-project-id'</span>         <span class="comment"># &lt;---CHANGE THIS</span></span><br><span class="line">REGION = <span class="string">'your-region'</span>                 <span class="comment"># &lt;---CHANGE THIS</span></span><br><span class="line">PIPELINE_ROOT = <span class="string">'your-cloud-storage-pipeline-root'</span>   <span class="comment"># &lt;---CHANGE THIS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">request</span>):</span><br><span class="line">   <span class="string">"""Processes the incoming HTTP request.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Args:</span></span><br><span class="line"><span class="string">     request (flask.Request): HTTP request object.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Returns:</span></span><br><span class="line"><span class="string">     The response text or any set of values that can be turned into a Response</span></span><br><span class="line"><span class="string">     object using `make_response</span></span><br><span class="line"><span class="string">     &lt;http://flask.pocoo.org/docs/1.0/api/#flask.Flask.make_response&gt;`.</span></span><br><span class="line"><span class="string">   """</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># decode http request payload and translate into JSON object</span></span><br><span class="line">   request_str = request.data.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">   request_json = json.loads(request_str)</span><br><span class="line"></span><br><span class="line">   pipeline_spec_uri = request_json[<span class="string">'pipeline_spec_uri'</span>]</span><br><span class="line">   parameter_values = request_json[<span class="string">'parameter_values'</span>]</span><br><span class="line"></span><br><span class="line">   aiplatform.init(</span><br><span class="line">       project=PROJECT_ID,</span><br><span class="line">       location=REGION,</span><br><span class="line">   )</span><br><span class="line"></span><br><span class="line">   job = aiplatform.PipelineJob(</span><br><span class="line">       display_name=<span class="string">f'hello-world-cloud-function-pipeline'</span>,</span><br><span class="line">       template_path=pipeline_spec_uri,</span><br><span class="line">       pipeline_root=PIPELINE_ROOT,</span><br><span class="line">       enable_caching=<span class="literal">False</span>,</span><br><span class="line">       parameter_values=parameter_values</span><br><span class="line">   )</span><br><span class="line"></span><br><span class="line">   job.submit()</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"Job submitted"</span></span><br></pre></td></tr></table></figure>以下はHTTPリクエストのbodyの内容です。Cloud Schedulerジョブを作成する際に以下の内容を含むjsonファイルを使用します。<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"pipeline_spec_uri"</span><span class="punctuation">:</span> <span class="string">"&lt;path-to-your-compiled-pipeline&gt;"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"parameter_values"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"greet_name"</span><span class="punctuation">:</span> <span class="string">"&lt;any-greet-string&gt;"</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></table></figure></li><li>Cloud Functionsの関数をデプロイ<br>続いて、HTTPトリガーを使用して関数をデプロイします。<br>上で作成したPythonスクリプトを含むディレクトリで以下のコマンドを実行します。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gcloud <span class="built_in">functions</span> deploy python-http-function \</span><br><span class="line">    --gen2 \</span><br><span class="line">    --runtime=python37 \</span><br><span class="line">    --region=asia-northeast1 \</span><br><span class="line">    --<span class="built_in">source</span>=. \</span><br><span class="line">    --entry-point=process_request \</span><br><span class="line">    --trigger-http</span><br></pre></td></tr></table></figure></li><li>Cloud Schedulerジョブを作成<br>最後に以下のコマンドでCloud Schedulerジョブを作成します。以下の例では毎日の朝9時にパイプラインが実行されます。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gcloud scheduler <span class="built_in">jobs</span> create http run-pipeline \</span><br><span class="line">    --schedule=<span class="string">"0 9 * * *"</span></span><br><span class="line">    --uri=&lt;PATH_TO_PIPELINE_JSON&gt; \</span><br><span class="line">    --http-method=post \</span><br><span class="line">    --message-body-from-file=&lt;PATH_TO_HTTP_REQUEST_JSON&gt; \</span><br><span class="line">    --time-zone=Asia/Tokyo</span><br></pre></td></tr></table></figure></li></ol><h3 id="参考-6"><a href="#参考-6" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://cloud.google.com/vertex-ai/docs/pipelines/schedule-cloud-scheduler?hl=ja">Cloud Scheduler でパイプライン実行をスケジュールする</a></li><li><a href="https://cloud.google.com/functions/docs/create-deploy-gcloud?hl=ja#functions-prepare-environment-python">Google Cloud CLI を使用して Cloud Functions（第 2 世代）の関数を作成してデプロイする</a></li><li><a href="https://cloud.google.com/scheduler/docs/creating?hl=ja#gcloud_2">cron ジョブを作成して構成する</a></li><li><a href="https://cloud.google.com/sdk/gcloud/reference/scheduler/jobs/update/http?hl=ja">gcloud コマンドライン リファレンス</a></li></ul><h2 id="引数を渡すには？"><a href="#引数を渡すには？" class="headerlink" title="引数を渡すには？"></a>引数を渡すには？</h2><p>ユーザ→パイプライン、コンポーネント→コンポーネント</p><p>パイプライン実行時に引数を渡すには、<code>aiplatform.PipelineJob</code>の<code>parameter_values</code>を指定することで可能です。辞書型で変数名と値のペアで渡すことができます。あとは<code>argparse</code>などを利用すれば、コマンドライン引数からパイプラインのパラメータを入力できます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl, compiler</span><br><span class="line"><span class="keyword">import</span> google.cloud.aiplatform <span class="keyword">as</span> aip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">"-a"</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-b"</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-c"</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">"python:3.8"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_op</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">"python:3.8"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_op</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">"python:3.8"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_op</span>(<span class="params">a: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"result = {}"</span>.<span class="built_in">format</span>(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">"pipeline-arg-sample"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span>, c: <span class="built_in">int</span></span>):</span><br><span class="line">    add_task = add_op(a, b)</span><br><span class="line">    mul_task = mul_op(add_task.output, c)</span><br><span class="line">    print_op(mul_task.output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    compiler.Compiler().<span class="built_in">compile</span>(pipeline_func=pipeline, package_path=<span class="string">'pipeline.json'</span>)</span><br><span class="line"></span><br><span class="line">    job = aip.PipelineJob(</span><br><span class="line">        display_name=<span class="string">"pipeline-arg-sample"</span>,</span><br><span class="line">        template_path=<span class="string">"pipeline.json"</span>,</span><br><span class="line">        location=<span class="string">"asia-northeast1"</span>,</span><br><span class="line">        parameter_values={<span class="string">"a"</span>: args.a, <span class="string">"b"</span>: args.b, <span class="string">"c"</span>: args.c},</span><br><span class="line">        enable_caching=<span class="literal">False</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    job.run()</span><br></pre></td></tr></table></figure><p>コンポーネント間でのデータの受け渡しは、渡すデータが単一データか複数データかで異なります。<br>単一データの受け渡しの場合、以下のようになります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">'python:3.8'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">'python:3.8'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_result</span>(<span class="params">a: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'vertex-pipelines-sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              description=<span class="string">'Vertex Piplines sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              pipeline_root=ROOT_BUCKET</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>(<span class="params">a: <span class="built_in">int</span> = <span class="number">1</span>, b: <span class="built_in">int</span> = <span class="number">2</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    add_task = add(a, b)</span><br><span class="line">    print_task = print_result(add_task.output)</span><br></pre></td></tr></table></figure><p>単一データの場合、関数の出力は<code>&lt;task_name&gt;.output</code>で渡すことができます。</p><p>一方、複数データの受け渡しの場合は、以下のようになります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> NamedTuple</span><br><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">'python:3.8'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max_min</span>(<span class="params">a: <span class="built_in">list</span></span>) -&gt; NamedTuple(<span class="string">'Outputs'</span>, [(<span class="string">'max'</span>, <span class="built_in">int</span>), (<span class="string">'min'</span>, <span class="built_in">int</span>)]):</span><br><span class="line">    <span class="built_in">max</span> = <span class="built_in">max</span>(a)</span><br><span class="line">    <span class="built_in">min</span> = <span class="built_in">min</span>(a)</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">max</span>, <span class="built_in">min</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">'python:3.8'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_result</span>(<span class="params"><span class="built_in">max</span>: <span class="built_in">int</span>, <span class="built_in">min</span>: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"max: {}, min: {}"</span>.<span class="built_in">format</span>(<span class="built_in">max</span>, <span class="built_in">min</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'vertex-pipelines-sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              description=<span class="string">'Vertex Piplines sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              pipeline_root=ROOT_BUCKET</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>(<span class="params">a: <span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    max_min_task = max_min(a)</span><br><span class="line">    print_task = print_result(max_min_task.outputs[<span class="string">'max'</span>], max_min_task.outputs[<span class="string">'min'</span>])</span><br></pre></td></tr></table></figure><p>複数データを出力する場合は、<code>NamedTuple</code>を用いて属性名を指定して出力し、それらを受け取る際には<code>&lt;task_name&gt;.outputs['&lt;key&gt;']</code>で各データを指定します。</p><h3 id="参考-7"><a href="#参考-7" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.kubeflow.org/docs/components/pipelines/v1/sdk/python-function-components/#understanding-how-data-is-passed-between-components">Understanding how data is passed between components</a></li><li><a href="https://qiita.com/f6wbl6/items/f668368222983f7f8f46">Kubeflow Pipelinesにおけるコンポーネント間のデータ受け取り方・渡し方まとめ - その1</a></li><li><a href="https://qiita.com/f6wbl6/items/9080670c21bb35c37c0c">Kubeflow Pipelinesにおけるコンポーネント間のデータ受け取り方・渡し方まとめ - その2</a></li></ul><h2 id="パラメータ・中間データ・モデルを管理するには？"><a href="#パラメータ・中間データ・モデルを管理するには？" class="headerlink" title="パラメータ・中間データ・モデルを管理するには？"></a>パラメータ・中間データ・モデルを管理するには？</h2><h3 id="入力パラメータの保存"><a href="#入力パラメータの保存" class="headerlink" title="入力パラメータの保存"></a>入力パラメータの保存</h3><p>パイプラインを定義した関数の入力が自動で保存されます。例えばパイプラインを以下のような関数とした場合、<code>learning_rate</code>と<code>max_depth</code>が「パイプライン実行分析」の「実行パラメータ」や、パイプライン比較の「パラメータ」として表示されます。</p><p>また、これらのパラメータはパイプラインのリランの際に、別の値を入力してパイプラインを実行することができます。<strong>リランの際にはこれらのパラメータしか変更できないため、変更の可能性があるパラメータはすべてパイプラインの関数の引数としておくことをおすすめします。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'train LightGBM'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>(<span class="params">learning_rate: <span class="built_in">float</span> = <span class="number">0.1</span>, max_depth: <span class="built_in">int</span> = <span class="number">10</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><img src="/images/20230213a/param.png" alt="param.png" width="647" height="220" loading="lazy"><h3 id="データセット、モデル、指標の保存"><a href="#データセット、モデル、指標の保存" class="headerlink" title="データセット、モデル、指標の保存"></a>データセット、モデル、指標の保存</h3><p>データを保存するには、コンポーネントの関数の引数に<code>Output[&lt;type&gt;]</code>もしくは<code>OutputPath("&lt;type&gt;")</code>型の引数を作ることで可能です。<code>&lt;type&gt;</code>には<code>Dataset</code>、<code>Model</code>、<code>Metrics</code>、<code>Execution</code>が指定できます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl</span><br><span class="line"><span class="keyword">from</span> kfp.v2.dsl <span class="keyword">import</span> OutputPath</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">'python:3.8'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">..., model: Output[Model], ...</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ...</span><br><span class="line">    model_dir = Path(artifact.path)</span><br><span class="line">    model_dir.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    joblib.dump(model, model_dir / <span class="string">'model.joblib'</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>また、Dockerベースの場合には、コンポーネントの仕様を定義したyamlファイルの<code>outputs</code>に記述することでできます。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">train</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">outputs:</span></span><br><span class="line">  <span class="bullet">-</span> {<span class="attr">name:</span> <span class="string">model</span>, <span class="attr">type:</span> <span class="string">Model</span>, <span class="attr">description:</span> <span class="string">'trained model'</span>}</span><br></pre></td></tr></table></figure><p>指標については、以下のように<code>log_metric(&lt;name&gt;, &lt;value&gt;)</code>を使うことで、のちの比較において「指標」として見ることができます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl</span><br><span class="line"><span class="keyword">from</span> kfp.v2.dsl <span class="keyword">import</span> Input, Dataset, Model, Output, Metrics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">    base_image=<span class="string">"python:3.8"</span>, packages_to_install=[...]</span></span></span><br><span class="line"><span class="params"><span class="meta"></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">dataset: Input[Dataset], model: Input[Model], metrics: Output[Metrics]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ...</span><br><span class="line">    metrics.log_metric(<span class="string">"accuracy"</span>, (acc * <span class="number">100.0</span>))</span><br><span class="line">    metrics.log_metric(<span class="string">"framework"</span>, <span class="string">"Scikit Learn"</span>)</span><br></pre></td></tr></table></figure><img src="/images/20230213a/metrics.png" alt="metrics.png" width="612" height="156" loading="lazy">→各データについて、後から確認したくなった場合、Vertex AI Pipelinesでは、どのようなパイプラインの中で生成されたのかをGUIで見ることができます。<img src="/images/20230213a/data_lineage_modified.png" alt="data_lineage_modified.png" width="1200" height="382" loading="lazy"><h2 id="ログを確認するには？"><a href="#ログを確認するには？" class="headerlink" title="ログを確認するには？"></a>ログを確認するには？</h2><p>ログはパイプラインのコンポーネントごとに見ることができます。</p><p>Vertex AI Pipelinesのコンソールからログを見たいパイプラインを選択し、表示されるパイプラインのグラフからコンポーネントを選択することで、画面下部にコンポーネントのログが表示されます。</p><p>ログは標準出力、標準エラー出力に出力されたものがログに表示されます。</p><h2 id="処理時間・起動時間（Pythonスクリプト・Docker-image）を確認するには？"><a href="#処理時間・起動時間（Pythonスクリプト・Docker-image）を確認するには？" class="headerlink" title="処理時間・起動時間（Pythonスクリプト・Docker image）を確認するには？"></a>処理時間・起動時間（Pythonスクリプト・Docker image）を確認するには？</h2><p>パイプラインの処理時間や開始時刻、終了時刻はパイプライン一覧のページから確認できます。<br><img src="/images/20230213a/time.png" alt="time.png" width="1200" height="306" loading="lazy"><br>また、パイプラインの詳細のページからは各コンポーネントの処理時間、開始時刻、終了時刻を確認できます。<br><img src="/images/20230213a/time_component.png" alt="time_component.png" width="515" height="468" loading="lazy"></p><h2 id="パイプラインのグループ分け・実行結果を比較するには？"><a href="#パイプラインのグループ分け・実行結果を比較するには？" class="headerlink" title="パイプラインのグループ分け・実行結果を比較するには？"></a>パイプラインのグループ分け・実行結果を比較するには？</h2><p>Vertex AI Pipelinesでは、パイプライン実行で生じる様々なデータ（入力パラメータ、データセット、モデル、指標、etc）を保存することができ、後でそれらを確認したり、複数のパイプラインを比較したりすることができます。データの保存については<a href="#%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E4%B8%AD%E9%96%93%E3%83%87%E3%83%BC%E3%82%BF%E3%83%A2%E3%83%87%E3%83%AB%E3%82%92%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF">パラメータ・中間データ・モデルを管理するには？</a>をご覧ください。</p><h3 id="パイプラインのグルーピング"><a href="#パイプラインのグルーピング" class="headerlink" title="パイプラインのグルーピング"></a>パイプラインのグルーピング</h3><p>パイプラインをのちの比較のためにグルーピングしておきたい場合には、Vertex AI Experimentsが便利です。Vertex AI Experimentsではexperimentを作成してそこにパイプラインを登録することができます。experimentの作成は以下のようにしてできます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> google.cloud.aiplatform <span class="keyword">as</span> aip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    aip.init(</span><br><span class="line">        experiment=<span class="string">"&lt;experiment_name&gt;"</span>,</span><br><span class="line">        experiment_description=<span class="string">"&lt;experiment_description&gt;"</span>,</span><br><span class="line">        project=<span class="string">"&lt;project_id&gt;"</span>,</span><br><span class="line">        location=<span class="string">"&lt;region&gt;"</span>,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>パイプライン実行時に以下のように作成したexperimentを指定することでパイプラインをexperimentに登録することができます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> google.cloud.aiplatform <span class="keyword">as</span> aip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    job = aip.PipelineJob(</span><br><span class="line">        display_name=<span class="string">"&lt;display_name&gt;"</span>,</span><br><span class="line">        template_path=<span class="string">"path/to/pipeline.json"</span>,</span><br><span class="line">        location=<span class="string">"&lt;region&gt;"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    job.submit(experiment=<span class="string">"&lt;experiment_name&gt;"</span>)</span><br></pre></td></tr></table></figure><p>experimentはサイドバーの「テスト」から見ることができます。</p><img src="/images/20230213a/experiment.png" alt="experiment.png" width="752" height="318" loading="lazy"><h3 id="パイプラインの比較"><a href="#パイプラインの比較" class="headerlink" title="パイプラインの比較"></a>パイプラインの比較</h3><p>パイプラインを比較する方法はVertex AI PipelinesのGUIから行う方法と、Vertex AI Experimentsから行う方法の2種類あります。</p><p>Vertex AI PipelinesのGUIから行う場合は、パイプライン一覧のページから比較したいパイプラインを選択後、比較を押すことで以下の図のような比較が可能です。<br><img src="/images/20230213a/compare_pipelines_modified.png" alt="compare_pipelines_modified.png" width="1200" height="408" loading="lazy"><br>Vertex AI Experimentsから行う場合は、サイドバーの「テスト」から見たいexperimentを選ぶと、以下のように比較ができます。<br><img src="/images/20230213a/experiment_2.png" alt="experiment.png" width="752" height="318" loading="lazy"><br><img src="/images/20230213a/compare_pipelines_in_vertex_ai_experiments.png" alt="compare_pipelines_in_vertex_ai_experiments.png" width="1200" height="258" loading="lazy"><br>また、Pythonスクリプトでターミナル上から比較することも可能です。以下のスクリプトを実行することで対象のexperiment内のパイプラインを比較できます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> google.cloud.aiplatform <span class="keyword">as</span> aip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_experiments_data_frame_sample</span>(<span class="params"></span></span><br><span class="line"><span class="params">    experiment: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">    project: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">    location: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    aip.init(experiment=experiment, project=project, location=location)</span><br><span class="line"></span><br><span class="line">    experiments_df = aip.get_experiment_df()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> experiments_df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    df = get_experiments_data_frame_sample(</span><br><span class="line">        experiment=<span class="string">"&lt;experiment_name&gt;"</span>,</span><br><span class="line">        project=<span class="string">"&lt;project_id&gt;"</span>,</span><br><span class="line">        location=<span class="string">"&lt;region&gt;"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p>以下が実行結果です。<br><img src="/images/20230213a/compare_pipelines_in_terminal.png" alt="compare_pipelines_in_terminal.png" width="1200" height="49" loading="lazy"></p><h2 id="Vertex-AI-Pipelinesを利用するコストは？"><a href="#Vertex-AI-Pipelinesを利用するコストは？" class="headerlink" title="Vertex AI Pipelinesを利用するコストは？"></a>Vertex AI Pipelinesを利用するコストは？</h2><p>Vertex AI Pipelinesでは、パイプライン実行ごとに0.03ドルかかります。（執筆時点）</p><p>加えて、コンポーネントによって使用されるCompute Engineリソースやデータの保存に使用されるGoogle Cloudリソースに対しても課金されます。</p><p>例として、リージョンに<code>asia-northeast1</code>、コンポーネントのマシンタイプに<code>n1-standard-4</code>を指定してパイプラインを1時間実行した場合は</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="101.241ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 44748.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">パ</text></g><g data-mml-node="mi" transform="translate(1389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">イ</text></g><g data-mml-node="mi" transform="translate(2389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">プ</text></g><g data-mml-node="mi" transform="translate(3389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">ラ</text></g><g data-mml-node="mi" transform="translate(4389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">イ</text></g><g data-mml-node="mi" transform="translate(5389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">ン</text></g><g data-mml-node="mi" transform="translate(6389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">実</text></g><g data-mml-node="mi" transform="translate(7389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(8389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">料</text></g><g data-mml-node="mi" transform="translate(9389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">金</text></g><g data-mml-node="mo" transform="translate(10389,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11000.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(12000.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(12389.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(12989.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(13711.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(14711.9,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(15180.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(15541.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(16070.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(16670.9,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(17190.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(17719.9,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(18170.9,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(18913.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(19913.3,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mi" transform="translate(20413.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">の</text></g><g data-mml-node="mn" transform="translate(21413.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(21913.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">時</text></g><g data-mml-node="mi" transform="translate(22913.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">間</text></g><g data-mml-node="mi" transform="translate(23913.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">当</text></g><g data-mml-node="mi" transform="translate(24913.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">た</text></g><g data-mml-node="mi" transform="translate(25913.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">り</text></g><g data-mml-node="mi" transform="translate(26913.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">の</text></g><g data-mml-node="mi" transform="translate(27913.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">料</text></g><g data-mml-node="mi" transform="translate(28913.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">金</text></g><g data-mml-node="mo" transform="translate(29913.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(30524.6,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(31524.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(32302.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(33358.3,0)"><g data-mml-node="mo"><path data-c="24" d="M162 187Q162 164 146 149T109 133H103V130Q108 115 115 105Q122 92 131 82T150 64T170 52T190 44T206 40T220 37L227 36V313Q190 320 162 335Q116 358 86 404T55 508Q55 567 85 614T165 685Q186 696 225 704H227V750H273V704L286 703Q369 690 413 631Q441 588 444 531Q444 514 443 509Q439 490 425 479T391 468Q368 468 353 483T337 522Q337 546 353 560T390 575L394 576V578Q386 599 372 614T342 637T314 649T288 656L273 658V408L288 405Q329 394 355 376Q396 348 420 300T444 199Q444 130 408 76T313 1Q286 -9 276 -9H273V-56H227V-10H221Q202 -6 193 -4T155 11T108 41T74 94T55 176V182Q55 227 95 238Q103 240 108 240Q129 240 145 226T162 187ZM225 657Q219 657 204 651T169 632T135 594T121 538Q121 512 131 491T156 457T187 435T213 423T227 420V539Q227 657 225 657ZM378 169Q378 230 339 265T274 301Q273 301 273 169V37Q324 50 351 87T378 169Z"></path></g></g><g data-mml-node="mn" transform="translate(33858.3,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(35858.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(36858.8,0)"><g data-mml-node="mo"><path data-c="24" d="M162 187Q162 164 146 149T109 133H103V130Q108 115 115 105Q122 92 131 82T150 64T170 52T190 44T206 40T220 37L227 36V313Q190 320 162 335Q116 358 86 404T55 508Q55 567 85 614T165 685Q186 696 225 704H227V750H273V704L286 703Q369 690 413 631Q441 588 444 531Q444 514 443 509Q439 490 425 479T391 468Q368 468 353 483T337 522Q337 546 353 560T390 575L394 576V578Q386 599 372 614T342 637T314 649T288 656L273 658V408L288 405Q329 394 355 376Q396 348 420 300T444 199Q444 130 408 76T313 1Q286 -9 276 -9H273V-56H227V-10H221Q202 -6 193 -4T155 11T108 41T74 94T55 176V182Q55 227 95 238Q103 240 108 240Q129 240 145 226T162 187ZM225 657Q219 657 204 651T169 632T135 594T121 538Q121 512 131 491T156 457T187 435T213 423T227 420V539Q227 657 225 657ZM378 169Q378 230 339 265T274 301Q273 301 273 169V37Q324 50 351 87T378 169Z"></path></g></g><g data-mml-node="mn" transform="translate(37358.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1778,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(2278,0)"></path></g><g data-mml-node="mo" transform="translate(40414.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(41470.3,0)"><g data-mml-node="mo"><path data-c="24" d="M162 187Q162 164 146 149T109 133H103V130Q108 115 115 105Q122 92 131 82T150 64T170 52T190 44T206 40T220 37L227 36V313Q190 320 162 335Q116 358 86 404T55 508Q55 567 85 614T165 685Q186 696 225 704H227V750H273V704L286 703Q369 690 413 631Q441 588 444 531Q444 514 443 509Q439 490 425 479T391 468Q368 468 353 483T337 522Q337 546 353 560T390 575L394 576V578Q386 599 372 614T342 637T314 649T288 656L273 658V408L288 405Q329 394 355 376Q396 348 420 300T444 199Q444 130 408 76T313 1Q286 -9 276 -9H273V-56H227V-10H221Q202 -6 193 -4T155 11T108 41T74 94T55 176V182Q55 227 95 238Q103 240 108 240Q129 240 145 226T162 187ZM225 657Q219 657 204 651T169 632T135 594T121 538Q121 512 131 491T156 457T187 435T213 423T227 420V539Q227 657 225 657ZM378 169Q378 230 339 265T274 301Q273 301 273 169V37Q324 50 351 87T378 169Z"></path></g></g><g data-mml-node="mn" transform="translate(41970.3,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(778,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1778,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(2278,0)"></path></g></g></g></svg></mjx-container></p><p>かかる計算になります。<br>料金の詳細については、以下の参考のリンク先をご参照ください。</p><h3 id="参考-8"><a href="#参考-8" class="headerlink" title="参考"></a>参考</h3><p><a href="https://cloud.google.com/vertex-ai/pricing?hl=ja#pipelines">Vertex AI Pipelinesの料金</a></p><h2 id="起動時間の目安は？"><a href="#起動時間の目安は？" class="headerlink" title="起動時間の目安は？"></a>起動時間の目安は？</h2><p>環境や実行するパイプラインによって起動時間は変わると思いますが、参考までに以下のような簡単なパイプラインで確認してみたところ、約1分後に<code>print</code>の内容がログに表示されました。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> google.cloud.aiplatform <span class="keyword">as</span> aip</span><br><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl, compiler</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">"python:3.8"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_startuptime</span>():</span><br><span class="line">    <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(datetime.datetime.now())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'check-startuptime'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>():</span><br><span class="line">    check_startuptime()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    compiler.Compiler().<span class="built_in">compile</span>(pipeline_func=pipeline, package_path=<span class="string">'pipeline.json'</span>)</span><br><span class="line">    job = aip.PipelineJob(</span><br><span class="line">        display_name=<span class="string">"check-startuptime"</span>,</span><br><span class="line">        template_path=<span class="string">"pipeline.json"</span>,</span><br><span class="line">        location=<span class="string">"asia-northeast1"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(datetime.datetime.now())  <span class="comment"># 2023-01-17 07:09:54.927736</span></span><br><span class="line">    job.submit()</span><br></pre></td></tr></table></figure><p>ログ<br><img src="/images/20230213a/startuptime.png" alt="startuptime.png" width="686" height="42" loading="lazy"></p><h2 id="ディレクトリ構成はどうすればよい？"><a href="#ディレクトリ構成はどうすればよい？" class="headerlink" title="ディレクトリ構成はどうすればよい？"></a>ディレクトリ構成はどうすればよい？</h2><p>コンポーネント関連のファイルは、例えば以下のような構成が記載されています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">components/&lt;component group&gt;/&lt;component name&gt;/</span><br><span class="line"></span><br><span class="line">    src/*            <span class="comment"># コンポーネントのソースファイル</span></span><br><span class="line">    tests/*          <span class="comment"># コンポーネントをテストするためのファイル</span></span><br><span class="line">    run_tests.sh     <span class="comment"># テストを走らせるためのshellスクリプト</span></span><br><span class="line">    README.md        <span class="comment"># 複数ファイルで構成される場合は、docsというディレクトリを作ってそこで管理</span></span><br><span class="line"></span><br><span class="line">    Dockerfile       <span class="comment"># コンポーネントのImageを作るためのDockerfile</span></span><br><span class="line">    build_image.sh   <span class="comment"># docker buildとdocker pushを行うためのshellスクリプト</span></span><br><span class="line"></span><br><span class="line">    component.yaml   <span class="comment"># コンポーネントの仕様を定義したyamlファイル</span></span><br></pre></td></tr></table></figure><p>実際にこの構成で管理された<a href="https://github.com/kubeflow/pipelines/tree/master/components/contrib/sample/keras/train_classifier">公式のサンプルコード</a>がありましたので、詳細はそちらをご参照ください。</p><h3 id="参考-9"><a href="#参考-9" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.kubeflow.org/docs/components/pipelines/v1/sdk/component-development/#organizing-the-component-files">Organizing the component files</a></li></ul><h2 id="テストはどうすればよい？"><a href="#テストはどうすればよい？" class="headerlink" title="テストはどうすればよい？"></a>テストはどうすればよい？</h2><p><a href="https://github.com/kubeflow/pipelines/tree/6ee767769d8b8daa61379be6511e7375f8de0a55/samples/test">kubeflowの公式のサンプル</a>では、<code>unittest</code>を用いたテストの例がありました。</p><h3 id="参考-10"><a href="#参考-10" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://cloud.google.com/blog/ja/topics/developers-practitioners/best-practices-managing-vertex-pipelines-code">Vertex Pipelines コードを管理するためのベスト プラクティス</a></li><li><a href="https://www.kubeflow.org/docs/components/pipelines/v1/sdk/best-practices/#writing-tests">Writing tests</a></li></ul><h2 id="パイプライン実行のためのサービスアカウントは？"><a href="#パイプライン実行のためのサービスアカウントは？" class="headerlink" title="パイプライン実行のためのサービスアカウントは？"></a>パイプライン実行のためのサービスアカウントは？</h2><p>Vertex AI Pipelines関連のサービスアカウントは、パイプライン実行の際に指定できるサービスアカウントと、パイプライン実行時に各種リソースにアクセスするためにGoogle側が作成するService agents（<code>gcp-sa-aiplatform-cc.iam.gserviceaccount.com</code>と<code>gcp-sa-aiplatform.iam.gserviceaccount.com</code>）の計3つが存在します。</p><p>1つめのパイプライン実行時のサービスアカウントを指定しない場合、Compute Engineのデフォルトのサービスアカウントを使用してパイプラインを実行します。</p><p>Compute Engineのデフォルトのサービスアカウントには、<strong>プロジェクト編集者</strong>のロールがデフォルトで付与されています。そのため、公式のガイドではきめ細かい権限を持つサービスアカウントの作成に関する項目があります。</p><p><code>gcp-sa-aiplatform-cc.iam.gserviceaccount.com</code>と<code>gcp-sa-aiplatform.iam.gserviceaccount.com</code>はVertex AIを利用し始めた段階でGoogle側が自動で作成してくれるため、利用者側が事前に作成する必要はありません。また、パイプライン実行時に指定する必要もありません。</p><p><code>gcp-sa-aiplatform-cc.iam.gserviceaccount.com</code>はカスタムトレーニングコードを実行する際に利用され、<code>gcp-sa-aiplatform.iam.gserviceaccount.com</code>はVertex AI全般の機能を動作させるために利用されるようです。これら2つのアカウントが持つロールについては<a href="https://cloud.google.com/iam/docs/understanding-roles#service-agents-roles">こちら</a>をご参照ください。</p><h3 id="参考-11"><a href="#参考-11" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://cloud.google.com/vertex-ai/docs/pipelines/configure-project#service-account">きめ細かい権限を持つサービス アカウントを構成する</a></li><li><a href="https://cloud.google.com/iam/docs/service-agents">Service agents</a></li><li><a href="https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents">IAM によるアクセス制御</a></li></ul><h2 id="気を付けるべきクォータ制限は？"><a href="#気を付けるべきクォータ制限は？" class="headerlink" title="気を付けるべきクォータ制限は？"></a>気を付けるべきクォータ制限は？</h2><p>Vertex AI Pipelinesでは、パイプラインジョブの同時実行数やタスクの並列実行数に上限が存在します。また、1つのパイプラインジョブで実行できるタスク数、入出力にも上限があります。</p><div class="scroll"><table><thead><tr><th>項目</th><th>値</th></tr></thead><tbody><tr><td>パイプライン タスクの並列実行</td><td>600</td></tr><tr><td>同時実行パイプライン ジョブ</td><td>300</td></tr><tr><td>ジョブあたりのパイプライン タスクの数</td><td>10,000</td></tr><tr><td>パイプライン<strong>タスク</strong>あたりの入力アーティファクトと出力アーティファクト</td><td>100</td></tr><tr><td>パイプライン<strong>ジョブ</strong>あたりの入力アーティファクトと出力アーティファクト</td><td>10,000</td></tr></tbody></table></div><h3 id="参考-12"><a href="#参考-12" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://cloud.google.com/vertex-ai/docs/quotas?hl=ja#vertex-ai-pipelines">割り当てと上限</a></li></ul><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Vertex AI Pipelinesを利用するにあたって気になりそうなことをまとめました。皆様の一助となれば幸いです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、フューチャーでアルバイトをしている平野です。今回は、Vertex AI</summary>
        
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="MLOps" scheme="https://future-architect.github.io/tags/MLOps/"/>
    
    <category term="VertexAI" scheme="https://future-architect.github.io/tags/VertexAI/"/>
    
    <category term="ナレッジ" scheme="https://future-architect.github.io/tags/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
  </entry>
  
  <entry>
    <title>CloudBuildを使ってプライベートエンドポイントのみのGKEへデプロイ</title>
    <link href="https://future-architect.github.io/articles/20230210a/"/>
    <id>https://future-architect.github.io/articles/20230210a/</id>
    <published>2023-02-09T15:00:00.000Z</published>
    <updated>2023-02-10T03:17:53.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>こんにちは！筋肉エンジニアの渡邉です。最近はGCP&#x2F;GKEについて勉強しています。</p><p>今回はGitHubへのPushをトリガーにCloudBuildを起動し、プライベートエンドポイントのみのGKE(Google Kubernetes Engine)へデプロイする基盤を作りましたので、共有したいと思います。</p><p>GCPリソースはTerraformで作成しています。CloudBuildとGitHubの連携は一部画面による紐づけが必要になるので、手動でCloudBuildを作成した後、terraform importでコード管理するようにしました。</p><h1 id="デプロイフロー"><a href="#デプロイフロー" class="headerlink" title="デプロイフロー"></a>デプロイフロー</h1><img src="/images/20230210a/Deploy_Architecture.drawio.png" alt="Deploy_Architecture.drawio.png" width="901" height="264" loading="lazy"><p>デプロイフローは以下の流れになります。</p><ol><li>ローカルでアプリケーションコードの修正</li><li>ローカルで修正をCommit、GitHubへPush</li><li>GitHubへPushされたことをトリガーにCloudBuildが起動</li><li>CloudBuildでコンテナをビルド、Artifact RegistoryにコンテナイメージをPush</li><li>CloudBuildからGKEへコンテナイメージをデプロイ</li></ol><h1 id="アプリケーションコード"><a href="#アプリケーションコード" class="headerlink" title="アプリケーションコード"></a>アプリケーションコード</h1><p>Goで記述されたアプリケーションを書きました。<br>リクエストを投げると、Hello world!とVersionとHostnameをレスポンスします。</p><p>こちらはディレクトリ構成です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── src</span><br><span class="line">    ├── Dockerfile</span><br><span class="line">    └── cmd</span><br><span class="line">        └── main.go</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">        <span class="string">&quot;log&quot;</span></span><br><span class="line">        <span class="string">&quot;net/http&quot;</span></span><br><span class="line">        <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        mux := http.NewServeMux()</span><br><span class="line">        mux.HandleFunc(<span class="string">&quot;/&quot;</span>, hello)</span><br><span class="line"></span><br><span class="line">        port := os.Getenv(<span class="string">&quot;PORT&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> port == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">                port = <span class="string">&quot;8080&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.Printf(<span class="string">&quot;Server listening on port %s&quot;</span>, port)</span><br><span class="line">        log.Fatal(http.ListenAndServe(<span class="string">&quot;:&quot;</span>+port, mux))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        log.Printf(<span class="string">&quot;Serving request: %s&quot;</span>, r.URL.Path)</span><br><span class="line">        host, _ := os.Hostname()</span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;Hello, world!\n&quot;</span>)</span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;Version: 1.0.0\n&quot;</span>)</span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;Hostname: %s\n&quot;</span>, host)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GKEにデプロイするアプリケーションはコンテナのため、Dockerfileを作成します。<br>Dockerfileは以下の通りです。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># goバージョン</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.19</span>.<span class="number">1</span>-alpine</span><br><span class="line"><span class="comment"># アップデートとgitのインストール</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --update &amp;&amp;  apk add git</span></span><br><span class="line"><span class="comment"># appディレクトリの作成</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /go/src/app</span></span><br><span class="line"><span class="comment"># ワーキングディレクトリの設定</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /go/src/app</span></span><br><span class="line"><span class="comment"># ホストのファイルをコンテナの作業ディレクトリに移動</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./cmd/main.go /go/src/app/</span></span><br><span class="line"><span class="comment"># コンパイル＋実行</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;go&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;main.go&quot;</span> ]</span></span><br><span class="line"><span class="comment"># 公開ポートを設定する</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h1 id="GKEのアーキテクチャ"><a href="#GKEのアーキテクチャ" class="headerlink" title="GKEのアーキテクチャ"></a>GKEのアーキテクチャ</h1><img src="/images/20230210a/architecture.drawio.png" alt="architecture.drawio.png" width="1151" height="429" loading="lazy"><h2 id="クラスタ構成"><a href="#クラスタ構成" class="headerlink" title="クラスタ構成"></a>クラスタ構成</h2><ul><li><strong>クラスタバージョン</strong>：1.23.13-gke.900（リリースチャンネルをSTABLEで構築した時のデフォルトバージョン）</li><li><strong>リージョンクラスタ</strong>：本番環境で利用することを考慮して可用性を高くしたいため</li><li><strong>VPCネイティブクラスタ</strong>：GKE バージョン 1.21.0-gke.1500 以降のすべてのクラスタはVPCネイティブクラスタがデフォルトのネットワークモードのため</li><li><strong>Standardクラスタ</strong>：インフラチームがGKEクラスタを管理することを想定</li><li><strong>限定公開クラスタ</strong>：Control Planeへのアクセスがプライベートエンドポイントのみの「パブリックエンドポイントアクセスが無効」で構成しています。ノードには内部IPアドレスしか付与されず、Control Planeへのアクセスは内部ネットワークからのみしかアクセスできません。<br>※この構成は制限が厳しいのでセキュリティ要件的に問題なければ、「パブリック エンドポイント アクセスが有効、承認済みネットワークが有効」で構築してもよいです。</li></ul><h2 id="Manifest"><a href="#Manifest" class="headerlink" title="Manifest"></a>Manifest</h2><p>GoのアプリケーションコンテナをGKE上にPodとして建てたいので、deploymentを作成します。containers.imageにはArtifact Registryに保存されているイメージ名を指定します。containerPortにはDockerfileのEXPOSEで指定した8080を指定します。</p><figure class="highlight yaml"><figcaption><span>deployment.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-go-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">hello-go</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">hello-go</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello-go</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">asia-northeast1-docker.pkg.dev/xxxxxxxxxx/docker-repository/hello-go:latest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>deploymentを作成するだけでは、podに対して外部からアクセスすることができないのでServiceとIngressを作成します。<br>Ingressを使用するためには、ServiceのtypeをNodePortにしなければならないのでNodePortで構築します。ports.portに80を指定し、ports.targetPortにdeploymentのports.containerPortで指定した8080を指定します。</p><p>80番ポートでServiceにアクセスされ、8080番ポートのdeploymentの各Podにルーティングされる仕組みです。</p><figure class="highlight yaml"><figcaption><span>service.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-go-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">hello-go</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><p>Ingressのmanifestファイルのannotationsには以下を記します。</p><ul><li>kubernetes.io&#x2F;ingress.class: “gce”：外部ロードバランサの作成します</li><li>kubernetes.io&#x2F;ingress.allow-http: “false”：クライアントとHTTP(S)ロードバランサ間のすべての通信をHTTPSに強制します</li><li>kubernetes.io&#x2F;ingress.global-static-ip-name： “loadbalancer-external-ip-address”：事前にterraformで構築していた静的外部IPアドレスを外部ロードバランサに設定します</li><li>networking.gke.io&#x2F;managed-certificates: “hello-go”：クライアントとからのHTTPS通信を実現するためGoogleマネージド証明書をIngressに適用します（後述のmanaged-certificate.yamlで作成）</li></ul><p>Ingressのbackendには、先ほど作成したServiceを指定し、port.numberはserviceのポート80番を指定して紐づけます。</p><figure class="highlight yaml"><figcaption><span>ingress.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-go-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="comment"># 外部ロードバランサの作成</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;gce&quot;</span></span><br><span class="line">    <span class="comment"># クライアントとHTTP(S)ロードバランサ間のすべての通信をHTTPSに強制</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.allow-http:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">    <span class="comment"># 事前に用意していた静的外部IPアドレスを設定する</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.global-static-ip-name:</span> <span class="string">&quot;loadbalancer-external-ip-address&quot;</span></span><br><span class="line">    <span class="comment"># Googleマネージド証明書をIngressに適用する</span></span><br><span class="line">    <span class="attr">networking.gke.io/managed-certificates:</span> <span class="string">&quot;hello-go&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">hello-go-service</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>Ingressに適用させるGoogleマネージド証明書を作成します。<br>ドメインはterraformで作成済みの静的外部IPアドレスにフリーなワイルドカードDNSのnip.ioを設定しました。</p><figure class="highlight yaml"><figcaption><span>managed-certificate.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.gke.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ManagedCertificate</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-go</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">domains:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">34.</span><span class="string">xxx.xxx.xxx.nip.io</span></span><br></pre></td></tr></table></figure><p>manifestファイルの適用自体は踏み台サーバから実行しています。</p><p>ここまで構築するとドメインに対してアクセスすると以下のキャプチャのように</p><ul><li>Hello, world!</li><li>Version:1.0.0</li><li>Hostname: hello-go-deployment-c58cf7b66-fwgbb</li></ul><p>がブラウザ上に返却されます。</p><img src="/images/20230210a/2-Application-Access①.png" alt="2-Application-Access①.png" width="344" height="119" loading="lazy"><h1 id="CloudBuildの作成"><a href="#CloudBuildの作成" class="headerlink" title="CloudBuildの作成"></a>CloudBuildの作成</h1><p>現状の状態だと</p><ol><li>アプリケーションコードの変更を行う（ローカル）。</li><li>GitHubへ変更をPushする（ローカル）。</li><li>docker buildコマンドの実行を行いイメージを作成する（ローカル）</li><li>docker pushコマンドを実行し、Artifact RegistoryへイメージをPushする（ローカル）</li><li>踏み台サーバにログインして<code>kubectl apply -f deployment.yaml</code> コマンドを実行してデプロイ</li></ol><p>となるため、デプロイまでに非常に手間がかかります。<br>GitHubへのPushをトリガーに上記の手順の3~5を自動化したいため、CloudBuildを利用します。</p><h2 id="CloudBuildトリガーの作成"><a href="#CloudBuildトリガーの作成" class="headerlink" title="CloudBuildトリガーの作成"></a>CloudBuildトリガーの作成</h2><h3 id="GitHubとの連携"><a href="#GitHubとの連携" class="headerlink" title="GitHubとの連携"></a>GitHubとの連携</h3><p>CloudBuildとGitHub（プライベートリポジトリ）を連携するためには画面での認証手続きが生じるため、一旦Terraformでは作成せず手動で設定を行いました。<br>手動で設定が完了した後、terraform importコマンドを利用してコード管理するようにします。</p><p>Google Cloudコンソール画面から「Cloud Build」をクリック→「トリガー」をクリック→「トリガーを作成」をクリックします。</p><img src="/images/20230210a/1-CloudBuild①.png" alt="1-CloudBuild①.png" width="975" height="882" loading="lazy">トリガーの作成画面で<ul><li>名前：sample-build</li><li>リージョン：asia-northeast1</li><li>イベント：ブランチにpushする</li></ul><p>を入力し、ソース：「新しいリポジトリに接続」をクリックします。</p><img src="/images/20230210a/1-CloudBuild②.png" alt="1-CloudBuild②.png" width="979" height="884" loading="lazy"><p>リポジトリに接続画面で</p><ul><li>ソースを選択：GitHub (Cloud Build GitHubアプリ)<br>を選択し、「続行」をクリックする。</li></ul><img src="/images/20230210a/1-CloudBuild③.png" alt="1-CloudBuild③.png" width="579" height="938" loading="lazy"><p>Sign in to GitHub to continue to Google Cloud Buildの画面で</p><ul><li>Username or email address：自身のGitHubアカウントのユーザ名</li><li>Password：自身のGitHubアカウントのパスワード</li></ul><p>を入力し、「Sign in」をクリックします。</p><img src="/images/20230210a/1-CloudBuild④.png" alt="1-CloudBuild④.png" width="322" height="581" loading="lazy"><p>Google Cloud Build by Google Cloud Build would like permission toの画面の「Authorize Google Cloud Build」をクリックします。</p><img src="/images/20230210a/1-CloudBuild⑤.png" alt="1-CloudBuild⑤.png" width="1000" height="718" loading="lazy"><p>リポジトリを選択画面の「GOOGLE CLOUD BUILDのインストール」をクリックします。</p><img src="/images/20230210a/1-CloudBuild⑥.png" alt="1-CloudBuild⑥.png" width="572" height="903" loading="lazy"><p>Install Google Cloud Buildの画面から</p><ul><li>Only Select repositories：Cloud Buildと連携したいリポジトリ<br>を入力し、「Install」をクリックします。</li></ul><img src="/images/20230210a/1-CloudBuild⑦.png" alt="1-CloudBuild⑦.png" width="569" height="807" loading="lazy"><ul><li>GitHubアカウント：自身のGitHubアカウント</li><li>リポジトリ：Cloud Buildと連携したいリポジトリ<br>を入力し、チェックボックスにチェックを入れて「接続」をクリックします。</li></ul><img src="/images/20230210a/1-CloudBuild⑧.png" alt="1-CloudBuild⑧.png" width="575" height="901" loading="lazy"><p>ここまでの設定で、Cloud Buildと自身のGitHubリポジトリを連携させることができます。</p><img src="/images/20230210a/1-CloudBuild⑨.png" alt="1-CloudBuild⑨.png" width="975" height="882" loading="lazy"><h3 id="terraform-importの実行"><a href="#terraform-importの実行" class="headerlink" title="terraform importの実行"></a>terraform importの実行</h3><p>作成したトリガーの「実行」の隣をクリックし、リソースパスをコピーをクリックします。（terraform importで利用します。）<br><img src="/images/20230210a/1-CloudBuild⑩.png" alt="1-CloudBuild⑩.png" width="1011" height="883" loading="lazy"></p><p>terraform実行環境にて、terraform importを実行し、手動で作成したCloud Buildトリガーをコード管理できるように設定します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxx@xxxxxxxx:~/cloud-provider/gcp/gke$ terraform import google_cloudbuild_trigger.trigger projects/xxxxxxxxx/locations/asia-northeast1/triggers/f51e2b94-2be8-4ec6-a983-72ded1f69bb7</span><br><span class="line">google_cloudbuild_trigger.trigger: Importing from ID <span class="string">&quot;projects/xxxxxxxxx/locations/asia-northeast1/triggers/f51e2b94-2be8-4ec6-a983-72ded1f69bb7&quot;</span>...</span><br><span class="line">google_cloudbuild_trigger.trigger: Import prepared!</span><br><span class="line">  Prepared google_cloudbuild_trigger <span class="keyword">for</span> import</span><br><span class="line">google_cloudbuild_trigger.trigger: Refreshing state... [<span class="built_in">id</span>=projects/xxxxxxxxx/locations/asia-northeast1/triggers/f51e2b94-2be8-4ec6-a983-72ded1f69bb7]</span><br><span class="line"></span><br><span class="line">Import successful!</span><br><span class="line"></span><br><span class="line">The resources that were imported are shown above. These resources are now <span class="keyword">in</span></span><br><span class="line">your Terraform state and will henceforth be managed by Terraform.</span><br></pre></td></tr></table></figure><p>terraform import後</p><ul><li>サービスアカウントの設定</li><li>ビルド実行時に必要なビルド構成ファイルのパスを設定</li><li>ビルド構成ファイルに必要な環境変数</li></ul><p>を指定してterraform applyをして適用します。</p><h1 id="CloudBuildからGKE-Control-Planeへの接続"><a href="#CloudBuildからGKE-Control-Planeへの接続" class="headerlink" title="CloudBuildからGKE Control Planeへの接続"></a>CloudBuildからGKE Control Planeへの接続</h1><p>今回、Control Planeへのアクセスにプライベートエンドポイントのみの「パブリックエンドポイントアクセスが無効」でGKEを構成しているため、CloudBuildからGKE Control Planeへの接続も内部ネットワーク経由でプライベートエンドポイントに対して行わなければいけません。<br>（GKEをパブリック エンドポイント アクセスが有効、承認済みネットワークが有効で構成している場合は、CloudBuildからGKE Control Planeへのアクセスもパブリックエンドポイントに対して行う必要がありますが、CloudBuildの外部IPはユーザで指定できずビルド環境ごとに変わってしまい、承認済みネットワークが定義できないので、少しトリッキーなやり方をしないとアクセスができないです。）<br>CloudBuildからGKE Control Planeのプライベートエンドポイント接続を内部ネットワークを経由するようにしたいので、CloudBuildをPrivate Poolを利用するように作成します。<br>Cloud Build プライベート プールを使用した限定公開 Google Kubernetes Engine クラスタへのアクセスはGoogle Cloudの<a href="https://cloud.google.com/architecture/accessing-private-gke-clusters-with-cloud-build-private-pools">アーキテクチャセンター</a>にも記載されているので、詳しくはこちらの記事をご覧ください。</p><h2 id="ネットワークアーキテクチャ"><a href="#ネットワークアーキテクチャ" class="headerlink" title="ネットワークアーキテクチャ"></a>ネットワークアーキテクチャ</h2><p>CloudBuildからGKEへデプロイするためのネットワークアーキテクチャの完成図になります。<br><img src="/images/20230210a/New_architecture.drawio.png" alt="New_architecture.drawio.png" width="1200" height="355" loading="lazy"></p><p>それぞれ詳細を見ていきましょう。</p><h3 id="CloudBuild-Private-Poolとsample-build-vpc間"><a href="#CloudBuild-Private-Poolとsample-build-vpc間" class="headerlink" title="CloudBuild Private Poolとsample-build-vpc間"></a>CloudBuild Private Poolとsample-build-vpc間</h3><img src="/images/20230210a/between_sample_vpc_private_pool.drawio.png" alt="between_sample_vpc_private_pool.drawio.png" width="1200" height="355" loading="lazy"><p>Private Poolは、サービスプロデューサーネットワークと呼ばれる Google 所有の Virtual Private Cloud ネットワークでホストされます。サービスプロデューサーネットワークだけでは、GKE Control Planeへアクセスするルートがないので、Private Poolとプライベート接続する用のVPC(sample-build-vpc)を別途作成します。</p><p>Private Poolとプライベート接続する用のVPCには、<strong>名前付きIP範囲</strong>を指定することができるので、<strong>192.168.3.0&#x2F;24</strong>を設定します。private poolが、このIPアドレス範囲からGKEのControl Planeにトラフィックを送信できるので、こちらのIP範囲をGKEの承認済みネットワークに定義します。</p><p>名前付きIP範囲には以下のIP範囲は避けるように<a href="https://cloud.google.com/build/docs/private-pools/set-up-private-pool-to-use-in-vpc-network?hl=ja#understanding_the_network_configuration_options">公式ドキュメント</a>に記載されているので、注意しましょう。</p><blockquote><p>※<strong>Cloud Build は、Docker ブリッジ ネットワークの IP 範囲 192.168.10.0&#x2F;24 を予約します。プロジェクト内のリソースに IP 範囲を割り当てる際、Cloud Build ビルダーがこれらのリソースにアクセスする場合は、192.168.10.0&#x2F;24 以外の範囲を選択することをおすすめします。</strong></p></blockquote><img src="/images/20230210a/4-network-architecuture③.png" alt="4-network-architecuture③.png" width="1200" height="844" loading="lazy"><p>この時サービスのプライベート接続でカスタムルートのエクスポートは「有効」に設定してください。<br>この設定により、のちにPrivate PoolにGKE Control PlaneのCIDR(192.168.64.0&#x2F;28)が広報されます。<br><img src="/images/20230210a/4-network-architecuture④.png" alt="4-network-architecuture④.png" width="1200" height="847" loading="lazy"></p><h3 id="GKE-Control-Planeとmy-stg-environment-vpc間"><a href="#GKE-Control-Planeとmy-stg-environment-vpc間" class="headerlink" title="GKE Control Planeとmy-stg-environment-vpc間"></a>GKE Control Planeとmy-stg-environment-vpc間</h3><img src="/images/20230210a/between_gke_control_plane_my_stg_environment.drawio.png" alt="between_gke_control_plane_my_stg_environment.drawio.png" width="1200" height="355" loading="lazy"><p>GKE Control Planeとmy-stg-environment-vpcを接続しているVPC Peeringのカスタムルートのエクスポートを有効化します。<br>これにより、のちにHA VPN Gatewayを通じて広報されてきたPrivate PoolのCIDR(192.168.3.0&#x2F;24)をGKE Control Plane側に広報することができます。<br><img src="/images/20230210a/4-network-architecuture①.png" alt="4-network-architecuture①.png" width="1200" height="849" loading="lazy"></p><h3 id="HA-VPNの作成"><a href="#HA-VPNの作成" class="headerlink" title="HA VPNの作成"></a>HA VPNの作成</h3><img src="/images/20230210a/between_sample_build_vpc_my_stg_environment.drawio.png" alt="between_sample_build_vpc_my_stg_environment.drawio.png" width="1200" height="355" loading="lazy"><p>CloudBuildのprivate poolのCIDR(192.168.3.0&#x2F;24)をmy-stg-environment-vpcに、GKE Control PlaneのCIDR(192.168.64.0&#x2F;28)をsample-build-vpcにそれぞれ広報したいので、my-stg-environment-vpcとsample-build-vpcをHA VPNで接続します。</p><p>VPC PeeringでそれぞれのVPCを接続することもできますが、VPC Peeringは推移的ピアリングをサポートしていないため、CloudBuildのprivate poolのCIDR(192.168.3.0&#x2F;24)とGKE Control PlaneのCIDR(192.168.64.0&#x2F;28)をそれぞれのVPCへ広報することができません。</p><p>まず、HA VPN Gatewayを作成します。<br>my-stg-environment-vpcに「ha-vpn-my-stg-environment-tky-gw」、sample-build-vpcに「ha-vpn-sample-build-vpc-tky-gw」を作成します。</p><img src="/images/20230210a/4-network-architecuture⑦.png" alt="4-network-architecuture⑦.png" width="1200" height="504" loading="lazy"><p>次に、それぞれのHA VPN Gatewayに対応するVPN Tunnelを作成します。</p><p>ha-vpn-my-stg-environment-tky-gwに</p><ul><li>「ha-vpn-my-stg-environment-tky-tunnel-0」</li><li>「ha-vpn-my-stg-environment-tky-tunnel-1」</li></ul><p>を</p><p>ha-vpn-sample-build-vpc-tky-gwに</p><ul><li>「ha-vpn-sample-build-vpc-tky-tunnel-0」</li><li>「ha-vpn-sample-build-vpc-tky-tunnel-1」<br>を作成します。</li></ul><img src="/images/20230210a/4-network-architecuture⑧.png" alt="4-network-architecuture⑧.png" width="1200" height="511" loading="lazy"><p>次に、それぞれのHA VPN Tunnelに対応するCloud Routerを作成します。</p><ul><li>ha-vpn-my-stg-environment-tky-rt</li></ul><p>sample-build-vpcにGKE Control PlaneのCIDR(192.168.64.0&#x2F;28)を広報したいので、アドバタイズされたIP範囲に192.168.64.0&#x2F;28を設定します。</p><ul><li>ha-vpn-sample-build-vpc-tky-rt</li></ul><p>my-stg-environmentにCloudBuild Private PoolのCIDR(192.168.3.0&#x2F;24)を広報したいので、アドバタイズされたIP範囲に192.168.3.0&#x2F;24を設定します。</p><img src="/images/20230210a/4-network-architecuture⑨.png" alt="4-network-architecuture⑨.png" width="1200" height="840" loading="lazy"><img src="/images/20230210a/4-network-architecuture⑩.png" alt="4-network-architecuture⑩.png" width="1200" height="847" loading="lazy"><p>ここまでの設定で、CloudBuildからGKEへデプロイするためのネットワークアーキテクチャの完成になります。</p><h1 id="デプロイの実施"><a href="#デプロイの実施" class="headerlink" title="デプロイの実施"></a>デプロイの実施</h1><p>上記でCloudBuildから内部ネットワークを経由してGKE Contorl Planeへ通信できるルートができたので、実際にデプロイを実施してみましょう。</p><h2 id="CloudBuild-yaml"><a href="#CloudBuild-yaml" class="headerlink" title="CloudBuild.yaml"></a>CloudBuild.yaml</h2><p>CloudBuildでビルドを実行するためには、ビルド構成ファイルを作成する必要があります。<br>ビルド構成ファイルには、各ビルドSTEPごとに実行したい処理を記述します。<br>ビルド構成ファイルに記載しているプロパティの内容は以下の通りです。</p><div class="scroll"><table><thead><tr><th align="center">キー</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">name</td><td align="center">タスクを実行するコンテナイメージを指すように指定します</td></tr><tr><td align="center">id</td><td align="center">ビルドステップの識別子を指定します</td></tr><tr><td align="center">args</td><td align="center">nameに指定したイメージ実行時に渡す引数を記述します</td></tr><tr><td align="center">dir</td><td align="center">ビルド実行時の作業ディレクトリを指定します。</td></tr><tr><td align="center">env</td><td align="center">ビルド実行時に使用される環境変数を指定します。</td></tr></tbody></table></div><p>以下のビルド構成ファイルの内容に従ってビルドが実行されていきます。</p><figure class="highlight yaml"><figcaption><span>CloudBuild.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># イメージをビルド</span></span><br><span class="line"><span class="comment"># （$SHORT_SHAはGitコミットのタグの値、ビルドしたDockerイメージに同じタグ付け）</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;gcr.io/cloud-builders/docker&#x27;</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">&#x27;Build Image&#x27;</span></span><br><span class="line">    <span class="attr">args:</span> [<span class="string">&#x27;build&#x27;</span>, <span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;asia-northeast1-docker.pkg.dev/$PROJECT_ID/docker-repository/hello-go:$SHORT_SHA&#x27;</span>, <span class="string">&quot;.&quot;</span>]</span><br><span class="line">    <span class="attr">dir:</span> <span class="string">&#x27;gcp/gke/src&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># ビルドイメージをArtifact Registry にPush</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;gcr.io/cloud-builders/docker&#x27;</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">&#x27;Push to GCR&#x27;</span></span><br><span class="line">    <span class="attr">args:</span> [<span class="string">&#x27;push&#x27;</span>, <span class="string">&#x27;asia-northeast1-docker.pkg.dev/$PROJECT_ID/docker-repository/hello-go:$SHORT_SHA&#x27;</span>]</span><br><span class="line">    <span class="attr">dir:</span> <span class="string">&#x27;gcp/gke/src&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># ビルドしたイメージタグを利用するように、manifestを書き換える</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;ubuntu&#x27;</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">&#x27;Tag Override&#x27;</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;sed -i.bk s/latest/$SHORT_SHA/g deployment.yaml&#x27;</span></span><br><span class="line">    <span class="attr">dir:</span> <span class="string">&#x27;gcp/gke/manifest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># デプロイ</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;gcr.io/cloud-builders/kubectl&quot;</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">&#x27;kubectl apply&#x27;</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">apply</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--filename=deployment.yaml</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;CLOUDSDK_COMPUTE_REGION=$&#123;_REGION&#125;&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;CLOUDSDK_CONTAINER_CLUSTER=$&#123;_CLUSTER_NAME&#125;&#x27;</span></span><br><span class="line">    <span class="attr">dir:</span> <span class="string">&#x27;gcp/gke/manifest&#x27;</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># オプション</span></span><br><span class="line"><span class="comment"># ビルド実行ログはCloud Loggingへ</span></span><br><span class="line"><span class="comment"># ビルド実行環境はprivate poolを指定</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="attr">options:</span></span><br><span class="line">  <span class="attr">logging:</span> <span class="string">CLOUD_LOGGING_ONLY</span></span><br><span class="line">  <span class="attr">workerPool:</span></span><br><span class="line">    <span class="string">&#x27;projects/$PROJECT_ID/locations/$&#123;_REGION&#125;/workerPools/private-build-pool&#x27;</span></span><br></pre></td></tr></table></figure><p>こちらのcloudbuild.yamlをGitHub上のルートディレクトリ内に保存します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">├── api_service.tf</span><br><span class="line">├── artifact_registry.tf</span><br><span class="line">├── cloudbuild.tf</span><br><span class="line">├── cloudbuild.yaml <span class="comment"># ★追加</span></span><br><span class="line">├── compute_address.tf</span><br><span class="line">├── compute_container.tf</span><br><span class="line">├── compute_engine.tf</span><br><span class="line">├── compute_firewall.tf</span><br><span class="line">├── compute_global_address.tf</span><br><span class="line">├── compute_network.tf</span><br><span class="line">├── compute_router_nat.tf</span><br><span class="line">├── ha_vpn.tf</span><br><span class="line">├── locals.tf</span><br><span class="line">├── project.tf</span><br><span class="line">├── project_iam_member.tf</span><br><span class="line">├── provider.tf</span><br><span class="line">├── service_account.tf</span><br><span class="line">├── versions.tf</span><br><span class="line">├── manifest</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── ingress.yaml</span><br><span class="line">│   ├── managed-certificate.yaml</span><br><span class="line">│   └── service.yaml</span><br><span class="line">├── src</span><br><span class="line">    ├── Dockerfile</span><br><span class="line">    └── cmd</span><br><span class="line">        └── main.go</span><br></pre></td></tr></table></figure><h2 id="アプリケーションコードの修正"><a href="#アプリケーションコードの修正" class="headerlink" title="アプリケーションコードの修正"></a>アプリケーションコードの修正</h2><p>Version: 1.0.0　→　Version: 2.0.0へ修正してmainブランチにPushします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">xxxxxx@xxxxxx:~/cloud-provider/gcp/gke$ git diff src/cmd/main.go</span><br><span class="line">diff --git a/gcp/gke/src/cmd/main.go b/gcp/gke/src/cmd/main.go</span><br><span class="line">index db8369b..8d603f5 100644</span><br><span class="line">--- a/gcp/gke/src/cmd/main.go</span><br><span class="line">+++ b/gcp/gke/src/cmd/main.go</span><br><span class="line">@@ -25,6 +25,6 @@ func hello(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">         log.Printf(<span class="string">&quot;Serving request: %s&quot;</span>, r.URL.Path)</span><br><span class="line">         host, _ := os.Hostname()</span><br><span class="line">         fmt.Fprintf(w, <span class="string">&quot;Hello, world!\n&quot;</span>)</span><br><span class="line">-        fmt.Fprintf(w, <span class="string">&quot;Version: 1.0.0\n&quot;</span>)</span><br><span class="line">+        fmt.Fprintf(w, <span class="string">&quot;Version: 2.0.0\n&quot;</span>)</span><br><span class="line">         fmt.Fprintf(w, <span class="string">&quot;Hostname: %s\n&quot;</span>, host)</span><br><span class="line"> &#125;</span><br><span class="line">\ No newline at end of file</span><br><span class="line">xxxxxx@xxxxxx:~/cloud-provider/gcp/gke$ git add src/cmd/main.go</span><br><span class="line">xxxxxx@xxxxxx:~/cloud-provider/gcp/gke$ git diff src/cmd/main.go</span><br><span class="line">xxxxxx@xxxxxx:~/cloud-provider/gcp/gke$ git commit -m <span class="string">&quot;modify Version&quot;</span></span><br><span class="line">[main 0f0a907] modify Version</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">xxxxxx@xxxxxx:~/cloud-provider/gcp/gke$ git push origin main</span><br><span class="line">Enumerating objects: 20, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (20/20), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 20 threads</span><br><span class="line">Compressing objects: 100% (10/10), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (14/14), 1.05 KiB | 1.05 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 14 (delta 4), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (4/4), completed with 2 <span class="built_in">local</span> objects.</span><br><span class="line">To https://GitHub.com/xxxxxxxx/xxxxxxxx.git</span><br><span class="line">   cef9c7d..0f0a907  main -&gt; main</span><br></pre></td></tr></table></figure><h2 id="CloudBuildのビルド画面"><a href="#CloudBuildのビルド画面" class="headerlink" title="CloudBuildのビルド画面"></a>CloudBuildのビルド画面</h2><p>GitHubにPushされたことをトリガーにCloudBuildのビルドが実行されます。（過去にビルドに苦戦したビルド履歴が残っていますね。。。（笑））</p><img src="/images/20230210a/3-Deploy①.png" alt="3-Deploy①.png" width="1200" height="847" loading="lazy"><p>最新のビルド履歴（9ee5d0a6）をクリックすると、詳細が確認できます。cloudbuild.yamlに記述したビルドステップごとにビルドが進行していきます。各ビルドステップごとのログも「ビルドログ」から確認することができます。</p><p>正常終了するとすべてのステップでグリーンになります。</p><img src="/images/20230210a/3-Deploy②.png" alt="3-Deploy②.png" width="1200" height="854" loading="lazy"><p>CloudBuildのビルドが正常終了したので、再度ドメインに対してアクセスをします。</p><p>すると、変更を加えたVersion：2.0.0の状態でレスポンスが返却され、デプロイが正常に完了したことを確認できました。</p><img src="/images/20230210a/3-Deploy③.png" alt="3-Deploy③.png" width="352" height="93" loading="lazy"><h2 id="Podのライフサイクル"><a href="#Podのライフサイクル" class="headerlink" title="Podのライフサイクル"></a>Podのライフサイクル</h2><p>最後のビルドステップでGKEへのデプロイが行われます。</p><p>踏み台サーバから<code>kubectl get pods -w</code>を実行することでGKE上のPodの状態を確認することができます。</p><p>ビルドしたイメージをPullしてデプロイされることで、もともと存在していたPodが次々と終了し、新しいPodが作成されていることがわかります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">xxxxxx@xxxxxx@tky-bastion:~$ kubectl get pod -w</span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">hello-go-deployment-78b555bdf6-rv8sh   1/1     Running   0          2m40s</span><br><span class="line">hello-go-deployment-78b555bdf6-z5rk8   1/1     Running   0          2m22s</span><br><span class="line">hello-go-deployment-78b555bdf6-zpczj   1/1     Running   0          2m58s</span><br><span class="line">hello-go-deployment-b788f4444-vcq82    0/1     Pending   0          0s</span><br><span class="line">hello-go-deployment-b788f4444-vcq82    0/1     Pending   0          0s</span><br><span class="line">hello-go-deployment-b788f4444-vcq82    0/1     Pending   0          0s</span><br><span class="line">hello-go-deployment-b788f4444-vcq82    0/1     ContainerCreating   0          0s</span><br><span class="line">hello-go-deployment-b788f4444-vcq82    1/1     Running             0          3s</span><br><span class="line">hello-go-deployment-b788f4444-vcq82    1/1     Running             0          10s</span><br><span class="line">hello-go-deployment-b788f4444-vcq82    1/1     Running             0          10s</span><br><span class="line">hello-go-deployment-78b555bdf6-rv8sh   1/1     Terminating         0          7m11s</span><br><span class="line">hello-go-deployment-b788f4444-cz7ng    0/1     Pending             0          0s</span><br><span class="line">hello-go-deployment-b788f4444-cz7ng    0/1     Pending             0          0s</span><br><span class="line">hello-go-deployment-b788f4444-cz7ng    0/1     Pending             0          0s</span><br><span class="line">hello-go-deployment-b788f4444-cz7ng    0/1     ContainerCreating   0          0s</span><br><span class="line">hello-go-deployment-b788f4444-cz7ng    0/1     ContainerCreating   0          0s</span><br><span class="line">hello-go-deployment-78b555bdf6-rv8sh   0/1     Terminating         0          7m11s</span><br><span class="line">hello-go-deployment-78b555bdf6-rv8sh   0/1     Terminating         0          7m11s</span><br><span class="line">hello-go-deployment-78b555bdf6-rv8sh   0/1     Terminating         0          7m11s</span><br><span class="line">hello-go-deployment-b788f4444-cz7ng    1/1     Running             0          3s</span><br><span class="line">hello-go-deployment-b788f4444-cz7ng    1/1     Running             0          10s</span><br><span class="line">hello-go-deployment-b788f4444-cz7ng    1/1     Running             0          10s</span><br><span class="line">hello-go-deployment-78b555bdf6-zpczj   1/1     Terminating         0          7m39s</span><br><span class="line">hello-go-deployment-b788f4444-hw5cw    0/1     Pending             0          0s</span><br><span class="line">hello-go-deployment-b788f4444-hw5cw    0/1     Pending             0          0s</span><br><span class="line">hello-go-deployment-b788f4444-hw5cw    0/1     Pending             0          0s</span><br><span class="line">hello-go-deployment-b788f4444-hw5cw    0/1     ContainerCreating   0          0s</span><br><span class="line">hello-go-deployment-78b555bdf6-zpczj   0/1     Terminating         0          7m39s</span><br><span class="line">hello-go-deployment-78b555bdf6-zpczj   0/1     Terminating         0          7m39s</span><br><span class="line">hello-go-deployment-78b555bdf6-zpczj   0/1     Terminating         0          7m39s</span><br><span class="line">hello-go-deployment-b788f4444-hw5cw    1/1     Running             0          3s</span><br><span class="line">hello-go-deployment-b788f4444-hw5cw    1/1     Running             0          9s</span><br><span class="line">hello-go-deployment-b788f4444-hw5cw    1/1     Running             0          9s</span><br><span class="line">hello-go-deployment-78b555bdf6-z5rk8   1/1     Terminating         0          7m12s</span><br><span class="line">hello-go-deployment-78b555bdf6-z5rk8   0/1     Terminating         0          7m13s</span><br><span class="line">hello-go-deployment-78b555bdf6-z5rk8   0/1     Terminating         0          7m13s</span><br><span class="line">hello-go-deployment-78b555bdf6-z5rk8   0/1     Terminating         0          7m13s</span><br></pre></td></tr></table></figure><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回はCloudBuildを利用したGKEへの継続デプロイ基盤について記載しました。GKEは限定公開クラスタでControl Planeへのアクセスがプライベートエンドポイントのみの「パブリックエンドポイントアクセスが無効」構築しているため、Cloud BuildからGKEのControl Planeへのアクセスを成功させるためのネットワーク構成が複雑になってしまいましたが、限定公開クラスタで「パブリック エンドポイント アクセスが有効、承認済みネットワークが無効」で構築すればCloudBuildでPrivate PoolやHA VPNで作成することもなくパブリックエンドポイント経由でControl Planeへアクセスができます。セキュリティ要件次第でデプロイフローやアーキテクチャなどは変更してください。</p><p>まだまだGKEの知らない機能がたくさんあるので、引き続きインプットとアウトプットをしていきたいと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
    <category term="GoogleCloud" scheme="https://future-architect.github.io/tags/GoogleCloud/"/>
    
    <category term="GKE" scheme="https://future-architect.github.io/tags/GKE/"/>
    
  </entry>
  
  <entry>
    <title>Excel VBAでもう頑張らない</title>
    <link href="https://future-architect.github.io/articles/20230209a/"/>
    <id>https://future-architect.github.io/articles/20230209a/</id>
    <published>2023-02-08T15:00:00.000Z</published>
    <updated>2023-02-09T02:22:32.835Z</updated>
    
    <content type="html"><![CDATA[<p>Excelは開発者もそうじゃない人も使う広く使われているツールです。Excelに詳しい人も多く、データの可視化はとりあえずExcelの表にデータを入れてしまえば、あとはグラフ化はユーザーにおまかせ、とかいろいろできます。ただ、そのかなり使われているのと裏腹に、20世紀で時代で止まっているのがVisual Basic for Applicationです。VBA。</p><p>ちょっとしたツールの実装環境としてExcelが使われていたりするのですが、Excel VBAのメンテナンスは結構大変というか、現代的なプログラミング環境と比べるとエラーメッセージも不親切だし、記述方法も冗長だし、ちょっと厳しい。また、ウェブで検索しても新しい情報が出てこず、新しいAPIを使う方法もなかなか出てこなかったりします。<a href="https://learn.microsoft.com/ja-jp/windows/win32/api/wincred/nf-wincred-credwritew">CredWriteW</a>でセキュアな情報保存をVBAで頑張ろうとしたけど、自分でやってもうまくいかず、検索してもやってみた例とかも出てこなくて、全世界の人口が70億程度ではVBAの知見を積み重ねるには足りないということが分かります。</p><p>新規で大規模なものをこれから作ったりはないかもしれませんが、既存の大規模なスクリプトのメンテナンスの仕事とかは来たり、機能拡張しろ、みたいなことがあるかもしれないので、VBAを書かずに済む方法を検討しました。JavaScriptで書けるOffice ScriptはOffice 365限定なんですかね？ユーザーのPCには新しいツールなどをインストールしない、という要件にも対応できるように、PowerShellにオフロードする方法を検討しました。</p><p>PowerShellもWindows 10以上を使っていればインストールしなくても使えますし、PowerShellの方が文法が分かりやすく、情報がそろっている、開発環境があって開発も検証も楽、などメリットが多いです。</p><h1 id="VBAの画面を表示"><a href="#VBAの画面を表示" class="headerlink" title="VBAの画面を表示"></a>VBAの画面を表示</h1><p>久々すぎて(20年ぶり？)色々忘れてたので備忘のために手順を書き残しておきます。まずはオプションで「リボンのユーザー設定」で「開発」を表示するようにします。</p><img src="/images/20230209a/image.png" alt="リボンのユーザー設定" width="936" height="405" loading="lazy"><p>そうするとリボンに「開発」が出てくるので、一番右のVisual Basicボタンを押すと開発環境が出てきます。</p><img src="/images/20230209a/image_2.png" alt="Visual Basicの開発環境" width="615" height="191" loading="lazy"><p>ユーザーが実行する起点となるUIボタンなどは、開発の挿入から選べます。ボタンを置くと、置いた時のコールバックのサブルーチンを作るウインドウが出て、起動するコードが生成できます。古き良き、WYSIWYGなビジュアルプログラミングです。1995年ぐらいには輝いていましたね。</p><img src="/images/20230209a/image_3.png" alt="古き良き、WYSIWYGなビジュアルプログラミング" width="257" height="274" loading="lazy"><p>あとは、ここにコードを書いていけばOKです。</p><h1 id="PowerShellのコードをVBAに埋め込み"><a href="#PowerShellのコードをVBAに埋め込み" class="headerlink" title="PowerShellのコードをVBAに埋め込み"></a>PowerShellのコードをVBAに埋め込み</h1><p>複数行テキストとかヒアドキュメントみたいなのはなさそうなので、ソースコードを文字列の形式で書いて結合するコードを書きます。エスケープとかをソースをメンテするたびに手で治したりはしたくないので、関数生成のPythonスクリプトを書きました。</p><figure class="highlight py"><figcaption><span>convert.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;Function SourceCode() As String</span></span><br><span class="line"><span class="string">    Dim src As String&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(sys.argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> src:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> src.readlines():</span><br><span class="line">        line = line.removesuffix(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        line = line.replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&quot;&quot;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;    src = src + &quot;<span class="subst">&#123;line&#125;</span>&quot; + vbCrLf&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;    SourceCode = src&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;End Function&quot;</span>)</span><br></pre></td></tr></table></figure><p>次のようなスクリプトを変換してみます</p><figure class="highlight powershell"><figcaption><span>hello.ps1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Write-Host</span> <span class="string">&quot;ハロー&quot;</span></span><br><span class="line"><span class="built_in">Write-Host</span> <span class="string">&quot;World&quot;</span></span><br></pre></td></tr></table></figure><p>VBAにそのまま張れる関数コードになりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; python3.exe convert.py hello.ps1</span><br><span class="line">Function SourceCode() As String</span><br><span class="line">    Dim src As String</span><br><span class="line">    src = src + <span class="string">&quot;Write-Host &quot;</span><span class="string">&quot;ハロー&quot;</span><span class="string">&quot;&quot;</span> + vbCrLf</span><br><span class="line">    src = src + <span class="string">&quot;Write-Host &quot;</span><span class="string">&quot;World&quot;</span><span class="string">&quot;&quot;</span> + vbCrLf</span><br><span class="line">    SourceCode = src</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure><h1 id="PowerShellの実行"><a href="#PowerShellの実行" class="headerlink" title="PowerShellの実行"></a>PowerShellの実行</h1><p>PowerShellとして実行するのは、このスクリプトをTEMPファイルとして書き出して実行すれば良さそうです。いろいろ検索すると、ファイルの操作はFileSystemObject、UTF-8でファイルを書きだすにはADODB.Streamを、PowerShellの実行にはWScript.Shellを使えばよいということが分かりました。</p><p>以下のコードではそれを書いたものです。あとは、この関数の下に、さきほどの関数を張り付けておけば、PowerShellが実行できます。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> ボタン_Click()</span><br><span class="line">    <span class="keyword">Dim</span> FSO <span class="keyword">As</span> <span class="type">Object</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> scriptPath <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Set</span> FSO = CreateObject(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line"></span><br><span class="line">    scriptPath = FSO.GetSpecialFolder(<span class="number">2</span>) + <span class="string">&quot;\&quot;</span> + FSO.GetTempName + <span class="string">&quot;.ps1&quot;</span> <span class="comment">&#x27; TempFolder</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">With</span> CreateObject(<span class="string">&quot;ADODB.Stream&quot;</span>)</span><br><span class="line">        .Charset = <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">        .Open</span><br><span class="line">        .WriteText SourceCode(), <span class="number">1</span></span><br><span class="line">        .SaveToFile scriptPath, <span class="number">2</span></span><br><span class="line">        .Close</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> shell <span class="keyword">As</span> <span class="type">Object</span></span><br><span class="line">    <span class="keyword">Set</span> shell = CreateObject(<span class="string">&quot;WScript.Shell&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> result <span class="keyword">As</span> <span class="type">Object</span></span><br><span class="line">    <span class="keyword">Set</span> result = shell.Exec(<span class="string">&quot;powershell -NoLogo -WindowStyle Hidden -ExecutionPolicy RemoteSigned &quot;</span> + scriptPath)</span><br><span class="line">    Debug.Print result.Stdout.ReadAll</span><br><span class="line"></span><br><span class="line">    FSO.DeleteFile scriptPath</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><h1 id="VBAのメモ"><a href="#VBAのメモ" class="headerlink" title="VBAのメモ"></a>VBAのメモ</h1><p>あまり書きたくないとはいえ、ちょっといじらないといけないとき用のメモ</p><ul><li>サブルーチンと関数があり、後者は返り値がある。return文はなく、関数名と同名の変数に代入すると返り値になる</li><li>変数はDim 名前 As 型で宣言</li><li>変数に値をセットするときは、プリミティブ型はLet 変数 &#x3D; 値。オブジェクトはSet 変数 &#x3D; 値。</li><li>文字列はダブルクオート。ダブルクオートを中で使いたいときのエスケープは<code>&quot;&quot;</code>とする。</li><li>Debug.Printでデバッグ出力。開発環境でイミディエイトウィンドウを出せば見られる。</li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>VBAからPowerShellへのオフロードが実現できました。文字列をちょっと処理するのとかもPowerShellの方が書きやすいですね。Invoke-WebRequestなどもあって、ウェブのリクエストを飛ばしたりもやりやすいですし、サーバー起動してコールバックを受けたり（要するにOpenID Connectの認証をしたり）もできますし、他サービス連携がはかどります。VBAは、Excelとの接点としては残りますが、ウェブ上の情報も減っていったりすることを考えると、なるべく書かないようにしていった方が将来のメンテナンス作業を考えると良いかなと思っています。</p><h1 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h1><ul><li><a href="http://officetanaka.net/excel/vba/filesystemobject/">http://officetanaka.net/excel/vba/filesystemobject/</a></li><li><a href="http://officetanaka.net/excel/vba/file/file11.htm">http://officetanaka.net/excel/vba/file/file11.htm</a></li><li><a href="https://atmarkit.itmedia.co.jp/ait/articles/0407/08/news101.html">https://atmarkit.itmedia.co.jp/ait/articles/0407/08/news101.html</a></li><li><a href="https://www.tipsfound.com/vba/18026">https://www.tipsfound.com/vba/18026</a></li><li><a href="https://future-architect.github.io/articles/20221130a/">https://future-architect.github.io/articles/20221130a/</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Excelは開発者もそうじゃない人も使う広く使われているツールです。Excelに詳しい人も多く、データの可視化はとりあえずExcelの表にデータを入れてしまえば、あとはグラフ化はユーザーにおまかせ、とかいろいろできます。ただ、そのかなり使われているのと裏腹に、20世紀で時代</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="PowerShell" scheme="https://future-architect.github.io/tags/PowerShell/"/>
    
    <category term="VBA" scheme="https://future-architect.github.io/tags/VBA/"/>
    
    <category term="Excel" scheme="https://future-architect.github.io/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>ARMアーキテクチャなマシンでwgrib2が動くDockerfileを作ってみた</title>
    <link href="https://future-architect.github.io/articles/20230208a/"/>
    <id>https://future-architect.github.io/articles/20230208a/</id>
    <published>2023-02-07T15:00:00.000Z</published>
    <updated>2023-02-08T07:24:59.870Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230208a/images.jpg" alt="" width="400" height="107"><p>こんにちは。フューチャーの矢野です。</p><p>wgrib2がすぐ使えるDockerfileが欲しかったので、作成しました。<br>M1 Macで動くようにARMアーキテクチャ向けに定義しました。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><ul><li>Dockerfileは下記の通りです</li><li>マルチステージビルドをして、イメージを小さくします。二つ目の環境にmakeした実行ファイルを配置します</li><li>configureのオプションにアーキテクチャを指定しています。x86でmakeするときにはconfigureのオプション書き換えなしでビルドできました</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> arm64v8/ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt -y update \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y upgrade \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y install build-essential \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y install gfortran \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y install wget</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># download latest wgrib2</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> wget https://www.ftp.cpc.ncep.noaa.gov/wd51we/wgrib2/wgrib2.tgz.v3.1.1 \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; tar xvfz wgrib2.tgz.v3.1.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit makefile</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> grib2/ \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; sed -i -e <span class="string">&quot;s/#export CC=gcc/export CC=gcc/g&quot;</span> makefile \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; sed -i -e <span class="string">&quot;s/#export FC=gfortran/export FC=gfortran/g&quot;</span> makefile \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; sed -i -e <span class="string">&quot;860 s/.\/configure/.\/configure --build=arm/g&quot;</span> makefile \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; sed -i -e <span class="string">&quot;936 s/.\/configure/.\/configure --build=arm/g&quot;</span> makefile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># build</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> grib2/ \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; make</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> arm64v8/ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt -y update \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y upgrade \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y install gfortran</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=0 /root/grib2/wgrib2/wgrib2 /usr/local/bin/wgrib2</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;wgrib2&quot;</span>]</span></span><br></pre></td></tr></table></figure><ul><li>Dockerfileの置いてあるディレクトリで下記を実行することでビルドされます。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t wgrib2:latest .</span><br></pre></td></tr></table></figure><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><h3 id="wgrib2とは"><a href="#wgrib2とは" class="headerlink" title="wgrib2とは"></a>wgrib2とは</h3><p>アメリカ海洋気象庁(NOAA)が提供しているGRIB2を扱うことができるプログラムです。<a href="https://www.cpc.ncep.noaa.gov/products/wesley/wgrib2/">提供ページ</a></p><h3 id="GRIB2とは"><a href="#GRIB2とは" class="headerlink" title="GRIB2とは"></a>GRIB2とは</h3><p>世界気象機関WMOが定めるデータフォーマットです。<br>気象データなどの格子点形式のデータを扱う際に利用されます。</p><h2 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h2><p>下記のような感じで実行するバージョンが表示されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v $(<span class="built_in">pwd</span>):/root/ wgrib2:latest -version</span><br></pre></td></tr></table></figure><p>ホストPCのディレクトリをマウントしているので、grib2ファイルを読み込ませたい場合などは下記のように実行すれば良いです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v $(<span class="built_in">pwd</span>):/root/ wgrib2:latest sample.grib2 -csv-</span><br></pre></td></tr></table></figure><h2 id="試しに使ってみる"><a href="#試しに使ってみる" class="headerlink" title="試しに使ってみる"></a>試しに使ってみる</h2><p>緯度経度を指定したファイルを抽出後、csvとして出力、先頭の10行を標準出力してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -v $(<span class="built_in">pwd</span>):/root/ wgrib2:latest -small_grib 130:135 30:35 small.grib Z__C_RJTD_20160620150000_MET_GPV_Ggis1km_Plfdc_Aper10min_FH0000-0300_grib2.bin</span><br><span class="line"></span><br><span class="line">1:0:d=2016062015:var discipline=0 center=34 local_table=1 parmcat=1 parm=218:surface:anl:</span><br><span class="line"></span><br><span class="line">$ docker run -v $(<span class="built_in">pwd</span>):/root/ wgrib2:latest small.grib -csv small.csv</span><br><span class="line"></span><br><span class="line">1:0:d=2016062015:var discipline=0 center=34 local_table=1 parmcat=1 parm=218:surface:anl:</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">head</span> -n 10 small.csv</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.006,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.019,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.031,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.044,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.056,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.069,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.081,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.094,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.106,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.119,30.0042,0</span><br></pre></td></tr></table></figure><p>出力できていますね。</p><p>サンプルデータは<a href="https://www.data.jma.go.jp/developer/gpv_sample.html">気象庁</a>から配布されている「大雨警報(浸水害)・洪水警報の危険度分布（統合版）」を使用しました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>wgrib2をインストールしたDockerfileを作成して、コマンドが実行できることを確認するところまでを書きました。</p><p>アーキテクチャによって設定内容が異なるため、x86向けには別のファイルを定義するか、マルチアーキテクチャに対応した書き方に対応していきたいと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230208a/images.jpg&quot; alt=&quot;&quot; width=&quot;400&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="wgrib2" scheme="https://future-architect.github.io/tags/wgrib2/"/>
    
    <category term="grib2" scheme="https://future-architect.github.io/tags/grib2/"/>
    
    <category term="Ubuntu" scheme="https://future-architect.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.20 リリース連載 go build に追加される cover オプション（利用例付き）</title>
    <link href="https://future-architect.github.io/articles/20230203a/"/>
    <id>https://future-architect.github.io/articles/20230203a/</id>
    <published>2023-02-02T15:00:00.000Z</published>
    <updated>2023-02-03T04:40:26.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG DX ユニット所属、金欠コンサルタントの藤井です。最近でもないですが、SwitchBot ロックと、キーパッド&#x2F;指紋認証パッドを買いました。我が家における IoT デバイスのカバレッジが着実に向上しており、快適な日々を過ごしています。</p><p><a href="/articles/20230123a/">Go 1.20 連載</a> 7 記事目にして、最終回の本記事では、<code>go build</code>コマンドに新たに追加される<code>-cover</code>オプションについてお伝えします。せっかくなので実際に使ってみたレポートもお届けしようと思います。</p><p>なお、公式でも詳細な説明を記したランディングページが用意されているので、本記事の後にこちらもご覧いただけると、より一層理解が深まると思います。</p><p><a href="https://go.dev/testing/coverage/">https://go.dev/testing/coverage/</a></p><h2 id="cover-オプションとは"><a href="#cover-オプションとは" class="headerlink" title="cover オプションとは"></a>cover オプションとは</h2><h3 id="ビルド・実行手順"><a href="#ビルド・実行手順" class="headerlink" title="ビルド・実行手順"></a>ビルド・実行手順</h3><p><code>go build</code>コマンドは、作成したアプリケーションをビルドする際に利用しますが、そのオプションに新たに<code>-cover</code>オプションが追加されます。ざっくり書くと、ビルド後のアプリケーションに対し、テストを実行した際のテストカバレッジを取得できるようにするためのオプションです。</p><p>使い方は簡単で、単に<code>go build -cover .</code>のように、いつもの build に<code>-cover</code>オプションを追加するだけです。</p><p>このように、<code>-cover</code>以外のオプションをつけずに実行した場合、ローカルのパッケージのみがカバレッジの計測対象となり、（標準含む）外部パッケージは対象外となります。ローカルパッケージの一部をカバレッジ計測対象としたい場合や、外部パッケージも対象としたい場合は、<code>go build -cover -coverpkg=example.com,fmt,net/http .</code>のように、<code>-coverpkg</code>を用いて、明示的に対象パッケージを指定します。<code>-coverpkg</code>を用いた場合は、指定していないパッケージは（ローカル含む）全て対象外となります。</p><p>あとはビルドされたバイナリを実行すればよいのですが、その際に<code>GOCOVERDIR</code>の環境変数に、カバレッジを記録したファイルの出力先を設定する必要があります。</p><p>また、<code>GOCOVERDIR</code>で指定したディレクトリが存在しない場合は、カバレッジファイルは出力されません。ということで、ディレクトリを作成したうえで、<code>GOCOVERDIR=coverdir ./main</code>のようにして実行しましょう。すると、指定したディレクトリにそれぞれ<code>covmeta</code>と<code>covcounters</code>から始まるファイルが出力されます。<code>covmeta</code>はカバレッジ収集対象のソースコードの各種情報が記録されたファイル、<code>covcounters</code>の方は、カバレッジ等の情報が記録されたファイルです。</p><p>前者は<code>meta-data files</code>と呼ばれており、何度実行しても（再ビルドされないかぎり）不変な値であるソースコードの情報が記録されているのみのため、初回実行時にのみ作成され、以後更新されません。</p><p>一方、  後者は<code>counter data files</code>と呼ばれており、こちらは実行の都度変動し得る情報が記録されているため、実行の度に新規で作成されます。</p><p>ちなみに、<code>GOCOVERDIR=coverdir go run -cover .</code>のように、<code>go run</code>でももちろん可能です。</p><h3 id="カバレッジの確認手順"><a href="#カバレッジの確認手順" class="headerlink" title="カバレッジの確認手順"></a>カバレッジの確認手順</h3><p><code>GOCOVERDIR</code>に出力された 2 種類のファイルはバイナリのため、人間が閲覧できるものにはなっていません。</p><p>これを確認するためには、<code>go tool</code>に新たに追加されたサブコマンド<code>covdata</code>を使用します。</p><p>公式そのままの引用ですが、以下のように<code>percent</code>サブコマンドで<code>-i</code>オプションにカバレッジファイルの出力先を指定することで、パッケージごとのカバレッジが確認できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> somedata</span><br><span class="line">covcounters.c6de772f99010ef5925877a7b05db4cc.2424989.1670252383678349347</span><br><span class="line">covmeta.c6de772f99010ef5925877a7b05db4cc</span><br><span class="line">$ go tool covdata percent -i=somedata</span><br><span class="line">    main    coverage: 100.0% of statements</span><br><span class="line">    mydomain.com/greetings  coverage: 100.0% of statements</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>また、<code>textfmt</code>サブコマンドにより、従来の<code>go test</code>コマンドと同様に、テキスト形式でカバレッジを保存することができます。</p><p>これも公式の引用ですが、以下のように<code>go tool cover</code>に入力することで、<code>go test</code>と同様にカバレッジを確認できます。（<code>go tool cover -html=profile.txt -o profile.html</code>のように html 形式でのカバレッジ確認も当然可能です。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> somedata</span><br><span class="line">covcounters.c6de772f99010ef5925877a7b05db4cc.2424989.1670252383678349347</span><br><span class="line">covmeta.c6de772f99010ef5925877a7b05db4cc</span><br><span class="line">$ go tool covdata textfmt -i=somedata -o profile.txt</span><br><span class="line">$ <span class="built_in">cat</span> profile.txt</span><br><span class="line">mode: <span class="built_in">set</span></span><br><span class="line">mydomain.com/myprogram.go:10.13,12.2 1 1</span><br><span class="line">mydomain.com/greetings/greetings.go:3.23,5.2 1 1</span><br><span class="line">$ go tool cover -func=profile.txt</span><br><span class="line">mydomain.com/greetings/greetings.go:3:  Goodbye     100.0%</span><br><span class="line">mydomain.com/myprogram.go:10:       main        100.0%</span><br><span class="line">total:                  (statements)    100.0%</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="複数実行時のカバレッジ制御"><a href="#複数実行時のカバレッジ制御" class="headerlink" title="複数実行時のカバレッジ制御"></a>複数実行時のカバレッジ制御</h3><p>そのほかにも、<code>go tool covdata</code>には<code>merge</code>, <code>subtract</code>, <code>intersect</code>のサブコマンドが存在します。名前の通り、カバレッジを<code>結合</code>・<code>差分抽出</code>・<code>交差抽出</code>するためのサブコマンドです。</p><p>どれも使い方は同じで、<code>go tool covdata merge|subtract|intersect -i=dir1,dir2 -o output</code>のように使います。（merge のみ<code>-i</code>に 3 つ以上のディレクトリを指定できますが、それ以外は 2 つのみ可能です。）</p><p>ユースケースとしては以下などでしょうか。</p><ul><li><code>merge</code><ul><li>異なる環境下での実行結果を結合し、環境依存を吸収した状態でのカバレッジを確認する（公式記載の例）</li></ul></li><li><code>subtract</code><ul><li>異なる環境下での実行結果の差分を抽出し、環境依存箇所を特定する</li></ul></li><li><code>intersect</code><ul><li>異なる環境下での実行結果の交差部分を抽出し、環境に依存しない箇所を特定する</li><li>テストケースごとの実行結果の交差部分を抽出し、複数回実行されている（場合によっては無駄であり、テスト効率を下げている）箇所を特定する</li></ul></li></ul><p>パッと思いつく限りではありますが、有用なように見えます。</p><p>ほかにも<code>-cpuprofile</code>や<code>-memprofile</code>など、<code>go test</code>でできていたことは大体可能なようです。</p><h2 id="cover-オプションの利用例"><a href="#cover-オプションの利用例" class="headerlink" title="cover オプションの利用例"></a>cover オプションの利用例</h2><h3 id="想定されるユースケース"><a href="#想定されるユースケース" class="headerlink" title="想定されるユースケース"></a>想定されるユースケース</h3><p>さて、ざっくり概要をさらったところで、この<code>-cover</code>オプションのユースケースについて考えてみます。</p><p><a href="https://github.com/golang/go/issues/51430">proposal</a>には、<code>-cover</code>の導入経緯として、従来の<code>go test</code>の弱点が以下のように記載されています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A key weakness of the current implementation is that it does not scale well-- it</span><br><span class="line">is difficult or impossible to gather coverage data for applications as opposed</span><br><span class="line">to collections of packages, and for testing scenarios involving multiple</span><br><span class="line">runs/executions.</span><br></pre></td></tr></table></figure><p>ざっくり、従来の<code>go test</code>はアプリケーション全体のテストや、繰り返し実行されるシナリオに対するテストを弱点としている、といった内容で、なるほど確かにと思う内容です。</p><p>導入経緯を踏まえると、ユースケースとしては以下などが挙げられるかなと思います。</p><ol><li>DB・外部システム等との結合部分を含む、アプリケーション全体を通してのテスト品質分析</li><li>複数環境下での実行結果差分の解析</li><li>結合・シナリオテストの網羅性分析</li></ol><h3 id="REST-API-サーバを例に、cover-を利用したテストを試してみる"><a href="#REST-API-サーバを例に、cover-を利用したテストを試してみる" class="headerlink" title="REST API サーバを例に、cover を利用したテストを試してみる"></a>REST API サーバを例に、cover を利用したテストを試してみる</h3><p>ではせっかくなので、<code>-cover</code>を利用したテストを試してみようと思います。</p><h4 id="試してみる内容"><a href="#試してみる内容" class="headerlink" title="試してみる内容"></a>試してみる内容</h4><p>現在私が携わっている案件では、Go を用いて REST API サーバを複数台構築しています。</p><p>システム内のサーバ間通信に加え、外部システムとの通信等が発生することもあり、テストは API に対してリクエストを送り、レスポンス・DB 事後状態を検証する、E2E テストを実施しています。（システム全体ではフロントエンドも存在するため、厳密には End to End ではありませんが、API サーバ単独でも公開しているので、E2E と呼んでいます。）実際にテスト対象のサーバをローカル上に建て、別途 Go で書いたテストコードを<code>go test</code>で実行し、直接テスト対象サーバにリクエストを送っています。（他システムはモックサーバや実際のサーバを建てます。）</p><p>しかしながら、この方法ではテスト対象サーバのテストカバレッジを取得することはできないため、自動テストのうま味が半減しています。テストの網羅性担保も人力レビューによるものとなってしまっており、かなりつらい状況です。メンバーからもたびたび「カバレッジ取得したいね」「でも E2E だから…」と嘆きの声が上がっています。</p><p>というわけで，REST API の E2E テストのカバレッジ取得を試してみます。テスト用のコード（テストコード含む）は以下に配置してあります。</p><p>今回のテスト用に突貫で雑に作ったので、このコードに対するツッコミはご容赦ください。</p><p><a href="https://github.com/shomuMatch/goCoverTest">https://github.com/shomuMatch/goCoverTest</a></p><p>ところで、REST API サーバに対して、<code>-cover</code>を用いてテストする際に、一点注意点があります。</p><p>それは、カバレッジファイルはプログラムが実行終了した（<code>os.Exit()</code>が呼ばれた・<code>main()</code>が正常に<code>return</code>した）タイミングで出力されるということです。つまり、テスト中に<code>panic</code>を起こして落ちてしまったり、外部から強制終了させてしまうと、カバレッジの取得ができません。今回は特に<code>panic</code>を起こした場合のことは考えていませんが、テスト終了時に外部から kill させる想定のため、サーバは Graceful にシャットダウンする必要があります。</p><p>ここは渋川さんの記事を参考に書きました。<br><a href="https://future-architect.github.io/articles/20210212/">https://future-architect.github.io/articles/20210212/</a></p><h4 id="試してみる"><a href="#試してみる" class="headerlink" title="試してみる"></a>試してみる</h4><p>少し話がそれましたが、上記テスト用コードにて、カバレッジ取得を試していきます。</p><p>現時点で Go1.20 はリリースされていないため、正式版の<code>go</code>ではなく、<code>gotip</code>を使います。</p><p><a href="https://pkg.go.dev/golang.org/dl/gotip">https://pkg.go.dev/golang.org/dl/gotip</a></p><p>未インストールの方は以下にてインストールいただければと思います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go install golang.org/dl/gotip@latest</span><br><span class="line">$ gotip download</span><br></pre></td></tr></table></figure><p>それでは、カバレッジファイルの出力先を作成し、<code>-cover</code>をつけてビルド・実行してみましょう。特に普段と変わりなくサーバが立ち上がるはずです。</p><p>また、この時点でカバレッジファイルの出力先に meta-data file が出力されているはずです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> coverdir</span><br><span class="line">$ gotip build -cover .</span><br><span class="line">$ GOCOVERDIR=coverdir ./goCoverTest</span><br><span class="line">start receiving at :8888</span><br></pre></td></tr></table></figure><p>次に、（上記サーバをバックグラウンドとかコンテナで立てておくか）別のコンソールから、テストコードを実行しましょう。（ここは必ずしも<code>gotip</code>である必要はありません。）</p><p>ユニットテストコードを一切書いていないので当然ですが、<code>[no test files]</code>になっており、カバレッジが取れていません。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gotip <span class="built_in">test</span> github.com/shomuMatch/goCoverTest/... -cover -count=1</span><br><span class="line">?       github.com/shomuMatch/goCoverTest       [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/shomuMatch/goCoverTest/api   [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/shomuMatch/goCoverTest/api/path1     [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/shomuMatch/goCoverTest/api/path2     [no <span class="built_in">test</span> files]</span><br><span class="line">ok      github.com/shomuMatch/goCoverTest/test/e2e      0.005s  coverage: [no statements]</span><br></pre></td></tr></table></figure><p>本題はここからです。まずはサーバをシャットダウンしましょう。</p><p>シャットダウンが完了したタイミングで、カバレッジファイルの出力先に counter data file が出力されていればここまでは OK です。</p><p>ではカバレッジを確認してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gotip tool covdata percent -i coverdir</span><br><span class="line">        github.com/shomuMatch/goCoverTest       coverage: 92.9% of statements</span><br><span class="line">        github.com/shomuMatch/goCoverTest/api   coverage: [no statements]</span><br><span class="line">        github.com/shomuMatch/goCoverTest/api/path1     coverage: 90.0% of statements</span><br><span class="line">        github.com/shomuMatch/goCoverTest/api/path2     coverage: 88.9% of statements</span><br></pre></td></tr></table></figure><p>カバレッジが取れています！！</p><p>確認のため、あえて 100%にならないようテストしているのですが、そこも正しく得られていそうです。</p><p>せっかくなので html 形式でも確認してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gotip tool covdata textfmt -i coverdir -o profile.txt</span><br><span class="line">$ gotip tool cover -html=profile.txt -o profile.html</span><br></pre></td></tr></table></figure><p>上記コマンドで出力された html を表示すると、以下のように通っていない行がハイライトされた状態で見ることができます。</p><img src="/images/20230203a/image.png" alt="image.png" width="1200" height="1091" loading="lazy"><p>ということで、無事 REST API サーバの E2E テストのカバレッジ取得に成功しました。</p><p>しかも既存のテストの仕組みをほとんど変えることなく対応ができており、実際に案件に導入することも不可能ではなさそうです。（Go のバージョンアップ対応は必要ですが。）</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>ということで、Go1.20 で新たに追加されるテストの仕組みである、<code>-cover</code>オプションについて見ながら触ってきました。</p><p>当然ですがテストの品質はそのままプロダクトの品質に直結するもののため、こうして仕組みが強化されていくのはとても嬉しいですね。</p><p>もう少し頑張ればフロントエンドも含めた E2E テストを全自動で実施し、カバレッジを取得する事もできそうなので、継続して活用していきたいと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG DX ユニット所属、金欠コンサルタントの藤井です。最近でもないですが、SwitchBot</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.20" scheme="https://future-architect.github.io/tags/Go1-20/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.20 vetのアップデート</title>
    <link href="https://future-architect.github.io/articles/20230202a/"/>
    <id>https://future-architect.github.io/articles/20230202a/</id>
    <published>2023-02-01T15:00:00.000Z</published>
    <updated>2023-02-03T04:35:43.202Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230202a/top.png" alt="" width="800" height="460"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG&#x2F;DXユニット所属の今泉です。 <a href="/articles/20230123a/">Go 1.20連載</a>の6本目です。</p><h1 id="そもそもvetとは"><a href="#そもそもvetとは" class="headerlink" title="そもそもvetとは"></a>そもそもvetとは</h1><p>Goの標準ライブラリに組み込まれている、コンパイラによってキャッチされないエラーや懸念を検出し報告してくれるコードの静的解析ツールです。<br>機能の詳細は本記事では割愛しますが、以下コマンドで利用可能なチェックの一覧を確認することができます。</p><p><code>go tool vet help</code></p><p>公式のドキュメントは<a href="https://pkg.go.dev/cmd/vet">こちら</a>です。</p><p>類似のツールとしては以下のようなものがあります。<br>私のいるチームではstaticcheckを利用しています。</p><ul><li><a href="https://github.com/dominikh/go-tools">staticcheck</a></li><li><a href="https://github.com/kisielk/errcheck">errcheck</a></li></ul><h1 id="ループ変数が関数内に多重にネストされていた場合の検知"><a href="#ループ変数が関数内に多重にネストされていた場合の検知" class="headerlink" title="ループ変数が関数内に多重にネストされていた場合の検知"></a>ループ変数が関数内に多重にネストされていた場合の検知</h1><p>次のようなコードはよくあるケースでバグを含んでいます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tests := []<span class="keyword">struct</span>&#123; name <span class="type">string</span> &#125;&#123;&#123;name: <span class="string">&quot;とまと&quot;</span>&#125;, &#123;name: <span class="string">&quot;にんじん&quot;</span>&#125;, &#123;name: <span class="string">&quot;じゃがいも&quot;</span>&#125;&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line">fmt.Println(tt.name)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このコードをテストすると、とまとやにんじんが出力してほしい箇所もじゃがいもになってしまいます。<br>これはループ内に渡している変数<code>tt</code>がループごとに作成される変数ではなくループ全体で利用されるものであることに起因します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;go <span class="built_in">test</span> -race -v</span><br><span class="line">=== RUN   TestParallel</span><br><span class="line">=== RUN   TestParallel/とまと</span><br><span class="line">=== PAUSE TestParallel/とまと</span><br><span class="line">=== RUN   TestParallel/にんじん</span><br><span class="line">=== PAUSE TestParallel/にんじん</span><br><span class="line">=== RUN   TestParallel/じゃがいも</span><br><span class="line">=== PAUSE TestParallel/じゃがいも</span><br><span class="line">=== CONT  TestParallel/とまと</span><br><span class="line">じゃがいも</span><br><span class="line">=== CONT  TestParallel/じゃがいも</span><br><span class="line">じゃがいも</span><br><span class="line">=== CONT  TestParallel/にんじん</span><br><span class="line">じゃがいも</span><br><span class="line">--- PASS: TestParallel (0.00s)</span><br><span class="line">    --- PASS: TestParallel/とまと (0.00s)</span><br><span class="line">    --- PASS: TestParallel/じゃがいも (0.00s)</span><br><span class="line">    --- PASS: TestParallel/にんじん (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      /src 1.253s</span><br></pre></td></tr></table></figure><p>go1.20ではこのような問題を検知してくれるようになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;go1.20rc3 vet</span><br><span class="line"><span class="comment"># /src</span></span><br><span class="line">.\main_test.go:60:16: loop variable tt captured by func literal</span><br></pre></td></tr></table></figure><h1 id="不正な時刻形式の検知"><a href="#不正な時刻形式の検知" class="headerlink" title="不正な時刻形式の検知"></a>不正な時刻形式の検知</h1><p>time layoutが2006-01-02(yyyy-mm-dd) ではなく、2006-02-01(yyyy-dd-mm) となっていた場合に検知してくれるようになりました。<br>わたしにとってはいまいちピンときませんが、アメリカ式時刻が馴染み深い方は間違えてしまったりするのでしょうか…？<br><a href="https://github.com/golang/go/issues/48801">proposal</a>を確認すると予想以上にこの間違いは発生しており、vetへの追加が決まったようです。</p><blockquote><p>There is a lots of projects on Github with this issue:<br>多くのGithub上のプロジェクトでこの問題があるようだ<br><a href="https://github.com/search?l=GO&amp;q=%222006-02-01%22+language:Go&amp;type=Code">https://github.com/search?l=GO&amp;q=%222006-02-01%22+language%3AGo&amp;type=Code</a><br>Even bigger projects have or had bad code:<br>巨大なプロジェクトですら同様の問題を抱えていたりする<br><a href="https://github.com/couchbase/go-couchbase/blob/118e3f09dbf08c7310d6bc1a5cfe5e6f8a0e3c32/populate/populate.go#L18">https://github.com/couchbase/go-couchbase/blob/118e3f09dbf08c7310d6bc1a5cfe5e6f8a0e3c32/populate/populate.go#L18</a><br><a href="https://github.com/gobuffalo/buffalo/blob/20f545e952c31f65eadf7a4833388ed2eaa37589/binding/decoders/time_test.go#L55-L56">https://github.com/gobuffalo/buffalo/blob/20f545e952c31f65eadf7a4833388ed2eaa37589/binding/decoders/time_test.go#L55-L56</a><br>juju&#x2F;juju@f992f35</p></blockquote><blockquote><p>That’s pretty surprising but it does seem to meet the vet bars:<br>Correctness - a real or potential bug for sure<br>Frequency - seems to happen more than we expected!<br>Precision - can’t imagine why anyone would use YYYY-DD-MM date format<br>驚いたことに、vetの対象とすべき基準をみたしているようです。<br>・正確さ - 確かに実際または潜在的なバグであること<br>・頻度   - 予想以上に発生しているようだ！<br>・精度   - YYYY-DD-MM 日付を使用するケースはありえないと思う</p></blockquote><p>※日本語は意訳です</p><p>ただ、 <a href="https://future-architect.github.io/articles/20230127a/">Go 1.20連載の4本目</a>で宮永さんに紹介いただいている通りlayoutにDateTime,DateOnly,TimeOnlyが追加されました。<br>新しいlayoutを使用することでこのミスは防ぐことができると思慮します。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回はgo vetのアップデートについて紹介させていただきました。</p><p>些細なアップデートですが、静的解析も少しずつ改良されていく様子が伺えて面白かったです。</p><p>次は連載の最終回で藤井さんの<a href="/articles/20230203a/">go build に追加される cover オプション（利用例付き）</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230202a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;460&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.20" scheme="https://future-architect.github.io/tags/Go1-20/"/>
    
  </entry>
  
  <entry>
    <title>New ReverseProxy Rewrite hook を動かしながら理解する</title>
    <link href="https://future-architect.github.io/articles/20230131a/"/>
    <id>https://future-architect.github.io/articles/20230131a/</id>
    <published>2023-01-30T15:00:00.000Z</published>
    <updated>2023-02-02T02:27:20.222Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230131a/top.png" alt="" width="800" height="481"><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li>はじめに</li><li>概要を確認</li><li>Proposal の内容と RFC の確認</li><li>実際に動かしながら、Go1.19 と Go1.20 の違いを確認</li><li>まとめ</li></ul><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。<br>フューチャーアーキテクト株式会社、HR&#x2F;新卒採用チームの棚井です。</p><p>略歴として、フューチャーに新卒入社、Technology Innovation Group で IT コンサルタントを 3 年、Global Design Group で新規事業開発を 1 年と担当し、現在は Human Resources（つまり HR）でバックオフィスの新卒採用業務を担当しております。</p><p>本記事は<a href="/articles/20230123a/">Go 1.20 リリース連載</a> の 1 つです。<br>Go1.20 の <strong>New ReverseProxy Rewrite hook</strong> について解説していきます。</p><h1 id="概要を確認"><a href="#概要を確認" class="headerlink" title="概要を確認"></a>概要を確認</h1><p>New ReverseProxy Rewrite hook はコアライブラリー（httputil）への機能追加です。<br>Release Note では<a href="https://tip.golang.org/doc/go1.20#reverseproxy_rewrite">こちら</a>、Proposal は<a href="https://github.com/golang/go/issues/50580">こちら</a>から確認できます。</p><p>リリースノートを見ると、英文で以下のような記載があります。</p><blockquote><p><strong>New ReverseProxy Rewrite hook</strong><br>The httputil.ReverseProxy forwarding proxy includes a new Rewrite hook function, superseding the previous Director hook.</p><p>The Rewrite hook accepts a ProxyRequest parameter, which includes both the inbound request received by the proxy and the outbound request that it will send. Unlike Director hooks, which only operate on the outbound request, this permits Rewrite hooks to avoid certain scenarios where a malicious inbound request may cause headers added by the hook to be removed before forwarding. See issue <a href="https://github.com/golang/go/issues/50580">#50580</a>.</p><p>The ProxyRequest.SetURL method routes the outbound request to a provided destination and supersedes the NewSingleHostReverseProxy function. Unlike NewSingleHostReverseProxy, SetURL also sets the Host header of the outbound request.</p><p>The ProxyRequest.SetXForwarded method sets the X-Forwarded-For, X-Forwarded-Host, and X-Forwarded-Proto headers of the outbound request. When using a Rewrite, these headers are not added by default.</p><p>An example of a Rewrite hook using these features is:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">proxyHandler := &amp;httputil.ReverseProxy&#123;</span><br><span class="line">   Rewrite: <span class="function"><span class="keyword">func</span><span class="params">(r *httputil.ProxyRequest)</span></span> &#123;</span><br><span class="line">    r.SetURL(outboundURL) <span class="comment">// Forward request to outboundURL.</span></span><br><span class="line">    r.SetXForwarded()     <span class="comment">// Set X-Forwarded-* headers.</span></span><br><span class="line">   r.Out.Header.Set(<span class="string">&quot;X-Additional-Header&quot;</span>, <span class="string">&quot;header set by the proxy&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReverseProxy no longer adds a User-Agent header to forwarded requests when the incoming request does not have one.</p></blockquote><p>リリースノートでの説明について、<a href="https://github.com/golang/go/blob/release-branch.go1.20/src/net/http/httputil/reverseproxy.go">Go1.20 の実コード</a>と照らし合わせながら私なりに日本語訳しますと、</p><ul><li>httputil パッケージの ReverseProxy に、Rewrite hook を追加します。<ul><li>Rewrite が提供する機能は、Director に取って代わる（supersede する）ものです。</li><li>この機能より、プロキシサーバーにて付与した “hop-by-hop” ヘッダーが、意図せずに削除されてしまう問題（<a href="https://github.com/golang/go/issues/50580">issue</a>）に対応できるようになります。</li></ul></li><li>Rewrite が受け取る構造体として ProxyRequest も追加します。<ul><li>ProxyRequest.SetURL が提供する機能は、NewSingleHostReverseProxy に取って代わるものです。</li><li>アウトバウンドリクエストのホストヘッダを設定します。</li></ul></li></ul><p>という感じでしょうか。</p><p>私自身が Go でリバースプロキシを立てた経験に疎く、1.19 から 1.20 への変更箇所がどのようなものなのか？をイメージできなかったので、テストコード側の利用例を見たところ、httptest.NewServer の引数に http.Handler として渡す中身が NewSingleHostReverseProxy（Director 型）から func(r *httputil.ProxyRequest) {…} （Rewrite 型）に変わっていました。</p><p>それぞれのコードについて、Go1.20は<a href="https://github.com/golang/go/blob/release-branch.go1.20/src/net/http/httputil/example_test.go#L96-L128">release-branch.go1.20</a>を、Go1.19は<a href="https://github.com/golang/go/blob/release-branch.go1.19/src/net/http/httputil/example_test.go#L96-L123">release-branch.go1.19</a>を参照しています。また、Go1.20とGo1.19のコード差分について、Go1.20 は「+」 1.19は「-」の diff で表現します。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package httputil</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;net/url&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func ExampleReverseProxy() &#123;</span><br><span class="line">backendServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">fmt.Fprintln(w, &quot;this call was relayed by the reverse proxy&quot;)</span><br><span class="line">&#125;))</span><br><span class="line">defer backendServer.Close()</span><br><span class="line"></span><br><span class="line">rpURL, err := url.Parse(backendServer.URL)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="addition">+frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span></span><br><span class="line"><span class="addition">+Rewrite: func(r *httputil.ProxyRequest) &#123;</span></span><br><span class="line"><span class="addition">+r.SetXForwarded()</span></span><br><span class="line"><span class="addition">+r.SetURL(rpURL)</span></span><br><span class="line"><span class="addition">+&#125;,</span></span><br><span class="line"><span class="addition">+&#125;)</span></span><br><span class="line"><span class="deletion">-frontendProxy := httptest.NewServer(httputil.NewSingleHostReverseProxy(rpURL))</span></span><br><span class="line">defer frontendProxy.Close()</span><br><span class="line"></span><br><span class="line">resp, err := http.Get(frontendProxy.URL)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := io.ReadAll(resp.Body)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;%s&quot;, b)</span><br><span class="line"></span><br><span class="line">// Output:</span><br><span class="line">// this call was relayed by the reverse proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>どちらのコードも実行してみると、プロキシ経由でのレスポンスが出力されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">this call was relayed by the reverse proxy</span><br></pre></td></tr></table></figure><p>リリースノートでの説明が「取って代わる（supersede する）機能」になっていることに対応して、利用例のコードも当然 Go1.20 スタイルにアップデートされているようです。</p><p>概要の確認はここまでとして、この Rewrite hook について「それで、何が嬉しいの？」の疑問を解消するために、Proposal の内容と照らし合わせながら説明していきます。</p><h1 id="Proposal-の内容と-RFC-の確認"><a href="#Proposal-の内容と-RFC-の確認" class="headerlink" title="Proposal の内容と RFC の確認"></a>Proposal の内容と RFC の確認</h1><p>Proposal は <a href="https://github.com/golang/go/issues/50580">net&#x2F;http&#x2F;httputil: ReverseProxy can remove headers added by Director #50580</a> です。</p><p>issue では 2 つの RFC（RFC 2616, section 13.5.11、RFC 7230, section 6.1）に言及されています。<br>RFC のリンクを貼ってもらえているので、ちょっとだけ内容を確認してみます。</p><p>まず、RFC 2616, section 13.5.1 End-to-end and Hop-by-hop Headers の内容を見ていくと、以下のような記述があります。<br><a href="https://datatracker.ietf.org/doc/html/rfc2616#section-13.5.1">RFC 2616, section 13.5.1</a></p><blockquote><p>キャッシュプロキシと非キャッシュプロキシの動作を定義する目的のため、HTTP ヘッダーを「end-to-end」と「hop-by-hop」という 2 つのカテゴリに分類します。end-to-end はリクエストまたはレスポンスの最終的な受信者にまで送信されるヘッダーで、hop-by-hop はプロキシやキャッシュを通過しないヘッダーです。<br>RFC にて言及された hop-by-hop に該当するヘッダーは以下です。</p><ul><li>Connection</li><li>Keep-Alive</li><li>Proxy-Authenticate</li><li>Proxy-Authorization</li><li>TE</li><li>Trailers</li><li>Transfer-Encoding</li><li>Upgrade</li></ul><p>上記以外で HTTP&#x2F;1.1 にて定義されたヘッダーは end-to-end 側に含まれます。</p></blockquote><p>ちなみに、issue 内では</p><blockquote><p>RFC 2616, section 13.5.1 specified a list of hop-by-hop headers which HTTP proxies should not forward.<br>RFC 2616 セクション 13.5.1 は、プロキシサーバがフォワーディングすべきでない hop-by-hop ヘッダーのリストを定義している</p></blockquote><p>と説明されています。</p><p>次に、 RFC 7230, section 6.1 Connection については、issue にて<br><a href="https://datatracker.ietf.org/doc/html/rfc7230#section-6.1">RFC 7230, section 6.1</a></p><blockquote><p>RFC 7230, section 6.1 replaces the hardcoded list of hop-by-hop headers with the ability for the originator of a request to specify the hop-by-hop headers in the “Connection” header.<br>RFC7230 セクション 6.1 では、リクエストの送信元が、ハードコードされた hop-by-hop ヘッダーのリストを、Connection ヘッダーで指定した hop-by-hop ヘッダーのリストに置き換えている。</p></blockquote><p>との説明があります。</p><p>ざっくりと要約すると、RFC 2616,section 13.5.1 にて hop-by-hop ヘッダーに該当する項目が定義されて、RFC 7230, section 6.1 にてクライアントと通信するサーバーとの hop-by-hop な情報については Connection ヘッダーを利用することになった、ということです。</p><p>このような RFC にて定義された「hop-by-hop ヘッダーを通過させない仕様」や「Connection ヘッダー情報のハンドリング仕様」への対応実装は、<a href="https://github.com/golang/go/blob/release-branch.go1.20/src/net/http/httputil/reverseproxy.go#L289-L543">この部分</a>で確認できます。</p><h1 id="実際に動かしながら、Go1-19-と-Go1-20-の違いを確認"><a href="#実際に動かしながら、Go1-19-と-Go1-20-の違いを確認" class="headerlink" title="実際に動かしながら、Go1.19 と Go1.20 の違いを確認"></a>実際に動かしながら、Go1.19 と Go1.20 の違いを確認</h1><p><a href="https://wgithub.com/golang/go/blob/release-branch.go1.20/src/net/http/httputil/example_test.go">example_test.go</a>のコードを加工しながら、Go1.20 と Go1.19 での挙動の違いを見ていきます。</p><p>Go1.20 側のコードでは、新しく追加された <code>Rewrite</code> を呼び出しています。<br>Go1.19 には <code>Rewrite</code> がないため、代わりに <code>Director</code> を利用します。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;net/http/httptest&quot;</span><br><span class="line">&quot;net/http/httputil&quot;</span><br><span class="line">&quot;net/url&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">backendServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">dump, err := httputil.DumpRequest(r, false)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Fprintln(w, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintln(w, string(dump))</span><br><span class="line">&#125;))</span><br><span class="line">defer backendServer.Close()</span><br><span class="line"></span><br><span class="line">rpURL, err := url.Parse(backendServer.URL)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="addition">+frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span></span><br><span class="line"><span class="addition">+Rewrite: func(r *httputil.ProxyRequest) &#123;</span></span><br><span class="line"><span class="addition">+r.SetURL(rpURL)</span></span><br><span class="line"><span class="addition">+&#125;,</span></span><br><span class="line"><span class="addition">+&#125;)</span></span><br><span class="line"><span class="deletion">-frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span></span><br><span class="line"><span class="deletion">-Director: func(r *http.Request) &#123;</span></span><br><span class="line"><span class="deletion">-r.URL = rpURL</span></span><br><span class="line"><span class="deletion">-&#125;,</span></span><br><span class="line"><span class="deletion">-&#125;)</span></span><br><span class="line">defer frontendProxy.Close()</span><br><span class="line"></span><br><span class="line">resp, err := http.Get(frontendProxy.URL)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := io.ReadAll(resp.Body)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;%s&quot;, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この状態で動かしてみると、Go1.20 と Go1.19 では、それぞれ以下の出力が得られます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go1.20</span></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:39973</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go1.19</span></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:39259</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><p>Go1.19 には <code>X-Forwarded-For</code> が自動追加されていますが、Go1.20 には追加されていないことがわかります。</p><p>リリースノートにて</p><blockquote><p>The ProxyRequest.SetXForwarded method sets the X-Forwarded-For, X-Forwarded-Host, and X-Forwarded-Proto headers of the outbound request. When using a Rewrite, these headers are not added by default.</p></blockquote><p>と記載があるとおり、<code>Rewrite</code> を使う場合には、ProxyRequest.SetXForwarded を呼び出すことで <code>X-Forwarded-For</code>, <code>X-Forwarded-Host</code>, <code>X-Forwarded-Proto</code> の 3 つのヘッダーが追加されるようです。Director では <code>X-Forwarded-For</code> だけだったため、残りの 2 つも同時に追加したいという提案は<a href="https://github.com/golang/go/issues/50465">こちらの issue</a>で会話されています。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">...</span><br><span class="line">frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span><br><span class="line">Rewrite: func(r *httputil.ProxyRequest) &#123;</span><br><span class="line">r.SetURL(rpURL)</span><br><span class="line"><span class="addition">+r.SetXForwarded()</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のように、ProxyRequest.SetXForwarded を追加して再度実行すると、バックエンドに到達するリクエスト内のヘッダーが 3 つ増えていることがわかります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go1.20</span></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:46465</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">X-Forwarded-Host: 127.0.0.1:44977</span><br><span class="line">X-Forwarded-Proto: http</span><br></pre></td></tr></table></figure><p>RFC2616 では「hop-by-hop ヘッダーの削除」が定義されているので、次はこの動作確認として以下のコードを動かしてみます。<br>処理内部で新たにリクエストを作成して、ヘッダーに「Connection: Keep-Alive」を追加しています。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httputil&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">backendServer := httptest.NewServer(http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">dump, err := httputil.DumpRequest(r, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintln(w, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintln(w, <span class="type">string</span>(dump))</span><br><span class="line">&#125;))</span><br><span class="line"><span class="keyword">defer</span> backendServer.Close()</span><br><span class="line"></span><br><span class="line">rpURL, err := url.Parse(backendServer.URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span><br><span class="line">Rewrite: <span class="function"><span class="keyword">func</span><span class="params">(r *httputil.ProxyRequest)</span></span> &#123;</span><br><span class="line">r.SetURL(rpURL)</span><br><span class="line">r.SetXForwarded()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">defer</span> frontendProxy.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// create request</span></span><br><span class="line">req, err := http.NewRequest(http.MethodGet, frontendProxy.URL, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add connection header</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;keep-alive&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// check request content</span></span><br><span class="line">dump, err := httputil.DumpRequest(req, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(dump))</span><br><span class="line"></span><br><span class="line">resp, err := <span class="built_in">new</span>(http.Client).Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらも、Go1.20 と Go1.19 のそれぞれで動かしてみると、どちらのバージョンにおいても、リクエスト生成直後に付与したヘッダー「Connection: Keep-Alive」が、プロキシサーバーを経由したのちに RFC の定義通りに削除されていることがわかります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go1.20</span></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:45977</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line"></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:32815</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">X-Forwarded-Host: 127.0.0.1:44977</span><br><span class="line">X-Forwarded-Proto: http</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go1.19</span></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:43403</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:43403</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><p>こまで来てやっと、Proposal タイトルの「ReverseProxy can remove headers added by Director」について説明できます。<br>Proposal で提起された問題箇所を引用すると</p><blockquote><p>For example, if an inbound request contains a Connection: forwarded header, then any Forwarded header added by the Director will not be sent to the backend. This is probably surprising; under some circumstances, it may be a security vulnerability.<br>例えば、もしインバウンドリクエストが「Connection: forwarded」のヘッダーを保持している場合、Director により追加された Forwarded ヘッダーは、バックエンド側に送信されません。これはおそらく驚くべきことであり、ある状況下においてはセキュリティ上の脆弱性かもしれません。</p></blockquote><p>とあります。<br>この現象を再現するために、以下のコードを Go1.19 環境にて動かしてみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httputil&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">backendServer := httptest.NewServer(http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">dump, err := httputil.DumpRequest(r, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintln(w, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintln(w, <span class="type">string</span>(dump))</span><br><span class="line">&#125;))</span><br><span class="line"><span class="keyword">defer</span> backendServer.Close()</span><br><span class="line"></span><br><span class="line">rpURL, err := url.Parse(backendServer.URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span><br><span class="line">Director: <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request)</span></span> &#123;</span><br><span class="line">r.URL = rpURL</span><br><span class="line">r.Header.Set(<span class="string">&quot;X-Forwarded-Proto&quot;</span>, <span class="string">&quot;http&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">defer</span> frontendProxy.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// define request</span></span><br><span class="line">req, err := http.NewRequest(http.MethodGet, frontendProxy.URL, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add connection:forwarded header</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;X-Forwarded-Proto&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// check request content</span></span><br><span class="line">dump, err := httputil.DumpRequest(req, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(dump))</span><br><span class="line"></span><br><span class="line">resp, err := <span class="built_in">new</span>(http.Client).Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>インバウンドリクエストのヘッダーに「Connection: X-Forwarded-Proto」を付与して、Director にて「X-Forwarded-Proto: http」を追加しています。<br>この状態で実行すると、以下の出力が得られます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line"><span class="comment"># Go1.19</span></span><br><span class="line"></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:46127</span><br><span class="line">Connection: X-Forwarded-Proto</span><br><span class="line"></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:46127</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><p>出力内容から、Director で追加した「X-Forwarded-Proto: http」がバックエンドまで到達していないことがわかります。</p><p>Go1.20 で追加された Rewrite hook はこの問題に対応するもので、先に見ましたように <a href="https://pkg.go.dev/net/http/httputil@master#ProxyRequest.SetXForwarded">ProxyRequest.SetXForwarded</a> を利用して 3 つの Forwarded ヘッダー（The X-Forwarded-For、X-Forwarded-Host、X-Forwarded-Proto）を追加することで「Director で追加した X-Forwarded- ヘッダーが削除されてしまう現象」対応しています。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>プロキシサーバーのリクエストルーティングで、これまで Director を使っていたところは、これからは Rewrite を使おう</li><li>Rwrite に渡す ProxyRequest にて SetXForwarded を呼ぶことで、プロキシサーバーの情報 X-Forwarded-For,Host,Proto を自動追加してくれて便利</li></ul><p>次は今泉さんの<a href="/articles/20230202a/">vetのアップデート</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230131a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;481&quot;&gt;

&lt;h1 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.20" scheme="https://future-architect.github.io/tags/Go1-20/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.20 HTTP ResponseController</title>
    <link href="https://future-architect.github.io/articles/20230128a/"/>
    <id>https://future-architect.github.io/articles/20230128a/</id>
    <published>2023-01-27T15:00:00.000Z</published>
    <updated>2023-01-31T03:06:21.557Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230128a/top.png" width="" height="800" width="457"><p>TIGの辻です。Go 1.20 <a href="/articles/20230123a/">リリース連載</a>の5本目は Core library の <a href="https://tip.golang.org/doc/go1.20#http_responsecontroller:~:text=list%20of%20errors.-,HTTP%20ResponseController,-The%20new%20%22net">HTTP ResponseController</a> のアップデートを紹介します<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><h2 id="何が変わるのか"><a href="#何が変わるのか" class="headerlink" title="何が変わるのか"></a>何が変わるのか</h2><ul><li><code>net/http</code> パッケージに新しく <code>ResponseController</code> 型が追加されます</li><li>従来から存在する <code>ResponseWriter</code> インターフェースでは実現できなかったHTTPリクエストごとの制御が実現できるようになります</li><li><code>ResponseController</code> 型にある <code>SetReadDeadline()</code> や <code>SetWriteDeadline()</code> メソッドを利用して、リクエストごとの読み書きのデッドラインを設定できます</li></ul><h2 id="何が嬉しいのか"><a href="#何が嬉しいのか" class="headerlink" title="何が嬉しいのか"></a>何が嬉しいのか</h2><p>Go のユーザーとして見たときの <code>ResponseController</code> 型の追加による具体的な嬉しいポイントはHTTPハンドラごとに読み書きのデッドラインが設定できることです。サーバー全体ではデフォルトのデッドラインを設定しつつ、特定のハンドラのみデッドラインを伸ばす、など柔軟な設定が可能になります。</p><p>ハンドラでの使用例は以下です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RequestHandler</span><span class="params">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class="line">  rc := http.NewResponseController(w)</span><br><span class="line">  <span class="comment">// 大きなレスポンスを送信するため Server.WriteTimeout を無効化する</span></span><br><span class="line">  rc.SetWriteDeadline(time.Time&#123;&#125;)</span><br><span class="line">  io.Copy(w, bigData)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみにサーバー単位のデッドラインは <code>http.Server</code> 構造体の <code>ReadTimeout</code> や <code>WriteTimeout</code> フィールドから設定できます。</p><h2 id="なぜこのAPIになったのか"><a href="#なぜこのAPIになったのか" class="headerlink" title="なぜこのAPIになったのか"></a>なぜこのAPIになったのか</h2><p>ここからは、この変更に至るまでの背景の一部を、私が感じたことも含めて、記載したいと思います。</p><p>実は <code>http.Handler</code> がハンドラ単位で読み書きのデッドラインの設定ができない、という Issue は2016年に起票されています (<a href="https://github.com/golang/go/issues/16100">#16100</a>)。なぜこの課題の解決に7年も要したのでしょうか？この一因として後方互換性との戦いがあったと想像しています。</p><p><code>http.Handler</code> は以下のような <code>ServeHTTP()</code> があるインターフェースです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また <code>http.ResponseWriter</code> も以下のような <code>Header()</code>, <code>Write()</code>, <code>WriteHeader()</code> をもつインターフェースです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ResponseWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">Header() Header</span><br><span class="line">Write([]<span class="type">byte</span>) (<span class="type">int</span>, <span class="type">error</span>)</span><br><span class="line">WriteHeader(statusCode <span class="type">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ハンドラの読み書きに関するデッドラインを設定できるAPIは <code>Handler</code> や <code>ResponseWriter</code> にはありません。それでは <code>ResponseWriter</code> インターフェースに以下のような <code>SetReadDeadline()</code> や <code>SetWriteDeadline()</code> APIを追加すればいいのではないか？と思うかもしれません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ResponseWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">Header() Header</span><br><span class="line">Write([]<span class="type">byte</span>) (<span class="type">int</span>, <span class="type">error</span>)</span><br><span class="line">WriteHeader(<span class="type">int</span>)</span><br><span class="line">SetReadDeadline(time.Time) <span class="type">error</span><span class="comment">// ★後方互換性を壊すためインターフェースに新規関数の追加はできない</span></span><br><span class="line">SetWriteDeadline(time.Time)<span class="type">error</span><span class="comment">// ★後方互換性を壊すためインターフェースに新規関数の追加はできない</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>しかし<a href="https://go.dev/doc/go1compat">Go1の互換性ポリシー</a>からこのような破壊的変更はできません。<code>SetReadDeadline()</code> と <code>SetWriteDeadline()</code> を持たない型が <code>ResponseWriter</code> インターフェースを満たさなくなってしまいます。真野さんの <a href="https://future-architect.github.io/articles/20230125a/">contextパッケージのWithCancelCauseとCause</a> の記事でも、このインターフェースの後方互換性問題に触れています。</p><p>それではどうするか？</p><p>インターフェースを拡張したいときに <code>ResponseWriter</code> インターフェースとは別のインターフェースにAPIを定義して、<code>ResponseWriter</code> インターフェースを実装する型に別インターフェースのメソッドを実装させる、というのが一つの手段としてあります。一例はHTTPハンドラがバッファリングしているデータをクライアントにフラッシュできる <code>http.Flusher</code> インターフェースです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Flusher <span class="keyword">interface</span> &#123;</span><br><span class="line">Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Goのデフォルトの HTTP&#x2F;1.x と HTTP&#x2F;2 の <code>ResponseWriter</code> の実装は <code>Flusher</code> もサポートしており、これは<a href="https://pkg.go.dev/net/http#Flusher">文章化</a>されています。</p><p>これを利用すると、たとえば、アプリケーションのハンドラ内では次のように型アサーションを組み合わせながら <code>Flush()</code> を呼び出せます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;Hello, world.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> f, ok := w.(http.Flusher); ok &#123;</span><br><span class="line">f.Flush()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記と同様のアプローチで</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadDeadliner <span class="keyword">interface</span> &#123;</span><br><span class="line">SetReadDeadline(deadline time.Time) <span class="type">error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>のようなインターフェースを定義することもできたでしょう。しかし <code>ResponseWriter</code> 型をラップしたミドルウェアとの相性など、使い勝手が悪いため見送られています。</p><p>議論のすえに生み出された解決策が <a href="https://github.com/golang/go/issues/54136">#54136</a> で、リリースノートに記載されていたアプローチです。すなわち <code>ResponseWriter</code> 型をラップした <code>http.ResponseController</code> 構造体を定義する、ということです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewResponseController</span><span class="params">(rw ResponseWriter)</span></span> *ResponseController &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;ResponseController&#123;rw&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ResponseController <span class="keyword">struct</span> &#123;</span><br><span class="line">rw ResponseWriter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ResponseController)</span></span> Flush() <span class="type">error</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ResponseController)</span></span> Hijack() (net.Conn, *bufio.ReadWriter, <span class="type">error</span>) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ResponseController)</span></span> SetReadDeadline(deadline time.Time) <span class="type">error</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ResponseController)</span></span> SetWriteDeadline(deadline time.Time) <span class="type">error</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>インターフェースではなく構造体を追加している利点として、将来的に <code>*ResponseController</code> に新しいメソッドを追加したい場合に後方互換性が壊れない、という点があるでしょう。</p><p>注意点はドキュメントを見るとわかるように <code>NewResponseController()</code> の引数は <code>Handler.ServeHTTP()</code> メソッドに渡された元の値であるか、元の <code>ResponseWriter</code> を返す <code>Unwrap()</code> メソッドを持っている必要があることです。</p><p>この意味は</p><ul><li>Go のデフォルトの <code>ResponseWriter</code> の実装は <code>ResponseWriter</code> インターフェースのメソッドに加えて <code>Flush()</code>, <code>Hijack()</code>, <code>SetReadDeadline()</code>, <code>SetWriteDeadline()</code> も実装している</li><li>サードパーティでラップされた <code>ResponseWriter</code> は <code>Flush()</code>, <code>Hijack()</code>, <code>SetReadDeadline()</code>, <code>SetWriteDeadline()</code> のすべてを実装する必要はなく <code>Unwrap()</code> でもとの <code>ResponseWriter</code> の値を返却すれば良い</li></ul><p>と理解しています。ラップする場合は <code>responsecontroller_test.go</code> のテストケースにもあるように基本的には以下のような <code>Unwrap()</code> メソッドを実装することになるでしょう。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> wrapWriter <span class="keyword">struct</span> &#123;</span><br><span class="line">ResponseWriter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w wrapWriter)</span></span> Unwrap() ResponseWriter &#123;</span><br><span class="line"><span class="keyword">return</span> w.ResponseWriter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Unwrap()</code> メソッドの効果は <code>*ResponseController</code> の実装を見るとわかるでしょう。 <code>Hijack()</code> の実装は以下のようになっています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ResponseController)</span></span> Hijack() (net.Conn, *bufio.ReadWriter, <span class="type">error</span>) &#123;</span><br><span class="line">rw := c.rw</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> t := rw.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> Hijacker:</span><br><span class="line"><span class="keyword">return</span> t.Hijack()</span><br><span class="line"><span class="keyword">case</span> rwUnwrapper:</span><br><span class="line">rw = t.Unwrap()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, errNotSupported()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仮にサードパーティが実装している <code>ResponseWriter</code> の値が <code>Hijacker</code> インターフェースを実装していなくても <code>Unwrap()</code> でもとの <code>ResponseWriter</code> の値を返却していれば、その <code>Hijack()</code> メソッドが呼び出されます。<code>for</code> ループで再帰しているのがおしゃれですね<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>GoのHTTP ResponseControllerのアップデートの概要とその背景を紹介しました。後方互換性との戦いやコミュニティへの配慮が感じられたのではないでしょうか。</p><p>次は棚井さんの<a href="/articles/20230131a/">New ReverseProxy Rewrite hook を動かしながら理解する</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">なお本文中のGoのソースバージョンは <code>go1.20rc3</code> です。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">ちなみに <code>context</code> パッケージでも似たような <code>for</code> 文で再帰している実装があります。よくある実装パターンの一つでしょう。<a href="https://github.com/golang/go/blob/b3160e8bcedb25c5266e047ada01b6f462521401/src/context/context.go#L629-L653">https://github.com/golang/go/blob/b3160e8bcedb25c5266e047ada01b6f462521401/src/context/context.go#L629-L653</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230128a/top.png&quot; width=&quot;&quot; height=&quot;800&quot; width=&quot;457&quot;&gt;

&lt;p&gt;TIGの辻です。Go 1.20 &lt;a href=&quot;/articles/20230123a/&quot;&gt;リリース連載&lt;/a&gt;の5本目は</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.20" scheme="https://future-architect.github.io/tags/Go1-20/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.20 timeパッケージのアップデート</title>
    <link href="https://future-architect.github.io/articles/20230127a/"/>
    <id>https://future-architect.github.io/articles/20230127a/</id>
    <published>2023-01-26T15:00:00.000Z</published>
    <updated>2023-01-30T03:22:42.040Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230127a/top.png" alt="top.png" width="1200" height="675" loading="lazy"><p>The Gopher character is based on the Go mascot designed by <a href="http://reneefrench.blogspot.com/">Renée French</a>.</p><p>Gopherのイラストは<a href="https://github.com/egonelbre/gophers">egonelbre&#x2F;gophers</a>を利用しました。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG&#x2F;EXユニット所属の宮永です。 <a href="/articles/20230123a/">Go 1.20連載</a>の4本目です。</p><p><a href="https://tip.golang.org/doc/go1.20">Go 1.20 Release Notes</a>に記載のMinor changes to the libraryの<code>time</code>パッケージのアップデート4点について解説します。</p><h1 id="1-layoutにDateTime-DateOnly-TimeOnlyが追加された"><a href="#1-layoutにDateTime-DateOnly-TimeOnlyが追加された" class="headerlink" title="1. layoutにDateTime,DateOnly,TimeOnlyが追加された"></a>1. layoutに<code>DateTime</code>,<code>DateOnly</code>,<code>TimeOnly</code>が追加された</h1><p>Proposalは<a href="https://github.com/golang/go/issues/52746">こちらのissue</a>でされています。</p><p>Goの日時表現ですが、他の多くの言語とは勝手が異なります。<br>今回のアップデートを確認する前に他の言語とGoとの日時表現の違いについて確認します。</p><p>例えば、Pythonで<code>yyyy-mm-dd</code>という形式でフォーマットをかける場合は以下の様にします。</p><figure class="highlight python"><figcaption><span>Pythonの場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"> <span class="comment"># 最新時刻を取得</span></span><br><span class="line">t = datetime.now()</span><br><span class="line">ymd = t.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;時刻:&quot;</span>, t)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%Y-%m-%dでフォーマット:&quot;</span>, ymd)</span><br></pre></td></tr></table></figure><p>Rustの場合は以下の様にします。</p><figure class="highlight rust"><figcaption><span>Rustの場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> chrono::Utc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 最新時刻を取得</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">t</span> =Utc::<span class="title function_ invoke__">now</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ymd</span> = t.<span class="title function_ invoke__">format</span>(<span class="string">&quot;%Y-%m-%d&quot;</span>).<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;時刻:&#123;&#125;&quot;</span>,t);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;%Y-%m-%dでフォーマット:&#123;&#125;&quot;</span>, ymd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>いずれの場合も文字列<code>%Y-%m-%d</code>を与えてフォーマットしています。<br>ではGoの場合はどうでしょうか。</p><figure class="highlight go"><figcaption><span>Goの場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//最新時刻を取得</span></span><br><span class="line">t := time.Now()</span><br><span class="line">ymd := time.Now().Format(<span class="string">&quot;2006-01-02&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;時刻:&quot;</span>, t)</span><br><span class="line">fmt.Println(<span class="string">&quot;%Y-%m-%dでフォーマット:&quot;</span>, ymd)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2006-01-02</code>???</p><p>はじめて見たとき<code>2006-01-02</code>って何がなんだかわかりませんでした。<br>ググってみるとこんな記事がありました。</p><p><a href="https://qiita.com/ruiu/items/5936b4c3bd6eb487c182">Goのtimeパッケージのリファレンスタイム（2006年1月2日）は何の日？</a></p><blockquote><p>答えは単純だ。これはアメリカ式の時刻の順番なのだ。”1月2日午後3時4分5秒2006年”（つまり「自然な順番」で1, 2, 3, 4, 5, 6）を指しているのである。Go開発者のRob Pikeさんがgolang-nutsメーリングリストで、最初からよく考えていればこの順番にはしなかったと言っていたが（英語圏でもイギリスとかだと違う順番だしね）、もうその順番になっているので変えられないし、それにきちんと文章化もされているともコメントしていた。従ってこれは単純にそういうものだと思うしかなさそうだ。</p></blockquote><p>そんな馬鹿な!と思いましたが受け入れるしかありません。正直<code>2006-01-02</code>の文字列、私は覚えられないので毎度コピペしてます。</p><p>▼おとなりのチームにも同じ悩みを抱えている方がいました<br><img src="/images/20230127a/slack.png" alt="slack.png" width="1200" height="490" loading="lazy"></p><blockquote><p>(その気持ちとてもわかります!!!)</p></blockquote><p>今回のアップデートで<code>yyyy-mm-dd</code>は以下の様にすることができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//最新時刻を取得</span></span><br><span class="line">t := time.Now()</span><br><span class="line">ymd := time.Now().Format(time.DateOnly)</span><br><span class="line">fmt.Println(<span class="string">&quot;時刻:&quot;</span>, t)</span><br><span class="line">fmt.Println(<span class="string">&quot;%Y-%m-%dでフォーマット:&quot;</span>, ymd)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これなら私でも覚えられます。<br>些細なアップデートですが、待ち望んでいた方は多かったのではないでしょうか。</p><p>今回追加された定数ですが、それぞれの以下のように定義されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DateTime   = <span class="string">&quot;2006-01-02 15:04:05&quot;</span></span><br><span class="line">DateOnly   = <span class="string">&quot;2006-01-02&quot;</span></span><br><span class="line">TimeOnly   = <span class="string">&quot;15:04:05&quot;</span></span><br></pre></td></tr></table></figure><h1 id="2-Time-Compareメソッドの追加"><a href="#2-Time-Compareメソッドの追加" class="headerlink" title="2. Time.Compareメソッドの追加"></a>2. <code>Time.Compare</code>メソッドの追加</h1><p>Proposalは<a href="https://github.com/golang/go/issues/50770">こちらのissue</a>でされています。</p><p>Proposalを立てた方の主張をまとめると</p><blockquote><p>「Time型の比較には<code>Before()</code>、<code>Equal()</code>、<code>After()</code>の3つがあるが、これはそれぞれ<code>&lt;</code>、<code>==</code>、<code>&gt;</code>に相当する。以前、以後を表す<code>&lt;=</code>、<code>&gt;=</code>のメソッドもほしい!!」</p></blockquote><p>ということです。たしかに以前、以後というメソッドがないため、Go1.20がリリースされる前までは<br>以前を表すのに<code>!x.After(y)</code>(<code>&gt;</code>の否定)で<code>&lt;=</code>となる)とするしかありませんでした。</p><blockquote><p><code>x.Equal(y) || x.Before(y)</code>でもいいですね</p></blockquote><p>今回<code>Time.Compare</code>メソッドの追加により以前、以後は以下の様に表現することが可能になりました。</p><ul><li><p>以前(xはyよりも前) ⇒ <code>x.Compare(y)&lt;=0</code></p></li><li><p>以後(xはyよりも後) ⇒ <code>x.Compare(y)&gt;=0</code></p></li></ul><p><code>Compare</code>メソッドはGoの他のライブラリも同じようなルールで実装されているため、使い勝手も良さそうです。今後頻繁に使う機会が出てきそうです。</p><h1 id="3-Parseでナノ秒以下の入力の精度は無視する様になった"><a href="#3-Parseでナノ秒以下の入力の精度は無視する様になった" class="headerlink" title="3. Parseでナノ秒以下の入力の精度は無視する様になった"></a>3. <code>Parse</code>でナノ秒以下の入力の精度は無視する様になった</h1><p><a href="https://github.com/golang/go/issues/54567">issueはこちら</a>です。</p><p>issueにかかれているコードをそのまま引用します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> in = <span class="string">&quot;2021-09-29T16:04:33.0000000000Z&quot;</span></span><br><span class="line">fmt.Println(time.Parse(time.RFC3339, in))</span><br><span class="line">fmt.Println(time.Parse(time.RFC3339Nano, in))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入力として0が10個並んでおり、厳密にいえば<code>RFC3339Nano</code>が期待している桁数よりも多い状況です。<br>このコードの出力としては両者とも<code>2021-09-29 16:04:33 +0000 UTC &lt;nil&gt;</code>を期待していますが、実際には以下の様に出力されます。</p><figure class="highlight shell"><figcaption><span>output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2021-09-29 16:04:33 +0000 UTC &lt;nil&gt;</span><br><span class="line">0001-01-01 00:00:00 +0000 UTC parsing time &quot;2021-09-29T16:04:33.0000000000Z&quot; as &quot;2006-01-02T15:04:05.999999999Z07:00&quot;: cannot parse &quot;0Z&quot; as &quot;Z07:00&quot;</span><br></pre></td></tr></table></figure><p>Go 1.20では、2つ目の例でエラーとならないように、ナノ秒以下の精度が入力の場合には無視するようになります。</p><h1 id="4-Time-MarshalJSONメソッドのRFC3339への準拠がより厳格になった"><a href="#4-Time-MarshalJSONメソッドのRFC3339への準拠がより厳格になった" class="headerlink" title="4. Time.MarshalJSONメソッドのRFC3339への準拠がより厳格になった"></a>4. <code>Time.MarshalJSON</code>メソッドの<code>RFC3339</code>への準拠がより厳格になった</h1><p>あれ<code>Time.Marshal</code>だけ?<br><code>Time.Unmarshal</code>はいいの?</p><p>と思ったのですが、<a href="https://github.com/golang/go/issues/57912">こちらのissue</a>に経緯が書かれていました。</p><p><a href="https://github.com/golang/go/issues/54580">こちらのissue</a>の対応で<code>Time.Unmarshal</code>と<code>Time.Marshal</code>の<code>RFC3339</code>への準拠がより厳格になったということですが、<code>Time.Unmarshal</code>の対応でAWS SDKのテストでエラーがでてしまうという事態になったようです。そのため<code>Time.Unmarshal</code>についてはロールバックされ、Go1.20では<code>Time.Marshal</code>のみ<a href="https://tip.golang.org/doc/go1.20">Go 1.20 Release Notes</a>に記載されているということみたいです。</p><p><a href="https://github.com/golang/go/issues/54580">こちらのissue</a>によると既存の<code>Parse</code>にはいくつか問題があるようで、もともとはこの問題に対応するために<code>Time.Unmarshal</code>で厳格な対応を入れたかったようです。<br>例えば、現行の<code>Parse</code>では少数部の<code>.</code>と<code>,</code>を区別していないようで、どちらもエラーなく<code>Parse</code>されるようです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t1, _ := time.Parse(time.RFC3339, <span class="string">&quot;0000-01-01T00:00:00.000Z&quot;</span>)</span><br><span class="line">fmt.Println(t1)</span><br><span class="line">t2, _ := time.Parse(time.RFC3339, <span class="string">&quot;0000-01-01T00:00:00,000Z&quot;</span>)</span><br><span class="line">fmt.Println(t2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0000-01-01 00:00:00 +0000 UTC</span><br><span class="line">0000-01-01 00:00:00 +0000 UTC</span><br></pre></td></tr></table></figure><p>他には時間の桁が1桁を許容するという問題もあるようで、<code>00:00:00.000Z</code>と書くべきところを<code>0:00:00.000Z</code>としても<code>Parse</code>されるようです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t1, _ := time.Parse(time.RFC3339, <span class="string">&quot;0000-01-01T0:00:00.000Z&quot;</span>)</span><br><span class="line">fmt.Println(t1)</span><br><span class="line">t2, _ := time.Parse(time.RFC3339, <span class="string">&quot;0000-01-01T00:00:00.000Z&quot;</span>)</span><br><span class="line">fmt.Println(t2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0000-01-01 00:00:00 +0000 UTC</span><br><span class="line">0000-01-01 00:00:00 +0000 UTC</span><br></pre></td></tr></table></figure><p>確かにこのままでは定義が明確ではなくなるため対応が必要そうですが、AWS SDKのテストでエラーがでてくるとなると影響は大きそうです。<br><code>time</code>はGo1.21でも変更がありそうですね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>本記事ではGo 1.20リリースの<code>time</code>パッケージのアップデートについて解説しました</p><ul><li>layoutに<code>DateTime</code>,<code>DateOnly</code>,<code>TimeOnly</code>が追加された</li><li><code>Time.Compare</code>メソッドの追加によって以前、以後が表現できるようになった</li><li><code>Parse</code>でナノ秒以下の入力の精度は無視する様になった</li><li><code>Time.MarshalJSON</code>メソッドの<code>RFC3339</code>への準拠がより厳格になった</li></ul><p>個人的にはlayoutに定数が追加されたアップデートが地味に嬉しかったです。😀</p><p>次は辻さんの <a href="/articles/20230128a/">HTTP ResponseController</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230127a/top.png&quot; alt=&quot;top.png&quot; width=&quot;1200&quot; height=&quot;675&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;The Gopher character is based on the Go</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.20" scheme="https://future-architect.github.io/tags/Go1-20/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.20 Wrapping multiple errors</title>
    <link href="https://future-architect.github.io/articles/20230126a/"/>
    <id>https://future-architect.github.io/articles/20230126a/</id>
    <published>2023-01-25T15:00:00.000Z</published>
    <updated>2023-01-26T02:30:30.351Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230126a/top.png" alt="" width="800" height="492"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！TIG の川口です。<br>本記事は <a href="/articles/20230123a/">Go 1.20リリース連載</a>   の3本目です。<strong>Wrapping multiple errors</strong> についてお話します。</p><p>Release Note では、<a href="https://tip.golang.org/doc/go1.20#errors">こちら</a> の箇所になります。<br>Proposal は、<a href="https://github.com/golang/go/issues/53435">こちら</a> になります。</p><h2 id="何が変わったか？"><a href="#何が変わったか？" class="headerlink" title="何が変わったか？"></a>何が変わったか？</h2><p>さて具体的に何が変わったかをはじめにおさえておきます。</p><blockquote><p>Go 1.20 expands support for error wrapping to permit an error to wrap multiple other errors.<br>An error e can wrap more than one error by providing an Unwrap method that returns a []error.<br>The errors.Is and errors.As functions have been updated to inspect multiply wrapped errors.<br>The fmt.Errorf function now supports multiple occurrences of the %w format verb, which will cause it to return an error that wraps all of those error operands.<br>The new function errors.Join returns an error wrapping a list of errors.</p></blockquote><p>要約すると、以下のようになるでしょうか。 （以降、wrapping multiple errors はマルチエラーと記載します。）</p><ul><li>エラーのラップが拡張されて、複数のエラーをラップしたマルチエラーを作成できるようになりました。</li><li>error 型は、 <code>[]error</code> を返す <code>Unwrap</code> メソッドを提供することで、マルチエラーとすることができます。</li><li>マルチエラーに関して、 <code>errors.Is</code> 関数と <code>errors.As</code> 関数により、検査できるようになりました。</li><li><code>fmt.Errorf</code> 関数と <code>errors.Join</code> 関数により、マルチエラーを作成できるようになりました。</li><li><strong>（マルチエラーを []error に復元する方法については言及していません。）</strong></li></ul><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><p>それでは以降、下記の順に則ってお話していこうと思います。</p><ol><li>マルチエラーの作成方法</li><li>マルチエラーの検査方法</li><li>マルチエラーを []error に復元する方法</li><li>どんなときに使えるか？</li></ol><p>また、本稿では以下の version を利用しています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.20rc3 darwin/amd64</span><br></pre></td></tr></table></figure><h1 id="マルチエラーの作成方法"><a href="#マルチエラーの作成方法" class="headerlink" title="マルチエラーの作成方法"></a>マルチエラーの作成方法</h1><p>マルチエラーの作成方法に関しては、先述の通り以下の2パターンあるようです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err1 := errors.New(<span class="string">&quot;err1&quot;</span>)</span><br><span class="line">err2 := errors.New(<span class="string">&quot;err2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// errors.Joins を使う方法</span></span><br><span class="line">errByErrors := errors.Join(err1, err2)</span><br><span class="line">log.Println(reflect.TypeOf(errByErrors)) <span class="comment">// *errors.joinError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Errorf を使う方法</span></span><br><span class="line">errByFmt := fmt.Errorf(<span class="string">&quot;err: %w, %w&quot;</span>, err1, err2)</span><br><span class="line">log.Println(reflect.TypeOf(errByFmt)) <span class="comment">// *fmt.wrapErrors</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ただしそれぞれ作成される error の型は異なります。詳細は、以下を参照ください。<br>またこちらの実装を見ると、どちらも、<code>[]error</code> を返す <code>Unwrap</code> メソッドが提供されていることがわかるかと思います。</p><ul><li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.20rc3:src/errors/join.go;l=34">errors.joinError</a></li><li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.20rc3:src/fmt/errors.go;l=54">fmt.wrapErrors</a></li></ul><h1 id="マルチエラーの検査方法"><a href="#マルチエラーの検査方法" class="headerlink" title="マルチエラーの検査方法"></a>マルチエラーの検査方法</h1><p>今までは、 <code>errors.Is</code>, <code>errors.As</code> を使ってラップされたエラーの検査を行うことができました。<br>今後はこれらの関数が、マルチエラーにも対応するようです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err1 := errors.New(<span class="string">&quot;err1&quot;</span>)</span><br><span class="line">err2 := errors.New(<span class="string">&quot;err2&quot;</span>)</span><br><span class="line">err3 := errors.New(<span class="string">&quot;err3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// errors.Joins を使う方法</span></span><br><span class="line">errByErrors := errors.Join(err1, err2)</span><br><span class="line">log.Println(</span><br><span class="line">errors.Is(errByErrors, err1), <span class="comment">// true</span></span><br><span class="line">errors.Is(errByErrors, err2), <span class="comment">// true</span></span><br><span class="line">errors.Is(errByErrors, err3), <span class="comment">// false</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Errorf を使う方法</span></span><br><span class="line">errByFmt := fmt.Errorf(<span class="string">&quot;err: %w, %w&quot;</span>, err1, err2)</span><br><span class="line">log.Println(</span><br><span class="line">errors.Is(errByFmt, err1), <span class="comment">// true</span></span><br><span class="line">errors.Is(errByFmt, err2), <span class="comment">// true</span></span><br><span class="line">errors.Is(errByFmt, err3), <span class="comment">// false</span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本的な考え方は、既存のものと変更はなさそうです。<br>既存のラップされたエラーの機構と互換性を保つように <code>Unwrap() error</code> と <code>Unwrap() []error</code> メソッドのどちらでも再帰的に処理できるようになっていそうですね。</p><ul><li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.20rc3:src/errors/wrap.go;l=43">errors.Is</a></li><li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.20rc3:src/errors/wrap.go;l=92">errors.As</a></li></ul><h1 id="マルチエラーを-error-に復元する方法"><a href="#マルチエラーを-error-に復元する方法" class="headerlink" title="マルチエラーを []error に復元する方法"></a>マルチエラーを []error に復元する方法</h1><p>こちらに関しては言及がなかったので、特別何か専用の関数が増えたりということは今のところなさそうですね。<br>こちらを実現しようとすると、👆の <code>errors.Is</code>, <code>errors.As</code> 等の実装を見ていただいた方はわかるかと思いますが、以下のようにしなければならなさそうです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err1 := errors.New(<span class="string">&quot;err1&quot;</span>)</span><br><span class="line">err2 := errors.New(<span class="string">&quot;err2&quot;</span>)</span><br><span class="line"></span><br><span class="line">errByErrors := errors.Join(err1, err2)</span><br><span class="line"><span class="keyword">if</span> errs, ok := errByErrors.(<span class="keyword">interface</span>&#123; Unwrap() []<span class="type">error</span> &#125;); ok &#123;</span><br><span class="line"><span class="keyword">for</span> _, err := <span class="keyword">range</span> errs.Unwrap() &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみに、そのまま <code>errors.Unwrap</code> を利用した際には、以下のように nil が返ってきてしまいます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err1 := errors.New(<span class="string">&quot;err1&quot;</span>)</span><br><span class="line">err2 := errors.New(<span class="string">&quot;err2&quot;</span>)</span><br><span class="line"></span><br><span class="line">errByErrors := errors.Join(err1, err2)</span><br><span class="line">log.Println(errors.Unwrap(errByErrors)) <span class="comment">// nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらはややおかしな挙動ではありますが、<code>errors.Unwrap</code> の実装を見ると理解できます。<br>マルチエラーは、<code>Unwrap() []error</code> メソッドは持っていても、<code>Unwrap() error</code> メソッドを持っていないからですね。</p><ul><li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.20rc3:src/errors/wrap.go;l=16">errors.Unwrap</a></li></ul><h1 id="利用する場面"><a href="#利用する場面" class="headerlink" title="利用する場面"></a>利用する場面</h1><p>利用する場面としては、パッと思いつくものとしては「ベストエフォート的な複数処理」などがあるでしょうか。</p><p>例えば、「ベストエフォート的に各ユーザーに対して一人ずつメールを送信していく。」などの場面では使えそうです。<br>コードとしては以下のようなイメージです。（一括で処理できるように模索するべきとか。並列に処理をした方が良いとか。色々あるかもですが、その辺のお話はいったんおいておきます！！！）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">userIDs := []<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;userID1&quot;</span>,</span><br><span class="line"><span class="string">&quot;userID2&quot;</span>,</span><br><span class="line"><span class="string">&quot;userID3&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> userIDs &#123;</span><br><span class="line">err := sendEmail(userIDs[i])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// err があっても、log だけ出力する</span></span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendEmail</span><span class="params">(userID <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Email を送信する</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このとき、<code>run()</code> の返り値に error を増やしたいとなったときになかなかどのようなコードを書くか悩ましくなることが想像できると思います。<br>今までであれば、以下のようなサードパーティ製のものを使ったり自作のエラーパッケージを作成したりして実現していた方もいると思います。</p><ul><li><a href="https://github.com/hashicorp/go-multierror">https://github.com/hashicorp/go-multierror</a></li><li><a href="https://github.com/uber-go/multierr">https://github.com/uber-go/multierr</a></li></ul><p>それが今後は以下のようにして書き直せるようになるのかなと。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">userIDs := []<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;userID1&quot;</span>,</span><br><span class="line"><span class="string">&quot;userID2&quot;</span>,</span><br><span class="line"><span class="string">&quot;userID3&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> errs []<span class="type">error</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> userIDs &#123;</span><br><span class="line">err := sendEmail(userIDs[i])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">errs = <span class="built_in">append</span>(errs, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> errors.Join(errs...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendEmail</span><span class="params">(userID <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Email を送信する処理</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>新しく拡張された Wrapping multiple erros についての記事でした！<br>用途がたくさんあるというわけではない気もしますが、今後の error handling の手法の一つとしておさえておいたほうが良いものになるかもしれません？🤔</p><p>次は宮永さんの <a href="/articles/20230127a/">timeのアップデート</a> です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230126a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;492&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="エラーハンドリング" scheme="https://future-architect.github.io/tags/%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AA%E3%83%B3%E3%82%B0/"/>
    
    <category term="Go1.20" scheme="https://future-architect.github.io/tags/Go1-20/"/>
    
  </entry>
  
  <entry>
    <title>Go1.20リリース連載 contextパッケージのWithCancelCauseとCause</title>
    <link href="https://future-architect.github.io/articles/20230125a/"/>
    <id>https://future-architect.github.io/articles/20230125a/</id>
    <published>2023-01-24T15:00:00.000Z</published>
    <updated>2023-01-30T03:25:08.609Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230125a/top.png" alt="" width="800" height="433"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG真野です。<a href="/articles/20230123a/">Go 1.20リリース連載</a>の2本目は、<a href="https://tip.golang.org/doc/go1.20#minor_library_changes">Minor changes to the library</a>の context についてです。Go 1.7で <code>context.Context</code>が入ってから、context界隈において久しぶりのアップデートです。</p><p>contextの歴史やダイジェストは、澁川さんの<a href="https://future-architect.github.io/articles/20210212/">Go 1.16のsignal.NotifyContext() </a> 記事に書かれていますので、ぜひ確認ください。context自体にの説明は、さき(H.Saki)さんの <a href="https://zenn.dev/hsaki/books/golang-context">よくわかるcontextの使い方 </a>というZenn Bookを読むとすごく詳しくなれると思います。</p><p>リリースノートには、<code>WithCancelCause()</code>と <code>Cause()</code> 関数が追加され、キャンセル理由を追加・取得できるようにするという内容です。なぜか2023.1.22時点(go 1.20rc3)だとGoDocには<code>WithDeadlineCause()</code>・<code>WithTimeoutCause()</code> があるものの実装は無く、<a href="https://github.com/golang/go/issues/56661">context: add APIs for writing and reading cancelation cause #51365</a> を見る限り、Go 1.21で追加されそうです。</p><blockquote><p><strong>Go 1.20リリースノートより（2023.1.22 DRAFT RELEASE NOTESより）</strong><br>The new WithCancelCause function provides a way to cancel a context with a given error. That error can be retrieved by calling the new Cause function.<br>新しく追加されたWithCancelCause関数はerror付きでcontextをキャンセルする方法を提供します。errorは新しく追加したCause関数を呼び出すことで取得できます。</p></blockquote><p>GoDocのcontextパッケージの<a href="https://pkg.go.dev/context@master#WithCancelCause">func WithCancelCause</a>にサンプルコードも書かれています。</p><figure class="highlight go"><figcaption><span>GoDocのWithCancelCauseサンプルコード（go 1.20rc3時点なので荒い）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx, cancel := context.WithCancelCause(parent)</span><br><span class="line">cancel(myError)</span><br><span class="line">ctx.Err() <span class="comment">// returns context.Canceled</span></span><br><span class="line">context.Cause(ctx) <span class="comment">// returns myError</span></span><br></pre></td></tr></table></figure><p>ツイートで発表された際の反応を見ると、喜びの声が多数でした。</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Probably in Go 1.20:<br><br>context.WithCancelCause 🎉<br><br>ctx.Err() will return why a context is canceled if that context is derived with a cancel cause. Instead of mere `Canceled` and `DeadlineExceeded` errors.<br><br>Proposal → <a href="https://t.co/H1jMbp5HGM">https://t.co/H1jMbp5HGM</a><a href="https://twitter.com/hashtag/golang?src=hash&amp;ref_src=twsrc%5Etfw">#golang</a> <a href="https://t.co/bRFFXB1DFx">pic.twitter.com/bRFFXB1DFx</a></p>&mdash; inanc (@inancgumus) <a href="https://twitter.com/inancgumus/status/1599073261169430528?ref_src=twsrc%5Etfw">December 3, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>プロポーサルは<a href="https://github.com/golang/go/issues/51365">context: add APIs for writing and reading cancelation cause #51365</a> です。起票が2022.2.26ですので、これだけ見れば10ヶ月ほどで入ったように見えます。実際はそれ以前にも似たような議論があり、例えば<a href="https://github.com/golang/go/issues/26356">context: ease debugging of where a context was canceled? #26356</a> は2018年に、<a href="https://github.com/golang/go/issues/46273">proposal: context: add WithCancelReason #46273</a>は2021年に起票されています。#26356や#46273にて条件、対応案、プロトタイプの実装などが整理されたことがあってこそ実現できたスピード感じゃないかと思います。</p><h2 id="コンテキストがどこでキャンセルされたかデバック難しい問題"><a href="#コンテキストがどこでキャンセルされたかデバック難しい問題" class="headerlink" title="コンテキストがどこでキャンセルされたかデバック難しい問題"></a>コンテキストがどこでキャンセルされたかデバック難しい問題</h2><p>Go 1.20より前の時代では、contextのキャンセルでよく上がる課題に、コンテキストのキャンセルがどこで行われたか切り分けしにくいことがあります。「Who the hell canceled my context?（だれが私のcontextをキャンセルしたか？）」と冗談混じりでの悩みをちょくちょく聞きます。</p><p>例えば、下記のように多段にcontextにタイムアウトを設定するケースです。仮に一番下流の <code>callHeavyWebAPI()</code> 関数でキャンセルしたかどうかを判定したいとします。</p><figure class="highlight go"><figcaption><span>Go1.19以前での実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">time.AfterFunc(<span class="number">10</span>*time.Second, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; cancel() &#125;) <span class="comment">// 全体で10秒まで</span></span><br><span class="line"><span class="comment">// ... 何かしらの前処理など</span></span><br><span class="line"><span class="keyword">go</span> doHeavyTask(ctx)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doHeavyTask</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(ctx)</span><br><span class="line">time.AfterFunc(<span class="number">5</span>*time.Second, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; cancel() &#125;) <span class="comment">// doHeavyTask関数で最大5秒まで</span></span><br><span class="line"><span class="comment">// ... 何かしらの処理</span></span><br><span class="line">callHeavyWebAPI(ctx)</span><br><span class="line"><span class="comment">// ... 何かしらの処理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">callHeavyWebAPI</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(ctx)</span><br><span class="line">time.AfterFunc(<span class="number">3</span>*time.Second, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; cancel() &#125;) <span class="comment">// callHeavyWebAPI関数で最大3秒まで</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line"><span class="keyword">switch</span> ctx.Err() &#123;</span><br><span class="line"><span class="keyword">case</span> context.DeadlineExceeded:</span><br><span class="line">fmt.Println(<span class="string">&quot;context timeout exceeded&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> context.Canceled:</span><br><span class="line">fmt.Println(<span class="string">&quot;context canceled&quot;</span>) <span class="comment">// ★どこでキャンセルされた？😭</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// ...外部API呼び出しなどの処理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後の<code>select</code> の部分の実装のように、キャンセルしたかは <code>ctx.Err()</code> を見ることで判断できます。しかし、<code>main()</code>, <code>doHeavyTask()</code>, <code>callHeavyWebAPI()</code> 関数それぞれで設定されたキャンセルのどれが直接の原因かは判断が付きません。</p><p>回避方法としては、キャンセル理由を連携するための <code>channel</code> を引き回すことを検討するなどが考えられますが、けっこう大変そうです。</p><h2 id="contextパッケージにWithCancelCauseとCauseを追加"><a href="#contextパッケージにWithCancelCauseとCauseを追加" class="headerlink" title="contextパッケージにWithCancelCauseとCauseを追加"></a>contextパッケージにWithCancelCauseとCauseを追加</h2><p>これを解決する方法として、<code>context.WithCancelCause()</code>と <code>Cause()</code> 関数を利用します。<code>context.WithCancelCause()</code>はほぼ <code>WithCancel()</code>と使い勝手が同じですが、<code>CancelCauseFunc(cause error)</code> と引数に <code>cause</code>を取る部分が異なります。ここに <code>error</code> を渡すと何が理由で<code>context</code>がキャンセルされたか分かります。</p><figure class="highlight diff"><figcaption><span>Go1.20以降の実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;context&quot;</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="addition">+var (</span></span><br><span class="line"><span class="addition">+ErrTimeoutOuter  = errors.New(&quot;outer timeout&quot;)</span></span><br><span class="line"><span class="addition">+ErrTimeoutMiddle = errors.New(&quot;middle timeout&quot;)</span></span><br><span class="line"><span class="addition">+ErrTimeoutInner  = errors.New(&quot;inner timeout&quot;)</span></span><br><span class="line"><span class="addition">+)</span></span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">ctx, cancel := context.WithCancelCause(context.Background())</span><br><span class="line"><span class="deletion">-time.AfterFunc(10*time.Second, func() &#123; cancel() &#125;) // 全体で10秒まで</span></span><br><span class="line"><span class="addition">+time.AfterFunc(10*time.Second, func() &#123; cancel(ErrTimeoutOuter) &#125;) // 全体で10秒まで</span></span><br><span class="line">// ... 何かしらの前処理など</span><br><span class="line">go doHeavyTask(ctx)</span><br><span class="line">// ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func doHeavyTask(ctx context.Context) &#123;</span><br><span class="line">ctx, cancel := context.WithCancelCause(ctx)</span><br><span class="line"><span class="deletion">-time.AfterFunc(5*time.Second, func() &#123; cancel() &#125;) // doHeavyTask関数で最大5秒まで</span></span><br><span class="line"><span class="addition">+time.AfterFunc(5*time.Second, func() &#123; cancel(ErrTimeoutMiddle) &#125;) // doHeavyTask関数で最大5秒まで</span></span><br><span class="line">// ... 何かしらの処理</span><br><span class="line">callHeavyWebAPI(ctx)</span><br><span class="line">// ... 何かしらの処理</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func callHeavyWebAPI(ctx context.Context) &#123;</span><br><span class="line">ctx, cancel := context.WithCancelCause(ctx)</span><br><span class="line"><span class="deletion">-time.AfterFunc(3*time.Second, func() &#123; cancel() &#125;) // callHeavyWebAPI関数で最大3秒まで</span></span><br><span class="line"><span class="addition">+time.AfterFunc(3*time.Second, func() &#123; cancel(ErrTimeoutInner) &#125;) // callHeavyWebAPI関数で最大3秒まで</span></span><br><span class="line"></span><br><span class="line">for &#123;</span><br><span class="line">select &#123;</span><br><span class="line">case &lt;-ctx.Done():</span><br><span class="line">switch ctx.Err() &#123;</span><br><span class="line">case context.DeadlineExceeded:</span><br><span class="line">fmt.Println(&quot;context timeout exceeded&quot;)</span><br><span class="line">case context.Canceled:</span><br><span class="line"><span class="deletion">-fmt.Println(&quot;context canceled&quot;) // ★どこでキャンセルされた？😭</span></span><br><span class="line"><span class="addition">+switch context.Cause(ctx) &#123;</span></span><br><span class="line"><span class="addition">+case ErrTimeoutOuter:</span></span><br><span class="line"><span class="addition">+fmt.Println(&quot;mainのタイムアウトによりキャンセル&quot;)</span></span><br><span class="line"><span class="addition">+case ErrTimeoutMiddle:</span></span><br><span class="line"><span class="addition">+fmt.Println(&quot;doHeavyTaskのタイムアウトによりキャンセル&quot;)</span></span><br><span class="line"><span class="addition">+case ErrTimeoutInner:</span></span><br><span class="line"><span class="addition">+fmt.Println(&quot;callHeavyTaskのタイムアウトによりキャンセル&quot;)</span></span><br><span class="line"><span class="addition">+default:</span></span><br><span class="line"><span class="addition">+fmt.Println(&quot;その他のキャンセル&quot;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return</span><br><span class="line">default:</span><br><span class="line">// ...外部API呼び出しなどの処理</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重要な考え方として、<code>cancel(err)</code> を設定しても、<code>ctx.Err()</code>の値は変わりません。<code>ctx.Err()</code> は従来どおり、<code>context.DeadlineExceeded</code> や <code>context.Canceled</code> が取得できます。つまり互換性が保たれています。エラー理由をトレースしたい場合のみ、<code>context.Cause(ctx)</code> を呼び出します。最初は使い分けなんだろうとか、やや面倒だなと思いましたが、考えてみると順当な判断です。</p><ul><li><code>ctx.Err()</code><ul><li>Doneが未設定の場合、<code>nil</code> を返す</li><li>Doneが設定されたら、<code>context.Canceled</code> か <code>context.DeadlineExceeded</code> を返す</li></ul></li><li><code>context.Cause(ctx)</code><ul><li>ユーザーが設定した独自の <code>error</code> を返す。設定した場合、<code>ctx.Err()</code>は <code>context.Canceled</code> を返す</li></ul></li></ul><p>これから新規にハンドリングしたい人は、 <code>ctx.Err()</code> を用いず、一気に <code>context.Cause(ctx)</code> を使っても良いかもしれません。</p><p><code>Cause()</code>ですが、以下のように <code>context.Context</code> のインターフェースに<code>Cause()</code>といった関数を追加してくれた方が利用者としては便利じゃないかと思いますよね。これは<a href="https://go.dev/doc/go1compat">Go1互換性ポリシー</a>に書いてあるように、パッケージエクスポートされたインターフェースに新しい関数を追加することは許可されてないということで否定されていました（そのため、context.Contextを引数にとる現在のかたちで提供されています）。</p><figure class="highlight diff"><figcaption><span>互換性をぶっ壊すAPIイメージ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type Context interface &#123;</span><br><span class="line">Deadline() (deadline time.Time, ok bool)</span><br><span class="line">Done() &lt;-chan struct&#123;&#125;</span><br><span class="line">Err() error</span><br><span class="line">Value(key any) any</span><br><span class="line"><span class="addition">+Cause() error // ★後方互換性を壊すためインターフェースに新規関数の追加はできない</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>少しだけ惜しい気もしますが、すぐに覚えられるレベルかなと思います。</p><p><strong>2023.1.30 追記:</strong></p><p>このあたりの互換性を保ったAPI提供については、syumaiさんの<a href="https://blog.syum.ai/entry/2023/01/28/224034">ライブラリとして公開したGoのinterfaceを変更するのは難しいと言う話 - 焼売飯店</a> が詳しいです！</p><h2 id="使い方について"><a href="#使い方について" class="headerlink" title="使い方について"></a>使い方について</h2><p>追加された関数について、パッとどういう挙動になるか確信が持てなかった3ケースを動かしてみます。</p><h3 id="1-cancel-nil-を呼んだら？"><a href="#1-cancel-nil-を呼んだら？" class="headerlink" title="1. cancel(nil) を呼んだら？"></a>1. cancel(nil) を呼んだら？</h3><p>結論→ <code>context.Cause(ctx)</code> が <code>context.Canceled</code>を返します。少し意外な結果に思うかもしれません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancelCause(context.Background())</span><br><span class="line">cancel(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(ctx.Err() == context.Canceled)          <span class="comment">// true</span></span><br><span class="line">fmt.Println(context.Cause(ctx) == context.Canceled) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>nil</code> を返さないことで、<code>ctx.Err()</code> を用いず <code>context.Cause()</code> で <code>context</code> のハンドリングができるようするための理由だと思います。</p><h3 id="2回呼んだらどうなる？"><a href="#2回呼んだらどうなる？" class="headerlink" title="2回呼んだらどうなる？"></a>2回呼んだらどうなる？</h3><p>結論→ 最初に設定された <code>cause</code> が常に取得される。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancelCause(context.Background())</span><br><span class="line">cancel(errors.New(<span class="string">&quot;1. timeout&quot;</span>))</span><br><span class="line">cancel(errors.New(<span class="string">&quot;2. connection dropped&quot;</span>))</span><br><span class="line"></span><br><span class="line">fmt.Println(context.Cause(ctx)) <span class="comment">// 1. timeout</span></span><br><span class="line">fmt.Println(context.Cause(ctx)) <span class="comment">// 1. timeout</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-親子contextでそれぞれcancelさせた場合"><a href="#3-親子contextでそれぞれcancelさせた場合" class="headerlink" title="3. 親子contextでそれぞれcancelさせた場合"></a>3. 親子contextでそれぞれ<code>cancel</code>させた場合</h3><p>例えば、下記のように親子contextを作成し、親→子の順番でキャンセルさせました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">parentCtx, parentCancel := context.WithCancelCause(context.Background())</span><br><span class="line">childCtx, childCancel := context.WithCancelCause(parentCtx)</span><br><span class="line"></span><br><span class="line">parentCancel(errors.New(<span class="string">&quot;parent timeout&quot;</span>))</span><br><span class="line">childCancel(errors.New(<span class="string">&quot;child timeout&quot;</span>))</span><br><span class="line"></span><br><span class="line">fmt.Println(context.Cause(parentCtx)) <span class="comment">// parent timeout</span></span><br><span class="line">fmt.Println(context.Cause(childCtx))  <span class="comment">// parent timeout</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この例の場合は、親のキャンセル内容が優先されるます。 <code>parentCancel</code>、<code>childCancel</code> の呼び出し位置を変えてみると出力が変わるので（基本は子は親に影響しない。親が先にキャンセルしていたら、子はそれを引き継ぐ）、動かしてみると良いかなと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>従来では、特に親子関係を持った<code>context</code>でそれぞれキャンセルが発生しうるときに切り分けが難しかったが、Go 1.20 から追加された、 <code>WithCancelCause()</code> と <code>context.Cause()</code> で解決でき、どこでキャンセルされたんだ問題を解決に導いてくれる</li><li>インターフェースは <code>context.Context</code> への関数追加ではなく、<code>context</code> パッケージへのヘルパー関数である</li></ul><p>次は川口さんの<a href="/articles/20230126a/">Wrapping multiple errors</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230125a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;433&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.20" scheme="https://future-architect.github.io/tags/Go1-20/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.20リリース連載が始まります＆メモリアリーナの紹介＆落ち穂拾い</title>
    <link href="https://future-architect.github.io/articles/20230123a/"/>
    <id>https://future-architect.github.io/articles/20230123a/</id>
    <published>2023-01-22T15:00:00.000Z</published>
    <updated>2023-02-03T04:35:28.729Z</updated>
    
    <content type="html"><![CDATA[<p>フューチャーのテックブログ恒例のGoの新バージョンリリース記念のブログが始まります。この執筆時点でrc3が出ています。かつてこんな順調なことがあったでしょうか？</p><div class="scroll"><table><thead><tr><th align="center">Date</th><th align="left">Title</th><th align="left">Author</th></tr></thead><tbody><tr><td align="center">1&#x2F;23(月)</td><td align="left">メモリアリーナの紹介＆落ち穂拾い</td><td align="left">澁川喜規</td></tr><tr><td align="center">1&#x2F;24(火)</td><td align="left"><a href="/articles/20230125a/">contextパッケージのWithCancelCauseとCause</a></td><td align="left">真野隼記さん</td></tr><tr><td align="center">1&#x2F;25(水)</td><td align="left"><a href="/articles/20230126a/">Wrapping multiple errors</a></td><td align="left">川口翔大さん</td></tr><tr><td align="center">1&#x2F;26(木)</td><td align="left"><a href="/articles/20230127a/">timeのアップデート</a></td><td align="left">宮永崇史さん</td></tr><tr><td align="center">1&#x2F;27(金)</td><td align="left"><a href="/articles/20230128a/">HTTP ResponseController</a></td><td align="left">辻大志郎さん</td></tr><tr><td align="center">1&#x2F;30(月)</td><td align="left"><a href="/articles/20230131a/">New ReverseProxy Rewrite hook を動かしながら理解する</a></td><td align="left">棚井龍之介さん</td></tr><tr><td align="center">1&#x2F;31(火)</td><td align="left"><a href="/articles/20230202a/">vetのアップデート</a></td><td align="left">今泉智義さん</td></tr><tr><td align="center">2&#x2F;1(水)</td><td align="left"><a href="/articles/20230203a/">go build に追加される cover オプション（利用例付き）</a></td><td align="left">藤井亮佑さん</td></tr></tbody></table></div><p>初回は、メモリアリーナの紹介ついでに、他の人が触れない残ったネタも紹介します。</p><h1 id="メモリアリーナとは"><a href="#メモリアリーナとは" class="headerlink" title="メモリアリーナとは"></a>メモリアリーナとは</h1><p>メモリアリーナについては以下のプロポーザルで提案されたものです。</p><ul><li><a href="https://github.com/golang/go/issues/51317">proposal: arena: new package providing memory arenas</a></li></ul><p>Goはガベージコレクタを備えた言語ですが、ガベージコレクタは実行時にコストが多少かかります。メモリをスキャンし、他から参照されていないかどうかを探索する必要があるからです。メモリアリーナとして、あらかじめGC対象外のメモリ領域を手動で確保することで、GCがオブジェクトを探索するコストなどが節約できて、15%ほどの性能向上があった、とプロポーザルにはあります。</p><p>しかし、メモリの解放を手動で行う必要があったり、本質的に「危険」な機能であるし、プロポーザルで提案されている使い方（protobufのデコードとか）以外はほとんどパフォーマンスに寄与しない可能性もあります。</p><h2 id="ドキュメントがない？どこにあるの？"><a href="#ドキュメントがない？どこにあるの？" class="headerlink" title="ドキュメントがない？どこにあるの？"></a>ドキュメントがない？どこにあるの？</h2><p>Goは開発版のリリースノートやライブラリリファレンスも公開してくれています。さっそく、arenaパッケージのドキュメントを見てみましょう！</p><p><a href="https://pkg.go.dev/std@go1.20rc3">https://pkg.go.dev/std@go1.20rc3</a></p><p>と思ったけどない？インストールすると、確かに<code>$GOROOT/src/arena</code>フォルダは存在します。フォルダがあるならローカルのgodocで見られそうなのでgodocを入れて見てみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go install golang.org/x/tools/cmd/godoc@latest</span><br><span class="line">$ godoc</span><br></pre></td></tr></table></figure><p>しかし、これでもリファレンスは表示されず、パッケージドキュメントしか表示されません。</p><img src="/images/20230123a/スクリーンショット_2023-01-18_0.08.44.png" alt="スクリーンショット_2023-01-18_0.08.44.png" width="1200" height="684" loading="lazy"><p>この機能はオプトインで動くもので、ビルドの時に環境変数が必要だったことを思い出し、これを指定するとようやく見れました！機能はシンプルですね。　ちなみに、これを書く時にまったく違う<a href="https://pkg.go.dev/github.com/google/gapid@v1.6.1/core/memory/arena">同名のライブラリ</a>を見て、ふむふむと読んでいたのですが、本家の方は検索では出てこないのでみなさまもお気をつけください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ GOEXPERIMENT=arenas godoc</span><br></pre></td></tr></table></figure><img src="/images/20230123a/スクリーンショット_2023-01-18_0.13.05.png" alt="スクリーンショット_2023-01-18_0.13.05.png" width="758" height="402" loading="lazy"><p>使い方はシンプルですね。</p><ul><li>まずは <code>arena.NewArena()</code>で<code>*Arena</code>を作成</li><li>使い終わったら <code>Free()</code>メソッドを呼び出す</li><li><code>arena.MakeSlice[Type](arena)</code>や<code>arena.New[Type](arena)</code>といった関数を使ってアリーナ内部のメモリを利用</li><li><code>arena.Clone(obj)</code>を使うと、アリーナが終了しても残るよう、ヒープに値を移動する(浅いコピー)</li></ul><p>Goはメソッドのジェネリクスが使えないのですが、そのかわりに、1番目の引数に値を取るジェネリクスなヘルパー関数を用意するという、C言語でオブジェクト指向している時代のような設計をすることで代替するというテクニックが使われていますね。</p><h2 id="ベンチマーク"><a href="#ベンチマーク" class="headerlink" title="ベンチマーク"></a>ベンチマーク</h2><p>小さいオブジェクトをたくさん確保するユースケースで性能差が出るということで、標準ライブラリのリンクドリストのcontainer&#x2F;listをちょびっと改造してみました。<code>Element</code>はポインタが3つと<code>interface&#123;&#125;</code>を1つ持つ構造体です。<code>interface</code>にポインタを入れるとしたら４０バイト(インタフェースはポインタ2つ保持するので)の値のメモリの確保にarenaを利用する、というユースケースになります。</p><p>既存のコードのメモリ確保部分をいじるだけであれば、そんなに難しくないですね。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+import (</span></span><br><span class="line"><span class="addition">+&quot;arena&quot;</span></span><br><span class="line"><span class="addition">+)</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"> // Element is an element of a linked list.</span><br><span class="line"> type Element struct &#123;</span><br><span class="line"> // Next and previous pointers in the doubly-linked list of elements.</span><br><span class="line"><span class="meta">@@ -48,6 +52,7 @@</span></span><br><span class="line"> type List struct &#123;</span><br><span class="line"> root Element // sentinel list element, only &amp;root, root.prev, and root.next are used</span><br><span class="line"> len  int     // current list length excluding (this) sentinel element</span><br><span class="line"><span class="addition">+a    *arena.Arena</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // Init initializes or clears list l.</span><br><span class="line"><span class="meta">@@ -59,8 +64,16 @@</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // New returns an initialized list.</span><br><span class="line"><span class="deletion">-func New() *List &#123; return new(List).Init() &#125;</span></span><br><span class="line"><span class="addition">+func NewWithArena(a *arena.Arena) *List &#123;</span></span><br><span class="line"><span class="addition">+r := arena.New[List](a)</span></span><br><span class="line"><span class="addition">+r.a = a</span></span><br><span class="line"><span class="addition">+return r.Init()</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"></span><br><span class="line"> // Len returns the number of elements of list l.</span><br><span class="line"> // The complexity is O(1).</span><br><span class="line"> func (l *List) Len() int &#123; return l.len &#125;</span><br><span class="line"><span class="meta">@@ -101,7 +114,9 @@</span></span><br><span class="line"></span><br><span class="line"> // insertValue is a convenience wrapper for insert(&amp;Element&#123;Value: v&#125;, at).</span><br><span class="line"> func (l *List) insertValue(v any, at *Element) *Element &#123;</span><br><span class="line"><span class="deletion">-return l.insert(&amp;Element&#123;Value: v&#125;, at)</span></span><br><span class="line"><span class="addition">+e := arena.New[Element](l.a)</span></span><br><span class="line"><span class="addition">+e.Value = v</span></span><br><span class="line"><span class="addition">+return l.insert(e, at)</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>ベンチマークのコードは以下の通りです。通常の実装、arena利用、中に入れる要素もarenaを利用の3つでテストしています。一回に入れる要素数を要素数を1万、10万、100万と変えてみています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> list2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;arena&quot;</span></span><br><span class="line"><span class="string">&quot;container/list&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> V <span class="keyword">struct</span> &#123;</span><br><span class="line">n <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkListWithoutArena</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">l := list.New()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">l.PushBack(&amp;V&#123;i&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkListWithArena</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">a := arena.NewArena()</span><br><span class="line">l := NewWithArena(a)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">l.PushBack(&amp;V&#123;i&#125;) <span class="comment">// valueはarena使わず</span></span><br><span class="line">&#125;</span><br><span class="line">a.Free()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkListWithArena2</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">a := arena.NewArena()</span><br><span class="line">l := NewWithArena(a)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">v := arena.New[V](a) <span class="comment">// valueもarena利用</span></span><br><span class="line">v.n = i</span><br><span class="line">l.PushBack(v)</span><br><span class="line">&#125;</span><br><span class="line">a.Free()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>結果は以下の通りです。1万要素程度だとほとんど差がつきません。10万ぐらいになるとだいぶ差が・・・という感じです。ちなみに、最初に書いたときは<code>Free()</code>を書き忘れてしまいました。そうしたら処理時間が3倍になってました。要注意です。</p><div class="scroll"><table><thead><tr><th align="center">方式＼要素数</th><th align="center">10,000</th><th align="center">100,000</th><th align="center">1,000,000</th></tr></thead><tbody><tr><td align="center">標準のメモリ戦略</td><td align="center">0.30mS</td><td align="center">4.58mS</td><td align="center">62.07mS</td></tr><tr><td align="center">arena利用(Elementのみ)</td><td align="center">0.29mS (-4.2%)</td><td align="center">2.77mS (-39.5%)</td><td align="center">28.00mS (-54.9%)</td></tr><tr><td align="center">arena利用(valueも利用)</td><td align="center">0.28mS (-8.4%)</td><td align="center">2.65mS (-42.1%)</td><td align="center">26.80mS (-56.8%)</td></tr></tbody></table></div><h2 id="どこで使えるのか？"><a href="#どこで使えるのか？" class="headerlink" title="どこで使えるのか？"></a>どこで使えるのか？</h2><p>パフォーマンスがあがる！素敵！じゃあ明日からガンガン使う！ということにはならなそうなのが今回の機能です。なんといっても、コンパイラのフラグをセットしないと使えません。後述のライフサイクルを考えると、APIの形がアリーナ利用とそうでない場合で変わる可能性があり、公開するライブラリだと、後方互換性を考えると、最低でも1.21がリリースされ、1.20がサポートされている最低バージョンになってから、となるかもしれません。そもそもExperimentalが外れてからその次、の方がいいかもしれません。もちろん、個別のアプリで使うなら自己責任ですぐにでも使えるとは思います。</p><h2 id="ユースケースには何があるか？"><a href="#ユースケースには何があるか？" class="headerlink" title="ユースケースには何があるか？"></a>ユースケースには何があるか？</h2><p>そもそも、小さいメモリをたくさん使う、というユースケースがどこにあるのか、というところが問題です。一番考えられるのが何かしらの木構造の処理ですね。あとは常駐プロセスでたくさんのオブジェクトを扱うケースです。考えられるのはだいたいこんな感じでしょうか？</p><ul><li>XMLのパース（Excelのパース)</li><li>言語処理系の構文木</li><li>HTMLのサーバーサイドレンダリング（DOMツリー）</li><li>RDB自作勢（タプルなどの内部のデータ管理）</li></ul><p>一番上が一番有望なユースケースな気がしています。というのも、前職で作ったExcelからのマスターデータ変換はプロファイルを取ると、ほとんどがメモリ確保の処理時間でした。Goのxmlパッケージは<a href="https://github.com/golang/go/issues/21823">処理が遅いというissue</a>も上がっていたりします。最近のGoでは試していないですが、attributeとかをパースのときにそれぞれメモリ確保して格納しているようなところが遅かったと記憶しています。</p><h2 id="ライフサイクル管理とAPI設計の考察"><a href="#ライフサイクル管理とAPI設計の考察" class="headerlink" title="ライフサイクル管理とAPI設計の考察"></a>ライフサイクル管理とAPI設計の考察</h2><p>もう1つあるのが、Arenaのライフサイクルの戦略をどうするか、です。たとえば、Excelのファイルのパースであれば1ファイルごとにArenaを作る方法もあります。ただし、同時処理数の最大が見えていて、最大メモリ量が見積もれるのであれば、複数のExcelファイルを処理するのに、1つのArenaを共有し、sync.Pool的な再利用の仕組みも作って載せる、というのが一番効率よくなりそうです。</p><p>ただし、Arena上のメモリの解放はArena一括で行う必要があります。徐々にメモリが少なくなったからといって、「じゃあGC実行して開けよう」みたいなことはできません。データベースのような仕組みを作るのであれば、自分で確保したメモリの量も見ながら、ときどきArenaにメモリを返す、みたいなメモリ管理の仕組みを自作する必要があるかもしれません。</p><p>僕が最初に間違って読んでいた<a href="https://pkg.go.dev/github.com/google/gapid@v1.6.1/core/memory/arena">Google製の同名のライブラリ</a>では<code>context.Context</code>にArenaを登録したり取り出せるAPIがありましたが、これと同じように<code>context.Context</code>と同じライフサイクルで使う、というのも1つの手かと思います。そうすると、ある程度まとまった処理単位でArenaを共有する、といったことが可能となりますし、アリーナ利用とそうでない場合にAPIを変えずにできます（あまり良いことでもないかもですが）。プロポーザルの議論の中でもこのようなリクエスト単位での解放というのが紹介されていました。</p><p>ライブラリのAPIとしては、最低限、Arenaを外から渡せるように、という口の用意すれば、使う側で、これらの戦略を利用者が選べるので良さそうですね。あとは、レスポンスで返すオブジェクトをヒープにするか、Arenaの上に作るかはオプションで指定できる必要もありそうです。たとえば、Excelのパースであれば、XMLのメモリはArena上において、Excelとして処理するライブラリが使い終わったらXMLのメモリを解放してあげて、ブックの値はヒープにおいておくことでユーザーに返す、というのが可能です。最終的に返すブックがArenaだと、それを使う間はArenaの解放はできません。ただし、Excelから値を読み取って作ったドメインオブジェクトが必要なレスポンスであれば、ブックがArenaでも良い（ドメインオブジェクトを作ったら不要になる)となります。誰がどう使うかでどちらにあると良いかが変わってきてしまうので、汎用的なライブラリを作るなら明示的に指定できる必要がありそうです。</p><p>ビルド時に環境変数を指定するのですが、環境変数だと条件コンパイルに使えないので、別途ビルドタグでArenaなし版のみをビルドするように、というのも1.21が出るまでは必要そうですね。</p><h2 id="Arenaから追い出されないように気を付ける-x2F-開放後はArenaを触らないようにする"><a href="#Arenaから追い出されないように気を付ける-x2F-開放後はArenaを触らないようにする" class="headerlink" title="Arenaから追い出されないように気を付ける&#x2F;開放後はArenaを触らないようにする"></a>Arenaから追い出されないように気を付ける&#x2F;開放後はArenaを触らないようにする</h2><p>Arenaを活用するには、そこでメモリを確保して、そこをきちんと使う必要がありますが、Goの場合はエスケープ処理が便利かつ強力なので、ヒープ側にメモリが確保されてGC対象になってしまう可能性があります。Arenaをせっかく使うのであれば、Arenaから追い出されないようにする必要があります。</p><ul><li>スライスは<code>arena.MakeSlice[Type](a)</code>で毎回確保する。可変長として使おうとして<code>append()</code>をすると、伸長するために新しいメモリ領域を確保するためにヒープに逃げていってしまい、Arenaから外に出てしまうので、次のように伸長する必要がある場合は再度<code>arena.MakeSlice[Type](a)</code>で確保してコピーを自前でやる必要がある。ただし、伸長したときに、前のスライスのメモリがArenaを解放するまでは残り続けるため、やはり基本的に固定長のみで運用で、可変長で扱わない方が良さそう。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mem := arena.NewArena()</span><br><span class="line">s := arena.MakeSlice[<span class="type">int</span>](mem, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">s = Append(mem, s, <span class="number">11</span>)</span><br><span class="line">log.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Append</span>[<span class="title">T</span> <span class="title">any</span>]<span class="params">(mem *arena.Arena, s []T, v T)</span></span> []T &#123;</span><br><span class="line">l := <span class="built_in">len</span>(s)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">cap</span>(s) == l &#123;</span><br><span class="line">newS := arena.MakeSlice[T](mem, l+<span class="number">1</span>, l*<span class="number">2</span>)</span><br><span class="line"><span class="built_in">copy</span>(newS, s)</span><br><span class="line">newS[l] = v</span><br><span class="line"><span class="keyword">return</span> newS</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">append</span>(s, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>文字列も、<code>[]byte</code>としてArenaに置いておく必要がある（以下のコード参照）。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src := <span class="string">&quot;source string&quot;</span></span><br><span class="line"></span><br><span class="line">mem := arena.NewArena()</span><br><span class="line"><span class="keyword">defer</span> mem.Free()</span><br><span class="line"></span><br><span class="line">bs := arena.MakeSlice[<span class="type">byte</span>](mem, <span class="built_in">len</span>(src), <span class="built_in">len</span>(src))</span><br><span class="line"><span class="built_in">copy</span>(bs, src)</span><br><span class="line">str := unsafe.String(&amp;bs[<span class="number">0</span>], <span class="built_in">len</span>(bs))</span><br></pre></td></tr></table></figure><ul><li>mapやchanはArenaを使う版がないので、必要であれば作る必要がある。ただし、chanはそこまで大量に作って・・・ということもなさそうなので、問題はない気がします。mapが必要であれば頑張って実装する必要がありますね。</li></ul><p>文字列は<a href="https://uptrace.dev/blog/posts/go-memory-arena.html">Uptraceのブログ</a>のブログから引用しました。</p><p>もう1つはアリーナが解放された後にアリーナの中のメモリを触らない、というのもあります。<code>go run -asan main.go</code>のようにアドレスサニタイザーを有効にして実行すると、このようなエラーは検知できます。アリーナ解放後も利用する必要がある値は<code>arena.Clone()</code>を使って、ヒープに逃してあげましょう。</p><h2 id="アリーナのまとめ"><a href="#アリーナのまとめ" class="headerlink" title="アリーナのまとめ"></a>アリーナのまとめ</h2><p>マイクロベンチマークで性能が2倍以上になる、というのをやってみました。Uptraceのブログでも2分探索のコードを改造して使っていたので、この手の小さなメモリをたくさん使うケースに適用すると良さそうです。</p><p>ただし、APIデザインを考えると、汎用的な設計を作るのは結構大変そうだな、と思いました。</p><h1 id="その他の小ネタ"><a href="#その他の小ネタ" class="headerlink" title="その他の小ネタ"></a>その他の小ネタ</h1><p>コンパイラとかcgo周りとか細かくいろいろアップデートがあります。CGo依存でデフォルトで実装されていたmacOSが非依存になったりして、デフォルトのmac上のビルドとクロスビルドで違いがなくなりました（他のCGo依存ライブラリがない場合）。まあ、大きく実装が変わるとかに関わるものは今のところなさそう？CPUアーキテクチャのサブタイプごとに細かくかき分けたい（ARMの中の命令セットごととか）人向けにビルドタグとか追加されていますが、多くの人には関係ないかな？<br>あとは、標準ライブラリのビルド済みのパッケージが添付されなくなって、配布物が小さくなっています。まあクロスコンパイルをする場合などはローカルでビルドされてキャッシュされていたので、それと同じような感じの扱いになっただけで、初回ビルドがちょっと遅いかな？ぐらいのものです。二酸化炭素を減らさないと！という会社さんはローカルがキャッシュ済みのイメージを作って使うといいかも？</p><h2 id="ライブラリ系"><a href="#ライブラリ系" class="headerlink" title="ライブラリ系"></a>ライブラリ系</h2><h3 id="unsafe"><a href="#unsafe" class="headerlink" title="unsafe"></a><code>unsafe</code></h3><p>文字列とバイト列のファイルコピーをしない変換、スライスの裏の配列の取得ができるようになります。<a href="https://pkg.go.dev/github.com/valyala/fasthttp">github.com&#x2F;valyala&#x2F;fasthttp</a>はなるべくstringを作らないことで高速なベンチマークを達成している（と思う）のですが、net&#x2F;httpの標準ライブラリでも同じぐらいのパフォーマンスアップを期待しちゃいますね。</p><h3 id="圧縮系のライブラリ"><a href="#圧縮系のライブラリ" class="headerlink" title="圧縮系のライブラリ"></a>圧縮系のライブラリ</h3><p><code>archive/tar</code>と<code>archive/zip</code>で現在のフォルダの外だったり、絶対パスが入ると<code>ErrInsecurePath</code>を返すようになりました。ディレクトリトラバーサル攻撃対策ですね。<code>GODEBUG=tarinsecurepath=0</code>とか<code>GODEBUG=zipinsecurepath=0</code>を設定して実行すれば前と同じ動作にはなります。</p><h3 id="暗号系ライブラリ"><a href="#暗号系ライブラリ" class="headerlink" title="暗号系ライブラリ"></a>暗号系ライブラリ</h3><p><code>crypto/ecdh</code>で楕円暗号のパッケージが追加になりました。<a href="https://qiita.com/lemiyachi/items/c20a18b172c6f192a262">RSAの終わりの始まり - 暗号移行再び</a>にあるように、暗号強度を強くしよう、という流れがまた来そうなので、要注目パッケージです。<br>あとは<code>crypto/ecdsa</code>とか<code>crypto/rsa</code>とかめずらしく、性能が悪くなる改善ですが、処理速度が定数時間で終わるようになるということで、処理する時間で内容が推測できちゃう系の最近たまに話題になる系統のセキュリティ対策ですかね。</p><h3 id="io-OffsetWriter"><a href="#io-OffsetWriter" class="headerlink" title="io.OffsetWriter"></a><code>io.OffsetWriter</code></h3><p><code>io.Reader</code>には<code>io.SectionReader</code>という、オフセット＋サイズ制限、<code>io.LimitReader</code>というサイズ制限のReaderはありましたが、実は<code>io.Writer</code>としてはオフセット系のはなかったんですね。書き込み上限のWriter（<code>LimitWriter？</code>)はなさそうなので、誰か提案すると良い気がします。</p><h3 id="math-rand"><a href="#math-rand" class="headerlink" title="math/rand"></a><code>math/rand</code></h3><p>地味に変更が多いです。1.20から、デフォルトの乱数の種が固定値でなくなりました。1.19までは間違ったプログラムの実行の仕方を防ぐために、常に同じ乱数が変えるようになっていて、開発者に適切な種の設定を即す挙動になっていました。実行時に<code>GODEBUG=randautoseed=0</code>をつけると、以前と同じ挙動になります。このグローバルな乱数ジェネレータの乱数の種を設定するグローバルな<code>rand.Seed()</code>は廃止になっています。種を固定した乱数が必要な場合は、乱数生成器を明示的に作って使いましょう。<br>あと、<code>rand.Read()</code>も廃止になっています。ランダムなバイト列取得というセキュリティ用途でよくあるユースケースで間違って使われるケースが多かったんでしょうか？<code>crypto/rand</code>の<code>Read</code>を使えとなっていますね。</p><h3 id="regexp"><a href="#regexp" class="headerlink" title="regexp"></a><code>regexp</code></h3><p>正規表現でメモリを消費しすぎるパターンの場合に<code>syntax.ErrLarge</code>が返るようになりました。Go 1.19のパッチリリースでセキュリティ対策されたのですが、そのときは新しいAPIを導入しないルールに従い、<code> syntax.ErrInternalError</code>を一時的に返していたが、1.20からは上記のエラーが新規で作られたとのことです。バージョンアップのやり方として参考になりますね。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>明日(1&#x2F;24)は真野さんの <a href="/articles/20230125a/">contextパッケージのWithCancelCauseとCause</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;フューチャーのテックブログ恒例のGoの新バージョンリリース記念のブログが始まります。この執筆時点でrc3が出ています。かつてこんな順調なことがあったでしょうか？&lt;/p&gt;
&lt;div class=&quot;scroll&quot;&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="Go1.20" scheme="https://future-architect.github.io/tags/Go1-20/"/>
    
  </entry>
  
  <entry>
    <title>MailSlurperを使って6桁のコードの送信コードのテストをする</title>
    <link href="https://future-architect.github.io/articles/20230120a/"/>
    <id>https://future-architect.github.io/articles/20230120a/</id>
    <published>2023-01-19T15:00:00.000Z</published>
    <updated>2023-01-19T23:56:32.500Z</updated>
    
    <content type="html"><![CDATA[<p>以前、認証ミドルウェアのhankoの紹介の中で、hankoがテストで使っているMailSlurperというメールサーバーが面白いという紹介をしました。</p><p><a href="https://future-architect.github.io/articles/20220902a/">https://future-architect.github.io/articles/20220902a/</a></p><p>テストにおいては、モックは使うものの、モックを差し込むレイヤーはソースコードレベルではなくて、インフラレベルで仕掛ける方がいいよ、というのはほぼコンセンサスとなっていると思います。</p><ul><li>RDBを使うには、DockerでさっとPostgreSQLを差し込む</li><li>フロントエンドからのHTTPの外部サービスを使うには、<a href="https://mswjs.io/">Mock Service Worker</a>とか<a href="https://docs.cypress.io/api/commands/intercept">Cypressのintercept</a>を使う</li></ul><p>もちろん、フレームワークでH2とかSQLiteとかのローカルで簡単に使えるDBMSをサポートしているならそれを使うのも手ですが、ともかく、コードレベルのモックオブジェクトを実装するのはなし、という感じですね。</p><p>というのも、やり方を間違えると、モックに対するテストコードになって、コード量のわりに品質があがらないとか、結局実システムの挙動の変化に気づけずに不具合が防止できないとか、モックをコードで作るのはあまりよくないという論調ですね。なるべく上流でモックすれば、そのような問題は減ります。将来的にはモックの挙動が正しいかの検証とかそういうあたりの進化もあるかな、と思いつつ、楽に成果が出るならそちらを今は選択すべきと思います。</p><p>メールを送信するシステムにおいても、MailSlurperを使えば良さそうなので試してみました。最近よく見かける、6桁の数字のコードを追加の認証を行うシステムのテストです。</p><h1 id="MailSlurper"><a href="#MailSlurper" class="headerlink" title="MailSlurper"></a>MailSlurper</h1><p><a href="https://www.mailslurper.com/">MailSlurper</a>は、MITライセンスのオープンソースのメールサーバー兼クライアントです。SMTPでメールを受けることができて、ブラウザでそのメールを確認できます。また、REST APIも提供されており、受信したメールをAPIで取り出せます。Go製で軽く、Dockerで気軽に起動できます。</p><p>メールボックスは1つで、来たメールはすべて一か所に集まります。ドキュメントを見ると、クライアント証明書をアクセス時に必要という設定ができ、本番環境でも使うことを想定してそうですが、エンドユーザー向けに使うにもメールボックスが1つしかないと不便ですし、受信後のイベント起動とかがないので、バックエンド処理のトリガーにするにも少し心もとなく、今のところはテスト用途がベストかな、と思っています。</p><p>GitHubを見てもここしばらくはあまり更新されていないのですが、SMTPは機能的には枯れているので問題ないでしょう。</p><h1 id="6桁の数値の生成とセキュリティ"><a href="#6桁の数値の生成とセキュリティ" class="headerlink" title="6桁の数値の生成とセキュリティ"></a>6桁の数値の生成とセキュリティ</h1><p>みなさん、<a href="https://www.oreilly.co.jp/books/9784873119038/">Real World HTTP</a>はすでにご覧になられていると思いますので、お手元の本の「14.8.5　タイムベースワンタイムパスワードアルゴリズム（TOTP）」を見れば詳しいことが書かれているので、詳細については語りませんが、秘密鍵として用意したシークレットをもとに、日時情報を加えて6桁の数値を生成します。Goなら github.com&#x2F;pquerna&#x2F;otp&#x2F;totp パッケージを利用するのが簡単です。</p><p>6桁の数値の計算はRFCで決められたアルゴリズムに基づいて行います。高いセキュリティが求められるようなサービスであれば、事前に秘密鍵をGoogle Authenticatorなどのアプリに登録しておき、TOTPのアルゴリズムに従って出力した数値をサーバーに送り、サーバー側でも同じ計算をすることで照合します。秘密鍵そのものは最初の登録時以外はネットワークを流れることがないため、通信経路が安全でなくても比較的安全です。仮に通信が傍受されても、そのコードは30秒（たいていのサービスの場合）しか有効でないからです。</p><p>一方で、あまりプロ向けのサービス出ない場合は、同じTOTPのアルゴリズムであっても、別の使い方をします。登録されているメールアドレスやSMS、音声通話で6桁のコードをユーザーに伝え、それをユーザーがサーバー画面で入力して戻すことで照合します。通信経路の傍受に対する強度は同じですが、仮にSIMスワップ攻撃を受けたり、メールサーバーのアカウントがクラックされてアクセスされてしまうと突破できてしまうので、手元のハードウェアに触られなければ安心の前述の方法よりはやや安全性は落ちます（もちろん、秘密鍵をそのデバイスにしか入れていないという前提で）。</p><p>後者のような機能を実装するサービスは増えているので、それをMailSlurperを使ってテストしてみます。</p><h1 id="シークレットの作成"><a href="#シークレットの作成" class="headerlink" title="シークレットの作成"></a>シークレットの作成</h1><p>シークレットの生成は”github.com&#x2F;pquerna&#x2F;otp”で簡単にできます。シークレット生成はユーザー登録時に行い、サーバー側でユーザーごとに保存します。後半のコードは、すでに登録済みのユーザーに対して行う前提なので、あらかじめ作っておいてテストコードに利用します。登録プロセスを実装する場合はこちらのコードを参考にしてください。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/pquerna/otp/totp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    key, err := totp.Generate(totp.GenerateOpts&#123;&#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;key: %s\n&quot;</span>, key.Secret())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="テストサーバーの起動"><a href="#テストサーバーの起動" class="headerlink" title="テストサーバーの起動"></a>テストサーバーの起動</h1><p>テストのためのMailSlurperを起動しておきます。docker composeを利用します。ウェブの管理画面、API、SMTPポートの3つを開けておきます。なお、公式のDockerイメージはなく、野良イメージが多いのですが、<a href="https://hub.docker.com/r/marcopas/docker-mailslurper">marcopas&#x2F;docker-mailslurper</a> が一番ドキュメントが充実しています。</p><figure class="highlight yaml"><figcaption><span>docker-compose.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mailslurper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">marcopas/docker-mailslurper:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8080:8080&#x27;</span> <span class="comment"># web UI</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8085:8085&#x27;</span> <span class="comment"># API</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;2500:2500&#x27;</span> <span class="comment"># smtp</span></span><br></pre></td></tr></table></figure><p>あとは起動するだけです。 <a href="http://localhost:8080/">http://localhost:8080</a> にアクセスして管理画面にアクセスできることを確認しましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker compose up</span><br></pre></td></tr></table></figure><img src="/images/20230120a/スクリーンショット_2023-01-16_1.41.30.png" alt="スクリーンショット_2023-01-16_1.41.30.png" width="1200" height="684" loading="lazy"><h1 id="テストコード作成"><a href="#テストコード作成" class="headerlink" title="テストコード作成"></a>テストコード作成</h1><p>これから作るコードは、6桁の認証コードつきのメールを送信するものです。その6桁の数値が正しいものかどうかの検証を来ないます。</p><p>MailSlurperは<a href="https://github.com/mailslurper/mailslurper/wiki/Email-Endpoints">REST APIを提供しています</a>。送信されたメール一覧を取得してきます。取得にあたっては、送信もとアドレスや送信先のアドレスでフィルタリングもできます。</p><p>まずはテストヘルパーとして、メールサーバーからメールをとってくるコードを作成してみます。6桁の数値を取り出します。送信先アドレスでフィルタリングを行うようにします。同時にテストを並行で走らせたとしても、送信先のユーザー（アドレス）を分けておけばテストが干渉することがなくなります。今回はGoで実装しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> authcode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line"><span class="string">&quot;regexp&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// json2goで作成した、MailSlurperのメールアドレス一覧のレスポンス</span></span><br><span class="line"><span class="keyword">type</span> MailSlurperResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">MailItems    []MailItem <span class="string">`json:&quot;mailItems&quot;`</span></span><br><span class="line">TotalPages   <span class="type">int</span>        <span class="string">`json:&quot;totalPages&quot;`</span></span><br><span class="line">TotalRecords <span class="type">int</span>        <span class="string">`json:&quot;totalRecords&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MailItem <span class="keyword">struct</span> &#123;</span><br><span class="line">ID          <span class="type">string</span>   <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">DateSent    <span class="type">string</span>   <span class="string">`json:&quot;dateSent&quot;`</span></span><br><span class="line">FromAddress <span class="type">string</span>   <span class="string">`json:&quot;fromAddress&quot;`</span></span><br><span class="line">ToAddresses []<span class="type">string</span> <span class="string">`json:&quot;toAddresses&quot;`</span></span><br><span class="line">Subject     <span class="type">string</span>   <span class="string">`json:&quot;subject&quot;`</span></span><br><span class="line">Body        <span class="type">string</span>   <span class="string">`json:&quot;body&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// toアドレスでフィルタリングしてのメールの取り出し</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReceiveMail</span><span class="params">(t *testing.T, host, to <span class="type">string</span>)</span></span> []MailItem &#123;</span><br><span class="line">t.Helper()</span><br><span class="line">u, err := url.Parse(host)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">u.Path = <span class="string">&quot;/mail&quot;</span></span><br><span class="line">q := url.Values&#123;&#125;</span><br><span class="line">q.Set(<span class="string">&quot;to&quot;</span>, to)</span><br><span class="line">u.RawQuery = q.Encode()</span><br><span class="line"></span><br><span class="line">res, err := http.Get(u.String())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">d := json.NewDecoder(res.Body)</span><br><span class="line">r := MailSlurperResponse&#123;&#125;</span><br><span class="line">err = d.Decode(&amp;r)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r.MailItems</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6桁のコードを取り出す（裏でメールサーバーから情報取得）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReceivePassCode</span><span class="params">(t *testing.T, host, to <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">t.Helper()</span><br><span class="line">mails := ReceiveMail(t, host, to)</span><br><span class="line"></span><br><span class="line">p := regexp.MustCompile(<span class="string">`\d&#123;6&#125;`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, m := <span class="keyword">range</span> mails &#123;</span><br><span class="line"><span class="keyword">return</span> p.FindString(m.Body)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成したテストコードは以下の通りです。短く書けますね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> authcode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestValidate</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">secret := <span class="string">&quot;LB6BHGYD63JCWM4BBPHCSRBXGZYKGDI3&quot;</span> <span class="comment">// 事前に作成しておいたシークレット</span></span><br><span class="line">    <span class="comment">// これから作成する、パスコード送信処理</span></span><br><span class="line">err := SendPassCode(<span class="string">&quot;localhost:2500&quot;</span>, <span class="string">&quot;test user&quot;</span>, <span class="string">&quot;test@example.com&quot;</span>, secret)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">&quot;error should be nil: %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">code := ReceivePassCode(t, <span class="string">&quot;http://localhost:8085&quot;</span>, <span class="string">&quot;test@example.com&quot;</span>)</span><br><span class="line">    <span class="comment">// これから実装するバリデーション</span></span><br><span class="line"><span class="keyword">if</span> !Validate(code, secret) &#123;</span><br><span class="line">t.Error(<span class="string">&quot;validation failed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>APIエンドポイントの<code>/mail</code>に<code>to</code>クエリーをつけて帰ってくるJSONをいじるだけなので、他の言語でもすぐに実装できると思います。</p><h1 id="コード生成とメール送信"><a href="#コード生成とメール送信" class="headerlink" title="コード生成とメール送信"></a>コード生成とメール送信</h1><p>登録済みのユーザー（サーバーは、名前、メールアドレスおよび、シークレットを知っている）に対して、コードを生成して送信します。なお、レガシーなもろもろの塊であるメールで日本語を正しく送信するにあたっては、以下のQiita記事を参考にしました。</p><ul><li><a href="https://qiita.com/yamasaki-masahide/items/a9f8b43eeeaddbfb6b44">go で utf8メールを送信</a></li></ul><p>上記のテストが通るように実装したのが以下のテストです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> authcode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"><span class="string">&quot;net/mail&quot;</span></span><br><span class="line"><span class="string">&quot;net/smtp&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/pquerna/otp/totp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上記のエントリーから、add76crlf, utf8Split, encodeSubjectをコピーしておくこと</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// メールの作成</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenerateMessage</span><span class="params">(toUserName, toAddress, secret <span class="type">string</span>)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">from := mail.Address&#123;<span class="string">&quot;Myサービス&quot;</span>, <span class="string">&quot;noreply@my-service.com&quot;</span>&#125;</span><br><span class="line">to := mail.Address&#123;toUserName, toAddress&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> msg bytes.Buffer</span><br><span class="line">msg.WriteString(<span class="string">&quot;From: &quot;</span> + from.String() + <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">msg.WriteString(<span class="string">&quot;To: &quot;</span> + to.String() + <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">msg.WriteString(encodeSubject(<span class="string">&quot;Myサービスの認証コード&quot;</span>))</span><br><span class="line">msg.WriteString(<span class="string">&quot;MIME-Version: 1.0\r\n&quot;</span>)</span><br><span class="line">msg.WriteString(<span class="string">&quot;Content-Type: text/plain; charset=\&quot;utf-8\&quot;\r\n&quot;</span>)</span><br><span class="line">msg.WriteString(<span class="string">&quot;Content-Transfer-Encoding: base64\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">code, err := totp.GenerateCode(secret, time.Now())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> body bytes.Buffer</span><br><span class="line">body.WriteString(<span class="string">&quot;認証コードはこちらです\n\n&quot;</span> + code + <span class="string">&quot;\n\nMyサービス&quot;</span>)</span><br><span class="line">msg.WriteString(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">msg.WriteString(add76crlf(base64.StdEncoding.EncodeToString(body.Bytes())))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> msg.Bytes(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// メール送信</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendPassCode</span><span class="params">(host, toUserName, toAddress, secret <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">msg, err := GenerateMessage(toUserName, toAddress, secret)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = smtp.SendMail(</span><br><span class="line">host,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line"><span class="string">&quot;noreply@my-service.com&quot;</span>,</span><br><span class="line">[]<span class="type">string</span>&#123;toAddress&#125;,</span><br><span class="line">msg,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// クライアントに送信されたパスコードのバリデーションを行う</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Validate</span><span class="params">(passcode, secret <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> totp.Validate(passcode, secret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先ほどのテストに対して実行すると、正しくテストをパスします。簡単にメール送信を伴うコードのテストができました。</p><h1 id="テストの後始末"><a href="#テストの後始末" class="headerlink" title="テストの後始末"></a>テストの後始末</h1><p>テストを行い続けると、メールボックスにメールが溜まり続けます。リソースを消費する量は大したことがないとはいえ、増え続けるのは精神衛生上良くないです。幸い、MailSlurperはメールボックスのリセットもAPIで提供してくれていますので、それを使ってみます。</p><p>まずは先ほどのテストヘルパーのファイルに以下のメールボックスリセットの送信を行うヘルパー関数を追加します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ResetMailSlumper</span><span class="params">(host <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">u, err := url.Parse(host)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">u.Path = <span class="string">&quot;/mail&quot;</span></span><br><span class="line"></span><br><span class="line">req, _ := http.NewRequest(<span class="string">&quot;DELETE&quot;</span>, u.String(), strings.NewReader(<span class="string">`&#123;&quot;pruneCode&quot;: &quot;all&quot;&#125;`</span>))</span><br><span class="line">req.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">http.DefaultClient.Do(req)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>テストの実行前にリセットを呼ぶようにします。後始末だと、実行後の方が自然に思えるかもしれませんが、テストのリソースのリセットを後にしてしまうと、問題発生時に結果を追いかけるのが大変になるため、僕は全体の実行前にクリアするようにしています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line">ResetMailSlumper(<span class="string">&quot;http://localhost:8085&quot;</span>)</span><br><span class="line">code := m.Run()</span><br><span class="line">os.Exit(code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>これで実SMTPサーバーを使ったコードを書いて、それをMailSlurperを使ってテストする方法を学びました。REST APIのおかげで、ヘルパーさえ用意してしまえば、テストを書くのは簡単です。</p><p>これだけ使いやすいとなると、非同期通信系は全部SMTPに寄せたくなってくる気もします。まあ本番環境の安定稼働を考えると実際にやることはないですが、MailSlurperは送信結果を見るのもできて、開発体験はかなり良いです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;以前、認証ミドルウェアのhankoの紹介の中で、hankoがテストで使っているMailSlurperというメールサーバーが面白いという紹介をしました。&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="MailSlurper" scheme="https://future-architect.github.io/tags/MailSlurper/"/>
    
    <category term="TOTP" scheme="https://future-architect.github.io/tags/TOTP/"/>
    
    <category term="メール" scheme="https://future-architect.github.io/tags/%E3%83%A1%E3%83%BC%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>VPC Service ControlでGoogle Cloud環境をガッチリ守る</title>
    <link href="https://future-architect.github.io/articles/20230119a/"/>
    <id>https://future-architect.github.io/articles/20230119a/</id>
    <published>2023-01-18T15:00:00.000Z</published>
    <updated>2023-01-19T02:55:50.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、本記事ではGoogle CloudのVPC Service Controlsを利用して、リソースへのアクセス制御を行う方法についてTerraformコード付きで紹介していきたます。</p><p>昨今では、個人情報漏洩のニュースが尽きません。少し古いデータではありますが、2012年～2021年に漏洩・紛失した可能性のある個人情報は累計で1億1979万人分にのぼり、2022年を含めるともっと多くなりそうです。<br><a href="https://webtan.impress.co.jp/n/2022/03/22/42500#:~:text=%E6%9D%B1%E4%BA%AC%E5%95%86%E5%B7%A5%E3%83%AA%E3%82%B5%E3%83%BC%E3%83%81%E3%81%AF%E3%80%812021,%E3%82%82%E6%9C%80%E5%A4%9A%E8%A8%98%E9%8C%B2%E3%81%A0%E3%81%A8%E3%81%84%E3%81%86%E3%80%82">個人情報漏えい、10年間で日本の人口とほぼ同じ人数分が上場企業から流出・紛失【東京商工リサーチ調べ】</a></p><p>セキュリティインシデントを起こさないためにも、基本的にはデータへのアクセスを拒否し、データにアクセスできる人を絞って穴あけするなど、しっかりとデータを守っておく必要があります。</p><p>そんな要求に答えるのがVPC Service Controlsになります。</p><h2 id="VPC-Service-Controlsとは"><a href="#VPC-Service-Controlsとは" class="headerlink" title="VPC Service Controlsとは"></a>VPC Service Controlsとは</h2><p><a href="https://cloud.google.com/vpc-service-controls/docs/overview?hl=ja">VPC Service Controlsの概要</a></p><p>VPC Service Controlsを利用することによって、Google Cloudのリソースへのアクセスに境界を作ることができます。</p><p>例えば、BigQueryやCloud Storageに個人を特定することができる情報（例：身長、体重、性別、年齢）や画像が置かれている場合、VPC Service Controlsを利用することで<strong>それらのリソースに限られた人間のみがアクセス可能</strong>となります。</p><p>また境界の内外におけるデータ移動を制御することが可能なため、データが境界の外へ持ち出されることも防ぎます（境界を超える通信はデフォルトでブロックされます）。</p><img src="/images/20230119a/a864e1b2-7cd3-c69c-bf63-fe2b21622b6d.png" alt="" width="1200" height="640" loading="lazy"><p>こちらの画像のように、境界（Service Perimeter）内に存在するBigQueryは認証されたVPC、VM（GCE）からのみアクセス可能となり、認証されていないリソースからは境界内へのアクセス・境界外へのアクセス共に制限されることになります。</p><p>現在、VPC Service Controlsがサポートしているリソースの一覧はこちらになります。<br><a href="https://cloud.google.com/vpc-service-controls/docs/supported-products?hl=ja">VPC Service Controlでサポートされているプロダクトと制限事項</a></p><h3 id="Cloud-IAMとは違うの？"><a href="#Cloud-IAMとは違うの？" class="headerlink" title="Cloud IAMとは違うの？"></a>Cloud IAMとは違うの？</h3><p>Cloud IAMもリソースへのアクセスを制限するためのサービスで、<strong>詳細なIDベースのアクセス制御を主</strong>としています。IDベースなので例えばログインしているアカウント、所属するグループ、サービスアカウントなどを基にアクセス制御を行います。</p><p>VPC Service Controlsはそれに加えて、境界全体への上り（Ingress）・下り（Egress）データの制御など、<strong>コンテキストベースの境界セキュリティが可能</strong>となります。</p><p>コンテキストベースは、例えば「どこ（IPアドレス）」、「だれ（ユーザーアカウント・サービスアカウント、<strong>グループは現在不可</strong>）」、「何で（OS）」などアクセス元の背景からリソースへのアクセス可否を判断します。</p><p>どちらが良い・悪いというのは無く、併用することでより強固なセキュリティを築くことが可能となります。</p><h2 id="BigQueryを使って挙動を確認"><a href="#BigQueryを使って挙動を確認" class="headerlink" title="BigQueryを使って挙動を確認"></a>BigQueryを使って挙動を確認</h2><h3 id="Organizationの設定が必要"><a href="#Organizationの設定が必要" class="headerlink" title="Organizationの設定が必要"></a>Organizationの設定が必要</h3><p>VPC Service Controlを始めるにはOrganizationが必要となります。Organizationの設定にはドメインが必要となるため、Google Domainなどで取得する（年間1200円～）必要があります。もし、既にドメインをお持ちの場合はサブドメインを作って、それをOrganizationへ適用することも可能です。</p><p>Organizationの作成方法は以下を参考にするとよいです。<br><a href="https://qiita.com/suzuyui/items/947867f52897417ee31b#1-%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%8F%96%E5%BE%97">GCP で組織を作成して共有 VPC 構築 - 1.ドメイン取得</a></p><h3 id="アクセスポリシーを作成する"><a href="#アクセスポリシーを作成する" class="headerlink" title="アクセスポリシーを作成する"></a>アクセスポリシーを作成する</h3><p>アクセスポリシーは、以後出てくるアクセスレベルやサービス境界など、全てのAccess Context Managerリソースのコンテナ（箱）です。</p><p>Organizationに対してOrganizationレベルのアクセスポリシーを作成し、組織内のフォルダとプロジェクトに対してスコープポリシーを作成します。</p><figure class="highlight sh"><figcaption><span>access_context_manager_access_policy.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_access_context_manager_access_policy&quot;</span> <span class="string">&quot;access_policy&quot;</span> &#123;</span><br><span class="line">  parent = <span class="string">&quot;organizations/1234567890123&quot;</span></span><br><span class="line">  title  = <span class="string">&quot;Test access policy&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>parent</code>には自身のOrganization IDを入力する必要があり、<code>title</code>がOrganizationのアクセスポリシーの名前となります。</p><p>作成すると、Organization→セキュリティ→VPC Service Controls上にアクセスポリシーが作成されていることが確認できます。</p><img src="/images/20230119a/d0b0a574-e85f-3509-49bc-263a2ec8b6f5.jpeg" alt="" width="1120" height="334" loading="lazy"><h3 id="ID制御をやってみる"><a href="#ID制御をやってみる" class="headerlink" title="ID制御をやってみる"></a>ID制御をやってみる</h3><p>ID制御を行ってみます。<br>通常は画像のようにBigQueryのDataset, tableを見ることができます。</p><img src="/images/20230119a/da83249a-b466-c2eb-8ea7-9e5fe5e9abfc.jpeg" alt="" width="894" height="396" loading="lazy"><p>これに対して、以下のようなBigQueryへの内向きのみを許可したサービス境界を設定してみます。</p><img src="/images/20230119a/755d759c-cde1-42d1-c0c4-e62dc1425a89.png" alt="" width="930" height="348" loading="lazy"><h4 id="アクセスレベルを作成する"><a href="#アクセスレベルを作成する" class="headerlink" title="アクセスレベルを作成する"></a>アクセスレベルを作成する</h4><p><a href="https://cloud.google.com/access-context-manager/docs/overview#access-levels">アクセスレベル</a>ではリソースへのアクセスを許可する条件を定義します。<br>例えば、IPアドレスやID（ユーザーアカウント、サービスアカウント）を用いたアクセス条件を<code>AND</code>や<code>OR</code>を使って定義することができ、この条件に適したユーザーのみがリソースへアクセス可能となります。<br>Terraformでは以下のようにアクセスレベルを作成します。</p><figure class="highlight sh"><figcaption><span>access_context_manager_access_level.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_access_context_manager_access_level&quot;</span> <span class="string">&quot;id&quot;</span> &#123;</span><br><span class="line">  parent = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>&quot;</span></span><br><span class="line">  name   = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>/accessLevels/specified_id&quot;</span></span><br><span class="line">  title  = <span class="string">&quot;Specified ID&quot;</span></span><br><span class="line"></span><br><span class="line">  basic &#123;</span><br><span class="line">    conditions &#123;</span><br><span class="line">      // アクセスを許可する条件</span><br><span class="line">      // ここで気を付けたいのが、メールアドレスの前にuser:をつけること</span><br><span class="line">      // ServiceAccountの場合はserviceAccount:&#123;emailid&#125;</span><br><span class="line">      // また、グループはサポートされていない</span><br><span class="line">      members = [</span><br><span class="line">        <span class="string">&quot;user:xxx@yyy.com&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="サービス境界を作成する"><a href="#サービス境界を作成する" class="headerlink" title="サービス境界を作成する"></a>サービス境界を作成する</h4><p>VPC Service Controlsの主役です。指定したサービスのリソースに対して外部アクセスから保護するための境界を作ります。</p><p>以下のようにTerraformコードを作成し、サービス境界を作成します。</p><figure class="highlight sh"><figcaption><span>access_context_manager_service_perimeters.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_access_context_manager_service_perimeter&quot;</span> <span class="string">&quot;service_perimeter_qiita&quot;</span> &#123;</span><br><span class="line">  parent = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>&quot;</span></span><br><span class="line">  name   = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>/servicePerimeters/restrict_bigquery&quot;</span></span><br><span class="line">  title  = <span class="string">&quot;restrict_bigquery&quot;</span></span><br><span class="line">  status &#123;</span><br><span class="line">    // 境界を作るサービスを列挙する</span><br><span class="line">    restricted_services = [</span><br><span class="line">      <span class="string">&quot;bigquery.googleapis.com&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">    // 境界を作るプロジェクト</span><br><span class="line">    resources = [</span><br><span class="line">      <span class="string">&quot;projects/123456789012&quot;</span> // Project IDで指定する</span><br><span class="line">    ]</span><br><span class="line">    // アクセスレベル</span><br><span class="line">    access_levels = [</span><br><span class="line">      google_access_context_manager_access_level.access_level_id.name</span><br><span class="line">    ]</span><br><span class="line">    // 内向きポリシー</span><br><span class="line">    ingress_policies &#123;</span><br><span class="line">      ingress_from &#123;</span><br><span class="line">        // IDタイプはidentitiesで指定するため、UNSPECIFIEDになる</span><br><span class="line">        identity_type = <span class="string">&quot;IDENTITY_TYPE_UNSPECIFIED&quot;</span></span><br><span class="line">        // 内向き元のID</span><br><span class="line">        identities = [</span><br><span class="line">          <span class="string">&quot;user:xxx@yyy.com&quot;</span> // メールアドレスで指定する</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">      ingress_to &#123;</span><br><span class="line">        // 境界内のプロジェクトの内、アクセスするプロジェクト</span><br><span class="line">        resources = [<span class="string">&quot;*&quot;</span>]</span><br><span class="line">        // 許可する操作</span><br><span class="line">        operations &#123;</span><br><span class="line">          service_name = <span class="string">&quot;bigquery.googleapis.com&quot;</span></span><br><span class="line">          // 許可するメソッド（API）を指定する</span><br><span class="line">          // 今回は全てのメソッドを指定しているため、*になっている</span><br><span class="line">          method_selectors &#123;</span><br><span class="line">            method = <span class="string">&quot;*&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>アクセスレベルの<code>members</code>、サービス境界の<code>ingress_from</code>の<code>identities</code>、どちらもID<code>&quot;user:xxx@yyy.com&quot;</code>を設定しています。</p><p>アクセスレベル側では<code>restricted_services</code>全体に対しての制御になります。今回はBigQueryのみしか入っておりませんが、Cloud Storageなど他のサービス入れることができ、<code>restricted_services</code>に入っているサービス全てにアクセスレベル側での<code>members</code>設定が適用されます。また、アクセスレベル側で許可されている場合はIngress&#x2F;Egress両方の操作が可能となります。</p><p>サービス境界側の<code>identities</code>はTerraformコードの構成を見るとわかるように、内向き（Ingress）・外向き（Egress）で、尚且つAPI毎で適用されることになります。そのため、アクセスレベルですり抜けた場合にIngress&#x2F;Egressでのポリシーが適用されます。</p><p>今回の場合だとBigQueryのみしかないので<code>identities</code>の指定は不要ですが、参考のために記載しております。</p><h4 id="認証されたアカウントで確認してみる"><a href="#認証されたアカウントで確認してみる" class="headerlink" title="認証されたアカウントで確認してみる"></a>認証されたアカウントで確認してみる</h4><p>アクセスレベルで許可されたアカウントでBigQueryを見てみると先ほどと同じようにテーブルが表示されます。</p><img src="/images/20230119a/da83249a-b466-c2eb-8ea7-9e5fe5e9abfc_2.jpeg" alt="" width="894" height="396" loading="lazy"><p>次に認証されていないプロジェクトからクエリを実行してみます。</p><img src="/images/20230119a/7f3f9c23-2e49-3aea-acaa-2e29d774582b.jpeg" alt="" width="1200" height="223" loading="lazy"><p>右上に赤字で<code>VPC Service Controls: Request is prohibited by organization&#39;s policy. vpcServiceControlsUniqueIdentifier: -ZWUwU96cNc6_jcWbyKhbCfz9canAZcNkQjPcb4uEhOY00WbG64xVw.</code>と表示され、クエリが実行できなくなっています。<br>こちらの原因としては今回内向き（Ingress）のみしか許可していなかったため、サービス境界外へのデータ持ち出しが拒否されたことによるものです。</p><img src="/images/20230119a/fbf4eb92-8842-ec33-9104-afeec96066bd.png" alt="" width="816" height="280" loading="lazy"><h5 id="少し寄り道：ポリシー違反のトラブルシューティング"><a href="#少し寄り道：ポリシー違反のトラブルシューティング" class="headerlink" title="少し寄り道：ポリシー違反のトラブルシューティング"></a>少し寄り道：ポリシー違反のトラブルシューティング</h5><p>ポリシー違反の理由を確認するために、Google CloudではVPC Service Controls のトラブルシューティングが用意されています。<br><a href="https://cloud.google.com/vpc-service-controls/docs/troubleshooter?hl=ja">VPC Service Controls のトラブルシューティングによる問題の診断</a></p><p>上記のようにポリシー違反が発生した際、<code>vpcServiceControlsUniqueIdentifier:</code>以降の文字列をVPC Service Controls のトラブルシューティングに入力すると違反理由が確認できます。</p><img src="/images/20230119a/b666ebc4-5fc7-cfee-b484-e523c7d96640.png" alt="" width="823" height="663" loading="lazy"><p>トラブルシューティングをすると、以下のように行われた動作と違反理由が表示されます。</p><img src="/images/20230119a/0e0f69b8-fb59-c4a1-12b4-bb8e739f200f.png" alt="" width="949" height="463" loading="lazy">上記のポリシー違反理由は、サービス境界外で`tables.getData`が行われたことが原因のようです。また、このことからクエリ実行の際、コンソールの裏側ではAPI（`tables.getData`）がコールされていることもわかります。<h4 id="認証されていないアカウントで確認してみる"><a href="#認証されていないアカウントで確認してみる" class="headerlink" title="認証されていないアカウントで確認してみる"></a>認証されていないアカウントで確認してみる</h4><p>また、認証されていないアカウントで確認してみると以下のように表示されます。</p><img src="/images/20230119a/898b2891-6500-d523-2d73-a9ea1c6c24e4.png" alt="" width="1200" height="287" loading="lazy"><p>データセットすら見えず、クエリを打とうとすると右上に赤字で<code>VPC Service Controls: Request is prohibited by organization&#39;s policy.</code>と表示されています。</p><img src="/images/20230119a/263efca8-74e1-8ad3-3501-b668c6e69473.png" alt="" width="777" height="331" loading="lazy"><p>認証されていないアカウントで<code>bq</code>コマンドでも同様に確認してみます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ bq query --use_legacy_sql=<span class="literal">false</span> --project_id &lt;YOUR_PROJECT_ID&gt;  <span class="string">&#x27;select worker_id from `****-service-three.svc3_dataset.test_table`&#x27;</span></span><br><span class="line"></span><br><span class="line">BigQuery error <span class="keyword">in</span> query operation: VPC Service Controls: Request is prohibited by organization<span class="string">&#x27;s policy.</span></span><br><span class="line"><span class="string">vpcServiceControlsUniqueIdentifier: ***.</span></span><br></pre></td></tr></table></figure><p><code>bq</code>コマンドでもデータにアクセスできないことが確認できました。<br>以上より、サービス境界が作られていることがわかりました。</p><h3 id="IP制御を加えてみる"><a href="#IP制御を加えてみる" class="headerlink" title="IP制御を加えてみる"></a>IP制御を加えてみる</h3><p>アクセスレベルにGCEのVMに付与されたIPアドレスを指定し、先ほどと同様のサービス境界を作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_access_context_manager_access_level&quot;</span> <span class="string">&quot;id_and_ip&quot;</span> &#123;</span><br><span class="line">  parent = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>&quot;</span></span><br><span class="line">  name   = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>/accessLevels/specified_id_and_ip&quot;</span></span><br><span class="line">  title  = <span class="string">&quot;Specified ID and IP&quot;</span></span><br><span class="line"></span><br><span class="line">  basic &#123;</span><br><span class="line">    <span class="comment"># combining_functionで各条件の組み合わせ条件を指定する</span></span><br><span class="line">    <span class="comment"># デフォルトはANDになる</span></span><br><span class="line">    combining_function = <span class="string">&quot;AND&quot;</span></span><br><span class="line">    conditions &#123;</span><br><span class="line">      members = [</span><br><span class="line">        <span class="string">&quot;user:xxx@yyy.com&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">    conditions &#123;</span><br><span class="line">      ip_subnetworks = [</span><br><span class="line">        <span class="string">&quot;xx.xx.xx.xx/32&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先ほどアクセス可能だったアカウントからGoogle CloudコンソールのBigQueryへアクセスして、クエリを実行してみます。<br><img src="/images/20230119a/77f9a4f8-2a73-f0d1-400a-e306ffb1b765.png" alt="" width="1200" height="123" loading="lazy"></p><p>アクセスできなくなったことが確認できます。</p><img src="/images/20230119a/9de770bd-ea00-9238-2464-906a4bc2561a.png" alt="" width="795" height="320" loading="lazy"><p>次に指定されたIPアドレスのVMに認証済みのアカウントで<code>gcloud auth login</code>してから<code>bq</code>コマンドを打ってみます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bq query --use_legacy_sql=<span class="literal">false</span> --project_id &lt;YOUR_PROJECT_ID&gt;  <span class="string">&#x27;select worker_id from `****-service-three.svc3_dataset.test_table`&#x27;</span></span><br><span class="line">+-----------+</span><br><span class="line">| worker_id |</span><br><span class="line">+-----------+</span><br><span class="line">|         1 |</span><br><span class="line">|         4 |</span><br><span class="line">|         3 |</span><br><span class="line">|         5 |</span><br><span class="line">|         2 |</span><br><span class="line">+-----------+</span><br></pre></td></tr></table></figure><p>無事にクエリを実行することができました。</p><img src="/images/20230119a/27b0c988-2a46-cf62-d7c1-910a171c2e00.png" alt="" width="925" height="338" loading="lazy"><p>このようにアクセスレベルでは個々のIPやアカウントを利用した細かい制御を行うことができます。<br>他にもOSの指定（有料）、スクリーンロックを要求するなどを設定することも可能です。</p><h2 id="応用編"><a href="#応用編" class="headerlink" title="応用編"></a>応用編</h2><h3 id="Service-Perimeterで守られた2つのBigQuery間でテーブルをJOINする"><a href="#Service-Perimeterで守られた2つのBigQuery間でテーブルをJOINする" class="headerlink" title="Service Perimeterで守られた2つのBigQuery間でテーブルをJOINする"></a>Service Perimeterで守られた2つのBigQuery間でテーブルをJOINする</h3><p>2つのプロジェクトを用意し、各プロジェクトで以下のデータセットを用意します。</p><figure class="highlight bash"><figcaption><span>ProjectA</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+-----------------+</span><br><span class="line">| department_id | department_name |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">|             3 | HR              |</span><br><span class="line">|             1 | Engineer        |</span><br><span class="line">|             5 | Marketing       |</span><br><span class="line">|             4 | BackOffice      |</span><br><span class="line">|             2 | Sales           |</span><br><span class="line">+---------------+-----------------+</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>ProjectA</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-----------+-----------+-----+---------------+</span><br><span class="line">| worker_id |   name    | age | department_id |</span><br><span class="line">+-----------+-----------+-----+---------------+</span><br><span class="line">|         1 | Tanaka    |  23 |             1 |</span><br><span class="line">|         4 | Kobayashi |  28 |             2 |</span><br><span class="line">|         3 | Yamada    |  56 |             2 |</span><br><span class="line">|         5 | Suzuki    |  44 |             3 |</span><br><span class="line">|         2 | Sasaki    |  34 |             5 |</span><br><span class="line">+-----------+-----------+-----+---------------+</span><br></pre></td></tr></table></figure><p>そして、それぞれのBigQueryを以下のように別のサービス境界で守ります。</p><img src="/images/20230119a/34000be3-c373-0fe1-47b6-fdae7b41ec73.png" alt="" width="1078" height="374" loading="lazy"><p>ではこの時、どのようにIngree&#x2F;Egressを設定すればよいのでしょうか？<br>正解は以下のようになります。</p><img src="/images/20230119a/e43ce7a0-2d0e-6e65-a572-88d487eacd7b.png" alt="" width="928" height="489" loading="lazy"><p>アクセスレベルには先ほどと同様のIDとIPで指定したアクセスレベルを利用し、サービス境界のTerraformコードは以下になります。</p><figure class="highlight sh"><figcaption><span>perimeter_project_a.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_access_context_manager_service_perimeter&quot;</span> <span class="string">&quot;projecta_perimeter&quot;</span> &#123;</span><br><span class="line">  parent = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>&quot;</span></span><br><span class="line">  name   = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>/servicePerimeters/projecta&quot;</span></span><br><span class="line">  title  = <span class="string">&quot;ProjectA&quot;</span></span><br><span class="line">  status &#123;</span><br><span class="line">    restricted_services = [</span><br><span class="line">      <span class="string">&quot;bigquery.googleapis.com&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">    resources = [</span><br><span class="line">      <span class="string">&quot;projects/111111111111&quot;</span>, <span class="comment"># ProjectA</span></span><br><span class="line">    ]</span><br><span class="line">    access_levels = [</span><br><span class="line">      google_access_context_manager_access_level.access_level_id_and_ip.name</span><br><span class="line">    ]</span><br><span class="line">    egress_policies &#123;</span><br><span class="line">      egress_from &#123;</span><br><span class="line">        identity_type = <span class="string">&quot;ANY_IDENTITY&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      egress_to &#123;</span><br><span class="line">        resources = [</span><br><span class="line">          <span class="string">&quot;projects/222222222222&quot;</span> <span class="comment"># ProjectB</span></span><br><span class="line">          ]</span><br><span class="line">        operations &#123;</span><br><span class="line">          service_name = <span class="string">&quot;bigquery.googleapis.com&quot;</span></span><br><span class="line">          method_selectors &#123;</span><br><span class="line">            method = <span class="string">&quot;*&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>perimeter_project_b.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_access_context_manager_service_perimeter&quot;</span> <span class="string">&quot;projecta_perimeter&quot;</span> &#123;</span><br><span class="line">  parent = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>&quot;</span></span><br><span class="line">  name   = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>/servicePerimeters/projectb&quot;</span></span><br><span class="line">  title  = <span class="string">&quot;ProjectB&quot;</span></span><br><span class="line">  status &#123;</span><br><span class="line">    restricted_services = [</span><br><span class="line">      <span class="string">&quot;bigquery.googleapis.com&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">    resources = [</span><br><span class="line">      <span class="string">&quot;projects/222222222222&quot;</span>, <span class="comment"># ProjectB</span></span><br><span class="line">    ]</span><br><span class="line">    access_levels = [</span><br><span class="line">      google_access_context_manager_access_level.access_level_id_and_ip.name</span><br><span class="line">    ]</span><br><span class="line">    egress_policies &#123;</span><br><span class="line">      egress_from &#123;</span><br><span class="line">        identity_type = <span class="string">&quot;ANY_IDENTITY&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      egress_to &#123;</span><br><span class="line">        resources = [</span><br><span class="line">          <span class="string">&quot;projects/111111111111&quot;</span> <span class="comment"># ProjectA</span></span><br><span class="line">          ]</span><br><span class="line">        operations &#123;</span><br><span class="line">          service_name = <span class="string">&quot;bigquery.googleapis.com&quot;</span></span><br><span class="line">          method_selectors &#123;</span><br><span class="line">            method = <span class="string">&quot;*&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bq query --use_legacy_sql=<span class="literal">false</span>  <span class="string">&#x27;select name, age, department_name from `project-a.dataset.table1` as table1 join `project-b.dataset.table2` as table2 on table1.department_id=table2.department_id&#x27;</span></span><br><span class="line">+-----------+-----+-----------------+</span><br><span class="line">|   name    | age | department_name |</span><br><span class="line">+-----------+-----+-----------------+</span><br><span class="line">| Suzuki    |  44 | HR              |</span><br><span class="line">| Tanaka    |  23 | Engineer        |</span><br><span class="line">| Sasaki    |  34 | Marketing       |</span><br><span class="line">| Kobayashi |  28 | Sales           |</span><br><span class="line">| Yamada    |  56 | Sales           |</span><br><span class="line">+-----------+-----+-----------------+</span><br></pre></td></tr></table></figure><p>お互いにEGRESSを許可することでJOINが可能になります。<br>結合処理を行うスロットに送られる際に、ProjectA側のテーブルとProjectB側のテーブルが<strong>外に持ち出される</strong>ことでEGRESSの穴あけが必要になるようです。</p><h2 id="Shared-VPCでアクセス制御する"><a href="#Shared-VPCでアクセス制御する" class="headerlink" title="Shared VPCでアクセス制御する"></a>Shared VPCでアクセス制御する</h2><p>Shared VPCのプロジェクトでVPC Service Controlsを利用したい場合は、同じ境界内にVPCホストプロジェクトも含めないと、期待する動作にならない可能性があるみたいです。<br><a href="https://cloud.google.com/vpc-service-controls/docs/troubleshooting?hl=ja#shared_vpc">Shared VPCにおけるVPC Service Controls</a></p><p>そのため、以下のように<code>resources</code>へVPCホストプロジェクトも含めるようにしましょう。</p><figure class="highlight sh"><figcaption><span>perimeter_shared_pj.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_access_context_manager_service_perimeter&quot;</span> <span class="string">&quot;shared_pj_perimeter&quot;</span> &#123;</span><br><span class="line">  parent = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>&quot;</span></span><br><span class="line">  name   = <span class="string">&quot;accessPolicies/<span class="variable">$&#123;google_access_context_manager_access_policy.access_policy.name&#125;</span>/servicePerimeters/shared_pj_perimeter&quot;</span></span><br><span class="line">  title  = <span class="string">&quot;Shared PJ Perimeter&quot;</span></span><br><span class="line">  status &#123;</span><br><span class="line">    restricted_services = [</span><br><span class="line">      <span class="string">&quot;bigquery.googleapis.com&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">    // 境界を作るプロジェクトにホストプロジェクトも含める</span><br><span class="line">    resources = [</span><br><span class="line">      <span class="string">&quot;projects/333333333333&quot;</span>, <span class="comment"># shared-vpc-pj</span></span><br><span class="line">      <span class="string">&quot;projects/444444444444&quot;</span>, <span class="comment"># shared-vpc-host-pj</span></span><br><span class="line">    ]</span><br><span class="line">    access_levels = [</span><br><span class="line">      google_access_context_manager_access_level.access_level_id.name</span><br><span class="line">    ]</span><br><span class="line">    ingress_policies &#123;</span><br><span class="line">      ingress_from &#123;</span><br><span class="line">        identity_type = <span class="string">&quot;IDENTITY_TYPE_UNSPECIFIED&quot;</span></span><br><span class="line">        identities = [</span><br><span class="line">          <span class="string">&quot;user:xxx@yyy.com&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">      ingress_to &#123;</span><br><span class="line">        resources = [<span class="string">&quot;*&quot;</span>]</span><br><span class="line">        operations &#123;</span><br><span class="line">          service_name = <span class="string">&quot;bigquery.googleapis.com&quot;</span></span><br><span class="line">          method_selectors &#123;</span><br><span class="line">            method = <span class="string">&quot;*&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はBigQueryに対してVPC Service Controlsの機能を試してみました。</p><p>VPC Service Controlsではデータのやり取りを内向き・外向きの細かいレベルで制御することが可能になります。</p><p>Google Cloud上のデータを守るためにも、ぜひ利用してみて下さい。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、本記事ではGoogle CloudのVPC Service</summary>
        
      
    
    
    
    <category term="Security" scheme="https://future-architect.github.io/categories/Security/"/>
    
    
    <category term="Network" scheme="https://future-architect.github.io/tags/Network/"/>
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="VPC" scheme="https://future-architect.github.io/tags/VPC/"/>
    
  </entry>
  
  <entry>
    <title>GKEでIdentity-Aware Proxyを利用したWebアプリケーション認証</title>
    <link href="https://future-architect.github.io/articles/20230113a/"/>
    <id>https://future-architect.github.io/articles/20230113a/</id>
    <published>2023-01-12T15:00:00.000Z</published>
    <updated>2023-01-13T06:10:03.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>明けましておめでとうございます！Future筋肉エンジニアの渡邉です。年も明けたことなので切り替えて減量に入りました。三月末までを目安に体を絞ろうと思っています。</p><p>私は現在Google Cloudを利用しているプロジェクトに所属しており、Google Cloudのスキルアップにいそしんでいます。今回はGKE (Google Kubernetes Engine)でCloud IAP (Identity-Aware Proxy)を利用したWebアプリケーションのGoogleアカウント認証について記事を書こうと思います。</p><h1 id="Identity-Aware-Proxyとは"><a href="#Identity-Aware-Proxyとは" class="headerlink" title="Identity-Aware Proxyとは"></a>Identity-Aware Proxyとは</h1><p>以下、<a href="https://cloud.google.com/iap/docs/concepts-overview?hl=ja">公式ドキュメント</a>引用</p><blockquote><p>IAP を使用すると、HTTPS によってアクセスされるアプリケーションの一元的な承認レイヤを確立できるため、ネットワーク レベルのファイアウォールに頼らずに、アプリケーション レベルのアクセス制御モデルを使用できます。</p></blockquote><p>簡単に言うとGoogleアカウントとCloud IAMの仕組みを用いてWebアプリケーションの認証をすることができます。</p><h2 id="認証・承認フロー"><a href="#認証・承認フロー" class="headerlink" title="認証・承認フロー"></a>認証・承認フロー</h2><img src="/images/20230113a/authenticate-flow.drawio.png" alt="authenticate-flow.drawio.png" width="487" height="564" loading="lazy"><p><a href="https://cloud.google.com/iap/docs/concepts-overview?hl=ja">公式ドキュメント</a>はこちら</p><ul><li>Google Cloudリソースへのリクエスト(Cloud Load Balancing)します。</li><li>IAPが有効になっている場合は、IAP認証サーバへ情報を送信します。（プロジェクト番号、リクエストURL、リクエストヘッダー、Cookie内のIAP認証情報など）</li><li>IAP認証サーバがブラウザの認証情報をチェックします。</li><li>認証情報が存在しない場合は、OAuth2.0のGoogleアカウントログインフローにリダイレクトし、認証確認を実施する。認証トークンは今後のアクセスのためブラウザのCookieに保存されます。</li><li>認証情報が有効な場合、認証サーバは認証情報からユーザのID（メールアドレスとユーザID）を取得します。</li><li>認証サーバはこのIDからユーザのIAMロールをチェックし、ユーザがリソースにアクセスできる権限(<strong>IAP で保護されたウェブアプリ ユーザー</strong>)を持っているかをチェックします</li><li>権限を持っていれば、アクセスOKになり、なければNGになります。</li></ul><h1 id="全体アーキテクチャ図"><a href="#全体アーキテクチャ図" class="headerlink" title="全体アーキテクチャ図"></a>全体アーキテクチャ図</h1><p>以下が全体アーキテクチャ図になります。<br>GKE&#x2F;NetworkなどのGoogle Cloudのリソース構築に関しては慣れ親しんでいるTerraformを利用して作成しました。OAuth同意画面に関しては外部公開する場合は、APIから作成することはできない (<a href="https://cloud.google.com/iap/docs/programmatic-oauth-clients?hl=ja%5D">公式ドキュメント記載</a>)ので、コンソール画面から設定しました。</p><img src="/images/20230113a/architecture.drawio.png" alt="architecture.drawio.png" width="1151" height="429" loading="lazy"><h2 id="Bastion初期設定"><a href="#Bastion初期設定" class="headerlink" title="Bastion初期設定"></a>Bastion初期設定</h2><p>Public Subnetに作成したGCEインスタンスからGKEのコントロールプレーンに対してkubectlコマンドを実行したいので、<br>kubectlコマンドや、google-cloud-sdk-gke-gcloud-auth-pluginなどをインストールします。<br>以下、Bashスクリプトです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment"># Author: watanabe</span></span><br><span class="line"><span class="comment"># Initial Date: 2022/12/28</span></span><br><span class="line"><span class="comment"># History: Create</span></span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Variable Definition</span></span><br><span class="line">project_name=<span class="string">&quot;xxxxxxxxxx&quot;</span></span><br><span class="line">gke_cluster_name=<span class="string">&quot;xxxxxxxxx&quot;</span></span><br><span class="line">region=<span class="string">&quot;asia-northeast1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Kubectl</span></span><br><span class="line">curl -LO <span class="string">&quot;https://storage.googleapis.com/kubernetes-release/release/<span class="subst">$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)</span>/bin/linux/amd64/kubectl&quot;</span></span><br><span class="line"><span class="built_in">chmod</span> +x ./kubectl</span><br><span class="line">sudo <span class="built_in">mv</span> ./kubectl /usr/local/bin/kubectl</span><br><span class="line">kubectl version</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install google-cloud-sdk-gke-gcloud-auth-plugin</span></span><br><span class="line">sudo apt-get install apt-transport-https ca-certificates gnupg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/apt/sources.list.d/google-cloud-sdk.list</span><br><span class="line">curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install google-cloud-cli</span><br><span class="line">sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin</span><br><span class="line">gke-gcloud-auth-plugin --version</span><br><span class="line"><span class="built_in">export</span> USE_GKE_GCLOUD_AUTH_PLUGIN=True</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get Credentials</span></span><br><span class="line">gcloud container clusters get-credentials <span class="string">&quot;<span class="variable">$&#123;gke_cluster_name&#125;</span>&quot;</span> --region <span class="string">&quot;<span class="variable">$&#123;region&#125;</span>&quot;</span> --project <span class="string">&quot;<span class="variable">$&#123;project_name&#125;</span>&quot;</span></span><br><span class="line">kubectl config get-contexts</span><br><span class="line">kubectl get node</span><br></pre></td></tr></table></figure><h2 id="manifestファイル"><a href="#manifestファイル" class="headerlink" title="manifestファイル"></a>manifestファイル</h2><p>また、manifestファイルは以下を用意してkubectlコマンドを実行しk8sリソースをGKEに対して作成しました。</p><p>ここまでの設定で事前準備は完了です。</p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>NginxのPodを用意するため、Deploymentのmanifestを作成しました。</p><figure class="highlight yaml"><figcaption><span>deployment.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.22</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>IngressにはNodePortが必要になるので、Serviceのmanifestを作成しました。</p><figure class="highlight yaml"><figcaption><span>service.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><h3 id="ManagedCertificate"><a href="#ManagedCertificate" class="headerlink" title="ManagedCertificate"></a>ManagedCertificate</h3><p>クライアントとIngressで構築するHTTP(S)ロードバランサ間をHTTPSでアクセスするようにしたいので、Googleマネージド証明書のmanifestを作成しました。<br>domainsには、terraformで用意したHTTP(S)ロードバランサに設定したい外部IPアドレスにフリーなワイルドカードDNSサービスの<a href="https://nip.io/">nip.io</a>を利用したものを設定します。</p><figure class="highlight yaml"><figcaption><span>managed-certificate.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.gke.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ManagedCertificate</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">domains:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">34.</span><span class="string">xxx.xxx.xxx.nip.io</span></span><br></pre></td></tr></table></figure><h3 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h3><p>インターネット上にNginxを公開するためにIngressを構築するmanifestを作成しました。</p><figure class="highlight yaml"><figcaption><span>ingress.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="comment"># 外部ロードバランサの作成</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;gce&quot;</span></span><br><span class="line">    <span class="comment"># クライアントとHTTP(S)ロードバランサ間のすべての通信をHTTPSに強制</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.allow-http:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">    <span class="comment"># 事前に用意していた静的外部IPアドレスを設定する</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.global-static-ip-name:</span> <span class="string">&quot;loadbalancer-external-ip-address&quot;</span></span><br><span class="line">    <span class="comment"># Googleマネージド証明書をIngressに適用する</span></span><br><span class="line">    <span class="attr">networking.gke.io/managed-certificates:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h1 id="Cloud-IAPなしでのアクセス確認"><a href="#Cloud-IAPなしでのアクセス確認" class="headerlink" title="Cloud IAPなしでのアクセス確認"></a>Cloud IAPなしでのアクセス確認</h1><p>まず、Cloud IAPなしでのアクセス確認を行います。<br>Load Balancerに設定したドメインに対してアクセスを行うと、特に認証画面を経由することもなくアクセスすることができます。<br><img src="/images/20230113a/1-IAPなしでのアクセス確認.png" alt="1-IAPなしでのアクセス確認.png" width="956" height="525" loading="lazy"></p><h1 id="Cloud-IAPの設定を追加"><a href="#Cloud-IAPの設定を追加" class="headerlink" title="Cloud IAPの設定を追加"></a>Cloud IAPの設定を追加</h1><p>上記の状態ではだれでもアクセスすることが可能なため、セキュアな状態ではありません。<br>ここでCloud IAPの設定を追加してみましょう。</p><h2 id="OAuth同意画面の作成"><a href="#OAuth同意画面の作成" class="headerlink" title="OAuth同意画面の作成"></a>OAuth同意画面の作成</h2><p>OAuth同意画面はUser Typeを「外部」で作成します。<br><img src="/images/20230113a/2-OAuth同意画面①.png" alt="2-OAuth同意画面①.png" width="1200" height="848" loading="lazy"></p><p>アプリ情報として、必須項目の以下を設定して「保存して次へ」をクリックします。<br>ほかの情報は任意のため設定しませんでした。</p><ul><li>アプリ名：GKE Application</li><li>ユーザサポートメール：自身のメールアドレス</li><li>デベロッパーの連絡先情報：自身のメールアドレス</li></ul><img src="/images/20230113a/2-OAuth同意画面②.png" alt="2-OAuth同意画面②.png" width="1200" height="838" loading="lazy"><img src="/images/20230113a/2-OAuth同意画面③.png" alt="2-OAuth同意画面③.png" width="1200" height="843" loading="lazy"><p>スコープとテストユーザは任意情報のため設定しませんでした。<br>以下が設定完了したOAuth同意画面になります。</p><img src="/images/20230113a/2-OAuth同意画面④.png" alt="2-OAuth同意画面④.png" width="1200" height="844" loading="lazy"><h2 id="OAuth認証情報の作成"><a href="#OAuth認証情報の作成" class="headerlink" title="OAuth認証情報の作成"></a>OAuth認証情報の作成</h2><p>APIとサービスタブの「認証情報」をクリックします。<br>認証情報の作成プルダウンリストからOAuthクライアントIDをクリックします。</p><img src="/images/20230113a/3-OAuth認証情報①.png" alt="3-OAuth認証情報①.png" width="1200" height="843" loading="lazy"><ul><li>アプリケーションの種類：ウェブアプリケーション</li><li>OAuthクライアントIDの名前：GKE Application<br>を入力し、作成ボタンをクリックします。</li></ul><img src="/images/20230113a/3-OAuth認証情報②.png" alt="3-OAuth認証情報②.png" width="1200" height="851" loading="lazy"><p>作成ボタンをクリックするとOAuthクライアントIDとクライアントシークレットが生成されるので、JSONをダウンロードします。</p><img src="/images/20230113a/3-OAuth認証情報③.png" alt="3-OAuth認証情報③.png" width="512" height="448" loading="lazy"><p>作成したOAuthクライアントを再度クリックし、承認済みリダイレクトURIをダウンロードしたOAuthクライアントID(CLIENT_ID)に修正して保存します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://iap.googleapis.com/v1/oauth/clientIds/CLIENT_ID:handleRedirect</span><br></pre></td></tr></table></figure><img src="/images/20230113a/3-OAuth認証情報④.png" alt="3-OAuth認証情報④.png" width="1200" height="795" loading="lazy"><h2 id="IAPアクセス権の設定"><a href="#IAPアクセス権の設定" class="headerlink" title="IAPアクセス権の設定"></a>IAPアクセス権の設定</h2><p>Google Cloud ConsoleのIdentity-Aware Proxyにアクセスします。<br>アクセス権を付与するリソースの横にあるチェックボックスをオンにします。</p><img src="/images/20230113a/4-CloudIAPアクセス権設定①.png" alt="4-CloudIAPアクセス権設定①.png" width="1200" height="845" loading="lazy"><p>IAPの有効化で「構成要件」を参照し、問題なければ「有効にする」をクリックします。<br><img src="/images/20230113a/4-CloudIAPアクセス権設定②.png" alt="4-CloudIAPアクセス権設定②.png" width="564" height="355" loading="lazy"></p><p>チェックボックスが「オン」になりました<br>右側のパネルから、「プリンシパルの追加」をクリックします。<br><img src="/images/20230113a/4-CloudIAPアクセス権設定③.png" alt="4-CloudIAPアクセス権設定③.png" width="1200" height="849" loading="lazy"></p><p>IAPアクセスを許可したいGoogleアカウント（メールアドレス）または、Googleグループなどを指定して、IAMロール（IAP-secured Web App User）を付与してください。</p><img src="/images/20230113a/4-CloudIAPアクセス権設定④.png" alt="4-CloudIAPアクセス権設定④.png" width="736" height="727" loading="lazy"><p>ここまででOAuthの設定は完了です。</p><h2 id="Kubernetes-Secretの作成"><a href="#Kubernetes-Secretの作成" class="headerlink" title="Kubernetes Secretの作成"></a>Kubernetes Secretの作成</h2><p>GKEでCloud IAPを適用するためには、Kubernetes Secretを作成してBackendConfigに適用する必要があります。<br>先ほど作成してダウンロードしたOAuth認証情報のClient IDとClient Secretを指定してKubernetes Secretを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret generic oauth-secret --from-literal=client_id=xxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com \</span><br><span class="line">    --from-literal=client_secret=xxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>Kubernetes Secretが作成されていることを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxxxxx@tky-bastion:~$ kubectl describe secret oauth-secret</span><br><span class="line">Name:         oauth-secret</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Type:  Opaque</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">client_secret:  35 bytes</span><br><span class="line">client_id:      73 bytes</span><br></pre></td></tr></table></figure><h2 id="BackendConfigの作成"><a href="#BackendConfigの作成" class="headerlink" title="BackendConfigの作成"></a>BackendConfigの作成</h2><p>Kubernetes Secretで作成したSecretをBackendConfigに設定することでCloud IAPを適用することができます。<br>以下のmanifestファイルを用意します。</p><figure class="highlight yaml"><figcaption><span>backendconfig.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">cloud.google.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">BackendConfig</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">iap-conifg</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">iap:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">oauthclientCredentials:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">oauth-secret</span></span><br></pre></td></tr></table></figure><p>kubectlコマンドでBackendConfigを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f backendconfig.yaml</span><br></pre></td></tr></table></figure><p>BackendConfigが作成されていることを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxxxxx@tky-bastion:~/manifest$ kubectl get backendconfig</span><br><span class="line">NAME         AGE</span><br><span class="line">iap-conifg   3m42s</span><br></pre></td></tr></table></figure><p>サービスポートを BackendConfig に関連付けて、IAP の有効化をトリガーする必要があります。既存のService リソースにアノテーションを追加し、サービスのすべてのポートをデフォルトで BackendConfig にします。</p><figure class="highlight yaml"><figcaption><span>service.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="comment"># 追記</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">beta.cloud.google.com/backend-config:</span> <span class="string">&#x27;&#123;&quot;default&quot;: &quot;config-default&quot;&#125;&#x27;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f service.yaml</span><br></pre></td></tr></table></figure><p>以上で、Cloud IAPの設定は完了です。</p><h1 id="Cloud-IAPありでのアクセス確認"><a href="#Cloud-IAPありでのアクセス確認" class="headerlink" title="Cloud IAPありでのアクセス確認"></a>Cloud IAPありでのアクセス確認</h1><p>Cloud IAPの設定が完了したので、画面にアクセスしてCloud IAPが適用されているかを確認します。</p><h2 id="Cloud-IAP認証対象外アカウントでのアクセス確認"><a href="#Cloud-IAP認証対象外アカウントでのアクセス確認" class="headerlink" title="Cloud IAP認証対象外アカウントでのアクセス確認"></a>Cloud IAP認証対象外アカウントでのアクセス確認</h2><p>Load Balancerに設定したドメインに対してアクセスを行うと、Cloud IAPによるGoogleアカウントログイン画面にリダイレクトされます。</p><img src="/images/20230113a/5-IAPアクセスなし①.png" alt="5-IAPアクセスなし①.png" width="469" height="557" loading="lazy"><p>本GoogleアカウントはCloud IAPのアクセスできる権限(<strong>IAP で保護されたウェブアプリ ユーザー</strong>)を持っていないため、画面にアクセスすることはできません。<br><img src="/images/20230113a/5-IAPアクセスなし②.png" alt="5-IAPアクセスなし②.png" width="426" height="455" loading="lazy"></p><h2 id="Cloud-IAP認証対象アカウントでのアクセス確認"><a href="#Cloud-IAP認証対象アカウントでのアクセス確認" class="headerlink" title="Cloud IAP認証対象アカウントでのアクセス確認"></a>Cloud IAP認証対象アカウントでのアクセス確認</h2><p>Load Balancerに設定したドメインに対してアクセスを行うと、Cloud IAPによるGoogleアカウントログイン画面にリダイレクトされます。</p><img src="/images/20230113a/6-IAPアクセスあり①.png" alt="6-IAPアクセスあり①.png" width="529" height="565" loading="lazy"><p>本GoogleアカウントはCloud IAPのアクセスできる権限(<strong>IAP で保護されたウェブアプリ ユーザー</strong>)を持っているため、画面にアクセスすることができました。<br><img src="/images/20230113a/6-IAPアクセスあり②.png" alt="6-IAPアクセスあり②.png" width="908" height="299" loading="lazy"></p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回はGKE (Google Kubernetes Engine)でCloud IAP (Identity-Aware Proxy)を利用したGoogleアカウント認証について記事を書きました。<br>Google Cloudを利用していて、特定のGoogleアカウントにのみアクセスを許可したいケースはあるかと思いますので、その時にでも参考にしていただければ幸いです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="GKE" scheme="https://future-architect.github.io/tags/GKE/"/>
    
    <category term="Identity-Aware Proxy" scheme="https://future-architect.github.io/tags/Identity-Aware-Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Python Web APIをAWS Lambdaにデプロイ</title>
    <link href="https://future-architect.github.io/articles/20230105a/"/>
    <id>https://future-architect.github.io/articles/20230105a/</id>
    <published>2023-01-04T15:00:00.000Z</published>
    <updated>2023-01-19T02:59:42.309Z</updated>
    
    <content type="html"><![CDATA[<p>この記事は<a href="https://qiita.com/advent-calendar/2022/future">フューチャー Advent Calendar 2022</a>の14日目の記事です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニットの村上です。</p><p>PythonのWeb APIをLambdaにデプロイする方法について解説します。</p><p>PythonでWeb APIを構築する方法は<a href="/articles/20221203a/">OpenAPI GeneratorでPython Web API構築</a>をご覧ください。</p><p>本記事ではPython Web APIのアプリ実装は完成している前提で、下図の流れでデプロイする手順を解説します。</p><img src="/images/20230105a/image.png" alt="PythonアプリをDockerコンテナイメージビルド→ECR→Lambdaにデプロイする" width="778" height="495" loading="lazy"><h1 id="Lambda起動用のモジュール"><a href="#Lambda起動用のモジュール" class="headerlink" title="Lambda起動用のモジュール"></a>Lambda起動用のモジュール</h1><p>Lambdaでは起点となる関数とAPI Responseを返すreturn命令が必要になります。<br>これらを満たすモジュールを実装します。</p><figure class="highlight python"><figcaption><span>lambda.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> awsgi</span><br><span class="line"><span class="keyword">import</span> connexion</span><br><span class="line"><span class="keyword">from</span> openapi_server <span class="keyword">import</span> encoder</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_handler</span>(<span class="params">event, context</span>):</span><br><span class="line">    app = connexion.App(__name__, specification_dir=<span class="string">&quot;./openapi/&quot;</span>)</span><br><span class="line">    app.app.json_encoder = encoder.JSONEncoder</span><br><span class="line">    app.add_api(</span><br><span class="line">        <span class="string">&quot;openapi.yaml&quot;</span>,</span><br><span class="line">        arguments=&#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;Stock API&quot;</span>&#125;,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> awsgi.response(app, event, context)</span><br></pre></td></tr></table></figure><p><code>lambda_handler</code>をLambda起動用関数に設定することで、APIを機能させることができます。</p><h1 id="デプロイする方法"><a href="#デプロイする方法" class="headerlink" title="デプロイする方法"></a>デプロイする方法</h1><p>Lambdaにソースコードをデプロイする方法は2種類あります。</p><ol><li>ソースコードとその依存ライブラリをZIPにアーカイブしてアップロードする</li><li>ECRのコンテナイメージをアップロードする</li></ol><p>Pythonのソースコードをアップロードする場合は2番のECRからアップロードする方法をお勧めします。<br>というのも最近のPythonライブラリは容量が大きく、例えばPandasだけでも約50MBあります。<br>ZIPアップロード方式の場合は解凍前50MB、解凍後250MBまでという制限があるため、依存ライブラリの数とサイズによってはこの制限に引っ掛かり、アップロードできません。<br>一方でECR方式の場合はイメージサイズが10GBまでOKなのでかなり違いがあることが分かると思います。</p><p>その他詳しい制限については以下をご覧ください。</p><p><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/gettingstarted-limits.html">https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/gettingstarted-limits.html</a></p><p>本記事ではECRからデプロイする方法を解説します。</p><h1 id="デプロイ用Dockerfileの作成"><a href="#デプロイ用Dockerfileの作成" class="headerlink" title="デプロイ用Dockerfileの作成"></a>デプロイ用Dockerfileの作成</h1><p>デプロイ用のDockerfileには依存ライブラリとLambda起動用のランタイムのインストールが必要になります。<br>Pythonのパッケージ管理には<a href="https://python-poetry.org/">Poetry</a>を使っている場合を想定し、Dockerfileを以下のように実装します。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> FUNCTION_DIR=<span class="string">&quot;/usr/src/app&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>.<span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> FUNCTION_DIR</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install gcc g++ libc-dev</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install poetry</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> pyproject.toml poetry.lock ./</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> poetry <span class="built_in">export</span> -f requirements.txt &gt; requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip uninstall poetry --<span class="built_in">yes</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --target <span class="variable">$&#123;FUNCTION_DIR&#125;</span> awslambdaric</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./ <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/usr/local/bin/python&quot;</span>, <span class="string">&quot;-m&quot;</span>, <span class="string">&quot;awslambdaric&quot;</span> ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;openapi_server/lambda.lambda_handler&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>poetryはその性質上docker内に仮想環境を構築する必要がありますが、それは面倒なのでpipで依存ライブラリをインストールします。<br>注意点として、poetryとそれ以外のライブラリはpipの依存関係チェックでエラーになる可能性があります。poetryで出力された<code>requirements.txt</code>に記述されたライブラリはpoetryによって依存関係の整合性が保証されていますが、その依存関係にpoetry自身は存在しません。このdocker内ではpipによってpoetryとそれら以外のライブラリがはじめて依存関係チェックの対象となるため、エラーになる可能性があります。よってpoetryは<code>requirements.txt</code>を出力したら速やかに削除します。<br>また、Lambdaで起動するためには<a href="https://github.com/aws/aws-lambda-python-runtime-interface-client">awslambdaric</a>というランタイムが必要なため、合わせてインストールします。</p><h1 id="AWS-CLIからデプロイする"><a href="#AWS-CLIからデプロイする" class="headerlink" title="AWS CLIからデプロイする"></a>AWS CLIからデプロイする</h1><p>上記のDockerfileをビルドします。<br>proxy環境の場合はそのままではdocker内で各パッケージのインストールが行えないため、<code>--build-arg</code>にプロキシを設定する必要があります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker build \</span><br><span class="line">    -f ./Dockerfile \</span><br><span class="line">-t <span class="string">&quot;&lt;AWSアカウントID&gt;.dkr.ecr.ap-northeast-1.amazonaws.com/&lt;ECRリポジトリ名&gt;:latest&quot;</span> \</span><br><span class="line">--build-arg https_proxy=<span class="variable">$&#123;https_proxy&#125;</span> \</span><br><span class="line">../.</span><br></pre></td></tr></table></figure><p>ビルドができたらECRにプッシュします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker push &lt;AWSアカウントID&gt;.dkr.ecr.ap-northeast-1.amazonaws.com/&lt;ECRリポジトリ名&gt;:latest</span><br></pre></td></tr></table></figure><p>プッシュが完了したらECRからLambdaにアップロードします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ aws lambda update-function-code --function-name &lt;Lambda名&gt; \</span><br><span class="line">--image-uri &lt;AWSアカウントID&gt;.dkr.ecr.ap-northeast-1.amazonaws.com/&lt;ECRリポジトリ名&gt;:latest</span><br></pre></td></tr></table></figure><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>最後までお読みいただきありがとうございました！</p><p>Lambdaにコンテナイメージをアップロードする方法は制限が緩く使いやすい反面、ランタイムが必要だったり、ECRのリポジトリを用意しないといけなかったりと、少し手間がかかります。<br>本記事が参考になれば幸いです。</p><p>明日はtutuzさんの<a href="https://qiita.com/tutuz/items/a2db0a78e5977b3d942b">技術記事執筆のススメ</a>です！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;この記事は&lt;a href=&quot;https://qiita.com/advent-calendar/2022/future&quot;&gt;フューチャー Advent Calendar 2022&lt;/a&gt;の14日目の記事です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="WebAPI" scheme="https://future-architect.github.io/tags/WebAPI/"/>
    
  </entry>
  
  <entry>
    <title>Rust製SQLフォーマッタをnapi-rsを利用してVSCode拡張機能化</title>
    <link href="https://future-architect.github.io/articles/20221228a/"/>
    <id>https://future-architect.github.io/articles/20221228a/</id>
    <published>2022-12-27T15:00:00.000Z</published>
    <updated>2022-12-28T00:57:42.773Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20221228a/top.png" alt="" width="579" height="216"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Futureでアルバイトをしている川渕です。</p><p>アルバイトの前はFutureのインターンシップでRust製SQLフォーマッタであるuroborosql-fmtの作成を行っていました(その時の記事は<a href="/articles/20220916b/">こちら</a>)。</p><p>本記事ではそのフォーマッタをVSCodeの拡張機能化した方法について説明します。</p><h1 id="説明すること"><a href="#説明すること" class="headerlink" title="説明すること"></a>説明すること</h1><ul><li>napi-rsを使用してTypeScript(JavaScript)からRustのコードを呼び出せるようにする方法</li><li>napi-rsにおけるクロスプラットフォームビルド方法</li><li>VSCode拡張機能をパッケージ化する方法</li></ul><!--* x86_64-pc-windows-gnuの環境でnapi-rsを使用する方法--><h1 id="説明しないこと"><a href="#説明しないこと" class="headerlink" title="説明しないこと"></a>説明しないこと</h1><ul><li>本記事ではフォーマッタの仕様、実装方法について説明しません。詳細を知りたい方は以下の記事をご覧ください。<ul><li><a href="/articles/20220916b/">Engineer Camp2022 RustでSQLフォーマッタ作成（前編） | フューチャー技術ブログ</a></li><li><a href="/articles/20220916c/">Engineer Camp2022 RustでSQLフォーマッタ作成（後編） | フューチャー技術ブログ</a></li><li><a href="/articles/20221215a/">tree-sitter文法入門 | フューチャー技術ブログ</a></li></ul></li><li>LSPを用いた拡張機能作成方法の詳細についても本記事では説明しません。詳細を知りたい方は以下の記事をご覧ください。<ul><li><a href="/articles/20221124a/">Language Server Protocolを用いたVSCode拡張機能開発 (前編) | フューチャー技術ブログ</a></li><li><a href="/articles/20221125a/">Language Server Protocolを用いたVSCode拡張機能開発 (後編) | フューチャー技術ブログ</a></li></ul></li><li>napi-rsで作成したNode.jsアドオンの公開方法</li><li>作成したVSCode拡張機能の公開方法</li></ul><h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><ul><li>OS: Windows 10 Pro</li><li>VSCode: 1.73.1</li><li>Node.js: v16.17.1</li><li>rustc: 1.64.0 (a55dd71d5 2022-09-19)</li><li>npm: 8.15.0</li><li>yarn: 1.22.19</li><li>napi-rs&#x2F;cli: 2.12.0</li><li>vsce: 2.14.0</li></ul><h1 id="作成するVSCode拡張機能の仕様"><a href="#作成するVSCode拡張機能の仕様" class="headerlink" title="作成するVSCode拡張機能の仕様"></a>作成するVSCode拡張機能の仕様</h1><p>作成するVSCode拡張機能の仕様は以下の通りです。</p><ul><li><a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a>を利用する</li><li>コマンドパレットで実行できる</li><li>範囲選択されている場合、その範囲のSQLをフォーマットする</li><li>範囲選択されていない場合、全体をフォーマットする</li></ul><img src="/images/20221228a/format_extension.gif" alt="format_extension.gif" width="1200" height="675" loading="lazy"><h1 id="処理の流れ"><a href="#処理の流れ" class="headerlink" title="処理の流れ"></a>処理の流れ</h1><p>作成する拡張機能の処理の流れを説明します。</p><img src="/images/20221228a/df88766a-9fef-6408-5603-1c17bed7619c.png" alt="" width="1200" height="1190" loading="lazy"><p>処理の流れは以下のとおりです。</p><ol><li>まずユーザがフォーマットしたいSQLを範囲選択し、コマンドを実行します。</li><li>コマンド実行をLanguage Serverのクライアントが検知し、サーバに選択範囲の情報を送信します。</li><li>サーバは選択範囲のSQLを取得します。取得したSQLを引数に与えてSQLフォーマッタを実行します。</li><li>SQLフォーマッタは引数として受け取ったSQLをフォーマットし、フォーマット済みSQLを返します。</li><li>フォーマット済みSQLを受け取ったサーバは選択範囲をフォーマット済みSQLに置き換えるようにクライアントに送信します。</li></ol><p>SQLフォーマッタはRust、自作Language ServerはTypeScriptで書かれているため、直接SQLフォーマッタを呼び出すことができません。</p><p>そこで、napi-rsというツールを使用して、TypeScriptからRustで書かれたSQLフォーマッタを呼び出せるようにしました。</p><h1 id="TypeScriptからRustの呼び出し"><a href="#TypeScriptからRustの呼び出し" class="headerlink" title="TypeScriptからRustの呼び出し"></a>TypeScriptからRustの呼び出し</h1><p>まずTypeScriptからRustを呼び出す方法として以下の3つの方法が考えられます。</p><div class="scroll"><table><thead><tr><th>方法</th><th>使用するツール</th><th>メリット</th><th>デメリット</th></tr></thead><tbody><tr><td>Rustコードのwasm化</td><td>rustc または wasm-pack</td><td>プラットフォームに依存しないため移植性が高い</td><td>C&#x2F;C++を呼び出しているコードをビルドするのが難しい</td></tr><tr><td>RustコードのNode.jsアドオン化</td><td>napi-rs</td><td>C&#x2F;C++を呼び出しているコードでも比較的簡単にビルドできる</td><td>クロスプラットフォームビルドが必要</td></tr><tr><td>Rustコードをビルドしたものをexecで呼び出す</td><td>rustc</td><td>特別なツールを使わなくても可能</td><td>クロスプラットフォームビルドが必要 <br>   綺麗な方法とは言えないため最後の手段</td></tr></tbody></table></div><p>wasmとNode.jsアドオンの性能差は現時点では調査しましたがわかりませんでした。(もしわかる方がいれば教えてください)<br>しかし、移植性の観点からできる限りwasmのほうがNode.jsアドオンよりも良いという意見が多く見受けられました。</p><ul><li><a href="https://sprkl.dev/performance-rust-node-js/">Performance: Rust and its relationship with Node.js</a></li><li><a href="https://www.reddit.com/r/rust/comments/xhg78i/how_do_napi_works_compare_to_wasm_and_what_are/">How do NAPI works compare to WASM, and what are the use cases suiting each one? : rust</a></li></ul><p>しかし、SQLフォーマッタは内部的にCで書かれたコードを呼び出していることが要因でwasm化がうまくいかなかったため、今回はnapi-rsを用いてNode.jsアドオン化する方法を選択しました。</p><h2 id="Node-API"><a href="#Node-API" class="headerlink" title="Node-API"></a>Node-API</h2><p>napi-rsについて紹介する前にNode-APIについて説明します。<br>Node-APIとはNode 8.0.0で導入されたツールで、C&#x2F;C++コードをNode.jsのアドオン化するツールです。<br>Node-APIを使用することで、C&#x2F;C++コードをJavaScriptで記述されたものと同様の方法で利用できるようになります。</p><h2 id="napi-rsとは"><a href="#napi-rsとは" class="headerlink" title="napi-rsとは"></a>napi-rsとは</h2><p><a href="https://napi.rs/">napi-rs</a>とはNode-APIをRustで使用できるようにしたものです。<br>例えば以下のようなRustコードをnapi-rsでビルドします。</p><figure class="highlight rust"><figcaption><span>example.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![deny(clippy::all)]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#[macro_use]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> napi_derive;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[napi]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">sum</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">  a + b + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>すると、Node.jsアドオンが生成され、JavaScriptからRustの関数を呼び出せるようになります。</p><figure class="highlight javascript"><figcaption><span>example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; sum &#125; = <span class="built_in">require</span>(<span class="string">&quot;./index.js&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// 7</span></span><br></pre></td></tr></table></figure><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>ちなみに、Node-APIは元々の名称がN-APIだったのですが、しばしば「NAPI」と発音され、蔑称と間違われる可能性があるとの懸念から現在のNode-APIに名称を変更しました。そのため、napi-rsにおいても、"エヌエーピーアイ"と発音したほうが良さそうです。</p><a href="https://codezine.jp/article/detail/14109">N-APIが「Node-API」へ名称変更、既存のコンパイル済みアドオンへの影響はナシ|CodeZine（コードジン）</a></div><h2 id="napi-rsの使い方"><a href="#napi-rsの使い方" class="headerlink" title="napi-rsの使い方"></a>napi-rsの使い方</h2><p>napi-rsの使い方を説明します。</p><div class="note warn" style="background:#fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>napi-rsではx86_64-pc-windows-gnuの環境はサポートされていないため、もしwindowsでgnu版rustを使っている方はmsvc版のRustを入れてください。</p></div><h3 id="1-CLIツールのインストール"><a href="#1-CLIツールのインストール" class="headerlink" title="1. CLIツールのインストール"></a>1. CLIツールのインストール</h3><p>yarnでnapi-rsのCLIツールをインストールします。<br>まずyarnをインストールします。以降もyarnが必要になるため、必ずインストールしてください。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure><p>napi-rsのCLIツールをインストールします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add @napi-rs/cli</span><br></pre></td></tr></table></figure><p>インストールに成功すると<code>napi</code>コマンドが使えるようになります。</p><h3 id="2-新規プロジェクト作成"><a href="#2-新規プロジェクト作成" class="headerlink" title="2. 新規プロジェクト作成"></a>2. 新規プロジェクト作成</h3><p>インストールしたCLIツールを使用して新規プロジェクトを作成します。<br>新規プロジェクトを作成したいディレクトリで以下のコマンドを実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">napi new</span><br></pre></td></tr></table></figure><p>すると、以下の質問が表示されるので、順に回答してください。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">任意のパッケージ名</span></span><br><span class="line">? Package name: (The name filed in your package.json)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ディレクトリ名</span></span><br><span class="line">? Dir name</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">サポートしたい実行環境</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">publish時にここで選んだ実行環境がサポートされます</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">デフォルト: x86_64-apple-darwin, x86_64-pc-windows-msvc, x86_64-unknown-linux-gnu</span></span><br><span class="line">? Choose targets you want to support</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GitHub Actionsを有効にするか否か</span></span><br><span class="line">? Enable github actions? (Y/n)</span><br></pre></td></tr></table></figure><!--:::note warnx86_64-pc-windows-gnuの環境はサポートされていないため、msvc版のRustを入れることを推奨します。しかし、gnu版Rustの環境でも後述の操作をすればローカルでは試すことができます。もしそのような環境で試したい方は、とりあえず「サポートしたい実行環境」はデフォルトのまま進めてください。:::--><p>質問に回答すると指定したディレクトリ名のディレクトリが作成されます。<br>これでNode.js add-onを作るテンプレートが完成しました。</p><h3 id="3-ビルドと実行"><a href="#3-ビルドと実行" class="headerlink" title="3. ビルドと実行"></a>3. ビルドと実行</h3><p>テンプレートの<code>src/lib.rs</code>に既にサンプルのRustコードが含まれています。関数sumは2つの引数の合計を返す関数です。</p><figure class="highlight rust"><figcaption><span>src/lib.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![deny(clippy::all)]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#[macro_use]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> napi_derive;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[napi]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">sum</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">  a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これをNode.jsアドオンへビルドして実行してみます。<br>まず先ほど作成したプロジェクトのルートディレクトリでビルドコマンドを実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure><p>ビルドに成功すると、プロジェクトのディレクトリ直下に<code>index.d.ts</code>、<code>index.js</code>、<code>&lt;プロジェクト名&gt;.&lt;環境&gt;.node</code>が作成されます。</p><p><code>index.js</code>には環境に合ったnodeファイルを読み込んでくれる処理が書いています。そのため、<code>index.js</code>をimportすることで自動的に環境に合ったnodeファイルが読み込まれ、そこに含まれる関数を利用することができるようになります。</p><p>以下のファイルをプロジェクトのディレクトリ直下に作成します。</p><figure class="highlight javascript"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; sum &#125; = <span class="built_in">require</span>(<span class="string">&quot;./index.js&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><p>実行して”7”という出力が返ってきたら成功です。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node test.js</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7</span></span><br></pre></td></tr></table></figure><h2 id="SQLフォーマッタをJavaScriptから実行"><a href="#SQLフォーマッタをJavaScriptから実行" class="headerlink" title="SQLフォーマッタをJavaScriptから実行"></a>SQLフォーマッタをJavaScriptから実行</h2><p>プロジェクトのテンプレートを変更してSQLフォーマッタをJavaScriptから実行できるようにしてみます。</p><h3 id="1-新規プロジェクト作成"><a href="#1-新規プロジェクト作成" class="headerlink" title="1. 新規プロジェクト作成"></a>1. 新規プロジェクト作成</h3><p>先述した方法で新規プロジェクトを作成しました。プロジェクト名はuroborosql-fmt-napiとしています。</p><h3 id="2-src-lib-rsを変更し、ビルド"><a href="#2-src-lib-rsを変更し、ビルド" class="headerlink" title="2. src/lib.rsを変更し、ビルド"></a>2. <code>src/lib.rs</code>を変更し、ビルド</h3><p><code>src/lib.rs</code>を以下のように変更します。<br>SQLフォーマッタのクレート名は<code>uroborosql_fmt</code>で、<code>format_sql()</code>関数にSQL文を渡すとフォーマットされたSQLが返ってきます。</p><figure class="highlight rust"><figcaption><span>src/lib.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![deny(clippy::all)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> uroborosql_fmt::format_sql;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[macro_use]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> napi_derive;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[napi]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">runfmt</span>(input: <span class="type">String</span>) <span class="punctuation">-&gt;</span>  <span class="type">String</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">format_sql</span>(&amp;input)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>プロジェクトのルートディレクトリでビルドします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure><p>私の環境はwin32-x64-msvcであるため、<code>index.d.ts</code>、<code>index.ts</code>、<code>uroborosql-fmt-napi.win32-x64-msvc.node</code>が生成されました。</p><h3 id="3-run-jsの作成、実行"><a href="#3-run-jsの作成、実行" class="headerlink" title="3. run.jsの作成、実行"></a>3. run.jsの作成、実行</h3><p>プロジェクトのディレクトリ直下にrun.jsを作成します。変数targetにはフォーマットしたいSQL文を格納しています。</p><figure class="highlight javascript"><figcaption><span>run.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; runfmt &#125; = <span class="built_in">require</span>(<span class="string">&quot;./index.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> target = <span class="string">`</span></span><br><span class="line"><span class="string">SELECT</span></span><br><span class="line"><span class="string">      Identifier as id, --ID</span></span><br><span class="line"><span class="string">student_name          --              学生名</span></span><br><span class="line"><span class="string">FROM</span></span><br><span class="line"><span class="string">  japanese_student_table</span></span><br><span class="line"><span class="string">AS JPN_STD --日本人学生</span></span><br><span class="line"><span class="string">,       SUBJECT_TABLE AS SBJ  --科目</span></span><br><span class="line"><span class="string">WHERE</span></span><br><span class="line"><span class="string">  JPN_STD.sportId = (SELECT</span></span><br><span class="line"><span class="string">         sportId   FROM</span></span><br><span class="line"><span class="string">    Sport</span></span><br><span class="line"><span class="string">                         WHERE</span></span><br><span class="line"><span class="string">             Sport.sportname</span></span><br><span class="line"><span class="string">    = &#x27;baseball&#x27;</span></span><br><span class="line"><span class="string">                    )   -- 野球をしている生徒</span></span><br><span class="line"><span class="string">    AND</span></span><br><span class="line"><span class="string">JPN_STD.ID  = SBJ.ID</span></span><br><span class="line"><span class="string">AND SBJ.grade   &gt;</span></span><br><span class="line"><span class="string">            /*grade*/50     --成績が50点以上</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">runfmt</span>(target));</span><br></pre></td></tr></table></figure><p>作成した<code>run.js</code>を実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node run.js</span><br></pre></td></tr></table></figure><p>出力結果は以下のようになりました。きちんとフォーマットされているため成功です。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">IDENTIFIER<span class="keyword">AS</span>ID<span class="comment">-- ID</span></span><br><span class="line">,STUDENT_NAME<span class="keyword">AS</span>STUDENT_NAME<span class="comment">-- 学生名</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">JAPANESE_STUDENT_TABLEJPN_STD<span class="comment">-- 日本人学生</span></span><br><span class="line">,SUBJECT_TABLESBJ<span class="comment">-- 科目</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">JPN_STD.SPORTID<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">SPORTID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">SPORT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">SPORT.SPORTNAME<span class="operator">=</span><span class="string">&#x27;BASEBALL&#x27;</span></span><br><span class="line">)<span class="comment">-- 野球をしている生徒</span></span><br><span class="line"><span class="keyword">AND</span>JPN_STD.ID<span class="operator">=</span>SBJ.ID</span><br><span class="line"><span class="keyword">AND</span>SBJ.GRADE<span class="operator">&gt;</span><span class="comment">/*grade*/</span><span class="number">50</span><span class="comment">-- 成績が50点以上</span></span><br></pre></td></tr></table></figure><h2 id="クロスプラットフォームビルド"><a href="#クロスプラットフォームビルド" class="headerlink" title="クロスプラットフォームビルド"></a>クロスプラットフォームビルド</h2><p>現在はビルドした環境(win32-x64-msvc)でしか作成したNode.jsアドオンが動作しません。<br>そこでGitHub Actionsを使ってクロスプラットフォームビルドを行います。</p><h3 id="0-CI-ymlの作成"><a href="#0-CI-ymlの作成" class="headerlink" title="0. CI.ymlの作成"></a>0. CI.ymlの作成</h3><p>もしnapi-rsプロジェクト作成時にGitHub Actionsを有効にしていなかった場合はこちらの作業を行ってください。</p><ol><li>適当なディレクトリで<code>napi new</code></li><li>パッケージ名、ディレクトリ名は適当に入力</li><li>サポートしたい実行環境を選択<br>  (今回作成しているフォーマッタではできるだけ多くの環境をサポートしたかったため、で全ての実行環境を選択)</li><li>GitHub Actionsを有効にしてプロジェクトを作成</li><li>完成したプロジェクト内の<code>.github</code>ディレクトリをコピーして現在作業中のプロジェクトにペースト</li></ol><h3 id="1-yarn-lockの作成"><a href="#1-yarn-lockの作成" class="headerlink" title="1. yarn.lockの作成"></a>1. yarn.lockの作成</h3><p>プロジェクトのルートディレクトリで以下のコマンドを実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure><p>yarn.lockが作成、または更新されれば成功です。</p><h3 id="2-CI-ymlの編集、GitHub-Actionsの実行"><a href="#2-CI-ymlの編集、GitHub-Actionsの実行" class="headerlink" title="2. CI.ymlの編集、GitHub Actionsの実行"></a>2. CI.ymlの編集、GitHub Actionsの実行</h3><p>デフォルトではGitHubにpushするとGitHub Actionsが自動的に動いて以下の処理を行ってくれます。</p><ol><li>各環境に対応したNode.jsアドオンをビルド</li><li>npmパッケージのpublish</li></ol><p>今回はnpmパッケージのpublishは行わないため、<code>.github/workflows/CI.yml</code>のpublish以下をすべてコメントアウトします。<br>publish方法を知りたい方は以下の記事が参考になると思います。</p><ul><li><a href="https://shisama.hatenablog.com/entry/2021/12/03/054437#napi-rs%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9Fnpm-publish">Rust + Node-APIでクロスプラットフォーム向けnpmパッケージを公開する - 別にしんどくないブログ</a></li></ul><p>GitHub Actionsでビルドを行うと、13個の環境のうち11個の環境でビルドが失敗してしまいました。Rust製SQLフォーマッタが内部的にC&#x2F;C++のコードを呼び出していることが原因の1つであると考えられます。そのため、通常のRustプロジェクトであればもう少し成功すると思います。<br>試行錯誤して<code>.github/workflows/CI.yml</code>を編集すると、最終的に13個中7個の環境でビルドが成功するようになりました。私が実施した変更を参考程度に示します。</p><h4 id="CI-ymlの変更1-長いパスに対応"><a href="#CI-ymlの変更1-長いパスに対応" class="headerlink" title="CI.ymlの変更1: 長いパスに対応"></a><code>CI.yml</code>の変更1: 長いパスに対応</h4><p>hostがwindows-latestである環境のbuildに以下の処理を追加しました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --system core.longpaths true</span><br></pre></td></tr></table></figure><h4 id="CI-ymlの変更2-yarn-testの削除"><a href="#CI-ymlの変更2-yarn-testの削除" class="headerlink" title="CI.ymlの変更2: yarn testの削除"></a><code>CI.yml</code>の変更2: yarn testの削除</h4><p>targetがi686-pc-windows-msvcの場合のみビルド時に<code>yarn test</code>が走っています。本来は消すべきではないかもしれませんが、今回はテストコードを書いていないのでとりあえず削除しました。</p><h4 id="CI-ymlの変更3-aarch64-apple-darwinにおける一部処理の削除"><a href="#CI-ymlの変更3-aarch64-apple-darwinにおける一部処理の削除" class="headerlink" title="CI.ymlの変更3: aarch64-apple-darwinにおける一部処理の削除"></a><code>CI.yml</code>の変更3: aarch64-apple-darwinにおける一部処理の削除</h4><p>targetがaarch64-apple-darwinの場合のビルド処理の上5行を削除しました。最終的にビルド処理は以下のようになりました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn build --target aarch64-apple-darwin</span><br><span class="line">strip -x *.node</span><br></pre></td></tr></table></figure><h3 id="3-成果物のダウンロード"><a href="#3-成果物のダウンロード" class="headerlink" title="3. 成果物のダウンロード"></a>3. 成果物のダウンロード</h3><p>GitHub Actionsでビルドした各環境のNode.jsアドオンをダウンロードします。<br>GitHubのリポジトリ &gt; Actions &gt; 最新のワークフローに移動し、ページ最下部のArtifactsのファイルをすべてダウンロードします。<br><img src="/images/20221228a/image.png" alt="image.png" width="1200" height="392" loading="lazy"><br>各ファイルを解凍すると、各環境に合ったNode.jsアドオンが取得できます。</p><h2 id="nodeファイルをまとめて圧縮"><a href="#nodeファイルをまとめて圧縮" class="headerlink" title="nodeファイルをまとめて圧縮"></a>nodeファイルをまとめて圧縮</h2><ol><li>適当なディレクトリを作成</li><li>対応したい環境のnodeファイルを全て置く</li><li>napi-rsプロジェクトの<code>index.d.ts</code>と<code>index.js</code>をコピーしてそのディレクトリにペースト</li><li>package.jsonを作成 (nameはパッケージ名)<br>フォーマッタの名前がuroborosql-fmtであるため、パッケージ名はuroborosql-fmt-napiとしました。 <figure class="highlight plaintext"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;uroborosql-fmt-napi&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;types&quot;: &quot;index.d.ts&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;engines&quot;: &#123;</span><br><span class="line">    &quot;node&quot;: &quot;&gt;= 10&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>以下のコマンドを実行して圧縮 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm pack</span><br></pre></td></tr></table></figure></li><li><code>プロジェクト名-バージョン.tgz</code>ファイルが生成されれば成功</li></ol><p>今回の例では<code>uroborosql-fmt-napi-0.0.0.tgz</code>というファイルが生成されました。</p><h1 id="拡張機能の作成"><a href="#拡張機能の作成" class="headerlink" title="拡張機能の作成"></a>拡張機能の作成</h1><p>※再掲<br><img src="/images/20221228a/df88766a-9fef-6408-5603-1c17bed7619c_2.png" alt="" width="1200" height="1190" loading="lazy"></p><p>TypeScriptからSQLフォーマッタを呼び出すことができるようになったので、次に拡張機能部分を作成します。<br>本記事では<a href="https://github.com/microsoft/vscode-extension-samples/tree/main/lsp-sample">microsoft&#x2F;vscode-extension-samples&#x2F;lsp-sample</a>をベースにして拡張機能を作成します。</p><p>LSPを用いた拡張機能作成方法の詳細を知りたい方は以下をご覧ください。本記事では簡単に解説します。</p><ul><li><a href="/articles/20221124a/">Language Server Protocolを用いたVSCode拡張機能開発 (前編) | フューチャー技術ブログ</a></li><li><a href="/articles/20221125a/">Language Server Protocolを用いたVSCode拡張機能開発 (後編) | フューチャー技術ブログ</a></li></ul><h2 id="拡張機能の設定"><a href="#拡張機能の設定" class="headerlink" title="拡張機能の設定"></a>拡張機能の設定</h2><p><code>package.json</code>を変更して拡張機能の設定を変更します。</p><p>まず、VSCodeが起動されると拡張機能が有効になるようにします。</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;activationEvents&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>コマンドパレットから「format sql」コマンドを実行できるように設定します。</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uroborosql-fmt.uroborosql-format&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;format sql&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="クライアント"><a href="#クライアント" class="headerlink" title="クライアント"></a>クライアント</h2><p><code>client/src/extension.ts</code>にクライアント側の処理を記述します。</p><p><code>clientOptions</code>内の<code>documentSelector</code>を以下のように変更し、全ての形式のファイル、保存されていないUntitledなファイルを拡張機能の対象とします。</p><figure class="highlight ts"><figcaption><span>client/src/extension.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">documentSelector</span>: [</span><br><span class="line">  &#123; <span class="attr">pattern</span>: <span class="string">&quot;**&quot;</span>, <span class="attr">scheme</span>: <span class="string">&quot;file&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">pattern</span>: <span class="string">&quot;**&quot;</span>, <span class="attr">scheme</span>: <span class="string">&quot;untitled&quot;</span> &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p><code>uroborosql-fmt.uroborosql-format</code>コマンドが実行されたら<code>uroborosql-fmt.executeFormat</code>の実行情報とドキュメントのuri、version、選択範囲をサーバに送信する処理を記述します。</p><figure class="highlight ts"><figcaption><span>client/src/extension.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">context.<span class="property">subscriptions</span>.<span class="title function_">push</span>(</span><br><span class="line">  commands.<span class="title function_">registerCommand</span>(<span class="string">&quot;uroborosql-fmt.uroborosql-format&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> uri = <span class="variable language_">window</span>.<span class="property">activeTextEditor</span>.<span class="property">document</span>.<span class="property">uri</span>;</span><br><span class="line">    <span class="keyword">const</span> version = <span class="variable language_">window</span>.<span class="property">activeTextEditor</span>.<span class="property">document</span>.<span class="property">version</span>;</span><br><span class="line">    <span class="keyword">const</span> selections = <span class="variable language_">window</span>.<span class="property">activeTextEditor</span>.<span class="property">selections</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> client.<span class="title function_">sendRequest</span>(<span class="title class_">ExecuteCommandRequest</span>.<span class="property">type</span>, &#123;</span><br><span class="line">      <span class="attr">command</span>: <span class="string">&quot;uroborosql-fmt.executeFormat&quot;</span>,</span><br><span class="line">      <span class="attr">arguments</span>: [uri, version, selections],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="サーバ"><a href="#サーバ" class="headerlink" title="サーバ"></a>サーバ</h2><p>まず先程<code>npm pack</code>で取得した<code>uroborosql-fmt-napi-0.0.0.tgz</code>をserverディレクトリ内に置きます。<br>そして、<code>server/package.json</code>のdependenciesを以下のように変更します。</p><figure class="highlight diff"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line"><span class="addition">+   &quot;uroborosql-fmt-napi&quot;: &quot;file:uroborosql-fmt-napi-0.0.0.tgz&quot;,</span></span><br><span class="line">    &quot;vscode-languageserver&quot;: &quot;^7.0.0&quot;,</span><br><span class="line">    &quot;vscode-languageserver-textdocument&quot;: &quot;^1.0.4&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>これでRust製SQLフォーマッタをimportできるようになりました。</p><p><code>server/src/server.ts</code>にサーバの処理を記述します。<br>まずフォーマットを実行する関数をimportします。</p><figure class="highlight ts"><figcaption><span>server/src/server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; runfmt &#125; <span class="keyword">from</span> <span class="string">&quot;uroborosql-fmt-napi&quot;</span>;</span><br></pre></td></tr></table></figure><p>コマンド実行時に選択範囲のテキストをフォーマットする処理を記述します。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// コマンド実行時に行う処理</span></span><br><span class="line">connection.<span class="title function_">onExecuteCommand</span>(<span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    params.<span class="property">command</span> !== <span class="string">&quot;uroborosql-fmt.executeFormat&quot;</span> ||</span><br><span class="line">    params.<span class="property">arguments</span> == <span class="literal">null</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> uri = params.<span class="property">arguments</span>[<span class="number">0</span>].<span class="property">external</span>;</span><br><span class="line">  <span class="comment">// uriからドキュメントを取得</span></span><br><span class="line">  <span class="keyword">const</span> textDocument = documents.<span class="title function_">get</span>(uri);</span><br><span class="line">  <span class="keyword">if</span> (textDocument == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// バージョン不一致の場合はアーリーリターン</span></span><br><span class="line">  <span class="keyword">const</span> version = params.<span class="property">arguments</span>[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (textDocument.<span class="property">version</span> !== version) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> selections = params.<span class="property">arguments</span>[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">changes</span>: <span class="title class_">TextEdit</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 全ての選択範囲に対して実行</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> selection <span class="keyword">of</span> selections) &#123;</span><br><span class="line">    <span class="comment">// テキストを取得</span></span><br><span class="line">    <span class="keyword">const</span> text = textDocument.<span class="title function_">getText</span>(selection);</span><br><span class="line">    <span class="keyword">if</span> (text.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// フォーマット</span></span><br><span class="line">    changes.<span class="title function_">push</span>(<span class="title class_">TextEdit</span>.<span class="title function_">replace</span>(selection, <span class="title function_">runfmt</span>(text)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 選択されていない場合</span></span><br><span class="line">  <span class="keyword">if</span> (changes.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// テキスト全体を取得</span></span><br><span class="line">    <span class="keyword">const</span> text = textDocument.<span class="title function_">getText</span>();</span><br><span class="line">    <span class="comment">// フォーマット</span></span><br><span class="line">    changes.<span class="title function_">push</span>(</span><br><span class="line">      <span class="title class_">TextEdit</span>.<span class="title function_">replace</span>(</span><br><span class="line">        <span class="title class_">Range</span>.<span class="title function_">create</span>(</span><br><span class="line">          <span class="title class_">Position</span>.<span class="title function_">create</span>(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">          textDocument.<span class="title function_">positionAt</span>(text.<span class="property">length</span>)</span><br><span class="line">        ),</span><br><span class="line">        <span class="title function_">runfmt</span>(text)</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 変更を適用</span></span><br><span class="line">  connection.<span class="property">workspace</span>.<span class="title function_">applyEdit</span>(&#123;</span><br><span class="line">    <span class="attr">documentChanges</span>: [</span><br><span class="line">      <span class="title class_">TextDocumentEdit</span>.<span class="title function_">create</span>(</span><br><span class="line">        &#123; <span class="attr">uri</span>: textDocument.<span class="property">uri</span>, <span class="attr">version</span>: textDocument.<span class="property">version</span> &#125;,</span><br><span class="line">        changes</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>クライアントとサーバをコンパイルして実行してみます。</p><img src="/images/20221228a/formattest.gif" alt="formattest.gif" width="1200" height="675" loading="lazy"><p>ちゃんとフォーマットされることが確認できました🎉</p><h1 id="拡張機能のパッケージ化"><a href="#拡張機能のパッケージ化" class="headerlink" title="拡張機能のパッケージ化"></a>拡張機能のパッケージ化</h1><p>vsceというツールを使用してパッケージ化を行います。vsceとはVSCode拡張機能のパッケージ化、公開、管理を行うことができるCLIツールです。</p><div class="note warn" style="background:#fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>本記事では拡張機能の公開については説明しません。</p></div><h2 id="vsceのインストール"><a href="#vsceのインストール" class="headerlink" title="vsceのインストール"></a>vsceのインストール</h2><p>私の環境(Windows10)ではインストールに手順が必要だったので順に説明します。</p><h3 id="1-Python3のインストール"><a href="#1-Python3のインストール" class="headerlink" title="1. Python3のインストール"></a>1. Python3のインストール</h3><p>Python3が必要なためインストールします。既にPython3が入っている方は次のステップに進んでください。</p><p>まず<a href="https://www.python.org/downloads/">こちら</a>からインストーラをダウンロードします。</p><img src="/images/20221228a/image_2.png" alt="image.png" width="1200" height="522" loading="lazy"><p>ダウンロードしたファイルを開き、<strong>一番下の「Add Python 3.x to PATH」にチェックを入れてください。</strong><br>「Install Now」をクリックしてインストールし、「Setup was Succesful」と表示されればインストール完了です。</p><h3 id="2-node-gypのインストールと設定"><a href="#2-node-gypのインストールと設定" class="headerlink" title="2. node-gypのインストールと設定"></a>2. node-gypのインストールと設定</h3><p><a href="https://github.com/nodejs/node-gyp">node-gyp</a>とは、Node.js のネイティブアドオンモジュールをコンパイルするためのツールです。既に入っていて設定済みの方は次のステップに進んでください。</p><h4 id="node-gypのインストール"><a href="#node-gypのインストール" class="headerlink" title="node-gypのインストール"></a>node-gypのインストール</h4><p>まずnode-gypをインストールします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g node-gyp</span><br></pre></td></tr></table></figure><h3 id="3-VisualStudioのビルドツールのインストール"><a href="#3-VisualStudioのビルドツールのインストール" class="headerlink" title="3. VisualStudioのビルドツールのインストール"></a>3. VisualStudioのビルドツールのインストール</h3><p>次に<a href="https://visualstudio.microsoft.com/ja/thank-you-downloading-visual-studio/?sku=BuildTools">こちら</a>からVisualStudioのビルドツールのインストーラをダウンロードします。<br>インストーラを起動して「C++によるデスクトップ開発」を選択して、<strong>右側の「インストールの詳細」の中の「Windows 10 SDK」にチェックを入れて</strong>右下のインストールをクリックします。(Windows11の方は「Windows 11 SDK」にチェックを入れてください。)</p><img src="/images/20221228a/image_3.png" alt="image.png" width="1200" height="635" loading="lazy"><h3 id="4-npmの設定"><a href="#4-npmの設定" class="headerlink" title="4. npmの設定"></a>4. npmの設定</h3><p>以下を実行します。(2022の部分はダウンロードしたバージョンに合わせて適宜変更して下さい)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set msvs_version 2022</span><br></pre></td></tr></table></figure><h3 id="5-vsceのインストール"><a href="#5-vsceのインストール" class="headerlink" title="5. vsceのインストール"></a>5. vsceのインストール</h3><p>以下を実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vsce</span><br></pre></td></tr></table></figure><p>vsceコマンドが実行できるようになれば成功です。</p><h2 id="パッケージ化"><a href="#パッケージ化" class="headerlink" title="パッケージ化"></a>パッケージ化</h2><p>先程作成した拡張機能のディレクトリで以下のコマンドを実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vsce package</span><br></pre></td></tr></table></figure><p>すると、<code>プロジェクト名-バージョン.vsix</code>というファイルが生成されます。今回の例では<code>uroborosql-fmt-1.0.0.vsix</code>というファイルが生成されました。</p><p>そして、以下のコマンドでインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code --install-extension .\uroborosql-fmt-1.0.0.vsix</span><br></pre></td></tr></table></figure><p>無事インストールされ、フォーマッタが動くようになったので成功です 🎉</p><img src="/images/20221228a/image_4.png" alt="" width="1200" height="629" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>本記事ではRust製SQLフォーマッタをVSCode拡張機能化した方法を紹介しました。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://nodejs.github.io/node-addon-examples/about/what/">What is Node-API? · The Node-API Resource</a></li><li><a href="https://shisama.hatenablog.com/entry/2021/12/03/054437">Rust + Node-APIでクロスプラットフォーム向けnpmパッケージを公開する - 別にしんどくないブログ</a></li><li><a href="https://qiita.com/irico/items/fa60a7e077f4414f0eb6">VSCodeの拡張を作ってパッケージ化する - Qiita</a></li><li><a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension">Publishing Extensions | Visual Studio Code Extension API</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20221228a/top.png&quot; alt=&quot;&quot; width=&quot;579&quot; height=&quot;216&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フォーマッター" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%82%BF%E3%83%BC/"/>
    
    <category term="コアテク" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%82%A2%E3%83%86%E3%82%AF/"/>
    
    <category term="VSCode" scheme="https://future-architect.github.io/tags/VSCode/"/>
    
    <category term="Rust" scheme="https://future-architect.github.io/tags/Rust/"/>
    
    <category term="napi-rs" scheme="https://future-architect.github.io/tags/napi-rs/"/>
    
  </entry>
  
  <entry>
    <title>会社のプロキシの裏でPodman Desktopを実行する</title>
    <link href="https://future-architect.github.io/articles/20221227a/"/>
    <id>https://future-architect.github.io/articles/20221227a/</id>
    <published>2022-12-26T15:00:00.000Z</published>
    <updated>2022-12-29T06:14:34.770Z</updated>
    
    <content type="html"><![CDATA[<p>ちょっとローカルでPostgreSQLの最新バージョンを試したいけどDocker Desktopの稟議が間に合わない！みたいなときのためのメモです。</p><p>Docker Desktopの有償化と契約すべきライセンスについては以前書きました。その後、値段がちょっと上がったのと、100人以上のTeamプランは許可されずにBuisinessプランが必須になり、BusinessプランではSSOが利用できるようになったのが変更点です。</p><ul><li><a href="/articles/20220124a/">Docker Desktop有償化！どのライセンス契約する？</a></li></ul><p><a href="https://www.docker.com/products/docker-desktop/">Docker Desktop</a>の代替のものがいくつかでています。<a href="https://rancherdesktop.io/">Rancher Desktop</a>と、<a href="https://podman-desktop.io/">Podman Desktop</a>があります。Rancher Desktopは会社のプロキシの裏で動かすのが難しく、ちょっと苦戦した上に、WSLのコンテナが再作成されるタイミングでプロキシ設定がリセットされるということを聞いて、Podman Desktopを使ってみました。PodmanはRedHatが開発しているコンテナのエコシステムで、コンテナエンジン（以下サーバーとします）、CLIツールで構成されます。それにデスクトップのUIとPodman自身のインストーラを組み合わせたものがPodman Desktopです。</p><img src="/images/20221227a/image.png" alt="" width="1200" height="978" loading="lazy"><h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><p>上記のPodman Desktopのサイトからインストーラをダウンロードして実行します。0.9系までは実行ファイルがそのままダウンロードされたのですが、最新の0.10.0からはインストーラになりました。入れるのはダブルクリックだけなので難しくないでしょう。起動したら、Podmanのインストーラが初回は起動するので、インストールします。PodmanはWSL2上で動くサーバーで、dockerdとかにあたるものです。執筆時点では4.3.1が入りました。</p><h1 id="プロキシの設定"><a href="#プロキシの設定" class="headerlink" title="プロキシの設定"></a>プロキシの設定</h1><p>起動したら、左下のSettings→Proxyと進んでプロキシの設定ダイアログに設定します。認証が必要な場合は、<code>http://ユーザー:パスワード@ホスト:ポート</code>という形式で入れます。</p><img src="/images/20221227a/image_2.png" alt="" width="1200" height="687" loading="lazy"><p>これだけで済めばDocker同等なのですが、残念ながらもうひと手間必要です。</p><h2 id="PodmanのWSL2のイメージの設定変更"><a href="#PodmanのWSL2のイメージの設定変更" class="headerlink" title="PodmanのWSL2のイメージの設定変更"></a>PodmanのWSL2のイメージの設定変更</h2><p>そのままだと実行すると、プロキシのホスト名が解決できないというエラーが発生してしまいます。ネームサーバーの設定を入れてあげる必要があります。まずWSL2を起動します。まずはresolv.confが上書きされないようにwsl.confを編集します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wsl -d podman-machine-default</span><br><span class="line"></span><br><span class="line">(wsl2起動)</span><br><span class="line"></span><br><span class="line">$ sudo vi /etc/wsl.conf</span><br></pre></td></tr></table></figure><figure class="highlight ini"><figcaption><span>/etc/wsl.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[user]</span></span><br><span class="line"><span class="attr">default</span>=user</span><br><span class="line"></span><br><span class="line"><span class="section">[network]</span></span><br><span class="line"><span class="attr">generateResolvConf</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>その後は一度WSL2を再起動します（そうしないとresolve.confが再生してしまった）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wsl --shutdown</span><br></pre></td></tr></table></figure><p>次は&#x2F;etc&#x2F;resolv.confを編集します</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wsl -d podman-machine-default</span><br><span class="line"></span><br><span class="line">(wsl2起動)</span><br><span class="line"></span><br><span class="line">$ sudo vi /etc/resolv.conf</span><br></pre></td></tr></table></figure><figure class="highlight text"><figcaption><span>/etc/resolv.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver プロキシのIPアドレス</span><br></pre></td></tr></table></figure><p>一度WSL2から出て再度入りなおしても編集したresolv.confが残っていることを確認しておきます。</p><p>最後にpodmanのサーバーを再起動してからプロキシ越しにイメージをとってきて実行できるか確認します。<code>docker</code>を<code>podman</code>に読み替えるだけで使えます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ podman machine stop</span><br><span class="line">$ podman machine start</span><br><span class="line">$ podman run --rm hello-world</span><br><span class="line">!... Hello Podman World ...!</span><br><span class="line"></span><br><span class="line">         .--&quot;--.</span><br><span class="line">       / -     - \</span><br><span class="line">      / (O)   (O) \</span><br><span class="line">   ~~~| -=(,Y,)=- |</span><br><span class="line">    .---. /`  \   |~~</span><br><span class="line"> ~/  o  o \~~~~.----. ~~</span><br><span class="line">  | =(X)= |~  / (O (O) \</span><br><span class="line">   ~~~~~~~  ~| =(Y_)=-  |</span><br><span class="line">  ~~~~    ~~~|   U      |~~</span><br><span class="line"></span><br><span class="line">Project:   https://github.com/containers/podman</span><br><span class="line">Website:   https://podman.io</span><br><span class="line">Documents: https://docs.podman.io</span><br><span class="line">Twitter:   @Podman_io</span><br></pre></td></tr></table></figure><h1 id="コンテナレジストリの設定"><a href="#コンテナレジストリの設定" class="headerlink" title="コンテナレジストリの設定"></a>コンテナレジストリの設定</h1><p>デフォルトのPodmanは、docker.io以外のところからダウンロードしようとしたり、いくつかのイメージ名にエイリアスが張られていたりします。さきほどのhello-world、Dockerのhello-worldと違うことに気づいた方もいるでしょう。hello-worldは<code>quay.io/podman/hello</code>を代わりにプルしてきます。</p><p>dockerのものを使うにはレジストリを変更します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wsl -d podman-machine-default</span><br><span class="line"></span><br><span class="line">(wsl2起動)</span><br><span class="line"></span><br><span class="line">$ sudo vi /etc/containers/registries.conf</span><br></pre></td></tr></table></figure><p>次のように変更します。これでdocker.ioのイメージだけを取得します。また、CONTAINERS_SHORT_NAME_ALIASING&#x3D;onを設定しておくと、<code>docker.io/hello-world</code>ではなく、<code>hello-world</code>で動作するようになります。とはいえ、短縮名は<a href="https://www.redhat.com/sysadmin/container-image-short-names">リスクがあるよ</a>とドキュメント化されていたりするので、確認の上ご利用ください。今回はあくまでもDocker Desktopを入れるまでのつなぎなので、互換性が高い方が良いな、ということでやっています。</p><figure class="highlight toml"><figcaption><span>/etc/containers/registries.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">unqualified-search-registries</span> = [<span class="string">&quot;docker.io&quot;</span>]</span><br><span class="line"><span class="section">[engine]</span></span><br><span class="line"><span class="attr">env</span>=[<span class="string">&quot;CONTAINERS_SHORT_NAME_ALIASING=on&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">short-name-mode</span>=<span class="string">&quot;enforcing&quot;</span></span><br></pre></td></tr></table></figure><p>それではまたpodmanを再起動してから、今度はNginxを起動してみます。<code>http://localhost:8888/</code>で起動したら完了です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ podman machine stop</span><br><span class="line">$ podman machine start</span><br><span class="line">$ podman run --rm -it -p 8888:80 nginx</span><br></pre></td></tr></table></figure><img src="/images/20221227a/image_3.png" alt="image.png" width="1200" height="548" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Docker Desktopはいろいろな開発者にうれしい機能がたくさん追加されて、積極的に開発されていて、便利ですし、今回やったようなWSL2に入ってプロキシサーバーにつながるような設定をしなくてもアクセスできたりして便利なのですが、ちょびっと検証する目的でPodman Desktopを代わりに実行する方法を紹介しました。プロキシの裏でも動作するようになりました。</p><p>まあ、世の中のドキュメントはDockerを使うように書かれていたりするので、トラブルシュートとかを考えると頻繁使う人はDocker Desktopをきちんと入れた方が良いですね。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;ちょっとローカルでPostgreSQLの最新バージョンを試したいけどDocker Desktopの稟議が間に合わない！みたいなときのためのメモです。&lt;/p&gt;
&lt;p&gt;Docker</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="プロキシ" scheme="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7/"/>
    
    <category term="Podman" scheme="https://future-architect.github.io/tags/Podman/"/>
    
  </entry>
  
  <entry>
    <title>ITコンサルが教える銀行業務シリーズ part1 超入門編</title>
    <link href="https://future-architect.github.io/articles/20221226a/"/>
    <id>https://future-architect.github.io/articles/20221226a/</id>
    <published>2022-12-25T15:00:00.000Z</published>
    <updated>2023-01-08T05:26:01.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>金融サービス事業部の山口です。</p><p>この記事は<a href="/articles/20220616a/">「業界ドメインに詳しくなろう」シリーズ連載</a>の「銀行業務」超入門編です。<br>銀行業界を目指す学生さん、銀行業界にアサインされた若手SIer、他業種で活躍するITコンサルの方向けになります。</p><p>インフラエンジニアから銀行系ITコンサルにキャリアチェンジした私が、その道20年のキャリアを誇る安本大先輩の力を借りて、銀行業務について記載していきます。</p><h1 id="ITコンサルが教える銀行業務シリーズ-銀行業務とは"><a href="#ITコンサルが教える銀行業務シリーズ-銀行業務とは" class="headerlink" title="ITコンサルが教える銀行業務シリーズ　銀行業務とは"></a>ITコンサルが教える銀行業務シリーズ　銀行業務とは</h1><p>銀行業務をお話する前に、なぜ「銀行」と呼ばれるようになったのはご存知でしょうか。</p><p>明治の世が始まって間もなく、「Bank」という英単語を日本語に何と訳すかという話の中で、「お金（金銀）を取り扱う」と中国語で「店」を意味する「行」を組み合わせて、「金行」・「銀行」という案が出て、語呂の良さから「銀行」に決まったと言われています。</p><p>２０２１年の大河ドラマ<a href="https://www.nhk.jp/p/seiten/ts/61Z4879Q1K/">「晴天を衝け」</a>の中では、日本初の銀行の頭取に就任した渋沢栄一が「銀行」🏦と名付けたというお話になっていましたし、実際にそんな一説があるという記事も見かけますが実際のところはどうなのでしょうね。<br>ともあれ銀行という単語は作られてからまだ１５０年くらいの比較的浅い単語のようです😄</p><p>本題の銀行業務にお話を移しましょう。</p><p>銀行における伝統的な業務は「預金」「融資」「為替」となります。(昨今の銀行は業務範囲を拡大してきてます。)</p><img src="/images/20221226a/ginko_gyomu.PNG" alt="ginko_gyomu.PNG" width="663" height="452" loading="lazy"><h2 id="銀行の利益構造"><a href="#銀行の利益構造" class="headerlink" title="銀行の利益構造"></a>銀行の利益構造</h2><p>銀行は、預金者からお金を預り、そのお金を必要とする企業・個人へ貸し出しています。</p><p>言わばお金という商材を預金によって仕入れ、またお金を必要としている人に貸出という形で販売するビジネスモデルです。</p><p>顧客の日々のお金のやり取り（決済や振込など）を円滑・確実に行い日常的な経済活動を支えており、社会的インフラを担う公共性の高い業種です。とはいえ、銀行は株式会社であり民間企業であり、しっかり利益を出す必要があります。</p><p>銀行はどうやって収益を得ているかというと、預金者から集めたお金を、融資という形で企業や個人に貸し付けを行い、この融資によって発生した利子で利益を得る構造となっています。</p><img src="/images/20221226a/image.png" alt="image.png" width="1140" height="592" loading="lazy"><h2 id="預金業務"><a href="#預金業務" class="headerlink" title="預金業務"></a>預金業務</h2><p>バブル崩壊後においては超低金利時代とも言われており、銀行が融資することによって稼げる利子は大きく圧迫を受けており、銀行の収益モデルについては非常に厳しい状況となっています。</p><p>金融緩和政策によって世の中にお金が余っている状況が長く続いており、お金を預けたい（運用したい）人（＝供給）と、お金を必要としている人（＝需要）のバランスが供給過多の状況となっており、金利が低く維持された状態になっております。こうしたことが、私達一般市民にも少なからず影響が出てきています。</p><p>例えば、銀行口座を開設すると当たり前のように通帳をもらい、キャッシュカードをもらいます。通帳が全て印字し終わるとこれもまた当たり前のように次の通帳が発行され、その通帳発行に際してお金を請求されることはありませんでした。ところが、銀行の収益構造が非常に厳しくなってきたことや、スマートフォンなどのデジタル機器の普及も相まって有料化の動きが始まっています。三菱UFJ銀行においては、2022年4月以降紙としての通帳を発行する都度数百円の費用がかかるようになりました。</p><p>こうした動きは着実に広がってきています。各銀行が○○銀行アプリといったものを提供しそちらへ移行を促すCMなどを出しているのは上記のような背景があるといえます。</p><p>一方で、上述した三菱UFJ銀行において、デジタル機器を扱うのが苦手あるいはまだ与えられていないという未成年や高齢者については無償とするなど、完全有償化に向けては過渡期を経ながらということになっていきそうです。<br>なお、普通預金の平均金利は0.001%（<a href="https://www.stat-search.boj.or.jp/ssi/mtshtml/ir02_m_1.html">日本銀行 時系列統計データ 検索サイト</a>より ）となっており、預金者の皆さんに還元される金利も同様にごく僅かなものとなってしまっているのもこうした収益構造の問題から発生してしまっています。</p><h2 id="融資業務"><a href="#融資業務" class="headerlink" title="融資業務"></a>融資業務</h2><p>融資に関しても同様です。例えば住宅ローンで、一部のネット銀行でしか金利1%を割るようなローンはなかったのに、今や全国の地方銀行で団信・三大疾病特約までついて金利1%を割るような商品が当たり前のように出てきています。銀行は以前にも増して非常に薄い利ざやで確実に稼ぐことが求められているのです。</p><p>それなのに、貸し付けたにもかかわらず、企業が倒産するなどして貸したお金が返済されないケースが発生してしまうのです。1000万円を年利5%で10先に貸すと、銀行にはざっくり1年間で500万円の収益が生まれるわけですが、10先のうち1先でも貸し倒れが発生してしまえば銀行の損失はあっという間に－500万円となってしまいます。薄い利ざやで確実に稼がなければならないのに、こんなことが起こっては銀行にとって泣きっ面に蜂🐝状態です❗</p><img src="/images/20221226a/image_2.png" alt="image.png" width="1082" height="575" loading="lazy"><p>このため、銀行が融資を行う際には、融資先の業績や信用・将来性をしっかり審査した上で融資を行う必要性があります。ローン審査などで断られてしまい、お金を借りたいのに貸してくれない！なんて感じたことがある方もいらっしゃるかもしれませんが、銀行としても生き残りをかけて必死な状況なんですよね。</p><h2 id="為替業務"><a href="#為替業務" class="headerlink" title="為替業務"></a>為替業務</h2><p>為替については、おそらく皆さんも一度は使ったことがあるサービスで、会社間あるいは個人間での資金移動であったり、光熱費などの各種費用の引き落としなどを行っています。お金のやり取りについては、日本国内に限らず、円・ドルなどの通貨が異なる銀行間での入出金についても銀行では対応しています。</p><p>今でこそ銀行の窓口へ行かずとも、バンキングアプリやすぐ近くにあるコンビニATMなどを利用することで当たり前のように預金サービスや為替サービスを受けていると思います。融資の申込みもバンキングアプリから直接申し込みができるようなサービスも増えてきましたね。</p><p>従来の銀行口座を介した資金移動は手数料の高さから敬遠され、個人間の少額送金は各決済アプリによる送金サービスに代替され始めているのが現状です。皆さんも飲み会の割り勘をするのに決済アプリの送金サービスを使うことが増えていませんか？とは言え、給与振込等のしっかりとした信頼性を求められるものはまだまだ、銀行が活用されてますね。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>銀行という言葉の歴史は浅いですが、我々には深い存在であるということがお判りいただけたでしょうか。</p><p>日本や地域の経済を循環させるような血液のような役割を担っているのが銀行です。銀行はお金という企業・個人にとって非常に重要なものを取り扱う社会的責任の大きさもあって、株式会社として一般に定められている会社法・労働基準法等の法規制はもちろん、銀行法といった形で多くの規制を課されている業種です。</p><p>また、長引く低金利環境下における利ざやの縮小、様々なプレーヤーが決済領域に参加する事での資金移動手段の変化、決済手数料の減少と、現在の銀行を取り巻く環境は大きな転換点を迎えている事も業界の概要・トレンドをつかむ上で重要なポイントだと思います。</p><p>今後は以下も予定してます。</p><ul><li>ITコンサルが教える銀行業務シリーズ　半沢直樹でも有名な営業活動</li><li>ITコンサルが教える銀行業務シリーズ　融資の要！融資審査①　何を気にする？銀行員　～法人融資編～</li><li>ITコンサルが教える銀行業務シリーズ　融資の要！融資審査②　何を気にする？銀行員　～個人融資(ローン)編～</li><li>ITコンサルが教える銀行業務シリーズ　融資の要！融資審査③　何を気にする？銀行員　～担保や保証編～</li><li>ITコンサルが教える銀行業務シリーズ　貸したら終わりではない　定期的にチェック自己査定</li><li>ITコンサルが教える銀行業務シリーズ　変化と不変　変わりゆく銀行文化と変わらない銀行文化</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;金融サービス事業部の山口です。&lt;/p&gt;
&lt;p&gt;この記事は&lt;a</summary>
        
      
    
    
    
    <category term="Business" scheme="https://future-architect.github.io/categories/Business/"/>
    
    
    <category term="ビジネス" scheme="https://future-architect.github.io/tags/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9/"/>
    
    <category term="業界ドメイン" scheme="https://future-architect.github.io/tags/%E6%A5%AD%E7%95%8C%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3/"/>
    
    <category term="銀行" scheme="https://future-architect.github.io/tags/%E9%8A%80%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>俺のシステムがこんなに脆弱性だらけのわけがない(linkedpackageの紹介)</title>
    <link href="https://future-architect.github.io/articles/20221223a/"/>
    <id>https://future-architect.github.io/articles/20221223a/</id>
    <published>2022-12-22T15:00:00.000Z</published>
    <updated>2022-12-23T00:58:00.516Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20221223a/top.jpg" alt="" width="842" height="523"><p>セキュリティに対して、きちんとお金をかけて対応すべきである、というのが近年の風潮です。そんな中、システム開発では多くのオープンソースのコンポーネントを組み合わせてシステムを構築するようになってきたため、使っている部品の脆弱性管理、というのがかなり大きな市場になってきました。</p><p>当社にはOSSの<a href="https://vuls.io/">Vuls</a>と、それに脆弱性管理の手間を減らしてくれる<a href="https://vuls.biz/">FutureVuls</a>というSaaSサービスがあります。コンテナのスキャンだとAqua Securityの<a href="https://trivy.dev/">Trivy</a>が有名ですね。</p><p>開発中のアプリケーションのスキャナーというと、Node.jsのnpmコマンドが脆弱なパッケージの検知機能（auditサブコマンド）を内蔵していますし、Goも<a href="https://vuln.go.dev/">公式脆弱性管理データベース</a>のページを作り、新しい仕組みを構築しようとしています(<a href="https://go.dev/security/vuln/">ドキュメント</a>、<a href="https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck">準標準のチェックコマンド</a>)。言語をまたいで使えるものには<a href="https://snyk.io/">snyk</a>もありますね。</p><h1 id="フォールスポジティブ（偽陽性）を減らす"><a href="#フォールスポジティブ（偽陽性）を減らす" class="headerlink" title="フォールスポジティブ（偽陽性）を減らす"></a>フォールスポジティブ（偽陽性）を減らす</h1><p>Node.jsでの開発は4桁ぐらいパッケージに依存することがありえます。npm auditで少しでも古いパッケージを使うと大量の脆弱性が報告されることがあります。でも、よくよく見てみると実は関係ないのかな？とも思えるような脆弱性もたくさん出てきますが、なかなか判定を1つ1つ行うのは大変です。</p><p>ですが、アプリケーションの開発でいうと、「パッケージリストには追加してみたのだけど、実際には使っていないパッケージ」などがあったりします。Goだとgo mod tidyでお掃除してくれますが。あとは開発用に追加したもので、本番コードにはリンクされていないものもあります。Node.jsなんかは、ほとんどはそうなんじゃないですかね。</p><p>あとは、脆弱性がヒットしたとしても、そのパッケージ中の一部の機能は使っているが該当する機能は使っていない、ということもあります。そのため、実際にビルドしたアプリケーションに含まれるソースコードでフィルタリングしたらいいんじゃないか、と思って実証実験的に作ったパッケージが次のものです。</p><p><a href="https://github.com/future-architect/linkedpackage">https://github.com/future-architect/linkedpackage</a></p><p>神戸さんからメッセージもらうまでは、作ったことをすっかり忘れていて、とりあえず公開だけしたのが上のリポジトリです。ライセンスはひとまずVulsにあわせてGPLにしています。とりあえず公開だけしたのでREADMEもないですが</p><h1 id="処理の方法"><a href="#処理の方法" class="headerlink" title="処理の方法"></a>処理の方法</h1><p>現時点ではJavaScriptのプロジェクトに限定した機能になっています。ソースマップをざっとスキャンして、実行ファイルに含まれるソース片を提供しているパッケージを取り出します。コマンドとしても動かせるようにしてあり、linkedpackage auditコマンドを使うと、npm auditの結果を、利用パッケージに限定してフィルタリングして表示、みたいなことができます。</p><p>ソースマップ中のパス表記は、その中で識別子が認識一致していたら問題はないと思うのですが、実際のソースコードとリンクさせるには逆変換が必要かなと思っています。ツールによって出てくるパス表記がいろいろあるので、これを地道に拾ってモジュール名を拾うようにしています。地道さが必要ですね。</p><ul><li><code>webpack:///./node_modules/@babel/runtime/helpers/wrapNativeSuper/_index.mjs</code></li><li><code>../webpack:/ncc-project/node_modules/trim/index.js</code></li><li><code>webpack://_N_E/ignored|/prj/node_modules/next/dist/shared/lib/router|./utils/resolve-rewrites</code></li></ul><h1 id="今後"><a href="#今後" class="headerlink" title="今後"></a>今後</h1><p>Goも<a href="https://pkg.go.dev/debug/buildinfo@go1.19.4#Read">debugパッケージ</a>使えば実行ファイルから、利用しているモジュール一覧が取れるので行けそうですね。そのうち作ろうかな。</p><p>ただ、実行ファイルに入っているからといって、それがまた実行されるわけではない、というのはあります。JavaScriptだとtree shakingという最適化がありますが完璧にフィルタリングできるわけではありません。Goはそこまで積極的なCode Eliminationはしてない印象がありますし、グローバル変数を含めinit()から参照されるオブジェクトなんかは使ってなくてもリンクされてしまいます。Goは1.20から<a href="https://go.googlesource.com/proposal/+/master/design/55022-pgo.md">プロファイラ機能とリンクしたオプティマイザ</a>が入ります。この情報が外部のツールから使えるかどうかはわからないですが、実際に実行されている行だけ取り出せれば、また精度の高いフィルタリングができるんじゃないかな、と思っています。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20221223a/top.jpg&quot; alt=&quot;&quot; width=&quot;842&quot;</summary>
        
      
    
    
    
    <category term="Security" scheme="https://future-architect.github.io/categories/Security/"/>
    
    
    <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
    <category term="Node.js" scheme="https://future-architect.github.io/tags/Node-js/"/>
    
    <category term="脆弱性" scheme="https://future-architect.github.io/tags/%E8%84%86%E5%BC%B1%E6%80%A7/"/>
    
    <category term="npm" scheme="https://future-architect.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>MSAL.jsで開発時は認証スキップしたい</title>
    <link href="https://future-architect.github.io/articles/20221220a/"/>
    <id>https://future-architect.github.io/articles/20221220a/</id>
    <published>2022-12-19T15:00:00.000Z</published>
    <updated>2022-12-26T04:01:56.051Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20221220a/azuread.jpg" alt="" width="700" height="298"><p>MSAL.jsはとても便利なライブラリです。前に書いたエントリーで説明しましたが、AzureAD側の設定は必要ですが、コードへの組み込みもすぐです。コールバックを受けるバックエンドサーバーの用意も不要で、フロントエンドだけで認証が完結します。</p><ul><li><a href="https://future-architect.github.io/articles/20221118a/">https://future-architect.github.io/articles/20221118a/</a></li></ul><p>ですが、開発時にAzureADがない場合もありますし、開発者全員が開発で使うAzureADにユーザー登録されていないかもしれません。また、権限ごとにいろんなユーザーを用意してテストできるようにしたいとかのニーズもあると思います。また、E2Eテストで毎回認証をすると遅いとか、コールバックを受けるコードがGitHub Actionsではうまく動かず実AzureAD認証を組み込むのが難しいとか、認証をスキップしたいニーズもいろいろあるため、開発時にはMSAL.jsをスキップできるようにしてみます。</p><h1 id="設定の外だし"><a href="#設定の外だし" class="headerlink" title="設定の外だし"></a>設定の外だし</h1><p>前回はハードコードしましたが、AzureADの接続情報などは.envで設定を流し込むべきですので、別ファイルに切り出します。各フレームワークごとに、ブラウザに環境変数を公開するには、キーの名前のルールがあります。<a href="https://cli.vuejs.org/guide/mode-and-env.html">Vue.jsであればVUE_APP_</a>を前につけますし、<a href="https://ja.vitejs.dev/guide/env-and-mode.html">Vite.jsだとVITE_</a>をつけますし、<a href="https://nextjs.org/docs/basic-features/environment-variables">Next.jsだとNEXT_PUBLIC_</a>ですね。これらの設定はサーバーではなくてフロントエンド側なので、それらのルールに従った名前にします。Vue.jsだったら次の通り。</p><figure class="highlight bash"><figcaption><span>.env</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_AZURE_DUMMY_USER=dummy-user@example.com</span><br><span class="line">VUE_APP_AZURE_ISSUER=https://login.microsoftonline.com/<span class="variable">$&#123;テナントID&#125;</span>,</span><br><span class="line">VUE_APP_AZURE_APP_ID=<span class="variable">$&#123;アプリケーションID&#125;</span></span><br></pre></td></tr></table></figure><p>これらの設定を使うようにします。コールバックのURLは現在実行中のホストの<code>/callback</code>を向くように動的にパスを作っています。このパスをAzureAD側の設定にも入れる想定です。</p><figure class="highlight ts"><figcaption><span>authConfig.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Configuration</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@azure/msal-browser&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">Configuration</span> = &#123;</span><br><span class="line">    <span class="attr">auth</span>: &#123;</span><br><span class="line">        <span class="attr">authority</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_ISSUER</span>,</span><br><span class="line">        <span class="attr">clientId</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_APP_ID</span>,</span><br><span class="line">        <span class="attr">redirectUri</span>: <span class="string">`<span class="subst">$&#123;location.protocol&#125;</span>//<span class="subst">$&#123;location.host&#125;</span>/callback`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">cache</span>: &#123;</span><br><span class="line">        <span class="attr">cacheLocation</span>: <span class="string">&quot;localStorage&quot;</span>,</span><br><span class="line">        <span class="attr">storeAuthStateInCookie</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="テストユーザー対応"><a href="#テストユーザー対応" class="headerlink" title="テストユーザー対応"></a>テストユーザー対応</h1><p>MSAL.jsを使うと、AzureADで認証してJWTトークンを作って返してくれます。それをそのままサーバーにも渡し、サーバー側でIDを取り出して使います。開発用モードを作るとして大幅なif分岐などは作りたくはないですよね？</p><ul><li>ダミーのJWTは作り、IDが分かるようにする</li><li>ただしAzureADの証明書での署名はできないので、署名の確認はサーバーではあきらめる</li></ul><p>AzureADのトークンを使う場合</p><p>今回は開発用のテストユーザーを環境変数から設定できるようにします。</p><figure class="highlight bash"><figcaption><span>.env.development</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_AZURE_DUMMY_USER=dummy-user@example.com</span><br></pre></td></tr></table></figure><p>ブラウザ上でダミーのJWTを作るためにjoseパッケージを使います。これはブラウザで使えますが、npmパッケージのほとんどはNode.jsの機能を使っていてブラウザで使えないものが多かったです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install jose</span><br></pre></td></tr></table></figure><p>前回と違うところを主にサンプルとして提示しています。</p><p>ログインではダミーユーザーがあるかどうかで条件判断を行い、ダミーユーザーがいたらJWTを作って返しています。内容はだいたいAzureADが作っているものに似せるようにはしています（完全ではない）。</p><p>AzureADのトークンはsubではUUIDのようなコードが入っています。おそらくサーバー側でログインしたユーザーのIDをもとに権限管理をしたりするのであれば、<code>preferred_username</code>に入っているメールアドレスを使うことになるんじゃないかと思います。AzureAD側の設定でIDトークンに入れるクレームを増やして、<code>email</code>クレームを足したりもできるようです。</p><figure class="highlight ts"><figcaption><span>authPlugin</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 追加</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UnsecuredJWT</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;jose&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前回はaccessTokenだったがidTokenに変更</span></span><br><span class="line"><span class="keyword">let</span> idToken = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前回のloginメソッドの修正</span></span><br><span class="line"><span class="keyword">async</span> login () &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_DUMMY_USER</span>) &#123; <span class="comment">// ダミーユーザーモード</span></span><br><span class="line">    <span class="keyword">const</span> jwt = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">UnsecuredJWT</span>(&#123;</span><br><span class="line">      <span class="attr">idp</span>: <span class="string">&#x27;https://sts.windows.net/....&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Dummy User(ダミー ユーザー)&#x27;</span>,</span><br><span class="line">      <span class="attr">preferred_username</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_DUMMY_USER</span>,</span><br><span class="line">      <span class="attr">sub</span>: <span class="title function_">btoa</span>(process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_DUMMY_USER</span>), <span class="comment">// ナチュラルキーっぽくする</span></span><br><span class="line">      <span class="attr">ver</span>: <span class="string">&#x27;2.0&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">      .<span class="title function_">setIssuer</span>(<span class="string">`<span class="subst">$&#123;process.env.VUE_APP_AZURE_ISSUER&#125;</span>/v2.0`</span>)</span><br><span class="line">      .<span class="title function_">setAudience</span>(process.<span class="property">env</span>.<span class="property">VUE_APP_AZURE_APP_ID</span>)</span><br><span class="line">      .<span class="title function_">setIssuedAt</span>()</span><br><span class="line">      .<span class="title function_">setExpirationTime</span>(<span class="string">&#x27;1h&#x27;</span>)</span><br><span class="line">      .<span class="title function_">setNotBefore</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() / <span class="number">1000</span>)</span><br><span class="line">      .<span class="title function_">encode</span>()</span><br><span class="line">    idToken = jwt</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 本番モード</span></span><br><span class="line">    <span class="keyword">if</span> (_auth.<span class="title function_">getAllAccounts</span>().<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      _auth.<span class="title function_">setActiveAccount</span>(_auth.<span class="title function_">getAllAccounts</span>()[<span class="number">0</span>])</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> _auth.<span class="title function_">acquireTokenSilent</span>(&#123;</span><br><span class="line">        <span class="attr">scopes</span>: [<span class="string">`<span class="subst">$&#123;process.env.VUE_APP_AZURE_APP_ID&#125;</span>/.default`</span>],</span><br><span class="line">        <span class="attr">redirectUri</span>: config.<span class="property">auth</span>.<span class="property">redirectUri</span></span><br><span class="line">      &#125;)</span><br><span class="line">      idToken = result.<span class="property">idToken</span></span><br><span class="line">      <span class="keyword">return</span> idToken</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _auth.<span class="title function_">acquireTokenRedirect</span>(&#123;</span><br><span class="line">        <span class="attr">redirectStartPage</span>: location.<span class="property">href</span>,</span><br><span class="line">        <span class="attr">scopes</span>: [<span class="string">`<span class="subst">$&#123;process.env.VUE_APP_AZURE_APP_ID&#125;</span>/.default`</span>],</span><br><span class="line">        <span class="attr">redirectUri</span>: config.<span class="property">auth</span>.<span class="property">redirectUri</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!process.<span class="property">env</span>.<span class="property">AZURE_DUMMY_USER</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _auth.<span class="title function_">logoutRedirect</span>(&#123;</span><br><span class="line">      <span class="attr">postLogoutRedirectUri</span>: <span class="string">`<span class="subst">$&#123;location.protocol&#125;</span>//<span class="subst">$&#123;location.host&#125;</span>/`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで、AzureADがあるふりをしてそれっぽいIDトークンを作って返すコードができました。</p><p>サーバー側ではリクエストを受けるときにこのトークンを受けることになります。サーバー側も環境変数で少し動作をコントロールして、テストモードの時には署名の検証は行わない必要がありますが、expiration time(exp)、not before(nbf)、aud、issといったクレームを使った検証は可能です。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ログインが必要なサービスで、開発時にログイン回りをどう処理すればいいのか、というのはいつも悩むポイントです。いろんなログイン方式が使えるサーバーであればID&#x2F;パスワードでログインする機構を別に作ったり、本番同等の認証サーバーを立てて、テストユーザーを入れるなどもあるでしょう。ですが、外部システムへの依存があると結合テストやCIがやりにくくなったりもしますし、処理時間も伸びてしまいます。あと、せっかくMSAL.jsを使えば認証の組み込みが簡単なのに、認証回り以外にたくさんのif文が入るのもうれしくありません。</p><p>今回はテスト用にAzureADのログインをバイパスしダミーのJWTを作るという方向で実装しました。比較的影響範囲をログイン回りに閉じ込めつつ実装できたんじゃないかな、と思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20221220a/azuread.jpg&quot; alt=&quot;&quot; width=&quot;700&quot;</summary>
        
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="Azure" scheme="https://future-architect.github.io/tags/Azure/"/>
    
    <category term="MSAL.js" scheme="https://future-architect.github.io/tags/MSAL-js/"/>
    
    <category term="AzureAD" scheme="https://future-architect.github.io/tags/AzureAD/"/>
    
  </entry>
  
  <entry>
    <title>tree-sitter文法入門</title>
    <link href="https://future-architect.github.io/articles/20221215a/"/>
    <id>https://future-architect.github.io/articles/20221215a/</id>
    <published>2022-12-14T15:00:00.000Z</published>
    <updated>2022-12-15T07:54:57.757Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20221215a/tree-sitter-small.png" alt="" width="400" height="400"><p>こちらは<a href="https://qiita.com/advent-calendar/2022/postgresql">PostgreSQL Advent Calendar 2022</a> カレンダー2枚目・15日目の投稿となります。<br>前回は、<a href="https://qiita.com/hmatsu47">@hmatsu47</a>さんの<a href="https://qiita.com/hmatsu47/items/8de48e81a660eabe4bf0">Supabase で TCE（透過的列暗号化）を軽く試してみた</a>でした。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、フューチャーでアルバイトをしている齋藤です。以前は同社のインターンでSQLフォーマッタを作成していました(<a href="/articles/20220916b/">記事</a>)。現在はインターン中に作成していたSQLフォーマッタをPostgreSQLの構文に対応させる作業に取り組んでいます。</p><p>このフォーマッタではSQLパーサにtree-sitter-sqlを利用していますが、対応していない構文がいくつか存在します。本記事では、未対応の構文であるBETWEEN述語を例に、tree-sitterの構文拡張の手順を紹介します。開発中のSQLフォーマッタはOSS公開予定ですので、ぜひ仲間を増やしたいという思いから記事にしました。</p><p>また、現在作成中のフォーマッタのVSCode拡張機能化にも取り組んでいます。ぜひそちらも併せてご覧ください！</p><p>VSCode拡張機能化に関する記事:</p><ol><li><a href="/articles/20221124a/">Language Server Protocolを用いたVSCode拡張機能開発 (前編) | フューチャー技術ブログ</a></li><li><a href="/articles/20221125a/">Language Server Protocolを用いたVSCode拡張機能開発 (後編) | フューチャー技術ブログ</a></li></ol><h1 id="アウトライン"><a href="#アウトライン" class="headerlink" title="アウトライン"></a>アウトライン</h1><p>本記事のアウトラインは以下の通りです。</p><ol><li>tree-sitter、tree-sitter-sqlについて</li><li>tree-sitterの構文拡張用の環境構築</li><li>構文木を出力するプログラムの実装</li><li>構文についての説明</li><li>BETWEEN述語の規則を追加</li></ol><h1 id="tree-sitter"><a href="#tree-sitter" class="headerlink" title="tree-sitter"></a>tree-sitter</h1><p><a href="https://tree-sitter.github.io/tree-sitter/">tree-sitter</a>は文法からパーサ(構文解析器)を自動生成するパーサジェネレータツールであり、生成されたパーサで構文解析を行うライブラリでもあります。特徴として、一般的なパーサライブラリでは抽象構文木(AST)を構築するのに対し、tree-sitterで生成されたパーサは具象構文木(CST)を構築するという点があげられます。CSTについては<a href="/articles/20220916c/#:~:text=AST%E3%81%8C%E6%84%8F%E5%91%B3%E3%81%AE%E3%81%AA%E3%81%84%E6%83%85%E5%A0%B1(%E4%BE%8B:%20%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%82%84%E5%A4%9A%E9%87%8D%E6%8B%AC%E5%BC%A7%E3%81%AA%E3%81%A9)%E3%82%92%E4%BF%9D%E6%8C%81%E3%81%97%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E3%80%81CST%E3%81%AF%E3%81%9D%E3%81%AE%E3%82%88%E3%81%86%E3%81%AA%E6%83%85%E5%A0%B1%E3%82%82%E4%BF%9D%E6%8C%81%E3%81%97%E3%81%BE%E3%81%99%E3%80%82">インターンの記事</a>で取り上げています。</p><p>構築されるCSTにはコメントトークンも含まれてるため、シンタックスハイライトに用いられているようです。<br>参考:</p><ul><li><a href="https://www.soum.co.jp/misc/vim-advanced/6/">Vimのすゝめ改 - Tree-sitter について | 株式会社創夢 — SOUM&#x2F;misc</a></li><li><a href="https://zenn.dev/hyakt/articles/6ff892c2edbabb">EmacsでTree-sitterを利用してシンタックスハイライトできるようにする</a></li></ul><h1 id="tree-sitter-sql"><a href="#tree-sitter-sql" class="headerlink" title="tree-sitter-sql"></a>tree-sitter-sql</h1><p><a href="https://github.com/m-novikov/tree-sitter-sql">tree-sitter-sql</a>はtree-sitter用に書かれたSQLの文法とその文法によって生成されたパーサライブラリです。SQLの中でも、PostgreSQLにフォーカスしていたようです。インターンで作成したフォーマッタは、このライブラリによる構文解析結果をもちいてSQLのフォーマットを行っています。</p><p>しかし、BETWEEN述語や<code>UNION</code>、<code>INTERSECT</code>などの結合演算など、基本的な構文であるにもかかわらず、対応していない構文が存在します。本記事では、その中でもBETWEEN述語に対応させるための構文拡張を行います。</p><h1 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h1><p>まず、tree-sitterの構文拡張のために行った環境構築について説明します。</p><h3 id="tree-sitter-cliのインストール"><a href="#tree-sitter-cliのインストール" class="headerlink" title="tree-sitter-cliのインストール"></a>tree-sitter-cliのインストール</h3><p>tree-sitterでパーサを生成するために、tree-sitter-cliをインストールします(参考<a href="https://tree-sitter.github.io/tree-sitter/creating-parsers#getting-started">Tree-sitter | Creating Parser</a>)。また、tree-sitterによるパーサを開発するためには、Node.jsとCコンパイラが必要です。今回使用したバージョンは以下の通りです。</p><div class="scroll"><table><thead><tr><th>tools</th><th>バージョン</th></tr></thead><tbody><tr><td>node</td><td>16.17.1</td></tr><tr><td>gcc</td><td>12.2.0</td></tr><tr><td>tree-sitter</td><td>0.20.7</td></tr></tbody></table></div><h3 id="tree-sitter-sqlのインストール"><a href="#tree-sitter-sqlのインストール" class="headerlink" title="tree-sitter-sqlのインストール"></a>tree-sitter-sqlのインストール</h3><p><a href="https://github.com/m-novikov/tree-sitter-sql">tree-sitter-sql</a>をcloneします。tree-sitter用のSQL構文はいくつかありますが、今回は最もスター数が多いものを選択しました。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/m-novikov/tree-sitter-sql.git</span></span><br></pre></td></tr></table></figure><p><code>git clone</code>を行うと、以下のようなエラーが発生する場合があります。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: unable to create file [filepath]: Filename too long</span><br></pre></td></tr></table></figure><p>これはファイル名が長すぎることが問題であるようなので、以下の設定を行うことで解決します。</p><figure class="highlight console"><figcaption><span>gitの設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.longpaths <span class="literal">true</span></span></span><br></pre></td></tr></table></figure><p><code>git clone</code> したtree-sitter-sqlのルートディレクトリで、<code>tree-sitter test</code> コマンドでテストが動作したら環境構築終了です。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ./tree-sitter-sql</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree-sitter <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><h3 id="構文解析例"><a href="#構文解析例" class="headerlink" title="構文解析例"></a>構文解析例</h3><p>実際にパースしてみましょう。以下のファイルを用意します。</p><figure class="highlight sql"><figcaption><span>exapmles/simple.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT</span><br></pre></td></tr></table></figure><p><code>tree-sitter parse</code>コマンドで、ソースファイルをパースすることができます。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ tree-sitter parse ./exapmles/simple.sql</span><br><span class="line">(<span class="name">source_file</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]</span><br><span class="line">  (<span class="name">select_statement</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]</span><br><span class="line">    (<span class="name">select_clause</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>]</span><br><span class="line">      (<span class="name">select_clause_body</span> [<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>]</span><br><span class="line">        (<span class="name">identifier</span> [<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>])))</span><br><span class="line">    (<span class="name">from_clause</span> [<span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]</span><br><span class="line">      (<span class="name">identifier</span> [<span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]))))</span><br></pre></td></tr></table></figure><h1 id="CSTの出力について"><a href="#CSTの出力について" class="headerlink" title="CSTの出力について"></a>CSTの出力について</h1><p>上述した<code>tree-sitter parse</code>により出力される結果では、ノードのラベルのみ表示されており、識別子やキーワードなどが表示されません。そこで、パース結果からCSTを出力する処理を自作しました。</p><p>言語にはRustを使用します。</p><h3 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h3><p><code>tree-sitter-sql</code>の結果を利用してCSTを出力するためのプロジェクトを作成します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new print-cst</span><br></pre></td></tr></table></figure><p><code>Cargo.toml</code>に次の依存関係を追加します。</p><figure class="highlight toml"><figcaption><span>print-cst/Cargo.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">tree-sitter</span> = <span class="string">&quot;~0.20.3&quot;</span></span><br><span class="line"><span class="attr">tree-sitter-sql</span> = &#123;path = <span class="string">&quot;&#123;tree-sitter-sqlのパス&#125;&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>また、Github上のtree-sitter-sqlが使用しているtree-sitterのバージョンが古い(2022年11月22日現在)ため、tree-sitter-cliとtree-sitterのバージョン不整合が生じる可能性があります。バージョン不整合が生じるとき、後述するプログラムを実行すると以下のような実行時エラーが発生します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thread &#x27;main&#x27; panicked at &#x27;called `Result::unwrap()` on an `Err` value: LanguageError &#123; version: 14 &#125;&#x27;, src\lib.rs:16:35</span><br><span class="line">note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace</span><br></pre></td></tr></table></figure><p>この場合、tree-sitter-sqlの<code>Cargo.toml</code>も修正する必要があります。</p><figure class="highlight toml"><figcaption><span>tree-sitter-sql/Cargo.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">tree-sitter</span> = <span class="string">&quot;~0.20.3&quot;</span></span><br></pre></td></tr></table></figure><h3 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h3><p><code>main.rs</code>に次のように実装しました。</p><figure class="highlight rust"><figcaption><span>main.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::read_to_string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> tree_sitter::TreeCursor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">language</span> = tree_sitter_sql::<span class="title function_ invoke__">language</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">parser</span> = tree_sitter::Parser::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    parser.<span class="title function_ invoke__">set_language</span>(language).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">src_file</span> = std::env::<span class="title function_ invoke__">args</span>().<span class="title function_ invoke__">nth</span>(<span class="number">1</span>).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;arguments error&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">src</span> = <span class="title function_ invoke__">read_to_string</span>(&amp;src_file).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tree</span> = parser.<span class="title function_ invoke__">parse</span>(&amp;src, <span class="literal">None</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">if</span> tree.<span class="title function_ invoke__">root_node</span>().<span class="title function_ invoke__">has_error</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">cursor</span> = tree.<span class="title function_ invoke__">walk</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">visit</span>(&amp;<span class="keyword">mut</span> cursor, <span class="number">0</span>, &amp;src);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UNIT: <span class="type">usize</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">visit</span>(cursor: &amp;<span class="keyword">mut</span> TreeCursor, depth: <span class="type">usize</span>, src: &amp;<span class="type">str</span>) &#123;</span><br><span class="line">    <span class="comment">// インデント</span></span><br><span class="line">    (<span class="number">0</span>..(depth * UNIT)).<span class="title function_ invoke__">for_each</span>(|_| <span class="built_in">print!</span>(<span class="string">&quot; &quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">kind</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子供がいないかつ、キーワードでない場合、対応する文字列を表示</span></span><br><span class="line">    <span class="keyword">if</span> cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">child_count</span>() == <span class="number">0</span> &amp;&amp; cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">kind</span>().<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">any</span>(|c| c.<span class="title function_ invoke__">is_lowercase</span>()) &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot; \&quot;&#123;&#125;\&quot;&quot;</span>, cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">utf8_text</span>(src.<span class="title function_ invoke__">as_bytes</span>()).<span class="title function_ invoke__">unwrap</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">&quot; [&#123;&#125;-&#123;&#125;]&quot;</span>,</span><br><span class="line">        cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">start_position</span>(),</span><br><span class="line">        cursor.<span class="title function_ invoke__">node</span>().<span class="title function_ invoke__">end_position</span>()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子供を走査</span></span><br><span class="line">    <span class="keyword">if</span> cursor.<span class="title function_ invoke__">goto_first_child</span>() &#123;</span><br><span class="line">        <span class="title function_ invoke__">visit</span>(cursor, depth + <span class="number">1</span>, src);</span><br><span class="line">        <span class="keyword">while</span> cursor.<span class="title function_ invoke__">goto_next_sibling</span>() &#123;</span><br><span class="line">            <span class="title function_ invoke__">visit</span>(cursor, depth + <span class="number">1</span>, src);</span><br><span class="line">        &#125;</span><br><span class="line">        cursor.<span class="title function_ invoke__">goto_parent</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="実行例"><a href="#実行例" class="headerlink" title="実行例"></a>実行例</h3><p>作成したプログラムを用いて、実際にCSTを表示してみましょう。</p><figure class="highlight sql"><figcaption><span>exapmles/simple.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT</span><br></pre></td></tr></table></figure><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cargo run ./examples/simple.sql</span><br><span class="line">source_file [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">12</span>)]</span><br><span class="line">  select_statement [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">9</span>)]</span><br><span class="line">    select_clause [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">      SELECT [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">      select_clause_body [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">7</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">9</span>)]</span><br><span class="line">        identifier <span class="string">&quot;ID&quot;</span> [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">7</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">9</span>)]</span><br><span class="line">    from_clause [(<span class="number">1</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>)]</span><br><span class="line">      FROM [(<span class="number">1</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>)]</span><br><span class="line">      identifier <span class="string">&quot;STUDENT&quot;</span> [(<span class="number">1</span><span class="punctuation">,</span> <span class="number">5</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">12</span>)]</span><br></pre></td></tr></table></figure><p>ノードに対応する文字列とキーワードを出力することができました。</p><h1 id="構文例"><a href="#構文例" class="headerlink" title="構文例"></a>構文例</h1><p>次に、tree-sitter用の構文について簡単に紹介します。</p><p>tree-sitter では文法を <code>grammar.js</code> に記述します。clone した tree-sitter-sql のルートディレクトリにある <code>grammar.js</code>を編集していきます。ここではDSL(<a href="https://ja.wikipedia.org/wiki/%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%9B%BA%E6%9C%89%E8%A8%80%E8%AA%9E">ドメイン固有言語</a>)について細かくは説明しないので、詳しく知りたい方は<a href="https://tree-sitter.github.io/tree-sitter/creating-parsers#the-grammar-dsl">tree-sitterのドキュメント</a>を参照してください。</p><h3 id="規則"><a href="#規則" class="headerlink" title="規則"></a>規則</h3><p>例えば、tree-sitter-sql で WHERE句は以下のように記述されています(<a href="https://github.com/m-novikov/tree-sitter-sql/blob/218b672499729ef71e4d66a949e4a1614488aeaa/grammar.js#L909">where_clauseの定義</a>)。</p><figure class="highlight js"><figcaption><span>WHERE句の規則</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">where_clause</span>: $ =&gt; <span class="title function_">seq</span>(<span class="title function_">kw</span>(<span class="string">&quot;WHERE&quot;</span>), $._expression)</span><br></pre></td></tr></table></figure><p><code>seq</code>はtree-sitterの文法のDSLの一つで、複数の規則を連結することができます。上の例では、<code>kw(&quot;WHERE&quot;)</code>のあとに<code>$._expression</code>が現れることを示しています。</p><p><code>kw</code>関数はtree-sitter-sqlの<code>grammar.js</code>で定義されている関数で、キーワード(<code>k</code>ey<code>w</code>ord)が大文字か小文字であるかを考慮しなくするなどの処理を行います。パース時には、<code>where</code>や<code>WHERE</code>というキーワードとマッチします(<a href="https://github.com/m-novikov/tree-sitter-sql/blob/218b672499729ef71e4d66a949e4a1614488aeaa/grammar.js#L29">kw関数の定義</a>)。</p><h3 id="アンダースコアから始まる規則"><a href="#アンダースコアから始まる規則" class="headerlink" title="アンダースコアから始まる規則"></a>アンダースコアから始まる規則</h3><p>規則名の先頭の文字をアンダースコアから始めることで、生成されるCSTにノードとして出現させないように設定することができます(<a href="https://tree-sitter.github.io/tree-sitter/creating-parsers#hiding-rules">ドキュメント</a>)。例えば、算術演算や識別子、リテラルなどの式は<code>_expression</code>という名前で以下のように定義されています。</p><figure class="highlight js"><figcaption><span>式に対応する規則</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">_expression</span>: $ =&gt;</span><br><span class="line">     <span class="title function_">choice</span>(</span><br><span class="line">       $.string,</span><br><span class="line">       $.<span class="variable constant_">TRUE</span>,</span><br><span class="line">       $.<span class="variable constant_">FALSE</span>,</span><br><span class="line">       $.<span class="variable constant_">NULL</span>,</span><br><span class="line">       $._identifier,</span><br><span class="line">       $.number,</span><br><span class="line">       $.unary_expression,</span><br><span class="line">       <span class="comment">// 一部省略</span></span><br><span class="line">     ),</span><br></pre></td></tr></table></figure><p><code>choice</code>はtree-sitterのDSLで、引数のうちいずれか1つとマッチすることを意味しています。つまり、この規則は、文字列や<code>TRUE</code>、<code>FALSE</code>など各式に対応した規則を呼び出し、いずれか一つとマッチすることになります。つまり、ソースファイル中に式が現れるたびに<code>_expression</code>が呼び出されています。これがCST上に現れると、例えば<code>1+2-3</code>という式のパース結果が以下のようになってしまいます。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">_expression</span></span><br><span class="line">  (<span class="name">binary_expression</span></span><br><span class="line">    (<span class="name">_expression</span></span><br><span class="line">      (<span class="name">binary_expression</span></span><br><span class="line">        (<span class="name">_expression</span></span><br><span class="line">          (<span class="name">number</span> <span class="string">&quot;1&quot;</span>))</span><br><span class="line">        (<span class="string">&quot;+&quot;</span>)</span><br><span class="line">        (<span class="name">_expression</span></span><br><span class="line">          (<span class="name">number</span> <span class="string">&quot;2&quot;</span>)))</span><br><span class="line">    (<span class="string">&quot;-&quot;</span>)</span><br><span class="line">    (<span class="name">_expression</span></span><br><span class="line">      (<span class="name">number</span> <span class="string">&quot;3&quot;</span>))))</span><br></pre></td></tr></table></figure><p>アンダースコアから始めることで、CST上に現れないように設定でき、以下のようにシンプルな木にすることができます。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">binary_expression</span></span><br><span class="line">  (<span class="name">binary_expression</span></span><br><span class="line">    (<span class="name">number</span> <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    (<span class="string">&quot;+&quot;</span>)</span><br><span class="line">    (<span class="name">number</span> <span class="string">&quot;2&quot;</span>))</span><br><span class="line">  (<span class="string">&quot;-&quot;</span>)</span><br><span class="line">  (<span class="name">number</span> <span class="string">&quot;3))</span></span><br></pre></td></tr></table></figure><h3 id="優先度、結合性"><a href="#優先度、結合性" class="headerlink" title="優先度、結合性"></a>優先度、結合性</h3><p>ここで詳細は述べませんが、tree-sitterは明示しない場合、曖昧な文法を扱うことができません(<a href="https://tree-sitter.github.io/tree-sitter/creating-parsers#the-grammar-dsl:~:text=conflicts%20%2D%20an%20array,dynamic%20precedence.">参考</a>)。</p><p>例えば、以下のような論理式を考えてみます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">NOT</span> X <span class="keyword">AND</span> Y <span class="keyword">OR</span> Z</span><br></pre></td></tr></table></figure><p>この式はどのように解釈されるでしょうか？<code>NOT (X AND (Y OR Z))</code>や<code>(NOT X) AND (Y OR Z)</code>、<code>((NOT X) AND Y) OR Z</code>など、複数通りに解釈できてしまうと思います。このように、複数通りの解釈ができてしまうような文法を曖昧な文法といい、そのままではパースできません。</p><p>これは、優先度・結合性を文法に記述することで対処できます。tree-sitter-sqlでは優先度をJavascriptの定数として以下のように定義しています。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PREC</span> = &#123;</span><br><span class="line">  <span class="attr">primary</span>: <span class="number">8</span>,</span><br><span class="line">  <span class="attr">unary</span>: <span class="number">7</span>,             <span class="comment">// 単項演算子</span></span><br><span class="line">  <span class="attr">exp</span>: <span class="number">6</span>,               <span class="comment">// 累乗</span></span><br><span class="line">  <span class="attr">multiplicative</span>: <span class="number">5</span>,    <span class="comment">// 乗除算</span></span><br><span class="line">  <span class="attr">additive</span>: <span class="number">4</span>,          <span class="comment">// 加減算</span></span><br><span class="line">  <span class="attr">comparative</span>: <span class="number">3</span>,       <span class="comment">// 比較演算子</span></span><br><span class="line">  <span class="attr">and</span>: <span class="number">2</span>,               <span class="comment">// AND</span></span><br><span class="line">  <span class="attr">or</span>: <span class="number">1</span>,                <span class="comment">// OR</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>これを用いて、論理式に優先度・結合性を加えて記述した規則は次のようになります。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">boolean_expression</span>: $ =&gt;</span><br><span class="line">  <span class="title function_">choice</span>(</span><br><span class="line">    prec.<span class="title function_">left</span>(<span class="variable constant_">PREC</span>.<span class="property">unary</span>, <span class="title function_">seq</span>(<span class="title function_">kw</span>(<span class="string">&quot;NOT&quot;</span>), $._expression)), <span class="comment">// 優先度7</span></span><br><span class="line">    prec.<span class="title function_">left</span>(<span class="variable constant_">PREC</span>.<span class="property">and</span>, <span class="title function_">seq</span>($._expression, <span class="title function_">kw</span>(<span class="string">&quot;AND&quot;</span>), $._expression)),  <span class="comment">// 優先度2</span></span><br><span class="line">    prec.<span class="title function_">left</span>(<span class="variable constant_">PREC</span>.<span class="property">or</span>, <span class="title function_">seq</span>($._expression, <span class="title function_">kw</span>(<span class="string">&quot;OR&quot;</span>), $._expression)), <span class="comment">// 優先度1</span></span><br><span class="line">  ),</span><br></pre></td></tr></table></figure><p>優先度は、<code>NOT &gt; AND &gt; OR</code>になっています。優先度が高いものほど優先して結合されるため、上述の論理式をtree-sitter-sqlでパースすると、<code>((NOT X) AND Y) OR Z</code>と解釈されます。なお、<code>prec.left</code>は左結合であることを意味しています。</p><h3 id="extras"><a href="#extras" class="headerlink" title="extras"></a>extras</h3><p>ファイルのどこに現れてもよい規則をextrasで記述することができます。<br>これを使って、コメントや空白、改行を簡単に記述することができます(<a href="https://github.com/m-novikov/tree-sitter-sql/blob/218b672499729ef71e4d66a949e4a1614488aeaa/grammar.js#L75">コメント、空白の定義</a>)が、CST上では直感的でない場所位置に現れる場合もあります(<a href="https://future-architect.github.io/articles/20220916c/#:~:text=%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E6%83%85%E5%A0%B1%E3%81%AFCST%E4%B8%8A%E3%81%AB%E4%BF%9D%E6%8C%81%E3%81%95%E3%82%8C%E3%81%BE%E3%81%99%E3%81%8C%E3%80%81%E7%9B%B4%E6%84%9F%E7%9A%84%E3%81%A7%E3%81%AA%E3%81%84%E4%BD%8D%E7%BD%AE%E3%81%AB%E7%8F%BE%E3%82%8C%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86%E5%A0%B4%E5%90%88%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82">インターンの記事後編</a>参照)。</p><h1 id="BETWEEN述語への対応"><a href="#BETWEEN述語への対応" class="headerlink" title="BETWEEN述語への対応"></a>BETWEEN述語への対応</h1><p>現状のtree-sitter-sqlを使用して、<code>BETWEEN</code>を含むSQLをパースできるか確認してみましょう。以下のようなファイルを用意します。</p><figure class="highlight sql"><figcaption><span>examples/between.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    GRADE   <span class="keyword">BETWEEN</span> <span class="number">80</span>  <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">AND</span> ID      <span class="keyword">BETWEEN</span> <span class="number">0</span>   <span class="keyword">AND</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ tree-sitter parse .<span class="character">\e</span>xamples<span class="character">\b</span>etween.sql</span><br><span class="line">(<span class="name">source_file</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">7</span><span class="punctuation">,</span> <span class="number">0</span>]</span><br><span class="line">  (<span class="name">select_statement</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>]</span><br><span class="line">    (<span class="name">select_clause</span> [<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>]</span><br><span class="line">      (<span class="name">select_clause_body</span> [<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>]</span><br><span class="line">        (<span class="name">identifier</span> [<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>])))</span><br><span class="line">    (<span class="name">from_clause</span> [<span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]</span><br><span class="line">      (<span class="name">identifier</span> [<span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>]))</span><br><span class="line">    (<span class="name">where_clause</span> [<span class="number">4</span><span class="punctuation">,</span> <span class="number">0</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>]</span><br><span class="line">      (<span class="name">boolean_expression</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>]</span><br><span class="line">        (<span class="name">boolean_expression</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">6</span>]</span><br><span class="line">          (<span class="name">boolean_expression</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">5</span><span class="punctuation">,</span> <span class="number">31</span>]</span><br><span class="line">            (<span class="name">identifier</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">5</span><span class="punctuation">,</span> <span class="number">9</span>])</span><br><span class="line">            (<span class="name">ERROR</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">12</span>] - [<span class="number">5</span><span class="punctuation">,</span> <span class="number">22</span>])</span><br><span class="line">            (<span class="name">number</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">28</span>] - [<span class="number">5</span><span class="punctuation">,</span> <span class="number">31</span>]))</span><br><span class="line">          (<span class="name">identifier</span> [<span class="number">6</span><span class="punctuation">,</span> <span class="number">4</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">6</span>]))</span><br><span class="line">        (<span class="name">ERROR</span> [<span class="number">6</span><span class="punctuation">,</span> <span class="number">12</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">21</span>])</span><br><span class="line">        (<span class="name">number</span> [<span class="number">6</span><span class="punctuation">,</span> <span class="number">28</span>] - [<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>])))))</span><br><span class="line">.<span class="character">\e</span>xamples<span class="character">\b</span>etween.sql  <span class="number">0</span> ms    (<span class="name">ERROR</span> [<span class="number">5</span><span class="punctuation">,</span> <span class="number">12</span>] - [<span class="number">5</span><span class="punctuation">,</span> <span class="number">22</span>])</span><br></pre></td></tr></table></figure><p>構文エラーが発生し、WHERE句内のBETWEEN述語には対応していないことがわかります。<a href="https://github.com/m-novikov/tree-sitter-sql/blob/218b672499729ef71e4d66a949e4a1614488aeaa/grammar.js#L1071">grammar.jsを見てみるとBETWEENというキーワードはWINDOW関数のFRAME句にしか想定していない</a>ため、BETWEENがERRORノードと扱われているようです。</p><h3 id="規則の追加"><a href="#規則の追加" class="headerlink" title="規則の追加"></a>規則の追加</h3><p>BETWEEN述語に対応する規則がそもそも存在していないことがわかったため、文法を拡張することで対応していきます。</p><p>BETWEEN述語は次のような構文になっています。<a href="https://www.postgresql.jp/document/14/html/functions-comparison.html">PostgreSQLのドキュメント</a>では構文について詳しく書かれていなかったので、<a href="https://docs.oracle.com/cd/E57425_01/121/SQLRF/conditions012.htm#sthref1111">Oracle SQLのドキュメント</a>を参考にしました。</p><figure class="highlight sql"><figcaption><span>BETWEEN述語の構文</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(expression) (<span class="keyword">NOT</span>)? <span class="keyword">BETWEEN</span> (expression) <span class="keyword">AND</span> (expression)</span><br></pre></td></tr></table></figure><p>なお、<code>(NOT)?</code> は正規表現で使われる <code>?</code> と同じ意味で、 <code>NOT</code> が0回または1回現れることを表現しています。tree-sitterの構文では、<code>optional</code>というDSLで表現されます。</p><p>率直にDSLに直すと、次のような規則が書けます。</p><figure class="highlight js"><figcaption><span>率直に書いたBETWEENの規則</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">between_and_expression</span>: $ =&gt;</span><br><span class="line">  <span class="title function_">seq</span>($._expression, <span class="title function_">optional</span>(<span class="title function_">kw</span>(<span class="string">&quot;NOT&quot;</span>)), <span class="title function_">kw</span>(<span class="string">&quot;BETWEEN&quot;</span>),</span><br><span class="line">      $._expression, <span class="title function_">kw</span>(<span class="string">&quot;AND&quot;</span>), $._expression)</span><br></pre></td></tr></table></figure><p>この規則をSQLの式に対応する規則<code>_expression</code>に追加します。</p><figure class="highlight diff"><figcaption><span>_expressionへの追加</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    _expression: $ =&gt;</span><br><span class="line">      choice(</span><br><span class="line">        $.string,</span><br><span class="line">        $.TRUE,</span><br><span class="line">        $.FALSE,</span><br><span class="line">        // 省略</span><br><span class="line"><span class="addition">+       $.between_and_expression,</span></span><br><span class="line">      ),</span><br></pre></td></tr></table></figure><p>これでBETWEEN述語の規則を追加することができました。拡張した文法をもとにパーサを生成してみましょう。以下のコマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ tree-sitter generate</span><br><span class="line">Unresolved conflict <span class="keyword">for</span> symbol sequence:</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;grant_statement_token4&#x27;</span>  _expression  <span class="string">&#x27;create_trigger_statement_token1&#x27;</span>  _expression  •  <span class="string">&#x27;cte_token2&#x27;</span>  …</span><br><span class="line"></span><br><span class="line">Possible interpretations:</span><br><span class="line"></span><br><span class="line">  1:  <span class="string">&#x27;grant_statement_token4&#x27;</span>  (boolean_expression  _expression  <span class="string">&#x27;create_trigger_statement_token1&#x27;</span>  _expression)  •  <span class="string">&#x27;cte_token2&#x27;</span>  …</span><br><span class="line">                                                            (precedence: 1, associativity: Left)</span><br><span class="line">  2:  <span class="string">&#x27;grant_statement_token4&#x27;</span>  _expression  <span class="string">&#x27;create_trigger_statement_token1&#x27;</span>  (between_and_expression  _expression  •  <span class="string">&#x27;cte_token2&#x27;</span>  <span class="string">&#x27;frame_clause_token1&#x27;</span>  _expression  <span class="string">&#x27;frame_clause_token2&#x27;</span>  _expression)</span><br><span class="line">  3:  <span class="string">&#x27;grant_statement_token4&#x27;</span>  _expression  <span class="string">&#x27;create_trigger_statement_token1&#x27;</span>  (in_expression  _expression  •  <span class="string">&#x27;cte_token2&#x27;</span>  <span class="string">&#x27;create_function_parameter_token1&#x27;</span>  tuple)                                        (precedence: 3, associativity: Left)</span><br><span class="line"></span><br><span class="line">Possible resolutions:</span><br><span class="line"></span><br><span class="line">  1:  Specify a higher precedence <span class="keyword">in</span> `in_expression` and `between_and_expression` than <span class="keyword">in</span> the other rules.</span><br><span class="line">  2:  Specify a higher precedence <span class="keyword">in</span> `boolean_expression` than <span class="keyword">in</span> the other rules.</span><br><span class="line">  3:  Add a conflict <span class="keyword">for</span> these rules: `in_expression`, `between_and_expression`, `boolean_expression`</span><br></pre></td></tr></table></figure><p>エラーが発生してしまい、パーサが生成できませんでした。これは、上述した規則では優先度を記述していないため、文法が曖昧になってしまっていることが原因です。例えば、<code>X BETWEEN Y AND Z AND W</code>の<code>AND</code>がBETWEEN述語のものなのか、論理式のものなのかをパーサが自動で判別することができません。つまり、<code>X BETWEEN (Y AND Z) AND W</code>や<code>(X BETWEEN Y AND Z) AND W</code>など、複数の解釈ができてしまいます。</p><p>そこで、優先度と結合性を追加します。</p><figure class="highlight javascript"><figcaption><span>優先度と結合性を追加したBETWEENの規則</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">between_and_expression</span>: $ =&gt;</span><br><span class="line">  prec.<span class="title function_">left</span>(</span><br><span class="line">    <span class="variable constant_">PREC</span>.<span class="property">comparative</span>,</span><br><span class="line">    <span class="title function_">seq</span>($._expression, <span class="title function_">optional</span>(<span class="title function_">kw</span>(<span class="string">&quot;NOT&quot;</span>)), <span class="title function_">kw</span>(<span class="string">&quot;BETWEEN&quot;</span>),</span><br><span class="line">        $._expression, <span class="title function_">kw</span>(<span class="string">&quot;AND&quot;</span>), $._expression)</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure><p><code>prec.left</code>は左結合であることを示し、<code>PREC.comparative</code>で比較演算子と同じ優先度であることを指定しています。比較演算子は<code>AND</code>よりも高い優先度であるため、<code>X BETWEEN Y AND Z AND W</code>は<code>(X BETWEEN Y AND Z) AND W</code>と解釈されます。</p><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>次のファイルをパースしてみましょう。</p><figure class="highlight sql"><figcaption><span>examples/between.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    GRADE   <span class="keyword">BETWEEN</span> <span class="number">80</span>  <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">AND</span> ID      <span class="keyword">BETWEEN</span> <span class="number">0</span>   <span class="keyword">AND</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><p>以下のコマンドでパーサを生成します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree-sitter generate</span></span><br></pre></td></tr></table></figure><p>先ほど作成した <code>print-cst</code>を用いて、パース結果を出力します。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ cd [print-cstのパス]</span><br><span class="line">$ cargo run ./examples/between.sql</span><br><span class="line">source_file [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>)]</span><br><span class="line">  select_statement [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">    select_clause [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">      SELECT [(<span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">0</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">      select_clause_body [(<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">        identifier <span class="string">&quot;ID&quot;</span> [(<span class="number">1</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">1</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">    from_clause [(<span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span>)]</span><br><span class="line">      FROM [(<span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span>)]</span><br><span class="line">      identifier <span class="string">&quot;STUDENT&quot;</span> [(<span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">3</span><span class="punctuation">,</span> <span class="number">11</span>)]</span><br><span class="line">    where_clause [(<span class="number">4</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span>)]</span><br><span class="line">      WHERE [(<span class="number">4</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span>)]</span><br><span class="line">      boolean_expression [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">31</span>)]</span><br><span class="line">        between_and_expression [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">9</span>)]</span><br><span class="line">          identifier <span class="string">&quot;GRADE&quot;</span> [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">9</span>)]</span><br><span class="line">          BETWEEN [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">12</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">19</span>)]</span><br><span class="line">          number <span class="string">&quot;80&quot;</span> [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">20</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">22</span>)]</span><br><span class="line">          AND [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">24</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">27</span>)]</span><br><span class="line">          number <span class="string">&quot;100&quot;</span> [(<span class="number">5</span><span class="punctuation">,</span> <span class="number">28</span>)-(<span class="number">5</span><span class="punctuation">,</span> <span class="number">31</span>)]</span><br><span class="line">        AND [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">0</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">3</span>)]</span><br><span class="line">        between_and_expression [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">          identifier <span class="string">&quot;ID&quot;</span> [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">4</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">6</span>)]</span><br><span class="line">          BETWEEN [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">12</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">19</span>)]</span><br><span class="line">          number <span class="string">&quot;0&quot;</span> [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">20</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">21</span>)]</span><br><span class="line">          AND [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">24</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">27</span>)]</span><br><span class="line">          number <span class="string">&quot;100&quot;</span> [(<span class="number">6</span><span class="punctuation">,</span> <span class="number">28</span>)-(<span class="number">6</span><span class="punctuation">,</span> <span class="number">31</span>)]</span><br></pre></td></tr></table></figure><p>これで<code>BETWEEN</code>を含むSQLがパースできるようになりました！</p><h3 id="テストの追加"><a href="#テストの追加" class="headerlink" title="テストの追加"></a>テストの追加</h3><p>最後に、今回追加したBETWEEN述語の拡張を<code>tree-sitter test</code>(<a href="https://tree-sitter.github.io/tree-sitter/creating-parsers#command-test">Tree-sitter｜Creating Parsers</a>)でテストできるようにしましょう。</p><p><code>test/corpus/between.txt</code>を作成して、以下のように記述します。</p><figure class="highlight sql"><figcaption><span>test/corpus/between.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="keyword">BETWEEN</span> predicates</span><br><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    GRADE   <span class="keyword">BETWEEN</span> <span class="number">80</span>  <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">AND</span> ID      <span class="keyword">BETWEEN</span> <span class="number">0</span>   <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---------------------------------------</span></span><br><span class="line"></span><br><span class="line">(source_file</span><br><span class="line">  (select_statement</span><br><span class="line">    (select_clause</span><br><span class="line">      (select_clause_body</span><br><span class="line">        (identifier)))</span><br><span class="line">    (from_clause</span><br><span class="line">      (identifier))</span><br><span class="line">    (where_clause</span><br><span class="line">      (boolean_expression</span><br><span class="line">        (between_and_expression</span><br><span class="line">          (identifier)</span><br><span class="line">          (number)</span><br><span class="line">          (number))</span><br><span class="line">        (between_and_expression</span><br><span class="line">          (identifier)</span><br><span class="line">          (number)</span><br><span class="line">          (number))))))</span><br></pre></td></tr></table></figure><ul><li><code>=</code>で囲まれた行にテスト名を書きます</li><li>次に、入力として与えるソースコードを記述し、下に<code>---</code>を記述します</li><li>最後に期待する結果をS式で記述します</li></ul><p><code>tree-sitter test</code>でテストを行います。<code>-f</code>フラグを加えることで、特定のテストのみを実行することができます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ tree-sitter <span class="built_in">test</span> -f <span class="string">&#x27;BETWEEN predicates&#x27;</span></span><br><span class="line">  between:</span><br><span class="line">    ✓ BETWEEN predicates</span><br><span class="line">  create:</span><br><span class="line">  delete:</span><br><span class="line">  insert:</span><br><span class="line">  select:</span><br><span class="line">  statements:</span><br><span class="line">  update:</span><br><span class="line">syntax highlighting:</span><br><span class="line">  ✓ builtin.sql (49 assertions)</span><br><span class="line">  ✓ function.sql (16 assertions)</span><br><span class="line">  ✓ insert.sql (6 assertions)</span><br><span class="line">  ✓ keywords.sql (9 assertions)</span><br><span class="line">  ✓ punctuation.sql (2 assertions)</span><br><span class="line">  ✓ select.sql (43 assertions)</span><br><span class="line">  ✓ statements.sql (25 assertions)</span><br><span class="line">  ✓ table.sql (33 assertions)</span><br><span class="line">  ✓ type.sql (5 assertions)</span><br><span class="line">  ✓ update.sql (10 assertions)</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>本記事では、tree-sitter-sqlでBETWEEN述語を扱えるように構文拡張を行いました。tree-sitter用のSQL構文はまだまだ未完成なので、皆さんも一緒によりよいパーサを作ってみませんか？</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20221215a/tree-sitter-small.png&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;

&lt;p&gt;こちらは&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
    <category term="フォーマッター" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%82%BF%E3%83%BC/"/>
    
    <category term="構文解析" scheme="https://future-architect.github.io/tags/%E6%A7%8B%E6%96%87%E8%A7%A3%E6%9E%90/"/>
    
    <category term="tree-sitter" scheme="https://future-architect.github.io/tags/tree-sitter/"/>
    
  </entry>
  
</feed>
