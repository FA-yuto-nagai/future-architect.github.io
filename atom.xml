<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  <icon>https://future-architect.github.io/feed_icon.png</icon>
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2023-07-25T01:19:25.541Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>フューチャーのSwagger（OpenAPI 2.0）規約の紹介</title>
    <link href="https://future-architect.github.io/articles/20230725a/"/>
    <id>https://future-architect.github.io/articles/20230725a/</id>
    <published>2023-07-24T15:00:00.000Z</published>
    <updated>2023-07-25T01:19:25.541Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230725a/top.png" alt="" width="409" height="11" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>フューチャーの有志メンバーでSwagger（OpenAPI Specification Version 2.0）のコーディング規約を作りました。多少の仕掛り部分はあるものの、ある程度見れるものになってきたので紹介させてください。</p><img src="/images/20230725a/example.png" alt="" width="800" height="632" loading="lazy"><p><a href="https://future-architect.github.io/coding-standards/documents/forOpenAPISpecification/OpenAPI_Specification_2.0.html">OpenAPI Specification 2.0規約 | Future Enterprise Coding Standards</a></p><p>※OpenAPI Specification バージョン3系の規約は2023年7月時点で鋭意作成中です。2系のみ先行して公開しました。2系は少し古いのでこれから開発する案件で利用するシーンは少ないかと思いますが、3系に生きる内容も多く含みますので参考にいただけるとです。</p><p>内容へのフィードバックは、<a href="https://github.com/future-architect/coding-standards/issues">Issue</a>か<a href="https://twitter.com/future_techblog">ツイッター</a>宛にメンションを入れてコメントを貰えると幸いです。</p><h2 id="Swagger（OpenAPI-2-0）とは"><a href="#Swagger（OpenAPI-2-0）とは" class="headerlink" title="Swagger（OpenAPI 2.0）とは"></a>Swagger（OpenAPI 2.0）とは</h2><p><a href="https://future-architect.github.io/articles/20191008/">本当に使ってよかったOpenAPI (Swagger) ツール</a>から引用します。</p><p>Swaggerは、<a href="https://swagger.io/specification/">OpenAPI仕様</a>（以下OAS）と言われる、REST APIを定義するための標準仕様にもとづいて構築された一連のオープンソースツールです。REST APIの設計、構築、文書化、および使用に役立つ機能を提供します。</p><p>提供されている主なツールは次のようなものがあります。</p><div class="scroll"><table><thead><tr><th align="left">Name</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://editor.swagger.io/">Swagger Editor</a></td><td align="left">OASに則ったAPI仕様を書くためのエディタ</td></tr><tr><td align="left"><a href="https://swagger.io/tools/swagger-ui/">Swagger UI</a></td><td align="left">OASに則ったAPI仕様からドキュメントを生成するツール</td></tr><tr><td align="left"><a href="https://swagger.io/tools/swagger-codegen/">Swagger Codegen</a></td><td align="left">OASに則ったAPI仕様からコードを生成するツール</td></tr></tbody></table></div><p>おそらく一般的にSwaggerと呼ばれるのはSwagger 2.0で、これは2014に公開された規約です。Swagger 2.0はOpenAPI 2.0と同義で、OpenAPI 3.0.0には2017年に、3.0.3は2020年に公開されています。</p><h2 id="なぜ作ったか"><a href="#なぜ作ったか" class="headerlink" title="なぜ作ったか"></a>なぜ作ったか</h2><p>フューチャーは常に数十の開発プロジェクトが動いており、それぞれの案件内でちょっとした開発規約が作られることもあれば、暗黙的に遵守されるルールもあります。プロジェクトの大小も様々で数名から数百人規模に及ぶこともあり、新卒採用もキャリア採用も活発なので、フレッシュなメンバーも多くジョインしてくれます。</p><p>キャッチアップをしやすいように暗黙知を減らし明文化する意味でも、一定ラインの品質を守るためのガイドラインを作る文化があります（大なり小なりどこでもそうだと思いますが）。個人的にも隣のプロジェクトが同じ技術スタックを採用しているのに、マイナールール違いが続出すると辛いので、ベースラインは整えておきたい気持ちが強いです。</p><p>OpenAPI についても複数のサービスが稼働済みのプロジェクトで導入されており、標準化していこうよとたまたま2023年の3月に話があがり、知見があるシニアなメンバーや、単純に活動に興味があるジュニアなメンバーで、ナレッジをまとめて作成がスタートしました。</p><p>そのため、規約のポリシーとしてはすべての領域に適用するというのではなく、フューチャー社内で需要が大きそうなユースケース（サードパーティ向けに広く開発するWeb APIではなく、限られたクライアントやシステムと連携することや、スキーマファーストであることなど）をターゲットにしています。</p><h2 id="規約の例"><a href="#規約の例" class="headerlink" title="規約の例"></a>規約の例</h2><p>例えば、レスポンスボディの記載で用いる <code>schema</code> ですが、この規約では <code>$ref</code> での参照を必須としています。直接の記載もSwagger文法上は許容されますが揺れが発生しないようにという意図です。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OK</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">body</span></span><br><span class="line">  <span class="attr">in:</span> <span class="string">body</span></span><br><span class="line">  <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">schema:</span></span><br><span class="line">    <span class="string">$ref:</span> <span class="string">&quot;#/definitions/PutUserAccount&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NG</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">body</span></span><br><span class="line">  <span class="attr">in:</span> <span class="string">body</span></span><br><span class="line">  <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">  <span class="attr">required:</span> [<span class="string">user_name</span>, <span class="string">account_type</span>, <span class="string">register_at</span>, <span class="string">point</span>]</span><br><span class="line">  <span class="attr">properties:</span></span><br><span class="line">    <span class="attr">user_name:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line">    <span class="attr">account_type:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="string">...</span></span><br></pre></td></tr></table></figure><p>ルールは非常に多く、HTTPメソッドの並び順、各名称のケース（camelCase, PascalCase, snake_case）、API互換性を保つためのパラメータの設定ルールなど多岐に渡ります。</p><h2 id="今後について"><a href="#今後について" class="headerlink" title="今後について"></a>今後について</h2><p>OpenAPI 3系の規約は2023年内（か年明け）に公開を目指したいです。</p><p>同時に、この規約に沿ったリンターやフォーマッタも開発していきたいと思っています（むしろそれがメイン目的でもあります）。リンターを作るに当たっては、ルールIDのようなものを採番していく必要があるため、規約の文面も番号ベースに書き直していく可能性があります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li><a href="https://future-architect.github.io/coding-standards/documents/forOpenAPISpecification/OpenAPI_Specification_2.0.html">Swaggerの規約</a>を作って公開しました</li><li>OpenAPI 3系に繋がる内容もあるので興味があればフィードバックお願いします</li><li>3系の規約も作っていくし、リンターやフォーマッターの開発も目指していきます</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230725a/top.png&quot; alt=&quot;&quot; width=&quot;409&quot; height=&quot;11&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="コーディング規約" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84/"/>
    
    <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
    <category term="Swagger" scheme="https://future-architect.github.io/tags/Swagger/"/>
    
    <category term="OpenAPI" scheme="https://future-architect.github.io/tags/OpenAPI/"/>
    
    <category term="チーム開発" scheme="https://future-architect.github.io/tags/%E3%83%81%E3%83%BC%E3%83%A0%E9%96%8B%E7%99%BA/"/>
    
  </entry>
  
  <entry>
    <title>Angularをがんばらないで書く</title>
    <link href="https://future-architect.github.io/articles/20230724a/"/>
    <id>https://future-architect.github.io/articles/20230724a/</id>
    <published>2023-07-23T15:00:00.000Z</published>
    <updated>2023-07-24T01:21:20.991Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230724a/top.png" alt="" width="783" height="391"><p>僕が案件でAngularを書きまくっていたのは、6とか8の時代ですが、最近のバージョンで気になるアップデートが入っていました。</p><ul><li>シグナル(v16から)</li><li>スタンドアローンコンポーネント(v14から)</li></ul><p>他のフレームワークをいろいろ触ると、Angularはかなり独特な雰囲気があります。隠しきれないJava感というか、他のフレームワークでは存在しない様々な概念が見え隠れして、それをキャッチアップするだけでも結構重いです。もちろん、それぞれ意味があって、「きっとこういうことをしたいんだろうな」というニーズがあってのことかとは思いますが、いろんなフレームワークをいったりきたりすると、ストレスが多少あります。</p><p>しかし、この新しい機能を使って、他のフレームワークでは見ない要素をそぎ落としてAngularを使ってみると、まあ悪くないんじゃないかと思いました。</p><h1 id="モジュールを使わない"><a href="#モジュールを使わない" class="headerlink" title="モジュールを使わない"></a>モジュールを使わない</h1><p>Angularでアプリケーションのひな型を作ると、<a href="https://angular.jp/guide/ngmodules">NgModule</a>というのがまずできあがります。自分で作ったコンポーネントなどはここに登録していきます。外部のライブラリなどもこのモジュールで提供されていたりします。アプリケーションはこのモジュールの組み合わせとして実現されています。</p><p>ただ、これはES6 modulesなどが登場する前に、非同期にページごとのソースを読み込むといった高度な機能を実現するために生まれたものだと思いますが、ES6のモジュール管理と、さらに似たようなモジュール管理と2重の管理になってしまっているのが現状かと思います。今だと、ES6モジュールベースでバンドラーが賢くモジュール分割してくれたりするのが、それとは別にAngularモジュールの管理も必要ということで余計な作業が増えてしまっています。</p><p>NgModulesで提供されている標準機能とかサードパーティの機能を利用するのはそのまま使えばよいのですが、Angular 14で入ったスタンドアローンコンポーネントを使っていくと、自分たちが作るアプリケーションに関してはもうモジュールの存在を気にしないでコードが書けます。</p><p>詳しくは<a href="https://angular.jp/guide/standalone-components">スタンドアローンコンポーネント</a>を見れば詳しく書いてあります。アプリケーションのひな型を作るといまだにモジュールを使うコードが生成されますが、以下のコマンドを実行するとモジュールを使わないコードに変更されます。起動するとメニューが出てくるので3つのコマンドを1つずつ実行すればモジュールを使わないコードができあがります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate @angular/core:standalone</span><br></pre></td></tr></table></figure><p>モジュールを使う場合、コンポーネントから使いたい部品があれば、すべて親のモジュールに登録してから使う必要がありますが、NgModuleがないすべてがスタンドアローンコンポーネントで構成されるアプリケーションであれば、自分が使いたいコンポーネントを.tsファイル内でES6 modulesのimportで取り込んで、デコレータに使いたいコンポーネントを足すだけになります。まあ、Options APIでVue.jsを使うぐらいの手間にはなったかな、と。</p><p>日本語だとlacolacoさんのZennの書籍がテストのやり方も含めてかなり詳しく書かれています。</p><ul><li>Zenn: <a href="https://zenn.dev/lacolaco/books/angular-standalone-components">実践 Angular: Standalone Components</a></li></ul><h1 id="DIを使わない"><a href="#DIを使わない" class="headerlink" title="DIを使わない"></a>DIを使わない</h1><p>Angularのマニュアルを見ると、UIに直接関係のあるコードはコンポーネントにして、そうではないコードはサービスというクラスに実装していくことが書かれています。</p><p>サービスはコンストラクタインジェクション(Javaの人にわかる表現でいうと)でUIのコンポーネントのインスタンスにインスタンスがわたってきます。サーバー通信などはそのサービスのなかで行います。なお、サーバーへのリクエストはAngularが提供する<a href="https://angular.jp/api/common/http/HttpClient">HttpClient</a>を使います。このHttpClientはレスポンスをRxJSの作法に従って返します。</p><p>DIを使ってアプリケーションを構成していくメリットとしては、細かく部品をテスト用のモック（テストダブル）に差し替えてテストできるというのがあります。テスト対象がコンポーネントであれば、そこが通信するサービスや、他のコンポーネントもすべてモックに差し替えられます。</p><p>ただ、そういう考え方自体がJava的というか、今では少数派な気がしています。単体テストの考え方&#x2F;使い方という本でも、このやり方（ロンドン学派）ではなく、一緒に動くコンポーネントのうちグローバル変数的な動きをして他のテストとの独立性を失ってしまうようなもの以外はそのままテストしてしまえ（古典学派）の方を推奨しています。</p><ul><li>マイナビ: <a href="https://book.mynavi.jp/ec/products/detail/id=134252">単体テストの考え方&#x2F;使い方</a></li><li>Future Tech Blog: <a href="https://future-architect.github.io/articles/20230220a/">単体テストの考え方&#x2F;使い方 の感想文</a></li></ul><p>実際、JestなどでもJavaScript単位でモックできたりもするのですが、今だとMock Service WorkerとかのサーバーAPIのレスポンスレベルでのモックの方がやりやすい（モックコードをミスしたときのトラブルシュートのストレスが少なくて禿げにくい）な、という実感があります。MSWをAngularと使うための詳しい説明のページもありますね。</p><ul><li><a href="https://timdeschryver.dev/blog/using-msw-in-an-angular-project#cypress-tests">Using MSW (Mock Service Worker) in an Angular project</a></li></ul><p>モックする必要がなければ、ふつうの関数やクラスとして実装して、コンポーネントクラスの.tsファイルからimportして使ってあげればいいんじゃないですかね？</p><h1 id="RxJSを使わない"><a href="#RxJSを使わない" class="headerlink" title="RxJSを使わない"></a>RxJSを使わない</h1><p>RxJSはデータの流れを細かく制御できるリアクティブなライブラリです。<a href="https://rxjs.dev/api">ものすごく豊富な機能</a>があり、使いこなせればアプリケーションコードの細かい動きの部分をフレームワークと独立したコードとして記述できます。標準のHttpClientを使うと、結果はRxJSのObservableを返してきて、RxJSの流儀データ処理できます。</p><p>ですが、今どきは<code>fetch()</code>を使って、await&#x2F;asyncで非同期を扱うのが一般的です。Angular2が最初に公開されたときは、<code>Promise</code>がJS公式になるかならないかぐらいです。まだ<code>fetch()</code>はなく、サーバー通信はコールバックのXHRでした。また、<code>fetch()</code>が出た直後も通信のキャンセルができないなど機能が足りないということもあったようです。</p><ul><li><a href="https://h5y1m141.hatenablog.com/entry/2019/02/05/131400">AngularでRxJSが使われる理由がわからず色々調べたら腹落ちした</a></li></ul><p>ですが、awaitと書けるようになって非同期の表現はとてもシンプルになりました。また、キャンセルもできるようになって <code>fetch()</code>でできないことも減りました(そもそも、他のフレームワークとかでキャンセルの有無で<code>fetch()</code>使わないとかはあんまり聞かない)。for await ofとかも追加されましたしね。</p><ul><li><a href="https://blog.jxck.io/entries/2017-07-19/aborting-fetch.html">Fetch の中断と Promise のキャンセル方法の標準化</a></li></ul><p>Promiseが言語側で積極的に使いやすくサポートされている現状を踏まえると、当時と比べてRxJSを使うメリットよりも、今はデメリットの方が大きい気がします。機能が豊富ということは、その分、その機能をある程度頭に入れておかないと他の人のコードが読めないということにもなりますし。</p><p>Angular 16から入った<a href="https://angular.jp/guide/signals">シグナル</a>は、ReactのHooksから来ている超軽量(RxJSと比べて)リアクティブなツールで、effectやcomputeを使うことで、Reactなどと近いコーディングができます。RxJSのようなデータの流れをしっかり定義していくのとは対照的です。</p><p>唯一、ちょっと惜しいなと思ったのは直接非同期なコードをシグナルで扱いにくいという点です。ただ、RxJSとの相互接続のヘルパーが用意されているので、それを使うと、シグナルと非同期を簡単につなげそうです。僕が作ってみたのはこんな感じです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toObservable, toSignal &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core/rxjs-interop&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> asyncCompute&lt;T, U&gt;(<span class="attr">source</span>: <span class="title class_">Signal</span>&lt;T&gt;, <span class="attr">convert</span>: <span class="function">(<span class="params">input: T</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;U&gt;, <span class="attr">initialValue</span>: U): <span class="title class_">Signal</span>&lt;U&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">Subject</span>&lt;U&gt;();</span><br><span class="line">  <span class="title function_">toObservable</span>(source).<span class="title function_">subscribe</span>(<span class="keyword">async</span> v =&gt; &#123;</span><br><span class="line">    result.<span class="title function_">next</span>(<span class="keyword">await</span> <span class="title function_">convert</span>(v));</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">toSignal</span>(result, &#123; initialValue &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こんな感じで何かしらのシグナルを入力に受け取って非同期で加工して結果を反映するシグナルを生成できますね。ユーザーIDを管理するシグナルを作って、サーバーにアクセスして、ユーザー情報を格納するシグナルに入れる、みたいなこともできます。</p><p>これは入力をスリープしてちょっと遅らせて2倍するだけのコードですが。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="title function_">signal</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">lazyCount = <span class="title function_">asyncCompute</span>(<span class="variable language_">this</span>.<span class="property">count</span>, <span class="keyword">async</span> (<span class="attr">input</span>: <span class="built_in">number</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">sleep</span>();</span><br><span class="line">  <span class="keyword">return</span> input * <span class="number">2</span>;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>あとでStack Overflowをみたら、<a href="https://stackoverflow.com/questions/76571331/using-async-await-in-angular-computed-signal">effectを使う事例</a>もありました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>モジュールをやめて、DIをやめて、RxJSをやめると、Angularを始めたときに学ばないといけないこと、書かなければいけないコードが、他のフレームワーク同等になりそうだな、と思ったのでブログにしてみました。これにTailwind CSSも組み合わせれば、だいぶ楽にアプリが書けそうな気がします。Angular Materialというしっかり作られた公式のUI部品がある、というのはAngularのメリットだと思いますし。</p><p>Angularも活発に開発され続けていますし、ちょっと趣味開発でも使ってみようかな、と思っています。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230724a/top.png&quot; alt=&quot;&quot; width=&quot;783&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="DI" scheme="https://future-architect.github.io/tags/DI/"/>
    
    <category term="Angular" scheme="https://future-architect.github.io/tags/Angular/"/>
    
    <category term="RxJS" scheme="https://future-architect.github.io/tags/RxJS/"/>
    
  </entry>
  
  <entry>
    <title>【SwiftUI】Swift Charts についてまとめてみた</title>
    <link href="https://future-architect.github.io/articles/20230720a/"/>
    <id>https://future-architect.github.io/articles/20230720a/</id>
    <published>2023-07-19T15:00:00.000Z</published>
    <updated>2023-07-20T08:57:03.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして！2022年5月キャリア入社、HealthCare Innovation Group(HIG)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の橋本です。技術ブログ初投稿です。</p><p>iOS16からApple標準で利用できるようになったSwift Chartsというグラフ等を作成できるフレームワークを取り上げます。</p><p>取り上げた理由としては、２点あります。</p><ol><li>現在のプロジェクトで活用する機会がありそうなため、事前にキャッチアップしておきたいと考えたため</li><li>データ分析の分野にも興味があり、後ほど投稿しよう思っているSwiftで機械学習をしたときの結果をきれいに可視化してみたいと思っているから</li></ol><p>早速本題に入っていきます。内容は次のような構成です。</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><ul><li>Swift Chartsとは<ul><li>Swift Chartsの基本的な使い方</li><li>グラフを描く要素を定義するデータ構造を設計する</li></ul></li><li>6つのMarkとその使い方<ul><li>AreaMask</li><li>LineMark</li><li>PointMark</li><li>RectangleMark</li><li>RuleMark</li><li>BarMark</li></ul></li><li>iPhoneのScreen Timeの表示をSwift Chartsで作ってみる</li></ul><h2 id="Swift-Chartsとは"><a href="#Swift-Chartsとは" class="headerlink" title="Swift Chartsとは"></a>Swift Chartsとは</h2><p>Swift Chartsとは、WWDC2022で発表されたカスタマイズされたグラフを作成できるSwiftUIフレームワークです。</p><p><a href="https://developer.apple.com/documentation/charts">https://developer.apple.com/documentation/charts</a></p><p>イメージとしては、以下のように様々なグラフを描くことができます。<br><img src="/images/20230720a/image.png" alt="" width="1200" height="424" loading="lazy"></p><p>また、WWDC2023のセッション(<a href="https://developer.apple.com/videos/play/wwdc2023/10037/">Explore pie charts and interactivity in Swift Charts</a>)で7つ目となる<code>SectorMark</code>が発表されました。<code>SectorMark</code>を使うことで簡単にPie Chartを作ることがiOS17から可能になるとのことです。</p><img src="/images/20230720a/image_2.png" alt="" width="1200" height="472" loading="lazy"><p><a href="https://developer.apple.com/videos/play/wwdc2023/10037/">https://developer.apple.com/videos/play/wwdc2023/10037/</a></p><p><a href="https://developer.apple.com/documentation/charts/sectormark">https://developer.apple.com/documentation/charts/sectormark</a></p><h3 id="Swift-Chartsの基本的な使い方"><a href="#Swift-Chartsの基本的な使い方" class="headerlink" title="Swift Chartsの基本的な使い方"></a>Swift Chartsの基本的な使い方</h3><p>簡単な棒グラフを作っていきます。<br>完成イメージは、縦軸が値段、横軸にフルーツが並ぶ棒グラフです。<br>使用する要素は以下のとおりです。</p><div class="scroll"><table><thead><tr><th>フルーツ</th><th>値段</th></tr></thead><tbody><tr><td>りんご</td><td>100円</td></tr><tr><td>オレンジ</td><td>50円</td></tr><tr><td>バナナ</td><td>200円</td></tr></tbody></table></div><p>早速作っていきます。<br>まず、Swift Chartsを利用するために、<code>Charts</code>をインポートします。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Charts</span><br></pre></td></tr></table></figure><p>これによって、Swift Chartsが使えるようになりました。</p><p>次にグラフを描画する場所を定義します。</p><p>グラフを記述する場所として、View配下に<code>Chart &#123;&#125;</code>を次のように記載します。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span> &#123;</span><br><span class="line">            <span class="comment">// ここに後述するMarkを記載します。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次に、今回は棒グラフを作成するので、棒グラフを描くことができる<code>BarMark</code>を使っていきます。</p><p>さきほどのコードに<code>BarMark</code>を追加します。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Chart</span> &#123;</span><br><span class="line">    <span class="type">BarMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;fruit&quot;</span>, <span class="string">&quot;りんご&quot;</span>),</span><br><span class="line">        y: .value(<span class="string">&quot;Price&quot;</span>, <span class="number">100</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/20230720a/5fd9a545-cb98-f283-f114-5216698e0097.png" alt="" width="564" height="432" loading="lazy"><p>BarMark内の<code>x: .value(&quot;Fruit&quot;, &quot;Apple&quot;)</code>でx軸のラベル自体を<code>Fruit</code>と定義し、表示されている一つのバー要素が<code>Apple</code>であることを示しています。<code>y: .value(&quot;Price&quot;, 100)</code>も同様に、y軸のラベル自体を<code>Price</code>と定義し、表示されている一つのバー要素が<code>100</code>であることを示しています。</p><p>”りんご” のバーを追加できましたので、オレンジ、バナナを追加します。</p><p>追加する方法は、とても簡単でオレンジ用、バナナ用のBarMarkをそれぞれ追加するだけです。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Chart</span> &#123;</span><br><span class="line">    <span class="type">BarMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;fruit&quot;</span>, <span class="string">&quot;りんご&quot;</span>),</span><br><span class="line">        y: .value(<span class="string">&quot;Price&quot;</span>, <span class="number">100</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="type">BarMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;fruit&quot;</span>, <span class="string">&quot;オレンジ&quot;</span>),</span><br><span class="line">        y: .value(<span class="string">&quot;Price&quot;</span>, <span class="number">50</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="type">BarMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;fruit&quot;</span>, <span class="string">&quot;バナナ&quot;</span>),</span><br><span class="line">        y: .value(<span class="string">&quot;Price&quot;</span>, <span class="number">200</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/20230720a/4616977c-472b-b182-8dea-58c0b452892c.png" alt="" width="558" height="430" loading="lazy"><p>これで完成イメージ通りのグラフが完成しました。しかし、この方法ですとBarMarkを要素が一つ追加するごとに増えていくので、数が多くなると大変見づらくなってしまいます。</p><p>そこで、グラフの要素を構造体で定義することで<code>View</code>内を簡潔に記載することができます。</p><h4 id="グラフを描く要素を定義するデータ構造を設計する"><a href="#グラフを描く要素を定義するデータ構造を設計する" class="headerlink" title="グラフを描く要素を定義するデータ構造を設計する"></a>グラフを描く要素を定義するデータ構造を設計する</h4><p>グラフで利用するデータ構造の一般的な設計について説明します。</p><p>Chartsでは、ForEachのようにループ文を使うことができるため、構造体を<code>Identifiable</code>プロトコルに準拠させ、一意の<code>id</code>をプロパティとして定義しておきます。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Data</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id <span class="operator">=</span> <span class="type">UUID</span>()   <span class="comment">// 一意のidを持たせる</span></span><br><span class="line">    <span class="keyword">let</span> fruitName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> price: <span class="type">Double</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを用いて、先程紹介した棒グラフを実装すると次のようになります。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 棒グラフの各要素を定義する</span></span><br><span class="line"><span class="keyword">let</span> item:[<span class="type">Item</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">Item</span>(price: <span class="number">100</span>, fruitName: <span class="string">&quot;apple&quot;</span>),</span><br><span class="line">    <span class="type">Item</span>(price: <span class="number">50</span>, fruitName: <span class="string">&quot;orange&quot;</span>),</span><br><span class="line">    <span class="type">Item</span>(price: <span class="number">200</span>, fruitName: <span class="string">&quot;Banana&quot;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(item) &#123; element <span class="keyword">in</span></span><br><span class="line">            <span class="type">BarMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;Fruit&quot;</span>, element.fruitName),</span><br><span class="line">                y: .value(<span class="string">&quot;Price&quot;</span>, element.price)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><code>Charts</code>を<code>ForEach</code>のように利用することができるため、これまでSwiftUIを触ったことがある人にはとても使いやすいと思いました。</p><h2 id="6つのMarkとその使い方"><a href="#6つのMarkとその使い方" class="headerlink" title="6つのMarkとその使い方"></a>6つのMarkとその使い方</h2><p>6つのグラフを描画するMarkの使い方について、紹介します。<br>表に6つのMark名と主に使われるグラフとそのイメージ画像を一覧化しています。</p><div class="scroll"><table><thead><tr><th>名前</th><th>説明</th><th>イメージ</th></tr></thead><tbody><tr><td>AreaMark</td><td>面グラフ</td><td><img src="/images/20230720a/image_3.png" alt="image.png" width="312" height="214" loading="lazy"></td></tr><tr><td>LineMark</td><td>折れ線グラフ</td><td><img src="/images/20230720a/image_4.png" alt="image.png" width="311" height="211" loading="lazy"></td></tr><tr><td>PointMark</td><td>散布図</td><td><img src="/images/20230720a/image_5.png" alt="image.png" width="319" height="212" loading="lazy"></td></tr><tr><td>RectangleMark</td><td>ヒートマップ</td><td><img src="/images/20230720a/image_6.png" alt="image.png" width="308" height="213" loading="lazy"></td></tr><tr><td>RuleMark</td><td>水平線、垂直線</td><td><img src="/images/20230720a/image_7.png" alt="image.png" width="320" height="218" loading="lazy"></td></tr><tr><td>BarMark</td><td>棒グラフ</td><td><img src="/images/20230720a/image_8.png" alt="image.png" width="314" height="213" loading="lazy"></td></tr></tbody></table></div><p>BarMarkの使い方は、すでに紹介しましたので、残りの5つのMarkのサンプルコードを次に記載します。</p><p>（ここでは基本的にデータ構造などのコードは省き、<code>Chart&#123;&#125;</code>内のコードのみを載せています。）</p><h3 id="Area-Markのサンプルコード"><a href="#Area-Markのサンプルコード" class="headerlink" title="Area Markのサンプルコード"></a>Area Markのサンプルコード</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Chart</span>(cheeseburgerCost) &#123;</span><br><span class="line">    <span class="type">AreaMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;Date&quot;</span>, <span class="variable">$0</span>.date),</span><br><span class="line">        y: .value(<span class="string">&quot;Price&quot;</span>, <span class="variable">$0</span>.price)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LineMarkのサンプルコード"><a href="#LineMarkのサンプルコード" class="headerlink" title="LineMarkのサンプルコード"></a>LineMarkのサンプルコード</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Chart</span>(data) &#123;</span><br><span class="line">    <span class="type">LineMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;Month&quot;</span>, <span class="variable">$0</span>.date),</span><br><span class="line">        y: .value(<span class="string">&quot;Hours of Sunshine&quot;</span>, <span class="variable">$0</span>.hoursOfSunshine)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PointMarkのサンプルコード"><a href="#PointMarkのサンプルコード" class="headerlink" title="PointMarkのサンプルコード"></a>PointMarkのサンプルコード</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Chart</span>(data) &#123;</span><br><span class="line">    <span class="type">PointMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;Wing Length&quot;</span>, <span class="variable">$0</span>.wingLength),</span><br><span class="line">        y: .value(<span class="string">&quot;Wing Width&quot;</span>, <span class="variable">$0</span>.wingWidth)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RectangleMarkのサンプルコード"><a href="#RectangleMarkのサンプルコード" class="headerlink" title="RectangleMarkのサンプルコード"></a>RectangleMarkのサンプルコード</h3><p>このサンプルコードでは、<code>width</code>と<code>height</code>でバーエリア内の比率を1.0にすることでヒートマップを作成しています。作成されるヒートマップは、上記で記載している表中のイメージのものです。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">MatrixEntry</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> positive: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> negative: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> num: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> data: [<span class="type">MatrixEntry</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">MatrixEntry</span>(positive: <span class="string">&quot;+&quot;</span>, negative: <span class="string">&quot;+&quot;</span>, num: <span class="number">125</span>),</span><br><span class="line">    <span class="type">MatrixEntry</span>(positive: <span class="string">&quot;+&quot;</span>, negative: <span class="string">&quot;-&quot;</span>, num: <span class="number">10</span>),</span><br><span class="line">    <span class="type">MatrixEntry</span>(positive: <span class="string">&quot;-&quot;</span>, negative: <span class="string">&quot;-&quot;</span>, num: <span class="number">80</span>),</span><br><span class="line">    <span class="type">MatrixEntry</span>(positive: <span class="string">&quot;-&quot;</span>, negative: <span class="string">&quot;+&quot;</span>, num: <span class="number">1</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RectangleMaskView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(data) &#123;</span><br><span class="line">            <span class="type">RectangleMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;Positive&quot;</span>, <span class="variable">$0</span>.positive),</span><br><span class="line">                y: .value(<span class="string">&quot;Negative&quot;</span>, <span class="variable">$0</span>.negative)</span><br><span class="line">                width: .ratio(<span class="number">1</span>),</span><br><span class="line">                height: .ratio(<span class="number">1</span>)</span><br><span class="line">            )</span><br><span class="line">            .foregroundStyle(by: .value(<span class="string">&quot;Number&quot;</span>, <span class="variable">$0</span>.num))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 凡例を非表示に設定</span></span><br><span class="line">        .chartLegend(.hidden)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Y軸のラベル位置を設定</span></span><br><span class="line">        .chartYAxis &#123;</span><br><span class="line">            <span class="type">AxisMarks</span>(preset: .aligned, position: .leading)</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(width: <span class="number">300</span>, height: <span class="number">200</span>)</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="RuleMarkのサンプルコード"><a href="#RuleMarkのサンプルコード" class="headerlink" title="RuleMarkのサンプルコード"></a>RuleMarkのサンプルコード</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> data: [<span class="type">Pollen</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">Pollen</span>(startMonth: <span class="number">1</span>, numMonths: <span class="number">9</span>, source: <span class="string">&quot;Trees&quot;</span>),</span><br><span class="line">    <span class="type">Pollen</span>(startMonth: <span class="number">12</span>, numMonths: <span class="number">1</span>, source: <span class="string">&quot;Trees&quot;</span>),</span><br><span class="line">    <span class="type">Pollen</span>(startMonth: <span class="number">3</span>, numMonths: <span class="number">8</span>, source: <span class="string">&quot;Grass&quot;</span>),</span><br><span class="line">    <span class="type">Pollen</span>(startMonth: <span class="number">4</span>, numMonths: <span class="number">8</span>, source: <span class="string">&quot;Weeds&quot;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RuleMaskView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(data) &#123;</span><br><span class="line">            <span class="type">RuleMark</span>(</span><br><span class="line">                xStart: .value(<span class="string">&quot;Start Date&quot;</span>, <span class="variable">$0</span>.startDate),</span><br><span class="line">                xEnd: .value(<span class="string">&quot;End Date&quot;</span>, <span class="variable">$0</span>.endDate),</span><br><span class="line">                y: .value(<span class="string">&quot;Pollen Source&quot;</span>, <span class="variable">$0</span>.source)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(width: <span class="number">300</span>, height: <span class="number">200</span>)</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SectorMarkのサンプルコード-iOS17以降"><a href="#SectorMarkのサンプルコード-iOS17以降" class="headerlink" title="SectorMarkのサンプルコード(iOS17以降)"></a>SectorMarkのサンプルコード(iOS17以降)</h3><p>WWDC2023で発表された<code>SectorMark</code>のサンプルコードです。<code>BarMark</code>等で使っていた<code>x:</code>を<code>angle</code>に変えるだけで、簡単にPie chartsに変換できます。</p><p>また、<code>innnerRadius:</code>、<code>angularInset</code>でPie chartsをカスタマイズすることができます。<code>innnerRadius:</code>を使用することで、パイチャートの内部を指定の比率だけくり抜き、ドーナッツチャートにすることもできます。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Chart</span>(data, id: \.name) &#123; name, sales <span class="keyword">in</span></span><br><span class="line">        <span class="type">SectorMark</span>(</span><br><span class="line">            angle: .value(<span class="string">&quot;Value&quot;</span>, sales),</span><br><span class="line">            innerRadius: .ratio(<span class="number">0.618</span>),  <span class="comment">// Pie charts中心から指定の比率だけくり抜ける</span></span><br><span class="line">            angularInset: <span class="number">1</span> <span class="comment">// Pie chartsの各要素の間に1 pointの隙間を与える</span></span><br><span class="line">        )</span><br><span class="line">        .cornerRadius(<span class="number">4</span>)</span><br><span class="line">        .foregroundStyle(by: .value(<span class="string">&quot;Product category&quot;</span>, name))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再掲となりますが、以下のWWDC2023のセッション動画を見ていただけると、<code>SectorMark</code>について理解が進むと思います。</p><p><a href="https://developer.apple.com/videos/play/wwdc2023/10037/">https://developer.apple.com/videos/play/wwdc2023/10037/</a></p><h1 id="スクリーンタイムのグラフを模倣して作ってみた"><a href="#スクリーンタイムのグラフを模倣して作ってみた" class="headerlink" title="スクリーンタイムのグラフを模倣して作ってみた"></a>スクリーンタイムのグラフを模倣して作ってみた</h1><p>最後に、学習してきた知識を活用して、iPhoneアプリなどに標準で搭載されているスクリーンタイムのグラフを模倣してみました。</p><h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul><li>macOS: Ventura 13.4.1</li><li>Xcode: Version 14.3.1 (14E300c)</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BarItem</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dayOfWeek: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> hour: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> category: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> data: [<span class="type">BarItem</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">BarItem</span>(dayOfWeek: <span class="string">&quot;日&quot;</span>, hour: <span class="number">1.5</span>, category: <span class="string">&quot;エンターテイメント&quot;</span>),</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ScreenTimeWidgetView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationStack</span> &#123;</span><br><span class="line">            <span class="type">List</span> &#123;</span><br><span class="line">                <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">&quot;スクリーンタイム&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">VStack</span>(alignment: .leading, spacing: <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;1日の平均&quot;</span>)</span><br><span class="line">                            .font(.footnote)</span><br><span class="line">                            .foregroundColor(.secondary)</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;3 時間 45 分&quot;</span>)</span><br><span class="line">                            .font(.title)</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// グラフを描画</span></span><br><span class="line">                        <span class="type">Chart</span> &#123;</span><br><span class="line">                            <span class="type">ForEach</span>(data) &#123;</span><br><span class="line">                                <span class="type">BarMark</span>(</span><br><span class="line">                                    x: .value(<span class="string">&quot;Category&quot;</span>, <span class="variable">$0</span>.dayOfWeek),</span><br><span class="line">                                    y: .value(<span class="string">&quot;Profit&quot;</span>, <span class="variable">$0</span>.hour)</span><br><span class="line">                                )</span><br><span class="line">                                .foregroundStyle(<span class="variable">$0</span>.color)</span><br><span class="line">                                .foregroundStyle(by: .value(<span class="string">&quot;Product Category&quot;</span>, <span class="variable">$0</span>.category))</span><br><span class="line">                                <span class="comment">// 棒グラフの角を丸くする</span></span><br><span class="line">                                .cornerRadius(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 一週間の平均利用時間(h)</span></span><br><span class="line">                                <span class="type">RuleMark</span>(y: .value(<span class="string">&quot;平均&quot;</span>, <span class="number">3.45</span>))</span><br><span class="line">                                    .foregroundStyle(.green)</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 線のスタイルを指定。ここでは点線にしている。</span></span><br><span class="line">                                    .lineStyle(<span class="type">StrokeStyle</span>(lineWidth: <span class="number">1.5</span>, lineCap: .butt, lineJoin: .miter, dash: [<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>], dashPhase: <span class="number">0</span>))</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        .chartForegroundStyleScale([</span><br><span class="line">                            <span class="string">&quot;エンターテイメント&quot;</span>: .blue, <span class="string">&quot;仕事の効率化とファイナンス&quot;</span>: .cyan, <span class="string">&quot;SNS&quot;</span>: .orange</span><br><span class="line">                        ])</span><br><span class="line">                    &#125;</span><br><span class="line">                    .frame(width: <span class="number">300</span>, height: <span class="number">250</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/20230720a/c82576c7-af28-9a39-950c-a5b1206ef480.png" alt="" width="872" height="828" loading="lazy"><p>本物にかなり似たグラフを実装できたと思います。</p><p>より本物のスクリーンタイムに合わせるには、以下をうまく実装に反映させる必要があります。</p><ul><li><code>RuleMark</code>の点線の横に、平均という文字を入れること</li><li>縦軸の目盛りを調節すること</li><li>縦軸の目盛りに単位を追加すること</li><li>日、月、などの曜日をそれぞれの要素内で左に寄せること</li></ul><p>これらの課題は、時間を見つけて改善していきたいと思います。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回は、iOS16から利用できるようになったSwift Chartsについて理解を深めました。</p><p>今後もSwift周りで学習した内容を投稿していきたいと思いますので、その際もお読みいただけると嬉しいです。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><p><a href="https://developer.apple.com/documentation/charts/areamark">https://developer.apple.com/documentation/charts/areamark</a></p><p><a href="https://developer.apple.com/documentation/charts/linemark">https://developer.apple.com/documentation/charts/linemark</a></p><p><a href="https://developer.apple.com/documentation/charts/pointmark">https://developer.apple.com/documentation/charts/pointmark</a></p><p><a href="https://developer.apple.com/documentation/charts/rectanglemark">https://developer.apple.com/documentation/charts/rectanglemark</a></p><p><a href="https://developer.apple.com/documentation/charts/rulemark">https://developer.apple.com/documentation/charts/rulemark</a></p><p><a href="https://developer.apple.com/documentation/charts/barmark">https://developer.apple.com/documentation/charts/barmark</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">医療・ヘルスケア分野での案件や新規ビジネス創出を担う、2020年に誕生した事業部です。設立エピソードは<a href="https://note.future.co.jp/n/n8b57d4bf4604">未来報</a>の記事をご覧ください。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして！2022年5月キャリア入社、HealthCare Innovation Group(HIG)&lt;sup</summary>
        
      
    
    
    
    <category term="Programing" scheme="https://future-architect.github.io/categories/Programing/"/>
    
    
    <category term="iOS" scheme="https://future-architect.github.io/tags/iOS/"/>
    
    <category term="Swift" scheme="https://future-architect.github.io/tags/Swift/"/>
    
    <category term="SwiftUI" scheme="https://future-architect.github.io/tags/SwiftUI/"/>
    
    <category term="iOS16" scheme="https://future-architect.github.io/tags/iOS16/"/>
    
  </entry>
  
  <entry>
    <title>Software Design 2023年7月号 gRPCで始めるWeb API開発 3章を寄稿しました</title>
    <link href="https://future-architect.github.io/articles/20230714a/"/>
    <id>https://future-architect.github.io/articles/20230714a/</id>
    <published>2023-07-13T15:00:00.000Z</published>
    <updated>2023-07-14T01:48:34.612Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230714a/top.png" alt="" width="400" height="564" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>2023年6月16日に発売された、<a href="https://gihyo.jp/magazine/SD/archive/2023/202307">Software Design 2023年7月号</a>の特集である、「gRPCで始めるWeb API開発」の3章をフューチャーメンバーである、渋川、武田、真野の3名で寄稿させていただきました。このような寄稿の機会をくださった技術評論社の方々には、心からお礼申し上げます。</p><h2 id="Software-Design-とは"><a href="#Software-Design-とは" class="headerlink" title="Software Design とは"></a>Software Design とは</h2><p>技術評論社が出版している月刊の技術情報誌です。Webサービスを開発するソフトウェア業界のエンジニアにとっては説明不要と言っていいくらい鉄板です。</p><p>毎月様々なテーマについて特集を組んで取り扱っており、プログラミングだけでなく、OSやネットワークまで、その内容は多岐に渡ります。入門者・初心者向けの内容から実践的な内容も多く含まれているので、新人からベテランまであらゆるエンジニアにおすすめできる雑誌です。</p><h2 id="執筆のきっかけ"><a href="#執筆のきっかけ" class="headerlink" title="執筆のきっかけ"></a>執筆のきっかけ</h2><p>寄稿の記念（と販売促進）を願って公開していた<a href="https://future-architect.github.io/tags/SoftwareDesign/">過去記事</a>によると2018年頃から、フューチャー社員も記事を寄稿することが増えたようです。</p><p>今回の直接のキッカケは2022年の<a href="https://future-architect.github.io/articles/20220622a/">サービス間通信とIDL（インタフェース記述言語）連載を始めます</a>のブログリレーにあったgRPC関連の記事です。ここから寄稿どうでしょうか？と技術評論社さんからご提案をいただきました。会社名義で発信しておくと良いことがありますね。私はフューチャーブログの運営もしているので嬉しいです。引き受けて良いですかね？と広報の石井さんと部署のボスの宮原さんに聞いたら、OK～と即レスだったので急ぎメンバーを集めてネタのディスカッションを始めました。</p><h2 id="執筆の流れ"><a href="#執筆の流れ" class="headerlink" title="執筆の流れ"></a>執筆の流れ</h2><p><a href="https://future-architect.github.io/articles/20220721b/#%E5%9F%B7%E7%AD%86%E3%81%AE%E3%83%95%E3%83%AD%E3%83%BC">武田さんの記事</a>に詳しく書かれています。今回のgRPC記事もトピックごとに役割分担して臨みました。</p><h2 id="執筆してよかったこと"><a href="#執筆してよかったこと" class="headerlink" title="執筆してよかったこと"></a>執筆してよかったこと</h2><p>私達の担当部分のテーマは「gRPC利用時のAPI設計ポイント」です。</p><p>元々フューチャーにおけるWeb API開発は、私の観測範囲では、OpenAPI、gRPC、GraphQLが使われており、諸々の事情でスキーマ駆動で行われることが大半です。この理由をいくつか挙げると、Web APIの開発本数をマネジメント上、開発に本格的に入る前にそれなりの精度で洗い出し、チームの体制を整えたり、予実管理に生かしたいなどがあるかなと思っています。また、なるべくシステムの仕様をブラックボックス化させずにオープンに引き継げるように、ドキュメントをリッチに作る傾向にあることも理由にあると思います（※これはどのエンタープライズ開発でも同様でしょうが）。引き継ぎ大事ですよね。</p><p>さて、そんな設計を大事にするフューチャーなので、Web APIスキーマも皆それなりのこだわりがあります。今回の執筆テーマも、「API設計ポイント」なので、gRPCのprotoファイルを記載する上で気をつけた方が良いことをgRPCをあまり使ったことがない方にも分かるように意識して取り組みました。</p><p>gRPCの設計標準ですがいくつかよく知られたプラクティスがあります。例えば相互運用性や互換性についてなどです。加えてドキュメント生成や、バリデーション、メタデータの扱いについて、社内メンバーにレビューもらいつつ、私たちが担当した3章はきゅっと9pにまとめました。</p><p>APIの後方互換を守るための考え方などは、gRPCに閉じた話で無いとメンバー内でも話題になっており、それこそOpenAPIでWeb APIを管理している方にもオススメできる内容です。</p><p>執筆側のメリットとしては紙面で出版後の訂正は効かないため、誤った内容を出すわけにはいかない精神で、普段の技術ブログ以上に公式&#x2F;コミュニティ問わず多くの文献をあたり、執筆する前より体系的な理解が深まったと感じます。今回は3名で臨んだのでお互い気になったトピックは議論しながら進められ、お互いの知識も補完しあえたのもの得るところがありました。</p><h2 id="Software-Design-2023年7月号-は良いぞ"><a href="#Software-Design-2023年7月号-は良いぞ" class="headerlink" title="Software Design 2023年7月号 は良いぞ"></a>Software Design 2023年7月号 は良いぞ</h2><p>特集のgRPC以外にも面白いネタがたっぷりです。偶発的（？）な出会いがあるのが、雑誌のいいところですね。Svelte、GoFデザインパターン、SBOM、Deno、話題の生成AIなどなど、幅広いテーマを扱っています。もちろんGoの記事もあります。その中で以下が雑誌でないと絶対に読むことがなかったので出会えてよかったと思っています。</p><ul><li>分散型SNS<ul><li>Twitterの代わりとなるサービスを探す動きが強まっていて、分散型SNSのプロトコルについて解説です</li><li>ActivityPubは名前だけしか知りませんでした。まったく知らない人である私にもどういうものかわかりやすく知ることができました<ul><li>MastodonとかMisskeyなどの異なるサービス間で連携できるとは..</li></ul></li><li>他にもAT ProtocolやNostr（むしろNostrが本題）についても優しく解説しています</li><li>サーバの責務の重い&#x2F;比較的軽いや、匿名性、検閲体制、データの永続性など技術的に考慮すべき点がたくさんあるということが知れて面白かったです</li></ul></li><li>民主主義を発展させるためのテクノロジー「Plurality」<ul><li>技術で民主主義の発展させ社会貢献、なかなか痺れるタイトルです</li><li>最初は「何かしらの便利な行政アプリをOSSで作る」といった感じ？と少し冷めた目線で見てしまいましたが、投票といった意思決定メカニズムに直接関与するような仕組みを設計したりと野心的な話題が紹介されており、琴線に触れました</li><li>最後に紹介された政治哲学者トクヴィルの言葉も良いですね。オーナーシップが大事だと</li></ul></li><li>瞑想<ul><li>リモートワークだと気が張りっぱなしになる瞬間がありますよね。そんなときにストレス解消や、集中職・意思決定力の向上に有効だと言われる、エクササイズとして紹介されています。ちょっと試したところ頭が気持ちスッキリした気がします</li></ul></li></ul><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><ul><li>企業ブログ（フューチャー技術ブログ）に寄稿すると執筆のチャンスに繋がることもある。これからもガンバリます</li><li>雑誌寄稿レベルまで色々な方とやり取りしながら執筆すると学びが深い</li><li>Software Design 2023年7月号、ひと段階、視野が広がり良かったです</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230714a/top.png&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;564&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="出版" scheme="https://future-architect.github.io/tags/%E5%87%BA%E7%89%88/"/>
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
    <category term="SoftwareDesign" scheme="https://future-architect.github.io/tags/SoftwareDesign/"/>
    
    <category term="寄稿" scheme="https://future-architect.github.io/tags/%E5%AF%84%E7%A8%BF/"/>
    
    <category term="gRPC" scheme="https://future-architect.github.io/tags/gRPC/"/>
    
  </entry>
  
  <entry>
    <title>リアクティブプログラミングについて考える</title>
    <link href="https://future-architect.github.io/articles/20230629a/"/>
    <id>https://future-architect.github.io/articles/20230629a/</id>
    <published>2023-06-28T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.141Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20230628a/">前回のエントリー</a>で、コンポーネント単位のステートをがちゃがちゃ更新していくという、オブジェクト指向型（オブジェクトの境界がコンポーネント）の考え方から、より小さな状態のインタラクションになっていくよ、という話を紹介しました。</p><p>ビジネスロジックのアーキテクチャとしては、DDD本には以下の2つが書かれています。</p><ul><li>ドメインオブジェクト(オブジェクト指向)</li><li>トランザクションスクリプト(手続き型)</li></ul><p>DDD本はご存知のようにドメインオブジェクト押しなのですが、現実にはトランザクションスクリプトもよく使われますね。ただ、リアクティブな設計はこの2つとも違いますね。2つの要素A, Bがあって、Aの処理の結果を受けて処理Bを走らせる場合。だれがこの関連を知っているか、というところが違います。</p><p>オブジェクト指向だと、AがBを知っていて、AからBに通知します。「オブザーバーパターン」というのはありますが、あれもBがAを監視していると見せかけて、結局中身を分解するとAがBに伝達しているに過ぎません。</p><p>トランザクションスクリプトだと、A→Bの順序を知っている神オブジェクトGがいます。</p><p>で、Recoilの<a href="https://en.wikipedia.org/wiki/Reactive_programming">リアクティブプログラミング</a>ですが、Bが処理にはAが必要だ、というのを知っていて、Aが終わったらBのロジックが実行されます。</p><div class="scroll"><table><thead><tr><th>方式</th><th>流れを制御する主体</th></tr></thead><tbody><tr><td>オブジェクト指向</td><td>A→BならA</td></tr><tr><td>トランザクションスクリプト</td><td>AとBの両方を知るS</td></tr><tr><td>リアクティブ</td><td>A→BならB</td></tr></tbody></table></div><p>クリーンアーキテクチャ的には、情報源を知っていないといけない、ということで不安で動悸と眩暈がする人もいるかもしれませんが↓の次の図を見てもらえれば次の2つの参照に分かれていることがわかります。</p><ul><li>サイドバーコンポーネント→検索条件のselector</li><li>検索条件のselector→検索処理のselector</li></ul><p>検索処理にあたって、上流のサイドバーのパネルへの依存が発生しているわけではなく、その緩衝地帯のオブジェクトがいて、相互にそれが依存している形になりますので、酷いことにはならなそうです。</p><p>なお、リアクティブプログラミングはパフォーマンス重視で並列性のための仕組みとしても発展してきています。その中には、publisher&#x2F;subscriberの仕組みで通信するものもあり、必ずしもRecoilとは依存の考え方が同じにはならないこともあります。</p><h1 id="DFDを書いてみる"><a href="#DFDを書いてみる" class="headerlink" title="DFDを書いてみる"></a>DFDを書いてみる</h1><p>雑にざっと作ったコードですが、こんな感じになりました。atom&#x2F;selectorのうち、いくつかを公開APIとしてexportして、他のコンポーネントから触れるようにしています（非公開のものはほとんどは省略しています）。</p><p>完全にコンポーネントに閉じていて、外からアクセスしないのでhooksのstateを使っているのはAppコンポーネントのGraphvizのソースとレンダリング表示の切り替えぐらいでした。</p><img src="/images/20230629a/名称未設定ファイル.drawio.png" alt="" width="868" height="571" loading="lazy"><p>「図の向き」はシンプルにatomをそのまま公開してしまっていますが、読み込み専用のselectorと、外部から変更をトリガーするイベント(Reactで使えるように<code>useCallback()</code>を作成するカスタムフック)をいくつか公開し、変更はそれぞれが属するモジュール（Reactコンポーネントやら、データロジックのコード)の中に閉じさせると、カプセル化的によさそうです。コンポーネントとRecoilの要素はファイルを分ける、というのはやる必要はない気がします。コンポーネントが読み書きの主体となっているRecoilの状態はコンポーネントの中に定義してしまった方が編集とかはしやすいです。</p><p>Reduxと比べると、他のコンポーネントから触らせるためにわざわざストアを作ってreducerを作ったりしなくてもいいのでとても楽ですね。</p><h2 id="相互依存なのではないか？"><a href="#相互依存なのではないか？" class="headerlink" title="相互依存なのではないか？"></a>相互依存なのではないか？</h2><p>単純に図だけを見ると、相互に依存しあっていて、「依存は一方通行にしよう」とか「相互参照は良くない」というよく言われる原則に反しているように思うかもしれません。</p><p>ですが、この層を新しい「レイヤー」として考えてしまえば、逆にシンプルな構成に見えるんじゃないかと思います。たとえReduxのようなものを作っても結局同じようなグローバルなデータストアが1つでき、全員がそこに依存関係で結びつくので、結局は同じことです。</p><p>むしろ、コンポーネントに閉じたこま細かいリアクティブな処理はそのままコンポーネントの中に閉じ込めておけるので、グローバルなストアのようにレイヤーが余計に太ることはありませんし、必要な相手との間にのみ依存が発生するので必要な要素同士に限定される分、「おおきな1つのストア」よりも依存度は小さくなります。</p><img src="/images/20230629a/名称未設定ファイル-ページ2.drawio.png" alt="" width="631" height="241" loading="lazy"><p>まあ大規模開発するなら、DFDのようなものは書き残しておいた方が良いですね。あるいは、コード解析してグラフ構造を図示するようなものを作るか。</p><h2 id="機能の量の割にコード量が少ない秘密"><a href="#機能の量の割にコード量が少ない秘密" class="headerlink" title="機能の量の割にコード量が少ない秘密"></a>機能の量の割にコード量が少ない秘密</h2><p>Recoilの場合は、すでに説明したように、ストアへの読み書きではストアの宣言だけをすればよく、ストアの内容変更のサンクなどを逐一実装する必要がない点がボイラープレートのコード量を減らしています。</p><p>サーバー通信に関して言えば、エラー処理、ローディング中かどうかの判断なども組み込まれた状態なのでエラー処理とか本流以外のコードが大幅に減ります。SWRを使えばコード量の増加ゼロでstale-while-revalidationという高速化＆自動更新の仕組みが得られます。</p><h2 id="サーバー実装でもこのアーキテクチャは使われるのか？"><a href="#サーバー実装でもこのアーキテクチャは使われるのか？" class="headerlink" title="サーバー実装でもこのアーキテクチャは使われるのか？"></a>サーバー実装でもこのアーキテクチャは使われるのか？</h2><p>サーバー実装の中でこれらの考え方が活用できるかというと、3つの視点があると思います。</p><p>１つ目は通常のController&#x2F;Handler&#x2F;Service(UseCase)&#x2F;Repositoryといったよくあるウェブフレームワークの構成上で活用できるかどうかです。ここに関してはまず使えないでしょう。フロントから送られてくる情報をもとにクエリーを組み立ててDBアクセスして返すだけですので、リアクティブな層を作ってやりとりをするのはCPUと電力の無駄かと思います。</p><p>2つ目はチャットなどのリアルタイムの同期処理で、この場合はオンメモリで状態を持ち続けていてやり取りをするのでリアクティブな仕組みがあると助かる気がします。複数繋がっているウェブフロントエンドに的確に情報伝達させる仕組みとか、だいたい毎回手作りになると思うので、リアクティブな考えは役にたつんじゃないかと思います。Go用のRecoilみたいなの作ってみたい気持ちがあります。</p><p>3つ目はウェブフロントエンドのリクエストを起点に、連鎖的にバッチ処理などを起動していくなど、1つのリクエストに閉じない連携では当然ありな気がします。もともとDFDもそちらからの由来なので、むしろこちらが本流で、そことシームレスにウェブフロントエンドも繋がっていくような設計になると面白そうだな、と思います。</p><h1 id="実装Tips"><a href="#実装Tips" class="headerlink" title="実装Tips"></a>実装Tips</h1><h2 id="フォームイベント処理"><a href="#フォームイベント処理" class="headerlink" title="フォームイベント処理"></a>フォームイベント処理</h2><p>フォームと関係ないロジックはがしがし繋いでいけば良いのですが、フォームと繋ぐところは多少コードが必要です。</p><p>フォームと繋げるのは<code>useState()</code>と基本的に同じです。atomを作って、それに対する書き込みイベントを呼ぶだけです。ただ、<code>useCallback()</code>でコールバックを作って変更処理を行う・・・みたいなのを何個もやるのは面倒なのでカスタムフックを1つ作りました。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> useRecoilWithReact&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>|<span class="built_in">boolean</span>&gt;(<span class="attr">state</span>: <span class="title class_">RecoilState</span>&lt;T&gt;): [T, <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> <span class="built_in">void</span>] &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setter] = <span class="title function_">useRecoilState</span>(state)</span><br><span class="line">  <span class="keyword">const</span> event = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      (setter <span class="keyword">as</span> (<span class="attr">v</span>: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span>)(e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      (setter <span class="keyword">as</span> (<span class="attr">v</span>: <span class="built_in">boolean</span>) =&gt; <span class="built_in">void</span>)(e.<span class="property">target</span>.<span class="property">checked</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [setter])</span><br><span class="line">  <span class="keyword">return</span> [value, event] <span class="keyword">as</span> [T, <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> <span class="built_in">void</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これがあれば、atomを作って、その値取得＆変更コールバックを取り出して、<code>&lt;input&gt;</code>に設定するところはかなり薄くできます。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> includesState = <span class="title function_">atom</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;includes&quot;</span>,</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">SideBar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//呼び出し</span></span><br><span class="line">  <span class="keyword">const</span> [includes, onChangeIncludes] = <span class="title function_">useRecoilWithReact</span>(includesState)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">className</span>=<span class="string">&quot;h-full basis-1/4 bg-amber-200 p-4 flex flex-col prose&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      :</span></span><br><span class="line"><span class="language-xml">      &#123;/*ここで設定*/&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;includes&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;onChangeIncludes&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      :</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="型変換"><a href="#型変換" class="headerlink" title="型変換"></a>型変換</h2><p>atomは型を決めたらそれと同じ型でないと入力ができません。effectで変換もできません。フォームは文字列で情報を扱うが、取り出す値は数値にしたい、というのはよくあると思いますが、その場合はフォームとやりとりする文字列のatomと、それを受けて数値に変換するselectorをペアにすればよさそうです。</p><p>実際に書いてみたコードでは無効な値の時の<code>null</code>も返すのでコードがちょっと複雑になっていますが、シンプルにするとこんな感じです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数値にできる文字以外がきたら過去の値を入れて元に戻すeffect。不正な文字を除外</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">keepNumberEffect</span>: <span class="title class_">AtomEffect</span>&lt;<span class="built_in">string</span>&gt; = <span class="function">(<span class="params">&#123;setSelf, onSet&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">onSet</span>(<span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(<span class="title class_">Number</span>(newValue))) &#123;</span><br><span class="line">      <span class="title function_">setSelf</span>(oldValue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// フォームから値を入れる方のatom</span></span><br><span class="line"><span class="keyword">const</span> raw = <span class="title function_">atom</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;raw&quot;</span>,</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">effects</span>: [keepNumberEffect]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 後続処理で利用する数値を返すselector</span></span><br><span class="line"><span class="keyword">const</span> numState = selector&lt;<span class="built_in">number</span>&gt;(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;num&quot;</span>,</span><br><span class="line">  <span class="attr">get</span>: <span class="function">(<span class="params">&#123;get&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(<span class="title function_">get</span>(rfcNumberFromRaw))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>こんな感じの構成ですね。全角半角変換とかも組み込んだりできますね。</p><img src="/images/20230629a/名称未設定ファイル-ページ2.drawio_2.png" alt="" width="399" height="201" loading="lazy"><h1 id="Recoilが安定版ではない問題"><a href="#Recoilが安定版ではない問題" class="headerlink" title="Recoilが安定版ではない問題"></a>Recoilが安定版ではない問題</h1><p>もっとも、Recoilはまだバージョンが0.7.7だし、リポジトリのorganizationがfacebookexperimentalだし、それが元で敬遠されたり、という話も聞きます。ただ、Reactも16.xになる前は0.16.xのままだったし、セマンティックバージョニングなにそれ？という世界であるし、APIもUNSTABLEなものは区別されていて、なおかつほぼデバッグ目的のものばかりなので、もう使ってもいいのでは？という気はしています。</p><h1 id="ReactiveXとの違い"><a href="#ReactiveXとの違い" class="headerlink" title="ReactiveXとの違い"></a>ReactiveXとの違い</h1><p>ReactiveXもリアクティブで、要素間のつながりをプログラミングする必要があります。すごい大量のデータが少しずつ流れてきてそれを間引く必要があるとか、途中で加工するとか、そいういうのに便利なオペレーターや関数はたくさんありますが、以前Angularで触った時は使いにくいしわかりにくいな、と思った記憶があり、同じリアクティブでもだいぶ体験が違うな、と思いました。改めてRecoilの使いやすさと比較して、ReactiveXを使いつつRecoilチックに使うには以下のような制約を加えればいい気がします。</p><ul><li>完了というステータスは使わない</li><li>流れる1つ1つのデータが完全なデータ(配列を分解して流したりはしない)という制約を課す</li><li>atomは<code>BehaviorSubject</code>を使って実現。next()で値を投入するだけ(他のものは使わない)しか値の投入は認めない</li><li>seledtorは<code>Subject</code>で、他の要素に<code>.pipe()</code>で繋いだ上で、<code>.subscribe()</code>に上流の値が変更されたときの処理を実装(selectorの<code>get</code>の処理)</li><li>selectorで上流の値が複数ある場合は<code>combineLatest().subscribe()</code>だけを使う</li></ul><p>これでだいぶ使い勝手が近づけられそうな気がします。もちろん、Suspense対応とかErrorBaundaryなどの機能はないので、ローディング中とかは別途作り込みが必要になりますが・・・rxjsを触ったことがありますが、ちょっとの違いでプログラミングのしやすさがだいぶ違うな、というのは印象的でした。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Reactでちょっと大規模な開発というと、たくさんの状態管理の仕組みが混ざりがちです。Recoilを使えば、既存のhooksと同じような構成の状態管理の仕組みを使いつつ、アプリケーション全体に簡単に展開できます。UIの状態管理も、ロジック内のデータの流れも、同じ仕組みの中で構成できるのは良いです。コンポーネントを跨いで状態のやりとりをするところでボイラープレートのバケツリレーコードや、中央集権のストアの読み書きをしなくても良くなります。</p><p>また、全部を同じ仕組みに載せたとしても、可視性・不可視性を考えて、exportするかしないかをきちんと定義すれば、そんなにスパゲティにならずに済みそうです。もちろん、DFDはきちんと書いてあげる方がさらに良いとは思います。hooksのstateを他のコンポーネントに渡したり、イベントで変更を行ったりするコードで、うっかり変更が無限ループになったりとかしていたのと比べると、トラブルは少ないんじゃないかな、と思います。</p><p>今回は小さいプログラムでしたが、大きなプロジェクトへの展開も問題なさそうです。ぜひ今後も使っていきたいと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
    <category term="Recoil" scheme="https://future-architect.github.io/tags/Recoil/"/>
    
    <category term="リアクティブプログラミング" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%96%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title> RFC閲覧補助ツールを作りました + リアクティブプログラミング</title>
    <link href="https://future-architect.github.io/articles/20230628a/"/>
    <id>https://future-architect.github.io/articles/20230628a/</id>
    <published>2023-06-27T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.140Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230628a/スクリーンショット_2023-06-08_20.11.21.png" alt="" width="1200" height="795" loading="lazy"><p>お仕事をしていて、たまにRFCを読みたくなることってよくあると思うのですが、読む対象のRFCがたくさんあると、どれから読めばいいのかな？読み落としたのはないのか？みたいなところが脳のワーキングメモリーから溢れて収集がつかなくなりがちなので、Graphvizで出力してRFCの関連を簡単に確認できるツールを作ってみました。</p><p>ソースコードは以下のところにあります。</p><p><a href="https://github.com/shibukawa/rfc-viewer/">https://github.com/shibukawa/rfc-viewer/</a></p><p>こちらのGitHub Pagesで触れるようになっています。</p><p><a href="https://shibukawa.github.io/rfc-viewer/">https://shibukawa.github.io/rfc-viewer/</a></p><p>使っている技術セットはこんな感じです。</p><ul><li>React + TypeScript</li><li>Vite.js</li><li>Tailwind CSS + DaisyUI</li><li>Recoil.js</li><li>d3-graphviz</li></ul><p>RFCを読むのも大事ですが、ちょっとRecoil.jsの素振りというか練習もする必要があって、それを兼ねて作ってみました。</p><h1 id="RFC-Viewerの使い方"><a href="#RFC-Viewerの使い方" class="headerlink" title="RFC-Viewerの使い方"></a>RFC-Viewerの使い方</h1><p>まず、RFCをリストアップしたい範囲があればfrom&#x2F;toに数値を入れます。例えばHTTPを調べる場合、　１９４５よりも古いものはないはずなので、そういう場合に使います。</p><p>起点となる用語をincludes(2段目)に入れます。それが含まれるRFCが選ばれます。3段目はexcludeで、この用語が含まれているRFCは除外されます。</p><p>最後にチェックボックスで、祖先や子孫を辿るか？というチェックボックスがあります。RFCには、updates&#x2F;obsoletesという項目があり、既存のRFCに機能追加を加えたり、既存のRFCを廃止して新しいバージョンのRFCを出す、ということができます。この情報を元にグラフ構造を作ります。</p><p>ただし、祖先と子孫の両方を辿るオプションを入れると、たまに関連が爆発して1000ぐらいのRFCが引っかかることがあります。DNSとかTLSみたいな、他のRFCから参照されまくっているものが見つかると、すごい数になってしまいます。</p><p>最後に生成ボタンを押すと、graphvizのソースを出力したり、ブラウザ上でレンダリングして見られます。いろいろいじってRFCライフにお役立ていただければと思います。</p><h1 id="リアクティブプログラミング"><a href="#リアクティブプログラミング" class="headerlink" title="リアクティブプログラミング"></a>リアクティブプログラミング</h1><p>React&#x2F;Vue&#x2F;Angularが三国志のように競っていた時代は、どれも同じようなモデルでした。コンポーネントという塊に対して、「状態」という色々な情報の塊が1つあり、それに対するデータの読み書きという世界観でした。ライフサイクルメソッドというものがあり、ステートの初期化を行い、イベントがあればステートを書き換え、最終的にそれが仮想DOMやら何やらの仕組みを使って画面に表示されます。</p><img src="/images/20230628a/スクリーンショット_2023-06-08_20.48.57.png" alt="スクリーンショット_2023-06-08_20.48.57.png" width="867" height="400" loading="lazy"><p>欠点としては、ステート管理のコードがコンポーネントと蜜結合されてしまうので、コンポーネントを分割しようとか、リファクタリングをするのは結構大変です。</p><p>コンポーネントは基本的に自分の親子としか会話できません。深い階層があるとバケツリレーが必要になり、コードが多くなってしまうのでそれを解決するための手法としてFluxという考え方がReactにより導入されました。このようなものはVueにもAngularにも導入されたりしました。Reduxが人気になりましたし、VueだとVuexとか人気ですよね。ただ、このようなグローバルな状態のストアも、基本的にでかい1つの箱（あるいはちょっとした階層）があり、そこへの読み書き、というところはコンポーネント側の思想と同様です。</p><img src="/images/20230628a/flux-diagram-white-background.png" alt="flux-diagram-white-background.png" width="1200" height="599" loading="lazy"><p>Reactは16.8になってhooksを導入しました。関数コンポーネントになってライフサイクルメソッドという考え方を完全に無くした世界を作ろうとしてます。<a href="https://react.dev/learn/lifecycle-of-reactive-effects#the-lifecycle-of-an-effect">新しくなったReactのドキュメント</a>でも、すべては副作用、という考え方を徹底しようとしています。ライフサイクルという縛りから離れて将来の最適化のために<a href="https://react.dev/blog/2022/03/29/react-v18#new-strict-mode-behaviors">StrictModeの場合はマウントとアンマウントを繰り返して、ライフサイクルメソッドの考え方で壊れやすいコードを実装しないようにさせよう、という挙動</a>が18で導入されました。</p><p>Reactの関数コンポーネントで実装すると、コンポーネントの中は「大きな1つの状態」ではなくて、小さい状態がたくさんある状態になります。イベント、他の状態の変更（propsの変更も含む)で副作用が発生し、またそれが状態を変更する・・・という構造になります。状態と副作用のセットをカスタムフックとして切り出して再利用もできるようになりました。</p><img src="/images/20230628a/スクリーンショット_2023-06-08_20.49.30.png" alt="スクリーンショット_2023-06-08_20.49.30.png" width="842" height="490" loading="lazy"><p><a href="https://future-architect.github.io/articles/20200501/">ReduxもTypeScript対応やこのhooksの副作用と繋ぎやすいような拡張がされたり</a>、それに合わせた進化はしていましたが、一方でmetaは新しい考え方の状態管理のライブラリである<a href="https://recoiljs.org/">Recoil</a>をリリースしています。</p><p>Recoilは、React Hooksの世界観をコンポーネントを跨いで使えるようにしたものに思います。atom, selectorという2つの要素でグラフ構造を作っていきます。<a href="https://future-architect.github.io/articles/20230215a/">Recoilドキュメント入門</a>というエントリーを前に書きましたが、コンポーネント間の情報伝達で、属性やイベントで行わずに、単に状態を定義しておき、exportしておくだけでコンポーネントを跨いだ状態の共有が行えます。</p><p>RFC-Viewerでは、サイドバーで検索の情報を入力させます。これはRecoilの状態管理の要素である<a href="https://github.com/shibukawa/rfc-viewer/blob/main/src/components/SideBar.tsx#L78">selector</a>にしています。この情報を使ってリアルタイムに検索を行わせることも可能です。実際、ソース生成までは直接は行っていませんが、検索ロジックを起動してヒット件数をボタン上に表示しています。</p><p>クリーンアーキテクチャは情報の流れを一方通行にするためにレイヤーを作って・・・という感じですが、すべての情報を依存グラフ上に表現し切っている感じですね。UI上のインタラクションも、UIが生成したデータをロジックが処理するのも、その結果を画面に表示するのも、すべてこの依存グラフ上でリアクティブに解決されていく、というのはなかなかおもしろ体験です。他のコンポーネントに伝達するためにpropsやイベントなどの外部I&#x2F;Fを作り込むこともなく、状態管理の副作用のコードで頑張る量も体感で1&#x2F;3ぐらいになりました。令和の時代になってようやく、亡霊のように生き続ける20年前のJ2EEとかのMVCやらレイヤーやらの考え方から、新しいアーキテクチャに一新されるチャンスなのでは、というのを感じました。</p><p>もっとも、Recoilのみがこの思想で作り切っており、他のフレームワークではまだまだコンポーネントの外までリアクティブを活用はできません。そのため、今すぐ、ウェブ開発全体がこの方向性になっていくか、というとならないとは思いますが、未来の（だと自分が信じる）アーキテクチャについて考えるのは頭の体操になりますね。いちおう、Angularが統合しているrxjsはリアクティブなフレームワークですが、Suspense対応なども含めて、Recoilの方が圧倒的に使いやすいです。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>RFCを読むための補助ツールを作りつつ、次世代のアーキテクチャをRecoilで体験しました。長くなったのでRecoilのTIPSはまた今度書こうと思います。</p><p>なお、<a href="https://en.wikipedia.org/wiki/Reactive_programming">Reactive Programming</a>という項目は日本語にはないですが英語のWikipediaにはあります。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230628a/スクリーンショット_2023-06-08_20.11.21.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;795&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Web" scheme="https://future-architect.github.io/tags/Web/"/>
    
    <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
    <category term="daisyUI" scheme="https://future-architect.github.io/tags/daisyUI/"/>
    
    <category term="Recoil" scheme="https://future-architect.github.io/tags/Recoil/"/>
    
    <category term="RFC" scheme="https://future-architect.github.io/tags/RFC/"/>
    
  </entry>
  
  <entry>
    <title>Argo CDを体感してみる</title>
    <link href="https://future-architect.github.io/articles/20230627a/"/>
    <id>https://future-architect.github.io/articles/20230627a/</id>
    <published>2023-06-26T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.139Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230627a/argo-horizontal-color.png" alt="" width="1200" height="557" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG岸下です。<a href="/articles/20230619a/">CNCF連載</a>6日目になります。<br>業務では主にCIとしてJenkinsを利用しているのですが、前々から気になっていたArgo CDを本連載を機に体感してみたいと思います。</p><h2 id="CI-x2F-CD-is-何？"><a href="#CI-x2F-CD-is-何？" class="headerlink" title="CI&#x2F;CD is 何？"></a>CI&#x2F;CD is 何？</h2><img src="/images/20230627a/9058bf16-0f25-0dbb-8596-fb0f2269e14e.png" alt="" width="600" height="233" loading="lazy"><p>画像引用元: <a href="https://cd.foundation/blog/2020/09/17/ci-cd-patterns-and-practices/">CD Foundation - CI&#x2F;CD Patterns and Practices</a></p><p>皆さんは、コードの作成からデプロイまでの流れをどのように行っていますか？</p><p>エンジニアは効率化が大好きで、プロセスが常に最適化されるような試行錯誤を常日頃行っております。その結果、過去には手作業で行われていたテストやデプロイが自動化され、開発者はより創造的な作業に集中できるようになりました。また、画像のようなDevOpsの潮流もあり、Dev（開発）とOps（運用）を合体させて、ユーザーへクイックにソフトウェアをデリバリーすることが要求されるようになったことも背景にあります。</p><p>その変革の一環として注目されているのが、CI&#x2F;CD（Continuous Integration &#x2F; Continuous Delivery）です。CI&#x2F;CDは、エラーの早期発見や迅速な新機能のリリースを可能にするだけでなく、開発者が直面するストレスを減らし、創造性を高めることを目指しています。</p><p>Continuous Integration（継続的インテグレーション）は、コードの変更を頻繁にメインラインにマージするプラクティスです。これにより、バグやコンフリクトを早期に検出し、修正を容易にします。一方、Continuous Deployment（継続的デプロイメント）は、ビルドとテストが成功したコードの変更を自動的に本番環境にデプロイします。これにより、新しい機能や修正を素早くユーザーに提供することが可能となります。</p><p>開発プロセスの自動化が求められるようになった背景には、複数の開発者が同時に取り組む大規模なプロジェクトが増え、バグやエラーを早期に発見して修正し、新機能を安全かつ迅速にリリースする必要性が高まったことがあります。</p><p>参考: <a href="https://www.redhat.com/ja/topics/devops/what-is-ci-cd">Red Hat - CI&#x2F;CDとは</a></p><h2 id="Argoって？"><a href="#Argoって？" class="headerlink" title="Argoって？"></a>Argoって？</h2><p>このような状況を背景に、CI&#x2F;CDを実現する様々なツールが登場しました。</p><ul><li><a href="https://www.jenkins.io/">Jenkins</a></li><li><a href="https://www.travis-ci.com/">Travis CI</a></li><li><a href="https://circleci.com/ja/">CircleCI</a></li><li><a href="https://www.gitlab.jp/stages-devops-lifecycle/continuous-integration/">GitLab</a></li><li><a href="https://github.com/features/actions">GitHub Actions</a></li></ul><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>弊ブログでも過去にCI&#x2F;CDツールを取り上げておりますので、ぜひ参考にして下さい。</p><ul><li><a href="https://future-architect.github.io/tags/CI-CD/">Future Tech Blog - CI&#x2F;CD関連の記事</a></div></li></ul><p>こうした中でクラウドネイティブなアプリケーションの開発・デプロイメントと、そのためのツールと環境の必要性として生まれたのが<a href="https://argoproj.github.io/">Argo</a>になります。Argoは、最初からKubernetesを基盤として設計されています。KubernetesのAPIを直接使用し、Kubernetes上での実行を自然にサポートしています。</p><p>また、 <strong>「Get More Done with Kubernetes」</strong> を掲げていることからも、Kubernetesという現代のクラウドネイティブ環境を最大限活用することを目指し、自動化・効率化を更に進化させる手段として開発されていることがわかります。</p><h3 id="Argoの核となる機能"><a href="#Argoの核となる機能" class="headerlink" title="Argoの核となる機能"></a>Argoの核となる機能</h3><p>ArgoはArgo CDを含めて4つの主要な機能を提供しております。</p><h4 id="Argo-CD"><a href="#Argo-CD" class="headerlink" title="Argo CD"></a>Argo CD</h4><p>GitOpsの理念を追求するためのCDツールです。GitリポジトリをSingle Source of Truthと位置づけ、デプロイメントの状態が常にGitの内容と同期していることを保証します。</p><h4 id="Argo-Workflows"><a href="#Argo-Workflows" class="headerlink" title="Argo Workflows"></a>Argo Workflows</h4><p>Kubernetes上で一連のタスクを連携させ、複雑なワークフローを作成、実行、管理するためのツールです。例えば、機械学習のパイプラインやデータ処理のワークフローなどを効率的に構築できます。</p><h4 id="Argo-Events"><a href="#Argo-Events" class="headerlink" title="Argo Events"></a>Argo Events</h4><p>イベント駆動型のワークフローを支えるツールです。具体的には、Webhookやメッセージキューなどの外部イベントに反応して、ワークフローやKubernetesリソースを自動的に起動します。</p><h4 id="Argo-Rollouts"><a href="#Argo-Rollouts" class="headerlink" title="Argo Rollouts"></a>Argo Rollouts</h4><p>より高度なデプロイメント戦略を実装するためのツールです。例えば、カナリアリリースやBlue&#x2F;Green DeploymentなどのProgressive Delivery戦略を簡単に実行できます。</p><p>本記事ではArgo CDを触ってみようと思います。</p><h2 id="Argo-CDを触ってみる"><a href="#Argo-CDを触ってみる" class="headerlink" title="Argo CDを触ってみる"></a>Argo CDを触ってみる</h2><img src="/images/20230627a/453edc7e-902f-88e1-cafc-cfddbd829737.png" alt="" width="1200" height="567" loading="lazy"><h3 id="Kubernetesクラスタの準備"><a href="#Kubernetesクラスタの準備" class="headerlink" title="Kubernetesクラスタの準備"></a>Kubernetesクラスタの準備</h3><p>minikubeやkind、もしくはGoogle CloudのGKEなどを利用してクラスタを構築します。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kind</span></span><br><span class="line">kind create cluster</span><br><span class="line"><span class="comment"># minikube</span></span><br><span class="line">minikube start</span><br></pre></td></tr></table></figure><h3 id="Argo-CDとArgo-CD-CLIのインストール"><a href="#Argo-CDとArgo-CD-CLIのインストール" class="headerlink" title="Argo CDとArgo CD CLIのインストール"></a>Argo CDとArgo CD CLIのインストール</h3><p>以下のコマンドでArgo CDとArgo CD CLIをインストールします。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Argo CDをインストールする前に、Namespace:argocdを作る必要がある</span></span><br><span class="line">kubectl create namespace argocd</span><br><span class="line"><span class="comment"># Argo CDのインストール</span></span><br><span class="line">kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml</span><br><span class="line"><span class="comment"># Argo CD CLIのインストール</span></span><br><span class="line"><span class="comment"># MacOSの場合</span></span><br><span class="line">brew install argoproj/tap/argocd</span><br><span class="line"><span class="comment"># Linuxの場合</span></span><br><span class="line">curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 &amp;&amp; <span class="built_in">chmod</span> +x /usr/local/bin/argocd</span><br><span class="line"><span class="comment"># Argo CD CLIインストール後の確認</span></span><br><span class="line">argocd version</span><br><span class="line"><span class="comment"># 以下が表示されればOK</span></span><br><span class="line">argocd: v2.7.5+a2430af</span><br><span class="line">  BuildDate: 2023-06-16T15:00:03Z</span><br><span class="line">  GitCommit: a2430af1c356b283e5e3fc5bde1f5e2b5199f258</span><br><span class="line">  GitTreeState: clean</span><br><span class="line">  GoVersion: go1.19.10</span><br><span class="line">  Compiler: gc</span><br><span class="line">  Platform: linux/amd64</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Argo CDのインストールができたらサーバーへアクセスしてみましょう。<br>以下のコマンド実行後、<code>https://localhost:8080</code>からダッシュボードへアクセスできます。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Argo CDのServiceをポートフォワード</span></span><br><span class="line">kubectl port-forward svc/argocd-server -n argocd 8080:443</span><br></pre></td></tr></table></figure><img src="/images/20230627a/0a5fd295-1f5b-a0b3-3057-19289f6de456.png" alt="" width="1200" height="567" loading="lazy"><p>Usernameは<code>admin</code>、Passwordは以下のコマンドから取得できます。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Secretからパスワードを取得</span></span><br><span class="line">kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=<span class="string">&quot;&#123;.data.password&#125;&quot;</span> | <span class="built_in">base64</span> -d</span><br></pre></td></tr></table></figure><h3 id="アプリケーションのデプロイ"><a href="#アプリケーションのデプロイ" class="headerlink" title="アプリケーションのデプロイ"></a>アプリケーションのデプロイ</h3><p>今回はArgo CDが公開している下記のサンプルリポジトリをForkしてデプロイできるように設定していきます。</p><p><a href="https://github.com/argoproj/argocd-example-apps">https://github.com/argoproj/argocd-example-apps</a></p><p>以下のコマンドでアプリケーションをArgo CDへ登録します。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">argocd app create guestbook \</span><br><span class="line">--repo https://github.com/&lt;YOUR_GITHUB_ACCOUNT&gt;/argocd-example-apps.git \</span><br><span class="line">--path guestbook \</span><br><span class="line">--dest-server https://kubernetes.default.svc \</span><br><span class="line">--dest-namespace default \</span><br><span class="line">--revision master \</span><br><span class="line">--sync-policy automated</span><br></pre></td></tr></table></figure><ul><li><code>--repo</code>: Argo CDに登録するリポジトリ。</li><li><code>--path</code>: リポジトリ内に存在するアプリケーションのパス。</li><li><code>--dest-server</code>: クラスタ内部のPodがKubernetes APIに接続するためのアドレス。</li><li><code>--dest-namespace</code>: デプロイ先のNamespace。</li><li><code>--revision</code>: Argo CDで監視するブランチ。今回の場合、masterブランチに変更があった場合、CDが走る。</li><li><code>--sync-policy</code>: リポジトリとの同期オプション。<code>automated</code>で自動で同期されるようになる。</li></ul><p>上記コマンド実行後、以下のようにアプリケーションが登録されていればOKです。<br>アプリケーション内の「SYNC」→「SYNCHRONIZE」からアプリケーションをデプロイしてみましょう。</p><img src="/images/20230627a/5041d953-b0b0-c598-4a07-74e8aeb05657.png" alt="" width="1200" height="572" loading="lazy"><p>アプリケーションのデプロイ後、アプリケーションをクリックするとそれぞれのマニフェストの関係がグラフ化されます。マニフェストはそれぞれ独立して書くこと多く、マニフェスト同士の関係がうまく想像できなくなることがよくあるのですが、このように可視化されるとわかりやすいですね。</p><p>さらに、SYNCされた際の情報やヘルスチェック情報なども表示されています。</p><img src="/images/20230627a/22ca6257-691e-5964-e647-a1129aefb76d.png" alt="" width="1200" height="454" loading="lazy"><p>デプロイされたアプリケーションにもアクセスして動作確認をしてみます。</p><p>以下のコマンドを実行後、<code>http://localhost:8081</code>にアクセスするとアプリケーションを見ることができます。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># guestbookアプリケーションのServiceをポートフォワード</span></span><br><span class="line">kubectl port-forward svc/guestbook-ui -n default 8081:80</span><br></pre></td></tr></table></figure><img src="/images/20230627a/65222dee-9cfb-cfb8-dc3f-84ae1ee2d025.png" alt="" width="1021" height="282" loading="lazy"><h3 id="CDを走らせてみる"><a href="#CDを走らせてみる" class="headerlink" title="CDを走らせてみる"></a>CDを走らせてみる</h3><p>監視先のリポジトリのマニフェストファイルを変更し、CDを走らせてみます。</p><p>今回は、<code>guestbook/guestbook-ui-deployment.yaml</code>のimage versionを変更します。適当なブランチを切り、プルリクエストを投げてApprove後、マージというような状態を想定してみましょう。（もちろん、masterブランチにそのままPushしてもCDは走ってくれます。）</p><div class="note warn" style="background: #fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>Forkしたリポジトリ内でプルリクエストを出す際はマージ先に<strong>Fork元を指定できてしまう</strong>ため、<br>間違えてFork元にPRを作成しないように気を付けてください。</p></div><figure class="highlight diff"><figcaption><span>guestbook/guestbook-ui-deployment.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line"><span class="deletion">-      - image: gcr.io/heptio-images/ks-guestbook-demo:0.2</span></span><br><span class="line"><span class="addition">+      - image: gcr.io/heptio-images/ks-guestbook-demo:0.1</span></span><br></pre></td></tr></table></figure><img src="/images/20230627a/b7d69cb1-efc3-6a65-8ffc-dba93b3e2605.png" alt="" width="1200" height="241" loading="lazy"><p>Argo CDでは<code>--sync-policy</code>を<code>automated</code>にしている場合、デフォルトで180秒毎にSync先のリポジトリにポーリングしに行くので、少し待っていると「LAST SYNC」の箇所が最新化され、アプリも以下の様なversion 0.1のimageがデプロイされます。</p><img src="/images/20230627a/b0feb5fc-bc44-9fd1-9bfe-c4e35dccdd15.png" alt="" width="1030" height="269" loading="lazy"><h3 id="環境差分を考慮する"><a href="#環境差分を考慮する" class="headerlink" title="環境差分を考慮する"></a>環境差分を考慮する</h3><p>実運用を考えるうえで、デプロイ先のdev&#x2F;stg&#x2F;prdといった環境の違いを考慮する必要があります。</p><p>例えば、devであればPod数1、stg&#x2F;prdはPod数3にしたり、dev&#x2F;stg&#x2F;prd毎でサービス公開先のドメインを変更したりするなどアプリケーションのインフラとなる以上、1つのファイルで管理することはほぼ不可能です。デプロイの度に変数を変更するという運用で頑張ろうスタイルもありますが、人間はミスをする生き物である以上、その運用は確実に破綻します。</p><p>Argo CDではkubectlだけでなく、下記のツールを利用することで環境差分を考慮したデプロイが可能となっております。</p><ul><li>Kustomize<ul><li>「kustomization.yaml」または「kustomization.yml」というファイルがある場合。</li></ul></li><li>Ksonnet<ul><li>「app.yaml」と「components&#x2F;params.libsonnet」という2つのファイルがある場合。</li></ul></li><li>Helm<ul><li>「Chat.yaml」というファイルがある場合。</li></ul></li><li>kubectl<ul><li>上記以外の場合。</li></ul></li></ul><p>参考：<a href="https://book.impress.co.jp/books/1120101027">Kubernetes CI&#x2F;CDパイプラインの実装</a></p><p>今回はKustomizeを利用してみます。</p><h3 id="Kustomize"><a href="#Kustomize" class="headerlink" title="Kustomize"></a>Kustomize</h3><img src="/images/20230627a/a3d4793e-5ad7-96c3-c632-abf75a2a7c74.png" alt="" width="1200" height="365" loading="lazy"><p>Kustomizeの構文の基本は、変更元のマニフェストファイルに対して変更箇所だけを記載したマニフェストを足す形でデプロイ用のマニフェストファイルを作成します。</p><p>kubectl v1.14以降であれば、Kustomizeをサポートしているため特にインストールの必要はありません。</p><p>今回利用している<a href="https://github.com/argoproj/argocd-example-apps">アプリケーション</a>でもKustomizeのサンプルは付いているのですが、実運用をシミュレーションするうえで以下のようなフォルダ構成に変更します。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kustomize-guestbook</span><br><span class="line">├── base</span><br><span class="line">│   ├── guestbook-ui-deployment.yaml</span><br><span class="line">│   ├── guestbook-ui-svc.yaml</span><br><span class="line">│   └── kustomization.yaml</span><br><span class="line">└── overlays</span><br><span class="line">    ├── dev</span><br><span class="line">    │   └── kustomization.yaml</span><br><span class="line">    └── stg</span><br><span class="line">        └── kustomization.yaml</span><br></pre></td></tr></table></figure><p><code>base</code>配下には基本となるマニフェストファイルを配置し、<code>overlays</code>配下には環境識別子毎の差分を格納したkustomizeファイルを配置します。<code>base</code>のkustomization.yamlファイルの中身は以下のようになります。</p><figure class="highlight yaml"><figcaption><span>base/kustomization.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kustomize.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Kustomization</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">guestbook-ui-deployment.yaml</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">guestbook-ui-svc.yaml</span></span><br></pre></td></tr></table></figure><p>また、<code>overlays</code>配下は以下のようになります。</p><figure class="highlight yaml"><figcaption><span>overlays/dev/kustomization.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kustomize.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Kustomization</span></span><br><span class="line"><span class="attr">namePrefix:</span> <span class="string">dev-</span></span><br><span class="line"><span class="attr">commonLabels:</span></span><br><span class="line">  <span class="attr">env:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">../../base</span></span><br></pre></td></tr></table></figure><p>stg側のkustomization.yamlはdevの箇所がstgに変わるだけで、その他は違いがありません。<br>Gitリポジトリ内に<code>dev</code>と<code>stg</code>のブランチを作成後、それぞれをArgo CDにデプロイします。<br>今回はどちらも同じクラスターにデプロイしていますが、実運用上だと環境ごとに異なるクラスターが用意されていることが想定されます。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">env</span> <span class="keyword">in</span> dev stg; <span class="keyword">do</span></span><br><span class="line">argocd app create <span class="variable">$env</span>-guestbook \</span><br><span class="line">--repo https://github.com/&lt;YOUR_GITHUB_ACCOUNT&gt;/argocd-example-apps.git \</span><br><span class="line">--path kustomize-guestbook/overlays/<span class="variable">$env</span> \</span><br><span class="line">--dest-server https://kubernetes.default.svc \</span><br><span class="line">--dest-namespace <span class="variable">$env</span> \</span><br><span class="line">--revision <span class="variable">$env</span> \</span><br><span class="line">--sync-policy automated</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>デプロイ後、ダッシュボードからそれぞれを確認すると各マニフェストの名前に環境識別子のプレフィクスがついていることがわかります。（以下はSTG）</p><img src="/images/20230627a/208ed0f6-7ae5-0f8f-70df-55af1796ad77.png" alt="" width="1200" height="230" loading="lazy"><p>このように、環境を考慮したCDができるようになりました。</p><p>今回はArgo CDを体感するのみでしたが、imageのversionやハッシュを置き換えたり、別のdeployment.yamlを用意しておいてPatch機能を使ってマニフェストの中身を置き換えたりすることもできます。</p><p>また、運用に合わせてHelmやKsonnetの方が適用しやすいこともあるので、実情に合わせたデプロイツールの選択が大切になります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事ではArgo CDの特性と利便性について説明し、簡単なハンズオンをやってみました。UIが非常に見やすく、マニフェストの関係同士を可視化してくれるなど、Kubernetesを利用するにあたって非常に便利なツールだなと実感しました。</p><p>本連載ではCNCFが公認したクラウドネイティブなソフトウェアを取り扱ってきました。ただ、Kubernetesなんかは響きはカッコいいものの取り扱いが難しいと感じることもありますが、CNCF（Cloud Native Computing Foundation）では、それらを導入するハードルを下げる取り組みが多々行われています。</p><p>特に、ArgoのようなCNCFが公認したGraduatedと認定したツール群はKubernetesの難解さを緩和し、その真の力を引き出す一助となります。また、これらのツールはクラウドネイティブのエコシステム全体を理解することにも役立ちます。</p><p>またGraduatedなプロジェクトだけでなく、本連載でも取り上げたIncubating&#x2F;Sandboxのような期待値の高いプロジェクトも多く存在します。この連載を通じて、クラウドネイティブに興味を持った方はぜひ<a href="https://www.cncf.io/projects/">CNCF</a>のプロジェクトを覗き、一緒にクラウドネイティブの未来を切り開いていきましょう。</p><p>アイキャッチ画像には<a href="https://cncf-branding.netlify.app/projects/argo/">CNCF公式のArgoロゴ</a>を利用させていただいております。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230627a/argo-horizontal-color.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;557&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</summary>
        
      
    
    
    
    <category term="DevOps" scheme="https://future-architect.github.io/categories/DevOps/"/>
    
    
    <category term="CI/CD" scheme="https://future-architect.github.io/tags/CI-CD/"/>
    
    <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
    <category term="ArgoCD" scheme="https://future-architect.github.io/tags/ArgoCD/"/>
    
    <category term="Kustomize" scheme="https://future-architect.github.io/tags/Kustomize/"/>
    
  </entry>
  
  <entry>
    <title>Cloud Run に ko と skaffold を使ってデプロイまでやってみる</title>
    <link href="https://future-architect.github.io/articles/20230626a/"/>
    <id>https://future-architect.github.io/articles/20230626a/</id>
    <published>2023-06-25T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！<br>TIG コアテクチームの川口です。本記事は、<a href="/articles/20230619a/">CNCF連載</a> の5回目の記事になります。</p><p>本記事では、CNCF の Knative を基盤として利用している Cloud Run と CNCF の各種ビルドツール ko, skaffold、Cloud Deploy を用いたうえで、アプリケーションのビルドからデプロイまでを行います。</p><h2 id="扱う技術要素"><a href="#扱う技術要素" class="headerlink" title="扱う技術要素"></a>扱う技術要素</h2><p>今回は、合計5つの技術要素を扱います。</p><p>全体感を掴むため、それぞれの技術とそれらの関連について図示します。</p><img src="/images/20230626a/image.png" alt="image.png" width="1166" height="788" loading="lazy"><h3 id="Cloud-Run-（Knative）"><a href="#Cloud-Run-（Knative）" class="headerlink" title="Cloud Run （Knative）"></a>Cloud Run （Knative）</h3><p><a href="https://cloud.google.com/run"><strong>Cloud Run</strong></a> は、Google Cloud におけるコンテナベースのサーバーレスコンピューティングサービスとしてよく知られているものかと思います。こちらは、基盤として <a href="https://www.cncf.io/projects/knative/"><strong>Knative</strong></a> を採用しています。</p><p>この Knative は 2022年の3月に CNCF の Incupating プロジェクトとして承認されており、Kubernetes 上でサーバーレスアプリケーションを構築するためのオープンソースプロジェクトとなっています。詳細に関しては、 <a href="https://knative.dev/docs/concepts/#knative-serving">ドキュメント</a> を参照ください。</p><p>今回は、この Cloud Run に Go 製アプリケーションをデプロイしていこうと思います。</p><h3 id="ko"><a href="#ko" class="headerlink" title="ko"></a>ko</h3><p><a href="https://www.cncf.io/projects/ko/">ko</a> は、Go のコンテナイメージを Dockerfile 無しに簡単にビルドすることができるツールです。また、2022年の12月に CNCF の Sandbox プロジェクトとして承認されています。</p><p>「Dockerfile 無しに」という言葉だと、2018年10月に Incubating プロジェクトとして承認された <a href="https://www.cncf.io/projects/buildpacks/">Buildpacks</a> が想起されますが、 <a href="https://cloud.google.com/blog/ja/products/containers-kubernetes/ship-your-go-applications-faster-cloud-run-ko">こちらの記事</a> でそちらとの比較が行われています。Buildpacks では、Go 以外にも Java・Node・Python 等といった言語がビルドができるという差異がありますが、今回は Go を扱うということもあり ko を利用したいと思います。</p><h3 id="Skaffold"><a href="#Skaffold" class="headerlink" title="Skaffold"></a>Skaffold</h3><p><a href="https://skaffold.dev/docs/">Skaffold</a> は、コンテナベース（特に Kubernetes アプリケーション）の継続的な開発を容易にするコマンドラインツールです。ビルド・デプロイ・テストといった CI 上で扱うような各種機能がいくつか実装されていたり、本記事では扱いませんがローカル開発の際にも、<a href="https://skaffold.dev/docs/workflows/dev/">開発時に便利となるローカルでのアプリケーション実行</a> も行えます。</p><p><strong>また後述のデプロイ時に利用する Cloud Deploy では、Skaffold を扱うことが必須となっています。</strong></p><p>先述のサービスとの連携といった点では以下のとおりよさそうな感じです。</p><ul><li>Cloud Run とは、 <a href="https://cloud.google.com/run/docs/reference/yaml/v1">yaml で宣言的に記述する</a> 機能を用いることで連携できます。<ul><li>ref: <a href="https://skaffold.dev/docs/deployers/cloudrun/">https://skaffold.dev/docs/deployers/cloudrun/</a></li></ul></li><li>ビルド時には先述の ko とも連携を行えます。<ul><li>ref: <a href="https://skaffold.dev/docs/builders/builder-types/ko/">https://skaffold.dev/docs/builders/builder-types/ko/</a></li></ul></li><li>（Cloud Run を扱う上では、生 yaml でなくても必要に応じて、<a href="https://helm.sh/">helm</a> や、<a href="https://kustomize.io/">kustomize</a> 等も扱えます！）<ul><li>ref: <a href="https://skaffold.dev/docs/renderers/helm/">https://skaffold.dev/docs/renderers/helm/</a></li><li>ref: <a href="https://skaffold.dev/docs/renderers/kustomize/">https://skaffold.dev/docs/renderers/kustomize/</a></li></ul></li></ul><p>その他の詳細に関しては、<a href="https://skaffold.dev/docs/">ドキュメント</a> を参照ください。</p><h3 id="Artifact-Registry"><a href="#Artifact-Registry" class="headerlink" title="Artifact Registry"></a>Artifact Registry</h3><p><a href="https://cloud.google.com/artifact-registry/docs/overview">Artifact Registry</a> は、Google Cloud におけるマネージドのアーティファクト管理サービスです。</p><p>Docker コンテナイメージのほか、Java・Node・Python といった各種言語のパッケージも保存・配信することができます。</p><p>今回は、先述の ko・Skaffold を用い、この Artifact Registry にて Docker コンテナイメージを管理してもらうことにします。</p><h3 id="Cloud-Deploy"><a href="#Cloud-Deploy" class="headerlink" title="Cloud Deploy"></a>Cloud Deploy</h3><p><a href="https://cloud.google.com/deploy/docs/overview">Cloud Deploy</a> は、Google Cloud 上で CD を行うためのサービスです。</p><p>先述の通り Cloud Deploy では Skaffold を扱うことは必須としており、 <a href="https://cloud.google.com/deploy/docs/using-skaffold">ドキュメント</a> でも、Skaffold を併用する方法について言及しています。現状は、GKE・Cloud Run・Anthos にてデプロイを行えるようで、また最近 preview ではありますが、 <a href="https://cloud.google.com/deploy/docs/deployment-strategies/canary">カナリアデプロイ</a> も行えるようになっています。</p><p>Cloud Deploy を用いたデプロイの流れとしては、ざっくりと以下のようなものになっています。（太字部分は、Cloud Deploy 内で扱っている用語です。）</p><ol><li>事前に <strong>デリバリーパイプライン</strong> （デプロイ先となる <strong>ターゲット</strong> や、デプロイの手順についてまとめたもの。）を yaml を記載して作成する</li><li>アプリケーションを Artifact Registry 等に保存する</li><li>いくつか（1つでも可。）の保存したアプリケーションを <strong>リリース</strong> という単位にまとめる</li><li><strong>リリース</strong> を <strong>ターゲット</strong> にロールアウトする</li><li>問題が発生したら、任意の <strong>リリース</strong> にロールバックする</li><li>問題が発生しなかったら、次の <strong>ターゲット</strong> に <strong>プロモーション</strong> をする</li></ol><p>この辺の用語は、なかなかとっかかりしづらいところがありますが <a href="https://cloud.google.com/deploy/docs/terminology">こちら</a> にまとまって説明がされているので、困ったら参照するとよさそうです。</p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>それでは次の手順でさっそく始めていきます。</p><ol><li>Go アプリケーションの作成。</li><li>コンテナイメージのプッシュ。</li><li>Cloud Deploy でデプロイ。</li></ol><h1 id="Go-アプリケーションの作成"><a href="#Go-アプリケーションの作成" class="headerlink" title="Go アプリケーションの作成"></a>Go アプリケーションの作成</h1><p>Hello World を返すような API を v1・v2 として作成していきます。</p><p>この記事での成果物は、 <a href="https://github.com/kawaguchisan-sk/cloud-run-sample">https://github.com/kawaguchisan-sk/cloud-run-sample</a> にて公開しています。本記事で行う各種コマンドも、Makefile 上に記載しているので参考ください。</p><h2 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Go</span></span><br><span class="line">$ go version</span><br><span class="line">go version go1.20.5 darwin/arm64</span><br></pre></td></tr></table></figure><h2 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h2><p>以下のように 8080 ポートをリッスンして、”&#x2F;“ にアクセスされたら、”Hello World v1!” を返すものとします。</p><p>今回カナリアデプロイを後程ためすので、2つの version のアプリとして <code>app/v1</code>・<code>app/v2</code> の二つ分作っておきましょう。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, HelloServer)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloServer</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Hello World v1!（or v2）&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="コンテナイメージのプッシュ"><a href="#コンテナイメージのプッシュ" class="headerlink" title="コンテナイメージのプッシュ"></a>コンテナイメージのプッシュ</h1><p>それでは先の手順で作成した Go アプリケーションを ko と Skaffold を用いてコンテナイメージにして Artifact Registry にプッシュします。</p><h2 id="Prerequisite-1"><a href="#Prerequisite-1" class="headerlink" title="Prerequisite"></a>Prerequisite</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （ko）</span></span><br><span class="line">※ Skaffold の機能を用いるため、特別 ko をインストールする必要はありません。</span><br><span class="line"></span><br><span class="line"><span class="comment"># Skaffold</span></span><br><span class="line">$ skaffold version</span><br><span class="line">v2.3.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># gcloud</span></span><br><span class="line">$ gcloud version</span><br><span class="line">Google Cloud SDK 430.0.0</span><br></pre></td></tr></table></figure><p>またあらかじめ Artifact Registry を作成する必要があります。今回は、gcloud コマンドでさくっと作ってしまいましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud artifacts repositories create hello-world \</span><br><span class="line">    --location=asia-northeast1 \</span><br><span class="line">    --repository-format=docker</span><br></pre></td></tr></table></figure><h2 id="Skaffold-を用いたコンテナイメージのプッシュ"><a href="#Skaffold-を用いたコンテナイメージのプッシュ" class="headerlink" title="Skaffold を用いたコンテナイメージのプッシュ"></a>Skaffold を用いたコンテナイメージのプッシュ</h2><p>まずは以下のようにして、<code>skaffold_v1.yaml</code>・<code>skaffold_v2.yaml</code> を作成します。<br>（本記事では触れませんが、<a href="https://skaffold.dev/docs/environment/profiles/">Profiles 機能</a> を使うとより dry に書くこともできます。）</p><figure class="highlight yaml"><figcaption><span>skaffold_v1 (or v2).yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">skaffold/v3alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="comment"># ビルド時の設定</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="comment"># イメージビルド時のタギングポリシー</span></span><br><span class="line">  <span class="comment"># ref: https://skaffold.dev/docs/taggers/</span></span><br><span class="line">  <span class="attr">tagPolicy:</span></span><br><span class="line">    <span class="attr">customTemplate:</span></span><br><span class="line">      <span class="attr">template:</span> <span class="string">&quot;v1（or v2）&quot;</span></span><br><span class="line">  <span class="comment"># ko を使う上での成果物の設定</span></span><br><span class="line">  <span class="comment"># ref: https://skaffold.dev/docs/builders/builder-types/ko/</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">app</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">../app/v1（or</span> <span class="string">v2）</span></span><br><span class="line">      <span class="attr">ko:</span></span><br><span class="line">        <span class="attr">fromImage:</span> <span class="string">gcr.io/distroless/base:debug-nonroot</span></span><br></pre></td></tr></table></figure><p><code>build</code> にて各種 build の設定を行なっています。</p><p><code>build.tagPolicy</code> では、イメージビルド時のタギングポリシーの設定を行なっており、<code>build.artifacts</code> では、イメージをどのようにして作成するかの設定を行なっています。</p><p>今回は、ko を扱うのでそちらの設定に則っています。（各種詳細は、コメントのリンクを参照してください。）</p><p>こちらのファイルが用意できたら、以下のコマンドを実行すると Artifact Registry にイメージのプッシュが行えるはずです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ skaffold build \</span><br><span class="line">    --filename <span class="string">&quot;skaffold_v1.yaml&quot;</span> \</span><br><span class="line">    --default-repo <span class="string">&quot;Artifact Registry の場所 ex）asia-northeast1-docker.pkg.dev/PROJECT_NAME/hello-world&quot;</span></span><br></pre></td></tr></table></figure><p>プッシュされた内容を見ると、タグやディレクトリ構成が先ほど設定した内容に沿っていることがわかると思います。</p><img src="/images/20230626a/Screenshot_2023-05-03_at_19.59.11.png" alt="" width="1200" height="179" loading="lazy"><h1 id="Cloud-Deploy-でデプロイ"><a href="#Cloud-Deploy-でデプロイ" class="headerlink" title="Cloud Deploy でデプロイ"></a>Cloud Deploy でデプロイ</h1><p>コンテナイメージのプッシュまで、ko と Skaffold を用いて行うことができました。最後に、Cloud Deploy を使って Cloud Run にデプロイを行いましょう。</p><h2 id="Skaffold-に-Cloud-Run-の設定を追記"><a href="#Skaffold-に-Cloud-Run-の設定を追記" class="headerlink" title="Skaffold に Cloud Run の設定を追記"></a>Skaffold に Cloud Run の設定を追記</h2><p>はじめに先ほど作成した <code>skaffold_v1.yaml</code>・<code>skaffold_v2.yaml</code> に以下のように Cloud Run の設定を追記します。</p><figure class="highlight yaml"><figcaption><span>skaffold_v1 (or v2).yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">skaffold/v3alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">tagPolicy:</span></span><br><span class="line">    <span class="attr">customTemplate:</span></span><br><span class="line">      <span class="attr">template:</span> <span class="string">&quot;v1&quot;</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">app</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">../app/v1</span></span><br><span class="line">      <span class="attr">ko:</span></span><br><span class="line">        <span class="attr">fromImage:</span> <span class="string">gcr.io/distroless/base:debug-nonroot</span></span><br><span class="line"><span class="comment"># マニフェストの設定</span></span><br><span class="line"><span class="comment"># ref: https://skaffold.dev/docs/renderers/rawyaml/</span></span><br><span class="line"><span class="attr">manifests:</span></span><br><span class="line">  <span class="attr">rawYaml:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">service.yaml</span></span><br><span class="line"><span class="comment"># デプロイの設定</span></span><br><span class="line"><span class="comment"># ref: https://skaffold.dev/docs/deployers/cloudrun/</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">cloudrun:</span></span><br><span class="line">    <span class="attr">projectid:</span> <span class="string">PROJECT_ID</span></span><br><span class="line">    <span class="attr">region:</span> <span class="string">asia-northeast1</span></span><br></pre></td></tr></table></figure><p>先ほど作成したものに対して、 <code>manifests</code> と <code>deploy</code> が追加されています。それぞれ、Cloud Run で使用するマニフェストの設定とデプロイ先の設定が行われています。</p><p>ただまだ、Cloud Run のマニフェストは作成していませんでしたね。最小限の構成になりますが、以下のような <code>service.yaml</code> を作成しましょう。<code>spec.template.spec.containers.image</code> は、<code>skaffold_v1.yaml</code> で指定した <code>build.artifacts.image</code> の内容と一致する必要があります。</p><figure class="highlight yaml"><figcaption><span>service.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ref: https://cloud.google.com/run/docs/reference/yaml/v1</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">serving.knative.dev/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-world</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">app</span> <span class="comment"># skaffold が適切な値に変えてくれます</span></span><br></pre></td></tr></table></figure><p>ここまで作成することができたらまた改めてビルドを行いましょう。<br>今度は、成果物をローカルにアウトプットもしておきます。（後ほど Cloud Deploy にてこの成果物を用いてデプロイを行います。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ skaffold build \</span><br><span class="line">    --filename <span class="string">&quot;skaffold_v1.yaml&quot;</span> \</span><br><span class="line">    --default-repo <span class="string">&quot;Artifact Registry の場所 ex）asia-northeast1-docker.pkg.dev/PROJECT_ID/hello-world&quot;</span></span><br><span class="line">    --file-output <span class="string">&quot;build_v1.json&quot;</span></span><br></pre></td></tr></table></figure><p>以下のような成果物ができているはずです。</p><figure class="highlight json"><figcaption><span>build_v1.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;builds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;imageName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asia-northeast1-docker.pkg.dev/PROJECT_ID/hello-world/app:v1@sha256:XXX&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="デリバリーパイプラインの作成"><a href="#デリバリーパイプラインの作成" class="headerlink" title="デリバリーパイプラインの作成"></a>デリバリーパイプラインの作成</h2><p>まずは、以下のような <code>deploy.yaml</code> を作成します。</p><figure class="highlight yaml"><figcaption><span>deploy.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://cloud.google.com/deploy/docs/config-files</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">deploy.cloud.google.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DeliveryPipeline</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-world</span></span><br><span class="line"><span class="attr">serialPipeline:</span></span><br><span class="line">  <span class="attr">stages:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targetId:</span> <span class="string">hello-world</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">deploy.cloud.google.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Target</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-world</span></span><br><span class="line"><span class="attr">run:</span></span><br><span class="line">  <span class="attr">location:</span> <span class="string">projects/PROJECT_ID/locations/asia-northeast1</span></span><br></pre></td></tr></table></figure><p>こちらに出てくる DeliveryPipeline や、Target といった用語は先ほど説明したものと同じです。</p><p><code>kind: DeliveryPipeline</code> は、名前の通りデリバリーを行ううえでのパイプラインの設定を行うもので、<code>kind: Target</code> は、デプロイ先の設定を行うものになります。</p><p>上記の設定は、最小限のものになるので必要に応じて <a href="https://cloud.google.com/deploy/docs/config-files">こちら</a> を参考にしてパイプラインの設定を追加するとよさそうです。（カナリアデプロイをできるようにする設定はこの後行います。）</p><p>ファイルを作成することができたら、以下のコマンドを実行して Cloud Deploy に反映します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deploy apply \</span><br><span class="line">  --file=deploy.yaml \</span><br><span class="line">  --project=PROJECT_ID \</span><br><span class="line">  --region=asia-northeast1</span><br></pre></td></tr></table></figure><p>コンソールからも反映されていることが確認できると思います。</p><img src="/images/20230626a/image_2.png" alt="image.png" width="1200" height="642" loading="lazy"><h2 id="Cloud-Deploy-によるデプロイ"><a href="#Cloud-Deploy-によるデプロイ" class="headerlink" title="Cloud Deploy によるデプロイ"></a>Cloud Deploy によるデプロイ</h2><p>ここまでで、 <code>build_v1.json</code> という成果物をローカルにアウトプットできていて、またデリバリーパイプラインの設定も行えているはずです。</p><p>次にこれらを用いて Cloud Deploy 上でリリースを作成してロールアウトを行います。</p><p>以下のような <a href="https://cloud.google.com/sdk/gcloud/reference/deploy/releases/create">gcloud deploy releases コマンド</a> を実行すればよいです。</p><p><strong>※ ここでは、v1 用のリリースだけ作成します。後ほど v2 用のリリースを作成します。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deploy releases create v1 \</span><br><span class="line">  --delivery-pipeline <span class="string">&quot;hello-world&quot;</span> \</span><br><span class="line">  --region <span class="string">&quot;asia-northeast1&quot;</span> \</span><br><span class="line">  --build-artifacts <span class="string">&quot;build_v1.json&quot;</span> \</span><br><span class="line">  --skaffold-file <span class="string">&quot;skaffold_v1.yaml&quot;</span> \</span><br><span class="line">  --<span class="built_in">source</span> .</span><br></pre></td></tr></table></figure><p>上記のコマンドが成功すれば、Cloud Run 上でもサービスが展開されていることが確認できるはずです。</p><img src="/images/20230626a/image_3.png" alt="image.png" width="1200" height="153" loading="lazy"><h2 id="Cloud-Deploy-によるカナリアデプロイ"><a href="#Cloud-Deploy-によるカナリアデプロイ" class="headerlink" title="Cloud Deploy によるカナリアデプロイ"></a>Cloud Deploy によるカナリアデプロイ</h2><p>ここまでくれば、一通りの機能に触れることができました。</p><p>最後に、先日追加された <a href="https://cloud.google.com/deploy/docs/deployment-strategies/canary">Cloud Deploy によるカナリアデプロイ</a> について触れて締めくくります。</p><p>先ほど作成した <code>deploy.yaml</code> を以下のように修正しましょう。</p><figure class="highlight yaml"><figcaption><span>deploy.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://cloud.google.com/deploy/docs/config-files</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">deploy.cloud.google.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DeliveryPipeline</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-world</span></span><br><span class="line"><span class="attr">serialPipeline:</span></span><br><span class="line">  <span class="attr">stages:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targetId:</span> <span class="string">hello-world</span></span><br><span class="line">      <span class="attr">profiles:</span> []</span><br><span class="line">      <span class="attr">strategy:</span></span><br><span class="line">        <span class="attr">canary:</span></span><br><span class="line">          <span class="attr">runtimeConfig:</span></span><br><span class="line">            <span class="attr">cloudRun:</span></span><br><span class="line">              <span class="attr">automaticTrafficControl:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">canaryDeployment:</span></span><br><span class="line">            <span class="attr">percentages:</span> [ <span class="number">10</span> ]</span><br><span class="line">            <span class="attr">verify:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">deploy.cloud.google.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Target</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-world</span></span><br><span class="line"><span class="attr">run:</span></span><br><span class="line">  <span class="attr">location:</span> <span class="string">projects/PROJECT_ID/locations/asia-northeast1</span></span><br></pre></td></tr></table></figure><p><code>serialPipeline.stages</code> にいくつかの項目が追記されていることがわかると思います。</p><p>特にこのカナリアデプロイを行ううえで重要な項目が <code>serialPipeline.stages.strategy.canary.canaryDeployment.percentages</code> です。</p><p>こちらでどのようにトラフィックを流していくのかを明示しています。今回の設定では、「10% 新しい ver. に流す。」という設定にしています。（複数値設定できるので、より段階的なロールアウトも可能です。）</p><p>それでは再度修正したものを Cloud Deploy に反映しましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deploy apply \</span><br><span class="line">  --file=deploy.yaml \</span><br><span class="line">  --project=PROJECT_ID \</span><br><span class="line">  --region=asia-northeast1</span><br></pre></td></tr></table></figure><p>コンソールからも変更が反映されていることを確認できるはずです。</p><img src="/images/20230626a/image_4.png" alt="" width="1200" height="643" loading="lazy"><p>次に v2 アプリケーションをデプロイしてみましょう。<br>先ほどと同じ（v1 が v2 になっているだけ）コマンドで以下のとおりです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deploy releases create v2 \</span><br><span class="line">  --delivery-pipeline <span class="string">&quot;hello-world&quot;</span> \</span><br><span class="line">  --region <span class="string">&quot;asia-northeast1&quot;</span> \</span><br><span class="line">  --build-artifacts <span class="string">&quot;build_v2.json&quot;</span> \</span><br><span class="line">  --skaffold-file <span class="string">&quot;skaffold_v2.yaml&quot;</span> \</span><br><span class="line">  --<span class="built_in">source</span> .</span><br></pre></td></tr></table></figure><p>デプロイが完了すると、カナリアデプロイしてくれていそうな雰囲気がコンソールから見てとれます。</p><img src="/images/20230626a/image_5.png" alt="" width="1200" height="274" loading="lazy"><p>この時点で、Cloud Run にて生成される URL に何度かアクセスしてみるとレスポンスがたまに v2 用のものに変わっていることが確認できるはずです。</p><p>ここで、「ロールアウトを進める」ボタンを押下するとデプロイが進み完了します。</p><img src="/images/20230626a/image_6.png" alt="" width="1200" height="272" loading="lazy"><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>本記事では、Cloud Run や CNCF の各種ビルドツール、Cloud Deploy を用いてビルドからカナリアデプロイまでやってみました。</p><p>まだまだこれらのツールは必要最小限の部分しか取り扱えていなかったですが、さまざまなチュートリアルも豊富にあるのでぜひ遊んでみてください！</p><p>明日は、岸下さんが ArgoCD について記載予定です！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは！&lt;br&gt;TIG コアテクチームの川口です。本記事は、&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="CloudRun" scheme="https://future-architect.github.io/tags/CloudRun/"/>
    
    <category term="Knative" scheme="https://future-architect.github.io/tags/Knative/"/>
    
    <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
    <category term="GoogleCloud" scheme="https://future-architect.github.io/tags/GoogleCloud/"/>
    
    <category term="CloudDeploy" scheme="https://future-architect.github.io/tags/CloudDeploy/"/>
    
    <category term="skaffold" scheme="https://future-architect.github.io/tags/skaffold/"/>
    
    <category term="ko" scheme="https://future-architect.github.io/tags/ko/"/>
    
  </entry>
  
  <entry>
    <title>TetragonでeBPFとセキュリティオブサーバビリティ入門</title>
    <link href="https://future-architect.github.io/articles/20230623a/"/>
    <id>https://future-architect.github.io/articles/20230623a/</id>
    <published>2023-06-22T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.136Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20230619a/">CNCF連載</a> の4本目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>数年前に<a href="https://twitter.com/CloudNativeFdn/status/1329863326428499971?s=20">クラウドネイティブ注目技術として挙げられた</a>eBPFにかねてよりキャッチアップしたいなと思っていたので、この連載のタイミングでeBPFとその関連プロダクトに入門してみることにしました。</p><p>CNCFプロジェクト傘下のeBPFを活用したプロダクトとしては<a href="https://cilium.io/">Cilium</a>, <a href="https://falco.org/">Falco</a>などが挙げられます。CiliumはKubernetesなどのクラウドネイティブな環境でネットワーク、オブサーバビリティの機能を提供するOSSなのですが、今回はそのいわばサブプロジェクト的な位置づけのセキュリティツールである、<a href="https://github.com/cilium/tetragon">Tetragon</a>に触ってみます。</p><p>Cilium, Tetragonの開発をメイン行っているIsovalent社は、書籍やハンズオンラボなどで自社の製品・eBPFについての学習リソースを多く提供しています。</p><p><a href="https://isovalent.com/resource-library/books">https://isovalent.com/resource-library/books</a></p><p>eBPFを学ぶ書籍はいくつかあると思うのですが、今回ブログを書くにあたってはIsovalentが提供しているeBook、<a href="https://isovalent.com/learning-ebpf/">Learning eBPF</a>にざっと目を通しました。</p><h2 id="eBPF入門"><a href="#eBPF入門" class="headerlink" title="eBPF入門"></a>eBPF入門</h2><p>eBPFとはLinuxカーネル内部で高速安全にプログラムを実行する技術です。これにより、ネットワーキング、セキュリティ、アプリケーションのカーネルレベルでの振る舞いを、カーネルをビルドしなおしたりOSの再起動をしたりせずに動的に観測・制御することができます。</p><p>eBPFそのものの実態は、カーネルのイベントをトリガーとして動作するプログラムとその実行環境です。基本的にC言語で記述してeBPFのバイトコードにコンパイルされ、eBPFのVMで動きます。eBPFバイトコードはカーネルにロードされる前に検証器にチェックされるようになっており、そのおかげでカーネルをクラッシュさせたり脆弱性のもとになるバグを埋め込まず安全に実行できるようです。</p><p>eBPFを使ったツールを開発する場合、eBPFプログラムそのものと、それをカーネルのイベントソースにアタッチしてeBPFとデータをやり取りするユーザスペースのコードを書く必要があります。</p><p>実際にeBPFのサンプルプログラムを動かしてみましょう。サンプルプログラムには<a href="https://github.com/iovisor/bcc">BCC</a> (BPF Compiler Collection）という、Python&#x2F;LuaでeBPFを扱うことのできるツールを使います。インストール方法は<a href="https://github.com/iovisor/bcc/blob/master/INSTALL.md">こちら</a>が参考になります。</p><p>次はHello Worldプログラムです。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3  </span></span><br><span class="line"><span class="keyword">from</span> bcc <span class="keyword">import</span> BPF</span><br><span class="line"></span><br><span class="line">program = <span class="string">r&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">int hello(void *ctx) &#123;</span></span><br><span class="line"><span class="string">    bpf_trace_printk(&quot;Hello World!&quot;);</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">b = BPF(text=program)</span><br><span class="line">syscall = b.get_syscall_fnname(<span class="string">&quot;execve&quot;</span>)</span><br><span class="line">b.attach_kprobe(event=syscall, fn_name=<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">b.trace_print()</span><br></pre></td></tr></table></figure><ul><li>eBPFプログラムはヒアドキュメントで書かれた部分です。C言語の文法で書かれています。</li><li><code>BPF(text=program)</code> でeBPFプログラムを渡してBPFオブジェクトを作っていますが、このタイミングでeBPFプログラムがコンパイルされます。</li><li><code>get_syscall_fname(&quot;execve&quot;)</code>で execveシステムコール（実行可能ファイルが実行される時に呼ばれるシステムコール）に対応するカーネル関数を検索します。</li><li><code>b.attach_kprobe(event=syscall, fn_name=&quot;hello&quot;)</code> でebpfプログラムを検索したカーネル関数にアタッチします。ここではkprobeという実行中のカーネルに動的に処理を差し込むための仕組みでイベントにアタッチしています。</li></ul><p>このPythonスクリプトを実行し、別ターミナルで <code>ls</code> コマンドを実行すると、<code>ls</code>が実行される時にexecve()が呼ばれ、それにアタッチされたeBPFプログラムが次のようなトレースを出力します。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;           &lt;...&gt;-2140994 [000] d...1 556700.676560: bpf_trace_printk: Hello World!&#x27;</span></span><br></pre></td></tr></table></figure><p>“Hello World” だけでなく、どのようなプロセスがトレースされているのかを表示できるようにしてみましょう。eBPFプログラムの中からプロセス名を取得するために、<code>bpf_get_current_comm()</code>というヘルパー関数を使ってみます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3  </span></span><br><span class="line"><span class="keyword">from</span> bcc <span class="keyword">import</span> BPF</span><br><span class="line"></span><br><span class="line">program = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#include &lt;linux/sched.h&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">int hello(void *ctx) &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    char comm[TASK_COMM_LEN];</span></span><br><span class="line"><span class="string">    bpf_get_current_comm(&amp;comm, sizeof(comm)); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    bpf_trace_printk(&quot;%s\\n&quot;, comm);</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">b = BPF(text=program)</span><br><span class="line">syscall = b.get_syscall_fnname(<span class="string">&quot;execve&quot;</span>)</span><br><span class="line">b.attach_kprobe(event=syscall, fn_name=<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">b.trace_print()</span><br></pre></td></tr></table></figure><p>このPythonスクリプトを実行した状態で別ターミナルで <code>ls</code> を実行すると、<code>bash</code> から <code>ls</code> が起動したのだということがわかります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;           &lt;...&gt;-2196911 [000] d...1 567624.022345: bpf_trace_printk: bash&#x27;</span></span><br><span class="line"><span class="string">b&#x27;           &lt;...&gt;-2196912 [002] d...1 567624.380166: bpf_trace_printk: bash&#x27;</span></span><br></pre></td></tr></table></figure><p>今までトレースを出力するために <code>bpf_trace_printk</code> という関数を使ってきましたが、これは主にデバッグ目的で使うようなもので、PythonのユーザスペースのプログラムとeBPFプログラムの間で情報をやり取りするには、eBPF mapというデータ構造を使います。<br>eBPF mapとして利用できるデータ構造はいくつかありますが、今回はring bufferを使ってみます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3  </span></span><br><span class="line"><span class="keyword">from</span> bcc <span class="keyword">import</span> BPF</span><br><span class="line"></span><br><span class="line">program = <span class="string">r&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">BPF_PERF_OUTPUT(output); </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">struct data_t &#123;     </span></span><br><span class="line"><span class="string">   int pid;</span></span><br><span class="line"><span class="string">   int uid;</span></span><br><span class="line"><span class="string">   char command[16];</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">int hello(void *ctx) &#123;</span></span><br><span class="line"><span class="string">   struct data_t data = &#123;&#125;; </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">   data.pid = bpf_get_current_pid_tgid() &gt;&gt; 32;</span></span><br><span class="line"><span class="string">   data.uid = bpf_get_current_uid_gid() &amp; 0xFFFFFFFF;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   bpf_get_current_comm(&amp;data.command, sizeof(data.command));</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">   output.perf_submit(ctx, &amp;data, sizeof(data)); </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">   return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">b = BPF(text=program) </span><br><span class="line">syscall = b.get_syscall_fnname(<span class="string">&quot;execve&quot;</span>)</span><br><span class="line">b.attach_kprobe(event=syscall, fn_name=<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_event</span>(<span class="params">cpu, data, size</span>):  </span><br><span class="line">   data = b[<span class="string">&quot;output&quot;</span>].event(data)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;data.pid&#125;</span> <span class="subst">&#123;data.uid&#125;</span> <span class="subst">&#123;data.command.decode()&#125;</span>&quot;</span>)</span><br><span class="line"> </span><br><span class="line">b[<span class="string">&quot;output&quot;</span>].open_perf_buffer(print_event) </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:   </span><br><span class="line">   b.perf_buffer_poll()</span><br></pre></td></tr></table></figure><ul><li><code>BPF_PERF_OUTPUT</code>の部分がリングバッファーを作成するマクロです。 <code>output</code> という名前で定義されています。</li><li><code>bpf_get_current_pid_tgid()</code>  <code>bpf_get_current_uid_gid()</code>  でイベントをトリガーしたプロセスのプロセスID・UIDを取得し、<code>data_t</code>にセットします。<code>output.perf_submit</code>でmapにデータを送ります。</li><li><code>print_event()</code> は バッファにデータが届いたときに呼び出されるコールバック関数です。バッファには <code>b[&quot;output&quot;]</code> のようにアクセスできます。</li><li><code>b[&quot;output&quot;].open_perf_buffer</code>でコールバック関数を登録しています。</li><li><code>b.perf_buffer_poll()</code> でバッファにポーリングしています。</li></ul><p>このPythonスクリプトを実行し、別ターミナルでコマンドを実行してみます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2461142</span> <span class="number">1000</span> bash</span><br><span class="line"><span class="number">2461144</span> <span class="number">1000</span> bash</span><br><span class="line"><span class="number">2461152</span> <span class="number">1000</span> bash</span><br></pre></td></tr></table></figure><p>トレースされている情報は先ほどと同じですが、Python側のコードで出力を整えられるので見やすくなっていますね。</p><p>BPF mapは複数のeBPFプログラム間のデータのやり取りも可能です。</p><p>BCC + Pythonは初心者にとっつきやすいですが、実際にはeBPFのコードを実行時に毎回コンパイルするオーバーヘッドがあるだとか、コンパイルするホストと実行するホストが異なるとその差分に影響されてポータビリティが低いといった理由で、現在ではプロダクトの開発に使われていないみたいです。その代わりCO-RE (Compile Once- Run Everywhere)という仕組みをサポートするライブラリを使って実装されているようです。</p><p>ここまでくると次から紹介するTetragonの振る舞いやその設定方法がなんとなく理解できるようになります。</p><h2 id="Tetragon"><a href="#Tetragon" class="headerlink" title="Tetragon"></a>Tetragon</h2><p><a href="https://github.com/cilium/tetragon">Tetragon</a>はもともとCilium Enterpriseの機能として提供されていたセキュリティ可観測性ツールで、2022年にOSSとして発表されました。主にKubernetesでの利用が想定されています。</p><p>主な機能としては、定義したポリシーに従ってKuberntesクラスター上のコンテナ内で実行されるプロセスのシステムコールやネットワーク関連のイベントをフィルタリングし、ログとして出力するというものです。ポリシーに応じて動的にeBPFプログラムをアタッチし、カーネル空間内で直接フィルタリングしています。</p><img src="/images/20230623a/tetragon-2023-06-21-2234.png" alt="tetragon-2023-06-21-2234.png" width="1065" height="637" loading="lazy"><h3 id="プロセス実行の監視"><a href="#プロセス実行の監視" class="headerlink" title="プロセス実行の監視"></a>プロセス実行の監視</h3><p>まずはデモを動かしてどういうことができるのか確かめましょう。kindでクラスターを作り、helmでTetragonをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kind create cluster </span><br><span class="line"></span><br><span class="line">helm repo add cilium https://helm.cilium.io</span><br><span class="line">helm repo update</span><br><span class="line">helm install tetragon cilium/tetragon -n kube-system</span><br><span class="line">kubectl rollout status -n kube-system ds/tetragon -w</span><br><span class="line"></span><br><span class="line"><span class="comment"># tetragonがDaemonSetとしてインストールされます。</span></span><br><span class="line">kubectl get ds -n kube-system tetragon</span><br></pre></td></tr></table></figure><p>次にセキュリティイベントの観測対象となる実験用のPodを作成しておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl run <span class="built_in">test</span> --image=busybox -- <span class="built_in">sleep</span> 3600</span><br></pre></td></tr></table></figure><p>Tetragonではデフォルトでプロセスの実行に対して検知ログを出すようになっています。例えばコンテナでデバッグ用途以外でシェルが起動しているのはいかにも怪しいですが、そのようなイベントを観測できるということです。</p><p>Tetragonのログをtailしながら、別のターミナルから先ほど作ったPodで <code>/bin/sh</code> を動かしてみましょう</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs -f -n kube-system -l app.kubernetes.io/name=tetragon -c export-stdout</span><br><span class="line"></span><br><span class="line"><span class="comment"># 別のターミナルから</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="built_in">test</span> -- /bin/sh</span><br></pre></td></tr></table></figure><p>Tetragonから以下のようなログが出力されたと思います。長いので途中を省略していますが、”binary” を見ると確かに <code>/bin/sh</code> が実行されていると分かります。そしてPodのMetadataとしてPod名やNamespaceコンテナイメージも出力できています。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;process_exec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;process&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;exec_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a2luZC1jb250cm9sLXBsYW5lOjY3NTM5MDg3NTQ3MTA4MToyNTI5NTM3&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span> <span class="number">2529537</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;binary&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh&quot;</span><span class="punctuation">,</span></span><br><span class="line">...</span><br><span class="line">      <span class="attr">&quot;pod&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;container&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;containerd://a78169cb68982bba2925460d3b3c6cbe09788168f67e102acf228037b341b20f&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      ...</span><br><span class="line">          <span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span> <span class="number">13</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pod_labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;run&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;docker&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a78169cb68982bba2925460d3b3c6cb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parent_exec_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a2luZC1jb250cm9sLXBsYW5lOjY3NTM5MDgxNzEwOTM3MDoyNTI5NTI4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;exec_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a2luZC1jb250cm9sLXBsYW5lOjY3NTM5MDgxNzEwOTM3MDoyNTI5NTI4&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span> <span class="number">2529528</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>ところで、<code>bpftool</code> というBPFユーティリティツールを使うと、カーネルにロードされたeBPFプログラムをリストできます。Tetragonをインストールしたノード上でリストしてみると、Tetragonをインストールした直後（ロードされた時刻も表示されるのでそこでわかります）にいくつかeBPFプログラムがロードされているようです。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">bpftool prog <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="number">20668</span>: kprobe  name event_exit  tag 6ae01771cf3bfcee  gpl</span><br><span class="line">        loaded_at <span class="number">2023</span>-06-04T19:<span class="number">11</span>:<span class="number">54</span>+0900  uid <span class="number">0</span></span><br><span class="line">        xlated 760B  jited 428B  memlock 4096B  map_ids <span class="number">54302</span>,<span class="number">54308</span>,<span class="number">54306</span>,<span class="number">54303</span></span><br><span class="line">        btf_id <span class="number">108378</span></span><br><span class="line"><span class="number">20670</span>: kprobe  name event_wake_up_n  tag 71207899142b2062  gpl</span><br><span class="line">        loaded_at <span class="number">2023</span>-06-04T19:<span class="number">11</span>:<span class="number">54</span>+0900  uid <span class="number">0</span></span><br><span class="line">        xlated 4648B  jited 2467B  memlock 8192B  map_ids <span class="number">54302</span>,<span class="number">54314</span>,<span class="number">54303</span>,<span class="number">54301</span>,<span class="number">54306</span></span><br><span class="line">        btf_id <span class="number">108387</span></span><br><span class="line"><span class="number">20671</span>: tracepoint  name event_execve  tag be83f62b7aed485e  gpl</span><br><span class="line">        loaded_at <span class="number">2023</span>-06-04T19:<span class="number">11</span>:<span class="number">54</span>+0900  uid <span class="number">0</span></span><br><span class="line">        xlated 123200B  jited 75857B  memlock 126976B  map_ids <span class="number">54327</span>,<span class="number">54302</span>,<span class="number">54322</span>,<span class="number">54306</span>,<span class="number">54320</span>,<span class="number">54305</span>,<span class="number">54323</span>,<span class="number">54324</span>,<span class="number">54303</span>,<span class="number">54301</span>,<span class="number">54304</span></span><br><span class="line">        btf_id <span class="number">108396</span></span><br><span class="line"><span class="number">20672</span>: tracepoint  name execve_send  tag 9db3dc5bc0c71d85  gpl</span><br><span class="line">        loaded_at <span class="number">2023</span>-06-04T19:<span class="number">11</span>:<span class="number">54</span>+0900  uid <span class="number">0</span></span><br><span class="line">        xlated 1040B  jited 626B  memlock 4096B  map_ids <span class="number">54327</span>,<span class="number">54302</span>,<span class="number">54324</span>,<span class="number">54303</span>,<span class="number">54306</span></span><br><span class="line">        btf_id <span class="number">108397</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>そのうちの一つ、<code>20671: tracepoint  name event_execve  tag be83f62b7aed485e  gpl</code> は、その名前から察するに <code>execve</code> システムコールをトレースしているようです。先ほどのサンプルコードと似ていますね。これらのeBPFプログラムたちがプロセスの起動やexitを監視しているみたいです。</p><p>eBPFのソースコードはおそらく<a href="https://github.com/cilium/tetragon/blob/eb69bdc84405547733ccabfc69b355ae20d0eaa3/bpf/process/bpf_execve_event.c#L156">このあたり</a>でしょう。先ほどのサンプルコードと違う部分として、kprobeではなく静的なイベントソースであるTracepointという仕組みにアタッチされていたり、複数のeBPFプログラムが組み合わさっていたりします。</p><p>ちなみにTetragonの長いjsonログをパースして必要に応じてフィルタリングして、見やすく表示してくれる <code>tetra</code> というCLIツールがあります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs -n kube-system -l app.kubernetes.io/name=tetragon -c export-stdout -f | tetra getevents --namespace default  -o compact</span><br><span class="line"></span><br><span class="line">🚀 process default/test /bin/sh</span><br><span class="line">💥 <span class="built_in">exit</span>    default/test /bin/sh  0</span><br></pre></td></tr></table></figure><h3 id="ファイルアクセスの監視"><a href="#ファイルアクセスの監視" class="headerlink" title="ファイルアクセスの監視"></a>ファイルアクセスの監視</h3><p>別のユースケースとして、コンテナ内のファイルアクセスをトレースしてみましょう。コンテナ内のファイルを書き換えることによって例えばWebコンテンツの改竄をすることが可能になるので、そういったイベントは検知するべきです。</p><p>Tetragonでは、TracingPolicyというCRDを作成することでトレースしたいカーネル関数を動的に指定することができます。ファイルアクセスをトレースしたい場合、その時に呼ばれるカーネル関数やシステムコールをトレースするTracingPolicyを作るということになります。</p><p>ここでは <code>/etc/</code> ディレクトリ内のファイルを読み書きしている様子をトレースしてみましょう。Tetragonの<a href="https://github.com/cilium/tetragon/blob/main/examples/tracingpolicy/sys_write_follow_fd_prefix.yaml">examplesとして提供されているmanifest</a>を使います。</p><figure class="highlight yaml"><figcaption><span>sys_write_follow_fd_prefix.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">cilium.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">TracingPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&quot;sys-read-follow-prefix&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">kprobes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">call:</span> <span class="string">&quot;fd_install&quot;</span></span><br><span class="line">    <span class="attr">syscall:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">return:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">int</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">index:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">&quot;file&quot;</span></span><br><span class="line">    <span class="attr">selectors:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">matchPIDs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">operator:</span> <span class="string">NotIn</span></span><br><span class="line">        <span class="attr">followForks:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">isNamespacePID:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">values:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">matchArgs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">index:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">operator:</span> <span class="string">&quot;Prefix&quot;</span></span><br><span class="line">        <span class="attr">values:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;/etc/&quot;</span></span><br><span class="line">      <span class="attr">matchActions:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">FollowFD</span></span><br><span class="line">        <span class="attr">argFd:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">argName:</span> <span class="number">1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">call:</span> <span class="string">&quot;sys_close&quot;</span></span><br><span class="line">    <span class="attr">syscall:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">&quot;int&quot;</span></span><br><span class="line">    <span class="attr">selectors:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">matchActions:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">UnfollowFD</span></span><br><span class="line">        <span class="attr">argFd:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">argName:</span> <span class="number">0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">call:</span> <span class="string">&quot;sys_read&quot;</span></span><br><span class="line">    <span class="attr">syscall:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">&quot;fd&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">index:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">&quot;char_buf&quot;</span></span><br><span class="line">      <span class="attr">returnCopy:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">index:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">&quot;size_t&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">call:</span> <span class="string">&quot;sys_write&quot;</span></span><br><span class="line">    <span class="attr">syscall:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">&quot;fd&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">index:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">&quot;char_buf&quot;</span></span><br><span class="line">      <span class="attr">sizeArgIndex:</span> <span class="number">3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">index:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">&quot;size_t&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f sys_write_follow_fd_prefix.yaml</span><br></pre></td></tr></table></figure><p>試しに実験用のPod内で <code>/etc/passwd</code> を編集してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it busybox -- /bin/sh</span><br><span class="line">/ <span class="comment"># vi /etc/passwd</span></span><br></pre></td></tr></table></figure><p>Tetragonのログを見るとファイルの <code>open</code> <code>read</code> <code>close</code> をトレースできています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">🚀 process default/busybox /bin/vi /etc/passwd</span><br><span class="line">📬 open    default/busybox /bin/vi /etc/passwd</span><br><span class="line">📚 <span class="built_in">read</span>    default/busybox /bin/vi /etc/passwd 340 bytes</span><br><span class="line">📪 close   default/busybox /bin/vi</span><br><span class="line">💥 <span class="built_in">exit</span>    default/busybox /bin/vi /etc/passwd 0</span><br></pre></td></tr></table></figure><p><code>/etc/</code> ディレクトリ以外のファイルへの書き込みはトレースされません。なぜなら、eBPFプログラムがトレーシング対象のカーネル関数の引数として渡されるファイル名を取得し、フィルタリングしているからです。</p><p>Tracing Policyの内容の詳しく見て行きましょう。一部を取り出してみました。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span>   </span><br><span class="line">  <span class="attr">kprobes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">call:</span> <span class="string">&quot;fd_install&quot;</span></span><br><span class="line">    <span class="attr">syscall:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">return:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">int</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">index:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">&quot;file&quot;</span></span><br><span class="line">    <span class="attr">selectors:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">matchPIDs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">operator:</span> <span class="string">NotIn</span></span><br><span class="line">        <span class="attr">followForks:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">isNamespacePID:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">values:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">matchArgs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">index:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">operator:</span> <span class="string">&quot;Prefix&quot;</span></span><br><span class="line">        <span class="attr">values:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;/etc/&quot;</span></span><br><span class="line">      <span class="attr">matchActions:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">FollowFD</span></span><br><span class="line">        <span class="attr">argFd:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">argName:</span> <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>kprobeというのは先ほども出てきましたが、カーネルの関数に動的に処理を差し込むための仕組みなのでした。<code>spec.krpobes</code> より下の階層はつぎのような意味です</p><ul><li><code>call</code>にはトレース対象のカーネル関数を定義します。今回は<code>fd_install</code>が対象です。この関数はファイルテーブルに新しいファイルディスクリプタを割り当てる関数、、、早い話がファイルオープン時に必ず呼ばれる関数です。この関数にkprobeを使ってeBPFプログラムをアタッチする、ということです。fd_install&#96; の引数の0番目はint型、1番目はfileという構造体であり、これらの引数をトレースに含めます。</li><li><code>selectors</code>以下はフィルタリング条件と、フィルターにマッチしたときの挙動を定義しています。<ul><li><code>matchPID</code><ul><li>PID Namespace内でpid&#x3D;1ではないプロセスに対してトレースする（つまりコンテナで動かす本来のプロセスはpid 1なのでトレース対象外で、 <code>kubectl exec</code> などで実行したプロセスがトレース対象となります）</li></ul></li><li>matchArgs<ul><li>indexの1番目&#x3D;fileのprefixが <code>etc</code> の場合にトレースする。</li></ul></li><li><code>matchActions.action: FollowFD</code><ul><li>カーネル関数に渡されたファイルディスクリプタとファイル名をBPF mapに保存する。</li></ul></li></ul></li></ul><p>他の<code>spec.kprobe</code>以下の部分も同じように、どの関数にeBPFをアタッチするかを定義しています。</p><p><code>FllowFD</code>によってBPF mapに保存されたファイルディスクリプタは、他の関数にアタッチされたeBPFからルックアップされます。今回のTracingPolicyだと<code>sys_read()</code>にアタッチされたeBPFが、関数の引数として渡されるファイルディスクリプタがBPF mapに保存されているものかどうかを参照し、そうであればトレースする、という挙動をとります。</p><p>今までトレーシング機能を紹介してきましたが、フィルタリング条件に合致するイベントを検出した際に、プロセスに直接SIGKILLを送出する、といったことも可能です。</p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>eBPFとeBPF製品Tetragonに入門にしてみました。Tetragonの親プロジェクトのCiliumでは、eBPFでネットワークを効率化しています。主要クラウドプロバイダーのKubernetesサービスでは、Ciliumが使用できるようになっており、例えばGoogle CloudのGKEでは<a href="https://cloud.google.com/kubernetes-engine/docs/concepts/dataplane-v2?hl=ja">Dataplane V2</a>というモードで提供されています。暇があればCilium, eBPF+ネットワークも勉強したいなと思います。</p><p>TetragonやBCCの公式ドキュメントのほか、以下のブログを参考にしました。</p><p><a href="https://blog.yuuk.io/entry/2021/ebpf-tracing">https://blog.yuuk.io/entry/2021/ebpf-tracing</a></p><p><a href="https://gihyo.jp/admin/serial/01/ubuntu-recipe/0688">https://gihyo.jp/admin/serial/01/ubuntu-recipe/0688</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20230619a/&quot;&gt;CNCF連載&lt;/a&gt; の4本目です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Security" scheme="https://future-architect.github.io/categories/Security/"/>
    
    
    <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
    <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
    <category term="Tetragon" scheme="https://future-architect.github.io/tags/Tetragon/"/>
    
    <category term="eBPF" scheme="https://future-architect.github.io/tags/eBPF/"/>
    
    <category term="オブサーバビリティ" scheme="https://future-architect.github.io/tags/%E3%82%AA%E3%83%96%E3%82%B5%E3%83%BC%E3%83%90%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3/"/>
    
  </entry>
  
  <entry>
    <title>Tinkerbellについて</title>
    <link href="https://future-architect.github.io/articles/20230622a/"/>
    <id>https://future-architect.github.io/articles/20230622a/</id>
    <published>2023-06-21T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.134Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20230619a/">CNCF連載</a>の3本目の記事です。</p><h2 id="CNCF-x-オンプレ環境"><a href="#CNCF-x-オンプレ環境" class="headerlink" title="CNCF x オンプレ環境"></a>CNCF x オンプレ環境</h2><p>こんにちは、TIGの原木です。</p><p>CNCFのホスト対象にCloudサービスに関係するプロジェクトは多いですが、全てではありません。オンプレミス環境(サーバーやネットワーク機器を自社で保有し、運用するシステム環境)に関するプロダクトも数多く存在します。</p><p>今回はそんなオンプレミス環境向けのCNCF sandboxプロジェクトの1つ、<a href="https://www.cncf.io/projects/tinkerbell/">Tinkerbell</a>を紹介します。</p><h2 id="Tinkerbellとは"><a href="#Tinkerbellとは" class="headerlink" title="Tinkerbellとは?"></a>Tinkerbellとは?</h2><p>Tinkerbellは、Equnix Metalのチームにより開発されている、オープンソースのベアメタルプロビジョニングエンジンです。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup><sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup> 平たく言うと、サーバーのOSインストールを助けてくれるソフトウェアです。</p><p>開発元であるEquinix社はデータセンターやIX(インターネットエクスチェンジ)の運営で著名な企業ですが、Equnix Metalというレンタルサーバー事業も行っています。</p><p>Equnix Metalの特徴として、長期契約が一般的なレンタルサーバー事業と異なりサーバーの貸出は1時間から行うことができます。また、画面操作でだいたい数分で調達できます。この手軽さから、かつてはBare-Metal-as-a-Service(BMaaS)とウェブサイトで自称していました。</p><p>その裏側を支えているソフトウェアをOSS化したものが、Tinkerbellです。</p><h2 id="なぜTinkerbellはCNCFのsandboxプロジェクトなのか？"><a href="#なぜTinkerbellはCNCFのsandboxプロジェクトなのか？" class="headerlink" title="なぜTinkerbellはCNCFのsandboxプロジェクトなのか？"></a>なぜTinkerbellはCNCFのsandboxプロジェクトなのか？</h2><p>TinkerbellはサーバーのOSインストールを手助けしてくれるツールだと冒頭で述べました。  </p><p>技術的に一言で言うなら、ネットワークブートのソフトウェアです。iPXE Boot(アイピクシー ブート)で<code>initramfs</code>コマンドを送信してLinuxKit OSをターゲットマシンのメモリから起動し、その上でサーバーの各種プロビジョニングを行っています。</p><p>AWSを普段扱ってる人には正直馴染みがなさそうな…そんなツールがなぜ”クラウドネイティブ”<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>だと評価され、sandboxプロジェクトに登録されているのでしょうか？</p><p>その理由について大きく2つ挙げてみました。</p><ol><li>明示的なプロビジョニング設定及び自動化</li><li>Kubernetes構築という応用</li></ol><p>それぞれの要素について掘り下げながら、Tinkerbellについて解説します。</p><h3 id="明示的なプロビジョニング設定及び自動化～Tinkerbellの仕組み～"><a href="#明示的なプロビジョニング設定及び自動化～Tinkerbellの仕組み～" class="headerlink" title="明示的なプロビジョニング設定及び自動化～Tinkerbellの仕組み～"></a>明示的なプロビジョニング設定及び自動化～Tinkerbellの仕組み～</h3><img src="/images/20230622a/構成図.png" alt="" width="743" height="477" loading="lazy"><p>出典: <a href="https://docs.tinkerbell.org/architecture/">Tinkerbell Docs - Architecture</a></p><p>Tinkerbellを知るためにドキュメントからアーキテクチャ図を引用しました。</p><p>Tinkerbellを使ってターゲットとなるサーバーに対してプロビジョニングを行うには、まず左上にあるように3つの基本的なリソース <code>hardware</code>、<code>template</code>、<code>workflow</code>を用意する必要があります。</p><p><a href="https://gist.github.com/hodagi/9e372a603034d771d6c035c897f8ab52">実際に使用したリソース</a>の一部を引用、解説します。</p><ul><li><code>hardware</code> はハードウェアやネットワークデバイスに関する詳細情報を登録します</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">&quot;tinkerbell.org/v1alpha1&quot;</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Hardware</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nuc-demo</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">tink-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">disks:</span></span><br><span class="line">    <span class="comment"># ターゲットサーバーのストレージの種類に合わせてデバイスファイルのパスを変更します</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">device:</span> <span class="string">/dev/nvme0n1</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">    <span class="string">(略)</span></span><br><span class="line">  <span class="attr">interfaces:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">dhcp:</span> <span class="comment"># Tinkerbell Stack内のDHCPが応答する設定です</span></span><br><span class="line">        <span class="attr">arch:</span> <span class="string">x86_64</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">nuc-demo</span></span><br><span class="line">        <span class="attr">ip:</span></span><br><span class="line">　　　　　 <span class="comment"># ターゲットサーバーに払い出したいIPアドレスを設定します</span></span><br><span class="line">          <span class="attr">address:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.8</span></span><br><span class="line">          <span class="attr">gateway:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">          <span class="attr">netmask:</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">        <span class="attr">lease_time:</span> <span class="number">86400</span></span><br><span class="line">        <span class="comment"># このMACアドレスを識別して、TinkerbellのDHCPサーバーは応答します</span></span><br><span class="line">        <span class="attr">mac:</span> <span class="string">1c:69:7a:11:22:33</span></span><br><span class="line">        <span class="attr">name_servers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line">        <span class="attr">uefi:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">netboot:</span></span><br><span class="line">        <span class="attr">allowPXE:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">allowWorkflow:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><code>template</code> はワークフローのタスクの内容を記載します</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">&quot;tinkerbell.org/v1alpha1&quot;</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Template</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ubuntu-focal-nvme</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">tink-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">data:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    version: &quot;0.1&quot;</span></span><br><span class="line"><span class="string">    name: ubuntu-focal-nvme</span></span><br><span class="line"><span class="string">    global_timeout: 9800</span></span><br><span class="line"><span class="string">    tasks:</span></span><br><span class="line"><span class="string">      - name: &quot;os-installation&quot;</span></span><br><span class="line"><span class="string">        worker: &quot;&#123;&#123;.device_1&#125;&#125;&quot;</span></span><br><span class="line"><span class="string">        volumes:</span></span><br><span class="line"><span class="string">          - /dev:/dev</span></span><br><span class="line"><span class="string">          - /dev/console:/dev/console</span></span><br><span class="line"><span class="string">          - /lib/firmware:/lib/firmware:ro</span></span><br><span class="line"><span class="string">        actions:</span></span><br><span class="line"><span class="string"></span>　　　　　 <span class="comment"># image2diskで、TinkerbellStackからDLしたqemu-img(qcow2)をストレージに焼きこみます</span></span><br><span class="line">          <span class="comment"># 昔のテンプレートファイルだとここの処理はべたにストレージをワイプして書き込んでました</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;stream-ubuntu-image&quot;</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">quay.io/tinkerbell-actions/image2disk:v1.0.0</span></span><br><span class="line">            <span class="string">(以下略)</span></span><br><span class="line">          <span class="comment"># 以下、プロビジョニングのタスクとコンテナイメージのタスクが並びます</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;grow-partition&quot;</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">quay.io/tinkerbell-actions/cexec:v1.0.0</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;install-openssl&quot;</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">quay.io/tinkerbell-actions/cexec:v1.0.0</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;create-user&quot;</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">quay.io/tinkerbell-actions/cexec:v1.0.0</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;enable-ssh&quot;</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">quay.io/tinkerbell-actions/cexec:v1.0.0</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;disable-apparmor&quot;</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">quay.io/tinkerbell-actions/cexec:v1.0.0</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;write-netplan&quot;</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">quay.io/tinkerbell-actions/writefile:v1.0.0</span></span><br></pre></td></tr></table></figure><ul><li><code>workflow</code> はtemplateファイルとhardwareファイルを紐づけて実際に実行する役割を果たします</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">&quot;tinkerbell.org/v1alpha1&quot;</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Workflow</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">demo-wf</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">tink-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">templateRef:</span> <span class="string">ubuntu-focal-nvme</span></span><br><span class="line">  <span class="attr">hardwareRef:</span> <span class="string">hp-demo</span></span><br><span class="line">  <span class="attr">hardwareMap:</span></span><br><span class="line">    <span class="attr">device_1:</span> <span class="string">1c:69:7a:11:22:33</span></span><br></pre></td></tr></table></figure><p>これら3つのファイルのうち、最も着目してほしいのが <code>template.yaml</code> です。</p><p>yaml形式で、プロビジョニングで実行したいタスクがコンテナイメージとセットで並んでいますが、この形式について、CI&#x2F;CDのビルドパイプラインをメンテナンスしたことがある方なら見覚えがあるのではないでしょうか？</p><p>現代の継続的インテグレーション（CI）ツール、例えばGithub ActionsやGoogle Cloud Build Runは、ビルドタスクを全てコンテナ化することで作業の流れを管理します。これらのツールは、yaml形式の設定ファイルを使ってビルドパイプラインを定義します。このビルドパイプラインはソースコードをダウンロードし、ビルドし、成果物管理サービスにデプロイする一連のタスクを含みます。</p><p>この設定ファイルをCIツールにアップロードすることで、ビルドタスク（今ではコンテナ）を柔軟に管理・操作できるようになりました。これは、コードの修正や新しい機能の追加に伴ってビルドの要件が変わる場合でも、ツールの設定を更新することで簡単に対応できることを意味します。</p><p><strong>Tinkerbellのワークフローも、これとまったく同じことを実行します。</strong></p><p>具体的には、iPXE Bootにより、まず<a href="https://github.com/tinkerbell/hook">Hook</a>と呼ばれる<a href="https://github.com/linuxkit/linuxkit">LinuxKit</a><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>をベースにしたプロビジョニング用のOSが<code>initramfs</code> によりメモリ上で起動します。</p><img src="/images/20230622a/このタイミングがちょうど良さそう.jpg" alt="このタイミングがちょうど良さそう.jpg" width="827" height="299" loading="lazy"><p>※Hookが起動した様子。当初、このクジラを見てPXE Bootがうまくいったと喜んでいたら、実はストレージパスの設定ミスでフリーズしてたのはいい思い出</p><p>このHookは、起動すると <code>tink-worker</code> というワークフローエンジンを自動的に立ち上げます。<code>tink-worker</code> ワークフローエンジンは Tinkerbell Stackと呼ばれる本体側の <code>tink-server</code> からワークフローをダウンロードします。 </p><p><code>tink-worker</code> はワークフローに基づいてターゲットサーバー内でコンテナイメージを起動し、必要なタスクを実行していきます。最後にリブートすると、プロビジョニングは完了します。</p><img src="/images/20230622a/U32s0wH3KSJCmPM1686998196_1686998464_(1).png" alt="U32s0wH3KSJCmPM1686998196_1686998464_(1).png" width="574" height="401" loading="lazy"><p>※tink-worker内で <code>podman</code> の <code>hello-world</code> コンテナを起動した様子。 <del>ダグトリオ</del> アザラシがお迎えしてくれました。</p><p>Tinkerbellを動かしたときに、ターゲットマシンで何が起きているのか、簡単に説明しました。</p><p><code>template</code>、<code>hardware</code>、 <code>workflow</code> による明示的な設定ファイルをTinkerbell Stackにデプロイするとサクッとプロビジョニングが終わっている様は、体感してみると素晴らしいものです。また <code>template</code>を入れ替えることでプロビジョニングの手順を簡単に入れ替えることができます。</p><p>この手軽さはまさにクラウドネイティブっぽいと言えるのではないでしょうか。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>自分は、このiPXE Boot-&gt;Hook(LinuxKit)起動-&gt;本体OS起動の二段階の仕組みを見て、BIOSの古き良き多段ブートを連想しました。かつてはハードウェアの制約によるものでしたが、現代では多環境への適応性やプロビジョニング方法を簡単に組み替えられる柔軟性という要件のために採用されたというわけです。<br>ここで、必要なスペックについて気になる方もいらっしゃるかもしれませんが、第七世代という結構古いIntel NUCでも問題なく動きました。軽く調べた限りでは<a href="https://github.com/ContainerSolutions/tinkerbell-rpi4-workflow">ラズパイでk8sクラスタを構築するためにTinkerbellを利用していた事例</a>もあったので、一般のご家庭のPCでも特に問題はなさそうです。</p></div><h3 id="Kubernetes構築という応用"><a href="#Kubernetes構築という応用" class="headerlink" title="Kubernetes構築という応用"></a>Kubernetes構築という応用</h3><p>Tinkerbellはベアメタルサーバー向けのプロビジョニングツールとして開発されましたが、その発展形としてKubernetesとの連携が進んでいます。</p><p>具体的には<a href="https://github.com/tinkerbell/cluster-api-provider-tinkerbell">Cluster API Provider Tinkerbell</a>というプロジェクトが進行しつつあります。</p><p>このプロジェクトの説明の前にCluster APIについて触れましょう。ClusterAPIは1つの管理用Kubernetesから別の環境にあるKubernetesクラスターの作成、更新、削除を自動的に行えるようにする目的で、開発されました。</p><p>イメージに起こすと次のような感じです。Kubernetesの特色を生かしながら、環境構築&amp;管理を容易にしようというわけです。</p><img src="/images/20230622a/cluster-apiのイメージ.png" alt="cluster-apiのイメージ.png" width="1146" height="655" loading="lazy"><p>本題に戻ると、このプロジェクトのベアメタルサーバー向けに開発が進められているのが、Cluster API Provider Tinkerbell というわけです。すなわち、Tinkerbellでベアメタルサーバーのプロビジョニングを行いつつ、(今回はあまり触れませんでしたが)Tinkerbellの中にあるHegelと呼ばれるメタ・サーバーからcloud-initを配布することでその上でKubernetesも構築してしまおうという試みです。</p><p>Kubernetesの構築はKubeadmやKubesprayにより容易になったとはいえ、その構築作業が宣言的かと言われるとVMのような抽象レイヤーを挟まない限り、素のベアメタルサーバーでは微妙なところがありました。その問題を解決しようとしているのがCluster API Provider Tinkerbellというわけです。</p><p>最後に、このプロジェクトの採用事例を説明します。</p><p>Appleの開発者が<a href="https://youtu.be/MtocKi97hsc">講演</a>を行っており、Tinkerbell+Kubernetes+GitOpsにより、gitリポジトリにコミットするだけでk8s clusterのプロビジョニングが完了する様子について実演しています。</p><p>また、このproviderを使用しているかは不明ですが、AWSの<a href="https://anywhere.eks.amazonaws.com/docs/getting-started/baremetal/overview/">EKS Anywhere on Bare Metal</a>でもこのTinkerbellを使用していると記載があります。</p><h2 id="Tinkerbellを実際に動かしてみた"><a href="#Tinkerbellを実際に動かしてみた" class="headerlink" title="Tinkerbellを実際に動かしてみた"></a>Tinkerbellを実際に動かしてみた</h2><p>最後に、Tinkerbellを実際に動かしてみたくなった方への案内です。Tinkerbellのメンテナーである@jacobweinstockさんがHPのPCにTinkerbellを使ってUbuntuを動かす<a href="https://gist.github.com/jacobweinstock/e13cea2edbb83833d8fc7e3226af2a3c">デモ手順</a>を公開しています。それをフォークして<a href="https://gist.github.com/hodagi/9e372a603034d771d6c035c897f8ab52">日本語でも手順をまとめてみました</a>。設定情報など初見で戸惑うところがあると思うので、一助になれば幸いです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>以上、Tinkerbellに関する紹介でした。<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup></p><p>ベアメタルサーバーに対して1からキッティングする機会って今どき中々ないと思うので、家庭に眠ってた古いPCがあればぜひ試してみてください。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">Tinkerbell is an open-source, bare metal provisioning engine, built by the team at Equinix Metal. 参照: <a href="https://docs.tinkerbell.org/">https://docs.tinkerbell.org/</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">元々はPacketというニューヨークのスタートアップ企業であるベアメタルクラウド・プロバイダーが開発していましたが、Equnixが2020年に買収し、OSSとして公開しました。参照: <a href="https://techcrunch.com/2020/01/14/equinix-is-acquiring-bare-metal-cloud-provider-packet/">https://techcrunch.com/2020/01/14/equinix-is-acquiring-bare-metal-cloud-provider-packet/</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">CNCFの団体名(Cloud Native Computing Foundation)でもあるクラウドネイティブってそもそも何でしょうか。改めて<a href="https://github.com/cncf/toc/blob/main/DEFINITION.md#%E6%97%A5%E6%9C%AC%E8%AA%9E%E7%89%88">本家の定義</a>をベースに、ChatGPT先生にわかりやすくまとめてもらいました。<br/>1. <strong>環境適応力</strong>: パブリッククラウド、プライベートクラウド、ハイブリッドクラウドなどの近代的でダイナミックな環境に対応する能力<br/>2. <strong>スケーラビリティ</strong>: スケーラブルなアプリケーションを構築および実行するための能力を組織に提供できること<br/>3. <strong>技術スタック</strong>: 代表的なアプローチとして、コンテナ、サービスメッシュ、マイクロサービス、イミュータブルインフラストラクチャ、および宣言型APIのような要素技術が使われていること<br/>4. <strong>疎結合システム</strong>: これらの手法により、回復性、管理力、および可観測性のある疎結合システムが実現する<br/>5 <strong>自動化と頻繁な変更</strong>: 堅牢な自動化と組み合わせることで、エンジニアはインパクトのある変更を最小限の労力で頻繁に行うことが可能になる​こと</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">LinuxKitはmoby社(Docker)が開発したコンテナランタイム用のLinuxディストリビューションです。開発コンセプトでもある、コンテナランタイム専用のイミュータブル&amp;軽量Linuxディストリビューションっていう意味では旧Container Linux/現CoreOSと非常に良く似ていますね。</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:8"><span style="vertical-align: top; padding-right: 10px;">8.</span><span style="vertical-align: top;">まとめきれなかった所感をこちらに。<br/><strong>構築の簡単な点、難しい点</strong>: TinkerbellはPXE Bootを行うため、Bootsと呼ばれるコンポーネントがDHCPサーバーの役割を担っているのですが、MACアドレスでフィルタリングしております。接続できなくなったらその時さ、と思いつつ、家庭用LAN上でそのまま実証していたんですが、一時的に同一ネットワーク内にDHCPサーバーが二台あるような状態でも特に問題ありませんでした。VLANが必要な状況下だとベアメタルサーバーのキッティングは正直混乱するのでケアが不要で良かったです。<br/>一方でTinkerbell Stack自体の構築はわりと難航しました。当初はベアメタルサーバー(Ubuntu)上に構築したk3sの上でTinkerbell Stackを動かすつもりでしたが、 <code>kubectl get svc -n tink-system</code> でいつまでも払い出されないIPアドレスに色々諦めて、Tinkerbellの中の人が実践していたk3dを使って構築しました。TinkerbellのデフォルトのCNIとしてkube-vipを利用しているのですが、その特色について理解を深めたらまた素のk3sへのTinkerbell構築に再チャレンジしたいところです。<br/>また、デフォルトのライティングツールはqcow2形式のイメージファイルを使用します。Ubuntuのように最初からqcow2形式でわかりやすく公開されているディストリビューションもありますが、そうではない場合、qemu-imgツールによる変換作業というひと手間が必要そうです。qcow2は恥ずかしながら初めて扱う形式だったので若干戸惑いました。<br/><strong>templateとcloud-init/Ignitionの棲み分け</strong>: Tinkerbellのテンプレートファイルは自由度が高く、GitHub ActionsのSelfHostedRunnerを動かすこともできたりします。ですが、プロビジョニングツールとしては既にcloud-init(CoreOSだとIgnition)というツールが普及しております。TinkerbellでもHegelと呼ばれるメタデータサーバーというツールを通じて、tink-workerで起動中にファイルを取得、動かす機能が予め備わっています。<a href="https://github.com/tinkerbell/cluster-api-provider-tinkerbell/blob/e5dcf1b2ba7038bf1d3afe9b4b6e33e5507c6cbf/internal/templates/templates.go#L102">参考: Cluster API Provider Tinkerbellの該当処理。</a>実運用の際は、Tinkerbellでいろいろできるけどcloud-initに寄せるんだろうなって思いました。</span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="vertical-align: top; padding-right: 10px;">9.</span><span style="vertical-align: top;">Tinkerbellという名前は、PXE Boot→ピクシー→妖精から来ています。</span><a href="#fnref:9" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20230619a/&quot;&gt;CNCF連載&lt;/a&gt;の3本目の記事です。&lt;/p&gt;
&lt;h2 id=&quot;CNCF-x-オンプレ環境&quot;&gt;&lt;a href=&quot;#CNCF-x-オンプレ環境&quot; class=&quot;headerlink&quot; title=&quot;CNCF x</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
    <category term="オンプレミス" scheme="https://future-architect.github.io/tags/%E3%82%AA%E3%83%B3%E3%83%97%E3%83%AC%E3%83%9F%E3%82%B9/"/>
    
    <category term="Tinkerbell" scheme="https://future-architect.github.io/tags/Tinkerbell/"/>
    
  </entry>
  
  <entry>
    <title>フィーチャーフラグを管理するためのOpenFeature</title>
    <link href="https://future-architect.github.io/articles/20230621a/"/>
    <id>https://future-architect.github.io/articles/20230621a/</id>
    <published>2023-06-20T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.133Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230621a/top.png" alt="" width="1200" height="600" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG DXユニット真野です。</p><p><a href="/articles/20230619a/">CNCF連載</a>の2本目はクラウドネイティブなフィーチャーフラグの標準とAPI、SDKを提供するOpenFeatureについてです。</p><h2 id="フィーチャーフラグとは"><a href="#フィーチャーフラグとは" class="headerlink" title="フィーチャーフラグとは"></a>フィーチャーフラグとは</h2><p>フィーチャーフラグとはコードを変更せずに、フラグを使って機能を有効&#x2F;無効化する開発&#x2F;デプロイ手法のことです。一般的なユースケースとしては、特定のユーザーに対して再起動とか再デプロイをせずに、新機能を有効化したいといった場合に役立ちます。信頼度が高くなったらより段階的に広範囲に対象を広げていくと安心ですね。この使い方だけであれば、カナリアリリースを想像しますが、他にも次のようなユースケースが考えられます。</p><ul><li>初期から契約している特別な顧客（あるいはプレミアムプランに契約している顧客）に向けて開発した機能を提供する</li><li>バグが見つかったので、該当機能を無効化してアプリの振る舞いをロールバックする</li><li>繁忙期にシステム負荷が高まったたため、特定のオプション機能を一時的に無効化する</li><li>実装は完成したがリリース時期を後ろにしたい場合でもメインブランチにマージすることで、レビューコストやConflictを防ぎ開発生産性を高める</li></ul><p>個人的には、レビューや内部テストは終わっているものの、周辺システムとの整合性を保つためマージ待ちのDraft Pull Requestが、いざリリースしたいタイミングで見ると盛大にConflictしている悲しい様子をよく見るため、開発者目線でもフィーチャーフラグ化に興味を持ちました。この点において、フィーチャーフラグはデプロイ手法だけではなく、開発手法であるとも言えることが分かります。これを拡大してアジャイル開発の次はフィーチャーフラグだ（？）といった言説も聞いたことがあります。</p><p>このフラグで動作をスイッチさせる手法は昔からあったと思いますが、界隈で有名になったのは martinfowler.com に掲載されたフィーチャーフラグの記事でしょうか。</p><ul><li><a href="https://martinfowler.com/bliki/FeatureToggle.html">FeatureToggle</a>: 2010年公開。この時期にすでにこういう話があったんですね</li><li><a href="https://martinfowler.com/articles/feature-toggles.html">Feature Toggles (aka Feature Flags)</a> :2017年公開<ul><li>和訳（感謝!!）: <a href="https://qiita.com/TsuyoshiUshio@github/items/51c6662cd45bded95389">https://qiita.com/TsuyoshiUshio@github/items/51c6662cd45bded95389</a></li></ul></li></ul><p>なお、マーティンファウラーさんは、フィーチャーフラグ自体は最終手段にすべき。機能を細かく分割して段階リリースをしたり、バックエンド側を先に作りUIからの呼び出しは最後まで行わない（意訳）といったことを推奨しています。使いすぎると混乱しますし、実際フラグの管理コストや新規参画者へのキャッチアップコストはそこそこ高くなりそうなのはなんとなく想像できます。</p><p>toru-takahashi さんの<a href="https://blog.torut.tokyo/entry/2022/05/03/172348">こんなフィーチャーフラグは気をつけろ！</a> にはフィーチャーフラグのあるある（？）なネタが書かれており、使わなくて済むのであればそれにこしたことがないことはより具体的に理解できます。利用については<a href="https://harness.digitalstacks.net/blog/feature-flags/feature-flags-best-practices/">フィーチャーフラグのベストプラクティス</a>記事がいくつか公開されているので、一読すると注意すべき観点がわかると思います。</p><h2 id="フィーチャーフラグの実現方法"><a href="#フィーチャーフラグの実現方法" class="headerlink" title="フィーチャーフラグの実現方法"></a>フィーチャーフラグの実現方法</h2><p>最もシンプルに表現すると if 分岐をコードに書きます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> featureFlag &#123;</span><br><span class="line">    <span class="comment">// フィーチャーフラグが有効な場合に動かす実装</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 無効時に動かす実装</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>featureFlagは環境変数から取ってきても、何かしらのOSSツールやSaaSサービスから取ってきても良いです。やっていることは非常にシンプルなことに大層な名前を付けている気さえしてきます。</p><p>ただ、先程のユースケースのように、特定のユーザーに応じた複数のフィーチャーフラグを管理したり、新機能のA&#x2F;Bをランダムなユーザーにテストしたいと言った場合には、環境変数などでは限界があります。個人的には環境変数を変えると、AWSのECSでもLambdaでもTerraformなどのIaCが書き換わるので、もはやそれはランタイムではないもののコード変更じゃないかと思ったりもしますが気にしないことにします。フラグ値の取得元はファイル、DB、etcdなどのKVストアなど、バリエーションに富みます。</p><h2 id="OpenFeatureとは"><a href="#OpenFeatureとは" class="headerlink" title="OpenFeatureとは"></a>OpenFeatureとは</h2><p>OpenFeatureは、機能フラグ管理のオープンな標準です。特定のベンダー依存なしにAPIを定義したりSDKを提供します。フィーチャーフラグ界隈のエコシステムを堅牢に発展させることを目的としています。</p><p>個人的によく似ているなと思ったのは、<a href="/articles/20191111/">Go CDK（gocloud）</a>でしょうか。Go CDKはAWS、Azure、GoogleCloudなど複数のクラウドベンダーが提供する、ドキュメントDBやオブジェクトストレージを共通のAPIで操作できるようにして、特定のクラウドベンダーへのロックインを回避し、開発生産性をあげたり、ハイブリッドクラウドの促進を図るものです。もっというとJDBCでDB操作が抽象化されているものに似たようなもの感じます。</p><p><a href="https://openfeature.dev/docs/reference/intro">OpenFeatureのintro</a>に載っている図がそういった構造を示していて、アプリケーションはOpenFeatureのSDK（汎化されたAPI）を呼び出すことで、その裏側のProviderが固有のバックエンドからフィーチャーフラグ値を取得する仕組みであることが分かります。Providerが例えばセルフホストかクラウドホストなどのプロダクト差異とか環境差異を吸収しているということです。</p><img src="/images/20230621a/of-architecture-a49b167df4037d936bd6623907d84de1.png" alt="of-architecture-a49b167df4037d936bd6623907d84de1.png" width="1200" height="401" loading="lazy"><p>OpenFeatureを利用するアプリケーションとしては、固有のプロダクトにロックインされないこと、でも便利なAPIは提供して欲しいといった相反することを期待しますし、仕様検討側はそういったことを加味しつつフィーチャーフラグの標準を作るとしてAPI設計を考え、各SDKを開発促進するという、CNCFのプロダクトとして少し異色なプロダクトに感じます。純粋なプロダクト開発ではないというか。</p><p>2023年6月時点でサンドボックス。リポジトリの<a href="https://github.com/open-feature/spec/releases/tag/v0.6.0">spec</a>を見ると、v0.6.0が最新でした。今のところドキュメントには、TypeScript、Java、C#、Go、PHPのサンプルコードが記載されています。</p><p>他の特徴としては、Hooks（フック）という仕組みがあり、フラグ値を評価&#x2F;利用する時にロギング、分散トレーシング、メトリクスの送信などを差し込むことができます。公式サイトにもOpenTelemetryフックやDatadogフックがリンクされており、おお！となりました。</p><h2 id="Goで触ってみた"><a href="#Goで触ってみた" class="headerlink" title="Goで触ってみた"></a>Goで触ってみた</h2><img src="/images/20230621a/image.png" alt="image.png" width="1200" height="458" loading="lazy"><p>フィーチャーフラグの値は、<a href="https://gofeatureflag.org/">GO Feature Flag</a>から取ってくるProviderを利用して、OpenFeatureのGo SDKを利用してみます。名前がややこしいですが、 「Go Feature Flag」という個別のプロダクト名です。構成は次のような<a href="https://gofeatureflag.org/docs/getting_started/using-openfeature">Getting Started</a>に記載された構成で動かします。</p><img src="/images/20230621a/concepts-d23b05d83bb936d1d2cf17b34ec1d505.jpg" alt="concepts-d23b05d83bb936d1d2cf17b34ec1d505.jpg" width="1200" height="396" loading="lazy"><p>動作に当たって、YAML定義を元にフィーチャーフラグの値を返す設定を入れます。<br>今回は、リクエストに <code>role</code> というキーの値が <code>admin</code> の場合に、<code>flag-only-for-admin</code> &#x3D; <code>true</code> を返す設定とします。</p><figure class="highlight yaml"><figcaption><span>flag-config.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flag-only-for-admin:</span></span><br><span class="line">  <span class="attr">variations:</span></span><br><span class="line">    <span class="attr">admin:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">other:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">targeting:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">query:</span> <span class="string">role</span> <span class="string">eq</span> <span class="string">&quot;admin&quot;</span></span><br><span class="line">      <span class="attr">percentage:</span></span><br><span class="line">        <span class="attr">admin:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">other:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">defaultRule:</span></span><br><span class="line">    <span class="attr">percentage:</span></span><br><span class="line">      <span class="attr">admin:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">other:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>goff-proxy.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">listen:</span> <span class="number">1031</span></span><br><span class="line"><span class="attr">pollingInterval:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">startWithRetrieverError:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">retriever:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">flag-config.yaml</span></span><br><span class="line"><span class="attr">exporter:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">log</span></span><br></pre></td></tr></table></figure><p>上記の2つのYAMLを同一階層において、go-feature-flag-relay-proxyを起動します。</p><figure class="highlight sh"><figcaption><span>Docker起動</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -p 1031:1031 \</span><br><span class="line">    -v $(<span class="built_in">pwd</span>)/flag-config.yaml:/flag-config.yaml \</span><br><span class="line">    -v $(<span class="built_in">pwd</span>)/goff-proxy.yaml:/goff-proxy.yaml \</span><br><span class="line">    thomaspoignant/go-feature-flag-relay-proxy:latest</span><br></pre></td></tr></table></figure><p>GoのクライアントアプリからProvider側を実行します。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">gofeatureflag <span class="string">&quot;github.com/open-feature/go-sdk-contrib/providers/go-feature-flag/pkg&quot;</span></span><br><span class="line">of <span class="string">&quot;github.com/open-feature/go-sdk/pkg/openfeature&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line"><span class="comment">// プロバイダーの初期化</span></span><br><span class="line">provider, err := gofeatureflag.NewProviderWithContext(ctx, gofeatureflag.ProviderOptions&#123;</span><br><span class="line">Endpoint: <span class="string">&quot;http://localhost:1031&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;gofeatureflag new provider: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">of.SetProvider(provider)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 評価するための情報を付与</span></span><br><span class="line">client := of.NewClient(<span class="string">&quot;my-app&quot;</span>)</span><br><span class="line">evaluationCtx := of.NewEvaluationContext(</span><br><span class="line"><span class="string">&quot;1d1b9238-2591-4a47-94cf-d2bc080892f1&quot;</span>,</span><br><span class="line"><span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;firstname&quot;</span>: <span class="string">&quot;mirai&quot;</span>,</span><br><span class="line"><span class="string">&quot;lastname&quot;</span>:  <span class="string">&quot;taro&quot;</span>,</span><br><span class="line"><span class="string">&quot;role&quot;</span>:      <span class="string">&quot;admin&quot;</span>, <span class="comment">// ★admin 設定</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// OpenFeatureのSDK経由で、go-feature-flag-relay-proxyにフラグ値を問い合わせる</span></span><br><span class="line">adminFlag, _ := client.BooleanValue(ctx, <span class="string">&quot;flag-only-for-admin&quot;</span>, <span class="literal">false</span>, evaluationCtx)</span><br><span class="line"><span class="keyword">if</span> adminFlag &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;アドミン向け機能ON&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;アドミン向け機能OFF&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記を実行すると <code>アドミン向け機能ON</code> が出力されます。標準の機能としても、<code>evaluationCtx</code> の部分にあるように、フラグの判定情報をフィーチャーフラグ管理サービス側に渡して、評価させることができます。このサンプルでは、氏名とロール情報だけですが、IPアドレスやユーザーの契約情報、もしくはメールアドレスなどを渡すことで、特定のルールベースでフラグ値を書き換えることができます。</p><p>例えば「ある地域の顧客の 1 パーセントに絞って」とか、「最近アカウントを作成した顧客にのみに適用させたい」といったことにも対応できそうですね。OpeanFeatureとは直接関係ない「GO Feature Flag」の領域の話ですが、面白く感じます。</p><p>OpenFeatureのGo SDKは上記のBoolean値の評価以外にも、下記のようなAPIがあります。Boolean値にとどめた方が良さそうな気がしますが、OpenFeatureの仕様で文字列や数値型も許容されていることが分かります。</p><ul><li>StringEvaluation()</li><li>FloatEvaluation()</li><li>IntEvaluation()</li><li>ObjectEvaluation()</li></ul><p>使ってみての何かしらの付加情報込みでフィーチャーフラグを制御したいだとか、問い合わせ時にロギングなどのフックが欲しい程度の要件であれば、現段階でも十分使えそうだなと感じました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>OpenFeatureを使ってみた記事です。こういったベンダーロックインを回避する抽象化層は、機能制約がかかるというリスクはあるものの（フィーチャーフラグ管理サービスを使う場合、その機能をフルで利用できないということです）、そのプロダクトに依存しすぎることを防いでくれる側面もあるので、個人的には使っていきたいと感じました。</p><p>Providerの実装は現状だとインターフェースは絞られており実装の難易度はそこまで高く無さそうですので、そのうちトライできたらなと思います。</p><p>フィーチャーフラグを利用する場合に、OpenFeatureの採用も考慮に入れる材料になれば幸いです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230621a/top.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;600&quot; loading=&quot;lazy&quot;&gt;


&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="DevOps" scheme="https://future-architect.github.io/categories/DevOps/"/>
    
    
    <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
    <category term="OpenFeature" scheme="https://future-architect.github.io/tags/OpenFeature/"/>
    
    <category term="フィーチャーフラグ" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%82%A3%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%95%E3%83%A9%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>音声合成サービス比較検証</title>
    <link href="https://future-architect.github.io/articles/20230620a/"/>
    <id>https://future-architect.github.io/articles/20230620a/</id>
    <published>2023-06-19T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-はじめに"><a href="#1-はじめに" class="headerlink" title="1. はじめに"></a>1. はじめに</h1><p>フューチャーアーキテクトでアルバイトをしている寺迫です。</p><p>代表的な音声合成サービスの使用方法や性能の違いについて調査しました。</p><p><strong>音声合成(text-to-speech)の概要</strong></p><ul><li>コンピュータを用いて音声を生成する技術(主に人間の発話音声)</li><li>深層学習・強化学習における音声合成モデルの性能向上により、自然な音声を生成することが出来る</li><li>応用分野<br>  - 音声案内システム：券売機や電話案内、ナビゲーション等に利用される<br>  - バーチャルキャラクター:キャラクターのセリフの作成に利用される<br>  - 失声症の方への支援</li></ul><p><strong>想定読者</strong></p><ul><li>音声合成サービスを試してみたい人</li><li>品質の良い音声合成を行いたい人</li><li>音声合成サービスの差異を確認したい人</li></ul><p><strong>記事に含まれない内容</strong></p><ul><li>音声合成モデルの説明</li><li>音声合成時の具体的な読み間違い・イントネーションなどの調整方法</li><li>英語言語の音声合成</li></ul><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>付録として、本記事で比較を行っていない音声合成サービスのリンク集(サンプル音声、音声合成デモ)を表にまとめています。</p></div><div class="note warn" style="background: #fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>本記事の調査は2023年5月に行ったものです。最新の声色の種類や音声合成モデルの変更などのアップデート情報は各サービスドキュメント等の参照を推奨します。</p></div><h1 id="2-音声合成サービス比較"><a href="#2-音声合成サービス比較" class="headerlink" title="2. 音声合成サービス比較"></a>2. 音声合成サービス比較</h1><h1 id="2-1-比較方法"><a href="#2-1-比較方法" class="headerlink" title="2.1 比較方法"></a>2.1 比較方法</h1><h3 id="比較サービス一覧"><a href="#比較サービス一覧" class="headerlink" title="比較サービス一覧"></a>比較サービス一覧</h3><p>音声合成サービスのうち、①商用利用可能 ②API提供あり③公式ドキュメントの充実④発音調整が可能なものを比較しました。</p><ul><li><a href="https://cloud.google.com/text-to-speech?hl=ja">Google Cloud Platform text-to-speech(以下、GCP TTS)</a></li><li><a href="https://aws.amazon.com/jp/polly/">Amazon Polly(以下、Polly)</a></li><li><a href="https://azure.microsoft.com/en-us/products/cognitive-services/text-to-speech">Azure text-to-speech(以下、Azure TTS)</a></li><li><a href="https://voicevox.hiroshiba.jp/">VOICEVOX</a></li></ul><h3 id="比較観点"><a href="#比較観点" class="headerlink" title="比較観点"></a>比較観点</h3><p>8項目を比較観点としました。</p><ul><li>声色の種類</li><li>音声合成の品質<ul><li>音質</li><li>ノイズ</li><li>読み間違い</li><li>なまり(アクセント、イントネーション)</li></ul></li><li>辞書機能</li><li>音声調整の容易さ</li><li>実装負荷(Software Development Kitの有無)</li><li>利用料金</li><li>クォータリクエスト上限</li><li>入力文字制限</li></ul><h3 id="比較に使用したテキストデータ"><a href="#比較に使用したテキストデータ" class="headerlink" title="比較に使用したテキストデータ"></a>比較に使用したテキストデータ</h3><p>平均100文字の日本語テキスト約35文で品質の評価を行いました。</p><h1 id="2-2-比較結果詳細"><a href="#2-2-比較結果詳細" class="headerlink" title="2.2 比較結果詳細"></a>2.2 比較結果詳細</h1><h2 id="声色の種類"><a href="#声色の種類" class="headerlink" title="声色の種類"></a>声色の種類</h2><div class="note warn" style="background: #fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>声色の種類は日本語に限定しています。その他の言語については、公式ドキュメントの参照を推奨します。</p></div><p>声色の種類はVOICEVOXが多いです。アニメからアナウンスまで多彩な状況にマッチする声色が揃っています。</p><p>GCP TTS、Polly、Azure TTSはアナウンス、会話音声に向いている声色の種類があります。</p><div class="scroll"><table><thead><tr><th align="left">サービス名</th><th>声色の種類</th><th>参照元</th></tr></thead><tbody><tr><td align="left">VOICEVOX</td><td>・20種類のキャラクターVOICEと複数の発話タイプ合計46種類から選択が可能である。 <br>・声色によってクレジット表記や契約が必要なものがある。</td><td><a href="https://voicevox.hiroshiba.jp/">VOICEVOXホームページ</a></td></tr><tr><td align="left">GCP TTS</td><td>・「BASIC<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>」,「WaveNet<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>」,「Neural2<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>」 各自４パターンの声色が設定可能である。 <br> ・BASIC,WaveNetの音声はロボットが発話しているような音声が生成される。　<br>・Neural2音声は人間のように自然である。</td><td><a href="https://cloud.google.com/text-to-speech/docs/voices?hl=ja">Google Cloud ドキュメント</a></td></tr><tr><td align="left">Polly</td><td>・「standard<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>」2種類、「neural<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>」3種類　<br>・neuralの音声は人間のように自然である。</td><td><a href="hhttps://aws.amazon.com/jp/polly/features/?nc=sn&loc=3">Amazon Polly ドキュメント</a></td></tr><tr><td align="left">Azure TTS</td><td>・「neural<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>」7種類　<br>・音声は人間のように自然である。</td><td><a href="https://learn.microsoft.com/ja-jp/azure/cognitive-services/speech-service/language-support?tabs=tts#text-to-speech">Azure Cognitive Services ドキュメント</a></td></tr></tbody></table></div><h2 id="品質"><a href="#品質" class="headerlink" title="品質"></a>品質</h2><div class="note warn" style="background: #fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>音声合成の品質は定性的な評価であり、実際に使用するテキストを用いて品質確認を推奨します。</p></div><div class="note warn" style="background: #fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>品質の評価は以下の声色で行いました。VOICEVOX(波音リツ)、GCP TTS(ja-JP-Neural2-B)、Polly(neural Takumi)、Azure TTS(neural 七海)</p></div><p>Azure TTS &gt; Polly &gt; GCP TTS &gt; VOICEVOXの順番で合成音声の品質が良いです。VOICEVOXはノイズが発生したり、イントネーションが不自然な時があります。Azure TTS、Polly、GCP TTSに関して、無調整だと少し不自然なところがあります。しかし、アクセント、イントネーションの調整によって、自然な音声を生成することができます。</p><div class="scroll"><table><thead><tr><th>サービス名</th><th align="center">音質</th><th align="center">ノイズ</th><th align="center">読み間違い</th><th align="center">なまり</th><th>備考</th></tr></thead><tbody><tr><td>VOICEVOX</td><td align="center">△</td><td align="center">ｘ</td><td align="center">△</td><td align="center">△</td><td>ノイズが発生する確率が高く、イントネーションが不自然である。</td></tr><tr><td>GCP TTS</td><td align="center">〇</td><td align="center">◎</td><td align="center">◎</td><td align="center">◎</td><td>ロボットのような平坦な発声になる場合がある。</td></tr><tr><td>Polly</td><td align="center">◎</td><td align="center">◎</td><td align="center">◎</td><td align="center">◎</td><td>不自然な間(無音)が挿入される場合がある。</td></tr><tr><td>Azure TTS</td><td align="center">◎</td><td align="center">◎</td><td align="center">◎</td><td align="center">◎</td><td>品質が良く、違和感を感じるところは少ない。</td></tr></tbody></table></div><h2 id="辞書機能"><a href="#辞書機能" class="headerlink" title="辞書機能"></a>辞書機能</h2><p>GCP TTS以外辞書機能を備えています。登録できる単語数の上限が決められていることや、辞書ファイルをpublicなURIに公開が必要など扱いづらいところがあります。</p><div class="scroll"><table><thead><tr><th align="left">サービス名</th><th>辞書機能</th><th>参照元</th></tr></thead><tbody><tr><td align="left">VOICEVOX</td><td>・読み間違い、アクセント、エイリアス<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>の登録が可能<br></td><td><a href="https://voicevox.hiroshiba.jp/">VOICEVOXホームページ</a></td></tr><tr><td align="left">GCP TTS</td><td>・ドキュメントに記載なし</td><td></td></tr><tr><td align="left">Polly TTS</td><td>・XML形式のカスタム辞書ファイルを登録可能<br>・読み間違い、アクセント、エイリアス<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>の登録が可能<br> ・100辞書の登録が可能<br>・１辞書当たり4000文字登録可能<br>・音声生成時、5辞書指定可能</td><td><a href="https://docs.aws.amazon.com/ja_jp/polly/latest/dg/managing-lexicons.html">レキシコンの管理</a></td></tr><tr><td align="left">Azure TTS</td><td>・XML構造化カスタム辞書ファイルを登録可能　<br>・辞書機能を使用するためにpublicなURIにファイルを配置する必要がある。 <br>・読み間違い、アクセント、エイリアス<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>の登録が可能<br>・辞書の最大ファイルサイズは100KB(日本語約51,200文字‬)に制限</td><td><a href="https://learn.microsoft.com/ja-jp/azure/cognitive-services/speech-service/speech-synthesis-markup-pronunciation#custom-lexicon">Azure Cognitive Services ドュメント</a></td></tr></tbody></table></div><h2 id="利用料金"><a href="#利用料金" class="headerlink" title="利用料金"></a>利用料金</h2><p>VOICEVOXは1部の声色の商用利用が有料であるが基本無料です。</p><p>GCP TTS、Polly、Azure TTSは無料枠を除き、同一料金の従量課金です。</p><div class="scroll"><table><thead><tr><th align="left">サービス名</th><th>無料枠</th><th>超過分</th><th>参照元</th></tr></thead><tbody><tr><td align="left">VOICEVOX</td><td>・基本無料<br></td><td>・基本無料</td><td><a href="https://voicevox.hiroshiba.jp/">VOICEVOXホームページ</a></td></tr><tr><td align="left">GCP TTS</td><td>・BASIC<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 1か月あたり 400文字無料<br>・WaveNet<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> 1か月あたり 100文字無料<br>・Neural2<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> 1か月あたり 100文字無料</td><td>・BASIC 100文字当たり4ドル <br>・WaveNet 100文字当たり16ドル <br>・Neural2 100文字当たり16ドル</td><td><a href="https://cloud.google.com/text-to-speech/pricing?hl=ja">Text-to-Speech の料金</a></td></tr><tr><td align="left">Polly</td><td>・standard<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> 最初のリクエストから12か月間は1か月あたり 500万文字無料<br>・neural<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> 最初のリクエストから 12 か月間は 1 か月あたり 100 万文字無料<br></td><td>・standard 100文字当たり4ドル<br>・neural 100文字当たり16ドル</td><td><a href="https://aws.amazon.com/jp/polly/pricing/">Amazon Polly 料金</a></td></tr><tr><td align="left">Azure TTS</td><td>・1か月あたり 50万文字無料<br></td><td>・100文字当たり16ドル</td><td><a href="https://azure.microsoft.com/ja-jp/pricing/details/cognitive-services/speech-services/">Speech Services の価格</a></td></tr></tbody></table></div><h2 id="実装負荷"><a href="#実装負荷" class="headerlink" title="実装負荷"></a>実装負荷</h2><p>GCP TTS、Polly、Azure TTSは、Software Development Kit(SDK)が準備されているため、容易に実装することが可能です。</p><div class="scroll"><table><thead><tr><th align="left">サービス名</th><th>実装負荷(SDK有無)</th><th align="center">認証必要&#x2F;不要</th><th>参照元</th></tr></thead><tbody><tr><td align="left">VOICEVOX</td><td>SDKはない。</td><td align="center">不要</td><td><a href="https://voicevox.hiroshiba.jp/">VOICEVOX　APIリクエスト実装例</a></td></tr><tr><td align="left">GCP TTS</td><td>C#、Go、Java、Node.js、PHP、Python、RubyでのSDKが用意されている。</td><td align="center">必要</td><td><a href="https://cloud.google.com/text-to-speech/docs/libraries?hl=ja#client-libraries-install-php">Google Cloud ドキュメント</a></td></tr><tr><td align="left">Polly</td><td>Android、JavaScript、iOS、Java、.NET、Node.js、Python、PHP、RubyでのSDKが用意されている。</td><td align="center">必要</td><td><a href="https://aws.amazon.com/jp/polly/developers/">開発者用リソース</a></td></tr><tr><td align="left">Azure TTS</td><td>C#、Go、Java、Node.js、PHP、Python、RubyでのSDKが用意されている。</td><td align="center">必要</td><td><a href="https://learn.microsoft.com/ja-jp/azure/cognitive-services/speech-service/get-started-text-to-speech?pivots=programming-language-csharp&tabs=windows,terminal">Azure Speech Services</a></td></tr></tbody></table></div><h2 id="音声調整の容易さ"><a href="#音声調整の容易さ" class="headerlink" title="音声調整の容易さ"></a>音声調整の容易さ</h2><p>Polly、AzureTTSで使用できる「カナ」を用いた、音声調整はとても直観的で優れています。GCP TTSでの音声調整は国際音素記号を使用が必要なためで学習コストと調整コストが高いです。</p><div class="scroll"><table><thead><tr><th align="left">サービス名</th><th>音素・アクセント・イントネーションの調整</th><th align="center">GUI対応</th><th align="center">SSML対応<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></th><th align="center">調整コスト</th></tr></thead><tbody><tr><td align="left">VOICEVOX</td><td>・GUI操作で調整可能である。</td><td align="center">〇</td><td align="center">x</td><td align="center">中</td></tr><tr><td align="left">GCP TTS</td><td>・<a href="https://cloud.google.com/text-to-speech/docs/phonemes?hl=ja">日本語の音素記号がサポートされていない</a>ため、&lt;phoneme&gt;タグ内で国際音素記号<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>を用いて調整を行う。</td><td align="center">x</td><td align="center">〇</td><td align="center">高</td></tr><tr><td align="left">Polly</td><td>・&lt;phoneme&gt;タグ内で「’」記号を用いて、直観的に調整可能である。</td><td align="center">x</td><td align="center">〇</td><td align="center">低</td></tr><tr><td align="left">Azure  TTS</td><td>・&lt;phoneme&gt;タグ内で「’」記号を用いて、直観的に調整可能である。<br>・ピッチ曲線でイントネーションを視覚的に調整できる。<br>・Audio Content Creation(音声生成GUI)を使用できる。</td><td align="center">〇</td><td align="center">〇</td><td align="center">低</td></tr></tbody></table></div><p>カナを用いた発音調整(読み間違い+アクセント)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">飴と雨のアクセント例</span><br><span class="line">「雨」は「ア」が高く「メ」が低い、反対に「飴」は「ア」が低く「メ」が高く発音される。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 雨が降る</span></span><br><span class="line">&lt;phoneme alphabet=<span class="string">&quot;x-amazon-pron-kana&quot;</span> ph=<span class="string">&quot;アメ&quot;</span>&gt;雨&lt;/phoneme&gt;が降る</span><br><span class="line"></span><br><span class="line"><span class="comment"># 飴を食べる</span></span><br><span class="line">&lt;phoneme alphabet=<span class="string">&quot;x-amazon-pron-kana&quot;</span> ph=<span class="string">&quot;アメ&#x27;&quot;</span>&gt;飴&lt;/phoneme&gt;を食べる</span><br><span class="line"></span><br><span class="line">橋と箸のアクセント例</span><br><span class="line">「橋」 の「ハ」は低く、「シ」は高く、 「箸」 の「ハ」は高く、「シ」は低く発音される。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 橋を渡る</span></span><br><span class="line">&lt;phoneme alphabet=<span class="string">&quot;x-amazon-pron-kana&quot;</span> ph=<span class="string">&quot;ハシ&quot;</span>&gt;橋&lt;/phoneme&gt;を渡る</span><br><span class="line"></span><br><span class="line"><span class="comment"># 箸を使う</span></span><br><span class="line">&lt;phoneme alphabet=<span class="string">&quot;x-amazon-pron-kana&quot;</span> ph=<span class="string">&quot;ハシ&#x27;&quot;</span>&gt;箸&lt;/phoneme&gt;を使う</span><br></pre></td></tr></table></figure><p>VOICEVOX、GUI上での音声調整</p><img src="/images/20230620a/VOICEVOX.PNG" alt="VOICEVOX.PNG" width="1200" height="625" loading="lazy"><p>Azure、GUI上でのイントネーション修正</p><img src="/images/20230620a/キャプチャ.PNG" alt="キャプチャ.PNG" width="1200" height="706" loading="lazy"><h2 id="APIクォータ"><a href="#APIクォータ" class="headerlink" title="APIクォータ"></a>APIクォータ</h2><p>GCP TTS、Polly、Azure TTSは申請することで上限を引き上げることが出来ます。</p><div class="scroll"><table><thead><tr><th align="left">サービス名</th><th>リクエスト上限</th><th>参照元</th></tr></thead><tbody><tr><td align="left">VOICEVOX</td><td>記載なし</td><td><a href="https://voicevox.hiroshiba.jp/">VOICEVOX　APIリクエスト実装例</a></td></tr><tr><td align="left">GCP TTS</td><td>standard、neuralともに 16tps<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup><br>※申請により上限を上げることができる。</td><td><a href="https://cloud.google.com/text-to-speech/quotas?hl=ja">割り当てと上限</a></td></tr><tr><td align="left">Polly(SynthesizeSpeech API)</td><td>standard: 80tps、バースト制限100tps<br>neural: 8tps、バースト制限10tps<br>※申請により上限を上げることができる。</td><td><a href="https://docs.aws.amazon.com/ja_jp/polly/latest/dg/limits.html">Amazon Polly のクォータ</a></td></tr><tr><td align="left">Polly(StartSpeechSynthesisTask API)</td><td>standard: 10tps、バースト制限12tps<br>neural: 1tps<br>※申請により上限を上げることができる。</td><td><a href="https://docs.aws.amazon.com/ja_jp/polly/latest/dg/limits.html">Amazon Polly のクォータ</a></td></tr><tr><td align="left">Azure TTS</td><td>200tps<br>申請により上限を上げることができる(MAX1000tps)。</td><td><a href="https://azure.microsoft.com/ja-jp/pricing/details/cognitive-services/speech-services/">Azure Speech Services</a></td></tr></tbody></table></div><p>SpeechSynthesisTaskとStartSpeechSynthesisTaskの違い</p><div class="scroll"><table><thead><tr><th>API名</th><th>レスポンス</th><th>データ保存</th><th>入力テキスト制限</th></tr></thead><tbody><tr><td>SpeechSynthesisTask</td><td>合成された音声のバイトストリーム</td><td>レスポンス結果を各自でストレージに保存</td><td>最大3,000文字</td></tr><tr><td>StartSpeechSynthesisTask</td><td>非同期合成タスクオブジェクト</td><td>Amazon S3 バケットに保存</td><td>最大100,000文字</td></tr></tbody></table></div><h2 id="合成音声の最大長"><a href="#合成音声の最大長" class="headerlink" title="合成音声の最大長"></a>合成音声の最大長</h2><p>万単位文字の音声合成を行う場合Polly、Azure TTSを使用する必要があります。</p><div class="scroll"><table><thead><tr><th align="left">サービス名</th><th>生成可能な音声の長さ</th><th>入力文字数制限</th><th>参照元</th></tr></thead><tbody><tr><td align="left">VOICEVOX</td><td>記述なし</td><td>記述なし</td><td></td></tr><tr><td align="left">GCP TTS</td><td>記述なし</td><td>5,000B<br>(日本語約2,560文字)</td><td><a href="https://cloud.google.com/text-to-speech/quotas?hl=ja">割り当てと上限</a></td></tr><tr><td align="left">Polly(SynthesizeSpeech API)</td><td>10分</td><td>3,000文字<br>※<a href="https://docs.aws.amazon.com/ja_jp/polly/latest/dg/supportedtags.html">SSMLタグ</a>を除く</td><td><a href="https://github.com/awsdocs/amazon-polly-developer-guide/blob/master/doc_source/limits.md">Quotas in Amazon Polly</a></td></tr><tr><td align="left">Polly(StartSpeechSynthesisTask API)</td><td>記載なし</td><td>100,000文字<br>※<a href="https://docs.aws.amazon.com/ja_jp/polly/latest/dg/supportedtags.html">SSMLタグ</a>を除く</td><td><a href="https://github.com/awsdocs/amazon-polly-developer-guide/blob/master/doc_source/limits.md">Quotas in Amazon Polly</a></td></tr><tr><td align="left">Azure TTS</td><td>10分</td><td>64KB<br>(日本語約33,000文字)</td><td><a href="https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-services-quotas-and-limits">Azure Speech Services</a></td></tr></tbody></table></div><h1 id="2-3-比較結果まとめ"><a href="#2-3-比較結果まとめ" class="headerlink" title="2.3 比較結果まとめ"></a>2.3 比較結果まとめ</h1><p>音声合成サービスを比較した結果の長所、短所をまとめました。 </p><p>IaaSに依存しない場合、Azure TTS &gt; Polly &gt; GCP TTS &gt; VOICEVOXの順でお勧めです。</p><div class="scroll"><table><thead><tr><th align="left">サービス名</th><th>長所</th><th>短所</th></tr></thead><tbody><tr><td align="left">VOICEVOX</td><td>・基本的に無料(一部音声の商用利用が有料)で使用することができる。<br>・アニメキャラクターのよう声色から朗読まで広範囲の場面に対応できる。<br> ・ソフトウェアのインストールのみで利用できる。<br>・GUIでの直観的な合成の調整が可能である。</td><td>・合成音声の品質が他サービスに劣る。<br>・音声調整の癖があり、コツをつかむまで時間がかかってしまう。<br>・調整しても消すことができないノイズが音声する場合がある。</td></tr><tr><td align="left">GCP TTS</td><td>SDKが充実している。</td><td>・ドキュメントに辞書機能の記述がない。<br>・アクセント、イントネーション調整に「カナ」が使用できないため「国際音素記号<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>」を使用する必要がある。</td></tr><tr><td align="left">Polly</td><td>・SDKが充実している。<br>・neuralで作成した音声は、自然な印象を受ける。<br>・アクセント、イントネーションを「カナ」で直観的に調整可能である。</td><td>・自動的に挿入される間(音声の空白時間)が不自然な場合がある。</td></tr><tr><td align="left">Azure TTS</td><td>・SDKが充実している。<br>・neuralで作成した音声は、自然な印象を受ける。<br>・アクセント、イントネーションを「カナ」で直観的に調整可能である。<br>・GUIでの直観的な合成の調整が可能である。</td><td>・短所に感じる箇所はなかった。</td></tr></tbody></table></div><h1 id="3-おわりに"><a href="#3-おわりに" class="headerlink" title="3. おわりに"></a>3. おわりに</h1><p>本記事ではアナウンス、朗読の仕様用途を想定した比較検証の結果をまとめました。</p><p>生成モデルは日進月歩で性能が向上し、SOTA(Steate of the art)が続々と塗り替えられています。deep modelの音声合成は特段修正せずとも違和感が少なく驚きました。しかし、イントネーションについては調整を行わなければいけない場合が多少ありました。今後の音声合成モデル改善に期待したいです。</p><p>付録に記載した、リンク集は他の記事で見当たりませんでした。サンプル音声の再生や音声合成のデモを簡単に触ることができるのでぜひ試してほしいです。</p><p>本記事が音声合成を用いてサービスを作成する人の助けになると幸いです。</p><h1 id="4-付録"><a href="#4-付録" class="headerlink" title="4. 付録"></a>4. 付録</h1><h2 id="4-1-各サービス-SAMPLE・DEMO一覧"><a href="#4-1-各サービス-SAMPLE・DEMO一覧" class="headerlink" title="4.1 各サービス　SAMPLE・DEMO一覧"></a>4.1 各サービス　SAMPLE・DEMO一覧</h2><p>※以下のsample・demoは音声の品質確認用途以外の目的で使用できないため注意が必要</p><div class="scroll"><table><thead><tr><th>サービス名</th><th align="center">登録必要&#x2F;不要</th><th align="center">音声サンプル</th><th>備考</th></tr></thead><tbody><tr><td><a href="https://cloud.google.com/text-to-speech?hl=ja">GCP TTS</a></td><td align="center">不要</td><td align="center">✕</td><td>登録せずとも持参のテキストで音声合成を試すことができる</td></tr><tr><td><a href="https://aws.amazon.com/jp/polly/">Polly</a></td><td align="center">必要</td><td align="center"><a href="https://aws.amazon.com/jp/blogs/news/amazon-polly-japanese-text-optimization/">〇</a></td><td>awsの無料枠の範囲で試すことが可能</td></tr><tr><td><a href="https://speech.microsoft.com/audiocontentcreation">Azure TTS</a></td><td align="center">不要</td><td align="center">✕</td><td>登録せずとも持参のテキストで音声合成を試すことができる</td></tr><tr><td><a href="https://coefont.cloud/coefonts">CoeFont</a></td><td align="center">必要</td><td align="center"><a href="">〇</a></td><td>持参のテキストで音声合成を行う場合は登録が必要<br>二か月間の無料枠がある(2023年5月現在)</td></tr><tr><td><a href="https://readspeaker.jp/">ReadSpeaker</a></td><td align="center">不要</td><td align="center"><a href="https://readspeaker.jp/samplevoice/">〇</a></td><td>登録せずとも持参のテキストで音声合成を試すことができる</td></tr><tr><td><a href="https://coestation.jp/business/editor/">コエステーション</a></td><td align="center">不要</td><td align="center"><a href="https://coestation.jp/sample/">〇</a></td><td>登録せずとも持参のテキストで音声合成を試すことができる</td></tr><tr><td><a href="https://www.ai-j.jp/">AITalk</a></td><td align="center">不要</td><td align="center"><a href="https://www.ai-j.jp/about/">〇</a></td><td>登録せずとも持参のテキストで音声合成を試すことができる</td></tr><tr><td><a href="https://www.global.toshiba/jp/products-solutions/ai-iot/recaius.html">RECAIUS</a></td><td align="center">必要</td><td align="center">✕</td><td>登録後、問い合わせが必要</td></tr><tr><td><a href="https://voicevox.su-shiki.com/">VOICE VOX</a></td><td align="center">不要</td><td align="center"><a href="https://voicevox.hiroshiba.jp/">〇</a></td><td>登録せずとも持参のテキストで音声合成を試すことができる<br>dokcerでVOICEVOXコンテナを起動 or ソフトウェアのインストールが必要</td></tr></tbody></table></div><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><strong>BASIC</strong>GCP TTSのVoice Typeの1種信号処理アルゴリズム<a href="https://en.wikipedia.org/wiki/Vocoder">Vocoder</a>により音声データを生成する。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><strong>WaveNet</strong>GCP TTSのVoice Typeの1種<a href="https://cloud.google.com/blog/products/ai-machine-learning/introducing-cloud-text-to-speech-powered-by-deepmind-wavenet-technology?hl=en">DeepMind WaveNet</a>のニューラルモデルにより音声データを生成する</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><strong>Neural2</strong>GCP TTSのVoice Typeの1種最先端の合成音声生成技術が使用されている。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;"><strong>standard</strong>PollyのVoice Typeの1種録音された音声の音素をまとめ (連結)、自然な合成音声を生成する。</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;"><strong>neural</strong>最新のdeepmodelにより合成音声を生成する。</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;"><strong>エイリアス</strong>略語などの読み方を別称として登録することができる<br>例1)WHO → World Health Organization <br>例2)WHO → 世界保健機関</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="vertical-align: top; padding-right: 10px;">7.</span><span style="vertical-align: top;"><strong>SSML(Speech Synthesis Markup Language)</strong>- XMLの一種- 音声合成の制御を行うことができる- サービスによって独自のタグ(制御方法)がある- <a href="https://www.w3.org/TR/speech-synthesis11/">W3Cにおいて標準化されている</a>- <a href="https://docs.aws.amazon.com/ja_jp/polly/latest/dg/supportedtags.html">polly SSML タグ説明ドキュメント</a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># polly SSMLの一例</span><br><span class="line">&lt;speak&gt;本日、&lt;phoneme alphabet=&quot;x-amazon-pron-kana&quot; ph=&quot;セカイホケンキカン&quot;&gt;世界保健機関&lt;/phoneme&gt;が記者会見を開いた。&lt;/speak&gt;</span><br></pre></td></tr></table></figure></span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="vertical-align: top; padding-right: 10px;">8.</span><span style="vertical-align: top;"><strong>国際音素記号(IPA)</strong>様々な言語の音声を文字で表記を行うために国際音声学会が定めた音声記号である。<a href="http://daijirin.dual-d.net/extra/nihongoon.html">大辞林 日本語の音</a></span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="vertical-align: top; padding-right: 10px;">9.</span><span style="vertical-align: top;"><strong>tps(transaction per second)</strong>一秒間のトランザクション量</span><a href="#fnref:9" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;1-はじめに&quot;&gt;&lt;a href=&quot;#1-はじめに&quot; class=&quot;headerlink&quot; title=&quot;1. はじめに&quot;&gt;&lt;/a&gt;1.</summary>
        
      
    
    
    
    <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
    <category term="TextToSpeech" scheme="https://future-architect.github.io/tags/TextToSpeech/"/>
    
    <category term="音声合成" scheme="https://future-architect.github.io/tags/%E9%9F%B3%E5%A3%B0%E5%90%88%E6%88%90/"/>
    
    <category term="VOICEVOX" scheme="https://future-architect.github.io/tags/VOICEVOX/"/>
    
    <category term="Polly" scheme="https://future-architect.github.io/tags/Polly/"/>
    
  </entry>
  
  <entry>
    <title>wasmCloudが夢見る世界</title>
    <link href="https://future-architect.github.io/articles/20230619b/"/>
    <id>https://future-architect.github.io/articles/20230619b/</id>
    <published>2023-06-18T15:00:01.000Z</published>
    <updated>2023-07-11T03:40:32.132Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20230619a/">CNCF連載</a>の1日目の記事です。</p><p>サーバーレスのランタイムに興味があり、CNCFのプロジェクトを見たところ、それに関連しそうなwasmCloudというものがあったので見てみました。</p><h1 id="wasmCloudとは？"><a href="#wasmCloudとは？" class="headerlink" title="wasmCloudとは？"></a>wasmCloudとは？</h1><p>ぱっと見wasmで書いたロジックを実行するフレームワークに見えますが(他の説明の文書はこういう表現をしていませんが)、wasm製アプリケーションのためのOSのようなものです。</p><p>みなさんがこのページを見るのに使うブラウザも、普段コードを書くエディタも、OSから見れば「プロセス」です。プロセスは、それそのものではCPUサイクルを消費して電力を熱に変えるぐらいしか能力はありません。直接物理メモリにアクセスしたり、ファイル読み書きしたり、ネットワークアクセスをしたりはできません。そう言う仕事はシステムコールを通じてOSにお願いする必要があります。</p><p>と言う話は、みなさんはGoならわかるシステムプログラミングをお読みになってすでにご存知だと思いますが、もし読んでない方がいたら、下記のサイトで読めます。</p><ul><li><a href="https://ascii.jp/elem/000/001/267/1267477/">ASCII PROGRAMMING+: Goならわかるシステムプログラミング&#x2F;Goから見たシステムコール</a></li></ul><p>wasmのアプリケーションと、OSにあたる機能を実装する部品を組み合わせてアプリケーションを作ってしまおう、というプラットフォームになっています。</p><p>wasmのアプリケーションの作成については、TinyGoとRustの雛形が作成できるようになっています。</p><h1 id="wasmCloudの構造"><a href="#wasmCloudの構造" class="headerlink" title="wasmCloudの構造"></a>wasmCloudの構造</h1><p>wasm自身は計算をしたり文字列を処理したり（バイトの配列として）といった機能しかありません。それだけでは（現時点では）Webサービスを作ったり、クラウドのAPIを使ったり、データベースへの読み書きはできません。Erlangなどを参考にして、次のような構造でアプリケーションを作れるようにしたものとなっています。</p><ul><li>アクター。処理の中心。wasmで実装。</li><li>キャパシティプロバイダー。外部I&#x2F;Oなど。ネイティブバイナリ（OS&#x2F;CPUの組み合わせ)がOCIコンテナでまとめられたもの。</li><li>ホスト。プラットフォーム。この上でアクターとキャパシティプロバイダーを動かし、それらを繋いで1つのアプリケーションにするもの。現時点ではErlang実装。</li></ul><p>アクター・キャパシティプロバイダーはそれぞれ「インタフェース」を通じてやりとりします。インタフェースは<a href="https://github.com/wasmCloud/interfaces/tree/main">ここ</a>で定義されていますが、かなりの種類あります。</p><p>アクターとキャパシティプロバイダーは、「リンク」を使って繋ぎます。そのあたりは管理画面で手でもできますし、washコマンドを使ってもできますし、wadm.yamlという、docker composeみたいな設定を使ってもできます。</p><img src="/images/20230619b/名称未設定ファイル-ページ3.drawio.png" alt="名称未設定ファイル-ページ3.drawio.png" width="471" height="271" loading="lazy"><h1 id="WASIは？"><a href="#WASIは？" class="headerlink" title="WASIは？"></a>WASIは？</h1><p>「wasmCloudがwasmのためのOS」「外部とのやりとりはプロバイダーにまかせる」という説明を見て、最近のwasm事情を追いかけている人は「あれ？WASIあるじゃん」と思われる方もいると思います。</p><ul><li><a href="https://github.com/WebAssembly/WASI/blob/main/Proposals.md">WASI Proposals</a></li></ul><p>wasmCloudは、サーバーレスのプロセスがマイクロサービス的に連携する世界を目指しているようです。</p><ul><li>各アプリケーション（アクター）はシングルスレッドで動く(並列数はwasmCloudが決める)</li><li>各アプリケーション（アクター）はステートレスである</li></ul><p>自前でファイル読み書きしてローカルに出力したりスレッドを増やして処理したり自前で常駐して何かを処理するとなると、ステートレスではなくなってしまいます。そのため、wasmCloudでは、wasmのプロセスはWASIの外部I&#x2F;Oやスレッドの機能を使わせないようにして、そのような処理はプロバイダーに委譲させる、という方針をとっています。セキュリティ上の問題も回避すると説明されています。</p><p>最近はwasmerが<a href="https://wasmer.io/posts/announcing-wasix">WASIX</a>というのを出してきました。WASIがなかなか実用にならないので作ってしまえ、的なノリを感じます。POSIXのAPIのうち、ネットワークやプロセス、スレッドあたりに追加対応したもので、curlコマンドが実行できる、とされています。</p><h1 id="やってみよう・・・かな？"><a href="#やってみよう・・・かな？" class="headerlink" title="やってみよう・・・かな？"></a>やってみよう・・・かな？</h1><p>簡単なチュートリアル以外のことをやってみようかな・・・と思って試したものの、まだうまくいかなかったメモです。</p><h2 id="アクター同士の連携もできる？"><a href="#アクター同士の連携もできる？" class="headerlink" title="アクター同士の連携もできる？"></a>アクター同士の連携もできる？</h2><p>ドキュメントには<a href="https://wasmcloud.com/docs/fundamentals/actors/a2a/">アクター同士の通信もできる</a>、とあります。サンプルはRustです。Goでもできるかも？と思って試しました。　</p><p>使えそうなAPIは次のところにありました。</p><p><a href="https://pkg.go.dev/github.com/wasmcloud/actor-tinygo#ToActor">https://pkg.go.dev/github.com/wasmcloud/actor-tinygo#ToActor</a></p><p>これでトランスポートができるので、これをインタフェースのSender側の初期化に渡してあげたら、アクター間の通信ができる？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transport := actor.ToActor(<span class="string">&quot;アクターID&quot;</span>)</span><br></pre></td></tr></table></figure><p>さっそく、乱数の素数生成のActorを作って(numbergenインタフェース)これにアクセスするアクターを作ろうと思ったのですが・・・自動生成されたインタフェースの<a href="https://pkg.go.dev/github.com/wasmcloud/interfaces/numbergen/tinygo">Senderの初期化メソッド</a>を見ても、トランスポートを受け入れられるようにはできていません・・・</p><p>うまくいかず！</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NumberGenSender <span class="keyword">struct</span>&#123; transport actor.Transport &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewProviderNumberGen</span><span class="params">()</span></span> *NumberGenSender &#123;</span><br><span class="line">transport := actor.ToProvider(<span class="string">&quot;wasmcloud:builtin:numbergen&quot;</span>, <span class="string">&quot;default&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> &amp;NumberGenSender&#123;transport: transport&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewProviderNumberGenLink</span><span class="params">(linkName <span class="type">string</span>)</span></span> *NumberGenSender &#123;</span><br><span class="line">transport := actor.ToProvider(<span class="string">&quot;wasmcloud:builtin:numbergen&quot;</span>, linkName)</span><br><span class="line"><span class="keyword">return</span> &amp;NumberGenSender&#123;transport: transport&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このあたりをおっかけるので見てみましたが、メッセージ類は、MessagePackか、CBORのどちらかにシリアライズされていそうでした。結構たくさんコードやらドキュメント読んだのですが・・・ドキュメントもいっぱいり、サンプルやインタフェースもいろいろあるものの、Goでは少しドキュメントが少なかったり、生成されるコードの使い方がわからなかったり、いろいろあって、若くて発展途上な感じがありました。</p><h1 id="アプリケーションの構造についての感想"><a href="#アプリケーションの構造についての感想" class="headerlink" title="アプリケーションの構造についての感想"></a>アプリケーションの構造についての感想</h1><ul><li>プロバイダーとアクターを分けて、アクターはポータブルにしてどこでも動くウェブアプリケーションを実現！という思想は面白いな、と思いました。</li></ul><p>一方で、ファイルを管理したいときにblobプロバイダーを置いて、リンクを作ってアクセス、というのはちょっとめんどいな、と思いました。プログラミング言語はインストールしたら標準ライブラリでファイルアクセスしたり、HTTPアクセスできるわけで、「プロバイダーは最初から全部使えるようになっている」「ただし、blobがどこかのS3バケットなのか、ローカルファイルなのかは設定でアプリの外から変えられる」ぐらいが使いやすいんじゃないかな、と思いました。</p><p>WASIの形が見えてくる前に走り出しているプロジェクトであり、セキュリティとかも考えられているので、ないかもしれませんが、WASIが対応したら、いっそのことプロバイダーなしでアクターが直接外部とやりとりできるようにした方が、FaaSのLambdaやCloud Functionsなどと近い形態で、開発者は慣れているのでやりやすいんじゃないかな、という気もしました。</p><p>まあ、WASIの仕様をみて、それありきで突っ走った感もあり、夢の若さが溢れるアーキテクチャだな！という気がしました。</p><p>ちょうど今日、似たようなプラットフォームが発表されました。上に書いたWASIXはこれの布石だったんですかね。</p><ul><li><a href="https://www.publickey1.jp/blog/23/webassemblywasmer_edge.html">Publickey: 分散モノリスとWebAssemblyランタイムを用いた新しいアプリプラットフォーム「Wasmer Edge」登場。オーケストレーションもサービスメッシュも不要</a></li></ul><p>やはり、プロバイダーを個別にOSごとに個別に実装する、というアプローチはなかなか難易度が高いというか、やはりこっちのようにwasm自身にできることを増やして、プロバイダーという要素をなくした方が理解はしやすくなるというのはありますよね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>wasmCloudは、複数のwasmプロセスで実現するアプリケーションのためのOSでした。セキュリティなどのためにWASI相当やスレッドを取り除き、アプリケーション（アクター）が行えることを減らし、サーバーレスなマイクロサービス環境が実現できるOSとなっています。アクターはインタフェースを通じてアクターとやりとりをします。アクターからリクエストを受けるインタフェースと、アクターを呼び出すインタフェースがあり、アクターが見える世界はそれだけです。JavaのDIコンテナのように、そのインタフェースの先に何が繋がっているかは検知できませんし、実際、何を繋ぐかは実行時のリンク定義で行います。</p><p>これが成立するかというと、今はまだドキュメントが足りなかったり、利用実績をもとに生成コードが修正されたりするといいな、という状況でした。個人的な思いとはちょっとベクトルは違うのですが、これはこれで夢を持って活動しているプロジェクトなので、今後のアップデートは定期的にチェックしてみようと思いました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
    <category term="wasm" scheme="https://future-architect.github.io/tags/wasm/"/>
    
    <category term="wasmCloud" scheme="https://future-architect.github.io/tags/wasmCloud/"/>
    
  </entry>
  
  <entry>
    <title>CNCF連載2023を始めます</title>
    <link href="https://future-architect.github.io/articles/20230619a/"/>
    <id>https://future-architect.github.io/articles/20230619a/</id>
    <published>2023-06-18T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.131Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230619a/cncf-color.png" alt="" width="1200" height="191" loading="lazy"><p>こんにちは。技術ブログ運営の伊藤太斉です。</p><p>今回はCloud Native Computing Foundation(CNCF)のOSSを取り扱うブログ連載のインデックスです。</p><h2 id="CNCFとは"><a href="#CNCFとは" class="headerlink" title="CNCFとは"></a>CNCFとは</h2><p>Cloud Native Computing Foundationの略で、コンテナオーケストレーションとして知られているKubernetesを中心としたOSSを管理している団体です。年に数回ほどKubeConと呼ばれるカンファレンスを世界各地で実施しており、直近では<a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/">4月</a>にオランダのアムステルダムで開催されました。</p><p>2020年の連載から約3年ぶりとなりましたが、その間にホストしているOSSの数も100を超し、<a href="https://www.cncf.io/reports/cncf-annual-report-2022-jp/">2022年のレポート</a>では157のプロジェクトをホストしていると報じられています(下図の緑グラフ)。また、企業のメンバーシップなどもさらに拡大していることから、CNCFがホストしているOSSやエコシステムに対してさらに注目が増していることも感じられます。</p><img src="/images/20230619a/スクリーンショット_2023-06-19_10.59.25.png" alt="スクリーンショット_2023-06-19_10.59.25.png" width="589" height="547" loading="lazy"><p>引用：<a href="https://www.cncf.io/reports/cncf-annual-report-2022-jp/">CNCF Annual Report 2022 - Japanese translation</a></p><h2 id="プロジェクトについて"><a href="#プロジェクトについて" class="headerlink" title="プロジェクトについて"></a>プロジェクトについて</h2><p>CNCFでは大きくプロジェクトを成熟度レベル別に3つ分類しています。</p><ul><li>Graduated<br>「成熟した」プロジェクトとして認められたものについてはGraduatedになります。ここ最近だとTiKVやHarborといったプロジェクトがGraduatedにあがりました。</li><li>Incubating<br>Sandboxから利用数などが増加するとIncubatingになります。よく使われているIncubatingプロジェクトではArgo CDやgRPCなどが挙げられます。</li><li>Sandbox<br>CNCFのプロジェクトとしては「early stage」として位置付けられています。2020&#x2F;08のKubeCon EUでは、k3sが新たに入ったことが話題になりました。</li></ul><img src="/images/20230619a/level.png" alt="" width="1200" height="304" loading="lazy"><h2 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h2><p>今回の連載は以下のスケジュールで連載します。</p><p>2020年の連載ではIncubating、Sandboxプロジェクトについて取り扱っていましたが、今回も全てのプロジェクトを対象として広く募集しました。</p><div class="scroll"><table><thead><tr><th>日付</th><th>投稿者</th><th>取り扱うテーマ</th><th>Level</th></tr></thead><tbody><tr><td>6&#x2F;19</td><td>澁川喜規</td><td><a href="/articles/20230619b/">wasmCloudが夢見る世界</a></td><td>Sandbox</td></tr><tr><td>6&#x2F;21</td><td>真野隼記</td><td><a href="/articles/20230621a/">フィーチャーフラグを管理するためのOpenFeature</a></td><td>Sandbox</td></tr><tr><td>6&#x2F;22</td><td>原木翔</td><td><a href="/articles/20230622a/">Tinkerbellについて</a></td><td>Sandbox</td></tr><tr><td>6&#x2F;23</td><td>鈴木崇史</td><td><a href="/articles/20230623a/">TetragonでeBPFとセキュリティオブサーバビリティ入門</a></td><td></td></tr><tr><td>6&#x2F;26</td><td>川口翔大</td><td><a href="/articles/20230626a/">Cloud Run に ko と skaffold を使ってデプロイまでやってみる</a></td><td>Sandbox～Incubating</td></tr><tr><td>6&#x2F;27</td><td>岸下優介</td><td><a href="/articles/20230627a/">Argo CDを体感してみる</a></td><td>Graduated</td></tr></tbody></table></div><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回はSandboxのプロジェクトも多いですが、GraduatedプロジェクトであるArgoCDもあり、対象としている領域も様々ですので、どの記事もとても楽しみですね。<br>過去の連載はこちらからご覧ください。</p><ul><li><a href="https://future-architect.github.io/articles/20200928/">CNCF連載始めます</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230619a/cncf-color.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;191&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;こんにちは。技術ブログ運営の伊藤太斉です。&lt;/p&gt;
&lt;p&gt;今回はCloud</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
  </entry>
  
  <entry>
    <title>フューチャー夏のインターンシップ2023（Engineer Camp）</title>
    <link href="https://future-architect.github.io/articles/20230616b/"/>
    <id>https://future-architect.github.io/articles/20230616b/</id>
    <published>2023-06-15T15:00:01.000Z</published>
    <updated>2023-07-11T03:40:32.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、真野です。</p><p>フューチャーのサマーインターン2023 Summer Engineer Camp🌞⛺🏃の募集が始まりました。</p><p>フューチャーでは夏のインターンシップは2つのコースがあります。</p><ul><li><strong>Engineer Camp</strong>: エンジニア向けのプログラミング主体のプロジェクト業務を体験するコース<ul><li>この記事ではこちらを説明します</li></ul></li><li><strong>Project Camp</strong>: だれでも応募OKのプロジェクト業務を体験するコース<ul><li>興味がある方は、<a href="https://note.com/future_event/n/nfa00e089edc0?magazine_key=m10d896697036">noteの記事</a>をご覧ください</li></ul></li></ul><p>それぞれに良いところがありますが、どちらもウリは現場の最前線で働くITコンサルタントな先輩（技術的スペシャリティあり）がメンターについて学べることだと思います。ここでは Engineer Camp のメニューについて紹介します。</p><p>なお、この記事はnoteの<a href="https://note.com/future_event/n/naca691f8ade4?magazine_key=m10d896697036">【対象：新卒】サマーインターン＜Engineer Camp＞</a>とほぼ同じ内容です。ご注意ください。差分は昨年の参加録記事のリンクがある程度です。</p><h2 id="Engineer-Campのポイント"><a href="#Engineer-Campのポイント" class="headerlink" title="Engineer Campのポイント"></a>Engineer Campのポイント</h2><p>フューチャーのインターンシップをお勧めする理由を3つ上げさせてください。</p><ul><li><strong>実際の業務にメンバーとして関わることができる</strong><ul><li>インターン向けに準備されたタスクを行うのではなく、実プロジェクトにアサインされ、リアル業務を行えます。個人では扱うことのできない技術にも触れられます。また、チームで開発する際の苦労や工夫を知ることもできるのは大きいと思います。当然、社会人になってエンジニアとしてはたらくイメージを持つにはうってつけです</li></ul></li><li><strong>フューチャーの技術部隊のメンバーがメンターのためサポートが手厚い</strong><ul><li>実プロジェクトのアサインと聞いて不安に思われた方も多いと思いますが安心してください。フューチャーの各技術分野のスペシャリストがメンターとしてサポートします。社員との距離感も近く、フラットな社風なので、気軽に質問をしやすい環境です。フューチャーの技術力の高さを体感いただきつつ、ご自身のスキルも伸ばしてください。Slackをフル活用しているので疑問を呟くと、きっとすぐに先輩社員がアドバイスしてくれます</li></ul></li><li><strong>2~4週間のプログラムで成長を実感できる</strong><ul><li>フューチャーの仕事を体験できるように2~4週間の期間を設けました。最長の4週間は長いよ！と思われる方もいるかもしれませんが、新しい開発環境やドメイン知識に慣れるだけで1週間程度かかったという声も多く、自分なりの創意工夫を行う余裕が出てきて、仕事が楽しくなるような期間が良いと考えての設計です</li></ul></li></ul><p>他にも受け入れ先プロジェクトごとに、様々な工夫をしています。</p><h2 id="実施概況"><a href="#実施概況" class="headerlink" title="実施概況"></a>実施概況</h2><ul><li>期間<ul><li>2023年 8月21日（月）～9月15日（金）<ul><li>コースに応じてインターン期間は変動あり</li></ul></li><li>原則は土日祝日を除く、週5日&#x2F;8時間の勤務。期間中、数日程度の欠席は調整可能</li><li>週3～4日でのインターンを希望される場合は理由などを伺い、要相談とさせてください</li></ul></li><li>勤務形態<ul><li>8月21日～9月15日まで、最低週3日以上の勤務</li><li>原則週3日以上、1日8時間勤務</li><li>毎週【水曜日】は必須参加</li></ul></li><li>場所<ul><li>ハイブリッド形式（リモート&#x2F;出社）。リモートの場合は必ずご自宅にて参加をお願いします</li><li>初日および最終日はオフィス出社<ul><li>弊社大崎オフィス（東京都品川区大崎1-2-2 アートヴィレッジ大崎セントラルタワー15F）</li></ul></li></ul></li><li>報酬<ul><li>時給1500円&#x2F;H。1日あたり12,000円（※8時間勤務を行った場合）</li><li>実際の勤務時間に基づいて支給いたします</li></ul></li><li>交通費<ul><li>規定に沿って来社時の交通費を支給します。</li></ul></li></ul><h2 id="選考プロセス、選考スケジュール"><a href="#選考プロセス、選考スケジュール" class="headerlink" title="選考プロセス、選考スケジュール"></a>選考プロセス、選考スケジュール</h2><p>次の流れで選考を行います。</p><ol><li>マイページ登録（※まずはこちらをお願いします！）<ul><li>登録は <strong><a href="https://job.axol.jp/hy/s/future_25/mypage/login">こちら</a></strong> から</li></ul></li><li>エントリーシート提出 &amp; プログラミングテスト<ul><li><del>締切①：   6月11日（日）23時59分</del></li><li>締切②：   6月18日（日）23時59分</li><li>最終締切：6月25日（日）23時59分</li></ul></li><li>面接<ul><li>リモートにて1回。1h程度を想定</li></ul></li></ol><h2 id="Engineer-Camp-コースについて"><a href="#Engineer-Camp-コースについて" class="headerlink" title="Engineer Camp コースについて"></a>Engineer Camp コースについて</h2><p>Engineer Campではバラエティ豊かな14コースを用意しています。それぞれに特徴があり、使う技術も様々です。すべてのコースに共通する基礎的なスキル要件は4つありますます。</p><p><strong>共通スキル要件:</strong></p><ul><li>1つ以上のプログラミング言語での開発経験（学校、プライベート問わず）</li><li>Git利用経験（clone, add, commit, push操作と、GitHub上でPull Requestを作成し、チャットでレビュー依頼を行えること）</li><li>SlackやGoogleChatなどを用いた非同期コミュニケーションが取れる方</li><li>主体的にコミュニケーションを取りながら進めていただける方</li></ul><p>こに加えて、各受け入れプロジェクトごとに応募条件があります。ご自身の強みを活かせるコースや興味のあるコースがあるかと思います。</p><h3 id="1-サブスクサービスのWebアプリ開発"><a href="#1-サブスクサービスのWebアプリ開発" class="headerlink" title="1. サブスクサービスのWebアプリ開発"></a>1. サブスクサービスのWebアプリ開発</h3><table><thead>  <tr>    <th>項目</th>    <th>説明</th>  </tr></thead><tbody>  <tr>    <td>タイトル</td>    <td>サブスクサービスのWebアプリ開発</td>  </tr>  <tr>    <td>説明</td>    <td>メディア業界を支えるWebアプリケーションサービスの開発を通じて、サブスクリプション型サービスにおけるチーム開発を経験できます。<br>【担当業務（予定）】<br>・Webアプリケーションの標準的な画面開発業務<br>・ChatGPTのAPIと連携するためのプロンプト画面の新規開発<br>・3way-merge-algorithmを用いた文字列比較、置換ロジックの検証<br>※希望・スキルを勘案して割当予定</td>  </tr>  <tr>    <td>受入担当からのアピール</td>    <td>チームで開発するために必要なスキルや、クラウドサービスを用いた大規模システムのアーキテクチャに関する知見、および実践レベルのプログラミングスキルが身に付きます。<br>システムを良くするために、新しいサービスを組み込んでいくことに興味のある方は特に歓迎します。<br>ぜひご応募ください！</td>  </tr>  <tr>    <td>応募条件(必須)</td>    <td>以下1~3のいずれかを満たす<br>1. Vue.jsなどのJavaScriptフレームワークを用いたフロントエンドの開発経験(※)<br>2. JavaまたはGoによるバックエンドの開発経験(※個人開発も可)<br>3. AtCoder緑以上</td>  </tr>  <tr>    <td>応募条件(あれば歓迎)</td>    <td>-</td>  </tr></tbody></table><p>2022年の参加録、<a href="/articles/20221117a/">初めての長期インターンでWebアプリ開発を経験しました！</a>も確認ください。</p><h3 id="2-エンジニアリングプラットフォームのERダイアグラム操作UI開発"><a href="#2-エンジニアリングプラットフォームのERダイアグラム操作UI開発" class="headerlink" title="2. エンジニアリングプラットフォームのERダイアグラム操作UI開発"></a>2. エンジニアリングプラットフォームのERダイアグラム操作UI開発</h3><table><thead>  <tr>    <th>項目</th>    <th>説明</th>  </tr></thead><tbody>  <tr>    <td>タイトル</td>    <td>エンジニアリングプラットフォームのERダイアグラム操作UI開発</td>  </tr>  <tr>    <td>説明</td>    <td>※本コースはキャンセルとなりました※</td>  </tr></tbody></table><h3 id="3-検索クエリパーサーと全文検索エンジン構文コンバーターの開発"><a href="#3-検索クエリパーサーと全文検索エンジン構文コンバーターの開発" class="headerlink" title="3. 検索クエリパーサーと全文検索エンジン構文コンバーターの開発"></a>3. 検索クエリパーサーと全文検索エンジン構文コンバーターの開発</h3><table><thead>  <tr>    <th>項目</th>    <th>説明</th>  </tr></thead><tbody>  <tr>    <td>タイトル</td>    <td>検索クエリパーサーと全文検索エンジン構文コンバーターの開発</td>  </tr>  <tr>    <td>説明</td>    <td>当社では膨大なドキュメント・ソースコードを解析し、ファクトに基づいた現行システムの分析から設計・開発・保守を支援する仕組みを提供しています。その仕組み中で使う検査機能の改善に取り込んでいただきます。and,orなどの検索エンジンにあるような検索文字をパースしてASTを構築し、ASTから各種全文検索エンジン構文への変換器の開発をして頂きます。</td>  </tr>  <tr>    <td>受入担当からのアピール</td>    <td>ソフトウェア工学の専門的な知識・スキルを生かした職業を探している方、ITコンサルティング会社のR&amp;D部門で競プロerやOSSコミッターと一緒に職業体験してみませんか？</a><br>チームの紹介については<a href="https://note.future.co.jp/n/ne3e0f27ee45e">コンサル会社のR&amp;D部門って何やってるの？｜未来報</a> をご確認ください。</td>  </tr>  <tr>    <td>応募条件(必須)</td>    <td>・lexer,parser,AST等の構文解析の知識<br>・構文解析ライブラリを利用したことがある<br>・Java開発経験<br>・Git利用経験は問わない</td>  </tr>  <tr>    <td>応募条件(あれば歓迎)</td>    <td>-</td>  </tr></tbody></table><h3 id="4-画像認識AIの開発"><a href="#4-画像認識AIの開発" class="headerlink" title="4. 画像認識AIの開発"></a>4. 画像認識AIの開発</h3><table><thead>  <tr>    <th>項目</th>    <th>説明</th>  </tr></thead><tbody>  <tr>    <td>タイトル</td>    <td>画像認識AIの開発</td>  </tr>  <tr>    <td>説明</td>    <td>画像認識AIの社会実装を実現します。実案件のデータを対象に、画像分類・物体検出・セグメンテーション・画像生成等幅広い画像系のAI技術を駆使して、AIを活用した顧客の業務削減に取り組みます。上記の技術の実装に加えて、そこから見える課題等の分析・報告を行って頂き、業務を進める上でのサイクルを一通り経験することができます。</td>  </tr>  <tr>    <td>受入担当からのアピール</td>    <td>実社会で扱われている生のデータを扱った作業のため、貴重な経験になると思います。</td>  </tr>  <tr>    <td>応募条件(必須)</td>    <td>・Pythonでの画像処理の経験<br>・PytorchやTensorflow等を用いたNN構築経験<br>・論文を読んでNNなどの実装ができること<br>・基本的なLinuxコマンドの操作経験（コマンドライン操作）</td>  </tr>  <tr>    <td>応募条件(あれば歓迎)</td>    <td>・Kaggle等のコンペティション参加経験<br>・Dockerを用いた開発環境の構築経験</td>  </tr></tbody></table><h3 id="5-機械学習プラットフォーム開発"><a href="#5-機械学習プラットフォーム開発" class="headerlink" title="5. 機械学習プラットフォーム開発"></a>5. 機械学習プラットフォーム開発</h3><table><thead>  <tr>    <th>項目</th>    <th>説明</th>  </tr></thead><tbody>  <tr>    <td>タイトル</td>    <td>機械学習プラットフォーム開発</td>  </tr>  <tr>    <td>説明</td>    <td>【エンジニアリングの力で、AIを社会実装するスピード・品質を向上させる】<br>当社AIチームのデータサイエンティスト・MLエンジニアが利用するMLプラットフォームの開発。現状主にオンプレ・一部クラウドで稼働しているMLプラットフォームの拡張・機能追加・課題対応およびそのための検証。データ基盤、分析環境、学習環境、実験管理、CI/CD、MLパイプライン、などから範囲を決めて実施します</td>  </tr>  <tr>    <td>受入担当からのアピール</td>    <td>AI×エンジニアリングに興味がある方におすすめです。</td>  </tr>  <tr>    <td>応募条件(必須)</td>    <td>基本的なLinuxコマンドの操作経験（コマンドライン操作）</td>  </tr>  <tr>    <td>応募条件(あれば歓迎)</td>    <td>・Linuxサーバ構築・運用経験<br>・AWS or GCP利用経験<br>・Dockerを用いた開発環境の構築経験<br>・Pythonでの実装経験<br>・機械学習モデルの実装経験<br>・Kaggle等のコンペティション参加経験</td>  </tr></tbody></table><p>2022年の参加録がありますので、参考ください。</p><ul><li><a href="/articles/20220920a/">Dataflow前編（Dataflowの概要からApache Beamの使い方まで）</a></li><li><a href="/articles/20220920b/">Dataflow後編（Dataflowの事前準備からPub&#x2F;Sub・BigQueryとの連携例まで）</a></li></ul><h3 id="6-Goとサーバレスアーキテクチャで体験。100万台超えの大規模スマートセンサーloTプラットフォームに関わってみませんか？"><a href="#6-Goとサーバレスアーキテクチャで体験。100万台超えの大規模スマートセンサーloTプラットフォームに関わってみませんか？" class="headerlink" title="6. Goとサーバレスアーキテクチャで体験。100万台超えの大規模スマートセンサーloTプラットフォームに関わってみませんか？"></a>6. Goとサーバレスアーキテクチャで体験。100万台超えの大規模スマートセンサーloTプラットフォームに関わってみませんか？</h3><table><thead>  <tr>    <th>項目</th>    <th>説明</th>  </tr></thead><tbody>  <tr>    <td>タイトル</td>    <td>Goとサーバレスアーキテクチャで体験。100万台超えの大規模スマートセンサーloTプラットフォームに関わってみませんか？</td>  </tr>  <tr>    <td>説明</td>    <td>2020年より稼働中なIoTシステムを開発します。世間的にも貴重な広域・大規模な接続数（数十万規模）であり、多くのWishリスト、課題が山積みです。Go、Docker、Terraform、AWSなどの技術要素をキーに、アプリ～インフラの技術スタックと、データ調査/開発/テストなどの一連の流れを体験できます。また、メインのデータベースにDynamoDBを採用。変わったことをやりたい人にも◎。</td>  </tr>  <tr>    <td>受入担当からのアピール</td>    <td>チームの平均年齢25年と若いフレッシュなチームです。同じような目線でアドバイスができると思います！みなさまの応募をお待ちしています！</td>  </tr>  <tr>    <td>応募条件(必須)</td>    <td>Go言語に興味がある方（Goの開発経験ゼロOKです）</td>  </tr>  <tr>    <td>応募条件(あれば歓迎)</td>    <td>・Dockerを用いた開発環境の構築経験<br>・S3やEC2などAWSサービスの利用経験<br>・基本的なLinuxコマンドの操作経験（コマンドライン操作）</td>  </tr></tbody></table><h3 id="7-物流危機を救え。GoとPythonで作る配送計画システムを作るバックエンドエンジニアは良いぞ。"><a href="#7-物流危機を救え。GoとPythonで作る配送計画システムを作るバックエンドエンジニアは良いぞ。" class="headerlink" title="7. 物流危機を救え。GoとPythonで作る配送計画システムを作るバックエンドエンジニアは良いぞ。"></a>7. 物流危機を救え。GoとPythonで作る配送計画システムを作るバックエンドエンジニアは良いぞ。</h3><table><thead>  <tr>    <th>項目</th>    <th>説明</th>  </tr></thead><tbody>  <tr>    <td>タイトル</td>    <td>物流危機を救え。GoとPythonで作る配送計画システムを作るバックエンドエンジニアは良いぞ。</td>  </tr>  <tr>    <td>説明</td>    <td>対象となる業界は、超肉体労働な配送員さんに支えられています。DXで少しでも働きやすく、やりがいがある世界を実現するため、複雑に絡み合う現場要求を経営効率を意識しながら、Go、Python、Docker、Terraformなどを用いて開発します。RDBの性能要件も厳しく、アプリ開発の一連の流れを学びつつ、非機能要件である耐障害性や監視通知など業務システムならではの視点に触れることができます</td>  </tr>  <tr>    <td>受入担当からのアピール</td>    <td>（フューチャー2年目の参画メンバーからコメント）ありきたりかもしれませんが、このチームは様々なIT技術に触ることができ成長実感を得やすくオススメです。</td>  </tr>  <tr>    <td>応募条件(必須)</td>    <td>Go言語に興味がある方（Goの開発経験ゼロOKです）</td>  </tr>  <tr>    <td>応募条件(あれば歓迎)</td>    <td>・Dockerを用いた開発環境の構築経験<br>・S3やEC2などAWSサービスの利用経験<br>・基本的なLinuxコマンドの操作経験（コマンドライン操作）</td>  </tr></tbody></table><p>2022年の参加録がありますので、参考ください。</p><ul><li><a href="/articles/20220914a/">Engineer Camp 2022（プロパンガス配送計画の最適化に向けた数値データ解析）参戦記 </a></li></ul><h3 id="8-B2Bプロダクト開発はじめてみませんか？-FigmaやPlantUMLでアプリ開発、業務フロー定義。（Vue-jsやFlutterも触るかも）"><a href="#8-B2Bプロダクト開発はじめてみませんか？-FigmaやPlantUMLでアプリ開発、業務フロー定義。（Vue-jsやFlutterも触るかも）" class="headerlink" title="8. B2Bプロダクト開発はじめてみませんか？ FigmaやPlantUMLでアプリ開発、業務フロー定義。（Vue.jsやFlutterも触るかも）"></a>8. B2Bプロダクト開発はじめてみませんか？ FigmaやPlantUMLでアプリ開発、業務フロー定義。（Vue.jsやFlutterも触るかも）</h3><table><thead>  <tr>    <th>項目</th>    <th>説明</th>  </tr></thead><tbody>  <tr>    <td>タイトル</td>    <td>B2Bプロダクト開発はじめてみませんか？FigmaやPlantUMLでアプリ開発、業務フロー定義。（Vue.jsやFlutterも触るかも）</td>  </tr>  <tr>    <td>説明</td>    <td>B2B向けの配送システムをゼロから構築します。インターン時点では開発の立ち上げ時期で、Design Docの記載（Figma、PlantUML、drawio、Markdown）や、コードベースがこれから育っていくフェーズを体験できます。技術スタックはGo、Docker、Terraform、AWS、Vue.jsを想定。モバイルアプリ開発も入るかも？成長途上なチームで共に成長しましょう。</td>  </tr>  <tr>    <td>受入担当からのアピール</td>    <td>若手メンバー（入社4年目以内）を中心としたチームで、新規アプリ開発に一緒に挑戦します。モダンな技術を採用予定なので、技術寄りな人にもオススメです</td>  </tr>  <tr>    <td>応募条件(必須)</td>    <td>Go言語に興味がある方（Goの開発経験ゼロOKです）</td>  </tr>  <tr>    <td>応募条件(あれば歓迎)</td>    <td>・Dockerを用いた開発環境の構築経験<br>・S3やEC2などAWSサービスの利用経験<br>・基本的なLinuxコマンドの操作経験（コマンドライン操作）</td>  </tr></tbody></table><h3 id="9-エネルギー配送シェアリングを目指せ。Goで高品質アプリ開発の世界を体験しよう！"><a href="#9-エネルギー配送シェアリングを目指せ。Goで高品質アプリ開発の世界を体験しよう！" class="headerlink" title="9. エネルギー配送シェアリングを目指せ。Goで高品質アプリ開発の世界を体験しよう！"></a>9. エネルギー配送シェアリングを目指せ。Goで高品質アプリ開発の世界を体験しよう！</h3><table><thead>  <tr>    <th>項目</th>    <th>説明</th>  </tr></thead><tbody>  <tr>    <td>タイトル</td>    <td>エネルギー配送シェアリングを目指せ。Goで高品質アプリ開発の世界を体験しよう！</td>  </tr>  <tr>    <td>説明</td>    <td>シェアリングがキーワードでビジネスを創る第一歩として、稼働したばかりの配送システムアプリを開発に携わります。ローンチ直後の立ち上がりフェーズの試行錯誤している様子、さらに品質を高めるために行うデータ、アプリ検証作業。あるいはユーザー要望に応じた追加エンハンス開発を体験します。技術要素はGo、Docker、Terraform、AWS、PostgreSQLなどです。</td>  </tr>  <tr>    <td>受入担当からのアピール</td>    <td>業務アプリケーションの稼働初期には予見できなかった課題が発生することがあり、迅速かつ適切なアプローチが求められます。<br>現場でしか感じられないこの空気をぜひ体感してください。</td>  </tr>  <tr>    <td>応募条件(必須)</td>    <td>Go言語に興味がある方（Goの開発経験ゼロOKです）</td>  </tr>  <tr>    <td>応募条件(あれば歓迎)</td>    <td>・Dockerを用いた開発環境の構築経験<br>・S3やEC2などAWSサービスの利用経験<br>・基本的なLinuxコマンドの操作経験（コマンドライン操作）</td>  </tr></tbody></table><h3 id="10-認証認可基盤の開発"><a href="#10-認証認可基盤の開発" class="headerlink" title="10. 認証認可基盤の開発"></a>10. 認証認可基盤の開発</h3><table><thead>  <tr>    <th>項目</th>    <th>説明</th>  </tr></thead><tbody>  <tr>    <td>タイトル</td>    <td>認証認可基盤の開発</td>  </tr>  <tr>    <td>説明</td>    <td>メディア企業の認証認可基盤の開発を実施します。<br>複数のtoCサービスが認証先としてアクセスしにくる想定で、社会的な影響範囲はとても大きい取り組みです。<br>具体的には以下を実施いただく想定です。<br>・OpenIDConnectによるシングルサインオンの実現<br>・SNS連携etc</td>  </tr>  <tr>    <td>受入担当からのアピール</td>    <td>ワールドワイドでデファクトスタンダードとなっている認証認可仕様を実装を通して吸収することができます。<br>その他もフルクラウドで構築予定なので、最新の技術を追いたい方におすすめします。</td>  </tr>  <tr>    <td>応募条件(必須)</td>    <td>適宜ドキュメントを読んで技術を吸収できる方</td>  </tr>  <tr>    <td>応募条件(あれば歓迎)</td>    <td>・Azure/AWSの開発経験がある方<br>・OAuth2/OpenIDConnectの基礎的な知識を有する方</td>  </tr></tbody></table><h3 id="11-私鉄グループの共通会員基盤サービス改修・開発"><a href="#11-私鉄グループの共通会員基盤サービス改修・開発" class="headerlink" title="11. 私鉄グループの共通会員基盤サービス改修・開発"></a>11. 私鉄グループの共通会員基盤サービス改修・開発</h3><table><thead>  <tr>    <th>項目</th>    <th>説明</th>  </tr></thead><tbody>  <tr>    <td>タイトル</td>    <td>私鉄グループの共通会員基盤サービス改修・開発</td>  </tr>  <tr>    <td>説明</td>    <td>私鉄グループが展開する、共通会員基盤サービスの改修を実施します。実社会で運用されているサービスの実態を知った上で、実際に改修していただきます。次の4つのうち1つまたは複数の技術要素に取り組んでいただく予定です。取り組んだ内容がそのまま本番リリースされるチャンスもあります！<br>・APIサーバ<br>・画面<br>・クラウドインフラ<br>・認証認可</td>  </tr>  <tr>    <td>受入担当からのアピール</td>    <td>数十万のユーザを有するサービスの仕組みを知った上で、実際に改修に取り組んでいただき、できればリリースまで持って行っていただきます。<br>単なる体験・学習に閉じるのではなく、実際にユーザに影響を与える仕事として取り組んでいただくため、やりがいは保証します。<br>期間限定ではありますが、一緒に働く仲間として参加いただくことを期待しています！</td>  </tr>  <tr>    <td>応募条件(必須)</td>    <td>共通のスキル要件に準じる</td>  </tr>  <tr>    <td>応募条件(あれば歓迎)</td>    <td>・Vue.js,Go, AWS, Terraformの利用経験<br>・SQL利用経験</td>  </tr></tbody></table><h3 id="12-外食産業における、全社DX施策に向けたデータ分析"><a href="#12-外食産業における、全社DX施策に向けたデータ分析" class="headerlink" title="12. 外食産業における、全社DX施策に向けたデータ分析"></a>12. 外食産業における、全社DX施策に向けたデータ分析</h3><table><thead>  <tr>    <th>項目</th>    <th>説明</th>  </tr></thead><tbody>  <tr>    <td>タイトル</td>    <td>外食産業における、全社DX施策に向けたデータ分析</td>  </tr>  <tr>    <td>説明</td>    <td>誰もが知る外食業のお客様の、全社DX施策に向けたデータ分析や、構想策定を実施します。具体的には、以下のいずれか（または複数）を実施いただきます。<br>①データ分析・可視化・ダッシュボード作成（含開発）:顧客のPOSデータを分析し、課題に対する打ち手を検討します。<br>②DX策定構想策定支援（非開発）: 全社DX施策の実施に向けた構想策定や市場調査をおこないます。</td>  </tr>  <tr>    <td>受入担当からのアピール</td>    <td>短期間で実データを活用した分析～施策検討までを経験いただけます。<br>DX推進支援の上流を経験したい方にオススメです。</td>  </tr>  <tr>    <td>応募条件(必須)</td>    <td>Python/R/SQLでのデータ解析経験</td>  </tr>  <tr>    <td>応募条件(あれば歓迎)</td>    <td>・データの可視化（BIダッシュボード・グラフ作成）</td>  </tr></tbody></table><h3 id="13-オープンソースの脆弱性スキャナー「Vuls」の開発"><a href="#13-オープンソースの脆弱性スキャナー「Vuls」の開発" class="headerlink" title="13. オープンソースの脆弱性スキャナー「Vuls」の開発"></a>13. オープンソースの脆弱性スキャナー「Vuls」の開発</h3><table><thead>  <tr>    <th>項目</th>    <th>説明</th>  </tr></thead><tbody>  <tr>    <td>タイトル</td>    <td>オープンソースの脆弱性スキャナー「Vuls」の開発</td>  </tr>  <tr>    <td>説明</td>    <td>GitHubStar数「１万以上」のセキュリティツールであるVulsの開発経験ができます。インターン中のコーディングの成果はすべてPublicなレポジトリにPushするので就職活動に役に立つでしょう。また、インターンの最後に自分が開発した機能の宣伝を英語や日本語でブログを書き、さらにRedditなどで世界に宣伝します。弊社に在籍するBlack Hat Speakerやコミッターのアドバイスやソースレビューは夏の思い出となるでしょう。</td>  </tr>  <tr>    <td>受入担当からのアピール</td>    <td>一石五鳥のめったに無いこの機会を見逃さないでください。<br><br>- 企業インターンの経験ができる<br>- 様々な人に利用されているOSSの開発ができる<br>- 成果はオープンになるので就職活動で役に立つ<br>- OSSを開発してお給料をもらえる<br>- BlackHat SpeakerやVulsコミッターからソースレビューしてもらえる</td>  </tr>  <tr>    <td>応募条件(必須)</td>    <td>・GitHubに自作OSSを公開している、またはメジャーなOSSに貢献した<br>・Linuxでの基本的なCLI操作ができる<br>・Go言語での開発経験がある<br>（- ナイスガイである）</td>  </tr>  <tr>    <td>応募条件(あれば歓迎)</td>    <td>-セキュリティ・キャンプやSecHack365等に参加した経験がある<br>- ハッカソンやCTF等に参加したことがある<br>- Linuxベースのシステムを運用したことがある<br>- Blog等で技術情報を発信している<br></td>  </tr></tbody></table><h3 id="14-脆弱性管理サービスFutureVulsの開発・運用を通じたSaaS業務体験"><a href="#14-脆弱性管理サービスFutureVulsの開発・運用を通じたSaaS業務体験" class="headerlink" title="14. 脆弱性管理サービスFutureVulsの開発・運用を通じたSaaS業務体験"></a>14. 脆弱性管理サービスFutureVulsの開発・運用を通じたSaaS業務体験</h3><table><thead>  <tr>    <th>項目</th>    <th>説明</th>  </tr></thead><tbody>  <tr>    <td>タイトル</td>    <td>脆弱性管理サービスFutureVulsの開発・運用を通じたSaaS業務体験</td>  </tr>  <tr>    <td>説明</td>    <td>GitHubStar数「１万以上」のOSSセキュリティツールであるVulsを利用した商用脆弱性管理サービス「FutureVuls」プロジェクトの業務経験をしていただきます。個人スキルに合わせた開発、顧客対応や運用改善など幅広い業務に参加予定です。成果発表会・ブログ記事の発信にも取り組み、成果をアピールすることができます。昨今Hotなセキュリティ分野で実務経験を積んでみませんか？</td>  </tr>  <tr>    <td>受入担当からのアピール</td>    <td>SaaS業務における開発・運用プロセスを実体験できます。学生時代から触れられるチャンスが限られているセキュリティ分野で、実際の業務を通じて知見を深められますのでぜひご応募ください！</td>  </tr>  <tr>    <td>応募条件(必須)</td>    <td>・Go言語または TypeScript で小規模アプリの開発経験がある（基本文法等は自分で書けるのが前提）<br>・Linuxでの基本的なCLI操作ができる<br>（- ナイスガイである）</td>  </tr>  <tr>    <td>応募条件(あれば歓迎)</td>    <td>- ハッカソンやCTF、Hack The Boxなどの参加・利用経験がある<br>- Go または TypeScript で o'reilly レベルの参考書を読んでいる<br>- 技術に対する飽くなき知的好奇心を持つ</td>  </tr></tbody></table><h2 id="2022年の参加者の声"><a href="#2022年の参加者の声" class="headerlink" title="2022年の参加者の声"></a>2022年の参加者の声</h2><p>個別コース説明にも記載しましたが、インターンシップに参加していただいた方に、体験記を寄稿いただいていますので紹介します。「業務だけでなく、同年代のメンバーとの交流会や先輩社員からの講義、ランチやディナーなどのイベントがたくさん詰め込まれており、存分にフューチャーを体感でき、刺激と満足感で心がお腹いっぱいでした」などと評価いただいています（抜粋するとどうしても怪しいので…、ぜひインターン生の記事を読んでいただけるとです）。</p><ul><li><a href="/articles/20220914a/">Engineer Camp 2022（プロパンガス配送計画の最適化に向けた数値データ解析）参戦記 </a></li><li><a href="/articles/20220916a/">Enginner Camp 2022に参加しました（HIG編）</a></li><li><a href="/articles/20220916b/">Engineer Camp2022 RustでSQLフォーマッタ作成（前編）</a></li><li><a href="/articles/20220916c/">Engineer Camp2022 RustでSQLフォーマッタ作成（後編）</a></li><li><a href="/articles/20220920a/">Dataflow前編（Dataflowの概要からApache Beamの使い方まで）</a></li><li><a href="/articles/20220920b/">Dataflow後編（Dataflowの事前準備からPub&#x2F;Sub・BigQueryとの連携例まで）</a></li><li><a href="/articles/20221117a/">初めての長期インターンでWebアプリ開発を経験しました！</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>わたしたちフューチャー社員一同、良いインターンになるよう工夫を凝らしたいと思っております。</p><p>興味がある学生の皆さん。なにはともあれマイページにエントリーをお願いします！</p><p>たくさんのご応募をお待ちしています！　最後まで読んでいただいてありがとうございました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、真野です。&lt;/p&gt;
&lt;p&gt;フューチャーのサマーインターン2023 Summer Engineer</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="インターン" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
    <category term="インターン2023" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32023/"/>
    
  </entry>
  
  <entry>
    <title>ソフトウェア設計のトレードオフと誤りを出版しました</title>
    <link href="https://future-architect.github.io/articles/20230616a/"/>
    <id>https://future-architect.github.io/articles/20230616a/</id>
    <published>2023-06-15T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.129Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230616a/image.png" alt="" width="516" height="660" loading="lazy"><p>すでに多くの方々にお手に取っていただいておりますが、オライリージャパンから「ソフトウェア設計のトレードオフと誤り」の翻訳をフューチャーのメンバーと一緒に出版いたしました。好評なようで、発売一カ月ほどで増刷も決定いたしました。みなさまご購入いただき、ありがとうございます。初版をお買い求めになられたい方は今すぐ書店にダッシュ！</p><h1 id="トレードオフこそが設計である"><a href="#トレードオフこそが設計である" class="headerlink" title="トレードオフこそが設計である"></a>トレードオフこそが設計である</h1><p>良い設計とか読みやすいコードみたいな話題はツイッターではバズりやすい話題です。</p><p>読みやすいコードの話題ではいろいろなレイヤーの話が出てくるのですが、因数分解すると、だいたいいくつかのカテゴリーに分かれるように思います。</p><ul><li>命名規則とか書き方のルール</li><li>従うべきクラス構造、アーキテクチャ構成の導入</li><li>サービスの境界をどこに引くか、どのようなときに設計手法を選ぶか、どのアルゴリズムを選ぶか</li></ul><p>名前や命名規則の統一とか書き方の統一とかは用語のリストを作って、命名規則を作って・・・など、コードフォーマッターとか、バリデーターを入れたら全自動だか半自動で解決する話題です。</p><p>クリーンアーキテクチャとかレイヤードアーキテクチャの話題もよくあがります。昔もデザインパターンが話題になったり、MVCが話題になったり、みんなお手本が欲しいんだな、という感じです。ただ、この手のものって、型にはめるためにある程度冗長であることを要求されるというか、コード量は増える傾向にあります。あと、オブジェクト指向はネジや釘として残っているが、ウェブフロントエンドはどのフレームワークもsignalやhooksによるリアクティブな設計に向かっていて、stale when revalidate戦略を活用したり、20年前のオブジェクト指向のアーキテクチャ議論はもう完全に過去のものだなぁという実感があります。</p><p>最後の残るものは、その時々によって意思決定の結果が変わる生ものです。結果が毎回変わるのであれば、あまり参考にならないかというとそういうことはなく、「どのようなトレードオフを考えて意思決定をしたのか」という思考の流れは参考になります。そのような意思決定こそがソフトウェア設計の醍醐味と言えます。</p><p>本書も、そのような「トレードオフ」を扱った本です。リーダブルコードのような「当たり前のコード品質は守れる前提」で、また錆び付いたアーキテクチャの話もなく、最後の意思決定のトレードオフの議論が中心です。</p><h1 id="単なる正解集ではない"><a href="#単なる正解集ではない" class="headerlink" title="単なる正解集ではない"></a>単なる正解集ではない</h1><p>本書は、日付処理、サードパーティライブラリ、設定回りの設計、分散処理などさまざまな分野を取り上げて、そのトレードオフをいくつか紹介しています。ページ数もあり、扱っている内容も幅広いのですが、我々の設計対象は無数にあります。例えば、開発環境の構築1つとっても、ローカルに構築するのか、仮想PCでやるのか、Dockerコンテナを活用するのか、さらにVSCodeのDevContainerを使うのか、VDI環境（クラウドのワークスペース）を使うのかなど、多くの選択がありますし、その話題そのものは出ていません。本書は丸暗記するような本ではなく、トレードオフの考え方を鍛える本であると思います。</p><p>例えば、Appendixとして翻訳オリジナルのコンテンツとしてマスターデータのトレードオフについて取り上げましたが、議論をしようとすればいくらでもネタはあります。訳者あとがきにも書きましたが、1995年ごろからブームを巻き起こしたパターンランゲージというものも、本来は正解集ではなく、「自分でその場に必要なものを選択して適用する」ものでした。「場」はフォースと呼ばれ、パターンにおいては重要な概念でした。リファクタリングでは<a href="https://future-architect.github.io/articles/20220425a/">A⇔Bの両方のパターンがあり、まさにどちらを選ぶかはトレードオフである</a>、というものですが、近年ではフォースを考慮せずに「こういうコードにすべき10ヶ条」みたいな使われ方をしていたりします。<a href="https://future-architect.github.io/articles/20220610a/">DDDも、本来はパターンランゲージ</a>であり、僕が読む限りは「境界づけられたコンテキスト」でドメインを分割していくだけではなく、「継続的な統合」をしていくものですが、マイクロサービスを念頭に置いて議論をする人が多いせいか、分割ばかりが話題になります。</p><p>一方通行にしてしまえば、あとはそれを考えずに適用していくだけですので、確かに楽にはなりますが、パターンにハマった実装を量産する場合でなければ、良い設計やコードはそのような流れ作業だけでできるものではなく、何度も繰り返し試行錯誤が必要です。</p><p>試行錯誤を繰り返すにあたっても、ある程度選択肢が絞られていれば時間が節約できます。また、「こんな選択肢もあったんだ！」というのに後から気づくこともあるでしょう。本書は即効性があるわけではありませんが、そのような選択肢を絞ったり、未知の選択肢に気づくヒントが得られると思います。</p><h1 id="裏ミッション：出版にかかわるメンバーを増やす"><a href="#裏ミッション：出版にかかわるメンバーを増やす" class="headerlink" title="裏ミッション：出版にかかわるメンバーを増やす"></a>裏ミッション：出版にかかわるメンバーを増やす</h1><p>僕としてはかれこれ14冊目だか15冊目だかの本（第二版とかを除く）になるのですが、他のほとんどのメンバーは1冊目の出版です（実用Goを一緒に書いた辻さんは2冊目）。</p><p>本って、「翻訳したい」「書きたい」という気持ちを持って一歩踏み出せる人はなかなかおらず、最初の一歩の背中を押してあげる、というのが大切であると考えています。僕も、最初は大学時代に日本XPユーザーグループの運営をしていたときに、当時アジャイルやオブジェクト指向の書籍の翻訳の監訳をよくしていて、かつグループの代表であったテクノロジックアートの長瀬さんから声をかけてもらってこの道に入りました。最初はXPのテスト本の書き下ろし、次に、アジャイルソフトウェア開発スクラムの翻訳です。</p><p>書籍の翻訳や執筆の敷居が高いということは、積極的に若い人を増やしていかないとそれをやる人の年齢がどんどん上がってしまうということにもなります。なるべく若い人ほど、これからの業務で得る経験値も多くなるわけで、そういう人が増えていけば魅力的な本も増えていきます。</p><p>翻訳は原文側が持っている価値があるので、経験がまだそれほどない人でも、巨人の方に乗って価値のある本が出しやすい、というメリットがあります。もちろん、本書でもやった通り、いろいろ注釈を足したりしてその原文の価値をさらに高めるという楽しみもありますが、（翻訳の日本語の質が一定以上あれば）だれでも最低限のクオリティは出せるため、僕自身は労力を書き下ろしの僕にしか書けない本に注いで、翻訳はこれから名前を売っていくことになる若者にまかせよう、というスタンスでいたのですが、未経験の人の背中を押す、というも大切なので、旗振り役になってメンバーを募って一緒に翻訳することにしました。</p><p>チャンスをたくさん作りたいという気持ちがあったため、手を挙げてくれた人全員OK出して開始したので人数はそれなりに多くなってしまいましたが、僕が一通り全部の下訳に手を入れるという力業で、章ごとに日本語の調子が大きく変わるということはなく、それなりに読みやすい訳にはなったんじゃないかな、と思います（その後、全員で内容に関するレビューを何度も回しました）。</p><h1 id="ぜひ読書会のネタに"><a href="#ぜひ読書会のネタに" class="headerlink" title="ぜひ読書会のネタに"></a>ぜひ読書会のネタに</h1><p>本書はいくつかのトレードオフを扱っていますが、特定の分野ごとに、本書で触れていないトレードオフというのもあるでしょう。コスト削減のためにEC2&#x2F;Compute Engineで作り込むのか、FaaSを使ってサーバーレスでやるのか、ストレージはKVSを使うのか、RDBを使うのか、など。ぜひ、本書を片手に読みながらいろんなトレードオフについて語っていただけると良いかと思います。</p><p>できれば、 <code>#ソフトウェア設計のトレードオフ</code> タグでもつけて、「こんなトレードオフもあるぞ」とか、「本書の説明にはなかったが、こういう注釈を俺ならつけたい」でも語っていただければと思います。楽しみにしています。</p><p>また、次の出版プロジェクトを進めていたりもします。そちらも半年ぐらいしたらお知らせできるかも？また、翻訳者の宮永さんには「また次のチャンスがあったら参加したいです！」と言われたのでまた翻訳を立ち上げたいな、と思っています。</p><p><a href="https://www.oreilly.co.jp/books/9784814400317/">https://www.oreilly.co.jp/books/9784814400317/</a><br><a href="https://www.amazon.co.jp/dp/4814400314/">https://www.amazon.co.jp/dp/4814400314/</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230616a/image.png&quot; alt=&quot;&quot; width=&quot;516&quot; height=&quot;660&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="出版" scheme="https://future-architect.github.io/tags/%E5%87%BA%E7%89%88/"/>
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
    <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
    <category term="翻訳" scheme="https://future-architect.github.io/tags/%E7%BF%BB%E8%A8%B3/"/>
    
  </entry>
  
  <entry>
    <title>技育CAMPアカデミアで「ウェブ技術のトレンド」というタイトルで発表しました</title>
    <link href="https://future-architect.github.io/articles/20230615a/"/>
    <id>https://future-architect.github.io/articles/20230615a/</id>
    <published>2023-06-14T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.128Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230615a/simpleline001t6P.jpg" alt="" width="800" height="517"><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vT4LAs_xfUcsjHcm3v5eh3cwbTXOkDzpOBCkkuOmQoHL0IMocMa-113vP--Z46ODg/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p>6&#x2F;1に、<a href="https://talent.supporterz.jp/geekcamp/">技育CAMP</a>アカデミアというイベントで発表をさせていただきました。勉強会で、手っ取り早く学んで役立ててもらえるものはなんだろうか、ということでウェブアプリケーションの構造について説明してきました。参加者の多くの方々に好評でした。あまり今までは一度発表した内容の再演をすることはなかったのですが、こういうベーシックな基礎知識系は、今後もアップデートを加えつつ何度かやると良いのかも？と思っています。</p><p>最近は、フロントの仕組みが難しすぎるとか特に言われることも多いので、特にフロントエンドの構造がどうなっているのか、というイメージと、ただ、実装するものはそこまで代わりはないので、一度身につけたらフレームワークとかが変わってもすぐにキャッチアップできますよ、という感じの内容になっています。</p><p>斬新な新しい開発技術というものが登場したとしても、その技術を作って広めたい人というのは、たいてい既存の技術に使い方を近づけて作るものです。既存の知識を活かせる方がすばやく使い方を学んで作りたいものが作れるからです。斬新すぎるとユーザーがついてこない。僕はデスクトップアプリケーション開発をかれこれ15年ぐらいやっていました。ウェブのフロントエンドのフレームワークも巡り巡ってデスクトップアプリケーションと近い考え方で開発するような時代がやってきたおかげで、デスクトップ畑を歩んでいた僕にはすごく学びやすいと感じました。ReactとかAngularでクラス形式でコンポーネントを書いていた時代ですね。</p><p>その後、より関数型かつリアクティブに、という変化をReactが行い、Vue.jsも<code>reactive()</code>で追従し、Angularも(Solid.jsも)<code>signal()</code>というものを導入し、パラダイムが変わりつつありますが、今はそこまで大きな変化ではないかなー、というのが僕の意見です。ただ、このリアクティブというものが、今はコンポーネントの内部に閉じた状態でしかないのですが、コンポーネントを跨いで隅々まで普及すると面白くなりそうだなと思っているところで、これは別のエントリーでまた書こうと思っています。</p><h1 id="質疑応答"><a href="#質疑応答" class="headerlink" title="質疑応答"></a>質疑応答</h1><p>いくつか質疑をいただきました。自分の回答はメモしていなかったので、当日の回答とは変わってしまっているかもしれないのですが、回答した内容はこんな感じです。</p><h2 id="渋川さんのドキュメントの読み方みたいなのがあったらお聞きしたいです"><a href="#渋川さんのドキュメントの読み方みたいなのがあったらお聞きしたいです" class="headerlink" title="渋川さんのドキュメントの読み方みたいなのがあったらお聞きしたいです"></a>渋川さんのドキュメントの読み方みたいなのがあったらお聞きしたいです</h2><p>本家が出しているドキュメントを読む、というのはやっています。今はお客さんと勉強会をしていて、React, Jest, Next.js, Recoil.jsのドキュメントを上から下までじっくり読むというのを最近では行いました。あとはチュートリアルとかできちんと手を動かしてイメージを最初に持つ、というのも良いかと思います。</p><p>あと、当日は思い出さなくて言わなかったのですが、いっそのこと翻訳をしてしまう、というのもよくやっていました。今どきは機械翻訳が便利なので不要かもしれませんが。翻訳をすれば日本で第一人者になれます。</p><h2 id="渋川さんはReal-World-HTTPなどでHTTPの仕様などについて分かりやすく解説されていますが、仕様などの知識がどのように業務に役立つかをお聞きしたいです。仕様などはどのようなきっかけで調べて、どのように学ばれましたか？"><a href="#渋川さんはReal-World-HTTPなどでHTTPの仕様などについて分かりやすく解説されていますが、仕様などの知識がどのように業務に役立つかをお聞きしたいです。仕様などはどのようなきっかけで調べて、どのように学ばれましたか？" class="headerlink" title="渋川さんはReal World HTTPなどでHTTPの仕様などについて分かりやすく解説されていますが、仕様などの知識がどのように業務に役立つかをお聞きしたいです。仕様などはどのようなきっかけで調べて、どのように学ばれましたか？"></a>渋川さんはReal World HTTPなどでHTTPの仕様などについて分かりやすく解説されていますが、仕様などの知識がどのように業務に役立つかをお聞きしたいです。仕様などはどのようなきっかけで調べて、どのように学ばれましたか？</h2><p>仕様を調べたりしたのは、コードを書いていて、「あれ？これどうやってやればどのブラウザでも動くようになるんだっけ？」みたいなことを調べているうちにたどり着いて仕様を読んだ、というのがきっかけとして多く、それをまとめたら本になった、という感じでした。やはり、正しい正解に最短距離で近づくことができるので、仕様を知っておくのは時間の節約になりますね。</p><h2 id="渋川さんの考える、最も学習によるコストパフォーマンスが高い言語は何でしょうか？差し支えなければお答えいただけると幸いです"><a href="#渋川さんの考える、最も学習によるコストパフォーマンスが高い言語は何でしょうか？差し支えなければお答えいただけると幸いです" class="headerlink" title="渋川さんの考える、最も学習によるコストパフォーマンスが高い言語は何でしょうか？差し支えなければお答えいただけると幸いです"></a>渋川さんの考える、最も学習によるコストパフォーマンスが高い言語は何でしょうか？差し支えなければお答えいただけると幸いです</h2><p>回りに教えてくれる人が多い言語が躓いたときにもすぐに抜け出せるので良いですね。Pythonユーザーが多ければPythonで。ただ、ウェブフロントエンドだとJavaScript&#x2F;TypeScriptしか選択肢がない、とかはあります。</p><h2 id="Next-jsのような特定企業にサーバを縛られそうなフレームワークに（料金などで）どことなく嫌な予感を感じてしまうのですが、技術選定等のうえではどのように判断されるでしょうか"><a href="#Next-jsのような特定企業にサーバを縛られそうなフレームワークに（料金などで）どことなく嫌な予感を感じてしまうのですが、技術選定等のうえではどのように判断されるでしょうか" class="headerlink" title="Next.jsのような特定企業にサーバを縛られそうなフレームワークに（料金などで）どことなく嫌な予感を感じてしまうのですが、技術選定等のうえではどのように判断されるでしょうか"></a>Next.jsのような特定企業にサーバを縛られそうなフレームワークに（料金などで）どことなく嫌な予感を感じてしまうのですが、技術選定等のうえではどのように判断されるでしょうか</h2><p>Next.jsはVercelというプラットフォームでよく動くようにはなっていますが、別にその環境でしか動かないわけではなく、AWSのLambdaとかGoogleのFunctionsとかでも動きます。また、サーバー側の実装はCDNのエッジでも動くように幅広く動くように改良され続けていたりするので、Next.jsについては心配には及びません。</p><p>僕はポータビリティが高いのを使いたいな、と個人的には思っています。どこでも動く。Dockerとかもあるけど、ホストOSでダイレクトに動いてくれるとか。</p><h2 id="LLMの出現でWeb開発はどのように変わっていくとお考えですか？"><a href="#LLMの出現でWeb開発はどのように変わっていくとお考えですか？" class="headerlink" title="LLMの出現でWeb開発はどのように変わっていくとお考えですか？"></a>LLMの出現でWeb開発はどのように変わっていくとお考えですか？</h2><p>学習素材が多い言語ほどよく書いてくれるので、人気の言語やフレームワークがますます人気、ということはありえるかなって思っています。</p><h2 id="サーバーサイドで設計とアーキテクチャのイメージを固めるのが少々少々苦手ですもし良ければ渋川さんの練習方法や参考資料を教えていただけたら幸いです。"><a href="#サーバーサイドで設計とアーキテクチャのイメージを固めるのが少々少々苦手ですもし良ければ渋川さんの練習方法や参考資料を教えていただけたら幸いです。" class="headerlink" title="サーバーサイドで設計とアーキテクチャのイメージを固めるのが少々少々苦手ですもし良ければ渋川さんの練習方法や参考資料を教えていただけたら幸いです。"></a>サーバーサイドで設計とアーキテクチャのイメージを固めるのが少々少々苦手ですもし良ければ渋川さんの練習方法や参考資料を教えていただけたら幸いです。</h2><p>例えば、FirebaseとかAmplifyとかありますが、あの手の簡単に作れるプラットフォームほど、きちんとデータ設計をしないとうまみがなくて、フロントエンドを動かすためにずっとサーバー側のコードを直さないといけない、ということがあるのかなって思っています。ここ最近はあまり本屋にも本がないのですが、データベース設計をきちんとできる、というが大事だな、というのは実感できます。データベースに欲しいデータがきちんすべて入っていて、それが取り出しやすいスキーマになっているのであれば、バックエンドがやる仕事ってだいぶ簡単になります。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230615a/simpleline001t6P.jpg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;517&quot;&gt;

&lt;iframe</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="Web" scheme="https://future-architect.github.io/tags/Web/"/>
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="外部登壇" scheme="https://future-architect.github.io/tags/%E5%A4%96%E9%83%A8%E7%99%BB%E5%A3%87/"/>
    
    <category term="技育CAMP" scheme="https://future-architect.github.io/tags/%E6%8A%80%E8%82%B2CAMP/"/>
    
  </entry>
  
  <entry>
    <title>Dockerの基本的な概念とマイクロサービスについて</title>
    <link href="https://future-architect.github.io/articles/20230614a/"/>
    <id>https://future-architect.github.io/articles/20230614a/</id>
    <published>2023-06-13T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。流通・製造サービス事業部の添田です。</p><p>2023年1月から参画させていただいているプロジェクトで一番初めに躓いたのは、Dockerでした。</p><p>Dockerの基本的な概念と、Dockerを利用したマイクロサービスアーキテクチャを中心に解説します。</p><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ol><li>Dockerとは何か</li><li>Dockerを使用することでどのようなメリットがあるのか</li><li>Dockerの仕組みについて</li><li>Dockerとマイクロサービスについて</li><li>Dockerとオーケストレーションツールについて</li><li>まとめ</li><li>最後に</li></ol><h2 id="1-Dockerとは何か"><a href="#1-Dockerとは何か" class="headerlink" title="1. Dockerとは何か"></a>1. Dockerとは何か</h2><p>Dockerとは<strong>コンテナ型の仮想環境</strong>のことです。頭にコンテナ型とあるように通常の仮想マシンとは違います。ではDockerと仮想マシンとでどのような違いがあるのでしょうか？</p><p>結論、<strong>カーネルを共有しているか否か</strong>です。<br>下図で通常の仮想マシンを使用する場合の構成とDockerを使用する場合の構成を図解します。</p><ul><li>通常の仮想マシン<br>ホストOS（Windows・Macなど）上の仮想化ソフトを介して仮想マシン（ゲストOS）を作成します。各仮想マシンは独立したOSとリソースを持ち、アプリケーションやサービスを実行することが可能です。</li><li>Docker<br>ホストOS（Windows・Macなど）上のコンテナ管理ソフト（Docker・Kubernetes等）を介してコンテナを作成します。各コンテナはホストOSのカーネルを共有し、アプリケーションを実行するための必要なリソースのみを持ちます。</li></ul><img src="/images/20230614a/Docker1.png" alt="" width="1200" height="578" loading="lazy"><h2 id="2-Dockerを使用することでどのようなメリットがあるのか"><a href="#2-Dockerを使用することでどのようなメリットがあるのか" class="headerlink" title="2. Dockerを使用することでどのようなメリットがあるのか"></a>2. Dockerを使用することでどのようなメリットがあるのか</h2><ul><li>メリット①：Dockerを使用することで以下の問題を解決することが可能である</li></ul><div class="scroll"><table><thead><tr><th align="left">問題</th><th align="left">Dockerを使用することで解決すること</th></tr></thead><tbody><tr><td align="left">以前は上手くいっていた環境構築手順が上手くいかない</td><td align="left">実行環境の冪等性の確保</td></tr><tr><td align="left">他人の環境では上手くいくのに自分の環境では上手くいかない</td><td align="left">ポータビリティ性の向上</td></tr><tr><td align="left">インフラ周りを構築し直すたび手順がよくわからなくなる</td><td align="left">環境構成のコード化</td></tr></tbody></table></div><p>では、なぜ上記のようなことが解決するのでしょうか。</p><p>理由はDockerを使用すると環境構築の手順をコードで表現することができるからです。</p><p>例えば環境構築手順書上に「Dockerをインストールしてください」と記載があったとして、人によってインストールするバージョンが変わってしまうかもしれません。しかし適切にコード化された環境構築手順書が存在すれば誰がどこで実行しても同じ環境が出来上がります。</p><p>要は手順書の記載誤りや操作ミスなどのヒューマンエラーを無くすことができるということです。</p><ul><li>メリット②：起動が早い<br>通常の仮想マシンとDockerの起動時間の差は、仮想マシンがOSを別途起動するのに対し、Dockerは共有のカーネルを使用するため起動が早いです。</li></ul><h2 id="3-Dockerの仕組みについて"><a href="#3-Dockerの仕組みについて" class="headerlink" title="3. Dockerの仕組みについて"></a>3. Dockerの仕組みについて</h2><p>次にDockerがどのような仕組みで動作しているのか解説していきます。</p><p>Dockerはホストマシンにインストールさせて動作させるものになります。ベースとなるのは下図中心部にある <strong>デーモン（Docker Demon）</strong> です。このデーモンがDockerイメージやコンテナの作成・管理・実行等を行うコントローラー的な役割を担っている存在です。</p><p>続いて下図右上にある、<strong>イメージ（Docker Image）</strong> について説明していきます。このイメージとはアプリケーションや依存関係、実行に必要なファイルなどのアプリケーションの実行に必要なものをパッケージ化したものであり、コンテナを作成するための指示が記載されたもの、いわばアプリケーションの実行環境を定義づける設計図のようなものです。Dockerイメージは<strong>DockerFile</strong> と呼ばれるテキストファイル内に記載され、ビルドされます。このイメージはユニークに識別可能な識別子を持っており、この識別子を利用して識別されます。また、プログラムでいうところの<strong>クラス</strong>がイメージに当たります。</p><p>続いて下図上部の<strong>レジストリ（Doceker Registry）</strong> について説明していきます。レジストリとはイメージの保存・管理・配布を目的としたリポジトリであり、Docker公式のDocker Hubというレジストリや、Amazon Elastic Container Registryなど様々なレジストリが存在します。イメージは自分で作成することも可能ですが、上記のレジストリから既に作成済のイメージをPullして使用することも可能です。また、レジストリはチーム内だけのレジストリなど、プライベートレジストリとして作成することも可能です。</p><p>続いて<strong>コンテナ（Docker Container）</strong> について説明していきます。コンテナ型仮想環境と言われる所以であり、コンテナはイメージを元に作成され、デーモンによって管理されます。<br>コンテナは独立した仮想環境であり、イメージから作成された実体になります。つまりコンテナとは実際にアプリケーションやサービスを実行する場所ということになります。また、プログラムでいうところの<strong>インスタンス</strong>がコンテナに当てはまります。</p><p>最後に上記の説明を簡単にまとめます。</p><ul><li>実際のアプリケーションやサービスが実行される場所が<strong>コンテナ</strong>である</li><li>コンテナを生成するためにはコンテナの設計図となる<strong>イメージ</strong>が必要である</li><li>イメージは自分で作成することもできるが、イメージの保管場所である<strong>レジストリ</strong>からPullしても良い</li><li>コンテナやイメージの作成・管理・実行を行うのは<strong>デーモン</strong>というコントローラー的役割のプロセスである</li></ul><img src="/images/20230614a/Docker仕組み.png" alt="Docker仕組み" width="1200" height="783" loading="lazy"><h2 id="4-Dockerとマイクロサービスについて"><a href="#4-Dockerとマイクロサービスについて" class="headerlink" title="4. Dockerとマイクロサービスについて"></a>4. Dockerとマイクロサービスについて</h2><p>近年、Dockerはその性質からマイクロサービスというアーキテクチャと非常に相性が良く様々な企業でDockerを利用したマイクロサービスアーキテクチャの採用がされていることからDockerを利用したマイクロサービスアーキテクチャの概念について説明していきます。</p><ul><li><strong>マイクロサービスとは</strong></li></ul><p>ソフトウェア開発におけるアーキテクチャの一種であり、アプリケーションを複数の小さな独立したサービスに分割し開発・デプロイ等を行う概念となります。マイクロサービスの主なメリットデメリットを以下に解説します。</p><div class="scroll"><table><thead><tr><th align="left">メリット</th><th align="left">デメリット</th></tr></thead><tbody><tr><td align="left">柔軟性・スケーラビリティ</td><td align="left">システム全体の複雑化</td></tr><tr><td align="left">異なる言語やDBが使用可能</td><td align="left">システムやアプリケーション設計の難易度の上昇</td></tr><tr><td align="left">障害に強いシステムの開発</td><td align="left">結合テスト・デバッグの難易度の上昇</td></tr></tbody></table></div><p>上記が主なメリットとデメリットです。</p><p>マイクロサービスアーキテクチャを導入することで、例えばチーム内にJavaしかできない人、Goしかできない人が居たとしても独立したサービスに分割して作成するため、問題なく開発を進めることができます。それぞれのサービスに適した技術要素を選択して柔軟に開発を進めることも可能ですね。</p><p>このようなメリットがある一方、デメリットも存在します。それぞれのサービスが分割して作成されていれば当然システム全体は複雑化し、さらに開発言語も分かれていたとしたらPL・PM等の管理者はそれぞれの言語に精通している必要があります。つまり単一のサービスの開発はスピーディーに行える一方で、システム全体のテストや設計などの難易度は上がります。</p><ul><li><strong>Dockerを利用したマイクロサービスについて</strong></li></ul><p>なぜDockerを利用したマイクロサービスが導入されているのか、解説していきます。</p><ol><li>環境の統一性<br>Dockerを利用したマイクロサービスでは、各マイクロサービスが独立したDockerコンテナ内で実行されます。これにより、異なる環境でもコンテナが一貫した方法で実行されるため、環境の違いによる問題を最小限に抑えることができます。一方、Dockerを利用しない場合、開発環境や本番環境などの環境の違いによる問題が発生する場合があります。</li><li>デプロイとスケーリングの容易さ<br>Dockerを利用したマイクロサービスでは、各マイクロサービスを個別のコンテナとしてデプロイできます。これにより、新しいバージョンのマイクロサービスを迅速かつ簡単にデプロイできます。また、必要に応じてコンテナの数をスケーリングすることも容易です。一方、Dockerを使用しない場合、各マイクロサービスのデプロイとスケーリングは手動で行う必要があり、手間や時間がかかる可能性があります。</li><li>開発効率の向上<br>Dockerを利用したマイクロサービスでは、開発者は環境のセットアップや依存関係の管理に時間を費やす必要がありません。Dockerイメージを利用することで、素早く開発を進めることができます。</li></ol><p>上記のような理由からDockerとマイクロサービスは相性がよく、組み合わせることでより開発効率がよくなるため導入されていると言えるでしょう。</p><h1 id="5-Dockerとオーケストレーションツールについて"><a href="#5-Dockerとオーケストレーションツールについて" class="headerlink" title="5.Dockerとオーケストレーションツールについて"></a>5.Dockerとオーケストレーションツールについて</h1><p>Dockerの便利で素晴らしい点をこれまで解説してきましたが、例えばコンテナ数が大量に存在するようなシステムの場合、人手による管理は現実的ではないです。</p><p>そこで使用されるのがオーケストレーションツールというものです。オーケストレーションツールはコンテナのスケーリングや、コンテナの強制終了・再起動等の管理、負荷分散などの管理運用を自動的に行ってくれるツールです。</p><p>代表的なものとして<strong>Kubernetes</strong>というオーケストレーションツールがあります。今回は詳細な解説は行いませんが、DockerとKubernetesなどのオーケストレーションツールはよく組み合わせて使用されます。</p><p><strong>コンテナを作成をするのがDocker</strong> で <strong>コンテナの管理を行うのがKubernetes</strong> という認識で問題ないです。</p><h1 id="5-まとめ"><a href="#5-まとめ" class="headerlink" title="5.まとめ"></a>5.まとめ</h1><p>いかがでしたでしょうか。私は現在のプロジェクトに参画して一番最初に躓いたところがDockerでした。</p><p>しかし学習を進めていけばいくほど非常に素晴らしい技術ということが分かり力を入れて学んできた技術です。</p><p>正直、プログラミング言語の習得より難易度が高いなぁ、と思っていますが、難易度が高い故にこれらの技術を使いこなせる人材は貴重だということもわかりました。</p><p>そのため、今後も継続的に学習を行い、しっかり使いこなせるような人材になっていきたいと思います。</p><h1 id="6-さいごに"><a href="#6-さいごに" class="headerlink" title="6.さいごに"></a>6.さいごに</h1><p>今回はDockerの基礎的な部分とマイクロサービス、オーケストレーションツールの概要について解説をさせていただきました。</p><p>Dockerに関しても、オーケストレーションツールに関してもまだまだ解説できていない箇所がありますが、次回以降の投稿で解説していこうと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="マイクロサービス" scheme="https://future-architect.github.io/tags/%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>GCP Pub/Subの概念をかみ砕いて説明してみた</title>
    <link href="https://future-architect.github.io/articles/20230613a/"/>
    <id>https://future-architect.github.io/articles/20230613a/</id>
    <published>2023-06-12T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。2023年1月キャリア入社の添田です。1月から参画させていただいているプロジェクトでGoogle Cloud PlatformのPubSub(以降PubSub)を使用した開発を行うことになり、苦戦した部分が多々ありました。そこで今回はPubSubについて噛み砕いて説明していきます。今後PubSubを使用した開発をする方の助けになれればと思います。</p><p>(Google Cloud Platform PubSubについての公式ドキュメントは<a href="https://cloud.google.com/pubsub/docs/overview?hl=ja">こちら</a>です。)</p><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ol><li>そもそもPubSubとは何か</li><li>PubSubを理解する上で重要な単語の解説</li><li>実際の処理の流れの解説</li><li>PubSubを使用したユースケース考えてみた</li><li>まとめ</li><li>最後に</li></ol><h2 id="1-そもそもPubSubとは何か"><a href="#1-そもそもPubSubとは何か" class="headerlink" title="1. そもそもPubSubとは何か"></a>1. そもそもPubSubとは何か</h2><p>PubSubとは、非同期型のメッセージングサービスです。つまり、異なるコンポーネントやアプリケーション間でデータを非同期的に送受信するためのシステムになります。</p><p>補足ですが、他のクラウドベンダーでも類似したメッセージングサービスが提供されています。選択するメッセージングサービスはその時の要件等に合わせて検討していきましょう。</p><ul><li>AWS<ul><li>Amazon Simple Queue Service（Amazon SQS）</li><li>Amazon Kinesis Data Streams</li></ul></li><li>Azure<ul><li>Azure Service Bus: Service Bus</li><li>Azure Event Grid: Event Grid</li></ul></li></ul><p>次にPubSubを理解する上で以下の重要な単語を解説していきます。</p><p>PubSub概念を理解をする上では少なくとも以下は必須の用語となるので各用語の解説後、図解でPubSubの実際の動きやユースケースを解説していきます。</p><ul><li>メッセージ</li><li>publisher</li><li>subscriber</li><li>topic</li><li>subscription</li><li>確認応答（Ack）</li></ul><h2 id="2-PubSubを理解する上で重要な単語の解説"><a href="#2-PubSubを理解する上で重要な単語の解説" class="headerlink" title="2. PubSubを理解する上で重要な単語の解説"></a>2. PubSubを理解する上で重要な単語の解説</h2><ol><li><strong>メッセージについて</strong><br>メッセージとは、異なるコンポーネントや、アプリケーションに対して送信するデータのことです。要は非同期的に処理させたいデータをメッセージとして作成します。最終的にpublishする際にはメッセージの形式をバイト配列にする必要があります。(publishに関しては後ほど解説します)</li><li><strong>publisherについて</strong><br>publisherとは、メッセージを送信する役割をもつアプリケーションのことを指します。publisherがメッセージを送信することをpublishする、と言います。</li><li><strong>subscriberについて</strong><br>subscriberとは、メッセージを受信する役割を持つアプリケーションのことを指します。つまり、publisherからpublish(送信)されたメッセージを受け取り、非同期的に受け取り、それに応じた処理を行うアプリケーションと言えます。</li><li><strong>topicについて</strong><br>topicとは、PubSubのコンポーネントでありメッセージの送信元であるpublisherと、メッセージの受信先であるsubscriberを結ぶ中継地点と言えます。つまり、publisherはsubscriberへ直接メッセージをpublishするのではなく、topicにメッセージをpublishしています。topicについては特に重要な概念となります。</li><li><strong>subscriptionについて</strong><br>subscriptionとはPubSubのコンポーネントでありtopicからのメッセージの受信先と言え、subscriptionからsubscriberへのメッセージの配信が行われます。また、topicからメッセージを受信するsubscriptionは必ずしも１つである必要はなく、複数のsubscriptionを作成し１つのメッセージに対し、複数のsubscriberにメッセージを一度に配信することで全く違う処理を同時に非同期的に行うことが可能です。</li><li><strong>確認応答（Ack）について</strong><br>subscriberがメッセージを正常に受け取ったらsubscriptionに対して正常にメッセージを受信したことを通知します。確認応答を受信すると正常にメッセージが受信されたと見なされ、そのメッセージはtopicから削除されます。また、subscriberがメッセージの処理に失敗した場合、Nack（Negative Acknowledgement）を通知することができます。Nackが通知された場合、再度メッセージの配信を行います。この辺りの詳細な設定もsubscriptionで決めることが可能です。</li></ol><h2 id="3-実際の処理の流れの解説"><a href="#3-実際の処理の流れの解説" class="headerlink" title="3. 実際の処理の流れの解説"></a>3. 実際の処理の流れの解説<a name="処理の流れの解説"></a></h2><img src="/images/20230613a/pubsub_1.png" alt="pubsub" width="667" height="435" loading="lazy"><p>上図がPubSubの基本的な処理の流れになっています。</p><p>流れとしては以下のような流れとなります。</p><ul><li><ol><li>publisherがメッセージを作成、topicへpublishする</li></ol></li><li><ol start="2"><li>publishされたメッセージはMessageStorageへ格納される（MessageStorageについては説明していませんが、要はメッセージの一時保存場所のイメージです）</li></ol></li><li><ol start="3"><li>topicにpublishされたメッセージはsubscriptionの設定内容に応じてsubscriberへ配信されます。</li></ol></li><li>4~5. subscriberがメッセージを正常に受信したことをsubscriptionへ通知します（Ackされる）</li></ul><p>また、下図のような1対N・N対1のような使い方をすることも可能です。</p><p>例えば下図のpublisher Cから複数のsubscriberへメッセージを配信するユースケースは以下のようなシナリオが考えられると思います。</p><ul><li>ECサイトの注文管理システムの注文通知機能<ol><li>Publisher Cが注文データをメッセージとしてpublish</li><li>PublishされたメッセージをTopic Cが受信</li><li>Topic cがSubscription YCとSubscription ZCへメッセージを配信</li><li>Subscriber YとSubscriber Zがメッセージを受信</li><li>Subscriber Yはユーザへの注文確定のメール通知を行う・Subscriber Zは管理者ダッシュボードへの注文通知を表示する</li></ol></li></ul><p>上記はあくまでPubSubを用いた一例ですが、このように異なるサービスやシステム間での効率的な処理が可能になるのがPubSubの凄さだと思っています。</p><img src="/images/20230613a/pubsub_2.png" alt="pubsub_2.png" width="727" height="418" loading="lazy"><h2 id="4-PubSubを使用したユースケース考えてみた"><a href="#4-PubSubを使用したユースケース考えてみた" class="headerlink" title="4. PubSubを使用したユースケース考えてみた"></a>4. PubSubを使用したユースケース考えてみた<a name="処理の流れの解説"></a></h2><p>用語の解説から実際の処理の流れの解説までできたところで、今度はユースケースを考えてみます。</p><p>例えば下図のような証券会社のシステムがあったとします。</p><p>このシステムは10年以上前に構築されたもので以下のような課題がありました。</p><ul><li>課題①：各種取引商品データ更新の遅延<ul><li>10年前と比較して取引商品が増えたため、更新処理時間が増加していた。</li></ul></li><li>課題②：システム依存度の高さ<ul><li>現行のシステムではデータプロパイダと直接的に連携していることにより、他のデータプロパイダの使用やシステムのアップグレードが非常に難しくなっていた。</li></ul></li></ul><img src="/images/20230613a/pubsub_3.jpg" alt="pubsub_3.jpg" width="1170" height="721" loading="lazy"><p>下図のようにPubSubを導入することによってこれらの課題を解決することが可能です。（あくまで一例です）</p><ul><li>課題①：各種取引商品データ更新の遅延<ul><li>現行のシステムでは大量のデータを１つのシステムが処理をしていたが、データをメッセージとして受け取り複数のsubscriberで並列的に処理をさせる（データを表示するsubscriber、データを登録するsubscriberなどで役割を分ける）ことで効率的に処理を行う。</li></ul></li><li>課題②：システム依存度の高さ<ul><li>PubSubを介することでデータプロパイダと証券会社システム間は疎結合な関係になることで他のデータプロパイダの使用やアップグレードが現行システムより容易になる。</li></ul></li></ul><img src="/images/20230613a/pubsub_4.jpg" alt="pubsub_4.jpg" width="1170" height="918" loading="lazy"><h1 id="5-まとめ"><a href="#5-まとめ" class="headerlink" title="5.まとめ"></a>5.まとめ</h1><p>PubSubを理解するうえで必要な用語の解説からユースケースまで説明しました。</p><p>今回はPubSubの解説を、主にイベントドリブンなアーキテクチャで例えて解説しましたが、他にもリアルタイム分析や、マイクロサービスアーキテクチャの実現など様々な用途に使用することが可能です。</p><p>私は現在のプロジェクトで初めてPubSubを触りましたが、とても感動しました。</p><h1 id="6-さいごに"><a href="#6-さいごに" class="headerlink" title="6.さいごに"></a>6.さいごに</h1><p>今回はPubSubの基礎的な部分とユースケースの解説をさせていただきました。</p><p>Pull型配信やPush型配信、デッドレターキュー（DLQ）など、まだまだ解説できていない箇所がありますが、次回以降の投稿で解説していこうと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして。2023年1月キャリア入社の添田です。1月から参画させていただいているプロジェクトでGoogle Cloud</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="PubSub" scheme="https://future-architect.github.io/tags/PubSub/"/>
    
  </entry>
  
  <entry>
    <title>強化学習を学びたい人が最初に読む本 を読んだ感想</title>
    <link href="https://future-architect.github.io/articles/20230612a/"/>
    <id>https://future-architect.github.io/articles/20230612a/</id>
    <published>2023-06-11T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>2022年12月キャリア入社の大村俊輔です。</p><p><a href="https://www.amazon.co.jp//dp/B09LXW87YR/">強化学習を学びたい人が最初に読む本</a>の感想です。本記事で2本目の投稿となります。</p><img src="/images/20230612a/top.jpg" alt="" width="250" height="355" loading="lazy"><h2 id="本書を読んだ背景"><a href="#本書を読んだ背景" class="headerlink" title="本書を読んだ背景"></a>本書を読んだ背景</h2><p>本書を読む前の、わたしの強化学習の理解状況を最初にお伝えします。</p><ul><li>機械学習を3つに分類する際の1分野であること<ul><li>教師あり学習(回帰や分類等)</li><li>教師なし学習(分類等)</li><li>強化学習(ゲーム等)</li></ul></li><li>取り得る状態の数が小さければ全ての状態に対し<ul><li>全探索により厳密解を求める</li><li>ランダムな試行を繰り返し、良さそうな解を求める</li></ul></li></ul><p>…等で対応できるが、取り得る状態の数が大きい(一説では囲碁の取り得る盤面は10の200乗を超える！)ととても対応できないことが問題であった。</p><ul><li>そのようなケースで、状態をニューラルネットワークの形で持つことで、上記問題に上手く対応する手法である</li><li>私としては、簡単なニューラルネットワークは実装できるので、理論を理解できれば強化学習で遊ぶことくらいはできそう</li><li>ただ、強化学習の理論は難しく、私に合った入門教材も見当たらないので手を出せない</li></ul><p>…程度の認識でした。</p><p>なお、本書は業務に役立てる知識を得るためではなく、単純に面白そうなので学びました。</p><h2 id="本書の特徴"><a href="#本書の特徴" class="headerlink" title="本書の特徴"></a>本書の特徴</h2><p>本書は読んで学ぶ本ではなく、次の様な流れで学ぶスタイルであることが特徴です。</p><ol><li>まず人間が簡単なゲームを体験してみる</li><li>サンプルプログラムを使用してプログラムにゲームをさせる</li><li>サンプルプログラムのコードの丁寧な解説を読みながら、自分でもコードを書き替えて理解する</li></ol><p>教師あり学習の<a href="https://www.oreilly.co.jp/books/9784873117584/">ゼロから作るDeep Learning ―Pythonで学ぶディープラーニングの理論と実装</a>が合う方と相性が良いと思います。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><p>章立ては下記の通りです。</p><details><summary>第１章　強化学習の位置づけ</summary><dd>1.1  この本の概要</dd><dd>1.2  AI</dd><dd>1.3  教師あり学習</dd><dd>1.4  教師なし学習</dd><dd>1.5  強化学習</dd><dd>1.6  ニューラルネットワーク・ディープラーニング</dd></details><details><summary>第２章　Pyhtonの環境構築</summary><dd>2.1  Pythonのインストール</dd><dd>2.2  仮想環境の構築とライブラリのインストール</dd><dd>2.3  iRLのダウンロードと展開</dd></details><details><summary>第３章　教師あり学習</summary><dd>3.1  1次元入力の線形回帰モデル</dd><dd>3.1.1  データの準備</dd><dd>3.1.2  予想をすることは線を引くこと</dd><dd>3.1.3  線形回帰モデル(直線モデル)</dd><dd>3.1.4  平均二乗誤差(MSE)</dd><dd>3.1.5  勾配法</dd><dd>3.1.6  解析解</dd><dd>3.2  1次元入力のニューラルネットワークモデル</dd><dd>3.2.1  神経細胞(ニューロン)</dd><dd>3.2.2  ニューロンモデル</dd><dd>3.2.3  ニューラルネットワークモデル</dd><dd>3.2.4  ReLU活性化関数</dd><dd>3.2.5  オーバーフィッティング</dd><dd>3.3  一般的なニューラルネットワークモデル</dd></details><details><summary>第４章　強化学習の問題設定</summary><dd>4.1  強化学習を体験</dd><dd>4.1.1  タスクをあなたがプレイ</dd><dd>4.1.2  タスクを強化学習アルゴリズムがプレイ</dd><dd>4.2  環境</dd><dd>4.2.1  状態</dd><dd>4.2.2  観測</dd><dd>4.2.3  報酬</dd><dd>4.2.4  時系列で見た情報のやり取り</dd><dd>4.3  強化学習の目的</dd><dd>4.3.1  期待値</dd><dd>4.3.2  報酬和</dd></details><details><summary>第５章　基本のQ学習：tableQ</summary><dd>5.1  理論</dd><dd>5.1.1  平均の更新則</dd><dd>5.1.2  動的計画法</dd><dd>5.1.3  Q学習のアルゴリズム</dd><dd>5.2  実装</dd><dd>5.2.1  全体のプログラム構成</dd><dd>5.2.2  インターフェース(抽象クラス)</dd><dd>5.2.3  コリドータスク(環境クラス)</dd><dd>5.2.4  Q学習(エージェントクラス)</dd></details><details><summary>第６章　ニューラルネットQ学習：netQ</summary><dd>6.1  フィールドタスクを体験</dd><dd>6.1.1  壁なしフィールドタスク：no_wall</dd><dd>6.1.2  固定迷路のタスク：fixed_wall</dd><dd>6.1.3  ランダムな迷路のタスク：random_wall</dd><dd>6.2  ニューラルネットQ学習</dd><dd>6.2.1  netQの仕組み</dd><dd>6.2.2  netQの実装</dd><dd>6.2.3  netQのQ値の確認</dd><dd>6.3  netQ以外のプログラムの実装</dd><dd>6.3.1  フィールドタスク</dd><dd>6.3.2  トレーナー</dd><dd>6.3.3  実行ファイル</dd></details><details><summary>第７章　経験再生を取り入れたQ学習：replayQ、targetQ</summary><dd>7.1  経験再生：replayQ</dd><dd>7.1.1  経験再生Q学習のテスト</dd><dd>7.1.2  経験再生の仕組み</dd><dd>7.1.3　経験再生Q学習の実装</dd><dd>7.2  ターゲットネットワークの利用：targetQ</dd><dd>7.2.1  ターゲットネットワークQ学習のテスト</dd><dd>7.2.2  ターゲットネットワークの仕組み</dd><dd>7.2.3  ターゲットネットワークQ学習の実装</dd></details><details><summary>第８章　改良と工夫</summary><dd>8.1  新しい環境とエージェントの作り方</dd><dd>8.1.1  フィールドタスクにタスクタイプを追加する</dd><dd>8.1.2  新しい環境を実装する</dd><dd>8.1.3　新しいエージェントを実装する</dd><dd>8.2  ハイパーパラメータの決め方</dd><dd>8.3  強化学習の改良と工夫</dd><dd>8.3.1  環境の発展性</dd><dd>8.3.2  Qネットワークの多層化</dd><dd>8.3.3  画像入力対応：CNN</dd><dd>8.3.4  さらなる安定化：Double DQN</dd><dd>8.3.5  連続行動への対応：方策分配法</dd><dd>8.3.6  POMDP 対策１：連続した観測をひとまとめ</dd><dd>8.3.7  POMDP 対策２：LSTM</dd></details><details><summary>講座A　Visual Studio Codeのインストールと使い方</summary><dd>A-1  Visual Studio Codeのインストール</dd><dd>A-2  設定</dd><dd>A-3  Visual Studio Codeの使い方</dd></details><details><summary>講座B　Pythonの基本</summary><dd>B-1  変数を使う：対話モード</dd><dd>B-2  制御文と関数を使う：Jupyter Notebook</dd><dd>B-3  Numpyでベクトルと行列を扱う：Jupyter Notebook</dd><dd>B-4  Matplotlibでグラフを描く：Jupyter Notebook</dd></details><h2 id="本書の良かった点と注意事項"><a href="#本書の良かった点と注意事項" class="headerlink" title="本書の良かった点と注意事項"></a>本書の良かった点と注意事項</h2><h3 id="1章"><a href="#1章" class="headerlink" title="1章"></a>1章</h3><p>まずは機械学習における強化学習の立ち位置と、強化学習の歴史について広く浅く簡単に復習できます。</p><h3 id="2章"><a href="#2章" class="headerlink" title="2章"></a>2章</h3><p>以降のPythonプログラムを実行するための環境構築です。AnacondaではなくMinicondaであったり、少々古めのバージョンのライブラリが指定されていたりと少々変わった環境を求められますが、基本的に書かれた通りに実行すれば良いです。ただ、古いPCで、CPUがAVXに対応していない場合、TensorFlowは<a href="https://github.com/fo40225/tensorflow-windows-wheel/tree/master/1.12.0/py36/CPU/sse2">こちら</a>のAVX非対応のTensorFlowを使用する等の対応が必要です。</p><h3 id="3章"><a href="#3章" class="headerlink" title="3章"></a>3章</h3><p>ここから本書の良さが実感できると思います。</p><p>内容はまだこの後の章で使用するための教師あり学習で、直線の線形回帰モデルから平均二乗誤差(MSE)、勾配法、ニューラルネットワークを扱います。それぞれ丁寧な解説付きのコードと共に解説があり、結果のグラフ表示と併せて学ぶことで理解が深まります。</p><p>特に、パラメータとMSEの関係を等高線グラフや3Dグラフでイメージを持つ工程は習慣化したいですね。</p><h3 id="4章"><a href="#4章" class="headerlink" title="4章"></a>4章</h3><p>ここから強化学習に入ります。</p><p>まずは簡単なゲームを行い、ゲームのイメージを持ちます。</p><ul><li>横4マスの盤面があり、一番左にロボットがいて、右から1番、もしくは2番目(ゲーム開始時にランダムに決定されます)にクリスタルがあります。</li><li>ロボットは「進む」、「拾う」の2種類の動作が可能で、「拾う」は1回のみ実行可能です。<br>　(つまり、クリスタルの上で「拾う」ができれば成功、そうでなければ失敗)</li></ul><img src="/images/20230612a/コリ.jpg" alt="コリ.jpg" width="202" height="81" loading="lazy"><h3 id="5章"><a href="#5章" class="headerlink" title="5章"></a>5章</h3><p>4章の簡単なゲームを解くプログラムを作成します。</p><p>各状態からの行動に対する価値(Q値)をまとめたQテーブルを作成します。</p><p>また、「ゲーム」そのもののコードについても解説してありますので、ゲームを少し改編して試してみるのも良いかと思います。</p><h3 id="6章"><a href="#6章" class="headerlink" title="6章"></a>6章</h3><p>ゲームがこれまでより難しくなりました。</p><ol><li><p>盤面は2次元でロボットは中央、クリスタルは1つで配置はランダム-状態数81</p><img src="/images/20230612a/no.jpg" alt="no.jpg" width="250" height="281" loading="lazy"></li><li><p>盤面は2次元でロボットの位置はランダム、クリスタルは1つで配置は固定だが壁もある-状態数約150(ロボットから縦横2マス以内は明るく表示、この領域を見えている領域とみなしてプレイ)</p><img src="/images/20230612a/fix.jpg" alt="fix.jpg" width="251" height="283" loading="lazy"></li><li><p>盤面は2次元でロボットの位置は中央、クリスタルと壁は4つずつで配置もランダム-状態数5千万以上(全クリスタルを回収できない盤面は現れない)</p><img src="/images/20230612a/rand.jpg" alt="rand.jpg" width="354" height="384" loading="lazy"></li></ol><p>1, 2のように状態数が81や約150であればあ5章と同様にQテーブルを作成すれば良いですが、3.のように状態数が5千万を超えてくると、Ｑテーブルの作成は現実的ではありません。</p><p>そこで状態をニューラルネットの形で持つことにします。ここからは、本で内容を理解するというより、プログラムを動かしながら理解することになります。</p><p>これだけでも私がゲームをする場合と比べてもあまり遜色ないような気がします・・</p><h3 id="7章"><a href="#7章" class="headerlink" title="7章"></a>7章</h3><p>6章の3.ですでにそこそこの性能が出ていましたが、ときどきロボットがウロウロしてクリスタルを探しにいけないこともありました。</p><p>それを改善するために、なぜそれでプログラムの性能が向上するのかの解説と共に以下の2点を組み込みます。</p><ul><li>経験再生(Experience Replay)</li><li>ターゲットネットワーク(Target Network)</li></ul><p>この時点で、もう私ではプログラムに勝てる気がしません。</p><p>高性能な強化学習プログラムが、囲碁や将棋で人間より強くなることを理解できた気がします。</p><h3 id="8章"><a href="#8章" class="headerlink" title="8章"></a>8章</h3><p>これまでのゲームをより複雑にしたり、組み込んだニューラルネットワークを変更したりと、これまでの学習内容を他のタスクに応用するためのヒントで締めくくられています。</p><h2 id="本書では扱わない点"><a href="#本書では扱わない点" class="headerlink" title="本書では扱わない点"></a>本書では扱わない点</h2><p>本書一冊で強化学習を何かに応用することは難しいと思います。あくまで強化学習に入門するための本で、応用が目的であれば他の教材で学ぶ必要があると思います。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p><a href="https://www.amazon.co.jp//dp/B09LXW87YR/">強化学習を学びたい人が最初に読む本</a>により、実際にプログラムを動かしながら強化学習の基礎を学ぶことができました。これで他の強化学習の教材で学ぶこともできるようになったと思いますので、これまで手を出せなかった少し難しい本にも挑戦したいと思います。</p><p>強化学習以外にも、常に新たな学びにつながる本を探し、その内容を記事にしていきたいと思いますので、その際もお読みいただければ幸いです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;2022年12月キャリア入社の大村俊輔です。&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
    <category term="強化学習" scheme="https://future-architect.github.io/tags/%E5%BC%B7%E5%8C%96%E5%AD%A6%E7%BF%92/"/>
    
    <category term="強化学習を学びたい人が最初に読む本" scheme="https://future-architect.github.io/tags/%E5%BC%B7%E5%8C%96%E5%AD%A6%E7%BF%92%E3%82%92%E5%AD%A6%E3%81%B3%E3%81%9F%E3%81%84%E4%BA%BA%E3%81%8C%E6%9C%80%E5%88%9D%E3%81%AB%E8%AA%AD%E3%82%80%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>PLを始める前に読んでおきたい本</title>
    <link href="https://future-architect.github.io/articles/20230609a/"/>
    <id>https://future-architect.github.io/articles/20230609a/</id>
    <published>2023-06-08T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.124Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230609a/purpose-driven.jpg" alt="purpose-driven.jpg" width="600" height="934" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>はじめまして、2023年1月にフューチャーへキャリア入社した水野です。私はこれまでメーカー→SIer→ITコンサルというキャリアを歩んできており、PLの経験もそれなりに積んできましたが、新たな職場でコンサルとしての道を進み始めたこともあり、初心に戻り一から勉強してみようと考えて手に取った一冊がこの本でした。</p><p>普段、特にPLの方が無意識にやってることを整理して言語化してくれてる本なので、これからPLとして歩みたいと考えてる方には是非読んで欲しい１冊ですし、PL経験が豊富な方でも読むことで自身の頭の中を整理でき、普段の業務への取り組む姿勢を見直す機会をくれる本になるかもしれません。</p><p>今回紹介させて頂く本は、『目的ドリブンの思考法』という本です。</p><h2 id="書籍の要約と感想"><a href="#書籍の要約と感想" class="headerlink" title="書籍の要約と感想"></a>書籍の要約と感想</h2><h3 id="VUCA時代だからこそ大切なこと"><a href="#VUCA時代だからこそ大切なこと" class="headerlink" title="VUCA時代だからこそ大切なこと"></a>VUCA時代だからこそ大切なこと</h3><p>これまでの時代は、過去の実績から将来こうなるだろうと予想を立て目的を設定する方式（バックミラー方式）で業務が上手く回っていたが、先行きが読めないVUCA時代では、過去の延長線上に未来はないと記載されています。<br>過去から未来を予測するのではなく、自ら未来を創っていくことが大切だと記載されています。フューチャーのカルチャーとしても「無いものはつくる」という思想を大切にしているので、まさにこの考え方と一致しているなぁと感じました。</p><h3 id="３層ピラミッド構造（目的・目標・手段）の重要性"><a href="#３層ピラミッド構造（目的・目標・手段）の重要性" class="headerlink" title="３層ピラミッド構造（目的・目標・手段）の重要性"></a>３層ピラミッド構造（目的・目標・手段）の重要性</h3><p>目的・目標はその組織の道しるべとなります。目的・目標・手段が一貫しているかどうかが肝で、これらの繋がりが密であれば、より少ない労力で成果を出すことができるし、これらの繋がりが疎であれば、どこへ向かっているかが分からなくなり、暗雲に走り回ることを強いられ、最悪のケースは目的達成できないことになります。<br>また目的・目標・手段が一貫していれば、優先度の設定も容易になると記載されています。目的や目標に対してインパクトがある手段は優先度を高く設定してこなす必要が有りますし、目的・目標に対する影響度が低い手段は、優先すべきことではないことを意味します。</p><p>言われてみれば当たり前のことかもしれませんが、これらを意識的に目的・目標・手段に落とし込めるかどうかであらゆる仕事の局面で「選択と集中」ができるようになり、知的生産性高く業務遂行できるかどうかが決まると感じました。</p><h3 id="組織と同様に目的も階層化構造をつくることが重要"><a href="#組織と同様に目的も階層化構造をつくることが重要" class="headerlink" title="組織と同様に目的も階層化構造をつくることが重要"></a>組織と同様に目的も階層化構造をつくることが重要</h3><blockquote><p>「ビジネスの目的は”階層構造”をとる。なぜなら階層化された組織が一つの大きな”問題解決機構”そのものであるからだ。このことは、組織の本質としてリーダーが理解しておくべき大切なこと」</p></blockquote><p>各部署やロールは何かしらの目的を持っていて、それらは組織全体の上位目的へと繋がっているという考え方です。<br>本書籍では、上位～下位までの一貫性を担保することに注力すべしというメッセージが込められています。これが意識できていないと、前述したとおり効率の悪い進め方になってしまいますし、最悪のケースは無駄な作業をすることになるからです。</p><h3 id="問題とはAsIs（現状）とToBe（目標）のギャップ"><a href="#問題とはAsIs（現状）とToBe（目標）のギャップ" class="headerlink" title="問題とはAsIs（現状）とToBe（目標）のギャップ"></a>問題とはAsIs（現状）とToBe（目標）のギャップ</h3><p>ITコンサルをやっていると、よく耳にする「まずはAsIsとToBeから決めましょう」というセリフ、皆さんも一度は聞いたことがあるのではないでしょうか。</p><p>AsIs（現状）とToBe（目標）が設定されていないと、現時点がどこなのかを測ることもできないですし、目標が無ければ問題にも気づくことが出来ません。AsIsとToBeは、PJを遂行する上での一つの「ものさし」として役に立つので、目的・目標・手段の３層ピラミッドを定義する段階で一度、AsIsとToBeも並行して定義しておくと良いと思います。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>本書籍は、各項目に対して事例をもとに根拠立てて説明されており個人的にはどれも腹落ちする内容でした。<br>紹介しきれませんでしたが、書籍では目的・目標・手段の設定方法やその際に意識するポイント等も紹介されています。<br>全てをここで説明するのは難しいので、興味のある方は是非一度読んでみると良いと思います。<br>この書籍が伝えてる重要なメッセージとしては、これです。</p><blockquote><p>「上位と下位で一貫性を意識して目的・目標・手段を設定し業務遂行すること」</p></blockquote><p>トップダウンで業務の方針や指示があった場合には、それを鵜呑みにして進めるのではなく、一度立ち止まり、上位と下位との一貫性があるかどうかを考えることが重要だと考えます。</p><p>今回この本を読んでみて、インプットしただけでは身にならないと思い、この書籍から吸収したことを活かして組織の目的・目標・手段を整理した上で優先度を設定して横串チーム内での計画を立て、上長へ提案しながら進めている所です。</p><p>ぜひみなさんも、インプットで満足せず、業務で活用してみましょう。</p><p>「知識」で終わらせるではなく、「知恵」として身に着けていくことが重要です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230609a/purpose-driven.jpg&quot; alt=&quot;purpose-driven.jpg&quot; width=&quot;600&quot; height=&quot;934&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Management" scheme="https://future-architect.github.io/categories/Management/"/>
    
    
    <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
    <category term="コンサルティング" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%83%B3%E3%82%B5%E3%83%AB%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0/"/>
    
    <category term="目的ドリブンの思考法" scheme="https://future-architect.github.io/tags/%E7%9B%AE%E7%9A%84%E3%83%89%E3%83%AA%E3%83%96%E3%83%B3%E3%81%AE%E6%80%9D%E8%80%83%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C/C++を呼び出しているRustのWASM化</title>
    <link href="https://future-architect.github.io/articles/20230605a/"/>
    <id>https://future-architect.github.io/articles/20230605a/</id>
    <published>2023-06-04T15:00:00.000Z</published>
    <updated>2023-06-08T01:48:27.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、Futureでアルバイトをしている川渕です。</p><p>本記事ではC&#x2F;C++を呼び出しているRustのwasm化について説明します。結論から述べるとemscriptenを使用することでうまくいきました。</p><h2 id="経緯"><a href="#経緯" class="headerlink" title="経緯"></a>経緯</h2><p>アルバイトの前はインターンシップでRust製SQLフォーマッタであるuroborosql-fmtの作成を行なっていました。(<a href="/articles/20220916b/">前編</a>, <a href="/articles/20220916c/">後編</a>)<br>現在はアルバイトで<a href="/articles/20221228a/">拡張機能化</a>やwasm化を行なっています。</p><p>基本的にRustで書いたコードのwasm化は簡単に行えるのですが、今回はC&#x2F;C++で書かれたプロジェクトに依存していたため非常に苦戦しました。最終的になんとかwasm化に成功したので、本記事ではその方法について説明します。</p><h2 id="説明すること"><a href="#説明すること" class="headerlink" title="説明すること"></a>説明すること</h2><ul><li>WebAssembly(wasm)とは何か</li><li>Rustをwasm化する主な方法とチュートリアル<ul><li>wasm-pack</li><li>wasm32-unknown-emscripten</li></ul></li><li>C&#x2F;C++を呼んでいるRustのwasm化</li><li>性能検証</li></ul><h2 id="説明しないこと"><a href="#説明しないこと" class="headerlink" title="説明しないこと"></a>説明しないこと</h2><ul><li>WebAssembly System Interface(wasi)について</li></ul><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>OS: macOS Monterey 12.6.1<br>CPU: Apple M1 Pro<br>Rust: 1.67.1</p><h2 id="WebAssembly-wasm-とは"><a href="#WebAssembly-wasm-とは" class="headerlink" title="WebAssembly(wasm)とは"></a>WebAssembly(wasm)とは</h2><p>現在ブラウザ上でプログラムを実行する場合はJavaScriptが使用されます。JavaScriptの役割は元々HTMLの補助程度でしたが、現在はさまざまな用途に使用されており、速度が求められています。近年ではJITコンパイルによって高速化が行われていますが、JITコンパイルはよく呼び出される部分しかコンパイルされない、型推論を間違える可能性がある、などの欠点があります。</p><p>そこで、WebAssembly(wasm)という「ブラウザ上で動くバイナリコードの新しいフォーマット(仕様)」が開発されました。wasmは現在Firefox、Chrome、Safari、Edge等の主要なブラウザの全てに対応しており、Google, Microsoft, Mozilla, Appleによって仕様が策定され開発が進められています。</p><p>基本的に直接記述ではなく、C&#x2F;C++やRust、Golang、TypeScriptなどからコンパイルされます。wasmはJavaScriptを補完する目的で開発されており、JavaScriptから呼び出すことで実行できます。また、wasmからJavaScriptの機能にアクセスすることもできます。</p><p>wasmはCPUの活用、起動の高速化から、ネイティブアプリ並の速度で動作すると言われており、実際に多くのアプリケーションでwasmが使用されています。</p><ul><li><a href="https://www.figma.com/ja/">Figma</a> (<a href="https://www.figma.com/ja/blog/webassembly-cut-figmas-load-time-by-3x/">記事</a>)</li><li><a href="https://sqlite.org/index.html">sqlite</a> (<a href="https://sqlite.org/wasm/doc/trunk/index.md">ドキュメント</a>)</li><li><a href="https://www.google.co.jp/intl/ja/earth/">Google Earth</a> (<a href="https://medium.com/google-earth/google-earth-comes-to-more-browsers-thanks-to-webassembly-1877d95810d6">記事</a>)</li></ul><p>また、wasm化することでフロントエンドだけでアプリケーションが動くようになるため、RustやGoで書いたアプリケーションも簡単にGitHub Pagesなどの静的なサイトで実行することができます。</p><!--> WebAssembly は最近のウェブブラウザーで動作し、新たな機能と大幅なパフォーマンス向上を提供する新しい種類のコードです。基本的に直接記述ではなく、C、C++、Rust 等の低水準の言語にとって効果的なコンパイル対象となるように設計されています。この機能はウェブプラットフォームにとって大きな意味を持ちます。ウェブ上で動作するクライアントアプリで従来は実現できなかった、ネイティブ水準の速度で複数の言語で記述されたコードをウェブ上で動作させる方法を提供します。https://developer.mozilla.org/ja/docs/WebAssembly/Concepts--><h2 id="Rustをwasm化して実行する主な方法"><a href="#Rustをwasm化して実行する主な方法" class="headerlink" title="Rustをwasm化して実行する主な方法"></a>Rustをwasm化して実行する主な方法</h2><p>主に以下の2つがあります。</p><ol><li>wasm-pack<ul><li>Rustのwasm化において一番メジャーで簡単な方法</li><li>wasm-unknown-unknownとwasm-bindgenをラップしたツール</li><li>C&#x2F;C++に依存していない純粋なRustの場合はこちらがオススメ</li></ul></li><li>wasm32-unknown-emscripten<ul><li>emscriptenのインストールが必要</li><li>C&#x2F;C++を呼び出している場合はこちらがオススメ</li></ul></li></ol><h2 id="wasm-pack"><a href="#wasm-pack" class="headerlink" title="wasm-pack"></a>wasm-pack</h2><p>Rustのwasm化において一番メジャーで簡単な方法です。wasm-packさえインストールすれば自動で全部やってくれるので非常に楽です。内部ではターゲットをwasm32-unknown-unknownとしてビルドし、wasm-bindgen-cliを用いてグルーコードを生成しています。wasm-bindgenとはJavaScriptとRustの型を繋ぐツールのことです。</p><p><strong>基本的にwasm-packはC&#x2F;C++を呼んでいる場合は使えないので注意してください。</strong></p><h3 id="チュートリアル"><a href="#チュートリアル" class="headerlink" title="チュートリアル"></a>チュートリアル</h3><p>簡単にwasm-packのチュートリアルを説明します。</p><ol><li><p>wasm-packのインストール</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo install wasm-pack</span><br></pre></td></tr></table></figure></li><li><p>プロジェクトの新規作成</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wasm-pack new hello-wasm-pack</span><br></pre></td></tr></table></figure></li><li><p>ビルド<br> targetをwebに指定してビルドを実行します。</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wasm-pack build --target web</span><br></pre></td></tr></table></figure></li><li><p>wasmの実行<br> 以下のような<code>index.html</code>を作成します。</p> <figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-US&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello-wasm-pack example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">import</span> init, &#123; greet &#125; <span class="keyword">from</span> <span class="string">&quot;./pkg/hello_wasm_pack.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">init</span>()</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">greet</span>(<span class="string">&quot;WebAssembly&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 適当な方法でローカルサーバを立てます。(サーバを立てずにwasmを実行するとCORSエラーが発生します。)<br> 今回はpythonを使う方法でやってみます。</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8080</span><br></pre></td></tr></table></figure><p> ブラウザで<a href="http://localhost:8080/">http://localhost:8080/</a>にアクセスすると画面上にアラートボックスが現れ、<code>Hello, hello-wasm-pack!</code>と表示されたら成功です。</p></li></ol><img src="/images/20230602a/スクリーンショット_2023-03-24_18.40.13.png" alt="" width="1200" height="739" loading="lazy"><h3 id="wasm-packは何をしてくれているのか"><a href="#wasm-packは何をしてくれているのか" class="headerlink" title="wasm-packは何をしてくれているのか"></a>wasm-packは何をしてくれているのか</h3><p>wasm-packはビルド時に以下の処理をしてくれています。</p><ol><li>Rustコードをwasmにコンパイル<ul><li><code>cargo build --target wasm32-unknown-unknown</code>を実行<br>(ビルドターゲットにwasm32-unknown-unknownがインストールされていない場合は<code>rustup target add wasm32-unknown-unknown</code>を実行してビルドターゲットに追加)</li><li>ここでコンパイルしたwasmは<code>target/wasm32-unknown-unknown/release/</code>に生成される</li></ul></li><li>グルーコードの生成<ul><li><code>wasm-bindgen-cli</code>を用いてwasmとjsがデータをやり取りするためのjsファイルを作成し、<code>pkg</code>ディレクトリに格納</li></ul></li><li><code>Cargo.toml</code>を読んで等価な<code>pakcage.json</code>を作成</li><li><code>README.md</code>が存在する場合は<code>pkg</code>にコピー</li></ol><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>wasm32-unknown-unknownの「wasm32」はアドレス空間が32bitであること、1つ目の「unknown」はコンパイルを行うシステムのこと、2つ目の「unknown」はターゲットとしているシステムのことを示しています。つまり、wasm32-unknown-unknownはコンパイルを行うシステムとターゲットとするシステムの両方に制約がなく、どのような実行環境でも動作することを示します。</p></div><h3 id="何故C-x2F-C"><a href="#何故C-x2F-C" class="headerlink" title="何故C&#x2F;C++"></a>何故C&#x2F;C++</h3><p>完全には理解できませんでしたが、wasm-packはC&#x2F;C++の標準ライブラリにリンクする機能が含まれていないようです(<a href="https://stackoverflow.com/questions/75025716/can-wasm-pack-compile-a-rust-project-including-c-code-that-uses-stdlib">参考1</a>、<a href="https://github.com/rustwasm/wasm-pack/issues/741">参考2</a>)。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>C&#x2F;C++を呼び出しているとwasm-packは使用できないと述べましたが、実は<a href="https://zenn.dev/newgyu/articles/8bff73505c7b35">wasm-packでも頑張ればできる</a>らしいです。しかし、記事では依存元のソースコードをいじって動くようにしており、できる限り依存元のソースコードは触りたくないため選択肢から除外しました。どうしてもwasm-packを使いたい方はこちらの記事の方法を試してみてはいかがでしょうか。</p></div><h2 id="wasm32-unknown-emscripten"><a href="#wasm32-unknown-emscripten" class="headerlink" title="wasm32-unknown-emscripten"></a>wasm32-unknown-emscripten</h2><p><a href="https://emscripten.org/">emscripten</a>のコンパイラ(emcc)を利用してコンパイルを行います。emscriptenとはC&#x2F;C++をwasmにコンパイルするためのClang&#x2F;LLVMベースのコンパイラです。<br>C&#x2F;C++を呼んでいる場合はこちらの方法をオススメします。</p><h3 id="チュートリアル-1"><a href="#チュートリアル-1" class="headerlink" title="チュートリアル"></a>チュートリアル</h3><ol><li><p>Python3のインストール<br> Python3をインストールしていない方はインストールしてください。</p></li><li><p>emscriptenのインストール<br>   まずemsdkをインストールします</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/emscripten-core/emsdk.git</span><br></pre></td></tr></table></figure><p>   emsdkを利用してemscriptenをインストールします。ここでバージョンを<strong>2.0.24</strong>にしている点に注意してください。(私の環境では最新のemscriptenでは成功しませんでした。)</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd emsdk</span><br><span class="line">./emsdk install 2.0.24</span><br></pre></td></tr></table></figure><p>   emscriptenを有効にします。emccコマンドが実行できれば成功です。</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用しているshellに合わせて実行するスクリプトを適宜変更してください</span></span><br><span class="line"><span class="built_in">source</span> ./emsdk_env.sh</span><br><span class="line">emcc --version</span><br><span class="line"><span class="comment"># emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 2.0.24 (416685fb964c14cde4be3e8a45ad26d75bac3e33)</span></span><br><span class="line"><span class="comment"># Copyright (C) 2014 the Emscripten authors (see AUTHORS.txt)</span></span><br><span class="line"><span class="comment"># This is free and open source software under the MIT license.</span></span><br><span class="line"><span class="comment"># There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></span><br></pre></td></tr></table></figure>   <div class="note warn" style="background: #fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">     <span class="fa fa-fw fa-check-circle"></span><p>   Windowsで<a href="https://www.python.org/downloads/">公式ページのインストーラ</a>を用いてPythonのインストールを行なっており、かつGit Bashなどを使っている場合はemsdkの実行がうまくいかない場合があります。<br>   WindowsではデフォルトでPython3コマンドが入っていますが、そのコマンドはPython3ではなくMicrosoftのPython3インストールページが起動します。また、<a href="https://www.python.org/downloads/">Python公式ページのインストーラ</a>を用いてインストールされるPython3は<code>python</code>コマンドで起動します。よって、<strong>無効な<code>python3</code>コマンドと有効な<code>python</code>コマンドが存在している状態になります。</strong><br>   emsdkではまず<code>python3</code>コマンドを探し、存在しなければ<code>python</code>コマンドを探します。そのため、先に述べた環境の場合は無効な<code>python3</code>コマンドが使用されてしまいます。<br>   対応方法は以下の3つです。</p><ol><li>MicrosoftストアからPython3をインストールする<ul><li>Microsoftストアが使える方はこの方法が正攻法です</li><li>業務用PCなどでMicrosoftストアが使えない方は以下の方法を試してみてください</li></ul></li><li>emsdkの<code>python3</code>コマンドを探す箇所を削除する<ul><li>力技です</li><li><a href="https://github.com/emscripten-core/emsdk/blob/da9699832b5df4e123403490e499c87000c22654/emsdk#L33-L39"><code>emsdk/emsdk</code>の33~39行目</a>を削除するとうまくいきます</li></ul></li></ol>   </div></li><li><p>プロジェクトの新規作成</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new --lib hello-emscripten</span><br></pre></td></tr></table></figure></li><li><p>ターゲットに<code>wasm32-unknown-emscripten</code>を追加</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustup target add wasm32-unknown-emscripten</span><br></pre></td></tr></table></figure></li><li><p><code>Cargo.toml</code>を以下のように変更</p> <figure class="highlight toml"><figcaption><span>Cargo.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;hello-emscripten&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2021&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[lib]</span></span><br><span class="line"><span class="attr">crate-type</span> = [<span class="string">&quot;cdylib&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>src/lib.rs</code>を以下のように変更</p> <figure class="highlight rust"><figcaption><span>src/lib.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::ffi::&#123;c_char, CString&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">greet</span>(src: *<span class="keyword">mut</span> c_char) <span class="punctuation">-&gt;</span> *<span class="keyword">mut</span> c_char &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">src</span> = <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> src.<span class="title function_ invoke__">as_mut</span>() &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(src) =&gt; &#123;</span><br><span class="line">                <span class="comment">// ポインタからCStringに変換</span></span><br><span class="line">                <span class="keyword">let</span> <span class="variable">s</span> = CString::<span class="title function_ invoke__">from_raw</span>(src);</span><br><span class="line">                <span class="comment">// CStringからStringに変換</span></span><br><span class="line">                s.<span class="title function_ invoke__">into_string</span>().<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="literal">None</span> =&gt; <span class="string">&quot;guest&quot;</span>.<span class="title function_ invoke__">to_owned</span>(),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">res</span> = <span class="built_in">format!</span>(<span class="string">&quot;Hello, &#123;src&#125;!&quot;</span>);</span><br><span class="line">    <span class="comment">// Rustの文字列から終端文字がnullのC形式の文字列に変換し、ポインタに変換</span></span><br><span class="line">    CString::<span class="title function_ invoke__">new</span>(res).<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">into_raw</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <a href="https://doc.rust-lang.org/reference/abi.html#the-no_mangle-attribute"><code>#[no_mangle]</code>アトリビュート</a>を付与することで関数名をマングリングしないようにすることができます。マングリングとはコンパイラが関数名などをユニークな名前に変更することです。(例: <code>int Add(int a, int b)</code> →  <code>_Z3Addii</code>)<br> 今回の例では関数greetの名前を勝手に変更してほしくないので<code>#[no_mangle]</code>アトリビュートを付与しています。</p></li><li><p><code>build.sh</code>の作成<br> プロジェクトのルートディレクトリに<code>build.sh</code>を作成します。</p> <figure class="highlight sh"><figcaption><span>build.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自分の環境のemsdkの場所に合わせてパスに書き換えてください</span></span><br><span class="line"><span class="comment"># 使用しているshellに合わせて実行するスクリプトを適宜変更してください</span></span><br><span class="line"><span class="comment"># emccを有効にする</span></span><br><span class="line"><span class="built_in">source</span> ../emsdk/emsdk_env.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># emccの設定</span></span><br><span class="line"><span class="built_in">export</span> EMCC_CFLAGS=<span class="string">&quot;-o hello-emscripten.js</span></span><br><span class="line"><span class="string">                    -s EXPORTED_FUNCTIONS=[&#x27;_greet&#x27;]</span></span><br><span class="line"><span class="string">                    -s EXPORTED_RUNTIME_METHODS=ccall&quot;</span></span><br><span class="line"><span class="comment"># ビルド</span></span><br><span class="line">cargo build --target wasm32-unknown-emscripten --release</span><br></pre></td></tr></table></figure><p> emccの設定の詳細は以下の通りです。ドキュメントは<a href="https://emscripten.org/docs/tools_reference/emcc.html">こちら</a>。</p></li></ol><div class="scroll"><table><thead><tr><th>オプション</th><th>説明</th><th></th></tr></thead><tbody><tr><td>-o hello-emscripten.js</td><td>jsのグルーコードを出力する</td><td><a href="https://emscripten.org/docs/tools_reference/emcc.html#:~:text=when%20cross%2Dcompiling).-,%2Do%20%3Ctarget%3E,-%5Blink%5D%20When%20linking">リンク</a></td></tr><tr><td>-s EXPORTED_FUNCTIONS&#x3D;[‘_greet’]</td><td>エクスポートする関数の指定</td><td><a href="https://github.com/emscripten-core/emscripten/blob/fab93a2bff6273c882b0c7fb7b54eccc37276e03/src/settings.js#L969-L978">リンク</a></td></tr><tr><td>-s EXPORTED_RUNTIME_METHODS&#x3D;ccall</td><td>エクスポートするランタイムメソッドの指定</td><td><a href="https://github.com/emscripten-core/emscripten/blob/fab93a2bff6273c882b0c7fb7b54eccc37276e03/src/settings.js#L868-L875">リンク</a></td></tr></tbody></table></div><ol start="8"><li><p>ビルドの実行</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> build.sh</span><br></pre></td></tr></table></figure><p> 実行が完了するとプロジェクトのルートディレクトリに<code>hello-emscripten.js</code>、<code>hello-emscripten.wasm</code>というファイルが生成されます。</p></li><li><p><code>index.html</code>の作成<br> 以下のような<code>index.html</code>を作成します</p> <figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- グルーコードの読み込み --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">hello-emscripten.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;greet&quot;</span> <span class="attr">id</span>=<span class="string">&quot;greet&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Module</span> = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Module</span>[<span class="string">&quot;onRuntimeInitialized&quot;</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> name = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;greet&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> target = name.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> res = <span class="title function_">ccall</span>(<span class="string">&quot;greet&quot;</span>, <span class="string">&quot;string&quot;</span>, [<span class="string">&quot;string&quot;</span>], [target]);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>実行<br>適当な方法でローカルサーバを立てます。今回はpythonを使う方法でやってみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8080</span><br></pre></td></tr></table></figure><p>ブラウザで<a href="http://localhost:8080/">http://localhost:8080/</a>にアクセスすると以下のようなページが表示されます。</p></li></ol><img src="/images/20230602a/スクリーンショット_2023-03-24_15.53.38.png" alt="greet" width="986" height="624" loading="lazy">    テキストボックスに適当なテキストを入力し、下部のボタンを押します。    コンソールに"Hello, (入力したテキスト)!"と表示されれば成功です。<img src="/images/20230602a/スクリーンショット_2023-03-24_15.59.58.png" alt="Hello, Tom!" width="917" height="611" loading="lazy"><h2 id="SQLフォーマッタのwasm化をやってみる"><a href="#SQLフォーマッタのwasm化をやってみる" class="headerlink" title="SQLフォーマッタのwasm化をやってみる"></a>SQLフォーマッタのwasm化をやってみる</h2><p>私たちが作成したRust製SQLフォーマッタ(uroborosql-fmt)のwasm化をやってみます。</p><p>フォーマッタはCで書かれたtree-sitterに依存しているため、今回は先ほど紹介したemscriptenを使う方法でwasm化を行います。方法は先述したチュートリアルとほぼ同じなので詳細は割愛しますが、ビルド用シェルスクリプトは少し変更を加えたため説明します。</p><p>ビルド用シェルスクリプトを変更した理由は、依存しているプロジェクトであるtree-sitter-sql(tree-sitterのSQL文法)のビルドにおいて、<code>EMCC_CFLAGS=&quot;-o uroborosql-fmt.html&quot;</code>のようにhtmlを出力する設定にしていると失敗してしまったためです。調査しましたが原因不明であったため、とりあえずtree-sitter-sqlだけ先にビルドし、その後にemccの設定を変更し、最後に全体のビルドを行うアプローチを取りました。</p><p><code>cargo build</code>に<code>-vv</code>を付与(<a href="https://doc.rust-lang.org/cargo/reference/build-scripts.html#:~:text=If%20you%20would%20like%20to%20see%20the%20output%20directly%20in%20your%20terminal%2C%20invoke%20Cargo%20as%20%22very%20verbose%22%20with%20the%20%2Dvv%20flag.">“very verbose”モード</a>、処理の詳細が出力される)して確認したところ、各ビルドでは以下のような処理を行なっていることがわかりました。</p><ol><li>1回目のビルド<ul><li>tree-sitter-sqlとそれに依存するライブラリをビルド、このときオブジェクトファイル等(*.a 、*.o )が生成される</li></ul></li><li>2回目のビルド<ul><li>uroborosql-fmtに依存するライブラリをビルド、このときtree-sitter-sqlはビルド済みとしてスキップ</li><li>uroborosql-fmtをコンパイルするときに依存するライブラリのオブジェクトファイル等があるパスがrustcに渡され、そこからオブジェクトファイル等を検索してまとめてwasm化する</li></ul></li></ol><figure class="highlight sh"><figcaption><span>build.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自分の環境のemsdk/emsdk_env.shのパスに書き換えてください</span></span><br><span class="line"><span class="comment"># emccを有効にする</span></span><br><span class="line"><span class="built_in">source</span> ../emsdk/emsdk_env.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># emccの設定変更</span></span><br><span class="line"><span class="built_in">export</span> EMCC_CFLAGS=<span class="string">&quot;-O3&quot;</span></span><br><span class="line"><span class="comment"># tree-sitter-sqlのビルドを実行</span></span><br><span class="line">cargo build --package tree-sitter-sql --target wasm32-unknown-emscripten --release</span><br><span class="line"></span><br><span class="line"><span class="comment"># emccの設定変更</span></span><br><span class="line"><span class="built_in">export</span> EMCC_CFLAGS=<span class="string">&quot;-O3 -o uroborosql-fmt.js -s EXPORTED_FUNCTIONS=[&#x27;_format_sql&#x27;] -s ALLOW_MEMORY_GROWTH=1 -s EXPORTED_RUNTIME_METHODS=ccall&quot;</span></span><br><span class="line"><span class="comment"># 全体のビルドを実行</span></span><br><span class="line">cargo build --target wasm32-unknown-emscripten --release</span><br></pre></td></tr></table></figure><div class="scroll"><table><thead><tr><th>オプション</th><th>説明</th><th></th></tr></thead><tbody><tr><td>-O3</td><td>最高レベルの最適化</td><td><a href="https://emscripten.org/docs/tools_reference/emcc.html#:~:text=settings.js.-,%2DO3,-%5Bcompile%2Blink%5D%20Like">リンク</a></td></tr><tr><td>-o uroborosql-fmt.js</td><td>jsのグルーコードを出力する</td><td><a href="https://emscripten.org/docs/tools_reference/emcc.html#:~:text=when%20cross%2Dcompiling).-,%2Do%20%3Ctarget%3E,-%5Blink%5D%20When%20linking">リンク</a></td></tr><tr><td>-s EXPORTED_FUNCTIONS&#x3D;[‘_format_sql’]</td><td>エクスポートする関数の指定</td><td><a href="https://github.com/emscripten-core/emscripten/blob/fab93a2bff6273c882b0c7fb7b54eccc37276e03/src/settings.js#L969-L978">リンク</a></td></tr><tr><td>-s ALLOW_MEMORY_GROWTH&#x3D;1</td><td>動的にメモリを増やす</td><td><a href="https://github.com/emscripten-core/emscripten/blob/fab93a2bff6273c882b0c7fb7b54eccc37276e03/src/settings.js#L177-L190">リンク</a></td></tr><tr><td>-s EXPORTED_RUNTIME_METHODS&#x3D;ccall</td><td>エクスポートするランタイムメソッドの指定</td><td><a href="https://github.com/emscripten-core/emscripten/blob/fab93a2bff6273c882b0c7fb7b54eccc37276e03/src/settings.js#L868-L875">リンク</a></td></tr></tbody></table></div><p>今回はSQLフォーマッタなので、動的にメモリを確保する方法を選択しました。ちなみにメモリサイズのデフォルトの初期値は16MB、最大値は2GBで、こちらもオプション(<code>INITIAL_MEMORY</code>, <code>MAXIMUM_MEMORY</code>)で変更できます。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>私の環境では大差は見られませんでしたが、動的にメモリを確保する方法は重くなる可能性があるらしい(<a href="https://bugs.chromium.org/p/v8/issues/detail?id=3907">参考</a>)ので、動的にメモリを確保する必要がないサービスの場合は避けた方が良いかもしれません。</p></div><p>ローカルサーバを立てて実行してみるとちゃんと動きました 🎉<br><img src="/images/20230602a/format.gif" alt="format.gif" width="1200" height="675" loading="lazy"></p><h2 id="速度検証"><a href="#速度検証" class="headerlink" title="速度検証"></a>速度検証</h2><p>napi-rsを用いてNodeアドオン化して拡張機能に載せたフォーマッタ(詳細は<a href="https://future-architect.github.io/articles/20221228a/">こちら</a>)と今回作成したwasmで実行時間の計測を行なってみました。</p><p>最適化なしのwasmはビルドの際に<code>--release</code>を付与せずにビルドしたものです。</p><h3 id="検証方法"><a href="#検証方法" class="headerlink" title="検証方法"></a>検証方法</h3><ul><li>フォーマット部分のみの時間を計測</li><li>10200行のSQLを使用</li><li>20回実行して90パーセンタイルを取得</li></ul><h3 id="検証結果"><a href="#検証結果" class="headerlink" title="検証結果"></a>検証結果</h3><p>結果は以下のようになりました。</p><div class="scroll"><table><thead><tr><th>種類</th><th>時間(ms)</th></tr></thead><tbody><tr><td>napi-rs</td><td>73.89</td></tr><tr><td>wasm</td><td>171.10</td></tr></tbody></table></div><p>他の方の調査(<a href="%5Bhttps://namazu-tech.hatenablog.com/entry/2017/12/02/012600%5D">1</a>, <a href="https://niba1122.dev/js-wasm-benchmark/">2</a>, <a href="https://t-yng.jp/post/wasm-othello">3</a>, <a href="http://nmi.jp/2022-05-14-Dynamically-created-WebAssembly">4</a>)ではwasmはネイティブレベルかそれ以上の性能を叩き出していたので、wasmの方が2倍ほど遅いと言う結果は意外でした。しかし、遅いと言っても10200行のSQLで171msなので十分実用的な速度だと思います。</p><h2 id="最適化検証"><a href="#最適化検証" class="headerlink" title="最適化検証"></a>最適化検証</h2><p>Rustの<a href="https://doc.rust-lang.org/cargo/reference/profiles.html">最適化レベル</a>を変更してサイズ、速度の調査を行います。検証方法は速度検証と同様です。</p><h3 id="検証結果-1"><a href="#検証結果-1" class="headerlink" title="検証結果"></a>検証結果</h3><div class="scroll"><table><thead><tr><th>種類</th><th>説明</th><th>サイズ(KB)</th><th>時間(ms)</th></tr></thead><tbody><tr><td>0</td><td>最適化なし</td><td>1392</td><td>428.70</td></tr><tr><td>1</td><td>基本的な速度最適化</td><td>1178</td><td>207.90</td></tr><tr><td>2</td><td>いくつかの速度最適化</td><td>1122</td><td>177.70</td></tr><tr><td>3</td><td>全ての速度最適化(リリースモードのデフォルト)</td><td>1124</td><td>171.10</td></tr><tr><td>“s”</td><td>バイナリサイズの最適化</td><td>1113</td><td>218.80</td></tr><tr><td>“z”</td><td>バイナリサイズの最適化+ループのベクトル化もオフ</td><td>1111</td><td>300.40</td></tr></tbody></table></div><p>今回のケースではサイズの最適化を行なってもwasmのサイズに大きな変化は見られませんでした。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>C&#x2F;C++を呼び出しているRustのwasm化について説明しました。</p><p>本記事には書きませんでしたが、tree-sitter-sqlのパーササイズが大きすぎてコンパイルできない問題などにも遭遇して非常に苦戦していました。最終的にはなんとかwasm化することができたのでよかったです。同様の問題を抱えている方の助けになれば幸いです。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://developer.mozilla.org/ja/docs/WebAssembly">WebAssembly | MDN</a></li><li><a href="https://qiita.com/ShuntaShirai/items/3ac92412720789576f22">WebAssemblyとは - Qiita</a></li><li><a href="https://zenn.dev/newgyu/articles/4240df5d2a7d55">C言語へのFFIを含むRustをWASM化するのは難しすぎる</a></li><li><a href="https://zenn.dev/newgyu/articles/8bff73505c7b35">C言語へのFFIを含むRustコードをWASMにする（CMakeを添えて）</a></li><li><a href="https://zenn.dev/newgyu/scraps/ffbce244b960e6">興味のおもむくままにWASM&#x2F;WASIらへん</a></li><li><a href="https://qiita.com/legokichi/items/5d6344314ab6d6633554">Rust における wasm-bindgen と wasm-pack と cargo-web と stdweb の違い - Qiita</a></li><li><a href="https://emscripten.org/">Main — Emscripten 3.1.33-git (dev) documentation</a></li><li><a href="https://qiita.com/t_katsumura/items/ff379aaaba6931aad1c4">WebAssemblyが気になるので調べてみた - Qiita</a></li><li><a href="https://users.rust-lang.org/t/emitting-es6-module-for-wasm32-unknown-emscripten/84684/11">Emitting ES6 Module for `wasm32-unknown-emscripten` - help - The Rust Programming Language Forum</a></li><li><a href="https://qiita.com/kzee/items/216bd1dd2b1330642e23">C&#x2F;C++を使っているRustのコンソールアプリのReact SPA化 - Qiita</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Rust" scheme="https://future-architect.github.io/tags/Rust/"/>
    
    <category term="wasm" scheme="https://future-architect.github.io/tags/wasm/"/>
    
    <category term="C/C++" scheme="https://future-architect.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Great ExpectationsでBigQueryのデータ品質を監視する</title>
    <link href="https://future-architect.github.io/articles/20230531a/"/>
    <id>https://future-architect.github.io/articles/20230531a/</id>
    <published>2023-05-30T15:00:00.000Z</published>
    <updated>2023-05-31T01:44:13.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-はじめに"><a href="#1-はじめに" class="headerlink" title="1. はじめに"></a>1. はじめに</h2><p>こんにちは、フューチャーでアルバイトをしている板野です。</p><p>Great Expectationsというツールを使って、表形式データの品質をバリデーションする流れをご紹介します。</p><p>MLOpsを推進するにあたりMLモデルの監視が必要となってきています。その中でも、MLモデルに入出力されるデータ品質をバリデーションすることは重要な監視事項の一つです。</p><p>ML監視についての概要や意義については、<a href="/articles/20230413a/">こちらの記事</a>で詳しく述べられているのでぜひご覧ください。</p><h2 id="2-Great-Expectationsの概要"><a href="#2-Great-Expectationsの概要" class="headerlink" title="2. Great Expectationsの概要"></a>2. Great Expectationsの概要</h2><img src="/images/20230531a/2023-05-10-16-41-00.png" alt="" width="500" height="133" loading="lazy"><p>※<a href="https://docs.greatexpectations.io/docs/">公式サイト</a>ロゴ</p><p>Great Expectations（GX）はデータ品質監視ツールの1つで、表形式データの品質監視ができます。GXはOSSであり、Pythonライブラリとして提供されています。</p><p>予めデータに対し、Expectationと呼ばれる「データのあるべき姿」を定義しておき、監視対象のデータがこれに逸脱していないかをチェック（バリデーション）します。Expectationは例えば「この列の最大値は100,最小値は50」といったものがあり、GXではExpectationを複数定義することが一般的です。Expectationを複数定義したものをExpectation Suiteと呼びます。</p><p>GXでは「監視対象データ、Expectation Suite、バリデーションを実施した後の行動」の3点をまとめたものをCheckpointと呼び、定期的にCheckpointを実行することが、GXにおけるデータ品質監視の一般的な流れとなります。</p><h2 id="3-利用の流れ"><a href="#3-利用の流れ" class="headerlink" title="3. 利用の流れ"></a>3. 利用の流れ</h2><h2 id="3-1-事前準備"><a href="#3-1-事前準備" class="headerlink" title="3.1. 事前準備"></a>3.1. 事前準備</h2><h3 id="必要な環境"><a href="#必要な環境" class="headerlink" title="必要な環境"></a>必要な環境</h3><ul><li>Python環境</li><li>JupyterNotebook環境（必須ではないですが初期設定ではあった方が楽です）</li></ul><h3 id="使用するデータ"><a href="#使用するデータ" class="headerlink" title="使用するデータ"></a>使用するデータ</h3><p><a href="https://archive.ics.uci.edu/ml/datasets/bike+sharing+dataset">Bike Sharing Dataset</a>を利用し、1時間毎のシェアバイク利用者数が記録されているテーブルを使います。</p><p>以下のような内容になっています。</p><img src="/images/20230531a/2023-05-08-16-05-51.png" alt="" width="1200" height="212" loading="lazy"><p>例えば、<code>hr</code>（時間）の列は0から23までの値しか入らないはずです。もしも、<code>hr</code>が27のような不正値をとる行が入ってきた場合、検知するというのがGXの使いどころです。</p><p>今回は<code>hr</code>に27という不正値を故意に入れてみて、これをGXで検知するまでの流れを実践し、以下に説明していきます。</p><h3 id="3-2-GXのインストール"><a href="#3-2-GXのインストール" class="headerlink" title="3.2. GXのインストール"></a>3.2. GXのインストール</h3><p><code>pip install great-expectations</code>コマンドでGXをインストールします。</p><p>執筆当時のバージョンは<code>0.16.8</code>です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip install great-expectations</span><br><span class="line">$ pip freeze | grep great  <span class="comment"># バージョン確認</span></span><br><span class="line">great-expectations==0.16.8</span><br></pre></td></tr></table></figure><h3 id="3-3-プロジェクトの作成"><a href="#3-3-プロジェクトの作成" class="headerlink" title="3.3. プロジェクトの作成"></a>3.3. プロジェクトの作成</h3><p><code>great_expectations init</code>コマンドでGXプロジェクトを作成します。</p><p>コマンドを実行したディレクトリに<code>great_expectations</code>ディレクトリが自動生成されます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">great_expectations init</span></span><br><span class="line"></span><br><span class="line">  ___              _     ___                  _        _   _</span><br><span class="line"> / __|_ _ ___ __ _| |_  | __|_ ___ __  ___ __| |_ __ _| |_(_)___ _ _  ___</span><br><span class="line">| (_ | &#x27;_/ -_) _` |  _| | _|\ \ / &#x27;_ \/ -_) _|  _/ _` |  _| / _ \ &#x27; \(_-&lt;</span><br><span class="line"> \___|_| \___\__,_|\__| |___/_\_\ .__/\___\__|\__\__,_|\__|_\___/_||_/__/</span><br><span class="line">                                |_|</span><br><span class="line">             ~ Always know what to expect from your data ~</span><br><span class="line"></span><br><span class="line">Let&#x27;s create a new Data Context to hold your project configuration.</span><br><span class="line"></span><br><span class="line">Great Expectations will create a new directory with the following structure:</span><br><span class="line"></span><br><span class="line">    great_expectations</span><br><span class="line">    |-- great_expectations.yml</span><br><span class="line">    |-- expectations</span><br><span class="line">    |-- checkpoints</span><br><span class="line">    |-- plugins</span><br><span class="line">    |-- .gitignore</span><br><span class="line">    |-- uncommitted</span><br><span class="line">        |-- config_variables.yml</span><br><span class="line">        |-- data_docs</span><br><span class="line">        |-- validations</span><br><span class="line"></span><br><span class="line">OK to proceed? [Y/n]: Y</span><br><span class="line"></span><br><span class="line">================================================================================</span><br><span class="line"></span><br><span class="line">Congratulations! You are now ready to customize your Great Expectations configuration.</span><br><span class="line"></span><br><span class="line">You can customize your configuration in many ways. Here are some examples:</span><br><span class="line"></span><br><span class="line">  Use the CLI to:</span><br><span class="line">    - Run `great_expectations datasource new` to connect to your data.</span><br><span class="line">    - Run `great_expectations checkpoint new &lt;checkpoint_name&gt;` to bundle data with Expectation Suite(s) in a Checkpoint for later re-validation.</span><br><span class="line">    - Run `great_expectations suite --help` to create, edit, list, profile Expectation Suites.</span><br><span class="line">    - Run `great_expectations docs --help` to build and manage Data Docs sites.</span><br><span class="line"></span><br><span class="line">  Edit your configuration in great_expectations.yml to:</span><br><span class="line">    - Move Stores to the cloud</span><br><span class="line">    - Add Slack notifications, PagerDuty alerts, etc.</span><br><span class="line">    - Customize your Data Docs</span><br><span class="line"></span><br><span class="line">Please see our documentation for more configuration options!</span><br></pre></td></tr></table></figure><p>自動生成されたディレクトリの構成を簡潔に説明すると、以下の通りになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">great_expectations  <span class="comment"># GXのルートとなるディレクトリ</span></span><br><span class="line">|-- great_expectations.yml  <span class="comment"># プロジェクト全体の設定ファイル</span></span><br><span class="line">|-- expectations  <span class="comment"># Expectationsを定義したJSONファイルが格納されるディレクトリ</span></span><br><span class="line">|-- checkpoints  <span class="comment"># Checkpointを定義したyamlファイルが格納されるディレクトリ</span></span><br><span class="line">|-- plugins  <span class="comment"># プラグイン用のディレクトリ（本記事では扱わない）</span></span><br><span class="line">|-- .gitignore  <span class="comment"># uncommittedディレクトリをGitにコミットしないように書かれたgitignoreファイル</span></span><br><span class="line">|-- uncommitted  <span class="comment"># Gitで管理する際にコミットされないディレクトリ</span></span><br><span class="line">    |-- config_variables.yml  <span class="comment"># 公開したくないキーや設定が書かれたファイル</span></span><br><span class="line">    |-- data_docs  <span class="comment"># バリデーション結果がHTML等のドキュメントの形式で入ったディレクトリ</span></span><br><span class="line">    |-- validations  <span class="comment"># バリデーション結果のメタデータ(JSON)が入ったディレクトリ</span></span><br></pre></td></tr></table></figure><h3 id="3-4-データソースの登録"><a href="#3-4-データソースの登録" class="headerlink" title="3.4. データソースの登録"></a>3.4. データソースの登録</h3><p>次に、監視対象データの場所（データソース）を定義する必要があります。</p><p>GXでは、Pandasで扱えるファイルや、SQLベースのクエリで取得できるデータなどに対応しています。今回はBigQueryのテーブルをデータソースとして登録します。</p><p><code>great_expectations datasource new</code>コマンドを実行すると、最初にデータソースの種類の選択が促され、自動的にNotebookが起動します。このタイミングでNotebookを起動させたく無ければ<code>--no-jupyter</code>オプションを末尾に付けます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">great_expectations datasource new --no-jupyter</span></span><br><span class="line"></span><br><span class="line">What data would you like Great Expectations to connect to?</span><br><span class="line">    1. Files on a filesystem (for processing with Pandas or Spark)</span><br><span class="line">    2. Relational database (SQL)</span><br><span class="line">: 2</span><br><span class="line"></span><br><span class="line">Which database backend are you using?</span><br><span class="line">    1. MySQL</span><br><span class="line">    2. Postgres</span><br><span class="line">    3. Redshift</span><br><span class="line">    4. Snowflake</span><br><span class="line">    5. BigQuery</span><br><span class="line">    6. Trino</span><br><span class="line">    7. Athena</span><br><span class="line">    8. other - Do you have a working SQLAlchemy connection string?</span><br><span class="line">: 5</span><br><span class="line">Please install the optional dependency &#x27;black&#x27; to enable linting. Returning input with no changes.</span><br><span class="line">To continue editing this Datasource, run jupyter notebook &lt;現在のディレクトリ&gt;/great_expectations/uncommitted/datasource_new.ipynb</span><br></pre></td></tr></table></figure><p>コマンドでの対話を進めると、Notebookファイル<code>great_expectations/uncommitted/datasource_new.ipynb</code>が自動的に生成されます。</p><p>GXはこのNotebookを実行して、CLIでは設定しずらい詳細な設定を適用していく仕様です。Notebookを使わない場合は直接yamlファイルを編集することになります（補足参照）。</p><p>以下の画像はNotebookの冒頭です。</p><img src="/images/20230531a/2023-05-08-14-25-51.png" alt="" width="1200" height="707" loading="lazy"><p>Notebook上の以下の変数を自身のプロジェクトに合うように変更する必要があります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">datasource_name = <span class="string">&quot;&lt;設定したいデータソース名&gt;&quot;</span> <span class="comment">#好みの名前に設定可能</span></span><br><span class="line"></span><br><span class="line">connection_string = <span class="string">&quot;bigquery://&lt;GCPのプロジェクト名&gt;/&lt;BigQueryのデータセット名&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">schema_name = <span class="string">&quot;&quot;</span> <span class="comment"># 入力不要</span></span><br><span class="line">table_name = <span class="string">&quot;&lt;BigQueryのテーブル名&gt;&quot;</span> <span class="comment"># 監視対象データのテーブル</span></span><br></pre></td></tr></table></figure><p>上記の変数を変更した後、Notebookのセルを全て実行するとデータソースの設定は完了です。</p><h4 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h4><p><code>datasource_new.ipynb</code>では、GX全体の設定ファイルである<code>great_expectations.yml</code>のデータソースを定義する部分を編集しているだけで、Notebookはこれを編集するための分かりやすいインターフェースに過ぎません。</p><p>従って、Notebookを使わずに<code>great_expectations.yml</code>のデータソース定義部分を直接編集するだけで設定が可能です。</p><p>例えばBigQueryなら、以下のようにデータソースを定義します。（<a href="https://docs.greatexpectations.io/docs/guides/connecting_to_your_data/database/bigquery">公式Docs参考</a>）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">my_datasource</span></span><br><span class="line"><span class="attr">class_name:</span> <span class="string">Datasource</span></span><br><span class="line"><span class="attr">execution_engine:</span></span><br><span class="line">  <span class="attr">class_name:</span> <span class="string">SqlAlchemyExecutionEngine</span></span><br><span class="line">  <span class="attr">connection_string:</span> <span class="string">bigquery://&lt;GCPのプロジェクト名&gt;/&lt;BigQueryのデータセット名&gt;</span></span><br><span class="line"><span class="attr">data_connectors:</span></span><br><span class="line">   <span class="attr">default_runtime_data_connector_name:</span></span><br><span class="line">       <span class="attr">class_name:</span> <span class="string">RuntimeDataConnector</span></span><br><span class="line">       <span class="attr">batch_identifiers:</span></span><br><span class="line">           <span class="bullet">-</span> <span class="string">default_identifier_name</span></span><br><span class="line">   <span class="attr">default_inferred_data_connector_name:</span></span><br><span class="line">       <span class="attr">class_name:</span> <span class="string">InferredAssetSqlDataConnector</span></span><br><span class="line">       <span class="attr">include_schema_name:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="3-5-Expectation-Suiteの作成"><a href="#3-5-Expectation-Suiteの作成" class="headerlink" title="3.5. Expectation Suiteの作成"></a>3.5. Expectation Suiteの作成</h3><p>続いて、Expectation Suiteを作成します。</p><p>Expectation Suiteは複数のExpectationの集まりのことを指します。一つ一つ手作業でExpectationを定義・バリデーションしていくのは非効率なため、Expectation Suiteを定義してまとめて行うのです。</p><p><code>great_expectations suite new</code>コマンドを実行すると、先程と似た流れでCLIとNotebookを使ってセットアップを行います。最初の「How would you like to create your Expectation Suite?」という質問に「3」と回答するとExpectation Suiteを自動で生成してくれます。</p><p>今回はExpectation Suiteを自動生成してもらいます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">great_expectations suite new --no-jupyter</span></span><br><span class="line"></span><br><span class="line">How would you like to create your Expectation Suite?</span><br><span class="line">    1. Manually, without interacting with a sample Batch of data (default)</span><br><span class="line">    2. Interactively, with a sample Batch of data</span><br><span class="line">    3. Automatically, using a Data Assistant</span><br><span class="line">: 3</span><br><span class="line"></span><br><span class="line">A batch of data is required to edit the suite - let&#x27;s help you to specify it.</span><br><span class="line"></span><br><span class="line">Select data_connector</span><br><span class="line">    1. default_runtime_data_connector_name</span><br><span class="line">    2. default_inferred_data_connector_name</span><br><span class="line">    3. default_configured_data_connector_name</span><br><span class="line">: 3</span><br><span class="line"></span><br><span class="line">Which data asset (accessible by data connector &quot;default_configured_data_connector_name&quot;) would you like to use?</span><br><span class="line">    1. &lt;テーブル名&gt;</span><br><span class="line"></span><br><span class="line">Type [n] to see the next page or [p] for the previous. When you&#x27;re ready to select an asset, enter the index.</span><br><span class="line">: 1</span><br><span class="line"></span><br><span class="line">Name the new Expectation Suite [&lt;テーブル名&gt;.warning]: exp_suite_test</span><br><span class="line"></span><br><span class="line">Great Expectations will create a notebook, containing code cells that select from available columns in your dataset and</span><br><span class="line">generate expectations about them to demonstrate some examples of assertions you can make about your data.</span><br><span class="line"></span><br><span class="line">When you run this notebook, Great Expectations will store these expectations in a new Expectation Suite &quot;exp_suite_test&quot; here:</span><br><span class="line"></span><br><span class="line">  file:///&lt;現在のディレクトリ&gt;/great_expectations/expectations/exp_suite_test.json</span><br><span class="line"></span><br><span class="line">Would you like to proceed? [Y/n]: Y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">中略</span></span><br><span class="line"></span><br><span class="line">To continue editing this suite, run jupyter notebook &lt;現在のディレクトリ&gt;/great_expectations/uncommitted/edit_exp_suite_test.ipynb</span><br></pre></td></tr></table></figure><p>コマンドの実行が完了すると、Expectation Suiteを設定するためのNotebookファイル<code>great_expectations/uncommitted/edit_exp_suite_test.ipynb</code>が自動生成されます。</p><p>以下の画像はNotebookの冒頭です。</p><img src="/images/20230531a/2023-05-08-15-59-41.png" alt="" width="1200" height="1107" loading="lazy"><p>Notebookにて、必要に応じて変更すべき変数は以下の2つです。</p><ul><li>batch_request<ul><li>‘limit’ の数はデフォルトで<code>1000</code>となっていますが、必要に応じて変更します</li><li>この値は一度のバリデーションでBigQueryのテーブルデータを何件読み込んでくるかの数値です</li><li>‘limit’ の数値が大きすぎると処理が重くなる可能性があります</li></ul></li><li>exclude_column_names<ul><li><strong>バリデーションしたい列</strong>をコメントアウトします</li><li>初期状態のままでは全てがexcludeされている状態なので、どの列もバリデーションしないというおかしな設定になってしまいます</li><li>今回は<code>hr</code>列だけバリデーションしたいのでここだけコメントアウトしています</li></ul></li></ul><p>Notebookのセルを全て実行すると、自動でExpectation Suiteが作成され、そのExpectation Suiteが定義されたJSONファイルが<code>great_expectations/expectations/</code>配下に保存されます。</p><p>以下はそのJSONファイルを一部展開して表示した画像です。</p><img src="/images/20230531a/2023-05-08-16-22-06.png" alt="" width="715" height="853" loading="lazy"><p>expectationは計13個自動生成されたようです。</p><p>その中の一つは<code>expect_column_values_to_be_between</code>というもので、「<code>hr</code>列は0から23までの値をとるはずである」という内容のexpectationです。</p><p>またこの時点で、Expectation Suiteの生成と同時に、データのバリデーションまで行われています。</p><p><code>great_expectations/uncommitted/data_docs/local_site/index.html</code>を開くと以下のような画面があり、1度バリデーションが行われていることが分かります。</p><img src="/images/20230531a/2023-05-10-10-18-29.png" alt="" width="1200" height="303" loading="lazy"><p>クリックして詳細を見てみると、2つのExpectationに不合格となっているようです。<br>自動生成のExpectationが何個も定義されているので、多少は変なExpectationが生成されることもあるのでしょう。</p><img src="/images/20230531a/2023-05-10-10-20-31.png" alt="" width="1200" height="990" loading="lazy"><h3 id="3-6-Checkpointの作成・実行"><a href="#3-6-Checkpointの作成・実行" class="headerlink" title="3.6. Checkpointの作成・実行"></a>3.6. Checkpointの作成・実行</h3><p>最後に、Checkpointを作成する必要があります。</p><p>Checkpointとは「監視対象データ（データソース）、Expectation Suite、バリデーションを実施した後の行動」の3点をまとめたものであり、Checkpointを実行することで、Expectation Suiteをまとめてバリデーションすることができます。</p><p>バリデーションを実施した後の行動として、結果をメールやSlackでの通知する等が挙げられますが、Pythonでプログラミングできるものなら何でも可能となっており、自由度が高いです。（<a href="https://docs.greatexpectations.io/docs/terms/action">公式Docs参考</a>）<br>※今回はバリデーションを実施した後の行動の設定までは扱いません</p><p><code>great_expectations checkpoint new &lt;設定したいcheckpoint名&gt;</code>コマンドを実行すると、<code>great_expectations/uncommitted/edit_checkpoint_~~.ipynb</code>にNotebookファイルが自動生成されます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">great_expectations checkpoint new --no-jupyter checkpoint_test</span></span><br><span class="line"></span><br><span class="line">Please install the optional dependency &#x27;black&#x27; to enable linting. Returning input with no changes.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">中略</span></span><br><span class="line"></span><br><span class="line">To continue editing this Checkpoint, run jupyter notebook &lt;現在のディレクトリ&gt;/great_expectations/uncommitted/edit_checkpoint_checkpoint_test.ipynb</span><br></pre></td></tr></table></figure><p>生成されたNotebookファイルで変更する必要がある部分は次の通りです。</p><p>初期状態では<code>data_asset_name</code>の行がBigQuery上の適当なテーブルになっているので、監視対象にしたいデータセット名、テーブル名に書き換えます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my_checkpoint_name = <span class="string">&quot;checkpoint_test&quot;</span> <span class="comment"># This was populated from your CLI command.</span></span><br><span class="line"></span><br><span class="line">yaml_config = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">name: <span class="subst">&#123;my_checkpoint_name&#125;</span></span></span><br><span class="line"><span class="string">config_version: 1.0</span></span><br><span class="line"><span class="string">class_name: SimpleCheckpoint</span></span><br><span class="line"><span class="string">run_name_template: &quot;%Y%m%d-%H%M%S-my-run-name-template&quot;</span></span><br><span class="line"><span class="string">validations:</span></span><br><span class="line"><span class="string">  - batch_request:</span></span><br><span class="line"><span class="string">      datasource_name: my_datasource</span></span><br><span class="line"><span class="string">      data_connector_name: default_inferred_data_connector_name</span></span><br><span class="line"><span class="string">      data_asset_name: &lt;監視したいデータセット名&gt;.&lt;監視したいテーブル名&gt; #★ここを変更する</span></span><br><span class="line"><span class="string">      data_connector_query:</span></span><br><span class="line"><span class="string">        index: -1</span></span><br><span class="line"><span class="string">    expectation_suite_name: my_exp_suite</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(yaml_config)</span><br></pre></td></tr></table></figure><p>今回はExpectation Suiteの自動生成に用いたテーブルに「<code>hr</code>（時間）の列の値を27に変更した不正な行」を追加したテーブルを監視対象としてCheckpointを作成しました。</p><p>Notebookの全てのセルを実行し、末尾のセルのコメントアウトを外して実行すると、Checkpointが実行されます。Checkpointの実行結果は先程同様に<code>great_expectations/uncommitted/data_docs/local_site/index.html</code>を開いて閲覧できます。</p><p>以下のように、不正な行を1行追加しただけで不合格の項目が増えていることが確認できます。</p><p>このようにしてデータの不正・品質劣化を監視することができます。</p><img src="/images/20230531a/2023-05-10-10-45-19.png" alt="" width="1200" height="923" loading="lazy"><p>以上でCheckpointを実行するまでの流れは終了です。</p><p>上記（3.1.~3.5.）の手順を実行しておけば、今後はCheckpointを実行するだけでバリデーションできます。</p><p>Checkpointの定義はyamlファイルとして保存されており、PythonまたはCLIからAPIを呼び出すだけで何度でも実行することができます。</p><h2 id="4-Tips"><a href="#4-Tips" class="headerlink" title="4. Tips"></a>4. Tips</h2><p>以下はGXの調査検証を進めていくにあたり生じた疑問とその答えをまとめたものです。</p><p>GXの利用を検討しているさいはご参考ください。</p><h3 id="Expectation-Suiteを編集したいときは？"><a href="#Expectation-Suiteを編集したいときは？" class="headerlink" title="Expectation Suiteを編集したいときは？"></a>Expectation Suiteを編集したいときは？</h3><p><code>great_expectations suite edit &lt;編集したいExpectation Suite名&gt;</code>コマンドにより編集できます。</p><p>CLIコマンドによる対話形式で「2. Interactively, with a sample batch of data」の選択肢を選ぶと、Notebook形式のインターフェースでExpectationを一つ一つ編集できます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">great_expectations suite edit exp_suite_test --no-jupyter</span></span><br><span class="line"></span><br><span class="line">How would you like to edit your Expectation Suite?</span><br><span class="line">    1. Manually, without interacting with a sample batch of data (default)</span><br><span class="line">    2. Interactively, with a sample batch of data</span><br><span class="line">: 2</span><br><span class="line"></span><br><span class="line">A batch of data is required to edit the suite - let&#x27;s help you to specify it.</span><br><span class="line"></span><br><span class="line">Select data_connector</span><br><span class="line">    1. default_runtime_data_connector_name</span><br><span class="line">    2. default_inferred_data_connector_name</span><br><span class="line">    3. default_configured_data_connector_name</span><br><span class="line">: 3</span><br><span class="line"></span><br><span class="line">Which data asset (accessible by data connector &quot;default_configured_data_connector_name&quot;) would you like to use?</span><br><span class="line">    1. &lt;テーブル名&gt;</span><br><span class="line"></span><br><span class="line">Type [n] to see the next page or [p] for the previous. When you&#x27;re ready to select an asset, enter the index.</span><br><span class="line">: 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">中略</span></span><br><span class="line"></span><br><span class="line">To continue editing this suite, run jupyter notebook &lt;現在のディレクトリ&gt;/great_expectations/uncommitted/edit_exp_suite_test.ipynb</span><br></pre></td></tr></table></figure><p>JSONファイルを直接編集することもできますが、複雑なため、Notebook形式やPythonのAPI経由で編集することをお勧めします。（<a href="https://docs.greatexpectations.io/docs/guides/expectations/how_to_create_and_edit_expectations_with_instant_feedback_from_a_sample_batch_of_data">公式Docs参考</a>）</p><h3 id="GCPにおける構成例は？"><a href="#GCPにおける構成例は？" class="headerlink" title="GCPにおける構成例は？"></a>GCPにおける構成例は？</h3><p><a href="https://docs.greatexpectations.io/docs/deployment_patterns/how_to_use_great_expectations_with_google_cloud_platform_and_bigquery">公式Docs</a>によると、GCPを利用する場合、以下のような構成で動かす一例が挙げられています。\</p><p>設定のための初回実行はローカル環境で行い、定期実行する際はCloud Composerを利用します。</p><p>また、メタデータやバリデーション結果のドキュメント等はGCSに保存しておきます。</p><p>バリデーション結果のドキュメントはHTML形式なのでGCSのエンドポイントにアクセスして閲覧できる設定をすれば便利そうです。</p><img src="/images/20230531a/2023-05-10-15-59-58.png" alt="" width="1200" height="903" loading="lazy"><p>※<a href="https://docs.greatexpectations.io/docs/deployment_patterns/how_to_use_great_expectations_with_google_cloud_platform_and_bigquery">Great Expectations 公式Docs</a>より画像引用</p><h3 id="Expectationにはどんな種類があるか？"><a href="#Expectationにはどんな種類があるか？" class="headerlink" title="Expectationにはどんな種類があるか？"></a>Expectationにはどんな種類があるか？</h3><p>多すぎて把握出来ていませんが、<a href="https://greatexpectations.io/expectations/">公式コミュニティ</a>に既存のExpectationsが300個以上あります。</p><p>Expectationを自作することも可能であり、カスタマイズ性は非常に高いです。（<a href="https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/overview">公式Docs参考</a>）</p><h2 id="5-おわりに"><a href="#5-おわりに" class="headerlink" title="5. おわりに"></a>5. おわりに</h2><p>今回は、Great Expectations（GX）を利用してBigQueryのデータ品質を監視する簡単な流れを紹介をしました。</p><p>GXには様々な機能や拡張性を備えており、様々なユースケースにカスタマイズすることができます。</p><p>本記事が読者の皆様のご参考になれば幸いです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;1-はじめに&quot;&gt;&lt;a href=&quot;#1-はじめに&quot; class=&quot;headerlink&quot; title=&quot;1. はじめに&quot;&gt;&lt;/a&gt;1. はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、フューチャーでアルバイトをしている板野です。&lt;/p&gt;
&lt;p&gt;Great</summary>
        
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="BigQuery" scheme="https://future-architect.github.io/tags/BigQuery/"/>
    
    <category term="AI監視" scheme="https://future-architect.github.io/tags/AI%E7%9B%A3%E8%A6%96/"/>
    
    <category term="GreatExpectations" scheme="https://future-architect.github.io/tags/GreatExpectations/"/>
    
  </entry>
  
  <entry>
    <title>管理画面等でNext.jsをBetter Reactとして使う</title>
    <link href="https://future-architect.github.io/articles/20230530a/"/>
    <id>https://future-architect.github.io/articles/20230530a/</id>
    <published>2023-05-29T15:00:00.000Z</published>
    <updated>2023-05-30T02:19:55.845Z</updated>
    
    <content type="html"><![CDATA[<p>最近、Next.jsが複雑になりすぎて、単なるウェブ画面を作る用途にはNext.jsは重すぎるので別のものが良いとか、Vercel統合のための機能が多いんでしょ、みたいな感想を見かけることが増えた気がします。特に管理画面とか社内システムとかですね。B2Cでも設定画面系とかは当てはまるかもしれません。</p><p>ホンダ時代に、タイプRを買っても実際にサーキットとかに走らせに行く人は1&#x2F;10ぐらい、という話を聞いた気がしますが、必ずしも、そのすべてのパフォーマンスを引き出さないのはダメとかなくて、単にかっこいいからとか、一部のメリットでも自分にあえば良いのです。</p><p>Next.jsも、たくさん機能がありますが、ミニマムな使い方もできます。</p><h2 id="ほぼNext-jsの機能をオフにした使い方"><a href="#ほぼNext-jsの機能をオフにした使い方" class="headerlink" title="ほぼNext.jsの機能をオフにした使い方"></a>ほぼNext.jsの機能をオフにした使い方</h2><p>たぶんNext.jsを最低限で使うライン・メリットはここかな、と思います。</p><ul><li>基本的に全部CSR(Client Side Rendering)で普通のReactっぽく使う<ul><li>Routerがあらかじめ組み込まれている</li></ul></li><li>超高速なビルドツール群が組み込み済み</li><li><a href="https://github.com/vercel/next.js/tree/canary/examples">広く使われるライブラリ群との組み合わせ</a>がテスト済み</li></ul><p>そのためにやるのは</p><ul><li>API機能を使わずに別に実装済みのAPIサーバーにフロントエンドからリクエストを投げられるようにする　</li><li>静的HTMLとしてビルドできるようにする</li></ul><p>の2つです。</p><h3 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-next-app</span><br><span class="line">✔ What is your project named? … simple-next</span><br><span class="line">✔ Would you like to use TypeScript with this project? … No / [Yes]</span><br><span class="line">✔ Would you like to use ESLint with this project? … No / [Yes]</span><br><span class="line">✔ Would you like to use Tailwind CSS with this project? … No / [Yes]</span><br><span class="line">✔ Would you like to use `src/` directory with this project? … [No] / Yes</span><br><span class="line">✔ Use App Router (recommended)? … No / [Yes]</span><br><span class="line">✔ Would you like to customize the default import <span class="built_in">alias</span>? … No / Yes</span><br></pre></td></tr></table></figure><p>今時はTypeScripは使うだろうし、ESLintも使うだろうから、Enter連打しておけば大丈夫です。ぼくはTailwind.CSSも使うのでこれが最初から選べるのはうれしいですね。</p><h3 id="リバースプロキシ設定"><a href="#リバースプロキシ設定" class="headerlink" title="リバースプロキシ設定"></a>リバースプロキシ設定</h3><p>API機能を使わないということは別にGoなりJavaなりでAPIサーバーがいるはずですので、そちらにフォワードするように設定を書き換えます。</p><figure class="highlight js"><figcaption><span>next.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;next&#x27;).NextConfig</span>&#125; */</span></span><br><span class="line"><span class="keyword">const</span> nextConfig = &#123;</span><br><span class="line">    <span class="title function_">rewrites</span>(<span class="params"></span>) &#123; <span class="comment">// このメソッドを足す</span></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">source</span>: <span class="string">&quot;/api/:path*&quot;</span>,</span><br><span class="line">                <span class="attr">destination</span>: <span class="string">&quot;http://localhost:8000/api/:path*&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = nextConfig</span><br></pre></td></tr></table></figure><p>別に立ってるAPIサーバーのエミュレーションのために、以下のようなファイルを作ってからプロジェクトのルートで <code>python3 -m &quot;http.server&quot;</code> と実行して8000番でウェブサーバーを立ててみます。</p><figure class="highlight json"><figcaption><span>/api/dummy.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hello&quot;</span><span class="punctuation">:</span> <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>これで、Next.jsの3000番ポートの特定のリクエストはフォワードされるようになります。<code>/api</code>へのリクエストはバックエンドサーバーに直接行くので、API機能は触る必要はありません。もちろん、最初から別のポートにフロントからリクエストを飛ばす方法もありますが、こちらの方が同一ドメインなので、CORSも不要です。また実際にデプロイするときも同一ドメインであれば追加の設定とかも不要で楽ですよね。</p><img src="/images/20230530a/スクリーンショット_2023-05-12_9.52.44.png" alt="" width="884" height="487" loading="lazy"><p>こんな感じの動きになります。</p><img src="/images/20230530a/名称未設定ファイル-ページ1.drawio.png" alt="" width="551" height="101" loading="lazy"><h3 id="データ取得の実装"><a href="#データ取得の実装" class="headerlink" title="データ取得の実装"></a>データ取得の実装</h3><p>データ取得は<a href="https://nextjs.org/docs/pages/api-reference/functions/get-initial-props">getInitialProps()</a>とか、<a href="https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props">getServerSideProps()</a>とか、<a href="https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props">getStaticProps()</a>を使わずに、コンポーネントの中から行います。</p><p><code>useEffect()</code>を使って、その中で<code>fetch</code>を使ったり、<a href="https://swr.vercel.app/ja">useSWR()</a>を使ったり。まあ、データ取得のこの方法は新しいapp routerでは標準なので、新規システムの場合は最初からこちらで行っていけば良いです。</p><h3 id="静的生成"><a href="#静的生成" class="headerlink" title="静的生成"></a>静的生成</h3><p>最後に静的生成です。昔はnext buildを実行してからnext exportをすれば生成されていましたが、今は<code>output: &#39;export&#39;</code>を足すという感じで変わっています。ただ、これだとexportで使えないはずの機能をチェックするエラーチェックでひっかかってしまいます。というのも、rewritesはサーバーがある前提の機能だからです。</p><figure class="highlight js"><figcaption><span>next.config.js(これだとエラーになる)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nextConfig = &#123;</span><br><span class="line">    <span class="attr">output</span>: <span class="string">&#x27;export&#x27;</span>, <span class="comment">// これを足す</span></span><br><span class="line">    <span class="title function_">rewrites</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちょっとトリッキーな方法ですが、ビルド時は<code>rewrite()</code>をなくして<code>export</code>にするような設定にすれば両立できます。</p><figure class="highlight js"><figcaption><span>next.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = process.<span class="property">env</span>.<span class="property">npm_lifecycle_event</span> === <span class="string">&#x27;build&#x27;</span> ? &#123;</span><br><span class="line">    <span class="attr">output</span>: <span class="string">&#x27;export&#x27;</span></span><br><span class="line">&#125; : nextConfig</span><br></pre></td></tr></table></figure><p>本番ではおそらくLBなどが前段にたっていて、特定のパス（<code>/api</code>など）以下はAPIサーバーにフォワードし、そうでない場合はオブジェクトストレージにフォワード。ただし、404なら<code>index.html</code>にフォールバック、みたいな感じにすればNode.jsのサーバーなしにNext.jsアプリケーションがデプロイできます。</p><img src="/images/20230530a/名称未設定ファイル-ページ2.drawio.png" alt="名称未設定ファイル-ページ2.drawio.png" width="511" height="216" loading="lazy"><p>これでミニマムなNext.jsができました。</p><h2 id="追加の機能のオプトイン"><a href="#追加の機能のオプトイン" class="headerlink" title="追加の機能のオプトイン"></a>追加の機能のオプトイン</h2><p>Next.jsのいくつかの機能は、ニーズに当てはまるのであれば有効化していく、という感じでオプトインしていくとよいでしょう。</p><h3 id="静的生成-SSG-x2F-ISG"><a href="#静的生成-SSG-x2F-ISG" class="headerlink" title="静的生成(SSG&#x2F;ISG)"></a>静的生成(SSG&#x2F;ISG)</h3><p>ISG(Incremental Static Generation)とかSSG(Static Site Generation)がうれしいのは読み手が多くて書き手が少ないコンテンツ、例えばニュースサイトとかブログとかですね。キャッシュを使う仕組みの場合、どうしても性能を上げるにはキャッシュヒット率が大事になりますが、キャッシュで済ましてはいけない新しいコンテンツでもキャッシュが使われると更新されない内容が表示されますし、Revalidate戦略を使うと、結局何度もコンテンツ生成ロジックが実行されることになります。閲覧数と更新頻度の比率がどれだけ偏りがあるかで判断すれば良いと思います。</p><h3 id="サーバー側の生成-SSR"><a href="#サーバー側の生成-SSR" class="headerlink" title="サーバー側の生成(SSR)"></a>サーバー側の生成(SSR)</h3><p>画面表示にたくさんのデータ取得が必要だけど、集計したり、一部のカラムだけ抜き出すとかaggregationしちゃうから、実際に画面から使われるデータ自体は多くないよ、みたいなケースではSSR(Server Side Rendering)がうれしいですね。もちろん、SSRだけが回答ではなく、データのフィルタリングがきちんとAPI側に組み込まれていたら、実際は不要にできるかもしれません。</p><p>あと、画面表示には大量のJavaScriptのロジックが必要だけど、実際に表示はそこまで複雑ではない、みたいなケースだと、React Server Component機能が効くと思います。ぼくもまだ仕事では使ったことがないですが・・・まあこれがうまく性能を出してくれるケースがどれだけあるのか、というのはあるかと思います。社内システムなんかの場合は通信速度が問題になることは少ないと思うので、JSのファイルのダウンロードを無理に早くする必要もないと思いますし。</p><p>あとは、社内システムでもスクレイピングしたりRPAしたい、というケースだともしかしたらSSRをしておいた方が良いというのもあるかもしれませんが、基本的にネガティブな動機だと思うので、そういう目的の場合はAPIでアクセスして！って言う方が良いと思います。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">NoCodeとか、RPAって「エンジニアという気持ち悪い生き物と話をしたくない」という需要がそれなりにある気がしているんだよね</p>&mdash; ところてん (@tokoroten) <a href="https://twitter.com/tokoroten/status/1288688668484362240?ref_src=twsrc%5Etfw">July 30, 2020</a></blockquote><h3 id="API機能"><a href="#API機能" class="headerlink" title="API機能"></a>API機能</h3><p>既存のサービスへリクエストを投げてそれをただ返すだけであれば魅力はないと思います。</p><ol><li>クレデンシャルをフロントエンドに露出させないでサーバー側の中だけで持つ</li><li>バックエンドサーバーのレスポンスの形式がフロントエンドに嬉しくないので整形したい</li><li>バックエンドサーバーが複数あるので、BaaSというか、BFF(backend for frontend)として動かしたい</li></ol><p>今まではデータ通信を<code>getInitialProps()</code>でまとめることで、ページ表示のタイミングにまとめて行うことで、画面が白くなる時間を減らす、という効果もありましたが、ap routerが入って、別々のコンポーネントから投げられる重複した余計な通信はまとめられる、みたいな最適化が13で入ったので、パフォーマンス目的で入れる必要性はなくなったと思います。</p><p>もちろん、DBアクセスとかをNode.jsを使って、API機能を使ってやりきるのであれば、Node.jsのサーバーをデプロイする必要がありますがAPI機能を使うのが一番簡単でしょう。</p><h2 id="それでもNext-js以外を選択するケース"><a href="#それでもNext-js以外を選択するケース" class="headerlink" title="それでもNext.js以外を選択するケース"></a>それでもNext.js以外を選択するケース</h2><p>ぼくがNext.jsをあえて使わずにコードを書くのは、Routerすらないようなシンプルなサンプルプログラム程度の場合が多いですね。その場合も、create-next-appではなく、vite.jsのReactテンプレートで作ります。TypeScriptも最初から入って、ビルドもそこそこ高速でホットリロードもできて、十分です。</p><p>ただ、仕事で作るシステムであれば、どんなに小さくてもRouterも必要になるでしょうし、swcとかTurbopackとかどんどん新しいものが導入されてるNext.jsの方が良いかな、と思います。</p><p>あとは、ビルドサイズが小さいというところでSolid.jsとかSvelteとかは触ったりもしますが、基本的に大きなものを作るときはNext.jsでいいかな、と思っています(Vue.jsを選ぶ時以外)。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Next.jsはeasyであるがsimpleではないというのを地でいく発展をしています。内部ではかなり複雑なことをやってくれています。とはいえ、裏の仕組みが表に出てこないようにかなり気を遣って開発されているため、ドキュメントに書かれている表の機能だけを見ておけば良い安心感があります。正規表現を使うのに、正規表現エンジンのコードを読んだりする人は少ない（ゼロとは言わないですが）のと同じように、Next.jsの中の実装を確認しにいく必要性というのは業務で使っていてもあまり感じないです。GoとかTypeScriptの処理系の方が読んだぐらい。なので、Next.jsの表だけ見て簡単な機能だけを使うのはありだと思います。そのためにも、Next.jsを使うにあたっては、自分のユースケースにマッチした機能の選択が大事になります。1つの機能を実現するための手段がいくつかありますからね。ミニマムなNext.jsの機能から始めて、必要になったら徐々にNext.jsの機能を有効化していく、というのが一番良いなと感じています。</p><p>機能追加も活発にされているように見えるのですが、ずっと追いかけてきた立場から見ると、「よりeasyであろう」としているように思えます。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Next.js、いろいろ複雑に見えているけど、今ベータの機能が安定化するとかなり簡単になると思うのだよな。どこのコンポーネントからも自由にサーバーアクセス。裏で勝手にまとめて最適化するよ、とか。フォルダ構成もページ関連のコンポーネントを集めておけるようになる。</p>&mdash; 渋川よしき (@shibu_jp) <a href="https://twitter.com/shibu_jp/status/1652864447894138880?ref_src=twsrc%5Etfw">May 1, 2023</a></blockquote><p>app routerになると、PureなReactにはない、Next.js固有のルールというのは減ります。Reactを学んだ人が、追加で学ぶことも減ります。</p><p>ちょっと前にclassmethodさんの<a href="https://dev.classmethod.jp/articles/complete-nextjs-tutorial/">Next.jsのブログエントリー</a>も出てましたが、app routerでいらなくなる部分とかを省いたり、最初から設定されているTailwind CSSを前提にしていけばさらに半分ぐらいになるんじゃないかと思います。なので、怖がらなくてもいいし、複雑だからと避ける必要もないな、と思っています。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Next.jsの新機能がぱっと見理解できなくても、自分が考えてなかった新しい発想を元にしているかもだし「Next.jsは難しすぎるオワコン」と投げ捨てずについて行くことで見える世界があるだろうし、投資というのは常に先を見ているはずなので、みんな脊髄反射せずに実写の聖闘士星矢見に行こうぜ。</p>&mdash; 渋川よしき (@shibu_jp) <a href="https://twitter.com/shibu_jp/status/1655383901186195456?ref_src=twsrc%5Etfw">May 8, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近、Next.jsが複雑になりすぎて、単なるウェブ画面を作る用途にはNext.jsは重すぎるので別のものが良いとか、Vercel統合のための機能が多いんでしょ、みたいな感想を見かけることが増えた気がします。特に管理画面とか社内システムとかですね。B2Cでも設定画面系とかは</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
    <category term="Next.js" scheme="https://future-architect.github.io/tags/Next-js/"/>
    
  </entry>
  
  <entry>
    <title>書籍紹介：大規模データ管理(エンタープライズアーキテクチャのベストプラクティス)</title>
    <link href="https://future-architect.github.io/articles/20230529a/"/>
    <id>https://future-architect.github.io/articles/20230529a/</id>
    <published>2023-05-28T15:00:00.000Z</published>
    <updated>2023-06-11T06:27:15.419Z</updated>
    
    <content type="html"><![CDATA[<p>最近読んだ書籍の中で非常に良質な内容でしたので紹介したいと思います。少しでも多くの方に興味を持ってもらえることを期待しています。</p><img src="/images/20230529a/book_datamanagement_at_scale.jpeg" alt="" width="516" height="660" loading="lazy"><p><a href="https://www.oreilly.co.jp/books/9784814400089/">O’Reilly Japan</a></p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>私自身がデータ管理（データマネージメント）という観点でここ数年様々な検討を行ってきていますので前提としてその背景について簡単にまとめてみます。</p><p>かつてオンプレミスで運用を行っていた時は企業内のデータは完全に管理されていました。データウェアハウスを導入してデータの集約・加工は行われていましたが、専門チームがデータ仕様確認やデータ提供までもすべての責任を担っていました。品質は高いのですが利用者からの要望（新しいデータの提供、仕様の変更）の対応についてはスピード大きな制約がありました。また大規模なデータを扱うためには多大なコストが必要という制約もあります。</p><p>クラウド技術による「スモールスタートを可能とするインフラ」「大規模なデータを扱うための適切な技術要素」を利用して一気にクラウドアーキテクチャの利用が増えました。クラウドベンダからの積極的な情報展開もあってデータ基盤としてデータレイクアーキテクチャを利用するという考えが普及した感があります。データレイクではデータを集中して管理するのではなく、利用者が自分たちで自由に安全に利用できるための基盤を整備するという考え方です。</p><p>これによりDX化のスピード要求に答えることができてめでたしと思いたいところですが、発展的、継続的に利用ができるのかという点については課題があります。多くの場合「生データそのまま配置しておくので利用者（システム）が自由に使ってください」というアプローチですが、それだけだと「誰（チーム）がそのデータに責任を持つのか」というものが不明確になりがちです。ここがあいまいだとビジネスの変化（データの変化）が発生した際に、データ利用者が追従していくことが難しく足かせになることが容易に想像できます。関係者が少人数であれば密なコミュニケーションが可能なため「データ集めておいたのでご自由にどうぞ」というのは成立しますが、関係者が増えていくとそれは難しくなります。</p><p>クラウド前、クラウド後という環境の変化に関するこれらの背景は本書の1章「データ管理の崩壊」でも触れられています。この点の問題意識は私の感覚に非常に近いものがあります。</p><p>本書では共通基盤としてのデータレイクプロジェクトの6割が失敗してしまうという言葉が引用されていますが、あながち間違いでもないかもしれません。</p><h2 id="エンタープライズアーキテクチャのベストプラクティス"><a href="#エンタープライズアーキテクチャのベストプラクティス" class="headerlink" title="エンタープライズアーキテクチャのベストプラクティス"></a>エンタープライズアーキテクチャのベストプラクティス</h2><p>本書のサブタイトルである「エンタープライズアーキテクチャのベストプラクティス」で目指すものは一言でいうと以下です。</p><blockquote><p>すべてのデータを1つのサイロに集めるのではなく、ユーザーが自分たちで簡単かつ安全にデータを流通、利用、活用できるような方法に移行する</p></blockquote><p>これを実現するためのデータ管理についてのフレーム（知識体系）については、DAMA(Data Management Association) によって、DMBOK(Data Management Body of Knowledge)があります。DAMAホイール図として11個の知識体系が示されていてその図は見たことがある方も多いのではないかと思います。</p><img src="/images/20230529a/DMBOK2_Wheel.PNG" alt="DMBOK2_Wheel.PNG" width="383" height="403" loading="lazy"><p><a href="https://www.dama.org/cpages/dmbok-2-wheel-images">The Global Data Management Community</a></p><p>本書もそのフレームは活用して議論が展開されていますが、DAMAホイール図の項目についてなぞっているだけの内容にはなっていません。DMBOKについてはデータ基盤を整備するエンジニアにとってはとらえどころのない話が多く、理解が難しいのが実情ではないかと思われます。ついついモノづくりが先行してしまい今見えている課題（やりたいこと）だけの個別最適化となる例が多いように思われます。</p><p>本書では、「データ統合と相互運用性(Data Integration &amp; Interoperability)」にかなりの重点（むしろそこがメインとして）をおいて記載されています。</p><ul><li>データ統合<br>3つのアーキテクチャの活用について紹介されています<ul><li>RDS(Read-Only Data Store)アーキテクチャ</li><li>APIアーキテクチャ</li><li>ストリーミングアーキテクチャ</li></ul></li><li>相互運用性<br>データ提供側からデータ利用側の一連のフローの中ででどこを責任範疇とするのかという責任分界点についての解説</li></ul><p>データ統合はクラウドアーキテクチャをベースとした概要の解説となります。論理モデルの解説で具体的なプロダクトについては本書では深く触れられていません。こちらは様々な資料もネット上で公開されているのでデータ連携に携わった人であれば改めて確認する必要はないかもしれません。ここでの紹介は省略します。</p><h2 id="データの相互運用性"><a href="#データの相互運用性" class="headerlink" title="データの相互運用性"></a>データの相互運用性</h2><p>本書の一番の読みどころは2つ目の「相互運用性」についての解説であると考えます。「誰がそのデータに責任を持つのか」というデータの責任範囲（境界）についての考察です。</p><p>本書で紹介されている概念図を1枚だけ引用させてもらいます。（少し改変しています）<br>データレイヤはデータ流通を行う要素となる、RDS(Read-Only Data Store)、API基盤、メッセージング基盤、その組み合わせを包含するもので、論理的なものを表しています。</p><img src="/images/20230529a/data_Interoperability.PNG" alt="data_Interoperability.PNG" width="585" height="335" loading="lazy"><p>ここでのポイントは2つです。</p><ul><li>データの流通はデータレイヤを通じて行われる</li><li>データ提供チーム（すなわちオリジナルデータの所有者）は データレイヤを通じてデータ利用側に渡すところまで責任を持つ</li></ul><p>本書はこれらを基本原則として、一貫性をもってまとめられています。</p><p>この考えはある意味当たり前という印象を受けるかもしれませんが、現実の場面であいまいになりがちな「データはだれが管理すべきか」という点を重視してアーキテクチャ設計の基本原則に組み入れる形で紹介してくれている点が本書の優れた点であると考えます。</p><p>本書ではDDD（ドメイン駆動設計）の概念を引用して説明しています。アプリケーションの境界（ドメイン）を明確に（強制的に）定義するのと同じく、データについても責任範囲を明確化してガバナンスの基本方針とします。具体的はデータ提供チームがデータ利用チームが利用しやすいようにデータを提供するところまでが責任範囲として定義するという考え方です。データを提供する手段（アーキテクチャ）はデータ要件により決定すれば良いのですが、提供内容（利用しやすいデータモデル、データ仕様）についても責任を持つことになります（責任を持つのはデータ基盤の整備チームでもデータを利用するチームではないということです）。データレイヤを通じてデータを流通させますが、データレイヤの具体的な実装は責任範囲に従い厳密に分離します。</p><p>データ基盤におけるアーキテクチャ設計をするにあたってデータマネージメント（ データの相互運用性）方針が重要であるということが腹に落ちるのではないかと思います。現実の場面においては、個別の事情や実態に合わせた考え方が当然必要にはなるのですが、方針検討において参考になるはずです。</p><p>しみじみとする文を引用しておきます。</p><ul><li>「このような中央機能を構築するためには、個々のチームが統合パターンやツールに関する決定権を放棄する必要があります。これには抵抗があるでしょう。社内政治的な選択が必要になるかもしれません。」</li><li>「このようなデータランドスケープの近代化には、現実的なアプローチが必要です。なぜなら、密結合されたランドスケープからの移行は非常に難しいからです。単純なデータフローから小さく始めて、徐々に拡大していくことでドメインやユーザーはメリットを意識し、組織の競争力を高める新しいアーキテクチャに貢献したいと考えるようになります。」</li><li>「データサービスを自分たちで導入し、データサイロを他のサービスで置き換えるだけのチームは「データスプロール（補足：無計画なデータ量とその種類の広がり）」のリスクを抱えるようになります。」</li><li>「スケールアップのためには絶え間ないコミュニケーション、貢献、そして強力なデータガバナンスが必要です。」</li></ul><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>本書はタイトルの「大規模データ管理(エンタープライズアーキテクチャのベストプラクティス)」あるように、システムアーキテクチャではなく、エンタープライズ領域のデータマネージメントについて本質的な話をまとめてくれている良書です。</p><p>以下のようなDAMAホイール図にあるデータマネージメントの一通りについても（エンジニア目線で）紹介されています。</p><ul><li>データガバナンス</li><li>データセキュリティ</li><li>データの価値化（データ利用）</li><li>マスタデータ管理(MDM)</li><li>メタデータの活用</li></ul><p>データマネージメントについて自分のかかわっているプロジェクトにあてはめて思考してみるのも有意義ではないかと思います。ただしあくまでも参考文献なので自分自身での解釈が必要であるという点は忘れなく。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近読んだ書籍の中で非常に良質な内容でしたので紹介したいと思います。少しでも多くの方に興味を持ってもらえることを期待しています。&lt;/p&gt;
&lt;img src=&quot;/images/20230529a/book_datamanagement_at_scale.jpeg&quot;</summary>
        
      
    
    
    
    <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
    <category term="データマネージメント" scheme="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88/"/>
    
  </entry>
  
</feed>
