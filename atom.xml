<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  <icon>https://future-architect.github.io/feed_icon.png</icon>
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2024-03-28T06:42:21.025Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Terraformでのループ処理と条件分岐</title>
    <link href="https://future-architect.github.io/articles/20240328b/"/>
    <id>https://future-architect.github.io/articles/20240328b/</id>
    <published>2024-03-27T15:00:01.000Z</published>
    <updated>2024-03-28T06:42:21.025Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20240328b/top.png" alt="" width="800" height="527"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>はじめまして！TIG DXチームの小林と申します。</p><p>Terraformでは似たリソースを複数構築する際に、ループ処理や条件分岐を利用することで、コードの冗長化を防ぎ、可読性や保守性を上げることができます。</p><p>私自身まだTerraform歴半年ですが、初心者目線で「Terraformのコードをスマートに書きたい！」というモチベーションのもと本記事を書きました。</p><h2 id="サマリ"><a href="#サマリ" class="headerlink" title="サマリ"></a>サマリ</h2><h3 id="ループ処理"><a href="#ループ処理" class="headerlink" title="ループ処理"></a>ループ処理</h3><div class="scroll"><table><thead><tr><th>方法</th><th>分類</th><th>主な用途（個人的なイメージ）</th></tr></thead><tbody><tr><td><a href="https://developer.hashicorp.com/terraform/language/meta-arguments/count">count</a></td><td>メタ引数</td><td>・開発や検証用などで簡単なリソースを複数個作りたい場合 <br> ・将来的に数が増減しないようなリソースを作る場合</td></tr><tr><td><a href="https://developer.hashicorp.com/terraform/language/meta-arguments/for_each">for_each</a></td><td>メタ引数</td><td>・ループ処理で複数リソースを作りたい場合は基本こちら</td></tr><tr><td><a href="https://developer.hashicorp.com/terraform/language/expressions/for">for</a></td><td>式</td><td>・フィルタリング機能を利用して条件によってリソース構築を制御したい場合 <br> ・既存の設定値や構築済リソースから任意のリストやマップを取得したい場合 <br> ・その他使ったら幸せになれる場合</td></tr><tr><td><a href="https://developer.hashicorp.com/terraform/language/expressions/dynamic-blocks">dynamic block</a></td><td>式</td><td>・resource block内で同一のブロックを複数定義する場合 <br> ・可読性や保守性が落ちないことが明確な場合</td></tr></tbody></table></div><h3 id="条件分岐"><a href="#条件分岐" class="headerlink" title="条件分岐"></a>条件分岐</h3><div class="scroll"><table><thead><tr><th>方法</th><th>分類</th><th>主な用途（個人的なイメージ）</th></tr></thead><tbody><tr><td><a href="https://developer.hashicorp.com/terraform/language/expressions/conditionals">三項演算子</a></td><td>式</td><td>・条件分岐を行いたい場合は基本こちら</td></tr><tr><td><a href="https://developer.hashicorp.com/terraform/language/meta-arguments/for_each">for_each</a> と <a href="https://developer.hashicorp.com/terraform/language/expressions/for">for</a> を併用</td><td>-</td><td>・forループ内の要素の特定条件でリソースを作り分ける場合</td></tr></tbody></table></div><h2 id="構築するリソース（ベース）"><a href="#構築するリソース（ベース）" class="headerlink" title="構築するリソース（ベース）"></a>構築するリソース（ベース）</h2><p>本記事で構築するリソースはこちらです。</p><p>AWS上に10.10.0.0&#x2F;16 のVPC1つと、10.10.0.0&#x2F;24 ～ 10.10.3.0&#x2F;24 でサブネットを計4つ（public2つ、private2個想定）を各パターンで作成していきます。</p><p>まずはベースとして、シンプルにresource blockを羅列したものを記載しています。<br>（以降、サブネット部分の処理がメインのため、VPC部分の記述は省略します。）</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_vpc&quot;</span> <span class="string">&quot;test-vpc&quot;</span> &#123;</span><br><span class="line">  cidr_block        = <span class="string">&quot;10.10.0.0/16&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;public-1&quot;</span> &#123;</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, 0)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;public-2&quot;</span> &#123;</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, 1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;private-1&quot;</span> &#123;</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, 2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;private-2&quot;</span> &#123;</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, 3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://developer.hashicorp.com/terraform/language/functions/cidrsubnet">cidrsubnet</a></p><h2 id="ループ処理-count"><a href="#ループ処理-count" class="headerlink" title="ループ処理(count)"></a>ループ処理(count)</h2><p><code>count</code>を利用すると、このように書くことができます。</p><p><code>count = x</code>とカウント回数を定義し、<code>count.index</code> で0からx回カウントアップする引数を指定できます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;public&quot;</span> &#123;</span><br><span class="line">  count             = 2</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, count.index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;private&quot;</span> &#123;</span><br><span class="line">  count             = 2</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, count.index + 2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>publicとprivateの区別が無ければ、<code>count = 4</code>としてresource blockを1つで全サブネットを構築可能ですが、可読性や保守性が落ちるため分けています。</p><p>さて、ここでpublicのサブネットを1つ増やしたくなった場合はどうすれば良いでしょうか。</p><p>簡単な話ではありますが、以下のように<code>count</code>の値を3に修正することで、増やすことができます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;public&quot;</span> &#123;</span><br><span class="line">  count             = 3</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, count.index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;private&quot;</span> &#123;</span><br><span class="line">  count             = 2</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, count.index + 3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>しれっと修正しましたが、privateの方の <code>count.index + 2</code>も<code>count.index + 3</code>としています。</p><p>これを忘れると、以下のようなCIDRブロックのコンフリクトエラーが起きます。</p><blockquote><p>Error: creating EC2 Subnet: InvalidSubnet.Conflict: The CIDR ‘10.10.2.0&#x2F;24’ conflicts with another subnet </p></blockquote><p>countの使いづらいところは主にここだと思っています。数を増減させたいときに<code>count.index</code>の値の変動がどこまで影響するか、大規模や複雑なリソースでは把握が難しく、保守性が低下します。</p><p>また、<code>index</code>とあるように、<code>count</code>を利用して構築したリソースは配列として管理されます。</p><p>tfstateを覗いてみると、<code>index_key</code>というキーの値が0や1などの数値で存在します。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;managed&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;aws_subnet&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;provider[\&quot;registry.terraform.io/hashicorp/aws\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;instances&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;index_key&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">（後略）</span><br></pre></td></tr></table></figure><p>これは、<code>index</code>の途中（↑のpublicサブネットで言うと<code>count.index</code>が1のサブネット）が削除された場合に、その後のリソースが全て作り直しになることを意味します。</p><p>ここも<code>count</code>の不便なところで、将来的に数が増減するようなリソースを構築する際は向いていません。</p><h2 id="ループ処理-for-each"><a href="#ループ処理-for-each" class="headerlink" title="ループ処理(for_each)"></a>ループ処理(for_each)</h2><p><code>count</code>の不便なところを解決したのが<code>for_each</code>だと思います。</p><p><code>for_each</code>を使うと以下のように書くことができます。</p><p><a href="https://developer.hashicorp.com/terraform/language/expressions/type-constraints#set">set</a>や<a href="https://developer.hashicorp.com/terraform/language/expressions/type-constraints#map">map</a>を定義して、その要素の数だけリソースを構築することができます。</p><p>setやmapの値は<code>each.key</code>（setの値やmapのkey）や<code>each.value</code>（setの値やmapのvalue）を使って各変数に定義できます。（＝setを使う場合は<code>each.key</code>と<code>each.value</code>は同じになります。）</p><p>mapが多重構造になっている場合は、以下のように<code>each.value.xxx</code>と書くことで変数に定義できます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;subnet&quot;</span> &#123;</span><br><span class="line">  for_each = tomap(&#123;</span><br><span class="line">    public-1a = &#123;</span><br><span class="line">      az     = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">      netnum = 0</span><br><span class="line">    &#125;,</span><br><span class="line">    public-1c = &#123;</span><br><span class="line">      az     = <span class="string">&quot;ap-northeast-1c&quot;</span></span><br><span class="line">      netnum = 1</span><br><span class="line">    &#125;,</span><br><span class="line">    private-1a = &#123;</span><br><span class="line">      az     = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">      netnum = 2</span><br><span class="line">    &#125;,</span><br><span class="line">    private-1c = &#123;</span><br><span class="line">      az     = <span class="string">&quot;ap-northeast-1c&quot;</span></span><br><span class="line">      netnum = 3</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = each.value.az</span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, each.value.netnum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可読性も比較的保たれたまま、resource blockを1つで書くことができました！</p><p>もちろん、publicとprivateでresource blockを分けても良いです。<code>count</code>と違い、リソースを増減させたい場合はmapに要素を追加するだけで良く、かつkeyで管理されているので既存のリソースに影響が及びません。</p><p>また<code>for_each</code>は複数の属性をループで回せて便利なので、<code>az</code>もループに含めてマルチAZ構成も実現しています。</p><h2 id="ループ処理-for"><a href="#ループ処理-for" class="headerlink" title="ループ処理(for)"></a>ループ処理(for)</h2><p>後述する<code>dynamic block</code>も同様ですが、<code>count</code>や<code>for_each</code>と違って<code>for</code>は「式」です。誤解を恐れず簡単に言うと、そもそもリソースを複数作るためのものではないということです。</p><p>具体的には、<code>for</code>は<a href="https://developer.hashicorp.com/terraform/language/expressions/type-constraints#list">list</a>, <a href="https://developer.hashicorp.com/terraform/language/expressions/type-constraints#set">set</a>, <a href="https://developer.hashicorp.com/terraform/language/expressions/type-constraints#tuple">tuple</a>, <a href="https://developer.hashicorp.com/terraform/language/expressions/type-constraints#map">map</a>, <a href="https://developer.hashicorp.com/terraform/language/expressions/type-constraints#object">object</a>を入力として、<a href="https://developer.hashicorp.com/terraform/language/expressions/type-constraints#tuple">tuple</a>もしくは<a href="https://developer.hashicorp.com/terraform/language/expressions/type-constraints#object">object</a>を出力するものです。そのため使い方は多様ですが、個人的に嬉しい使い方を2つ記載します。</p><h3 id="使い方①-特定条件でフィルタリングしてリソースを構築する"><a href="#使い方①-特定条件でフィルタリングしてリソースを構築する" class="headerlink" title="使い方① 特定条件でフィルタリングしてリソースを構築する"></a>使い方① 特定条件でフィルタリングしてリソースを構築する</h3><p>構築するリソースが増えてくると、tfファイルの数やコードの行数が多くなって管理が大変でしょう。</p><p>そんな時は<code>local values</code>に各設定値を一元的に記載しておくと管理しやすくなるかもしれません。</p><p>以下の例は無理やり<code>for</code>を使いに行ってるので良い例ではありませんが、<code>local values</code>に条件となる値を設定しておき、resource blockではその条件によって構築や設定をするかを振り分ける、ということが可能です。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  subnet = &#123;</span><br><span class="line">    public-1a = &#123;</span><br><span class="line">      public = <span class="literal">true</span></span><br><span class="line">      az     = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">      netnum = 0</span><br><span class="line">    &#125;,</span><br><span class="line">    public-1c = &#123;</span><br><span class="line">      public = <span class="literal">true</span></span><br><span class="line">      az     = <span class="string">&quot;ap-northeast-1c&quot;</span></span><br><span class="line">      netnum = 1</span><br><span class="line">    &#125;,</span><br><span class="line">    private-1a = &#123;</span><br><span class="line">      public = <span class="literal">false</span></span><br><span class="line">      az     = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">      netnum = 3</span><br><span class="line">    &#125;,</span><br><span class="line">    private-1c = &#123;</span><br><span class="line">      public = <span class="literal">false</span></span><br><span class="line">      az     = <span class="string">&quot;ap-northeast-1c&quot;</span></span><br><span class="line">      netnum = 4</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;public&quot;</span> &#123;</span><br><span class="line">  for_each          = &#123; <span class="keyword">for</span> key, value <span class="keyword">in</span> local.subnet : key =&gt; value <span class="keyword">if</span> value.public == <span class="literal">true</span> &#125;</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = each.value.az</span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, each.value.netnum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;private&quot;</span> &#123;</span><br><span class="line">  for_each          = &#123; <span class="keyword">for</span> key, value <span class="keyword">in</span> local.subnet : key =&gt; value <span class="keyword">if</span> value.public == <span class="literal">false</span> &#125;</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = each.value.az</span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, each.value.netnum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://developer.hashicorp.com/terraform/language/values/locals">Local Values</a></p><h3 id="使い方②-あるリソースの特定の設定値一覧を取得する"><a href="#使い方②-あるリソースの特定の設定値一覧を取得する" class="headerlink" title="使い方② あるリソースの特定の設定値一覧を取得する"></a>使い方② あるリソースの特定の設定値一覧を取得する</h3><p>例えばprivateサブネットからのみアクセス可能としたいリソース（EC2など）を構築し、そのセキュリティグループを構築するような場合を考えます。</p><p>サブネットは将来的に増減する可能性があり、それらのCIDRブロックを反映させて適切なインバウンドルールを設定する必要があります。</p><p>以下の<code>local.allow_cidr_block</code>のように記載することで、publicサブネットとprivateサブネットのCIDRブロック一覧が簡単に取得できます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  subnet = &#123;</span><br><span class="line">    public = &#123;</span><br><span class="line">      public-1a = &#123;</span><br><span class="line">        az     = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">        netnum = 0</span><br><span class="line">      &#125;,</span><br><span class="line">      public-1c = &#123;</span><br><span class="line">        az     = <span class="string">&quot;ap-northeast-1c&quot;</span></span><br><span class="line">        netnum = 1</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    private = &#123;</span><br><span class="line">      private-1a = &#123;</span><br><span class="line">        az     = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">        netnum = 2</span><br><span class="line">      &#125;,</span><br><span class="line">      private-1c = &#123;</span><br><span class="line">        az     = <span class="string">&quot;ap-northeast-1c&quot;</span></span><br><span class="line">        netnum = 3</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  allow_cidr_block = &#123;</span><br><span class="line">    public = [</span><br><span class="line">      <span class="keyword">for</span> k, v <span class="keyword">in</span> local.subnet.public :</span><br><span class="line">      aws_subnet.public[k].cidr_block</span><br><span class="line">    ]</span><br><span class="line">    private = [</span><br><span class="line">      <span class="keyword">for</span> k, v <span class="keyword">in</span> local.subnet.private :</span><br><span class="line">      aws_subnet.private[k].cidr_block</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;public&quot;</span> &#123;</span><br><span class="line">  for_each          = local.subnet.public</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = each.value.az</span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, each.value.netnum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;private&quot;</span> &#123;</span><br><span class="line">  for_each          = local.subnet.private</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = each.value.az</span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, each.value.netnum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_security_group&quot;</span> <span class="string">&quot;private_resource&quot;</span> &#123;</span><br><span class="line">  vpc_id = aws_vpc.test-vpc.id</span><br><span class="line">  ingress &#123;</span><br><span class="line">    from_port   = 443</span><br><span class="line">    to_port     = 443</span><br><span class="line">    protocol    = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">    cidr_blocks = local.allow_cidr_block.private</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ループ処理-dynamic-block"><a href="#ループ処理-dynamic-block" class="headerlink" title="ループ処理(dynamic block)"></a>ループ処理(dynamic block)</h2><p><code>count</code>や<code>for_each</code>がresource blockを複数作成するときに利用したのに対し、<code>dynamic block</code>はresource block内のブロックを複製するときに利用できます。</p><p>例えば、<code>for</code>の使い方②で述べたようなセキュリティグループを構築する場合で、publicとprivate両方のサブネットからアクセス可能なセキュリティグループを作りたいとします。</p><p>この場合は、<code>ingress</code>のブロックを複製すると簡単に構築できるため、以下のように<code>dynamic block</code>が利用して書くことができます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  subnet = &#123;</span><br><span class="line">    public = &#123;</span><br><span class="line">      public-1a = &#123;</span><br><span class="line">        az     = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">        netnum = 0</span><br><span class="line">      &#125;,</span><br><span class="line">      public-1c = &#123;</span><br><span class="line">        az     = <span class="string">&quot;ap-northeast-1c&quot;</span></span><br><span class="line">        netnum = 1</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    private = &#123;</span><br><span class="line">      private-1a = &#123;</span><br><span class="line">        az     = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">        netnum = 2</span><br><span class="line">      &#125;,</span><br><span class="line">      private-1c = &#123;</span><br><span class="line">        az     = <span class="string">&quot;ap-northeast-1c&quot;</span></span><br><span class="line">        netnum = 3</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  allow_cidr_block = &#123;</span><br><span class="line">    public = [</span><br><span class="line">      <span class="keyword">for</span> k, v <span class="keyword">in</span> local.subnet.public :</span><br><span class="line">      aws_subnet.public[k].cidr_block</span><br><span class="line">    ]</span><br><span class="line">    private = [</span><br><span class="line">      <span class="keyword">for</span> k, v <span class="keyword">in</span> local.subnet.private :</span><br><span class="line">      aws_subnet.private[k].cidr_block</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;public&quot;</span> &#123;</span><br><span class="line">  for_each          = local.subnet.public</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = each.value.az</span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, each.value.netnum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;private&quot;</span> &#123;</span><br><span class="line">  for_each          = local.subnet.private</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = each.value.az</span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, each.value.netnum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_security_group&quot;</span> <span class="string">&quot;public_resource&quot;</span> &#123;</span><br><span class="line">  vpc_id = aws_vpc.test-vpc.id</span><br><span class="line">  dynamic <span class="string">&quot;ingress&quot;</span> &#123;</span><br><span class="line">    for_each = local.allow_cidr_block</span><br><span class="line">    content &#123;</span><br><span class="line">      from_port   = 443</span><br><span class="line">      to_port     = 443</span><br><span class="line">      protocol    = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">      cidr_blocks = ingress.value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ただし、<code>dynamic block</code>は冒頭の説明でも述べた通り「resource block内のブロック」を複製するもので、単純なkey : value の形で定義する変数では利用できなかったりと、使い方が限定的です。（本記事では主にサブネットを複製してきましたが、サブネットの複製にdynamic blockは使えません。）</p><p>もう少しだけ<code>dynamic block</code>の使い道を考えます。</p><p>実践ではセキュリティグループは1個ということは基本ありえず、様々なリソース用に色々なセキュリティグループを構築することになるでしょう。</p><p>また、それぞれのセキュリティグループにはルールはいくつか存在し、CIDRブロックでなくセキュリティグループがソースになったり、ポートやプロトコルが異なっていたりもするでしょう。そうなると、以下のように全ての設定値を<code>local values</code>にmapとしてまとめておくのが良いでしょう。（長くなるのでサブネット部分の記述も省略しました。）</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  subnet = &#123;</span><br><span class="line">    public = &#123;</span><br><span class="line">      public-1a = &#123;</span><br><span class="line">        az     = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">        netnum = 0</span><br><span class="line">      &#125;,</span><br><span class="line">      public-1c = &#123;</span><br><span class="line">        az     = <span class="string">&quot;ap-northeast-1c&quot;</span></span><br><span class="line">        netnum = 1</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    private = &#123;</span><br><span class="line">      private-1a = &#123;</span><br><span class="line">        az     = <span class="string">&quot;ap-northeast-1a&quot;</span></span><br><span class="line">        netnum = 2</span><br><span class="line">      &#125;,</span><br><span class="line">      private-1c = &#123;</span><br><span class="line">        az     = <span class="string">&quot;ap-northeast-1c&quot;</span></span><br><span class="line">        netnum = 3</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  allow_cidr_block = &#123;</span><br><span class="line">    public = [</span><br><span class="line">      <span class="keyword">for</span> k, v <span class="keyword">in</span> local.subnet.public :</span><br><span class="line">      aws_subnet.public[k].cidr_block</span><br><span class="line">    ]</span><br><span class="line">    private = [</span><br><span class="line">      <span class="keyword">for</span> k, v <span class="keyword">in</span> local.subnet.private :</span><br><span class="line">      aws_subnet.private[k].cidr_block</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  security_group = &#123;</span><br><span class="line">    ec2_a = &#123;</span><br><span class="line">      ingress_1 = &#123;</span><br><span class="line">        from_port       = 22</span><br><span class="line">        to_port         = 22</span><br><span class="line">        protocol        = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">        cidr_blocks     = local.allow_cidr_block.private</span><br><span class="line">        security_groups = null</span><br><span class="line">      &#125;,</span><br><span class="line">      ingress_2 = &#123;</span><br><span class="line">        from_port       = 80</span><br><span class="line">        to_port         = 80</span><br><span class="line">        protocol        = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">        cidr_blocks     = null</span><br><span class="line">        security_groups = [aws_security_group.alb.id]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ec2_b = &#123;</span><br><span class="line">      ingress_1 = &#123;</span><br><span class="line">        from_port       = 22</span><br><span class="line">        to_port         = 22</span><br><span class="line">        protocol        = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">        cidr_blocks     = local.allow_cidr_block.private</span><br><span class="line">        security_groups = null</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_security_group&quot;</span> <span class="string">&quot;ec2_a&quot;</span> &#123;</span><br><span class="line">  vpc_id = aws_vpc.test-vpc.id</span><br><span class="line">  dynamic <span class="string">&quot;ingress&quot;</span> &#123;</span><br><span class="line">    for_each = local.security_group.ec2_a</span><br><span class="line">    content &#123;</span><br><span class="line">      from_port       = ingress.value.from_port</span><br><span class="line">      to_port         = ingress.value.to_port</span><br><span class="line">      protocol        = ingress.value.protocol</span><br><span class="line">      cidr_blocks     = ingress.value.cidr_blocks != null ? ingress.value.cidr_blocks : null</span><br><span class="line">      security_groups = ingress.value.security_groups != null ? ingress.value.security_groups : null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_security_group&quot;</span> <span class="string">&quot;ec2_b&quot;</span> &#123;</span><br><span class="line">  vpc_id = aws_vpc.test-vpc.id</span><br><span class="line">  dynamic <span class="string">&quot;ingress&quot;</span> &#123;</span><br><span class="line">    for_each = local.security_group.ec2_b</span><br><span class="line">    content &#123;</span><br><span class="line">      from_port   = ingress.value.from_port</span><br><span class="line">      to_port     = ingress.value.to_port</span><br><span class="line">      protocol    = ingress.value.protocol</span><br><span class="line">      cidr_blocks     = ingress.value.cidr_blocks != null ? ingress.value.cidr_blocks : null</span><br><span class="line">      security_groups = ingress.value.security_groups != null ? ingress.value.security_groups : null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>…なんとか書けました。</p><p>ご覧の通り<code>cidr_blocks</code>と<code>security_groups</code>はどちらかのみ設定するため、それを実現させるために後述する<code>三項演算子</code>を用いたり、<code>local values</code>にもわざわざnullとして定義しています。</p><p>さて、ループ処理の目的である<code>コードの冗長化を防ぎ、可読性や保守性を上げる</code>ことはできたでしょうか。<code>dynamic block</code>を使わずにシンプルに<code>ingress</code>のブロックを羅列しても行数はむしろ減りますし、ループや条件分岐がなくなる分、可読性や保守性も上がりそうです。</p><p>ちなみに<a href="https://developer.hashicorp.com/terraform/language/expressions/dynamic-blocks#best-practices-for-dynamic-blocks">公式のベストプラクティス</a>でも<code>dynamic block</code>の使い過ぎは推奨されておらず、モジュールの再利用を目的としてシンプルな構成にしたいような場合に、利用することを推奨しています。</p><p>このため、<code>dynamic block</code>は可読性や保守性を考えて慎重に利用するのが良いと思われます。</p><h2 id="条件分岐-三項演算子"><a href="#条件分岐-三項演算子" class="headerlink" title="条件分岐(三項演算子)"></a>条件分岐(三項演算子)</h2><p>Terraformでは条件分岐を行いたい場合は基本1通りで、この三項演算子を利用します。</p><p>構文は以下の通りで、<code>condition</code>に記載した条件がtrueなら<code>true_val</code>が、falseなら<code>false_val</code>が採用されます。</p><blockquote><p>condition ? true_val : false_val</p></blockquote><p>参考：<a href="https://developer.hashicorp.com/terraform/language/expressions/conditionals#syntax">Conditional Expressions</a></p><p>簡単な例では、環境ごとにリソースの数を変えるような場合があります。</p><p>例えば本番環境は冗長化したいのでマルチAZで構築するが、開発&#x2F;検証環境はシングルAZで良い場合などに、環境名ごとにcountの値を変えるような操作が可能です。<br>以下のように書くことで、環境名（<code>local.env</code>）の値を変えるだけで本番環境と開発&#x2F;検証環境で、リソース数の切り替えができます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  <span class="built_in">env</span> = <span class="string">&quot;prod&quot;</span></span><br><span class="line">  az = [</span><br><span class="line">    <span class="string">&quot;ap-northeast-1a&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ap-northeast-1c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ap-northeast-1d&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;public&quot;</span> &#123;</span><br><span class="line">  count             = local.env == <span class="string">&quot;prod&quot;</span> ? 2 : 1</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = local.az[count.index]</span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, count.index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_subnet&quot;</span> <span class="string">&quot;private&quot;</span> &#123;</span><br><span class="line">  count             = local.env == <span class="string">&quot;prod&quot;</span> ? 2 : 1</span><br><span class="line">  vpc_id            = aws_vpc.test-vpc.id</span><br><span class="line">  availability_zone = local.az[count.index]</span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.test-vpc.cidr_block, 8, count.index + 2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件分岐-for-each-と-for-を併用"><a href="#条件分岐-for-each-と-for-を併用" class="headerlink" title="条件分岐(for_each と for を併用)"></a>条件分岐(for_each と for を併用)</h2><p>こちらは、<code>for</code>の部分で記載したものの再掲となります。</p><p>Terraformに一般的なプログラミング言語でいうif文はありませんが、<code>for</code>文の中のifによってループ処理の中で条件分岐を行うことができます。</p><p>使い方は<a href="#%E4%BD%BF%E3%81%84%E6%96%B9%E2%91%A0-%E7%89%B9%E5%AE%9A%E6%9D%A1%E4%BB%B6%E3%81%A7%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%97%E3%81%A6%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B">for（使い方① 特定条件でフィルタリングしてリソースを構築する）</a>をご参照ください。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>Terraformにおけるループ処理と条件分岐をまとめました。</p><p>自分も例外ではなく、初心者はまずTerraformの構文に慣れるところが難しいかと思います。</p><p>本記事が同じようなTerraform初心者の一助となれば幸いです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20240328b/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;527&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
  </entry>
  
  <entry>
    <title>言語処理学会 (NLP2024) 参加報告</title>
    <link href="https://future-architect.github.io/articles/20240328a/"/>
    <id>https://future-architect.github.io/articles/20240328a/</id>
    <published>2024-03-27T15:00:00.000Z</published>
    <updated>2024-03-28T03:38:43.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>フューチャー技術ブログでは長らくご無沙汰しております。フューチャー株式会社の佐藤と申します。Strategic AI Group (SAIG) の一員として様々な先端技術の研究や社会実装に取り組んでおりますが、このところはもっぱら自然言語処理 (NLP) 畑出身の人たちに揉まれながら過ごしています。</p><p>2024年3月11日(月)〜3月15日(金)において神戸国際会議場にて開催されました<a href="https://www.anlp.jp/nlp2024/">言語処理学会第30回年次大会 (NLP2024)</a> に参加しました。</p><p>当社はプラチナスポンサーとして SAIG の 4 名がオンサイトで参加し、スポンサーブースでの会社紹介及びポスター発表を行いました。「<a href="https://www.anlp.jp/proceedings/annual_meeting/2024/pdf_dir/P10-13.pdf">機密情報検知における生成AIを用いたデータ拡張</a>」と題した我々のポスター発表について、詳しくは先日 SAIG 岸波さんが公開した技術ブログ記事「<a href="/articles/20240326b/">言語処理学会 (NLP2024) でポスター発表を行いました</a>」をご覧ください。<br><img src="/images/20240328a/20240314_172101.JPG" alt="20240314_172101.JPG" width="1200" height="900" loading="lazy"></p><h2 id="言語処理学会とは"><a href="#言語処理学会とは" class="headerlink" title="言語処理学会とは"></a>言語処理学会とは</h2><p>言語処理学会は NLP 分野における国内最大の学会で、毎年 3 月に開催されています。年次大会は今年でちょうど 30 回目となり、記念講演も行われていました。口頭発表は 4 会場に分かれ、それと並行して 3 会場×日に 3-4 交代するポスター発表、最終日にはワークショップと盛りだくさんの内容です。</p><p>今回の大会スローガンは「30年のプロンプトから未来を創造する」でした。プロンプトとある通り、ChatGPT はじめ LLM の隆盛によって自然言語処理はいま最もホットな分野といっても過言ではありません。参加者数は当日登録含まない一日目時点で 2045 名と、昨年以上の伸び幅を見せ 2000 の大台に乗りました。加えて発表件数、スポンサー数も史上最多であり、参加していて非常に活気を感じる学会でした。</p><h2 id="スポンサーブース"><a href="#スポンサーブース" class="headerlink" title="スポンサーブース"></a>スポンサーブース</h2><p>企業ブースを出展し AI 案件実績の紹介と人材募集を行いました。当社をご存じなかった方々にも数多くリーチでき、研究についてのディスカッションも盛り上がりました。</p><p>主に学生の方へ向けては、会社紹介のパンフレットと共にノベルティとしてトートバッグを配布しました。かなり多めに持っていったつもりでしたが、会期中ブースへ次々に足を運んでいただいたおかげでほぼほぼ売り切れました。</p><img src="/images/20240328a/20240311_122953.JPG" alt="20240311_122953.JPG" width="1200" height="900" loading="lazy"><h2 id="発表・セッションの紹介"><a href="#発表・セッションの紹介" class="headerlink" title="発表・セッションの紹介"></a>発表・セッションの紹介</h2><p>このセクションでは、参加した各メンバーごとに口頭発表・ポスター発表の中からいくつか紹介します。</p><ul><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2024/pdf_dir/A1-2.pdf">[A1-2] プロンプトチューニングとkNN-LMを組み合わせたリスティング広告のタイトル自動生成</a></strong><br>リスティング広告 (:&#x3D;ググったときに画面の上に出てくるテキスト広告) のタイトル生成を題材に、言語モデル (LM)をファインチューニング (FT) することなく経時的な社会トレンド変化に追従させる方法を検討しています。筆者らは、LM の中間表現を事前に格納しておくことで FT なしにドメイン適応可能な kNN-LM と、prompting を行いより柔軟にトレンドに追従できる Instruction-Tuning 済の LM を組み合わせる方法を提案しました。さらに、これらのモデルを分割・変更しても性能の劣化が小さいことを示し、例えばある LM でシステムを構築した後により高性能な LM が公開された場合に、前者の中間表現をそのままに後者だけ更新してもよいのではないかと示唆しています。<br>実際の運用上定期的に FT を行うことは労力的に困難なことが多く、分割して一部だけ prompting を行えば性能が保持できそうという考察に惹かれました。発表における題材はリスティング広告という30字程度の生成でしたが、より長文の生成に対しても利用できれば楽しそうです。(佐藤)</li><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2024/pdf_dir/P8-6.pdf">[P8-6] 大規模言語モデル開発における日本語 Web 文書のフィルタリング手法の検証</a></strong><br>日本語に適応した大規模言語モデル(LLM) のために日本語コーパスが求められる一方で、コーパスの大部分を占める Web コンテンツのフィルタリング手法が確立されていないことから、高速に処理できるフィルタリング処理方法を複数検討しています。ベンチマークの結果 N-gram LM の perplexity を元にした分類器の精度が最も良かったと評価できるものの、フィルタリングをかけても下流タスクの精度向上が有意にはみられず、また強すぎるフィルタリングによって下流タスク精度は大幅に悪化しました。フィルタリングによって特定トピックや特定ドメインのコンテンツ――端的に言うと楽天市場の商品名――が大きく減少していることや、perplexity が低くフィルタリングを通過しても日本語として支離滅裂な文章が存在することを観察しています。<br>直感的に低品質とわかる商品名等を除外できても精度向上に不足というのは難しいなと感じました。逆説的に、世の LLM が単純な N-gram 単位の perplexity によらない「文脈」を獲得していることの傍証とも言えそうです。(佐藤)</li><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2024/pdf_dir/B2-4.pdf">[B2-4] 対訳データを用いた継続事前訓練による大規模言語モデルの翻訳精度評価</a></strong><br>この研究では、大規模言語モデル (LLM) の翻訳性能を高めるための手法として、対訳データを結合した文を用いる継続事前学習を提案しています。本研究の興味深い点は、はじめから大規模な翻訳データを指示学習のフォーマットに当てはめて学習する場合に比べて、継続事前学習の方式を取ることが極めて有効であったという点です。指示学習形式のfine-tuning (SFT) は指示文という羅針盤の存在により、空白から次のトークンを予測する (継続) 事前学習よりもはるかに小さな学習データから精度の向上を見込むことができる手法です。<br>今回、大規模な学習データを用意できる設定で指示学習 &lt; 継続事前学習 (+指示学習) という構図が示されたことは非常に面白いと感じます。この研究では翻訳を題材としていますが、input-outputペアの結合による継続事前学習の他のタスクにおける有効性や、指示学習のスケーラビリティーに関する示唆が得られれば、LLMに関する理解を一歩深める良い研究になると思いました。 (藤井)</li><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2024/pdf_dir/B9-4.pdf">[B9-4] タスク指向型対話システムへの項目反応理論の適用によるユーザのタスク達成能力の推定</a></strong><br>この研究では、タスク指向対話システムにおけるユーザのタスク遂行能力を項目反応理論 (IRT) に基づいて推定しています。項目反応理論 (IRT) は教育分野で用いられる考え方で、テストのある設問に対する多数の受験者の正誤データから設問の特性 (難しさや受験者の能力を判別する識別力) を分析し、各設問に対する解答パターンから尤もらしい受験者の能力を推定する、というものです。本研究では旅行案内タスクのデータセットを用いて、例えば「ホテルの予約に関する予算の希望を聞く質問に正しく予算を回答できるか？」といった質問をテストにおける1つの設問になぞらえることでIRTを適用しています。実験の結果、提案手法でユーザの能力を推定した場合、後続の対話におけるタスク遂行能力を比較的高精度で予測できることが示されています。<br>なお、実応用に際しては、事前に識別力の高い質問 (≒ ユーザの能力に応じて解答に大きくブレが生じるような質問) を一度は聞かなれけばならない、推定したユーザ能力に基づいて最短のターン数で目的を達成する対話に最適化する方法は自明でない等、残り越えるべき課題も残されています。しかしながら、システムが対話を通じてユーザに適応していくという考え方は非常に興味深く、今後の進展に期待できると考えます。 (藤井)</li><li><strong><a href="https://www.anlp.jp/proceedings/annual_meeting/2024/pdf_dir/P8-8.pdf">[P8-8] 日本語タスクにおけるLLMを用いた疑似学習データ生成の検討</a></strong><br>近年、大規模言語モデル (LLM) にタスクの説明文と少数の事例を入力するFew-Shot等の手法が様々なタスクで高い性能を発揮することが知られていますが、GPUリソースの制約等、LLMの運用コストは高いです。この研究では、6つの日本語の自然言語処理タスクに関して、LLMを用いて疑似データを作成し、そのデータを用いてBERTのような小規模モデルを学習することで、LLMのFew-Shot等の性能にどの程度迫れるかを検証しています。各タスクの疑似データを作成するために、タスクの知識を利用したKADGという疑似データ生成手法を提案しています。提案手法はシンプルで、疑似データを生成する際のプロンプトにタスクに関する内容語を含めるというものです。提案手法によって疑似データを作成し、小規模モデルを学習させた結果、フォーマルなテキストを入力とするタスクでLLMの性能を上回ることを明らかにしました。<br>生成AIブームの中で、様々な場面でLLMが使用されがちですが、タスクによっては小規模モデルで十分と感じるケースもあります。そんななかで、学習データの作成にLLMを活用することで、小規模モデルでもLLMを超えられる可能性を示しているのは興味深いと感じました。また、今回の言語処理学会で我々もLLMを用いたデータ拡張の研究を発表しており、このような方向性の研究が発展していってほしいという期待も込めて挙げさせていただきました。 (岸波)</li></ul><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>大学院時代から実に 5 年ぶりのオフライン学会参加でした。奇跡的に、その 5 年前にも神戸のポートアイランドで発表をした覚えがあります。</p><p>NLP2024 は当時の研究分野から垣根を 2 つほど超えた先の分野ではありましたが、数多くの研究を見ることができとても良い刺激になりました。</p><p>現在 SAIG ではともに働くメンバーを募集しています。特に NLP分野における社会実装のニーズは根強く、多くの仲間を必要としているところです。キャリア採用ページでは <a href="https://open.talentio.com/r/1/c/future/pages/76795">シニアNLPエンジニアの募集</a> がピックアップされております。採用ページができておらず恐縮ですが、NLPリサーチエンジニア及びNLPエンジニアも同じく絶賛募集中です。条件等応相談ですので、我こそはという読者の方、是非先のリンクよりご応募をお待ちしております。</p><p>ほかにも幅広く <a href="https://www.future.co.jp/recruit/recruit/rec-fresh/">新卒採用</a> および <a href="https://www.future.co.jp/recruit/recruit/rec-career/">キャリア採用</a> を募集中です。興味のある方は是非一緒に働きましょう。よろしくお願いします！</p><img src="/images/20240328a/20240313_112622.JPG" alt="20240313_112622.JPG" width="1200" height="900" loading="lazy">▲ 会場近くの南公園の噴水。]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;フューチャー技術ブログでは長らくご無沙汰しております。フューチャー株式会社の佐藤と申します。Strategic AI</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="参加レポート" scheme="https://future-architect.github.io/tags/%E5%8F%82%E5%8A%A0%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="機械学習" scheme="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/"/>
    
    <category term="NLP" scheme="https://future-architect.github.io/tags/NLP/"/>
    
    <category term="学会" scheme="https://future-architect.github.io/tags/%E5%AD%A6%E4%BC%9A/"/>
    
    <category term="NLP2024" scheme="https://future-architect.github.io/tags/NLP2024/"/>
    
  </entry>
  
  <entry>
    <title>手動運用しているCloudflareをTerraformでInfrastructure as Codeする</title>
    <link href="https://future-architect.github.io/articles/20240327a/"/>
    <id>https://future-architect.github.io/articles/20240327a/</id>
    <published>2024-03-26T15:00:00.000Z</published>
    <updated>2024-03-27T01:19:23.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>この記事は、<a href="/articles/20240311a/">Terraform連載2024</a>の10記事目です。</p><p>みなさんこんにちは。TIG所属の大岩潤矢( <a href="https://x.com/920OJ">@920OJ</a> ) です。</p><p>本記事ではCloudflareで管理しているドメインのDNS設定やCloudflare Pages等のサービスの設定を、Terraform管理に移行した際の手順などを記載します。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>私は個人開発や自身のポートフォリオWebサイトの公開のために、 <code>920oj.net</code> というドメインを所持しています。このドメインはGoogle Domainsで取得し、ネームサーバを変更してCloudflare上でDNSレコードを管理しています。</p><p>また、自身の <a href="https://920oj.net/">ポートフォリオサイトWebサイト</a> はCloudflare Pagesでホスティングしています。転送量無制限で月500ビルドまで無料というのはお財布に優しくありがたいです。</p><p>一方で、Webの管理画面からCloudflareでのドメイン管理や各種設定を変更する際、バージョン履歴を表示する機能がないため、一度変更してしまったものは元に戻すことができません。例えばDNS設定を更新する際、間違えた値に更新してしまった場合、元の値を記憶していない限りは戻せなくなってしまいます。<a href="https://developers.cloudflare.com/version-management/">バージョニング機能</a>はあるものの、Enterpriseプランのみでしか使えないようです。</p><p>そこで利用したいと思い立ったのがTerraformです。CloudflareをTerrafromで構築し、そのコードをGit等で管理することにより、変更をバージョン管理できます。記事タイトルにある通り、「Infrastructure as Codeする」ということです。</p><p>一方でCloudflareはすでに利用中であるため、これまで手作業で実施してきた設定をTerraformへimportして管理することになります。</p><p>今回移行するものは、各ドメインのDNSレコードと、Cloudflare Pagesでホスティングしているプロジェクトの2つとします。</p><h2 id="CloudflareをTerraformで管理するための前準備"><a href="#CloudflareをTerraformで管理するための前準備" class="headerlink" title="CloudflareをTerraformで管理するための前準備"></a>CloudflareをTerraformで管理するための前準備</h2><p>早速、既存リソースをTerraformで管理するための手順を紹介します。まずは下準備として、以下を実施します。</p><ul><li>tfstate管理用のR2バケットを作成</li><li>APIトークンの発行</li><li>環境変数の設定</li></ul><h3 id="Cloudflare-R2へtfstate管理用のバケットを作成する"><a href="#Cloudflare-R2へtfstate管理用のバケットを作成する" class="headerlink" title="Cloudflare R2へtfstate管理用のバケットを作成する"></a>Cloudflare R2へtfstate管理用のバケットを作成する</h3><p>CloudflareにはR2というS3互換のストレージサービスがあり、tfstateはこのR2の中で管理する方針とします。R2でtfstateを管理する方法については、すでにこのテックブログで記事があるので、これを参考にします。</p><p><a href="https://future-architect.github.io/articles/20231016a/">https://future-architect.github.io/articles/20231016a/</a></p><p>まずはCloudflareの管理画面にログインし、R2を選択→「Add R2 subscription to my account」を押下します。</p><img src="/images/20240327a/image.png" alt="Add R2 subscription to my accountをクリック" width="1200" height="615" loading="lazy"><p>「Create bucket」 を押下します。</p><img src="/images/20240327a/image_2.png" alt="Create bucketをクリック" width="965" height="405" loading="lazy"><p>バケット名を入力し、Locationは「Automatic」を選択します。最後に「Create bucket」を押下すれば、バケットが出来上がります。</p><img src="/images/20240327a/image_3.png" alt="oj-cf-tfstateというバケット名を入力" width="952" height="832" loading="lazy"><img src="/images/20240327a/image_4.png" alt="Automaticのチェックボックスを選択" width="1200" height="612" loading="lazy"><h3 id="APIトークンを発行する"><a href="#APIトークンを発行する" class="headerlink" title="APIトークンを発行する"></a>APIトークンを発行する</h3><p>CloudflareをTerraform管理、すなわちAPIで操作する場合、APIトークンの発行が必須です。</p><p>右上ユーザアイコンより「My Profile」を押下→左メニューからAPI Tokensを選び、「Create Token」を押下します。</p><img src="/images/20240327a/image_5.png" alt="Cretate Tokenをクリック" width="1200" height="615" loading="lazy"><p>Create Custom Tokenの「Get started」を押下します。</p><img src="/images/20240327a/image_6.png" alt="Get startedボタンをクリック" width="866" height="217" loading="lazy"><p>各種設定値を入力します。</p><ul><li>Token name: 任意の名前を入力</li><li>Permissions: Terraform経由で操作するサービスを選び、それぞれEditの権限を指定する<ul><li>どのサービスで何の権限が必要かは<a href="https://developers.cloudflare.com/fundamentals/api/reference/permissions/">ドキュメント</a>にまとまっているので参照のこと</li></ul></li><li>Account Resources: 自分が権限を持っているアカウント（メールアドレス）を選択可能。ここではAll accountsとしたが、複数のアカウントがある場合はここで絞っておくことが好ましい</li><li>Zone Resources: アカウントの中のドメインを選択できる。ここではAll zonesとしたが、操作できるドメインを絞りたいときはここで指定する</li><li>Client IP Address Filtering: 仮に操作されるIPアドレスが決まっている場合はここで指定する。何も入力しなければ、すべてのIPアドレスからアクセスを許容する</li><li>すべて入力できたら「Continue to summary」を押下</li></ul><img src="/images/20240327a/image_7.png" alt="" width="1200" height="764" loading="lazy"><img src="/images/20240327a/image_8.png" alt="" width="1136" height="784" loading="lazy"><p>設定内容が表示されるので、問題なければ「Create Token」を押下します。</p><img src="/images/20240327a/image_9.png" alt="Create Tokneをクリック" width="1155" height="561" loading="lazy"><p>APIトークンが表示されますが、このままではR2のAccess KeyおよびSecretが表示されないため、再度作り直します。このページでのコピーは不要です。</p><img src="/images/20240327a/image_10.png" alt="ima" width="1200" height="550" loading="lazy"><p>R2の管理ページを開き、右側メニューより「Manage R2 API Tokens」を選びます。</p><img src="/images/20240327a/image_11.png" alt="" width="1200" height="615" loading="lazy"><p>先ほど作成したトークンの「・・・」を押下し、「Roll」を選択。注意書きを読み、「Roll」を押下します。</p><img src="/images/20240327a/image_12.png" alt="" width="1200" height="404" loading="lazy"><img src="/images/20240327a/image_13.png" alt="" width="775" height="540" loading="lazy"><p>「API Token」「Access Key ID」「Secret Access Key」「R2のエンドポイント」が表示されるので、これらをすべてコピーしておきましょう。</p><img src="/images/20240327a/image_14.png" alt="" width="1200" height="680" loading="lazy"><h3 id="環境変数の設定"><a href="#環境変数の設定" class="headerlink" title="環境変数の設定"></a>環境変数の設定</h3><p>ここからは操作するPCでの作業となります。まずはターミナルを開き、環境変数をセットします。</p><p>先ほどコピーしたAPIトークン等認証情報を、環境変数としてセットします。セットするキーと値は以下のとおりです。</p><div class="scroll"><table><thead><tr><th>No.</th><th>環境変数名</th><th>値</th></tr></thead><tbody><tr><td>1</td><td>AWS_ACCOUNT_ID</td><td>CloudflareのアカウントID</td></tr><tr><td>2</td><td>AWS_ACCESS_KEY_ID</td><td>APIトークンで払い出したアクセスキーID</td></tr><tr><td>3</td><td>AWS_SECRET_ACCESS_KEY</td><td>APIトークンで払い出したシークレットアクセスキー</td></tr><tr><td>4</td><td>CLOUDFLARE_ACCOUNT_ID</td><td>CloudflareのアカウントID</td></tr><tr><td>5</td><td>CLOUDFLARE_API_TOKEN</td><td>アクセスキー、シークレットアクセスキーと共に払い出したトークン</td></tr></tbody></table></div><p>1、4については管理画面より確認できます。2、3、5については前項でコピーしたものをセットしましょう。</p><p>以下のようにシェルスクリプトにまとめて、 <code>source set-env.sh</code> のコマンドで設定できるようにすると楽です。</p><figure class="highlight bash"><figcaption><span>set-env.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> AWS_ACCOUNT_ID=xxxxxxxxxxxxxxx</span><br><span class="line"><span class="built_in">export</span> AWS_ACCESS_KEY_ID=xxxxxxxxxxxxxxx</span><br><span class="line"><span class="built_in">export</span> AWS_SECRET_ACCESS_KEY=xxxxxxxxxxxxxxx</span><br><span class="line"><span class="built_in">export</span> CLOUDFLARE_ACCOUNT_ID=xxxxxxxxxxxxxxx</span><br><span class="line"><span class="built_in">export</span> CLOUDFLARE_API_TOKEN=xxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><h2 id="CloudflareをTerraform管理する"><a href="#CloudflareをTerraform管理する" class="headerlink" title="CloudflareをTerraform管理する"></a>CloudflareをTerraform管理する</h2><p>ここからが本題で、いよいよCloudflare上にあるリソースをTerraform管理にするため、インポート等の作業を実施していきます。</p><h3 id="ディレクトリ構成"><a href="#ディレクトリ構成" class="headerlink" title="ディレクトリ構成"></a>ディレクトリ構成</h3><p>任意の場所にCloudflareのTerraform管理用のディレクトリを作成します。これをgit管理とし、その配下のディレクトリ構造・ファイル構成は以下の形とします。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── domains</span><br><span class="line">│   └── 920oj-net</span><br><span class="line">│       ├── local.tf</span><br><span class="line">│       ├── record.tf</span><br><span class="line">│       └── setup.tf</span><br><span class="line">└── global</span><br><span class="line">    └── pages</span><br><span class="line">        └── 920oj-net</span><br><span class="line">            ├── local.tf</span><br><span class="line">            ├── pages_domain.tf</span><br><span class="line">            ├── pages_project.tf</span><br><span class="line">            └── setup.tf</span><br><span class="line"></span><br><span class="line">5 directories, 7 files</span><br></pre></td></tr></table></figure><p>ドメイン（ゾーン）管理は <code>domains/</code> 配下で実施し、利用するドメインごとにフォルダを切り、それぞれでtfstateを分ける形とします。</p><p>Cloudflare Pagesはアカウントでグローバルに管理するため、 <code>global/</code> 配下で管理し、 <code>pages</code> ディレクトリを切り、さらにプロジェクトごとにディレクトリを分ける形式とします。</p><h3 id="各ディレクトリのセットアップ"><a href="#各ディレクトリのセットアップ" class="headerlink" title="各ディレクトリのセットアップ"></a>各ディレクトリのセットアップ</h3><p>Terraformのバージョン情報やプロパイダの設定、tfstateの配置場所等の初期設定に必要なファイルは、 <code>setup.tf</code> にまとめて、各ディレクトリに配置します。</p><p><code>key</code> はディレクトリごとに分けておき、tfstateが分けられるようにします。自分は以下のようなルールで運用しています。</p><ul><li>ドメイン: <code>domains/ドメイン名.tfstate</code></li><li>Pages: <code>global/pages/プロジェクト名.tfstate</code></li><li>Workers: <code>global/workers/プロジェクト名.tfstate</code></li></ul><figure class="highlight sh"><figcaption><span>setup.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  // terraformのバージョン設定</span><br><span class="line">  required_version = <span class="string">&quot;~&gt; 1.7.5&quot;</span></span><br><span class="line"></span><br><span class="line">  // cloudflareプロバイダを利用</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    cloudflare = &#123;</span><br><span class="line">      <span class="built_in">source</span>  = <span class="string">&quot;cloudflare/cloudflare&quot;</span></span><br><span class="line">      version = <span class="string">&quot;~&gt; 4.26.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // tfstateの保存先の設定。R2 Storageを使用する</span><br><span class="line">  backend <span class="string">&quot;s3&quot;</span> &#123;</span><br><span class="line">    endpoints = &#123;</span><br><span class="line">      s3 = <span class="string">&quot;https://&lt;アカウントID&gt;.r2.cloudflarestorage.com&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    bucket                      = <span class="string">&quot;oj-cf-tfstate&quot;</span> <span class="comment"># ここでバケット名を指定</span></span><br><span class="line">    key                         = <span class="string">&quot;domains/920oj-net.tfstate&quot;</span> <span class="comment"># ディレクトリごとにキーを変更</span></span><br><span class="line">    region                      = <span class="string">&quot;us-east-1&quot;</span> <span class="comment"># 任意の値でOK</span></span><br><span class="line">    skip_credentials_validation = <span class="literal">true</span></span><br><span class="line">    skip_requesting_account_id  = <span class="literal">true</span></span><br><span class="line">    skip_s3_checksum            = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">&quot;cloudflare&quot;</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>backend の設定で、 <code>skip_credentials_validation</code> と <code>skip_requesting_account_id</code> 、 <code>skip_s3_checksum</code> の3つを <code>true</code> にする必要があります。</p><h3 id="ドメインのDNSレコードをimportする"><a href="#ドメインのDNSレコードをimportする" class="headerlink" title="ドメインのDNSレコードをimportする"></a>ドメインのDNSレコードをimportする</h3><p>Cloudflareのimportには、Terraform公式で用意されているimportコマンドを利用するほか、Cloudflareが独自に提供している <a href="https://github.com/cloudflare/cf-terraforming">cf-terraforming</a> というツールを利用することができます。</p><p>cf-terraformingについては、これまた伊藤さんが書かれている記事があるので、こちらも読んでみてください。</p><p><a href="https://future-architect.github.io/articles/20230502a/">https://future-architect.github.io/articles/20230502a/</a></p><p>実際に現在の設定をimportしてみましょう。</p><h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><p>まずは現在の設定をTerraformの記述に落とし込んでくれる <code>generate</code> コマンドを試します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cf-terraforming generate --resource-type <span class="string">&quot;cloudflare_record&quot;</span> --zone <span class="string">&quot;ゾーンID&quot;</span> </span><br></pre></td></tr></table></figure><ul><li><code>--resource-type</code> オプションで取得したいリソースを指定します。今回はDNS設定を取得してみるので、 <code>cloudflare_record</code> を指定します。<ul><li>取得できるリソース一覧はドキュメントに無かったので、<a href="https://github.com/cloudflare/cf-terraforming/blob/master/internal/app/cf-terraforming/cmd/generate.go">ソースコード</a>を参照します。</li></ul></li><li><code>--zone</code> オプションで取得したいzoneのIDを指定します。</li></ul><p>実行してみたところ、以下のエラーが出ました。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FATA[0000] --account and --zone are mutually exclusive, support <span class="keyword">for</span> both is deprecated </span><br></pre></td></tr></table></figure><p>どうやら先程セットした環境変数 <code>CLOUDFLARE_ACCOUNT_ID</code> がセットされていると正常に動いてくれなさそうなので、一旦 <code>unset CLOUDFLARE_ACCOUNT_ID</code> コマンドで環境変数を外しておきます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">% cf-terraforming generate --resource-type <span class="string">&quot;cloudflare_record&quot;</span> --zone <span class="string">&quot;ゾーンID&quot;</span> </span><br><span class="line">resource <span class="string">&quot;cloudflare_record&quot;</span> <span class="string">&quot;terraform_managed_resource_xxxxxxxxxxx&quot;</span> &#123;</span><br><span class="line">  name    = <span class="string">&quot;920oj.net&quot;</span></span><br><span class="line">  proxied = <span class="literal">true</span></span><br><span class="line">  ttl     = 1</span><br><span class="line">  <span class="built_in">type</span>    = <span class="string">&quot;CNAME&quot;</span></span><br><span class="line">  value   = <span class="string">&quot;920oj-net.pages.dev&quot;</span></span><br><span class="line">  zone_id = <span class="string">&quot;ゾーンID&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;cloudflare_record&quot;</span> <span class="string">&quot;terraform_managed_resource_yyyyyyyyyyy&quot;</span> &#123;</span><br><span class="line">  name     = <span class="string">&quot;920oj.net&quot;</span></span><br><span class="line">  priority = 10</span><br><span class="line">  proxied  = <span class="literal">false</span></span><br><span class="line">  ttl      = 1</span><br><span class="line">  <span class="built_in">type</span>     = <span class="string">&quot;MX&quot;</span></span><br><span class="line">  value    = <span class="string">&quot;example.com&quot;</span></span><br><span class="line">  zone_id  = <span class="string">&quot;ゾーンID&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>問題なければ、先程のコマンドの末尾に <code>&gt;&gt; record.tf</code> をつけてファイルに書き出しましょう。</p><p>このままだとリソース名がランダムなものになっているので、わかりやすいように名前を変えると管理しやすいです。</p><ul><li>例: ルートドメインのCNAMEレコード: <code>cname_root</code></li><li>例: <code>hoge</code> という名前のAレコード: <code>a_hoge</code></li></ul><p>また、zone_idやルートドメイン名は何度か記述することになるので、local変数に定義しておくとミスが減ります。</p><figure class="highlight sh"><figcaption><span>local.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  zone_id = <span class="string">&quot;ゾーンID&quot;</span></span><br><span class="line">  root_domain = <span class="string">&quot;920oj.net&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>record.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;cloudflare_record&quot;</span> <span class="string">&quot;cname_root&quot;</span> &#123;</span><br><span class="line">  name    = local.root_domain</span><br><span class="line">  proxied = <span class="literal">true</span></span><br><span class="line">  ttl     = 1</span><br><span class="line">  <span class="built_in">type</span>    = <span class="string">&quot;CNAME&quot;</span></span><br><span class="line">  value   = <span class="string">&quot;920oj-net.pages.dev&quot;</span></span><br><span class="line">  zone_id = local.zone_id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...以下略</span><br></pre></td></tr></table></figure><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><p>このままでは新規追加した分がそのまま新規として認識されてしまうので、すでに作成されているリソースについてはimportしてtfstateへ反映させる必要があります。</p><p>importするためのコマンドはcf-terraformingを利用して出力することができます。ただし今回はリソース名をわかりやすく変更したため、コマンドを修正します。</p><p>まずはcf-terraformingを利用してコマンドを出力してみましょう。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> % cf-terraforming import --resource-type &quot;cloudflare_record&quot; --zone &quot;ゾーンID&quot;</span><br><span class="line">terraform import cloudflare_record.terraform_managed_resource_xxxxxxxxxx ゾーンID/xxxxxxxxxx</span><br><span class="line">terraform import cloudflare_record.terraform_managed_resource_yyyyyyyyyy ゾーンID/yyyyyyyyyy</span><br></pre></td></tr></table></figure><p>出力されたコマンドをもとに、リソース名を変更した上で、シェルスクリプトファイルとして保存します。</p><figure class="highlight bash"><figcaption><span>import.sh</span></figcaption><table><tr><td class="code"><pre><span class="line">terraform import cloudflare_record.terraform_managed_resource_cname_root ゾーンID/xxxxxxxxxx</span><br><span class="line">terraform import cloudflare_record.terraform_managed_resource_mx_root ゾーンID/yyyyyyyyyy</span><br></pre></td></tr></table></figure><p>これを実行してみましょう。 Import successful! と表示されれば、インポート完了です。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> % ./import.sh                  </span><br><span class="line">cloudflare_record.cname_root: Importing from ID <span class="string">&quot;ゾーンID/xxxxxxxxxx&quot;</span>...</span><br><span class="line">cloudflare_record.cname_root: Import prepared!</span><br><span class="line">  Prepared cloudflare_record <span class="keyword">for</span> import</span><br><span class="line">cloudflare_record.cname_root: Refreshing state... [<span class="built_in">id</span>=xxxxxxxxxxxxxxxxxxxxxx]</span><br><span class="line"></span><br><span class="line">・・・中略・・・</span><br><span class="line"></span><br><span class="line">Import successful!</span><br><span class="line"></span><br><span class="line">The resources that were imported are shown above. These resources are now <span class="keyword">in</span></span><br><span class="line">your Terraform state and will henceforth be managed by Terraform.</span><br></pre></td></tr></table></figure><p>ここで <code>terraform plan</code> を実行してみましょう。先ほどimportしたものが表示され、最後にNo chanegsと表示されれば、無事反映に成功しています。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> % terraform plan</span><br><span class="line">cloudflare_record.cname_root: Refreshing state... [<span class="built_in">id</span>=xxxxxxxxxxxxxxxxxxxxxx]</span><br><span class="line">cloudflare_record.mx_root: Refreshing state... [<span class="built_in">id</span>=xxxxxxxxxxxxxxxxxxxxxx]</span><br><span class="line">・・・中略・・・</span><br><span class="line"></span><br><span class="line">No changes. Your infrastructure matches the configuration.</span><br><span class="line"></span><br><span class="line">Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed.</span><br></pre></td></tr></table></figure><h3 id="Cloudflare-Pagesのimport"><a href="#Cloudflare-Pagesのimport" class="headerlink" title="Cloudflare Pagesのimport"></a>Cloudflare Pagesのimport</h3><p>続いてはCloudflare PagesをTerraform管理下となるよう設定します。</p><p>Pagesはドメイン（ゾーン）単位でなくアカウント単位での管理となるため、先ほどunsetした <code>CLOUDFLARE_ACCOUNT_ID</code> を再セットします。</p><p>また、Cloudflare Pagesはcf-terraformingが対応していないため、Terraform v1.5から追加されたImportブロックを利用してインポートします。</p><h4 id="importブロックの作成"><a href="#importブロックの作成" class="headerlink" title="importブロックの作成"></a>importブロックの作成</h4><p>自分の場合、 <code>920oj.net</code> のドメインで、プロジェクト <code>920oj-net</code> を設定しています。これをインポートしてみましょう。</p><img src="/images/20240327a/image_15.png" alt="image.png" width="873" height="200" loading="lazy"><p>Cloudflare Pagesは、 <code>cloudflare_pages_domain</code> リソースと <code>cloudflarepages_project</code> リソースから構築されます。</p><p>まずは <code>import.tf</code> を作成し、importブロックを記載します。 <code>local.account_id</code> でアカウントIDが呼び出せるようにしています。</p><p><code>cloudflare_pages_domain</code> のインポートでは、<code>to</code> にはimportする対象のリソース名を、 <code>id</code> には <code>&lt;アカウントID&gt;/&lt;プロジェクト名&gt;/&lt;設定しているドメイン名&gt;</code> を記載します。</p><p><code>cloudflare_pages_project</code> のインポートでは、 <code>to</code> にはimportする対象のリソース名を、 <code>id</code> には <code>&lt;アカウントID&gt;/&lt;プロジェクト名&gt;</code> を記載します。</p><figure class="highlight sh"><figcaption><span>import.tf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># cloudflare_pages_domain のインポート</span></span><br><span class="line">import &#123;</span><br><span class="line">  to = cloudflare_pages_domain.domain-920oj-net  <span class="comment"># 対象のリソース名</span></span><br><span class="line">  <span class="built_in">id</span> = <span class="string">&quot;<span class="variable">$&#123;local.account_id&#125;</span>/920oj-net/920oj.net&quot;</span> <span class="comment"># ドメイン名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># cloudflare_pages_project のインポート</span></span><br><span class="line">import &#123;</span><br><span class="line">  to = cloudflare_pages_project.project-920oj-net <span class="comment"># 対象のリソース名</span></span><br><span class="line">  <span class="built_in">id</span> = <span class="string">&quot;<span class="variable">$&#123;local.account_id&#125;</span>/920oj-net&quot;</span>            <span class="comment"># プロジェクト名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HCLコードの自動生成"><a href="#HCLコードの自動生成" class="headerlink" title="HCLコードの自動生成"></a>HCLコードの自動生成</h4><p>この状態で <code>terraform plan -generate-config-out=generate.tf</code> コマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">% terraform plan -generate-config-out=generate.tf</span><br><span class="line">cloudflare_pages_domain.domain-920oj-net: Preparing import... [<span class="built_in">id</span>=xxxxxxxxxxxxxxx/920oj-net/920oj.net]</span><br><span class="line">cloudflare_pages_project.project-920oj-net: Preparing import... [<span class="built_in">id</span>=xxxxxxxxxxxxxxx/920oj-net]</span><br><span class="line">cloudflare_pages_domain.domain-920oj-net: Refreshing state... [<span class="built_in">id</span>=xxxxxxxxxxxxxxxxxxxxx]</span><br><span class="line">cloudflare_pages_project.project-920oj-net: Refreshing state... [<span class="built_in">id</span>=920oj-net]</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># cloudflare_pages_domain.domain-920oj-net will be imported</span></span><br><span class="line">    resource <span class="string">&quot;cloudflare_pages_domain&quot;</span> <span class="string">&quot;domain-920oj-net&quot;</span> &#123;</span><br><span class="line">        account_id   = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">        domain       = <span class="string">&quot;920oj.net&quot;</span></span><br><span class="line">        <span class="built_in">id</span>           = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">        project_name = <span class="string">&quot;920oj-net&quot;</span></span><br><span class="line">        status       = <span class="string">&quot;active&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># cloudflare_pages_project.project-920oj-net will be imported</span></span><br><span class="line">  <span class="comment"># (config will be generated)</span></span><br><span class="line">    resource <span class="string">&quot;cloudflare_pages_project&quot;</span> <span class="string">&quot;project-920oj-net&quot;</span> &#123;</span><br><span class="line">        account_id        = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">        created_on        = <span class="string">&quot;2023-03-18T15:44:28Z&quot;</span></span><br><span class="line">        domains           = [</span><br><span class="line">            <span class="string">&quot;920oj-net.pages.dev&quot;</span>,</span><br><span class="line">            <span class="string">&quot;920oj.net&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="built_in">id</span>                = <span class="string">&quot;920oj-net&quot;</span></span><br><span class="line">        name              = <span class="string">&quot;920oj-net&quot;</span></span><br><span class="line">        production_branch = <span class="string">&quot;main&quot;</span></span><br><span class="line">        subdomain         = <span class="string">&quot;920oj-net.pages.dev&quot;</span></span><br><span class="line"></span><br><span class="line">        build_config &#123;</span><br><span class="line">            build_caching   = <span class="literal">false</span></span><br><span class="line">            build_command   = <span class="string">&quot;npm run build&quot;</span></span><br><span class="line">            destination_dir = <span class="string">&quot;build&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">・・・中略</span><br><span class="line"></span><br><span class="line">Plan: 2 to import, 0 to add, 0 to change, 0 to destroy.</span><br></pre></td></tr></table></figure><p>設定値が読み取られ、出力されています。また、指定したファイル <code>generate.tf</code> に同様の設定値が記載されています！</p><p>内容が正しいか確認するのと、コメントを消したり、local変数に置き換えたりして体裁を整えましょう。また、ファイルもリソースごとに分けておきましょう。</p><figure class="highlight sh"><figcaption><span>pages_domain.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;cloudflare_pages_domain&quot;</span> <span class="string">&quot;domain-920oj-net&quot;</span> &#123;</span><br><span class="line">  account_id   = local.account_id</span><br><span class="line">  domain       = <span class="string">&quot;920oj.net&quot;</span></span><br><span class="line">  project_name = <span class="string">&quot;920oj-net&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>generate.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;cloudflare_pages_project&quot;</span> <span class="string">&quot;project-920oj-net&quot;</span> &#123;</span><br><span class="line">  account_id        = local.account_id</span><br><span class="line">  name              = local.project_name</span><br><span class="line">  production_branch = <span class="string">&quot;main&quot;</span></span><br><span class="line">  build_config &#123;</span><br><span class="line">    build_caching       = <span class="literal">false</span></span><br><span class="line">    build_command       = <span class="string">&quot;npm run build&quot;</span></span><br><span class="line">    destination_dir     = <span class="string">&quot;build&quot;</span></span><br><span class="line">    root_dir            = null</span><br><span class="line">    web_analytics_tag   = null</span><br><span class="line">    web_analytics_token = null</span><br><span class="line">  &#125;</span><br><span class="line">  deployment_configs &#123;</span><br><span class="line">    preview &#123;</span><br><span class="line">      always_use_latest_compatibility_date = <span class="literal">false</span></span><br><span class="line">      compatibility_date                   = <span class="string">&quot;2023-03-18&quot;</span></span><br><span class="line">      compatibility_flags                  = []</span><br><span class="line">      d1_databases                         = &#123;&#125;</span><br><span class="line">      durable_object_namespaces            = &#123;&#125;</span><br><span class="line">      environment_variables = &#123;</span><br><span class="line">        GTAG_ID      = <span class="string">&quot;XXXXXXX&quot;</span></span><br><span class="line">        NODE_VERSION = <span class="string">&quot;XXXXXXX&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      fail_open     = <span class="literal">true</span></span><br><span class="line">      kv_namespaces = &#123;&#125;</span><br><span class="line">      r2_buckets    = &#123;&#125;</span><br><span class="line">      secrets       = null <span class="comment"># sensitive</span></span><br><span class="line">      usage_model   = <span class="string">&quot;standard&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    production &#123;</span><br><span class="line">      always_use_latest_compatibility_date = <span class="literal">false</span></span><br><span class="line">      compatibility_date                   = <span class="string">&quot;2023-03-18&quot;</span></span><br><span class="line">      compatibility_flags                  = []</span><br><span class="line">      d1_databases                         = &#123;&#125;</span><br><span class="line">      durable_object_namespaces            = &#123;&#125;</span><br><span class="line">      environment_variables = &#123;</span><br><span class="line">        GTAG_ID      = <span class="string">&quot;XXXXXXXXXX&quot;</span></span><br><span class="line">        NODE_VERSION = <span class="string">&quot;XXXXXXXXXX&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      fail_open     = <span class="literal">true</span></span><br><span class="line">      kv_namespaces = &#123;&#125;</span><br><span class="line">      r2_buckets    = &#123;&#125;</span><br><span class="line">      secrets       = null <span class="comment"># sensitive</span></span><br><span class="line">      usage_model   = <span class="string">&quot;standard&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">source</span> &#123;</span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;github&quot;</span></span><br><span class="line">    config &#123;</span><br><span class="line">      deployments_enabled           = <span class="literal">true</span></span><br><span class="line">      owner                         = <span class="string">&quot;920oj&quot;</span></span><br><span class="line">      pr_comments_enabled           = <span class="literal">true</span></span><br><span class="line">      preview_branch_excludes       = []</span><br><span class="line">      preview_branch_includes       = [<span class="string">&quot;*&quot;</span>]</span><br><span class="line">      preview_deployment_setting    = <span class="string">&quot;all&quot;</span></span><br><span class="line">      production_branch             = <span class="string">&quot;main&quot;</span></span><br><span class="line">      production_deployment_enabled = <span class="literal">true</span></span><br><span class="line">      repo_name                     = <span class="string">&quot;920oj-net&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="importの実行"><a href="#importの実行" class="headerlink" title="importの実行"></a>importの実行</h4><p>コードの記載は済んだので、tfstateへ取り込みましょう。</p><p>先ほどのimportブロックは残したままで、 <code>terraform plan</code> を実行します。 <code>Plan: 2 to import, 0 to add, 0 to change, 0 to destroy.</code> が出ていれば、インポートの準備ができていることがわかります。</p><p>次に、 <code>terraform apply</code> を実行します。差分がないことを確認して、yesとタイプしましょう。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Plan: 2 to import, 0 to add, 0 to change, 0 to destroy.</span><br><span class="line"></span><br><span class="line">Do you want to perform these actions?</span><br><span class="line">  Terraform will perform the actions described above.</span><br><span class="line">  Only <span class="string">&#x27;yes&#x27;</span> will be accepted to approve.</span><br><span class="line"></span><br><span class="line">  Enter a value: <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p><code>Apply complete! Resources: 2 imported, 0 added, 0 changed, 0 destroyed.</code> が出たらOKです。</p><p>このあと <code>terraform plan</code> を実行してみて、差分が出ていなければ問題なしです。</p><p>先ほどインポートに利用したimport.tfは削除しても構いません。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> % terraform plan</span><br><span class="line">cloudflare_pages_domain.domain-920oj-net: Refreshing state... [<span class="built_in">id</span>=xxxxxxxxxx]</span><br><span class="line">cloudflare_pages_project.project-920oj-net: Refreshing state... [<span class="built_in">id</span>=xxxxxxxxxx]</span><br><span class="line"></span><br><span class="line">No changes. Your infrastructure matches the configuration.</span><br><span class="line"></span><br><span class="line">Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed.</span><br></pre></td></tr></table></figure><p>これにて、Cloudflareで管理しているドメインのDNSレコードとCloudflare Pagesのリソースを、Terraformにて管理できるようになりました！</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>これでCloudflareを操作する際の不安が軽減できるようになり、自分の個人開発モチベも（わずかながら）高まった気がします。また、Terraformのエコシステムや本体の機能の充実さも改めて実感しました。</p><p>ぜひ皆さんもCloudflareをTerraform管理してみましょう！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;この記事は、&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="IaC" scheme="https://future-architect.github.io/tags/IaC/"/>
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="Cloudflare" scheme="https://future-architect.github.io/tags/Cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>言語処理学会 (NLP2024) でポスター発表を行いました</title>
    <link href="https://future-architect.github.io/articles/20240326b/"/>
    <id>https://future-architect.github.io/articles/20240326b/</id>
    <published>2024-03-25T15:00:01.000Z</published>
    <updated>2024-03-28T03:47:12.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>みなさんこんにちは！フューチャー株式会社の岸波と申します。学生時代は自然言語処理、特に雑談対話システムの研究をしておりました。フューチャー入社後はStrategic AI Group (SAIG) の一員として、主に自然言語処理に関する研究開発や社会実装に取り組んでいます。</p><p>先日、<a href="https://www.anlp.jp/nlp2024/">言語処理学会第30回年次大会 (NLP2024)</a> に参加し、当社で取り組んだ研究内容についてポスター発表を行いました。</p><p>言語処理学会は自然言語処理分野における国内最大の学会で、ChatGPTをはじめとする大規模言語モデルが大きな注目を集めていることもあり、今年は参加者数・発表論文数が過去最多となりました。</p><p>当社はプラチナスポンサーとして参加し、スポンサーブースも出展しました。学会全体を通しての参加報告については<a href="/articles/20240328a/">言語処理学会 (NLP2024) 参加報告 </a>にまとめていますのでぜひお読みください！</p><p>このブログでは、主にポスター発表を行った研究の内容と、当日の発表の様子についてご紹介できればと思います。</p><h2 id="発表内容"><a href="#発表内容" class="headerlink" title="発表内容"></a>発表内容</h2><p>今回私たちは「<a href="https://www.anlp.jp/proceedings/annual_meeting/2024/pdf_dir/P10-13.pdf">機密情報検知における生成AIを用いたデータ拡張</a>」というタイトルで発表を行いました。研究の概要としては、文章中から機密情報 (この研究では企業名) を検知するタスクにおいて、生成AIを用いて事実性に捉われない多様なデータ拡張を行うことで、企業名の検知精度が大幅に向上したというものです。</p><p>日々新しい企業が誕生したり、既に存在する企業が新しい事業を展開したりと、企業に関する事実というのは永続的に増えていくものです。そのため、そのような新たに発生した事実に関しても、機密情報は機密情報として検知される必要があります。そこで、機密情報検知モデルを学習するためのデータは現時点で事実として正しいものに限定すべきではないのではないか、というアイディアのもと、事実性に捉われないデータ拡張手法を提案しました。</p><p>具体的には、ある企業名を含むような文脈を生成AIを用いて増やす手法、架空の企業名を生成AIを用いて増やす手法の二つを提案しています。生成AIが事実に反する内容を生成してしまう現象、いわゆるハルシネーションを逆手に取った手法です。</p><p>これらの手法でデータを拡張し、拡張したデータセットで機密情報検知モデルを学習した結果、企業名検知タスクのF1スコアが最大2.5%向上する結果が得られました。</p><p>発表資料はこちらです。</p><img src="/images/20240326b/poster0001-1.jpg" alt="機密情報検知における生成AIを用いたデータ拡張の概要、背景、本研究のアイデア、提案手法、実験" width="1200" height="1697" loading="lazy"><p>この研究で特に面白いと思っているポイントは以下の二つです。</p><p>一つは幅広い応用の可能性があることです。今回は企業名の検知に着目しましたが、提案している事実性に捉われないデータ拡張は、他の機密情報 (例えば人名など) のデータ拡張にも簡単に適用することができます。また、同様の考え方で文書分類や機械翻訳など、他の自然言語処理タスクにも応用できるかもしれません。</p><p>そしてもう一つは、人間が行うには少し難しいデータ拡張を生成AIを用いて行える可能性を示している点です。例えば「ユートピア食品」などの架空の企業名を考えるのは、数十個程度なら頑張ればできるかもしれないですが、数百・数千と大量にリストアップすることは人間には少し難しい作業です。それを生成AIを用いて行うことで、低コストでデータを拡張できるのは嬉しい話です。さらにこういったデータが実際に精度向上にも寄与するという点も面白いと感じています。</p><h2 id="当日の様子"><a href="#当日の様子" class="headerlink" title="当日の様子"></a>当日の様子</h2><p>ありがたいことに発表当日は多くの方にポスター会場へ足を運んでいただき、コメント・アドバイスをいただくことができました。以下はいただいたコメントの抜粋ですが、この他にも今後の研究に繋がるコメントを多数いただくことができ、大変有意義な時間でした。</p><ul><li>今までにない新しい考え方のデータ拡張だと感じた。それでいて性能も上がっており今後の可能性を感じた</li><li>他のデータ拡張手法との組み合わせや、拡張するデータ量の観点での分析ができそう</li><li>今回は企業名に着目しているが、同じ固有表現でも文脈に応じて機密情報ではなくなるケースや、そもそも固有表現ではない機密情報もあると思う。今後企業名以外に拡張していくうえで色々な展開がありそうだと感じた</li></ul><img src="/images/20240326b/1000018486.jpg" alt="1000018486.jpg" width="1200" height="836" loading="lazy"><img src="/images/20240326b/1000018487.jpg" alt="1000018487.jpg" width="1200" height="1079" loading="lazy"><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>フューチャーに入社してからは初めての言語処理学会参加でしたが、発表を通じて産学問わず様々な方々と交流することができ、今後のモチベーションにもつながる良い機会となりました。</p><p>生成AIのハルシネーションという一見課題として挙げられがちな特徴を逆手に取り、データ拡張に活用することが効果的だったのは非常に興味深く、今回の発表を通して新しい発想の生成AIの活用方法を提示できたかなと思います。</p><p>生成AIを筆頭に様々な業界で自然言語処理の需要が高まっていることもあり、フューチャーでも自然言語処理に関する研究開発・社会実装に力を入れています。そんな中で、今回の言語処理学会での発表を通してフューチャーの自然言語処理に関する取り組みを多くの方々に知っていただくことができて良かったです。</p><p>今後も継続的に発表していけるよう、引き続き研究開発などに取り組んでいければと思います。</p><p>最後に、SAIGでは自然言語処理の実社会応用を推進していくために、NLPリサーチエンジニア、NLPエンジニアを募集しています！<br>ご興味のある方、ぜひSAIGで一緒に働きましょう！</p><p>新卒採用 : <a href="https://www.future.co.jp/recruit/recruit/rec-fresh/">https://www.future.co.jp/recruit/recruit/rec-fresh/</a><br>キャリア採用 : <a href="https://www.future.co.jp/recruit/recruit/rec-career/">https://www.future.co.jp/recruit/recruit/rec-career/</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="機械学習" scheme="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/"/>
    
    <category term="NLP" scheme="https://future-architect.github.io/tags/NLP/"/>
    
    <category term="学会" scheme="https://future-architect.github.io/tags/%E5%AD%A6%E4%BC%9A/"/>
    
    <category term="LLM" scheme="https://future-architect.github.io/tags/LLM/"/>
    
    <category term="固有表現抽出" scheme="https://future-architect.github.io/tags/%E5%9B%BA%E6%9C%89%E8%A1%A8%E7%8F%BE%E6%8A%BD%E5%87%BA/"/>
    
    <category term="NLP2024" scheme="https://future-architect.github.io/tags/NLP2024/"/>
    
  </entry>
  
  <entry>
    <title>Terraformの実装コードを、動かしながら読む</title>
    <link href="https://future-architect.github.io/articles/20240326a/"/>
    <id>https://future-architect.github.io/articles/20240326a/</id>
    <published>2024-03-25T15:00:00.000Z</published>
    <updated>2024-03-26T00:49:16.622Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20240326a/top.png" alt="" width="800" height="539"><p><a href="/articles/20240311a/">Terraform連載2024</a> の10本目記事です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。CSIG（Cyber Security Innovation Group）の棚井です。</p><p>Terraform 連載ということで</p><ul><li>そういえば、実装コードは Go で書かれていたな</li><li>コマンドの使い方はインフラエンジニアの皆様が書いてくれるはずなので、コードリーディングしようかな</li></ul><p>との考えに至り、ソースコードリーディング自体をブログ化しました。<br>参考になる点が1つでもあれば幸いです。</p><h1 id="エディタの準備"><a href="#エディタの準備" class="headerlink" title="エディタの準備"></a>エディタの準備</h1><p>今回のコードリーディングでは VSCode を利用します。</p><p>Go のコードジャンプやテスト実行のため、以下の拡張機能を追加します。</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=golang.go">Go</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=766b.go-outliner">Go Outliner</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=premparihar.gotestexplorer">Go Test Explorer</a></li></ul><p>また、コードリーディングのお供として「GitHub Copilot」も追加します。<br>GitHub アカウントで Copilot を有効化する方法や、VSCode の拡張機能とリンクする方法については、ネット上に多数情報がありますのでそちらをご参照ください。（ex. <a href="https://docs.github.com/ja/copilot">GitHub Copilot のドキュメント</a>）</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot">GitHub Copilot</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-chat">GitHub Copilot Chat</a></li></ul><p>「コードリーディングで生成系AIを使うの？」という疑問を持たれた方向けへの回答として、GitHub Copilotには「コード生成機能」以外に、「コードの説明機能」があります。</p><p>使い方としては、</p><ol><li>解説して欲しいコードをハイライトする</li><li><code>Ctrl + i</code> によりCopilotのポップアップを表示する</li><li><code>/explain</code>を入力する</li></ol><p>の3ステップで利用可能です。</p><p>VSCodeで表示されている実コードベースで解説してくれますので、途中に詰まる部分があったとしても、Copilotのサポートにより大抵は独力で解決可能です。OSSのコードリーディングでは、まさにこの解説機能が非常に便利だと感じています。</p><h1 id="実行環境の準備"><a href="#実行環境の準備" class="headerlink" title="実行環境の準備"></a>実行環境の準備</h1><p>コードリーディング中には「実際に動かしてみないと、イメージがつきにくい処理」が見つかります。いざという時にローカル環境で動かせるように、Terraformのビルド、動作検証が可能な環境を準備します。</p><p>ソースコードはこちらの <a href="https://github.com/hashicorp/terraform/tree/main">hashicorp&#x2F;terraform</a> リポジトリに公開されています。<br>Goのバージョンを確認したところ、トップディレクトリ配下の <a href="https://github.com/hashicorp/terraform/blob/main/.go-version"><code>.go-version</code></a> に <code>1.22.1</code>（執筆時点）と記載されていることを確認しました。</p><p>執筆時点での <a href="https://go.dev/dl/">Go All releases</a> も <code>1.22.1</code> なので、最新のGoバージョンに対応していることが分かります。</p><blockquote><p>&#x3D;&#x3D; 宣伝 &#x3D;&#x3D;<br>FutureではGoリリース連載を実施しております。<br><a href="https://future-architect.github.io/articles/20240129a/">Go 1.22リリース連載始まります</a><br><a href="https://future-architect.github.io/articles/20240307a/">Goリリースノートから技術ブログを書く流れ基礎</a></p></blockquote><p>リポジトリ側でGoのバージョンが指定されているので、ローカル環境もそれに合わせて構築します。</p><p>ちなみに、私は <a href="https://asdf-vm.com/">asdf</a> を利用して開発言語のバージョン管理を行っています。asdf の利用方法は、左記の公式ドキュメント、および、こちらの解説記事（<a href="https://qiita.com/RuyPKG/items/d4ea8baab1e0a17ae927">asdf で開発言語と利用ツールのバージョン管理</a>）をご覧ください。</p><p><code>$ go version</code> 実行時に、<code>1.22.1</code> が表示されていれば、実行環境の準備は完了です。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.22.1 linux/amd64</span><br></pre></td></tr></table></figure><h1 id="リポジトリの取得、テスト実行"><a href="#リポジトリの取得、テスト実行" class="headerlink" title="リポジトリの取得、テスト実行"></a>リポジトリの取得、テスト実行</h1><p>それではさっそく、Terraform のソースコードを取得していきます。<br>といっても、ここでは <a href="https://github.com/hashicorp/terraform/tree/main">hashicorp&#x2F;terraform</a> リポジトリをクローンするだけです。</p><p>クローンに成功したら、まずはテストに通過するかを確認します。</p><details><summary>テスト実行ログ</summary><div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> terraform/</span><br><span class="line"></span><br><span class="line">$ go <span class="built_in">test</span> ./...</span><br><span class="line">?       github.com/hashicorp/terraform/internal/backend [no <span class="built_in">test</span> files]</span><br><span class="line">ok      github.com/hashicorp/terraform  0.065s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/addrs   0.030s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/backend/backendbase     0.007s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/backend/backendrun      0.009s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/backend/init    0.051s</span><br><span class="line">?       github.com/hashicorp/terraform/internal/cloudplugin/cloudproto1 [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/cloudplugin/mock_cloudproto1    [no <span class="built_in">test</span> files]</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/backend/local   6.211s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/backend/remote  4.009s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/backend/remote-state/http       7.266s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/backend/remote-state/inmem      0.010s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/builtin/providers/terraform     0.150s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/builtin/provisioners/file       0.008s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/builtin/provisioners/local-exec 0.196s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/builtin/provisioners/remote-exec        2.050s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/checks  0.060s</span><br><span class="line">?       github.com/hashicorp/terraform/internal/command/jsonformat/collections  [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/command/jsonformat/computed     [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/command/jsonformat/jsondiff     [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/command/jsonformat/structured   [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/command/testing [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/e2e     [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/experiments     [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/getmodules      [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/grpcwrap        [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/lang/langrefs   [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/lang/marks      [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/lang/types      [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/modsdir [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/plans/planproto [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/plugin/mock_proto       [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/plugin6/mock_proto      [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/provider-simple [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/provider-simple/main    [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/provider-simple-v6      [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/provider-simple-v6/main [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/provider-terraform/main [no <span class="built_in">test</span> files]</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/cloud   36.011s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/cloud/cloudplan 0.111s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/cloud/e2e       8.538s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/cloudplugin     0.239s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/cloudplugin/cloudplugin1        0.029s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/collections     0.013s</span><br><span class="line">?       github.com/hashicorp/terraform/internal/providers/testing       [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/provisioner-local-exec/main     [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/provisioners    [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/registry/test   [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/replacefile     [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/rpcapi/dynrpcserver     [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/rpcapi/dynrpcserver/generator   [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/rpcapi/terraform1       [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/stacks/stackconfig/stackconfigtypes     [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/stacks/stackconfig/typeexpr     [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/schemarepo/loadschemas  [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/schemarepo      [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/stacks/stackaddrs       [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/stacks/stackruntime/hooks       [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/stacks/stackruntime/testing     [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/stacks/stackutils       [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/tfplugin5       [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/internal/tfplugin6       [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/tools/loggraphdiff       [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/hashicorp/terraform/tools/protobuf-compile   [no <span class="built_in">test</span> files]</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command 88.238s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/arguments       0.014s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/cliconfig       0.027s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/clistate        0.010s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/e2etest 30.692s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/format  0.010s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/jsonchecks      0.009s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/jsonconfig      0.013s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/jsonformat      0.111s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/jsonformat/computed/renderers   0.035s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/jsonformat/differ       0.058s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/jsonformat/structured/attribute_path    0.014s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/jsonfunction    0.019s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/jsonplan        0.028s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/jsonprovider    0.024s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/jsonstate       0.036s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/views   3.473s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/views/json      0.053s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/webbrowser      0.016s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/command/workdir 0.029s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/communicator    1.049s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/communicator/remote     0.010s [no tests to run]</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/communicator/shared     0.005s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/communicator/ssh        3.183s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/communicator/winrm      0.045s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/configs 7.155s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/configs/configload      0.888s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/configs/configschema    0.038s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/configs/configtesting   0.004s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/configs/hcl2shim        0.036s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/copy    0.012s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/dag     2.168s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/depsfile        0.214s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/didyoumean      0.012s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/genconfig       0.051s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/getmodules/moduleaddrs  0.063s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/getproviders    4.428s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/getproviders/providerreqs       0.101s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/helper/slowmessage      0.105s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/httpclient      0.020s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/initwd  0.312s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/instances       0.019s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/ipaddr  0.026s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/lang    0.250s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/lang/blocktoattr        0.016s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/lang/funcs      0.792s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/lang/globalref  0.326s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/logging 0.004s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/moduledeps      0.021s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/moduletest      0.203s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/moduletest/config       0.028s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/moduletest/hcl  0.045s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/moduletest/mocking      0.025s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/namedvals       0.010s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/plans   0.018s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/plans/deferring 0.010s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/plans/objchange 0.115s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/plans/planfile  0.331s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/plugin  0.040s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/plugin/convert  0.027s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/plugin/discovery        0.013s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/plugin6 0.028s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/plugin6/convert 0.022s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/promising       0.041s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/providercache   0.232s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/providers       0.012s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/refactoring     0.261s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/registry        3.826s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/registry/regsrc 0.008s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/registry/response       0.010s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/releaseauth     0.167s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/repl    0.096s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/rpcapi  0.263s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/stacks/stackconfig      0.017s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/stacks/stackplan        0.029s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/stacks/stackruntime     0.484s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/stacks/stackruntime/internal/stackeval  1.489s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/stacks/stackstate       0.022s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/stacks/stackstate/statekeys     0.028s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/stacks/tfstackdata1     0.017s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/states  0.018s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/states/remote   0.032s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/states/statefile        0.070s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/states/statemgr 5.951s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/terminal        0.005s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/terraform       8.988s</span><br><span class="line">ok      github.com/hashicorp/terraform/internal/tfdiags 0.012s</span><br><span class="line">ok      github.com/hashicorp/terraform/version  0.003s</span><br></pre></td></tr></table></figure></div></details><p>テストを実行してみたところ、<code>[no test files]</code> が多数見つかりました。<br>少し気になりますので、テストのカバレッジを見てみます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -cover</span><br><span class="line">Terraform has no <span class="built_in">command</span> named <span class="string">&quot;bar&quot;</span>.</span><br><span class="line"></span><br><span class="line">To see all of Terraform<span class="string">&#x27;s top-level commands, run:</span></span><br><span class="line"><span class="string">  terraform -help</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">PASS</span></span><br><span class="line"><span class="string">coverage: 36.7% of statements</span></span><br><span class="line"><span class="string">ok      github.com/hashicorp/terraform  0.049s</span></span><br></pre></td></tr></table></figure><p>上記ログには</p><blockquote><p>coverage: 36.7% of statements</p></blockquote><p>とありますので、Terraform 実装コードのテストカバレッジ率は <code>36.7%</code> です。<br>数字の是非はさておいて、テストが通過することは確認できました。</p><h1 id="ビルドして動かしてみる"><a href="#ビルドして動かしてみる" class="headerlink" title="ビルドして動かしてみる"></a>ビルドして動かしてみる</h1><p><code>terraform</code> がコマンドの1つである以上、「ビルドして動かせる」はずなので、実際に試してみます。</p><p>Go言語では王道の <a href="https://github.com/hashicorp/terraform/blob/main/Makefile">Makefile</a> を見たところ、<code>go build</code> に相当しそうなコマンドは見つかりません。<br>ただし、いくつかのコマンドが <code>$(CURDIR)/scripts/</code> 配下のシェルスクリプトを参照していますので、当該ディレクトリにお目当てのファイルがないかを確認します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l scripts/</span><br><span class="line">total 40</span><br><span class="line">-rwxr-xr-x 1 blog-user blog-user 2853 Mar 25 05:19 build.sh</span><br><span class="line">-rwxr-xr-x 1 blog-user blog-user  958 Mar 24 22:52 changelog-links.sh</span><br><span class="line">-rwxr-xr-x 1 blog-user blog-user  610 Mar 24 22:52 copyright.sh</span><br><span class="line">-rwxr-xr-x 1 blog-user blog-user 1171 Mar 24 22:52 debug-terraform</span><br><span class="line">-rwxr-xr-x 1 blog-user blog-user  344 Mar 24 22:52 exhaustive.sh</span><br><span class="line">-rwxr-xr-x 1 blog-user blog-user  401 Mar 24 22:52 gofmtcheck.sh</span><br><span class="line">-rwxr-xr-x 1 blog-user blog-user  351 Mar 24 22:52 gogetcookie.sh</span><br><span class="line">-rwxr-xr-x 1 blog-user blog-user 2730 Mar 24 22:52 goimportscheck.sh</span><br><span class="line">-rwxr-xr-x 1 blog-user blog-user  666 Mar 24 22:52 staticcheck.sh</span><br><span class="line">-rwxr-xr-x 1 blog-user blog-user 1096 Mar 24 22:52 syncdeps.sh</span><br></pre></td></tr></table></figure><p><code>scripts/</code> 配下に、<a href="https://github.com/hashicorp/terraform/blob/main/scripts/build.sh"><code>build.sh</code></a> というシェルスクリプトが見つかりました。<br>また、VSCode で <code>Ctrl + Shift + f</code> を実行して <code>build.sh</code> を検索すると、<a href="https://github.com/hashicorp/terraform/blob/main/Dockerfile#L23">Dockerfile</a> の中でこのシェルスクリプトが呼ばれていることも確認できます。</p><p>シェル冒頭に以下の記載があり、<code>bash</code> によリコールされた後、1つ上のディレクトリでビルドプロセスを動かしていることが分かります。</p><figure class="highlight sh"><figcaption><span>build.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Get the parent directory of where this script is.</span></span><br><span class="line">SOURCE=<span class="string">&quot;<span class="variable">$&#123;BASH_SOURCE[0]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">while</span> [ -h <span class="string">&quot;<span class="variable">$SOURCE</span>&quot;</span> ] ; <span class="keyword">do</span> SOURCE=<span class="string">&quot;<span class="subst">$(readlink <span class="string">&quot;<span class="variable">$SOURCE</span>&quot;</span>)</span>&quot;</span>; <span class="keyword">done</span></span><br><span class="line">DIR=<span class="string">&quot;<span class="subst">$( cd -P <span class="string">&quot;<span class="subst">$( dirname <span class="string">&quot;<span class="variable">$SOURCE</span>&quot;</span> )</span>/..&quot;</span> &amp;&amp; pwd )</span>&quot;</span></span><br></pre></td></tr></table></figure><p>上記を踏まえて、さっそくビルドしてみます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ /usr/bin/bash build.sh</span><br><span class="line">==&gt; Removing old directory...</span><br><span class="line">==&gt; Installing gox...</span><br><span class="line">==&gt; Building...</span><br><span class="line">Number of parallel builds: 11</span><br><span class="line"></span><br><span class="line">--&gt;   solaris/amd64: github.com/hashicorp/terraform</span><br><span class="line">--&gt;   windows/amd64: github.com/hashicorp/terraform</span><br><span class="line">--&gt;     freebsd/arm: github.com/hashicorp/terraform</span><br><span class="line">--&gt;     openbsd/386: github.com/hashicorp/terraform</span><br><span class="line">--&gt;   openbsd/amd64: github.com/hashicorp/terraform</span><br><span class="line">--&gt;       linux/arm: github.com/hashicorp/terraform</span><br><span class="line">--&gt;       linux/386: github.com/hashicorp/terraform</span><br><span class="line">--&gt;     freebsd/386: github.com/hashicorp/terraform</span><br><span class="line">--&gt;     linux/amd64: github.com/hashicorp/terraform</span><br><span class="line">--&gt;   freebsd/amd64: github.com/hashicorp/terraform</span><br><span class="line">--&gt;     windows/386: github.com/hashicorp/terraform</span><br></pre></td></tr></table></figure><p>計11個のビルドプロセスが並列で動いています。</p><p>このまましばらく放置していれば、11環境分すべての <code>terraform</code> 実行バイナリが作成されるのですが、私のPC環境では以下の問題が発生しました。</p><img src="/images/20240326a/disc.png" alt="disc.png" width="544" height="170" loading="lazy"><p>リポジトリからクローンしたソースコード全体と、ビルドで生成した実行バイナリのダブルパンチにより、ローカル PC が悲鳴を上げていました。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">du</span> -h terraform/bin/terraform</span><br><span class="line">119M    terraform</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">du</span> -h terraform/</span><br><span class="line">...</span><br><span class="line">820M    terraform/</span><br></pre></td></tr></table></figure><p>何とかならないか？と <code>build.sh</code> を読み進めたところ、環境変数 <code>TF_DEV</code> に値を設定すれば、ビルド環境だけの実行バイナリを生成してくれるとありました。</p><figure class="highlight sh"><figcaption><span>build.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># If its dev mode, only build for ourself</span></span><br><span class="line"><span class="keyword">if</span> [[ -n <span class="string">&quot;<span class="variable">$&#123;TF_DEV&#125;</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    XC_OS=$(go <span class="built_in">env</span> GOOS)</span><br><span class="line">    XC_ARCH=$(go <span class="built_in">env</span> GOARCH)</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>また、<code>TF_DEV</code> を設定しない場合には、ビルドした実行バイナリのパッケージ化が行われるとの記載も見つかりました。</p><figure class="highlight sh"><figcaption><span>build.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;TF_DEV&#125;</span>x&quot;</span> = <span class="string">&quot;x&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># Zip and copy to the dist dir</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;==&gt; Packaging...&quot;</span></span><br><span class="line">    <span class="keyword">for</span> PLATFORM <span class="keyword">in</span> $(find ./pkg -mindepth 1 -maxdepth 1 -<span class="built_in">type</span> d); <span class="keyword">do</span></span><br><span class="line">        OSARCH=$(<span class="built_in">basename</span> <span class="variable">$&#123;PLATFORM&#125;</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;--&gt; <span class="variable">$&#123;OSARCH&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">pushd</span> <span class="variable">$PLATFORM</span> &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        zip ../<span class="variable">$&#123;OSARCH&#125;</span>.zip ./*</span><br><span class="line">        <span class="built_in">popd</span> &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>今回はローカル環境でのみビルド、動作検証ができれば十分ですので、環境変数 <code>TF_DEV</code> を設定し再ビルドします。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> TF_DEV=<span class="built_in">yes</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$TF_DEV</span></span><br><span class="line"><span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">$ go <span class="built_in">env</span> GOOS</span><br><span class="line">linux</span><br><span class="line"></span><br><span class="line">$ go <span class="built_in">env</span> GOARCH</span><br><span class="line">amd64</span><br><span class="line"></span><br><span class="line">$ /usr/bin/bash build.sh</span><br><span class="line">==&gt; Removing old directory...</span><br><span class="line">==&gt; Building...</span><br><span class="line">Number of parallel builds: 11</span><br><span class="line"></span><br><span class="line">--&gt;     linux/amd64: github.com/hashicorp/terraform</span><br><span class="line">==&gt; Creating GOPATH/bin directory...</span><br><span class="line"></span><br><span class="line">==&gt; Results:</span><br><span class="line">total 119M</span><br><span class="line">-rwxr-xr-x 1 blog-user blog-user 119M Mar 25 03:45 terraform</span><br></pre></td></tr></table></figure><p>無事に、<code>linux/amd64</code> 分のビルドに成功しました。<br>実行バイナリは、以下2つのディレクトリに出力されています。</p><ul><li>terraform&#x2F;bin</li><li>GOPATH&#x2F;bin</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./terraform/bin/terraform version</span><br><span class="line">Terraform v1.9.0-dev</span><br><span class="line">on linux_amd64</span><br></pre></td></tr></table></figure><p>ここまでの操作により、ソースコードのビルドから、コマンドの実行手順まで確認できました。</p><p>続いて、コードに手を加えた場合には、ビルド後のコマンド中身に反映されていることを検証してみます。</p><p>サブコマンドの <code>version</code> が分かりやすいので、以下のログを追加します。<br>（<a href="https://github.com/hashicorp/terraform/blob/main/internal/command/version.go#L81-L84">対応箇所</a>）</p><figure class="highlight go"><figcaption><span>version.go</span></figcaption><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">fmt.Fprintf(&amp;versionString, <span class="string">&quot;Terraform v%s&quot;</span>, c.Version)</span><br><span class="line"><span class="keyword">if</span> c.VersionPrerelease != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"> fmt.Fprintf(&amp;versionString, <span class="string">&quot;-%s&quot;</span>, c.VersionPrerelease)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>↓</p><figure class="highlight go"><figcaption><span>version.go</span></figcaption><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">fmt.Println(<span class="string">&quot;バージョン確認コマンドを実行してみた。&quot;</span>) <span class="comment">// 追加</span></span><br><span class="line">fmt.Fprintf(&amp;versionString, <span class="string">&quot;Terraform v%s&quot;</span>, c.Version)</span><br><span class="line"><span class="keyword">if</span> c.VersionPrerelease != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"> fmt.Fprintf(&amp;versionString, <span class="string">&quot;-%s&quot;</span>, c.VersionPrerelease)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>この1行が追記された状態で実行バイナリをビルドすると、コマンドのログ出力が増えていることを確認できます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ /usr/bin/bash ./terraform/scripts/build.sh</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ ./terraform/bin/terraform version</span><br><span class="line">バージョン確認コマンドを実行してみた。</span><br><span class="line">Terraform v1.9.0-dev</span><br><span class="line">on linux_amd64</span><br></pre></td></tr></table></figure><h1 id="エントリーポイントから見ていく"><a href="#エントリーポイントから見ていく" class="headerlink" title="エントリーポイントから見ていく"></a>エントリーポイントから見ていく</h1><p>ここまでが事前準備です。<br>さっそく、Terraform の実コードを見ていきます。</p><p>まずはプログラムの始まりとなる「エントリーポイント」を探します。</p><p>Go であれば</p><ul><li>main.go</li><li>func main() {…}</li></ul><p>がプログラムのエントリーポイントです。<br>トップディレクトリ配下の「<a href="https://github.com/hashicorp/terraform/blob/main/main.go#L63-L65">terraform&#x2F;main.go</a>」に以下の記述が見つかりました。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> os.Exit(realMain())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初手、<code>main()</code> の中で <code>realMain()</code>（直訳すると「本当のmain」）を呼び出しているようです。<br>呼び出し先の関数を見ると、今度は defer で <code>logging.PanicHandler()</code> を呼び出しているようなので、この関数の中身を見てみます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">realMain</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"> <span class="keyword">defer</span> logging.PanicHandler()</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VSCode のコードジャンプが有効となっていれば、Ctrl を押しながら対象関数を左クリックすることにより、関数の定義元にジャンプすることができます。</p><h2 id="PanicHandler"><a href="#PanicHandler" class="headerlink" title="PanicHandler()"></a><code>PanicHandler()</code></h2><p>「<a href="https://github.com/hashicorp/terraform/blob/main/internal/logging/panic.go#L41">PanicHandler()の実装</a>」を見ますと、<strong>TERRAFORM CRASH</strong> という仰々しい言葉が沢山の <code>!</code> で囲まれていることが分かります。<br>通常のインフラ構築、運用保守作業にてこのようなメッセージをお目にかかることは、まずないと思います。私は今回、初めてこんなメッセージが仕込まれていることを知りました。</p><p>メッセージ内容を日本語訳しますと「Terraform が壊れたよ！ 公式リポジトリの issue に記票して」とありますので、さっそく、壊してみます。</p><p>panic 発生時に <strong>TERRAFORM CRASH</strong> が表示されるようなので、エントリーポイントの直後で強制的に panic を起こす1行を入れます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">realMain</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"> <span class="keyword">defer</span> logging.PanicHandler()</span><br><span class="line"> <span class="built_in">panic</span>(<span class="string">&quot;バルス！&quot;</span>)</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また、<code>terraform</code> のビルド時に渡される <code>GOFLAGS</code> を「<a href="https://github.com/hashicorp/terraform/blob/main/scripts/build.sh#L41-L42">リポジトリのコード</a>」のまま利用した場合、ビルド環境のフルパスが表示されてしまいますので、以下の <code>-trimpath</code> フラグを追加します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOFLAGS=<span class="string">&quot;-mod=readonly&quot;</span></span><br></pre></td></tr></table></figure><p>↓</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOFLAGS=<span class="string">&quot;-mod=readonly -trimpath&quot;</span></span><br></pre></td></tr></table></figure><p>この状態でソースコードのビルド、及び、コマンドの実行を試してみます。</p><p>サブコマンドを与えずに <code>terraform</code> を実行した場合、本来ならば <code>help</code> が表示されますが、無事に「壊す」ことができました。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./terraform</span><br><span class="line"></span><br><span class="line">!!!!!!!!!!!!!!!!!!!!!!!!!!! TERRAFORM CRASH !!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><br><span class="line"></span><br><span class="line">Terraform crashed! This is always indicative of a bug within Terraform.</span><br><span class="line">Please report the crash with Terraform[1] so that we can fix this.</span><br><span class="line"></span><br><span class="line">When reporting bugs, please include your terraform version, the stack trace</span><br><span class="line">shown below, and any additional information <span class="built_in">which</span> may <span class="built_in">help</span> replicate the issue.</span><br><span class="line"></span><br><span class="line">[1]: https://github.com/hashicorp/terraform/issues</span><br><span class="line"></span><br><span class="line">!!!!!!!!!!!!!!!!!!!!!!!!!!! TERRAFORM CRASH !!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><br><span class="line"></span><br><span class="line">panic: バルス！</span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">runtime/debug.Stack()</span><br><span class="line">        runtime/debug/stack.go:24 +0x5e</span><br><span class="line">github.com/hashicorp/terraform/internal/logging.PanicHandler()</span><br><span class="line">        github.com/hashicorp/terraform/internal/logging/panic.go:84 +0x18b</span><br><span class="line">panic(&#123;0x1ade400?, 0x249fc00?&#125;)</span><br><span class="line">        runtime/panic.go:770 +0x132</span><br><span class="line">main.realMain()</span><br><span class="line">        github.com/hashicorp/terraform/main.go:69 +0x47</span><br><span class="line">main.main()</span><br><span class="line">        github.com/hashicorp/terraform/main.go:64 +0x13</span><br></pre></td></tr></table></figure><p><code>terraform</code> コマンドの実行時、何らかの理由により panic が起きてしまった場合には、<strong>TERRAFORM CRASH</strong> のメッセージ表示と issue の起票催促、デバックトレースが表示されることを確認できました。</p><p>それでは、意図的に仕込んだ panic の1行を削除して、再ビルドまで完了したら、次の処理を見ていきます。</p><h2 id="openTelemetryInit"><a href="#openTelemetryInit" class="headerlink" title="openTelemetryInit()"></a><code>openTelemetryInit()</code></h2><p>次の実装として、Open Telemetry を扱う処理が見つかります。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"></span><br><span class="line">err = openTelemetryInit()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="comment">// openTelemetryInit can only fail if Terraform was run with an</span></span><br><span class="line">  <span class="comment">// explicit environment variable to enable telemetry collection,</span></span><br><span class="line">  <span class="comment">// so in typical use we cannot get here.</span></span><br><span class="line">  Ui.Error(fmt.Sprintf(<span class="string">&quot;Could not initialize telemetry: %s&quot;</span>, err)) </span><br><span class="line">  Ui.Error(fmt.Sprintf(<span class="string">&quot;Unset environment variable %s if you don&#x27;t intend to collect telemetry from Terraform.&quot;</span>, openTelemetryExporterEnvVar))</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ctx context.Context</span><br><span class="line"><span class="keyword">var</span> otelSpan trace.Span</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// At minimum we emit a span covering the entire command execution.</span></span><br><span class="line">  _, displayArgs := shquot.POSIXShellSplit(os.Args)</span><br><span class="line">  ctx, otelSpan = tracer.Start(context.Background(), fmt.Sprintf(<span class="string">&quot;terraform %s&quot;</span>, displayArgs))</span><br><span class="line">  <span class="keyword">defer</span> otelSpan.End()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>openTelemetryInit()</code> の定義元にコードジャンプしますと、トップディレクトリ配下の「<a href="https://github.com/hashicorp/terraform/blob/main/telemetry.go#L56-L63">terraform&#x2F;telemetry.go</a>」にて詳細内容が説明されています。</p><p>まず、実装コードのコメントには以下の記載があります。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// If this environment variable is set to &quot;otlp&quot; when running Terraform CLI</span></span><br><span class="line"><span class="comment">// then we&#x27;ll enable an experimental OTLP trace exporter.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// BEWARE! This is not a committed external interface.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Everything about this is experimental and subject to change in future</span></span><br><span class="line"><span class="comment">// releases. Do not depend on anything about the structure of this output.</span></span><br><span class="line"><span class="comment">// This mechanism might be removed altogether if a different strategy seems</span></span><br><span class="line"><span class="comment">// better based on experience with this experiment.</span></span><br><span class="line"><span class="keyword">const</span> openTelemetryExporterEnvVar = <span class="string">&quot;OTEL_TRACES_EXPORTER&quot;</span></span><br></pre></td></tr></table></figure><p>Terraform の実行環境にて、環境変数として以下を設定した場合のみ、Open Telemetry 機能が有効となるようです。<br><code>otlp</code> 以外の値（値ナシも含む）が設定された場合には、この機能は有効化されずに関数の呼び出し元へ戻ります。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> OTEL_TRACES_EXPORTER=otlp</span><br></pre></td></tr></table></figure><p>コメントには「<a href="https://opentelemetry.io/docs/specs/otel/protocol/exporter/#configuration-options">OpenTelemetry Protocol Exporter Configuration Options</a>」へのリンクが添付されています。</p><p>ただし、Open Telemetry について本記事では立ち入りません。<br>気になる方は、以下の公式ドキュメント・日本語記事・翻訳書籍をご参照ください。</p><ul><li>公式ドキュメント<ul><li><a href="https://opentelemetry.io/docs/what-is-opentelemetry/">What is OpenTelemetry?</a></li></ul></li><li>日本語記事<ul><li><a href="https://zenn.dev/yuta28/articles/what-is-opentelemetry">OpenTelemetryに触れてみた</a></li></ul></li><li>翻訳書籍<ul><li><a href="https://www.oreilly.co.jp/books/9784814400126/">オブザーバビリティ・エンジニアリング</a></li></ul></li></ul><p>ここでは、実装コードを参照する中で、Terraform には「環境変数の <code>OTEL_TRACES_EXPORTER</code> に <code>otlp</code> を与えることで、Open Telemetry が有効化される」ことが分かりました。</p><p>このような知識はもちろん公式ドキュメントを漁れば見つかるのだとは思いますが、自分で探索して見つけたときの「自力で発見できた感覚」を味わえるのが、OSS コードリーディングの面白さだと私は感じております。少々、蛇足に過ぎましたので、元のコードに戻ります。</p><h2 id="tmpLogPath"><a href="#tmpLogPath" class="headerlink" title="tmpLogPath"></a><code>tmpLogPath</code></h2><p>続いて、<code>tmpLogPath</code> という「一時的なログファイルの出力先」になりそうな変数が見つかりました。<br>適切な変数名は「適切なメンタルモデル」を脳内に作るために重要なので、こういった側面においても、OSS のコードリーディングでは書籍からは得られない実践知が詰っていると感じます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">tmpLogPath := os.Getenv(envTmpLogPath)</span><br><span class="line"><span class="keyword">if</span> tmpLogPath != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">  f, err := os.OpenFile(tmpLogPath, os.O_RDWR|os.O_APPEND, <span class="number">0666</span>)</span><br><span class="line">  <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">    log.Printf(<span class="string">&quot;[DEBUG] Adding temp file log sink: %s&quot;</span>, f.Name())</span><br><span class="line">    logging.RegisterSink(f)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    log.Printf(<span class="string">&quot;[ERROR] Could not open temp log file: %v&quot;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここの実装では、環境変数の <code>TF_TEMP_LOG_PATH</code> で指定したファイルに、ログを追記する処理が定義されています。<br>それでは、ログの出力先を指定して、出力ログと実装コードの対応を確認していきます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ログの出力先を /tmp/tf.log に指定</span></span><br><span class="line"><span class="built_in">export</span> TF_TEMP_LOG_PATH=<span class="string">&quot;/tmp/tf.log&quot;</span></span><br></pre></td></tr></table></figure><p>ログ出力先の環境変数を設定してから任意の <code>terraform</code> コマンドを実行すると、ファイルには以下のログが追記されます。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-03-25T05:07:16.800+0900 [INFO]  Terraform version: 1.9.0 dev</span><br><span class="line">2024-03-25T05:07:16.800+0900 [DEBUG] using github.com/hashicorp/go-tfe v1.41.0</span><br><span class="line">2024-03-25T05:07:16.800+0900 [DEBUG] using github.com/hashicorp/hcl/v2 v2.20.0</span><br><span class="line">2024-03-25T05:07:16.800+0900 [DEBUG] using github.com/hashicorp/terraform-svchost v0.1.1</span><br><span class="line">2024-03-25T05:07:16.800+0900 [DEBUG] using github.com/zclconf/go-cty v1.14.3</span><br><span class="line">2024-03-25T05:07:16.800+0900 [INFO]  Go runtime version: go1.22.1</span><br><span class="line">2024-03-25T05:07:16.800+0900 [INFO]  CLI args: []string&#123;&quot;./terraform&quot;, &quot;version&quot;&#125;</span><br><span class="line">2024-03-25T05:07:16.800+0900 [TRACE] Stdout is a terminal of width 125</span><br><span class="line">2024-03-25T05:07:16.800+0900 [TRACE] Stderr is a terminal of width 125</span><br><span class="line">2024-03-25T05:07:16.800+0900 [TRACE] Stdin is a terminal</span><br><span class="line">2024-03-25T05:07:16.800+0900 [DEBUG] Attempting to open CLI config file: /home/blog-user/.terraformrc</span><br><span class="line">2024-03-25T05:07:16.800+0900 [DEBUG] File doesn&#x27;t exist, but doesn&#x27;t need to. Ignoring.</span><br><span class="line">2024-03-25T05:07:16.800+0900 [DEBUG] ignoring non-existing provider search directory terraform.d/plugins</span><br><span class="line">2024-03-25T05:07:16.800+0900 [DEBUG] ignoring non-existing provider search directory /home/blog-user/.terraform.d/plugins</span><br><span class="line">2024-03-25T05:07:16.800+0900 [DEBUG] ignoring non-existing provider search directory /home/blog-user/.local/share/terraform/plugins</span><br><span class="line">2024-03-25T05:07:16.800+0900 [DEBUG] ignoring non-existing provider search directory /usr/local/share/terraform/plugins</span><br><span class="line">2024-03-25T05:07:16.800+0900 [DEBUG] ignoring non-existing provider search directory /usr/share/terraform/plugins</span><br><span class="line">2024-03-25T05:07:16.800+0900 [DEBUG] ignoring non-existing provider search directory /var/lib/snapd/desktop/terraform/plugins</span><br><span class="line">2024-03-25T05:07:16.801+0900 [INFO]  CLI command args: []string&#123;&quot;version&quot;&#125;</span><br></pre></td></tr></table></figure><p>これらのログと実装コードの対応を見ますと、<code>TF_TEMP_LOG_PATH</code> を設定した「<a href="https://github.com/hashicorp/terraform/blob/main/main.go#L103-L134">直後の処理内容</a>」が、そのままログとして格納されていることが分かります。</p><p>例えば、<code>version.InterestingDependencies()</code> により取得された「<a href="https://github.com/hashicorp/terraform/blob/main/version/dependencies.go#L11-L16">依存モジュールのバージョン情報</a>」は、以下のように記録されています。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-03-25T05:07:16.800+0900 [DEBUG] using github.com/hashicorp/go-tfe v1.41.0</span><br><span class="line">2024-03-25T05:07:16.800+0900 [DEBUG] using github.com/hashicorp/hcl/v2 v2.20.0</span><br><span class="line">2024-03-25T05:07:16.800+0900 [DEBUG] using github.com/hashicorp/terraform-svchost v0.1.1</span><br><span class="line">2024-03-25T05:07:16.800+0900 [DEBUG] using github.com/zclconf/go-cty v1.14.3</span><br></pre></td></tr></table></figure><p>ログの対応を1つ1つ、実装コードと突き合わせてみますと、以下に対応するログが出力されていないことが分かります。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ExperimentsAllowed() &#123;</span><br><span class="line">  log.Printf(<span class="string">&quot;[INFO] This build of Terraform allows using experimental features&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ExperimentsAllowed()</code> の定義にコードジャンプすると、「<a href="https://github.com/hashicorp/terraform/blob/main/experiments.go#L25">terraform&#x2F;experiments.go</a>」のコメントとして、この関数を有効化する方法（返り値がtrueにする方法）が記載されています。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// experimentsAllowed can be set to any non-empty string using Go linker</span></span><br><span class="line"><span class="comment">// arguments in order to enable the use of experimental features for a</span></span><br><span class="line"><span class="comment">// particular Terraform build:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   go install -ldflags=&quot;-X &#x27;main.experimentsAllowed=yes&#x27;&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// By default this variable is initialized as empty, in which case</span></span><br><span class="line"><span class="comment">// experimental features are not available.</span></span><br></pre></td></tr></table></figure><p>コメントの内容に従うと、<code>terraform</code> のビルド時に</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">go install -ldflags=<span class="string">&quot;-X &#x27;main.experimentsAllowed=yes&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p>を混ぜ込むことにより、<code>experiments</code>（実験的機能）を有効化できるようです。</p><p>「<a href="https://github.com/hashicorp/terraform/blob/main/scripts/build.sh">scripts&#x2F;build.sh</a>」を確認すると、<code>-ldflags</code> に渡される値は以下のように定義されていることが分かります。<code>TF_RELEASE</code> に値を設定した場合のみ、<code>gox -ldflags &quot;&quot;$&#123;LD_FLAGS&#125;&quot;&quot;</code> が「<a href="https://github.com/hashicorp/terraform/blob/main/scripts/build.sh#L44-L62">ビルド時に追加</a>」されています。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># In release mode we don&#x27;t want debug information in the binary and we don&#x27;t</span></span><br><span class="line"><span class="comment"># want the -dev version marker</span></span><br><span class="line"><span class="keyword">if</span> [[ -n <span class="string">&quot;<span class="variable">$&#123;TF_RELEASE&#125;</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    LD_FLAGS=<span class="string">&quot;-s -w -X &#x27;github.com/hashicorp/terraform/version.dev=no&#x27;&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>今回は <code>TF_RELEASE</code> を利用しないので、以下の分岐を追加します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ -n <span class="string">&quot;<span class="variable">$&#123;TF_RELEASE&#125;</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    LD_FLAGS=<span class="string">&quot;-s -w -X &#x27;github.com/hashicorp/terraform/version.dev=no&#x27;&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    LD_FLAGS=<span class="string">&quot;-X &#x27;main.experimentsAllowed=yes&#x27;&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>この状態で実行バイナリをビルドし、任意の <code>terraform</code> コマンドを実行すると、ログファイルに以下の1文が追記されることを確認できます。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">[INFO]  This build of Terraform allows using experimental features</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>experiments</code> を有効化することにより、何かしらの実験的コマンドが利用可能となったのだと思います。しかし、ここまでのコードリーディングの範囲では「どのような機能が有効化されたのか？」についての情報に遭遇していないため、<code>ExperimentsAllowed()</code> の探索はここまでとします。</p><h2 id="terminal-Init"><a href="#terminal-Init" class="headerlink" title="terminal.Init()"></a><code>terminal.Init()</code></h2><p>コードリーディングとしては、ログ後半に注目してみます。<br>ここでは、ターミナルを初期化しているような <code>terminal.Init()</code> という関数と、その関数の返り値を利用して</p><ul><li>標準入力</li><li>標準出力</li><li>標準エラー出力</li></ul><p>のそれぞれに対して、<code>IsXXX()</code> の方式で「ターミナルであるか、否か」を判断している以下の実装が見つかります。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">streams, err := terminal.Init()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  Ui.Error(fmt.Sprintf(<span class="string">&quot;Failed to configure the terminal: %s&quot;</span>, err))</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> streams.Stdout.IsTerminal() &#123;</span><br><span class="line">  log.Printf(<span class="string">&quot;[TRACE] Stdout is a terminal of width %d&quot;</span>, streams.Stdout.Columns())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  log.Printf(<span class="string">&quot;[TRACE] Stdout is not a terminal&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> streams.Stderr.IsTerminal() &#123;</span><br><span class="line">  log.Printf(<span class="string">&quot;[TRACE] Stderr is a terminal of width %d&quot;</span>, streams.Stderr.Columns())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  log.Printf(<span class="string">&quot;[TRACE] Stderr is not a terminal&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> streams.Stdin.IsTerminal() &#123;</span><br><span class="line">  log.Printf(<span class="string">&quot;[TRACE] Stdin is a terminal&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  log.Printf(<span class="string">&quot;[TRACE] Stdin is not a terminal&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>terminal.Init()</code> の定義元にコードジャンプすると、こちらも「<a href="https://github.com/hashicorp/terraform/blob/main/internal/terminal/streams.go#L4-L17">長文コメント</a>」で実装内容、実装意図が説明されています。</p><p>コマンドの実行環境は <code>terraform</code> が正しく入力・出力を扱える環境なのか、この terminal パッケージ内にて確認処理を行っています。普段、ツールやコマンドを取得する際には <code>Requirements</code> を確認してインストールしますが、コマンドの実行プロセス内においても、実行環境の確認を行っていることが確認できました。</p><p>…</p><p>本ブログでのコードリーディングは一旦ここまでとします。<br><code>func main() &#123;...&#125;</code> から読み始め、進捗行数としては70行程度です。ただし、途中でコードジャンプやシェルスクリプトの確認が入ったため、単純に「<code>main()</code> からの進捗行数 &#x3D; コードリーディング行数」というカウントにはなりません。「実際に動かしながらのコードリーディング」のスピードを実感いただけたでしょうか。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>本ブログでは、「Terraform の実装コードを、動かしながら読む」という目標を掲げ、実行バイナリのビルドやコードの改造を取り入れながら、OSS のコードリーディングを行いました。前半の環境準備に原稿の多くが割かれているため、実際のコードリーディング行数は100行未満ではないかと思います。OSS コードリーディングの面白さは「各自が、自分の好き勝手に読めること」にあると思いますので、私ならどのように読むか？を詳しく解説してきました。</p><p>ここまで長文にお付き合いいただき、ありがとうございました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20240326a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;539&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/articles/20240311a/&quot;&gt;Terraform連載2024&lt;/a&gt;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="CodeReading" scheme="https://future-architect.github.io/tags/CodeReading/"/>
    
    <category term="Copilot" scheme="https://future-architect.github.io/tags/Copilot/"/>
    
  </entry>
  
  <entry>
    <title>Azure環境Terraform実行におけるリソースプロバイダーについて</title>
    <link href="https://future-architect.github.io/articles/20240325a/"/>
    <id>https://future-architect.github.io/articles/20240325a/</id>
    <published>2024-03-24T15:00:00.000Z</published>
    <updated>2024-03-25T03:53:19.175Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20240325a/top.png" alt="" width="800" height="515"><p><a href="/articles/20240311a/">Terraform連載2024を</a> の8本目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、SAIG(Strategic AI Group)の真鍋です。</p><p>昨今のOpenAI需要によって、Azure環境の利用を本格的に始める方も多いかと思います。</p><p>Azure環境でTerraformを利用する際、裏で動いているリソースプロバイダーについてご紹介します。</p><h1 id="Terraform実行時に踏んだエラー"><a href="#Terraform実行時に踏んだエラー" class="headerlink" title="Terraform実行時に踏んだエラー"></a>Terraform実行時に踏んだエラー</h1><p>利用中のAzure環境にて<code>terraform plan</code>を実行した際に、下記エラーが発生しました。</p><p>見やすいように改行等追加しています。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Original Error: Cannot register providers: </span><br><span class="line">Microsoft.ServiceBus,</span><br><span class="line">Microsoft.DBforPostgreSQL,</span><br><span class="line">(中略)...</span><br><span class="line">Microsoft.TimeSeriesInsights.</span><br><span class="line">Errors were:</span><br><span class="line">Cannot register provider Microsoft.ServiceBus with Azure Resource Manager:</span><br><span class="line">unexpected status 403 with error:</span><br><span class="line">AuthorizationFailed:</span><br><span class="line">The client &#x27;xxx.xxx.xxx@exapmle.co.jp&#x27; with object id &#x27;xxxxx-xxxx-xxxx-xxxx-xxxx&#x27;</span><br><span class="line">does not have authorization to perform action &#x27;Microsoft.ServiceBus/register/action&#x27;</span><br><span class="line">over scope &#x27;/subscriptions/xxxx-xxxx-xxxx-xxxx&#x27; or the scope is invalid.</span><br><span class="line">If access was recently granted, please refresh your credentials..</span><br></pre></td></tr></table></figure><p>Terraformコード上はVMやStorage Account等、作成権限が確認できているリソースしか記載していませんでしたが、providerなるものを追加する際に権限不足で失敗したとのことです。</p><p>ちなみに利用するAzure環境は他チームから払い出された環境であり、Terraform実行時に認証した個人アカウントは権限が絞られています。</p><h1 id="リソースプロバイダーとは"><a href="#リソースプロバイダーとは" class="headerlink" title="リソースプロバイダーとは"></a>リソースプロバイダーとは</h1><p>今回遭遇したエラーのproviderはリソースプロバイダーといい、<a href="https://learn.microsoft.com/ja-jp/azure/azure-resource-manager/management/azure-services-resource-providers">Azure サービスのリソース プロバイダーとは何か</a>に説明があります。</p><p>概要について抜粋します。</p><blockquote><p>リソース プロバイダーは、Azure サービスの機能を実現する REST 操作のコレクションです。 各リソース プロバイダーには、company-name.service-label という形式の名前空間があります。</p></blockquote><p>例えばAzureストレージについては、<code>Microsoft.Storage</code>という名前空間で表現されます。</p><p>REST APIへリクエストを送信した際にAzureリソースマネージャーがそれを受け取りますが、実際の操作はリソースプロバイダーによって実施します。</p><p>下記ページが分かりやすくまとめられています。<br><a href="https://milestone-of-se.nesuke.com/sv-advanced/azure/resource-manager-provider/">【図解】初心者向けリソースマネージャーとリソースプロバイダー</a></p><p>リソースプロバイダーは既定で登録されているものもありますが、手動で登録する場合や、Azureポータルにおいてリソースを作ることで自動登録される場合もあります。</p><p>今回のエラーは、Terraformプロバイダーの一つであるAzureRM利用時にリソースプロバイダーを登録しようとして発生しました。</p><h1 id="Terraform実行時におけるリソースプロバイダー"><a href="#Terraform実行時におけるリソースプロバイダー" class="headerlink" title="Terraform実行時におけるリソースプロバイダー"></a>Terraform実行時におけるリソースプロバイダー</h1><p>AzureにおけるTerraformプロバイダーとしては下記が用意されています。</p><ul><li>AzureRM</li><li>AzureAD</li><li>AzureDevops</li><li>AzAPI</li><li>AzureStack</li></ul><p>今回はVMやStorage Account等を管理するため、AzureRMを利用していました。</p><p><a href="https://github.com/hashicorp/terraform-provider-azurerm/blob/main/internal/resourceproviders/required.go">terraform-provider-azurerm&#x2F;internal&#x2F;resourceproviders</a>のページによると、AzureRMでは複数のリソースプロバイダーを自動で登録するとのことです。</p><p>リソースプロバイダーの登録ですが、providerブロックに<code>skip_provider_registration = true</code>とすることで無効化できます。</p><p>あるいは環境変数<code>ARM_SKIP_PROVIDER_REGISTRATION</code>を設定することも可能とのことです。</p><figure class="highlight sh"><figcaption><span>terraform</span></figcaption><table><tr><td class="code"><pre><span class="line">provider <span class="string">&quot;azurerm&quot;</span> &#123;</span><br><span class="line">  skip_provider_registration = <span class="literal">true</span></span><br><span class="line">  features &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs#skip_provider_registration">Azure Provider#skip_provider_registration</a></p><h1 id="解決法"><a href="#解決法" class="headerlink" title="解決法"></a>解決法</h1><p>今回発生したエラーの解決には下記1,2の方法が考えられます。</p><ol><li>Terraform実行ユーザにリソースプロバイダー関連の権限を付与する</li><li>事前に手動でリソースプロバイダーを登録し、Terraformのリソースプロバイダー登録を無効化する</li></ol><p>1つ目の方法ですが、サブスクリプション全体に対するリソースごとの<code>company-name.service-label/register/action</code>等の権限を付与する形です。権限を付与し<code>terraform plan</code>を実行したタイミングでリソースプロバイダーが登録されます。</p><p>2つ目の方法は、手動でリソースプロバイダーを登録しておき、Terraform実行時には<code>skip_provider_registration</code>の記載や環境変数でリソースプロバイダー登録をスキップする方法です。手動でリソースプロバイダーを登録する場合は、Azureポータルのサブスクリプションからリソースプロバイダーを選択し、該当リソースプロバイダーを登録します。</p><p>私たちは、リソースプロバイダーの登録をより上位の管理者に依頼して実施するフローを作成した上で、2つ目の方法を採用しました。同一サブスクリプション内で複数チームがそれぞれTerraform実行するようなケースにおいて、利用可能なリソースを制限する場合等に採り得る方法なのかと思います。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>これまで強い権限でTerraformを操作していたためリソースプロバイダーを意識することは無かったのですが、今回はチームの運用ポリシーとして権限が制限されていたため改めて調査しました。</p><p>リソースプロバイダーの登録を必要最低限にすることで、不要なリソースをサブスクリプション内で作成されないようにすることが可能です。リソースプロバイダー登録の権限を分離することで、より厳格にAzure環境を運用できます。</p><p>より良い運用方法について、今後も考えていきたいと思います。</p><p>また、今回の記事で扱ったリソースプロバイダーについての調査は、同チームの戸井田さんにご協力いただきました。ありがとうございました！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20240325a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;515&quot;&gt;


&lt;p&gt;&lt;a href=&quot;/articles/20240311a/&quot;&gt;Terraform連載2024を&lt;/a&gt;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="Azure" scheme="https://future-architect.github.io/tags/Azure/"/>
    
  </entry>
  
  <entry>
    <title>爆速習得、初心者からRustの即戦力を備えるまで</title>
    <link href="https://future-architect.github.io/articles/20240322a/"/>
    <id>https://future-architect.github.io/articles/20240322a/</id>
    <published>2024-03-21T15:00:00.000Z</published>
    <updated>2024-03-22T02:31:03.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>週末を利活用したく、新しい言語をゼロから学習して即戦力を備えるまでどのぐらいかかるかを実験してみました。</p><h4 id="事前状態"><a href="#事前状態" class="headerlink" title="事前状態"></a>事前状態</h4><ul><li>いくつかのプログラミング言語（C++,Python,JavaScript,Java,Go,Bash,etc.）の経験</li><li>基礎的なウェブアプリ構築（フロントエンド、バックエンド）の経験</li><li>Rustは未経験。事前に知っていたこと<ul><li>コンパイル言語</li><li>実行速度が速い、C&#x2F;C++からGoの間ぐらい</li><li>WebAssemblyにコンパイルできる、ブラウザ上で動くゲームやシミュレーターなどを作れる</li></ul></li></ul><h4 id="実績"><a href="#実績" class="headerlink" title="実績"></a>実績</h4><ol><li>開発環境を備える (30 min, 15:30~16:30)</li><li>基本コンセプトを把握する (45 min, 16:00～16:30,&lt;休憩&gt;,19:30～19:45)</li><li><del>Hello World</del> Game of Lifeを実装してみる (135 min, 19:45～22:00)</li></ol><ul><li>スタートから１個目のシンプルなデモプログラミング（<a href="https://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B2%E3%83%BC%E3%83%A0">Conway’s Game of Life</a>のコンソール版）の作成まで、環境整備+概念学習+コーディング+デバグ時間実績は<strong>210 min</strong>でした。（途中で飲んでいたので後半は効率悪かった）</li><li>爆速学習の流れは、ChatGPT先生に聞く＋少しグーグル検索（Rustの本を３冊買いましたが、最初は読みませんでした。理由は効率重視のため、アウトプット駆動でやりたいと考えたためです）</li><li>また、自分の手で作りたいので、基本はウェブからソースをコピーしないことをルールとしました</li></ul><p><em>ChatGPTさんとのやり取りログは<a href="https://chat.openai.com/share/8f9d3ac3-85ca-46cd-8ebe-730490e40db8">こちら</a><br>（全部英語でやりました、質問の仕方に興味ある方ご参考を）</em></p><h2 id="学習ログ"><a href="#学習ログ" class="headerlink" title="学習ログ"></a>学習ログ</h2><h4 id="15-30-Start"><a href="#15-30-Start" class="headerlink" title="15:30 Start"></a>15:30 Start</h4><p>ChatGPT先生にRustの学習ステップを教えてくれたのは、</p><ol><li>Understand the Basics</li><li>Setup Rust Development Environment</li><li>Write Your First Rust Program</li><li>Learn Ownership, Borrowing, and Lifetimes</li><li>Explore Rust’s Standard Library</li><li>Understand Error Handling</li><li>Work on Small Projects</li><li>Read Advanced Topics and Best Practices</li><li>Join the Rust Community</li><li>Continuous Learning and Practice</li></ol><p>1番目を飛ばし、直接2番の環境構築を行います。</p><h4 id="15-30-15-33-Installation"><a href="#15-30-15-33-Installation" class="headerlink" title="15:30~15:33 Installation"></a>15:30~15:33 Installation</h4><p>推奨された一番楽の方法でcurl|shのワンライナーでrustupをインストールします。<br>（rustupってなに？というのは後にします）</p><p><a href="https://www.rust-lang.org/tools/install">https://www.rust-lang.org/tools/install</a></p><h4 id="15-33-15-37-Hello-World"><a href="#15-33-15-37-Hello-World" class="headerlink" title="15:33~15:37 Hello World"></a>15:33~15:37 Hello World</h4><p>インストール成功の証にもなるため、Hello Worldの書き方を聞きました。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> my_rust_project</span><br><span class="line">$ <span class="built_in">cd</span> my_rust_project</span><br><span class="line">$ <span class="built_in">touch</span> main.rs</span><br></pre></td></tr></table></figure><p>main.rsの内容です。</p><figure class="highlight rs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コンパイルと実行</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ rustc main.rs</span><br><span class="line">$ ./main</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><p>楽勝ですね！</p><h4 id="15-38-add-extension"><a href="#15-38-add-extension" class="headerlink" title="15:38 add extension"></a>15:38 add extension</h4><p>普段VisualStudioCodeを愛用しているため、Rust用のExtensionなにかおすすめある？って聞いたら、次の回答でした</p><ol><li>Rust (rls) by rust-lang</li><li>rust-analyzer by matklad</li><li>CodeLLDB by Vadim Chugunov</li><li>Better TOML by bungcip</li><li>Crates by serayuzgur</li><li>Cargo by serayuzgur</li></ol><p>…しかし、中に(deprecated)などメンテを続けなくなるものや、機能重複のものもあったため、詳細を確認しつつ、最終的には以下を利用しました。</p><ol><li>Language support: <a href="https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer">rust-analyzer</a></li><li>Debugger: <a href="https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb">CodeLLDB</a></li><li>TOML support for <code>Cargo.toml</code>: <a href="https://marketplace.visualstudio.com/items?itemName=tamasfe.even-better-toml">Even Better TOML</a></li><li>Dependency manager: <a href="https://marketplace.visualstudio.com/items?itemName=serayuzgur.crates">crates</a></li></ol><p>15:44 データタイプ、変数、関数、コントロールフロー(if文、ループ文)などのお勉強</p><h4 id="15-47-15-57-VSCodeで動かす"><a href="#15-47-15-57-VSCodeで動かす" class="headerlink" title="15:47~15:57 VSCodeで動かす"></a>15:47~15:57 VSCodeで動かす</h4><p>やっぱりChatGPT先生だけに聞くのがなかなか不安であるため、Googleで<code>vscode run for rust</code>を検索しました。</p><p><a href="https://code.visualstudio.com/docs/languages/rust">https://code.visualstudio.com/docs/languages/rust</a></p><p>やはり <code>cargo</code> を使うことにしました。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cargo new MyRustApp</span><br><span class="line">warning: the name `MyRustApp` is not snake_case or kebab-case <span class="built_in">which</span> is recommended <span class="keyword">for</span> package names, consider `myrustapp`</span><br><span class="line">     Created binary (application) `MyRustApp` package</span><br></pre></td></tr></table></figure><p>命名制約違反ということでwarningで怒られました。snakeケースに変えてみましょう。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cargo new my_rust_app</span><br><span class="line">     Created binary (application) `my_rust_app` package</span><br></pre></td></tr></table></figure><p>フォルダ構成も確認しましょう。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> my_rust_app  </span><br><span class="line">$ tree -a -L 2</span><br><span class="line">.</span><br><span class="line">├── .git</span><br><span class="line">│   ├── FETCH_HEAD</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   ├── config</span><br><span class="line">│   ├── description</span><br><span class="line">│   ├── hooks</span><br><span class="line">│   ├── info</span><br><span class="line">│   ├── objects</span><br><span class="line">│   └── refs</span><br><span class="line">├── .gitignore</span><br><span class="line">├── Cargo.lock</span><br><span class="line">├── Cargo.toml</span><br><span class="line">├── src</span><br><span class="line">│   └── main.rs</span><br><span class="line">└── target</span><br><span class="line">    ├── .rustc_info.json</span><br><span class="line">    ├── CACHEDIR.TAG</span><br><span class="line">    └── debug</span><br><span class="line"></span><br><span class="line">9 directories, 10 files</span><br></pre></td></tr></table></figure><p>gitや.gitignoreも生成されています。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> .gitignore</span><br><span class="line">/target</span><br></pre></td></tr></table></figure><p><code>/target</code>をignoreされているので、コンパイルした中間ファイルやバイナリなどだろうか、一旦無視します。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">$ cat Cargo.toml </span><br><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;my_rust_app&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2021&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"></span><br><span class="line">$ cat Cargo.lock </span><br><span class="line"><span class="comment"># This file is automatically @generated by Cargo.</span></span><br><span class="line"><span class="comment"># It is not intended for manual editing.</span></span><br><span class="line"><span class="attr">version</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[package]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;my_rust_app&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br></pre></td></tr></table></figure><p><code>Cargo.toml</code>はmeta情報やライブラリ導入用だろう(dependenciesが追加する箇所みたい)<br><code>Cargo.lock</code>は自動生成のようで、編集不可とあります。</p><p>VSCodeでmy_rust_appをopenし、main.rsを見てみると、この前のHello Worldそのままでした。</p><p>とにかく、Ctrl+F5 (Run Without Debugging)でmain.rsを実行してみます。</p><img src="/images/20240322a/1acd3193-ce50-e995-9953-e4016732cc01.png" alt="" width="536" height="430" loading="lazy"><img src="/images/20240322a/95894823-e76d-382b-7b3b-84bf51dd5410.png" alt="" width="534" height="650" loading="lazy"><p>OKとYesを押すと<code>.vscode/launch.json</code>が自動生成される</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug executable &#x27;my_rust_app&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cargo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;--bin=my_rust_app&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;--package=my_rust_app&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_rust_app&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bin&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug unit tests in executable &#x27;my_rust_app&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cargo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;--no-run&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;--bin=my_rust_app&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;--package=my_rust_app&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_rust_app&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bin&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>もう一度 Ctrl+F5、コンパイルと実行の一連が発動し、<code>Hello, world!</code>メッセージがコンソールに現れて実行成功でした。<br>もちろん、コンソールで<code>cargo run</code>を実行してもよいです。</p><p>ちなみに、cargoでのビルドは以下です。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> *  Executing task: CodeLLDB: cargo </span><br><span class="line"></span><br><span class="line">Running `cargo build --bin=my_rust_app --package=my_rust_app --message-format=json`...</span><br><span class="line">   Compiling my_rust_app v0.1.0 (/Users/wsysuper/my_rust_app)</span><br><span class="line">    Finished dev [unoptimized + debuginfo] target(s) <span class="keyword">in</span> 0.11s</span><br><span class="line"> *  Terminal will be reused by tasks, press any key to close it. </span><br></pre></td></tr></table></figure><p>続けて、ChatGPT先生から基本知識を勉強します。</p><h4 id="15-57-16-07-basic-data-types-variables-functions-and-control-flow-constructs"><a href="#15-57-16-07-basic-data-types-variables-functions-and-control-flow-constructs" class="headerlink" title="15:57~16:07 basic data types, variables, functions, and control flow constructs"></a>15:57~16:07 basic data types, variables, functions, and control flow constructs</h4><ol><li>Basic Data Types and Variables: <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Declare variables with explicit types</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">number</span>: <span class="type">i32</span> = <span class="number">42</span>; <span class="comment">// Signed 32-bit integer</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">floating_point</span>: <span class="type">f64</span> = <span class="number">3.14</span>; <span class="comment">// Double-precision floating-point number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Rust allows type inference</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">another_number</span> = <span class="number">123</span>; <span class="comment">// Compiler infers the type as i32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Mutable variables using &#x27;mut&#x27; keyword</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">mutable_variable</span> = <span class="number">10</span>;</span><br><span class="line">mutable_variable = <span class="number">20</span>; <span class="comment">// Can be changed later</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Constants using &#x27;const&#x27; keyword (must be annotated with a type)</span></span><br><span class="line"><span class="keyword">const</span> PI: <span class="type">f64</span> = <span class="number">3.14159</span>;</span><br></pre></td></tr></table></figure></li><li>Functions: <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Function to add two numbers</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">add</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b; <span class="comment">// Explicit return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function without explicit return</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">multiply</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    a * b <span class="comment">// Implicit return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function with no parameters and no return value</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">greet</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function with multiple return values (using tuple)</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">calculate</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> (<span class="type">i32</span>, <span class="type">i32</span>) &#123;</span><br><span class="line">    (a + b, a * b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Control Flow Constructs: <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// If statement</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">number</span> = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">if</span> number &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Positive&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> number &lt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Negative&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Zero&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// While loop</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Count: &#123;&#125;&quot;</span>, count);</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// For loop (range-based)</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Value: &#123;&#125;&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// For loop (iterating over elements)</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">numbers</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> <span class="variable">num</span> <span class="keyword">in</span> numbers.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Value: &#123;&#125;&quot;</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Match expression</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">number</span> = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">match</span> number &#123;</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Zero&quot;</span>),</span><br><span class="line">    <span class="number">1</span>..=<span class="number">100</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Between 1 and 100&quot;</span>),</span><br><span class="line">    _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Something else&quot;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="16-07-16-12-変数-mutable-immutable-そして定数-const-について教わる"><a href="#16-07-16-12-変数-mutable-immutable-そして定数-const-について教わる" class="headerlink" title="16:07~16:12 変数(mutable&#x2F;immutable)そして定数(const)について教わる"></a>16:07~16:12 変数(mutable&#x2F;immutable)そして定数(const)について教わる</h4><ul><li><p><code>let</code>: </p><ul><li>不変の変数を宣言するために使用される</li><li><code>let a = 1;</code>のように値を割り当てた後は変更できない</li><li>デフォルトでは不変であり、値の変更を意図していない場合に使用する</li></ul></li><li><p><code>let mut</code>: </p><ul><li>可変の変数を宣言するために使用される</li><li><code>let mut a = 1;</code>のように、<code>mut</code>修飾子を付けることで変更可能な変数を宣言できる</li></ul></li><li><p><code>const</code>: </p><ul><li>定数を宣言するために使用される</li><li><code>const A: i32 = 1;</code>のように、型を明示的に注釈付けし、値はコンパイル時に既知でなければならない</li><li>常に不変であり、プログラムの実行中に変更することはできない</li></ul></li></ul><p>さらに、試験して定数の評価式があってもうまくいきました（コンパイラが計算の結果を定数化してくれるね）。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> A: <span class="type">i32</span> = <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> B: <span class="type">i32</span> = A + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>ただ、変数を含めた計算式はダメでした。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> C: <span class="type">i32</span> = x + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>以下のコンパイラエラーになった</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">error[E0435]: attempt to <span class="keyword">use</span> a non-constant value <span class="keyword">in</span> a constant</span><br><span class="line"> -<span class="punctuation">-&gt;</span> src/main.rs:<span class="number">6</span>:<span class="number">20</span></span><br><span class="line">  |</span><br><span class="line"><span class="number">6</span> |     <span class="keyword">const</span> C: <span class="type">i32</span> = x + <span class="number">1</span>;</span><br><span class="line">  |     -------        ^ non-constant value</span><br><span class="line">  |     |</span><br><span class="line">  |     help: consider using `<span class="keyword">let</span>` instead of `<span class="keyword">const</span>`: `<span class="keyword">let</span> <span class="variable">C</span>`</span><br></pre></td></tr></table></figure><h4 id="16-12-16-23-Ownership-Borrowing-and-Lifetimes"><a href="#16-12-16-23-Ownership-Borrowing-and-Lifetimes" class="headerlink" title="16:12~16:23 Ownership, Borrowing, and Lifetimes"></a>16:12~16:23 Ownership, Borrowing, and Lifetimes</h4><p>Ownership、Borrowing、そしてLifetimesの概念は、Rustが安全性とパフォーマンスを両立させるための基本的な仕組みとして重要です。</p><ul><li><strong>Ownership（所有権）</strong>:<ul><li>Rustの中心的な概念であり、メモリリソースの管理を行う</li><li>各値には所有者が存在し、所有者はその値を所有する</li><li>所有者がスコープを抜けると、その値は解放される（dropされる）</li></ul></li><li><strong>Borrowing（借用）</strong>:<ul><li>所有者が値を所有する間、他のコードに値の一時的な参照を許可する</li><li>借用は不変(<code>&amp;</code>)または可変(<code>&amp;mut</code>)の2つの形態がある</li><li>不変の借用は同時に複数の読み取りアクセスを可能にするが、可変の借用は一つの書き込みアクセスしか許可しない</li></ul></li><li><strong>Lifetimes（寿命）</strong>:<ul><li>借用の有効範囲を明示的に示すための仕組み</li><li>値の参照が有効である期間を示す</li><li>コンパイラは、借用が所有者より長く続かないように監視し、データ競合や無効なメモリアクセスを防ぐ</li></ul></li><li><strong>所有権ルール</strong>:<ul><li>Rustの値は常にただ1つの所有者を持つ</li><li>所有者がスコープから外れるとき、値は解放される</li><li>所有者は値を必要とするだけ持つ</li><li>値を参照する際には、所有権を借用することができるが、所有者が存在しなければならない</li></ul></li><li><strong>メリット</strong>:<ul><li>所有権、借用、および寿命のシステムは、ランタイムコストなしでメモリ安全性を保証する</li><li>データ競合やセグメンテーション違反などの一般的なランタイムエラーを排除する</li><li>コンパイラがコードの正当性を静的に確認することで、バグを早期に発見しやすくする</li></ul></li></ul><h4 id="16-23-16-30-Standard-Library"><a href="#16-23-16-30-Standard-Library" class="headerlink" title="16:23~16:30 Standard Library"></a>16:23~16:30 Standard Library</h4><ol><li><code>std::collections</code><ul><li>ベクタ、ハッシュマップ、セットなど、Rust のコレクション型が含まれている</li><li><code>Vec</code>、<code>HashMap</code>、<code>HashSet</code>、<code>LinkedList</code>、<code>BinaryHeap</code>などの型がある</li></ul></li><li><code>std::io</code><ul><li>入出力操作を行うためのモジュールです</li><li>ファイル I&#x2F;O、標準入出力、バッファリング、エラーハンドリングなどをサポートしている</li><li><code>Read</code>、<code>Write</code>、<code>BufReader</code>、<code>BufWriter</code>などの型や関数がある</li></ul></li><li><code>std::fs</code><ul><li>ファイルシステム関連の機能が提供されている</li><li>ファイルやディレクトリの操作、メタデータの取得、パスの処理などが可能です</li><li><code>File</code>、<code>DirEntry</code>、<code>Metadata</code>、<code>create_dir</code>、<code>read_dir</code>などの型や関数が含まれている</li></ul></li><li><code>std::thread</code><ul><li>スレッドの作成、スレッド間通信、同期処理などを行うためのモジュールである</li><li><code>thread::spawn</code>、<code>thread::sleep</code>、<code>Mutex</code>、<code>Arc</code>、<code>JoinHandle</code>などの型や関数がある</li></ul></li><li><code>std::sync</code><ul><li>同期プリミティブが提供されている</li><li>ミューテックス、アトミックなデータ型、チャネルなどが含まれている</li><li><code>Mutex</code>、<code>RwLock</code>、<code>AtomicBool</code>、<code>mpsc::channel</code>などの型や関数がある</li></ul></li><li><code>std::net</code><ul><li>ネットワークプログラミング関連の機能が提供されている</li><li>ソケットの作成、TCP&#x2F;UDP 通信、アドレス解決などが可能</li><li><code>TcpStream</code>、<code>UdpSocket</code>、<code>Ipv4Addr</code>、<code>SocketAddr</code>などの型や関数がある</li></ul></li><li><code>std::time</code><ul><li>時刻や時間に関連する操作が提供されている</li><li>システム時刻の取得、時間の計測、スリープなどが可能</li><li><code>SystemTime</code>、<code>Duration</code>、<code>Instant</code>などの型や関数がある</li></ul></li><li><code>std::path</code><ul><li>ファイルパスに関連する機能が提供されている</li><li>パスの結合、解析、正規化などが可能</li><li><code>Path</code>、<code>PathBuf</code>、<code>join</code>、<code>canonicalize</code>などの型や関数がある</li></ul></li><li><code>std::env</code><ul><li>実行環境とのやり取りに関連する機能が提供されている</li><li>コマンドライン引数の取得、環境変数の操作、ディレクトリの取得などが可能</li><li><code>args</code>、<code>var</code>、<code>current_dir</code>などの型や関数がある</li></ul></li><li><code>std::error</code><ul><li>エラー処理に関連する機能が提供されている</li><li>エラー型、エラーハンドリング機構などが含まれている</li><li><code>Error</code>、<code>Result</code>、<code>From</code>、<code>Display</code>などの型やトレイトがある</li></ul></li></ol><h4 id="16-30-休憩に入る"><a href="#16-30-休憩に入る" class="headerlink" title="16:30 休憩に入る"></a>16:30 休憩に入る</h4><p>&lt;3時間後再開&gt;</p><h4 id="19-30-19-40-Understand-Error-Handling"><a href="#19-30-19-40-Understand-Error-Handling" class="headerlink" title="19:30~19:40 Understand Error Handling"></a>19:30~19:40 Understand Error Handling</h4><p>Error handling in Rust is a fundamental aspect of writing robust and reliable code. Rust provides mechanisms to handle errors in a way that ensures safety and encourages explicit handling of error conditions. The two main types used for error handling in Rust are <code>Result&lt;T, E&gt;</code> and <code>Option&lt;T&gt;</code>.</p><ol><li><strong>Result&lt;T, E&gt;</strong>:<ul><li><code>Result&lt;T, E&gt;</code> is a type that represents either success with a value of type <code>T</code> or failure with an error of type <code>E</code></li><li>The <code>Ok(T)</code> variant signifies success and contains the value of type <code>T</code>, while the <code>Err(E)</code> variant represents failure and contains the error of type <code>E</code></li><li>Result types are commonly used for functions that may fail or encounter errors during execution <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"><span class="keyword">use</span> std::io::Read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">read_file_contents</span>(file_path: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, std::io::Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">file</span> = File::<span class="title function_ invoke__">open</span>(file_path)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">contents</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    file.<span class="title function_ invoke__">read_to_string</span>(&amp;<span class="keyword">mut</span> contents)?;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(contents)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">match</span> <span class="title function_ invoke__">read_file_contents</span>(<span class="string">&quot;example.txt&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(contents) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;File contents: &#123;&#125;&quot;</span>, contents),</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(err) =&gt; eprintln!(<span class="string">&quot;Error reading file: &#123;&#125;&quot;</span>, err),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>Option<T></strong>:<ul><li><code>Option&lt;T&gt;</code> is a type that represents either some value of type <code>T</code> or none (null-like value)</li><li>The <code>Some(T)</code> variant contains the value of type <code>T</code>, while the <code>None</code> variant represents the absence of a value</li><li>Option types are commonly used for functions that may or may not return a value <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">divide</span>(a: <span class="type">f64</span>, b: <span class="type">f64</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">f64</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> b != <span class="number">0.0</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(a / b)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="literal">None</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = <span class="title function_ invoke__">divide</span>(<span class="number">10.0</span>, <span class="number">2.0</span>);</span><br><span class="line">    <span class="keyword">match</span> result &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(value) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Result: &#123;&#125;&quot;</span>, value),</span><br><span class="line">        <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Cannot divide by zero&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>Error Propagation</strong>:<ul><li>Rust provides the <code>?</code> operator to propagate errors from functions that return <code>Result</code> or <code>Option</code></li><li>When used within a function that returns <code>Result</code> or <code>Option</code>, the <code>?</code> operator will return early with the error if an error occurs, simplifying error handling code <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">read_file_contents</span>(file_path: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, std::io::Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">file</span> = File::<span class="title function_ invoke__">open</span>(file_path)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">contents</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    file.<span class="title function_ invoke__">read_to_string</span>(&amp;<span class="keyword">mut</span> contents)?;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(contents)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>Panics</strong>:<ul><li>Panics represent unrecoverable errors in Rust and are triggered by calling the <code>panic!</code> macro</li><li>Panics unwind the stack and terminate the program, printing an error message if provided</li><li>Panics are typically used for programming errors or unexpected conditions that cannot be handled gracefully <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">divide</span>(a: <span class="type">f64</span>, b: <span class="type">f64</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> b != <span class="number">0.0</span> &#123;</span><br><span class="line">        a / b</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">panic!</span>(<span class="string">&quot;Division by zero&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>Error handling in Rust encourages developers to handle errors explicitly, promoting code safety and reliability. By using <code>Result&lt;T, E&gt;</code> and <code>Option&lt;T&gt;</code> types effectively, Rust ensures that error conditions are appropriately managed, improving code readability and maintainability.</p><h4 id="19-40-19-45-他の不明点について質問"><a href="#19-40-19-45-他の不明点について質問" class="headerlink" title="19:40~19:45 他の不明点について質問"></a>19:40~19:45 他の不明点について質問</h4><p>私: <code>What are rustc, cargo, and rustup used for?</code></p><p>ChatGPT回答:</p><ol><li><strong>rustc</strong>:<ul><li><code>rustc</code> is the Rust compiler, responsible for compiling Rust source code into executable programs or libraries</li><li>It takes Rust source files (<code>.rs</code>) as input and generates machine code for the target platform</li><li>Developers can invoke rustc directly from the command line to compile Rust programs without using any build system</li></ul></li><li><strong>cargo</strong>:<ul><li><code>cargo</code> is Rust’s build system and package manager. It automates the process of compiling Rust code, managing dependencies, and building projects</li><li>With <code>cargo</code>, developers can create, build, test, and publish Rust packages effortlessly</li><li>It provides commands like <code>cargo new</code> for creating new projects, <code>cargo build</code> for compiling code, <code>cargo run</code> for executing programs, <code>cargo test</code> for running tests, and <code>cargo publish</code> for publishing crates to the official package registry, crates.io</li></ul></li><li><strong>rustup</strong>:<ul><li><code>rustup</code> is the Rust toolchain installer and manager. It allows developers to install and manage multiple versions of the Rust toolchain on their system</li><li><code>rustup</code> makes it easy to switch between different versions of the Rust compiler, including stable, beta, and nightly releases</li><li>It also manages associated tools like <code>cargo</code>, <code>rustc</code>, and documentation</li><li><code>rustup</code> simplifies the process of setting up a Rust development environment and ensures compatibility with Rust projects across different environments</li></ul></li></ol><p>In summary, <code>rustc</code> is the Rust compiler used for compiling Rust code, <code>cargo</code> is the build system and package manager for Rust projects, and <code>rustup</code> is the toolchain installer and manager for managing Rust installations and associated tools. Together, these tools form the foundation of the Rust development ecosystem, enabling efficient and reliable development of Rust applications.</p><h4 id="19-45-Starting-with-a-classic-project-like-Conway’s-Game-of-Life"><a href="#19-45-Starting-with-a-classic-project-like-Conway’s-Game-of-Life" class="headerlink" title="19:45 Starting with a classic project like Conway’s Game of Life"></a>19:45 Starting with a classic project like Conway’s Game of Life</h4><p>いよいよ本気に初めてのプロジェクトを開始します。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">cargo new game_of_life</span><br><span class="line">code game_of_life</span><br></pre></td></tr></table></figure><p>ChatGPTに教えられた骨格を利用します。（ここだけコピペ）</p><figure class="highlight rs"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Your main.rs file</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">GameOfLife</span> &#123;</span><br><span class="line">    <span class="comment">// Define your game board here</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">GameOfLife</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(width: <span class="type">usize</span>, height: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="comment">// Initialize the game board</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        GameOfLife &#123;</span><br><span class="line">            <span class="comment">// Initialize your fields here</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">update</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// Update the game board based on the rules of the game</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// Render the game board to the console</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">game</span> = GameOfLife::<span class="title function_ invoke__">new</span>(<span class="number">50</span>, <span class="number">30</span>); <span class="comment">// Example size for the board</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        game.<span class="title function_ invoke__">update</span>();</span><br><span class="line">        game.<span class="title function_ invoke__">render</span>();</span><br><span class="line">        std::thread::<span class="title function_ invoke__">sleep</span>(std::time::Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">100</span>)); <span class="comment">// Adjust the speed of the simulation</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>まずは、main()から改修します。<br>ちょっとリテラルのパラメータを切り出し、デバグしやすいようにloopを一旦コメントアウトします。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">width</span> = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">height</span> = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">sleep_time</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">game</span> = GameOfLife::<span class="title function_ invoke__">new</span>(width, height);</span><br><span class="line">    <span class="comment">// loop &#123;</span></span><br><span class="line">    game.<span class="title function_ invoke__">update</span>();</span><br><span class="line">    game.<span class="title function_ invoke__">render</span>();</span><br><span class="line">    std::thread::<span class="title function_ invoke__">sleep</span>(std::time::Duration::<span class="title function_ invoke__">from_millis</span>(sleep_time));</span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次に、<code>struct GameOfLife</code>に状態データを保持する場所だろうかと思い、2d配列をこの前教えられたstd::collectionsのVecを使うぐらいの感覚だが、Vecと2次元のVecの使い方を具体的にまた聞きました。</p><h4 id="20-00-20-30-2d-Vecを利用し、struct-GameOfLifeとそのimplのnewの実装"><a href="#20-00-20-30-2d-Vecを利用し、struct-GameOfLifeとそのimplのnewの実装" class="headerlink" title="20:00~20:30 2d Vecを利用し、struct GameOfLifeとそのimplのnewの実装"></a>20:00~20:30 2d Vecを利用し、<code>struct GameOfLife</code>とそのimplの<code>new</code>の実装</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">GameOfLife</span> &#123;</span><br><span class="line">    width: <span class="type">usize</span>,</span><br><span class="line">    height: <span class="type">usize</span>,</span><br><span class="line">    cells: <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">bool</span>&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">GameOfLife</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(width: <span class="type">usize</span>, height: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">gol</span> = GameOfLife &#123;</span><br><span class="line">            width,</span><br><span class="line">            height,</span><br><span class="line">            cells: <span class="type">Vec</span>::<span class="title function_ invoke__">with_capacity</span>(height),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> <span class="number">0</span>..height &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">row</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">with_capacity</span>(width);</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> <span class="number">0</span>..width &#123;</span><br><span class="line">                row.<span class="title function_ invoke__">push</span>(<span class="literal">false</span>); <span class="comment">// ここはrandomのtrue/falseする方法が分からない、一旦全部falseに</span></span><br><span class="line">            &#125;</span><br><span class="line">            gol.cells.<span class="title function_ invoke__">push</span>(row);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gol;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20-30-20-34-renderの実装"><a href="#20-30-20-34-renderの実装" class="headerlink" title="20:30~20:34 renderの実装"></a>20:30~20:34 <code>render</code>の実装</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">row</span> <span class="keyword">in</span> &amp;<span class="keyword">self</span>.cells &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">cell</span> <span class="keyword">in</span> row &#123;</span><br><span class="line">            <span class="keyword">if</span> *cell &#123;</span><br><span class="line">                <span class="built_in">print!</span>(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print!</span>(<span class="string">&quot;. &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初期状態の出力ができました！</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br><span class="line">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><br></pre></td></tr></table></figure><h4 id="20-34-20-37-ランダム値の生成方法を習得"><a href="#20-34-20-37-ランダム値の生成方法を習得" class="headerlink" title="20:34~20:37 ランダム値の生成方法を習得"></a>20:34~20:37 ランダム値の生成方法を習得</h4><p>Cargo.tomlのdependenciesに<a href="https://crates.io/crates/rand">rand</a>というcratesとそのバージョンを記載します。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">rand</span> = <span class="string">&quot;0.8.5&quot;</span></span><br></pre></td></tr></table></figure><p>プログラミング先頭にuse文を入れて、ランダム使うところで、<code>random()</code>をこの前のダミーの<code>false</code>を入れ替える。型は推論してくれるらしいです(ここはbool。i32やf64でも同じ書き方で、自動的に推論できて素晴らしい)。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::prelude::random;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// row.push(false);</span></span><br><span class="line">row.<span class="title function_ invoke__">push</span>(<span class="title function_ invoke__">random</span>());</span><br></pre></td></tr></table></figure><p>ランダムの初期状態の出力ができた！</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">. . * * * * * * . . * . . . . . * * * * * . * . * * . * . . . . * . * . * . . . . . . . * . . * . . </span><br><span class="line">* . * * * * * . . . . . * * . * . . * . * . * . . . . . . * * . . . . * * * . . . * * . . * . . . * </span><br><span class="line">* . . . . . . . * . * * . * . * * * . * * . * . * . . * . * . . . * . * . * * * * . * * . . * . * * </span><br><span class="line">* . . * * * . * . . . * * . * . * * . * . . * * * * . . * . * * . * * * . * . * . . * . . * . . * . </span><br><span class="line">. . . . * * * * . . . * . * . * * . * * * * . . . . . * . * . * * * * . * * . * . * * * . * * . * . </span><br><span class="line">* * . * * . * . * . . * . * * . * * . * . * . . . . * . * . * * . * . * . . . . * . . * * . . * * * </span><br><span class="line">* . . * * . * * * * * * * * . * . . . . . . * * . * * . * * * . * . . * . * * * . * . . . . * * * * </span><br><span class="line">. . * . * * . * * . * . . * . . * . . * * . * . . . . * * * * * . * * . . . * . * * * . * . . . * . </span><br><span class="line">. . * * * . . . . * . . * . . . . . * . . * . * * . * . . * * . . . . . * . . * . * * . * . * * * . </span><br><span class="line">* . . * * . * . . . . . * * * * . . . . * * * . * * * . * . . . * * . * . . * * . * . . * * . * . * </span><br><span class="line">. * . * . . . . * . . . * . . * * . . . . . . . * . * * * * . * . . . . . * . * * * * . . . . . * * </span><br><span class="line">* * * . . * * . * * * * * * * . * . * * . . . * . . . * * . * * . . * . * . * . * . * * . . * . . * </span><br><span class="line">. * * . * * . * . . . . * * . * . . * . . . * . * . * * . * * . * * . . * * . . . . . . * . . * * . </span><br><span class="line">* . . . . . . . . . . . . * * * . . * * * * . . * . . . . * * * * . * * * * * * * * . . * * . . * . </span><br><span class="line">* * . * . * . . * * * * . . . . . . . . * * . . . * * . . . . . . . * * . . . . . * . * . * . * . * </span><br><span class="line">. . * . * . . * * . * . . * . * . * . . . . * . . * * * . . * . * * * . . . . . * . * * . . * . * . </span><br><span class="line">* * . . . . * . . * . * * . * . * . . * . * . * . * * * . * * * . . . * * . . * . . * . * * . . . * </span><br><span class="line">. * . . . . * * * * * * * * * . . * . . . * . . . . . * * * . . * * . . * * * . . * * * . * . . * . </span><br><span class="line">* . . * . . * * * * * . . . . . * . * . . . . * * * . * * * * * . * . . * . . * . . . . * . . * * . </span><br><span class="line">* . * . * * . * . * . . . * * . . . . * . . . . * * * * * . . * . . * * * * . * * * . * * . * * . . </span><br><span class="line">. . * * * . * . * . * * * . * * . * * . . . * * * * . . * * . . * . . . . * . * . * . * * * * * * . </span><br><span class="line">* . . . * . * * . * * * . * * * . . * * . . . . * * * . . * . * * * . * * . * . * . * . * * * * * . </span><br><span class="line">* * . . . * . * * * . * . . * * . . * . . . * . . . * * . . . . . . * . * * * . . . . * . . . * * . </span><br><span class="line">* . . * . . * . . * . * * * . . . . . . * . * * * . . * . * . * * . * * . . * . * * * * * * * . . . </span><br><span class="line">. . * * * * . * * * * . * * * * * * * . * . . . * . . * * * * . . . . * . . * * . * . * . . . * * * </span><br><span class="line">* . . * * * . . . . * * * * . * . * . . * * * . * . * . * . * * . . . . . . . . . . . . * * * * * * </span><br><span class="line">* . . * * . . . . * * * * * . * . . * . * . . * . . . * * . * . * * . * * . . * . * . . * * . . * . </span><br><span class="line">. * . * . * * . * * . * * . * . * * . . . . . . * . . * * . * . * * * . * * . * . * * * . * . . . * </span><br><span class="line">. . . . . . . . * * * * . . . * . * . * . * . . * . . * * * * * * . . * * * * . * . * . * . . * . * </span><br><span class="line">* . * . * . * . * . . * . . * . . . . * . * . . . * . . * . * . * * . . . * . . . * * * * . . . * . </span><br></pre></td></tr></table></figure><h4 id="20-38-22-00-apply-the-rule"><a href="#20-38-22-00-apply-the-rule" class="headerlink" title="20:38~22:00 apply the rule"></a>20:38~22:00 apply the rule</h4><p>ここからは、だいぶ効率悪くなってきて、苦戦しながらやっていきます。</p><p>ライフゲームのルールは以下です。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In Conway&#x27;s Game of Life, each cell interacts with its eight neighbors. The rules are:</span><br><span class="line">Any live cell with fewer than two live neighbors dies (underpopulation).</span><br><span class="line">Any live cell with two or three live neighbors survives to the next generation.</span><br><span class="line">Any live cell with more than three live neighbors dies (overpopulation).</span><br><span class="line">Any dead cell with exactly three live neighbors becomes alive (reproduction).</span><br></pre></td></tr></table></figure><p>2次元のVecの初期化や、別fnの切り方、cloneがdeep copyなのか、shallow copyなのか、色々詰まったりしたが、<code>count_neighbors</code>を切り出して少し後回しして、<code>update</code>だけは先に完成させました。</p><p><code>&amp;</code>や<code>mut</code>はどこにつけるべきかがよく迷ったが、コンパイラが親切に怒られてくれるから、なんとかできました。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">GameOfLife</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">count_neighbors</span>(&amp;<span class="keyword">self</span>, r: <span class="type">usize</span>, c: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">update</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">new_cells</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">with_capacity</span>(<span class="keyword">self</span>.height);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="keyword">self</span>.height &#123;</span><br><span class="line">            new_cells.<span class="title function_ invoke__">push</span>(<span class="built_in">vec!</span>[<span class="literal">false</span>; <span class="keyword">self</span>.width]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="variable">r</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="keyword">self</span>.height &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">c</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="keyword">self</span>.width &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">neighbors</span> = <span class="keyword">self</span>.<span class="title function_ invoke__">count_neighbors</span>(r, c);</span><br><span class="line">                <span class="keyword">match</span> neighbors &#123;</span><br><span class="line">                    <span class="number">0</span>..=<span class="number">1</span> =&gt; new_cells[r][c] = <span class="literal">false</span>,</span><br><span class="line">                    <span class="number">2</span> =&gt; new_cells[r][c] = <span class="keyword">self</span>.cells[r][c],</span><br><span class="line">                    <span class="number">3</span> =&gt; new_cells[r][c] = <span class="literal">true</span>,</span><br><span class="line">                    _ =&gt; new_cells[r][c] = <span class="literal">false</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.cells = new_cells;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次に、<code>count_neighbors</code>も完成した。分岐が多すぎて全然美しくないですが…。</p><p>三項演算子<code>cond?a:b</code>はないらしいが、<code>if cond &#123;a&#125; else &#123;b&#125;</code>は該当する使い方がグーグルして分かりました。<br>調べると、ブロックの最後が <code>;</code> のない式であれば、戻り値として使用されるからですね！（関数型言語の特徴かな？）</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">count_neighbors</span>(&amp;<span class="keyword">self</span>, r: <span class="type">usize</span>, c: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">cnt</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> r &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> c &gt; <span class="number">0</span> &#123;</span><br><span class="line">            cnt += <span class="keyword">if</span> <span class="keyword">self</span>.cells[r - <span class="number">1</span>][c - <span class="number">1</span>] &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt += <span class="keyword">if</span> <span class="keyword">self</span>.cells[r - <span class="number">1</span>][c] &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> c &lt; <span class="keyword">self</span>.width - <span class="number">1</span> &#123;</span><br><span class="line">            cnt += <span class="keyword">if</span> <span class="keyword">self</span>.cells[r - <span class="number">1</span>][c + <span class="number">1</span>] &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> c &gt; <span class="number">0</span> &#123;</span><br><span class="line">        cnt += <span class="keyword">if</span> <span class="keyword">self</span>.cells[r][c - <span class="number">1</span>] &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> c &lt; <span class="keyword">self</span>.width - <span class="number">1</span> &#123;</span><br><span class="line">        cnt += <span class="keyword">if</span> <span class="keyword">self</span>.cells[r][c + <span class="number">1</span>] &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> r &lt; <span class="keyword">self</span>.height - <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> c &gt; <span class="number">0</span> &#123;</span><br><span class="line">            cnt += <span class="keyword">if</span> <span class="keyword">self</span>.cells[r + <span class="number">1</span>][c - <span class="number">1</span>] &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt += <span class="keyword">if</span> <span class="keyword">self</span>.cells[r + <span class="number">1</span>][c] &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> c &lt; <span class="keyword">self</span>.width - <span class="number">1</span> &#123;</span><br><span class="line">            cnt += <span class="keyword">if</span> <span class="keyword">self</span>.cells[r + <span class="number">1</span>][c + <span class="number">1</span>] &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22-00-Completed"><a href="#22-00-Completed" class="headerlink" title="22:00 Completed"></a>22:00 Completed</h4><p>最終的に次のコードが完成形です。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::prelude::random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">GameOfLife</span> &#123;</span><br><span class="line">    width: <span class="type">usize</span>,</span><br><span class="line">    height: <span class="type">usize</span>,</span><br><span class="line">    cells: <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">bool</span>&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">GameOfLife</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(width: <span class="type">usize</span>, height: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">gol</span> = GameOfLife &#123;</span><br><span class="line">            width,</span><br><span class="line">            height,</span><br><span class="line">            cells: <span class="type">Vec</span>::<span class="title function_ invoke__">with_capacity</span>(height),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> <span class="number">0</span>..height &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">row</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">with_capacity</span>(width);</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> <span class="number">0</span>..width &#123;</span><br><span class="line">                row.<span class="title function_ invoke__">push</span>(<span class="title function_ invoke__">random</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            gol.cells.<span class="title function_ invoke__">push</span>(row);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">count_neighbors</span>(&amp;<span class="keyword">self</span>, r: <span class="type">usize</span>, c: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">cnt</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> r &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> c &gt; <span class="number">0</span> &#123;</span><br><span class="line">                cnt += <span class="keyword">if</span> <span class="keyword">self</span>.cells[r - <span class="number">1</span>][c - <span class="number">1</span>] &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt += <span class="keyword">if</span> <span class="keyword">self</span>.cells[r - <span class="number">1</span>][c] &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">            <span class="keyword">if</span> c &lt; <span class="keyword">self</span>.width - <span class="number">1</span> &#123;</span><br><span class="line">                cnt += <span class="keyword">if</span> <span class="keyword">self</span>.cells[r - <span class="number">1</span>][c + <span class="number">1</span>] &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> c &gt; <span class="number">0</span> &#123;</span><br><span class="line">            cnt += <span class="keyword">if</span> <span class="keyword">self</span>.cells[r][c - <span class="number">1</span>] &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> c &lt; <span class="keyword">self</span>.width - <span class="number">1</span> &#123;</span><br><span class="line">            cnt += <span class="keyword">if</span> <span class="keyword">self</span>.cells[r][c + <span class="number">1</span>] &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> r &lt; <span class="keyword">self</span>.height - <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> c &gt; <span class="number">0</span> &#123;</span><br><span class="line">                cnt += <span class="keyword">if</span> <span class="keyword">self</span>.cells[r + <span class="number">1</span>][c - <span class="number">1</span>] &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt += <span class="keyword">if</span> <span class="keyword">self</span>.cells[r + <span class="number">1</span>][c] &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">            <span class="keyword">if</span> c &lt; <span class="keyword">self</span>.width - <span class="number">1</span> &#123;</span><br><span class="line">                cnt += <span class="keyword">if</span> <span class="keyword">self</span>.cells[r + <span class="number">1</span>][c + <span class="number">1</span>] &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">update</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">new_cells</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">with_capacity</span>(<span class="keyword">self</span>.height);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="keyword">self</span>.height &#123;</span><br><span class="line">            new_cells.<span class="title function_ invoke__">push</span>(<span class="built_in">vec!</span>[<span class="literal">false</span>; <span class="keyword">self</span>.width]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="variable">r</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="keyword">self</span>.height &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">c</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="keyword">self</span>.width &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">neighbors</span> = <span class="keyword">self</span>.<span class="title function_ invoke__">count_neighbors</span>(r, c);</span><br><span class="line">                <span class="keyword">match</span> neighbors &#123;</span><br><span class="line">                    <span class="number">0</span>..=<span class="number">1</span> =&gt; new_cells[r][c] = <span class="literal">false</span>,</span><br><span class="line">                    <span class="number">2</span> =&gt; new_cells[r][c] = <span class="keyword">self</span>.cells[r][c],</span><br><span class="line">                    <span class="number">3</span> =&gt; new_cells[r][c] = <span class="literal">true</span>,</span><br><span class="line">                    _ =&gt; new_cells[r][c] = <span class="literal">false</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.cells = new_cells;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">row</span> <span class="keyword">in</span> &amp;<span class="keyword">self</span>.cells &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">cell</span> <span class="keyword">in</span> row &#123;</span><br><span class="line">                <span class="keyword">if</span> *cell &#123;</span><br><span class="line">                    <span class="built_in">print!</span>(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">print!</span>(<span class="string">&quot;. &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">print!</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">width</span> = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">height</span> = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">sleep_time</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">game</span> = GameOfLife::<span class="title function_ invoke__">new</span>(width, height);</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        game.<span class="title function_ invoke__">update</span>();</span><br><span class="line">        game.<span class="title function_ invoke__">render</span>();</span><br><span class="line">        std::thread::<span class="title function_ invoke__">sleep</span>(std::time::Duration::<span class="title function_ invoke__">from_millis</span>(sleep_time));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cargo run</code> の実行結果です。</p><img src="/images/20240322a/Screen_Recording_2024-03-18_at_0.28.59.gif" alt="Screen_Recording_2024-03-18_at_0.28.59.gif" width="1200" height="729" loading="lazy"><h2 id="Next-Step"><a href="#Next-Step" class="headerlink" title="Next Step"></a>Next Step</h2><ul><li>現在はランダムな開始状態でスタートするしか対応していないが、<a href="https://conwaylife.com/wiki/Run_Length_Encoded">RLE</a>フォーマットなどのパターンファイルを読むようにしたい</li><li>現在は固定なステージサイズになっているが、動的に拡大するなり、Rustの威力を発揮できる並行計算を試したい</li><li>Rust+WebAssemblyを使ってブラウザ上でUIを作りたい</li></ul><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><ul><li>Rustが古くはないが、割とC&#x2F;C++のようにローレベルで、型やメモリの形態などをケアする言語であり、コーディングゼロ経験の人にPythonやJavaScriptほど優しくない</li><li>型推論が限界までやってくれてすごく優秀で、好きになる理由の一つ</li><li>コンパイラが厳しくて、コーディングのあるべきをちゃんと教えてくれるので、とても勉強になる</li></ul><h2 id="他の良い学習リソース"><a href="#他の良い学習リソース" class="headerlink" title="他の良い学習リソース"></a>他の良い学習リソース</h2><p>Rust Documentation<br><a href="https://doc.rust-lang.org/beta/">https://doc.rust-lang.org/beta/</a></p><p>Official Learn Rust<br><a href="https://www.rust-lang.org/learn">https://www.rust-lang.org/learn</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;週末を利活用したく、新しい言語をゼロから学習して即戦力を備えるまでどのぐらいかかるかを実験してみました。&lt;/p&gt;
&lt;h4</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="Rust" scheme="https://future-architect.github.io/tags/Rust/"/>
    
    <category term="ChatGPT" scheme="https://future-architect.github.io/tags/ChatGPT/"/>
    
    <category term="Conways_Game_of_Life" scheme="https://future-architect.github.io/tags/Conways-Game-of-Life/"/>
    
  </entry>
  
  <entry>
    <title>Terraform連載2024 テストとモックを使ってみる</title>
    <link href="https://future-architect.github.io/articles/20240321a/"/>
    <id>https://future-architect.github.io/articles/20240321a/</id>
    <published>2024-03-20T15:00:00.000Z</published>
    <updated>2024-03-21T01:27:34.967Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20240321a/top.png" alt="" width="800" height="555"><p><a href="/articles/20240311a/">Terraform連載2024を</a> の7本目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！ TIG Chill Architect の前原です。<br>Terraform を使ってクラウド環境とか構築する人は多くいると思います。<br>その中で毎回のようにどうやってテストをやるべきなのかなーとか悩んで、結果大したことも出来ずにリリースまで来てしまったということはないでしょうか。</p><p>今回は、その悩みを少しでも払拭できないかと思い、Terraform v1.6 とv1.7 で提供された<a href="https://developer.hashicorp.com/terraform/language/tests">tests</a>と<a href="https://developer.hashicorp.com/terraform/language/tests/mocking">mocks</a>に触れていきたいと思います。</p><h1 id="今までの試み"><a href="#今までの試み" class="headerlink" title="今までの試み"></a>今までの試み</h1><p>今までは、<a href="https://github.com/terraform-linters/tflint">TFLint</a>を導入し、コードチェックを行うことを実施していました。</p><p>ただし、この方式だと静的コード解析のため、より踏み込んだところまでいけませんでした。静的コード解析にプラスして動的なテストができると良いなーって感じていました。（<a href="https://github.com/gruntwork-io/terratest">terratest</a>というのもありますが、導入コストが高い）</p><h1 id="terraform-test"><a href="#terraform-test" class="headerlink" title="terraform test"></a>terraform test</h1><p><code>terraform test</code>は、実際にコードを実行し、動的にテストを行うことができます。</p><p>これによりコードの信頼性、品質を高めることができます。</p><p>module に対してのテストが強力ですが、module 以外でも利用可能です。</p><h2 id="こんなことができる"><a href="#こんなことができる" class="headerlink" title="こんなことができる"></a>こんなことができる</h2><p><code>terraform test</code> は、以下のようなことができます（他にもできることがある）</p><ul><li><code>terraform plan</code> を実行し、期待する結果が得られるかを確認することができる</li><li><code>terraorm apply</code> を実行した時に期待する結果が得られるかを確認することができる<ul><li>実際にリソースを作成し、削除まで行う</li></ul></li><li>期待する結果を<code>condition</code>に書いて判定を行う</li><li>Data Source を取得できる</li></ul><h2 id="実際に動かしてみる"><a href="#実際に動かしてみる" class="headerlink" title="実際に動かしてみる"></a>実際に動かしてみる</h2><p>それでは、実際に簡単なコードを作成して動かしてみたいと思います。<br>Terraform のバージョンは、1.6以上にしてください。<br>バージョンの切り替えが面倒だなって思ったら<a href="https://github.com/tfutils/tfenv">tfenv</a>をインストールすると少し幸せになれます。<br>また、クラウドは、AWS です。</p><p>S3 バケットを作成し、そのS3 バケット名が期待する名前なのかをテストするコードを書きたいと思います。<br>正直、このコードがテスト用途として必要か？というのはありますが、まずは慣れるというのを目的にしたいと思います。</p><p>ディレクトリは、以下の構成です。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── backend.tf</span><br><span class="line">├── local.tf</span><br><span class="line">├── s3_bucket.tf</span><br><span class="line">├── s3_bucket.tftest.hcl</span><br><span class="line">└── versions.tf</span><br></pre></td></tr></table></figure><p>コードは、以下です。<br><code>backend.tf</code> を省略していますが、よしなにお願いします。</p><figure class="highlight sh"><figcaption><span>local.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  project_name  = <span class="string">&quot;sample&quot;</span></span><br><span class="line">  region        = <span class="string">&quot;ap-northeast-1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>s3_bucket.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_s3_bucket&quot;</span> <span class="string">&quot;test001&quot;</span> &#123;</span><br><span class="line">  bucket = <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;local.project_name&#125;</span>-test001&quot;</span></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name        = <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;local.project_name&#125;</span>-test001&quot;</span></span><br><span class="line">    Environment = terraform.workspace</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>versions.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_version = <span class="string">&quot;~&gt; 1.7.5&quot;</span></span><br><span class="line">  required_providers &#123;</span><br><span class="line">    aws = &#123;</span><br><span class="line">      <span class="built_in">source</span>  = <span class="string">&quot;hashicorp/aws&quot;</span></span><br><span class="line">      version = <span class="string">&quot;5.41.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">&quot;aws&quot;</span> &#123;</span><br><span class="line">  region = local.region</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>テストコードを作成します。<br>conditionに記述したS3 バケット名と実際のS3 バケット名を比較して問題ないかをチェックしています。<br>仮に期待していない値の場合は、<code>error_message</code>の値が出力されます。</p><figure class="highlight sh"><figcaption><span>s3_bucket.tftest.hcl</span></figcaption><table><tr><td class="code"><pre><span class="line">run <span class="string">&quot;test&quot;</span> &#123;</span><br><span class="line">  assert &#123;</span><br><span class="line">    condition     = aws_s3_bucket.test.bucket == <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;local.project_name&#125;</span>-test&quot;</span></span><br><span class="line">    error_message = <span class="string">&quot;S3 bucket name did not match expected&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>テストが成功した時は、以下の出力となります。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ terraform <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">tests/s3_bucket.tftest.hcl... <span class="keyword">in</span> progress</span><br><span class="line">  run <span class="string">&quot;test&quot;</span>... pass</span><br><span class="line">tests/s3_bucket.tftest.hcl... tearing down</span><br><span class="line">tests/s3_bucket.tftest.hcl... pass</span><br><span class="line"></span><br><span class="line">Success! 1 passed, 0 failed.</span><br></pre></td></tr></table></figure><p>失敗した時は、以下です。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ terraform <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">tests/s3_bucket.tftest.hcl... <span class="keyword">in</span> progress</span><br><span class="line">  run <span class="string">&quot;test&quot;</span>... fail</span><br><span class="line">╷</span><br><span class="line">│ Error: Test assertion failed</span><br><span class="line">│</span><br><span class="line">│   on tests/s3_bucket.tftest.hcl line 4, <span class="keyword">in</span> run <span class="string">&quot;test&quot;</span>:</span><br><span class="line">│    4:     condition     = aws_s3_bucket.test.bucket == <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;local.project_name&#125;</span>-test1&quot;</span></span><br><span class="line">│     ├────────────────</span><br><span class="line">│     │ aws_s3_bucket.test.bucket is <span class="string">&quot;dev-sample-test&quot;</span></span><br><span class="line">│     │ local.project_name is <span class="string">&quot;sample&quot;</span></span><br><span class="line">│     │ terraform.workspace is <span class="string">&quot;dev&quot;</span></span><br><span class="line">│</span><br><span class="line">│ S3 bucket name did not match expected</span><br><span class="line">╵</span><br><span class="line">tests/s3_bucket.tftest.hcl... tearing down</span><br><span class="line">tests/s3_bucket.tftest.hcl... fail</span><br><span class="line"></span><br><span class="line">Failure! 0 passed, 1 failed.</span><br></pre></td></tr></table></figure><p>テストファイルをカレントディレクトリに配置していますが、ディレクトリを分けることも可能です。<br>例えば以下のようにすることが可能です。<br><code>tests</code>ディレクトリであればデフォルト指定されているため、読み込まれます。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── backend.tf</span><br><span class="line">├── local.tf</span><br><span class="line">├── s3_bucket.tf</span><br><span class="line">├── tests</span><br><span class="line">│   └── s3_bucket.tftest.hcl</span><br><span class="line">└── versions.tf</span><br></pre></td></tr></table></figure><p>別のディレクトリ名で実行したい場合は、以下のように指定することも可能です。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">terraform <span class="built_in">test</span> -test-directory=hoge</span><br></pre></td></tr></table></figure><p>今回は、<code>apply</code>を実行したのですが、<code>plan</code>を実行したいときは、以下のように<code>command</code>　指定します。</p><figure class="highlight sh"><figcaption><span>s3_bucket.tftest.hcl</span></figcaption><table><tr><td class="code"><pre><span class="line">run <span class="string">&quot;test&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">command</span> = plan</span><br><span class="line">  assert &#123;</span><br><span class="line">    condition     = aws_s3_bucket.test.bucket == <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;local.project_name&#125;</span>-test&quot;</span></span><br><span class="line">    error_message = <span class="string">&quot;S3 bucket name did not match expected&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意としては、<code>apply</code>を実行する際に既にリソースが作成されている場合は、以下のエラーが出力されます。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ terraform <span class="built_in">test</span></span><br><span class="line">sample.tftest.hcl... <span class="keyword">in</span> progress</span><br><span class="line">  run <span class="string">&quot;sample&quot;</span>... fail</span><br><span class="line">╷</span><br><span class="line">│ Error: creating S3 Bucket (dev-sample-test): operation error S3: CreateBucket, https response error StatusCode: 409, RequestID: 5FC2KQ07G6SGK0W1, HostID: uhahHveFHZBJiEnSDfTsnqVd6gQBmRx+GabbLzMB2jlBkxlPGjblnyuY17MHMoo3UC2uODLSMWk=, BucketAlreadyOwnedByYou:</span><br></pre></td></tr></table></figure><h1 id="terraform-mock"><a href="#terraform-mock" class="headerlink" title="terraform mock"></a>terraform mock</h1><p><code>terraform test</code> は、非常に便利で日々の運用を良くするための強力なツールであることがわかるかと思います。<br>ただ、ローカル開発する中で強力なキーを持たせたくないや、使用できない状況があると思います。<br>また、CI を回すためにも必要といったケースもあるかと思います。<br>そういった時に便利な<code>terraform mock</code>を使っていきたいと思います。</p><h2 id="実際に動かしてみる-1"><a href="#実際に動かしてみる-1" class="headerlink" title="実際に動かしてみる"></a>実際に動かしてみる</h2><p>ディレクトリは、以下の構成です。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── backend.tf</span><br><span class="line">├── local.tf</span><br><span class="line">├── mocked_providers.tftest.hcl</span><br><span class="line">├── s3_bucket.tf</span><br><span class="line">├── s3_bucket.tftest.hcl</span><br><span class="line">└── versions.tf</span><br></pre></td></tr></table></figure><p><code>terraform test</code> をベースに作成しているため差分のみを記載します。<br>以下にモック用のプロバイダを指定します。</p><figure class="highlight sh"><figcaption><span>mocked_providers.tftest.hcl</span></figcaption><table><tr><td class="code"><pre><span class="line">mock_provider <span class="string">&quot;aws&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">alias</span> = <span class="string">&quot;fake&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run <span class="string">&quot;use_mocked_provider&quot;</span> &#123;</span><br><span class="line">  providers = &#123;</span><br><span class="line">    aws = aws.fake</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>versions.tf</code>のprovider 定義を削除します。</p><figure class="highlight sh"><figcaption><span>versions.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_version = <span class="string">&quot;~&gt; 1.7.5&quot;</span></span><br><span class="line">  required_providers &#123;</span><br><span class="line">    aws = &#123;</span><br><span class="line">      <span class="built_in">source</span>  = <span class="string">&quot;hashicorp/aws&quot;</span></span><br><span class="line">      version = <span class="string">&quot;5.41.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>モックを動かす際も<code>terraform test</code> コマンドを使用します。<br>実際に実行したいと思います。<br>アクセスキーを利用せずとも実行できることが確認できるかと思います。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ terraform <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">mocked_providers.tftest.hcl... <span class="keyword">in</span> progress</span><br><span class="line">  run <span class="string">&quot;use_mocked_provider&quot;</span>... pass</span><br><span class="line">mocked_providers.tftest.hcl... tearing down</span><br><span class="line">mocked_providers.tftest.hcl... pass</span><br><span class="line">s3_bucket.tftest.hcl... <span class="keyword">in</span> progress</span><br><span class="line">  run <span class="string">&quot;test&quot;</span>... pass</span><br><span class="line">s3_bucket.tftest.hcl... tearing down</span><br><span class="line">s3_bucket.tftest.hcl... pass</span><br><span class="line"></span><br><span class="line">Success! 2 passed, 0 failed.</span><br></pre></td></tr></table></figure><p>もしモックと<code>terraform test</code>のように実際のリソースに対してテストを行いたい場合は、以下のプロバイダ指定で行うことができます。</p><figure class="highlight sh"><figcaption><span>mocked_providers.tftest.hcl</span></figcaption><table><tr><td class="code"><pre><span class="line">provider <span class="string">&quot;aws&quot;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">mock_provider <span class="string">&quot;aws&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">alias</span> = <span class="string">&quot;fake&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run <span class="string">&quot;use_real_provider&quot;</span> &#123;</span><br><span class="line">  providers = &#123;</span><br><span class="line">    aws = aws</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run <span class="string">&quot;use_mocked_provider&quot;</span> &#123;</span><br><span class="line">  providers = &#123;</span><br><span class="line">    aws = aws.fake</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他にもモックで返される値をよしなに変更するといったことも可能です。</p><h2 id="どういったケースで使うのがいいのだろうか"><a href="#どういったケースで使うのがいいのだろうか" class="headerlink" title="どういったケースで使うのがいいのだろうか"></a>どういったケースで使うのがいいのだろうか</h2><p>すべてのリソースに対して無邪気にテストコードを書くのは、とても非効率です。<br>そのため、テストを行う場合の考慮すべきポイントを以下にまとめたいと思います。<br>（個人的なポイントのため、あくまで参考レベルです）</p><h3 id="クリティカルなインフラ系のリソース"><a href="#クリティカルなインフラ系のリソース" class="headerlink" title="クリティカルなインフラ系のリソース"></a>クリティカルなインフラ系のリソース</h3><p>セキュリティグループ、IAMポリシー、VPC設定など、セキュリティやアプリケーションの正常な動作に直接影響を与えるクリティカルなインフラ系のリソースに対してテストを行うのが良いと思います。</p><h3 id="依存関係のあるリソース"><a href="#依存関係のあるリソース" class="headerlink" title="依存関係のあるリソース"></a>依存関係のあるリソース</h3><p>複数のリソース間で複雑な依存関係を持つパターン（例えば、セキュリティグループのルールが特定のリソースに依存している場合など）<br>これらの依存関係を正確に反映しているかを確認するときに良いと思います。</p><h3 id="コストに大きな影響を与えるリソース"><a href="#コストに大きな影響を与えるリソース" class="headerlink" title="コストに大きな影響を与えるリソース"></a>コストに大きな影響を与えるリソース</h3><p>インスタンスタイプによっては、大きくコストに跳ねるため、サイズ、数などをテストすることは有効です。<br>これにより、予期しないコストの発生を防ぐことができます。</p><h3 id="変更頻度の高いリソース"><a href="#変更頻度の高いリソース" class="headerlink" title="変更頻度の高いリソース"></a>変更頻度の高いリソース</h3><p>変更頻度が高いとミスが発生する可能性が高くなります。<br>そのため、それらに対してテストを行うのは有効かと思います。</p><h3 id="モジュール"><a href="#モジュール" class="headerlink" title="モジュール"></a>モジュール</h3><p>モジュールは、複数のリソースを包括的に管理するため、複雑な構成となります。<br>モジュールの期待する結果をテストでカバーすることができるため、再利用性、品質の向上につながるかと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>いかがでしたでしょうか。<br>今回紹介したTerraform の機能を利用することで少しでもテストの有効性や導入のきっかけになれば幸いです。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.hashicorp.com/blog/terraform-1-7-adds-test-mocking-and-config-driven-remove">Terraform 1.7 adds test mocking and config-driven remove</a></li><li><a href="https://developer.hashicorp.com/terraform/tutorials/configuration-language/test">Write Terraform Tests</a></li><li><a href="https://developer.hashicorp.com/terraform/language/tests/mocking#mock-provider-data">Mocks</a></li><li><a href="https://developer.hashicorp.com/terraform/language/tests">Tests</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20240321a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;555&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/articles/20240311a/&quot;&gt;Terraform連載2024を&lt;/a&gt;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="terraform test" scheme="https://future-architect.github.io/tags/terraform-test/"/>
    
    <category term="terraform mock" scheme="https://future-architect.github.io/tags/terraform-mock/"/>
    
  </entry>
  
  <entry>
    <title>cfn-guardを使ってTerraformをポリシーチェックしようとした話</title>
    <link href="https://future-architect.github.io/articles/20240318a/"/>
    <id>https://future-architect.github.io/articles/20240318a/</id>
    <published>2024-03-17T15:00:00.000Z</published>
    <updated>2024-03-18T04:40:03.505Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20240311a/">Terraform連載2024を</a> の6本目です。</p><h2 id="導入"><a href="#導入" class="headerlink" title="導入"></a>導入</h2><p>インフラエンジニアとして働いているTIGの原木です。</p><p>cfn-guardを使用してTerraformをポリシーチェックしようとした話をします。</p><h2 id="cfn-guardとは？"><a href="#cfn-guardとは？" class="headerlink" title="cfn-guardとは？"></a>cfn-guardとは？</h2><p>cfn-guardのcfnとはAWSのCloudFormation(AWSのIaCソリューションのこと)の略称です。</p><p>このツールはCloudFormationを使ってAWSのリソースをデプロイするときにその内容をチェックするポリシーチェックツールとしてよく使われています。</p><p>しかし、cfn-guardはその名前に反して、CloudFormationに限らず、JSON&#x2F;YAMLファイルに対する汎用的なポリシーチェックツールとしても使用することができます。</p><p>READMEの記載にも、次の通り説明があります。</p><blockquote><p>Guard offers a policy-as-code domain-specific language (DSL) to write rules and validate JSON- and YAML-formatted data such as CloudFormation Templates, K8s configurations, and Terraform JSON plans&#x2F;configurations against those rules.</p><p>Guardは、CloudFormationテンプレート、K8sコンフィグレーション、TerraformのJSONプラン&#x2F;コンフィグレーションなどのJSONやYAMLフォーマットのデータに対して、ルールを記述し検証するためのPolicy as Codeなドメイン固有言語(DSL)を提供します。</p></blockquote><p>AWS Certified Securityの勉強をしていて本ツールの名前を知り、READMEを見て、自分は興味を持ちました。</p><h2 id="cfn-guardでTerraformをチェックしようとしたモチベーション"><a href="#cfn-guardでTerraformをチェックしようとしたモチベーション" class="headerlink" title="cfn-guardでTerraformをチェックしようとしたモチベーション"></a>cfn-guardでTerraformをチェックしようとしたモチベーション</h2><p>Terraformのポリシーチェックとしては、過去にFuture技術ブログで紹介したtflintやterraform validator<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、tfsec<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>等すでに様々なツールがあります。</p><p>その中でなぜあえて、cfn-guardをTerraform planをチェックしようとしたのか？</p><p>それはcfn-guardに読み込ませるルール表となるCFn Guard DSLとAWSマネージドサービスの力を借りてインフラをデプロイする前から後まで一貫したポリシーチェックができるのではないか。と考えたためです。</p><p>一度CFn Guard DSL(ポリシールール)を書くことで二度おいしいメリットがあると考えました。</p><ul><li>Terraformのコーディング中に、cfn-guardによりユニットテストを動かす感覚でポリシーチェックを随時できるようになります</li><li>Terraformを使ってAWSインフラを構築後、意図しない形でリソースが変更されてもAWS ConfigによりトリガーされたCFn Guardルールのスキャンによってインフラのドリフトを検知できるようになります</li></ul><p><a href="https://speakerdeck.com/ohmura/policy-as-code-with-cloudformation-guard?slide=7">CloudFormation Guard で Policy as Code！ 実際どうよ？ &#x2F; Policy as Code with CloudFormation Guard</a>のスライドをお借りすると次のようなイメージです。</p><img src="/images/20240318a/image.png" alt="image.png" width="1200" height="682" loading="lazy"><p>このような <strong>青写真</strong> を描きました。</p><p>このブログでは、cfn-guardを検証し…そして、思ってたのと違った!!という話をしたいと思います。</p><h2 id="なにはともあれ実践してみよう"><a href="#なにはともあれ実践してみよう" class="headerlink" title="なにはともあれ実践してみよう"></a>なにはともあれ実践してみよう</h2><p>一番基礎的な使い方として、S3ファイルをデプロイするterraformのファイルをチェックする方法について書きたいと思います。</p><p>前提として、cfn-guardはHCLファイル(要は.tfファイル)を直接チェックできず、JSON&#x2F;YAMLファイルを読み込ませないといけないので、 <code>terraform plan</code> の実行結果からJSONファイルを作成する必要があります。</p><p>下記のようにS3バケットを作成するHCLファイルがあったとしましょう。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># provider等は省略します</span></span><br><span class="line">resource <span class="string">&quot;aws_s3_bucket&quot;</span> <span class="string">&quot;my_bucket&quot;</span> &#123;</span><br><span class="line">  bucket = <span class="string">&quot;my-bucket&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_s3_bucket_public_access_block&quot;</span> <span class="string">&quot;my_bucket&quot;</span> &#123;</span><br><span class="line">  bucket = aws_s3_bucket.my_bucket.id</span><br><span class="line"></span><br><span class="line">  block_public_acls       = <span class="literal">true</span></span><br><span class="line">  block_public_policy     = <span class="literal">true</span></span><br><span class="line">  ignore_public_acls      = <span class="literal">true</span></span><br><span class="line">  restrict_public_buckets = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このファイルがまだ未作成の場合、次のようにコマンドを実行することで<br>作成後に想定されるリソース構成をJSONファイルで出力することができます。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">terraform plan -out tfplan.bin</span><br><span class="line">terraform show --json tfplan.bin &gt; tfplan.json</span><br></pre></td></tr></table></figure><p><code>tfplan.json</code> のファイル構造を分解して中身を見てみましょう。<br>※そのままだと見づらいのでJSONファイルをサブセットであるYAMLファイルに変換して表示します。<br>※YAMLファイルでも素のJSONファイルでもcfn-guardは動かすことができます。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">format_version:</span> <span class="string">&quot;1.2&quot;</span></span><br><span class="line"><span class="attr">terraform_version:</span> <span class="number">1.6</span><span class="number">.1</span></span><br><span class="line"><span class="attr">planned_values:</span></span><br><span class="line">  <span class="string">//</span> <span class="string">terraformがplanしたリソースの最終的な構成情報</span></span><br><span class="line">  <span class="attr">root_module:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">address:</span> <span class="string">aws_s3_bucket.my_bucket</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">managed</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">aws_s3_bucket</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">my_bucket</span></span><br><span class="line">        <span class="attr">provider_name:</span> <span class="string">registry.terraform.io/hashicorp/aws</span></span><br><span class="line">        <span class="attr">schema_version:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">values:</span></span><br><span class="line">          <span class="attr">bucket:</span> <span class="string">my-bucket1</span></span><br><span class="line">          <span class="attr">force_destroy:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">tags:</span> <span class="literal">null</span></span><br><span class="line">          <span class="attr">tags_all:</span></span><br><span class="line">            <span class="attr">env:</span> <span class="string">dev</span></span><br><span class="line">          <span class="attr">timeouts:</span> <span class="literal">null</span></span><br><span class="line">        <span class="attr">sensitive_values:</span></span><br><span class="line">          <span class="attr">cors_rule:</span> []</span><br><span class="line">          <span class="attr">grant:</span> []</span><br><span class="line">          <span class="attr">lifecycle_rule:</span> []</span><br><span class="line">          <span class="attr">logging:</span> []</span><br><span class="line">          <span class="attr">object_lock_configuration:</span> []</span><br><span class="line">          <span class="attr">replication_configuration:</span> []</span><br><span class="line">          <span class="attr">server_side_encryption_configuration:</span> []</span><br><span class="line">          <span class="attr">tags_all:</span> &#123;&#125;</span><br><span class="line">          <span class="attr">versioning:</span> []</span><br><span class="line">          <span class="attr">website:</span> []</span><br><span class="line">      <span class="bullet">-</span> <span class="attr">address:</span> <span class="string">aws_s3_bucket_public_access_block.my_bucket</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">managed</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">aws_s3_bucket_public_access_block</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">my_bucket</span></span><br><span class="line">        <span class="attr">provider_name:</span> <span class="string">registry.terraform.io/hashicorp/aws</span></span><br><span class="line">        <span class="attr">schema_version:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">values:</span></span><br><span class="line">          <span class="attr">block_public_acls:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">block_public_policy:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">ignore_public_acls:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">restrict_public_buckets:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">sensitive_values:</span> &#123;&#125;</span><br><span class="line"><span class="attr">resource_changes:</span></span><br><span class="line">  <span class="string">//</span> <span class="string">既存リソースに対する変更内容</span></span><br><span class="line">  <span class="string">//</span> <span class="string">省略</span></span><br><span class="line"><span class="attr">configuration:</span></span><br><span class="line">  <span class="string">//</span> <span class="string">元の状態に適用される構成のこと</span></span><br><span class="line">  <span class="string">//</span> <span class="string">省略</span></span><br><span class="line"><span class="attr">relevant_attributes:</span></span><br><span class="line">  <span class="string">//</span> <span class="string">変更されたリソースの関連属性</span></span><br><span class="line">  <span class="string">//</span> <span class="string">省略</span></span><br><span class="line"><span class="attr">timestamp:</span> <span class="string">&quot;2024-03-17T05:58:17Z&quot;</span></span><br><span class="line"><span class="attr">errored:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>上記リソースをチェックするためのリソースポリシーを書いてみます。</p><p>よくあるリソースポリシーとして</p><ul><li>S3のバケット名が特定の命名規則にしたがっていること</li><li>リソースに特定の環境を示すタグが入っていること</li></ul><p>をチェックしたいと思います。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> aws_s3_bucket_resources = planned_values.root_module.resources[<span class="built_in">type</span> == <span class="string">&quot;aws_s3_bucket&quot;</span>]</span><br><span class="line"></span><br><span class="line">rule aws_s3_bucket_rule when %aws_s3_bucket_resources !empty &#123;</span><br><span class="line">  <span class="comment"># バケット名は &quot;test-&quot; で始まる必要があります</span></span><br><span class="line">  %aws_s3_bucket_resources.values.bucket == /^<span class="built_in">test</span>-.*/</span><br><span class="line"></span><br><span class="line">  <span class="comment"># &quot;env&quot; タグが必ず含まれること</span></span><br><span class="line">  <span class="built_in">let</span> required_tags = %aws_s3_bucket_resources.values.tags_all[ </span><br><span class="line">      Key == <span class="string">&#x27;env&#x27;</span> ] </span><br><span class="line">  %required_tags[*] &#123;</span><br><span class="line">      Value IN [<span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;stg&#x27;</span>, <span class="string">&#x27;prod&#x27;</span>, <span class="string">&#x27;demo&#x27;</span>]</span><br><span class="line">      &lt;&lt;<span class="string">Tag must have a permitted value&gt;&gt;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>このルールに従っているか実際に <code>cfn-guard</code> を動かし、チェックしてみましょう。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cfn-guard validate -r s3_template_example.guard -d infrastructure/tfplan1.json -o yaml</span></span><br><span class="line">tfplan1.json Status = FAIL</span><br><span class="line">FAILED rules</span><br><span class="line">s3_template_example.guard/aws_s3_bucket_rule                    FAIL</span><br><span class="line">---</span><br><span class="line">name: tfplan1.json</span><br><span class="line">metadata: &#123;&#125;</span><br><span class="line">status: FAIL</span><br><span class="line">not_compliant:</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">出力内容はわかりやすくするために途中端折ってます</span></span><br><span class="line">- Rule:</span><br><span class="line">    name: aws_s3_bucket_rule</span><br><span class="line">    checks:</span><br><span class="line">    - Clause:</span><br><span class="line">        Binary:</span><br><span class="line">          context: &#x27; %aws_s3_bucket_resources[*].values.bucket EQUALS  &quot;/^test-.*/&quot;&#x27;</span><br><span class="line">          messages:</span><br><span class="line">            custom_message: &#x27;&#x27;</span><br><span class="line">            error_message: Check was not compliant as property value [Path=/planned_values/root_module/resources/0/values/bucket[L:0,C:286] Value=&quot;my-bucket&quot;] not equal to value [Path=[L:0,C:0] Value=&quot;/^test-.*/&quot;].</span><br><span class="line">          check:</span><br><span class="line">            Resolved:</span><br><span class="line">              from:</span><br><span class="line">                path: /planned_values/root_module/resources/0/values/bucket</span><br><span class="line">                value: my-bucket</span><br><span class="line">              to:</span><br><span class="line">                path: &#x27;&#x27;</span><br><span class="line">                value: /^test-.*/</span><br><span class="line">              comparison:</span><br><span class="line">              - Eq</span><br><span class="line">              - false</span><br></pre></td></tr></table></figure><p>エラーになりました。contextを確認すると、 <code>context: &#39; %aws_s3_bucket_resources[*].values.bucket EQUALS  &quot;/^test-.*/&quot;&#39;</code> とあるようにバケットの命名規則がルールに従っていないことがわかります。</p><p>そこでバケット名を修正し、再度 <code>cfn-guard</code> にかけてみます。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修正したs3.tf及びyamlファイルは割愛</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cfn-guard validate -r s3_template_example.guard -d infrastructure/tfplan2.json -o yaml</span></span><br><span class="line">name: tfplan2.json</span><br><span class="line">metadata: &#123;&#125;</span><br><span class="line">status: PASS</span><br><span class="line">not_compliant: []</span><br><span class="line">not_applicable: []</span><br><span class="line">compliant:</span><br><span class="line">- aws_s3_bucket_rule</span><br><span class="line">- public_access_block_resources_rule</span><br></pre></td></tr></table></figure><p>今度は通りました。</p><p>序の口ではありますが、cfn-guardを使ったチェック方法について、雰囲気は掴めたのではないかと思います。しかし、ここから先、cfn-guardを深掘りするうちにギャップが広がっていくことに気づきました。</p><h2 id="ここが思ってたのと違ってたよという話"><a href="#ここが思ってたのと違ってたよという話" class="headerlink" title="ここが思ってたのと違ってたよという話"></a>ここが思ってたのと違ってたよという話</h2><p>当初の自分の妄想では、cfn-guardとは、AWSのリソースAPIにアクセスしていい感じにチェックするツールなのかなとふわっと思ってました。ですが、実践例にあるように実態はどうでしょうか？</p><p>カンの良い方はすぐに気づかれたかもしれません。</p><p>CloudFormationを例に先ほどと同じことをしてみましょう。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">AWSTemplateFormatVersion:</span> <span class="number">2010-09-09</span></span><br><span class="line"><span class="attr">Resources:</span></span><br><span class="line">  <span class="attr">MyS3Bucket4646DF6F:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::S3::Bucket</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">BucketName:</span> <span class="string">my-bucket</span></span><br><span class="line">    <span class="attr">UpdateReplacePolicy:</span> <span class="string">Delete</span></span><br><span class="line">    <span class="attr">DeletionPolicy:</span> <span class="string">Delete</span></span><br><span class="line">    <span class="attr">Metadata:</span></span><br><span class="line">      <span class="attr">aws:cdk:path:</span> <span class="string">CdkAppStack/MyS3Bucket/Resource</span></span><br></pre></td></tr></table></figure><p>というファイルに対してS3のバケット名の命名規則をチェックします。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> buckets = Resources.*[ Type == <span class="string">&#x27;AWS::S3::Bucket&#x27;</span> ]</span><br><span class="line"></span><br><span class="line">rule BucketEncryption when %buckets !empty &#123;</span><br><span class="line">  %buckets.Properties &#123;</span><br><span class="line">    BucketName == /^<span class="built_in">test</span>-.*/</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>別物やんけ。</p><p>その通りです。なぜなら、CloudFormationとTerraform planではファイルの構造が全然異なりますので。</p><p>cfn-guardの実態は、CFn Guard DSLに基づきJSONやYAMLなどの構造型データを検査する、ある意味シンプルな構文解析ツールです。</p><p>したがって、ポリシーファイルについてCloudFormation向けはCloudFormation向け、Terraform plan向けはTerraform plan向けに書く必要があります。そして後者のTerraform plan向けのポリシーファイルは、当然AWS Config上で動きません。</p><p>ここに当初の構想はからくも崩れたのでした。</p><p>ECSのTask Definitionのようにインラインで文字列化したJSONファイルをいい感じにパースする方法が見つからなかった、tagチェックでtagsとtags_allを別々にチェックする必要があった、そもそも構文エラー時説明してるようで何も説明してくれないエラーログ等、細かいことを言い出すときりがない不満があり、最終的に自分はおとなしくtflintに戻りました。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>Terraformユーザーには、cfn-guardの扱いは少々難しいところがあるという話でした。</p><p>ポリシールール等の設定について最近はChatGPT先生に下書きをお願いすることが多いのですが、彼女に自由に書かせたら、明らかにAWS CloudFormationテンプレート向けのguardファイルをTerraformと言い張ったのは悲しかったです。</p><p>WHY?と聞いたら次の通り開き直った回答が返ってきました。<br><img src="/images/20240318a/image_2.png" alt="" width="1200" height="1142" loading="lazy"></p><p>しかし、AWS CDKを使ってCloufFormationのテンプレートファイルを生成し、AWSリソースのデプロイを行っているユーザーにとって強力なポリシーチェックツールなのは間違いありません。</p><p><a href="https://github.com/aws-cloudformation/aws-guard-rules-registry">CFn Guard Rules Registry</a>には、ルールの実装例が多数掲載されております。<br>Amazon Web Services’ Well-Architected Framework Reliability Pillar等、インフラエンジニアが非機能要件を考える時のベストプラクティスを実装したポリシーファイル等もあり、痒い所に手が届く例となっています。</p><p>以上、参考になれば幸いです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">現在は <code>gcloud beta terraform vet</code> として提供中</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">現在は <code>trivyの1機能</code> として提供中</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20240311a/&quot;&gt;Terraform連載2024を&lt;/a&gt; の6本目です。&lt;/p&gt;
&lt;h2 id=&quot;導入&quot;&gt;&lt;a href=&quot;#導入&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="cfn-guard" scheme="https://future-architect.github.io/tags/cfn-guard/"/>
    
    <category term="Policy-as-Cod" scheme="https://future-architect.github.io/tags/Policy-as-Cod/"/>
    
    <category term="CloudFormation" scheme="https://future-architect.github.io/tags/CloudFormation/"/>
    
  </entry>
  
  <entry>
    <title>サービスの多国展開を支えるTerraform構成</title>
    <link href="https://future-architect.github.io/articles/20240315a/"/>
    <id>https://future-architect.github.io/articles/20240315a/</id>
    <published>2024-03-14T15:00:00.000Z</published>
    <updated>2024-03-15T01:10:34.991Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20240315a/image.png" alt="" width="1088" height="542" loading="lazy"><p><a href="/articles/20240311a/">Terraform連載2024</a>の5日目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>IaCを利用してインフラを構成することで、構築忘れや設定ミスといったイージーなミスが減らせるようになりました。とはいえ、展開していく範囲が増えれば増えるほどコードの量も増えていくので、このリソースはどこで作ったっけ…みたいなことが起きてしまいます。</p><p>現在の業務ではサービスの海外展開に携わっており、まさに多国展開絶賛実施中という状態です。その際、スペックは同じでもリージョンのみが異なるリソースを作成することが多々あり、環境の管理方法って大切だなーと実感しております。</p><p>そこで本記事では、Terraformを利用してシステムを他リージョンへロールアウトする場合のリソース管理・展開方法を3つ挙げてみました。もちろん、他にもたくさんあると思いますので、本記事が参考になると幸いです。</p><p>また、本連載の1日目でも伊藤さんがマルチリージョンによるDR（Disaster Recovery）戦略についての記事を書かれているので、こちらも参考にしてください。</p><p>参考：<a href="/articles/20240311a/">TerraformにおけるDR戦略を考える</a></p><h2 id="仮定"><a href="#仮定" class="headerlink" title="仮定"></a>仮定</h2><p>以下のような前提で考えてみます。</p><ul><li>Google Cloudを利用<ul><li>他クラウドベンダーでも応用可能だと思います</li></ul></li><li>各環境（Development&#x2F;Staging&#x2F;Production）毎でプロジェクトは同じになる<ul><li>dev-app&#x2F;stg-app&#x2F;prd-appの様に3つのプロジェクトが存在します</li></ul></li><li>ほぼ同じシステムを他リージョンへロールアウトしていく<ul><li>インスタンスのマシンスペックなど、リソース周りはカスタム可能にしたいと思います</li></ul></li><li>Terraformを実行するためのBastionサーバーが存在する<ul><li>各環境のBastionサーバーからTerraformをApplyすることになります</li><li>各BastionサーバーでBackendバケットへのアクセスは既に認証済みとなっています</li></ul></li></ul><h2 id="構成案①：ディレクトリ分けのみで管理する"><a href="#構成案①：ディレクトリ分けのみで管理する" class="headerlink" title="構成案①：ディレクトリ分けのみで管理する"></a>構成案①：ディレクトリ分けのみで管理する</h2><p>以下のように環境、リージョン<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>をそれぞれディレクトリ分けして管理します。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">envs</span><br><span class="line">├── modules</span><br><span class="line">│   └── ...</span><br><span class="line">├── development</span><br><span class="line">│   ├── common</span><br><span class="line">│   │   ├── backend.tf</span><br><span class="line">│   │   ├── compute_network.tf</span><br><span class="line">│   │   ├── project.tf</span><br><span class="line">│   │   ├── variable.tf</span><br><span class="line">│   │   └── versions.tf</span><br><span class="line">│   ├── sydney</span><br><span class="line">│   │   ├── backend.tf</span><br><span class="line">│   │   ├── compute_subnetwork.tf</span><br><span class="line">│   │   ├── data.tf</span><br><span class="line">│   │   ├── compute_instance.tf</span><br><span class="line">│   │   └── versions.tf</span><br><span class="line">│   └── tokyo</span><br><span class="line">├── production</span><br><span class="line">│   ├── common</span><br><span class="line">│   ├── ...</span><br><span class="line">└── staging</span><br><span class="line">    ├── common</span><br><span class="line">    ├── ...</span><br></pre></td></tr></table></figure><p>各環境の中にcommonとリージョン毎のディレクトリを持ちます。commonにはVPCやプロジェクトといった共通となるリソースを置き、リージョン毎に必要なリソースはリージョンディレクトリに配置します。<br>また、各ディレクトリでbackendを持ち、tfstateの管理を行う形となるため<code>terraform</code>コマンドは各ディレクトリに対して行う必要があります。</p><p>単純にディレクトリをコピペして展開していけるので、リージョンの追加があった場合でも共通リソースの展開であれば容易に実行できます。視覚的にもしっかり分かれているので、新規参画者などにも認知負荷が高くないです。</p><p>ただ、共通リソースを参照する場合は<code>data</code>として用意する必要があり、冗長な感じは否めません。</p><figure class="highlight sh"><figcaption><span>terraform data.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">data <span class="string">&quot;google_project&quot;</span> <span class="string">&quot;my_project&quot;</span> &#123;</span><br><span class="line">  project_id = <span class="string">&quot;ksst-bastion&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="構成案②：ディレクトリ分けとworkspaceを使って管理する"><a href="#構成案②：ディレクトリ分けとworkspaceを使って管理する" class="headerlink" title="構成案②：ディレクトリ分けとworkspaceを使って管理する"></a>構成案②：ディレクトリ分けとworkspaceを使って管理する</h2><p>以下のように環境をそれぞれディレクトリ分けして管理します。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">envs</span><br><span class="line">├── modules</span><br><span class="line">│   └── ...</span><br><span class="line">├── development</span><br><span class="line">│   ├── configs</span><br><span class="line">│   │   ├── sydney.tfvars</span><br><span class="line">│   │   └── tokyo.tfvars</span><br><span class="line">│   ├── backend.tf</span><br><span class="line">│   ├── compute_instance.tf</span><br><span class="line">│   ├── compute_network.tf</span><br><span class="line">│   ├── compute_subnetwork.tf</span><br><span class="line">│   ├── storage_bucket.tf</span><br><span class="line">│   ├── project.tf</span><br><span class="line">│   ├── variables.tf</span><br><span class="line">│   └── versions.tf</span><br><span class="line">├── production</span><br><span class="line">│   ├── configs</span><br><span class="line">│   │   ├── ...</span><br><span class="line">│   ├── backend.tf</span><br><span class="line">│   ...</span><br><span class="line">└── staging</span><br><span class="line">    ├── configs</span><br><span class="line">    │   ├── ...</span><br><span class="line">    ├── backend.tf</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>先ほどとは異なり、各環境でbackendを1つとしてWorkspaceによってリージョンを区別していきます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ terraform workspace list</span><br><span class="line">  default</span><br><span class="line">* sydney</span><br><span class="line">  tokyo</span><br></pre></td></tr></table></figure><p>また、plan&#x2F;apply時にtfvarsを利用することによって各環境ワンリソースで管理することが可能となります。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ terraform plan -var-file config/sydney.tfvars</span><br><span class="line">$ terraform plan -var-file config/sydney.tfvars</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>terraform storage_bucket.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;google_storage_bucket&quot;</span> <span class="string">&quot;bucket&quot;</span> &#123;</span><br><span class="line">  project       = google_project.my_project.project_id</span><br><span class="line">  name          = <span class="string">&quot;<span class="variable">$&#123;var.region_short&#125;</span>-bucket-test&quot;</span></span><br><span class="line">  location      = var.region</span><br><span class="line">  force_destroy = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Terraform Workspaceは機能として存在するものの、開発環境を区別するのには非推奨<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>など、中々使いどころの難しい存在でしたがリージョンを区別するのには使えそうです。この構成であれば、他リージョン展開時に新しい<code>tfvars</code>ファイルを作成するだけでよいので、ロールアウト時の作業が激減します。</p><p>ただ、新しいリソース・変数を定義する場合には全<code>tfvars</code>ファイルに値の追加が必要なので注意が必要です。</p><p>ちょっとした亜種ですが、Workspace名をそのまま変数として持ってきてリソースに適用することも可能です。<br><strong>※この場合は、Workspace名に<code>asia-northeast1</code>や<code>australia-southeast1</code>を使う必要があります。</strong></p><figure class="highlight sh"><figcaption><span>storage_bucket.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;google_storage_bucket&quot;</span> <span class="string">&quot;bucket&quot;</span> &#123;</span><br><span class="line">...</span><br><span class="line">  location      = terraform.workspace</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="構成案③：ワンリソースにしてtfvarsで管理する"><a href="#構成案③：ワンリソースにしてtfvarsで管理する" class="headerlink" title="構成案③：ワンリソースにしてtfvarsで管理する"></a>構成案③：ワンリソースにしてtfvarsで管理する</h2><p>以下のようなディレクトリ構成で管理します。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">envs</span><br><span class="line">├── modules</span><br><span class="line">│   └── ...</span><br><span class="line">├── configs</span><br><span class="line">│   ├── development</span><br><span class="line">│   │   ├── sydney.tfvars</span><br><span class="line">│   │   └── tokyo.tfvars</span><br><span class="line">│   ├── production</span><br><span class="line">│   │   ├── sydney.tfvars</span><br><span class="line">│   │   └── tokyo.tfvars</span><br><span class="line">│   └── staging</span><br><span class="line">│       ├── sydney.tfvars</span><br><span class="line">│       └── tokyo.tfvars</span><br><span class="line">├── backend.tf</span><br><span class="line">├── compute_instance.tf</span><br><span class="line">├── compute_network.tf</span><br><span class="line">├── compute_subnetwork.tf</span><br><span class="line">├── data.tf</span><br><span class="line">├── project.tf</span><br><span class="line">├── storage_bucket.tf</span><br><span class="line">├── variable.tf</span><br><span class="line">├── versions.tf</span><br><span class="line">└── terraform_init.sh</span><br></pre></td></tr></table></figure><p>各種リソースはワンリソースとして、Plan&#x2F;Apply時に各<code>tfvars</code>ファイルで変数を渡す形となります。<br>環境やリージョンを変更する場合のbackendの変更はどうするのか？という部分ですが、<code>terraform_init.sh</code>というbashスクリプトを介して、各環境ごとでbackendを構成し直します。</p><figure class="highlight sh"><figcaption><span>terraform_init.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">usage</span></span> () &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> [option ...] [arg ...]&quot;</span></span><br><span class="line">  <span class="built_in">cat</span> &lt;&lt;<span class="string">&quot;EOM&quot;</span></span><br><span class="line">Options:</span><br><span class="line">  -h: Show this <span class="built_in">help</span></span><br><span class="line">  -c: city: Specify region<span class="string">&#x27;s city name </span></span><br><span class="line"><span class="string">  -e: environment: Specify enviroment</span></span><br><span class="line"><span class="string">EOM</span></span><br><span class="line"><span class="string">  exit 1</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">while getopts c:e:o:a option ; do</span></span><br><span class="line"><span class="string">  case $option in</span></span><br><span class="line"><span class="string">    c)</span></span><br><span class="line"><span class="string">      city=$OPTARG</span></span><br><span class="line"><span class="string">      echo &quot;City of region: $city&quot;</span></span><br><span class="line"><span class="string">      ;;</span></span><br><span class="line"><span class="string">    e)</span></span><br><span class="line"><span class="string">      env=$OPTARG</span></span><br><span class="line"><span class="string">      echo &quot;Environment: $env&quot;</span></span><br><span class="line"><span class="string">      ;;</span></span><br><span class="line"><span class="string">    h | \?)</span></span><br><span class="line"><span class="string">      echo &quot;-h or invalid option is used (OPTIND: $OPTIND)&quot;</span></span><br><span class="line"><span class="string">      usage</span></span><br><span class="line"><span class="string">      ;;</span></span><br><span class="line"><span class="string">  esac</span></span><br><span class="line"><span class="string">done</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Create backend.tf</span></span><br><span class="line"><span class="string">cat &lt;&lt;EOF &gt; backend.tf</span></span><br><span class="line"><span class="string">terraform &#123;</span></span><br><span class="line"><span class="string">  backend &quot;gcs&quot; &#123;</span></span><br><span class="line"><span class="string">    bucket = &quot;$&#123;env&#125;-multi-region-rollout-tfstate&quot;</span></span><br><span class="line"><span class="string">    prefix = &quot;$&#123;city&#125;/state&quot;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Initialize terraform&#x27;</span>s backend</span><br><span class="line">terraform init -reconfigure</span><br></pre></td></tr></table></figure><p>そのため、リージョン毎のbackend変更に関しては都度スクリプトを実行する運用でカバーしていく形となります。</p><p>以下の記事で紹介されているようにplan&#x2F;applyなどTerraformのコマンドもラッピングすることで、Terraformの操作を全てシェルスクリプト経由にしてしまったほうが誤ったbackendでのplan&#x2F;applyが起きないかもしれません。<br>参考：<a href="https://zenn.dev/smartround_dev/articles/5e20fa7223f0fd">Terraformでmoduleを使わずに複数環境を構築する</a></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>上記3つの方法をまとめると以下のようになります。</p><div class="scroll"><table><thead><tr><th>案</th><th>リージョン展開方法</th><th>リージョン毎の運用</th><th>新しいリソースの追加方法</th><th>認知負荷</th></tr></thead><tbody><tr><td>①ディレクトリ分けのみ</td><td>ディレクトリを追加</td><td>ディレクトリ毎でApply</td><td>各環境・リージョンでファイル追加</td><td>低</td></tr><tr><td>②ディレクトリ分けとworkspace</td><td>各環境でtfvarsとWorkspaceを追加</td><td>Workspace毎でApply</td><td>各環境でファイル追加</td><td>中</td></tr><tr><td>③ワンリソースにしてtfvars</td><td>各環境でtfvarsを追加</td><td>シェルスクリプトを実行してからApply</td><td>1ファイル追加</td><td>高</td></tr></tbody></table></div><p>展開するリージョンの数が少なければ①が楽そうですが、どんどん増えていくのであれば②と③のどちらかな気がします。</p><p>実務上では参画当初から③の方法で運用を回しており、CIでデプロイの自動化をしている部分もあるのでシェルスクリプトの実行に関してはそこまで負担に感じておりません。ただ、個人的には②のやり方がよりシンプルになるので好みです。</p><p>本記事ではインフラの多国展開時におけるTerraformの管理方法を紹介してみました。これらが正解というわけではなく、運用を回していく中で強み・弱みが見えてくると思いますので、せひチームに適した形を探してみてください。</p><p>アイキャッチ画像のアイコンは以下から引用させて頂いております。<br><a href="https://www.hashicorp.com/brand">HashiCorp Brand</a><br><a href="https://cloud.google.com/icons?hl=ja">Google Cloud - アーキテクチャ図用のプロダクト アイコン</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">リージョン名を都市・州名で表していますが、正式名称のasia-northeast1とかでも良いです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://developer.hashicorp.com/terraform/cli/workspaces#when-not-to-use-multiple-workspaces">https://developer.hashicorp.com/terraform/cli/workspaces#when-not-to-use-multiple-workspaces</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20240315a/image.png&quot; alt=&quot;&quot; width=&quot;1088&quot; height=&quot;542&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="マルチリージョン" scheme="https://future-architect.github.io/tags/%E3%83%9E%E3%83%AB%E3%83%81%E3%83%AA%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3/"/>
    
    <category term="海外展開" scheme="https://future-architect.github.io/tags/%E6%B5%B7%E5%A4%96%E5%B1%95%E9%96%8B/"/>
    
  </entry>
  
  <entry>
    <title>Terraform連載2024 Stateを統合してみる</title>
    <link href="https://future-architect.github.io/articles/20240314a/"/>
    <id>https://future-architect.github.io/articles/20240314a/</id>
    <published>2024-03-13T15:00:00.000Z</published>
    <updated>2024-03-14T00:29:14.399Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20240311a/">Terraform 連載2024</a>の4本目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>はじめまして。Technology Inovation Group (TIG) の原田と申します。</p><p>私が所属しているチームではTerraformでAWSリソースを管理しており、tfstateを統合する機会があったので、その経験をもとに記事を書きます。</p><h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><p>Terraform バージョン 1.5.7</p><h2 id="ことの経緯"><a href="#ことの経緯" class="headerlink" title="ことの経緯"></a>ことの経緯</h2><p>私が所属しているチームでは、サービスごとに複数のtfstateでリソースを管理していました。</p><p>ただ、プロダクトが成熟してきて、リリース頻度が非常に低い&amp;リリースをしたとしても複数サービスが同じタイミングでリリースされることが多くなりました。</p><p>そういった理由から、成熟しきったStateを統合しようという機運が高まりました。</p><h2 id="方針"><a href="#方針" class="headerlink" title="方針"></a>方針</h2><p>ゴールは、移行元のtfstate(a.tfstate)を移行先のtfstate(b.tfstate)にマージしてb.tfstateですべてのAWSリソースを管理できる状態です。</p><p>そのための作業パターンとして大きく2つの案を考えました。</p><h2 id="二つの作業パターン"><a href="#二つの作業パターン" class="headerlink" title="二つの作業パターン"></a>二つの作業パターン</h2><h3 id="パターン①「import-removeコマンド」"><a href="#パターン①「import-removeコマンド」" class="headerlink" title="パターン①「import &amp; removeコマンド」"></a>パターン①「import &amp; removeコマンド」</h3><p>手順:</p><ol><li>統合元のStateで <code>remove</code> コマンド</li><li>統合先のStateで <code>import</code> コマンド</li><li>Terraform のコードを統合</li><li><code>plan</code> にて差分が発生しないことを確認</li></ol><p>お手軽ですね。Terraform直々に提供している機能ということもあって、安心感もあります。</p><p>1. 統合元のStateで <code>remove</code> コマンド</p><figure class="highlight sh"><figcaption><span>s3の場合</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 統合元のStateにて</span></span><br><span class="line">$ terraform state <span class="built_in">rm</span> aws_s3_bucket.s3</span><br></pre></td></tr></table></figure><p>2. 統合先のStateで <code>import</code> コマンド</p><figure class="highlight sh"><figcaption><span>s3の場合</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 統合先のStateにて</span></span><br><span class="line">$ terraform state import aws_s3_bucket.s3 バケット名</span><br></pre></td></tr></table></figure><p>Terraformのバージョンが1.5以上の場合はimport ブロックを使用するのもよいでしょう。</p><p><a href="https://developer.hashicorp.com/terraform/language/import">https://developer.hashicorp.com/terraform/language/import</a></p><p>3. Terraform のコードを統合<br>コピペでいいですね。リソースが多い場合はかなり根気が要ります。</p><p>4. <code>plan</code> にて差分が発生しないことを確認</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ terraform plan</span><br><span class="line"></span><br><span class="line">==(略)==</span><br><span class="line"></span><br><span class="line">No changes. Your infrastructure matches the configuration.</span><br></pre></td></tr></table></figure><p>お疲れ様でした。</p><p>お気づきの方もいらっしゃるかと思いますが、管理リソースが多い場合はかなり作業コストが高いです。リソースごとに、import・removed・コードの修正が必要になります。</p><p>私のチームでは100を優に超えるAWSリソースを管理していたため、この方法は現実的ではありませんでした。</p><h3 id="パターン②「Stateを編集」"><a href="#パターン②「Stateを編集」" class="headerlink" title="パターン②「Stateを編集」"></a>パターン②「Stateを編集」</h3><p>Stateを直接操作することはあまり推奨されないですが、今回はこの選択をとりました。</p><p>操作イメージとしては以下のような手順です</p><img src="/images/20240314a/terraform_merge.drawio.png" alt="terraform_merge.drawio.png" width="427" height="429" loading="lazy"><p>手順:</p><ol><li>ローカルにtfstateをローカルに取得</li><li>二つのStateファイルをマージ</li><li>マージしたtfstateファイルを統合先にpush</li><li>Terraform のコードを統合</li><li><code>plan</code> にて差分が発生しないことを確認</li></ol><p>パターン①よりステップが一つ多くなっているように見えますが、ちょっと待ってください。詳しく見ていきましょう。</p><p>1. ローカルにtfstateをローカルに取得</p><figure class="highlight sh"><figcaption><span>作業例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 統合元のStateにて</span></span><br><span class="line">$ terraform state pull &gt; a.tfstate</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>作業例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 統合先のStateにて</span></span><br><span class="line">$ terraform state pull &gt; b.tfstate</span><br></pre></td></tr></table></figure><p>2. 二つのStateファイルをマージ</p><p>ここが今回の作業のキモです。頑張って手作業でStateファイルをマージしていきましょう。</p><p>…というのは危険なので、今回は<a href="https://github.com/fujiwara">fujiwara</a>さんが開発された、便利なツールを利用させていただきましょう。</p><p><a href="https://github.com/fujiwara/tfstate-merge">https://github.com/fujiwara/tfstate-merge</a></p><p>コマンド一撃でtfstateファイルをマージしてくれる、何ともありがたいツールです。</p><p>ある程度のバリデーション機能も実装されているので、手動でマージするより、格段に安心して作業できます。</p><p>こちらで作者であるfujiwaraさんの解説があるので、詳細に関してはそちらをぜひご覧ください。</p><p><a href="https://sfujiwara.hatenablog.com/entry/tfstate-merge">https://sfujiwara.hatenablog.com/entry/tfstate-merge</a></p><figure class="highlight sh"><figcaption><span>作業例</span></figcaption><table><tr><td class="code"><pre><span class="line">$ tfstate-merge b.tfstate a.tfstate &gt; b<span class="string">&#x27;.tfstate</span></span><br></pre></td></tr></table></figure><p>3. マージしたtfstateファイルを統合先にpush</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">terraform state push b<span class="string">&#x27;.tfstate</span></span><br></pre></td></tr></table></figure><div class="note warn" style="background: #fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span>tfstateファイルは必ずバックアップを取っておくようにしましょう</div><p>4. Terraform のコードを統合</p><p>ここはパターン①と同様、根気よく作業していきましょう。<br>git の 差分の増減などを確認するもよいでしょう。</p><p>5. <code>plan</code> にて差分が発生しないことを確認</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ terraform plan</span><br><span class="line"></span><br><span class="line">==(略)==</span><br><span class="line"></span><br><span class="line">No changes. Your infrastructure matches the configuration.</span><br></pre></td></tr></table></figure><p>お疲れ様でした。</p><p>こちらのパターンの利点は作業の負担が圧倒的に少ないです。ただ、<code>terraform state push</code>というかなり危険なコマンドを使用するので実行には細心の注意を払いましょう。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>tfstateを統合した経験について書きました。</p><p>Stateの統廃合や、moduleへの移行など、Terraformのリファクタには様々な手札がありますが、エンジニアたるもの日常的により良いコードを目指していきたいですね。これは自身への戒めでもあります。</p><p>新卒でIT業界に飛び込み、もうすぐ2年が過ぎようとしていますが、自身の経験を発信していくことは良い刺激になりました。<a href="/articles/20240311a/">Terraform 連載2024</a>の一環として執筆させていただきましたが、非常に興味深いトピックが目白押しなので、ぜひ他の記事もご覧ください！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20240311a/&quot;&gt;Terraform 連載2024&lt;/a&gt;の4本目です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="tfstate-merge" scheme="https://future-architect.github.io/tags/tfstate-merge/"/>
    
  </entry>
  
  <entry>
    <title>Terraform連載2024 Terraformにおける変数の制御について</title>
    <link href="https://future-architect.github.io/articles/20240313a/"/>
    <id>https://future-architect.github.io/articles/20240313a/</id>
    <published>2024-03-12T15:00:00.000Z</published>
    <updated>2024-03-14T00:24:17.043Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20240313a/terraform_top.png" alt="" width="900" height="628"><p><a href="/articles/20240311a/">Terraform 連載2024</a>の3本目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。フューチャーキャリア入社1年半の森と申します。</p><p>Terraformにおける変数を、構築するインフラの要件に合わせてどのように制御していくかについてまとめます。</p><p>Terraformにおける変数制御は、構築するインフラの要件を明確化させる上で重要です。そのため、どのような変数制御があるか、ユースケースを踏まえ見ていきます。</p><h2 id="Terraformの変数制御"><a href="#Terraformの変数制御" class="headerlink" title="Terraformの変数制御"></a>Terraformの変数制御</h2><p>Terraformには型による制約の他に、下記3種類の変数の制御方法があります。</p><ul><li>validation : 変数の<strong>静的な事前チェック</strong>を実施する</li><li>precondition(v1.2以降) : 変数の<strong>動的な事前チェック</strong>を実施する</li><li>postcondition(v1.2以降) : 変数の<strong>動的な事後チェック</strong>を実施する</li></ul><p>静的・動的の可不可や、事前・事後のチェックなどの違いがありますが、図にするとこのような感じです。</p><div class="scroll"><table><thead><tr><th></th><th>動的チェック</th><th>事前チェック</th><th>事後チェック</th></tr></thead><tbody><tr><td>validation</td><td>不可</td><td>可</td><td>不可</td></tr><tr><td>precondition</td><td>可</td><td>可</td><td>不可</td></tr><tr><td>postcondition</td><td>可</td><td>不可</td><td>可</td></tr></tbody></table></div><p>具体的に1つずつ確認していきましょう。</p><h2 id="validationについて"><a href="#validationについて" class="headerlink" title="validationについて"></a>validationについて</h2><p><code>validation</code>は3つの変数制御の中でも最もシンプルで簡単な制御の方法です</p><p>例えば、AWSのEC2でEBSを暗号化したい場合、以下のように<code>validation</code>ブロックを暗号化の有無に関する変数に追加します。</p><p>このブロックの<code>condition</code>の内容で真偽を判定し、偽の場合<code>error_message</code>で指定のエラーメッセージを出力できます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">  ami           = <span class="string">&quot;ami-020283e959651b381&quot;</span></span><br><span class="line">  instance_type = <span class="string">&quot;t2.micro&quot;</span></span><br><span class="line">  subnet_id     = <span class="string">&quot;subnet-xxxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line">  ebs_block_device &#123;</span><br><span class="line">    device_name = <span class="string">&quot;/dev/sdh&quot;</span></span><br><span class="line">    encrypted   = var.ebs_encryption</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable <span class="string">&quot;ebs_encryption&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">type</span> = bool</span><br><span class="line">  validation &#123;</span><br><span class="line">    condition     = var.ebs_encryption == <span class="literal">true</span></span><br><span class="line">    error_message = <span class="string">&quot;EBS Should Be Encrypted&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  description = <span class="string">&quot;A Boolean of EBS Encryption in the EC2 Instances&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ebs_encryption</code>に<code>false</code>を指定した場合、<code>terraform plan</code>時に<code>validation</code>ブロックで指定した下記のエラーメッセージが出されます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╷</span><br><span class="line">│ Error: Invalid value <span class="keyword">for</span> variable</span><br><span class="line">│</span><br><span class="line">│   on variables.tf line 1:</span><br><span class="line">│    1: variable <span class="string">&quot;ebs_encryption&quot;</span> &#123;</span><br><span class="line">│     ├────────────────</span><br><span class="line">│     │ var.ebs_encryption is <span class="literal">false</span></span><br><span class="line">│</span><br><span class="line">│ EBS Should Be Encrypted</span><br><span class="line">│</span><br><span class="line">│ This was checked by the validation rule at variables.tf:3,3-13.</span><br></pre></td></tr></table></figure><p>このように<code>condition</code>に条件式を書いておくことで、誤ってEBSの暗号化を無効にする事のないように事前にチェックをしてくれるのが<code>validation</code>の特徴です。</p><h3 id="validationのユースケース"><a href="#validationのユースケース" class="headerlink" title="validationのユースケース"></a>validationのユースケース</h3><p>構築したいインフラに対して、あらかじめ変数の条件をハードコードすることで制約を課したい場合に<code>validation</code>ブロックが使えます。</p><h2 id="preconditionについて"><a href="#preconditionについて" class="headerlink" title="preconditionについて"></a>preconditionについて</h2><p>上述の<code>validation</code>で課すことのできる制約は静的な条件に限りました。つまり、全て条件式にハードコードして制御する必要があり、動的にAWSから情報を取得して条件を絞ることは不可能でした。</p><p>これを解決したのがTerraform v1.2から追加された<code>precondition</code>です。例えば、EC2のインスタンスタイプを無料利用枠のみに制限したい場合、<code>aws_ec2_instance_type</code>データソースから最新の無料利用枠の情報をAWSから取得し、インスタンス構築の際の条件に課すことが可能です。</p><p><code>lifecycle</code>ブロック内に<code>precondition</code>ブロックを作成し、<code>condition</code>の条件で真偽を判定し、偽の場合に<code>error_message</code>に記載されているメッセージを出力できます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">data <span class="string">&quot;aws_ec2_instance_type&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">  instance_type = <span class="string">&quot;c5.xlarge&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">  ami           = <span class="string">&quot;ami-0f7b55661ecbbe44c&quot;</span></span><br><span class="line">  instance_type = data.aws_ec2_instance_type.example.instance_type</span><br><span class="line">  subnet_id     = <span class="string">&quot;subnet-xxxxxxxxxx&quot;</span></span><br><span class="line">  lifecycle &#123;</span><br><span class="line">    precondition &#123;</span><br><span class="line">      condition     = data.aws_ec2_instance_type.example.free_tier_eligible</span><br><span class="line">      error_message = <span class="string">&quot;This instance type is not free in AWS&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のようにインスタンスタイプを<code>c5.xlarge</code>(無料利用枠でないインスタンスタイプ)でplanを流してみるとどうなるでしょうか？</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╷</span><br><span class="line">│ Error: Resource precondition failed</span><br><span class="line">│</span><br><span class="line">│   on main.tf line 18, <span class="keyword">in</span> resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;example&quot;</span>:</span><br><span class="line">│   18:       condition     = data.aws_ec2_instance_type.example.free_tier_eligible</span><br><span class="line">│     ├────────────────</span><br><span class="line">│     │ data.aws_ec2_instance_type.example.free_tier_eligible is <span class="literal">false</span></span><br><span class="line">│</span><br><span class="line">│ This instance <span class="built_in">type</span> is not free <span class="keyword">in</span> AWS</span><br></pre></td></tr></table></figure><p>指定のエラーメッセージとともに無事？planが通らなくなりました。(当然、applyもできません。)</p><p>このように<code>validation</code>と違って動的な変数の制御を可能にするのが<code>precondition</code>の特徴です。</p><h3 id="preconditionのユースケース"><a href="#preconditionのユースケース" class="headerlink" title="preconditionのユースケース"></a>preconditionのユースケース</h3><p><code>validation</code>でハードコーディングするのが難しい場合に使うのが良いでしょう。</p><p>最新のAWSからの情報が常に反映されるため、より安定的なチェックが実施できます。</p><h2 id="postconditionについて"><a href="#postconditionについて" class="headerlink" title="postconditionについて"></a>postconditionについて</h2><p><code>varidation</code>や<code>precondition</code>はapply前に変数をチェックする<strong>事前チェック</strong>でした。一方で<code>postcondition</code>は、<strong>applyの後にエラーを追跡</strong>する事後チェックが可能です。</p><p>例としてオートスケーリンググループを作成する際、AZが２つ以上あるかどうかをチェックしたい場合を考えます。書き方は<code>precondition</code>と同様で、<code>postcondition</code>ブロックの<code>condition</code>でAZの数が1よりも大きくない場合に指定のエラーメッセージを出力するようにします。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_launch_configuration&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">  image_id      = <span class="string">&quot;ami-020283e959651b381&quot;</span></span><br><span class="line">  instance_type = <span class="string">&quot;t2.micro&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_autoscaling_group&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">  name                 = <span class="string">&quot;ASG&quot;</span></span><br><span class="line">  launch_configuration = aws_launch_configuration.example.name</span><br><span class="line">  vpc_zone_identifier  = [<span class="string">&quot;subnet-xxxxxxx&quot;</span>]</span><br><span class="line">  min_size             = 1</span><br><span class="line">  max_size             = 1</span><br><span class="line"></span><br><span class="line">  lifecycle &#123;</span><br><span class="line">    postcondition &#123;</span><br><span class="line">      condition     = length(self.availability_zones) &gt; 1</span><br><span class="line">      error_message = <span class="string">&quot;You need to choose more than 1 AZ to ensure high availability&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>planをしてみましょう。この時点でAZは<code>known after apply</code>とあるので、エラーは捕捉されずにplan自体は通ります。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># aws_autoscaling_group.example will be created</span></span><br><span class="line">  + resource <span class="string">&quot;aws_autoscaling_group&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">      + arn                              = (known after apply)</span><br><span class="line">      + availability_zones               = (known after apply)</span><br><span class="line">      + default_cooldown                 = (known after apply)</span><br><span class="line">      + desired_capacity                 = (known after apply)</span><br><span class="line">      + force_delete                     = <span class="literal">false</span></span><br><span class="line">      + force_delete_warm_pool           = <span class="literal">false</span></span><br><span class="line">      + health_check_grace_period        = 300</span><br><span class="line">      + health_check_type                = (known after apply)</span><br><span class="line">      + <span class="built_in">id</span>                               = (known after apply)</span><br><span class="line">      + ignore_failed_scaling_activities = <span class="literal">false</span></span><br><span class="line">      + launch_configuration             = (known after apply)</span><br><span class="line">      + load_balancers                   = (known after apply)</span><br><span class="line">      + max_size                         = 1</span><br><span class="line">      + metrics_granularity              = <span class="string">&quot;1Minute&quot;</span></span><br><span class="line">      + min_size                         = 1</span><br><span class="line">      + name                             = <span class="string">&quot;ASG&quot;</span></span><br><span class="line">      + name_prefix                      = (known after apply)</span><br><span class="line">      + predicted_capacity               = (known after apply)</span><br><span class="line">      + protect_from_scale_in            = <span class="literal">false</span></span><br><span class="line">      + service_linked_role_arn          = (known after apply)</span><br><span class="line">      + target_group_arns                = (known after apply)</span><br><span class="line">      + vpc_zone_identifier              = [</span><br><span class="line">          + <span class="string">&quot;subnet-xxxxxxx&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">      + wait_for_capacity_timeout        = <span class="string">&quot;10m&quot;</span></span><br><span class="line">      + warm_pool_size                   = (known after apply)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># aws_launch_configuration.example will be created</span></span><br><span class="line">  + resource <span class="string">&quot;aws_launch_configuration&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">      + arn                         = (known after apply)</span><br><span class="line">      + associate_public_ip_address = (known after apply)</span><br><span class="line">      + ebs_optimized               = (known after apply)</span><br><span class="line">      + enable_monitoring           = <span class="literal">true</span></span><br><span class="line">      + <span class="built_in">id</span>                          = (known after apply)</span><br><span class="line">      + image_id                    = <span class="string">&quot;ami-020283e959651b381&quot;</span></span><br><span class="line">      + instance_type               = <span class="string">&quot;t2.micro&quot;</span></span><br><span class="line">      + key_name                    = (known after apply)</span><br><span class="line">      + name                        = (known after apply)</span><br><span class="line">      + name_prefix                 = (known after apply)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 2 to add, 0 to change, 0 to destroy.</span><br></pre></td></tr></table></figure><p>この状態でapplyすると完了後に下記のエラーが出ます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╷</span><br><span class="line">│ Error: Resource postcondition failed</span><br><span class="line">│</span><br><span class="line">│   on main.tf line 38, <span class="keyword">in</span> resource <span class="string">&quot;aws_autoscaling_group&quot;</span> <span class="string">&quot;example&quot;</span>:</span><br><span class="line">│   38:       condition     = length(self.availability_zones) &gt; 1</span><br><span class="line">│     ├────────────────</span><br><span class="line">│     │ self.availability_zones is <span class="built_in">set</span> of string with 1 element</span><br><span class="line">│</span><br><span class="line">│ You need to choose more than 1 AZ to ensure high availability</span><br></pre></td></tr></table></figure><p>エラーは出力されていますが、<code>precondition</code>と異なり、planはちゃんと通ってリソースまで作成されているのが分かります。</p><p>これが<code>postcondition</code>の事後チェックというもので、apply後へのリソースの変数に対するチェックを実施することが可能になっています。</p><h3 id="postconditionのユースケース"><a href="#postconditionのユースケース" class="headerlink" title="postconditionのユースケース"></a>postconditionのユースケース</h3><p><code>validation</code>や<code>precondition</code>などの事前チェックのみで補足しきれない条件を課すのが良いでしょう。</p><p>上記のような例だと、apply時にリソースが作成されてしまうので、事前チェックのようにリソース作成前に制限を課すような強い制約ができないことには注意が必要です。</p><h2 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h2><p>インスタンスタイプの選定で<code>precondition</code>を使いましたが、<code>precondition</code>→<code>postcondition</code>と単純に置き換えてみたらどうなるでしょうか？</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">data <span class="string">&quot;aws_ec2_instance_type&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">  instance_type = <span class="string">&quot;c5.xlarge&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">  ami           = <span class="string">&quot;ami-0f7b55661ecbbe44c&quot;</span></span><br><span class="line">  instance_type = data.aws_ec2_instance_type.example.instance_type</span><br><span class="line">  subnet_id     = <span class="string">&quot;subnet-xxxxxxx&quot;</span></span><br><span class="line">  lifecycle &#123;</span><br><span class="line">    postcondition &#123;</span><br><span class="line">      condition     = data.aws_ec2_instance_type.example.free_tier_eligible</span><br><span class="line">      error_message = <span class="string">&quot;This instance type is not free in AWS&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記は<a href="#precondition%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">preconditionについて</a>におけるコードで<code>precondition</code>が<code>postcondition</code>に置き換わっているだけです。</p><p>planで下記エラーが出てきます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:</span><br><span class="line">  + create</span><br><span class="line"></span><br><span class="line">Terraform planned the following actions, but <span class="keyword">then</span> encountered a problem:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># aws_instance.example will be created</span></span><br><span class="line">  + resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">      + ami                                  = <span class="string">&quot;ami-0f7b55661ecbbe44c&quot;</span></span><br><span class="line">      + arn                                  = (known after apply)</span><br><span class="line">      + associate_public_ip_address          = (known after apply)</span><br><span class="line">      + availability_zone                    = (known after apply)</span><br><span class="line">      + cpu_core_count                       = (known after apply)</span><br><span class="line">      + cpu_threads_per_core                 = (known after apply)</span><br><span class="line">      + disable_api_stop                     = (known after apply)</span><br><span class="line">      + disable_api_termination              = (known after apply)</span><br><span class="line">      + ebs_optimized                        = (known after apply)</span><br><span class="line">      + get_password_data                    = <span class="literal">false</span></span><br><span class="line">      + host_id                              = (known after apply)</span><br><span class="line">      + host_resource_group_arn              = (known after apply)</span><br><span class="line">      + iam_instance_profile                 = (known after apply)</span><br><span class="line">      + <span class="built_in">id</span>                                   = (known after apply)</span><br><span class="line">      + instance_initiated_shutdown_behavior = (known after apply)</span><br><span class="line">      + instance_lifecycle                   = (known after apply)</span><br><span class="line">      + instance_state                       = (known after apply)</span><br><span class="line">      + instance_type                        = <span class="string">&quot;c5.xlarge&quot;</span></span><br><span class="line">      + ipv6_address_count                   = (known after apply)</span><br><span class="line">      + ipv6_addresses                       = (known after apply)</span><br><span class="line">      + key_name                             = (known after apply)</span><br><span class="line">      + monitoring                           = (known after apply)</span><br><span class="line">      + outpost_arn                          = (known after apply)</span><br><span class="line">      + password_data                        = (known after apply)</span><br><span class="line">      + placement_group                      = (known after apply)</span><br><span class="line">      + placement_partition_number           = (known after apply)</span><br><span class="line">      + primary_network_interface_id         = (known after apply)</span><br><span class="line">      + private_dns                          = (known after apply)</span><br><span class="line">      + private_ip                           = (known after apply)</span><br><span class="line">      + public_dns                           = (known after apply)</span><br><span class="line">      + public_ip                            = (known after apply)</span><br><span class="line">      + secondary_private_ips                = (known after apply)</span><br><span class="line">      + security_groups                      = (known after apply)</span><br><span class="line">      + source_dest_check                    = <span class="literal">true</span></span><br><span class="line">      + spot_instance_request_id             = (known after apply)</span><br><span class="line">      + subnet_id                            = <span class="string">&quot;subnet-xxxxxxx&quot;</span></span><br><span class="line">      + tags_all                             = (known after apply)</span><br><span class="line">      + tenancy                              = (known after apply)</span><br><span class="line">      + user_data                            = (known after apply)</span><br><span class="line">      + user_data_base64                     = (known after apply)</span><br><span class="line">      + user_data_replace_on_change          = <span class="literal">false</span></span><br><span class="line">      + vpc_security_group_ids               = (known after apply)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 1 to add, 0 to change, 0 to destroy.</span><br><span class="line">╷</span><br><span class="line">│ Error: Resource postcondition failed</span><br><span class="line">│</span><br><span class="line">│   on main.tf line 11, <span class="keyword">in</span> resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;example&quot;</span>:</span><br><span class="line">│   11:       condition     = data.aws_ec2_instance_type.example.free_tier_eligible</span><br><span class="line">│     ├────────────────</span><br><span class="line">│     │ data.aws_ec2_instance_type.example.free_tier_eligible is <span class="literal">false</span></span><br><span class="line">│</span><br><span class="line">│ This instance <span class="built_in">type</span> is not free <span class="keyword">in</span> AWS</span><br></pre></td></tr></table></figure><p>エラーメッセージは<code>precondition</code>とほぼ変わらないのですが、<code>postcondition</code>では plan によるリソース出力が成功します（<code>precondition</code>ではplanが失敗してリソース出力がされませんでした）。</p><p>これは<code>postcondition</code>が事後チェックであることを反映している例で、データソースやリソースが取得された後で値が評価されていることを如実に表しています。</p><p>こうなると <code>postcondition</code>で全部チェックしてしまっても良い気もしますが、事後チェックであるか事後チェックであるかを明示するため、<code>precondition</code>で制御できる箇所は<code>precondition</code>で制御するようにしましょう。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>多くの変数に対して制限を課すのはなかなか大変で工数を取る上、可読性にも影響します。</p><p>修正の際にupdate in placeなどで気軽にアップデート出来ない変数(EBS暗号化の有無など)に対する制約から優先的に実施するのが個人的には良いと思います。</p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="https://www.oreilly.co.jp/books/9784814400522/">詳解Terraform</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20240313a/terraform_top.png&quot; alt=&quot;&quot; width=&quot;900&quot; height=&quot;628&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/articles/20240311a/&quot;&gt;Terraform</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="Terraform1.2" scheme="https://future-architect.github.io/tags/Terraform1-2/"/>
    
  </entry>
  
  <entry>
    <title>Terraform連載2024 hclwriteを用いたtfコード生成入門</title>
    <link href="https://future-architect.github.io/articles/20240312a/"/>
    <id>https://future-architect.github.io/articles/20240312a/</id>
    <published>2024-03-11T15:00:00.000Z</published>
    <updated>2024-03-14T00:33:22.647Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20240311a/">Terraform 連載2024</a> の2本目の記事です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。</p><p>Terraformファイルをコード生成するため、hclwriteというGoパッケージの使い方を調べました。</p><h2 id="モチベーション"><a href="#モチベーション" class="headerlink" title="モチベーション"></a>モチベーション</h2><p>ある複数のリソースをセットで定義する設計開発ルールがあったとします。AWSの例ですが、以下のようにDynamoDBとその監視をCloudwatch Metricsを用いてセットで行いたいとします。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DynamoDB</span></span><br><span class="line">resource <span class="string">&quot;aws_dynamodb_table&quot;</span> <span class="string">&quot;myproduct_read&quot;</span> &#123;</span><br><span class="line">  name         = <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-myproduct-read&quot;</span></span><br><span class="line">  billing_mode = <span class="string">&quot;PAY_PER_REQUEST&quot;</span></span><br><span class="line">  hash_key     = <span class="string">&quot;user_id&quot;</span></span><br><span class="line">  range_key    = <span class="string">&quot;content_id&quot;</span></span><br><span class="line"></span><br><span class="line">  deletion_protection_enabled = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  attribute &#123;</span><br><span class="line">    name = <span class="string">&quot;user_id&quot;</span></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;S&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  attribute &#123;</span><br><span class="line">    name = <span class="string">&quot;content_id&quot;</span></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;S&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># DynamoDBに対して、Cloudwatch Metricsで監視する。例では1件だが複数あるとする</span></span><br><span class="line">resource <span class="string">&quot;aws_cloudwatch_metric_alarm&quot;</span> <span class="string">&quot;myproduct_read_dynamodb_throttledrequests&quot;</span> &#123;</span><br><span class="line">  alarm_name          = <span class="string">&quot;<span class="variable">$&#123;aws_dynamodb_table.myproduct_read.name&#125;</span>-ThrottledRequests&quot;</span></span><br><span class="line">  comparison_operator = <span class="string">&quot;GreaterThanOrEqualToThreshold&quot;</span></span><br><span class="line">  datapoints_to_alarm = <span class="string">&quot;1&quot;</span></span><br><span class="line">  evaluation_periods  = <span class="string">&quot;1&quot;</span></span><br><span class="line">  metric_name         = <span class="string">&quot;ThrottledRequests&quot;</span></span><br><span class="line">  namespace           = <span class="string">&quot;AWS/DynamoDB&quot;</span></span><br><span class="line">  period              = <span class="string">&quot;60&quot;</span></span><br><span class="line">  statistic           = <span class="string">&quot;Maximum&quot;</span></span><br><span class="line">  threshold           = <span class="string">&quot;1&quot;</span></span><br><span class="line">  alarm_actions       = aws_sns_topic.myproduct_alert.arn</span><br><span class="line">  dimensions = &#123;</span><br><span class="line">    TableName = aws_dynamodb_table.read.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここではスロットリング数だけを監視していますが、もう1~5個くらい監視したい項目があったとします。この例のように、あるリソースの追加に合わせて整合性を保ちつつ別のリソースを追加することは難しく、抜け漏れがちです。</p><p>正攻法だとTerraform module化でしょう。しかし、このケースではモジュール化するにしてはリソース数が少なく、モジュール化すること自体が新規参画した開発者にとって認知負荷が高いことを考えると、もう少しプロダクトが成長して、関連するリソースが増えるかどうかを待ってから対応を考えたいケースもあるでしょう。もちろんチームの方針としてこれくらいでもすぐにモジュール化に取り掛かる場合もあるかと思いますが、チームのTerraform習熟度にバラツキがあり設計パターンを抑えたいなど、様々な背景があったとします。</p><p>こうした場面で、あるTerraformで定義したリソース（ここではDynamoDB）をインプットに別のコード（Cloudwatch Metrics）を生成し、モジュール化しなくとも不整合が生じにくい開発フローを整備したいと思います。これでモジュール化の判断を先送りにできますね。</p><img src="/images/20240312a/dynamodb_hclwrite.drawio.png" alt="" width="1200" height="631" loading="lazy"><p>ちなみに、通常、DynamoDBはそこまで数が増えない（ほいほい増えるようであればおそらくDynamoDBを使うべきではない）し、監視項目もそう変更しないだろうから、コード生成もモジュール化しなくても良いんじゃないか？という意見もあるかと思いますが、それはそれとします。</p><h2 id="整合性チェック"><a href="#整合性チェック" class="headerlink" title="整合性チェック"></a>整合性チェック</h2><p>この回のケースではRego（<a href="https://www.conftest.dev/">Conftest</a>）を使って整合性チェックを入れるのも有効でしょう。しかし開発チームにRego経験者はほとんど供給され無いと思うので、学習コストが多少なりとも掛かります。また、不整合を検知できるのであれば自動でFixしてくれた方が開発者フレンドリーです。</p><p>そのため、この記事では .tf ファイルの自動生成に注目します。</p><h2 id="利用パッケージ"><a href="#利用パッケージ" class="headerlink" title="利用パッケージ"></a>利用パッケージ</h2><p>Terraformの .tf コードをパース、生成する方法として有名なのは、<a href="https://github.com/hashicorp/hcl">hashicorp&#x2F;hcl</a> を用いることです。Go言語でインポートしてライブラリとして使えます。HCLはTerraformの.tfファイルが利用するファイルフォーマットのことです。</p><p>管理されているパッケージはいくつかあり、以下のようなものが含まれていて、いい感じに使い分けるリテラシーが求められます。</p><p>パッケージの概略はthaimさんのZenn記事の<a href="https://zenn.dev/thaim/articles/2023-03-go-hcl">HCLファイルを hashicorp&#x2F;hcl で読み書きする</a>が実装もありイメージしやすいです。</p><p>ここでも簡単に一覧を載せます。</p><div class="scroll"><table><thead><tr><th>Name</th><th>Memo</th></tr></thead><tbody><tr><td>hclsimple</td><td>HCLをGoの構造体にマッピングする、encoding&#x2F;json 的な高レベルなパッケージです。しかし、拡張子.tf には対応しておらず、全ての.tfファイルに対応していないことを言外に伝えています。</td></tr><tr><td>hclparse</td><td>HCLファイルをパースして、結果を独自のStructで取得できます</td></tr><tr><td>hclwrite</td><td>HCLファイルを加工するのに適したペッケージです。元のHCLファイルの構造を壊さず、リソースの追加&#x2F;削除、コメントや属性などの編集を行えます</td></tr><tr><td>hclsyntax</td><td>HCLを解析してASTを作るパッケージです。hclparseなどにも使われています</td></tr></tbody></table></div><p>今回はTerraformコードの細かい解析は不要であるため、hclwriteパッケージを利用します。</p><h2 id="hclwrite-でファイル読み込み"><a href="#hclwrite-でファイル読み込み" class="headerlink" title="hclwrite でファイル読み込み"></a>hclwrite でファイル読み込み</h2><p>バージョンは <code>hashicorp/hcl/v2 v2.20.0</code> を利用します。</p><p>まずは.tfファイルを読み込みます。</p><p><code>hclwrite.ParseConfig()</code> でパースしたいファイルを指定します。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/hashicorp/hcl/v2&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hashicorp/hcl/v2/hclwrite&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) == <span class="number">1</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Usage: %s &lt;filepath&gt;\n&quot;</span>, os.Args[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hclFilePath := os.Args[<span class="number">1</span>]</span><br><span class="line">file, err := os.ReadFile(os.Args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Usage: %s &lt;filepath&gt;\n&quot;</span>, os.Args[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tfFile, diags := hclwrite.ParseConfig(file, hclFilePath, hcl.Pos&#123;Line: <span class="number">1</span>, Column: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> diags != <span class="literal">nil</span> &amp;&amp; diags.HasErrors() &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;hclwrite parse: %s&quot;</span>, diags)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> tfFile == <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;parse result is nil: %s&quot;</span>, hclFilePath)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">blocks := tfFile.Body().Blocks()</span><br><span class="line">referenceNames := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(blocks))</span><br><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> blocks &#123;</span><br><span class="line"><span class="keyword">if</span> b.Type() != <span class="string">&quot;resource&quot;</span> || b.Labels()[<span class="number">0</span>] != <span class="string">&quot;aws_dynamodb_table&quot;</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">referenceNames = <span class="built_in">append</span>(referenceNames, b.Labels()[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(referenceNames)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果の取得は <code>tfFile.Body().Blocks()</code> という部分で取得できます。</p><p>Blockとはなにかですが、 <code>resource</code>、<code>module</code>、<code>locals</code> のようなTerraform上でインデントをともなうような塊を指します。例えば、<code>resource &quot;aws_dynamodb_table&quot; &quot;table1&quot; &#123;...&#125;</code> といった定義が10あれば、for文が10呼ばれます。</p><p>次にわかりにくいのが <code>b.Labels()</code> の部分です。これは <code>aws_dynamodb_table</code>, <code>table1</code> といったブロックを開くときに設定されるTerraformのリソースタイプ、リソース名が入ります。</p><p>今回はTerraformのリソース名を取得して表示するとします。</p><p>次のようなファイルがあるとします。</p><figure class="highlight sh"><figcaption><span>dynamodb_table.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_dynamodb_table&quot;</span> <span class="string">&quot;myproduct_read&quot;</span> &#123;</span><br><span class="line">  name         = <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-myproduct-read&quot;</span></span><br><span class="line">  billing_mode = <span class="string">&quot;PAY_PER_REQUEST&quot;</span></span><br><span class="line">  hash_key     = <span class="string">&quot;user_id&quot;</span></span><br><span class="line">  range_key    = <span class="string">&quot;content_id&quot;</span></span><br><span class="line"></span><br><span class="line">  deletion_protection_enabled = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  attribute &#123;</span><br><span class="line">    name = <span class="string">&quot;user_id&quot;</span></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;S&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  attribute &#123;</span><br><span class="line">    name = <span class="string">&quot;content_id&quot;</span></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;S&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_dynamodb_table&quot;</span> <span class="string">&quot;myproduct_content&quot;</span> &#123;</span><br><span class="line">  name         = <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-myproduct-read&quot;</span></span><br><span class="line">  billing_mode = <span class="string">&quot;PAY_PER_REQUEST&quot;</span></span><br><span class="line">  hash_key     = <span class="string">&quot;content_id&quot;</span></span><br><span class="line"></span><br><span class="line">  deletion_protection_enabled = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  attribute &#123;</span><br><span class="line">    name = <span class="string">&quot;content_id&quot;</span></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;S&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>さきほどのコードを実行すると、Terraformリソース名が取れています。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go run . ../example/dynamodb_table.tf</span><br><span class="line">[myproduct_read myproduct_content]</span><br></pre></td></tr></table></figure><p>属性を取得するためには、<code>b.Body().GetAttribute()</code> などで取得できますので、目的に応じて条件を追加することができます。</p><h2 id="空リソース生成"><a href="#空リソース生成" class="headerlink" title="空リソース生成"></a>空リソース生成</h2><p>次に.tfファイルを生成します。</p><p><code>hclwrite.NewFile()</code> で初期化し、そこにブロック（Terraformリソース）を追加していきます。</p><p>今回は新規コード生成なので、先頭に <code>// DO NOT EDIT</code> コメントを追加しましょう。</p><p>hclwriteを用いるとコメントを追加する便利な関数は（おそらく）存在しないので、いきなりですがトークンレベルの操作となる、<code>AppendUnstructedTokens()</code> を用います。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"></span><br><span class="line">newFile := hclwrite.NewFile()</span><br><span class="line">newFile.Body().AppendUnstructuredTokens(hclwrite.Tokens&#123; <span class="comment">// 先頭行にコメント追加</span></span><br><span class="line">&#123;</span><br><span class="line">Type:  hclsyntax.TokenIdent,</span><br><span class="line">Bytes: []<span class="type">byte</span>(<span class="string">&quot;// DO NOT EDIT, MADE BY hclwrite-dynamodb-generator\n&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, resourceName := <span class="keyword">range</span> referenceNames &#123;</span><br><span class="line">newFile.Body().AppendUnstructuredTokens(hclwrite.Tokens&#123;</span><br><span class="line">&#123;Type: hclsyntax.TokenNewline, Bytes: []<span class="type">byte</span>(<span class="string">&quot;\n&quot;</span>)&#125;, <span class="comment">// 先頭行に改行を入れる</span></span><br><span class="line">&#125;)</span><br><span class="line">labels := []<span class="type">string</span>&#123;<span class="string">&quot;aws_cloudwatch_metric_alarm&quot;</span>, fmt.Sprintf(<span class="string">&quot;dynamodb_throttledrequests_%s&quot;</span>, resourceName)&#125;</span><br><span class="line">newFile.Body().AppendNewBlock(<span class="string">&quot;resource&quot;</span>, labels)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out := hclwrite.Format(newFile.BuildTokens(<span class="literal">nil</span>).Bytes())</span><br><span class="line">_, _ = fmt.Fprint(os.Stdout, <span class="type">string</span>(out))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for 文の中にある、 <code>AppendNewBlock()</code> が今回出力したい本丸の、<code>aws_cloudwatch_metric_alarm</code> リソースを追加する部分です。</p><p>実行すると次のような空リソースが生成されます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go run . ../example/dynamodb_table_one.tf</span><br><span class="line">// DO NOT EDIT, MADE BY hclwrite-dynamodb-generator</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_cloudwatch_metric_alarm&quot;</span> <span class="string">&quot;dynamodb_throttledrequests_myproduct_read&quot;</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_cloudwatch_metric_alarm&quot;</span> <span class="string">&quot;dynamodb_throttledrequests_myproduct_content&quot;</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性の追加"><a href="#属性の追加" class="headerlink" title="属性の追加"></a>属性の追加</h2><p><code>SetAttributeRaw()</code> を用いて各属性ごとに項目を追加していきます。 <code>SetAttributeRaw()</code> は低レベルのAPIで、トークンを直接追加します。今回、<code>&quot;$&#123;aws_dynamodb_table.myproduct_read.name&#125;-throttledrequests&quot;</code> といったリファレンスを追加したいため利用しています。<code>SetAttributeValue()</code> を使う方法だと、 <code>$</code> がエスケープされて、 <code>$$</code> と出力されてしまうためです。</p><p>また、特記したいことは<a href="https://github.com/zclconf/go-cty">zclconf&#x2F;go-cty</a> というライブラリの型で値を競ってしないとならないことです。ここでさらに別のライブラリ？と一瞬焦る気持ちがありますが、慣れていきましょう。</p><p>属性の型がオブジェクトであり、その中にリファレンスが入ると、再び <code>AppendNewBlock()</code> を呼び出す必要があるなど、生成したい定義によっては試行錯誤する必要があるので、注意してください。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, resourceName := <span class="keyword">range</span> referenceNames &#123;</span><br><span class="line">newFile.Body().AppendUnstructuredTokens(hclwrite.Tokens&#123;</span><br><span class="line">&#123;Type: hclsyntax.TokenNewline, Bytes: []<span class="type">byte</span>(<span class="string">&quot;\n&quot;</span>)&#125;, <span class="comment">// 先頭行に改行を入れる</span></span><br><span class="line">&#125;)</span><br><span class="line">labels := []<span class="type">string</span>&#123;<span class="string">&quot;aws_cloudwatch_metric_alarm&quot;</span>, fmt.Sprintf(<span class="string">&quot;dynamodb_throttledrequests_%s&quot;</span>, resourceName)&#125;</span><br><span class="line">resource := newFile.Body().AppendNewBlock(<span class="string">&quot;resource&quot;</span>, labels).Body()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性の定義</span></span><br><span class="line">resource.SetAttributeRaw(<span class="string">&quot;alarm_name&quot;</span>, hclwrite.Tokens&#123;</span><br><span class="line">&#123;</span><br><span class="line">Type:  hclsyntax.TokenIdent,</span><br><span class="line">Bytes: []<span class="type">byte</span>(<span class="string">`&quot;$&#123;aws_dynamodb_table.myproduct_read.name&#125;-throttledrequests&quot;`</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">resource.SetAttributeValue(<span class="string">&quot;comparison_operator&quot;</span>, cty.StringVal(<span class="string">&quot;GreaterThanOrEqualToThreshold&quot;</span>))</span><br><span class="line">resource.SetAttributeValue(<span class="string">&quot;datapoints_to_alarm&quot;</span>, cty.StringVal(<span class="string">&quot;1&quot;</span>))</span><br><span class="line">resource.SetAttributeValue(<span class="string">&quot;evaluation_periods&quot;</span>, cty.StringVal(<span class="string">&quot;1&quot;</span>))</span><br><span class="line">resource.SetAttributeValue(<span class="string">&quot;metric_name&quot;</span>, cty.StringVal(<span class="string">&quot;ThrottledRequests&quot;</span>))</span><br><span class="line">resource.SetAttributeValue(<span class="string">&quot;namespace&quot;</span>, cty.StringVal(<span class="string">&quot;AWS/DynamoDB&quot;</span>))</span><br><span class="line">resource.SetAttributeValue(<span class="string">&quot;period&quot;</span>, cty.StringVal(<span class="string">&quot;60&quot;</span>))</span><br><span class="line">resource.SetAttributeValue(<span class="string">&quot;statistic&quot;</span>, cty.StringVal(<span class="string">&quot;Maximum&quot;</span>))</span><br><span class="line">resource.SetAttributeValue(<span class="string">&quot;threshold&quot;</span>, cty.StringVal(<span class="string">&quot;1&quot;</span>))</span><br><span class="line">resource.SetAttributeTraversal(<span class="string">&quot;alarm_actions&quot;</span>, hcl.Traversal&#123;</span><br><span class="line">hcl.TraverseRoot&#123;Name: <span class="string">&quot;aws_sns_topic&quot;</span>&#125;,</span><br><span class="line">hcl.TraverseAttr&#123;Name: <span class="string">&quot;myproduct_alert&quot;</span>&#125;,</span><br><span class="line">hcl.TraverseAttr&#123;Name: <span class="string">&quot;arn&quot;</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">dimensions := resource.AppendNewBlock(<span class="string">&quot;dimensions&quot;</span>, <span class="literal">nil</span>).Body()</span><br><span class="line">dimensions.SetAttributeTraversal(<span class="string">&quot;TableName&quot;</span>, hcl.Traversal&#123;</span><br><span class="line">hcl.TraverseRoot&#123;Name: <span class="string">&quot;aws_dynamodb_table&quot;</span>&#125;,</span><br><span class="line">hcl.TraverseAttr&#123;Name: <span class="string">&quot;myproduct_read&quot;</span>&#125;,</span><br><span class="line">hcl.TraverseAttr&#123;Name: <span class="string">&quot;name&quot;</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out := hclwrite.Format(newFile.BuildTokens(<span class="literal">nil</span>).Bytes())</span><br><span class="line">_, _ = fmt.Fprint(os.Stdout, <span class="type">string</span>(out))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを実行すると次のようにTerraformコードが生成されます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go run . example/dynamodb_table_one.tf</span><br><span class="line">// DO NOT EDIT, MADE BY hclwrite-dynamodb-generator</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_cloudwatch_metric_alarm&quot;</span> <span class="string">&quot;dynamodb_throttledrequests_myproduct_read&quot;</span> &#123;</span><br><span class="line">  alarm_name          = <span class="string">&quot;<span class="variable">$&#123;aws_dynamodb_table.myproduct_read.name&#125;</span>-throttledrequests&quot;</span></span><br><span class="line">  comparison_operator = <span class="string">&quot;GreaterThanOrEqualToThreshold&quot;</span></span><br><span class="line">  datapoints_to_alarm = <span class="string">&quot;1&quot;</span></span><br><span class="line">  evaluation_periods  = <span class="string">&quot;1&quot;</span></span><br><span class="line">  metric_name         = <span class="string">&quot;ThrottledRequests&quot;</span></span><br><span class="line">  namespace           = <span class="string">&quot;AWS/DynamoDB&quot;</span></span><br><span class="line">  period              = <span class="string">&quot;60&quot;</span></span><br><span class="line">  statistic           = <span class="string">&quot;Maximum&quot;</span></span><br><span class="line">  threshold           = <span class="string">&quot;1&quot;</span></span><br><span class="line">  alarm_actions       = aws_sns_topic.myproduct_alert.arn</span><br><span class="line">  dimensions &#123;</span><br><span class="line">    TableName = aws_dynamodb_table.myproduct_read.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_cloudwatch_metric_alarm&quot;</span> <span class="string">&quot;dynamodb_throttledrequests_myproduct_content&quot;</span> &#123;</span><br><span class="line">  alarm_name          = <span class="string">&quot;<span class="variable">$&#123;aws_dynamodb_table.myproduct_read.name&#125;</span>-throttledrequests&quot;</span></span><br><span class="line">  comparison_operator = <span class="string">&quot;GreaterThanOrEqualToThreshold&quot;</span></span><br><span class="line">  datapoints_to_alarm = <span class="string">&quot;1&quot;</span></span><br><span class="line">  evaluation_periods  = <span class="string">&quot;1&quot;</span></span><br><span class="line">  metric_name         = <span class="string">&quot;ThrottledRequests&quot;</span></span><br><span class="line">  namespace           = <span class="string">&quot;AWS/DynamoDB&quot;</span></span><br><span class="line">  period              = <span class="string">&quot;60&quot;</span></span><br><span class="line">  statistic           = <span class="string">&quot;Maximum&quot;</span></span><br><span class="line">  threshold           = <span class="string">&quot;1&quot;</span></span><br><span class="line">  alarm_actions       = aws_sns_topic.myproduct_alert.arn</span><br><span class="line">  dimensions &#123;</span><br><span class="line">    TableName = aws_dynamodb_table.myproduct_read.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hclwriteパッケージ自体は文法チェックを行いません。そのため　<code>alarm_actions = aws_sns_topic.myproduct_alert.arn</code> としれっと存在しないリソースを参照してもエラーにはなりません。</p><p>説明を省きましたが <code>hclwrite.Format()</code> でフォーマットをかけられるので、お手軽です。</p><p>今回使用したコードの全量は↓のリポジトリにコミットしています。</p><p><a href="https://github.com/ma91n/hclwrite-dynamodb">https://github.com/ma91n/hclwrite-dynamodb</a></p><h2 id="hclwriteパッケージを利用すべきか"><a href="#hclwriteパッケージを利用すべきか" class="headerlink" title="hclwriteパッケージを利用すべきか"></a>hclwriteパッケージを利用すべきか</h2><p>究極的には生成したいTerraformコードがどのようなものであるかに依存しますが、あるTerraformコードを読み取って別のファイルを生成するだけであれば、hclwriteパッケージを用いてもそれほど難しくはありません。</p><p>今回の内容であれば、パース部分もHCLの構造を無視し、スクラッチで解析しても良さそうなレベルではあります。しかし、複数のリソースタイプが混ざったり、ある属性の条件でのみを対象としたいといった拡張はしばしばありえるので、こういったライブラリを用いてパースすると良いでしょう。</p><p>一方で生成側です。今回の用途だと、既存ファイルの更新ではなく新規生成です。しかも成果物の構造のシンプル。この場合は、<code>hclwrite</code> の仕様を学んでゴリッと出力するより、Go Templateなどお好きなてプレートエンジンで生成するほうが遥かにメンテナンスがしやすいいと思います。HCLのフォーマットだけは使っても良いかもしれませんが、全てをhclwriteで閉じて生成するのは、出力がこれだけであれば割に合わない気がしました。</p><p><code>hclwrite</code> ですが主な用途はすでに存在するTerraformのコードを破壊せず、一律でタグを付けたり属性を変えたりといった用途に向いているパッケージのようです。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>hclwriteというパッケージを用いてあるTerraformリソースから、別のリソースを生成しました。新規生成については別のテンプレートエンジンを利用する方が良いかなと個人的には思います。</p><p>こういった開発フローは少し特殊で、通常はTerraformモジュール化などを試みると思いますが、モジュール化するにしてはリソース対象が少なく、ちょっと抽象度が弱いんだよな～といった場面では、コード生成案も考えてみても良いのではないでしょうか。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20240311a/&quot;&gt;Terraform 連載2024&lt;/a&gt; の2本目の記事です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="hclwrite" scheme="https://future-architect.github.io/tags/hclwrite/"/>
    
  </entry>
  
  <entry>
    <title>Terraform連載2024を開始します &amp; TerraformにおけるDR戦略を考える</title>
    <link href="https://future-architect.github.io/articles/20240311a/"/>
    <id>https://future-architect.github.io/articles/20240311a/</id>
    <published>2024-03-10T15:00:00.000Z</published>
    <updated>2024-03-28T06:42:47.217Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20240311a/terraform.png" alt="" width="800" height="418" loading="lazy"><p>こんにちは。技術ブログ運営の伊藤です。<br>本日、3&#x2F;11よりTerraform連載を開始します。</p><h2 id="昨年の連載振り返りと今年の連載について"><a href="#昨年の連載振り返りと今年の連載について" class="headerlink" title="昨年の連載振り返りと今年の連載について"></a>昨年の連載振り返りと今年の連載について</h2><p>昨年はTerraform v1.4がリリースされたことをトリガーとして技術ブログでは初となるTerraform連載2023を開催しました。その時の募集形態は以下です。</p><blockquote><ul><li>v1.4のリリース内容</li><li>これまでTerraformを触ってきたノウハウ、Tips</li><li>エコシステムについての調査、学習</li></ul></blockquote><p>今年の連載については上記の中から1点目を除き、社内に募集をかけました。すると、募集開始後数日であっという間に10人強集まり、社内でも利用者が増えていること、ナレッジが蓄積されてきていることを感じています。</p><p>さて、目を世の中に向けてみて、どれくらいTerraformに対しての興味関心があるのかと思い、Google Trendsで調べたところ、以下のグラフとなりました。</p><img src="/images/20240311a/スクリーンショット_2024-03-11_0.02.27.png" alt="" width="1000" height="244" loading="lazy">注) 青: Terraform, 赤: CloudFormation<p>Terraformとパブリッククラウドの中では利用比率が最も高い、AWSのCloudFormationとの比較ですが、大きく差が開いており、その興味関心度を伺うことができます。ちなみに、v1.0のリリースが2021年の夏頃でしたが、その半年後の2022年に入って以降が伸びているようです。</p><h2 id="連載スケジュール"><a href="#連載スケジュール" class="headerlink" title="連載スケジュール"></a>連載スケジュール</h2><p>今回の連載は10人を超すメンバーでお送りします。まだテーマ未定のところもありますが、公開時までのお楽しみということでしばらくお待ちください。</p><p>また、テーマが決まっているものも変更になったり順番が前後する可能性もありますが、ご了承ください。</p><div class="scroll"><table><thead><tr><th>日付</th><th>投稿者</th><th>テーマ</th></tr></thead><tbody><tr><td>3&#x2F;11(月)</td><td>伊藤太斉</td><td>本インデックス記事 &amp; <br> TerraformにおけるDR戦略を考える</td></tr><tr><td>3&#x2F;12(火)</td><td>真野隼記</td><td><a href="/articles/20240312a/">hclwriteを用いたtfコード生成入門</a></td></tr><tr><td>3&#x2F;13(水)</td><td>森大作</td><td><a href="/articles/20240313a/">Terraformにおける変数の制御について</a></td></tr><tr><td>3&#x2F;14(木)</td><td>原田達也</td><td><a href="/articles/20240314a/">Stateを統合してみる</a>]</td></tr><tr><td>3&#x2F;15(金)</td><td>岸下優介</td><td><a href="/articles/20240315a/">サービスの多国展開を支えるTerraform構成</a></td></tr><tr><td>3&#x2F;18(月)</td><td>原木翔</td><td><a href="/articles/20240318a/">cfn-guardを使ってTerraformをポリシーチェックしようとした話</a></td></tr><tr><td>3&#x2F;21(木)</td><td>前原応光</td><td><a href="/articles/20240321a/">Terraform連載2024 テストとモックを使ってみる</a></td></tr><tr><td>3&#x2F;25(月)</td><td>真鍋優</td><td><a href="/articles/20240325a/">Azure環境Terraform実行におけるリソースプロバイダーについて</a></td></tr><tr><td>3&#x2F;26(火)</td><td>棚井龍之介</td><td><a href="/articles/20240326a/">Terraformの実装コードを、動かしながら読む</a></td></tr><tr><td>3&#x2F;27(水)</td><td>大岩潤矢</td><td><a href="/articles/20240327a/">手動運用しているCloudflareをTerraformでInfrastructure as Codeする</a></td></tr><tr><td>3&#x2F;28(木)</td><td>小林弘樹</td><td><a href="/articles/20240328b/">Terraformでのループ処理と条件分岐</a></td></tr></tbody></table></div><hr><h2 id="Terraformで考えるマルチリージョン構成"><a href="#Terraformで考えるマルチリージョン構成" class="headerlink" title="Terraformで考えるマルチリージョン構成"></a>Terraformで考えるマルチリージョン構成</h2><p>Terraform、もといIaCのメリット、思想として謳われるものの中には可搬性、再利用性があります。再利用性を上げておくことで、同じ構成のインフラ、サービス群を一括して作成することができ、手作業と比べた時の再現性、信頼度が大きくなることはいうまでもありません。</p><p>具体、業務を前提としたITインフラ環境を考えたときに、社会インフラとして稼働しているサービスや、どんな状況であろうとも24時間365日稼働していないといけないサービス、企業があります。このような企業では災害対策環境として、地理的に大きく離れたエリアにDCを構えることで、ある1点で甚大な災害が発生してサービス断になったとしても、別のDCで継続することが可能になります(もちろん一定時間のサービス断は発生しますが、数日、数ヶ月単位になることはほぼないでしょう）。</p><p>この災害対策環境（この後はDR環境と記載します）については…</p><ol><li>本環境と100％同じ環境で常時稼働</li><li>本環境→DR環境へ切り替え時に100%にする（一部はDRで常時稼働）</li><li>DRを一括して稼働（直前までDRでの稼働はなし）</li></ol><p>…のいくつかのパターンが考えられます。昨今のクラウドインフラを鑑みると、コストメリット、移行の容易性を考えると2が妥当と考えられるケースが多いかと思います。事前にDR環境へ作成するリソースについても本環境と同等、同様のものを作ることは少なく、このハンドリングについてはTerraformの記載に依存するものがあります。本記事ではいくつかのパターンに分けつつ、今私自身が実践している方法について説明します。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>今回のTerraformの構成はモジュールを利用して説明します。採用理由はモジュールという形でパッキングしておくことで、特定の単位のリソースを一括して起動することができることにあります。本環境とDR環境では基本的には同一のインフラができることが望ましいので、モジュールであれば任意の単位で横展開できることを考えています。</p><p>また、本環境のリージョンを東京（ap-northeast-1）、DR環境を大阪リージョン（ap-northeast-3)で構成することを前提とします。</p><h3 id="どの単位で分割するか"><a href="#どの単位で分割するか" class="headerlink" title="どの単位で分割するか"></a>どの単位で分割するか</h3><p>いくつか、分割する単位にも考える余地があるかと思います。これは、私自身が構築した所感ですが、1つのモジュールでDR環境まで表現することはせず、<strong>本環境向けで構築をした上で、DRにも展開できる様に手を入れる</strong>のが良いのではないかと考えています。これには</p><ul><li>Terraformの機能としてリソースの作成可否をハンドリングできること</li><li>1つのモジュールでDR環境まで表現するとモジュールが肥大化する</li></ul><p>があげられます。前者についてはさらに3点に場合分けして説明しますが、後者については肥大化することで可読性や重複した表現でリソースの適用漏れなどヒューマンエラーの元になります。また、肥大化したとしても本環境、DR環境にフォーカスするのであればあまり大きな問題にはなりません。ただ、実際にはDR環境まで作らない環境（開発環境など）にも同じモジュールを適用する場合、DR向けとして定義したリソースのハンドリングが煩雑になることが容易に想像されます。いきなりDR環境も同じモジュールで構築する、というのは難しいですが、本環境向けのみに作成の上、少々のテコ入れをすることが望ましいです。</p><p>前者について、さらに場合分けすると…</p><ul><li>本環境、DR環境に同等のリソースを作成する場合</li><li>本環境のパラメータ（リソース）を引用する形で作成する場合</li><li>本番のみに作成する場合<ul><li>DRは有事の際に作成する前提</li></ul></li></ul><p>…の3つが挙げられます。これらについてさらに説明します。</p><h3 id="本環境にもDR環境にも同等のリソースを作成する場合-純粋な複製"><a href="#本環境にもDR環境にも同等のリソースを作成する場合-純粋な複製" class="headerlink" title="本環境にもDR環境にも同等のリソースを作成する場合(純粋な複製)"></a>本環境にもDR環境にも同等のリソースを作成する場合(純粋な複製)</h3><p>まずは純粋な複製で済む場合です、ちょっと極端ですが、VPCのみをラップしているモジュールがあると仮定します。</p><figure class="highlight sh"><figcaption><span>vpc.tf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># vpc.tf</span></span><br><span class="line">resource <span class="string">&quot;aws_vpc&quot;</span> <span class="string">&quot;main&quot;</span> &#123;</span><br><span class="line">  cidr_block = var.vpc_cidr_block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable <span class="string">&quot;vpc_cidr_block&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">type</span> = string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">provider <span class="string">&quot;aws&quot;</span> &#123;</span><br><span class="line">  region = <span class="string">&quot;ap-northeast-1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">&quot;aws&quot;</span> &#123;</span><br><span class="line">  region = <span class="string">&quot;ap-northeast-3&quot;</span></span><br><span class="line">  <span class="built_in">alias</span>  = <span class="string">&quot;ap3&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module <span class="string">&quot;vpc&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;任意のディレクトリ&quot;</span></span><br><span class="line"></span><br><span class="line">  vpc_cidr_block = <span class="string">&quot;10.10.100.0/24&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module <span class="string">&quot;vpc_dr&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;任意のディレクトリ&quot;</span></span><br><span class="line"></span><br><span class="line">  providers = &#123;</span><br><span class="line">    aws = aws.ap3</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vpc_cidr_block = <span class="string">&quot;10.10.101.0/24&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>モジュールに、作成するリソースごと重複を許容できない場合には変数を切り出し、モジュールの呼び出し側で適切なパラメータを渡してあげるイメージになります。また、Providerがクラウドのエンドポイントをさし示しているので、モジュールごとエンドポイントの向く先も変わるでしょう。</p><h3 id="本環境のパラメータ（リソース）を引用する形で作成する場合"><a href="#本環境のパラメータ（リソース）を引用する形で作成する場合" class="headerlink" title="本環境のパラメータ（リソース）を引用する形で作成する場合"></a>本環境のパラメータ（リソース）を引用する形で作成する場合</h3><p>これは本環境、DR環境両方で常時稼働させるパターンのもの、かつ、本環境のリソースを引用、および継承してDRを作る場合がここに当てはまります。そもそもDR環境で稼働させるものは何かと考えたとき、迅速な回復、喪失を避けて通りたいのはDBやバケットなどのストレージ系が当てはまるかと思います。その中でRDSを例とします。</p><figure class="highlight sh"><figcaption><span>db_instance.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_db_instance&quot;</span> <span class="string">&quot;postgres&quot;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  db_name                  = var.db_primary_arn == null ? <span class="string">&quot;default&quot;</span> : null</span><br><span class="line">  engine                   = <span class="string">&quot;postgres&quot;</span></span><br><span class="line">  username                 = var.db_primary_arn == null ? <span class="string">&quot;admin&quot;</span> : null</span><br><span class="line">  password                 = var.db_primary_arn == null ? <span class="string">&quot;admin&quot;</span> : null</span><br><span class="line">  publicly_accessible      = <span class="literal">false</span></span><br><span class="line">  backup_retention_period  = 7</span><br><span class="line">  backup_window            = <span class="string">&quot;20:00-20:30&quot;</span></span><br><span class="line">  maintenance_window       = <span class="string">&quot;mon:06:00-mon:06:30&quot;</span></span><br><span class="line">  port                     = 5432</span><br><span class="line">  replicate_source_db      = var.db_primary_arn</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name  = <span class="string">&quot;prod-db&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable <span class="string">&quot;db_primary_arn&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">type</span>    = string</span><br><span class="line">  default = null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output <span class="string">&quot;db_arn&quot;</span> &#123;</span><br><span class="line">  value = aws_db_instance.postgres.arn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">provider <span class="string">&quot;aws&quot;</span> &#123;</span><br><span class="line">  region = <span class="string">&quot;ap-northeast-1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">&quot;aws&quot;</span> &#123;</span><br><span class="line">  region = <span class="string">&quot;ap-northeast-3&quot;</span></span><br><span class="line">  <span class="built_in">alias</span>  = <span class="string">&quot;ap3&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module <span class="string">&quot;db&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;任意のディレクトリ&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module <span class="string">&quot;db_dr&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;任意のディレクトリ&quot;</span></span><br><span class="line"></span><br><span class="line">  providers = &#123;</span><br><span class="line">    aws = aws.ap3</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  db_primary_arn = module.db.db_arn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ポイントだと考えているのは…</p><ul><li>プライマリ（本環境）のインスタンスについては通常のパラメータを入れること</li><li>環境ごと入れるパラメータ、nullにするパラメータをハンドリングすること</li></ul><p>…だと考えています。変数として<code>db_primary_arn</code>を書き出し、この変数に値が入っているかどうかを判定することで、プライマリのインスタンスになるか、DR向けのレプリカインスタンスかを判定して作成することが可能になります。</p><p>三項演算子を多く使っていることはもう少し改善ポイントですが、少ない変数でリソースのハンドリングができることで、使いやすさを意識しています。そして、<code>default = null</code>にしておくことで、不要な変数を定義を回避しています。</p><h3 id="DR環境では構築しないリソース"><a href="#DR環境では構築しないリソース" class="headerlink" title="DR環境では構築しないリソース"></a>DR環境では構築しないリソース</h3><p>コストの観点から、DRでは構築せず、有事の際に作成するリソースもあり得るでしょう。その際にはcountやfor_eachといったTerraformにおけるループ構文を用いてハンドリングしています。例ではEC2インスタンスを記載しています。</p><figure class="highlight sh"><figcaption><span>instance.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;instance&quot;</span> &#123;</span><br><span class="line">  count = length(var.instance_ip_address)</span><br><span class="line">  ...</span><br><span class="line">  vpc_security_group_ids  = [....]</span><br><span class="line">  private_ip              = var.instance_ip_address[count.index]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable <span class="string">&quot;instance_ip_address&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">type</span>    = list(string)</span><br><span class="line">  default = []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">provider <span class="string">&quot;aws&quot;</span> &#123;</span><br><span class="line">  region = <span class="string">&quot;ap-northeast-1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">&quot;aws&quot;</span> &#123;</span><br><span class="line">  region = <span class="string">&quot;ap-northeast-3&quot;</span></span><br><span class="line">  <span class="built_in">alias</span>  = <span class="string">&quot;ap3&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module <span class="string">&quot;instance&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;任意のディレクトリ&quot;</span></span><br><span class="line"></span><br><span class="line">  instance_ip_address = [<span class="string">&quot;xx.xx.xx.xx&quot;</span>, <span class="string">&quot;yy.yy.yy.yy&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module <span class="string">&quot;instance_dr&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;任意のディレクトリ&quot;</span></span><br><span class="line"></span><br><span class="line">  providers = &#123;</span><br><span class="line">    aws = aws.ap3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>instance_ip_address</code>の配列に対して、IPがあればその分だけリソースを作成し、空の配列（デフォルト値）が入ったときは<code>count = 0</code>になるので作成されないことになります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Terraformを使ったマルチリージョン構築は、IaC自体のメリットを最大限かせるものだと考えています。その中で再利用性、可搬性を意識していくと、私はここまでに記載したような方法でそれなりにスマートに実装ができたと思います。</p><p>途中にも記載しましが、まずは本環境向けの構築を中心におこない、その上でDR環境に向けて何を切り出さないといけないか、微修正を重ねながら実装していくことが1つの方法でしょう。<br>本記事以外の構成も気になるので、ぜひリアクションいただけると幸いです。</p><p>最後になりますが、今日から約10記事、Terraformのネタが続きますので、この連載や技術ブログにこれまで上がっているTerraformの記事もぜひご覧ください。</p><ul><li><a href="/articles/20230327a/">2023年 Terraform連載</a></li><li><a href="/tags/Terraform/">Terraformタグの記事</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>本記事では触れていませんが、1つのモジュールに対して2つのリージョンに投げる場合（CloudFrontとALB）の構成の場合には、<code>configuration_aliases</code>を使うことで対応できます。<br>(<code>configuration_aliases</code>の使い方は「<a href="https://qiita.com/kaedemalu/items/d148c86f901f654f2930">かゆいところに手が届く、Terraformの書き方 (configuration_aliasesの使い方)</a>」を参照ください。)</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20240311a/terraform.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;418&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="DR" scheme="https://future-architect.github.io/tags/DR/"/>
    
    <category term="マルチリージョン" scheme="https://future-architect.github.io/tags/%E3%83%9E%E3%83%AB%E3%83%81%E3%83%AA%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Goリリースノートから技術ブログを書く流れ基礎</title>
    <link href="https://future-architect.github.io/articles/20240307a/"/>
    <id>https://future-architect.github.io/articles/20240307a/</id>
    <published>2024-03-06T15:00:00.000Z</published>
    <updated>2024-03-07T07:41:15.042Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20240307a/image.png" alt="" width="1200" height="818" loading="lazy"><p>The Gopher character is based on the Go mascot designed by Renée French</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。</p><p>フューチャーでは2021年の2月に公開されたGo 1.16から、Goのリリースノートを読んで気になったところをブログにまとめるというブログリレーを続けています。</p><ul><li><a href="/articles/20210207/">Go 1.16連載が始まります</a></li><li><a href="/articles/20210810a/">Go 1.17連載が始まります: コンパイラとgo mod</a></li><li><a href="/articles/20220209a/">Go 1.18集中連載 ジェネリクス</a></li><li><a href="/articles/20220801a/">Go 1.19リリース連載始まります GoDoc&#x2F;ツール周りのアップデート</a></li><li><a href="/articles/20230123a/">Go 1.20リリース連載が始まります＆メモリアリーナの紹介＆落ち穂拾い</a></li><li><a href="/articles/20230731a/">Go 1.21連載始まります＆slogをどう使うべきか</a></li><li><a href="/articles/20240129a/">Go 1.22リリース連載始まります &amp; ループの変化とTinyGo 0.31</a></li></ul><p>単なる翻訳ではなく自分たちならではの付加価値を提供するための執筆のフローや秘訣を、初心者向けにまとめます。社内外あるいはGoだけのとどまらず、次の新しいソフトウェアや技術のリリース時に技術ブログが増えると良いなと思っています。</p><h2 id="時期"><a href="#時期" class="headerlink" title="時期"></a>時期</h2><p><a href="https://go.dev/doc/devel/release">Release History</a>を見るとわかりやすいですが、Goは年2回のペースでメジャーアップデートを繰り返しています。だいたい、2月と8月です。</p><p>その1, 2ヶ月ほど前になるとRelease Candidate（RC）版が公開され、先立って機能を試すことができます。RC版は、 <code>Go1.x.rc1</code>, <code>Go1.x.rc2</code> などというサフィックスで公開され、<code>rc1</code>　とか <code>rc2</code> が出るともうそろそろメジャーリリースが出そうだなと個人的にはワイワイな気持ちになります。</p><p>フューチャーでは、この <code>RC</code> 版が公開されてから、実際にメジャーリリースされる期間（1ヶ月程度）の間に触ってみてブログを公開していくという流れを取ることが多いです。</p><p>リリース状況は以下のXのアカウントをフォローしておくと便利だなと思います。</p><p><a href="https://twitter.com/golang">https://twitter.com/golang</a></p><h2 id="お題の選定"><a href="#お題の選定" class="headerlink" title="お題の選定"></a>お題の選定</h2><p>リリースノートはRC版が公開されるころにはDraft版が公開されていますので、ざっと見て、各人の興味がある部分を選定します。テーマ選定が個人的に一番悩ましいポイントです。</p><p>Go 1.22を例にします。「私見」ですがリリースノートは大きく６つのブロックに分割できます。</p><img src="/images/20240307a/release_note.drawio_(2).png" alt="release_note.drawio_(2).png" width="1200" height="655" loading="lazy"><p>それぞれ、ブログに取り上げるテーマとして「私見」を述べます。</p><ol><li>言語レベルの変更<ul><li>Go 1.18だとジェネリクス、Go 1.22だとforループの変数についての変更など、メジャーリリース目玉と言っても良い項目です。注目度も高いゆえ多くの人によって発信されることが比較的多いです</li></ul></li><li>コマンド系の更新<ul><li><code>go test</code> のようなコマンドのアップデート系です</li><li>もし利用頻度が高いコマンドにアップデートがあれば、テーマに取り上げると差別化が図りやすいです</li><li><strong>お勧めです</strong></li></ul></li><li>ビルド,実行時の改善系<ul><li>個人的には中級者向けのアップデートです。GCやメモリ配置の最適化により実行時の性能改善や、コンパイラがインライン化するなどの更新があればここに含まれます。興味深いですが、中級者以上向けです</li><li>渋川さんの<a href="https://future-architect.github.io/articles/20220808a/">GCの記事</a> や<a href="https://future-architect.github.io/articles/20230123a/">メモリアリーナ</a>の記事が該当します。学びです</li></ul></li><li>新パッケージの追加<ul><li>新しい標準パッケージを使ってみるのはGoではGoDocやExampleがある程度整備されていることが多く、動かしやすいためお勧めです</li><li>ライブラリによっては人を選ぶものがあり（例えば、Go 1.20では<a href="https://tip.golang.org/doc/go1.20#library">crypto&#x2F;ecdh</a> という鍵交換の暗号周りに利用するパッケージが追加されました）、前提知識からキャッチアップが必要な内容もしばしばあります</li><li><code>net/http</code> など利用頻度が高いメジャーなパッケージの変更は、役立つことが多いので調べると多くの人にとっても学びになります</li><li><strong>お勧めです</strong></li></ul></li><li>マイナーアップデート<ul><li>すでに存在するパッケージに、APIが追加されたという内容です（Goの互換性ポリシーでは関数の削除や、シグネチャの変更はありません）</li><li><strong>お勧めです</strong></li></ul></li><li>OS&#x2F;プロセッサのサポート<ul><li>例えば、RISC-VやOpenBSDのサポートの更新についての紹介です</li><li>上級者向けです</li></ul></li></ol><p>「お勧め」と書いた部分も、メジャーバージョンごとに差異が大きく、実際にテーマ選定時には当然リリースノートを確認する必要があります。面白そうなアップデートだと思ったけど、Windows OS特有の修正で、検証が難しくて途中で諦めたケースなどが過去の連載でもありました。</p><p>※改めて強調しますが、全て個人の意見です。初心者だろうがベテランだろうが、気になったところを興味が赴くままに触ってみることが大事だと思っています。一方で、ピンと来る内容が無いことも初心者だと多いと思います。その時に、あえて絞り込むならという視点で書いています。</p><h2 id="アドバイスを出す-貰う"><a href="#アドバイスを出す-貰う" class="headerlink" title="アドバイスを出す&#x2F;貰う"></a>アドバイスを出す&#x2F;貰う</h2><p>初心者の場合は、どのテーマを深掘りすべきか決め手にかけるということも多いと思います。</p><p>その場合は、有識者に「書きやすそうなネタリスト」を出してもらって、そこから選ぶというのも良い進め方だと思います。</p><p>過去、わたしも社内で執筆メンバーを募集したときは以下のネタが書きやすいのでは？という内容をリストアップして告知しました。</p><img src="/images/20240307a/unnamed.png" alt="unnamed.png" width="731" height="374" loading="lazy"><p>改めて見ると、このリストアップもどうなんだ…とも思いますが、これを見てテーマを決めたという人もいました。</p><p>難易度を判定できる人に教えてもらう、というのは最初の取っ掛かりとして悪くないため、周囲に頼れる人がいれば頼り、テックリード的な人は補助線を引いて上げると良いかなと思います。</p><h2 id="環境を構築する"><a href="#環境を構築する" class="headerlink" title="環境を構築する"></a>環境を構築する</h2><p>お手軽な手法として、 <code>go install</code> を使う方法があります。例えば <code>go 1.22rc2</code> をインストールする場合は<a href="https://pkg.go.dev/golang.org/dl#section-readme">このページから</a>バージョンをたどり、次のコマンドが用意されています。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go install golang.org/dl/go1.22rc2@latest</span><br><span class="line">$ go1.22rc2 download</span><br></pre></td></tr></table></figure><p>これで <code>go</code> コマンドのように <code>go1.22rc2</code> コマンドを利用することができます。 <code>go1.22rc2 run main.go</code> といった形でいち早く新バージョンを動かせ、かつ既存のGoのバージョンを変えなくても済むので便利です。</p><p>GoLandを使っている人はさらに楽ができます。</p><img src="/images/20240307a/image_2.png" alt="image.png" width="903" height="470" loading="lazy"><p>設定＞Go＞GOROOT＞＋記号＞ダウンロードで、GoLand側でバージョンリストを出してくれ、指定したいバージョンをクリックするとダウンロードからIDE内でPATHまで諸々設定してくれます。GoLandのターミナルで実行する <code>go</code> コマンドまで指定のバージョンを利用してくれるため便利です。</p><h2 id="プロポーサル（Issue）を探す"><a href="#プロポーサル（Issue）を探す" class="headerlink" title="プロポーサル（Issue）を探す"></a>プロポーサル（Issue）を探す</h2><p>リリースノートからブログを書くと言いましたが、リリースノートの内容は簡略化した内容ですので、加えてGoDocやプロポーサルを確認して、背景や議論のやり取りを確認すると内容が深まります。</p><p>プロポーサル（Issue）の探し方ですが、一番簡単なのは、ページのHTMLを開き（Chromeであれば ctrl + U）、そこにコメントされているURLを取得する方法です。おそらくこの手法が最速です。</p><p>次のように range overが議論されていたIssueが見つかります。</p><img src="/images/20240307a/image_3.png" alt="image.png" width="959" height="273" loading="lazy"><p>それを開くとGitHub Issueに飛べると思います。</p><img src="/images/20240307a/image_4.png" alt="image.png" width="1149" height="445" loading="lazy"><p>時には長い議論になっていることも多いですので、サマリにまとめるだけでも良いとっかかりな記事にしやすいと思います。</p><p>社内メンバーは次のようなポイントを拾うことが多いです。</p><ul><li>背景（なぜそれが必要なのか、従来の課題は何か）</li><li>それがなかった場合、従来はどう対応していたか</li><li>受け入れられなかった別案にはどういったものがあったか</li><li>レビュアーが懸念していることにどんなことがあるか</li></ul><p>辻さんの<a href="https://future-architect.github.io/articles/20230128a/">HTTP ResponseController</a>記事では、互換性の立場からこっちのメソッドを拡張できずといった説明があります。ある断面だけだと不自然に思えることも、歴史的経緯を知ると理解しやすくなりますよね。</p><p>IssueからはコードレビューのURLがリンクされていることが多いので、どのようなファイルの修正があったかも確認できます。コードの修正内容まで踏み込めるとオリジナリティ溢れること間違いないです。</p><h2 id="触ってみる"><a href="#触ってみる" class="headerlink" title="触ってみる"></a>触ってみる</h2><p>実際にサンプルコードを書いて動かすと理解が深まります。</p><p>もし、標準パッケージの追加&#x2F;更新であればテストコードが存在するため、GoDocだけみて動かし方がわからない場合も、標準パッケージのテストコードを参考にするとよいです。それらをデバック実行してみて、どのような実装になっているか内部のコードを見ても面白いですね。</p><p>棚井さんは <code>encoding/base32</code> をテーマに、<a href="https://future-architect.github.io/articles/20240201a/">Base32そのものの変換処理の流れを解説</a>する記事を書いていました。こうした派生は面白いですね。</p><p>Bug Fix系であれば、新バージョンと旧バージョンで比較して動作検証してみても良いかもしれません。</p><p>また、性能が気になればベンチマークを取ってみるというのも、知見を増やしやすいポイントです。例えば、<a href="https://future-architect.github.io/articles/20240202a/#%E6%80%A7%E8%83%BD%E8%A8%88%E6%B8%AC">武田さんの記事</a>では、標準のnet&#x2F;httpとサードパーティ製ライブラリでベンチマークを取っていて、使えそうかそうじゃないかの1つの材料を提供しています。</p><p><a href="https://future-architect.github.io/articles/20240214a/">私もnet&#x2F;httpの記事</a>では、CPUプロファイルや、<code>strace</code> を用いて、システムコールの発行具合を調査した記事を書きました。Goは標準に様々なツールがあり分析できるので、引き出しを増やすという意味でも学びになります。</p><p>触ってみて得た知見や疑問点も、記事に書いたり周囲のGopherな人に雑談で話すと、ネタが広がることも多いので、記事を書く前にもどんどん発信してフィードバックをもらいましょう。</p><h2 id="コードリーディングのお供に"><a href="#コードリーディングのお供に" class="headerlink" title="コードリーディングのお供に"></a>コードリーディングのお供に</h2><p>コードリーディングのサポートとしてGitHub Copilotをうまく活用しているよというメンバーもいます。</p><p>途中で難易度の高い処理にぶつかっても、エディタ上でCopilotに質問すれば、処理内容を解説して頂けます。</p><p>VSCodeプラグインもあります。</p><img src="/images/20240307a/image_5.png" alt="image.png" width="1200" height="296" loading="lazy"><p><a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot">https://marketplace.visualstudio.com/items?itemName=GitHub.copilot</a></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>自分のレベルと興味にあったテーマの選定が最も難しく、決まればプロポーサルはリリースノートからすぐにたどり着けますので、あとはテストコードやデバック、ベンチマーク、プロファイルなどのツールを駆使していろいろ触ってみて得た知見を記事にしましょう、という内容でした。</p><p>リリースを記念に祝う目的でブログを書くと、良い感じの緩さ加減な期日感もあり機会としてはちょうどいいですし、適度に学びになります。</p><p>もっと良い方法があればXでぜひ教えてください。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20240307a/image.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;818&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;The Gopher character is based on the Go mascot</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="リリースノート" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%83%8E%E3%83%BC%E3%83%88/"/>
    
    <category term="技術ブログ" scheme="https://future-architect.github.io/tags/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>Next.jsにするか他のフレームワークにするか迷っている人はNext.jsを選べばいい</title>
    <link href="https://future-architect.github.io/articles/20240228a/"/>
    <id>https://future-architect.github.io/articles/20240228a/</id>
    <published>2024-02-27T15:00:00.000Z</published>
    <updated>2024-02-28T00:51:00.108Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20240228a/top.jpg" alt="" width="640" height="400"><p>タイトルで言いたいことは言ってしまっているのですが、2017年ぐらいからNext.jsを使ってきて、最新の情報のキャッチアップとかもそんなに苦労はなくて、こだわりがないならNext.jsでいいのでは？という記事です。</p><h2 id="Next-jsは大きすぎる？"><a href="#Next-jsは大きすぎる？" class="headerlink" title="Next.jsは大きすぎる？"></a>Next.jsは大きすぎる？</h2><p>フレームワークが大きいのはたいていそうで、提供されているすべての機能を使うわけではなく、その一部だけを使います。そのサブセット自体がシンプルであればフレームワークはどれだけ大きくても問題はないはずです。JavaとかPythonとかGoのコード書いてもごく一部のライブラリしか使わないわけで、でもそれに対して「ライブラリがでかすぎる」とは言わないですよね。</p><p>Next.jsは「より高速にする」機能がたくさんありますが、別にそんなの最初から使う必要はないですし、サービスによってはそもそもその機能が合わない、というのもあります。ユーザープロフィール画面にISGとかSSGは使わないでしょう。</p><p>最低限の部分を取り出せば、ファイルシステムベースのルーターがあって、SSRしてくれる、ぐらいでしょう。それ以外は素のReactをそのまま使う、という作戦でいいかと思います。データのフェッチも<code>getServerSideProps</code>とか使わずに<code>useEffect</code>とか<code>useSWR</code>で取得しちゃえばいい。そうなれば、ルーター周りのちょっとしたコードぐらいが差分で、あとはReactそのものになります。</p><p>静的なJSファイルを出したい、という場合はVite+Reactでも良いと思いますが、ルーターすらないので、「EasyよりもSimple！」派でないなら、ここもNext.jsでもいいかなって思っています。</p><ul><li><a href="https://future-architect.github.io/articles/20230530a/">管理画面等でNext.jsをBetter Reactとして使う</a></li></ul><p>Vercelを売るための機能が多い、みたいなのも見かけましたが、オプショナルな機能でいくつかあるだけかなって思います。ぱっと見つけたのはビデオファイルをVercel Blobにもおけるよ、とかOpenTelemetryとか。別に不要であれば使わなければ良い機能ぐらいかと思いますし。GoのPlan9対応みたいなものですよね。</p><h2 id="Next-jsは変化が早すぎる？"><a href="#Next-jsは変化が早すぎる？" class="headerlink" title="Next.jsは変化が早すぎる？"></a>Next.jsは変化が早すぎる？</h2><p>Next.js 4の時代からするとコードの書き方は大きく変わりました。クラスコンポーネントが関数コンポーネントになってhooksが登場し、TypeScriptが当たり前になって、Reduxでがんばってconnectの定義を書いていたのが、今では嘘のようです。</p><p>とはいえ、これってNext.js側の変化ではなくて、Reactの変化ですよね。Server Actionsは派手なNext.jsの機能に見えて、これも<a href="https://react.dev/reference/react-dom/components/form#handle-form-submission-with-a-server-action">React本家</a>の方の機能だったりします。</p><p>Next.js側も変化はありますが、機能追加はあっても機能の削減で困ることはいまのところなかったように思います。app routerの登場は大きかったですが、これはむしろ、React本家が導入したReact Server Componentを実現するためのNext.js側が用意した解、みたいな感じです。</p><p>ビルド周りとか設定周りは大きく改善されました。ビルドもかなり高速になりました。自前でかなり手を入れていた人には厳しいでしょうが、なるべく設定を変更せずに使う、というのが今時のウェブフロントエンドの渡世術かな、と思います。少ないコストでエコシステムの進化の恩恵を享受できるコツです。</p><h2 id="フレームワークを採用する上で大事なこと"><a href="#フレームワークを採用する上で大事なこと" class="headerlink" title="フレームワークを採用する上で大事なこと"></a>フレームワークを採用する上で大事なこと</h2><p>Next.jsの一番の価値は、JS界のさまざまなライブラリとの繋ぎ込み方法がexamplesというフォルダにあって、動作検証されていることかなって思います。JS界隈はライブラリが多いので組み合わせではまったり、とかはあるのですが、すくなくともNext.jsとこのバージョンのこのライブラリならつながる、という情報があるのは大変ありがたいことです。</p><p><a href="https://github.com/vercel/next.js/tree/canary/examples">https://github.com/vercel/next.js/tree/canary/examples</a></p><p>それだけではなく、たとえば認証どうしよう、とか、実現したいことに対する情報がたくさんあって、それを支えるライブラリもたくさんあって・・・というところですね。ようするにエコシステム。仕事で使う場合に、何かトラブルがあってもすぐに解決したい！というのであれば、ないよりはあった方が良いものですよね。</p><h2 id="あえて積極的にNext-jsを触る理由"><a href="#あえて積極的にNext-jsを触る理由" class="headerlink" title="あえて積極的にNext.jsを触る理由"></a>あえて積極的にNext.jsを触る理由</h2><p>Reactの開発は、それ自身に閉じるのではなく、サーバー側との連携機能などは外部のフレームワークともやっていくぞ！というのはReact Server Componentのときに語られています。Next.jsはReactフレームワークの中では旗手ではありますし、新機能が最初に使える環境となっています。React Compiler楽しみですよね？そういうReact側の機能を早く試してみたい人にはNext.jsが一番良いとも言えるかと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>強い意志を持ってAstro.js使いたい！とか、トラブルはむしろ大歓迎！みたいな人とか、趣味でやっているしむしろ人がやっていないことに価値がある！みたいに思っている人は、そちらを選べば良いと思います。</p><p>逆に、そういう強い思いがない人であれば、とりあえず朝くNext.jsを触るのがいいんじゃないかな、という記事でした。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20240228a/top.jpg&quot; alt=&quot;&quot; width=&quot;640&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="技術選定" scheme="https://future-architect.github.io/tags/%E6%8A%80%E8%A1%93%E9%81%B8%E5%AE%9A/"/>
    
    <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
    <category term="Next.js" scheme="https://future-architect.github.io/tags/Next-js/"/>
    
  </entry>
  
  <entry>
    <title>ローカルプロキシで認証プロキシの煩わしさを解消！</title>
    <link href="https://future-architect.github.io/articles/20240227a/"/>
    <id>https://future-architect.github.io/articles/20240227a/</id>
    <published>2024-02-26T15:00:00.000Z</published>
    <updated>2024-02-27T01:03:07.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>多くの企業では、セキュリティ対策の一環として認証プロキシを導入しています。これは、社内ネットワークからインターネットへのアクセスを制御し、不正なアクセスや情報漏洩を防ぐための重要な手段です。しかし、この認証プロキシを利用する際には、ユーザ名とパスワードの入力が必要であり、ソフトウェアごとにプロキシ設定する必要があります。これが、日々の業務において非常に煩わしい作業となっています。</p><p>今回は、この問題を解決するために、自分専用のローカルプロキシをセットアップし、認証プロキシの設定を一元管理する方法についてご紹介します。</p><h2 id="認証プロキシの課題"><a href="#認証プロキシの課題" class="headerlink" title="認証プロキシの課題"></a>認証プロキシの課題</h2><p>認証プロキシを利用する際の主な課題は以下の通りです。</p><ul><li><strong>設定の煩雑さ</strong>：各ソフトウェアごとにプロキシ設定する必要があり、設定漏れや誤設定が発生しやすい。</li><li><strong>認証プロキシ非対応ソフトウェアの存在</strong>：使用したいソフトウェアによっては、プロキシには対応しているものの認証には対応していない物<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>がしばしば存在する。</li><li><strong>認証情報の管理</strong>：ユーザ名とパスワードを多くの設定ファイルや環境変数に記載する必要があり、セキュリティリスクが高まる。ファイルが漏出しないよう、またリモート会議などでうっかりそれらを映してしまわないよう気を配る必要がある。</li><li><strong>パスワード変更の手間</strong>：パスワードポリシーによってはパスワードを変更する機会があり、その都度、多くの設定を更新する必要がある。</li></ul><img src="/images/20240227a/画像1.png" alt="画像1.png" width="1200" height="613" loading="lazy"><p>これらの課題を解決する方法として、手元のPCにローカルプロキシを立てて認証を肩代わりする方法をご紹介します。</p><img src="/images/20240227a/画像2.png" alt="画像2.png" width="1200" height="529" loading="lazy"><h2 id="ローカルプロキシのセットアップ"><a href="#ローカルプロキシのセットアップ" class="headerlink" title="ローカルプロキシのセットアップ"></a>ローカルプロキシのセットアップ</h2><p>ローカルプロキシをセットアップすることで、認証プロキシの設定を一元管理し、上記の課題を解決できます。多くのオープンソースソフトウェアが利用可能で、例として「Squid」や「CNTLM」、「stone」などが挙げられます。ここでは例として「mitmproxy」を取り上げます。具体的な手順は以下の通りです。</p><h3 id="1-mitmproxy-のセットアップ"><a href="#1-mitmproxy-のセットアップ" class="headerlink" title="1. mitmproxy のセットアップ"></a>1. mitmproxy のセットアップ</h3><p>mitmproxy は Python プログラムです。インストール方法は複数あるので<a href="https://docs.mitmproxy.org/stable/overview-installation/">公式サイト</a>を参照してください。</p><p>LinuxやWSL環境において最短でインストールするならパッケージリポジトリを（コミュニティ運営のため公式は積極的に推奨していませんが）使用して下記になります。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">aptでインストール</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br><span class="line">sudo apt install mitmproxy</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pipでインストール</span></span><br><span class="line">pip install mitmproxy</span><br></pre></td></tr></table></figure><details><summary>Python3環境構築からpipでインストールを実施するまでの手順はこちら</summary><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt install dirmngr ca-certificates software-properties-common apt-transport-https -y</span><br><span class="line">sudo gpg --list-keys</span><br><span class="line">sudo gpg --no-default-keyring --keyring /usr/share/keyrings/deadsnakes.gpg --keyserver keyserver.ubuntu.com --recv-keys F23C5A6CF475977595C89F51BA6932366A755776</span><br><span class="line">echo &#x27;deb [signed-by=/usr/share/keyrings/deadsnakes.gpg] https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy main&#x27; | sudo tee -a /etc/apt/sources.list.d/python.list</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3.8 -y</span><br><span class="line">sudo apt install python3-pip</span><br><span class="line"></span><br><span class="line">python3 -m pip install --upgrade pip setuptools</span><br><span class="line">pip install mitmproxy</span><br></pre></td></tr></table></figure></details><p><a href="https://github.com/mitmproxy/mitmproxy/blob/main/CONTRIBUTING.md">GitHub から clone して実行する</a>手もあります。</p><p>Docker を使った簡単な導入方法もありますが起動方法込みになるので次章にて纏めて記述します。</p><h3 id="2-mitmproxy-の実行"><a href="#2-mitmproxy-の実行" class="headerlink" title="2. mitmproxy の実行"></a>2. mitmproxy の実行</h3><p>導入形態によって変わりますので以下に列挙します。</p><p>※社内向け認証プロキシにありがちな独自証明書対策としてオプションに <code>--ssl-insecure</code> を使用したいケースもあります。</p><h4 id="バイナリ単体の場合"><a href="#バイナリ単体の場合" class="headerlink" title="バイナリ単体の場合"></a>バイナリ単体の場合</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mitmweb --mode upstream:http://[認証プロキシ]:[ポート]</span><br></pre></td></tr></table></figure><h4 id="Python-スクリプトの場合（Windows）"><a href="#Python-スクリプトの場合（Windows）" class="headerlink" title="Python スクリプトの場合（Windows）"></a>Python スクリプトの場合（Windows）</h4><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">.\venv\Scripts\activate</span><br><span class="line">mitmdump --<span class="built_in">mode</span> upstream:http://[認証プロキシ]:[ポート]</span><br></pre></td></tr></table></figure><h4 id="Python-スクリプトの場合（Linux-or-WSL）"><a href="#Python-スクリプトの場合（Linux-or-WSL）" class="headerlink" title="Python スクリプトの場合（Linux or WSL）"></a>Python スクリプトの場合（Linux or WSL）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ./venv/bin/activate</span><br><span class="line">mitmdump --mode upstream:http://[認証プロキシ]:[ポート]</span><br></pre></td></tr></table></figure><h4 id="Docker-の場合"><a href="#Docker-の場合" class="headerlink" title="Docker の場合"></a>Docker の場合</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm -it -v ~/.mitmproxy:/home/mitmproxy/.mitmproxy -p 127.0.0.1:8081:8081 -p 8080:8080 mitmproxy/mitmproxy mitmweb --web-host 0.0.0.0 --mode upstream:http://[認証プロキシ]:[ポート]</span><br></pre></td></tr></table></figure><p>コンテナの <code>/home/mitmproxy/.mitmproxy</code> には mitmproxy が生成する証明書が格納されます。run するたびに新たに生成されるとその都度証明書のインポートが必要になるのでこの例では永続化させていますが、一度 run した後はコンテナを使い回して start する運用とする場合にはこの考慮は不要です。</p><h3 id="3-mitmproxy-に認証プロキシの認証情報を設定"><a href="#3-mitmproxy-に認証プロキシの認証情報を設定" class="headerlink" title="3. mitmproxy に認証プロキシの認証情報を設定"></a>3. mitmproxy に認証プロキシの認証情報を設定</h3><p><a href="http://localhost:8081/">http://localhost:8081/</a> を開いて、 Options -&gt; Edit Options -&gt; upstream_auth に本来の認証情報を <code>[user]:[pass]</code> 形式で記入します。保存ボタンは無く、フォーカスを外せば設定完了です。</p><img src="/images/20240227a/image.png" alt="" width="1200" height="161" loading="lazy"><p>mitmproxy の起動コマンドに認証情報を書く事が気にならない方は、起動時のオプションに <code>--upstream-auth [user]:[pass]</code> を加える事でこのステップは無視できます。またその場合は起動コマンドを <code>mitmweb</code> ではなく <code>mitmdump</code> にすればWeb UIが起動しないので省リソースです。</p><h3 id="4-ソフトウェアのプロキシ設定をローカルプロキシに変更"><a href="#4-ソフトウェアのプロキシ設定をローカルプロキシに変更" class="headerlink" title="4. ソフトウェアのプロキシ設定をローカルプロキシに変更"></a>4. ソフトウェアのプロキシ設定をローカルプロキシに変更</h3><p>各ソフトウェアのプロキシ設定を、ローカルプロキシのアドレス（通常は<code>localhost:8080</code>）に変更します。これにより、すべてのソフトウェアで共通のプロキシ設定を利用できるようになります。</p><p>HTTPS通信は mitmproxy を通る際に一旦復号され独自の証明書により再暗号化されるようになります。よって mitmproxy が使用する証明書のインポートが必要になります。ブラウザのプロキシを mitmproxy に設定した状態で <a href="http://mitm.it/">http://mitm.it/</a> を開くと証明書をダウンロードする画面が開くので、プロキシのクライアントとなるOSごとに証明書のインポートを行ってください。<br>Windowsの場合は下記の手順になります。</p><ol><li>mitmproxy-ca-cert.p12 をダウンロード</li><li>mitmproxy-ca-cert.p12を実行（ダブルクリック）</li><li>保存場所：「現在のユーザ」</li><li>ファイル名：変更しない</li><li>パスワード：変更しない（空欄のまま）</li><li>「証明書をすべて次のストアに配置する」を選択して「参照」-&gt;「信頼されたルート証明機関」</li><li>完了</li></ol><p>他にも証明書の参照先が異なる物は対応が必要です。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">WSL</span></span><br><span class="line">sudo mv mitmproxy-ca-cert.pem /usr/local/share/ca-certificates/mitmproxy.crt</span><br><span class="line">sudo update-ca-certificates</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Java</span></span><br><span class="line">keytool -importcert -alias mycert -file mitmproxy-ca-cert.pem -keystore $JAVA_HOME/lib/security/cacerts -storepass *****</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Git</span></span><br><span class="line">git config --global http.sslCAInfo mitmproxy-ca-cert.pem</span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>Windowsでローカルプロキシを起動する場合、Windowsホスト上でそのまま起動するか、WSL上で起動するかといった選択肢があります。Windows上でそのまま起動した方がオーバーヘッドも無くWSLの起動状態に関わらず使用できるので便利ですが、WSLからWindows上のホストを通すにはWSL側で幾つか追加の手順が必要になると思います（WSLから見たホストマシンはIPアドレスが毎回ランダムで、かつ Docker でいう <code>host.docker.internal</code> のようなホスト名も無いので名前解決方法を実装する必要がある）</li><li>更に簡略化する方策として、ローカルプロキシを透過プロキシ化してプロキシの設定自体を無くしてしまう手もありますが、期待通りプロキシが空気のような存在となった頃に思わぬ不具合を踏んで原因追及に手間取ることも考えられるのでその点は留意が必要です</li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>認証プロキシの設定に伴う煩雑さは、多くの企業で共通の課題です。ローカルプロキシを導入することで、これらの課題を効果的に解決し、よりスムーズで安全なネットワーク環境を構築できます。ただし、導入にあたってはセキュリティ対策やネットワークポリシーの確認が必要ですので、注意が必要です。</p><p>今回ご紹介した方法が、認証プロキシの煩わしさに悩む多くの方々にとって、有効な解決策となることを願います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">例： <a href="https://cursor.sh/">AIエディタのCursor</a>のインストーラ等</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="環境構築" scheme="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"/>
    
    <category term="プロキシ" scheme="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7/"/>
    
    <category term="mitmproxy" scheme="https://future-architect.github.io/tags/mitmproxy/"/>
    
  </entry>
  
  <entry>
    <title>AWS Lambdaのランタイムを provided.al2023 に更新する際、2バイナリをzipして対応してみた</title>
    <link href="https://future-architect.github.io/articles/20240226a/"/>
    <id>https://future-architect.github.io/articles/20240226a/</id>
    <published>2024-02-25T15:00:00.000Z</published>
    <updated>2024-02-26T03:09:43.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。</p><p>2023年末にAWS Lambda界隈で話題だった「AWS LambdaのGo 1.xランタイムのサポートが2023年12月31日で終了する」への対応を、あまりネットに無い特殊なやり方を採用して行ったので、考え方や実施メモを残します。</p><p>すでに大半のAWS LambdaのGoユーザの方は対応している時期かと思いますが、ご容赦ください。</p><h2 id="AWS-LambdaのGo-1-xランタイムのサポート終了について"><a href="#AWS-LambdaのGo-1-xランタイムのサポート終了について" class="headerlink" title="AWS LambdaのGo 1.xランタイムのサポート終了について"></a>AWS LambdaのGo 1.xランタイムのサポート終了について</h2><p>この影響で、AWS Lambdaにおいて <code>Go 1.x</code> のランタイムから <code>al2023</code> などに変更し、zipで固めるバイナリ名も <code>bootstrap</code> にする必要があります。</p><p>以下の記事が参考になります。</p><ul><li><a href="https://dev.classmethod.jp/articles/how-to-migrate-aws-sam-go-lambda-application/">AWS SAMのGo言語Lambdaアプリケーションのランタイムを更新してみた | DevelopersIO</a></li><li><a href="https://aws.amazon.com/jp/blogs/compute/migrating-aws-lambda-functions-from-the-go1-x-runtime-to-the-custom-runtime-on-amazon-linux-2/">Migrating AWS Lambda functions from the Go1.x runtime to the custom runtime on Amazon Linux 2 | AWS Compute Blog</a></li></ul><p>ちなみに、更新先は <code>provided.al2</code> と <code>provided.al2023</code> とで少し悩みましたが、より新しく保守期間も長い、<code>provided.al2023</code> を選択しています。作業を年末のギリギリまで引っ張ったメリットかもしれません。AWSのドキュメントも気がつけば <code>provided.al2023</code> 推しに変わっていました。</p><p>この更新作業の内容自体は通常、 <code>lambda</code>（今回のプロダクトで使っていたバイナリ名） を <code>bootstrap</code> という名称に変えて、TerraformのLambdaリソースの設定値を書き換えておしまいであるため、さほど難しく無いでしょう。</p><h2 id="課題"><a href="#課題" class="headerlink" title="課題"></a>課題</h2><p>しかし私が担当していたプロダクトでは、数十のLambdaが、Kinesis Data Streams、DynamoDB Streamsなどのイベント着火し、それもそれぞれが24&#x2F;365で停止タイムがないというものです。</p><p>本来であればイベントソースマッピングを無効にし、その間にLambdaランタイムを更新し、イベントソースマッピング再び有効に戻すという手順が必要です。それをせず、直接アプリデプロイ or ランタイム更新すると、そのタイミングでリクエストが来た場合に処理が失敗し、データロストを誘発してしまいかねません。</p><p>しかし、上記の方法では以下の面倒臭さがありました。</p><ul><li>前提として、鮮度が高くデータを処理する必要があり、disableにする時間をなるべく短くする必要がある</li><li>disableしてからアプリ更新、またenableに戻すというような運用順書とその検証する必要がある</li><li>そのような時間制約があるような神経質な作業を年末にやりたくないという、心理的なハードル（※年末に関しては、他の優先度タスクがあり移行作業を後ろ回しにした私の責任です）</li></ul><h2 id="対応方針"><a href="#対応方針" class="headerlink" title="対応方針"></a>対応方針</h2><p>幸い、対象のLambdaリソースを一括デプロイするための、Makefileをテンプレートベースで生成するツールが整えられていたため、これを改修して、<code>make deploy-prod</code> するだけでLambdaランタイムのアップデートを行えるようにすることを目指しました。</p><p>今回思いついた手段ですが、 Go 1.x で動く<code>lambda</code> と <code>provided.al2023</code> で動く <code>bootstrap</code> という2種類のバイナリをzipで同梱するという方法を取ることにしました。</p><p>手はずとしては、次のとおりです。</p><ol><li>作業前は <code>lambda</code> とうバイナリだけで動く</li><li>移行ステップ1で、<code>lambda</code>, <code>bootstrap</code> の2つのバイナリをデプロイする<ul><li>このとき、ランタイムは <code>Go 1.x</code> のままである</li><li>利用されるハンドラは <code>lambda</code> のままであり、 <code>bootstarp</code> は呼ばれない</li></ul></li><li>移行ステップ2で、ランタイムを <code>provided.al2023</code> に更新する<ul><li>そのタイミングで利用されるハンドは <code>bootstrap</code> になり切り替わる</li></ul></li><li>移行ステップ3では、動作が問題なければ、利用しなくなった <code>lambda</code> というバイナリはなくして、 <code>bootstrap</code> のみのzipに絞る。これは後々の対応で問題ない</li></ol><img src="/images/20240226a/lambda_runtime更新.drawio_(2).png" alt="lambda_runtime更新.drawio_(2).png" width="1200" height="1044" loading="lazy"><p>ポイントとして、zipに2つのバイナリを同梱しちゃっても、Lambdaとしては問題なく動く（zip時の50MBサイズ上限はありますが、利用するハンドラ以外のバイナリを渡しても問題ありませんでした）。それにより、Lambdaランタイム更新をコマンドで行っても、上モノのzipには新旧両方のランタイムで動くバイナリが存在するため、ダウンタイム無しで切り替え可能になったということです。</p><h2 id="デプロイスクリプト"><a href="#デプロイスクリプト" class="headerlink" title="デプロイスクリプト"></a>デプロイスクリプト</h2><p>今回は上記の方針を、Makefileで実施するようにしました。</p><p>ビルド、デプロイの流れは次のような流れです。</p><figure class="highlight makefile"><figcaption><span>移行時の特殊対応版</span></figcaption><table><tr><td class="code"><pre><span class="line">SHELL := /bin/bash</span><br><span class="line">.SHELLFLAGS := -eu -o pipefail -c</span><br><span class="line"></span><br><span class="line"><span class="comment"># build でlambda, bootstrapの2種類のバイナリを作成</span></span><br><span class="line"><span class="section">build:</span></span><br><span class="line">@CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags=<span class="string">&quot;-s -w -buildid=&quot;</span> -trimpath -o bin/lambda cmd/lambda/lambda.go</span><br><span class="line">@CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags=<span class="string">&quot;-s -w -buildid=&quot;</span> -trimpath -tags lambda.norpc -o bin/bootstrap cmd/lambda/lambda.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># zip で lambda, bootstrapを lambda.zip に同梱する</span></span><br><span class="line"><span class="section">zip: build</span></span><br><span class="line">@touch -t 202401010000 bin/lambda bin/bootstrap</span><br><span class="line">@zip -j -q bin/lambda.zip bin/lambda bin/bootstrap</span><br><span class="line"></span><br><span class="line"><span class="comment"># deploy-prod では最初に lambda.zip でアプリ更新、その次にランタイムを更新する</span></span><br><span class="line"><span class="comment"># wait function-updated でアプリ更新を待たないとconfigurationが落ちるケースがある</span></span><br><span class="line"><span class="section">deploy-prod: zip</span></span><br><span class="line">aws lambda --profile our_prod update-function-code --function-name prod-example-api \</span><br><span class="line">      --zip-file fileb://bin/lambda.zip | jq -c &#x27;&#123;FunctionName, Runtime, Handler, LastModified&#125;&#x27;</span><br><span class="line">aws lambda --profile our_prod wait function-updated --function-name prod-example-api</span><br><span class="line">aws lambda --profile our_prod update-function-configuration --function-name prod-example-api \</span><br><span class="line">      --runtime provided.al2023 --handler bootstrap | jq -c &#x27;&#123;FunctionName, Runtime, Handler, LastModified&#125;&#x27;</span><br></pre></td></tr></table></figure><p>Makefile中のコメント通りですが、いくつか補足します。</p><ul><li><code>build</code> ターゲット<ul><li><code>go build</code> で <code>lambda</code>, <code>bootstrap</code> の2種類のバイナリを作成します</li><li><code>-tags lambda.norpc</code> は <code>provided.al2</code> などで動かす場合にビルドサイズを下げることができるオプションです。このオプションを無視して、 <code>go build</code> を1度だけ呼び出し、コピー＋リネームで対応しても良かったかもしれません</li></ul></li><li><code>zip</code> ターゲット<ul><li>2バイナリを同梱し <code>lambda.zip</code> を作っています</li><li><code>touch</code> でバイナリの最終更新日時を固定して、zipのコードハッシュが変化しないようにしています</li></ul></li><li><code>deploy-prod</code> ターゲット<ul><li>1つ目の処理で、 <code>lambda.zip</code> をデプロイしています</li><li>2つ目の処理でアップデート完了までwaitします</li><li>3つ目の処理で、Lambdaランタイム更新とハンドラをbootstrapに更新しています</li><li>Lambdaランタイム更新のコマンドは、何度実行してもエラーにならないので、この形式のまま何度かアプリリリースしても問題ありません</li></ul></li></ul><p>上記の切り替えは1度だけ動かせば、Lambdaランタイムが切り替わるので、その後は次のように記述を戻してOKです。</p><figure class="highlight makefile"><figcaption><span>移行時の特殊対応を取り除いた例</span></figcaption><table><tr><td class="code"><pre><span class="line">SHELL := /bin/bash</span><br><span class="line">.SHELLFLAGS := -eu -o pipefail -c</span><br><span class="line"></span><br><span class="line"><span class="section">build:</span></span><br><span class="line">@CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags=<span class="string">&quot;-s -w -buildid=&quot;</span> -trimpath -tags lambda.norpc -o bin/bootstrap cmd/lambda/lambda.go</span><br><span class="line"></span><br><span class="line"><span class="section">zip: build</span></span><br><span class="line">@touch -t 202401010000 bin/bootstrap</span><br><span class="line">@zip -j -q bin/lambda.zip bin/bootstrap</span><br><span class="line"></span><br><span class="line"><span class="section">deploy-prod: zip</span></span><br><span class="line">aws lambda --profile our_prod update-function-code --function-name prod-example-api \</span><br><span class="line">      --zip-file fileb://bin/lambda.zip | jq -c &#x27;&#123;FunctionName, LastModified&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="移行してみて"><a href="#移行してみて" class="headerlink" title="移行してみて"></a>移行してみて</h2><p>作業手順としては <code>make deploy-prod</code> を実行するだけ（※数十のLambdaリソースを一括デプロイするラッパーのようなツールがあったため）ですので、非常に楽でした。慣れた手順で、ダウンタイム無しで切り替えられるため安心感があり、この手順を採用して良かったと思いました。</p><p>なお本題ではないですが、Go 1.x からのランタイム切り替えに際して、次のコード書き換えが1点必要でした。</p><p>一部のコードで次のようにタイムゾーンを読み込んでいる処理がありました。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">jst, _ = time.LoadLocation(<span class="string">&quot;Asia/Tokyo&quot;</span>)</span><br></pre></td></tr></table></figure><p>これが次のようなエラーでてしまいました。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;level&quot;</span><span class="punctuation">:</span><span class="string">&quot;error&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span><span class="string">&quot;2023-12-26T09:54:01Z&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;panic catch: time: missing Location in call to Time.Ingoroutine （略）&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>provided.al2023</code> ですとタイムゾーン情報をファイルから取れないのですね。対応としては、利用しているタイムゾーンがJSTのみだったため、<code>jst := time.FixedZone(&quot;Asia/Tokyo&quot;, 9*60*60)</code> と単純に書き換えてしのぎました。</p><p>この事象がなぜ発生したかは本記事のテーマとは少し外れるため、詳細は <a href="https://tutuz-tech.hatenablog.com/entry/2021/01/30/192956">辻さんの記事</a> などを参照ください。</p><p>それ以外、これといって課題は出ておらず安定しています。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>切り替え作業ですが、慣れた手順をそのままで中身のみを拡張するような方式だと、作業中のプレッシャーが格段に減り手順書も作る必要がないほどでしたので非常に楽ができました。zipに2つのバイナリを同梱するのはトリッキーであり、あまり聞かないやり方な気がしますが、覚えておくと今後もなにかの役に立つかもしれません。</p><p>本当は<code>amd64</code> から <code>arm64</code> に切り替えたかったのですが、これについては持ち越し（今回の手順だと対応もできないです）となりました。その場合は、イベントマッピングを無効化するといった手順が必要そうで、少し大変だと感じています。良い切り替えアイデアは絶賛募集中です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;TIG真野です。&lt;/p&gt;
&lt;p&gt;2023年末にAWS Lambda界隈で話題だった「AWS LambdaのGo</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
    <category term="Makefile" scheme="https://future-architect.github.io/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>MacをWindows/Linux風な操作感にする、Hammerspoonで始める環境構築</title>
    <link href="https://future-architect.github.io/articles/20240222a/"/>
    <id>https://future-architect.github.io/articles/20240222a/</id>
    <published>2024-02-21T15:00:00.000Z</published>
    <updated>2024-02-22T01:11:50.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。最近自宅チェアをバランスボールにして体幹を鍛えている、HealthCare Innovation Group(HIG)所属の山本です。</p><p>私用PCはLinux、会社PCはプロジェクトによってWindowsとMacのどちらかを使っている生活をしており、かつ自宅のモニターやキーボードは外付けで1つのものを使用しています。</p><p>その日々を過ごす中で、キーバインディングが異なるPCで混乱することがあり、ツール・操作感をできるだけ統一したいという願望がありました。</p><p>今回はMacを使用する際に、キーバインディングや操作感を私用PCに寄せるため「<a href="https://www.hammerspoon.org/">Hammerspoon</a>」を使用した、個人的な環境構築集を書きます。</p><h2 id="Hammerspoonとは？"><a href="#Hammerspoonとは？" class="headerlink" title="Hammerspoonとは？"></a>Hammerspoonとは？</h2><p><a href="https://www.hammerspoon.org/">https://www.hammerspoon.org/</a></p><p>macOSの操作をLua言語で行うことができるツールです。<br>アプリケーション、ウィンドウ、マウス ポインター、クリップボードなどできることは多岐に及びます。</p><p>キーバインド操作ツールとしては「Karabiner-Elements」や画面分割では「Shiftit」など、類似の操作ができるアプリはいくつかあります。</p><p>これらのツールのようにGUIで設定できない代わりに、スクリプトをゴリゴリ書くことでかなり自由度の高い操作をできることが特徴です。</p><p>今回はキーバインディングの操作や、ウィンドウの操作に主に使用させていただきました。</p><h2 id="操作環境"><a href="#操作環境" class="headerlink" title="操作環境"></a>操作環境</h2><ul><li>Mac OS: Ventura 13.5</li><li>キーボード：英字キーボード(Keychron K2)をUSB接続</li><li>ディスプレイ：3枚のディスプレイを外付け、本体PCは閉じて使用(Anker 564 USB-C ドッキングステーション+DisplayLink Manager)</li><li>開発ツール：WezTerm + Neovim</li></ul><p>今回の操作環境としては、上記のようなものです。</p><p>英字キーボードを外付けしている&amp;複数の外部ディスプレイを接続している、ということが記事の背景となります。</p><h2 id="やりたいこと"><a href="#やりたいこと" class="headerlink" title="やりたいこと"></a>やりたいこと</h2><p>Macを初めて使うユーザーのお悩みとして、以下のようなものがあるのではないでしょうか？</p><ul><li>Commandキーって一体なんのキー…？</li><li>Ctrl+C&#x2F;Ctrl+Vでコピペができない…</li><li>Ctrl↔Cmdの入れ替えを標準オプションから設定してみたはいいけど、求めてないキー操作まで入れ替わってしまう…</li><li>Windowsキー(の位置にあるCommandキー)＋矢印キーでウィンドウの半分表示や移動ができない</li><li>Windowsユーザーに共有されたフォルダパスで開けない…</li></ul><p>これらのうちの多くは、Macのキーバインディングやツールに慣れたり活用することで解決する、もしくはより効率的な操作できると思います。</p><p>思い…ますが、私はなるべくお手軽に単一のツールで解決し、かつ使用感はLinuxやWindowsに寄せたいです。</p><p>その頑固な意思が背景にありましたが、Hammerspoonであれば、Luaで設定ファイルを記載することで自在に管理できました。</p><h2 id="やったこと"><a href="#やったこと" class="headerlink" title="やったこと"></a>やったこと</h2><p>今回紹介することはシンプルな3つの設定です。</p><p><strong>1.キーバインディングの変更:</strong></p><ul><li>Ctrl+C&#x2F;Ctrl+Vでコピーペーストができるように（エディタ系のアプリを除いて）</li><li>Win+矢印キーでウィンドウの移動・半分化・最大化ができる（例: Win+左矢印でウィンドウを左半分に移動）</li></ul><p>※上記キーの名称はキーボードの刻印見たまま。</p><img src="/images/20240222a/IMG_20240219_174617.jpg" alt="IMG_20240219_174617.jpg" width="1200" height="675" loading="lazy"><p><strong>2.ウィンドウ操作の変更:</strong></p><ul><li>Windowsライクなウィンドウ操作（半分表示、最大化、ディスプレイ間移動）</li></ul><p><strong>3.パスの相互変換:</strong></p><ul><li>WindowsパスとMacパスの相互変換をメニューバーに常駐させることで簡単に実行</li></ul><img src="/images/20240222a/image_(12).png" alt="image_(12).png" width="284" height="146" loading="lazy"><p>特に、Windowsユーザーから共有されるパスの相互変換機能は、メニューバーにアイコンを常駐させることで、操作によりクリップボード上のパスを変換する方法としました。これにより、<code>\\ホスト名\フォルダ名</code> (Windows) と <code>smb://ホスト名/フォルダ名 </code>(Mac) の間での変換を簡単に行うことができます。</p><h2 id="キーボード設定"><a href="#キーボード設定" class="headerlink" title="キーボード設定"></a>キーボード設定</h2><p>すべての変更をHammerspoonで管理しています！と言いたいところですが、試行錯誤の結果、自然な操作感とするためModifier Keysについては以下のようにスワップしています。</p><img src="/images/20240222a/image.png" alt="image.png" width="672" height="403" loading="lazy"><p>上記設定とHammerspoon側の設定を合わせることで、キー操作を定義する形です。</p><h2 id="Hammerspoon設定編"><a href="#Hammerspoon設定編" class="headerlink" title="Hammerspoon設定編"></a>Hammerspoon設定編</h2><p>さて、ここからが本題です。実際にHammerspoonの設定例を紹介していきます。</p><p>Hammerspoonの設定ファイルは<code>~/.hammerspoon/init.lua</code>に配置され、Lua言語で記載します。</p><p>また、メニューバー上からも<code>Open Config</code>にて開くことができる親切仕様です。</p><p>設定ファイルの記載内容としては、ドキュメントがかなり整備されており下記を参照することで一通り記載されています。<br><a href="https://www.hammerspoon.org/docs/index.html">https://www.hammerspoon.org/docs/index.html</a></p><p>上記のドキュメントの中でも、今回紹介するものは、以下の4つです。</p><ul><li>キーバインディング操作</li><li>ウィンドウ操作</li><li>メニューバーへのアイテム作成</li><li>クリップボード操作</li></ul><p>以降のセクションでは実際の実装例として紹介していきます。</p><p>※1つのファイルに記載すると煩雑であったため、<code>init.lua</code>から各設定のLuaファイルを読み込むように分割して構成しています</p><h2 id="1-Hammerspoon設定-キーバインディング編"><a href="#1-Hammerspoon設定-キーバインディング編" class="headerlink" title="1. Hammerspoon設定(キーバインディング編)"></a>1. Hammerspoon設定(キーバインディング編)</h2><p><a href="https://www.hammerspoon.org/docs/hs.eventtap.html">https://www.hammerspoon.org/docs/hs.eventtap.html</a></p><p>キーバインディングについては、<code>hs.eventtap</code>の章に記載されている各関数使用することで、入力キーの入れ替えなどの操作ができます。</p><p>今回はCtrl&#x2F;Cmdキーの入れ替えをいい感じにしたかったので、以下のように実装しています。</p><p>標準設定でModifier Keysを一部入れ替えていることを前提に、スクリプトで一部操作を上書きするイメージですね。</p><figure class="highlight lua"><figcaption><span>modules/key_bindings.lua</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> key_bindings = &#123;&#125;</span><br><span class="line"><span class="comment">-- local logger = hs.logger.new(&quot;key_bindings.lua&quot;, &quot;debug&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> console_apps = &#123;</span><br><span class="line">  [<span class="string">&quot;Terminal&quot;</span>] = <span class="literal">false</span>,</span><br><span class="line">  [<span class="string">&quot;iTerm2&quot;</span>] = <span class="literal">true</span>,</span><br><span class="line">  [<span class="string">&quot;WezTerm&quot;</span>] = <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> special_combos = &#123;</span><br><span class="line">  c = <span class="literal">false</span>,</span><br><span class="line">  v = <span class="literal">false</span>,</span><br><span class="line">  space = <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- コンソールアプリ以外でCtrl,Cmdキーの入れ替えを行う</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">swapCmdCtrl</span><span class="params">(event)</span></span></span><br><span class="line">  <span class="keyword">local</span> flags = event:getFlags()</span><br><span class="line">  <span class="keyword">local</span> key_code = event:getKeyCode()</span><br><span class="line">  <span class="keyword">local</span> key_char = hs.keycodes.map[key_code]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">local</span> front_app = hs.application.frontmostApplication()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> console_apps[front_app:name()] <span class="keyword">and</span> flags[<span class="string">&quot;cmd&quot;</span>] <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> special_combos[key_char] <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> modifier_keys = &#123;<span class="string">&quot;ctrl&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> flags[<span class="string">&quot;shift&quot;</span>] <span class="keyword">then</span></span><br><span class="line">      modifier_keys[#modifier_keys + <span class="number">1</span>] = <span class="string">&quot;shift&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> flags[<span class="string">&quot;alt&quot;</span>] <span class="keyword">then</span></span><br><span class="line">      modifier_keys[#modifier_keys + <span class="number">1</span>] = <span class="string">&quot;alt&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    hs.eventtap.event.newKeyEvent(modifier_keys, key_char, <span class="literal">true</span>):post()</span><br><span class="line">    hs.eventtap.event.newKeyEvent(modifier_keys, key_char, <span class="literal">false</span>):post()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">key_bindings.start</span><span class="params">()</span></span></span><br><span class="line">  key_bindings.eventtap = hs.eventtap.new(&#123;hs.eventtap.event.types.keyDown&#125;, swapCmdCtrl)</span><br><span class="line">  key_bindings.eventtap:start()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">key_bindings.stop</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">if</span> key_bindings.eventtap <span class="keyword">then</span></span><br><span class="line">    key_bindings.eventtap:stop()</span><br><span class="line">    key_bindings.eventtap = <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> key_bindings</span><br></pre></td></tr></table></figure><figure class="highlight lua"><figcaption><span>init.lua</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">-- keyBindigsを有効化する</span></span><br><span class="line">key_bindings.start()</span><br><span class="line"></span><br><span class="line">hs.reload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">  key_bindings.stop()</span><br><span class="line">  hs.reload()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>ちょっぴり複雑な背景としては、ターミナル系アプリおよびエディタの操作時にはいくつか例外としたいものがあったためです。</p><p>他のOSから持ってきた設定ファイルをそのまま使いたかったことや、<code>Ctrl + C</code>で処理を中止(SIGINTシグナルを送信)できるようにしておきたかったことがあります。</p><p>素朴なキー入れ替えだとCtrl + Spaceでの文字入力変換や、他OSで定義したVimのショートカットをそのまま使うことができませんでした。</p><p>上記の設定にすることで、他OSで設定した設定ファイルをそのまま持ち込めています。</p><h2 id="2-Hammerspoon設定-ウィンドウ操作編"><a href="#2-Hammerspoon設定-ウィンドウ操作編" class="headerlink" title="2. Hammerspoon設定(ウィンドウ操作編)"></a>2. Hammerspoon設定(ウィンドウ操作編)</h2><p>ウィンドウ操作としては、Windowsのキーバインディングに寄せたいと思ってました。</p><p>画面の半分に移動したり、<br><img src="/images/20240222a/image_2.png" alt="" width="841" height="247" loading="lazy"></p><p>最大化したり、<br><img src="/images/20240222a/image_3.png" alt="" width="839" height="242" loading="lazy"></p><p>ディスプレイ間を移動したり、<br><img src="/images/20240222a/image_4.png" alt="" width="830" height="243" loading="lazy"></p><p>などの操作ですね。Windowsではこれらはデフォルトのショートカットキーとなっていますが、Macでも再現をしたいといったことがモチベーションです。</p><p><a href="https://www.hammerspoon.org/docs/hs.window.html#moveToUnit">https://www.hammerspoon.org/docs/hs.window.html#moveToUnit</a></p><p>Hammerspoonでは、<code>hs.window</code>に記載されている各関数でウィンドウの操作が可能になっています。</p><p>今回は、以下のように実装しました。</p><figure class="highlight lua"><figcaption><span>modules/window_manager.lua</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> window_management = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- アクティブウィンドウを画面の左半分に移動する関数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">window_management.moveWindowLeft</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> win = hs.window.focusedWindow()</span><br><span class="line">  <span class="keyword">if</span> win <span class="keyword">then</span></span><br><span class="line">    win:moveToUnit(hs.layout.left50)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- アクティブウィンドウを画面の右半分に移動する関数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">window_management.moveWindowRight</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> win = hs.window.focusedWindow()</span><br><span class="line">  <span class="keyword">if</span> win <span class="keyword">then</span></span><br><span class="line">    win:moveToUnit(hs.layout.right50)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- アクティブウィンドウを画面の最大化する</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">window_management.maximizeWindow</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> win = hs.window.focusedWindow()</span><br><span class="line">  <span class="keyword">if</span> win <span class="keyword">then</span></span><br><span class="line">    win:maximize()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- アクティブウィンドウを画面の最小化する</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">window_management.minimizeWindow</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> win = hs.window.focusedWindow()</span><br><span class="line">  <span class="keyword">if</span> win <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> app = win:application()</span><br><span class="line">    app:hide()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- アクティブウィンドウを次のスクリーンに移動</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">window_management.moveWindowNextScreen</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> win = hs.window.focusedWindow()</span><br><span class="line">  <span class="keyword">if</span> win <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> nextScreen = win:screen():<span class="built_in">next</span>()</span><br><span class="line">    win:moveToScreen(nextScreen, <span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- アクティブウィンドウを前のスクリーンに移動</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">window_management.moveWindowPrevScreen</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> win = hs.window.focusedWindow()</span><br><span class="line">  <span class="keyword">if</span> win <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> prevScreen = win:screen():previous()</span><br><span class="line">    win:moveToScreen(prevScreen, <span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> window_management</span><br></pre></td></tr></table></figure><figure class="highlight lua"><figcaption><span>init.lua</span></figcaption><table><tr><td class="code"><pre><span class="line">hs.hotkey.bind(&#123;<span class="string">&quot;option&quot;</span>&#125;, <span class="string">&quot;Left&quot;</span>, window_management.moveWindowLeft)</span><br><span class="line">hs.hotkey.bind(&#123;<span class="string">&quot;option&quot;</span>&#125;, <span class="string">&quot;Right&quot;</span>, window_management.moveWindowRight)</span><br><span class="line">hs.hotkey.bind(&#123;<span class="string">&quot;option&quot;</span>&#125;, <span class="string">&quot;Up&quot;</span>, window_management.maximizeWindow)</span><br><span class="line">hs.hotkey.bind(&#123;<span class="string">&quot;optionn&quot;</span>&#125;, <span class="string">&quot;Down&quot;</span>, window_management.minimizeWindow)</span><br><span class="line">hs.hotkey.bind(&#123;<span class="string">&quot;option&quot;</span>, <span class="string">&quot;shift&quot;</span>&#125;, <span class="string">&quot;Left&quot;</span>, window_management.moveWindowNextScreen)</span><br><span class="line">hs.hotkey.bind(&#123;<span class="string">&quot;option&quot;</span>, <span class="string">&quot;shift&quot;</span>&#125;, <span class="string">&quot;Right&quot;</span>, window_management.moveWindowPrevScreen)</span><br></pre></td></tr></table></figure><p>上記の設定により、Windowsライクなウィンドウの移動・サイズ変更操作ができています。</p><h2 id="3-Hammerspoon設定-パス相互変換編"><a href="#3-Hammerspoon設定-パス相互変換編" class="headerlink" title="3. Hammerspoon設定(パス相互変換編)"></a>3. Hammerspoon設定(パス相互変換編)</h2><p>最後に、パス変換の紹介です。</p><p>WindowsとMacのパス表記の間には、小さくそして大きな差異があることには度々苦しめられると思います。</p><p>区切り文字が違ったり、ファイルサーバーのパスが異なったりですね。<br>(<code>\\ホスト名\フォルダ名</code> &lt;-&gt; <code>smb://ホスト名/フォルダ名</code>のようなもの)</p><p>この変換については濁点の扱いであったりUTF-8の扱いなど闇が深い部分も多いので詳細は触れず、一部簡単にした例を紹介します。</p><p>パス変換の実施方法はいろいろあると思いますが、今回はメニューバーに変換を常駐させておき、操作によりクリップボード上のパスを変換する方法としました。</p><img src="/images/20240222a/image_(12)_2.png" alt="" width="284" height="146" loading="lazy"><p><a href="https://www.hammerspoon.org/docs/hs.menubar.html">https://www.hammerspoon.org/docs/hs.menubar.html</a></p><p>Hammerspoonでは、<code>hs.menubar</code>に記載された各関数を使用することで、Mac上のメニューバーにドロップダウンメニューを表示することができます。</p><p><a href="https://www.hammerspoon.org/docs/hs.pasteboard.html">https://www.hammerspoon.org/docs/hs.pasteboard.html</a></p><p>また、クリップボード操作については<code>hs.pasteboard</code>に記載された各関数を使用することで実施できます。</p><p>今回は、メニュー上に表示した変換メニューを押下することで、クリップボードからテキストを取得して変換し、クリップボードに返すような挙動としました。</p><p>実装例としては、以下のようになります。</p><figure class="highlight lua"><figcaption><span>modules/path_converter.lua</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MacのファイルパスをWindows形式に変換する</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertWindowsPathToMac</span><span class="params">(windowsPath)</span></span></span><br><span class="line">    <span class="keyword">local</span> macPath = windowsPath:<span class="built_in">gsub</span>(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>):<span class="built_in">gsub</span>(<span class="string">&quot;C:&quot;</span>, <span class="string">&quot;~/&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> macPath</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- MacのSMBパスをWindowsのUNC形式に変換する</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertMacPathToWindows</span><span class="params">(macPath)</span></span></span><br><span class="line">    <span class="keyword">local</span> windowsPath = macPath:<span class="built_in">gsub</span>(<span class="string">&quot;~/&quot;</span>, <span class="string">&quot;C:&quot;</span>):<span class="built_in">gsub</span>(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;\\&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> windowsPath</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- WindowsのファイルパスをMac形式に変換する</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertUncWindowsPathToMac</span><span class="params">(windowsPath)</span></span></span><br><span class="line">    <span class="keyword">local</span> macPath = windowsPath:<span class="built_in">gsub</span>(<span class="string">&quot;\\\\&quot;</span>,<span class="string">&quot;smb://&quot;</span>):<span class="built_in">gsub</span>(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> macPath</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- WindowsのUNC形式パスをMacのSMBパスに変換する</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertUncMacPathToWindows</span><span class="params">(macPath)</span></span></span><br><span class="line">    <span class="keyword">local</span> windowsPath = macPath:<span class="built_in">gsub</span>(<span class="string">&quot;smb://&quot;</span>, <span class="string">&quot;\\\\&quot;</span>):<span class="built_in">gsub</span>(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;\\&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> windowsPath</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> menuBarItem = hs.menubar.new()</span><br><span class="line"></span><br><span class="line">menuBarItem:setTitle(<span class="string">&quot;WinMac PathConverter&quot;</span>)</span><br><span class="line"></span><br><span class="line">menuBarItem:setMenu(&#123;</span><br><span class="line">    &#123;title = <span class="string">&quot;Convert Clipboard to Mac Path&quot;</span>, fn = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">local</span> clipboardContents = hs.pasteboard.getContents()</span><br><span class="line">        <span class="keyword">local</span> convertedPath = convertWindowsPathToMac(clipboardContents)</span><br><span class="line">        hs.pasteboard.setContents(convertedPath)</span><br><span class="line">        hs.alert.show(<span class="string">&quot;Converted to Mac Path: &quot;</span> .. convertedPath)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;title = <span class="string">&quot;Convert Clipboard to Windows Path&quot;</span>, fn = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">local</span> clipboardContents = hs.pasteboard.getContents()</span><br><span class="line">        <span class="keyword">local</span> convertedPath = convertMacPathToWindows(clipboardContents)</span><br><span class="line">        hs.pasteboard.setContents(convertedPath)</span><br><span class="line">        hs.alert.show(<span class="string">&quot;Converted to Windows Path: &quot;</span> .. convertedPath)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;title = <span class="string">&quot;Convert Clipboard to Mac Path(UNC)&quot;</span>, fn = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">local</span> clipboardContents = hs.pasteboard.getContents()</span><br><span class="line">        <span class="keyword">local</span> convertedPath = convertUncWindowsPathToMac(clipboardContents)</span><br><span class="line">        hs.pasteboard.setContents(convertedPath)</span><br><span class="line">        hs.alert.show(<span class="string">&quot;Converted to Mac Path: &quot;</span> .. convertedPath)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;title = <span class="string">&quot;Convert Clipboard to Windows Path(UNC)&quot;</span>, fn = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">local</span> clipboardContents = hs.pasteboard.getContents()</span><br><span class="line">        <span class="keyword">local</span> convertedPath = convertUncMacPathToWindows(clipboardContents)</span><br><span class="line">        hs.pasteboard.setContents(convertedPath)</span><br><span class="line">        hs.alert.show(<span class="string">&quot;Converted to Windows Path: &quot;</span> .. convertedPath)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;title=<span class="string">&quot;Quit&quot;</span>, fn= <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.hints.showTitleThresh =<span class="number">0</span> <span class="keyword">end</span>&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight lua"><figcaption><span>init.lua</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> path_converter = <span class="built_in">require</span> <span class="string">&quot;modules.path_converter&quot;</span></span><br></pre></td></tr></table></figure><p>上記の設定により、メニューバーからパス変換をし、変換内容についてはダイアログ表示できました。</p><p>実行時のイメージは以下のようなものです。</p><p>クリップボードにパスをコピーした上で、Macのメニューバー上に作成したプルダウンから、作成した関数をトリガーすることで画像のようなアラートを表示する＆クリップボードに変換後パスを保存できます。</p><img src="/images/20240222a/image_5.png" alt="image.png" width="720" height="355" loading="lazy"><p>Luaスクリプトをより煮詰めることで、さらにいろんなパスケースや文字列変換にも対応させることが可能です。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Hammerspoonを導入して実現したMacのキーバインディング・ウィンドウ操作・クリップボードの文字列としてのパス変換の3つを紹介しました。</p><p>こういったHammerspoonの設定を通して、Macの操作にいまだに不慣れな私でも、個人的にはWindows&#x2F;Linuxライクな操作ができるようになっています。</p><p>正直、今回記事で実施した操作は他のアプリの組み合わせでも実行できるとは思いますが、こういった設定はして暫く経つとどのツールを組み合わせているのか、どこに設定ファイルがあるのか、また記載内容が読めなくなっているのが私の常です。</p><p>そういった意味で、HammerspoonではLuaファイル一本で設定できるので振り返りやすく、また自由度も高いという意味で個人的には良かったです。<br>(NeovimのLuaファイル設定と同じ感覚でできました)</p><p>Macを使う、けど操作に慣れない…！スクリプトでゴリゴリいじりたい…！といった方におすすめしたいとおもいます。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.hammerspoon.org/docs/index.html">https://www.hammerspoon.org/docs/index.html</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。最近自宅チェアをバランスボールにして体幹を鍛えている、HealthCare Innovation</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="環境構築" scheme="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"/>
    
    <category term="ショートカット" scheme="https://future-architect.github.io/tags/%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88/"/>
    
    <category term="Mac" scheme="https://future-architect.github.io/tags/Mac/"/>
    
    <category term="Hammerspoon" scheme="https://future-architect.github.io/tags/Hammerspoon/"/>
    
  </entry>
  
  <entry>
    <title>【Firebase】GDG Tokyo Monthly Online Tech Talksに登壇しました</title>
    <link href="https://future-architect.github.io/articles/20240221a/"/>
    <id>https://future-architect.github.io/articles/20240221a/</id>
    <published>2024-02-20T15:00:00.000Z</published>
    <updated>2024-02-21T02:41:04.441Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20240221a/image.png" alt="image.png" width="660" height="270" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。最近スギ花粉耐性がないことを実感しつつある山本です。</p><p>2024&#x2F;2&#x2F;1、GDG Tokyo主催の「<a href="https://gdg-tokyo.connpass.com/event/306983/">【Firebase】GDG Tokyo Monthly Online Tech Talks</a>」に「Flutter×Firebaseサービス達で高速でモバイルアプリを開発した話」というタイトルで登壇してきたので、その事後レポートです。</p><p>登壇資料：</p><script defer class="speakerdeck-embed" data-id="d4e715deb4044482a0aa0f0d3a5a492b" data-ratio="1.7772511848341233" src="//speakerdeck.com/assets/embed.js"></script><h2 id="GDG-Tokyo-Monthly-Online-Tech-Talksとは？"><a href="#GDG-Tokyo-Monthly-Online-Tech-Talksとは？" class="headerlink" title="GDG Tokyo Monthly Online Tech Talksとは？"></a>GDG Tokyo Monthly Online Tech Talksとは？</h2><blockquote><p>Google Developers Group (GDG) Tokyo は主にGoogleのテクノロジーに興味のある人たちで情報を共有しあう集いです</p></blockquote><blockquote><p>GDG Tokyoが毎月開催する「GDG Tokyo Monthly Online Tech Talks」は、Googleの技術に関心を持つ人々が集うオンラインMeetupです。このイベントは、Android、Google Cloud、Web、Firebase、Machine Learning（ML）、Flutter、Goなど、多様なGoogleの技術に焦点を当てています。参加者は、技術情報をキャッチアップし、エンジニア同士のコミュニケーションと交流の場としてご活用いただけます。</p></blockquote><p>(※GDG Tokyoの<a href="https://gdg-tokyo.connpass.com/">connpassページ</a>より引用)</p><hr><p>「GDG Tokyo」および「GDG Tokyo Monthly Online Tech Talks」についてはGDG Tokyoのグループの説明として上記が記載されています。</p><p>今回のイベントのテーマは「Firebase」に関わることで、15分枠 or 5分枠の登壇枠で開催されていました。</p><h2 id="登壇"><a href="#登壇" class="headerlink" title="登壇"></a>登壇</h2><p>最近お仕事でFirebaseに携わっていたこともあり、社内の人におすすめされたので登壇を申し込んでみました。(会社アカウントとしては初の登壇です…！)</p><p>登壇内容としては、新規事業プロジェクト周りでFlutterとFirebaseを活用していたのでそのユースケースの紹介をしてみました。</p><p>以下内容を一部抜粋して紹介していきます。</p><h2 id="アーキテクチャ紹介"><a href="#アーキテクチャ紹介" class="headerlink" title="アーキテクチャ紹介"></a>アーキテクチャ紹介</h2><p>今回紹介したユースケースとしてはモバイルアプリ側はFlutter、バックエンドサービス側をFirebaseのサービスを活用したものです。</p><img src="/images/20240221a/image_2.png" alt="image.png" width="962" height="540" loading="lazy"><p>どちらもGoogle製ということもあり、親和性がある&amp;ドキュメントが豊富ということでこのアーキテクチャが選定されています。</p><img src="/images/20240221a/image_3.png" alt="image.png" width="961" height="543" loading="lazy"><p>使用したサービスを一覧で並べてみると、Firebaseを主としたかなりモダンな構成と言えるのではないでしょうか？<br>自分は開発チームにあとから参画したのですが、なかなか良い経験となっています。</p><h2 id="ログ-アラートについて"><a href="#ログ-アラートについて" class="headerlink" title="ログ&amp;アラートについて"></a>ログ&amp;アラートについて</h2><img src="/images/20240221a/image_4.png" alt="image.png" width="963" height="536" loading="lazy"><p>Firebaseでログ・アラート周りに使用できるサービスとしては以下の2つがあります。</p><ul><li>Firebase Crashlytics</li><li>Google Analytics for Firebase</li></ul><p>構成としてはいろいろなものが考えられますが、今回はCrashlyticsについては主にクラッシュor致命的なエラーを通知するように、Google Analyticsにはユーザーログを出したりBigQueryに連携したりしてユーザーの操作の追跡や広告効果の測定といったことを行っていました。</p><p>※BigQueryへの連携については松井さんが以下記事で解説してます。</p><p><a href="https://future-architect.github.io/articles/20210316/">Firebaseで取得したログをBigQueryに連携してユーザー操作をトラッキングする</a></p><h2 id="Firebase-Remote-Configについて"><a href="#Firebase-Remote-Configについて" class="headerlink" title="Firebase Remote Configについて"></a>Firebase Remote Configについて</h2><img src="/images/20240221a/image_5.png" alt="image.png" width="964" height="538" loading="lazy"><p>その他に活用していてユニークだったサービスとしては、Remote Configがあります。</p><p><a href="https://firebase.google.com/docs/remote-config?hl=ja">https://firebase.google.com/docs/remote-config?hl=ja</a></p><p>詳しくは上記の公式ページを見ていただきたいですが、Remote Config Serverでパラメータ値などを管理することで、アプリストアへのリリースすることなくユーザーアプリの画面切り替えや強制アップデートなども行えます。</p><p>まだ導入できていませんが、A&#x2F;B testingなども行うことができるようなので将来的には触ってみたいですね。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はGDG Tokyoにて、最近触ったFirebaseサービスとFlutterの活用事例について登壇してきました！<br>会社アカウントで登壇することは初めてだったのですが、登壇になれた方やチームメンバーに手厚くフォロー頂き楽しく発表してくることができました。</p><p>今後もどんどん登壇やアウトプットできるようにがんばります。<br>※スギ花粉とも頑張って生きていこうと思います。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://firebase.google.com/docs/remote-config?hl=ja">https://firebase.google.com/docs/remote-config?hl=ja</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20240221a/image.png&quot; alt=&quot;image.png&quot; width=&quot;660&quot; height=&quot;270&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Firebase" scheme="https://future-architect.github.io/tags/Firebase/"/>
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="GDG" scheme="https://future-architect.github.io/tags/GDG/"/>
    
  </entry>
  
  <entry>
    <title>社内LANで必要かもしれないLocalstackへのカスタムCA証明書ダウンロード手順</title>
    <link href="https://future-architect.github.io/articles/20240220a/"/>
    <id>https://future-architect.github.io/articles/20240220a/</id>
    <published>2024-02-19T15:00:00.000Z</published>
    <updated>2024-02-20T06:40:10.938Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20240220a/localstack.png" alt="" width="800" height="400"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG 真野です。</p><p>2023年3月31日にリリースされたLocalStack <a href="https://github.com/localstack/localstack/releases/tag/v2.0.0">v2.0.0</a>から、LocalStackのイメージ構成に変更が入りました。利用する環境によってはKinesis Data Streamsなど一部のサービスを利用するときにカスタムCA証明書をダウンロードする必要がありました（後述する通り、Kinesis Data Streamsに関しては現在のバージョンでは対応不要ですので安心ください）。</p><p>この記事では、DockerのマルチステージビルドでOpenSSLを使って証明書をダウンロードして、LocalStackのカスタムイメージを作成する流れをまとめます。</p><p><a href="https://github.com/localstack/localstack/issues/8782">#8782</a>のIssueを見つけて対応を考えている人や、<code>installation of kinesis-mock failed</code>といったエラーログが出ていて困っている場合、おそらくこの記事が参考になります。</p><p>ただし、少なくてもKinesis Data Streamsに関しては、<code>v2.3.0</code> からアップデートが入り本記事の対応が不要になりました。LocalStackのその他サービスでハマった場合にこの記事を確認いただくと良いかなと思います。エラーログでこの記事を見つけた方は、LocalStackのバージョンを上げることで解決することもあるようですので、まずバージョンアップを試してみることを推奨します。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>LocalStackは様々なAWSサービスをローカルやCI環境で再現してくれるエミュレータです。こういったサービスの難しいポイントの1つは、AWSのサービスや機能はどんどん増え豊富になっていくため、追随するためにはイメージサイズが肥大化しいくことでしょう。</p><p>そのため、v2.0.0からは起動時に一度だけ外部からサービスが必要とするパッケージ読み込みキャッシュ。それにより、開発者の利用しないサービスが依存するパッケージは元のイメージから取り除き、容量削減を狙う方式になりました。</p><p>少しばかり複雑な手順を踏んでいる気がしますが、イメージサイズと利用勝手のバランスを取った賢いやり方に思えます。CIで利用するユーザにとってはイメージのpull時間の節約、しいては費用削減となるため嬉しい施策出ると思います。</p><p>一方でこれにより、DynammoDBなどでは<a href="https://github.com/localstack/localstack/pull/8194">色々と問題</a>が多かったらしく、利用頻度が高いサービス（Issueではトップ15と書かれていますが今のところは数種類）が再びプリインストールする方向にするよという話も出ていました。</p><p>v3.1.0では、Dockerfileを見る限り、DynamoDBとLambdaはプリインストール方式に戻っていました（DynamoDBは（多分）DynamoDB LocalのJAR増加で、47MB程度イメージサイズが増えたようです）。</p><figure class="highlight dockerfile"><figcaption><span>https://github.com/localstack/localstack/blob/v3.1.0/Dockerfile#L184-L191</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install packages which should be shipped by default</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=cache,target=/root/.cache \</span></span><br><span class="line"><span class="language-bash">    --mount=<span class="built_in">type</span>=cache,target=/var/lib/localstack/cache \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">source</span> .venv/bin/activate &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    python -m localstack.cli.lpm install \</span></span><br><span class="line"><span class="language-bash">      lambda-runtime \</span></span><br><span class="line"><span class="language-bash">      dynamodb-local &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chown</span> -R localstack:localstack /usr/lib/localstack &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> -R 777 /usr/lib/localstack</span></span><br></pre></td></tr></table></figure><p>Kinesis Data StreamsなどもDynamoDBと同じようにプリインストールできないかという要望も<a href="https://github.com/localstack/localstack/issues/8300">#8300</a>で上げられましたが、やはりイメージサイズとのバランス問題で棄却されています。何かしらプリインストールしないと困るユースケースが無いと追加はされないような雰囲気があります。</p><h2 id="Installation-of-kinesis-mock-failed"><a href="#Installation-of-kinesis-mock-failed" class="headerlink" title="Installation of kinesis-mock failed"></a>Installation of kinesis-mock failed</h2><p>LocalStackでKinesis Data Streamsのストリームを作成しようとした場合に、<code>Installation of kinesis-mock failed</code> というエラーが出るケースについて話します。ログ内容としては次のようなものです。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">localstack-1  | SERVICES variable is ignored <span class="keyword">if</span> EAGER_SERVICE_LOADING=0.</span><br><span class="line">localstack-1  |</span><br><span class="line">localstack-1  | LocalStack version: 2.0.2</span><br><span class="line">localstack-1  | LocalStack Docker container <span class="built_in">id</span>: ed6628bad076</span><br><span class="line">localstack-1  | LocalStack build <span class="built_in">date</span>: 2023-04-17</span><br><span class="line">localstack-1  | LocalStack build git <span class="built_in">hash</span>: 6b436786</span><br><span class="line">localstack-1  |</span><br><span class="line">localstack-1  | 2024-02-18T08:40:45.683  WARN --- [-functhread3] hypercorn.error            : ASGI Framework Lifespan error, continuing without Lifespan support</span><br><span class="line">localstack-1  | 2024-02-18T08:40:45.683  WARN --- [-functhread3] hypercorn.error            : ASGI Framework Lifespan error, continuing without Lifespan support</span><br><span class="line">localstack-1  | 2024-02-18T08:40:45.695  INFO --- [-functhread3] hypercorn.error            : Running on https://0.0.0.0:4566 (CTRL + C to quit)</span><br><span class="line">localstack-1  | 2024-02-18T08:40:45.695  INFO --- [-functhread3] hypercorn.error            : Running on https://0.0.0.0:4566 (CTRL + C to quit)</span><br><span class="line">localstack-1  | Ready.</span><br><span class="line">localstack-1  | 2024-02-18T08:40:51.233  INFO --- [   asgi_gw_0] l.s.k.kinesis_mock_server  : Creating kinesis backend <span class="keyword">for</span> account 000000000000</span><br><span class="line">localstack-1  | 2024-02-18T08:40:52.044 ERROR --- [   asgi_gw_0] l.aws.handlers.logging     : exception during call chain: Installation of kinesis-mock failed.</span><br><span class="line">localstack-1  | 2024-02-18T08:40:52.050  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS kinesis.CreateStream =&gt; 500 (InternalError)</span><br><span class="line">localstack-1  | 2024-02-18T08:40:52.779  INFO --- [   asgi_gw_0] l.s.k.kinesis_mock_server  : Creating kinesis backend <span class="keyword">for</span> account 000000000000</span><br><span class="line">localstack-1  | 2024-02-18T08:40:53.108 ERROR --- [   asgi_gw_0] l.aws.handlers.logging     : exception during call chain: Installation of kinesis-mock failed.</span><br><span class="line">localstack-1  | 2024-02-18T08:40:53.113  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS kinesis.CreateStream =&gt; 500 (InternalError)</span><br><span class="line">localstack-1  | 2024-02-18T08:40:54.306  INFO --- [   asgi_gw_0] l.s.k.kinesis_mock_server  : Creating kinesis backend <span class="keyword">for</span> account 000000000000</span><br><span class="line">localstack-1  | 2024-02-18T08:40:54.384 ERROR --- [   asgi_gw_0] l.aws.handlers.logging     : exception during call chain: Installation of kinesis-mock failed.</span><br><span class="line">localstack-1  | 2024-02-18T08:40:54.387  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS kinesis.CreateStream =&gt; 500 (InternalError)</span><br><span class="line">localstack-1  | 2024-02-18T08:40:55.627  INFO --- [   asgi_gw_0] l.s.k.kinesis_mock_server  : Creating kinesis backend <span class="keyword">for</span> account 000000000000</span><br><span class="line">localstack-1  | 2024-02-18T08:40:55.694 ERROR --- [   asgi_gw_0] l.aws.handlers.logging     : exception during call chain: Installation of kinesis-mock failed.</span><br><span class="line">localstack-1  | 2024-02-18T08:40:55.697  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS kinesis.CreateStream =&gt; 500 (InternalError)</span><br><span class="line">localstack-1  | 2024-02-18T08:41:01.931  INFO --- [   asgi_gw_0] l.s.k.kinesis_mock_server  : Creating kinesis backend <span class="keyword">for</span> account 000000000000</span><br><span class="line">localstack-1  | 2024-02-18T08:41:02.086 ERROR --- [   asgi_gw_0] l.aws.handlers.logging     : exception during call chain: Installation of kinesis-mock failed.</span><br><span class="line">localstack-1  | 2024-02-18T08:41:02.089  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS kinesis.CreateStream =&gt; 500 (InternalError)</span><br><span class="line">localstack-1  |</span><br><span class="line">localstack-1  | An error occurred (InternalError) when calling the CreateStream operation (reached max retries: 4): exception <span class="keyword">while</span> calling kinesis.CreateStream: Installation of kinesis-mock failed.</span><br></pre></td></tr></table></figure><p>公式ドキュメント<a href="https://docs.localstack.cloud/references/custom-tls-certificates/">Custom TLS certificates</a>にも触れられています。非標準の TLS 証明書を使用するプロキシサーバーを利用する場合に発生するようです。原因はプロキシ、慣れたものです。</p><p>ドキュメントにDockerfileを拡張して証明書をインストールする手順があり、<a href="https://shihaowey.medium.com/installation-of-kinesis-mock-failed-in-localstack-8c4bcb8a3b20">Installation of kinesis-mock failed in LocalStack</a>の記事では、<code>https://api.github.com</code>のCA 証明書にアクセスして取得する例が書かれています。</p><p>しかし、チームメンバー全員にこの手順を行ってもらうのは手間ですし、証明書をGit管理にもしたくないでしょう。ファイルサーバやGoogle Driveのようなコラボレーションツール上にも、こういった手順は廃れがちであるため、あまり配備したくない場合が多いでしょう。</p><h2 id="Dockerfile上で対応する"><a href="#Dockerfile上で対応する" class="headerlink" title="Dockerfile上で対応する"></a>Dockerfile上で対応する</h2><p>サーバからTLS証明書をダウンロードするために、OpenSSLを利用します。</p><p><a href="https://www.shellhacks.com/get-ssl-certificate-from-server-site-url-export-download/">Get SSL Certificate from Server (Site URL) – Export &amp; Download</a> という記事が参考になります。</p><p>さきほどの <code>https://api.github.com</code> から証明書を取得するのであれば次のようなコマンドです。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo | openssl s_client -servername api.github.com -connect api.github.com:443 | sed -ne &#x27;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&#x27; &gt; custom-ca.cer</span><br></pre></td></tr></table></figure><p>取得した <code>custom-ca.cer</code> を公式ドキュメント通り、 <code>CURL_CA_BUNDLE</code>、 <code>REQUESTS_CA_BUNDLE</code>、<code>NODE_EXTRA_CA_CERTS</code> の環境変数にセットしたイメージを作れば対応完了です。</p><p>Dockerfileのマルチステージビルドを利用すると次のようになると思います。</p><figure class="highlight dockerfile"><figcaption><span>localstack/Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine/openssl:<span class="number">3.1</span>.<span class="number">3</span> AS build</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> | openssl s_client -servername api.github.com -connect api.github.com:443 | sed -ne <span class="string">&#x27;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&#x27;</span> &gt; custom-ca.cer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> localstack/localstack:<span class="number">3.1</span>.<span class="number">0</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build custom-ca.cer /usr/local/share/ca-certificates/cert-bundle.crt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> update-ca-certificates</span></span><br><span class="line"><span class="keyword">ENV</span> CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt</span><br><span class="line"><span class="keyword">ENV</span> REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt</span><br><span class="line"><span class="keyword">ENV</span> NODE_EXTRA_CA_CERTS=/etc/ssl/certs/ca-certificates.crt</span><br></pre></td></tr></table></figure><p>docker-compose経由で起動したいので、次のようなYAMLファイルを準備します。</p><figure class="highlight yaml"><figcaption><span>docker-compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">localstack:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">localstack/Dockerfile</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:4566:4566/tcp&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICES=kinesis</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$&#123;LOCALSTACK_VOLUME_DIR:-./volume&#125;:/var/lib/localstack&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br></pre></td></tr></table></figure><p><code>docker-compose up localstack</code> などで起動すると、Kinesis Data Streamsのリソース作成ができるようになっていると思います。3つのほどストリームを作成してみたときのログです。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">localstack-1  |</span><br><span class="line">localstack-1  | LocalStack version: 3.1.0</span><br><span class="line">localstack-1  | LocalStack Docker container <span class="built_in">id</span>: 16f65452edc8</span><br><span class="line">localstack-1  | LocalStack build <span class="built_in">date</span>: 2024-01-25</span><br><span class="line">localstack-1  | LocalStack build git <span class="built_in">hash</span>: d48ada8a</span><br><span class="line">localstack-1  |</span><br><span class="line">localstack-1  | 2024-02-17T06:13:47.737  INFO --- [-functhread4] hypercorn.error            : Running on https://0.0.0.0:4566 (CTRL + C to quit)</span><br><span class="line">localstack-1  | 2024-02-17T06:13:47.737  INFO --- [-functhread4] hypercorn.error            : Running on https://0.0.0.0:4566 (CTRL + C to quit)</span><br><span class="line">localstack-1  | Ready.</span><br><span class="line">localstack-1  | 2024-02-17T06:13:48.375  INFO --- [   asgi_gw_0] l.s.k.kinesis_mock_server  : Creating kinesis backend <span class="keyword">for</span> account 000000000000</span><br><span class="line">localstack-1  | 2024-02-17T06:13:48.705  INFO --- [-functhread7] l.s.k.kinesis_mock_server  : [info] kinesis.mock.KinesisMockService$ 2024-02-17T06:13:48.695706Z contextId=6f22bed3-15b2-4a68-b292-f31016e5e8dc, cacheConfig=&#123;<span class="string">&quot;awsAccountId&quot;</span>:<span class="string">&quot;000000000000&quot;</span>,<span class="string">&quot;awsRegion&quot;</span>:<span class="string">&quot;us-east-1&quot;</span>,<span class="string">&quot;createStreamDuration&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;,<span class="string">&quot;deleteStreamDuratio</span></span><br><span class="line"><span class="string">n&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;,<span class="string">&quot;deregisterStreamConsumerDuration&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;,<span class="string">&quot;initializeStreams&quot;</span>:null,<span class="string">&quot;logLevel&quot;</span>:<span class="string">&quot;INFO&quot;</span>,<span class="string">&quot;mergeShardsDuration&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;,<span class="string">&quot;onDemandStreamCountLimit&quot;</span>:10,<span class="string">&quot;persistConfig&quot;</span>:&#123;<span class="string">&quot;fileName&quot;</span>:<span class="string">&quot;000000000000.json&quot;</span>,<span class="string">&quot;interval&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:5,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;SECONDS&quot;</span>&#125;,<span class="string">&quot;loadIfExists&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;pat</span></span><br><span class="line"><span class="string">h&quot;</span>:<span class="string">&quot;../../../tmp/localstack/state/kinesis&quot;</span>,<span class="string">&quot;shouldPersist&quot;</span>:<span class="literal">true</span>&#125;,<span class="string">&quot;registerStreamConsumerDuration&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;,<span class="string">&quot;shardLimit&quot;</span>:100,<span class="string">&quot;splitShardDuration&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;,<span class="string">&quot;startStreamEncryptionDuration&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;,<span class="string">&quot;stopStreamEncryptionDuration&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;,<span class="string">&quot;updateSha</span></span><br><span class="line"><span class="string">rdCountDuration&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:500,<span class="string">&quot;unit&quot;</span>:<span class="string">&quot;MILLISECONDS&quot;</span>&#125;&#125; Logging Cache Config</span><br><span class="line">localstack-1  | 2024-02-17T06:13:48.828  INFO --- [-functhread7] l.s.k.kinesis_mock_server  : [info] kinesis.mock.KinesisMockService$ 2024-02-17T06:13:48.827840Z  Starting Kinesis TLS Mock Service on port 39987</span><br><span class="line">localstack-1  | 2024-02-17T06:13:48.828  INFO --- [-functhread7] l.s.k.kinesis_mock_server  : [info] kinesis.mock.KinesisMockService$ 2024-02-17T06:13:48.828511Z  Starting Kinesis Plain Mock Service on port 41755</span><br><span class="line">localstack-1  | 2024-02-17T06:13:48.836  INFO --- [-functhread7] l.s.k.kinesis_mock_server  : [info] kinesis.mock.KinesisMockService$ 2024-02-17T06:13:48.835677Z contextId=e05f1b29-e4a3-4bf7-a3d3-3861c68c7e95 Starting persist data loop</span><br><span class="line">localstack-1  | 2024-02-17T06:13:49.026  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS kinesis.CreateStream =&gt; 200</span><br><span class="line">localstack-1  | 2024-02-17T06:13:49.472  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS kinesis.CreateStream =&gt; 200</span><br><span class="line">localstack-1  | 2024-02-17T06:13:49.936  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS kinesis.CreateStream =&gt; 200</span><br></pre></td></tr></table></figure><p>動的にパッケージを取得し、Kinesisのストリームが上手く作成されていることが分かります。</p><h2 id="LocalStack側でアップデートが入ったのか、Kinesis-Data-Streamsに対しては対応が不要になったようです"><a href="#LocalStack側でアップデートが入ったのか、Kinesis-Data-Streamsに対しては対応が不要になったようです" class="headerlink" title="LocalStack側でアップデートが入ったのか、Kinesis Data Streamsに対しては対応が不要になったようです"></a>LocalStack側でアップデートが入ったのか、Kinesis Data Streamsに対しては対応が不要になったようです</h2><p>この記事を書くにあたり、元のエラーログを発生させようとしていて気がついたのですが、<code>v2.3.0</code> でアップデートが入ったようで、Kinesis Data Streamsについては対応が不要です。</p><ul><li><code>v2.0.2</code> →✘ エラー発生</li><li><code>v2.1.0</code> →✘</li><li><code>v2.2.0</code> →✘</li><li><code>v2.3.0</code> →✅ 正常動作</li><li><code>v3.0.0</code> →✅</li><li><code>v3.1.0</code> →✅</li></ul><p>おそらく、Kinesisのモックをバイナリからscala.js版に入れ替えた <a href="https://github.com/etspaceman/kinesis-mock/pull/531">Use scala.js for executable and docker image #531</a> で解消されたのかなと予測しますが、詳細は未調査です。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>LocalStack v2からイメージの構成が変わって、起動時に動的にパッケージをインストールするケースがあります。その場合にネットワーク環境によっては外部リソースの取得に失敗するため、CA証明書の設定が必要。OpenSSLで自動化すると楽になるかもしれない、という記事でした。</p><p>みんなハマっていないのかな？と思っていましたが、NGだった期間は <code>v2.0.0</code> が公開されたときから、<code>v2.3.0</code> が公開された <code>2023.3.31</code> ～ <code>2023.9.29</code> と半年足らずだったので、レアな経験だったのかもしれません。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20240220a/localstack.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;400&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="LocalStack" scheme="https://future-architect.github.io/tags/LocalStack/"/>
    
    <category term="プロキシ" scheme="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7/"/>
    
    <category term="OpenSSL" scheme="https://future-architect.github.io/tags/OpenSSL/"/>
    
  </entry>
  
  <entry>
    <title>2024年 フューチャー技術ブログリレー企画</title>
    <link href="https://future-architect.github.io/articles/20240219a/"/>
    <id>https://future-architect.github.io/articles/20240219a/</id>
    <published>2024-02-18T15:00:00.000Z</published>
    <updated>2024-02-27T05:31:53.184Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20240219a/16635b2c-ebe0-4421-9aae-f0aab18d45f3.jpeg" alt="" width="700" height="700" loading="lazy"><p>2024年に計画している、ブログリレーの企画スケジュールをを取り上げます。</p><h1 id="連載計画を発表する背景"><a href="#連載計画を発表する背景" class="headerlink" title="連載計画を発表する背景"></a>連載計画を発表する背景</h1><ul><li>どういったブログリレーを行おうとしているか、会社のカラーが出ると思うので、興味がある人に対してアクセスできるようにしたい</li><li>ブログリレーは寄稿者募集のリードタイムが発生するため、予めのスケジュールを周知したい</li><li>日々の業務をしながらだと、どういった企画を考えたか忘れがちなので、最初に大枠を固めて置けると運営的に楽</li></ul><h1 id="2024年のスケジュール"><a href="#2024年のスケジュール" class="headerlink" title="2024年のスケジュール"></a>2024年のスケジュール</h1><p>2024年にはじめて開催する連載は初心者マーク（🔰）を付けてみました。</p><p>フューチャーで最も利用頻度が高い重要技術要素である、JavaやVue.jsを今回始めてテーマに加えたことが変わったポイントです。実はフューチャーはJavaやVue.jsの会社でもあります。</p><p>アドカレリバイバルは、QiitaアドベントカレンダーでQiita側に書かれているか、フューチャー技術ブログ側で書かれているかたまに混乱することがあるという意見を某メンバーからもらい、せっかくだからリバイバルと称してアップデートしてこちらのブログに転記してもらったらどうか？ということで企画しました。</p><div class="scroll"><table><thead><tr><th>Month</th><th>Title</th><th>Memo</th><th>Link</th></tr></thead><tbody><tr><td>1月</td><td>-</td><td>-</td><td></td></tr><tr><td>2月</td><td>Go 1.22</td><td>Go 1.22リリース記念</td><td><a href="/articles/20240129a/">Go1.22</a></td></tr><tr><td>3月</td><td>Terraform</td><td>Terraform全般をテーマ</td><td>2024 <a href="/articles/20230327a/">2023</a></td></tr><tr><td>4月</td><td>春の入門祭り</td><td>初心者向けに入門記事を書いてみよう</td><td>2024 <a href="/articles/20230417a/">2023</a> <a href="/articles/20220418a/">2022</a>、<a href="/articles/20210414a/">2021</a> <a href="/articles/20200529/">2020</a></td></tr><tr><td>5月</td><td>🔰Cloudflare</td><td>Cloudflare</td><td>2024</td></tr><tr><td>6月</td><td>🔰アドカレリバイバル</td><td>過去のアドベントカレンダー記事をリバイバル</td><td>2024</td></tr><tr><td>7月</td><td>Go1.23</td><td>Go 1.23リリース記念</td><td>Go1.23</td></tr><tr><td>8月</td><td>夏休み自由研究</td><td>夏休みに行った自由研究と銘うって、個人的に関心があることを深堀りして調べる連載</td><td>2024 <a href="/articles/20230830a/">2023</a> <a href="/articles/20220822a/">2022</a> <a href="/articles/20210823a/">2021</a> <a href="/articles/20200726/">2020</a></td></tr><tr><td></td><td>🔰Python</td><td>Pythonリリース記念</td><td>2024</td></tr><tr><td>9月</td><td>🔰Java</td><td>Java23記念&#x2F;Java全般</td><td>2024</td></tr><tr><td>10月</td><td>秋のブログ週間</td><td>秋の夜長に楽しめるように、いつもより文章が多めな読み物</td><td>2024 <a href="/articles/20231030a/">2023</a> <a href="/articles/20221031a/">2022</a> <a href="/articles/20211027a/">2021</a> <a href="/articles/20201026/">2020</a></td></tr><tr><td>11月</td><td>🔰Vue.js</td><td>Vue.js全般</td><td>2024</td></tr><tr><td>12月</td><td>アドベントカレンダー</td><td>Qiitaさんのアドベントカレンダーのイベントに乗っかる連載</td><td>2024 <a href="advent2023">2023</a> <a href="https://qiita.com/advent-calendar/2022/future">2022</a> <a href="https://qiita.com/advent-calendar/2021/future">2021</a> <a href="https://qiita.com/advent-calendar/2020/future">2020</a> <a href="https://qiita.com/advent-calendar/2019/future">2019</a> <a href="https://qiita.com/advent-calendar/2017/future">2018</a> <a href="https://qiita.com/advent-calendar/2017/future">2017</a> <a href="https://qiita.com/advent-calendar/2016/future">2016</a> <a href="https://qiita.com/advent-calendar/2015/future">2015</a></td></tr></tbody></table></div><p>新しい風を入れつつ、春・夏・秋などの定番企画は引き続き開催しようと思っています。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>これまでの経緯を踏まえテーマをブラッシュアップしています。2024年も皆様にとって有益な情報発信を活発にしていきますので、応援よろしくおねがいします！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20240219a/16635b2c-ebe0-4421-9aae-f0aab18d45f3.jpeg&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;700&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="運営" scheme="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/"/>
    
    <category term="スケジュール" scheme="https://future-architect.github.io/tags/%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>LocustとGKEでスケーラブルな負荷テスト</title>
    <link href="https://future-architect.github.io/articles/20240216a/"/>
    <id>https://future-architect.github.io/articles/20240216a/</id>
    <published>2024-02-15T15:00:00.000Z</published>
    <updated>2024-02-20T05:41:28.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>本記事では、負荷テストツールである<a href="https://locust.io/">Locust</a>と<a href="https://cloud.google.com/kubernetes-engine?hl=ja">Google Kubernetes Engine(GKE)</a>と組み合わせて負荷テストを体感します。Kubernetesの柔軟なスケールアップ・ダウン能力によって、負荷の大きさを変えながらテストを行うことが可能となります。</p><p>参考：<a href="https://cloud.google.com/architecture/distributed-load-testing-using-gke?hl=ja">Google Kubernetes Engineを使用した負荷分散テスト</a></p><h2 id="Locustとは"><a href="#Locustとは" class="headerlink" title="Locustとは"></a>Locustとは</h2><p><a href="https://locust.io/">Locust</a>はPythonベースで書かれたオープンソースの負荷テストツールとなります。<br>GitHub: <a href="https://github.com/locustio/locust">https://github.com/locustio/locust</a></p><p>公式ページにも載っておりますが、特徴としては以下の3つになります。</p><ul><li>コードに基づいたユーザー挙動の定義<ul><li>ダサいUIや膨れ上がったXMLは必要無し</li><li>コードのみのわかりやすい記述が可能</li></ul></li><li>分散型でスケーラブル<ul><li>複数のマシンに分散された負荷テストの実行をサポート</li><li>数百万の同時ユーザーによるシミュレーションが可能</li></ul></li><li>歴戦の覇者（battle-tested）で実績がある<ul><li>GoogleやMicrosoft、AWSといった多くのユーザー（会社）がLocustを支持</li><li>Battlefield<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の戦績確認用Webアプリ開発時に負荷テストとして利用されたため、本当の意味でbattle-tested🤣</li></ul></li></ul><h2 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h2><p>では早速、検証を行うための環境を構築していきます。必要なものは以下です。</p><ul><li>Google Cloud環境<ul><li>GKE</li><li>AppEngine</li><li>Artifact Registry</li></ul></li><li>ローカル環境<ul><li>gcloud</li><li>kubectl</li></ul></li></ul><p>インフラ側は全てTerraformを利用して構築しようと思います。<br>※ProjectやVPCの構築、gcloud、kubectlのインストールは割愛します。</p><h3 id="GKE"><a href="#GKE" class="headerlink" title="GKE"></a>GKE</h3><p>GKEのTerraformコードは量が多いため、以下のリポジトリに配置しました。<br><a href="https://github.com/bigface0202/terraform-useful-modules/tree/main/google-cloud">https://github.com/bigface0202/terraform-useful-modules/tree/main/google-cloud</a><br>また、GKEを利用した検証に関するTIPSになりますが、GKEは立ち上げるまでに約20分少々かかるため、一番最初にGKEを構築しておくと検証がスムーズになります。</p><h3 id="AppEngine"><a href="#AppEngine" class="headerlink" title="AppEngine"></a>AppEngine</h3><details><summary>Terraform</summary><figure class="highlight sh"><figcaption><span>app_engine.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;google_app_engine_application&quot;</span> <span class="string">&quot;app&quot;</span> &#123;</span><br><span class="line">  project     = google_project.project_one.project_id</span><br><span class="line">  location_id = <span class="string">&quot;asia-northeast1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="Artifact-Registry"><a href="#Artifact-Registry" class="headerlink" title="Artifact Registry"></a>Artifact Registry</h3><details><summary>Terraform</summary><figure class="highlight sh"><figcaption><span>artifact_registry.tf</span></figcaption><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;google_artifact_registry_repository&quot;</span> <span class="string">&quot;my-repo&quot;</span> &#123;</span><br><span class="line">  project       = google_project.project_one.project_id</span><br><span class="line">  location      = local.region</span><br><span class="line">  repository_id = <span class="string">&quot;my-repository&quot;</span></span><br><span class="line">  description   = <span class="string">&quot;example docker repository&quot;</span></span><br><span class="line">  format        = <span class="string">&quot;DOCKER&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h3><p>ここからはターミナルでの作業がメインとなるため、頻繁に利用する定数などを定義しておきます。適宜、自身で定義した内容に変更してください。</p><figure class="highlight shell"><figcaption><span>terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">export PROJECT=test-project</span><br><span class="line">export REGION=asia-northeast1</span><br><span class="line">export AR_REPO=my-repository</span><br><span class="line">export LOCUST_IMAGE_NAME=locust-tasks</span><br><span class="line">export LOCUST_IMAGE_TAG=latest</span><br><span class="line">export SAMPLE_APP_TARGET=$&#123;PROJECT&#125;.appspot.com</span><br><span class="line">export GKE_CLUSTER_NAME=my-cluster</span><br></pre></td></tr></table></figure><p>AppEngineにデプロイするアプリケーションはGoogle Cloudが提供するサンプルアプリを利用します。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Clone the repository</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/GoogleCloudPlatform/distributed-load-testing-using-kubernetes</span><br><span class="line"><span class="built_in">cd</span> distributed-load-testing-using-kubernetes</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deploy the application</span></span><br><span class="line">gcloud app deploy sample-webapp/app.yaml --project=<span class="variable">$&#123;PROJECT&#125;</span></span><br></pre></td></tr></table></figure><p>App Engineへのデプロイが完了後、表示されたURLへ移動すると以下のような画面が表示されます。</p><img src="/images/20240216a/image.png" alt="image.png" width="1084" height="283" loading="lazy"><AppEngineの画面><p>次にGKEにLocustと負荷テスト用のタスクをデプロイしたいので、まずはLocustのイメージをビルドします。<br>各エンドポイント<code>/login</code>と<code>/metrics</code>に対して、1:999の割合で呼び出すようなタスクが定義されております。詳細は以下を参照してください。<br><a href="https://github.com/GoogleCloudPlatform/distributed-load-testing-using-kubernetes/blob/HEAD/docker-image/locust-tasks/tasks.py">docker-image&#x2F;locust-tasks&#x2F;tasks.py</a></p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">gcloud builds submit \</span><br><span class="line">    --tag <span class="variable">$&#123;REGION&#125;</span>-docker.pkg.dev/<span class="variable">$&#123;PROJECT&#125;</span>/<span class="variable">$&#123;AR_REPO&#125;</span>/<span class="variable">$&#123;LOCUST_IMAGE_NAME&#125;</span>:<span class="variable">$&#123;LOCUST_IMAGE_TAG&#125;</span> \</span><br><span class="line">    docker-image</span><br></pre></td></tr></table></figure><p>Cloud Buildを利用することでイメージのビルドとプッシュがgcloudコマンド1回でできるので便利ですね。<br>イメージがちゃんとビルドできているかどうかをコンソールから確認してみましょう。<br><img src="/images/20240216a/image_2.png" alt="image.png" width="1200" height="465" loading="lazy"></p><p>イメージのビルドができたのでデプロイしていきます。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Get cluster&#x27;s credential</span></span><br><span class="line">gcloud container clusters get-credentials <span class="variable">$&#123;GKE_CLUSTER&#125;</span> --region <span class="variable">$&#123;REGION&#125;</span> --project <span class="variable">$&#123;PROJECT&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check the connection</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"><span class="comment"># Expected output below</span></span><br><span class="line"><span class="comment"># NAME                                                  STATUS   ROLES    AGE    VERSION</span></span><br><span class="line"><span class="comment"># gke-test-gke-cluster-test-gke-node-po-2165d20a-gztn   Ready    &lt;none&gt;   6m6s   v1.27.3-gke.100</span></span><br><span class="line"><span class="comment"># gke-test-gke-cluster-test-gke-node-po-7c71f952-7tvz   Ready    &lt;none&gt;   6m4s   v1.27.3-gke.100</span></span><br><span class="line"><span class="comment"># gke-test-gke-cluster-test-gke-node-po-f80380d5-4209   Ready    &lt;none&gt;   6m5s   v1.27.3-gke.100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deploy Locust</span></span><br><span class="line">envsubst &lt; kubernetes-config/locust-master-controller.yaml.tpl | kubectl apply -f -</span><br><span class="line">envsubst &lt; kubernetes-config/locust-worker-controller.yaml.tpl | kubectl apply -f -</span><br><span class="line">envsubst &lt; kubernetes-config/locust-master-service.yaml.tpl | kubectl apply -f -</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check the deployment</span></span><br><span class="line">kubectl get pods</span><br><span class="line"><span class="comment"># Expected output below</span></span><br><span class="line"><span class="comment"># NAME                             READY   STATUS    RESTARTS   AGE</span></span><br><span class="line"><span class="comment"># locust-master-849c6b8799-j8hqt   1/1     Running   0          8m59s</span></span><br><span class="line"><span class="comment"># locust-worker-5466444784-8c474   1/1     Running   0          8m48s</span></span><br><span class="line"><span class="comment"># locust-worker-5466444784-b42l9   1/1     Running   0          8m53s</span></span><br><span class="line"><span class="comment"># locust-worker-5466444784-msw66   1/1     Running   0          8m45s</span></span><br><span class="line"><span class="comment"># locust-worker-5466444784-prrwg   1/1     Running   0          8m53s</span></span><br><span class="line"><span class="comment"># locust-worker-5466444784-rntx6   1/1     Running   0          8m53s</span></span><br></pre></td></tr></table></figure><p>初めて<code>envsubst</code>コマンドを知ったのですが、ターミナル上で定義済みの環境変数を代入出来て便利ですね。<br>無事にLocustをデプロイすることができたので、ポートフォワードして画面に接続してみます。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl port-forward svc/locust-master-web -n default 8080:8089</span><br><span class="line"><span class="comment"># Expected output below</span></span><br><span class="line"><span class="comment"># Forwarding from 127.0.0.1:8080 -&gt; 8089</span></span><br><span class="line"><span class="comment"># Forwarding from [::1]:8080 -&gt; 8089</span></span><br></pre></td></tr></table></figure><p><a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a><br>にアクセスして、以下の画面が表示されることを確認します。<br><img src="/images/20240216a/image_3.png" alt="image.png" width="1200" height="709" loading="lazy"></p><h2 id="負荷テストしてみる"><a href="#負荷テストしてみる" class="headerlink" title="負荷テストしてみる"></a>負荷テストしてみる</h2><p>“Number of users”は負荷テストに利用するユーザーの同時接続数、”Spawn rate”は1秒当たりに何人のユーザーがリクエストを開始するかの数、Hostは接続先になります。<br>“Start swarming”を押すことでテストが開始されます。<br>以下の条件でテストを開始したときの画面が次のようになります。</p><ul><li>Number of users: 10</li><li>Spawn rate: 1<img src="/images/20240216a/image_4.png" alt="image.png" width="1200" height="237" loading="lazy"></li></ul><p>右上のSTATUSの部分では現在接続中のユーザー数（5 Users）が表示されており、10Usersまで増えていきます。RPSはRequest Per Secondで、秒間のリクエスト数を表しております。<br>また、各種タブを切り替えることでテストに関する情報を見ることができます。</p><ul><li>Statistics<ul><li>Requestに対するレスポンスの統計情報</li><li>テストを行っている各Pathに対して個別にみることが可能</li></ul></li><li>Charts<ul><li>RPSやレスポンスタイムの時系列情報をグラフで確認することが可能</li></ul></li><li>Failures<ul><li>リクエストが失敗した場合に、どのPathに対してどのMethod失敗したのか、エラーコードは何なのかを確認することが可能</li></ul></li><li>Exceptions<ul><li>例外発生時のTracebackを確認することが可能</li></ul></li><li>Current Ratio<ul><li>Locustのイメージビルド時にPythonファイルで設定した各種Pathに対するリクエスト数の割合を確認することが可能</li></ul></li><li>Download Data<ul><li>テスト結果をCSVやレポートとして出力可能</li></ul></li><li>Workers<ul><li>現在Locustを動作させているPodの数を確認可能</li></ul></li></ul><p>シンプルなUIの作りになっているため、直観的でわかりやすいです。<br>また、”Download Data”にてレポートを出力することができるのですが、テスト結果に対して自動でサマリした状態で出力してくれるので非常に便利です。<br><img src="/images/20240216a/image_5.png" alt="image.png" width="1200" height="735" loading="lazy"><br><img src="/images/20240216a/image_6.png" alt="image.png" width="1200" height="897" loading="lazy"><br><img src="/images/20240216a/image_7.png" alt="image.png" width="1200" height="776" loading="lazy"></p><p>また、かなり大きめの負荷をかけたい場合は、Podの数を増やすことで対応可能です。Kubernetesならではですね。<br>Podを増やしたい場合は以下のコマンドで増やします。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl scale deployment/locust-worker --replicas=10</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、GKEとLocustを利用した分散型の負荷テストをハンズオン形式で紹介させていただきました。</p><p>Locustはシンプルな作りになっているため、特別なキャッチアップも必要なくサクッと使うことができます。</p><p>もしアプリのローンチを計画している方は、ローンチ前にLocustを利用した負荷テストをやってみてはいかがでしょうか？</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://www.ea.com/ja-jp/games/battlefield">https://www.ea.com/ja-jp/games/battlefield</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;本記事では、負荷テストツールである&lt;a href=&quot;https://locust.io/&quot;&gt;Locust&lt;/a&gt;と&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="性能検証" scheme="https://future-architect.github.io/tags/%E6%80%A7%E8%83%BD%E6%A4%9C%E8%A8%BC/"/>
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="負荷テスト" scheme="https://future-architect.github.io/tags/%E8%B2%A0%E8%8D%B7%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="GoogleCloudArchitectureCenter" scheme="https://future-architect.github.io/tags/GoogleCloudArchitectureCenter/"/>
    
    <category term="locust" scheme="https://future-architect.github.io/tags/locust/"/>
    
  </entry>
  
  <entry>
    <title>龍が如く7のすごいテストをなぜ我々は採用できないのか</title>
    <link href="https://future-architect.github.io/articles/20240215a/"/>
    <id>https://future-architect.github.io/articles/20240215a/</id>
    <published>2024-02-14T15:00:00.000Z</published>
    <updated>2024-02-20T05:41:28.773Z</updated>
    
    <content type="html"><![CDATA[<p>僕自身は龍が如くシリーズは、クロヒョウ2、極1、極2、０、3、4、5、6、0とやって、7はRPGだし主人公違うしなぁと思って、買うだけ買って後でやろうと積んでいたところ、CEDECのすごいテストの話を聞いて、（オリジナル版を積んでいたのに)インターナショナル版を買って始めてしまうぐらいインパクトがあり（そして積んでたのを後悔したぐらいよかった）ました。それ以降、維新極、7外伝、8は発売日に買ってプレイしてます。</p><p>こちらにその講演の詳細なレポートがこちらにあります。</p><p><a href="https://www.famitsu.com/news/202009/11205564.html">https://www.famitsu.com/news/202009/11205564.html</a></p><p>その8の発売前に龍が如くスタジオの技術責任者の方がXのアカウントを開設して、C++のコードを投稿されていたのですが、それに対してエンプラ開発目線で意見しているようなツイートを見かけて、「いや、システムの特性全然違うから」と思い筆を取った次第です。</p><h1 id="ユニットテストの限界"><a href="#ユニットテストの限界" class="headerlink" title="ユニットテストの限界"></a>ユニットテストの限界</h1><p>大学時代、アジャイルソフトウェア開発というかエクストリームプログラミング(XP)が日本に来た時に、僕はその本に熱狂しました。こんな開発がしてみたいと。そして自分が社会人になるころにはアジャイル開発できる会社が増えたらいいなと日本XPユーザーグループの運営委員に入ったり本を書いたり翻訳したりしたわけです。ですが、学生の身分では、実際お客さんのいる開発などはできなく、できることといえば、テストとリファクタリングのコーディング周りのプラクティスぐらいだったので、ユニットテスト周りで自分でテスティングフレームワークを作ったりしてました。</p><p>そんなときに、サークルの先輩から言われたことがひとことがありました。</p><p>「テストファーストプログラミングを見て見たけど、研究のプログラムには使えなさそうだよね」</p><p>先輩がやられていたのはニューラルネットワークか何かだったか詳細は忘れてしまいましたが、確かに、1つ1つのニューロンの動きはテストできたとしても、システム全体だと荒すぎます。精度が70%以上みたいなユニットテストはナンセンスです。あくまでも入力に対して出力もすぱっと決まる、小さいモジュールの集合体としてプログラムが作れる場合にしかテストファーストプログラミングは適用できません。そんでもって、内部のロジックを大幅に書き換えました！というときにはテストも結局捨てて作り直すことが多くなります。業務システムにありがちな「内部のロジックは変わってもインタフェースは保とう」という方針が取れるのはかなり限定的な状況といえます。</p><p>一方、テストファーストプログラミング、現代的な言葉で言うと（といってもこっちももう20年以上歴史がある)テスト駆動開発が対象としているのは業務システムです。業務システムは状態を持ちません。</p><p>「データベースがあるじゃないか」と思われるかもしれませんが、業務的なシステムからするとデータベースはあくまでも外部システムです。業務システムのユニットテストは、DB含め、観測可能な外部の状態を固定し（Arrange)、中のロジックを実行し(Act)、結果を検証する(Assertion)というのがとても浅いシステムということになります。データベースが外部の状態ということはシステム自身は状態を持たず、イミュータブルであるとみなせます。</p><img src="/images/20240215a/image.png" alt="" width="512" height="512" loading="lazy"><p><a href="https://en.wikipedia.org/wiki/Hexagonal_architecture_%28software%29">Wikipedia</a>より引用</p><h1 id="ゲームのコードというのはどういうものか"><a href="#ゲームのコードというのはどういうものか" class="headerlink" title="ゲームのコードというのはどういうものか"></a>ゲームのコードというのはどういうものか</h1><p>一方でゲームのコードというのはどういうものかというと、エンプラ系のシステムと比較すると大きな特徴は2つあるかと思います</p><ul><li>データ駆動</li><li>積分</li></ul><p>1つ目は、ゲーム開発で一番使うツールはExcelと言われるぐらい、データ中心ということです。エンプラ開発でもマスターデータはありますが、キャラクターの絵やモデル、アニメーション、音は専用のツールで作りますが、それをどのタイミングでどう使うか、ユーザーが探索するマップと倒す敵の組み合わせとか出現頻度、アニメーション、セリフなど、ユーザーが触れる体験のほとんどはデータで駆動されます。</p><p>プログラムだけ単体テストしてもあまり意味はなく、データとの組み合わせで作品ができてきます。データ側に不具合というのありえます。データ単体もバリデーションでチェックをしたりも行われたりはしますが、データとプログラムを組み合わせて初めて発現するエラーも当然あります。Rustとかの型チェックの強い言語を使って言語側だけ強化しても限界があります。</p><p>あとは積分ですね。プログラムはフレーム単位でちょっとずつ変数を加工していくのですが、どんなに単体テストで1フレームの処理を「正しいだろう」と検証しても、プレイしつづけるとおかしくなったりします。物理エンジンで、ぶつかり方によってすごい勢いでふっとんでいくのをゲームで実感したことがある人はいると思います。</p><p>フレーム単位の小さいテストを書いても全体は見えないし、10秒間600フレーム回した後にテスト、みたいなテストを書いても、結局問題の発見には程遠い品質の低いテストにしかなりません。問題発見に2時間回し続けるバグがあったとして、他の全部のテストケースのループ数を7200秒x60フレームにするのか、というとそんなことはしないですよね。自動テストの限界として、一度作られてパスしたテストは、その後新しいバグを発見することは少ないというものがあります。時間をかければかけるほどリターンは小さくなります。研究の単体テストがうまく書けないのと同じ感じかと思います。</p><h1 id="結局、龍が如くのテストというのはソフトウェア的にみるとどんなものなのか？"><a href="#結局、龍が如くのテストというのはソフトウェア的にみるとどんなものなのか？" class="headerlink" title="結局、龍が如くのテストというのはソフトウェア的にみるとどんなものなのか？"></a>結局、龍が如くのテストというのはソフトウェア的にみるとどんなものなのか？</h1><p>公開された情報からの推測でしかないですが、あえて別の言い方をすると、「複数のテストケースを並列実行する耐久E2Eテスト」なんじゃないかと思います。ビルド周りとの連携や、チケット管理システムへの自動起票などCI&#x2F;CDとの連携周りがここ最近では強化されていそうですが、コア部分を見てみると、おそらくC&#x2F;C++時代にはよくお世話になった（ユーザーがMFCとかでよくはまったと思われる)ASSERTが活躍しているのではないかと思います。</p><p>スライドにもゼロ除算の例がありました。これは単純にクラッシュする例ですが、マップでは入れてはいけない建物の中にすり抜けて入ってしまった！とかはおそらく地面がないので奈落に落ちることになると思うのでZ座標がマップ中に存在する最低点よりも低いというASSERTにできると思います。変な状態を検知したらクラッシュするようなASSERTを大量に埋め込んだプログラムにしておくことで、1つの「歩く」というテストケースの中に、たくさんのテスト条件を同居させているということなのかな、と。</p><p>もちろん、「期待した目的が達成できたかどうか」というのを表現する上では大事です。「A地点に行け」といったら、数秒以内にその地点に付くはずだ、というものです。おそらくこれはPythonで書かれているというテストケースで、このPythonのテストコードとC++レイヤーのASSERTの組み合わせで、状態が積分されていく＆データ駆動という、業務システムとは毛色の異なるシステムの検証が行われているのではないかと想像しています。</p><p>テスト技法は、爆発する入力の組み合わせを減らして少ないケース数で効率よくテストを行う手法と言い換えられます。境界値テストは、同じ結果になる範囲のテストケースをいくら増やしても利得は少ないよね、じゃあ減らそうとか。悪く言えば怒られない程度に手を抜く手法と言えます。</p><p>ゲームの状態の組み合わせ数は業務システムの比ではなく膨大なので、それに対応した方法になっているのではないかと思います。業務システムが扱うテストケース数なんて、それと比べたらたかが知れてますよね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>システムの特性が大きく変われば求められるテストの性質も大きく変わります。ゲームにはゲームならではの事情はあります。基本的にはそのままこの手法を取り込む必要のない業務システムが多いのではと思います。</p><p>ただ、ASSERTを活用（しているというのは僕の予想でしかないのですが）というのはいろいろ応用できそうな気がしています、業務システムのステートフルなコンポーネントのテストとか、研究用のプログラムとか、そういうところに応用が効くのではないかと思います。数理最適化案件なんかはゲームとかとだいぶ近そうですね。AIとかもいけるかもしれん。例えば、キャッシュを持つシステムで、キャッシュがあたたまった状態で実行したときのパフォーマンスが期待値よりも上になるはず、みたいなコードは極めてステートフルといえます。HPをMAX100として、キャッシュヒットしたらHPが回復、ヒットしなかったらダメージを受けて、HPがゼロになったらエラー、みたいなのとか良さそうです。今でもスロークエリーでエラーログを出すシステムとかは多いと思いますが、同一ユーザーに対して連続で起きなければOKとか、遅さ加減を見て、すごく遅ければ一発KOとかそういうのもありな気がしますね。あんまり厳しい条件で1つでも出たらエラーとか出しすぎてもオオカミ少年になりそうですし、そういうちょっと踏ん張るテストケースは面白そうです。</p><p>龍が如くスタジオは、完全新作タイトルである7外伝を11月末、8を１月末と、通常あり得ない2ヶ月スパンで発売するという離れ技をやってのけたので、今年のCEDECではまたすごいテストの発表があるのではないかと期待しています。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;僕自身は龍が如くシリーズは、クロヒョウ2、極1、極2、０、3、4、5、6、0とやって、7はRPGだし主人公違うしなぁと思って、買うだけ買って後でやろうと積んでいたところ、CEDECのすごいテストの話を聞いて、（オリジナル版を積んでいたのに)インターナショナル版を買って始めて</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="テスト" scheme="https://future-architect.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="龍が如く7" scheme="https://future-architect.github.io/tags/%E9%BE%8D%E3%81%8C%E5%A6%82%E3%81%8F7/"/>
    
    <category term="ゲーム" scheme="https://future-architect.github.io/tags/%E3%82%B2%E3%83%BC%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.22リリース連載 net, net/http, net/netip</title>
    <link href="https://future-architect.github.io/articles/20240214a/"/>
    <id>https://future-architect.github.io/articles/20240214a/</id>
    <published>2024-02-13T15:00:00.000Z</published>
    <updated>2024-02-20T05:41:28.773Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20240214a/top.png" alt="" width="800" height="534"><p>The Gopher character is based on the Go mascot designed by Renée French</p><p>TIG 真野です。<a href="/articles/20240129a/">Go1.22連載</a>の8本目です。</p><p>Go 1.22 ライブラリのマイナーアップデートである <code>net</code>, <code>net/http</code>, <code>net/netip</code> を取り上げます。</p><h2 id="アップデートサマリ"><a href="#アップデートサマリ" class="headerlink" title="アップデートサマリ"></a>アップデートサマリ</h2><ul><li><strong>net:</strong> <code>TCPConn</code>から<code>UnixConn</code>への<code>io.Copy()</code> で、Linux’s splice(2)システムコールが使われ性能改善 <a href="https://github.com/golang/go/issues/58808">#58808</a></li><li><strong>net:</strong> WindowsでDNSリゾルバは<code>-tags=netgo</code> 付きでビルドすると、DNSクエリの前に<code>%SystemRoot%\System32\drivers\etc\hosts</code> から検索するようになる [#57757]<a href="https://github.com/golang/go/issues/57757">https://github.com/golang/go/issues/57757</a>)</li><li><strong>net&#x2F;http:</strong> <code>ServeFileFS()</code>, <code>FileServerFS()</code>, <code>NewFileTransportFS()</code> が新規追加 <a href="https://github.com/golang/go/issues/51971">#51971</a></li><li><strong>net&#x2F;http:</strong> HTTPクライアント、サーバともに、空っぽの<code>Content-Length</code> ヘッダを拒否するようになった <a href="https://github.com/golang/go/issues/61679">#61679</a></li><li><strong>net&#x2F;http:</strong> <code>Request.PathValue()</code> が新規追加 <a href="https://github.com/golang/go/issues/61410">#61410</a></li><li><strong>net&#x2F;netip:</strong>  <code>AddrPort.Compare()</code> が新規追加 <a href="https://github.com/golang/go/issues/61642">#61642</a></li></ul><h2 id="net-TCPConnからUnixConnへのio-Copy-で、Linux’s-splice-2-システムコールが使われ性能改善-58808"><a href="#net-TCPConnからUnixConnへのio-Copy-で、Linux’s-splice-2-システムコールが使われ性能改善-58808" class="headerlink" title="net: TCPConnからUnixConnへのio.Copy() で、Linux’s splice(2)システムコールが使われ性能改善 #58808"></a>net: TCPConnからUnixConnへのio.Copy() で、Linux’s splice(2)システムコールが使われ性能改善 <a href="https://github.com/golang/go/issues/58808">#58808</a></h2><p>前提知識となる、 <code>splice(2)</code> ですが、入力用と出力用のファイルディスクリプタを繋ぎ、カーネル空間とユーザー空間でのデータコピーを行わず（ゼロコピーと言われる所以です）、データ転送を行うシステムコールです。<code>(2)</code> の <code>2</code> は引数ではなく、システムコールを指す番号です。</p><p>例えば静的ファイルをホストしているGoのHTTPサーバを構築するとします。極めて素朴に実装すると、ファイルの要求に対して、<code>os.Open()</code> でファイルを開き、 <code>io.ReadAll()</code> で<code>[]byte</code> を取得し、<code>http.ResponseWriter</code> に <code>Write()</code>で実現できます（※実際は <code>http.FileServer()</code> を使うでしょうが）。このとき <code>io.ReadAll()</code> するとカーネル空間から、ユーザー空間にデータコピーが行われます。また、読み取った値を <code>Write()</code>で書き込みHTTP応答する際に、再びユーザー空間からカーネル空間にデータコピーが行われます。</p><img src="/images/20240214a/データコピー.drawio.png" alt="データコピー.drawio.png" width="1200" height="783" loading="lazy"><p>これを <code>splice(2)</code> を用いて、ユーザー空間にメモリコピーせず、カーネル空間上に閉じてやり取りをさせたいよね、というのは背景となるモチベーションです。順序的には <code>pipe(2)</code> のシステムコールを呼び、次に左の<code>splice(2)</code>でパイプに書き込み、最後に右側の<code>splice(2)</code>を呼びパイプから読み取りネットワークインターフェースに書き込ませます。</p><img src="/images/20240214a/データコピー-ページ2.drawio.png" alt="データコピー-ページ2.drawio.png" width="1200" height="760" loading="lazy"><p><code>splice(2)</code> を利用するためには、2つのファイルディスクリプタのうち、1つがパイプである必要があるそうです。そのため <code>pipe(2)</code> を呼び出しています。パイプにコピーしているからゼロコピーじゃないじゃん！って思いましたが、多分カーネル空間に閉じていればノーカンなんだと思います。多分。</p><p>参考:</p><ul><li><a href="https://www.sobyte.net/post/2022-03/golang-zero-copy/">Zero-Copy Optimization in the Golang</a>）</li><li><a href="https://x.com/BdKozlovski/status/1667466644635938816?s=20">Apache Kafkaの中の人によるzero copyの解説ポスト</a></li><li>Goとシステムコール周りについては、澁川さんの<a href="https://ascii.jp/elem/000/001/267/1267477/">Goから見たシステムコール</a>記事がオススメです。<a href="https://www.lambdanote.com/products/go-2">書籍</a>もありますがWeb版で相当な分量です</li></ul><p>Go1.21以前のステータスでは、以下のケースは <code>splice(2)</code> を用いてゼロコピーになるように <code>io.Copy()</code> が実装されていました。</p><ul><li>TCPソケットからTCPソケット</li><li>UnixドメインソケットからTCPソケット</li><li>ファイルからTCPソケット</li><li>TCPソケットからファイル</li><li>Unixドメインソケットからファイル</li><li>ファイルからファイル</li></ul><p>先ほど例に上げた静的ファイルをHTTP応答で返すケースは、ファイル→TCPソケットで対応済み、例えば、<code>http.FileServer()</code> は内部で <code>io.Copy()</code> を使っているのですでに最適化されています。</p><p><code>#58808</code> ではこの対応を以下の2つにも広げようというものです。</p><ul><li>ファイルからUnixドメインソケット</li><li>TCPソケットからUnixドメインソケット</li></ul><p>そレを実現するため、Go1.22では、<code>net.TCPConn</code> と <code>os.File</code> に <code>WriteTo(io.Writer)</code> を追加されました。それらの内部で、 <code>splice(2)</code> や <code>sendfile(2)</code> を可能であれば利用する実装になっています。</p><h3 id="io-Copy-の内部実装"><a href="#io-Copy-の内部実装" class="headerlink" title="io.Copy()の内部実装"></a>io.Copy()の内部実装</h3><p><a href="https://pkg.go.dev/io#Copy">io.Copy()</a> ですが、引数に <code>io.Writer</code>, <code>io.Reader</code> を取りますが、 GoDocにも書かれている通り <code>io.WriterTo</code> が実装されていれば <code>src.WriteTo(dst)</code>が、<code>io.ReaderFrom</code> が実装されていれば <code>dst.ReadFrom(src)</code> が呼ばれます。<code>io.WriterTo</code> で条件が揃えばシステムコールの<code>sendfile(2)</code> や <code>splice(2)</code> を呼び、無理であれば <code>genericWriteTo()</code>という<code>io.Writer</code>と<code>io.Reader</code>をfor分でループさせて転送する処理にフォールバックします。</p><p>例として、ファイル→Unixドメインソケットにデータをコピーし、どのように呼び出し階層が変わるか <code>go tool</code> で可視化します。</p><p>まずはサーバ側の実装です。こちらはUnixドメインソケットに書き込まれた内容を標準出力するだけで、今回は特に何もしません。</p><figure class="highlight go"><figcaption><span>Unixドメインサーバ</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">os.Remove(<span class="string">&quot;/tmp/go122.sock&quot;</span>)</span><br><span class="line">listener, err := net.Listen(<span class="string">&quot;unix&quot;</span>, <span class="string">&quot;/tmp/go122.sock&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">bytes, err := io.ReadAll(conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != io.EOF &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;error: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;receive: %s\n&quot;</span>, <span class="type">string</span>(bytes))</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>続いてUnixドメインソケットのクライアント側です。</p><p>メソッド呼び出しのコールグラフを作りたかったので、ベンチマーク形式で作っています。</p><figure class="highlight go"><figcaption><span>Unixドメインクライアント</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> unixdomainclient</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkUnixDomainClient</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">w, err := net.Dial(<span class="string">&quot;unix&quot;</span>, <span class="string">&quot;/tmp/go122.sock&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r, err := os.Open(<span class="string">&quot;example.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err = io.Copy(w, r); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;finish&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを実行し、可視化します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -cpuprofile cpu.prof -memprofile mem.prof -bench .</span><br><span class="line">$ go tool pprof -http :8080 cpu.prof</span><br></pre></td></tr></table></figure><p>そうすると、<code>io.Copy()</code> から システムコール <code>sendfile(2)</code> が呼ばれているのが分かります。</p><img src="/images/20240214a/image.png" alt="image.png" width="1200" height="644" loading="lazy"><p>比較のため、Go1.21.7 で動かしてみます。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.21.7 linux/amd64</span><br><span class="line"></span><br><span class="line">$ go test -v -cpuprofile cpu.prof -memprofile mem.prof -bench .</span><br><span class="line">$ go tool pprof -http :8081 cpu.prof</span><br></pre></td></tr></table></figure><p>そうすると、今度は <code>sendfile(2)</code> ではなく <code>read(2)</code> が呼ばれていることが分かります。</p><img src="/images/20240214a/image_2.png" alt="image.png" width="1200" height="772" loading="lazy"><p>今回は <code>go tool</code> でシステムコールがどのような流れ呼び出されているか確認しました。</p><p><a href="https://ascii.jp/elem/000/001/267/1267477/2/">Goならわかるシステムプログラミング 第5回 Goから見たシステムコール</a> に書かれている通り、 <code>strace</code> を見て確認するのも良いかと思います。</p><p>先ほどとほぼ類似の <code>main.go</code> を作ります。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">w, err := net.Dial(<span class="string">&quot;unix&quot;</span>, <span class="string">&quot;/tmp/go122.sock&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r, err := os.Open(<span class="string">&quot;example.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err = io.Copy(w, r); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;finish&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>stace</code> でシステムコールの発行状況を確認します。 <code>Go1.22</code> の場合は <code>sendfile(2)</code> を利用しています。</p><figure class="highlight sh"><figcaption><span>Go1.22 strace結果</span></figcaption><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.22.0 linux/amd64</span><br><span class="line"></span><br><span class="line">$ go build</span><br><span class="line">$ strace ./main</span><br><span class="line">(...省略...)</span><br><span class="line">fcntl(7, F_GETFL)                       = 0x8800 (flags O_RDONLY|O_NONBLOCK|O_LARGEFILE)</span><br><span class="line">fcntl(7, F_SETFL, O_RDONLY|O_LARGEFILE) = 0</span><br><span class="line">sendfile(3, 7, NULL, 4194304)           = 15</span><br><span class="line">sendfile(3, 7, NULL, 4194304)           = 0</span><br><span class="line">write(1, <span class="string">&quot;finish\n&quot;</span>, 7finish</span><br><span class="line">)                 = 7</span><br><span class="line">exit_group(0)                           = ?</span><br><span class="line">+++ exited with 0 +++</span><br></pre></td></tr></table></figure><p><code>Go1.21</code> の場合は <code>read(2)</code>, <code>write(2)</code> を用いていることが分かります。</p><figure class="highlight sh"><figcaption><span>Go1.21 strace結果</span></figcaption><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.21.7 linux/amd64</span><br><span class="line"></span><br><span class="line">$ go build</span><br><span class="line">$ strace ./main</span><br><span class="line">(...省略...)</span><br><span class="line">fcntl(7, F_GETFL)                       = 0x8800 (flags O_RDONLY|O_NONBLOCK|O_LARGEFILE)</span><br><span class="line">fcntl(7, F_SETFL, O_RDONLY|O_LARGEFILE) = 0</span><br><span class="line"><span class="built_in">read</span>(7, <span class="string">&quot;1\r\n2\r\n3\r\n4\r\n5\r\n&quot;</span>, 32768) = 15</span><br><span class="line">write(3, <span class="string">&quot;1\r\n2\r\n3\r\n4\r\n5\r\n&quot;</span>, 15) = 15</span><br><span class="line"><span class="built_in">read</span>(7, <span class="string">&quot;&quot;</span>, 32768)                      = 0</span><br><span class="line">write(1, <span class="string">&quot;finish\n&quot;</span>, 7finish</span><br><span class="line">)                 = 7</span><br><span class="line">exit_group(0)                           = ?</span><br><span class="line">+++ exited with 0 +++</span><br></pre></td></tr></table></figure><p>私の業務範囲だとUnixドメインソケットを使う場面はあまり考えられないのですが、Linuxの機能を上手く活用した改善が入るのは嬉しいですね。</p><h2 id="net-WindowsでDNSリゾルバ挙動更新-57757"><a href="#net-WindowsでDNSリゾルバ挙動更新-57757" class="headerlink" title="net: WindowsでDNSリゾルバ挙動更新 #57757"></a>net: WindowsでDNSリゾルバ挙動更新 <a href="https://github.com/golang/go/issues/57757">#57757</a></h2><p><code>-tags=netgo</code> をつけてビルドした場合、Windowsで <code>%SystemRoot%\System32\drivers\etc\hosts</code> の<code>hosts</code> を参照しない不備があったようです。<a href="https://github.com/golang/go/blob/d52883f443e1d564b0300acdd382af1769bf0477/src/net/conf.go#L134-L145">TODO</a> が残っていたとのこと。</p><p><code>netgo</code> ってなんだ？という方も多いかと思いますが、<a href="https://okzk.hatenablog.com/entry/2018/04/16/154644">golangの名前解決について - okzkメモ</a>に説明されている通り、GoではDNS名前解決の方法が2種類あり、pure Go実装版を利用するためには、 <code>CGO_ENABLED=0</code> か <code>-tags=netgo</code> を付けてビルドする必要があります。</p><p>今回はpure Go版かつWindowsで <code>hosts</code> ファイルを見る実装が漏れていたので修正したということです。Windowsサーバ上もそうですが、GoでCLIツールを開発して展開している人なんかは、ちゃんと <code>hosts</code> を見るようになって嬉しいかもしれませんね。</p><h2 id="net-http-ServeFileFS-など新規追加-51971"><a href="#net-http-ServeFileFS-など新規追加-51971" class="headerlink" title="net&#x2F;http: ServeFileFS()など新規追加 #51971"></a>net&#x2F;http: ServeFileFS()など新規追加 <a href="https://github.com/golang/go/issues/51971">#51971</a></h2><p><code>net/http</code> には <a href="https://pkg.go.dev/net/http#ServeFile">ServeFile()</a>、<a href="https://pkg.go.dev/net/http#ServeContent">ServeContent()</a> など静的ファイルをホストするような便利関数が存在します。しかし、これらは <code>io/fs</code> パッケージが登場した<a href="https://go.dev/doc/go1.16#fs">Go 1.16</a> 以前に開発されていたもので、互換性のため <code>io.FS</code>で動作する版を追加しようという提案です。</p><p>サーバ側には2つ追加されました。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ServeFileFS</span><span class="params">(w ResponseWriter, r *Request, fsys fs.FS, name <span class="type">string</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FileServerFS</span><span class="params">(root fs.FS)</span></span> Handler</span><br></pre></td></tr></table></figure><p>クライアント側には1つ追加されました。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFileTransportFS</span><span class="params">(fsys fs.FS)</span></span> RoundTripper</span><br></pre></td></tr></table></figure><p><code>http.NewFileTransportFS()</code> を取り上げます。</p><p>最初に検証用のファイルを作成します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;test\ntest\ntest&quot;</span> &gt; ~/example.txt</span><br></pre></td></tr></table></figure><p>続いて <code>RegisterProtocol()</code>で <code>file</code> スキーマに <code>http.NewFileTransportFS()</code> 登録します。アクセス先は先ほど作成した <code>example.txt</code> です。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := &amp;http.Transport&#123;&#125;</span><br><span class="line">t.RegisterProtocol(<span class="string">&quot;file&quot;</span>, http.NewFileTransportFS(os.DirFS(<span class="string">&quot;/&quot;</span>))) <span class="comment">// ★ポイント</span></span><br><span class="line">c := &amp;http.Client&#123;Transport: t&#125;</span><br><span class="line"> </span><br><span class="line">res, err := c.Get(<span class="string">&quot;file:///home/mano/example.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// TODO 検証用コードのためFatalで落とす</span></span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line"></span><br><span class="line">all, err := io.ReadAll(res.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// TODO 検証用コードのためFatalで落とす</span></span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(<span class="type">string</span>(all))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そうすると実行結果は次のように、先ほど作成した <code>example.txt</code> の結果が表示されます。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>従来ですと次のように <code>FS</code> がついていない <code>http.NewFileTransport()</code> を使っていました。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line"><span class="deletion">-&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">t := &amp;http.Transport&#123;&#125;</span><br><span class="line"><span class="deletion">-t.RegisterProtocol(&quot;file&quot;, http.NewFileTransportFS(os.DirFS(&quot;/&quot;))) // ★ポイント</span></span><br><span class="line"><span class="addition">+t.RegisterProtocol(&quot;file&quot;, http.NewFileTransport(http.Dir(&quot;/&quot;))) // ★従来実装</span></span><br><span class="line">c := &amp;http.Client&#123;Transport: t&#125;</span><br><span class="line"> </span><br><span class="line">res, err := c.Get(&quot;file:///home/mano/example.txt&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">// TODO 検証用コードのためFatalで落とす</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">defer res.Body.Close()</span><br><span class="line"></span><br><span class="line">all, err := io.ReadAll(res.Body)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">// TODO 検証用コードのためFatalで落とす</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(string(all))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>挙動としては同じですし、deprecatedという訳でもないですが、今後は <code>FS</code> がついている方を利用する方が拡張性などの観点で良いでしょう。</p><h2 id="net-http-空っぽのContent-Lengthヘッダ拒否-61679"><a href="#net-http-空っぽのContent-Lengthヘッダ拒否-61679" class="headerlink" title="net&#x2F;http: 空っぽのContent-Lengthヘッダ拒否 #61679"></a>net&#x2F;http: 空っぽのContent-Lengthヘッダ拒否 <a href="https://github.com/golang/go/issues/61679">#61679</a></h2><p><code>Content-Length: 0</code> ではなく、 <code>Content-Length: </code> をサーバにHTTPリクエストした場合、従来ですと200が返ってきた（400ではない）ことが、<a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-content-length">RFC 9110 のセクション 8.6</a>などに反しているということで、修正されました。この拒否する挙動は、ApacheやNginxと同じらしく、影響を受けるユーザーはほぼゼロだろうということも話されていました。</p><p>..にも関わらず、従来の挙動で動かしたい場合 <code>GODEBUG</code> に <code>httplaxcontentlength=1</code> を設定すれば切り戻し可能だそうです。芸が細かい..!!</p><h2 id="net-http-Request-PathValue-新規追加-61410"><a href="#net-http-Request-PathValue-新規追加-61410" class="headerlink" title="net&#x2F;http: Request.PathValue()新規追加 #61410"></a>net&#x2F;http: Request.PathValue()新規追加 <a href="https://go.dev/issue/61410">#61410</a></h2><p>Go1.22リリースの目玉機能の1つで、HTTPサーバのルーティングが大幅に強化されました。</p><p>武田さんの<a href="/articles/20240202a/">Go1.22 リリース連載 HTTPルーティングの強化 </a> を参照ください。機能面の紹介だけではなく性能面もベンチマークを取っており、参考になります。</p><h2 id="net-netip-AddrPort-Compare-新規追加-61642"><a href="#net-netip-AddrPort-Compare-新規追加-61642" class="headerlink" title="net&#x2F;netip: AddrPort.Compare()新規追加  #61642"></a>net&#x2F;netip: AddrPort.Compare()新規追加  <a href="https://github.com/golang/go/issues/61642">#61642</a></h2><p><a href="https://pkg.go.dev/net/netip@master#AddrPort.Compare"><code>func (p AddrPort) Compare(p2 AddrPort) int</code></a> が追加され、<code>AddrPort</code> の比較ができるようになりました。 <code>time.Compare()</code> などと同様、 <code>p&lt;p2 → -1</code>、<code>p=p2 → 0</code>、<code>ip&gt;ip2 → 1</code>を返します。</p><p>背景としては、Go1.21で追加された <code>slices.SortFunc()</code> と組み合わせたいとのことです。</p><ul><li>【参考】 <code>slices.SortFunc()</code> について → <a href="/articles/20230816a/">Go1.21:slicesパッケージのチートシート</a></li></ul><p>どのような感じになるか <code>slices.SortFunc()</code> に <code>netip.Compare()</code> を組み合わせてみます。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/netip&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">inputs := []<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;1.2.3.4:80&quot;</span>,</span><br><span class="line"><span class="string">&quot;1.2.3.4:443&quot;</span>,</span><br><span class="line"><span class="string">&quot;2.3.4.5:22&quot;</span>,</span><br><span class="line"><span class="string">&quot;[::1]:80&quot;</span>,</span><br><span class="line"><span class="string">&quot;[::1]:443&quot;</span>,</span><br><span class="line"><span class="string">&quot;[::2]:22&quot;</span>,</span><br><span class="line"><span class="string">&quot;[0102:0304::0]:80&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addrs := <span class="built_in">make</span>([]netip.AddrPort, <span class="number">0</span>, <span class="built_in">len</span>(inputs))</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> inputs &#123;</span><br><span class="line">addrs = <span class="built_in">append</span>(addrs, netip.MustParseAddrPort(s))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slices.SortFunc(addrs, <span class="function"><span class="keyword">func</span><span class="params">(a, b netip.AddrPort)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a.Compare(b)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, a := <span class="keyword">range</span> addrs &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%+v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行すると次のような並び順になります。まずIP部分でソート、その後ポート番号でソートといった形で、直感的だと思います。IPv4とIPv6を混ぜた場合は、v4→v6の順になるようです。</p><figure class="highlight console"><figcaption><span>出力結果</span></figcaption><table><tr><td class="code"><pre><span class="line">1.2.3.4:80</span><br><span class="line">1.2.3.4:443</span><br><span class="line">2.3.4.5:22</span><br><span class="line">[::1]:80</span><br><span class="line">[::1]:443</span><br><span class="line">[::2]:22</span><br><span class="line">[102:304::]:80</span><br></pre></td></tr></table></figure><p>ちなみに、元のIssueでは <code>netip.Prefix</code> にも <code>Compare()</code> を追加しようという提案でしたが、次回以降に持ち越しとなりました。理由として <code>10.0.0.0/8</code> → <code>0.0.0.0/32</code> のような違和感ある並び順となる実装になっていたようで、既存の標準順序があればそれに合わせようということで、取り下げられました。</p><p><code>Compare()</code> 1つ追加するにしても、どのような順序が一般的か（慣習に乗っ取っていて、利用者の驚きが最小化されるか）、周辺知識も深めていかないと駄目だなと感じました。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>Go1.22の<code>net</code>, <code>net/http</code>, <code>net/netip</code> の3パッケージのアップデートについて取り上げました。</p><p>最近、低レイヤーについてどこまで抑えておくべきか、といった言説をXで見かけた気がしており、私が新人のときの研修リーダー的な先輩に、「自分の業務で用いる1つ下まで抑えるべき。2つ下まで深掘りできたら相当差がつく、凄い」と言われたことを思い出しました。</p><p>リリースノートの内容も、「Goならわかるシステムプログラミング」を理解していればもっと解像度が高く理解できていたなと反省&#x2F;痛感しています。引き続き理解できる範囲も広げていこうと思います。最後まで読んでいただき、ありがとうございます。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20240214a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;534&quot;&gt;

&lt;p&gt;The Gopher character is based on the Go mascot designed by Renée</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.22" scheme="https://future-architect.github.io/tags/Go1-22/"/>
    
    <category term="net/http" scheme="https://future-architect.github.io/tags/net-http/"/>
    
    <category term="システムコール" scheme="https://future-architect.github.io/tags/%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%B3%E3%83%BC%E3%83%AB/"/>
    
    <category term="splice" scheme="https://future-architect.github.io/tags/splice/"/>
    
  </entry>
  
</feed>
