<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  <icon>https://future-architect.github.io/feed_icon.png</icon>
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2023-03-03T06:52:41.937Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>エンジニア歴６ヶ月による「SQLアンチパターン」書評（クエリのアンチパターン編）</title>
    <link href="https://future-architect.github.io/articles/20230303a/"/>
    <id>https://future-architect.github.io/articles/20230303a/</id>
    <published>2023-03-02T15:00:00.000Z</published>
    <updated>2023-03-03T06:52:41.937Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230303a/picture_large978-4-87311-589-4.jpg" alt="" width="400" height="511"><p><a href="/articles/20230217a/">読書感想文連載</a> の9冊目の記事です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>今回はエンジニア界隈で名著と名高いBill Karwin著「SQLアンチパターン」を読んだので書評をかいていきたいと思います。</p><p>私が基本的な研修を終えて、現場に配属後に「SQLを触ろう」となった際に、先輩に「アンチパターンさえやらなきゃいいよ」とアドバイスされたことがこの本を読むきっかけだったので、同じような境遇の初心者の方が現場でSQLを触ることになった時、最低限避けるべき項目の雰囲気を掴む、容易に確認することができる記事になれば幸いです。</p><h2 id="本書のスタイルと本記事で注目すること"><a href="#本書のスタイルと本記事で注目すること" class="headerlink" title="本書のスタイルと本記事で注目すること"></a>本書のスタイルと本記事で注目すること</h2><p>本書は「データベース論理設計のアンチパターン」「データベース物理設計のアンチパターン」「クエリのアンチパターン」「アプリケーション開発のアンチパターン」の4部からなりそれぞれアンチパターンが数種類紹介されています。アンチパターンごとに「目的」「アンチパターン」「アンチパターンの見つけ方」「アンチパターンを用いても良い場合」「解決策」に分けて解説されています。</p><p>本記事では上記のうち、初心者が一番触れることが多い「クエリのアンチパターン」の5つにフォーカスして、書評を書いていきたいと思います。</p><h2 id="クエリのアンチパターン"><a href="#クエリのアンチパターン" class="headerlink" title="クエリのアンチパターン"></a>クエリのアンチパターン</h2><h3 id="1-フィア・オブ・ジ・アンノウン"><a href="#1-フィア・オブ・ジ・アンノウン" class="headerlink" title="1. フィア・オブ・ジ・アンノウン"></a>1. フィア・オブ・ジ・アンノウン</h3><p><strong>〜NULLは数字でも文字でもない！！〜</strong></p><p>プログラミング初心者がわかるようで分からないものの一つがNULLだと思います。</p><p>SQLのアンチパターンでもNULLに関して言及がありました。やりがちなミスとして、NULLを数値や文字列などと同列に扱ってしまう例などが上げられていました。（NULLをスカラー式論理式で使うと想定外の結果を返す等）</p><p>実はこの本を読んでいたおかげでアンチパターンを回避できた場面がありました。やりたかったこととしては、金額がはいっている列の合計が欲しかったので以下のようなクエリを書いていました。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(kingaku) <span class="keyword">FROM</span> <span class="keyword">Table</span></span><br></pre></td></tr></table></figure><p>ただ、kingaku列はNULLを許容する列だったのでもし一つでもNULLが設定されていた場合上記のクエリが返す結果はNULLになってしまいます。それをこの書籍で知識として得ていたおかげで、NULLを０として扱うように以下のクエリに事前に修正することができました。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(<span class="built_in">COALESCE</span>(kingaku,<span class="number">0</span>)) <span class="keyword">FROM</span> <span class="keyword">Table</span></span><br></pre></td></tr></table></figure><p>基本的なことかもしれませんが、先に知識としてインプットしておくことで「気づく」ことができたため、余裕があるときの勉強って大事だなと身に染みて感じました。</p><p>また、NULLがデータベースにあることで上記のような余計な気配りが必要になることから、NOT NULL制約を使ったり、他の値（0、-1）に置き換えてその手間を省く方法があるようですがそれに関しても推奨されていないようです。</p><h3 id="2-アンビギュアスグループ"><a href="#2-アンビギュアスグループ" class="headerlink" title="2. アンビギュアスグループ"></a>2. アンビギュアスグループ</h3><p><strong>〜GROUP BYを使用した時、グループ内で一意でない値は取得できない！！〜</strong></p><p>SQLを始めて勉強してクエリを書いている際に出てきたエラーに対して「なんでエラーが出るの？」と思った時に大抵の原因だったのがこのアンチパターンを踏んでいることでした。</p><p>例えば、動物の種類ごとに一番重いペットの名前を取得しようと（謎設定）以下のクエリを書いてもエラーになります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,<span class="built_in">MAX</span>(weight),animal</span><br><span class="line"><span class="keyword">FROM</span> Pets</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> animal</span><br></pre></td></tr></table></figure><p>これはanimalでグループ化しているのにも関わらず、nameが一意に特定できないからです。（MAXは集約関数で一意に特定できる）</p><p>この意図としてはMAX(weight)と同じ行にあるnameを取得したいのですが、SQL側にはその意図を認識するすべがないため、どのnameを返すべきか分からずエラーになってしまいます。</p><p>本書の内容を踏まえて改善したSQLが以下になります。</p><p>この場合は、GROUP BYを使わずに以下のようなクエリを実装することで想定の値を取得することができます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p1.NAME,m.weight,m.animal</span><br><span class="line"><span class="keyword">FROM</span> pets p1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">   (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(p2.weight) <span class="keyword">AS</span> weight,p2.animal</span><br><span class="line"><span class="keyword">FROM</span> pets p2</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> p2.weight) <span class="keyword">AS</span> m</span><br><span class="line"><span class="keyword">ON</span>  m.animal<span class="operator">=</span>p1.animal <span class="keyword">AND</span> m.weight<span class="operator">=</span>p1.weight</span><br></pre></td></tr></table></figure><p>基本的にはこのアンチパターンを踏んでいる際はエラーが起きるおかげで成果物として提出してしまうことはないと思いますが、私のようにエラーが出てきた際に「？？？」とならないように押さえておきたいですね。</p><h3 id="3-ランダムセレクション"><a href="#3-ランダムセレクション" class="headerlink" title="3. ランダムセレクション"></a>3. ランダムセレクション</h3><p><strong>〜データをRAND関数を使ってソートすると無駄なコストがかかる！！〜</strong></p><p>データをランダムに取得したいときはRAND関数を使うことが普通だと思っている方は知らないうちに非常にコストの高いクエリを作成してしまっているかもしれません。</p><p>というのも本書によるとRAND関数というものは手作業でソートしており、</p><blockquote><p>これはテーブルスキャンと呼ばれる手法で多くの場合、全ての結果を一時的なテーブルとして保存し、物理的に行を入れ替える処理を行います。</p></blockquote><p>データが大きければ大きいほどパフォーマンスが悪化するようなので今一度自身の実装を見直してみる必要があるかもしれません…。</p><p>ランダムに値を取得したい場面は今のプロジェクトではないため、今のところは私は頭の片隅に入れておく程度になると思いますが、パフォーマンスの観点を持って指摘を入れられるエンジニアは一段レベルが違い、チームの中で重宝される存在だと思っているので、そのような存在になれるよう温めておきたい知識でした。</p><h3 id="4-スパゲッティクエリ"><a href="#4-スパゲッティクエリ" class="headerlink" title="4. スパゲッティクエリ"></a>4. スパゲッティクエリ</h3><p><strong>〜複雑なソースはどんなプログラミングでも悪！！〜</strong></p><p>私は研修で初めに触れた言語がJavaだったのですが、その際にも「複雑なスパゲッティコードは良くない」というようなことを言われました。</p><p>「一度にやりたいことをできた方が良さそう！」と思って善意でひとまとめにしようとし、あくせくしながら実装し、いざ完成しても、深すぎるネストや、飛び飛びの処理のせいで、自分が何を考えて実装したのかすら分からなくなっている、といった経験はみなさんあると信じています。</p><p>やはり、SQLでも複雑な実装は他言語と同様ご法度とされているようですね。</p><p>SQLで複雑なクエリを実装すると、全ての行が結合してしまう「デカルト積」なるものが発生してしまい、実際の結果より多くの結果が返されることもあるようです。</p><p>SQLではそこまで複雑な実装をする必要が現場でないのですが、Javaで一度スパゲッティコードをしてしまい、指摘をされた際にも、そもそもコードの意図を説明することが大変だった経験もあるため、そういった副次的なコストも回避するためにも常にシンプルでスマートな実装をできるように心がけていきます！</p><h3 id="5-インプリシットカラム"><a href="#5-インプリシットカラム" class="headerlink" title="5. インプリシットカラム"></a>5. インプリシットカラム</h3><p><strong>〜「とりあえず何でも頂戴！」はトラブルの元！！〜</strong></p><p>列を指定せずにワイルドカード機能を使うSELECT、INSERTはテーブル定義が変わった時に元の想定と違う動きをすることがあるので避けるべき手法のようです。</p><p>もしワイルドカードを使用したクエリがテーブル定義変更により返す結果が変わって、クエリ実装時に省略した何倍ものタイプ数を費やして修正作業しなければならない場面を想像すると、丁寧に列の指定くらいは行わなければという強迫観念めいたものが生まれました。（修正作業は実装の何倍もコストがかかるのはエンジニアの歴が浅くても痛いほど身に染みているので…）</p><p>また、以下のようにワイルドカードを使って取得すると余計なデータまで取ってきてパフォーマンス低下に繋がるようなので、「パフォーマンスを考慮できるかっこいいエンジニア」を目指している身としてはより気をつけたいポイントだと思いました。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">Table</span></span><br></pre></td></tr></table></figure><p>これは書籍には載っていなかったのですが、「往復するデータが増えてパフォーマンスが落ちる」という話題に関して現場での経験から得た、紹介したいアンチパターンがあり、それは「SQLを何度も呼び出すな」というものです。</p><p>現プロジェクトではJavaのServiceクラスからクエリを実行しDBアクセスする仕組みなのですが、参照するテーブルが同じだったり、検索条件が多少違うだけの場合、何度もSQLを呼び出すのではなく、一度のDBアクセスで必要な値を取り出してJava側で必要な値を場面に応じて参照することでデータベースとアプリケーションを往復するデータ量を減らし、パフォーマンス向上につなげることができます。</p><p>頭の片隅にでも置いておいて、少しでも質の良い成果物作成に貢献できたら幸いです！</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今まで自分が思いっきり踏んでいたアンチパターンから本書で知ることで未然に防げたアンチパターンまで載っていたため、非常に有用な書籍だったなと感じました。原著ではより細かいデータベース設定の中でより多くのアンチパターン回避方法について触れているので、今後SQLに触れていく同志にはぜひ読んでいただき、より質の高い成果物を作成していただければと思います。</p><p>本記事で少しでも情報を得ることができ、皆様の日々の開発の一助になれていれば幸いです。ご拝読ありがとうございました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230303a/picture_large978-4-87311-589-4.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;511&quot;&gt;

&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
    <category term="SQLアンチパターン" scheme="https://future-architect.github.io/tags/SQL%E3%82%A2%E3%83%B3%E3%83%81%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
    <category term="アンチパターン" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%83%B3%E3%83%81%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Google Cloudのしくみと技術がしっかりわかる教科書を読んだ感想</title>
    <link href="https://future-architect.github.io/articles/20230302a/"/>
    <id>https://future-architect.github.io/articles/20230302a/</id>
    <published>2023-03-01T15:00:00.000Z</published>
    <updated>2023-03-03T06:51:54.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>金融グループ所属、新人の藤戸四恩です。<br>インデックス記事に書かせていただきましたが、積読消化目的で参加させていただきました。<br><img src="/images/20230302a/image.png" alt="" width="400" height="564" loading="lazy"></p><p><a href="/articles/20230217a/">読書感想文連載</a> の8冊目は、技術評論社から出版されている <a href="https://gihyo.jp/book/2021/978-4-297-12301-7">図解即戦力 Google Cloudのしくみと技術がこれ1冊でしっかりわかる教科書</a> です。</p><p>この書籍を選んだ理由としては、CCoE(クラウド活用推進組織)メンバーに参加しGoogle Cloud に触れる機会があったのですが、いままではCloudというものに触れてこなかったため全体像を掴みたいと考えたからです。</p><p>気になったところについて感想を書いていきたいと思います。</p><h2 id="書籍の概要"><a href="#書籍の概要" class="headerlink" title="書籍の概要"></a>書籍の概要</h2><p>この書籍は2021年9月3日に発売された本で、Google Cloudに関する基本的な知識を学ぶことができます。<br>下記の通り10章から構成されています。</p><ul><li>1章 Google Cloud の基礎知識</li><li>2章 クラウドの仕組みとGoogleの取り組み</li><li>3章 Google Cloud を使うには</li><li>4章 サーバーサービス「Compute Engine」</li><li>5章 ネットワークサービス「VPC」</li><li>6章 ストレージサービス「Cloud Storage」</li><li>7章 コンテナとサーバーレスのサービス</li><li>8章 データベースサービス</li><li>9章 データ分析のサービス</li><li>10章 そのほかに知っておきたい Google Cloud のサービス</li></ul><h2 id="Google-Cloudのシェア率と検索比率について"><a href="#Google-Cloudのシェア率と検索比率について" class="headerlink" title="Google Cloudのシェア率と検索比率について"></a>Google Cloudのシェア率と検索比率について</h2><p>書籍内の内容ではないですが、読み進めるにあたり、Google Cloud がどれくらいのシェアがあるのか気になり、調べてみました。</p><p>Publickey社の記事内では<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、Canalys社が調査した、2022年度第2四半期時点のクラウドのシェア率について記載されており、AWS が31%で1位、 Azure が24%で2位、Google Cloud が8%が記載されています。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><p>また、Googleでの検索比率を Google Trends でそれぞれのクラウドサービス名を検索しました。<br>比較したクラウドサービスは、Amazon Web Services (以下AWS)、Microsoft Azure (以下Azure)、Google Cloudの三つです。</p><p>※Google Cloud は2022年6月に Google Cloud Platform から Goolge Cloud に<a href="https://cloud.google.com/blog/ja/topics/developers-practitioners/introducing-new-homepage-google-cloud">名称変更</a>されたため、Google Cloud Platform をトピックにいれています。</p><img src="/images/20230302a/スクリーンショット_2023-02-27_19.54.39.png" alt="" width="1160" height="686" loading="lazy"><p>個人的には、Google Cloud のシェアが思っていたよりも低く驚きました。</p><h2 id="ライブマイグレーションについて"><a href="#ライブマイグレーションについて" class="headerlink" title="ライブマイグレーションについて"></a>ライブマイグレーションについて</h2><p>4章 サーバーサービス「Compute Engine」の障害発生時の対応①~ライブマイグレーション(p.92)でCompute Engine の障害発生時の対応方法についての説明があり、対応方法の一つとして<code>ライブマイグレーション</code>が紹介されています。</p><blockquote><p>Compute Engineは、ハードウェアを購入することなくオンデマンドで仮想マシンを利用できるコンピューティングサービスです。<br>Compute Engineでは仮想マシンが、仮想マシンを実行するためのソフトウェアであるハイパーバイザ上で複数実行されます。</p></blockquote><p>Compute Engineは仮想マシンのことで、AWSだとAmazon EC2、AzureだとAzure Virtual Machineのことです。</p><blockquote><p>ComputeEngineには障害発生時の対応として、ライブマイグレーションとホストエラー対応という、大きく2つの機能が備わっています。<br>ライブマイグレーションとは、仮想マシンを稼働した状態のまま、仮想マシンを実行する物理サーバを別の物理サーバに移動する仕組みです。</p></blockquote><p><code>ライブマイグレーション</code>という単語は初めて知ったのですが、　Compute Engineはどのようにライブマイグレーションを実現しているのか調べてみました。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p><img src="/images/20230302a/image_2.png" alt="" width="875" height="661" loading="lazy">※ライブマイグレーションのコンポーネントの図を引用<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup><p>VMの移行は3つのステップで行われます。</p><ol><li>VM上のメモリやディスクを移行先のVMにコピーします。</li><li>移行元のVMは停止し、1でコピーしたメモリの差分を移行先にコピーします。</li><li>VMが移行先のVMで実行されます。</li></ol><p>移行が完了すると、移行元のVMが削除されることによって実現されます。<br>Google Cloud は障害の事前検知を行っているため<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>、検知した際にライブマイグレーションに影響がない場合は、上記のようなライブマイグレーションで障害対応を行っていることがわかりました。</p><h3 id="BigQuery-と-RDB-の違い"><a href="#BigQuery-と-RDB-の違い" class="headerlink" title="BigQuery と RDB の違い"></a>BigQuery と RDB の違い</h3><p>9章 データ分析のサービスのBigQueryとRDBの違い(p.253)で下記の記載があります。</p><blockquote><p>BigQueryは、RDB同様にテーブルを持ち、SQLによってデータの処理要求を行います。<br>では、どのような点がRDBと異なるのでしょうか。<br>1つ目は、カラム型ストレージである点です。必要なカラムにのみアクセスできるため、データ走査を最小化できます。<br>2つ目は、ツリーアーキテクチャである点です。クライアントから受け取ったクエリの処理をツリー構造の処理に分解して、複数のサーバーに分散することで、大規模な分散処理を実現しています。<br>…..<br>BigQueryはSQLの構文をサポートしつつ、NoSQLの特徴を併せ持つハイブリットなシステムといえます。</p></blockquote><p>2022年11月18日に開催された国際度量衡総会では新しい単位ロナ(ronna)10の27乗とクエタ(quetta)10の30乗が追加された<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>ことからも<br>データ量はどんどん大規模になっていて、大規模なデータを高速で処理する必要性はどんどん増しているように感じています。</p><p>カラム型ストレージ(列指向)とツリーアーキテクチャは、どのような仕組みか気になったため、調べてみました。</p><p>理由の1つ目のカラム型ストレージについては、弊社の2021年に開催された、春の入門連載2021の4日目の<code>IT初学者がカラムナデータベースを勉強してみた</code>で解りやすく解説されていました。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup><br>つまりカラム型ストレージは、データを列方向に保持するとデータの定義情報(型など)や値が同一のデータを格納しているため圧縮効率が高いため高速化されていることがわかりました。</p><p>理由の2つ目のツリーアーキテクチャは、クエリをRootServer、MixerServer、LeafServerの順にツリー構造分解されることにより分散処理を実行することで高速されています。<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></p><p>これらによりBigQueryは大規模なデータを効率よく処理されています。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>図解即戦力 Google Cloudのしくみと技術がこれ1冊でしっかりわかる教科書の読書感想文でした。</p><p>クラウドサービスを触ったことがなかった自分でも躓くことなく読み進めることができました。<br>Google Cloudを使用する上で基礎的な知識を学ぶことができたと思います。<br>クラウドサービスを触ったことがなく、Google Cloudをこれから使う方にはぜひ手に取ってみてください。</p><p>明日の読書感想連載は工藤さんの<a href="/articles/20230303a/">SQLアンチパターン</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://www.publickey1.jp/blog/22/202221aws2azure3google_cloud3.html">https://www.publickey1.jp/blog/22/202221aws2azure3google_cloud3.html</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://www.canalys.com/newsroom/global-cloud-services-Q2-2022">https://www.canalys.com/newsroom/global-cloud-services-Q2-2022</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><a href="https://cloud.google.com/compute/docs/instances/live-migration-process?hl=ja">https://cloud.google.com/compute/docs/instances/live-migration-process?hl=ja</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;"><a href="https://cloud.google.com/support/docs/dashboard?hl=ja#lifecycle_of_an_incident">https://cloud.google.com/support/docs/dashboard?hl=ja#lifecycle_of_an_incident</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;"><a href="https://www.asahi.com/articles/ASQCL441NQC6ULBH006.html">https://www.asahi.com/articles/ASQCL441NQC6ULBH006.html</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;"><a href="https://future-architect.github.io/articles/20210419b/">https://future-architect.github.io/articles/20210419b/</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="vertical-align: top; padding-right: 10px;">7.</span><span style="vertical-align: top;"><a href="https://tech.plaid.co.jp/inside_bigquery">https://tech.plaid.co.jp/inside_bigquery</a></span><a href="#fnref:7" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
  </entry>
  
  <entry>
    <title>マイクロサービスパターン MicroServicePatterns の感想文</title>
    <link href="https://future-architect.github.io/articles/20230301a/"/>
    <id>https://future-architect.github.io/articles/20230301a/</id>
    <published>2023-02-28T15:00:00.000Z</published>
    <updated>2023-03-02T02:53:18.799Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230301a/51ChNGhBinL._SX390_BO1,204,203,200_.jpg" alt="51ChNGhBinL._SX390_BO1,204,203,200_.jpg" width="392" height="499" loading="lazy"><p>積読を消化しようというテーマの、<a href="/articles/20230217a/">読書感想文連載</a> の 7冊目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG コアテクの川口です。</p><p>こちらの本は <strong>2020年3月23日</strong> に発売された本で、当時は私が社会人1年目となった年でもありました。（会社は、フューチャーではなかったですが。）</p><p>最初に配属されたチームでは、いわゆるマイクロサービスアーキテクチャが導入されておりました。ただ当時は、マイクロサービスアーキテクチャは経験したことがなく本書を読んで勉強した覚えがあります。それからはまた別でその知見を活かし、リアーキテクチャということでゼロイチでマイクロサービスアーキテクチャの設計をしたりしていました。</p><p>読書感想文として本書を選んだ理由としては、私自身のマイクロサービスアーキテクチャとやらについての考え方の整理ができたらなー！といったものになります。</p><p>改めて本書を読み直してみると、マイクロサービスアーキテクチャに関する考慮事項が網羅的に記載されているような気がしています。しかし、詳細な部分に関してはどうしても紙面の都合上、書ききれない部分も多かったのかこれを読んだだけでマイクロサービスアーキテクチャを設計・開発・実装までできるかというと、そこにはちょっとステップがあるかなというイメージです。</p><p>ただこれからマイクロサービスアーキテクチャについて知りたい！とか、導入を検討している！とかという方にはオススメの本かなと個人的には思っております！</p><p>さて改めて、本書の紹介に戻ります。基本情報は以下です。<br>※ この記事の執筆時点では、Google ブックス等で試し読みも可能でした。</p><ul><li><strong>発売日:</strong> 2020年3月23日</li><li><strong>ページ数:</strong> 549ページ</li><li><strong>コードサンプル:</strong> Java（考え方がメインなので、Java 未経験でもそんなに問題もないかなと思います。）</li></ul><p>目次とそれらのテーマとしては、以下のようになります。（テーマは、私自身が独断と偏見でつけたものになりますが。）</p><ul><li><strong>マイクロサービスとは。</strong><ul><li>Chapter 1: モノリシック地獄からの脱出</li><li>Chapter 2: サービスへの分割</li></ul></li><li><strong>マイクロサービス間通信について。</strong><ul><li>Chapter 3: マイクロサービスアーキテクチャで使われるプロセス間通信</li><li>Chapter 4: サーガによるトランザクションの管理</li></ul></li><li><strong>マイクロサービス特有の実装課題と解決について。</strong><ul><li>Chapter 5: マイクロサービスアーキテクチャにおけるビジネスロジックの設計</li><li>Chapter 6: イベントソーシングを使ったビジネスロジックの開発</li><li>Chapter 7: マイクロサービスアーキテクチャでのクエリーの実装</li><li>Chapter 8: 外部 API パターン</li></ul></li><li><strong>マイクロサービスのテストについて。</strong><ul><li>Chapter 9: マイクロサービスのテスト（前編）</li><li>Chapter 10: マイクロサービスのテスト（後編）</li></ul></li><li><strong>マイクロサービスの運用・保守について。</strong><ul><li>Chapter 11: 本番環境に耐えられるサービスの開発</li><li>Chapter 12: マイクロサービスのデプロイ</li></ul></li><li><strong>モノリスからマイクロサービスへ。</strong><ul><li>Chapter 13: マイクロサービスのリファクタリング</li></ul></li></ul><p>それでは、それぞれのテーマごとに所感を述べていく感じで本記事では進めていこうと思います。</p><h1 id="Ch-1-2-「マイクロサービスとは。」"><a href="#Ch-1-2-「マイクロサービスとは。」" class="headerlink" title="Ch. 1 ~ 2 「マイクロサービスとは。」"></a>Ch. 1 ~ 2 「マイクロサービスとは。」</h1><p>最初の Chapter 2つでは、マイクロサービスのメリット・デメリット。そもそもマイクロサービスとはということと、必ず悩まざるをえなくなるサービスの分割方法といったことについて述べられています。</p><p>まず、マイクロサービスアーキテクチャを導入するということであればこの部分が整理できていないと、後で必ず後悔する（後の章を見るとわかりますが、本当にマイクロサービスアーキテクチャは、モノリスと比べて考慮事項が多くなります。）と思うので、必ずこの部分は整理できているとよいなと思いました。</p><p>気になりトピックは以下にまとめておきます。（※ 以降、斜字部分は本書からの引用です。）</p><ul><li><em>マイクロサービスは、チームに自主性・自律性を与え、開発チーム間の結合が疎になる</em><ul><li>こちらは、マイクロサービスアーキテクチャを導入するメリットとして記載されているものです。</li><li>このような組織構造としてのメリットというのは、蔑ろにされがちのような気がする？（熟達したエンジニアであればそうではないと思いますが。）のですが真のメリットとしてこちらを考慮できていたらナルホドヨサソウ。と思いました。</li><li>コンウェイ・逆コンウェイの法則（ <a href="https://bliki-ja.github.io/ConwaysLaw/">逆コンウェイの方は、作戦とかと言い換える方が多いような気もしますが…。</a> ）の記載も本書中にありましたが、やっぱり組織構造とアーキテクチャというのは切っても切り離せない関係なのかなーと再認識しました。（本当の本当に、マイクロサービスアーキテクチャを考えるうえではその通りだなと思っています。）</li></ul></li><li><em>マイクロサービスアーキテクチャを使う時、個々の境界づけられたコンテキスト（DDD の bounded context）はサービス、またはサービスのグループになります</em><ul><li>こちらは、マイクロサービスアーキテクチャと DDD の相性は非常に良いよねという文脈で記載されているものです。</li><li>この記載だと、境界づけられたコンテキストのグループが1つのサービスになるという風には読み取れないですかね…。しかし、組織の構造やその他のメリット・デメリットを整理したうえで境界づけられたコンテキストのグループを1つのモジュラーモノリスとして定義することは可能なのかな（むしろそうしておくべきタイミングは多々あるのではないか。）とも思いました！</li></ul></li></ul><h1 id="Ch-3-4-「マイクロサービス間通信について。」"><a href="#Ch-3-4-「マイクロサービス間通信について。」" class="headerlink" title="Ch. 3 ~ 4 「マイクロサービス間通信について。」"></a>Ch. 3 ~ 4 「マイクロサービス間通信について。」</h1><p>以降、だんだんとマイクロサービスアーキテクチャ特有の考慮事項に入っていきます。<br>こちらでは、マイクロサービス間での通信や、マイクロサービス間でのトランザクション処理について述べられています。</p><p>同期・非同期通信の使い分けや API のあり方、各種通信プロトコル、非同期処理のベストプラクティス etc… といった内容が幅広く紹介がされており、この辺はマイクロサービスアーキテクチャによらず重要な考え方だなと思いました。<br>また、マイクロサービス間におけるトランザクション処理も必ず悩まざるをえなくなるものの1つで、よく Saga といったものが挙げられますがこちらも非常にわかりやすくまとめられていました。</p><p>気になりトピックは以下になります。</p><ul><li><em>可用性をできるかぎりあげたいなら、同期通信をできるかぎり減らさなければなりません。（非同期通信を増やさなければなりません。）</em><ul><li>複数システムを利用する場合は、それらの可用性の積になるからね。といった文脈で述べられています。</li><li>特にこれは、コマンド系のものに限定した話かとは思うのですが（もちろん参照系のものでは、非同期通信は有効な手段ではないため。）全てのリソースにおいてこちらの話を適用しようとするとなかなか壮大になりそうな気もしたので使い所はあるのかなとも思いました。</li></ul></li><li><em>ごく単純なサーガを除き、オーケストレーションを使うことをお勧めします。</em><ul><li>サーガにて、コレオグラフィベースとオーケストレーションベースどちらがよいかという文脈で述べられています。</li><li>こちらは確かにソウデスネー！と思いました。上記の通り全てコマンド系のものは、オーケストレーションベースのサーガに則ってハンドリングするかと言われると悩ましいところではありますが…。（ACID トランザクションのうち分離性を担保できないため、不必要に複雑さが増してしまう可能性がありそう？）</li><li>（ただ、一度マイクロサービス内でオーケストレータを飼える仕組みを整理できれば絶対できないことでもないのかなー？とも思ったり？）</li></ul></li></ul><h1 id="Ch-5-8-「マイクロサービス特有の実装課題と解決について。」"><a href="#Ch-5-8-「マイクロサービス特有の実装課題と解決について。」" class="headerlink" title="Ch. 5 ~ 8 「マイクロサービス特有の実装課題と解決について。」"></a>Ch. 5 ~ 8 「マイクロサービス特有の実装課題と解決について。」</h1><p>こちらでは、マイクロサービス特有の実装課題がいくつか紹介されていて、またそれらに対する解決方法も述べられていました。</p><p>ナルホドナーポイントがたくさんあるのですが、Chapter ごとに1つの記事が書けるくらいのボリュームがあるものなので、ここでは軽い紹介程度にとどめておきますがざっと以下のようなものについて述べられています。</p><ul><li>マイクロサービスと DDD の相性の良さとは。アグリゲートや Domain event の関連・有効性。</li><li>マイクロサービスにおけるイベントソーシング。</li><li>マイクロサービスにおけるクエリーの実装。（API composition。CQRS。API gateway。）</li></ul><p>気になりトピックは以下になります。</p><ul><li><em>1つのトランザクションで1つのアグリゲートを作成または更新する。</em><ul><li>こちらは、アグリゲートのルールということで3つ目のルールとして述べられていたものです。</li><li>筆者もこちらには初めて読んだ時驚いたという記載がありましたが、私も ？？？ となりました。今まで開発してきたモノリスのものであっても、トランザクションの扱いには幾分悩まされましたので（そのような場合には、しっかりとデータ設計ができていない場合が多かったのもありますが。）、一考の余地はありそうかなと思いました。</li></ul></li><li><em>API ゲートウェイの開発と運用を担当するかは重要な問題です。</em><ul><li>こちらは、いわゆるマイクロサービスにおけるクエリーの実装部分で API gateway のオーナーシップについて述べられていたときの一節です。</li><li>API gateway には本書中に記載がありますが、普通いくつかの役割が含まれています。特にこの部分では、いわゆるプレゼンテーション的な役割に焦点をあてて述べられています。このプレゼンテーション的な役割は、どのチームが責任を持つようにするかは、きちんと最初に整理しておく必要があるかなーとも思いました。（もちろん、その他の役割についてもそうですが。）</li></ul></li><li><em>GraphQL を使った API ゲートウェイの実装</em><ul><li>こちらは、API ゲートウェイを実装する際にはといった文脈で述べられています。</li><li>最近？だと、<a href="https://www.apollographql.com/">Appolo</a> が、マイクロサービスの API gateway として活躍してくれる <a href="https://www.apollographql.com/docs/federation/">Appolo Federation</a> や、 <a href="https://www.apollographql.com/docs/router/">Apollo Router</a> を開発してくれているのでそちらも取り入れるのも1つの手かもしれません。</li><li>ただ GraphQL が全てのマイクロサービス間通信にとってかわるものになるかと言うと、一概にそうとは言えないかなと個人的には思っています。（そこまで本書中でも述べていたとも思っていないですが。）こちらもメリット・デメリットを整理したうえでの話となるかとは思いますが、適切な部分では適切な通信プロトコルを用いるのがよいのかなーと思っていたりします。（ <a href="https://book.productionreadygraphql.com/">Production Ready GraphQL</a> でも、そのような記載があった気がします。）</li></ul></li></ul><h1 id="Ch-9-10-「マイクロサービスのテストについて」"><a href="#Ch-9-10-「マイクロサービスのテストについて」" class="headerlink" title="Ch. 9 ~ 10 「マイクロサービスのテストについて」"></a>Ch. 9 ~ 10 「マイクロサービスのテストについて」</h1><p>こちらでは、やや毛色が変わりテストの文脈に入っていきます。<br>はじめにテストとは？ということが述べられており、段々とマイクロサービスにおいてはね。という流れで話が進んでいきます。</p><p>ユニットテストから始まり、統合テスト、コンポーネントテスト、エンドツーエンドテストという順序でテストに関しておおよそ網羅的に述べられていました。<br>それぞれのテストにおける得意な部分・不得意な部分に明示的に触れられていたのと、具体的にどのようにそれぞれのテストを記載するのがよいのかといったことが述べられていたので、テストに対する考え方が整理できるものになっていました。</p><p>気になりトピックは以下になります。</p><ul><li><em>サービスの受け入れテストとしては、エンドツーエンドテストよりもコンポーネントテストのほうがはるかに優れています。</em></li><li><em>エンドツーエンドテストは、できる限り少なくするに越したことはありません。そのためには、ユーザージャーニーテストを書くようにするとよいでしょう。</em><ul><li>これらは、エンドツーエンドテストの使いどころに関するところで述べられていたものになります。</li><li>マイクロサービスにおいて、いわゆるエンドツーエンドテストを行おうとすると、意外と考慮することが多く大変なイメージがあります。他のマイクロサービスに関しては、自身の管理下にないことが多いため。（組織構造をもとに設計しているとなおのことかなと。）</li><li>ユーザージャーニーテストを普段から扱う（負荷試験等では扱うことが多かったですが。）というのはなかなか考えになかったので、ナルホドナーと思いました。</li></ul></li></ul><h1 id="Ch-11-12-「マイクロサービスの運用・保守について。」"><a href="#Ch-11-12-「マイクロサービスの運用・保守について。」" class="headerlink" title="Ch. 11 ~ 12 「マイクロサービスの運用・保守について。」"></a>Ch. 11 ~ 12 「マイクロサービスの運用・保守について。」</h1><p>こちらでは、また毛色が変わりましてマイクロサービスの運用・保守等について述べられています。<br>マイクロサービスでは、デプロイはもちろんのこと監視といった部分も途端に複雑になっていきます。また、マイクロサービス間での認証や認可も考慮する必要が出てくるといったことはモノリスとの決定的な違いの1つですね。</p><p>監視の文脈で取り上げられていたものは、以下になります。</p><ul><li><em>Health Check API</em><ul><li>これはマイクロサービスに限った話でもないとは思いますが、いわゆる Health Check のためのエンドポイントを公開しておくというやつですね。</li></ul></li><li><em>Log aggregation</em><ul><li>マイクロサービスだと1つの不具合が複数のマイクロサービスにまたがっておきている場合がほとんどです。そのような場合に原因を突き止めるためのログはどのように管理しておけばよいのかというやつです。</li></ul></li><li><em>Distributed tracing</em><ul><li>Log aggregation と同様に、何かパフォーマンス的な課題を解決したいとなったときにどのようにトレースを管理しておけばよいのだろうかというやつです。</li></ul></li><li><em>Exception tracking</em><ul><li>イメージとしては Log aggregation のエラーレベル ver. といったものかなと。ただ、エラーログはその後の障害管理・追跡が困難なため、分けて述べられているようでした。</li></ul></li><li><em>Application metrics</em><ul><li>こちらもマイクロサービスに限った話ではないですが、各サービスでメトリクスを収集するためにはといったことが述べられています。</li></ul></li><li><em>Audit logging</em><ul><li>こちらも（略）ですが、ユーザーの動きをロギングしたやつですね。</li></ul></li></ul><p>特に、ログやトレースの管理というのはマイクロサービスならではのものになるので、しっかりと整理できていないといけないなと思いました。またこれらを実現するためにはということで、マイクロサービスシャシーやサービスメッシュも導入程度ではありますが述べられています。</p><p>デプロイ部分では、Google Cloud や AWS の具体的なサービスも取り入れて、どのように実現することができるかが詳細に述べられていました。</p><p>やや発売日から日にちが経ってしまったこともあり、現在ではまた様々なサービスが新しく出て実現方法は色々と変わってきてはいそうですが、これらの考え方は決して無くなったわけではないので現在でも非常に有用な知識なのかなと思います。</p><h1 id="Ch-13-「モノリスからマイクロサービスへ。」"><a href="#Ch-13-「モノリスからマイクロサービスへ。」" class="headerlink" title="Ch. 13 「モノリスからマイクロサービスへ。」"></a>Ch. 13 「モノリスからマイクロサービスへ。」</h1><p>こちらでは、モノリスからマイクロサービスへ移行していくにはといったことが述べられています。</p><p>こういった Chapter では、混み入ったものは出てこなそうだなーとも思ったのですが…。なかなか具体的にどのようにしてモノリスからマイクロサービスへ移行すればよいのかといったことが述べられていました。</p><p>基本的に、モノリスからマイクロサービスにダウンタイム無く移行したいといった場合には、既存のモノリスのシステムも動かしつつ、そこから段階的に新たなマイクロサービスのシステムへと移行するといった風なものが自然かなと思います。</p><p>そのような場合には、以下のようなことが悩みポイントとして出てくるはずです。これらを整理してくれているのがこちらの Chapter です。</p><ul><li>そもそも移行作業をどのように価値として他チーム（主にビジネス領域のチーム）に訴求していくべきか。</li><li>そもそもどのようなアーキテクチャで2つのシステムを組み合わせるか。</li><li>既存の認証・認可機構があった場合にはどのようにするべきか。</li><li>マイクロサービスアーキテクチャに移行する順序はどうするべきか。</li><li>マイクロサービスへの分割はどのような粒度で行うべきか。</li><li>モノリスとマイクロサービスでのトランザクションはどのように担保するべきか。</li><li>新たなマイクロサービスに移行するうえでより適切なモデリングも行うとなった場合にそれらのモデルの変換はどのように行うか。</li></ul><p>モノリスからマイクロサービスに移行しようと考えている場合には、こちらも必ず整理しておきたいものになりそうですね！</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p><strong>マイクロサービスパターン MicroServicePatterns 実践的システムデザインのためのコード解説</strong> の読書感想文でした。</p><p>マイクロサービスアーキテクチャとはなんぞや！どうやって実現するんや！といったことが本書を読めば一定は理解できるものかなと思っています。</p><p>アーキテクチャを検討するうえでは、同時にしっかりと組織（組織構成・既存メンバーの能力・採用 etc…）のことも一緒くたにして考えなくてはならないものなのカナーと思った次第でした！</p><p>またおそらくモノリスであったとしても、いわゆる外部サービス（メール送信や、Push 通知、何かに特化した別の Data Store etc…。）を使う際にも一部は導入できる考え方もあったりするのかなーとも思いましたので、まだまだマイクロサービスアーキテクチャを導入する予定もない。という方でも一読の価値はあるものかなと思ってます。</p><p>次は、藤戸さんの <a href="/articles/20230302a/">図解即戦力 Google Cloudのしくみと技術がこれ1冊でしっかりわかる教科書</a> です！よろしくお願いいたします！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230301a/51ChNGhBinL._SX390_BO1,204,203,200_.jpg&quot; alt=&quot;51ChNGhBinL._SX390_BO1,204,203,200_.jpg&quot; width=&quot;392&quot; height=&quot;499&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
    <category term="マイクロサービス" scheme="https://future-architect.github.io/tags/%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>「リーダブルコード」を読んでTerraformの可読性について考える</title>
    <link href="https://future-architect.github.io/articles/20230228a/"/>
    <id>https://future-architect.github.io/articles/20230228a/</id>
    <published>2023-02-27T15:00:00.000Z</published>
    <updated>2023-03-01T07:56:16.049Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230228a/top.jpg" alt="" width="400" height="565"><p>こんにちは。TIGの伊藤太斉です。</p><p>この記事は、<a href="/articles/20230217a/">読書感想連載</a>の6日目です。</p><p>今回取り上げる書籍は、多くのエンジニアが通過するであろう、「<a href="https://www.oreilly.co.jp/books/9784873115658/">リーダブルコード</a>」についてです。</p><p>最近、「<a href="https://tech.mntsq.co.jp/entry/2022/12/27/144435">もし「リーダブルコード」を弁護士が読んだら？</a>」という記事をたまたま見かけて読んでみました。記事としては契約書にも同じことが言える、と自分が知らない世界でも使える部分はあるのだと読んでいました。そして、ふと考えてみると、「うちにも本があったじゃないか。しかも積読している。」と思い出し、今回積読解消の機会としてこの連載に参加しました。</p><p>リーダブルコードを書評や感想については既に多くの方が書いている内容があるので、今回はTerraformと絡めて書いていければと思います。私は、俗にいうプログラミング言語に対しては明るくない方なので、自分が理解できうるTerraformにおいて考えたらどうなるか、について地震の頭の整理、理解のためにも本記事を書いてみました。</p><h2 id="Terraformにおける「リーダブル」"><a href="#Terraformにおける「リーダブル」" class="headerlink" title="Terraformにおける「リーダブル」"></a>Terraformにおける「リーダブル」</h2><p>Terraformは<a href="https://github.com/hashicorp/hcl2">HCL</a>(HashiCorp <strong>Configuration</strong> Language, 現在はHCL2)に則って書かれている言語です。名前にConfigurationと含まれているくらい、「クラウドリソースをソースコードとして定義する」ことに長けた記法、ツールであるため、書籍に含まれている内容でなぞらえることが出来ない、難しいものもいくつかあります。</p><p>そのため、今回リーダブルコードの概要を元にTerraformについて考えるのではなく、私が一通り読んでみて、「これはTerraformにも言えることだろう」や「意識したほうがよりわかりやすくなるだろう」と思ったことを絞って紹介できればと思います。</p><h2 id="章立て、概要"><a href="#章立て、概要" class="headerlink" title="章立て、概要"></a>章立て、概要</h2><p>章立てについては<a href="https://www.oreilly.co.jp/books/9784873115658/#:~:text=%E7%9B%AE%E6%AC%A1-,%E7%9B%AE%E6%AC%A1,-%E8%A8%B3%E8%80%85%E3%81%BE%E3%81%88%E3%81%8C%E3%81%8D%0A%E3%81%AF%E3%81%98%E3%82%81">こちらのリンク</a>より参照ください。</p><p>中身は多くの技術書のように、前の章に紐づいて順番に読み進める形ではなく、各章が独立しているため、「これは自分では意識できている」「すでに取り組めている」などの内容は読み飛ばすこともできます。また、終わりになるにつれてより改善するとして難しくなる内容になっていくので、チェックシート的に手前の章から確認していくのも良いと思いました。今回、私自身も「Terraformに生かせるところ」という目で読んだため、流し読みになっている部分も精読した部分もどちらもあります。</p><p>チームで購入して、ある章をテーマに議論したり、大事にしたいことを会話できるきっかけにできそうと思いました。</p><h2 id="7章-制御フローを読みやすくする"><a href="#7章-制御フローを読みやすくする" class="headerlink" title="7章　制御フローを読みやすくする"></a>7章　制御フローを読みやすくする</h2><p>ここで取り上げられている内容は、条件式やループなど、ソースコードを簡単にすることも複雑にすることもできることについて言及されています。<br>Terraformにおいては、if文やgotoなどは存在はしません。ですが、countやfor文、dynamic構文など繰り返し処理など通常のTerraformのリソース定義に追加できるfunctionsが存在します。これらについて考えていきます。</p><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>countは、以下の例①のようにリソースを単純に複製する使い方はもちろん、例②のような使い方をすることで、リソースの作成要否を担うこともできます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例①</span></span><br><span class="line">resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;count&quot;</span> &#123;</span><br><span class="line">  count = 3</span><br><span class="line">  provisioner <span class="string">&quot;local-exec&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">command</span> = <span class="string">&quot;echo \&quot;これは<span class="variable">$&#123;count.index&#125;</span>番目のリソースです。\&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例②</span></span><br><span class="line">resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;bool_count&quot;</span> &#123;</span><br><span class="line">  count = local.create_resource ? 1 : 0</span><br><span class="line">  provisioner <span class="string">&quot;local-exec&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">command</span> = <span class="string">&quot;echo \&quot;このリソースは<span class="variable">$&#123;local.create_resource&#125;</span>なので、作成されます。\&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">locals &#123;</span><br><span class="line">  create_resource = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>書籍の中では三項演算子についても触れている節があり、Terraformでも同様に気をつけようと考えました。<br>例②では<code>create_resource</code>という変数にbool値を渡し、リソースを作るかどうかを決めています。ここではtrueを渡しているため、作成され、「このリソースはtrueなので、作成されます。」というテキストが出力されます。また、この書き方であれば変数も直接的で一通りソースを読むことで「いつ」必要な変数を渡すかがある程度明確になります。<br>一方、次のケースを見てみましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;bool_count&quot;</span> &#123;</span><br><span class="line">  count = local.unnessesary_resource ? 0 : 1</span><br><span class="line">  provisioner <span class="string">&quot;local-exec&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">command</span> = <span class="string">&quot;echo \&quot;このリソースは<span class="variable">$&#123;local.create_resource&#125;</span>の時に作成されます。\&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>変数を<code>unnessesary_resource</code>に変更しました。先ほどの例では変数は「必要ならtrueを」渡すため、肯定的な命名に対してtrueを渡すことであまり違和感がありません。しかし、この例では「不要であるならばtrueを」渡さないといけないため、否定に対して肯定をする、ような気持ち悪さを感じます。すごく。<br>このように、一回頭で考える時間を要する変数の作りになっていると、それだけで気持ち悪いものと感じました。変数や、その取り回しについては「直接的に、最終的にどうなるかわかりやすく」を考えるべきですね。ことわざの「名は体を表す」というのは言い得て妙だなと思いました。<br>ここで触れた、変数名、特にBoolについては「3.6　ブール値の名前」や「9章　変数と読みやすさ」で触れているので、こちらも合わせて読んでみてください。</p><h3 id="Dynamic構文"><a href="#Dynamic構文" class="headerlink" title="Dynamic構文"></a>Dynamic構文</h3><p>Terraformの<code>count</code>や<code>for_each</code>はリソースそのものを繰り返し、複数リソースを作成する際に利用します。一方、Dynamic構文についてはリソース内で同様の設定をするときに利用する構文です。以下の例ではdynamicを使ってセキュリティグループを作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  ingress_web = &#123;</span><br><span class="line">    https = &#123;</span><br><span class="line">      description = <span class="string">&quot;HTTPS from VPC&quot;</span></span><br><span class="line">      from_port   = 443</span><br><span class="line">      to_port     = 443</span><br><span class="line">      protocol    = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">      cidr_blocks = <span class="string">&quot;10.0.0.0/8&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    http = &#123;</span><br><span class="line">      description = <span class="string">&quot;HTTP from VPC&quot;</span></span><br><span class="line">      from_port   = 80</span><br><span class="line">      to_port     = 80</span><br><span class="line">      protocol    = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">      cidr_blocks = <span class="string">&quot;192.168.0.0/16&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_security_group&quot;</span> <span class="string">&quot;web&quot;</span> &#123;</span><br><span class="line">  name        = <span class="string">&quot;allow-web&quot;</span></span><br><span class="line">  vpc_id      = aws_vpc.main.id</span><br><span class="line"></span><br><span class="line">  dynamic <span class="string">&quot;ingress&quot;</span> &#123;</span><br><span class="line">    for_each = &#123; <span class="keyword">for</span> i <span class="keyword">in</span> local.ingress_web : i.protocol =&gt; i &#125;</span><br><span class="line">    content &#123;</span><br><span class="line">      description = ingress.value.description</span><br><span class="line">      from_port   = ingress.value.from_port</span><br><span class="line">      to_port     = ingress.value.to_port</span><br><span class="line">      protocol    = ingress.value.protocol</span><br><span class="line">      cidr_blocks = ingress.value.cidr_blocks</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例では、dynamicを単発で利用し、セキュリティグループのインバウンドを許可する設定をしています。（例は<a href="/articles/20211029a/">Terraformerとしてコードを書いて思うこと</a>の例を一部改変したものです)この例であれば、dynamic内部のネストが深くならないため、当てはめていくパラメータも容易に想像がつきやすいものだと感じます。</p><p>一方、公式でも記載されているdynamicブロックを<a href="https://developer.hashicorp.com/terraform/language/expressions/dynamic-blocks#multi-level-nested-block-structures">複数ネストさせるケース</a>をみてみます。(以下、公式より引用)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dynamic <span class="string">&quot;origin_group&quot;</span> &#123;</span><br><span class="line">  for_each = var.load_balancer_origin_groups</span><br><span class="line">  content &#123;</span><br><span class="line">    name = origin_group.key</span><br><span class="line"></span><br><span class="line">    dynamic <span class="string">&quot;origin&quot;</span> &#123;</span><br><span class="line">      for_each = origin_group.value.origins</span><br><span class="line">      content &#123;</span><br><span class="line">        hostname = origin.value.hostname</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらはdynamicを2つ利用し、ネストが通常より深くなっています。</p><p>この場合は、ソースを見た時の理解がやや遅くなり、具体的に代入するパラメータの形式もわかりにくくなっています。「変数にはなるべく同じことを書かない」などのポリシーがある場合ではやむを得ないところがあるとは思います。この場合は変数の記載がいくらか重複させたとしてもネストを浅くすることでソースの可読性や流れが掴みやすくなると思います。<br>公式ドキュメントでも</p><blockquote><p>Overuse of dynamic blocks can make configuration hard to read and maintain,</p></blockquote><p>と記載があるので、dynamicブロックの利用は用法・用量を守って使っていきましょう。<br>本の中では対象としている章以外にも、「8.5　例：複雑なロジックと格闘する」と合わせて読むと、理解や納得感が増すと感じました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はリーダブルコードを読んでTerraformをどう見るか、応用するか、について考えてみました。元々Terraform自体が、</p><ul><li>このリソースについて記述する</li><li>リソースに渡すパラメータは決まっている</li></ul><p>など、自由度という意味ではある程度限られてきますが、とはいえ、繰り返し構文にあたる<code>for_each</code>や<code>count</code>をはじめとしたTerraformの「機能」として割り振られているものについてはリーダブルコードを読んだことで考えることがあるように感じました。<br>リーダブルコード自体は普段意識していることでも、気がついたら忘れてしまうような大事なことが多く書かれていると感じました。私は物理本で買いましたが、近くに手に取れるところに置き、時々見返しても良いなと思いました。<br>また、冒頭でも触れた弁護士の方が読んでも納得する部分があるということはつまるところ「言語」全般に対しても言えるのではと改めて感じたところでもありますので、リーダブルなソースだけではなく、リーダブルな日本語も書けるように日々積み重ねていければと思います。</p><p>明日の読書連載は川口さんの<a href="/articles/20230301a/">マイクロサービスパターン MicroServicePatterns 実践的システムデザインのためのコード解説</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230228a/top.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;565&quot;&gt;

&lt;p&gt;こんにちは。TIGの伊藤太斉です。&lt;/p&gt;
&lt;p&gt;この記事は、&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
    <category term="読書" scheme="https://future-architect.github.io/tags/%E8%AA%AD%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>「スッキリわかるJava入門 実践編 第3版」の読書感想文</title>
    <link href="https://future-architect.github.io/articles/20230227a/"/>
    <id>https://future-architect.github.io/articles/20230227a/</id>
    <published>2023-02-26T15:00:00.000Z</published>
    <updated>2023-02-28T05:24:00.502Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230227a/top.jpg" alt="" width="400" height="567"><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次</a></li><li><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</a></li><li><a href="#%E3%81%A9%E3%82%93%E3%81%AA%E4%BA%BA%E3%81%AB%E3%82%AA%E3%82%B9%E3%82%B9%E3%83%A1%E3%81%8B">どんな人にオススメか？</a></li><li><a href="#%E6%84%9F%E6%83%B3%E3%83%A1%E3%83%A2">感想メモ</a><ul><li><a href="#%E7%B7%9A%E3%81%A7%E6%8D%89%E3%81%88%E3%82%8B%E9%80%B2%E6%8D%97%E3%81%A8%E9%9D%A2%E3%81%A7%E6%8D%89%E3%81%88%E3%82%8B%E9%80%B2%E6%8D%97">線で捉える進捗と、面で捉える進捗</a></li><li><a href="#%E3%83%81%E3%83%BC%E3%83%A0%E3%81%AB%E3%82%88%E3%82%8B%E9%96%8B%E7%99%BA">チームによる開発</a></li></ul></li><li><a href="#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB">おわりに</a></li></ul><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。<br>フューチャーアーキテクト株式会社の棚井です。</p><p>略歴として、フューチャーに新卒入社、Technology Innovation Group で IT コンサルタントを 3 年、Global Design Group で新規事業開発を 1 年と担当し、現在は Human Resources（つまり HR）でバックオフィスの新卒採用業務を担当しております。2023 年 4 月には当社に 100 名超の新卒が入社予定でして、その新人研修のリーダーを担当する予定です。</p><p>今回は <a href="/articles/20230217a/">読書感想文連載</a> ということで、私のパートでは「<a href="https://book.impress.co.jp/books/1119101169">スッキリわかる Java 入門 実践編 第 3 版</a>」を選びました。同じ著者から「<a href="https://book.impress.co.jp/books/1119101083">スッキリわかる Java 入門 第 3 版</a>」というベストセラー本も出版されており、新人研修での参考書籍としてや Java の習得が必要になったタイミングで同書のお世話になったエンジニアは多いのではと思います。私の周囲でも「スッキリ Java」の単語だけで話が通じるくらい普及しており、「プログラミング初心者におすすめの本は何ですか？」と聞かれた際にその人の職場が Java 環境であれば、真っ先にこの本の「入門編」を進めています。</p><p>ただし、今回取り上げたのは「<strong>実践編</strong>（ブックカバーが濃い緑）」の方です（以降、「スッキリわかる Java 入門 第 3 版」を「入門本」、「スッキリわかる Java 入門 実践編 第 3 版」を「実践本」と呼びます）。</p><p>当社の新人研修でも「入門編」と「実践編」の両方が参考図書に指定されており、購入経費が会社から支給されるほどには購入が推奨されています。</p><p>「入門編」は Java の基本文法からオブジェクト指向についてまで説明されているため多くの新人が購入するのですが、「実践編」の内容については <strong>実践</strong> というワードからも「まだ自分には早いのでは？」感があり、「配属後に必要となったら購入しよう」→「購入せずのまま」の流れにいる方も多いのではと思います。恥ずかしながら私もその 1 人で、研修時代に書店で流し読みした際に「いまは不要かな」と判断して購入までには至りませんでした。</p><p>そして時は経過し、エンジニア歴 4 年目にして偶然に「実践本」の内容を見返す機会がありました。</p><p>一通り目を通したところ、本書後半の特に「第 Ⅲ 部 効率的な開発の実現」の内容が、まさに「現場エンジニアとして最初に求められるスキル」を体系的に説明していると感じまして、今回の読書感想文連載の本として選ばせていただきました。</p><p>以下に、実践編の目次を記載します。</p><ul><li>第 0 章 Java を使いこなす技術者をめざそう</li><li>第 I 部 さまざまな基本機能<ul><li>「入門本」の理解を前提とした応用編</li></ul></li><li>第 Ⅱ 部 外部資源へのアクセス<ul><li>データベースやネットワークの利用</li></ul></li><li>第 Ⅲ 部 効率的な開発の実現<ul><li>チーム作業や品質を意識した開発について</li></ul></li><li>第 Ⅳ 部 より高度な設計をめざして<ul><li>デザインパターン、並列処理</li></ul></li></ul><p>本記事は「読書感想文」なので、特に目を引いた「第 Ⅲ 部 効率的な開発の実現（第 10 章 ~ 第 14 章）」のみを限定して取り上げます。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>章立てや中身の詳細を知りたい方は、インプレスブックスの<a href="https://book.impress.co.jp/books/1119101169">書籍案内</a>や、IT 入門書籍 スッキリシリーズの<a href="https://sukkiri.jp/books/sukkiri_javap3">書籍案内</a>をご覧ください。</p></div><h1 id="どんな人にオススメか？"><a href="#どんな人にオススメか？" class="headerlink" title="どんな人にオススメか？"></a>どんな人にオススメか？</h1><p>この「実践本」は、</p><ul><li>プログラミング経験はあるが、チーム開発は未経験の駆け出しエンジニア</li><li>研修は一通り完了し、配属までのアベイラブル期間の学習教材を探している新人</li><li>チームに新人を受け入れる予定だが、まずは何を教えるべきか迷っている人</li></ul><p>のようなステータスの方にオススメです。</p><p>本記事を執筆時点（2023 年 2 月下旬頃）の私は、新卒採用業務を担当しています。「採用」の業務範囲は幅広く、「会社説明会の準備・実施」「採用面接の調整・遂行」「学生向けのイベント企画・推進」「採用広報活動」などを進めております。</p><p>そんな業務の中では「当社に入社予定の新人さん」から HR 宛に質問をいただくこともあります。入社予定の学生さんから受ける質問には「入社後に活躍するために、入社前に何をやっておくべきですか？」というのが多くあります。「やっておいて欲しいこと」はもちろん沢山あるのですが、個々の状況により適切なアドバイスは変わってくるため、一律の回答が難しい質問です。なので私は、以下のように「プログラミング経験はあるか」と「Git によるコード共有を前提としたチーム開発の経験はあるか」という判断軸のもと、アドバイス内容を調整しております。</p><ul><li>プログラミング経験なし（グループ A）</li><li>プログラミング経験あり<ul><li>Git によるコード共有を前提としたチーム開発の経験がない（グループ B）</li><li>Git によるコード共有を前提としたチーム開発の経験がある（グループ C）</li></ul></li></ul><p>今回取り上げた「実践本（第 10 章 ~ 第 14 章）」がオススメなのは、特に「グループ B」に所属する方々です。<br>このグループに属する人達には、</p><ul><li>大学時代にプログラミングの経験あり</li><li>経験内容の大まかな方向性は<ul><li>Python 経済圏でのデータ分析</li><li>競技プログラミング</li><li>個人趣味レベルでの Web サービス開発（フレームワークを動かしてみた）</li></ul></li><li>Git の本格的な利用経験なし（コマンドは知っているが）</li><li>チーム開発の経験なし（別エンジニアとの共同作業経験なし）</li></ul><p>のように、これまでのプログラミングの範囲が「個人で完結」していたという特徴があります。</p><p>「IT によるアウトプット ≒ コーディング」のフレームでも十分なアウトプットが出せていた方々、とも表現できます。</p><p>本書はこのような、プログラミングの基本・基礎は身につけているが「チームでの開発経験」が不足しているエンジニアに読んでもらいたいと思います。また視点を変えると、チームに新人メンバーを受け入れる予定の上司エンジニアが「まず、キャッチアップして欲しい内容をリストアップするための参考教材」としても有効活用できると思います。</p><h1 id="感想メモ"><a href="#感想メモ" class="headerlink" title="感想メモ"></a>感想メモ</h1><p>第 10 章 ~ 第 14 章を読んで、特に「この考え方は現場で大事だな」と思ったところから、さらに厳選した 2 つです。</p><h2 id="線で捉える進捗と、面で捉える進捗"><a href="#線で捉える進捗と、面で捉える進捗" class="headerlink" title="線で捉える進捗と、面で捉える進捗"></a>線で捉える進捗と、面で捉える進捗</h2><p>仕事で大事なことの一つに、アウトプットの認識合わせがあります。より具体化すると、上司にとっての「ここまでやって欲しいライン」と、部下にとっての「これくらいやれば大丈夫のライン」という 2 つのラインについて、そのズレを早い段階で無くして「成果物に求められれるラインを双方で合意すること」が手戻りなく作業を進める上では重要です。この合意ラインの設定作業を怠って先に資料作成や開発作業を進めてしまうと、後になって「それ、聞いてないし間違っている。」からの手戻り作業で「もっと早く確認しておくべきだった。」の後悔ルートというのは、おおよそ殆どの新人が最初に通る道だと思います。（目線を変えると、新人は最初にこんな感じで転ぶことを知っている上司の元に配属になっていたら、その手戻り分も裏のバッファで考慮されていたりして、後から先輩社員の凄さに気づいたりします。）</p><p>開発フェーズでの具体的な認識合わせとしては「進捗確認」があります。チーム単位であれば毎日の朝会や、規模の大きいプロジェクトなら週次での「進捗確認」が開かれており、いろいろなドラマが繰り広げられているのだと思います。進捗確認にて、上司が不安になるタイミングの会話を再現すると、</p><p>（上司）「この A 機能、来週末にリリース予定ですが、開発進捗に問題ありませんか？」<br>（部下）「はい。開発は予定通りに進んでいまして、オンスケでリリース可能です。」</p><p>というものです。</p><p>この 2 人の間で既に「成果物の積み重ねに基づいた信頼関係」が築かれているならばこの会話でも違和感はありませんが、配属して間も無くあまり実績を残していない新人さんがこの回答を投げてきたら黄色信号だと思います。というのも、進捗を聞かれている時点で「上司は何かしらの問題を感じている」のであり、それを部下側は認知できていない（≒ 上司のここまでやって欲しいラインと、部下のここまでやれば大丈夫のラインがズレている）可能性があるからです。（もちろん、マイクロマネジメント的な属性を持つ場合や、1 人 1 人全員に進捗を聞くという非効率なマネジメント方法を取っているならば話は別ですが。）</p><p>私自身の経験やいくつかのプロジェクトを見てきて、この認識ズレは「進捗の捉え方」で説明可能なケース多く、本書の「線で捉える進捗と、面で捉える進捗」の進捗イメージによる説明がまさにその通りだと思いました。詳細内容は「実践本の p.407」を参照頂きたいのですが、ざっくり表現すると</p><p>① 進捗状況を、<strong>開発の 1 軸</strong> でイメージしているパターン<br>② 進捗状況を、<strong>開発と品質の 2 軸</strong> でイメージしているパターン</p><p>という 2 パターンの話です。もちろん、② が望ましい進捗把握です。</p><p>新人さんの進捗認識だと「進捗率は『完成した機能数と残りの機能数』で表現でき、0%~100%の間になる。全 5 機能中 3 機能完成しているならば、進捗率は 3&#x2F;5 で 60%である。残りは 40%なのでスケジュール的に問題なし。」だったとしても、レビュアーの視点では「機能開発は 60%進んでいるが、品質テストが十分になされておらず、リリース可能とは言い難い。」のように、視点の数で認識相違が発生するパターンです。① の視点だとオンスケで問題なしですが、② の視点だとアラート or リスケ調整というように、視点の違いで状況判断が反転することもあります。通常の開発進捗に加えて <strong>品質の視点</strong> を意識できているかどうかが、脱新人に向けた一歩になるのだと思います。</p><p>より上級職のマネジメントになると、視点の数がより増えて面を超えて立体で把握するだけにとどまらず、数多の経験から洗練された「進捗把握の視点」があるのだとろう思いました。普段の業務に加えて、読書により「代理経験」を積むことでより多くの視座を獲得することが重要なんだなと、改めて理解させられる内容でした。</p><h2 id="チームによる開発"><a href="#チームによる開発" class="headerlink" title="チームによる開発"></a>チームによる開発</h2><p>実践本の第 Ⅲ 部では「開発効率を向上する方法」が取り上げられ、その大枠として以下の 3 つが提示されています。</p><p>① 個人の知識と技能を上げる<br>② 道具を使う<br>③ 複数人で手分けする（つまり「分業」）</p><p>「実践本」では、① と ② に比べて ③ の分業は <strong>諸刃の剣</strong> であると指摘し、③ の「手分けしたことによって生じる非効率性」として以下の 2 点をあげています。</p><p>（1）連携が悪いと開発効率に悪影響を与える<br>（2）人数が増えるほど連携が難しくなる</p><p>「実践本」では上記問題を提示して以降はスコープを「開発者の連携」に絞り込み、Git によるソースコードの共有、アジャイルな開発話へと進んでいきます。<br>ここでは「諸刃の剣」について、ポストコロナの働き方を絡めて考えていきます。</p><p>プロジェクトでの働き方は「分業」が基本になるとはいえ、最初から業務が細分化されている訳ではありません。「規模の拡張に合わせて、メンバーを増員する」ことに伴い、これまで個人が処理していた業務が分割され、分割されたそれぞれの業務により細やかに対応できるようになる、ということが繰り返されるのが分業の進み方 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> だと思います。</p><p>この「メンバーの増員」についてはソフトウェア業界では昔からの難題らしく、<a href="https://www.amazon.co.jp/dp/B0998ZTVTD/">人月の神話</a>では「遅れているソフトウェアプロジェクトへの要員追加は、プロジェクトをさらに遅らせる」というブルックスの法則が語られています。なぜ人員追加が更なるスケジュールの遅延につながるかというと、新規メンバーの参画直後は「既存メンバーの作業リソースの一部を、新規参画メンバーのフォローアップに割り当てる必要がある」からです。もちろん人員追加は「フォローアップ後の活躍」を期待したものですが、プロジェクの状況次第ではこの「フォローアップ中の一時的な作業遅延」を許容できない（人員追加したはずが、アウトプット量が減ってしまうことが耐えられない）ために、既存メンバーがより疲弊することもあります。（この件の話は、<a href="https://www.amazon.co.jp/dp/B08KRHDS84/">Clean Agile 基本に立ち戻れ</a>に詳しい記述があります。）</p><p>また、業務の引き継ぎではなく、分業のためにメンバーを追加する場合はその新規メンバーに「担当範囲が限定される分、現状よりも細やかな対応を期待する」ということになり、フォローアップ期間の延長要因となります。メンバーのリモートワーク適正次第では、知らないうちに取り返しのつかないトラブルが発生していることもあります。</p><p>ポストコロナの働き方については巨人の肩に乗った方がより将来を見通せると思うので、中島聡さんの「<a href="https://www.amazon.co.jp/dp/B08ZCVBFQL">ニュー・エリートの時代 ポストコロナ「３つの二極化」を乗り越える</a>」参照すると、社会への進化圧として以下 3 つが進行するとの記載があります。</p><p>① 時代遅れな習慣の淘汰<br>② 職務の明確化<br>③ 個人の能力・生産性の可視化</p><p>これらの内容詳細は書籍を読んで頂きたいのですが、直近の数年に会社で進んだ「仕事の進め方の変化」を思い返すと、この進化圧に沿ったものが多くあるため、今後の「チームによる開発の進め方」についても、このような法則を踏まえた計画・設計・実践が必要になるのだと思いました。</p><p>また「実践本」では、「分業のメリットを最大限に発揮するために」という注意書きにて</p><blockquote><p>分業のデメリットを抑制し、メリットを享受するためには、連携を維持改善するための方法、道具、ループ、メンバーの努力が欠かせない。</p></blockquote><p>との記述に加えて、その直後に</p><blockquote><p>「くれぐれも、ただ席を並べているだけでチームメンバーになれるとは思うなよ。」</p></blockquote><p>という登場人物のセリフがあります。（p.468）</p><p>常に知識や方法論をアップデートしなければいつの間にか「席がなくなっている」かもしれないので、ナレッジの吸収と実践・発信は継続しなければと思いました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回は読書感想文連載ということで、オススメの本の紹介と、本を読んで触発された思考内容をフリーに書かせていただきました。色々な本を読むと「この内容、あの本では違う切り口で語られていた気がする。Kindle でもう一度読み直してみよう。お、いい感じにライン引いてメモが付いている。前の私はどんなメモを残したのだろうか」と思考が広がるのが面白かったりします。まだまだ積読本はたくさん眠っているので、引き続き消化していきたいと思います。</p><p>ここまで長文にお付き合いいただきありがとうございました。読書感想文連載はまだ続きますのでお楽しみに！</p><p>次は伊藤さんの<a href="/articles/20230228a/">「リーダブルコード」を読んでTerraformの可読性について考える</a>です。</p><hr><p><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> プロジェクトの初期メンが色々なことを知っているように見えるのは、業務が細分化される前に色々担当していただけで、より正確に言語化すると「1 つ 1 つの業務が細分化・詳細化されておらず、少人数でも回るレベルの作業量で業務が回っていた」だけなのだと思います。いざ初期メンが最前線に戻ってくると、実務ではあまり活躍できず、むしろ顔の広さを活用した調整役として動いてもらった方が有難かったりします。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230227a/top.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;567&quot;&gt;

&lt;h1 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
    <category term="新人研修" scheme="https://future-architect.github.io/tags/%E6%96%B0%E4%BA%BA%E7%A0%94%E4%BF%AE/"/>
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
  </entry>
  
  <entry>
    <title>プログラマーのためのCPU入門</title>
    <link href="https://future-architect.github.io/articles/20230224a/"/>
    <id>https://future-architect.github.io/articles/20230224a/</id>
    <published>2023-02-23T15:00:00.000Z</published>
    <updated>2023-02-27T04:14:48.973Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230224a/image.png" alt="image.png" width="862" height="1214" loading="lazy"><p><a href="/articles/20230217a/">読書感想文連載</a> 4冊目のエントリーです。なんか最近、積読が増えてきてしまったなーと思い、社内に読書連載しましょうよ、と投げたところ若い人も含めてぱぱっとすぐに人が集まってこのような連載ができて、良い会社に育っている！と思っているところです。集まるのが早すぎて本を急いで読む必要があって大変だったぐらいです。</p><p>で、僕が選びたかった本は、<a href="https://amzn.to/3lWq0jF">A Philosophy of Software Design</a>だったり、<a href="https://gihyo.jp/book/2022/978-4-297-12769-5">遠くへ行きたければ、みんなで行け</a>だったり、たくさんあったのですが、とりあえずスタックの一番上に積まれていた<a href="https://www.lambdanote.com/products/cpu">プログラマーのためのCPU入門</a>を読みました。</p><h1 id="CPUは地味に早くなっている"><a href="#CPUは地味に早くなっている" class="headerlink" title="CPUは地味に早くなっている"></a>CPUは地味に早くなっている</h1><p>僕が中学の、初めてパソコンを買った時は、お店で発売されている機種がi486 DX4(100MHz)から、i386 SX(16MHz)まで、上から下までの差が激しい時代でした。またパソコンも高かったので中古で買ったり、部室のパソコンは先輩のお下がり（それこそ5年以上落ち）という状況で、現役マシンの差が4MHzあたりから100MHzで数10倍は周波数が違うという感じでした。その後はどんどん周波数が上がり、大学のころにはAMDとインテルが競争して、1GHzを超えたと思ったらPentium 4の3.8GHzまで周波数はどんどん伸びていきました。また、ハイパースレッディングとか、デュアルコアとか性能もどんどん伸びていました。</p><p>その後は、ムーアの法則は終わりだ、と言われたりして、周波数は頭打ちになりました。最近になってブースト時は6GHzを公式に超えるようになりましたが、3GHzから6GHzまでは20年かかっています。クロック周波数自体はずっと2GHzとか3GHzあたりをずっと行ったり来たりしていますし、僕が買った10th CoreのMacBook Airは1.1GHzで周波数大幅に下がったりしています。数年前に知人が「なんか最近のパソコンはコア数は増えたりするけどあんまり変わり映えしないよね」とか言ってる人もいました。でも、そうじゃないんです。</p><p>自分で使ってみた（会社支給も含めて)のパソコンのCPUと、だいたいのシングルコアの性能をリストアップしたのが以下のものです。基本ノートばっかりで、途中で低消費電力モデルとかに変わったりしていますが、ガンガン伸びているのがわかります。なお、これはシングルコア性能なので、コア数が増えまくっている現在、マルチコア性能はさらに大きな差になっています。</p><div class="scroll"><table><thead><tr><th align="center">年</th><th align="center">CPUモデル</th><th align="center">周波数</th><th align="center">Geekbench Single Coreスコア</th></tr></thead><tbody><tr><td align="center">2010</td><td align="center">Core 2 Duo L9600</td><td align="center">2GHz</td><td align="center">300</td></tr><tr><td align="center">2011</td><td align="center">Core i7-2600QM</td><td align="center">2GHz-3GHz</td><td align="center">600</td></tr><tr><td align="center">2013</td><td align="center">Core i7-4500U</td><td align="center">1.8GHz-3GHz</td><td align="center">700</td></tr><tr><td align="center">2017</td><td align="center">Core i5-8250U</td><td align="center">1.6GHz-3GHz</td><td align="center">800</td></tr><tr><td align="center">2019</td><td align="center">Core i5-1030NG7</td><td align="center">1.1GHz</td><td align="center">1000</td></tr><tr><td align="center">2020</td><td align="center">Core i7-1185G7</td><td align="center">1.2GHz-3GHz</td><td align="center">1500</td></tr><tr><td align="center">2020</td><td align="center">Apple M1</td><td align="center">3.2GHz</td><td align="center">1700</td></tr><tr><td align="center">2022</td><td align="center">Apple M2</td><td align="center">3.4GHz</td><td align="center">1900</td></tr></tbody></table></div><p>まあ後半のインテルのモデルになると同じCPUでも熱設計で性能が大きく変わったり、ブースト時の性能だったり、いろいろあるのであくまでも数字は目安ですが、無視できないほど大きくなっているのがわかります。特に、Ryzenが元気なここ5-6年の競争による進化がすごいです。</p><p>なぜ5-6倍も性能が上がったのか、というのをすぐに言葉できちんと説明できる人はあまりいないと思います。最近、更新がなくなってしまい、Facebook（なぜか友達にしていただいた)上でも活動がみられなくて、悲しいのですが、<a href="https://pc.watch.impress.co.jp/docs/column/kaigai/index.html">後藤弘茂のWeekly海外ニュース</a>の連載をずっと読んでいた人であれば、「命令デコーダーが増えたのね」とかなんとなく強くなった部分のイメージがつくとは思いますが、そのなぜ、というのに、実験付きで数値の根拠も含めてわかりやすく説明してくれているのが本書です。</p><h1 id="CPU実験がおもしろい"><a href="#CPU実験がおもしろい" class="headerlink" title="CPU実験がおもしろい"></a>CPU実験がおもしろい</h1><p>本書は、豊富な図で(<a href="https://www.lambdanote.com/products/cpu">LambdaNoteのページでサンプル見れます</a>)、CPUが行っている数々の仕事が説明されています。最初はスーパースカラなどの高速化技法だったりしますが、中盤からは、OSが要求する複雑な機構（仮想メモリとかシステムコールとか）などを、CPUがどう扱っているのかを説明してくれます。後半になると、キャッシュの整合性（コヒーレンス）、メモリモデル、マルチコアなどの説明になっていきます。</p><p>高速化の機構の効果と、それが失敗したときにどれぐらいペナルティがあるのかをアセンブラのプログラムで見せてくれます。本当に、ちょっとした違いで性能が数倍も変わるような、鮮やかな実験結果が見せてくれているのはありがたいな、と思いました。</p><p>同じジャンルの類書としては<a href="https://gihyo.jp/book/2011/978-4-7741-4521-1">WEB+DB PRESS plusシリーズのプロセッサを支える技術</a>もあり、これも良い本なのですが、プログラムを高速に書きたい人向けという視点で書かれており、この実験があるのが大きな違いだな、と思いました。あとは、ARMやRISC-Vについても解説してくれています。アセンブラにもちょっと親しみを持てる本です。</p><h1 id="個人的に面白かった章"><a href="#個人的に面白かった章" class="headerlink" title="個人的に面白かった章"></a>個人的に面白かった章</h1><p>言葉としては知っているが、どういう実装になっていたのかがいまいちわからなかった4章の予測分岐と、5章のキャッシュですね。内部の仕組みまで解説されていますし、性能アップに効くL1キャッシュがなぜこれ以上大きく増やせないのか、といったことがわかる章になっていました。</p><p>僕がちょっと深く知りたいな、と思っていて、まさにストレートに知りたい情報があったのが11章のメモリの順序付け、いわゆるメモリモデルの話です。<a href="https://future-architect.github.io/articles/20220808a/">Go 1.19ではメモリモデルが更新されたよ</a>、という更新があり、がんばって英語のドキュメントを何本も読んで解説を書いたりしたのですが、どのような不整合がありえるのか、というのが豊富な絵と事例で紹介されていてよくわかりました。</p><p>あとは、<a href="https://netflixtechblog.com/seeing-through-hardware-counters-a-journey-to-threefold-performance-increase-2721924a2822">Netflixの64バイトのキャッシュを意識した改善で性能3.5倍</a>という話が、いまいち理解できなかったのですが、この本をみながらだと「わかる！わかるぞ！」と読めます。関係ないですが、<a href="https://www.netflix.com/jp/title/81231974">NetflixのWednesday</a>を最近みているのですが、面白いです。4話まで見ました。</p><h1 id="もう少し知りたかったこと"><a href="#もう少し知りたかったこと" class="headerlink" title="もう少し知りたかったこと"></a>もう少し知りたかったこと</h1><p>本書は、コンパクトにまとまっているし、CPUが自分で実装できるほどの情報はなく、その上で動くソフトウェア開発者が道具として使うのに便利な情報に割り切って書かれている気がするので、今後改訂がされてもあまり増えることはないかもしれませんが、マイクロコードの違いみたいなのをもっと知りたいな、と思いました。</p><p>書籍でもIntelとかのサイトへのリンクは貼られているのですが、同じARMでも吊るしのARM製の実装と、Appleの実装、そしてSparcを作ってきた富士通のA64FX。それぞれだいぶ性能差もあるし、命令セットは同じだとしても内部は全然違いますし。RISC-Vも命令セットはオープンだけど、実装によってだいぶ変わりそうだし、今まで以上にマイクロコードの違いを意識する時代になっていきそうだなーとなんとなく思っています。</p><p>あとは、M1&#x2F;M2が、Intelのエミュレーション向けにメモリモデルを変えているとかなんとかという話を見かけた気がするのでそのあたりもちょっと知りたかったな、と。まあどちらも知りたい人は読者の1&#x2F;100ぐらいかもしれませんが。</p><p>あとは、最近モバイルCPUによく詰まれ始めたNPU。どんなもので、どういう気持ちで動いているのかがわからないので、別の本でもいいので書いて欲しい！と思っています。本書の内容からは大きくはずれちゃいますが。</p><h1 id="ぜひGoならわかるシステムプログラミングの読者も"><a href="#ぜひGoならわかるシステムプログラミングの読者も" class="headerlink" title="ぜひGoならわかるシステムプログラミングの読者も"></a>ぜひGoならわかるシステムプログラミングの読者も</h1><p>僕は実は、<a href="https://www.lambdanote.com/products/go-2">Goならわかるシステムプログラミング</a>という本を書いていたりするのですが、この本は、自分の本とセットでぜひ読んでもらいたいな、と思う内容も多かったです。実は2版の3刷の増刷で、参考文献に足させてもらったりしました。CPUの核の高速化の部分は僕の本当はあまりオーバーラップはしないのですが、第6章の仮想記憶、第7章のI&#x2F;O、第8章のシステムコール、例外、割り込み、第12章の不可分操作あたりは、この本を一緒に読んでもらうと、理解が一層進みそうな気がします。よりCPUの気持ちがわかると思います。</p><p>不可分操作は、ミューテックスやロックがないので、ソースコード上は「ロックフリーじゃん」と思って、結構良いものでは、と思ったのですが、実はこんなにペナルティがあるよ、というのは新鮮でした。　Go上でもきちんと測定しないといかんですね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>これを読んだら誰もがスーパーエンジニアになれるわけではないのですが、スーパーエンジニアなら理解した方が良いだろうことが書かれている本です。というよりも、今まではごく一部のすごい人が知っている知識であったものが、この本が出版されてしまったことで、スーパーなエンジニアなら当然知っているよね？という水準がぐっと上がったように思います。僕もさらなるスキルアップのために、枕元に置いて生活しようと思います。</p><p>また、前に触れた後藤さんの連載を追いかけてこなかった人も、この本を読むと、最近のCPUの工夫の一旦の知識レベルが一定水準までぐっと底上げされると思います。<a href="https://qiita.com/hotpepsi/items/3cbc865b1742e2aa61a8">他の書評</a>にあったように、省電力周りとかはなかったりもしますが、この辺りの知識があると、日々のニュースの中でCPUネタとか半導体ネタに対する情報感度や解像度があがって、楽しくなると思うのですよね。ぜひ、おすすめです。</p><p>次は棚井さんの<a href="/articles/20230227a/">スッキリわかるJava 実践編 第3版</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230224a/image.png&quot; alt=&quot;image.png&quot; width=&quot;862&quot; height=&quot;1214&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
    <category term="CPU" scheme="https://future-architect.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>スモールデータ解析と機械学習 を読んだ感想</title>
    <link href="https://future-architect.github.io/articles/20230222a/"/>
    <id>https://future-architect.github.io/articles/20230222a/</id>
    <published>2023-02-21T15:00:00.000Z</published>
    <updated>2023-02-24T07:59:24.774Z</updated>
    
    <content type="html"><![CDATA[<p>積読を消化しようというテーマの、<a href="/articles/20230217a/">読書感想文連載</a> の3冊目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>2022年12月キャリア入社の大村俊輔です。</p><p><a href="https://www.kaggle.com/">Kaggle</a>(競技データサイエンス)、<a href="https://atcoder.jp/">AtCoder</a>(競技プログラミング)等の趣味が高じてフューチャーに入社しました。このような背景の人がフューチャーに入社後、何が不足していると感じ、どのようにそれを埋めていこうとしているのか。といった目線でお読みいただければ幸いです。</p><img src="/images/20230222a/51yTAYkJ9XL._SY291_BO1,204,203,200_QL40_ML2_.jpg" alt="" width="207" height="293" loading="lazy"><h2 id="本書を読んだ背景"><a href="#本書を読んだ背景" class="headerlink" title="本書を読んだ背景"></a>本書を読んだ背景</h2><p>入社後最初に配属されたプロジェクトで、とあるデータからの予測タスクを任されました。私も一応Kaggle等のコンペの経験者なので、予測タスクの土地勘はあります。まずはデータをLightGBMに入れてベースラインを作り、その後でクロスバリデーション(CV)の結果を見ながら特徴量を追加したり、ニューラルネットワーク系のモデルを中心に試す感じでしょうか。</p><h4 id="早速コンペの経験が活きそうです！"><a href="#早速コンペの経験が活きそうです！" class="headerlink" title="早速コンペの経験が活きそうです！"></a>早速コンペの経験が活きそうです！</h4><p>ですが、受け取ったデータはデータ数が300くらいしかありません。これはいわゆるスモールデータ。基礎的なデータ解析の力が重要になる分析です。</p><h4 id="私の経験だけでは足りません！"><a href="#私の経験だけでは足りません！" class="headerlink" title="私の経験だけでは足りません！"></a>私の経験だけでは足りません！</h4><p>当然データサイエンスの基礎をきちんと学んだ上でコンペに参加している方であれば話は違うはずです。しかし私は、必要になった知識を都度学ぶスタイルで、データサイエンスの基礎を体系的に学んだ経験がありません。ですので、経験のある分野ではある程度のパフォーマンスを出せると思いますが、何か初歩的な内容で不足してる知識があるかもしれません。このままプロジェクトに入るのは不安です。</p><p>また、上司に聞いても、スモールデータの分析はよくあるとのことです。</p><h4 id="良い機会なので、ここでしっかり基礎を固めておきましょう。"><a href="#良い機会なので、ここでしっかり基礎を固めておきましょう。" class="headerlink" title="良い機会なので、ここでしっかり基礎を固めておきましょう。"></a>良い機会なので、ここでしっかり基礎を固めておきましょう。</h4><p>というわけで、前置きが長くなりましたが、このような背景で本書を読んで学ぶことにした者による書評です。</p><h2 id="本書の概要"><a href="#本書の概要" class="headerlink" title="本書の概要"></a>本書の概要</h2><p>ビッグデータを扱う際は、CVの結果を見て特徴量やモデルを選定する方法が有効ですが、スモールデータの解析では、誤差の影響が大きくなるためCV結果以外の重要度が高くなります。</p><p>本書はそのような背景を踏まえ、重回帰分析の重要性、理論的な背景、実際に適用する上での注意事項や対処方法の提案等に重点が置かれています。</p><p>また、通常のデータサイエンスの書籍は、複雑な式が多く理解するのは難しいですが、本書では、複雑な式をわかりやすいPythonコードに落とし込んだ説明が多く、競技プログラミングや競技データサイエンスの素養のある方には理解しやすくなっていると感じました。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><p>章立ては下記の通りです。</p><details><summary>第１章　スモールデータとは</summary><dd>1.1  ビッグデータからスモールデータへ</dd><dd>1.2  スモールデータ解析の特徴</dd><dd>1.3  本書の構成</dd></details><details><summary>第２章　相関関係と主成分分析</summary><dd>2.1  データの前処理</dd><dd>2.2  共分散と相関関係</dd><dd>2.3  相関関係≠因果関係</dd><dd>2.4  多変数間の相関関係</dd><dd>2.5  主成分分析(PCA)とは</dd><dd>2.6  データの特徴</dd><dd>2.7  第1主成分の導出</dd><dd>2.8  第r主成分の導出</dd><dd>2.9  PCAの数値例</dd><dd>2.10 主成分数の決定</dd><dd>2.11 PCAの行列表現</dd><dd>2.12 PCAと特異値分解</dd></details><details><summary>第３章　回帰分析と最小二乗法</summary><dd>3.1  回帰分析とは</dd><dd>3.2  最小二乗法</dd><dd>3.3  回帰係数と相関係数</dd><dd>3.4  最小二乗法の幾何学的意味</dd><dd>3.5  ガウス-マルコフの定理</dd><dd>3.6  最尤法と最小二乗法</dd><dd>3.7  多重共線性の問題</dd><dd>3.8  サンプル数が入力変数の数よりも少ない場合</dd><dd>3.9  疑似逆行列を用いる方法</dd><dd>3.10 主成分回帰(PCR)</dd><dd>3.11 リッジ回帰</dd><dd>3.12 部分的最小二乗法(PLS)</dd><dd>3.13 PLS1モデルの導出</dd><dd>3.14 PLS1モデルのNIPALSアルゴリズム</dd><dd>3.15 重回帰モデルへの変換</dd><dd>3.16 出力変数が複数ある場合(PLS2)</dd><dd>3.17 PLSと固有値問題・特異値分解</dd><dd>3.18 ハイパーパラメータの調整</dd><dd>3.19 回帰モデルの性能評価</dd><dd>3.20 分光分析による物性推定</dd><dd>　　3.20.1 分光法</dd><dd>　　3.20.2 ディーゼル燃料の物性推定</dd></details><details><summary>第４章　線形回帰モデルにおける入力変数選択</summary><dd>4.1  オッカムの剃刀とモデルの複雑さ</dd><dd>4.2  赤池情報量規準(AIC)</dd><dd>4.3  ステップワイズ法</dd><dd>4.4  Lasso回帰</dd><dd>　　4.4.1 リッジ回帰に近似する方法</dd><dd>　　4.4.2 最小角回帰(LARS)</dd><dd>4.5  PLS向けの変数選択手法</dd><dd>4.6  相関関係に基づいた変数クラスタリングによる入力変数選択</dd><dd>　　4.6.1 クラスタリング</dd><dd>　　4.6.2 k-平均法</dd><dd>　　4.6.3 NCスペクトラルクラスタリング(NCSC)</dd><dd>　　4.6.4 NCSCの例題</dd><dd>　　4.6.5 NCSCを用いた入力変数選択(NCSC-VS)</dd><dd>4.7  NIRスペクトルの検量線入力波長選択</dd></details><details><summary>第５章　分類問題と不均衡データ問題</summary><dd>5.1  分類問題とは</dd><dd>5.2  線形判別分析</dd><dd>5.3  線形判別分析とレイリー商</dd><dd>5.4  カットオフの決定</dd><dd>5.5  線形判別分析と最小二乗法</dd><dd>5.6  分類モデルの性能評価</dd><dd>5.7  ROC曲線とAUC</dd><dd>5.8  線形判別分析における不均衡データ問題</dd><dd>5.9  データの不均衡度</dd><dd>5.10 サンプリング手法</dd><dd>5.11 アンダーサンプリング</dd><dd>　　5.11.1 サンプル選択型アンダーサンプリング</dd><dd>　　5.11.2 サンプル生成型アンダーサンプリング</dd><dd>　　5.11.3 オーバーサンプリング</dd><dd>　　5.11.4 アンダーサンプリングとオーバーサンプリングの組み合わせ</dd><dd>5.12 アンサンブル学習</dd><dd>5.13 判別木</dd><dd>5.14 バンキングとランダムフォレスト</dd><dd>5.15 ブースティング</dd><dd>　　5.15.1 AdaBoost</dd><dd>5.16 サンプリング手法とアンサンブル学習の組み合わせ</dd><dd>5.17 不均衡データにおける性能評価</dd><dd>5.18 ケーススタディ</dd><dd>　　5.18.1 データセットの準備</dd><dd>　　5.18.2 モデルの学習</dd><dd>　　5.18.3 モデル学習結果</dd></details><details><summary>第６章　異常検知問題</summary><dd>6.1  局所外れ値因子法(LOF)</dd><dd>　　6.1.1 局所密度</dd><dd>　　6.1.2 到達可能性距離</dd><dd>6.2  アイソレーションフォレスト</dd><dd>6.3  多変量統計的プロセス管理(MSPC)</dd><dd>　　6.3.1  USPCとMSPC</dd><dd>　　6.3.2  T<SUP>2</SUP>統計量とQ統計量</dd><dd>　　6.3.3  寄与プロットによる異常診断</dd><dd>6.4  オートエンコーダ(AE)</dd><dd>6.5  管理限界の調整</dd><dd>6.6  時系列データの取り扱い</dd><dd>6.7  砂山のパラドックス</dd><dd>6.8  Tennessee Eastman プロセスの異常検知</dd><dd>　　6.8.1  TEプロセス</dd><dd>　　6.8.2  データの前処理</dd><dd>6.9  モデルの学習と異常検知</dd><dd>6.10 異常検知結果</dd><dd>　　6.10.1 異常診断</dd></details><details><summary>第７章　データ収集や解析の心構え</summary><dd>7.1  機械学習の手順</dd><dd>7.2  そもそもデータを使って何をやりたいのか</dd><dd>7.3  PICO</dd><dd>7.4  データの文脈を理解する</dd><dd>7.5  現地現物と三現主義</dd><dd>7.6  現場とのコミュニケーション</dd><dd>7.7  解析データセット構築に責任を持つ</dd><dd>7.8  どうしてもうまくいかないときは</dd></details><details><summary>付録</summary><dd>A.1  標本分散と母分散</dd><dd>A.2  LARSアルゴリズム</dd><dd>A.3  Mcut法と固有値問題</dd><dd>A.4  主成分分析と自己符号化器の関係</dd></details><h2 id="本書の良かった-役に立った-点"><a href="#本書の良かった-役に立った-点" class="headerlink" title="本書の良かった(役に立った)点"></a>本書の良かった(役に立った)点</h2><h3 id="2-3章"><a href="#2-3章" class="headerlink" title="2,3章"></a>2,3章</h3><p>2,3章では、重回帰分析の理論的な背景,共分散の回避方法等について述べられています。</p><p>Kaggle等に参加する方であれば、それらがどのようなものか、「ある程度の知識」をお持ちの方が多いと思います。しかし、プロジェクトで行うデータ解析は、社内や、クライアント等とのチームで進めるものです。よって必要な知識、理解のレベルは、自分で使えれば良いレベルではなく、他者に説明できて、プロジェクトを進められるレベルです。</p><p>本章を通じ、重回帰分析の長所と短所、なぜ共分散を回避しなければならないのか、回避する選択肢として選べる方法等の理解を深めました。そして今も、「ある程度の知識」レベルから他者に説明しながらプロジェクトを進められるレベルを目指して学習しています。</p><h3 id="4章"><a href="#4章" class="headerlink" title="4章"></a>4章</h3><p>4章では特徴量の選択について述べられています。</p><p>予測に使用する特徴量は、ドメイン知識等から決定できれば良いですが、常にそれができるとは限りません。プロジェクト進行上本章の内容はまだ直接役立ってはいませんが、一般的に用いられる特徴量選択手法の中から目的に合った方法を選択・提案し、チームの納得を得て使用する特徴量を採択する場面が生じるはずです。本章により体系的な知識の備えができたことで、自信を持ってプロジェクトに携わることができています。</p><h3 id="5章"><a href="#5章" class="headerlink" title="5章"></a>5章</h3><p>5章は不均衡データへの対応について述べられています。</p><p>異常値検出等、分類タスクの中にはクラス毎のデータ数が著しく偏っているケースもあります。そのような場合に、どのようにサンプリングするか、結果を評価するか等が中心です。この辺りは、コンペの経験者であれば何度か痛い目に合って身につけた内容かと思います。ただ、体系的に学ぶことができましたので、今後このような場面でも、基本的な知識で不足しているものがないか不安を覚えることなくタスクに取り組むことができます。</p><h2 id="本書では扱わない点"><a href="#本書では扱わない点" class="headerlink" title="本書では扱わない点"></a>本書では扱わない点</h2><p>scikit-learn等のライブラリを使用した実用的なコードに関しては本書の対象外です。そちらが必要な場合は、他で学習する必要がありますので、ご注意ください。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>データ解析の分野を１冊の本で理解できることは少ないと思いますが、競技データサイエンス、競技プログラミング出身の方等で、数式よりもPythonコードの方が理解が速い、という方の学習に役に立つ１冊だと感じました。</p><p>これからも新しい業務と出会えるたびに学び直しを行いますが、その際に使用した書籍を記事にしていきたいと思います。</p><p>次は、澁川さんの<a href="/articles/20230224a/">プログラマーのためのCPU入門</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;積読を消化しようというテーマの、&lt;a href=&quot;/articles/20230217a/&quot;&gt;読書感想文連載&lt;/a&gt; の3冊目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="機械学習" scheme="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/"/>
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
  </entry>
  
  <entry>
    <title>「実践Redis入門」所感 ~「E.G.コンバット」の観点から語る~</title>
    <link href="https://future-architect.github.io/articles/20230221a/"/>
    <id>https://future-architect.github.io/articles/20230221a/</id>
    <published>2023-02-20T15:00:00.000Z</published>
    <updated>2023-02-22T08:18:27.368Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230221a/redis.jpg" alt="" width="400" height="500"><p>積読を消化しようというテーマの、<a href="/articles/20230217a/">読書感想文連載</a> の2冊目です。</p><h2 id="導入"><a href="#導入" class="headerlink" title="導入"></a>導入</h2><p>『自分たちは、クラウドネイティブじゃなくてマネージドネイティブなんだよ…』</p><p>TIGの原木です。</p><p>最近、冒頭のような開発者の嘆きを人づてに聞く機会があり、今も脳裏に残り続けています。</p><p>昨今のITシステムにおいて、クラウドサービスは欠かせないものとなっています。しかしユーザー、そして開発者として大きな利便性を享受する裏で、クラウドサービスによって巧妙に隠蔽された裏のソフトウェアを意識する機会は減り続けているのではないでしょうか？</p><p>Webサービスにおいて、RedisやMemcachedに代表されるキャッシュサーバーもそのようなソフトウェアの1つです。</p><p>キャッシュサーバーは、Webアプリケーションなどデータの読み込みや保存を効率化するために欠かせない存在ですが、同じデータストアであるRDBMSなどと比較していま一歩隠れた存在だと思います。</p><p>RDBMSならDBAやテーブル設計のスペシャリストが割り当てられるようなことがあっても、キャッシュサーバーなら他の専門職が兼任することは少なくありません。</p><p>「実践Redis入門」は、そのような現状に対する問題提起のきっかけとなりました。</p><h2 id="実践Redis入門とは？"><a href="#実践Redis入門とは？" class="headerlink" title="実践Redis入門とは？"></a>実践Redis入門とは？</h2><p>「実践Redis入門」は、2023年現在AWSのAmazon EMR開発チーム、システム開発エンジニアとして働いている林 昌吾さんという方が書かれた『Redisの基礎から、実践、運用や調査に役立つ仕様などの詳細について解説した入門書です。』</p><p>入門書とありますが、単なる機能紹介にとどまらず、筆者が実際にRedisを運用して培った知見が450ページにわたってこれでもかと詰め込まれており、Redisを扱う上で末長くお付き合いするであろう本だと思います。</p><p>本書は下記の通り三部構成になっています。</p><ul><li>基本<ul><li>第1章~第4章</li><li>Redisの概要、基本的なデータ型やコマンド、アプリケーションの構築事例について説明しています</li></ul></li><li>実践・運用<ul><li>第5章~第10章</li><li>Redisの運用で必要となるパフォーマンスチューニングや耐障害対応、Redisを支えるメモリー管理制御、Amazon ElastiCache for Redisについて説明しています</li></ul></li><li>発展<ul><li>第11章</li><li>Redisの開発という側面から、運用時に必要な知見について説明しています</li></ul></li></ul><p>このブログでは、「実践Redis入門」を自分の愛読書に絡めてご紹介したいと思います。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>本書の中身や構成を正確に知りたい方は、技術評論社の <a href="https://gihyo.jp/book/2022/978-4-297-13142-5">書籍案内</a>をご覧ください。</p></div><h2 id="「E-G-コンバット」に学ぶ"><a href="#「E-G-コンバット」に学ぶ" class="headerlink" title="「E.G.コンバット」に学ぶ"></a>「E.G.コンバット」に学ぶ</h2><p>「実践Redis入門」って「E.G.コンバット」に出てきそうだな…というのが初見の印象でした。</p><p>「E.G.コンバット」を知らない方に説明すると、原著は秋山瑞人という方が25年前に執筆、電撃文庫より出版されたSF小説です。あらすじに軽く触れると、戦場から左遷された歴戦の英雄が月の訓練校教官として劣等生ばかりの訓練生を任されて、七転八倒するという話になります。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>なぜ、そんな小説と本書を結び付けたかというと、背景にはクラウドサービスが当たり前のように存在し、AIが開発現場で使われるようになった昨今の状況が小説の舞台とよく似ていたからです。</p><ul><li>現在: クラウドサービスが浸透したことでインフラエンジニアの仕事は、従来の調達、構築、設定といった定型的な業務から非機能要件のチェックや運用費の見積もりという、より正解のない業務へ変わりつつあります。<ul><li>小説: 自分の役割や生き残るための方法という正解のない問いが数多く出てきます。</li></ul></li><li>現在: ChatGPT、Prometheusが組み込まれたBingやGitHub Copilotが、プロンプトやコメントに従ってプログラムを自動生成するのを見て、コーディングいらねーじゃん…と自虐的なぼやきを聞くようになりました。<ul><li>小説: 流体脊髄と呼ばれる支援AI<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>が当たり前になった世界で同様の疑問が出てきます。</li></ul></li></ul><p>現状の変化は少なからず、自分たちITエンジニアのマインドにも影響を与えています。そんな中で、小説の中で描写されたメッセージが「実践Redis入門」に、そして25年後の現代<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>にも強く通じると思います。</p><p>それはいったいどんなメッセージでしょうか？</p><p>まずは「E.G.コンバット」からトピックを取り上げたいと思います。</p><h2 id="「E-G-コンバット」の見どころ-その1"><a href="#「E-G-コンバット」の見どころ-その1" class="headerlink" title="「E.G.コンバット」の見どころ: その1"></a>「E.G.コンバット」の見どころ: その1</h2><p>「E.G.コンバット」の第1巻では、教官は訓練生らに対して、双脚砲台と呼ばれる自立型兵器を支援AIのアシスト無しで、手動で起動するように求められる姿が描かれます。</p><p>当初やり方も知らなかった彼女らが最初からうまくいくはずがありません。当然のように失敗を繰り返し、トライアンドエラーを積み重ねます。延々と繰り返される訓練はやがて苛立ちとなり、教官に不満が爆発しました。</p><blockquote><p>「こっちが聞きたいね！ 何のためのシミュレーションだよ？ 流体脊髄凍結させて訓練してるのなんてうちらだけだぞ！ GARP(注: 支援AIの愛称)の支援を受けないことに何の意味があるんだよ!?」</p></blockquote><p>教官は冷静に受け止めました。</p><blockquote><p>「では聞く」ルノアは一度、全員の顔を見渡してから、静かに口を開いた。</p><p>「それではなぜ、最初から最後までGARPにやらせなかった？ 少なくとも今の段階では、GARPはお前ら全員を合わせたよりもずっとましな操機をする。GARPに全部任せてしまえば、フラグを五つも取りこぼさずにすんだはずだし、味方を三度も誤射せずにすんだはずだ」</p><p>全員が言葉に詰まった。しかし、現実には──ルノアのとどめは冷酷だった。</p><p>「なぜ、お前らはここにいる？」</p></blockquote><hr><p>この場面、辛辣な言葉ではありますが、教官も疑問に答えて直接回答をしているわけではありません。</p><p>訓練生が聞きたいのは、どうすれば双脚砲台を手動で起動できるのか、手順や機能の抽象的な説明ではなく、それらの機能の知識がどのような開発&#x2F;運用状況で生きるのかという訓練目的です。</p><p>教官は教官で、戦場上がり故に『実戦で(目的を)説明されなければできないようではだめだ』とコミュニケーションに不足している節があり、両者の不幸なすれ違いは今しばらく続くことになります。</p><p>そもそも、高度にシステムが自動化された世界で、あえて手動による兵器運用という訓練をなぜ教官は行っているのでしょうか…？</p><p>その真意について解き明かす前に「実践Redis入門」の推しポイントについて説明したいと思います。</p><h2 id="「実践Redis入門」の良いところ-機能説明と開発-x2F-運用の関連"><a href="#「実践Redis入門」の良いところ-機能説明と開発-x2F-運用の関連" class="headerlink" title="「実践Redis入門」の良いところ: 機能説明と開発&#x2F;運用の関連"></a>「実践Redis入門」の良いところ: 機能説明と開発&#x2F;運用の関連</h2><p>往々にして、一般的な入門書にもこの教官のように真意に直接答えないわかりづらさがあります。</p><p>一見、具体的でいて抽象的な機能説明が続き、その目的について迷子になることも珍しくありません。</p><p>しかし、「実践Redis入門」は機能説明を詳細に行いつつも</p><ul><li>Redisを利用してWebアプリケーションを構築したい開発者</li><li>Redisを使ったシステムを安定的に稼働したい運用者</li></ul><p>というどちらの対象者の目的も違えぬ素晴らしい本でした。</p><p>たとえば、「実践Redis入門」第6章「トラブルシューティング」では、章題の通り、Redisで問題が発生した時にどのように問題を切り分ければよいか、解消のヒントがどのようなメトリクス情報に隠されているかを解説した、筆者肝いりの内容となっています。</p><p>パフォーマンスチューニングが、開発者、運用者と立場を問わず重要なことは言うまでもありません。</p><p>しかし、開発者目線で実際に <code>INFO</code> コマンドの内容を見てくださいと言われたら、13個のセクションにわたって出力された内容は辛うじて <code>Memory</code> は追えるものの、どれを見ればボトルネックが解決できるのか、宇宙猫となること間違いないでしょう。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span>  <p></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">INFOコマンドによるメモリー使用量の内訳の様子</span></span><br><span class="line">127.0.0.1:6379&gt; INFO Memory</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Memory</span></span><br><span class="line">used_memory:960080</span><br><span class="line">used_memory_human:937.58K</span><br><span class="line">used_memory_rss:13864960</span><br><span class="line">used_memory_rss_human:13.22M</span><br><span class="line">used_memory_peak:1089232</span><br><span class="line">used_memory_peak_human:1.04M</span><br><span class="line">used_memory_peak_perc:88.14%</span><br><span class="line">used_memory_overhead:864192</span><br><span class="line">used_memory_startup:862208</span><br><span class="line">used_memory_dataset:95888</span><br><span class="line">used_memory_dataset_perc:97.97%</span><br><span class="line">allocator_allocated:1385200</span><br><span class="line">allocator_active:1683456</span><br><span class="line">allocator_resident:5099520</span><br><span class="line">total_system_memory:8287895552</span><br><span class="line">total_system_memory_human:7.72G</span><br><span class="line">used_memory_lua:31744</span><br><span class="line">used_memory_vm_eval:31744</span><br><span class="line">used_memory_lua_human:31.00K</span><br><span class="line">used_memory_scripts_eval:0</span><br><span class="line">number_of_cached_scripts:0</span><br><span class="line">number_of_functions:0</span><br><span class="line">number_of_libraries:0</span><br><span class="line">used_memory_vm_functions:32768</span><br><span class="line">used_memory_vm_total:64512</span><br><span class="line">used_memory_vm_total_human:63.00K</span><br><span class="line">used_memory_functions:184</span><br><span class="line">used_memory_scripts:184</span><br><span class="line">used_memory_scripts_human:184B</span><br><span class="line">maxmemory:0</span><br><span class="line">maxmemory_human:0B</span><br><span class="line">maxmemory_policy:noeviction</span><br><span class="line">allocator_frag_ratio:1.22</span><br><span class="line">allocator_frag_bytes:298256</span><br><span class="line">allocator_rss_ratio:3.03</span><br><span class="line">allocator_rss_bytes:3416064</span><br><span class="line">rss_overhead_ratio:2.72</span><br><span class="line">rss_overhead_bytes:8765440</span><br><span class="line">mem_fragmentation_ratio:14.76</span><br><span class="line">mem_fragmentation_bytes:12925552</span><br><span class="line">mem_not_counted_for_evict:0</span><br><span class="line">mem_replication_backlog:0</span><br><span class="line">mem_total_replication_buffers:0</span><br><span class="line">mem_clients_slaves:0</span><br><span class="line">mem_clients_normal:1800</span><br><span class="line">mem_cluster_links:0</span><br><span class="line">mem_aof_buffer:0</span><br><span class="line">mem_allocator:jemalloc-5.2.1</span><br><span class="line">active_defrag_running:0</span><br><span class="line">lazyfree_pending_objects:0</span><br><span class="line">lazyfreed_objects:0</span><br></pre></td></tr></table></figure><p>これって、日常的にキャッシュサーバーの運用をしている方にはどう見えているのでしょうか...</p></div><p>本書を読めば、そのうちどの辺を最低限抑えればいいのかという指標について解説されているのでスコープを決めることができます。「6.2. レイテンシーの調査」、「6.3. メモリー問題」で必要とする別のコマンド ( <code>SLOWLOG</code> や <code>MEMORY STATS</code> 等)と合わせて苦しみながら頭に入ってきます。</p><p>個人的にはメモリのフラグメンテーションに関して、放置するとパフォーマンス低下～ページング～メモリ不足に至るガンみたいなやつだと雑な理解にとどまっていたのですが、メトリクスの見方やスペシャリストの肌感覚が掲載されており、勉強になりました。</p><p>(カンファレンスなど機会があったら、この辺AWSのGameDayっぽく実演されている姿も正直拝見したいです)</p><p>このように煩雑になりがちな「機能の説明」も、「開発&#x2F;運用でどのように生かされるのか？」というプロセスを踏むことで筆者の実戦経験をもとに関連付けて覚えられるので、Redisの運用の素人である私にも理解が進みました。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span></p><p>個人的に印象に残ったのは、第5章「Redisの運用管理」のコラムであるRDBファイルのフォーマットに関する話です。</p><p>RDBファイルとは、Redisがメモリー上に蓄えたデータをスナップショットとして永続ストレージに出力するときに使うファイルの形式です。本書ではスナップショットを取得するときの手順はもちろんのこと、RDBファイルのバイナリー形式のフォーマットの仕様についても踏み込んで解説されています。</p><p>「運用者がダンプファイルのデータ形式なんて知る必要あるのか？」と思われた方がいるかもしれません。ですが、その理由について、本書では次の通り順序だててフォローされています。</p><ul><li>RDBファイルのAUXフィールドと言われる領域に <code>redis-ver</code> というバージョンに関するメタ情報が埋め込まれていること</li><li>RDBのバージョンはRedisのバージョンに連動すること</li><li>RDBのバージョン互換性を吸収する機能があるので、マスターとレプリカのエンジンのバージョン差異を気にせずに、同じバージョンのRDBをレプリケーションできること<ul><li>古いバージョンのRedis(3.2.1以前)だとRDBのバージョン互換性がないので、上記機能は使えないこと</li></ul></li><li>古いバージョンのまま放置し続けてしまったキャッシュノードに対してレプリケーションできるかというときにこのバージョン情報が判断材料になること</li><li>逆にそれより新しいバージョンのRedisであれば、現行バージョンのレプリケーションを組んでおくことで、 <strong>Redisのバージョンアップ時にダウンタイムを小さくすることができること</strong></li></ul><p>ソフトウェアのバージョンアップという運用負荷が特に高い作業において、RDBのバイナリから読み取ったバージョン情報を頭にいれておくことで、結果として手続きが楽になるんですね。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rdbファイルの中身</span></span><br><span class="line">user@HOST:~/work/redis/data/redis$ sudo hexdump -C dump.rdb</span><br><span class="line">00000000  52 45 44 49 53 30 30 31  30 fa 09 72 65 64 69 73  |REDIS0010..redis|</span><br><span class="line">00000010  2d 76 65 72 05 37 2e 30  2e 38 fa 0a 72 65 64 69  |-ver.7.0.8..redi|</span><br><span class="line">00000020  73 2d 62 69 74 73 c0 40  fa 05 63 74 69 6d 65 c2  |s-bits.@..ctime.|</span><br><span class="line">00000030  52 ad e7 63 fa 08 75 73  65 64 2d 6d 65 6d c2 d0  |R..c..used-mem..|</span><br><span class="line">00000040  e1 0d 00 fa 08 61 6f 66  2d 62 61 73 65 c0 00 ff  |.....aof-base...|</span><br><span class="line">00000050  9e c5 7c a6 0a 9a fb ab                           |..|.....|</span><br><span class="line">00000058</span><br></pre></td></tr></table></figure></div><p>さて、また「E.G.コンバット」の話に戻りたいと思います。</p><h2 id="「E-G-コンバット」の見どころ-その2"><a href="#「E-G-コンバット」の見どころ-その2" class="headerlink" title="「E.G.コンバット」の見どころ: その2"></a>「E.G.コンバット」の見どころ: その2</h2><p>1巻目でなんやかんやとあったあとも、教官と訓練生らの日常は変わりません。いつまでもチームはへっぽこのまま。教官の多忙な一日は終わるところを知りません。</p><p>その状況を見かねて、別のチームの訓練生が教官に対して自分のチームの先生になってほしいと直談判します。</p><p>自分たちのほうが優秀だという自尊心から、お願いはいつの間にかヒートアップし、訓練生は抑えが効かなくなります。</p><blockquote><p>『あんな連中、だれが指導してもどうせ…』</p></blockquote><p>昂った感情のまま、思わず口走った言葉は教官の逆鱗に触れました。</p><p>教官は返す刀で訓練生に質問します。</p><p>双脚砲台が攻撃を受けてAIが瞬断した。システム制御の支援を受けられない状況下でどのように機体のリカバリーを行えば良いか？<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p><p>口ごもりながら必死に手順を考える訓練生。そこへ、さらに浴びせられた教官の「攻撃」に、訓練生は「戦死」したことを自覚しました。</p><p>教官が想定した状況はすべて、へっぽこチームが毎日訓練で行っていた内容でした。</p><p>どうしてその訓練を行っていたのか、ここで真意が初めて明かされます。</p><blockquote><p>今の地球の工業生産力って、百年前と比べたら百分の一がいいとこでしょ？ 損傷箇所の部品の補給が受けられないことなんてしょっちゅうだったもの。そのくせ、兵器は強い分だけぐちゃぐちゃに電子化されててめちゃくちゃに複雑で、機能の半分でも理解してる奴が部隊にひとりもいないなんて当ったり前でさ。&gt;</p><p>でも、それじゃだめなんだってわかった。</p><p>なぜトリガーを引けば弾が出るのか、姿勢制御系はどんな理屈で機を水平に保つのか、たったひとつの操作で双脚砲台が起動するとき、流体脊髄(注釈: AIのこと)は何をどうやって関節をアクティブにするのか。それがわかってないと、大丈夫じゃなかった百回目がきたとき、なにもできないもの。</p><p>さっきの「バイパス回路接続とその間の回避運動」っていうのもさ、確かに普通は流体脊髄がオペレートするプロセスだし、その方が手動でやるより何倍も早いし、だからオルドリンのカリキュラムは、「自動制御」のひと言で流しちゃうけどさ。</p><p>でも、もしそのメカニズムが正常に作動しなかったら、そのときがあなたの戦死するときかもしれないのよ。だからわたしは、あんなやり方であの五人を訓練してるの。</p><p>…(中略)…</p><p>だから、多分、わたしは連中が卒業するまでこのやり方を変えないと思う。なにも、実戦でも流体脊髄のアシストを受けるなって言ってるんじゃないけど、GARPの──流体脊髄のアシストを受けなくても実戦をこなせるくらい、双脚砲台について知り尽くしていないと、転んだときに誰も絆創膏を貼ってくれない地球では、生き残れないから。</p></blockquote><hr><p>99回素振りして問題なかったシステムが、100回目にトラブルを起こす。あるいは、傍目には問題なくても微細なトラブルを日常的に訴えていたシステムが、ある日突然障害を顕在化して大問題につながる。いわゆるハインリッヒの法則として知られているそれは、ITシステムの運用の場面でもよくあります。</p><p>この問題に対処するためには、もちろん普段から予防を手掛けるというのが大原則ではありますが、いざ起こったときに火消しに奔走するのは運用管理者であり、必要とされる背景知識は多岐にわたります。</p><p>どんな知識が必要か？その示唆が、このシーンだと自分は思います。</p><p>小説の中の話に戻りますが、何も制約がない戦場であれば、AIという補助システムを最大限に活用した方が当然活躍します。つまりオペレーターとしての技量に熟達して、AIにうまい指示出しを下した方が、人間が手動で操作するよりも何倍もうまく兵器を運用できるでしょう。</p><p>しかし、小説の中の世界は決してそううまくはいきません。兵器に対して十分なメンテナンスが行われないことなど日常茶飯事ですし、CRM(クルーリソースマネジメント)は軽視され、人員不足も深刻です。</p><p>その中で教え子たちが生き残るためには何が必要か？</p><p>教官がたどり着いた答え──それは、通常ならAIによってうまく隠されている領域について手動操作を敢えて行い、兵器そのものへの造詣を深めることでした。</p><h2 id="クラウドやAIを利用するということは、決して中身を理解しなくていいということにはつながらない"><a href="#クラウドやAIを利用するということは、決して中身を理解しなくていいということにはつながらない" class="headerlink" title="クラウドやAIを利用するということは、決して中身を理解しなくていいということにはつながらない"></a>クラウドやAIを利用するということは、決して中身を理解しなくていいということにはつながらない</h2><p>現実世界ではこんなに極端ではありませんが、2025年の壁が警鐘を鳴らすようにITのプロフェッショナル人材は慢性的に不足しています。また、プロジェクトは流動的であり、いつも同じメンバー、同じプロセスで業務を行えるとは限りません。</p><p>クラウド全盛期の現在、マネージドサービスがあるがゆえにビジネスドメインへの理解があれば、構築だけならだいたいなんとかなってしまうし、動かせてしまいます。</p><p>しかし、運用というフェーズに移行した瞬間、何となくでなおざりにしていたところが性能のボトルネックとして牙をむき、魔法使いのようなスーパーエンジニアが召喚されることが稀によくあります。</p><p>今まで助けていただいた方は皆、要求に耐えうる深い知識を持ってました。</p><p>どうしてそんなことを知っていらっしゃるのか？お話を伺う中で知ったのは、それらの知識は、マネージドサービスの皮をはぎ取り、裏で動いているソフトウェアを構築し、動かしてみて得られた気づきをさらに積み重ねて得られたものだということでした。</p><p>「実践Redis入門」の解説を読む中で、筆者もまたその一人なのだと深く感じました。</p><h2 id="「実践Redis入門」の良いところ-実践に裏打ちされた濃厚な説明欄"><a href="#「実践Redis入門」の良いところ-実践に裏打ちされた濃厚な説明欄" class="headerlink" title="「実践Redis入門」の良いところ: 実践に裏打ちされた濃厚な説明欄"></a>「実践Redis入門」の良いところ: 実践に裏打ちされた濃厚な説明欄</h2><p>Redisの運用者はまだしも、Redisを利用する立場にある開発者にとって、その中身は理解から遠いところだと思います。</p><p>しかし、「実践Redis入門」にしたがって、</p><ul><li>第4章のアプリケーション実装例(PHP, Ruby, Pythonの例があります)で感じを掴んで、Webアプリケーションを実装し、</li><li>第5章のアーキテクチャパターンに従ってキャッシュ戦略を把握し、</li><li>第8章のRedisクラスターの導入方法にしたがってDocker上で動かせば、</li></ul><p>なんも考えずにHash型で行ったキー設計<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>、あるいはなんも考えずにKEYSコマンドを利用してデータ参照を行った実装<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>が、回りまわってメトリクスとして火を噴くところまでなにが起きていたのか把握できるでしょう(自省)。</p><p>もちろん、その辺は既に通った道である開発者にも本書が通じるのは言うまでもありません。</p><p>自分が良いなと思ったのは、エフェメラルスクリプトのコマンドの説明です。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p><p>Redisコマンドの中にはオプションとしてTTL──指定したキーの有効期間のこと。期限切れのセッション情報を追い出すために欠かせない存在です──を設定できないものがあり、別途キーに対して <code>EXPIRE</code> を投げる必要があります。</p><p>しかし、要するにそれはRedisに二回コマンドを投げるため、無駄な帯域使用だったり、二つのコマンドがセットで確実に送信&amp;実行されたかというアトミック性<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>が保証されません。</p><p>それを防ぐために、シェルスクリプトのヒアドキュメント風にキャッシュサーバー側に2回のコマンドを1つのスクリプトとして送り、実行する <code>EVAL</code> や <code>EVALSHA</code> があります。</p><p>…と、ここまでならちょっとでもTTLを意識したら目にすると思うし、公式ドキュメントもあるので迷いにくいところだと思います。</p><p>本書の深いなぁと思うのはここからで、</p><ul><li>コマンド実行時にスクリプトを随時送る <code>EVAL</code> とスクリプトを1回あらかじめプリロードすれば送らなくていい <code>EVALSHA</code> のうち、<code>EVALSHA</code> の方が適していると単純に考えがちだが、戦略として あえて <code>EVAL</code> もありだというユースケースとその解説</li><li><a href="https://github.com/redis/redis/issues/10576">ロールバック機能は課題も多くまだ実装されていないため、</a> 厳密なアトミック性は保証されていないこと。途中でスクリプトがエラーにより処理が終わるケースもありえるため、アプリ側でそれを念頭に避けるべく開発したほうがよい忠告</li><li><code>EVALSHA</code> のようにコマンドを腹持ちさせるなかで、それがRedisサーバーに何かしらの影響を与えているのでは…? という疑問への回答と改善した方がいいエッジケース</li><li><code>SCRIPT FLUSH</code> コマンドによるスクリプトキャッシュの削除方法</li><li><code>EVALSHA</code> コマンドは事前に <code>SCRIPT LOAD</code> コマンドでロード処理を実行する必要があるが、それらのコマンド間で再起動が行われてないか(それによりスクリプトが飛んでないか)、チェックする方法</li></ul><p>という風に、様々な角度で解説されています。</p><p>これだけのことが450ページの中の数ページに詰まってます。ぜひ直接、書籍を手に取って該当箇所をご一読ください。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>以上、「実践Redis入門」の所感でした。<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup></p><p>ところで、EGFﾏﾀﾞｰ？</p><p>次は大村さんの<a href="/articles/20230222a/">スモールデータ解析と機械学習 を読んだ感想</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">「プラネリアム」という、人類と敵対する知的生命体に地球が侵略されている舞台設定があるのですが、第1巻ではそのプラネリアムはほとんど登場しません。マブラヴのUNLIMITED編でもBETAは空気ですがあれと同じです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">令和5年に突如秋山瑞人著「E.G.コンバット」が電子書籍化されました。瑞っ子(秋山瑞人氏の熱烈なフォロワーの自称)は久々に見つかったオアシスに狂喜乱舞し、Amazonのジャンル別ベストセラー一位を獲得するに至りました。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">正確には流体脊髄と呼ばれる <strong>生き物</strong> です。&quot;彼ら流体脊髄ユニットを「コンピュータ」と呼ぶことは差別表現にあたるという。差別かどうかはともかくとしても、人間の脳がコンピュータでないとするなら、彼らもコンピュータではない。彼らは、ある種の遺伝子改造された菌類の織り成す大規模神経繊維集積──生体素子の集合した「思考する物体」であり、まごうまごうかたなき「生き物」である。&quot; 秋山瑞人.Ｅ．Ｇ．コンバット(電撃文庫)(p.75).株式会社ＫＡＤＯＫＡＷＡ.Kindle版.</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">第4章「コラム: データ型を適切に選ぶ」P193</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;">&quot;「脚部損傷、電圧異常時のバイパス回路接続とその間の回避運動。やることを最初から順に言ってみて」ルノア教官が怒っている。自分がいつ、どこで地雷を踏んでしまったのかわからない。カデナはただただ狼狽する。「──そ、そんな制御、VOGUSが、流体脊髄がオペレートする……」「脚部損傷、って言ったでしょ。姿勢制御系まで過電圧でやられてたら？　流体脊髄だって、データが入ってこなかったら何もできないよ。手動でやるには？」瞬間、カデナは頭が真っ白になった。絡み合っている知識を必死になって解きほぐし、懸命になって回路構造を思い浮かべる。「え、ええと、まず──電源、そう、損傷箇所の電源遮断、三軸の機体傾斜角確認、地表傾斜角確認、そ、それから──」言葉に詰まる。その次、次は、母線からの脚関節への電力分配？違う……そう、関節の状態確認だ、多分。でも、どうやって──!?　頭の中の時計の秒針がひと回りしたのを確認して、ルノアは言った。「はい、戦死」&quot; 秋山瑞人.Ｅ．Ｇ．コンバット２ｎｄ(電撃文庫)(pp.74-75).株式会社ＫＡＤＯＫＡＷＡ.Kindle版.</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;">第3章「3.2 Lua」P126~P145</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="vertical-align: top; padding-right: 10px;">7.</span><span style="vertical-align: top;">第2章「2.7.6. データ型を問わず利用できるコマンド/汎用的なコマンド-押さえておきたいコマンドの動作の詳細」P117~P119</span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="vertical-align: top; padding-right: 10px;">8.</span><span style="vertical-align: top;">アトミック性: コンピュータ上のプログラムの動作で、密接に関連する複数の処理が外部から一つの操作に見え、途中の状態を観測したり介入できない性質 <a href="https://e-words.jp/w/%E5%8E%9F%E5%AD%90%E6%80%A7.html">https://e-words.jp/w/原子性.html</a></span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="vertical-align: top; padding-right: 10px;">9.</span><span style="vertical-align: top;">おさまりが悪かったので注釈ではありますが、「実践Redis入門」を読んでて気になったことをこちらに記します。自分が本書を読んでいだいたイメージは、全能の技術者が傍にいて関連する機能や活用事例や懸念事項を1アクションごとにずっと喋ってもらうような感じです。具体的なユースケースや障害発生時など目的をもって質問したいとき、そのような包括的な知識は大いに励みとなります。反対に、正直、本書はさくっとコマンドを調べたい用途には向いていません。Bing先生やChatGPT先生にRedisドキュメントのリンクを出して説明してもらう方が早いです。ただ、ある程度責務を持って実装する中で、コマンドの字引としてドキュメント以上に詳細な説明を知りたいといったケースも当然あるとおもいます。そのような時は索引でページをひっかけたあと、そのページの章/節の頭から丁寧に読んだ方がいいと思います。関連するコマンドが検討材料になるからです。たとえば、「キーを削除したい」=&gt;「雰囲気的に <code>DEL</code> やな」 =&gt; 「<code>DEL</code> コマンドとよく似た <code>UNLINK</code> というコマンドがあるぞ?」 =&gt; 「<code>DEL</code> による同期削除処理は性能問題になるケースがあるのか」 =&gt; 「非同期削除処理である <code>UNLINK</code> で済ませられないか設計の再検討をしてみよう」 =&gt; 「Lazy Freeingちょっと理解した!」 =&gt; 「<code>lazyfreee_pending_objects</code> メトリクスもちょっと理解した!」 という風に連鎖的に理解が進みます。また、コマンドによっては文面に説明が埋め込まれており、それがすべてのケースもあります。スナップショットを取得するコマンドである <code>SAVE</code> / <code>BGSAVE</code> コマンドがP197に記載されていますが、このページだけだと取得方法がわからず、自分はググりました。。。もちろんこれらは本書の魅力を損なうものでは決してありませんが、その辺を意識して読むとより活用できると思います。</span><a href="#fnref:9" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230221a/redis.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;500&quot;&gt;

&lt;p&gt;積読を消化しようというテーマの、&lt;a href=&quot;/articles/20230217a/&quot;&gt;読書感想文連載&lt;/a&gt;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
    <category term="Redis" scheme="https://future-architect.github.io/tags/Redis/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
  </entry>
  
  <entry>
    <title>単体テストの考え方/使い方 の感想文</title>
    <link href="https://future-architect.github.io/articles/20230220a/"/>
    <id>https://future-architect.github.io/articles/20230220a/</id>
    <published>2023-02-19T15:00:00.000Z</published>
    <updated>2023-02-21T04:19:28.681Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230220a/top.jpeg" alt="" width="300" height="386" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG EXU真野です。</p><p>積読を消化しようというテーマの、<a href="/articles/20230217a/">読書感想文連載</a> の1冊目は、<a href="https://book.mynavi.jp/ec/products/detail/id=134252">単体テストの考え方&#x2F;使い方</a> です。</p><p>書籍の基礎情報です</p><ul><li>2022年12月28日発売</li><li><a href="https://www.amazon.co.jp/-/en/Vladimir-Khorikov/dp/1617296279">Unit Testing Principles, Practices, and Patterns</a> の翻訳書。原著は2020年1月14日に発売</li><li>テーマ<ul><li>質の高いテストを行い、ソフトウェアに価値をもたらそう！単体（unit）テストの原則・実践とそのパターン</li><li>プロジェクトの持続可能な成長を実現するための戦略</li><li>単体テストの原則・実践とそのパターン</li></ul></li><li>コード例は C# であるものの、どの言語でも適用できる汎用的な内容とのこと<ul><li>中を見ると、微妙にC#特有ぽいところに1箇所悩みましたが、それ以外はその通り</li></ul></li><li>翻訳者の須田さんは、他にも<a href="https://www.amazon.co.jp//dp/B09F697K2V/ref=sr_1_2">セキュア・バイ・デザイン: 安全なソフトウェア設計</a> や<a href="https://www.amazon.co.jp/dp/B07L5M7DXS/ref=sr_1_3">OAuth徹底入門 セキュアな認可システムを適用するための原則</a>、<a href="https://www.amazon.co.jp/dp/B06XGYSHCN/ref=sr_1_4">RxJavaリアクティブプログラミング</a> の翻訳もされており、知らずに3冊まで私の本棚に揃ってました<ul><li>どれもキレイに訳されており、日本語として自然だった記憶があります</li></ul></li><li>表紙は北欧ぽい服装をした女性については、詳細が末ページに記載がありますのでお楽しみに</li></ul><p>私が観測している範囲では非常に評判がよく、ソフトウェア設計品質全般に役立つといった声も聞こえてきます。実際に、単体テストのTips的な書き方だけではなく、どういった単体テストが長期間有効なテストとなりえるのか、といったことを説明されています。 <strong>持続可能性</strong> というワードが入っているのも最近のトレンドがあるなと個人的に感じています。</p><p>個人的に書籍で学びたいと思ったのは以下のポイントでした。</p><ul><li>テストコードのレビューはアプリケーションコードより難しいと感じる点、どうにかならないのか</li><li>テストデータの正しさの確認が難しい</li><li>テスト密度が増えるとどんどん、テスト実行時間が増える。効果的な運用とは</li></ul><p>内部は4つの部で構成されているため、それぞれごとに書簡を述べていくスタイルとします。</p><h2 id="第1部-単体-unit）テストとは"><a href="#第1部-単体-unit）テストとは" class="headerlink" title="第1部 単体(unit）テストとは"></a>第1部 単体(unit）テストとは</h2><p>3つの章で構成されています</p><ul><li>1 なぜ、単体（unit)テストを行うのか</li><li>2 単体テストとはなにか？</li><li>3 単体テストの構造解析</li></ul><p>ここで出てくる書籍に一貫して伝えられるメッセージである、「テストの労力を抑えつつ、テストから最大限の価値を引き出すこと」とはどういうことかは、慣れた開発者ならだれしもが意識することだなと思いますが、うまく言語化されて凄いと感じました。</p><p>個人的にはC#の文化圏と、 Goの文化圏の違いを大きく感じたところで、例えばテスト対象メソッド（Method Under Test: MUT）の名前についてや、AAAパターン（Arrange, Act, Assert）については、<a href="https://github.com/golang/go/wiki/TableDrivenTests">TableDrivenTests</a> のGoコミュニティ（？）の刷り込みがあって、少しだけギャップを感じました。</p><p>もちろん、書籍の考え方自体はかなり有用で、ギャップは細かい部分です。例えば、メソッド名についてはTableDrivenTestsのケース名に値するねとか、AAAパターンについては特に意識しなくてもそうなりそうとか、11章のアンチパターンに記載されていた、ドメイン知識のテストコードへの流出についても、ほぼ発生しないだろうなといった具合です。</p><p>以下、個別トピックで気になった部分です。</p><ul><li>良いテストについて、定量的にに見る方法としてカバレッジ・分岐網羅などの話もでてきます<ul><li>これをKPIにすると間違った運用になるので、メトリクスとして使おうねといった趣旨には納得感があります<ul><li>実践的には、どれくらいの数値がベターなのか、指針となる数値があると良いなと感じました（※ただし、言い出すとキリがなく書籍のスコープ外という気もします）</li></ul></li></ul></li><li>モックテストの流派（古典学派、ロンドン学派）の違いもそれなりのページを取って説明しています<ul><li>正直、興味がなかったのですが、それぞれの違いを理解し使い分けようという感じではなく、著者が最初から主張している哲学でいくのであれば、古典学派の考え方を採用すべき、とハッキリ推奨していたのが印象的でした。納得感がありました。やっと流派の違いを理解できた気がします</li></ul></li><li>単体テストで複数のシナリオをつなげることのメリットとでメリット<ul><li>テストの実行速度は早くなるものの基本NGということと、これは統合テストでやるべきだよねという話は同意しかなかったです</li><li>なんとなく、TableDrivenTestsで前のテストケースに依存したケースを書いてしまうアンチパターンに似ているなと感じました</li></ul></li><li>テスト対象メソッド名に should be （～であるべき）は入れない用にしようといった話があり、従おうと思いました</li><li>C#のコンストラクタについて<ul><li>以下のようにコンストラクタや <code>setter</code> で <code>FormatName()</code> のようにロジックを差し込むと、<code>location.Name = newName</code> みたいにフィールドに直接代入しても <code>FormatName()</code> が呼ばれるようで、少し混乱しました。C# わかっていないので、勘違いしたらすいません</li><li>参考: <a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members#constructors">https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members#constructors</a></li></ul></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Location</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">string</span> locationName;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Location</span>(<span class="params"><span class="built_in">string</span> name</span>)</span> =&gt; Name =  FormatName(name);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">get</span> =&gt; locationName;</span><br><span class="line">      <span class="keyword">set</span> =&gt; locationName =  FormatName(<span class="keyword">value</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第2部-単体テストとその価値"><a href="#第2部-単体テストとその価値" class="headerlink" title="第2部 単体テストとその価値"></a>第2部 単体テストとその価値</h2><p>4つの章で構成されています。</p><ul><li>4 良い単体テストを構成する4本の柱</li><li>5 モックの利用とテストの壊れやすさ</li><li>6 単体テストの3つの手法</li><li>7 単体テストの価値を高めるリファクタ林</li></ul><p>2部はかなり楽しい内容でした。良い単体テストの観点は、個人的には想定した仕様を満たすか検証を早くできる・改修で壊れたときに検知できるなどと思っていましたが、それらをより明示的に言語化して4つに整理したなと感じます。それぞれの観点について、SN比での説明や、ホワイトボックステスト&#x2F;ブラックボックステストのどちらをテストケース洗い出しに活用し、どちらを分析に利用すべきといった話はとても納得感があります。</p><p>ここで一番わたし個人の経験と紐づいてグっと来たのは、観測可能な振る舞いをテストすべきで、実装詳細をテストすると壊れやすい（保守性が下がる）という点です。例えばORマッパーの生成するSQLクエリの文字列を検証すると、壊れやすいテストになるなといった具合で、過去を思い出してうなりました（クエリ系のテストについては3部でも説明があります）。How, Whatのどちらに絞ってテストを書くべきか、読み進めると納得感が深まると思います。</p><p>以下、個別トピックで気になった部分です。</p><ul><li>良い単体テストの4本柱については、改めてこの領域に絞って深く考えたことが無かったので良い振り返りになりました<ul><li>「テストを書くことは当たり前になっている人で、自動テストの価値も理解している」が、「どういうテストであるべきか、悩んでいる人がいると、指針になる」と書いてあって、その通りな内容です！</li></ul></li><li>4つのパラメータがあると、当然出てくる（考えたい）のがトレードオフ構造ですよね<ul><li>例えば、DBまで接続したE2Eテストだと、間違いに気が付きやすいが、テスト実行速度が犠牲になりフィードバック間隔が遅れるといった話</li><li>面白いのは、全てトレードオフではなく、ある観点は捨てることができないので、実質制御できるのは2軸になるという点です。トレードオフ構造が好きな界隈の人には、共通認識としてあると良いかもと感じます</li></ul></li><li>トレードオフ構造については、明らかに「CAP定理」を意識しています（本書にも言及があります）<ul><li>CAP定理は<a href="https://www.oreilly.co.jp/books/9784873118703/">データ指向アプリケーションデザイン</a> 本を見れば、もはやそれ自体は過去の存在になったと思いましたが、そのフレームに関して業界に与えたインパクトの大きさを再認識しました</li></ul></li><li>トレードオフ構造ですが、 完全性・純粋正・性能のトリレンマがあるという、kawashimaさんの<a href="https://architect-club.connpass.com/event/272854/">強いて言えば「集約どう実装するのかな、を考える」会</a>勉強会を思い出させます。繋がっていると感じます<ul><li>※詳しくは、 syobochimさんの<a href="https://syobochim.hatenablog.com/entry/2023/01/24/163000">参加レポート</a>を参考に</li></ul></li><li>（物議ある）モックについて書かれているのも、2部からです<ul><li>テストダブルの分類（モックかスタブかなど）は分かりやすく、DBはこっちで外部メールサービスがこっちなら、マイクロサービスのWeb APIはどっちなんだ。DBにそのマイクロサービス経由でアクセスしたら話が変わらないか？と一瞬思ったものの、すぐ後ろの文章で考えの軸があり、すぐ疑問が消失したのが良い文章の流れだなと感じた記憶です</li></ul></li><li>少し面白いのは、CQS（コマンド・クエリ分離の原則）について言及があり、テスト対象メソッドについても、コマンド・クエリのどちらかであるべき。それぞれどちらかの性質を持つのであればモック、もう片方であればスタブとして作成すべきといった話です<ul><li>モックとスタブすら区別して考えていなかった自分には斬新な整理の話に感じました</li><li>あと、書籍では「コマンドの戻り値は無い」と話していますが、実際は生成したリソースのIDや、errorは返すべきなので適度に読み替えが必要そうです<ul><li>（後者はC# だとExceptionで広域脱出できるので、 error を毎回返すGoの流儀が特殊なだけではあります）</li></ul></li></ul></li><li>関数型アーキテクチャ<ul><li>モデルの完全性を取るか、純粋性を取るかの話に近いと感じました</li><li>前の感想と重複しますが、<a href="https://syobochim.hatenablog.com/entry/2023/01/24/163000">アーキ部：強いて言えば「集約どう実装するのかな、を考える」会に参加してきた！</a> を併せて読むと味わい深かったです</li><li>万能なアーキテクチャなんて無いんだという話と、伝統的なアーキテクチャがうまく機能する場面も多いといった話。結局そうなんだよなぁ..</li></ul></li><li>フレームワークと紐づく場合のテストについて<ul><li>テストしにくいから、という前提がある議論に思えました</li><li>他のフレームワークへの移植性という話はなかったと思うので、逆にフレームワーク側がテストヘルパーを提供していて、それがマッチするなら依存しても良いのでは？という話にもなりそうと感じました</li></ul></li></ul><h2 id="第3部-統合（integration）テスト"><a href="#第3部-統合（integration）テスト" class="headerlink" title="第3部 統合（integration）テスト"></a>第3部 統合（integration）テスト</h2><p>3つの章で構成されています。</p><ul><li>8 なぜ、統合（integration）テストを行うのか</li><li>9 モックのベスト・プラクティス</li><li>10 データベースに対するテスト</li></ul><p>先程までは単体テストでしたが、統合テストについての部です（違いは書籍内でしっかり説明されています）。私の所属するチームではDB接続までするテストを単体テストと定義しているので、名前がミスマッチでややこしい！となりました。</p><p>以下、個別トピックで気になった部分です。</p><ul><li>テストの効率を上げるために、アプリケーションコード側についても言及があって楽しかったです<ul><li>抽象化のためのインターフェイスは具体が1つだったら意味がないのでやらない。YAGNI原則違反になる<ul><li>心から同意しました</li><li>個人的にはテスト用のモックを作るためのインターフェースもなるべく避けたく、Goであれば net&#x2F;http&#x2F;httptest のテストサーバ側を立てて管理する側に寄せたいと思っています。このへんの議論はもっと深めていきたいと思っています</li></ul></li><li>レイヤーを減らそうという話<ul><li>間接参照（indirection）の層を追加しようとする人が少なくないが、コードベースのどこに何があるか把握することが難しいのでやめよう</li><li>これも同意です。澁川さんの <a href="https://future-architect.github.io/articles/20221111a/">データベースと向き合う決意 </a> にも中間層を壊すムーブメントがあると言われていますが、慣習でレイヤーを設けるのではなく、最適な設計の落とし所を見つけるようにすべきだと再認識しました。</li></ul></li></ul></li><li>データベースを用いるテストの並列実行が難しいという話（テストケースごとに依存するテーブル、レコードが重複すると影響を受けるため）<ul><li>とても分かる</li><li>Dockerコンテナをテストケース（テスト関数）ごとに、インスタンスを分けて利用することは推奨しない（生成・破棄など考慮すべきことが多い）とあったが、これは<a href="https://github.com/ory/dockertest">ory&#x2F;dockertest</a> でどれくらい緩和されるのかは、どこかで検証してみたいと思いました</li></ul></li><li>データの後始末について<ul><li><a href="https://github.com/future-architect/go-exceltesting">go-exceltesting</a> といったツールがあり、逆にこういうのを育てて行きたいと思います<ul><li>このあたりの界隈は、日本の業界のほうがナレッジが溜まっていそうと感じます</li></ul></li></ul></li><li>OR Mapper<ul><li>「クエリの単体テストは効果が薄いのでやらないべき（実装の詳細になる）。むしろ統合テストのシナリオの一部にすべき」とあり、納得感がありました<ul><li>単体テストでOR Mapper が生成したSQLクエリをテストすることも可能でしょうが、それがどのくらい役立つかは限定的だと理解しています</li></ul></li></ul></li></ul><h2 id="第4部-単体テストのアンチ・パターン"><a href="#第4部-単体テストのアンチ・パターン" class="headerlink" title="第4部 単体テストのアンチ・パターン"></a>第4部 単体テストのアンチ・パターン</h2><p>4部は1つだけの章で構成されています。</p><ul><li>11 単体テストのアンチ・パターン</li></ul><p>主要なアンチパターン（慣れればその通りだけど、テストコードを書きはじめのときは悩むことが多い、というか私は悩んだ）ことがまとまっています。</p><p>1点、気になったところがあります。</p><ul><li>テストで用いる現在時刻について（実行するたびに動的に検証項目の値が変わるのをどう制御してテストするか）<ul><li>Goで私がテストでよく用いる、 <a href="https://github.com/Songmu/flextime">Songmu&#x2F;flextime</a> は書籍に記載があった、環境コンテキスト型だと思います。これはプロダクションコードを汚す（テストのために書き換える）ので、推奨しないと書いてありました<ul><li>この意見には納得できますが、flextimeは許容しても良いんじゃないかと思っていて、自分の中で要言語化だと感じました。今は3つの理由が思い付けます。もっとあるかもしれません<ul><li>インターフェースが標準の time.Time と同じだから</li><li>テスト実行フラグのON&#x2F;OFFで挙動を変えるものでも無いから</li><li>テストコードのために書き換えが発生するが、際限無く書き換えを促す変更ではなく、勘違いも発生しにくい</li></ul></li></ul></li></ul></li></ul><h2 id="全体を通して"><a href="#全体を通して" class="headerlink" title="全体を通して"></a>全体を通して</h2><ul><li>訳が良い（日本語として読みやすい）<ul><li>個人的には、リグレッション検知→デグレ検知、統合テスト→結合テスト と呼ぶことが多かったのですが、一般的には書籍の表記が正しいと感じます</li></ul></li><li>各部にある「まとめ」が非常に丁寧でまとまっているなと感じました<ul><li>全体で400pと、それなりの分量があるため、まとめを読んで納得できないところがあれば立ち戻れるので、良い構成だと感じています</li></ul></li><li>単体テスト～統合テストまでの整理が素晴らしい<ul><li>何を重視すべきか、自分の中で考えの指針を作れたのは感謝しかない</li></ul></li><li>効率的なテストデータの作り方、レビューの仕方といったところは物足りなかった<ul><li>データパターンの網羅などの観点はあまり無く（これはこれで深いので、別分野なんだろうなとは思っています）</li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>単体テストの考え方&#x2F;使い方 についての感想文でした。非常に興味深い内容で、良いテストを作るという観点から、アプリケーションコードの設計レベルまで踏み込んで考えることもできると思います。</p><p>次は原木さんの<a href="/articles/20230221a/">実践Redis入門 技術の仕組みから現場の活用まで</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230220a/top.jpeg&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;386&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
    <category term="テスト" scheme="https://future-architect.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
    <category term="単体テスト" scheme="https://future-architect.github.io/tags/%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88/"/>
    
  </entry>
  
  <entry>
    <title>読書感想文連載始めます</title>
    <link href="https://future-architect.github.io/articles/20230217a/"/>
    <id>https://future-architect.github.io/articles/20230217a/</id>
    <published>2023-02-16T15:00:00.000Z</published>
    <updated>2023-03-03T06:51:46.321Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230217a/books-gfe2d97ef8_1920.jpg" alt="books-gfe2d97ef8_1920.jpg" width="1200" height="800" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。技術ブログ運営の藤戸四恩です。<br>寒くて乾燥した日が続いており、ボディクリームが欠かせないです。</p><p>読書の秋ならぬ、読書の春ということで読書感想文ブログ連載を始めます！開始のキッカケは最近良い本がたくさん出ているため、積読消化のためにみんなで読書連載をしたいと、とあるメンバーがSlackで呟いたことです。</p><p>この連載に私も参加するのですが、本棚の積読解消したく参加しました。</p><h2 id="読書感想文ブログ連載について"><a href="#読書感想文ブログ連載について" class="headerlink" title="読書感想文ブログ連載について"></a>読書感想文ブログ連載について</h2><p>本企画は初めての連載企画で、2&#x2F;20(月)～3&#x2F;3(金)の平日にブログ記事を投稿していこうというイベントです。</p><p>技術書&#x2F;自己研鑽&#x2F;ビジネス本をテーマです。結果的にはIT技術系ですが、CPU、Linux、言語、ミドルウエア、クラウドなど幅広い題材で、かつ初心者～上級者的な内容までバラエティ豊かな連載になったと思います。</p><p>普段ブログに掲載されないような内容の記事もあるので、普段フューチャー技術ブログをあまり読まない人にも記事が届くと良いなと考えています。</p><h2 id="投稿スケジュール・タイトル"><a href="#投稿スケジュール・タイトル" class="headerlink" title="投稿スケジュール・タイトル"></a>投稿スケジュール・タイトル</h2><p>本連載は以下のスケジュールで進めます。</p><div class="scroll"><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>2&#x2F;20</td><td>真野隼記</td><td><a href="/articles/20230220a/">単体テストの考え方&#x2F;使い方 プロジェクトの持続可能な成長を実現するための戦略</a></td></tr><tr><td>2&#x2F;21</td><td>原木翔</td><td><a href="/articles/20230221a/">実践Redis入門 技術の仕組みから現場の活用まで</a></td></tr><tr><td>2&#x2F;22</td><td>大村俊輔</td><td><a href="/articles/20230222a/">スモールデータ解析と機械学習 を読んだ感想</a></td></tr><tr><td>2&#x2F;24</td><td>澁川喜規</td><td><a href="/articles/20230224a/">プログラマーのためのCPU入門</a></td></tr><tr><td>2&#x2F;27</td><td>棚井龍之介</td><td><a href="/articles/20230227a/">スッキリわかるJava 実践編 第3版</a></td></tr><tr><td>2&#x2F;28</td><td>伊藤太斉</td><td><a href="/articles/20230228a/">「リーダブルコード」を読んでTerraformの可読性について考える</a>]</td></tr><tr><td>3&#x2F;1</td><td>川口翔大</td><td><a href="/articles/20230301a/">マイクロサービスパターン MicroServicePatterns 実践的システムデザインのためのコード解説</a></td></tr><tr><td>3&#x2F;2</td><td>藤戸四恩</td><td><a href="/articles/20230302a/">図解即戦力 Google Cloudのしくみと技術がこれ1冊でしっかりわかる教科書</a></td></tr><tr><td>3&#x2F;3</td><td>工藤駿泰</td><td><a href="/articles/20230303a/">SQLアンチパターン</a></td></tr></tbody></table></div><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>是非読んでいただき、シェアしていただけると嬉しいです！</p><p>アイキャッチ画像は、<a href="https://pixabay.com/ja/users/hermann-130146/">Hermann</a> from <a href="https://pixabay.com/ja/">Pixabay</a>を利用させていただきました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230217a/books-gfe2d97ef8_1920.jpg&quot; alt=&quot;books-gfe2d97ef8_1920.jpg&quot; width=&quot;1200&quot; height=&quot;800&quot; loading=&quot;lazy&quot;&gt;

&lt;h1</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
  </entry>
  
  <entry>
    <title>Mac 慣れした私に Windows が支給されたので、まず設定したこと</title>
    <link href="https://future-architect.github.io/articles/20230216a/"/>
    <id>https://future-architect.github.io/articles/20230216a/</id>
    <published>2023-02-15T15:00:00.000Z</published>
    <updated>2023-02-16T01:01:20.583Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230216a/top.png" alt="top.png" width="1200" height="676" loading="lazy"><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li>はじめに<ul><li>このブログを書いたきっかけ</li></ul></li><li>キーボードの購入・設定<ul><li>作業用キーボードの購入</li><li>キーボードの設定<ul><li>無変換&#x2F;変換</li><li>zh, zj, zk, zl</li><li>caps lock + [H,F,B,P,N,A,E]</li></ul></li></ul></li><li>ランチャーアプリの設定</li><li>その他の設定</li><li>おわりに</li></ul><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。</p><p>フューチャーアーキテクト株式会社、HR&#x2F;新卒採用チームの棚井です。</p><p>略歴として、フューチャーに新卒入社、Technology Innovation Group で IT コンサルタントを 3 年、Global Design Group で新規事業開発を 1 年と担当し、現在は Human Resources（つまり HR）でバックオフィスの新卒採用業務を担当しております。</p><p>これまでは Mac ユーザでしたが、Windows が支給されその利用を開始しました。Windows の環境整備として実施した内容を備忘録としての意味も込めてブログ化しました。概要は以下です。</p><ul><li>Mac で身についた入力癖により、Windows 作業が難化</li><li>Windows のキーボード設定を Mac に寄せることで対応しました<ul><li>新しいキーボードを購入しました<ul><li><a href="https://www.logicool.co.jp/ja-jp/products/keyboards/mx-keys-mini.920-010516.html">MX KEYS mini KX700GR（グラファイト）</a></li></ul></li><li>キーバインドを設定しました<ul><li>Microsoft IME</li><li><a href="https://forest.watch.impress.co.jp/library/software/changekey/">Change Key</a></li><li><a href="https://www.autohotkey.com/">AutoHotkey</a></li></ul></li><li>ランチャーを設定しました<ul><li><a href="https://ueli.app/#/">ueli</a></li><li><a href="https://forest.watch.impress.co.jp/library/software/everything/">Everything</a></li></ul></li></ul></li></ul><p>このブログの内容は、Windows ユーザにとっては基本的な内容だと思います。<br>ターゲット読者は「普段は JIS 配列の Mac を利用しているが、緊急で Windows を使う状況になった」方々を想定しています。</p><h2 id="このブログを書いたきっかけ"><a href="#このブログを書いたきっかけ" class="headerlink" title="このブログを書いたきっかけ"></a>このブログを書いたきっかけ</h2><p>学生時代からずっと Mac を利用しており、フューチャーへの新卒入社後も、新人研修期間を除いては Mac で開発作業、資料作成、MTG&#x2F;会議をこなしてきました。パソコンで作業をするといったらそれは「Mac で作業をする」ことが前提であり、数年の蓄積により無意識レベルでショートカット &amp; 各種操作を会得済みの Mac だからこそ、あらゆる方面の日常業務にて生産性を発揮できたとも考えています。</p><p>しかしここにきて、業務上の理由により「Mac を継続利用できない（≒ Mac を会社に返却して、Windows に交換する）」イベントが発生し、対応を迫られる状況となりました。もちろん、業務外のパソコンとしては Mac（MacBook Pro, Apple M1 Pro, 32GB）を利用しているため、「普段用は Mac、仕事では Windows のハイブリット方式」スタイルで生きてくことになりました。</p><p>Windows が支給された後、<strong>windows + (色々なボタン)</strong> によるショートカット</p><ul><li>ファイル名を指定して実行（windows + r）</li><li>仮想デスクトップ操作<ul><li>追加（windows + ctrl + d）</li><li>移動（windows + ctrl + ← or →）</li><li>削除（windows + ctrl + f4）</li></ul></li><li>画面ロック（windows + l）</li><li>エクスプローラーの起動（windows + e）</li><li>スクリーンショット（windows + shift + s）</li><li>etc.</li></ul><p>などを<a href="https://support.microsoft.com/ja-jp/windows/windows-%E3%81%AE%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89-%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88-dcc61a57-8ff0-cffe-9796-cb9706c75eec#WindowsVersion=Windows_11">Microsoft のサイト</a>を参照して実際に動かしながら覚えていきました。</p><p>基本的なショートカットを覚えたら、あとは業務で使いながら「Windows に慣れるのを待とう」として仕事に取り組んでいましたが、無理でした。キーボード配置影響によるミスタイプが連発してまともにテキスト入力ができないのと、Mac で無意識レベルに会得していたショートカットを Windows 側で打ち込んでしまう癖（特に、<code>caps lock/英数</code> ボタンで「英数 ⇄ かな」が切り替わるところ）が治りませんでした。一時的に矯正しても、業務外ではバリバリ Mac ユーザとして生きているので、そこで矯正が外れて、仕事に戻ってくると再矯正することの繰り返しで「入力したい文字が意図した通りに入力できないストレス」でまともに仕事ができない状況です。</p><p>かといって、業務用のパソコンを Windows → Mac に切り戻すこともできないので、対応としては「支給された Windows を、普段の Mac っぽく動かせるようになる」ことを考えました。ネットで「Windows と Mac のハイブリット対応」を検索すると、大まかには ①Windows に寄せる ②Mac に寄せる ③ 両方の中間を取るの 3 パターンに分けられ、私の場合は「②Mac に寄せる」を選択したということです。</p><h1 id="キーボードの購入・設定"><a href="#キーボードの購入・設定" class="headerlink" title="キーボードの購入・設定"></a>キーボードの購入・設定</h1><p>Mac → Windows への移行時に最も頻発したのが「タイプミス」と「Mac 専用のショートカットを Windows に打ち込むこと」です。Mac がデフォルトで提供するキーボード・ショートカットに自分を最適化しているため、それを矯正せずとも Windows で作業ができるようになるべく、キーボードの購入とキーバインドの設定を入れました。</p><h2 id="作業用キーボードの購入"><a href="#作業用キーボードの購入" class="headerlink" title="作業用キーボードの購入"></a>作業用キーボードの購入</h2><p>普段の Mac では、PC 標準搭載のキーボードか「Magic Keyboard - 日本語（JIS）」を利用しています。US 配列の方が好みという人もいますが、私はそこにこだわりはなく JIS 配列を使い続けています。</p><img src="/images/20230216a/MK2A3J.jpeg" alt="MK2A3J.jpeg" width="1144" height="1144" loading="lazy"><p>（画像引用元: <a href="https://www.apple.com/jp/shop/product/MK2A3J/A/magic-keyboard-%E6%97%A5%E6%9C%AC%E8%AA%9Ejis">Magic Keyboard - 日本語（JIS）</a>）</p><p>このキーボードは Windows でも利用できますが、私の環境下ではスペースキーの左右にある「英数」と「かな」が検知されず、テキスト入力時にこのボタンを多用する身としては致命的でした。色々探したところ、ガジェット系 Youtuber やブログが絶賛しており見た目的にも Magic Keyboard に近い、logicool の「<a href="https://www.logicool.co.jp/ja-jp/products/keyboards/mx-keys-mini.920-010516.html">MX KEYS mini KX700GR（グラファイト）</a>」を購入しました。</p><img src="/images/20230216a/71e2SZ0PfyL._AC_SL1500_.jpg" alt="71e2SZ0PfyL._AC_SL1500_.jpg" width="1200" height="539" loading="lazy"><p>（画像引用元: <a href="https://www.amazon.co.jp/dp/B09HQCW3P8/">ロジクール MX KEYS mini KX700GR</a>）</p><p>どちらのキーボードもパンタグラフで、Magic Keyboard はパチパチと叩いている感覚、MX KEYS mini はちゃんと指で押している打鍵感、のような違いがあります。本体重量の違いもあり、重量感・安定感のある MX KEYS mini は購入して割と気に入りました。</p><h2 id="キーボードの設定"><a href="#キーボードの設定" class="headerlink" title="キーボードの設定"></a>キーボードの設定</h2><p>リアルで使うキーボードが用意できたので、これまで利用していた Mac での動作を目標としての Windows キーボード設定を進めていきます。基本的には OS が標準提供する機能を利用して、それだと難しい部分でツールを利用していきます。本ブログでは、私が多様する以下のキー&#x2F;コマンド入力をベースにキーバインドの設定方法を見ていきます。</p><div class="scroll"><table><thead><tr><th>#</th><th>Mac での操作</th><th>Windows での対応操作</th><th>動作内容</th><th>利用機能</th></tr></thead><tbody><tr><td>1</td><td>英数&#x2F;かな</td><td>無変換&#x2F;変換</td><td>日本語入力と英字入力の切り替え</td><td>Microsoft IME</td></tr><tr><td>2</td><td>zh,zj,zk,zl</td><td>zh,zj,zk,zl</td><td>zh:←<br> zj:↓<br> zk:↑<br> zl:→</td><td>AutoHotkey</td></tr><tr><td>3</td><td>control +<br> [H,F,B,P,N,A,E]</td><td>caps lock +<br> [H,F,B,P,N,A,E]</td><td>H:Backspace<br> F:カーソルの移動（右）<br> B:カーソルの移動（左）<br> P:カーソルの移動（上）<br> N:カーソルの移動（下）<br> A:カーソルの移動（行頭）<br> E:カーソルの移動（行末）</td><td>Change Key<br> AutoHotkey</td></tr></tbody></table></div><ul><li>Microsoft IME（Windows OS 標準提供）</li><li><a href="https://forest.watch.impress.co.jp/library/software/changekey/">Change Key</a></li><li><a href="https://www.autohotkey.com/">AutoHotkey</a></li></ul><h2 id="無変換-x2F-変換"><a href="#無変換-x2F-変換" class="headerlink" title="無変換&#x2F;変換"></a>無変換&#x2F;変換</h2><div class="scroll"><table><thead><tr><th>#</th><th>Mac での操作</th><th>Windows での対応操作</th><th>動作内容</th><th>利用機能</th></tr></thead><tbody><tr><td>1</td><td>英数&#x2F;かな</td><td>無変換&#x2F;変換</td><td>日本語入力と英字入力の切り替え</td><td>Microsoft IME</td></tr></tbody></table></div><p>Mac と同じ入力方法での英数&#x2F;かな変換のため、キーボード的にちょうど同じ場所にある「無変換」と「変換」を利用します。この機能についてはニーズがあったのか、Windows OS が標準提供する Microsoft IME の設定を変えるだけで設定できます（以下、Windows 10 Pro の環境を前提とします）。</p><p>まずは検索バーに「IME」入力し、候補の中から「日本語 IME 設定（システム設定）」を開きます。</p><img src="/images/20230216a/ime_1.png" alt="ime_1.png" width="974" height="786" loading="lazy"><p>続いて、「キーとタッチのカスタマイズ」を選択。</p><img src="/images/20230216a/ime_2.png" alt="ime_2.png" width="593" height="583" loading="lazy"><p>キーの割り当てにある各キーに好みの機能を割り当てるをオンにして、</p><ul><li>無変換キー → IME-オフ</li><li>変換キー → IME-オン</li></ul><p>に設定します。</p><img src="/images/20230216a/ime_3.png" alt="ime_3.png" width="491" height="865" loading="lazy"><p>この設定により、Windows の無変換&#x2F;変換が、Mac での英数&#x2F;かな変換と同じ機能を果たすようになります。</p><h2 id="zh-zj-zk-zl"><a href="#zh-zj-zk-zl" class="headerlink" title="zh,zj,zk,zl"></a>zh,zj,zk,zl</h2><div class="scroll"><table><thead><tr><th>#</th><th>Mac での操作</th><th>Windows での対応操作</th><th>動作内容</th><th>利用機能</th></tr></thead><tbody><tr><td>2</td><td>zh,zj,zk,zl</td><td>zh,zj,zk,zl</td><td>zh:←<br> zj:↓<br> zk:↑<br> zl:→</td><td>AutoHotkey</td></tr></tbody></table></div><p>矢印文字の入力として、Mac では「zh,zj,zk,zl」という便利なショートカットがあります。例えば「→」という文字を入力したいとき、通常ならば</p><ul><li>ローマ字で「migi」と入力</li><li>変換で「右」が最初にヒット</li><li>2,3 回変換して「→」になる</li></ul><p>と 3 ステップぐらいのプロセスがかかりますが、Mac の全角状態で「zl」を入力すると、即時「→」に変換されて非常に便利です。この入力方法に慣れてしまうと、むしろ「→」が一発で出力されない環境ではストレスフルになるので、Windows にもこれを適応します。このキーバインドの設定のために、<a href="https://www.autohotkey.com/">AutoHotkey</a> を利用します。</p><img src="/images/20230216a/auk_1.png" alt="auk_1.png" width="1200" height="637" loading="lazy"><p>ダンロードするバージョンとして「v1.1」と「v2.0」の 2 つ候補があります。GitHub のリポジトリを確認したところ、メジャーアップデートとなる v2.0 は <a href="https://github.com/AutoHotkey/AutoHotkey/releases">2022 年 12 月 20 日にリリース</a>されています。文法改善に伴い後方互換性を捨てたことで v1 系で動作していたスクリプトは一部修正が必要になるようです。ネットの情報としては v1 系のサンプルが多い（最近のリリースというのもあり、v2 系の日本語情報はほとんど見つからない）のですが、それほど複雑な文法を入れる見込みはない点と、AutoHotkey のトップページのメッセージには</p><blockquote><p>AutoHotkey has been released and will be considered the default&#x2F;main version. We are in a transition period: the website and forums will be updated accordingly. Please see the <a href="https://www.autohotkey.com/boards/viewtopic.php?f=24&t=112989">announcement</a> for more information.</p></blockquote><p>とある上に、<a href="https://www.autohotkey.com/docs/v2/">ドキュメント</a> が <a href="https://www.autohotkey.com/docs/v2/Tutorial.htm">tidbit チュートリアル</a> を含めて充実しているので、<strong>v2.0</strong> をダウンロードして利用していきます。</p><p>ダウンロードが一通り完了すると、画面右クリックで <code>AutoHotkey Script</code> が選択肢に追加され、AutoHotkey 用のスクリプトが GUI から作れるようになります。</p><img src="/images/20230216a/auk_2.png" alt="auk_2.png" width="689" height="440" loading="lazy"><p><code>New Script</code> にてファイル情報の入力・選択が求められるので、今回は</p><ul><li>ファイル名は　 tech_blog.ahk（拡張子は <code>.ahk</code> にする）</li><li>保存場所はデスクトップ</li><li><code>Minimal for v2</code> を選択</li></ul><p>の設定でファイルを作成しました。</p><img src="/images/20230216a/auk_3.png" alt="auk_3.png" width="413" height="281" loading="lazy"><p>（作成後のアイコン）</p><img src="/images/20230216a/auk_4.png" alt="auk_4.png" width="123" height="113" loading="lazy"><p>ファイルを開くと、デフォルトで 1 行目（#Requires AutoHotkey.0）だけが記入されたファイルの生成を確認できます。<br>VSCode では AutoHotkey 専用の拡張機能 <a href="https://marketplace.visualstudio.com/items?itemName=mark-wiemer.vscode-autohotkey-plus-plus">AutoHotkey Plus Plus</a> があり、code highlighting や code formatting によるサポートが便利です。</p><img src="/images/20230216a/auk_5.png" alt="auk_5.png" width="410" height="89" loading="lazy"><p><code>.ahk</code> ファイルの編集環境は準備できたので、キーバインドの設定を登録します。<br>以下のキーバインドを設定したいので、そのまま .ahk ファイルに追記していきます。</p><div class="scroll"><table><thead><tr><th>入力コマンド</th><th>アウトプット</th></tr></thead><tbody><tr><td>zh</td><td>←</td></tr><tr><td>zj</td><td>↓</td></tr><tr><td>zk</td><td>↑</td></tr><tr><td>zl</td><td>→</td></tr></tbody></table></div><figure class="highlight ahk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;上下左右矢印の入力</span></span><br><span class="line"></span><br><span class="line"><span class="title">:*:zh::</span>←</span><br><span class="line"><span class="title">:*:zj::</span>↓</span><br><span class="line"><span class="title">:*:zk::</span>↑</span><br><span class="line"><span class="title">:*:zl::</span>→</span><br></pre></td></tr></table></figure><p>キーバインドの設定は</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">::&lt;入力する文字列&gt;::&lt;出力する文字列&gt;</span><br></pre></td></tr></table></figure><p>の文法により定義していきます。<br>先頭文字 <code>::</code> と <code>:*:</code> の違いは、<a href="https://www.autohotkey.com/docs/v2/Tutorial.htm#s24">チュートリアルのサンプル</a> に</p><blockquote><p>::btw::by the way ; Replaces “btw” with “by the way” as soon as you press an <a href="https://www.autohotkey.com/docs/v2/Hotstrings.htm#EndChars">default ending character</a>.<br>:*:btw::by the way ; Replaces “btw” with “by the way” without needing an ending character.</p></blockquote><p>と記載があるように、&lt;入力する文字列&gt;の入力後に終了文字を押してから変換して欲しいか、それとも即時変換して欲しいかの違いを表現しています。今回は「<code>zl</code> が入力されたら即時 <code>→</code> に変換してほしい」ので、<code>:*:</code> で定義しています。</p><p>作成した <code>.ahk</code> ファイルはダブルクリックにより適応可能です。ファイルのショートカットを作成して <code>windows + r</code> → <code>shell:startup</code> に配置すれば、Windows 立ち上げ時に AutoHotkey の設定を自動適応できます。</p><h2 id="caps-lock-H-F-B-P-N-A-E"><a href="#caps-lock-H-F-B-P-N-A-E" class="headerlink" title="caps lock + [H,F,B,P,N,A,E]"></a>caps lock + [H,F,B,P,N,A,E]</h2><div class="scroll"><table><thead><tr><th>#</th><th>Mac での操作</th><th>Windows での対応操作</th><th>動作内容</th><th>利用機能</th></tr></thead><tbody><tr><td>3</td><td>control +<br> [H,F,B,P,N,A,E]</td><td>caps lock +<br> [H,F,B,P,N,A,E]</td><td>H:Backspace<br> F:カーソルの移動（右）<br> B:カーソルの移動（左）<br> P:カーソルの移動（上）<br> N:カーソルの移動（下）<br> A:カーソルの移動（行頭）<br> E:カーソルの移動（行末）</td><td>Change Key<br> AutoHotkey</td></tr></tbody></table></div><p>Backspace とカーソル移動のキーバインドを登録していきます。</p><p>AutoHotkey の定義により「caps lock を別のボタンに置き換える」ことは可能なのですが、OS レベルでの caps lock ボタン操作「down（押し込み）&#x2F; up（放し）」と AutoHotkey でのボタン押下検知タイミングの差分により、「caps lock が押されっぱなしになり、置き換え先のボタンが長押し状態になってしまう」問題が多数報告されています。これを回避するために、今回は <a href="https://forest.watch.impress.co.jp/library/software/changekey/">Change Key</a> を利用して caps lock に F13 を割り当て、F13 にキーバインドを設定する方法を使います。</p><p>まずは、caps lock を F13 に変更する設定から。<br>Change Key のダウンロードが完了したら「管理者として実行(A)」により起動します。</p><img src="/images/20230216a/ck_0.png" alt="ck_0.png" width="665" height="173" loading="lazy"><p>変更対象のキーである <code>CapsLock 英数</code> を選択します。</p><img src="/images/20230216a/ck_1.png" alt="ck_1.png" width="877" height="295" loading="lazy"><p>続いて、変更先の F13 を指定したいのですが、デフォルトでは F12 以降の F13 から F24 までは表示されていません。この場合は、右上の <code>Scan code</code> を利用して、対応するスキャンコードを直接入力していきます。</p><img src="/images/20230216a/ck_2.png" alt="ck_2.png" width="879" height="297" loading="lazy"><p>F13 から F24 と スキャンコードの対応表</p><div class="scroll"><table><thead><tr><th>Key</th><th>Scan code</th></tr></thead><tbody><tr><td>F13</td><td>0x0064</td></tr><tr><td>F14</td><td>0x0065</td></tr><tr><td>F15</td><td>0x0066</td></tr><tr><td>F16</td><td>0x0067</td></tr><tr><td>F17</td><td>0x0068</td></tr><tr><td>F18</td><td>0x0069</td></tr><tr><td>F19</td><td>0x006A</td></tr><tr><td>F20</td><td>0x006B</td></tr><tr><td>F21</td><td>0x006C</td></tr><tr><td>F22</td><td>0x006D</td></tr><tr><td>F23</td><td>0x006E</td></tr><tr><td>F24</td><td>0x0076</td></tr></tbody></table></div><p>F13 の <code>0x</code> に続く <code>0064</code> のスキャンコードを登録します。</p><img src="/images/20230216a/ck_3.png" alt="ck_3.png" width="435" height="259" loading="lazy"><p>登録が完了すると、作業前は <code>CapsLock 英数</code> だった場所が、<code>Scan code</code> に変わっていることが分かります。</p><img src="/images/20230216a/ck_4.png" alt="ck_4.png" width="880" height="295" loading="lazy"><p>この状態で「登録(R)」→「現在の設定内容で登録します(R)」を選択すると、PC が再起動してキーの入れ替えが完了します。再起動後、<a href="https://anysweb.co.jp/advancedkeycheck/">こちらのサイト</a> などで入力チェックを行うと、caps lock が F13 と認識されているか確認できます。切り替えがうまくいかない場合、一度 Change Key での「リセット(C)」を利用した上で、caps lock から F13 に 1 ステップで切り替えるのではなく、caps lock → home → F13 のように、別のボタンへの変更を 1 度挟むとうまくいくケースもあるようです。</p><p>F13 への配置換えが完了したら .ahk ファイルに追記していきます。</p><div class="scroll"><table><thead><tr><th>入力コマンド</th><th>アウトプット</th></tr></thead><tbody><tr><td>caps lock + H</td><td>Backspace</td></tr><tr><td>caps lock + F</td><td>カーソルの移動（右）</td></tr><tr><td>caps lock + B</td><td>カーソルの移動（左）</td></tr><tr><td>caps lock + P</td><td>カーソルの移動（上）</td></tr><tr><td>caps lock + N</td><td>カーソルの移動（下）</td></tr><tr><td>caps lock + A</td><td>カーソルの移動（行頭）</td></tr><tr><td>caps lock + E</td><td>カーソルの移動（行末）</td></tr></tbody></table></div><p>caps lock は F13 に変更済みなので、F13 にキーバインドを設定します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">;文字の削除</span><br><span class="line">F13 &amp; H::Send &quot;&#123;Blind&#125;&#123;Backspace&#125;&quot;</span><br><span class="line"></span><br><span class="line">;カーソルの移動(上下左右)</span><br><span class="line">F13 &amp; F::Send &quot;&#123;Blind&#125;&#123;Right&#125;&quot;</span><br><span class="line">F13 &amp; B::Send &quot;&#123;Blind&#125;&#123;Left&#125;&quot;</span><br><span class="line">F13 &amp; P::Send &quot;&#123;Blind&#125;&#123;Up&#125;&quot;</span><br><span class="line">F13 &amp; N::Send &quot;&#123;Blind&#125;&#123;Down&#125;&quot;</span><br><span class="line"></span><br><span class="line">;カーソルの移動(行頭・行末)</span><br><span class="line">F13 &amp; A::Send &quot;&#123;Blind&#125;&#123;Home&#125;&quot;</span><br><span class="line">F13 &amp; E::Send &quot;&#123;Blind&#125;&#123;End&#125;&quot;</span><br></pre></td></tr></table></figure><p>Send の文法詳細や各 Keys の解説は <a href="https://www.autohotkey.com/docs/v2/lib/Send.htm">こちらのドキュメント</a> に記載があります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Send Keys</span><br><span class="line">&lt;入力コマンド&gt;::Send &quot;&lt;操作内容&gt;&quot;</span><br></pre></td></tr></table></figure><p>&lt;入力コマンド&gt;を複数キーにする場合、&amp; で繋いで表現します。また、<code>&#123;Blind&#125;</code> を入れることで、他キーとの同時打鍵が可能となります。例えば、<code>F13 &amp; B::Send &quot;&#123;Left&#125;&quot;</code> は「F13+B」でカーソルをひとつ左に動かすコマンドですが、<code>&#123;Blind&#125;</code> を追加すれば「Shift+F13+B」により「範囲選択しながらの左へのカーソル移動」が可能となります。カーソル移動は別コマンドと組み合わせても効果が増えるので、今回のキーバインドには全て <code>&#123;Blind&#125;</code> を入れています。</p><h3 id="Mac-の-JIS-配列でのカーソル操作"><a href="#Mac-の-JIS-配列でのカーソル操作" class="headerlink" title="Mac の JIS 配列でのカーソル操作"></a>Mac の JIS 配列でのカーソル操作</h3><p><strong>control + [H,F,B,P,N,A,E]</strong> → <strong>caps lock + [H,F,B,P,N,A,E]</strong><br>そもそもの、これは何が嬉しいの？という疑問を持たれた方向けの解説です。</p><p>JIS 配列 Mac の場合、control ボタンが A ボタンの左（US 配列であれば caps lock があるところ）に配置されています。私はこの配置を前提として Mac の <a href="https://support.apple.com/ja-jp/HT201236#text">書類に関するショートカット</a> を利用しています。つまり、テキスト作業・コーディング作業での「Backspace とカーソル移動」は全て「左手小指で control を押しながら」ショートカットを実行しており、これによりホームポジションのままの操作を実現していました。Windows 環境でもこれを再現するために、「control ボタン + X を caps lock ボタン + X に置き換える」設定を入れています。</p><h1 id="ランチャーの設定"><a href="#ランチャーの設定" class="headerlink" title="ランチャーの設定"></a>ランチャーの設定</h1><p>パソコン操作の基本である「テキスト入力」が私の使い慣れた Mac 風に近づいてきたので、次は「ランチャー」です。Mac では <a href="https://www.alfredapp.com/">Alfred</a> を使っているので、これに近い操作性のある <a href="https://ueli.app/">ueli</a> と ueli 内から呼び出す <a href="https://forest.watch.impress.co.jp/library/software/everything/">Everything</a> を設定していきます。</p><p>ueli の <a href="https://ueli.app/#/download">Windows 版をダウンロード</a>して、設定作業を進めます。</p><img src="/images/20230216a/ueli_1.png" alt="ueli_1.png" width="1200" height="695" loading="lazy"><p>設定が完了すると、<code>alt + space</code> によりランチャーの起動が確認できます。</p><p>この起動感、Alfred と同じで快適です。ueli の検索範囲はディレクトリ単位で指定可能なので、使いたいアプリケーションやファイルがヒットしない場合は、設定項目を追加すると検索範囲が拡張できます。</p><img src="/images/20230216a/ueli_2.png" alt="ueli_2.png" width="765" height="90" loading="lazy"><p>ファイル検索としては ueli から <code>es?&lt;検索ワード&gt;</code> による Everything の呼び出しが可能なので、その設定作業も進めていきます。</p><p>こちらの <a href="https://www.voidtools.com/downloads/">ダウンロードサイト</a> から、<code>Everything本体</code> と <code>Download Everything Command-line Interface</code> の 2 つをダウンロードします。Everything 本体は <a href="https://forest.watch.impress.co.jp/library/software/everything/">窓の杜</a> からもダウンロード可能です。Command-line Interface 側はダウンロード後の解凍 &amp; <code>es.exe</code> の配置が完了したら、ueli コンソールの “es.exe” のパスに登録します。</p><img src="/images/20230216a/ueli_3.png" alt="ueli_3.png" width="1200" height="907" loading="lazy"><p>アプリケーションの起動は ueli 単体、ファイル検索は ueli+Everything の使い方が便利です。ueli の起動コマンドはデフォルトで <code>alt + space</code> ですが、このコマンドの組み合わせも任意の形に変更可能なため、この点も含めてポイントの高いランチャーアプリだと思います。私は後述の「右 alt キーを右 Ctrl キーに変更」していることもあり、ueli の起動は <code>ctrl + space</code> をホットキーに登録しています。</p><img src="/images/20230216a/ueli_4.png" alt="ueli_4.png" width="1200" height="491" loading="lazy"><h1 id="その他の設定"><a href="#その他の設定" class="headerlink" title="その他の設定"></a>その他の設定</h1><p>ここまでに「キーボードの設定」と「ランチャーの設定」まで進めてきて、Windows のデフォルト状態から Mac の操作性に少しづつ近づけています。<br>操作デバイスとして新しく購入した <a href="https://www.logicool.co.jp/ja-jp/products/keyboards/mx-keys-mini.920-010516.html">logicool のキーボード</a> を利用しながら検知した「Mac 慣れ起因による誤作動」を正常化していきます。</p><ul><li>左上の「1」を狙って「半角&#x2F;全角漢字」を押してしまうケースがある。気持ち少し右を狙って再度「1」を押すと全角で入力されて変換処理が入る<ul><li>→ 半角&#x2F;全角漢字を 1 に変更</li></ul></li><li>左下にしか Ctrl が無いのが不便。右下にも欲しい（Mac JIS 配列の右下 command キーに対応する「右下 Ctrl」が欲しい）</li><li>右下にある「alt キー」と「カタカナ&#x2F;ひらがなキー」を使った試しがない<ul><li>→ alt 右とカタカナ&#x2F;ひらがなを Ctrl 右に変更</li></ul></li><li>英数入力の切り替えのため「無変換」を狙うが「alt 左」を押してしまい、カーソルのフォーカスが外れることがある</li><li>Mac の左下 command キーに対応する「左下 Ctrl」が欲しい<ul><li>→ alt 左を Ctrl 左に変更（これにより、alt キーが喪失）</li></ul></li><li>タスクマネージャーの起動用に「alt, shift, delete」は必ず残しておく必要があることが判明<ul><li>→ ヘルプ起動機能の F1 に alt 左を配置</li></ul></li></ul><p>このように Change Key を利用して「自分の入力癖に Windows を矯正する」ことを繰り返します。Change Key の設定はコンソールの「参照(F)」→「スキャンコードを含む変更されたキーを一覧表示します(R)」から確認可能なので見てみると、色々な設定が反映されていることが分かります。</p><img src="/images/20230216a/other_2.png" alt="other_2.png" width="548" height="427" loading="lazy"><p>変更した場所は赤枠で囲まれて表示されるようです。<br>このキー配置が、現時点の私にとっては最適のようです。</p><img src="/images/20230216a/other_3.png" alt="other_3.png" width="881" height="298" loading="lazy"><p>ここまで設定して、Mac でのテキスト操作コマンドや「使い慣れた指の操作」をそのまま Windows でも実現でき、Mac にて無意識レベルで習得したコマンドを Windows 下においてもストレスなく正しく利用できるようになってきました。まだ Windows を使い始めて 2 週間も経っていないので、このコマンド設定を利用しつつ何かしらの不便があれば「Mac でどうやって操作してたっけ？」→「Windows で再現しよう」を繰り返しながら、Windwos を使いやすい形にセルフアップデートし続ける予定です。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>JIS 配列の Mac でショートカットを会得した私が、Windows の操作性を Mac に近づけるという内容のブログでした。</p><p>最初に「Mac から Windows に切り替える」と決まった時には、もうこの会社では仕事はできないなと目の前が真っ暗になりました。しかし、Windows の外部ツールを利用したカスタマイズ性の高さに助けられて、なんとか「Windows のキーボード操作を Mac っぽくする」ことに成功して今に至ります。Windows 歴が短いため知らなかったのですが、こういった各種加工が割と簡単にできるというのが、今回の学びでした。「使い慣れた環境から、あえてズレてみる」というのも、技術キャッチアップには刺激になるのかもしれません。ただし、その支給された Windows を Mac の UI&#x2F;UX に寄せようとしている時点で、ズレによるストレスを受け入れるのではなく「（自分なりの方法で）回避している」とも言えますが。いずれは Mac に戻す予定ですが、もしまた何かしらの偶然の連鎖により「Windows を使わざるを得ない状況」になった場合に備えて、支給直後に設定した内容を備忘録的に残すことにしました。</p><p>Windows の機能で便利だなと思ったのは <code>windows + shift + s</code> でのスクショ内容がクリップボードに貼り付けられて、そのまま任意の場所に貼り付け可能なところです。ただし、Mac の場合でも <code>command + shift + 4</code> でスクショするときに <code>controlを押しっぱなし</code> にすることでクリップボードに記録されることを知って、ああそうかとなりました。開発環境としては Mac に優位性がある理解でいますが、Windows 歴が短すぎてまだそれを実感できていません。「Mac ユーザから見た Windows 環境における開発作業の難しさ」については、ネタが溜まったらまたブログ化しようと思います。</p><p>以上、長文にお付き合いいただき、ありがとうございました。<br>みなさま、良い Mac ユーザライフを！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230216a/top.png&quot; alt=&quot;top.png&quot; width=&quot;1200&quot; height=&quot;676&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="環境構築" scheme="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"/>
    
    <category term="Windows" scheme="https://future-architect.github.io/tags/Windows/"/>
    
    <category term="ショートカット" scheme="https://future-architect.github.io/tags/%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88/"/>
    
    <category term="Mac" scheme="https://future-architect.github.io/tags/Mac/"/>
    
    <category term="キーボード" scheme="https://future-architect.github.io/tags/%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89/"/>
    
    <category term="キーバインド" scheme="https://future-architect.github.io/tags/%E3%82%AD%E3%83%BC%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89/"/>
    
  </entry>
  
  <entry>
    <title>Recoilドキュメント入門</title>
    <link href="https://future-architect.github.io/articles/20230215a/"/>
    <id>https://future-architect.github.io/articles/20230215a/</id>
    <published>2023-02-14T15:00:00.000Z</published>
    <updated>2023-02-15T01:23:05.546Z</updated>
    
    <content type="html"><![CDATA[<p>RecoilはFacebookのMeta社製のReact用状態管理ライブラリです。この分野はFacebook自体がFluxという概念を発表してから、さまざまなライブラリが開発されてきました。</p><p>特に広く利用されたのがReduxです。Reduxはとても小さなライブラリにもかかわらず、Reactだけで解決しようとすると大変だったことがエレガントに解決できましたが、非同期がネイティブ対応でなくプラグインが必要だったり、ちょっとディープに使おうとするとたくさんのボイラープレートコードが必要になったり大変だったり、というのはありました。また、TypeScriptの普及する前の時代からのものなので、正しい型つけをするのが面倒だったり、といろいろ大変なところもありました。</p><p>Redux本体もそれらを改善したRedux-Toolkitというのも出していたりするのですが、Meta自体が開発しているライブラリで、今までのさまざまなライブラリの使い勝手が悪く手間暇かかっていたところを改善したものがRecoilです。</p><p>僕自身、「もうRedux-Toolkitをだいたい覚えたし、新しいのはいいかな」という気持ちでいたのですが、ドキュメントを見ると、かなり洗練されたデザインになっており、ドキュメントを読むだけでも「そうか、今まで認識してなかったけど、ここには設計上の見えない制約が課されていたのか」と、目から鱗な体験があるものでした。</p><h1 id="Recoilのドキュメントには癖がある"><a href="#Recoilのドキュメントには癖がある" class="headerlink" title="Recoilのドキュメントには癖がある"></a>Recoilのドキュメントには癖がある</h1><p>だいたいのドキュメントというものは、先頭から読んでいけば理解できるものなのですが、Recoilのドキュメントはちょっと癖があり、まだ学習していないはずの概念がポロポロ出てきます。なんというかWikipediaの沼を彷徨っているような、そんな感じです。</p><p>どの分野もそうですが「一次情報が大事だ、まずはそこに当たれ」ということはよく言われますが、その一次情報がこんな感じで迷子になってしまいがちです。未知の概念を推測しながら読んでいくのは結構大変です。途中で挫折したり、結構重要そうなポイントを読み飛ばしたりしてしまう恐れがあります。</p><p>ということで、Recoilのドキュメントを読むための基礎知識をまとめてみます。本エントリーは「Recoil入門」ではなくて、「Recoilドキュメント入門」としているのはそのためです。</p><h1 id="Recoilで一番大事なものはatom。ついでにselector"><a href="#Recoilで一番大事なものはatom。ついでにselector" class="headerlink" title="Recoilで一番大事なものはatom。ついでにselector"></a>Recoilで一番大事なものはatom。ついでにselector</h1><p>Recoilの構成要素として、<code>atom</code>と<code>selector</code>というのがよく出てきます。<code>atom</code>は値のストレージです。何個も作ることができます。例えば誕生日を保持する、といった感じです。例えば「ユーザー」みたいな単位でオブジェクトを保持させることもできます。</p><p>もう1つが<code>selector</code>です。<code>selector</code>も、利用するコンポーネントからすると<code>atom()</code>と区別はつきませんが、これは「関数的なストレージ」です。他の<code>atom</code>や<code>selector</code>の値を参照し、計算した上でキャッシュします。Vue.jsのcomputedが一番近いと思います。Reactだと<code>useMemo()</code>ですね</p><img src="/images/20230215a/名称未設定ファイル-ページ1.drawio.png" alt="名称未設定ファイル-ページ1.drawio.png" width="411" height="351" loading="lazy"><p>コンポーネントとRecoilのステート（<code>atom</code>&#x2F;<code>selector</code>)との接続はフックを使って行います。Reactの<code>useState()</code>は値と変更関数をセットで取得しますが、それ以外のも含めて、フックがいろいろあります。<code>selector</code>は<code>atom</code>から導出される関数なので値取得はできるが書き込みはできなかったりするので、接続先や用途によってフックを選びます。</p><div class="scroll"><table><thead><tr><th align="center">フック</th><th align="center">値</th><th align="center">書き込み関数</th><th align="center">リセット関数</th></tr></thead><tbody><tr><td align="center"><a href="https://recoiljs.org/docs/api-reference/core/useRecoilState">useRecoilState()</a></td><td align="center">○</td><td align="center">○</td><td align="center"></td></tr><tr><td align="center"><a href="https://recoiljs.org/docs/api-reference/core/useRecoilValue">useRecoilValue()</a></td><td align="center">○</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://recoiljs.org/docs/api-reference/core/useSetRecoilState">useSetRecoilState()</a></td><td align="center"></td><td align="center">○</td><td align="center"></td></tr><tr><td align="center"><a href="https://recoiljs.org/docs/api-reference/core/useResetRecoilState">useResetRecoilState()</a></td><td align="center"></td><td align="center"></td><td align="center">○</td></tr></tbody></table></div><p><code>atom</code>と<code>selector</code>の実装は簡単です。キーというアプリケーション全体でユニークな属性を与えないといけないという制約はありますが、それを除けば<code>selector</code>が依存する状態さえ渡してあげれば、好きな場所で好きなように定義できます。上記の図の誕生日の<code>atom</code>と、それをもとにした年齢の<code>selector</code>は次のようになります。</p><figure class="highlight ts"><figcaption><span>state.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; atom, selector &#125; <span class="keyword">from</span> <span class="string">&quot;recoil&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> birthdayState = <span class="title function_">atom</span>(&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;birthday&quot;</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ageState = <span class="title function_">selector</span>(&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;age&quot;</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="function">(<span class="params">&#123;get&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> bd = <span class="title function_">get</span>(birthdayState)</span><br><span class="line">        <span class="keyword">const</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">        <span class="keyword">const</span> thisYearsBirthday = <span class="keyword">new</span> <span class="title class_">Date</span>(today.<span class="title function_">getFullYear</span>(), bd.<span class="title function_">getMonth</span>(), bd.<span class="title function_">getDay</span>());</span><br><span class="line">        <span class="keyword">if</span> (today &lt; thisYearsBirthday) &#123;</span><br><span class="line">            <span class="keyword">return</span> today.<span class="title function_">getFullYear</span>() - bd.<span class="title function_">getFullYear</span>() - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> today.<span class="title function_">getFullYear</span>() - bd.<span class="title function_">getFullYear</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>利用する側のコードはこんな感じです。初期の誕生日の値はフューチャーの創業日にしてます。33歳ですね。僕まだ30周年ってロゴの入った名刺を使い切ってないのですが。</p><figure class="highlight ts"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCallback, useEffect, <span class="title class_">ChangeEvent</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useRecoilValue, useRecoilState &#125; <span class="keyword">from</span> <span class="string">&quot;recoil&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; birthdayState, ageState &#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [birthday, setBirthday] = <span class="title function_">useRecoilState</span>(birthdayState)</span><br><span class="line">  <span class="keyword">const</span> age = <span class="title function_">useRecoilValue</span>(ageState)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初期化</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setBirthday</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1989</span>, <span class="number">10</span>, <span class="number">28</span>))</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="comment">// テキストボックスが変更されたら呼ばれるコールバック</span></span><br><span class="line">  <span class="keyword">const</span> onChange = <span class="title function_">useCallback</span>(<span class="keyword">function</span> <span class="title function_">changeState</span>(<span class="params">ev: ChangeEvent&lt;HTMLInputElement&gt;</span>) &#123;</span><br><span class="line">    <span class="title function_">setBirthday</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(ev.<span class="property">target</span>.<span class="property">value</span>))</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span>誕生日:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">id</span>=<span class="string">&quot;start&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1989-11-28&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>誕生日 &#123;birthday.toString()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>年齢 &#123;age&#125;歳<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="atomFamily-selectorFamilyとは"><a href="#atomFamily-selectorFamilyとは" class="headerlink" title="atomFamily, selectorFamilyとは"></a>atomFamily, selectorFamilyとは</h1><p><code>atom</code>と<code>selector</code>に似た<code>atomFamily</code>と<code>selectorFamily</code>があります。ドキュメントを読んでいると説明なく出てくるのですが、これは<code>atom</code>と<code>selector</code>のファクトリー関数です。</p><p>例えば、家族全員の情報を入力するパネルを作りたいとします。家族の人数は可変です。徳川11代将軍の徳川家斉の情報を入力するには53人分の子供欄が必要です。そのような時に、<code>atomFamily</code>, <code>selectorFamily</code>を使うと、子どもIDなどをもとにバリエーションを簡単に増やせます。先ほどのモデルに、数値でIDを渡してバリエーションを作るのを図示したのが次の絵です。別のコンポーネントから使う場合も、1つ実装すれば使いまわせます。</p><img src="/images/20230215a/名称未設定ファイル-ページ2.drawio.png" alt="名称未設定ファイル-ページ2.drawio.png" width="681" height="261" loading="lazy"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> birthdayFamilyState = <span class="title function_">atomFamily</span>(&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;birthday&quot;</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ageFamilyState = <span class="title function_">selectorFamily</span>(&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;age&quot;</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="function">(<span class="params">p: <span class="built_in">number</span></span>) =&gt;</span> <span class="function">(<span class="params">&#123;get&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> bd = <span class="title function_">get</span>(<span class="title function_">birthdayFamilyState</span>(p))</span><br><span class="line">        <span class="keyword">const</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> thisYearsBirthday = <span class="keyword">new</span> <span class="title class_">Date</span>(today.<span class="title function_">getFullYear</span>(), bd.<span class="title function_">getMonth</span>(), bd.<span class="title function_">getDay</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (today &lt; thisYearsBirthday) &#123;</span><br><span class="line">            <span class="keyword">return</span> today.<span class="title function_">getFullYear</span>() - bd.<span class="title function_">getFullYear</span>() - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> today.<span class="title function_">getFullYear</span>() - bd.<span class="title function_">getFullYear</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>xxxFamilyにパラメータを渡すと、<code>atom</code>&#x2F;<code>selector</code>が出てきます。利用するコンポーネントでパラメータp(ここでは<code>childId</code>を設定）を入れると、コンポーネントごとにstateが持てます。Reduxでは地味に面倒だったやつ。</p><figure class="highlight ts"><figcaption><span>ShowBirthday.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRecoilValue &#125; <span class="keyword">from</span> <span class="string">&quot;recoil&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; birthdayFamilyState, ageFamilyState &#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123;</span><br><span class="line">  <span class="attr">childId</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ShowBirthday</span>(<span class="params">&#123;childId&#125;: Props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> birthday = <span class="title function_">useRecoilValue</span>(<span class="title function_">birthdayFamilyState</span>(childId))</span><br><span class="line">  <span class="keyword">const</span> age = <span class="title function_">useRecoilValue</span>(<span class="title function_">ageFamilyState</span>(childId))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>誕生日 &#123;birthday.toString()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>年齢 &#123;age&#125;歳<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="スナップショット"><a href="#スナップショット" class="headerlink" title="スナップショット"></a>スナップショット</h1><p>他にドキュメントを読んでいるとこれまた説明なしに出てくるのがスナップショットです。<code>atom</code>や<code>selector</code>は定義側は独立して作れますが、実態としては<code>key</code>をキーにして、まとまった状態として管理されます。その状態をまるごと取り出したり、書き込んだりする機能がスナップショットのようです。テスト目的でまるごと状態を差し替えたり、といった用途に使えるようです。</p><h1 id="おまけ-Redux-Toolkitとの違い"><a href="#おまけ-Redux-Toolkitとの違い" class="headerlink" title="おまけ: Redux-Toolkitとの違い"></a>おまけ: Redux-Toolkitとの違い</h1><p>Reactで関数コンポーネントを使い、Redux-Toolkitとの接点でフックを使う前提で話をします。最初のReduxやHOCの使い方については触れません。</p><p>Redux-Toolkitの場合は、<code>configureStore()</code>を使ってストアという大きな箱を1つ作ります。このストアの中には<code>createSlice()</code>を使って、サブのストアを作ります。Recoilは<code>atom()</code>をどこでも定義できて自由に使えますが、Redux-Toolkitではこのストア<code>&lt;Provider&gt;</code>コンポーネントに渡し、Reactアプリケーションの根っこの部分にリンクさせる必要があります。</p><p>コンポーネントとの接点はフックを使います。<code>useSelector()</code>でストアの中の状態のうち、コンポーネントが必要のある部分だけを選択してコンポーネントから参照できるようにします。また、<code>useDispatch()</code>を使ってストアの更新を行います。この時の呼ぶ処理は「Reducer」と呼ばれます。関数型チックな用語が使われていますが、元々のReduxは</p><p>　古い状態→Reducer→新しい状態</p><p>という感じで状態を変更していました。状態も純粋関数で変更するという形式です。まあさすがに潔癖すぎたのか、Redux-ToolkitのSliceではオブジェクト指向にちょっと回帰した感じのAPIになっています。　</p><img src="/images/20230215a/名称未設定ファイル-ページ3.drawio.png" alt="名称未設定ファイル-ページ3.drawio.png" width="591" height="291" loading="lazy"><p>Redux-ToolkitはRecoilと比べると、<code>selector</code>的なものがありません。おそらく、次のどれかで代替する必要があります。</p><ul><li>ちょっとした計算だったら毎回計算してしまえ</li><li>Reduxの外で<code>useMemo()</code>を使う</li><li>計算結果もストアに入れてしまう</li></ul><p>ストアにはアプリケーション全体の状態が集まってしまい、密結合になってしまいます。Slice単位では再利用はReduxよりかはしやすい感じですが、コンポーネントが特定のパスにマウントされているSliceに依存する感じになりがちで、コンポーネントの再利用製がやや低くなってしまうのだな、とRecoilと比較すると思います。</p><p>ただ、状態一元管理されており、ストアとコンポーネント間の読み書きの流れもフックで隔離されているし、コード解析して状態を知るにはRedux-Toolkitの方が追いかけやすいと思うので、超大人数でアプリ開発するエンプラ開発のノリだとこっちの方が良いのかも？とか思ったりはします。きちんと分析して、アプリの持つ状態の構造とか全体像がきちんと把握できるのであればそこまで悪くはないと思います。うちはVue.jsを使う会社なのでRedux-Toolkitは使いませんが、フューチャーぐらい設計をしっかり固める会社ならこちらの方が向いているかな、と。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Recoilはまだバージョンが1.0になっておらず、リファレンスを見ると<code>UNSTABLE</code>がついた関数もたくさんあります。ですが、今回触れなかった非同期の対応などの柔軟さ、エラー処理、Suspense対応など、Reactとの親和性が高まっており、今まで不便と感じてなかった部分についても「こんな改善がありえたのか」という発見がある、楽しいライブラリになっています。</p><p>ですが、ドキュメントもまだ発展途上なのか、説明が十分にない単語が堂々と出てきたりして、読んでいると不安になるところも少しあります。多くの人がすでにわかっていると思うRedux-Toolkitとの比較していますし、本エントリーで、そういうところの不安の解消ができれば、と思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;RecoilはFacebookのMeta社製のReact用状態管理ライブラリです。この分野はFacebook自体がFluxという概念を発表してから、さまざまなライブラリが開発されてきました。&lt;/p&gt;
&lt;p&gt;特に広く利用されたのがReduxです。Reduxはとても小さなライブ</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
    <category term="Recoil" scheme="https://future-architect.github.io/tags/Recoil/"/>
    
  </entry>
  
  <entry>
    <title>対応ブラウザバージョンを考える</title>
    <link href="https://future-architect.github.io/articles/20230214a/"/>
    <id>https://future-architect.github.io/articles/20230214a/</id>
    <published>2023-02-13T15:00:00.000Z</published>
    <updated>2023-02-14T04:21:46.451Z</updated>
    
    <content type="html"><![CDATA[<p>新しいウェブベースのシステムを開発する場合、あるいは更新する場合に問題になるのがブラウザのバージョンです。アプリケーションを実装する場合、場合によっては最新の機能を利用したいと思うかもしれませんが、場合によってはその機能を実装したブラウザのシェアが高くないかも？ということが考えられます。どの機能が使えるのかを選択するには、まずはブラウザのバージョンを決めなければなりません。</p><h1 id="セキュリティアップデートがされているブラウザのバージョン状況"><a href="#セキュリティアップデートがされているブラウザのバージョン状況" class="headerlink" title="セキュリティアップデートがされているブラウザのバージョン状況"></a>セキュリティアップデートがされているブラウザのバージョン状況</h1><p>基本的にはセキュリティ更新がされているOSとそれがサポートしているブラウザのみを対象にするのが良いでしょう。また、最近はOSのバージョンとブラウザのバージョンは独立していてブラウザは自動更新となっているケースがほとんどです。</p><p>詳細は後で別項目にまとめますが（まとめたら分量が多くなって読みにくくなったので後ろに分割して移動した)、2023年2月現在このセキュリティ更新されているかどうかでフィルタしたサポートすべきバージョンは以下の通りかと思います。</p><ul><li>デスクトップ<ul><li>Chrome(Win&#x2F;Mac&#x2F;Linux): 最新のみ</li><li>Safari(Mac): 最新のみ</li><li>Edge(Win&#x2F;Mac&#x2F;Linux&#x2F;組み込みブラウザ): 最新のみ</li><li>Firefox(Win&#x2F;Mac&#x2F;Linux): 最新 or 延長サポート版(最大1年)</li></ul></li><li>モバイル<ul><li>Android(含む組み込みブラウザ): Chrome最新版のみ</li><li>iOS Safari(含むSFSafariViewController): 12.x, 15.x, 16.x</li><li>iOS WKWebView: iOS 12, 15, 16</li></ul></li></ul><p>Chrome&#x2F;Edge&#x2F;Firefox通常版に関しては最新版のみサポートなので対応ブラウザバージョンも最新で良いと思います。Safariはデスクトップ版に関しては<a href="https://en.wikipedia.org/wiki/Safari_version_history">アクティブなmacOSには最新Safariが提供</a>されているようです。</p><p>iOS版Safariがややこしいのですが、<a href="https://endoflife.date/ios">現在セキュリティ更新がきているOSバージョン</a>が12, 15, 16で、<a href="https://qiita.com/yoshitake_1201/items/05a13fd77c18ff380eb6">iOSのバージョンとSafariのメジャーバージョンは一致</a>しているのでこうなっています。あと、iOSの組み込みブラウザで使われるWKWebViewが、どうもSafariよりも少し古いようで機能が弱そうなので要注意です。なお、iOS 12までしかあげられない端末はiPhone 5S&#x2F;iPhone 6&#x2F;iPhone 6 Plus&#x2F;iPad Air(初代)&#x2F;iPad mini(2, 3)で、どれも9年ぐらい前の端末です。</p><h1 id="業務向け"><a href="#業務向け" class="headerlink" title="業務向け"></a>業務向け</h1><p>基本的にはセキュリティ更新がされているバージョンのみを相手にすれば良いと思います。最新以外を対象にする必要があるのはモバイルのSafariだけですが、業務向けだと、セキュリティパッチはだいたい当てていると思いますし、情シスが決めているサポートポリシーや導入している端末によって、サポート対象が絞れる可能性があります。</p><p>もちろん、社外と繋がっていないイントラネットで、アップデートされていないOSとブラウザを使う、というケースは考えられますが、そういう特殊ケースはここでは考えないこととします。</p><h1 id="コンシューマー向け"><a href="#コンシューマー向け" class="headerlink" title="コンシューマー向け"></a>コンシューマー向け</h1><p>コンシューマー向けだと、ストレージがないとかでバージョンアップをしていないユーザーもいたりします。また、古い端末を使っているユーザーが実は重課金ヘビーユーザーだった、ということでサポートが切るにきれないということは現実問題としてあったりもします。</p><p>銀行サービスとかお金のやり取りがあったりするケースであれば、最新のセキュリティ対応がされているブラウザに対応する条件で良いと思います。それ以外のサービスだと、97%-99%ぐらいのシェアを見て、古い機種やOSでしか動かないブラウザはサポート対象外とする、という運用がされることが多いようです。</p><h1 id="欲しい機能がどのブラウザバージョンで使えるか知る"><a href="#欲しい機能がどのブラウザバージョンで使えるか知る" class="headerlink" title="欲しい機能がどのブラウザバージョンで使えるか知る"></a>欲しい機能がどのブラウザバージョンで使えるか知る</h1><p>ブラウザのバージョンが決まると、どの程度の機能をつかえるのかがわかります。</p><p>これを知るための情報源として有用なのは<a href="https://caniuse.com/">caniuse.com</a>です。ドメインの意味はCan I Use?です。例えば、WebPイメージが使えるかどうかを見るには上の検索パネルに<code>webp</code>と入れれば<a href="https://caniuse.com/webp">表示されます</a>。</p><img src="/images/20230214a/スクリーンショット_2023-02-08_13.18.48.png" alt="スクリーンショット_2023-02-08_13.18.48.png" width="1200" height="606" loading="lazy"><p>caniuse.com はブラウザのシェア情報を集合知でメンテナンスして持っていて、国を日本に設定すれば日本のシェアも取れます。このシェア情報は<a href="https://www.npmjs.com/package/caniuse-lite">caniuse-lite</a>というnpmパッケージにもなっており、JSのバンドルツールが「シェア95%程度のブラウザで動くようにコードを修正する」といったような指定がされたときの情報源としても利用されています。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Windows 8.1のサポートがなくなったことで、正式にInternet Explorerが退任することになりました。一方で、システム開発の要件のブラウザはどうなるのか、というのが気になったので調べてみました。</p><p>今どきはバージョン固定ができないブラウザが増えているので、基本的には要件では「最新ブラウザ」という書き方になりそうです。あとは、Mobile Safariが要注意ですね。</p><p>本エントリーに関しては <a href="https://twitter.com/tkihira">@tkihira</a> さんと、 <a href="https://twitter.com/isoparametric">@isoparametric</a> さんにいくつか助言をもらいました。ありがとうございました。</p><h1 id="おまけ：ブラウザのサポート状況を知る（詳細"><a href="#おまけ：ブラウザのサポート状況を知る（詳細" class="headerlink" title="おまけ：ブラウザのサポート状況を知る（詳細)"></a>おまけ：ブラウザのサポート状況を知る（詳細)</h1><p>参考にしたのは以下のウェブサイトです。まあOSのバージョンはおまけです。</p><ul><li>ソフトウェアのリリース期限調査: <a href="https://endoflife.date/">endoflife.date</a></li><li>ブラウザのバージョンごとのシェア: <a href="https://caniuse.com/usage-table">caniuse.com</a></li><li>OSのバージョンごとのシェア<ul><li><a href="https://moduleapps.com/mobile-marketing/android-ver/">moduleapps.comのAndroidページ(随時更新)</a></li><li><a href="https://moduleapps.com/mobile-marketing/ios-ver/">moduleapps.comのiOSページ(随時更新)</a></li></ul></li></ul><h2 id="デスクトップブラウザ"><a href="#デスクトップブラウザ" class="headerlink" title="デスクトップブラウザ"></a>デスクトップブラウザ</h2><p>基本的にはどれも最新版のみを対象とすれば良さそうです。</p><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><p>4週間ごとのメジャーバージョン更新があります。<a href="https://support.google.com/chrome/a/answer/9027636?hl=en">8週間ごとの更新になるExtended Stable Channel</a>なるものもあるらしい。知らなかった。基本的には過去2バージョンのみがサポート対象と見ておけば良さそうです。</p><h3 id="Edge"><a href="#Edge" class="headerlink" title="Edge"></a>Edge</h3><p><a href="https://learn.microsoft.com/en-us/deployedge/microsoft-edge-support-lifecycle">4週間ごとのリリースで、最新3バージョンをサポート</a>とのことなので、3ヶ月ほどのサポート期間になりますが、ほぼ最新のものだけを見ておけば良さそうです。</p><p>なお、Windowsの組み込みブラウザには通称WebView1とWebView2があります。WebView1はIE7相当のエンジンが積まれており、現在も公式に使える脱法IEと言えます。WebView2はEdgeベースです。WebView2は<a href="https://forest.watch.impress.co.jp/docs/news/1462785.html">OSアップデートと追従するEvergreen版と、アプリ開発者が固定するFix版</a>があるとのことです。</p><h3 id="Safari"><a href="#Safari" class="headerlink" title="Safari"></a>Safari</h3><p>SafariはmacOSのバージョンとセットです。<a href="https://en.wikipedia.org/wiki/Safari_version_history">現在アクティブにサポートされているOSバージョンには最新版がダウンロードされてくる</a>ようです。</p><h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><p>1年間の長期サポートバージョンもありますが、基本的には最新版のみがサポート対象で、4週間ごとに更新されます。</p><h2 id="モバイルブラウザ"><a href="#モバイルブラウザ" class="headerlink" title="モバイルブラウザ"></a>モバイルブラウザ</h2><h3 id="AndroidのChrome"><a href="#AndroidのChrome" class="headerlink" title="AndroidのChrome"></a>AndroidのChrome</h3><p>AndroidのChromeはデスクトップと同じく、最新版のみがサポート対象です。常に更新されているため、最新版だけ見ておけば良いでしょう。</p><p>組み込みブラウザは過去にいろいろ変遷があり、Android 4まではOSバージョンとハードリンクしていましたが、5, 6はAndroid System WebViewというブラウザコンポーネントでストアから更新されるようになりました。Android 7からは<a href="https://developer.android.com/about/versions/nougat/android-7.0?hl=ja#webview">Chromeアプリ</a>がWebViewとしても使われるようになりました。まあ<a href="https://moduleapps.com/mobile-marketing/android-ver/">4以前のAndroidシェアは無視できるレベル</a>ですし、<a href="https://endoflife.date/android">現在サポートされているAndroidバージョンも10以降</a>なので、組み込みブラウザも常に最新とみなして良さそうです。</p><h3 id="iOSのSafari"><a href="#iOSのSafari" class="headerlink" title="iOSのSafari"></a>iOSのSafari</h3><p>アプリ版のSafariは<a href="https://qiita.com/yoshitake_1201/items/05a13fd77c18ff380eb6">iOSのバージョンとSafariのバージョン</a>がリンクしています。つまり、<a href="https://moduleapps.com/mobile-marketing/ios-ver/">iOSのバージョンのシェア</a>も見てあげる必要があります。iOSユーザーはだいたい最新の3バージョンに収まることが知られています。</p><p>組み込みブラウザは現在は主に２つあります。かつてはUIWebViewもありましたが今使われることはないと思います。</p><ul><li>WKWebView: Safariとは別物で、少しバージョンが古く、Safariで使える機能がちょっと使えなかったりするが、実際にどのバージョンなのかの情報は見つからず。組み込み利用時の柔軟性は高い。</li><li>SFSafariViewController: Safariを起動する。Safariとクッキーやセッション情報を共有している。バージョンはアプリ版のSafariと同等。組み込み利用時のカスタマイズ項目が少ない。</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;新しいウェブベースのシステムを開発する場合、あるいは更新する場合に問題になるのがブラウザのバージョンです。アプリケーションを実装する場合、場合によっては最新の機能を利用したいと思うかもしれませんが、場合によってはその機能を実装したブラウザのシェアが高くないかも？ということが</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Web" scheme="https://future-architect.github.io/tags/Web/"/>
    
    <category term="バージョン管理" scheme="https://future-architect.github.io/tags/%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86/"/>
    
    <category term="ブラウザ" scheme="https://future-architect.github.io/tags/%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vertex AI PipelinesのTips</title>
    <link href="https://future-architect.github.io/articles/20230213a/"/>
    <id>https://future-architect.github.io/articles/20230213a/</id>
    <published>2023-02-12T15:00:00.000Z</published>
    <updated>2023-02-13T02:25:27.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、フューチャーでアルバイトをしている平野です。今回は、Vertex AI Pipelinesを利用してみて分かったTipsについて、いくつかピックアップしてまとめました。なお、コードは全てPython・Kubeflowを用いた場合を記載しています。</p><h1 id="前提知識"><a href="#前提知識" class="headerlink" title="前提知識"></a>前提知識</h1><p>Vertex AI Pipelinesとは、GCP上でMLパイプライン機能を提供するサービスです。サーバーレス方式でMLワークフローをオーケストレートします。</p><p>基本的な使い方などについては様々なドキュメントがあるので今回は省略しますが、主には以下の公式ドキュメントを参考にしました。</p><p><a href="https://cloud.google.com/vertex-ai/docs?hl=ja">Vertex AI のドキュメント</a><br>公式のドキュメントです。Vertex AIの概要、チュートリアル、コードサンプルなどがまとめられています。</p><p><a href="https://www.kubeflow.org/docs/">Kubeflowのドキュメント</a><br>Vertex AI Pipelinesを使う際に参照することになる、Kubeflowの公式ドキュメントです。こちらもKubeflowの概要からコンポーネントの作成・パイプラインの実行、サンプルなどがまとめてあります。</p><h2 id="関連用語"><a href="#関連用語" class="headerlink" title="関連用語"></a>関連用語</h2><p><a href="https://recruit.gmo.jp/engineer/jisedai/blog/vertex-ai-pipelines-intro/">MLOps on GCP 入門 〜Vertex AI Pipelines 実践〜</a>で分かりやすく解説されていたため、参考にさせていただきました。</p><ul><li>パイプライン<br>機械学習の一連の処理をカプセル化したものです。Pythonで定義します。前処理やモデル学習、エンドポイントへのデプロイなどの一つ一つの処理（コンポーネント）の実行順序を記述します。パイプラインを定義する関数には<code>@pipeline</code>デコレータを付けます。パイプラインの内部には「精度がある値を超えたらデプロイする」などの条件分岐を含ませることも可能です。</li><li>コンポーネント<br>パイプラインで実行する一つ一つの処理のことを指します。例えば、preprocess -&gt; train -&gt; deployを実行するパイプラインの場合、「preprocess」、「train」、「deploy」がコンポーネントです。コンポーネントを定義する関数には<code>@component</code>デコレータを付けます。コンポーネントの実装には以下の3つが存在します。<br><strong>コンポーネントの実装パターン</strong><ul><li>① GCR に push されている<strong>Docker image</strong>を使う  （詳細は<a href="#%E8%87%AA%E5%89%8D%E3%81%AEdocker-image%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF">自前のDocker imageを使って実装するには？</a>）<br>  GCRにpushされているimageのURIを引数として与えることで処理を行う関数が用意されています。</li><li>② パイプラインのソースコードに<strong>関数ベース</strong>で書く （詳細は<a href="#%E4%BA%8B%E5%89%8D%E3%81%AEdocker-image%E3%81%AE%E6%BA%96%E5%82%99%E3%81%AA%E3%81%97%E3%81%A7python%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AE%E3%81%BF%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%AB%E3%81%AF">事前のDocker imageの準備なしでPythonスクリプトのみで実装には？</a>）<br>  dockerのimageを使わずPythonベースで好きな処理を書くことができるため、簡単な処理を試したい場合などに向いています。</li><li>③ <strong>Google Cloudパイプラインコンポーネント</strong>を使う<br>  よく利用される処理についてはGoogle側がすでに用意してくれているため、事前に関数一発で呼び出して実行してくれるものになっています。</li></ul></li></ul><img src="/images/20230213a/pipeline_example.png" alt="pipeline_example.png" width="960" height="540" loading="lazy"><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://recruit.gmo.jp/engineer/jisedai/blog/vertex-ai-pipelines-intro/">MLOps on GCP 入門 〜Vertex AI Pipelines 実践〜</a></li></ul><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h2 id="【基本】パイプラインを実装するには？"><a href="#【基本】パイプラインを実装するには？" class="headerlink" title="【基本】パイプラインを実装するには？"></a>【基本】パイプラインを実装するには？</h2><p>おさらいとしてパイプラインの実装方法から始めます。ここではコンポーネントを実装する方法の内、以下２つを紹介します。</p><p>① 自前のDocker imageを使って実装<br>② 事前のDocker imageの準備なしでPythonスクリプトのみで実装</p><h3 id="①-自前のDocker-imageを使って実装するには？"><a href="#①-自前のDocker-imageを使って実装するには？" class="headerlink" title="① 自前のDocker imageを使って実装するには？"></a>① 自前のDocker imageを使って実装するには？</h3><h4 id="1-コンポーネントの作成"><a href="#1-コンポーネントの作成" class="headerlink" title="1. コンポーネントの作成"></a>1. コンポーネントの作成</h4><p><strong>コンテナ（Dockerfile+src）とコンポーネント定義yamlを用意する</strong></p><p>こちらの方法では、コンポーネントごとにDocker imageを用意して、そのDocker imageにコンポーネントの処理の内容を記述したPythonスクリプトを含ませることでコンポーネントを作成します。この方法は、利用するDocker imageのDockerfileやコンポーネントの各種設定を記述したyamlファイルを用意する必要がありますが、ローカルで動かしていたPythonスクリプトをそのままコンポーネント化することができます。Docker imageでコンポーネントを作成するために必要なファイルは以下の3つになります。</p><ul><li>Pythonスクリプト：コンポーネントの処理の内容を記述する。</li><li>Dockerfile：Pythonスクリプトの実行に必要なパッケージをインストールする。Pythonスクリプトのコピーも。</li><li>yamlファイル：コンポーネントの入出力、使用するDocker image、Pythonスクリプト実行の際の引数の設定などを記述する。</li></ul><p>それぞれのファイルの記述例を以下に示します。<br>Pythonスクリプトの記述例</p><figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse  <span class="comment"># 必要なパッケージのインポート</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">csv_path: <span class="built_in">str</span>, ...</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># コンポーネントの処理を記述</span></span><br><span class="line">    df = pd.read_csv(csv_path)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">'Print text'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--csv_path'</span>, <span class="built_in">type</span>=<span class="built_in">str</span>)</span><br><span class="line">    ...</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    run(**<span class="built_in">vars</span>(args))</span><br></pre></td></tr></table></figure><p>Dockerfileの記述例</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-slim</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 必要なパッケージのインストール</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install pandas</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># srcファイルのコピー</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">"python"</span>, <span class="string">"main.py"</span>]</span></span><br></pre></td></tr></table></figure><p>yamlファイルの記述例</p><figure class="highlight yaml"><figcaption><span>foo.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">bar</span></span><br><span class="line"></span><br><span class="line"><span class="attr">inputs:</span></span><br><span class="line">  <span class="bullet">-</span> {<span class="attr">name:</span> <span class="string">src_csv</span>, <span class="attr">type:</span> <span class="string">String</span>, <span class="attr">description:</span> <span class="string">'Path to csv file'</span>}</span><br><span class="line">  <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">implementation:</span></span><br><span class="line">  <span class="attr">container:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gcr.io/&lt;GCP_PROJECT_ID&gt;/&lt;IMAGE_NAME&gt;:latest</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">python</span>, <span class="string">main.py</span>]</span><br><span class="line">    <span class="attr">args:</span> [</span><br><span class="line">      <span class="string">--csv_path</span>, {<span class="attr">inputValue:</span> <span class="string">src_csv</span>},</span><br><span class="line">      <span class="string">...</span></span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h4 id="2-パイプラインの作成"><a href="#2-パイプラインの作成" class="headerlink" title="2. パイプラインの作成"></a>2. パイプラインの作成</h4><p><strong>Pythonでパイプラインを定義する（コンポーネントの依存関係定義など）</strong></p><p>コンポーネントの作成が終わったら、続いてそれらのコンポーネントをつなげてパイプラインを作成します。</p><p>パイプラインを定義した関数には<code>@pipeline</code>デコレータを付けます。引数にはパイプラインの名前、説明、<code>pipeline_root</code>を指定できます。<code>pipeline_root</code>にCloud Storageのバケットを指定することで、指定したバケットに各処理で生成されるアーティファクトを保持しておくことができます。</p><p>また、パイプラインをコンパイルするには<code>compiler.Compiler().compile</code>関数を使用します。引数にはコンパイルする関数、コンパイル結果を出力するjsonファイルのパスを渡します。</p><p>パイプラインの定義、コンパイルを行うPythonスクリプトの例は以下の通りです。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> compiler, components, dsl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'vertex-ai-pipelines-sample'</span>,  <span class="comment"># パイプラインを定義する関数には@pipelineデコレータを付ける。</span></span></span></span><br><span class="line"><span class="params"><span class="meta">              description=<span class="string">'Vertex AI Piplines sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              pipeline_root=ROOT_BUCKET</span>)  </span><span class="comment"># pipeline_rootにGCSのバケットを指定すると、指定したバケットに各処理で生成されるアーティファクトを保持できる</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>(<span class="params"><span class="built_in">input</span>: <span class="built_in">str</span>, ...</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    foo_op = components.load_component_from_file(  <span class="comment"># 「Docker imageでコンポーネント作成」で作ったyamlファイルを渡す。</span></span><br><span class="line">        <span class="string">'foo.yaml'</span>)</span><br><span class="line">    foo_task = foo_op(src_csv=<span class="built_in">input</span>, ...)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">compiler.Compiler().<span class="built_in">compile</span>(pipeline_func=pipeline,</span><br><span class="line">                            package_path=<span class="string">'pipeline.json'</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>パイプラインを定義したファイルを実行すると、パイプライン実行時に必要なjsonファイルが<code>compiler.Compiler().compile()</code>の<code>package_path</code>に指定したパス（上記の例では<code>pipeline.json</code>）に生成されます。</p><h3 id="②-事前のDocker-imageの準備なしでPythonスクリプトのみで実装には？"><a href="#②-事前のDocker-imageの準備なしでPythonスクリプトのみで実装には？" class="headerlink" title="② 事前のDocker imageの準備なしでPythonスクリプトのみで実装には？"></a>② 事前のDocker imageの準備なしでPythonスクリプトのみで実装には？</h3><p>Vertex AI Pipelinesでは、コンポーネントの処理内容をPythonの関数として記述することでPythonスクリプトのみでコンポーネントを作成することができます。その一方で関数の定義の仕方には若干の癖があります。コンポーネントの関数はstandaloneである必要があり、以下の要件を満たす必要があります。</p><ul><li>関数の外で定義された関数や変数を含まない</li><li>関数内で必要なパッケージ・モジュールは関数内でimportする</li><li>関数の入出力の型を明記する</li></ul><p>この方法でのコンポーネントの作成例を以下に示します。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">'python:3.8'</span>,  <span class="comment"># 関数を実行するベースイメージを指定</span></span></span></span><br><span class="line"><span class="params"><span class="meta">               packages_to_install=[<span class="string">"numpy"</span>, ...]</span>)  </span><span class="comment"># 必要なパッケージをここで指定、バージョンの指定も可能</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 必要なパッケージ・モジュールは関数内でimportする</span></span><br><span class="line"></span><br><span class="line">    a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">    b = np.array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">    c = a + b</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>コンポーネントを定義する関数には<code>@component</code>デコレータを付け、<code>base_image</code>引数でコンポーネントを実行するコンテナイメージを指定、<code>packages_to_install</code>引数にリストで必要なパッケージを指定します。また、<code>create_component_from_func</code>で関数をラップすることでもコンポーネント化することができます（この場合は<code>@component</code>デコレータは必要ありません）。<code>create_component_from_func</code>の引数にも<code>base_image</code>、<code>packages_to_install</code>があるので、そちらでコンテナイメージ、必要なパッケージを指定できます。</p><p>コンポーネントの作成が終わったら、続いてそれらのコンポーネントをつなげてパイプラインを作成します。</p><p>パイプラインの定義、コンパイルを行うPythonスクリプトの例は以下の通りです。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> compiler, dsl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'vertex-ai-pipelines-sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              description=<span class="string">'Vertex AI Piplines sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              pipeline_root=ROOT_BUCKET</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    foo_task = foo(<span class="built_in">input</span>=...)  <span class="comment"># コンポーネントの関数に@compoentデコレータを付けた場合</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># コンポーネントの関数に@compoentデコレータを付けなかった場合</span></span><br><span class="line">    bar_op = components.create_component_from_func(</span><br><span class="line">        func=bar,</span><br><span class="line">        base_image=<span class="string">"python:3.8"</span>,</span><br><span class="line">        packages_to_install=[<span class="string">"numpy&gt;=1.22.1"</span>, ...]</span><br><span class="line">    )</span><br><span class="line">    bar_task = bar_op(<span class="built_in">input</span>=...)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">compiler.Compiler().<span class="built_in">compile</span>(pipeline_func=pipeline,</span><br><span class="line">                            package_path=<span class="string">'pipeline.json'</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zenn.dev/dhirooka/articles/71a5fc473baefb">Vertex Pipelinesによる機械学習パイプラインの実行</a></li><li><a href="https://www.kubeflow.org/docs/components/pipelines/v1/sdk/python-function-components/">Building Python function-based components</a></li></ul><h2 id="コンポーネントの依存関係を制御するには？"><a href="#コンポーネントの依存関係を制御するには？" class="headerlink" title="コンポーネントの依存関係を制御するには？"></a>コンポーネントの依存関係を制御するには？</h2><p>①パイプラインの実行順序は基本的にはコンポーネントの入出力の関係から自動的に決定されます。</p><p>例えば、以下のようなパイプラインの場合、<code>add_op</code>→<code>mul_op</code>→<code>print_op</code>の順に実行されます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl, compiler</span><br><span class="line"><span class="keyword">import</span> google.cloud.aiplatform <span class="keyword">as</span> aip</span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">"python:3.8"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_op</span>(<span class="params">a:<span class="built_in">int</span>, b:<span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">"python:3.8"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_op</span>(<span class="params">a:<span class="built_in">int</span>, b:<span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">"python:3.8"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_op</span>(<span class="params">a:<span class="built_in">int</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"result = {}"</span>.<span class="built_in">format</span>(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">"dependancy-check"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>(<span class="params">a:<span class="built_in">int</span>, b:<span class="built_in">int</span>, c:<span class="built_in">int</span></span>):</span><br><span class="line">    add_task = add_op(a, b)</span><br><span class="line">    mul_task = mul_op(add_task.output, c) <span class="comment"># mul_opはadd_opの出力が必要</span></span><br><span class="line">    print_op(mul_task.output) <span class="comment"># print_opはmul_opの出力が必要</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    compiler.Compiler().<span class="built_in">compile</span>(pipeline_func=pipeline, package_path=<span class="string">'pipeline.json'</span>)</span><br><span class="line"></span><br><span class="line">    job = aip.PipelineJob(</span><br><span class="line">        display_name=<span class="string">"dependancy-check"</span>,</span><br><span class="line">        template_path=<span class="string">"pipeline.json"</span>,</span><br><span class="line">        location=<span class="string">"asia-northeast1"</span>,</span><br><span class="line">        parameter_values={<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>, <span class="string">"c"</span>: <span class="number">3</span>}</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    job.run()</span><br></pre></td></tr></table></figure><img src="/images/20230213a/dependancy.png" alt="dependancy.png" width="413" height="408" loading="lazy"><p>②パイプラインの実行順序を明示的に制御したい場合には、<code>ContainerOp.after</code>関数を使うことで可能です。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'dependancy-check'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    component1_task = component1()</span><br><span class="line">    component2_task = component2()</span><br><span class="line">    component3_task = component3()</span><br><span class="line"></span><br><span class="line">    component2_task.after(component1_task)</span><br><span class="line">    component3_task.after(component2_task)</span><br></pre></td></tr></table></figure><p>上のようなコードの場合、以下の図のようなパイプラインとなります。<br><img src="/images/20230213a/dependancy1.png" alt="dependancy1.png" width="396" height="376" loading="lazy"></p><p>また、<code>after</code>関数は複数のコンポーネントを受け取ることもできます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'dependancy-check'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    component1_task = component1()</span><br><span class="line">    component2_task = component2()</span><br><span class="line">    component3_task = component3()</span><br><span class="line"></span><br><span class="line">    component3_task.after(component1_task, component2_task)</span><br></pre></td></tr></table></figure><p>この場合、以下のようなパイプラインとなります。</p><img src="/images/20230213a/dependancy2.png" alt="dependancy2.png" width="792" height="246" loading="lazy"><h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.kubeflow.org/docs/components/pipelines/v2/author-a-pipeline/tasks/#explicitly-dependent-tasks">Explicitly dependent tasks</a></li><li><a href="https://qiita.com/f6wbl6/items/ef2603bf47a47ffd63ac#%E3%82%B8%E3%83%A7%E3%83%96%E3%81%AE%E5%AE%9F%E8%A1%8C%E9%A0%86%E5%BA%8F%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B">ジョブの実行順序を指定する</a></li></ul><h2 id="パイプラインを起動するには？"><a href="#パイプラインを起動するには？" class="headerlink" title="パイプラインを起動するには？"></a>パイプラインを起動するには？</h2><p>パイプラインの起動方法としては、GUIから起動する方法とPythonスクリプトやノートブックから起動する方法があります。GUIから起動する方法については以下の参考の<code>コンソール</code>をご確認ください。</p><p>Pythonスクリプトから起動する場合は、以下のようなスクリプトを作成し、実行することでパイプラインを起動できます。ノートブック（Vertex AI Workbenchなど）の場合は、以下のコードを最後のセルで実行することで起動できます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> google.cloud.aiplatform <span class="keyword">as</span> aip</span><br><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> compiler, components, dsl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'vertex-ai-pipelines-sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              description=<span class="string">'Vertex AI Piplines sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              pipeline_root=ROOT_BUCKET</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># パイプラインを定義</span></span><br><span class="line">    foo_task = foo(<span class="built_in">input</span>=...)</span><br><span class="line">    bar_task = bar_op(<span class="built_in">input</span>=...)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># パイプラインをコンパイル</span></span><br><span class="line">compiler.Compiler().<span class="built_in">compile</span>(pipeline_func=pipeline,</span><br><span class="line">                            package_path=<span class="string">'pipeline.json'</span>)</span><br><span class="line"></span><br><span class="line">job = aip.PipelineJob(</span><br><span class="line">    display_name=<span class="string">"vertex-ai-pipelines-sample"</span>,</span><br><span class="line">    template_path=<span class="string">"pipeline.json"</span>,  <span class="comment"># パイプラインをコンパイルした際のpackage_pathを渡す</span></span><br><span class="line">    location=<span class="string">"asia-northeast1"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">job.submit()</span><br></pre></td></tr></table></figure><p><code>job.submit()</code>のほかに<code>job.run()</code>も利用することができ、両者の違いは、<code>submit()</code>はジョブを投げ終わると終了、<code>run()</code>はジョブを投げた後、パイプラインの状態を定期的に表示してくれます。</p><h3 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://cloud.google.com/vertex-ai/docs/pipelines/run-pipeline?hl=ja#console">パイプラインを実行する</a></li></ul><h2 id="各コンポーネントに指定したスペックを割り当てるには？"><a href="#各コンポーネントに指定したスペックを割り当てるには？" class="headerlink" title="各コンポーネントに指定したスペックを割り当てるには？"></a>各コンポーネントに指定したスペックを割り当てるには？</h2><p>マシンタイプを指定しない場合にはデフォルトで<code>e2-standard-4</code>（4コアのCPUと16GBのメモリ）が利用されます。コンポーネントのマシンタイプを指定するには、<code>set_cpu_limit</code>、<code>set_memory_limit</code>、<code>add_node_selector_constraint</code>、<code>set_gpu_limit</code>を利用します。マシンタイプを指定するとVertex AI Pipelines側が指定されたスペックに最も近いマシンを自動で割り当てます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl</span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'custom-container-pipeline'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>():</span><br><span class="line">    preprocess_task = preprocess_op().set_cpu_limit(<span class="string">"16"</span>).set_memory_limit(<span class="string">"20"</span>)</span><br><span class="line">    train_task = train_op(preprocess_task.output).add_node_selector_constraint(<span class="string">"cloud.google.com/gke-accelerator"</span>, <span class="string">"NVIDIA_TESLA_A100"</span>).set_gpu_limit(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>また、<code>CustomJob.jobSpec.workerPoolSpecs</code>から指定することもできます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> compiler, components, dsl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'vertex-pipelines-sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              description=<span class="string">'Vertex Piplines sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              pipeline_root=ROOT_BUCKET</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>(<span class="params">learning_rate: <span class="built_in">float</span> = <span class="number">0.1</span>, max_depth: <span class="built_in">int</span> = <span class="number">10</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    foo_op = components.load_component_from_file(<span class="string">'path/to/component.yaml'</span>)</span><br><span class="line">    foo_task = foo_op(<span class="built_in">input</span>=...)</span><br><span class="line">    foo_task.custom_job_spec = {  <span class="comment"># custom_job_specでジョブ実行の詳細を設定できる</span></span><br><span class="line">        <span class="string">"display_name"</span>: display_name,</span><br><span class="line">        <span class="string">"job_spec"</span>: {</span><br><span class="line">            <span class="string">"worker_pool_specs"</span>: [</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"machine_spec"</span>: {</span><br><span class="line">                        <span class="string">"machine_type"</span>: <span class="string">"n1-standard-4"</span>,</span><br><span class="line">                        <span class="string">"accelerator_type"</span>: aiplatform.gapic.AcceleratorType.NVIDIA_TESLA_K80,</span><br><span class="line">                        <span class="string">"accelerator_count"</span>: <span class="number">1</span>,</span><br><span class="line">                    },</span><br><span class="line">                    <span class="string">"replica_count"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">"container_spec"</span>: {</span><br><span class="line">                        <span class="string">"image_uri"</span>: container_image_uri,</span><br><span class="line">                        <span class="string">"command"</span>: [],</span><br><span class="line">                        <span class="string">"args"</span>: [],</span><br><span class="line">                    },</span><br><span class="line">                }</span><br><span class="line">            ]</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></table></figure><h3 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://cloud.google.com/vertex-ai/docs/pipelines/machine-types?hl=ja">パイプライン ステップのマシンタイプを指定する</a></li><li><a href="https://cloud.google.com/vertex-ai/docs/training/configure-compute?hl=ja#create_custom_job_machine_types-python">カスタム トレーニング用のコンピューティング リソースを構成する</a></li></ul><h2 id="実行結果のキャッシュを利用するには？"><a href="#実行結果のキャッシュを利用するには？" class="headerlink" title="実行結果のキャッシュを利用するには？"></a>実行結果のキャッシュを利用するには？</h2><p>Vertex AI Pipelinesでは、パイプライン全体、タスク単位でキャッシュを利用するかどうかを選択できます。パイプライン全体でキャッシュを利用する場合には、コンパイルしたパイプラインを実行する際に<code>enable_caching</code>を<code>True</code>にすることでキャッシュを利用できます。なお、<code>enable_caching</code>はデフォルトで<code>True</code>となっているのでむしろキャッシュを利用したくない場合に<code>False</code>にすることになると思います。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pl = PipelineJob(</span><br><span class="line">    display_name=<span class="string">"My first pipeline"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Whether or not to enable caching</span></span><br><span class="line">    <span class="comment"># True = enable the current run to use caching results from previous runs</span></span><br><span class="line">    <span class="comment"># False = disable the current run's use of caching results from previous runs</span></span><br><span class="line">    <span class="comment"># None = defer to cache option for each pipeline component in the pipeline definition</span></span><br><span class="line">    enable_caching=<span class="literal">False</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Local or Cloud Storage path to a compiled pipeline definition</span></span><br><span class="line">    template_path=<span class="string">"pipeline.json"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Cloud Storage path to act as the pipeline root</span></span><br><span class="line">    pipeline_root=pipeline_root,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>タスク単位でキャッシュを利用する場合は、<code>&lt;task_name&gt;.set_caching_options(True)</code>で利用することができます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dsl.pipeline(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">    name=<span class="string">'vertex-ai-pipelines-sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">    description=<span class="string">'Vertex AI Piplines sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">    pipeline_root=ROOT_BUCKET</span></span></span><br><span class="line"><span class="params"><span class="meta"></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    foo_op = components.load_component_from_file(<span class="string">'path/to/component.yaml'</span>)</span><br><span class="line">    foo_task = foo_op(<span class="built_in">input</span>=...)</span><br><span class="line">    foo_task.set_caching_options(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>キャッシュが利用されたかどうかは、パイプラインのGUIから確認することができます。キャッシュが利用されている場合にはコンポーネントの右に以下のような矢印マークが付きます。また、ノード情報からもキャッシュ済みかを確認できます。</p><img src="/images/20230213a/cached.png" alt="cached.png" width="380" height="127" loading="lazy"><img src="/images/20230213a/component_detail_cached.png" alt="component_detail_cached.png" width="641" height="317" loading="lazy"><h3 id="参考-5"><a href="#参考-5" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://cloud.google.com/vertex-ai/docs/pipelines/configure-caching?hl=ja">実行キャッシュの構成</a></li></ul><h2 id="パイプラインを定期実行するには？"><a href="#パイプラインを定期実行するには？" class="headerlink" title="パイプラインを定期実行するには？"></a>パイプラインを定期実行するには？</h2><p>パイプラインの定期実行はCloud Schedulerを利用することで可能です。</p><p>パイプラインの定期実行までの流れは以下のようになります。</p><ol><li>コンパイルしたパイプラインjsonファイルをGoogle Cloud Storageにアップロード<br>以下のコマンドでローカルのファイルをバケットにアップロードします。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsutil <span class="built_in">cp</span> &lt;ローカルファイルまでのパス&gt; gs://&lt;BUCKET_NAME&gt;/&lt;ファイル名&gt;</span><br></pre></td></tr></table></figure></li><li>HTTPリクエストに応じてパイプラインを実行するPythonスクリプトの作成<br>Cloud FunctionsでHTTPリクエストが送信された場合にパイプラインを実行するコードを作成します。<br>以下がPythonスクリプトの例です。HTTPリクエストのbodyに、実行するパイプラインのjsonファイルまでのパス、パイプラインに渡すパラメータが含まれているという想定です。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> aiplatform</span><br><span class="line"></span><br><span class="line">PROJECT_ID = <span class="string">'your-project-id'</span>         <span class="comment"># &lt;---CHANGE THIS</span></span><br><span class="line">REGION = <span class="string">'your-region'</span>                 <span class="comment"># &lt;---CHANGE THIS</span></span><br><span class="line">PIPELINE_ROOT = <span class="string">'your-cloud-storage-pipeline-root'</span>   <span class="comment"># &lt;---CHANGE THIS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">request</span>):</span><br><span class="line">   <span class="string">"""Processes the incoming HTTP request.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Args:</span></span><br><span class="line"><span class="string">     request (flask.Request): HTTP request object.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Returns:</span></span><br><span class="line"><span class="string">     The response text or any set of values that can be turned into a Response</span></span><br><span class="line"><span class="string">     object using `make_response</span></span><br><span class="line"><span class="string">     &lt;http://flask.pocoo.org/docs/1.0/api/#flask.Flask.make_response&gt;`.</span></span><br><span class="line"><span class="string">   """</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># decode http request payload and translate into JSON object</span></span><br><span class="line">   request_str = request.data.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">   request_json = json.loads(request_str)</span><br><span class="line"></span><br><span class="line">   pipeline_spec_uri = request_json[<span class="string">'pipeline_spec_uri'</span>]</span><br><span class="line">   parameter_values = request_json[<span class="string">'parameter_values'</span>]</span><br><span class="line"></span><br><span class="line">   aiplatform.init(</span><br><span class="line">       project=PROJECT_ID,</span><br><span class="line">       location=REGION,</span><br><span class="line">   )</span><br><span class="line"></span><br><span class="line">   job = aiplatform.PipelineJob(</span><br><span class="line">       display_name=<span class="string">f'hello-world-cloud-function-pipeline'</span>,</span><br><span class="line">       template_path=pipeline_spec_uri,</span><br><span class="line">       pipeline_root=PIPELINE_ROOT,</span><br><span class="line">       enable_caching=<span class="literal">False</span>,</span><br><span class="line">       parameter_values=parameter_values</span><br><span class="line">   )</span><br><span class="line"></span><br><span class="line">   job.submit()</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"Job submitted"</span></span><br></pre></td></tr></table></figure>以下はHTTPリクエストのbodyの内容です。Cloud Schedulerジョブを作成する際に以下の内容を含むjsonファイルを使用します。<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"pipeline_spec_uri"</span><span class="punctuation">:</span> <span class="string">"&lt;path-to-your-compiled-pipeline&gt;"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"parameter_values"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"greet_name"</span><span class="punctuation">:</span> <span class="string">"&lt;any-greet-string&gt;"</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></table></figure></li><li>Cloud Functionsの関数をデプロイ<br>続いて、HTTPトリガーを使用して関数をデプロイします。<br>上で作成したPythonスクリプトを含むディレクトリで以下のコマンドを実行します。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gcloud <span class="built_in">functions</span> deploy python-http-function \</span><br><span class="line">    --gen2 \</span><br><span class="line">    --runtime=python37 \</span><br><span class="line">    --region=asia-northeast1 \</span><br><span class="line">    --<span class="built_in">source</span>=. \</span><br><span class="line">    --entry-point=process_request \</span><br><span class="line">    --trigger-http</span><br></pre></td></tr></table></figure></li><li>Cloud Schedulerジョブを作成<br>最後に以下のコマンドでCloud Schedulerジョブを作成します。以下の例では毎日の朝9時にパイプラインが実行されます。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gcloud scheduler <span class="built_in">jobs</span> create http run-pipeline \</span><br><span class="line">    --schedule=<span class="string">"0 9 * * *"</span></span><br><span class="line">    --uri=&lt;PATH_TO_PIPELINE_JSON&gt; \</span><br><span class="line">    --http-method=post \</span><br><span class="line">    --message-body-from-file=&lt;PATH_TO_HTTP_REQUEST_JSON&gt; \</span><br><span class="line">    --time-zone=Asia/Tokyo</span><br></pre></td></tr></table></figure></li></ol><h3 id="参考-6"><a href="#参考-6" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://cloud.google.com/vertex-ai/docs/pipelines/schedule-cloud-scheduler?hl=ja">Cloud Scheduler でパイプライン実行をスケジュールする</a></li><li><a href="https://cloud.google.com/functions/docs/create-deploy-gcloud?hl=ja#functions-prepare-environment-python">Google Cloud CLI を使用して Cloud Functions（第 2 世代）の関数を作成してデプロイする</a></li><li><a href="https://cloud.google.com/scheduler/docs/creating?hl=ja#gcloud_2">cron ジョブを作成して構成する</a></li><li><a href="https://cloud.google.com/sdk/gcloud/reference/scheduler/jobs/update/http?hl=ja">gcloud コマンドライン リファレンス</a></li></ul><h2 id="引数を渡すには？"><a href="#引数を渡すには？" class="headerlink" title="引数を渡すには？"></a>引数を渡すには？</h2><p>ユーザ→パイプライン、コンポーネント→コンポーネント</p><p>パイプライン実行時に引数を渡すには、<code>aiplatform.PipelineJob</code>の<code>parameter_values</code>を指定することで可能です。辞書型で変数名と値のペアで渡すことができます。あとは<code>argparse</code>などを利用すれば、コマンドライン引数からパイプラインのパラメータを入力できます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl, compiler</span><br><span class="line"><span class="keyword">import</span> google.cloud.aiplatform <span class="keyword">as</span> aip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">"-a"</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-b"</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-c"</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">"python:3.8"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_op</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">"python:3.8"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_op</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">"python:3.8"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_op</span>(<span class="params">a: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"result = {}"</span>.<span class="built_in">format</span>(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">"pipeline-arg-sample"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span>, c: <span class="built_in">int</span></span>):</span><br><span class="line">    add_task = add_op(a, b)</span><br><span class="line">    mul_task = mul_op(add_task.output, c)</span><br><span class="line">    print_op(mul_task.output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    compiler.Compiler().<span class="built_in">compile</span>(pipeline_func=pipeline, package_path=<span class="string">'pipeline.json'</span>)</span><br><span class="line"></span><br><span class="line">    job = aip.PipelineJob(</span><br><span class="line">        display_name=<span class="string">"pipeline-arg-sample"</span>,</span><br><span class="line">        template_path=<span class="string">"pipeline.json"</span>,</span><br><span class="line">        location=<span class="string">"asia-northeast1"</span>,</span><br><span class="line">        parameter_values={<span class="string">"a"</span>: args.a, <span class="string">"b"</span>: args.b, <span class="string">"c"</span>: args.c},</span><br><span class="line">        enable_caching=<span class="literal">False</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    job.run()</span><br></pre></td></tr></table></figure><p>コンポーネント間でのデータの受け渡しは、渡すデータが単一データか複数データかで異なります。<br>単一データの受け渡しの場合、以下のようになります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">'python:3.8'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">'python:3.8'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_result</span>(<span class="params">a: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'vertex-pipelines-sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              description=<span class="string">'Vertex Piplines sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              pipeline_root=ROOT_BUCKET</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>(<span class="params">a: <span class="built_in">int</span> = <span class="number">1</span>, b: <span class="built_in">int</span> = <span class="number">2</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    add_task = add(a, b)</span><br><span class="line">    print_task = print_result(add_task.output)</span><br></pre></td></tr></table></figure><p>単一データの場合、関数の出力は<code>&lt;task_name&gt;.output</code>で渡すことができます。</p><p>一方、複数データの受け渡しの場合は、以下のようになります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> NamedTuple</span><br><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">'python:3.8'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max_min</span>(<span class="params">a: <span class="built_in">list</span></span>) -&gt; NamedTuple(<span class="string">'Outputs'</span>, [(<span class="string">'max'</span>, <span class="built_in">int</span>), (<span class="string">'min'</span>, <span class="built_in">int</span>)]):</span><br><span class="line">    <span class="built_in">max</span> = <span class="built_in">max</span>(a)</span><br><span class="line">    <span class="built_in">min</span> = <span class="built_in">min</span>(a)</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">max</span>, <span class="built_in">min</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">'python:3.8'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_result</span>(<span class="params"><span class="built_in">max</span>: <span class="built_in">int</span>, <span class="built_in">min</span>: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"max: {}, min: {}"</span>.<span class="built_in">format</span>(<span class="built_in">max</span>, <span class="built_in">min</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'vertex-pipelines-sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              description=<span class="string">'Vertex Piplines sample'</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              pipeline_root=ROOT_BUCKET</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>(<span class="params">a: <span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    max_min_task = max_min(a)</span><br><span class="line">    print_task = print_result(max_min_task.outputs[<span class="string">'max'</span>], max_min_task.outputs[<span class="string">'min'</span>])</span><br></pre></td></tr></table></figure><p>複数データを出力する場合は、<code>NamedTuple</code>を用いて属性名を指定して出力し、それらを受け取る際には<code>&lt;task_name&gt;.outputs['&lt;key&gt;']</code>で各データを指定します。</p><h3 id="参考-7"><a href="#参考-7" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.kubeflow.org/docs/components/pipelines/v1/sdk/python-function-components/#understanding-how-data-is-passed-between-components">Understanding how data is passed between components</a></li><li><a href="https://qiita.com/f6wbl6/items/f668368222983f7f8f46">Kubeflow Pipelinesにおけるコンポーネント間のデータ受け取り方・渡し方まとめ - その1</a></li><li><a href="https://qiita.com/f6wbl6/items/9080670c21bb35c37c0c">Kubeflow Pipelinesにおけるコンポーネント間のデータ受け取り方・渡し方まとめ - その2</a></li></ul><h2 id="パラメータ・中間データ・モデルを管理するには？"><a href="#パラメータ・中間データ・モデルを管理するには？" class="headerlink" title="パラメータ・中間データ・モデルを管理するには？"></a>パラメータ・中間データ・モデルを管理するには？</h2><h3 id="入力パラメータの保存"><a href="#入力パラメータの保存" class="headerlink" title="入力パラメータの保存"></a>入力パラメータの保存</h3><p>パイプラインを定義した関数の入力が自動で保存されます。例えばパイプラインを以下のような関数とした場合、<code>learning_rate</code>と<code>max_depth</code>が「パイプライン実行分析」の「実行パラメータ」や、パイプライン比較の「パラメータ」として表示されます。</p><p>また、これらのパラメータはパイプラインのリランの際に、別の値を入力してパイプラインを実行することができます。<strong>リランの際にはこれらのパラメータしか変更できないため、変更の可能性があるパラメータはすべてパイプラインの関数の引数としておくことをおすすめします。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'train LightGBM'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>(<span class="params">learning_rate: <span class="built_in">float</span> = <span class="number">0.1</span>, max_depth: <span class="built_in">int</span> = <span class="number">10</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><img src="/images/20230213a/param.png" alt="param.png" width="647" height="220" loading="lazy"><h3 id="データセット、モデル、指標の保存"><a href="#データセット、モデル、指標の保存" class="headerlink" title="データセット、モデル、指標の保存"></a>データセット、モデル、指標の保存</h3><p>データを保存するには、コンポーネントの関数の引数に<code>Output[&lt;type&gt;]</code>もしくは<code>OutputPath("&lt;type&gt;")</code>型の引数を作ることで可能です。<code>&lt;type&gt;</code>には<code>Dataset</code>、<code>Model</code>、<code>Metrics</code>、<code>Execution</code>が指定できます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl</span><br><span class="line"><span class="keyword">from</span> kfp.v2.dsl <span class="keyword">import</span> OutputPath</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">'python:3.8'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">..., model: Output[Model], ...</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ...</span><br><span class="line">    model_dir = Path(artifact.path)</span><br><span class="line">    model_dir.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    joblib.dump(model, model_dir / <span class="string">'model.joblib'</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>また、Dockerベースの場合には、コンポーネントの仕様を定義したyamlファイルの<code>outputs</code>に記述することでできます。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">train</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">outputs:</span></span><br><span class="line">  <span class="bullet">-</span> {<span class="attr">name:</span> <span class="string">model</span>, <span class="attr">type:</span> <span class="string">Model</span>, <span class="attr">description:</span> <span class="string">'trained model'</span>}</span><br></pre></td></tr></table></figure><p>指標については、以下のように<code>log_metric(&lt;name&gt;, &lt;value&gt;)</code>を使うことで、のちの比較において「指標」として見ることができます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl</span><br><span class="line"><span class="keyword">from</span> kfp.v2.dsl <span class="keyword">import</span> Input, Dataset, Model, Output, Metrics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">    base_image=<span class="string">"python:3.8"</span>, packages_to_install=[...]</span></span></span><br><span class="line"><span class="params"><span class="meta"></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">dataset: Input[Dataset], model: Input[Model], metrics: Output[Metrics]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ...</span><br><span class="line">    metrics.log_metric(<span class="string">"accuracy"</span>, (acc * <span class="number">100.0</span>))</span><br><span class="line">    metrics.log_metric(<span class="string">"framework"</span>, <span class="string">"Scikit Learn"</span>)</span><br></pre></td></tr></table></figure><img src="/images/20230213a/metrics.png" alt="metrics.png" width="612" height="156" loading="lazy">→各データについて、後から確認したくなった場合、Vertex AI Pipelinesでは、どのようなパイプラインの中で生成されたのかをGUIで見ることができます。<img src="/images/20230213a/data_lineage_modified.png" alt="data_lineage_modified.png" width="1200" height="382" loading="lazy"><h2 id="ログを確認するには？"><a href="#ログを確認するには？" class="headerlink" title="ログを確認するには？"></a>ログを確認するには？</h2><p>ログはパイプラインのコンポーネントごとに見ることができます。</p><p>Vertex AI Pipelinesのコンソールからログを見たいパイプラインを選択し、表示されるパイプラインのグラフからコンポーネントを選択することで、画面下部にコンポーネントのログが表示されます。</p><p>ログは標準出力、標準エラー出力に出力されたものがログに表示されます。</p><h2 id="処理時間・起動時間（Pythonスクリプト・Docker-image）を確認するには？"><a href="#処理時間・起動時間（Pythonスクリプト・Docker-image）を確認するには？" class="headerlink" title="処理時間・起動時間（Pythonスクリプト・Docker image）を確認するには？"></a>処理時間・起動時間（Pythonスクリプト・Docker image）を確認するには？</h2><p>パイプラインの処理時間や開始時刻、終了時刻はパイプライン一覧のページから確認できます。<br><img src="/images/20230213a/time.png" alt="time.png" width="1200" height="306" loading="lazy"><br>また、パイプラインの詳細のページからは各コンポーネントの処理時間、開始時刻、終了時刻を確認できます。<br><img src="/images/20230213a/time_component.png" alt="time_component.png" width="515" height="468" loading="lazy"></p><h2 id="パイプラインのグループ分け・実行結果を比較するには？"><a href="#パイプラインのグループ分け・実行結果を比較するには？" class="headerlink" title="パイプラインのグループ分け・実行結果を比較するには？"></a>パイプラインのグループ分け・実行結果を比較するには？</h2><p>Vertex AI Pipelinesでは、パイプライン実行で生じる様々なデータ（入力パラメータ、データセット、モデル、指標、etc）を保存することができ、後でそれらを確認したり、複数のパイプラインを比較したりすることができます。データの保存については<a href="#%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E4%B8%AD%E9%96%93%E3%83%87%E3%83%BC%E3%82%BF%E3%83%A2%E3%83%87%E3%83%AB%E3%82%92%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF">パラメータ・中間データ・モデルを管理するには？</a>をご覧ください。</p><h3 id="パイプラインのグルーピング"><a href="#パイプラインのグルーピング" class="headerlink" title="パイプラインのグルーピング"></a>パイプラインのグルーピング</h3><p>パイプラインをのちの比較のためにグルーピングしておきたい場合には、Vertex AI Experimentsが便利です。Vertex AI Experimentsではexperimentを作成してそこにパイプラインを登録することができます。experimentの作成は以下のようにしてできます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> google.cloud.aiplatform <span class="keyword">as</span> aip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    aip.init(</span><br><span class="line">        experiment=<span class="string">"&lt;experiment_name&gt;"</span>,</span><br><span class="line">        experiment_description=<span class="string">"&lt;experiment_description&gt;"</span>,</span><br><span class="line">        project=<span class="string">"&lt;project_id&gt;"</span>,</span><br><span class="line">        location=<span class="string">"&lt;region&gt;"</span>,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>パイプライン実行時に以下のように作成したexperimentを指定することでパイプラインをexperimentに登録することができます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> google.cloud.aiplatform <span class="keyword">as</span> aip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    job = aip.PipelineJob(</span><br><span class="line">        display_name=<span class="string">"&lt;display_name&gt;"</span>,</span><br><span class="line">        template_path=<span class="string">"path/to/pipeline.json"</span>,</span><br><span class="line">        location=<span class="string">"&lt;region&gt;"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    job.submit(experiment=<span class="string">"&lt;experiment_name&gt;"</span>)</span><br></pre></td></tr></table></figure><p>experimentはサイドバーの「テスト」から見ることができます。</p><img src="/images/20230213a/experiment.png" alt="experiment.png" width="752" height="318" loading="lazy"><h3 id="パイプラインの比較"><a href="#パイプラインの比較" class="headerlink" title="パイプラインの比較"></a>パイプラインの比較</h3><p>パイプラインを比較する方法はVertex AI PipelinesのGUIから行う方法と、Vertex AI Experimentsから行う方法の2種類あります。</p><p>Vertex AI PipelinesのGUIから行う場合は、パイプライン一覧のページから比較したいパイプラインを選択後、比較を押すことで以下の図のような比較が可能です。<br><img src="/images/20230213a/compare_pipelines_modified.png" alt="compare_pipelines_modified.png" width="1200" height="408" loading="lazy"><br>Vertex AI Experimentsから行う場合は、サイドバーの「テスト」から見たいexperimentを選ぶと、以下のように比較ができます。<br><img src="/images/20230213a/experiment_2.png" alt="experiment.png" width="752" height="318" loading="lazy"><br><img src="/images/20230213a/compare_pipelines_in_vertex_ai_experiments.png" alt="compare_pipelines_in_vertex_ai_experiments.png" width="1200" height="258" loading="lazy"><br>また、Pythonスクリプトでターミナル上から比較することも可能です。以下のスクリプトを実行することで対象のexperiment内のパイプラインを比較できます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> google.cloud.aiplatform <span class="keyword">as</span> aip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_experiments_data_frame_sample</span>(<span class="params"></span></span><br><span class="line"><span class="params">    experiment: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">    project: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">    location: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    aip.init(experiment=experiment, project=project, location=location)</span><br><span class="line"></span><br><span class="line">    experiments_df = aip.get_experiment_df()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> experiments_df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    df = get_experiments_data_frame_sample(</span><br><span class="line">        experiment=<span class="string">"&lt;experiment_name&gt;"</span>,</span><br><span class="line">        project=<span class="string">"&lt;project_id&gt;"</span>,</span><br><span class="line">        location=<span class="string">"&lt;region&gt;"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p>以下が実行結果です。<br><img src="/images/20230213a/compare_pipelines_in_terminal.png" alt="compare_pipelines_in_terminal.png" width="1200" height="49" loading="lazy"></p><h2 id="Vertex-AI-Pipelinesを利用するコストは？"><a href="#Vertex-AI-Pipelinesを利用するコストは？" class="headerlink" title="Vertex AI Pipelinesを利用するコストは？"></a>Vertex AI Pipelinesを利用するコストは？</h2><p>Vertex AI Pipelinesでは、パイプライン実行ごとに0.03ドルかかります。（執筆時点）</p><p>加えて、コンポーネントによって使用されるCompute Engineリソースやデータの保存に使用されるGoogle Cloudリソースに対しても課金されます。</p><p>例として、リージョンに<code>asia-northeast1</code>、コンポーネントのマシンタイプに<code>n1-standard-4</code>を指定してパイプラインを1時間実行した場合は</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="101.241ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 44748.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">パ</text></g><g data-mml-node="mi" transform="translate(1389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">イ</text></g><g data-mml-node="mi" transform="translate(2389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">プ</text></g><g data-mml-node="mi" transform="translate(3389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">ラ</text></g><g data-mml-node="mi" transform="translate(4389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">イ</text></g><g data-mml-node="mi" transform="translate(5389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">ン</text></g><g data-mml-node="mi" transform="translate(6389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">実</text></g><g data-mml-node="mi" transform="translate(7389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(8389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">料</text></g><g data-mml-node="mi" transform="translate(9389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">金</text></g><g data-mml-node="mo" transform="translate(10389,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11000.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(12000.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(12389.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(12989.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(13711.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(14711.9,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(15180.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(15541.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(16070.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(16670.9,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(17190.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(17719.9,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(18170.9,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(18913.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(19913.3,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mi" transform="translate(20413.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">の</text></g><g data-mml-node="mn" transform="translate(21413.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(21913.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">時</text></g><g data-mml-node="mi" transform="translate(22913.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">間</text></g><g data-mml-node="mi" transform="translate(23913.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">当</text></g><g data-mml-node="mi" transform="translate(24913.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">た</text></g><g data-mml-node="mi" transform="translate(25913.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">り</text></g><g data-mml-node="mi" transform="translate(26913.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">の</text></g><g data-mml-node="mi" transform="translate(27913.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">料</text></g><g data-mml-node="mi" transform="translate(28913.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">金</text></g><g data-mml-node="mo" transform="translate(29913.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(30524.6,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(31524.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(32302.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(33358.3,0)"><g data-mml-node="mo"><path data-c="24" d="M162 187Q162 164 146 149T109 133H103V130Q108 115 115 105Q122 92 131 82T150 64T170 52T190 44T206 40T220 37L227 36V313Q190 320 162 335Q116 358 86 404T55 508Q55 567 85 614T165 685Q186 696 225 704H227V750H273V704L286 703Q369 690 413 631Q441 588 444 531Q444 514 443 509Q439 490 425 479T391 468Q368 468 353 483T337 522Q337 546 353 560T390 575L394 576V578Q386 599 372 614T342 637T314 649T288 656L273 658V408L288 405Q329 394 355 376Q396 348 420 300T444 199Q444 130 408 76T313 1Q286 -9 276 -9H273V-56H227V-10H221Q202 -6 193 -4T155 11T108 41T74 94T55 176V182Q55 227 95 238Q103 240 108 240Q129 240 145 226T162 187ZM225 657Q219 657 204 651T169 632T135 594T121 538Q121 512 131 491T156 457T187 435T213 423T227 420V539Q227 657 225 657ZM378 169Q378 230 339 265T274 301Q273 301 273 169V37Q324 50 351 87T378 169Z"></path></g></g><g data-mml-node="mn" transform="translate(33858.3,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(35858.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(36858.8,0)"><g data-mml-node="mo"><path data-c="24" d="M162 187Q162 164 146 149T109 133H103V130Q108 115 115 105Q122 92 131 82T150 64T170 52T190 44T206 40T220 37L227 36V313Q190 320 162 335Q116 358 86 404T55 508Q55 567 85 614T165 685Q186 696 225 704H227V750H273V704L286 703Q369 690 413 631Q441 588 444 531Q444 514 443 509Q439 490 425 479T391 468Q368 468 353 483T337 522Q337 546 353 560T390 575L394 576V578Q386 599 372 614T342 637T314 649T288 656L273 658V408L288 405Q329 394 355 376Q396 348 420 300T444 199Q444 130 408 76T313 1Q286 -9 276 -9H273V-56H227V-10H221Q202 -6 193 -4T155 11T108 41T74 94T55 176V182Q55 227 95 238Q103 240 108 240Q129 240 145 226T162 187ZM225 657Q219 657 204 651T169 632T135 594T121 538Q121 512 131 491T156 457T187 435T213 423T227 420V539Q227 657 225 657ZM378 169Q378 230 339 265T274 301Q273 301 273 169V37Q324 50 351 87T378 169Z"></path></g></g><g data-mml-node="mn" transform="translate(37358.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1778,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(2278,0)"></path></g><g data-mml-node="mo" transform="translate(40414.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(41470.3,0)"><g data-mml-node="mo"><path data-c="24" d="M162 187Q162 164 146 149T109 133H103V130Q108 115 115 105Q122 92 131 82T150 64T170 52T190 44T206 40T220 37L227 36V313Q190 320 162 335Q116 358 86 404T55 508Q55 567 85 614T165 685Q186 696 225 704H227V750H273V704L286 703Q369 690 413 631Q441 588 444 531Q444 514 443 509Q439 490 425 479T391 468Q368 468 353 483T337 522Q337 546 353 560T390 575L394 576V578Q386 599 372 614T342 637T314 649T288 656L273 658V408L288 405Q329 394 355 376Q396 348 420 300T444 199Q444 130 408 76T313 1Q286 -9 276 -9H273V-56H227V-10H221Q202 -6 193 -4T155 11T108 41T74 94T55 176V182Q55 227 95 238Q103 240 108 240Q129 240 145 226T162 187ZM225 657Q219 657 204 651T169 632T135 594T121 538Q121 512 131 491T156 457T187 435T213 423T227 420V539Q227 657 225 657ZM378 169Q378 230 339 265T274 301Q273 301 273 169V37Q324 50 351 87T378 169Z"></path></g></g><g data-mml-node="mn" transform="translate(41970.3,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(778,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1778,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(2278,0)"></path></g></g></g></svg></mjx-container></p><p>かかる計算になります。<br>料金の詳細については、以下の参考のリンク先をご参照ください。</p><h3 id="参考-8"><a href="#参考-8" class="headerlink" title="参考"></a>参考</h3><p><a href="https://cloud.google.com/vertex-ai/pricing?hl=ja#pipelines">Vertex AI Pipelinesの料金</a></p><h2 id="起動時間の目安は？"><a href="#起動時間の目安は？" class="headerlink" title="起動時間の目安は？"></a>起動時間の目安は？</h2><p>環境や実行するパイプラインによって起動時間は変わると思いますが、参考までに以下のような簡単なパイプラインで確認してみたところ、約1分後に<code>print</code>の内容がログに表示されました。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> google.cloud.aiplatform <span class="keyword">as</span> aip</span><br><span class="line"><span class="keyword">from</span> kfp.v2 <span class="keyword">import</span> dsl, compiler</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.component(<span class="params">base_image=<span class="string">"python:3.8"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_startuptime</span>():</span><br><span class="line">    <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(datetime.datetime.now())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dsl.pipeline(<span class="params">name=<span class="string">'check-startuptime'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipeline</span>():</span><br><span class="line">    check_startuptime()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    compiler.Compiler().<span class="built_in">compile</span>(pipeline_func=pipeline, package_path=<span class="string">'pipeline.json'</span>)</span><br><span class="line">    job = aip.PipelineJob(</span><br><span class="line">        display_name=<span class="string">"check-startuptime"</span>,</span><br><span class="line">        template_path=<span class="string">"pipeline.json"</span>,</span><br><span class="line">        location=<span class="string">"asia-northeast1"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(datetime.datetime.now())  <span class="comment"># 2023-01-17 07:09:54.927736</span></span><br><span class="line">    job.submit()</span><br></pre></td></tr></table></figure><p>ログ<br><img src="/images/20230213a/startuptime.png" alt="startuptime.png" width="686" height="42" loading="lazy"></p><h2 id="ディレクトリ構成はどうすればよい？"><a href="#ディレクトリ構成はどうすればよい？" class="headerlink" title="ディレクトリ構成はどうすればよい？"></a>ディレクトリ構成はどうすればよい？</h2><p>コンポーネント関連のファイルは、例えば以下のような構成が記載されています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">components/&lt;component group&gt;/&lt;component name&gt;/</span><br><span class="line"></span><br><span class="line">    src/*            <span class="comment"># コンポーネントのソースファイル</span></span><br><span class="line">    tests/*          <span class="comment"># コンポーネントをテストするためのファイル</span></span><br><span class="line">    run_tests.sh     <span class="comment"># テストを走らせるためのshellスクリプト</span></span><br><span class="line">    README.md        <span class="comment"># 複数ファイルで構成される場合は、docsというディレクトリを作ってそこで管理</span></span><br><span class="line"></span><br><span class="line">    Dockerfile       <span class="comment"># コンポーネントのImageを作るためのDockerfile</span></span><br><span class="line">    build_image.sh   <span class="comment"># docker buildとdocker pushを行うためのshellスクリプト</span></span><br><span class="line"></span><br><span class="line">    component.yaml   <span class="comment"># コンポーネントの仕様を定義したyamlファイル</span></span><br></pre></td></tr></table></figure><p>実際にこの構成で管理された<a href="https://github.com/kubeflow/pipelines/tree/master/components/contrib/sample/keras/train_classifier">公式のサンプルコード</a>がありましたので、詳細はそちらをご参照ください。</p><h3 id="参考-9"><a href="#参考-9" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.kubeflow.org/docs/components/pipelines/v1/sdk/component-development/#organizing-the-component-files">Organizing the component files</a></li></ul><h2 id="テストはどうすればよい？"><a href="#テストはどうすればよい？" class="headerlink" title="テストはどうすればよい？"></a>テストはどうすればよい？</h2><p><a href="https://github.com/kubeflow/pipelines/tree/6ee767769d8b8daa61379be6511e7375f8de0a55/samples/test">kubeflowの公式のサンプル</a>では、<code>unittest</code>を用いたテストの例がありました。</p><h3 id="参考-10"><a href="#参考-10" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://cloud.google.com/blog/ja/topics/developers-practitioners/best-practices-managing-vertex-pipelines-code">Vertex Pipelines コードを管理するためのベスト プラクティス</a></li><li><a href="https://www.kubeflow.org/docs/components/pipelines/v1/sdk/best-practices/#writing-tests">Writing tests</a></li></ul><h2 id="パイプライン実行のためのサービスアカウントは？"><a href="#パイプライン実行のためのサービスアカウントは？" class="headerlink" title="パイプライン実行のためのサービスアカウントは？"></a>パイプライン実行のためのサービスアカウントは？</h2><p>Vertex AI Pipelines関連のサービスアカウントは、パイプライン実行の際に指定できるサービスアカウントと、パイプライン実行時に各種リソースにアクセスするためにGoogle側が作成するService agents（<code>gcp-sa-aiplatform-cc.iam.gserviceaccount.com</code>と<code>gcp-sa-aiplatform.iam.gserviceaccount.com</code>）の計3つが存在します。</p><p>1つめのパイプライン実行時のサービスアカウントを指定しない場合、Compute Engineのデフォルトのサービスアカウントを使用してパイプラインを実行します。</p><p>Compute Engineのデフォルトのサービスアカウントには、<strong>プロジェクト編集者</strong>のロールがデフォルトで付与されています。そのため、公式のガイドではきめ細かい権限を持つサービスアカウントの作成に関する項目があります。</p><p><code>gcp-sa-aiplatform-cc.iam.gserviceaccount.com</code>と<code>gcp-sa-aiplatform.iam.gserviceaccount.com</code>はVertex AIを利用し始めた段階でGoogle側が自動で作成してくれるため、利用者側が事前に作成する必要はありません。また、パイプライン実行時に指定する必要もありません。</p><p><code>gcp-sa-aiplatform-cc.iam.gserviceaccount.com</code>はカスタムトレーニングコードを実行する際に利用され、<code>gcp-sa-aiplatform.iam.gserviceaccount.com</code>はVertex AI全般の機能を動作させるために利用されるようです。これら2つのアカウントが持つロールについては<a href="https://cloud.google.com/iam/docs/understanding-roles#service-agents-roles">こちら</a>をご参照ください。</p><h3 id="参考-11"><a href="#参考-11" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://cloud.google.com/vertex-ai/docs/pipelines/configure-project#service-account">きめ細かい権限を持つサービス アカウントを構成する</a></li><li><a href="https://cloud.google.com/iam/docs/service-agents">Service agents</a></li><li><a href="https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents">IAM によるアクセス制御</a></li></ul><h2 id="気を付けるべきクォータ制限は？"><a href="#気を付けるべきクォータ制限は？" class="headerlink" title="気を付けるべきクォータ制限は？"></a>気を付けるべきクォータ制限は？</h2><p>Vertex AI Pipelinesでは、パイプラインジョブの同時実行数やタスクの並列実行数に上限が存在します。また、1つのパイプラインジョブで実行できるタスク数、入出力にも上限があります。</p><div class="scroll"><table><thead><tr><th>項目</th><th>値</th></tr></thead><tbody><tr><td>パイプライン タスクの並列実行</td><td>600</td></tr><tr><td>同時実行パイプライン ジョブ</td><td>300</td></tr><tr><td>ジョブあたりのパイプライン タスクの数</td><td>10,000</td></tr><tr><td>パイプライン<strong>タスク</strong>あたりの入力アーティファクトと出力アーティファクト</td><td>100</td></tr><tr><td>パイプライン<strong>ジョブ</strong>あたりの入力アーティファクトと出力アーティファクト</td><td>10,000</td></tr></tbody></table></div><h3 id="参考-12"><a href="#参考-12" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://cloud.google.com/vertex-ai/docs/quotas?hl=ja#vertex-ai-pipelines">割り当てと上限</a></li></ul><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Vertex AI Pipelinesを利用するにあたって気になりそうなことをまとめました。皆様の一助となれば幸いです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、フューチャーでアルバイトをしている平野です。今回は、Vertex AI</summary>
        
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="MLOps" scheme="https://future-architect.github.io/tags/MLOps/"/>
    
    <category term="VertexAI" scheme="https://future-architect.github.io/tags/VertexAI/"/>
    
    <category term="ナレッジ" scheme="https://future-architect.github.io/tags/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
  </entry>
  
  <entry>
    <title>CloudBuildを使ってプライベートエンドポイントのみのGKEへデプロイ</title>
    <link href="https://future-architect.github.io/articles/20230210a/"/>
    <id>https://future-architect.github.io/articles/20230210a/</id>
    <published>2023-02-09T15:00:00.000Z</published>
    <updated>2023-02-10T03:17:53.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>こんにちは！筋肉エンジニアの渡邉です。最近はGCP&#x2F;GKEについて勉強しています。</p><p>今回はGitHubへのPushをトリガーにCloudBuildを起動し、プライベートエンドポイントのみのGKE(Google Kubernetes Engine)へデプロイする基盤を作りましたので、共有したいと思います。</p><p>GCPリソースはTerraformで作成しています。CloudBuildとGitHubの連携は一部画面による紐づけが必要になるので、手動でCloudBuildを作成した後、terraform importでコード管理するようにしました。</p><h1 id="デプロイフロー"><a href="#デプロイフロー" class="headerlink" title="デプロイフロー"></a>デプロイフロー</h1><img src="/images/20230210a/Deploy_Architecture.drawio.png" alt="Deploy_Architecture.drawio.png" width="901" height="264" loading="lazy"><p>デプロイフローは以下の流れになります。</p><ol><li>ローカルでアプリケーションコードの修正</li><li>ローカルで修正をCommit、GitHubへPush</li><li>GitHubへPushされたことをトリガーにCloudBuildが起動</li><li>CloudBuildでコンテナをビルド、Artifact RegistoryにコンテナイメージをPush</li><li>CloudBuildからGKEへコンテナイメージをデプロイ</li></ol><h1 id="アプリケーションコード"><a href="#アプリケーションコード" class="headerlink" title="アプリケーションコード"></a>アプリケーションコード</h1><p>Goで記述されたアプリケーションを書きました。<br>リクエストを投げると、Hello world!とVersionとHostnameをレスポンスします。</p><p>こちらはディレクトリ構成です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── src</span><br><span class="line">    ├── Dockerfile</span><br><span class="line">    └── cmd</span><br><span class="line">        └── main.go</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">        <span class="string">&quot;log&quot;</span></span><br><span class="line">        <span class="string">&quot;net/http&quot;</span></span><br><span class="line">        <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        mux := http.NewServeMux()</span><br><span class="line">        mux.HandleFunc(<span class="string">&quot;/&quot;</span>, hello)</span><br><span class="line"></span><br><span class="line">        port := os.Getenv(<span class="string">&quot;PORT&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> port == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">                port = <span class="string">&quot;8080&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.Printf(<span class="string">&quot;Server listening on port %s&quot;</span>, port)</span><br><span class="line">        log.Fatal(http.ListenAndServe(<span class="string">&quot;:&quot;</span>+port, mux))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        log.Printf(<span class="string">&quot;Serving request: %s&quot;</span>, r.URL.Path)</span><br><span class="line">        host, _ := os.Hostname()</span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;Hello, world!\n&quot;</span>)</span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;Version: 1.0.0\n&quot;</span>)</span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;Hostname: %s\n&quot;</span>, host)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GKEにデプロイするアプリケーションはコンテナのため、Dockerfileを作成します。<br>Dockerfileは以下の通りです。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># goバージョン</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.19</span>.<span class="number">1</span>-alpine</span><br><span class="line"><span class="comment"># アップデートとgitのインストール</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --update &amp;&amp;  apk add git</span></span><br><span class="line"><span class="comment"># appディレクトリの作成</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /go/src/app</span></span><br><span class="line"><span class="comment"># ワーキングディレクトリの設定</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /go/src/app</span></span><br><span class="line"><span class="comment"># ホストのファイルをコンテナの作業ディレクトリに移動</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./cmd/main.go /go/src/app/</span></span><br><span class="line"><span class="comment"># コンパイル＋実行</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;go&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;main.go&quot;</span> ]</span></span><br><span class="line"><span class="comment"># 公開ポートを設定する</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h1 id="GKEのアーキテクチャ"><a href="#GKEのアーキテクチャ" class="headerlink" title="GKEのアーキテクチャ"></a>GKEのアーキテクチャ</h1><img src="/images/20230210a/architecture.drawio.png" alt="architecture.drawio.png" width="1151" height="429" loading="lazy"><h2 id="クラスタ構成"><a href="#クラスタ構成" class="headerlink" title="クラスタ構成"></a>クラスタ構成</h2><ul><li><strong>クラスタバージョン</strong>：1.23.13-gke.900（リリースチャンネルをSTABLEで構築した時のデフォルトバージョン）</li><li><strong>リージョンクラスタ</strong>：本番環境で利用することを考慮して可用性を高くしたいため</li><li><strong>VPCネイティブクラスタ</strong>：GKE バージョン 1.21.0-gke.1500 以降のすべてのクラスタはVPCネイティブクラスタがデフォルトのネットワークモードのため</li><li><strong>Standardクラスタ</strong>：インフラチームがGKEクラスタを管理することを想定</li><li><strong>限定公開クラスタ</strong>：Control Planeへのアクセスがプライベートエンドポイントのみの「パブリックエンドポイントアクセスが無効」で構成しています。ノードには内部IPアドレスしか付与されず、Control Planeへのアクセスは内部ネットワークからのみしかアクセスできません。<br>※この構成は制限が厳しいのでセキュリティ要件的に問題なければ、「パブリック エンドポイント アクセスが有効、承認済みネットワークが有効」で構築してもよいです。</li></ul><h2 id="Manifest"><a href="#Manifest" class="headerlink" title="Manifest"></a>Manifest</h2><p>GoのアプリケーションコンテナをGKE上にPodとして建てたいので、deploymentを作成します。containers.imageにはArtifact Registryに保存されているイメージ名を指定します。containerPortにはDockerfileのEXPOSEで指定した8080を指定します。</p><figure class="highlight yaml"><figcaption><span>deployment.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-go-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">hello-go</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">hello-go</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello-go</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">asia-northeast1-docker.pkg.dev/xxxxxxxxxx/docker-repository/hello-go:latest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>deploymentを作成するだけでは、podに対して外部からアクセスすることができないのでServiceとIngressを作成します。<br>Ingressを使用するためには、ServiceのtypeをNodePortにしなければならないのでNodePortで構築します。ports.portに80を指定し、ports.targetPortにdeploymentのports.containerPortで指定した8080を指定します。</p><p>80番ポートでServiceにアクセスされ、8080番ポートのdeploymentの各Podにルーティングされる仕組みです。</p><figure class="highlight yaml"><figcaption><span>service.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-go-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">hello-go</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><p>Ingressのmanifestファイルのannotationsには以下を記します。</p><ul><li>kubernetes.io&#x2F;ingress.class: “gce”：外部ロードバランサの作成します</li><li>kubernetes.io&#x2F;ingress.allow-http: “false”：クライアントとHTTP(S)ロードバランサ間のすべての通信をHTTPSに強制します</li><li>kubernetes.io&#x2F;ingress.global-static-ip-name： “loadbalancer-external-ip-address”：事前にterraformで構築していた静的外部IPアドレスを外部ロードバランサに設定します</li><li>networking.gke.io&#x2F;managed-certificates: “hello-go”：クライアントとからのHTTPS通信を実現するためGoogleマネージド証明書をIngressに適用します（後述のmanaged-certificate.yamlで作成）</li></ul><p>Ingressのbackendには、先ほど作成したServiceを指定し、port.numberはserviceのポート80番を指定して紐づけます。</p><figure class="highlight yaml"><figcaption><span>ingress.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-go-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="comment"># 外部ロードバランサの作成</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;gce&quot;</span></span><br><span class="line">    <span class="comment"># クライアントとHTTP(S)ロードバランサ間のすべての通信をHTTPSに強制</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.allow-http:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">    <span class="comment"># 事前に用意していた静的外部IPアドレスを設定する</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.global-static-ip-name:</span> <span class="string">&quot;loadbalancer-external-ip-address&quot;</span></span><br><span class="line">    <span class="comment"># Googleマネージド証明書をIngressに適用する</span></span><br><span class="line">    <span class="attr">networking.gke.io/managed-certificates:</span> <span class="string">&quot;hello-go&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">hello-go-service</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>Ingressに適用させるGoogleマネージド証明書を作成します。<br>ドメインはterraformで作成済みの静的外部IPアドレスにフリーなワイルドカードDNSのnip.ioを設定しました。</p><figure class="highlight yaml"><figcaption><span>managed-certificate.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.gke.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ManagedCertificate</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-go</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">domains:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">34.</span><span class="string">xxx.xxx.xxx.nip.io</span></span><br></pre></td></tr></table></figure><p>manifestファイルの適用自体は踏み台サーバから実行しています。</p><p>ここまで構築するとドメインに対してアクセスすると以下のキャプチャのように</p><ul><li>Hello, world!</li><li>Version:1.0.0</li><li>Hostname: hello-go-deployment-c58cf7b66-fwgbb</li></ul><p>がブラウザ上に返却されます。</p><img src="/images/20230210a/2-Application-Access①.png" alt="2-Application-Access①.png" width="344" height="119" loading="lazy"><h1 id="CloudBuildの作成"><a href="#CloudBuildの作成" class="headerlink" title="CloudBuildの作成"></a>CloudBuildの作成</h1><p>現状の状態だと</p><ol><li>アプリケーションコードの変更を行う（ローカル）。</li><li>GitHubへ変更をPushする（ローカル）。</li><li>docker buildコマンドの実行を行いイメージを作成する（ローカル）</li><li>docker pushコマンドを実行し、Artifact RegistoryへイメージをPushする（ローカル）</li><li>踏み台サーバにログインして<code>kubectl apply -f deployment.yaml</code> コマンドを実行してデプロイ</li></ol><p>となるため、デプロイまでに非常に手間がかかります。<br>GitHubへのPushをトリガーに上記の手順の3~5を自動化したいため、CloudBuildを利用します。</p><h2 id="CloudBuildトリガーの作成"><a href="#CloudBuildトリガーの作成" class="headerlink" title="CloudBuildトリガーの作成"></a>CloudBuildトリガーの作成</h2><h3 id="GitHubとの連携"><a href="#GitHubとの連携" class="headerlink" title="GitHubとの連携"></a>GitHubとの連携</h3><p>CloudBuildとGitHub（プライベートリポジトリ）を連携するためには画面での認証手続きが生じるため、一旦Terraformでは作成せず手動で設定を行いました。<br>手動で設定が完了した後、terraform importコマンドを利用してコード管理するようにします。</p><p>Google Cloudコンソール画面から「Cloud Build」をクリック→「トリガー」をクリック→「トリガーを作成」をクリックします。</p><img src="/images/20230210a/1-CloudBuild①.png" alt="1-CloudBuild①.png" width="975" height="882" loading="lazy">トリガーの作成画面で<ul><li>名前：sample-build</li><li>リージョン：asia-northeast1</li><li>イベント：ブランチにpushする</li></ul><p>を入力し、ソース：「新しいリポジトリに接続」をクリックします。</p><img src="/images/20230210a/1-CloudBuild②.png" alt="1-CloudBuild②.png" width="979" height="884" loading="lazy"><p>リポジトリに接続画面で</p><ul><li>ソースを選択：GitHub (Cloud Build GitHubアプリ)<br>を選択し、「続行」をクリックする。</li></ul><img src="/images/20230210a/1-CloudBuild③.png" alt="1-CloudBuild③.png" width="579" height="938" loading="lazy"><p>Sign in to GitHub to continue to Google Cloud Buildの画面で</p><ul><li>Username or email address：自身のGitHubアカウントのユーザ名</li><li>Password：自身のGitHubアカウントのパスワード</li></ul><p>を入力し、「Sign in」をクリックします。</p><img src="/images/20230210a/1-CloudBuild④.png" alt="1-CloudBuild④.png" width="322" height="581" loading="lazy"><p>Google Cloud Build by Google Cloud Build would like permission toの画面の「Authorize Google Cloud Build」をクリックします。</p><img src="/images/20230210a/1-CloudBuild⑤.png" alt="1-CloudBuild⑤.png" width="1000" height="718" loading="lazy"><p>リポジトリを選択画面の「GOOGLE CLOUD BUILDのインストール」をクリックします。</p><img src="/images/20230210a/1-CloudBuild⑥.png" alt="1-CloudBuild⑥.png" width="572" height="903" loading="lazy"><p>Install Google Cloud Buildの画面から</p><ul><li>Only Select repositories：Cloud Buildと連携したいリポジトリ<br>を入力し、「Install」をクリックします。</li></ul><img src="/images/20230210a/1-CloudBuild⑦.png" alt="1-CloudBuild⑦.png" width="569" height="807" loading="lazy"><ul><li>GitHubアカウント：自身のGitHubアカウント</li><li>リポジトリ：Cloud Buildと連携したいリポジトリ<br>を入力し、チェックボックスにチェックを入れて「接続」をクリックします。</li></ul><img src="/images/20230210a/1-CloudBuild⑧.png" alt="1-CloudBuild⑧.png" width="575" height="901" loading="lazy"><p>ここまでの設定で、Cloud Buildと自身のGitHubリポジトリを連携させることができます。</p><img src="/images/20230210a/1-CloudBuild⑨.png" alt="1-CloudBuild⑨.png" width="975" height="882" loading="lazy"><h3 id="terraform-importの実行"><a href="#terraform-importの実行" class="headerlink" title="terraform importの実行"></a>terraform importの実行</h3><p>作成したトリガーの「実行」の隣をクリックし、リソースパスをコピーをクリックします。（terraform importで利用します。）<br><img src="/images/20230210a/1-CloudBuild⑩.png" alt="1-CloudBuild⑩.png" width="1011" height="883" loading="lazy"></p><p>terraform実行環境にて、terraform importを実行し、手動で作成したCloud Buildトリガーをコード管理できるように設定します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxx@xxxxxxxx:~/cloud-provider/gcp/gke$ terraform import google_cloudbuild_trigger.trigger projects/xxxxxxxxx/locations/asia-northeast1/triggers/f51e2b94-2be8-4ec6-a983-72ded1f69bb7</span><br><span class="line">google_cloudbuild_trigger.trigger: Importing from ID <span class="string">&quot;projects/xxxxxxxxx/locations/asia-northeast1/triggers/f51e2b94-2be8-4ec6-a983-72ded1f69bb7&quot;</span>...</span><br><span class="line">google_cloudbuild_trigger.trigger: Import prepared!</span><br><span class="line">  Prepared google_cloudbuild_trigger <span class="keyword">for</span> import</span><br><span class="line">google_cloudbuild_trigger.trigger: Refreshing state... [<span class="built_in">id</span>=projects/xxxxxxxxx/locations/asia-northeast1/triggers/f51e2b94-2be8-4ec6-a983-72ded1f69bb7]</span><br><span class="line"></span><br><span class="line">Import successful!</span><br><span class="line"></span><br><span class="line">The resources that were imported are shown above. These resources are now <span class="keyword">in</span></span><br><span class="line">your Terraform state and will henceforth be managed by Terraform.</span><br></pre></td></tr></table></figure><p>terraform import後</p><ul><li>サービスアカウントの設定</li><li>ビルド実行時に必要なビルド構成ファイルのパスを設定</li><li>ビルド構成ファイルに必要な環境変数</li></ul><p>を指定してterraform applyをして適用します。</p><h1 id="CloudBuildからGKE-Control-Planeへの接続"><a href="#CloudBuildからGKE-Control-Planeへの接続" class="headerlink" title="CloudBuildからGKE Control Planeへの接続"></a>CloudBuildからGKE Control Planeへの接続</h1><p>今回、Control Planeへのアクセスにプライベートエンドポイントのみの「パブリックエンドポイントアクセスが無効」でGKEを構成しているため、CloudBuildからGKE Control Planeへの接続も内部ネットワーク経由でプライベートエンドポイントに対して行わなければいけません。<br>（GKEをパブリック エンドポイント アクセスが有効、承認済みネットワークが有効で構成している場合は、CloudBuildからGKE Control Planeへのアクセスもパブリックエンドポイントに対して行う必要がありますが、CloudBuildの外部IPはユーザで指定できずビルド環境ごとに変わってしまい、承認済みネットワークが定義できないので、少しトリッキーなやり方をしないとアクセスができないです。）<br>CloudBuildからGKE Control Planeのプライベートエンドポイント接続を内部ネットワークを経由するようにしたいので、CloudBuildをPrivate Poolを利用するように作成します。<br>Cloud Build プライベート プールを使用した限定公開 Google Kubernetes Engine クラスタへのアクセスはGoogle Cloudの<a href="https://cloud.google.com/architecture/accessing-private-gke-clusters-with-cloud-build-private-pools">アーキテクチャセンター</a>にも記載されているので、詳しくはこちらの記事をご覧ください。</p><h2 id="ネットワークアーキテクチャ"><a href="#ネットワークアーキテクチャ" class="headerlink" title="ネットワークアーキテクチャ"></a>ネットワークアーキテクチャ</h2><p>CloudBuildからGKEへデプロイするためのネットワークアーキテクチャの完成図になります。<br><img src="/images/20230210a/New_architecture.drawio.png" alt="New_architecture.drawio.png" width="1200" height="355" loading="lazy"></p><p>それぞれ詳細を見ていきましょう。</p><h3 id="CloudBuild-Private-Poolとsample-build-vpc間"><a href="#CloudBuild-Private-Poolとsample-build-vpc間" class="headerlink" title="CloudBuild Private Poolとsample-build-vpc間"></a>CloudBuild Private Poolとsample-build-vpc間</h3><img src="/images/20230210a/between_sample_vpc_private_pool.drawio.png" alt="between_sample_vpc_private_pool.drawio.png" width="1200" height="355" loading="lazy"><p>Private Poolは、サービスプロデューサーネットワークと呼ばれる Google 所有の Virtual Private Cloud ネットワークでホストされます。サービスプロデューサーネットワークだけでは、GKE Control Planeへアクセスするルートがないので、Private Poolとプライベート接続する用のVPC(sample-build-vpc)を別途作成します。</p><p>Private Poolとプライベート接続する用のVPCには、<strong>名前付きIP範囲</strong>を指定することができるので、<strong>192.168.3.0&#x2F;24</strong>を設定します。private poolが、このIPアドレス範囲からGKEのControl Planeにトラフィックを送信できるので、こちらのIP範囲をGKEの承認済みネットワークに定義します。</p><p>名前付きIP範囲には以下のIP範囲は避けるように<a href="https://cloud.google.com/build/docs/private-pools/set-up-private-pool-to-use-in-vpc-network?hl=ja#understanding_the_network_configuration_options">公式ドキュメント</a>に記載されているので、注意しましょう。</p><blockquote><p>※<strong>Cloud Build は、Docker ブリッジ ネットワークの IP 範囲 192.168.10.0&#x2F;24 を予約します。プロジェクト内のリソースに IP 範囲を割り当てる際、Cloud Build ビルダーがこれらのリソースにアクセスする場合は、192.168.10.0&#x2F;24 以外の範囲を選択することをおすすめします。</strong></p></blockquote><img src="/images/20230210a/4-network-architecuture③.png" alt="4-network-architecuture③.png" width="1200" height="844" loading="lazy"><p>この時サービスのプライベート接続でカスタムルートのエクスポートは「有効」に設定してください。<br>この設定により、のちにPrivate PoolにGKE Control PlaneのCIDR(192.168.64.0&#x2F;28)が広報されます。<br><img src="/images/20230210a/4-network-architecuture④.png" alt="4-network-architecuture④.png" width="1200" height="847" loading="lazy"></p><h3 id="GKE-Control-Planeとmy-stg-environment-vpc間"><a href="#GKE-Control-Planeとmy-stg-environment-vpc間" class="headerlink" title="GKE Control Planeとmy-stg-environment-vpc間"></a>GKE Control Planeとmy-stg-environment-vpc間</h3><img src="/images/20230210a/between_gke_control_plane_my_stg_environment.drawio.png" alt="between_gke_control_plane_my_stg_environment.drawio.png" width="1200" height="355" loading="lazy"><p>GKE Control Planeとmy-stg-environment-vpcを接続しているVPC Peeringのカスタムルートのエクスポートを有効化します。<br>これにより、のちにHA VPN Gatewayを通じて広報されてきたPrivate PoolのCIDR(192.168.3.0&#x2F;24)をGKE Control Plane側に広報することができます。<br><img src="/images/20230210a/4-network-architecuture①.png" alt="4-network-architecuture①.png" width="1200" height="849" loading="lazy"></p><h3 id="HA-VPNの作成"><a href="#HA-VPNの作成" class="headerlink" title="HA VPNの作成"></a>HA VPNの作成</h3><img src="/images/20230210a/between_sample_build_vpc_my_stg_environment.drawio.png" alt="between_sample_build_vpc_my_stg_environment.drawio.png" width="1200" height="355" loading="lazy"><p>CloudBuildのprivate poolのCIDR(192.168.3.0&#x2F;24)をmy-stg-environment-vpcに、GKE Control PlaneのCIDR(192.168.64.0&#x2F;28)をsample-build-vpcにそれぞれ広報したいので、my-stg-environment-vpcとsample-build-vpcをHA VPNで接続します。</p><p>VPC PeeringでそれぞれのVPCを接続することもできますが、VPC Peeringは推移的ピアリングをサポートしていないため、CloudBuildのprivate poolのCIDR(192.168.3.0&#x2F;24)とGKE Control PlaneのCIDR(192.168.64.0&#x2F;28)をそれぞれのVPCへ広報することができません。</p><p>まず、HA VPN Gatewayを作成します。<br>my-stg-environment-vpcに「ha-vpn-my-stg-environment-tky-gw」、sample-build-vpcに「ha-vpn-sample-build-vpc-tky-gw」を作成します。</p><img src="/images/20230210a/4-network-architecuture⑦.png" alt="4-network-architecuture⑦.png" width="1200" height="504" loading="lazy"><p>次に、それぞれのHA VPN Gatewayに対応するVPN Tunnelを作成します。</p><p>ha-vpn-my-stg-environment-tky-gwに</p><ul><li>「ha-vpn-my-stg-environment-tky-tunnel-0」</li><li>「ha-vpn-my-stg-environment-tky-tunnel-1」</li></ul><p>を</p><p>ha-vpn-sample-build-vpc-tky-gwに</p><ul><li>「ha-vpn-sample-build-vpc-tky-tunnel-0」</li><li>「ha-vpn-sample-build-vpc-tky-tunnel-1」<br>を作成します。</li></ul><img src="/images/20230210a/4-network-architecuture⑧.png" alt="4-network-architecuture⑧.png" width="1200" height="511" loading="lazy"><p>次に、それぞれのHA VPN Tunnelに対応するCloud Routerを作成します。</p><ul><li>ha-vpn-my-stg-environment-tky-rt</li></ul><p>sample-build-vpcにGKE Control PlaneのCIDR(192.168.64.0&#x2F;28)を広報したいので、アドバタイズされたIP範囲に192.168.64.0&#x2F;28を設定します。</p><ul><li>ha-vpn-sample-build-vpc-tky-rt</li></ul><p>my-stg-environmentにCloudBuild Private PoolのCIDR(192.168.3.0&#x2F;24)を広報したいので、アドバタイズされたIP範囲に192.168.3.0&#x2F;24を設定します。</p><img src="/images/20230210a/4-network-architecuture⑨.png" alt="4-network-architecuture⑨.png" width="1200" height="840" loading="lazy"><img src="/images/20230210a/4-network-architecuture⑩.png" alt="4-network-architecuture⑩.png" width="1200" height="847" loading="lazy"><p>ここまでの設定で、CloudBuildからGKEへデプロイするためのネットワークアーキテクチャの完成になります。</p><h1 id="デプロイの実施"><a href="#デプロイの実施" class="headerlink" title="デプロイの実施"></a>デプロイの実施</h1><p>上記でCloudBuildから内部ネットワークを経由してGKE Contorl Planeへ通信できるルートができたので、実際にデプロイを実施してみましょう。</p><h2 id="CloudBuild-yaml"><a href="#CloudBuild-yaml" class="headerlink" title="CloudBuild.yaml"></a>CloudBuild.yaml</h2><p>CloudBuildでビルドを実行するためには、ビルド構成ファイルを作成する必要があります。<br>ビルド構成ファイルには、各ビルドSTEPごとに実行したい処理を記述します。<br>ビルド構成ファイルに記載しているプロパティの内容は以下の通りです。</p><div class="scroll"><table><thead><tr><th align="center">キー</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">name</td><td align="center">タスクを実行するコンテナイメージを指すように指定します</td></tr><tr><td align="center">id</td><td align="center">ビルドステップの識別子を指定します</td></tr><tr><td align="center">args</td><td align="center">nameに指定したイメージ実行時に渡す引数を記述します</td></tr><tr><td align="center">dir</td><td align="center">ビルド実行時の作業ディレクトリを指定します。</td></tr><tr><td align="center">env</td><td align="center">ビルド実行時に使用される環境変数を指定します。</td></tr></tbody></table></div><p>以下のビルド構成ファイルの内容に従ってビルドが実行されていきます。</p><figure class="highlight yaml"><figcaption><span>CloudBuild.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># イメージをビルド</span></span><br><span class="line"><span class="comment"># （$SHORT_SHAはGitコミットのタグの値、ビルドしたDockerイメージに同じタグ付け）</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;gcr.io/cloud-builders/docker&#x27;</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">&#x27;Build Image&#x27;</span></span><br><span class="line">    <span class="attr">args:</span> [<span class="string">&#x27;build&#x27;</span>, <span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;asia-northeast1-docker.pkg.dev/$PROJECT_ID/docker-repository/hello-go:$SHORT_SHA&#x27;</span>, <span class="string">&quot;.&quot;</span>]</span><br><span class="line">    <span class="attr">dir:</span> <span class="string">&#x27;gcp/gke/src&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># ビルドイメージをArtifact Registry にPush</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;gcr.io/cloud-builders/docker&#x27;</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">&#x27;Push to GCR&#x27;</span></span><br><span class="line">    <span class="attr">args:</span> [<span class="string">&#x27;push&#x27;</span>, <span class="string">&#x27;asia-northeast1-docker.pkg.dev/$PROJECT_ID/docker-repository/hello-go:$SHORT_SHA&#x27;</span>]</span><br><span class="line">    <span class="attr">dir:</span> <span class="string">&#x27;gcp/gke/src&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># ビルドしたイメージタグを利用するように、manifestを書き換える</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;ubuntu&#x27;</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">&#x27;Tag Override&#x27;</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;sed -i.bk s/latest/$SHORT_SHA/g deployment.yaml&#x27;</span></span><br><span class="line">    <span class="attr">dir:</span> <span class="string">&#x27;gcp/gke/manifest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># デプロイ</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;gcr.io/cloud-builders/kubectl&quot;</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">&#x27;kubectl apply&#x27;</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">apply</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--filename=deployment.yaml</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;CLOUDSDK_COMPUTE_REGION=$&#123;_REGION&#125;&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;CLOUDSDK_CONTAINER_CLUSTER=$&#123;_CLUSTER_NAME&#125;&#x27;</span></span><br><span class="line">    <span class="attr">dir:</span> <span class="string">&#x27;gcp/gke/manifest&#x27;</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># オプション</span></span><br><span class="line"><span class="comment"># ビルド実行ログはCloud Loggingへ</span></span><br><span class="line"><span class="comment"># ビルド実行環境はprivate poolを指定</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="attr">options:</span></span><br><span class="line">  <span class="attr">logging:</span> <span class="string">CLOUD_LOGGING_ONLY</span></span><br><span class="line">  <span class="attr">workerPool:</span></span><br><span class="line">    <span class="string">&#x27;projects/$PROJECT_ID/locations/$&#123;_REGION&#125;/workerPools/private-build-pool&#x27;</span></span><br></pre></td></tr></table></figure><p>こちらのcloudbuild.yamlをGitHub上のルートディレクトリ内に保存します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">├── api_service.tf</span><br><span class="line">├── artifact_registry.tf</span><br><span class="line">├── cloudbuild.tf</span><br><span class="line">├── cloudbuild.yaml <span class="comment"># ★追加</span></span><br><span class="line">├── compute_address.tf</span><br><span class="line">├── compute_container.tf</span><br><span class="line">├── compute_engine.tf</span><br><span class="line">├── compute_firewall.tf</span><br><span class="line">├── compute_global_address.tf</span><br><span class="line">├── compute_network.tf</span><br><span class="line">├── compute_router_nat.tf</span><br><span class="line">├── ha_vpn.tf</span><br><span class="line">├── locals.tf</span><br><span class="line">├── project.tf</span><br><span class="line">├── project_iam_member.tf</span><br><span class="line">├── provider.tf</span><br><span class="line">├── service_account.tf</span><br><span class="line">├── versions.tf</span><br><span class="line">├── manifest</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── ingress.yaml</span><br><span class="line">│   ├── managed-certificate.yaml</span><br><span class="line">│   └── service.yaml</span><br><span class="line">├── src</span><br><span class="line">    ├── Dockerfile</span><br><span class="line">    └── cmd</span><br><span class="line">        └── main.go</span><br></pre></td></tr></table></figure><h2 id="アプリケーションコードの修正"><a href="#アプリケーションコードの修正" class="headerlink" title="アプリケーションコードの修正"></a>アプリケーションコードの修正</h2><p>Version: 1.0.0　→　Version: 2.0.0へ修正してmainブランチにPushします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">xxxxxx@xxxxxx:~/cloud-provider/gcp/gke$ git diff src/cmd/main.go</span><br><span class="line">diff --git a/gcp/gke/src/cmd/main.go b/gcp/gke/src/cmd/main.go</span><br><span class="line">index db8369b..8d603f5 100644</span><br><span class="line">--- a/gcp/gke/src/cmd/main.go</span><br><span class="line">+++ b/gcp/gke/src/cmd/main.go</span><br><span class="line">@@ -25,6 +25,6 @@ func hello(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">         log.Printf(<span class="string">&quot;Serving request: %s&quot;</span>, r.URL.Path)</span><br><span class="line">         host, _ := os.Hostname()</span><br><span class="line">         fmt.Fprintf(w, <span class="string">&quot;Hello, world!\n&quot;</span>)</span><br><span class="line">-        fmt.Fprintf(w, <span class="string">&quot;Version: 1.0.0\n&quot;</span>)</span><br><span class="line">+        fmt.Fprintf(w, <span class="string">&quot;Version: 2.0.0\n&quot;</span>)</span><br><span class="line">         fmt.Fprintf(w, <span class="string">&quot;Hostname: %s\n&quot;</span>, host)</span><br><span class="line"> &#125;</span><br><span class="line">\ No newline at end of file</span><br><span class="line">xxxxxx@xxxxxx:~/cloud-provider/gcp/gke$ git add src/cmd/main.go</span><br><span class="line">xxxxxx@xxxxxx:~/cloud-provider/gcp/gke$ git diff src/cmd/main.go</span><br><span class="line">xxxxxx@xxxxxx:~/cloud-provider/gcp/gke$ git commit -m <span class="string">&quot;modify Version&quot;</span></span><br><span class="line">[main 0f0a907] modify Version</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">xxxxxx@xxxxxx:~/cloud-provider/gcp/gke$ git push origin main</span><br><span class="line">Enumerating objects: 20, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (20/20), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 20 threads</span><br><span class="line">Compressing objects: 100% (10/10), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (14/14), 1.05 KiB | 1.05 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 14 (delta 4), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (4/4), completed with 2 <span class="built_in">local</span> objects.</span><br><span class="line">To https://GitHub.com/xxxxxxxx/xxxxxxxx.git</span><br><span class="line">   cef9c7d..0f0a907  main -&gt; main</span><br></pre></td></tr></table></figure><h2 id="CloudBuildのビルド画面"><a href="#CloudBuildのビルド画面" class="headerlink" title="CloudBuildのビルド画面"></a>CloudBuildのビルド画面</h2><p>GitHubにPushされたことをトリガーにCloudBuildのビルドが実行されます。（過去にビルドに苦戦したビルド履歴が残っていますね。。。（笑））</p><img src="/images/20230210a/3-Deploy①.png" alt="3-Deploy①.png" width="1200" height="847" loading="lazy"><p>最新のビルド履歴（9ee5d0a6）をクリックすると、詳細が確認できます。cloudbuild.yamlに記述したビルドステップごとにビルドが進行していきます。各ビルドステップごとのログも「ビルドログ」から確認することができます。</p><p>正常終了するとすべてのステップでグリーンになります。</p><img src="/images/20230210a/3-Deploy②.png" alt="3-Deploy②.png" width="1200" height="854" loading="lazy"><p>CloudBuildのビルドが正常終了したので、再度ドメインに対してアクセスをします。</p><p>すると、変更を加えたVersion：2.0.0の状態でレスポンスが返却され、デプロイが正常に完了したことを確認できました。</p><img src="/images/20230210a/3-Deploy③.png" alt="3-Deploy③.png" width="352" height="93" loading="lazy"><h2 id="Podのライフサイクル"><a href="#Podのライフサイクル" class="headerlink" title="Podのライフサイクル"></a>Podのライフサイクル</h2><p>最後のビルドステップでGKEへのデプロイが行われます。</p><p>踏み台サーバから<code>kubectl get pods -w</code>を実行することでGKE上のPodの状態を確認することができます。</p><p>ビルドしたイメージをPullしてデプロイされることで、もともと存在していたPodが次々と終了し、新しいPodが作成されていることがわかります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">xxxxxx@xxxxxx@tky-bastion:~$ kubectl get pod -w</span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">hello-go-deployment-78b555bdf6-rv8sh   1/1     Running   0          2m40s</span><br><span class="line">hello-go-deployment-78b555bdf6-z5rk8   1/1     Running   0          2m22s</span><br><span class="line">hello-go-deployment-78b555bdf6-zpczj   1/1     Running   0          2m58s</span><br><span class="line">hello-go-deployment-b788f4444-vcq82    0/1     Pending   0          0s</span><br><span class="line">hello-go-deployment-b788f4444-vcq82    0/1     Pending   0          0s</span><br><span class="line">hello-go-deployment-b788f4444-vcq82    0/1     Pending   0          0s</span><br><span class="line">hello-go-deployment-b788f4444-vcq82    0/1     ContainerCreating   0          0s</span><br><span class="line">hello-go-deployment-b788f4444-vcq82    1/1     Running             0          3s</span><br><span class="line">hello-go-deployment-b788f4444-vcq82    1/1     Running             0          10s</span><br><span class="line">hello-go-deployment-b788f4444-vcq82    1/1     Running             0          10s</span><br><span class="line">hello-go-deployment-78b555bdf6-rv8sh   1/1     Terminating         0          7m11s</span><br><span class="line">hello-go-deployment-b788f4444-cz7ng    0/1     Pending             0          0s</span><br><span class="line">hello-go-deployment-b788f4444-cz7ng    0/1     Pending             0          0s</span><br><span class="line">hello-go-deployment-b788f4444-cz7ng    0/1     Pending             0          0s</span><br><span class="line">hello-go-deployment-b788f4444-cz7ng    0/1     ContainerCreating   0          0s</span><br><span class="line">hello-go-deployment-b788f4444-cz7ng    0/1     ContainerCreating   0          0s</span><br><span class="line">hello-go-deployment-78b555bdf6-rv8sh   0/1     Terminating         0          7m11s</span><br><span class="line">hello-go-deployment-78b555bdf6-rv8sh   0/1     Terminating         0          7m11s</span><br><span class="line">hello-go-deployment-78b555bdf6-rv8sh   0/1     Terminating         0          7m11s</span><br><span class="line">hello-go-deployment-b788f4444-cz7ng    1/1     Running             0          3s</span><br><span class="line">hello-go-deployment-b788f4444-cz7ng    1/1     Running             0          10s</span><br><span class="line">hello-go-deployment-b788f4444-cz7ng    1/1     Running             0          10s</span><br><span class="line">hello-go-deployment-78b555bdf6-zpczj   1/1     Terminating         0          7m39s</span><br><span class="line">hello-go-deployment-b788f4444-hw5cw    0/1     Pending             0          0s</span><br><span class="line">hello-go-deployment-b788f4444-hw5cw    0/1     Pending             0          0s</span><br><span class="line">hello-go-deployment-b788f4444-hw5cw    0/1     Pending             0          0s</span><br><span class="line">hello-go-deployment-b788f4444-hw5cw    0/1     ContainerCreating   0          0s</span><br><span class="line">hello-go-deployment-78b555bdf6-zpczj   0/1     Terminating         0          7m39s</span><br><span class="line">hello-go-deployment-78b555bdf6-zpczj   0/1     Terminating         0          7m39s</span><br><span class="line">hello-go-deployment-78b555bdf6-zpczj   0/1     Terminating         0          7m39s</span><br><span class="line">hello-go-deployment-b788f4444-hw5cw    1/1     Running             0          3s</span><br><span class="line">hello-go-deployment-b788f4444-hw5cw    1/1     Running             0          9s</span><br><span class="line">hello-go-deployment-b788f4444-hw5cw    1/1     Running             0          9s</span><br><span class="line">hello-go-deployment-78b555bdf6-z5rk8   1/1     Terminating         0          7m12s</span><br><span class="line">hello-go-deployment-78b555bdf6-z5rk8   0/1     Terminating         0          7m13s</span><br><span class="line">hello-go-deployment-78b555bdf6-z5rk8   0/1     Terminating         0          7m13s</span><br><span class="line">hello-go-deployment-78b555bdf6-z5rk8   0/1     Terminating         0          7m13s</span><br></pre></td></tr></table></figure><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回はCloudBuildを利用したGKEへの継続デプロイ基盤について記載しました。GKEは限定公開クラスタでControl Planeへのアクセスがプライベートエンドポイントのみの「パブリックエンドポイントアクセスが無効」構築しているため、Cloud BuildからGKEのControl Planeへのアクセスを成功させるためのネットワーク構成が複雑になってしまいましたが、限定公開クラスタで「パブリック エンドポイント アクセスが有効、承認済みネットワークが無効」で構築すればCloudBuildでPrivate PoolやHA VPNで作成することもなくパブリックエンドポイント経由でControl Planeへアクセスができます。セキュリティ要件次第でデプロイフローやアーキテクチャなどは変更してください。</p><p>まだまだGKEの知らない機能がたくさんあるので、引き続きインプットとアウトプットをしていきたいと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
    <category term="GoogleCloud" scheme="https://future-architect.github.io/tags/GoogleCloud/"/>
    
    <category term="GKE" scheme="https://future-architect.github.io/tags/GKE/"/>
    
  </entry>
  
  <entry>
    <title>Excel VBAでもう頑張らない</title>
    <link href="https://future-architect.github.io/articles/20230209a/"/>
    <id>https://future-architect.github.io/articles/20230209a/</id>
    <published>2023-02-08T15:00:00.000Z</published>
    <updated>2023-02-09T02:22:32.835Z</updated>
    
    <content type="html"><![CDATA[<p>Excelは開発者もそうじゃない人も使う広く使われているツールです。Excelに詳しい人も多く、データの可視化はとりあえずExcelの表にデータを入れてしまえば、あとはグラフ化はユーザーにおまかせ、とかいろいろできます。ただ、そのかなり使われているのと裏腹に、20世紀で時代で止まっているのがVisual Basic for Applicationです。VBA。</p><p>ちょっとしたツールの実装環境としてExcelが使われていたりするのですが、Excel VBAのメンテナンスは結構大変というか、現代的なプログラミング環境と比べるとエラーメッセージも不親切だし、記述方法も冗長だし、ちょっと厳しい。また、ウェブで検索しても新しい情報が出てこず、新しいAPIを使う方法もなかなか出てこなかったりします。<a href="https://learn.microsoft.com/ja-jp/windows/win32/api/wincred/nf-wincred-credwritew">CredWriteW</a>でセキュアな情報保存をVBAで頑張ろうとしたけど、自分でやってもうまくいかず、検索してもやってみた例とかも出てこなくて、全世界の人口が70億程度ではVBAの知見を積み重ねるには足りないということが分かります。</p><p>新規で大規模なものをこれから作ったりはないかもしれませんが、既存の大規模なスクリプトのメンテナンスの仕事とかは来たり、機能拡張しろ、みたいなことがあるかもしれないので、VBAを書かずに済む方法を検討しました。JavaScriptで書けるOffice ScriptはOffice 365限定なんですかね？ユーザーのPCには新しいツールなどをインストールしない、という要件にも対応できるように、PowerShellにオフロードする方法を検討しました。</p><p>PowerShellもWindows 10以上を使っていればインストールしなくても使えますし、PowerShellの方が文法が分かりやすく、情報がそろっている、開発環境があって開発も検証も楽、などメリットが多いです。</p><h1 id="VBAの画面を表示"><a href="#VBAの画面を表示" class="headerlink" title="VBAの画面を表示"></a>VBAの画面を表示</h1><p>久々すぎて(20年ぶり？)色々忘れてたので備忘のために手順を書き残しておきます。まずはオプションで「リボンのユーザー設定」で「開発」を表示するようにします。</p><img src="/images/20230209a/image.png" alt="リボンのユーザー設定" width="936" height="405" loading="lazy"><p>そうするとリボンに「開発」が出てくるので、一番右のVisual Basicボタンを押すと開発環境が出てきます。</p><img src="/images/20230209a/image_2.png" alt="Visual Basicの開発環境" width="615" height="191" loading="lazy"><p>ユーザーが実行する起点となるUIボタンなどは、開発の挿入から選べます。ボタンを置くと、置いた時のコールバックのサブルーチンを作るウインドウが出て、起動するコードが生成できます。古き良き、WYSIWYGなビジュアルプログラミングです。1995年ぐらいには輝いていましたね。</p><img src="/images/20230209a/image_3.png" alt="古き良き、WYSIWYGなビジュアルプログラミング" width="257" height="274" loading="lazy"><p>あとは、ここにコードを書いていけばOKです。</p><h1 id="PowerShellのコードをVBAに埋め込み"><a href="#PowerShellのコードをVBAに埋め込み" class="headerlink" title="PowerShellのコードをVBAに埋め込み"></a>PowerShellのコードをVBAに埋め込み</h1><p>複数行テキストとかヒアドキュメントみたいなのはなさそうなので、ソースコードを文字列の形式で書いて結合するコードを書きます。エスケープとかをソースをメンテするたびに手で治したりはしたくないので、関数生成のPythonスクリプトを書きました。</p><figure class="highlight py"><figcaption><span>convert.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;Function SourceCode() As String</span></span><br><span class="line"><span class="string">    Dim src As String&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(sys.argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> src:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> src.readlines():</span><br><span class="line">        line = line.removesuffix(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        line = line.replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&quot;&quot;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;    src = src + &quot;<span class="subst">&#123;line&#125;</span>&quot; + vbCrLf&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;    SourceCode = src&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;End Function&quot;</span>)</span><br></pre></td></tr></table></figure><p>次のようなスクリプトを変換してみます</p><figure class="highlight powershell"><figcaption><span>hello.ps1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Write-Host</span> <span class="string">&quot;ハロー&quot;</span></span><br><span class="line"><span class="built_in">Write-Host</span> <span class="string">&quot;World&quot;</span></span><br></pre></td></tr></table></figure><p>VBAにそのまま張れる関数コードになりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; python3.exe convert.py hello.ps1</span><br><span class="line">Function SourceCode() As String</span><br><span class="line">    Dim src As String</span><br><span class="line">    src = src + <span class="string">&quot;Write-Host &quot;</span><span class="string">&quot;ハロー&quot;</span><span class="string">&quot;&quot;</span> + vbCrLf</span><br><span class="line">    src = src + <span class="string">&quot;Write-Host &quot;</span><span class="string">&quot;World&quot;</span><span class="string">&quot;&quot;</span> + vbCrLf</span><br><span class="line">    SourceCode = src</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure><h1 id="PowerShellの実行"><a href="#PowerShellの実行" class="headerlink" title="PowerShellの実行"></a>PowerShellの実行</h1><p>PowerShellとして実行するのは、このスクリプトをTEMPファイルとして書き出して実行すれば良さそうです。いろいろ検索すると、ファイルの操作はFileSystemObject、UTF-8でファイルを書きだすにはADODB.Streamを、PowerShellの実行にはWScript.Shellを使えばよいということが分かりました。</p><p>以下のコードではそれを書いたものです。あとは、この関数の下に、さきほどの関数を張り付けておけば、PowerShellが実行できます。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> ボタン_Click()</span><br><span class="line">    <span class="keyword">Dim</span> FSO <span class="keyword">As</span> <span class="type">Object</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> scriptPath <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Set</span> FSO = CreateObject(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line"></span><br><span class="line">    scriptPath = FSO.GetSpecialFolder(<span class="number">2</span>) + <span class="string">&quot;\&quot;</span> + FSO.GetTempName + <span class="string">&quot;.ps1&quot;</span> <span class="comment">&#x27; TempFolder</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">With</span> CreateObject(<span class="string">&quot;ADODB.Stream&quot;</span>)</span><br><span class="line">        .Charset = <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">        .Open</span><br><span class="line">        .WriteText SourceCode(), <span class="number">1</span></span><br><span class="line">        .SaveToFile scriptPath, <span class="number">2</span></span><br><span class="line">        .Close</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> shell <span class="keyword">As</span> <span class="type">Object</span></span><br><span class="line">    <span class="keyword">Set</span> shell = CreateObject(<span class="string">&quot;WScript.Shell&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> result <span class="keyword">As</span> <span class="type">Object</span></span><br><span class="line">    <span class="keyword">Set</span> result = shell.Exec(<span class="string">&quot;powershell -NoLogo -WindowStyle Hidden -ExecutionPolicy RemoteSigned &quot;</span> + scriptPath)</span><br><span class="line">    Debug.Print result.Stdout.ReadAll</span><br><span class="line"></span><br><span class="line">    FSO.DeleteFile scriptPath</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><h1 id="VBAのメモ"><a href="#VBAのメモ" class="headerlink" title="VBAのメモ"></a>VBAのメモ</h1><p>あまり書きたくないとはいえ、ちょっといじらないといけないとき用のメモ</p><ul><li>サブルーチンと関数があり、後者は返り値がある。return文はなく、関数名と同名の変数に代入すると返り値になる</li><li>変数はDim 名前 As 型で宣言</li><li>変数に値をセットするときは、プリミティブ型はLet 変数 &#x3D; 値。オブジェクトはSet 変数 &#x3D; 値。</li><li>文字列はダブルクオート。ダブルクオートを中で使いたいときのエスケープは<code>&quot;&quot;</code>とする。</li><li>Debug.Printでデバッグ出力。開発環境でイミディエイトウィンドウを出せば見られる。</li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>VBAからPowerShellへのオフロードが実現できました。文字列をちょっと処理するのとかもPowerShellの方が書きやすいですね。Invoke-WebRequestなどもあって、ウェブのリクエストを飛ばしたりもやりやすいですし、サーバー起動してコールバックを受けたり（要するにOpenID Connectの認証をしたり）もできますし、他サービス連携がはかどります。VBAは、Excelとの接点としては残りますが、ウェブ上の情報も減っていったりすることを考えると、なるべく書かないようにしていった方が将来のメンテナンス作業を考えると良いかなと思っています。</p><h1 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h1><ul><li><a href="http://officetanaka.net/excel/vba/filesystemobject/">http://officetanaka.net/excel/vba/filesystemobject/</a></li><li><a href="http://officetanaka.net/excel/vba/file/file11.htm">http://officetanaka.net/excel/vba/file/file11.htm</a></li><li><a href="https://atmarkit.itmedia.co.jp/ait/articles/0407/08/news101.html">https://atmarkit.itmedia.co.jp/ait/articles/0407/08/news101.html</a></li><li><a href="https://www.tipsfound.com/vba/18026">https://www.tipsfound.com/vba/18026</a></li><li><a href="https://future-architect.github.io/articles/20221130a/">https://future-architect.github.io/articles/20221130a/</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Excelは開発者もそうじゃない人も使う広く使われているツールです。Excelに詳しい人も多く、データの可視化はとりあえずExcelの表にデータを入れてしまえば、あとはグラフ化はユーザーにおまかせ、とかいろいろできます。ただ、そのかなり使われているのと裏腹に、20世紀で時代</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="PowerShell" scheme="https://future-architect.github.io/tags/PowerShell/"/>
    
    <category term="VBA" scheme="https://future-architect.github.io/tags/VBA/"/>
    
    <category term="Excel" scheme="https://future-architect.github.io/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>ARMアーキテクチャなマシンでwgrib2が動くDockerfileを作ってみた</title>
    <link href="https://future-architect.github.io/articles/20230208a/"/>
    <id>https://future-architect.github.io/articles/20230208a/</id>
    <published>2023-02-07T15:00:00.000Z</published>
    <updated>2023-02-08T07:24:59.870Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230208a/images.jpg" alt="" width="400" height="107"><p>こんにちは。フューチャーの矢野です。</p><p>wgrib2がすぐ使えるDockerfileが欲しかったので、作成しました。<br>M1 Macで動くようにARMアーキテクチャ向けに定義しました。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><ul><li>Dockerfileは下記の通りです</li><li>マルチステージビルドをして、イメージを小さくします。二つ目の環境にmakeした実行ファイルを配置します</li><li>configureのオプションにアーキテクチャを指定しています。x86でmakeするときにはconfigureのオプション書き換えなしでビルドできました</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> arm64v8/ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt -y update \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y upgrade \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y install build-essential \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y install gfortran \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y install wget</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># download latest wgrib2</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> wget https://www.ftp.cpc.ncep.noaa.gov/wd51we/wgrib2/wgrib2.tgz.v3.1.1 \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; tar xvfz wgrib2.tgz.v3.1.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit makefile</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> grib2/ \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; sed -i -e <span class="string">&quot;s/#export CC=gcc/export CC=gcc/g&quot;</span> makefile \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; sed -i -e <span class="string">&quot;s/#export FC=gfortran/export FC=gfortran/g&quot;</span> makefile \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; sed -i -e <span class="string">&quot;860 s/.\/configure/.\/configure --build=arm/g&quot;</span> makefile \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; sed -i -e <span class="string">&quot;936 s/.\/configure/.\/configure --build=arm/g&quot;</span> makefile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># build</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> grib2/ \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; make</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> arm64v8/ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt -y update \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y upgrade \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt -y install gfortran</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=0 /root/grib2/wgrib2/wgrib2 /usr/local/bin/wgrib2</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;wgrib2&quot;</span>]</span></span><br></pre></td></tr></table></figure><ul><li>Dockerfileの置いてあるディレクトリで下記を実行することでビルドされます。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t wgrib2:latest .</span><br></pre></td></tr></table></figure><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><h3 id="wgrib2とは"><a href="#wgrib2とは" class="headerlink" title="wgrib2とは"></a>wgrib2とは</h3><p>アメリカ海洋気象庁(NOAA)が提供しているGRIB2を扱うことができるプログラムです。<a href="https://www.cpc.ncep.noaa.gov/products/wesley/wgrib2/">提供ページ</a></p><h3 id="GRIB2とは"><a href="#GRIB2とは" class="headerlink" title="GRIB2とは"></a>GRIB2とは</h3><p>世界気象機関WMOが定めるデータフォーマットです。<br>気象データなどの格子点形式のデータを扱う際に利用されます。</p><h2 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h2><p>下記のような感じで実行するバージョンが表示されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v $(<span class="built_in">pwd</span>):/root/ wgrib2:latest -version</span><br></pre></td></tr></table></figure><p>ホストPCのディレクトリをマウントしているので、grib2ファイルを読み込ませたい場合などは下記のように実行すれば良いです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v $(<span class="built_in">pwd</span>):/root/ wgrib2:latest sample.grib2 -csv-</span><br></pre></td></tr></table></figure><h2 id="試しに使ってみる"><a href="#試しに使ってみる" class="headerlink" title="試しに使ってみる"></a>試しに使ってみる</h2><p>緯度経度を指定したファイルを抽出後、csvとして出力、先頭の10行を標準出力してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -v $(<span class="built_in">pwd</span>):/root/ wgrib2:latest -small_grib 130:135 30:35 small.grib Z__C_RJTD_20160620150000_MET_GPV_Ggis1km_Plfdc_Aper10min_FH0000-0300_grib2.bin</span><br><span class="line"></span><br><span class="line">1:0:d=2016062015:var discipline=0 center=34 local_table=1 parmcat=1 parm=218:surface:anl:</span><br><span class="line"></span><br><span class="line">$ docker run -v $(<span class="built_in">pwd</span>):/root/ wgrib2:latest small.grib -csv small.csv</span><br><span class="line"></span><br><span class="line">1:0:d=2016062015:var discipline=0 center=34 local_table=1 parmcat=1 parm=218:surface:anl:</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">head</span> -n 10 small.csv</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.006,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.019,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.031,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.044,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.056,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.069,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.081,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.094,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.106,30.0042,0</span><br><span class="line"><span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;2016-06-20 15:00:00&quot;</span>,<span class="string">&quot;var0_1_218&quot;</span>,<span class="string">&quot;surface&quot;</span>,130.119,30.0042,0</span><br></pre></td></tr></table></figure><p>出力できていますね。</p><p>サンプルデータは<a href="https://www.data.jma.go.jp/developer/gpv_sample.html">気象庁</a>から配布されている「大雨警報(浸水害)・洪水警報の危険度分布（統合版）」を使用しました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>wgrib2をインストールしたDockerfileを作成して、コマンドが実行できることを確認するところまでを書きました。</p><p>アーキテクチャによって設定内容が異なるため、x86向けには別のファイルを定義するか、マルチアーキテクチャに対応した書き方に対応していきたいと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230208a/images.jpg&quot; alt=&quot;&quot; width=&quot;400&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="wgrib2" scheme="https://future-architect.github.io/tags/wgrib2/"/>
    
    <category term="grib2" scheme="https://future-architect.github.io/tags/grib2/"/>
    
    <category term="Ubuntu" scheme="https://future-architect.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.20 リリース連載 go build に追加される cover オプション（利用例付き）</title>
    <link href="https://future-architect.github.io/articles/20230203a/"/>
    <id>https://future-architect.github.io/articles/20230203a/</id>
    <published>2023-02-02T15:00:00.000Z</published>
    <updated>2023-02-03T04:40:26.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG DX ユニット所属、金欠コンサルタントの藤井です。最近でもないですが、SwitchBot ロックと、キーパッド&#x2F;指紋認証パッドを買いました。我が家における IoT デバイスのカバレッジが着実に向上しており、快適な日々を過ごしています。</p><p><a href="/articles/20230123a/">Go 1.20 連載</a> 7 記事目にして、最終回の本記事では、<code>go build</code>コマンドに新たに追加される<code>-cover</code>オプションについてお伝えします。せっかくなので実際に使ってみたレポートもお届けしようと思います。</p><p>なお、公式でも詳細な説明を記したランディングページが用意されているので、本記事の後にこちらもご覧いただけると、より一層理解が深まると思います。</p><p><a href="https://go.dev/testing/coverage/">https://go.dev/testing/coverage/</a></p><h2 id="cover-オプションとは"><a href="#cover-オプションとは" class="headerlink" title="cover オプションとは"></a>cover オプションとは</h2><h3 id="ビルド・実行手順"><a href="#ビルド・実行手順" class="headerlink" title="ビルド・実行手順"></a>ビルド・実行手順</h3><p><code>go build</code>コマンドは、作成したアプリケーションをビルドする際に利用しますが、そのオプションに新たに<code>-cover</code>オプションが追加されます。ざっくり書くと、ビルド後のアプリケーションに対し、テストを実行した際のテストカバレッジを取得できるようにするためのオプションです。</p><p>使い方は簡単で、単に<code>go build -cover .</code>のように、いつもの build に<code>-cover</code>オプションを追加するだけです。</p><p>このように、<code>-cover</code>以外のオプションをつけずに実行した場合、ローカルのパッケージのみがカバレッジの計測対象となり、（標準含む）外部パッケージは対象外となります。ローカルパッケージの一部をカバレッジ計測対象としたい場合や、外部パッケージも対象としたい場合は、<code>go build -cover -coverpkg=example.com,fmt,net/http .</code>のように、<code>-coverpkg</code>を用いて、明示的に対象パッケージを指定します。<code>-coverpkg</code>を用いた場合は、指定していないパッケージは（ローカル含む）全て対象外となります。</p><p>あとはビルドされたバイナリを実行すればよいのですが、その際に<code>GOCOVERDIR</code>の環境変数に、カバレッジを記録したファイルの出力先を設定する必要があります。</p><p>また、<code>GOCOVERDIR</code>で指定したディレクトリが存在しない場合は、カバレッジファイルは出力されません。ということで、ディレクトリを作成したうえで、<code>GOCOVERDIR=coverdir ./main</code>のようにして実行しましょう。すると、指定したディレクトリにそれぞれ<code>covmeta</code>と<code>covcounters</code>から始まるファイルが出力されます。<code>covmeta</code>はカバレッジ収集対象のソースコードの各種情報が記録されたファイル、<code>covcounters</code>の方は、カバレッジ等の情報が記録されたファイルです。</p><p>前者は<code>meta-data files</code>と呼ばれており、何度実行しても（再ビルドされないかぎり）不変な値であるソースコードの情報が記録されているのみのため、初回実行時にのみ作成され、以後更新されません。</p><p>一方、  後者は<code>counter data files</code>と呼ばれており、こちらは実行の都度変動し得る情報が記録されているため、実行の度に新規で作成されます。</p><p>ちなみに、<code>GOCOVERDIR=coverdir go run -cover .</code>のように、<code>go run</code>でももちろん可能です。</p><h3 id="カバレッジの確認手順"><a href="#カバレッジの確認手順" class="headerlink" title="カバレッジの確認手順"></a>カバレッジの確認手順</h3><p><code>GOCOVERDIR</code>に出力された 2 種類のファイルはバイナリのため、人間が閲覧できるものにはなっていません。</p><p>これを確認するためには、<code>go tool</code>に新たに追加されたサブコマンド<code>covdata</code>を使用します。</p><p>公式そのままの引用ですが、以下のように<code>percent</code>サブコマンドで<code>-i</code>オプションにカバレッジファイルの出力先を指定することで、パッケージごとのカバレッジが確認できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> somedata</span><br><span class="line">covcounters.c6de772f99010ef5925877a7b05db4cc.2424989.1670252383678349347</span><br><span class="line">covmeta.c6de772f99010ef5925877a7b05db4cc</span><br><span class="line">$ go tool covdata percent -i=somedata</span><br><span class="line">    main    coverage: 100.0% of statements</span><br><span class="line">    mydomain.com/greetings  coverage: 100.0% of statements</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>また、<code>textfmt</code>サブコマンドにより、従来の<code>go test</code>コマンドと同様に、テキスト形式でカバレッジを保存することができます。</p><p>これも公式の引用ですが、以下のように<code>go tool cover</code>に入力することで、<code>go test</code>と同様にカバレッジを確認できます。（<code>go tool cover -html=profile.txt -o profile.html</code>のように html 形式でのカバレッジ確認も当然可能です。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> somedata</span><br><span class="line">covcounters.c6de772f99010ef5925877a7b05db4cc.2424989.1670252383678349347</span><br><span class="line">covmeta.c6de772f99010ef5925877a7b05db4cc</span><br><span class="line">$ go tool covdata textfmt -i=somedata -o profile.txt</span><br><span class="line">$ <span class="built_in">cat</span> profile.txt</span><br><span class="line">mode: <span class="built_in">set</span></span><br><span class="line">mydomain.com/myprogram.go:10.13,12.2 1 1</span><br><span class="line">mydomain.com/greetings/greetings.go:3.23,5.2 1 1</span><br><span class="line">$ go tool cover -func=profile.txt</span><br><span class="line">mydomain.com/greetings/greetings.go:3:  Goodbye     100.0%</span><br><span class="line">mydomain.com/myprogram.go:10:       main        100.0%</span><br><span class="line">total:                  (statements)    100.0%</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="複数実行時のカバレッジ制御"><a href="#複数実行時のカバレッジ制御" class="headerlink" title="複数実行時のカバレッジ制御"></a>複数実行時のカバレッジ制御</h3><p>そのほかにも、<code>go tool covdata</code>には<code>merge</code>, <code>subtract</code>, <code>intersect</code>のサブコマンドが存在します。名前の通り、カバレッジを<code>結合</code>・<code>差分抽出</code>・<code>交差抽出</code>するためのサブコマンドです。</p><p>どれも使い方は同じで、<code>go tool covdata merge|subtract|intersect -i=dir1,dir2 -o output</code>のように使います。（merge のみ<code>-i</code>に 3 つ以上のディレクトリを指定できますが、それ以外は 2 つのみ可能です。）</p><p>ユースケースとしては以下などでしょうか。</p><ul><li><code>merge</code><ul><li>異なる環境下での実行結果を結合し、環境依存を吸収した状態でのカバレッジを確認する（公式記載の例）</li></ul></li><li><code>subtract</code><ul><li>異なる環境下での実行結果の差分を抽出し、環境依存箇所を特定する</li></ul></li><li><code>intersect</code><ul><li>異なる環境下での実行結果の交差部分を抽出し、環境に依存しない箇所を特定する</li><li>テストケースごとの実行結果の交差部分を抽出し、複数回実行されている（場合によっては無駄であり、テスト効率を下げている）箇所を特定する</li></ul></li></ul><p>パッと思いつく限りではありますが、有用なように見えます。</p><p>ほかにも<code>-cpuprofile</code>や<code>-memprofile</code>など、<code>go test</code>でできていたことは大体可能なようです。</p><h2 id="cover-オプションの利用例"><a href="#cover-オプションの利用例" class="headerlink" title="cover オプションの利用例"></a>cover オプションの利用例</h2><h3 id="想定されるユースケース"><a href="#想定されるユースケース" class="headerlink" title="想定されるユースケース"></a>想定されるユースケース</h3><p>さて、ざっくり概要をさらったところで、この<code>-cover</code>オプションのユースケースについて考えてみます。</p><p><a href="https://github.com/golang/go/issues/51430">proposal</a>には、<code>-cover</code>の導入経緯として、従来の<code>go test</code>の弱点が以下のように記載されています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A key weakness of the current implementation is that it does not scale well-- it</span><br><span class="line">is difficult or impossible to gather coverage data for applications as opposed</span><br><span class="line">to collections of packages, and for testing scenarios involving multiple</span><br><span class="line">runs/executions.</span><br></pre></td></tr></table></figure><p>ざっくり、従来の<code>go test</code>はアプリケーション全体のテストや、繰り返し実行されるシナリオに対するテストを弱点としている、といった内容で、なるほど確かにと思う内容です。</p><p>導入経緯を踏まえると、ユースケースとしては以下などが挙げられるかなと思います。</p><ol><li>DB・外部システム等との結合部分を含む、アプリケーション全体を通してのテスト品質分析</li><li>複数環境下での実行結果差分の解析</li><li>結合・シナリオテストの網羅性分析</li></ol><h3 id="REST-API-サーバを例に、cover-を利用したテストを試してみる"><a href="#REST-API-サーバを例に、cover-を利用したテストを試してみる" class="headerlink" title="REST API サーバを例に、cover を利用したテストを試してみる"></a>REST API サーバを例に、cover を利用したテストを試してみる</h3><p>ではせっかくなので、<code>-cover</code>を利用したテストを試してみようと思います。</p><h4 id="試してみる内容"><a href="#試してみる内容" class="headerlink" title="試してみる内容"></a>試してみる内容</h4><p>現在私が携わっている案件では、Go を用いて REST API サーバを複数台構築しています。</p><p>システム内のサーバ間通信に加え、外部システムとの通信等が発生することもあり、テストは API に対してリクエストを送り、レスポンス・DB 事後状態を検証する、E2E テストを実施しています。（システム全体ではフロントエンドも存在するため、厳密には End to End ではありませんが、API サーバ単独でも公開しているので、E2E と呼んでいます。）実際にテスト対象のサーバをローカル上に建て、別途 Go で書いたテストコードを<code>go test</code>で実行し、直接テスト対象サーバにリクエストを送っています。（他システムはモックサーバや実際のサーバを建てます。）</p><p>しかしながら、この方法ではテスト対象サーバのテストカバレッジを取得することはできないため、自動テストのうま味が半減しています。テストの網羅性担保も人力レビューによるものとなってしまっており、かなりつらい状況です。メンバーからもたびたび「カバレッジ取得したいね」「でも E2E だから…」と嘆きの声が上がっています。</p><p>というわけで，REST API の E2E テストのカバレッジ取得を試してみます。テスト用のコード（テストコード含む）は以下に配置してあります。</p><p>今回のテスト用に突貫で雑に作ったので、このコードに対するツッコミはご容赦ください。</p><p><a href="https://github.com/shomuMatch/goCoverTest">https://github.com/shomuMatch/goCoverTest</a></p><p>ところで、REST API サーバに対して、<code>-cover</code>を用いてテストする際に、一点注意点があります。</p><p>それは、カバレッジファイルはプログラムが実行終了した（<code>os.Exit()</code>が呼ばれた・<code>main()</code>が正常に<code>return</code>した）タイミングで出力されるということです。つまり、テスト中に<code>panic</code>を起こして落ちてしまったり、外部から強制終了させてしまうと、カバレッジの取得ができません。今回は特に<code>panic</code>を起こした場合のことは考えていませんが、テスト終了時に外部から kill させる想定のため、サーバは Graceful にシャットダウンする必要があります。</p><p>ここは渋川さんの記事を参考に書きました。<br><a href="https://future-architect.github.io/articles/20210212/">https://future-architect.github.io/articles/20210212/</a></p><h4 id="試してみる"><a href="#試してみる" class="headerlink" title="試してみる"></a>試してみる</h4><p>少し話がそれましたが、上記テスト用コードにて、カバレッジ取得を試していきます。</p><p>現時点で Go1.20 はリリースされていないため、正式版の<code>go</code>ではなく、<code>gotip</code>を使います。</p><p><a href="https://pkg.go.dev/golang.org/dl/gotip">https://pkg.go.dev/golang.org/dl/gotip</a></p><p>未インストールの方は以下にてインストールいただければと思います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go install golang.org/dl/gotip@latest</span><br><span class="line">$ gotip download</span><br></pre></td></tr></table></figure><p>それでは、カバレッジファイルの出力先を作成し、<code>-cover</code>をつけてビルド・実行してみましょう。特に普段と変わりなくサーバが立ち上がるはずです。</p><p>また、この時点でカバレッジファイルの出力先に meta-data file が出力されているはずです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> coverdir</span><br><span class="line">$ gotip build -cover .</span><br><span class="line">$ GOCOVERDIR=coverdir ./goCoverTest</span><br><span class="line">start receiving at :8888</span><br></pre></td></tr></table></figure><p>次に、（上記サーバをバックグラウンドとかコンテナで立てておくか）別のコンソールから、テストコードを実行しましょう。（ここは必ずしも<code>gotip</code>である必要はありません。）</p><p>ユニットテストコードを一切書いていないので当然ですが、<code>[no test files]</code>になっており、カバレッジが取れていません。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gotip <span class="built_in">test</span> github.com/shomuMatch/goCoverTest/... -cover -count=1</span><br><span class="line">?       github.com/shomuMatch/goCoverTest       [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/shomuMatch/goCoverTest/api   [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/shomuMatch/goCoverTest/api/path1     [no <span class="built_in">test</span> files]</span><br><span class="line">?       github.com/shomuMatch/goCoverTest/api/path2     [no <span class="built_in">test</span> files]</span><br><span class="line">ok      github.com/shomuMatch/goCoverTest/test/e2e      0.005s  coverage: [no statements]</span><br></pre></td></tr></table></figure><p>本題はここからです。まずはサーバをシャットダウンしましょう。</p><p>シャットダウンが完了したタイミングで、カバレッジファイルの出力先に counter data file が出力されていればここまでは OK です。</p><p>ではカバレッジを確認してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gotip tool covdata percent -i coverdir</span><br><span class="line">        github.com/shomuMatch/goCoverTest       coverage: 92.9% of statements</span><br><span class="line">        github.com/shomuMatch/goCoverTest/api   coverage: [no statements]</span><br><span class="line">        github.com/shomuMatch/goCoverTest/api/path1     coverage: 90.0% of statements</span><br><span class="line">        github.com/shomuMatch/goCoverTest/api/path2     coverage: 88.9% of statements</span><br></pre></td></tr></table></figure><p>カバレッジが取れています！！</p><p>確認のため、あえて 100%にならないようテストしているのですが、そこも正しく得られていそうです。</p><p>せっかくなので html 形式でも確認してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gotip tool covdata textfmt -i coverdir -o profile.txt</span><br><span class="line">$ gotip tool cover -html=profile.txt -o profile.html</span><br></pre></td></tr></table></figure><p>上記コマンドで出力された html を表示すると、以下のように通っていない行がハイライトされた状態で見ることができます。</p><img src="/images/20230203a/image.png" alt="image.png" width="1200" height="1091" loading="lazy"><p>ということで、無事 REST API サーバの E2E テストのカバレッジ取得に成功しました。</p><p>しかも既存のテストの仕組みをほとんど変えることなく対応ができており、実際に案件に導入することも不可能ではなさそうです。（Go のバージョンアップ対応は必要ですが。）</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>ということで、Go1.20 で新たに追加されるテストの仕組みである、<code>-cover</code>オプションについて見ながら触ってきました。</p><p>当然ですがテストの品質はそのままプロダクトの品質に直結するもののため、こうして仕組みが強化されていくのはとても嬉しいですね。</p><p>もう少し頑張ればフロントエンドも含めた E2E テストを全自動で実施し、カバレッジを取得する事もできそうなので、継続して活用していきたいと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG DX ユニット所属、金欠コンサルタントの藤井です。最近でもないですが、SwitchBot</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.20" scheme="https://future-architect.github.io/tags/Go1-20/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.20 vetのアップデート</title>
    <link href="https://future-architect.github.io/articles/20230202a/"/>
    <id>https://future-architect.github.io/articles/20230202a/</id>
    <published>2023-02-01T15:00:00.000Z</published>
    <updated>2023-02-03T04:35:43.202Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230202a/top.png" alt="" width="800" height="460"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG&#x2F;DXユニット所属の今泉です。 <a href="/articles/20230123a/">Go 1.20連載</a>の6本目です。</p><h1 id="そもそもvetとは"><a href="#そもそもvetとは" class="headerlink" title="そもそもvetとは"></a>そもそもvetとは</h1><p>Goの標準ライブラリに組み込まれている、コンパイラによってキャッチされないエラーや懸念を検出し報告してくれるコードの静的解析ツールです。<br>機能の詳細は本記事では割愛しますが、以下コマンドで利用可能なチェックの一覧を確認することができます。</p><p><code>go tool vet help</code></p><p>公式のドキュメントは<a href="https://pkg.go.dev/cmd/vet">こちら</a>です。</p><p>類似のツールとしては以下のようなものがあります。<br>私のいるチームではstaticcheckを利用しています。</p><ul><li><a href="https://github.com/dominikh/go-tools">staticcheck</a></li><li><a href="https://github.com/kisielk/errcheck">errcheck</a></li></ul><h1 id="ループ変数が関数内に多重にネストされていた場合の検知"><a href="#ループ変数が関数内に多重にネストされていた場合の検知" class="headerlink" title="ループ変数が関数内に多重にネストされていた場合の検知"></a>ループ変数が関数内に多重にネストされていた場合の検知</h1><p>次のようなコードはよくあるケースでバグを含んでいます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tests := []<span class="keyword">struct</span>&#123; name <span class="type">string</span> &#125;&#123;&#123;name: <span class="string">&quot;とまと&quot;</span>&#125;, &#123;name: <span class="string">&quot;にんじん&quot;</span>&#125;, &#123;name: <span class="string">&quot;じゃがいも&quot;</span>&#125;&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line">fmt.Println(tt.name)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このコードをテストすると、とまとやにんじんが出力してほしい箇所もじゃがいもになってしまいます。<br>これはループ内に渡している変数<code>tt</code>がループごとに作成される変数ではなくループ全体で利用されるものであることに起因します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;go <span class="built_in">test</span> -race -v</span><br><span class="line">=== RUN   TestParallel</span><br><span class="line">=== RUN   TestParallel/とまと</span><br><span class="line">=== PAUSE TestParallel/とまと</span><br><span class="line">=== RUN   TestParallel/にんじん</span><br><span class="line">=== PAUSE TestParallel/にんじん</span><br><span class="line">=== RUN   TestParallel/じゃがいも</span><br><span class="line">=== PAUSE TestParallel/じゃがいも</span><br><span class="line">=== CONT  TestParallel/とまと</span><br><span class="line">じゃがいも</span><br><span class="line">=== CONT  TestParallel/じゃがいも</span><br><span class="line">じゃがいも</span><br><span class="line">=== CONT  TestParallel/にんじん</span><br><span class="line">じゃがいも</span><br><span class="line">--- PASS: TestParallel (0.00s)</span><br><span class="line">    --- PASS: TestParallel/とまと (0.00s)</span><br><span class="line">    --- PASS: TestParallel/じゃがいも (0.00s)</span><br><span class="line">    --- PASS: TestParallel/にんじん (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      /src 1.253s</span><br></pre></td></tr></table></figure><p>go1.20ではこのような問題を検知してくれるようになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;go1.20rc3 vet</span><br><span class="line"><span class="comment"># /src</span></span><br><span class="line">.\main_test.go:60:16: loop variable tt captured by func literal</span><br></pre></td></tr></table></figure><h1 id="不正な時刻形式の検知"><a href="#不正な時刻形式の検知" class="headerlink" title="不正な時刻形式の検知"></a>不正な時刻形式の検知</h1><p>time layoutが2006-01-02(yyyy-mm-dd) ではなく、2006-02-01(yyyy-dd-mm) となっていた場合に検知してくれるようになりました。<br>わたしにとってはいまいちピンときませんが、アメリカ式時刻が馴染み深い方は間違えてしまったりするのでしょうか…？<br><a href="https://github.com/golang/go/issues/48801">proposal</a>を確認すると予想以上にこの間違いは発生しており、vetへの追加が決まったようです。</p><blockquote><p>There is a lots of projects on Github with this issue:<br>多くのGithub上のプロジェクトでこの問題があるようだ<br><a href="https://github.com/search?l=GO&amp;q=%222006-02-01%22+language:Go&amp;type=Code">https://github.com/search?l=GO&amp;q=%222006-02-01%22+language%3AGo&amp;type=Code</a><br>Even bigger projects have or had bad code:<br>巨大なプロジェクトですら同様の問題を抱えていたりする<br><a href="https://github.com/couchbase/go-couchbase/blob/118e3f09dbf08c7310d6bc1a5cfe5e6f8a0e3c32/populate/populate.go#L18">https://github.com/couchbase/go-couchbase/blob/118e3f09dbf08c7310d6bc1a5cfe5e6f8a0e3c32/populate/populate.go#L18</a><br><a href="https://github.com/gobuffalo/buffalo/blob/20f545e952c31f65eadf7a4833388ed2eaa37589/binding/decoders/time_test.go#L55-L56">https://github.com/gobuffalo/buffalo/blob/20f545e952c31f65eadf7a4833388ed2eaa37589/binding/decoders/time_test.go#L55-L56</a><br>juju&#x2F;juju@f992f35</p></blockquote><blockquote><p>That’s pretty surprising but it does seem to meet the vet bars:<br>Correctness - a real or potential bug for sure<br>Frequency - seems to happen more than we expected!<br>Precision - can’t imagine why anyone would use YYYY-DD-MM date format<br>驚いたことに、vetの対象とすべき基準をみたしているようです。<br>・正確さ - 確かに実際または潜在的なバグであること<br>・頻度   - 予想以上に発生しているようだ！<br>・精度   - YYYY-DD-MM 日付を使用するケースはありえないと思う</p></blockquote><p>※日本語は意訳です</p><p>ただ、 <a href="https://future-architect.github.io/articles/20230127a/">Go 1.20連載の4本目</a>で宮永さんに紹介いただいている通りlayoutにDateTime,DateOnly,TimeOnlyが追加されました。<br>新しいlayoutを使用することでこのミスは防ぐことができると思慮します。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回はgo vetのアップデートについて紹介させていただきました。</p><p>些細なアップデートですが、静的解析も少しずつ改良されていく様子が伺えて面白かったです。</p><p>次は連載の最終回で藤井さんの<a href="/articles/20230203a/">go build に追加される cover オプション（利用例付き）</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230202a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;460&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.20" scheme="https://future-architect.github.io/tags/Go1-20/"/>
    
  </entry>
  
  <entry>
    <title>New ReverseProxy Rewrite hook を動かしながら理解する</title>
    <link href="https://future-architect.github.io/articles/20230131a/"/>
    <id>https://future-architect.github.io/articles/20230131a/</id>
    <published>2023-01-30T15:00:00.000Z</published>
    <updated>2023-02-02T02:27:20.222Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230131a/top.png" alt="" width="800" height="481"><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li>はじめに</li><li>概要を確認</li><li>Proposal の内容と RFC の確認</li><li>実際に動かしながら、Go1.19 と Go1.20 の違いを確認</li><li>まとめ</li></ul><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。<br>フューチャーアーキテクト株式会社、HR&#x2F;新卒採用チームの棚井です。</p><p>略歴として、フューチャーに新卒入社、Technology Innovation Group で IT コンサルタントを 3 年、Global Design Group で新規事業開発を 1 年と担当し、現在は Human Resources（つまり HR）でバックオフィスの新卒採用業務を担当しております。</p><p>本記事は<a href="/articles/20230123a/">Go 1.20 リリース連載</a> の 1 つです。<br>Go1.20 の <strong>New ReverseProxy Rewrite hook</strong> について解説していきます。</p><h1 id="概要を確認"><a href="#概要を確認" class="headerlink" title="概要を確認"></a>概要を確認</h1><p>New ReverseProxy Rewrite hook はコアライブラリー（httputil）への機能追加です。<br>Release Note では<a href="https://tip.golang.org/doc/go1.20#reverseproxy_rewrite">こちら</a>、Proposal は<a href="https://github.com/golang/go/issues/50580">こちら</a>から確認できます。</p><p>リリースノートを見ると、英文で以下のような記載があります。</p><blockquote><p><strong>New ReverseProxy Rewrite hook</strong><br>The httputil.ReverseProxy forwarding proxy includes a new Rewrite hook function, superseding the previous Director hook.</p><p>The Rewrite hook accepts a ProxyRequest parameter, which includes both the inbound request received by the proxy and the outbound request that it will send. Unlike Director hooks, which only operate on the outbound request, this permits Rewrite hooks to avoid certain scenarios where a malicious inbound request may cause headers added by the hook to be removed before forwarding. See issue <a href="https://github.com/golang/go/issues/50580">#50580</a>.</p><p>The ProxyRequest.SetURL method routes the outbound request to a provided destination and supersedes the NewSingleHostReverseProxy function. Unlike NewSingleHostReverseProxy, SetURL also sets the Host header of the outbound request.</p><p>The ProxyRequest.SetXForwarded method sets the X-Forwarded-For, X-Forwarded-Host, and X-Forwarded-Proto headers of the outbound request. When using a Rewrite, these headers are not added by default.</p><p>An example of a Rewrite hook using these features is:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">proxyHandler := &amp;httputil.ReverseProxy&#123;</span><br><span class="line">   Rewrite: <span class="function"><span class="keyword">func</span><span class="params">(r *httputil.ProxyRequest)</span></span> &#123;</span><br><span class="line">    r.SetURL(outboundURL) <span class="comment">// Forward request to outboundURL.</span></span><br><span class="line">    r.SetXForwarded()     <span class="comment">// Set X-Forwarded-* headers.</span></span><br><span class="line">   r.Out.Header.Set(<span class="string">&quot;X-Additional-Header&quot;</span>, <span class="string">&quot;header set by the proxy&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReverseProxy no longer adds a User-Agent header to forwarded requests when the incoming request does not have one.</p></blockquote><p>リリースノートでの説明について、<a href="https://github.com/golang/go/blob/release-branch.go1.20/src/net/http/httputil/reverseproxy.go">Go1.20 の実コード</a>と照らし合わせながら私なりに日本語訳しますと、</p><ul><li>httputil パッケージの ReverseProxy に、Rewrite hook を追加します。<ul><li>Rewrite が提供する機能は、Director に取って代わる（supersede する）ものです。</li><li>この機能より、プロキシサーバーにて付与した “hop-by-hop” ヘッダーが、意図せずに削除されてしまう問題（<a href="https://github.com/golang/go/issues/50580">issue</a>）に対応できるようになります。</li></ul></li><li>Rewrite が受け取る構造体として ProxyRequest も追加します。<ul><li>ProxyRequest.SetURL が提供する機能は、NewSingleHostReverseProxy に取って代わるものです。</li><li>アウトバウンドリクエストのホストヘッダを設定します。</li></ul></li></ul><p>という感じでしょうか。</p><p>私自身が Go でリバースプロキシを立てた経験に疎く、1.19 から 1.20 への変更箇所がどのようなものなのか？をイメージできなかったので、テストコード側の利用例を見たところ、httptest.NewServer の引数に http.Handler として渡す中身が NewSingleHostReverseProxy（Director 型）から func(r *httputil.ProxyRequest) {…} （Rewrite 型）に変わっていました。</p><p>それぞれのコードについて、Go1.20は<a href="https://github.com/golang/go/blob/release-branch.go1.20/src/net/http/httputil/example_test.go#L96-L128">release-branch.go1.20</a>を、Go1.19は<a href="https://github.com/golang/go/blob/release-branch.go1.19/src/net/http/httputil/example_test.go#L96-L123">release-branch.go1.19</a>を参照しています。また、Go1.20とGo1.19のコード差分について、Go1.20 は「+」 1.19は「-」の diff で表現します。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package httputil</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;net/url&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func ExampleReverseProxy() &#123;</span><br><span class="line">backendServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">fmt.Fprintln(w, &quot;this call was relayed by the reverse proxy&quot;)</span><br><span class="line">&#125;))</span><br><span class="line">defer backendServer.Close()</span><br><span class="line"></span><br><span class="line">rpURL, err := url.Parse(backendServer.URL)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="addition">+frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span></span><br><span class="line"><span class="addition">+Rewrite: func(r *httputil.ProxyRequest) &#123;</span></span><br><span class="line"><span class="addition">+r.SetXForwarded()</span></span><br><span class="line"><span class="addition">+r.SetURL(rpURL)</span></span><br><span class="line"><span class="addition">+&#125;,</span></span><br><span class="line"><span class="addition">+&#125;)</span></span><br><span class="line"><span class="deletion">-frontendProxy := httptest.NewServer(httputil.NewSingleHostReverseProxy(rpURL))</span></span><br><span class="line">defer frontendProxy.Close()</span><br><span class="line"></span><br><span class="line">resp, err := http.Get(frontendProxy.URL)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := io.ReadAll(resp.Body)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;%s&quot;, b)</span><br><span class="line"></span><br><span class="line">// Output:</span><br><span class="line">// this call was relayed by the reverse proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>どちらのコードも実行してみると、プロキシ経由でのレスポンスが出力されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">this call was relayed by the reverse proxy</span><br></pre></td></tr></table></figure><p>リリースノートでの説明が「取って代わる（supersede する）機能」になっていることに対応して、利用例のコードも当然 Go1.20 スタイルにアップデートされているようです。</p><p>概要の確認はここまでとして、この Rewrite hook について「それで、何が嬉しいの？」の疑問を解消するために、Proposal の内容と照らし合わせながら説明していきます。</p><h1 id="Proposal-の内容と-RFC-の確認"><a href="#Proposal-の内容と-RFC-の確認" class="headerlink" title="Proposal の内容と RFC の確認"></a>Proposal の内容と RFC の確認</h1><p>Proposal は <a href="https://github.com/golang/go/issues/50580">net&#x2F;http&#x2F;httputil: ReverseProxy can remove headers added by Director #50580</a> です。</p><p>issue では 2 つの RFC（RFC 2616, section 13.5.11、RFC 7230, section 6.1）に言及されています。<br>RFC のリンクを貼ってもらえているので、ちょっとだけ内容を確認してみます。</p><p>まず、RFC 2616, section 13.5.1 End-to-end and Hop-by-hop Headers の内容を見ていくと、以下のような記述があります。<br><a href="https://datatracker.ietf.org/doc/html/rfc2616#section-13.5.1">RFC 2616, section 13.5.1</a></p><blockquote><p>キャッシュプロキシと非キャッシュプロキシの動作を定義する目的のため、HTTP ヘッダーを「end-to-end」と「hop-by-hop」という 2 つのカテゴリに分類します。end-to-end はリクエストまたはレスポンスの最終的な受信者にまで送信されるヘッダーで、hop-by-hop はプロキシやキャッシュを通過しないヘッダーです。<br>RFC にて言及された hop-by-hop に該当するヘッダーは以下です。</p><ul><li>Connection</li><li>Keep-Alive</li><li>Proxy-Authenticate</li><li>Proxy-Authorization</li><li>TE</li><li>Trailers</li><li>Transfer-Encoding</li><li>Upgrade</li></ul><p>上記以外で HTTP&#x2F;1.1 にて定義されたヘッダーは end-to-end 側に含まれます。</p></blockquote><p>ちなみに、issue 内では</p><blockquote><p>RFC 2616, section 13.5.1 specified a list of hop-by-hop headers which HTTP proxies should not forward.<br>RFC 2616 セクション 13.5.1 は、プロキシサーバがフォワーディングすべきでない hop-by-hop ヘッダーのリストを定義している</p></blockquote><p>と説明されています。</p><p>次に、 RFC 7230, section 6.1 Connection については、issue にて<br><a href="https://datatracker.ietf.org/doc/html/rfc7230#section-6.1">RFC 7230, section 6.1</a></p><blockquote><p>RFC 7230, section 6.1 replaces the hardcoded list of hop-by-hop headers with the ability for the originator of a request to specify the hop-by-hop headers in the “Connection” header.<br>RFC7230 セクション 6.1 では、リクエストの送信元が、ハードコードされた hop-by-hop ヘッダーのリストを、Connection ヘッダーで指定した hop-by-hop ヘッダーのリストに置き換えている。</p></blockquote><p>との説明があります。</p><p>ざっくりと要約すると、RFC 2616,section 13.5.1 にて hop-by-hop ヘッダーに該当する項目が定義されて、RFC 7230, section 6.1 にてクライアントと通信するサーバーとの hop-by-hop な情報については Connection ヘッダーを利用することになった、ということです。</p><p>このような RFC にて定義された「hop-by-hop ヘッダーを通過させない仕様」や「Connection ヘッダー情報のハンドリング仕様」への対応実装は、<a href="https://github.com/golang/go/blob/release-branch.go1.20/src/net/http/httputil/reverseproxy.go#L289-L543">この部分</a>で確認できます。</p><h1 id="実際に動かしながら、Go1-19-と-Go1-20-の違いを確認"><a href="#実際に動かしながら、Go1-19-と-Go1-20-の違いを確認" class="headerlink" title="実際に動かしながら、Go1.19 と Go1.20 の違いを確認"></a>実際に動かしながら、Go1.19 と Go1.20 の違いを確認</h1><p><a href="https://wgithub.com/golang/go/blob/release-branch.go1.20/src/net/http/httputil/example_test.go">example_test.go</a>のコードを加工しながら、Go1.20 と Go1.19 での挙動の違いを見ていきます。</p><p>Go1.20 側のコードでは、新しく追加された <code>Rewrite</code> を呼び出しています。<br>Go1.19 には <code>Rewrite</code> がないため、代わりに <code>Director</code> を利用します。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;net/http/httptest&quot;</span><br><span class="line">&quot;net/http/httputil&quot;</span><br><span class="line">&quot;net/url&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">backendServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">dump, err := httputil.DumpRequest(r, false)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Fprintln(w, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintln(w, string(dump))</span><br><span class="line">&#125;))</span><br><span class="line">defer backendServer.Close()</span><br><span class="line"></span><br><span class="line">rpURL, err := url.Parse(backendServer.URL)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="addition">+frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span></span><br><span class="line"><span class="addition">+Rewrite: func(r *httputil.ProxyRequest) &#123;</span></span><br><span class="line"><span class="addition">+r.SetURL(rpURL)</span></span><br><span class="line"><span class="addition">+&#125;,</span></span><br><span class="line"><span class="addition">+&#125;)</span></span><br><span class="line"><span class="deletion">-frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span></span><br><span class="line"><span class="deletion">-Director: func(r *http.Request) &#123;</span></span><br><span class="line"><span class="deletion">-r.URL = rpURL</span></span><br><span class="line"><span class="deletion">-&#125;,</span></span><br><span class="line"><span class="deletion">-&#125;)</span></span><br><span class="line">defer frontendProxy.Close()</span><br><span class="line"></span><br><span class="line">resp, err := http.Get(frontendProxy.URL)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := io.ReadAll(resp.Body)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;%s&quot;, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この状態で動かしてみると、Go1.20 と Go1.19 では、それぞれ以下の出力が得られます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go1.20</span></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:39973</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go1.19</span></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:39259</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><p>Go1.19 には <code>X-Forwarded-For</code> が自動追加されていますが、Go1.20 には追加されていないことがわかります。</p><p>リリースノートにて</p><blockquote><p>The ProxyRequest.SetXForwarded method sets the X-Forwarded-For, X-Forwarded-Host, and X-Forwarded-Proto headers of the outbound request. When using a Rewrite, these headers are not added by default.</p></blockquote><p>と記載があるとおり、<code>Rewrite</code> を使う場合には、ProxyRequest.SetXForwarded を呼び出すことで <code>X-Forwarded-For</code>, <code>X-Forwarded-Host</code>, <code>X-Forwarded-Proto</code> の 3 つのヘッダーが追加されるようです。Director では <code>X-Forwarded-For</code> だけだったため、残りの 2 つも同時に追加したいという提案は<a href="https://github.com/golang/go/issues/50465">こちらの issue</a>で会話されています。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">...</span><br><span class="line">frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span><br><span class="line">Rewrite: func(r *httputil.ProxyRequest) &#123;</span><br><span class="line">r.SetURL(rpURL)</span><br><span class="line"><span class="addition">+r.SetXForwarded()</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のように、ProxyRequest.SetXForwarded を追加して再度実行すると、バックエンドに到達するリクエスト内のヘッダーが 3 つ増えていることがわかります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go1.20</span></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:46465</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">X-Forwarded-Host: 127.0.0.1:44977</span><br><span class="line">X-Forwarded-Proto: http</span><br></pre></td></tr></table></figure><p>RFC2616 では「hop-by-hop ヘッダーの削除」が定義されているので、次はこの動作確認として以下のコードを動かしてみます。<br>処理内部で新たにリクエストを作成して、ヘッダーに「Connection: Keep-Alive」を追加しています。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httputil&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">backendServer := httptest.NewServer(http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">dump, err := httputil.DumpRequest(r, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintln(w, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintln(w, <span class="type">string</span>(dump))</span><br><span class="line">&#125;))</span><br><span class="line"><span class="keyword">defer</span> backendServer.Close()</span><br><span class="line"></span><br><span class="line">rpURL, err := url.Parse(backendServer.URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span><br><span class="line">Rewrite: <span class="function"><span class="keyword">func</span><span class="params">(r *httputil.ProxyRequest)</span></span> &#123;</span><br><span class="line">r.SetURL(rpURL)</span><br><span class="line">r.SetXForwarded()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">defer</span> frontendProxy.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// create request</span></span><br><span class="line">req, err := http.NewRequest(http.MethodGet, frontendProxy.URL, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add connection header</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;keep-alive&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// check request content</span></span><br><span class="line">dump, err := httputil.DumpRequest(req, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(dump))</span><br><span class="line"></span><br><span class="line">resp, err := <span class="built_in">new</span>(http.Client).Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらも、Go1.20 と Go1.19 のそれぞれで動かしてみると、どちらのバージョンにおいても、リクエスト生成直後に付与したヘッダー「Connection: Keep-Alive」が、プロキシサーバーを経由したのちに RFC の定義通りに削除されていることがわかります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go1.20</span></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:45977</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line"></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:32815</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">X-Forwarded-Host: 127.0.0.1:44977</span><br><span class="line">X-Forwarded-Proto: http</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go1.19</span></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:43403</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:43403</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><p>こまで来てやっと、Proposal タイトルの「ReverseProxy can remove headers added by Director」について説明できます。<br>Proposal で提起された問題箇所を引用すると</p><blockquote><p>For example, if an inbound request contains a Connection: forwarded header, then any Forwarded header added by the Director will not be sent to the backend. This is probably surprising; under some circumstances, it may be a security vulnerability.<br>例えば、もしインバウンドリクエストが「Connection: forwarded」のヘッダーを保持している場合、Director により追加された Forwarded ヘッダーは、バックエンド側に送信されません。これはおそらく驚くべきことであり、ある状況下においてはセキュリティ上の脆弱性かもしれません。</p></blockquote><p>とあります。<br>この現象を再現するために、以下のコードを Go1.19 環境にて動かしてみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httputil&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">backendServer := httptest.NewServer(http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">dump, err := httputil.DumpRequest(r, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintln(w, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintln(w, <span class="type">string</span>(dump))</span><br><span class="line">&#125;))</span><br><span class="line"><span class="keyword">defer</span> backendServer.Close()</span><br><span class="line"></span><br><span class="line">rpURL, err := url.Parse(backendServer.URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">frontendProxy := httptest.NewServer(&amp;httputil.ReverseProxy&#123;</span><br><span class="line">Director: <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request)</span></span> &#123;</span><br><span class="line">r.URL = rpURL</span><br><span class="line">r.Header.Set(<span class="string">&quot;X-Forwarded-Proto&quot;</span>, <span class="string">&quot;http&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">defer</span> frontendProxy.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// define request</span></span><br><span class="line">req, err := http.NewRequest(http.MethodGet, frontendProxy.URL, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add connection:forwarded header</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;X-Forwarded-Proto&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// check request content</span></span><br><span class="line">dump, err := httputil.DumpRequest(req, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(dump))</span><br><span class="line"></span><br><span class="line">resp, err := <span class="built_in">new</span>(http.Client).Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>インバウンドリクエストのヘッダーに「Connection: X-Forwarded-Proto」を付与して、Director にて「X-Forwarded-Proto: http」を追加しています。<br>この状態で実行すると、以下の出力が得られます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line"><span class="comment"># Go1.19</span></span><br><span class="line"></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:46127</span><br><span class="line">Connection: X-Forwarded-Proto</span><br><span class="line"></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:46127</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: Go-http-client/1.1</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><p>出力内容から、Director で追加した「X-Forwarded-Proto: http」がバックエンドまで到達していないことがわかります。</p><p>Go1.20 で追加された Rewrite hook はこの問題に対応するもので、先に見ましたように <a href="https://pkg.go.dev/net/http/httputil@master#ProxyRequest.SetXForwarded">ProxyRequest.SetXForwarded</a> を利用して 3 つの Forwarded ヘッダー（The X-Forwarded-For、X-Forwarded-Host、X-Forwarded-Proto）を追加することで「Director で追加した X-Forwarded- ヘッダーが削除されてしまう現象」対応しています。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>プロキシサーバーのリクエストルーティングで、これまで Director を使っていたところは、これからは Rewrite を使おう</li><li>Rwrite に渡す ProxyRequest にて SetXForwarded を呼ぶことで、プロキシサーバーの情報 X-Forwarded-For,Host,Proto を自動追加してくれて便利</li></ul><p>次は今泉さんの<a href="/articles/20230202a/">vetのアップデート</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230131a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;481&quot;&gt;

&lt;h1 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.20" scheme="https://future-architect.github.io/tags/Go1-20/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.20 HTTP ResponseController</title>
    <link href="https://future-architect.github.io/articles/20230128a/"/>
    <id>https://future-architect.github.io/articles/20230128a/</id>
    <published>2023-01-27T15:00:00.000Z</published>
    <updated>2023-01-31T03:06:21.557Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230128a/top.png" width="" height="800" width="457"><p>TIGの辻です。Go 1.20 <a href="/articles/20230123a/">リリース連載</a>の5本目は Core library の <a href="https://tip.golang.org/doc/go1.20#http_responsecontroller:~:text=list%20of%20errors.-,HTTP%20ResponseController,-The%20new%20%22net">HTTP ResponseController</a> のアップデートを紹介します<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><h2 id="何が変わるのか"><a href="#何が変わるのか" class="headerlink" title="何が変わるのか"></a>何が変わるのか</h2><ul><li><code>net/http</code> パッケージに新しく <code>ResponseController</code> 型が追加されます</li><li>従来から存在する <code>ResponseWriter</code> インターフェースでは実現できなかったHTTPリクエストごとの制御が実現できるようになります</li><li><code>ResponseController</code> 型にある <code>SetReadDeadline()</code> や <code>SetWriteDeadline()</code> メソッドを利用して、リクエストごとの読み書きのデッドラインを設定できます</li></ul><h2 id="何が嬉しいのか"><a href="#何が嬉しいのか" class="headerlink" title="何が嬉しいのか"></a>何が嬉しいのか</h2><p>Go のユーザーとして見たときの <code>ResponseController</code> 型の追加による具体的な嬉しいポイントはHTTPハンドラごとに読み書きのデッドラインが設定できることです。サーバー全体ではデフォルトのデッドラインを設定しつつ、特定のハンドラのみデッドラインを伸ばす、など柔軟な設定が可能になります。</p><p>ハンドラでの使用例は以下です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RequestHandler</span><span class="params">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class="line">  rc := http.NewResponseController(w)</span><br><span class="line">  <span class="comment">// 大きなレスポンスを送信するため Server.WriteTimeout を無効化する</span></span><br><span class="line">  rc.SetWriteDeadline(time.Time&#123;&#125;)</span><br><span class="line">  io.Copy(w, bigData)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみにサーバー単位のデッドラインは <code>http.Server</code> 構造体の <code>ReadTimeout</code> や <code>WriteTimeout</code> フィールドから設定できます。</p><h2 id="なぜこのAPIになったのか"><a href="#なぜこのAPIになったのか" class="headerlink" title="なぜこのAPIになったのか"></a>なぜこのAPIになったのか</h2><p>ここからは、この変更に至るまでの背景の一部を、私が感じたことも含めて、記載したいと思います。</p><p>実は <code>http.Handler</code> がハンドラ単位で読み書きのデッドラインの設定ができない、という Issue は2016年に起票されています (<a href="https://github.com/golang/go/issues/16100">#16100</a>)。なぜこの課題の解決に7年も要したのでしょうか？この一因として後方互換性との戦いがあったと想像しています。</p><p><code>http.Handler</code> は以下のような <code>ServeHTTP()</code> があるインターフェースです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また <code>http.ResponseWriter</code> も以下のような <code>Header()</code>, <code>Write()</code>, <code>WriteHeader()</code> をもつインターフェースです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ResponseWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">Header() Header</span><br><span class="line">Write([]<span class="type">byte</span>) (<span class="type">int</span>, <span class="type">error</span>)</span><br><span class="line">WriteHeader(statusCode <span class="type">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ハンドラの読み書きに関するデッドラインを設定できるAPIは <code>Handler</code> や <code>ResponseWriter</code> にはありません。それでは <code>ResponseWriter</code> インターフェースに以下のような <code>SetReadDeadline()</code> や <code>SetWriteDeadline()</code> APIを追加すればいいのではないか？と思うかもしれません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ResponseWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">Header() Header</span><br><span class="line">Write([]<span class="type">byte</span>) (<span class="type">int</span>, <span class="type">error</span>)</span><br><span class="line">WriteHeader(<span class="type">int</span>)</span><br><span class="line">SetReadDeadline(time.Time) <span class="type">error</span><span class="comment">// ★後方互換性を壊すためインターフェースに新規関数の追加はできない</span></span><br><span class="line">SetWriteDeadline(time.Time)<span class="type">error</span><span class="comment">// ★後方互換性を壊すためインターフェースに新規関数の追加はできない</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>しかし<a href="https://go.dev/doc/go1compat">Go1の互換性ポリシー</a>からこのような破壊的変更はできません。<code>SetReadDeadline()</code> と <code>SetWriteDeadline()</code> を持たない型が <code>ResponseWriter</code> インターフェースを満たさなくなってしまいます。真野さんの <a href="https://future-architect.github.io/articles/20230125a/">contextパッケージのWithCancelCauseとCause</a> の記事でも、このインターフェースの後方互換性問題に触れています。</p><p>それではどうするか？</p><p>インターフェースを拡張したいときに <code>ResponseWriter</code> インターフェースとは別のインターフェースにAPIを定義して、<code>ResponseWriter</code> インターフェースを実装する型に別インターフェースのメソッドを実装させる、というのが一つの手段としてあります。一例はHTTPハンドラがバッファリングしているデータをクライアントにフラッシュできる <code>http.Flusher</code> インターフェースです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Flusher <span class="keyword">interface</span> &#123;</span><br><span class="line">Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Goのデフォルトの HTTP&#x2F;1.x と HTTP&#x2F;2 の <code>ResponseWriter</code> の実装は <code>Flusher</code> もサポートしており、これは<a href="https://pkg.go.dev/net/http#Flusher">文章化</a>されています。</p><p>これを利用すると、たとえば、アプリケーションのハンドラ内では次のように型アサーションを組み合わせながら <code>Flush()</code> を呼び出せます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;Hello, world.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> f, ok := w.(http.Flusher); ok &#123;</span><br><span class="line">f.Flush()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記と同様のアプローチで</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadDeadliner <span class="keyword">interface</span> &#123;</span><br><span class="line">SetReadDeadline(deadline time.Time) <span class="type">error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>のようなインターフェースを定義することもできたでしょう。しかし <code>ResponseWriter</code> 型をラップしたミドルウェアとの相性など、使い勝手が悪いため見送られています。</p><p>議論のすえに生み出された解決策が <a href="https://github.com/golang/go/issues/54136">#54136</a> で、リリースノートに記載されていたアプローチです。すなわち <code>ResponseWriter</code> 型をラップした <code>http.ResponseController</code> 構造体を定義する、ということです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewResponseController</span><span class="params">(rw ResponseWriter)</span></span> *ResponseController &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;ResponseController&#123;rw&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ResponseController <span class="keyword">struct</span> &#123;</span><br><span class="line">rw ResponseWriter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ResponseController)</span></span> Flush() <span class="type">error</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ResponseController)</span></span> Hijack() (net.Conn, *bufio.ReadWriter, <span class="type">error</span>) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ResponseController)</span></span> SetReadDeadline(deadline time.Time) <span class="type">error</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ResponseController)</span></span> SetWriteDeadline(deadline time.Time) <span class="type">error</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>インターフェースではなく構造体を追加している利点として、将来的に <code>*ResponseController</code> に新しいメソッドを追加したい場合に後方互換性が壊れない、という点があるでしょう。</p><p>注意点はドキュメントを見るとわかるように <code>NewResponseController()</code> の引数は <code>Handler.ServeHTTP()</code> メソッドに渡された元の値であるか、元の <code>ResponseWriter</code> を返す <code>Unwrap()</code> メソッドを持っている必要があることです。</p><p>この意味は</p><ul><li>Go のデフォルトの <code>ResponseWriter</code> の実装は <code>ResponseWriter</code> インターフェースのメソッドに加えて <code>Flush()</code>, <code>Hijack()</code>, <code>SetReadDeadline()</code>, <code>SetWriteDeadline()</code> も実装している</li><li>サードパーティでラップされた <code>ResponseWriter</code> は <code>Flush()</code>, <code>Hijack()</code>, <code>SetReadDeadline()</code>, <code>SetWriteDeadline()</code> のすべてを実装する必要はなく <code>Unwrap()</code> でもとの <code>ResponseWriter</code> の値を返却すれば良い</li></ul><p>と理解しています。ラップする場合は <code>responsecontroller_test.go</code> のテストケースにもあるように基本的には以下のような <code>Unwrap()</code> メソッドを実装することになるでしょう。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> wrapWriter <span class="keyword">struct</span> &#123;</span><br><span class="line">ResponseWriter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w wrapWriter)</span></span> Unwrap() ResponseWriter &#123;</span><br><span class="line"><span class="keyword">return</span> w.ResponseWriter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Unwrap()</code> メソッドの効果は <code>*ResponseController</code> の実装を見るとわかるでしょう。 <code>Hijack()</code> の実装は以下のようになっています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ResponseController)</span></span> Hijack() (net.Conn, *bufio.ReadWriter, <span class="type">error</span>) &#123;</span><br><span class="line">rw := c.rw</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> t := rw.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> Hijacker:</span><br><span class="line"><span class="keyword">return</span> t.Hijack()</span><br><span class="line"><span class="keyword">case</span> rwUnwrapper:</span><br><span class="line">rw = t.Unwrap()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, errNotSupported()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仮にサードパーティが実装している <code>ResponseWriter</code> の値が <code>Hijacker</code> インターフェースを実装していなくても <code>Unwrap()</code> でもとの <code>ResponseWriter</code> の値を返却していれば、その <code>Hijack()</code> メソッドが呼び出されます。<code>for</code> ループで再帰しているのがおしゃれですね<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>GoのHTTP ResponseControllerのアップデートの概要とその背景を紹介しました。後方互換性との戦いやコミュニティへの配慮が感じられたのではないでしょうか。</p><p>次は棚井さんの<a href="/articles/20230131a/">New ReverseProxy Rewrite hook を動かしながら理解する</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">なお本文中のGoのソースバージョンは <code>go1.20rc3</code> です。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">ちなみに <code>context</code> パッケージでも似たような <code>for</code> 文で再帰している実装があります。よくある実装パターンの一つでしょう。<a href="https://github.com/golang/go/blob/b3160e8bcedb25c5266e047ada01b6f462521401/src/context/context.go#L629-L653">https://github.com/golang/go/blob/b3160e8bcedb25c5266e047ada01b6f462521401/src/context/context.go#L629-L653</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230128a/top.png&quot; width=&quot;&quot; height=&quot;800&quot; width=&quot;457&quot;&gt;

&lt;p&gt;TIGの辻です。Go 1.20 &lt;a href=&quot;/articles/20230123a/&quot;&gt;リリース連載&lt;/a&gt;の5本目は</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.20" scheme="https://future-architect.github.io/tags/Go1-20/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.20 timeパッケージのアップデート</title>
    <link href="https://future-architect.github.io/articles/20230127a/"/>
    <id>https://future-architect.github.io/articles/20230127a/</id>
    <published>2023-01-26T15:00:00.000Z</published>
    <updated>2023-01-30T03:22:42.040Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230127a/top.png" alt="top.png" width="1200" height="675" loading="lazy"><p>The Gopher character is based on the Go mascot designed by <a href="http://reneefrench.blogspot.com/">Renée French</a>.</p><p>Gopherのイラストは<a href="https://github.com/egonelbre/gophers">egonelbre&#x2F;gophers</a>を利用しました。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG&#x2F;EXユニット所属の宮永です。 <a href="/articles/20230123a/">Go 1.20連載</a>の4本目です。</p><p><a href="https://tip.golang.org/doc/go1.20">Go 1.20 Release Notes</a>に記載のMinor changes to the libraryの<code>time</code>パッケージのアップデート4点について解説します。</p><h1 id="1-layoutにDateTime-DateOnly-TimeOnlyが追加された"><a href="#1-layoutにDateTime-DateOnly-TimeOnlyが追加された" class="headerlink" title="1. layoutにDateTime,DateOnly,TimeOnlyが追加された"></a>1. layoutに<code>DateTime</code>,<code>DateOnly</code>,<code>TimeOnly</code>が追加された</h1><p>Proposalは<a href="https://github.com/golang/go/issues/52746">こちらのissue</a>でされています。</p><p>Goの日時表現ですが、他の多くの言語とは勝手が異なります。<br>今回のアップデートを確認する前に他の言語とGoとの日時表現の違いについて確認します。</p><p>例えば、Pythonで<code>yyyy-mm-dd</code>という形式でフォーマットをかける場合は以下の様にします。</p><figure class="highlight python"><figcaption><span>Pythonの場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"> <span class="comment"># 最新時刻を取得</span></span><br><span class="line">t = datetime.now()</span><br><span class="line">ymd = t.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;時刻:&quot;</span>, t)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%Y-%m-%dでフォーマット:&quot;</span>, ymd)</span><br></pre></td></tr></table></figure><p>Rustの場合は以下の様にします。</p><figure class="highlight rust"><figcaption><span>Rustの場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> chrono::Utc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 最新時刻を取得</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">t</span> =Utc::<span class="title function_ invoke__">now</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ymd</span> = t.<span class="title function_ invoke__">format</span>(<span class="string">&quot;%Y-%m-%d&quot;</span>).<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;時刻:&#123;&#125;&quot;</span>,t);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;%Y-%m-%dでフォーマット:&#123;&#125;&quot;</span>, ymd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>いずれの場合も文字列<code>%Y-%m-%d</code>を与えてフォーマットしています。<br>ではGoの場合はどうでしょうか。</p><figure class="highlight go"><figcaption><span>Goの場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//最新時刻を取得</span></span><br><span class="line">t := time.Now()</span><br><span class="line">ymd := time.Now().Format(<span class="string">&quot;2006-01-02&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;時刻:&quot;</span>, t)</span><br><span class="line">fmt.Println(<span class="string">&quot;%Y-%m-%dでフォーマット:&quot;</span>, ymd)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2006-01-02</code>???</p><p>はじめて見たとき<code>2006-01-02</code>って何がなんだかわかりませんでした。<br>ググってみるとこんな記事がありました。</p><p><a href="https://qiita.com/ruiu/items/5936b4c3bd6eb487c182">Goのtimeパッケージのリファレンスタイム（2006年1月2日）は何の日？</a></p><blockquote><p>答えは単純だ。これはアメリカ式の時刻の順番なのだ。”1月2日午後3時4分5秒2006年”（つまり「自然な順番」で1, 2, 3, 4, 5, 6）を指しているのである。Go開発者のRob Pikeさんがgolang-nutsメーリングリストで、最初からよく考えていればこの順番にはしなかったと言っていたが（英語圏でもイギリスとかだと違う順番だしね）、もうその順番になっているので変えられないし、それにきちんと文章化もされているともコメントしていた。従ってこれは単純にそういうものだと思うしかなさそうだ。</p></blockquote><p>そんな馬鹿な!と思いましたが受け入れるしかありません。正直<code>2006-01-02</code>の文字列、私は覚えられないので毎度コピペしてます。</p><p>▼おとなりのチームにも同じ悩みを抱えている方がいました<br><img src="/images/20230127a/slack.png" alt="slack.png" width="1200" height="490" loading="lazy"></p><blockquote><p>(その気持ちとてもわかります!!!)</p></blockquote><p>今回のアップデートで<code>yyyy-mm-dd</code>は以下の様にすることができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//最新時刻を取得</span></span><br><span class="line">t := time.Now()</span><br><span class="line">ymd := time.Now().Format(time.DateOnly)</span><br><span class="line">fmt.Println(<span class="string">&quot;時刻:&quot;</span>, t)</span><br><span class="line">fmt.Println(<span class="string">&quot;%Y-%m-%dでフォーマット:&quot;</span>, ymd)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これなら私でも覚えられます。<br>些細なアップデートですが、待ち望んでいた方は多かったのではないでしょうか。</p><p>今回追加された定数ですが、それぞれの以下のように定義されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DateTime   = <span class="string">&quot;2006-01-02 15:04:05&quot;</span></span><br><span class="line">DateOnly   = <span class="string">&quot;2006-01-02&quot;</span></span><br><span class="line">TimeOnly   = <span class="string">&quot;15:04:05&quot;</span></span><br></pre></td></tr></table></figure><h1 id="2-Time-Compareメソッドの追加"><a href="#2-Time-Compareメソッドの追加" class="headerlink" title="2. Time.Compareメソッドの追加"></a>2. <code>Time.Compare</code>メソッドの追加</h1><p>Proposalは<a href="https://github.com/golang/go/issues/50770">こちらのissue</a>でされています。</p><p>Proposalを立てた方の主張をまとめると</p><blockquote><p>「Time型の比較には<code>Before()</code>、<code>Equal()</code>、<code>After()</code>の3つがあるが、これはそれぞれ<code>&lt;</code>、<code>==</code>、<code>&gt;</code>に相当する。以前、以後を表す<code>&lt;=</code>、<code>&gt;=</code>のメソッドもほしい!!」</p></blockquote><p>ということです。たしかに以前、以後というメソッドがないため、Go1.20がリリースされる前までは<br>以前を表すのに<code>!x.After(y)</code>(<code>&gt;</code>の否定)で<code>&lt;=</code>となる)とするしかありませんでした。</p><blockquote><p><code>x.Equal(y) || x.Before(y)</code>でもいいですね</p></blockquote><p>今回<code>Time.Compare</code>メソッドの追加により以前、以後は以下の様に表現することが可能になりました。</p><ul><li><p>以前(xはyよりも前) ⇒ <code>x.Compare(y)&lt;=0</code></p></li><li><p>以後(xはyよりも後) ⇒ <code>x.Compare(y)&gt;=0</code></p></li></ul><p><code>Compare</code>メソッドはGoの他のライブラリも同じようなルールで実装されているため、使い勝手も良さそうです。今後頻繁に使う機会が出てきそうです。</p><h1 id="3-Parseでナノ秒以下の入力の精度は無視する様になった"><a href="#3-Parseでナノ秒以下の入力の精度は無視する様になった" class="headerlink" title="3. Parseでナノ秒以下の入力の精度は無視する様になった"></a>3. <code>Parse</code>でナノ秒以下の入力の精度は無視する様になった</h1><p><a href="https://github.com/golang/go/issues/54567">issueはこちら</a>です。</p><p>issueにかかれているコードをそのまま引用します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> in = <span class="string">&quot;2021-09-29T16:04:33.0000000000Z&quot;</span></span><br><span class="line">fmt.Println(time.Parse(time.RFC3339, in))</span><br><span class="line">fmt.Println(time.Parse(time.RFC3339Nano, in))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入力として0が10個並んでおり、厳密にいえば<code>RFC3339Nano</code>が期待している桁数よりも多い状況です。<br>このコードの出力としては両者とも<code>2021-09-29 16:04:33 +0000 UTC &lt;nil&gt;</code>を期待していますが、実際には以下の様に出力されます。</p><figure class="highlight shell"><figcaption><span>output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2021-09-29 16:04:33 +0000 UTC &lt;nil&gt;</span><br><span class="line">0001-01-01 00:00:00 +0000 UTC parsing time &quot;2021-09-29T16:04:33.0000000000Z&quot; as &quot;2006-01-02T15:04:05.999999999Z07:00&quot;: cannot parse &quot;0Z&quot; as &quot;Z07:00&quot;</span><br></pre></td></tr></table></figure><p>Go 1.20では、2つ目の例でエラーとならないように、ナノ秒以下の精度が入力の場合には無視するようになります。</p><h1 id="4-Time-MarshalJSONメソッドのRFC3339への準拠がより厳格になった"><a href="#4-Time-MarshalJSONメソッドのRFC3339への準拠がより厳格になった" class="headerlink" title="4. Time.MarshalJSONメソッドのRFC3339への準拠がより厳格になった"></a>4. <code>Time.MarshalJSON</code>メソッドの<code>RFC3339</code>への準拠がより厳格になった</h1><p>あれ<code>Time.Marshal</code>だけ?<br><code>Time.Unmarshal</code>はいいの?</p><p>と思ったのですが、<a href="https://github.com/golang/go/issues/57912">こちらのissue</a>に経緯が書かれていました。</p><p><a href="https://github.com/golang/go/issues/54580">こちらのissue</a>の対応で<code>Time.Unmarshal</code>と<code>Time.Marshal</code>の<code>RFC3339</code>への準拠がより厳格になったということですが、<code>Time.Unmarshal</code>の対応でAWS SDKのテストでエラーがでてしまうという事態になったようです。そのため<code>Time.Unmarshal</code>についてはロールバックされ、Go1.20では<code>Time.Marshal</code>のみ<a href="https://tip.golang.org/doc/go1.20">Go 1.20 Release Notes</a>に記載されているということみたいです。</p><p><a href="https://github.com/golang/go/issues/54580">こちらのissue</a>によると既存の<code>Parse</code>にはいくつか問題があるようで、もともとはこの問題に対応するために<code>Time.Unmarshal</code>で厳格な対応を入れたかったようです。<br>例えば、現行の<code>Parse</code>では少数部の<code>.</code>と<code>,</code>を区別していないようで、どちらもエラーなく<code>Parse</code>されるようです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t1, _ := time.Parse(time.RFC3339, <span class="string">&quot;0000-01-01T00:00:00.000Z&quot;</span>)</span><br><span class="line">fmt.Println(t1)</span><br><span class="line">t2, _ := time.Parse(time.RFC3339, <span class="string">&quot;0000-01-01T00:00:00,000Z&quot;</span>)</span><br><span class="line">fmt.Println(t2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0000-01-01 00:00:00 +0000 UTC</span><br><span class="line">0000-01-01 00:00:00 +0000 UTC</span><br></pre></td></tr></table></figure><p>他には時間の桁が1桁を許容するという問題もあるようで、<code>00:00:00.000Z</code>と書くべきところを<code>0:00:00.000Z</code>としても<code>Parse</code>されるようです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t1, _ := time.Parse(time.RFC3339, <span class="string">&quot;0000-01-01T0:00:00.000Z&quot;</span>)</span><br><span class="line">fmt.Println(t1)</span><br><span class="line">t2, _ := time.Parse(time.RFC3339, <span class="string">&quot;0000-01-01T00:00:00.000Z&quot;</span>)</span><br><span class="line">fmt.Println(t2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0000-01-01 00:00:00 +0000 UTC</span><br><span class="line">0000-01-01 00:00:00 +0000 UTC</span><br></pre></td></tr></table></figure><p>確かにこのままでは定義が明確ではなくなるため対応が必要そうですが、AWS SDKのテストでエラーがでてくるとなると影響は大きそうです。<br><code>time</code>はGo1.21でも変更がありそうですね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>本記事ではGo 1.20リリースの<code>time</code>パッケージのアップデートについて解説しました</p><ul><li>layoutに<code>DateTime</code>,<code>DateOnly</code>,<code>TimeOnly</code>が追加された</li><li><code>Time.Compare</code>メソッドの追加によって以前、以後が表現できるようになった</li><li><code>Parse</code>でナノ秒以下の入力の精度は無視する様になった</li><li><code>Time.MarshalJSON</code>メソッドの<code>RFC3339</code>への準拠がより厳格になった</li></ul><p>個人的にはlayoutに定数が追加されたアップデートが地味に嬉しかったです。😀</p><p>次は辻さんの <a href="/articles/20230128a/">HTTP ResponseController</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230127a/top.png&quot; alt=&quot;top.png&quot; width=&quot;1200&quot; height=&quot;675&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;The Gopher character is based on the Go</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.20" scheme="https://future-architect.github.io/tags/Go1-20/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.20 Wrapping multiple errors</title>
    <link href="https://future-architect.github.io/articles/20230126a/"/>
    <id>https://future-architect.github.io/articles/20230126a/</id>
    <published>2023-01-25T15:00:00.000Z</published>
    <updated>2023-01-26T02:30:30.351Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230126a/top.png" alt="" width="800" height="492"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！TIG の川口です。<br>本記事は <a href="/articles/20230123a/">Go 1.20リリース連載</a>   の3本目です。<strong>Wrapping multiple errors</strong> についてお話します。</p><p>Release Note では、<a href="https://tip.golang.org/doc/go1.20#errors">こちら</a> の箇所になります。<br>Proposal は、<a href="https://github.com/golang/go/issues/53435">こちら</a> になります。</p><h2 id="何が変わったか？"><a href="#何が変わったか？" class="headerlink" title="何が変わったか？"></a>何が変わったか？</h2><p>さて具体的に何が変わったかをはじめにおさえておきます。</p><blockquote><p>Go 1.20 expands support for error wrapping to permit an error to wrap multiple other errors.<br>An error e can wrap more than one error by providing an Unwrap method that returns a []error.<br>The errors.Is and errors.As functions have been updated to inspect multiply wrapped errors.<br>The fmt.Errorf function now supports multiple occurrences of the %w format verb, which will cause it to return an error that wraps all of those error operands.<br>The new function errors.Join returns an error wrapping a list of errors.</p></blockquote><p>要約すると、以下のようになるでしょうか。 （以降、wrapping multiple errors はマルチエラーと記載します。）</p><ul><li>エラーのラップが拡張されて、複数のエラーをラップしたマルチエラーを作成できるようになりました。</li><li>error 型は、 <code>[]error</code> を返す <code>Unwrap</code> メソッドを提供することで、マルチエラーとすることができます。</li><li>マルチエラーに関して、 <code>errors.Is</code> 関数と <code>errors.As</code> 関数により、検査できるようになりました。</li><li><code>fmt.Errorf</code> 関数と <code>errors.Join</code> 関数により、マルチエラーを作成できるようになりました。</li><li><strong>（マルチエラーを []error に復元する方法については言及していません。）</strong></li></ul><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><p>それでは以降、下記の順に則ってお話していこうと思います。</p><ol><li>マルチエラーの作成方法</li><li>マルチエラーの検査方法</li><li>マルチエラーを []error に復元する方法</li><li>どんなときに使えるか？</li></ol><p>また、本稿では以下の version を利用しています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.20rc3 darwin/amd64</span><br></pre></td></tr></table></figure><h1 id="マルチエラーの作成方法"><a href="#マルチエラーの作成方法" class="headerlink" title="マルチエラーの作成方法"></a>マルチエラーの作成方法</h1><p>マルチエラーの作成方法に関しては、先述の通り以下の2パターンあるようです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err1 := errors.New(<span class="string">&quot;err1&quot;</span>)</span><br><span class="line">err2 := errors.New(<span class="string">&quot;err2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// errors.Joins を使う方法</span></span><br><span class="line">errByErrors := errors.Join(err1, err2)</span><br><span class="line">log.Println(reflect.TypeOf(errByErrors)) <span class="comment">// *errors.joinError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Errorf を使う方法</span></span><br><span class="line">errByFmt := fmt.Errorf(<span class="string">&quot;err: %w, %w&quot;</span>, err1, err2)</span><br><span class="line">log.Println(reflect.TypeOf(errByFmt)) <span class="comment">// *fmt.wrapErrors</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ただしそれぞれ作成される error の型は異なります。詳細は、以下を参照ください。<br>またこちらの実装を見ると、どちらも、<code>[]error</code> を返す <code>Unwrap</code> メソッドが提供されていることがわかるかと思います。</p><ul><li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.20rc3:src/errors/join.go;l=34">errors.joinError</a></li><li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.20rc3:src/fmt/errors.go;l=54">fmt.wrapErrors</a></li></ul><h1 id="マルチエラーの検査方法"><a href="#マルチエラーの検査方法" class="headerlink" title="マルチエラーの検査方法"></a>マルチエラーの検査方法</h1><p>今までは、 <code>errors.Is</code>, <code>errors.As</code> を使ってラップされたエラーの検査を行うことができました。<br>今後はこれらの関数が、マルチエラーにも対応するようです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err1 := errors.New(<span class="string">&quot;err1&quot;</span>)</span><br><span class="line">err2 := errors.New(<span class="string">&quot;err2&quot;</span>)</span><br><span class="line">err3 := errors.New(<span class="string">&quot;err3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// errors.Joins を使う方法</span></span><br><span class="line">errByErrors := errors.Join(err1, err2)</span><br><span class="line">log.Println(</span><br><span class="line">errors.Is(errByErrors, err1), <span class="comment">// true</span></span><br><span class="line">errors.Is(errByErrors, err2), <span class="comment">// true</span></span><br><span class="line">errors.Is(errByErrors, err3), <span class="comment">// false</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Errorf を使う方法</span></span><br><span class="line">errByFmt := fmt.Errorf(<span class="string">&quot;err: %w, %w&quot;</span>, err1, err2)</span><br><span class="line">log.Println(</span><br><span class="line">errors.Is(errByFmt, err1), <span class="comment">// true</span></span><br><span class="line">errors.Is(errByFmt, err2), <span class="comment">// true</span></span><br><span class="line">errors.Is(errByFmt, err3), <span class="comment">// false</span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本的な考え方は、既存のものと変更はなさそうです。<br>既存のラップされたエラーの機構と互換性を保つように <code>Unwrap() error</code> と <code>Unwrap() []error</code> メソッドのどちらでも再帰的に処理できるようになっていそうですね。</p><ul><li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.20rc3:src/errors/wrap.go;l=43">errors.Is</a></li><li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.20rc3:src/errors/wrap.go;l=92">errors.As</a></li></ul><h1 id="マルチエラーを-error-に復元する方法"><a href="#マルチエラーを-error-に復元する方法" class="headerlink" title="マルチエラーを []error に復元する方法"></a>マルチエラーを []error に復元する方法</h1><p>こちらに関しては言及がなかったので、特別何か専用の関数が増えたりということは今のところなさそうですね。<br>こちらを実現しようとすると、👆の <code>errors.Is</code>, <code>errors.As</code> 等の実装を見ていただいた方はわかるかと思いますが、以下のようにしなければならなさそうです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err1 := errors.New(<span class="string">&quot;err1&quot;</span>)</span><br><span class="line">err2 := errors.New(<span class="string">&quot;err2&quot;</span>)</span><br><span class="line"></span><br><span class="line">errByErrors := errors.Join(err1, err2)</span><br><span class="line"><span class="keyword">if</span> errs, ok := errByErrors.(<span class="keyword">interface</span>&#123; Unwrap() []<span class="type">error</span> &#125;); ok &#123;</span><br><span class="line"><span class="keyword">for</span> _, err := <span class="keyword">range</span> errs.Unwrap() &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみに、そのまま <code>errors.Unwrap</code> を利用した際には、以下のように nil が返ってきてしまいます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err1 := errors.New(<span class="string">&quot;err1&quot;</span>)</span><br><span class="line">err2 := errors.New(<span class="string">&quot;err2&quot;</span>)</span><br><span class="line"></span><br><span class="line">errByErrors := errors.Join(err1, err2)</span><br><span class="line">log.Println(errors.Unwrap(errByErrors)) <span class="comment">// nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらはややおかしな挙動ではありますが、<code>errors.Unwrap</code> の実装を見ると理解できます。<br>マルチエラーは、<code>Unwrap() []error</code> メソッドは持っていても、<code>Unwrap() error</code> メソッドを持っていないからですね。</p><ul><li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.20rc3:src/errors/wrap.go;l=16">errors.Unwrap</a></li></ul><h1 id="利用する場面"><a href="#利用する場面" class="headerlink" title="利用する場面"></a>利用する場面</h1><p>利用する場面としては、パッと思いつくものとしては「ベストエフォート的な複数処理」などがあるでしょうか。</p><p>例えば、「ベストエフォート的に各ユーザーに対して一人ずつメールを送信していく。」などの場面では使えそうです。<br>コードとしては以下のようなイメージです。（一括で処理できるように模索するべきとか。並列に処理をした方が良いとか。色々あるかもですが、その辺のお話はいったんおいておきます！！！）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">userIDs := []<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;userID1&quot;</span>,</span><br><span class="line"><span class="string">&quot;userID2&quot;</span>,</span><br><span class="line"><span class="string">&quot;userID3&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> userIDs &#123;</span><br><span class="line">err := sendEmail(userIDs[i])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// err があっても、log だけ出力する</span></span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendEmail</span><span class="params">(userID <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Email を送信する</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このとき、<code>run()</code> の返り値に error を増やしたいとなったときになかなかどのようなコードを書くか悩ましくなることが想像できると思います。<br>今までであれば、以下のようなサードパーティ製のものを使ったり自作のエラーパッケージを作成したりして実現していた方もいると思います。</p><ul><li><a href="https://github.com/hashicorp/go-multierror">https://github.com/hashicorp/go-multierror</a></li><li><a href="https://github.com/uber-go/multierr">https://github.com/uber-go/multierr</a></li></ul><p>それが今後は以下のようにして書き直せるようになるのかなと。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">userIDs := []<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;userID1&quot;</span>,</span><br><span class="line"><span class="string">&quot;userID2&quot;</span>,</span><br><span class="line"><span class="string">&quot;userID3&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> errs []<span class="type">error</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> userIDs &#123;</span><br><span class="line">err := sendEmail(userIDs[i])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">errs = <span class="built_in">append</span>(errs, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> errors.Join(errs...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendEmail</span><span class="params">(userID <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Email を送信する処理</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>新しく拡張された Wrapping multiple erros についての記事でした！<br>用途がたくさんあるというわけではない気もしますが、今後の error handling の手法の一つとしておさえておいたほうが良いものになるかもしれません？🤔</p><p>次は宮永さんの <a href="/articles/20230127a/">timeのアップデート</a> です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230126a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;492&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="エラーハンドリング" scheme="https://future-architect.github.io/tags/%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AA%E3%83%B3%E3%82%B0/"/>
    
    <category term="Go1.20" scheme="https://future-architect.github.io/tags/Go1-20/"/>
    
  </entry>
  
  <entry>
    <title>Go1.20リリース連載 contextパッケージのWithCancelCauseとCause</title>
    <link href="https://future-architect.github.io/articles/20230125a/"/>
    <id>https://future-architect.github.io/articles/20230125a/</id>
    <published>2023-01-24T15:00:00.000Z</published>
    <updated>2023-01-30T03:25:08.609Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230125a/top.png" alt="" width="800" height="433"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG真野です。<a href="/articles/20230123a/">Go 1.20リリース連載</a>の2本目は、<a href="https://tip.golang.org/doc/go1.20#minor_library_changes">Minor changes to the library</a>の context についてです。Go 1.7で <code>context.Context</code>が入ってから、context界隈において久しぶりのアップデートです。</p><p>contextの歴史やダイジェストは、澁川さんの<a href="https://future-architect.github.io/articles/20210212/">Go 1.16のsignal.NotifyContext() </a> 記事に書かれていますので、ぜひ確認ください。context自体にの説明は、さき(H.Saki)さんの <a href="https://zenn.dev/hsaki/books/golang-context">よくわかるcontextの使い方 </a>というZenn Bookを読むとすごく詳しくなれると思います。</p><p>リリースノートには、<code>WithCancelCause()</code>と <code>Cause()</code> 関数が追加され、キャンセル理由を追加・取得できるようにするという内容です。なぜか2023.1.22時点(go 1.20rc3)だとGoDocには<code>WithDeadlineCause()</code>・<code>WithTimeoutCause()</code> があるものの実装は無く、<a href="https://github.com/golang/go/issues/56661">context: add APIs for writing and reading cancelation cause #51365</a> を見る限り、Go 1.21で追加されそうです。</p><blockquote><p><strong>Go 1.20リリースノートより（2023.1.22 DRAFT RELEASE NOTESより）</strong><br>The new WithCancelCause function provides a way to cancel a context with a given error. That error can be retrieved by calling the new Cause function.<br>新しく追加されたWithCancelCause関数はerror付きでcontextをキャンセルする方法を提供します。errorは新しく追加したCause関数を呼び出すことで取得できます。</p></blockquote><p>GoDocのcontextパッケージの<a href="https://pkg.go.dev/context@master#WithCancelCause">func WithCancelCause</a>にサンプルコードも書かれています。</p><figure class="highlight go"><figcaption><span>GoDocのWithCancelCauseサンプルコード（go 1.20rc3時点なので荒い）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx, cancel := context.WithCancelCause(parent)</span><br><span class="line">cancel(myError)</span><br><span class="line">ctx.Err() <span class="comment">// returns context.Canceled</span></span><br><span class="line">context.Cause(ctx) <span class="comment">// returns myError</span></span><br></pre></td></tr></table></figure><p>ツイートで発表された際の反応を見ると、喜びの声が多数でした。</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Probably in Go 1.20:<br><br>context.WithCancelCause 🎉<br><br>ctx.Err() will return why a context is canceled if that context is derived with a cancel cause. Instead of mere `Canceled` and `DeadlineExceeded` errors.<br><br>Proposal → <a href="https://t.co/H1jMbp5HGM">https://t.co/H1jMbp5HGM</a><a href="https://twitter.com/hashtag/golang?src=hash&amp;ref_src=twsrc%5Etfw">#golang</a> <a href="https://t.co/bRFFXB1DFx">pic.twitter.com/bRFFXB1DFx</a></p>&mdash; inanc (@inancgumus) <a href="https://twitter.com/inancgumus/status/1599073261169430528?ref_src=twsrc%5Etfw">December 3, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>プロポーサルは<a href="https://github.com/golang/go/issues/51365">context: add APIs for writing and reading cancelation cause #51365</a> です。起票が2022.2.26ですので、これだけ見れば10ヶ月ほどで入ったように見えます。実際はそれ以前にも似たような議論があり、例えば<a href="https://github.com/golang/go/issues/26356">context: ease debugging of where a context was canceled? #26356</a> は2018年に、<a href="https://github.com/golang/go/issues/46273">proposal: context: add WithCancelReason #46273</a>は2021年に起票されています。#26356や#46273にて条件、対応案、プロトタイプの実装などが整理されたことがあってこそ実現できたスピード感じゃないかと思います。</p><h2 id="コンテキストがどこでキャンセルされたかデバック難しい問題"><a href="#コンテキストがどこでキャンセルされたかデバック難しい問題" class="headerlink" title="コンテキストがどこでキャンセルされたかデバック難しい問題"></a>コンテキストがどこでキャンセルされたかデバック難しい問題</h2><p>Go 1.20より前の時代では、contextのキャンセルでよく上がる課題に、コンテキストのキャンセルがどこで行われたか切り分けしにくいことがあります。「Who the hell canceled my context?（だれが私のcontextをキャンセルしたか？）」と冗談混じりでの悩みをちょくちょく聞きます。</p><p>例えば、下記のように多段にcontextにタイムアウトを設定するケースです。仮に一番下流の <code>callHeavyWebAPI()</code> 関数でキャンセルしたかどうかを判定したいとします。</p><figure class="highlight go"><figcaption><span>Go1.19以前での実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">time.AfterFunc(<span class="number">10</span>*time.Second, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; cancel() &#125;) <span class="comment">// 全体で10秒まで</span></span><br><span class="line"><span class="comment">// ... 何かしらの前処理など</span></span><br><span class="line"><span class="keyword">go</span> doHeavyTask(ctx)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doHeavyTask</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(ctx)</span><br><span class="line">time.AfterFunc(<span class="number">5</span>*time.Second, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; cancel() &#125;) <span class="comment">// doHeavyTask関数で最大5秒まで</span></span><br><span class="line"><span class="comment">// ... 何かしらの処理</span></span><br><span class="line">callHeavyWebAPI(ctx)</span><br><span class="line"><span class="comment">// ... 何かしらの処理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">callHeavyWebAPI</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(ctx)</span><br><span class="line">time.AfterFunc(<span class="number">3</span>*time.Second, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; cancel() &#125;) <span class="comment">// callHeavyWebAPI関数で最大3秒まで</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line"><span class="keyword">switch</span> ctx.Err() &#123;</span><br><span class="line"><span class="keyword">case</span> context.DeadlineExceeded:</span><br><span class="line">fmt.Println(<span class="string">&quot;context timeout exceeded&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> context.Canceled:</span><br><span class="line">fmt.Println(<span class="string">&quot;context canceled&quot;</span>) <span class="comment">// ★どこでキャンセルされた？😭</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// ...外部API呼び出しなどの処理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後の<code>select</code> の部分の実装のように、キャンセルしたかは <code>ctx.Err()</code> を見ることで判断できます。しかし、<code>main()</code>, <code>doHeavyTask()</code>, <code>callHeavyWebAPI()</code> 関数それぞれで設定されたキャンセルのどれが直接の原因かは判断が付きません。</p><p>回避方法としては、キャンセル理由を連携するための <code>channel</code> を引き回すことを検討するなどが考えられますが、けっこう大変そうです。</p><h2 id="contextパッケージにWithCancelCauseとCauseを追加"><a href="#contextパッケージにWithCancelCauseとCauseを追加" class="headerlink" title="contextパッケージにWithCancelCauseとCauseを追加"></a>contextパッケージにWithCancelCauseとCauseを追加</h2><p>これを解決する方法として、<code>context.WithCancelCause()</code>と <code>Cause()</code> 関数を利用します。<code>context.WithCancelCause()</code>はほぼ <code>WithCancel()</code>と使い勝手が同じですが、<code>CancelCauseFunc(cause error)</code> と引数に <code>cause</code>を取る部分が異なります。ここに <code>error</code> を渡すと何が理由で<code>context</code>がキャンセルされたか分かります。</p><figure class="highlight diff"><figcaption><span>Go1.20以降の実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;context&quot;</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="addition">+var (</span></span><br><span class="line"><span class="addition">+ErrTimeoutOuter  = errors.New(&quot;outer timeout&quot;)</span></span><br><span class="line"><span class="addition">+ErrTimeoutMiddle = errors.New(&quot;middle timeout&quot;)</span></span><br><span class="line"><span class="addition">+ErrTimeoutInner  = errors.New(&quot;inner timeout&quot;)</span></span><br><span class="line"><span class="addition">+)</span></span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">ctx, cancel := context.WithCancelCause(context.Background())</span><br><span class="line"><span class="deletion">-time.AfterFunc(10*time.Second, func() &#123; cancel() &#125;) // 全体で10秒まで</span></span><br><span class="line"><span class="addition">+time.AfterFunc(10*time.Second, func() &#123; cancel(ErrTimeoutOuter) &#125;) // 全体で10秒まで</span></span><br><span class="line">// ... 何かしらの前処理など</span><br><span class="line">go doHeavyTask(ctx)</span><br><span class="line">// ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func doHeavyTask(ctx context.Context) &#123;</span><br><span class="line">ctx, cancel := context.WithCancelCause(ctx)</span><br><span class="line"><span class="deletion">-time.AfterFunc(5*time.Second, func() &#123; cancel() &#125;) // doHeavyTask関数で最大5秒まで</span></span><br><span class="line"><span class="addition">+time.AfterFunc(5*time.Second, func() &#123; cancel(ErrTimeoutMiddle) &#125;) // doHeavyTask関数で最大5秒まで</span></span><br><span class="line">// ... 何かしらの処理</span><br><span class="line">callHeavyWebAPI(ctx)</span><br><span class="line">// ... 何かしらの処理</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func callHeavyWebAPI(ctx context.Context) &#123;</span><br><span class="line">ctx, cancel := context.WithCancelCause(ctx)</span><br><span class="line"><span class="deletion">-time.AfterFunc(3*time.Second, func() &#123; cancel() &#125;) // callHeavyWebAPI関数で最大3秒まで</span></span><br><span class="line"><span class="addition">+time.AfterFunc(3*time.Second, func() &#123; cancel(ErrTimeoutInner) &#125;) // callHeavyWebAPI関数で最大3秒まで</span></span><br><span class="line"></span><br><span class="line">for &#123;</span><br><span class="line">select &#123;</span><br><span class="line">case &lt;-ctx.Done():</span><br><span class="line">switch ctx.Err() &#123;</span><br><span class="line">case context.DeadlineExceeded:</span><br><span class="line">fmt.Println(&quot;context timeout exceeded&quot;)</span><br><span class="line">case context.Canceled:</span><br><span class="line"><span class="deletion">-fmt.Println(&quot;context canceled&quot;) // ★どこでキャンセルされた？😭</span></span><br><span class="line"><span class="addition">+switch context.Cause(ctx) &#123;</span></span><br><span class="line"><span class="addition">+case ErrTimeoutOuter:</span></span><br><span class="line"><span class="addition">+fmt.Println(&quot;mainのタイムアウトによりキャンセル&quot;)</span></span><br><span class="line"><span class="addition">+case ErrTimeoutMiddle:</span></span><br><span class="line"><span class="addition">+fmt.Println(&quot;doHeavyTaskのタイムアウトによりキャンセル&quot;)</span></span><br><span class="line"><span class="addition">+case ErrTimeoutInner:</span></span><br><span class="line"><span class="addition">+fmt.Println(&quot;callHeavyTaskのタイムアウトによりキャンセル&quot;)</span></span><br><span class="line"><span class="addition">+default:</span></span><br><span class="line"><span class="addition">+fmt.Println(&quot;その他のキャンセル&quot;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return</span><br><span class="line">default:</span><br><span class="line">// ...外部API呼び出しなどの処理</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重要な考え方として、<code>cancel(err)</code> を設定しても、<code>ctx.Err()</code>の値は変わりません。<code>ctx.Err()</code> は従来どおり、<code>context.DeadlineExceeded</code> や <code>context.Canceled</code> が取得できます。つまり互換性が保たれています。エラー理由をトレースしたい場合のみ、<code>context.Cause(ctx)</code> を呼び出します。最初は使い分けなんだろうとか、やや面倒だなと思いましたが、考えてみると順当な判断です。</p><ul><li><code>ctx.Err()</code><ul><li>Doneが未設定の場合、<code>nil</code> を返す</li><li>Doneが設定されたら、<code>context.Canceled</code> か <code>context.DeadlineExceeded</code> を返す</li></ul></li><li><code>context.Cause(ctx)</code><ul><li>ユーザーが設定した独自の <code>error</code> を返す。設定した場合、<code>ctx.Err()</code>は <code>context.Canceled</code> を返す</li></ul></li></ul><p>これから新規にハンドリングしたい人は、 <code>ctx.Err()</code> を用いず、一気に <code>context.Cause(ctx)</code> を使っても良いかもしれません。</p><p><code>Cause()</code>ですが、以下のように <code>context.Context</code> のインターフェースに<code>Cause()</code>といった関数を追加してくれた方が利用者としては便利じゃないかと思いますよね。これは<a href="https://go.dev/doc/go1compat">Go1互換性ポリシー</a>に書いてあるように、パッケージエクスポートされたインターフェースに新しい関数を追加することは許可されてないということで否定されていました（そのため、context.Contextを引数にとる現在のかたちで提供されています）。</p><figure class="highlight diff"><figcaption><span>互換性をぶっ壊すAPIイメージ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type Context interface &#123;</span><br><span class="line">Deadline() (deadline time.Time, ok bool)</span><br><span class="line">Done() &lt;-chan struct&#123;&#125;</span><br><span class="line">Err() error</span><br><span class="line">Value(key any) any</span><br><span class="line"><span class="addition">+Cause() error // ★後方互換性を壊すためインターフェースに新規関数の追加はできない</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>少しだけ惜しい気もしますが、すぐに覚えられるレベルかなと思います。</p><p><strong>2023.1.30 追記:</strong></p><p>このあたりの互換性を保ったAPI提供については、syumaiさんの<a href="https://blog.syum.ai/entry/2023/01/28/224034">ライブラリとして公開したGoのinterfaceを変更するのは難しいと言う話 - 焼売飯店</a> が詳しいです！</p><h2 id="使い方について"><a href="#使い方について" class="headerlink" title="使い方について"></a>使い方について</h2><p>追加された関数について、パッとどういう挙動になるか確信が持てなかった3ケースを動かしてみます。</p><h3 id="1-cancel-nil-を呼んだら？"><a href="#1-cancel-nil-を呼んだら？" class="headerlink" title="1. cancel(nil) を呼んだら？"></a>1. cancel(nil) を呼んだら？</h3><p>結論→ <code>context.Cause(ctx)</code> が <code>context.Canceled</code>を返します。少し意外な結果に思うかもしれません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancelCause(context.Background())</span><br><span class="line">cancel(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(ctx.Err() == context.Canceled)          <span class="comment">// true</span></span><br><span class="line">fmt.Println(context.Cause(ctx) == context.Canceled) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>nil</code> を返さないことで、<code>ctx.Err()</code> を用いず <code>context.Cause()</code> で <code>context</code> のハンドリングができるようするための理由だと思います。</p><h3 id="2回呼んだらどうなる？"><a href="#2回呼んだらどうなる？" class="headerlink" title="2回呼んだらどうなる？"></a>2回呼んだらどうなる？</h3><p>結論→ 最初に設定された <code>cause</code> が常に取得される。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancelCause(context.Background())</span><br><span class="line">cancel(errors.New(<span class="string">&quot;1. timeout&quot;</span>))</span><br><span class="line">cancel(errors.New(<span class="string">&quot;2. connection dropped&quot;</span>))</span><br><span class="line"></span><br><span class="line">fmt.Println(context.Cause(ctx)) <span class="comment">// 1. timeout</span></span><br><span class="line">fmt.Println(context.Cause(ctx)) <span class="comment">// 1. timeout</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-親子contextでそれぞれcancelさせた場合"><a href="#3-親子contextでそれぞれcancelさせた場合" class="headerlink" title="3. 親子contextでそれぞれcancelさせた場合"></a>3. 親子contextでそれぞれ<code>cancel</code>させた場合</h3><p>例えば、下記のように親子contextを作成し、親→子の順番でキャンセルさせました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">parentCtx, parentCancel := context.WithCancelCause(context.Background())</span><br><span class="line">childCtx, childCancel := context.WithCancelCause(parentCtx)</span><br><span class="line"></span><br><span class="line">parentCancel(errors.New(<span class="string">&quot;parent timeout&quot;</span>))</span><br><span class="line">childCancel(errors.New(<span class="string">&quot;child timeout&quot;</span>))</span><br><span class="line"></span><br><span class="line">fmt.Println(context.Cause(parentCtx)) <span class="comment">// parent timeout</span></span><br><span class="line">fmt.Println(context.Cause(childCtx))  <span class="comment">// parent timeout</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この例の場合は、親のキャンセル内容が優先されるます。 <code>parentCancel</code>、<code>childCancel</code> の呼び出し位置を変えてみると出力が変わるので（基本は子は親に影響しない。親が先にキャンセルしていたら、子はそれを引き継ぐ）、動かしてみると良いかなと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>従来では、特に親子関係を持った<code>context</code>でそれぞれキャンセルが発生しうるときに切り分けが難しかったが、Go 1.20 から追加された、 <code>WithCancelCause()</code> と <code>context.Cause()</code> で解決でき、どこでキャンセルされたんだ問題を解決に導いてくれる</li><li>インターフェースは <code>context.Context</code> への関数追加ではなく、<code>context</code> パッケージへのヘルパー関数である</li></ul><p>次は川口さんの<a href="/articles/20230126a/">Wrapping multiple errors</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230125a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;433&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.20" scheme="https://future-architect.github.io/tags/Go1-20/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.20リリース連載が始まります＆メモリアリーナの紹介＆落ち穂拾い</title>
    <link href="https://future-architect.github.io/articles/20230123a/"/>
    <id>https://future-architect.github.io/articles/20230123a/</id>
    <published>2023-01-22T15:00:00.000Z</published>
    <updated>2023-02-03T04:35:28.729Z</updated>
    
    <content type="html"><![CDATA[<p>フューチャーのテックブログ恒例のGoの新バージョンリリース記念のブログが始まります。この執筆時点でrc3が出ています。かつてこんな順調なことがあったでしょうか？</p><div class="scroll"><table><thead><tr><th align="center">Date</th><th align="left">Title</th><th align="left">Author</th></tr></thead><tbody><tr><td align="center">1&#x2F;23(月)</td><td align="left">メモリアリーナの紹介＆落ち穂拾い</td><td align="left">澁川喜規</td></tr><tr><td align="center">1&#x2F;24(火)</td><td align="left"><a href="/articles/20230125a/">contextパッケージのWithCancelCauseとCause</a></td><td align="left">真野隼記さん</td></tr><tr><td align="center">1&#x2F;25(水)</td><td align="left"><a href="/articles/20230126a/">Wrapping multiple errors</a></td><td align="left">川口翔大さん</td></tr><tr><td align="center">1&#x2F;26(木)</td><td align="left"><a href="/articles/20230127a/">timeのアップデート</a></td><td align="left">宮永崇史さん</td></tr><tr><td align="center">1&#x2F;27(金)</td><td align="left"><a href="/articles/20230128a/">HTTP ResponseController</a></td><td align="left">辻大志郎さん</td></tr><tr><td align="center">1&#x2F;30(月)</td><td align="left"><a href="/articles/20230131a/">New ReverseProxy Rewrite hook を動かしながら理解する</a></td><td align="left">棚井龍之介さん</td></tr><tr><td align="center">1&#x2F;31(火)</td><td align="left"><a href="/articles/20230202a/">vetのアップデート</a></td><td align="left">今泉智義さん</td></tr><tr><td align="center">2&#x2F;1(水)</td><td align="left"><a href="/articles/20230203a/">go build に追加される cover オプション（利用例付き）</a></td><td align="left">藤井亮佑さん</td></tr></tbody></table></div><p>初回は、メモリアリーナの紹介ついでに、他の人が触れない残ったネタも紹介します。</p><h1 id="メモリアリーナとは"><a href="#メモリアリーナとは" class="headerlink" title="メモリアリーナとは"></a>メモリアリーナとは</h1><p>メモリアリーナについては以下のプロポーザルで提案されたものです。</p><ul><li><a href="https://github.com/golang/go/issues/51317">proposal: arena: new package providing memory arenas</a></li></ul><p>Goはガベージコレクタを備えた言語ですが、ガベージコレクタは実行時にコストが多少かかります。メモリをスキャンし、他から参照されていないかどうかを探索する必要があるからです。メモリアリーナとして、あらかじめGC対象外のメモリ領域を手動で確保することで、GCがオブジェクトを探索するコストなどが節約できて、15%ほどの性能向上があった、とプロポーザルにはあります。</p><p>しかし、メモリの解放を手動で行う必要があったり、本質的に「危険」な機能であるし、プロポーザルで提案されている使い方（protobufのデコードとか）以外はほとんどパフォーマンスに寄与しない可能性もあります。</p><h2 id="ドキュメントがない？どこにあるの？"><a href="#ドキュメントがない？どこにあるの？" class="headerlink" title="ドキュメントがない？どこにあるの？"></a>ドキュメントがない？どこにあるの？</h2><p>Goは開発版のリリースノートやライブラリリファレンスも公開してくれています。さっそく、arenaパッケージのドキュメントを見てみましょう！</p><p><a href="https://pkg.go.dev/std@go1.20rc3">https://pkg.go.dev/std@go1.20rc3</a></p><p>と思ったけどない？インストールすると、確かに<code>$GOROOT/src/arena</code>フォルダは存在します。フォルダがあるならローカルのgodocで見られそうなのでgodocを入れて見てみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go install golang.org/x/tools/cmd/godoc@latest</span><br><span class="line">$ godoc</span><br></pre></td></tr></table></figure><p>しかし、これでもリファレンスは表示されず、パッケージドキュメントしか表示されません。</p><img src="/images/20230123a/スクリーンショット_2023-01-18_0.08.44.png" alt="スクリーンショット_2023-01-18_0.08.44.png" width="1200" height="684" loading="lazy"><p>この機能はオプトインで動くもので、ビルドの時に環境変数が必要だったことを思い出し、これを指定するとようやく見れました！機能はシンプルですね。　ちなみに、これを書く時にまったく違う<a href="https://pkg.go.dev/github.com/google/gapid@v1.6.1/core/memory/arena">同名のライブラリ</a>を見て、ふむふむと読んでいたのですが、本家の方は検索では出てこないのでみなさまもお気をつけください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ GOEXPERIMENT=arenas godoc</span><br></pre></td></tr></table></figure><img src="/images/20230123a/スクリーンショット_2023-01-18_0.13.05.png" alt="スクリーンショット_2023-01-18_0.13.05.png" width="758" height="402" loading="lazy"><p>使い方はシンプルですね。</p><ul><li>まずは <code>arena.NewArena()</code>で<code>*Arena</code>を作成</li><li>使い終わったら <code>Free()</code>メソッドを呼び出す</li><li><code>arena.MakeSlice[Type](arena)</code>や<code>arena.New[Type](arena)</code>といった関数を使ってアリーナ内部のメモリを利用</li><li><code>arena.Clone(obj)</code>を使うと、アリーナが終了しても残るよう、ヒープに値を移動する(浅いコピー)</li></ul><p>Goはメソッドのジェネリクスが使えないのですが、そのかわりに、1番目の引数に値を取るジェネリクスなヘルパー関数を用意するという、C言語でオブジェクト指向している時代のような設計をすることで代替するというテクニックが使われていますね。</p><h2 id="ベンチマーク"><a href="#ベンチマーク" class="headerlink" title="ベンチマーク"></a>ベンチマーク</h2><p>小さいオブジェクトをたくさん確保するユースケースで性能差が出るということで、標準ライブラリのリンクドリストのcontainer&#x2F;listをちょびっと改造してみました。<code>Element</code>はポインタが3つと<code>interface&#123;&#125;</code>を1つ持つ構造体です。<code>interface</code>にポインタを入れるとしたら４０バイト(インタフェースはポインタ2つ保持するので)の値のメモリの確保にarenaを利用する、というユースケースになります。</p><p>既存のコードのメモリ確保部分をいじるだけであれば、そんなに難しくないですね。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+import (</span></span><br><span class="line"><span class="addition">+&quot;arena&quot;</span></span><br><span class="line"><span class="addition">+)</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"> // Element is an element of a linked list.</span><br><span class="line"> type Element struct &#123;</span><br><span class="line"> // Next and previous pointers in the doubly-linked list of elements.</span><br><span class="line"><span class="meta">@@ -48,6 +52,7 @@</span></span><br><span class="line"> type List struct &#123;</span><br><span class="line"> root Element // sentinel list element, only &amp;root, root.prev, and root.next are used</span><br><span class="line"> len  int     // current list length excluding (this) sentinel element</span><br><span class="line"><span class="addition">+a    *arena.Arena</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // Init initializes or clears list l.</span><br><span class="line"><span class="meta">@@ -59,8 +64,16 @@</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // New returns an initialized list.</span><br><span class="line"><span class="deletion">-func New() *List &#123; return new(List).Init() &#125;</span></span><br><span class="line"><span class="addition">+func NewWithArena(a *arena.Arena) *List &#123;</span></span><br><span class="line"><span class="addition">+r := arena.New[List](a)</span></span><br><span class="line"><span class="addition">+r.a = a</span></span><br><span class="line"><span class="addition">+return r.Init()</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"></span><br><span class="line"> // Len returns the number of elements of list l.</span><br><span class="line"> // The complexity is O(1).</span><br><span class="line"> func (l *List) Len() int &#123; return l.len &#125;</span><br><span class="line"><span class="meta">@@ -101,7 +114,9 @@</span></span><br><span class="line"></span><br><span class="line"> // insertValue is a convenience wrapper for insert(&amp;Element&#123;Value: v&#125;, at).</span><br><span class="line"> func (l *List) insertValue(v any, at *Element) *Element &#123;</span><br><span class="line"><span class="deletion">-return l.insert(&amp;Element&#123;Value: v&#125;, at)</span></span><br><span class="line"><span class="addition">+e := arena.New[Element](l.a)</span></span><br><span class="line"><span class="addition">+e.Value = v</span></span><br><span class="line"><span class="addition">+return l.insert(e, at)</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>ベンチマークのコードは以下の通りです。通常の実装、arena利用、中に入れる要素もarenaを利用の3つでテストしています。一回に入れる要素数を要素数を1万、10万、100万と変えてみています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> list2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;arena&quot;</span></span><br><span class="line"><span class="string">&quot;container/list&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> V <span class="keyword">struct</span> &#123;</span><br><span class="line">n <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkListWithoutArena</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">l := list.New()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">l.PushBack(&amp;V&#123;i&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkListWithArena</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">a := arena.NewArena()</span><br><span class="line">l := NewWithArena(a)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">l.PushBack(&amp;V&#123;i&#125;) <span class="comment">// valueはarena使わず</span></span><br><span class="line">&#125;</span><br><span class="line">a.Free()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkListWithArena2</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">a := arena.NewArena()</span><br><span class="line">l := NewWithArena(a)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">v := arena.New[V](a) <span class="comment">// valueもarena利用</span></span><br><span class="line">v.n = i</span><br><span class="line">l.PushBack(v)</span><br><span class="line">&#125;</span><br><span class="line">a.Free()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>結果は以下の通りです。1万要素程度だとほとんど差がつきません。10万ぐらいになるとだいぶ差が・・・という感じです。ちなみに、最初に書いたときは<code>Free()</code>を書き忘れてしまいました。そうしたら処理時間が3倍になってました。要注意です。</p><div class="scroll"><table><thead><tr><th align="center">方式＼要素数</th><th align="center">10,000</th><th align="center">100,000</th><th align="center">1,000,000</th></tr></thead><tbody><tr><td align="center">標準のメモリ戦略</td><td align="center">0.30mS</td><td align="center">4.58mS</td><td align="center">62.07mS</td></tr><tr><td align="center">arena利用(Elementのみ)</td><td align="center">0.29mS (-4.2%)</td><td align="center">2.77mS (-39.5%)</td><td align="center">28.00mS (-54.9%)</td></tr><tr><td align="center">arena利用(valueも利用)</td><td align="center">0.28mS (-8.4%)</td><td align="center">2.65mS (-42.1%)</td><td align="center">26.80mS (-56.8%)</td></tr></tbody></table></div><h2 id="どこで使えるのか？"><a href="#どこで使えるのか？" class="headerlink" title="どこで使えるのか？"></a>どこで使えるのか？</h2><p>パフォーマンスがあがる！素敵！じゃあ明日からガンガン使う！ということにはならなそうなのが今回の機能です。なんといっても、コンパイラのフラグをセットしないと使えません。後述のライフサイクルを考えると、APIの形がアリーナ利用とそうでない場合で変わる可能性があり、公開するライブラリだと、後方互換性を考えると、最低でも1.21がリリースされ、1.20がサポートされている最低バージョンになってから、となるかもしれません。そもそもExperimentalが外れてからその次、の方がいいかもしれません。もちろん、個別のアプリで使うなら自己責任ですぐにでも使えるとは思います。</p><h2 id="ユースケースには何があるか？"><a href="#ユースケースには何があるか？" class="headerlink" title="ユースケースには何があるか？"></a>ユースケースには何があるか？</h2><p>そもそも、小さいメモリをたくさん使う、というユースケースがどこにあるのか、というところが問題です。一番考えられるのが何かしらの木構造の処理ですね。あとは常駐プロセスでたくさんのオブジェクトを扱うケースです。考えられるのはだいたいこんな感じでしょうか？</p><ul><li>XMLのパース（Excelのパース)</li><li>言語処理系の構文木</li><li>HTMLのサーバーサイドレンダリング（DOMツリー）</li><li>RDB自作勢（タプルなどの内部のデータ管理）</li></ul><p>一番上が一番有望なユースケースな気がしています。というのも、前職で作ったExcelからのマスターデータ変換はプロファイルを取ると、ほとんどがメモリ確保の処理時間でした。Goのxmlパッケージは<a href="https://github.com/golang/go/issues/21823">処理が遅いというissue</a>も上がっていたりします。最近のGoでは試していないですが、attributeとかをパースのときにそれぞれメモリ確保して格納しているようなところが遅かったと記憶しています。</p><h2 id="ライフサイクル管理とAPI設計の考察"><a href="#ライフサイクル管理とAPI設計の考察" class="headerlink" title="ライフサイクル管理とAPI設計の考察"></a>ライフサイクル管理とAPI設計の考察</h2><p>もう1つあるのが、Arenaのライフサイクルの戦略をどうするか、です。たとえば、Excelのファイルのパースであれば1ファイルごとにArenaを作る方法もあります。ただし、同時処理数の最大が見えていて、最大メモリ量が見積もれるのであれば、複数のExcelファイルを処理するのに、1つのArenaを共有し、sync.Pool的な再利用の仕組みも作って載せる、というのが一番効率よくなりそうです。</p><p>ただし、Arena上のメモリの解放はArena一括で行う必要があります。徐々にメモリが少なくなったからといって、「じゃあGC実行して開けよう」みたいなことはできません。データベースのような仕組みを作るのであれば、自分で確保したメモリの量も見ながら、ときどきArenaにメモリを返す、みたいなメモリ管理の仕組みを自作する必要があるかもしれません。</p><p>僕が最初に間違って読んでいた<a href="https://pkg.go.dev/github.com/google/gapid@v1.6.1/core/memory/arena">Google製の同名のライブラリ</a>では<code>context.Context</code>にArenaを登録したり取り出せるAPIがありましたが、これと同じように<code>context.Context</code>と同じライフサイクルで使う、というのも1つの手かと思います。そうすると、ある程度まとまった処理単位でArenaを共有する、といったことが可能となりますし、アリーナ利用とそうでない場合にAPIを変えずにできます（あまり良いことでもないかもですが）。プロポーザルの議論の中でもこのようなリクエスト単位での解放というのが紹介されていました。</p><p>ライブラリのAPIとしては、最低限、Arenaを外から渡せるように、という口の用意すれば、使う側で、これらの戦略を利用者が選べるので良さそうですね。あとは、レスポンスで返すオブジェクトをヒープにするか、Arenaの上に作るかはオプションで指定できる必要もありそうです。たとえば、Excelのパースであれば、XMLのメモリはArena上において、Excelとして処理するライブラリが使い終わったらXMLのメモリを解放してあげて、ブックの値はヒープにおいておくことでユーザーに返す、というのが可能です。最終的に返すブックがArenaだと、それを使う間はArenaの解放はできません。ただし、Excelから値を読み取って作ったドメインオブジェクトが必要なレスポンスであれば、ブックがArenaでも良い（ドメインオブジェクトを作ったら不要になる)となります。誰がどう使うかでどちらにあると良いかが変わってきてしまうので、汎用的なライブラリを作るなら明示的に指定できる必要がありそうです。</p><p>ビルド時に環境変数を指定するのですが、環境変数だと条件コンパイルに使えないので、別途ビルドタグでArenaなし版のみをビルドするように、というのも1.21が出るまでは必要そうですね。</p><h2 id="Arenaから追い出されないように気を付ける-x2F-開放後はArenaを触らないようにする"><a href="#Arenaから追い出されないように気を付ける-x2F-開放後はArenaを触らないようにする" class="headerlink" title="Arenaから追い出されないように気を付ける&#x2F;開放後はArenaを触らないようにする"></a>Arenaから追い出されないように気を付ける&#x2F;開放後はArenaを触らないようにする</h2><p>Arenaを活用するには、そこでメモリを確保して、そこをきちんと使う必要がありますが、Goの場合はエスケープ処理が便利かつ強力なので、ヒープ側にメモリが確保されてGC対象になってしまう可能性があります。Arenaをせっかく使うのであれば、Arenaから追い出されないようにする必要があります。</p><ul><li>スライスは<code>arena.MakeSlice[Type](a)</code>で毎回確保する。可変長として使おうとして<code>append()</code>をすると、伸長するために新しいメモリ領域を確保するためにヒープに逃げていってしまい、Arenaから外に出てしまうので、次のように伸長する必要がある場合は再度<code>arena.MakeSlice[Type](a)</code>で確保してコピーを自前でやる必要がある。ただし、伸長したときに、前のスライスのメモリがArenaを解放するまでは残り続けるため、やはり基本的に固定長のみで運用で、可変長で扱わない方が良さそう。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mem := arena.NewArena()</span><br><span class="line">s := arena.MakeSlice[<span class="type">int</span>](mem, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">s = Append(mem, s, <span class="number">11</span>)</span><br><span class="line">log.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Append</span>[<span class="title">T</span> <span class="title">any</span>]<span class="params">(mem *arena.Arena, s []T, v T)</span></span> []T &#123;</span><br><span class="line">l := <span class="built_in">len</span>(s)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">cap</span>(s) == l &#123;</span><br><span class="line">newS := arena.MakeSlice[T](mem, l+<span class="number">1</span>, l*<span class="number">2</span>)</span><br><span class="line"><span class="built_in">copy</span>(newS, s)</span><br><span class="line">newS[l] = v</span><br><span class="line"><span class="keyword">return</span> newS</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">append</span>(s, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>文字列も、<code>[]byte</code>としてArenaに置いておく必要がある（以下のコード参照）。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src := <span class="string">&quot;source string&quot;</span></span><br><span class="line"></span><br><span class="line">mem := arena.NewArena()</span><br><span class="line"><span class="keyword">defer</span> mem.Free()</span><br><span class="line"></span><br><span class="line">bs := arena.MakeSlice[<span class="type">byte</span>](mem, <span class="built_in">len</span>(src), <span class="built_in">len</span>(src))</span><br><span class="line"><span class="built_in">copy</span>(bs, src)</span><br><span class="line">str := unsafe.String(&amp;bs[<span class="number">0</span>], <span class="built_in">len</span>(bs))</span><br></pre></td></tr></table></figure><ul><li>mapやchanはArenaを使う版がないので、必要であれば作る必要がある。ただし、chanはそこまで大量に作って・・・ということもなさそうなので、問題はない気がします。mapが必要であれば頑張って実装する必要がありますね。</li></ul><p>文字列は<a href="https://uptrace.dev/blog/posts/go-memory-arena.html">Uptraceのブログ</a>のブログから引用しました。</p><p>もう1つはアリーナが解放された後にアリーナの中のメモリを触らない、というのもあります。<code>go run -asan main.go</code>のようにアドレスサニタイザーを有効にして実行すると、このようなエラーは検知できます。アリーナ解放後も利用する必要がある値は<code>arena.Clone()</code>を使って、ヒープに逃してあげましょう。</p><h2 id="アリーナのまとめ"><a href="#アリーナのまとめ" class="headerlink" title="アリーナのまとめ"></a>アリーナのまとめ</h2><p>マイクロベンチマークで性能が2倍以上になる、というのをやってみました。Uptraceのブログでも2分探索のコードを改造して使っていたので、この手の小さなメモリをたくさん使うケースに適用すると良さそうです。</p><p>ただし、APIデザインを考えると、汎用的な設計を作るのは結構大変そうだな、と思いました。</p><h1 id="その他の小ネタ"><a href="#その他の小ネタ" class="headerlink" title="その他の小ネタ"></a>その他の小ネタ</h1><p>コンパイラとかcgo周りとか細かくいろいろアップデートがあります。CGo依存でデフォルトで実装されていたmacOSが非依存になったりして、デフォルトのmac上のビルドとクロスビルドで違いがなくなりました（他のCGo依存ライブラリがない場合）。まあ、大きく実装が変わるとかに関わるものは今のところなさそう？CPUアーキテクチャのサブタイプごとに細かくかき分けたい（ARMの中の命令セットごととか）人向けにビルドタグとか追加されていますが、多くの人には関係ないかな？<br>あとは、標準ライブラリのビルド済みのパッケージが添付されなくなって、配布物が小さくなっています。まあクロスコンパイルをする場合などはローカルでビルドされてキャッシュされていたので、それと同じような感じの扱いになっただけで、初回ビルドがちょっと遅いかな？ぐらいのものです。二酸化炭素を減らさないと！という会社さんはローカルがキャッシュ済みのイメージを作って使うといいかも？</p><h2 id="ライブラリ系"><a href="#ライブラリ系" class="headerlink" title="ライブラリ系"></a>ライブラリ系</h2><h3 id="unsafe"><a href="#unsafe" class="headerlink" title="unsafe"></a><code>unsafe</code></h3><p>文字列とバイト列のファイルコピーをしない変換、スライスの裏の配列の取得ができるようになります。<a href="https://pkg.go.dev/github.com/valyala/fasthttp">github.com&#x2F;valyala&#x2F;fasthttp</a>はなるべくstringを作らないことで高速なベンチマークを達成している（と思う）のですが、net&#x2F;httpの標準ライブラリでも同じぐらいのパフォーマンスアップを期待しちゃいますね。</p><h3 id="圧縮系のライブラリ"><a href="#圧縮系のライブラリ" class="headerlink" title="圧縮系のライブラリ"></a>圧縮系のライブラリ</h3><p><code>archive/tar</code>と<code>archive/zip</code>で現在のフォルダの外だったり、絶対パスが入ると<code>ErrInsecurePath</code>を返すようになりました。ディレクトリトラバーサル攻撃対策ですね。<code>GODEBUG=tarinsecurepath=0</code>とか<code>GODEBUG=zipinsecurepath=0</code>を設定して実行すれば前と同じ動作にはなります。</p><h3 id="暗号系ライブラリ"><a href="#暗号系ライブラリ" class="headerlink" title="暗号系ライブラリ"></a>暗号系ライブラリ</h3><p><code>crypto/ecdh</code>で楕円暗号のパッケージが追加になりました。<a href="https://qiita.com/lemiyachi/items/c20a18b172c6f192a262">RSAの終わりの始まり - 暗号移行再び</a>にあるように、暗号強度を強くしよう、という流れがまた来そうなので、要注目パッケージです。<br>あとは<code>crypto/ecdsa</code>とか<code>crypto/rsa</code>とかめずらしく、性能が悪くなる改善ですが、処理速度が定数時間で終わるようになるということで、処理する時間で内容が推測できちゃう系の最近たまに話題になる系統のセキュリティ対策ですかね。</p><h3 id="io-OffsetWriter"><a href="#io-OffsetWriter" class="headerlink" title="io.OffsetWriter"></a><code>io.OffsetWriter</code></h3><p><code>io.Reader</code>には<code>io.SectionReader</code>という、オフセット＋サイズ制限、<code>io.LimitReader</code>というサイズ制限のReaderはありましたが、実は<code>io.Writer</code>としてはオフセット系のはなかったんですね。書き込み上限のWriter（<code>LimitWriter？</code>)はなさそうなので、誰か提案すると良い気がします。</p><h3 id="math-rand"><a href="#math-rand" class="headerlink" title="math/rand"></a><code>math/rand</code></h3><p>地味に変更が多いです。1.20から、デフォルトの乱数の種が固定値でなくなりました。1.19までは間違ったプログラムの実行の仕方を防ぐために、常に同じ乱数が変えるようになっていて、開発者に適切な種の設定を即す挙動になっていました。実行時に<code>GODEBUG=randautoseed=0</code>をつけると、以前と同じ挙動になります。このグローバルな乱数ジェネレータの乱数の種を設定するグローバルな<code>rand.Seed()</code>は廃止になっています。種を固定した乱数が必要な場合は、乱数生成器を明示的に作って使いましょう。<br>あと、<code>rand.Read()</code>も廃止になっています。ランダムなバイト列取得というセキュリティ用途でよくあるユースケースで間違って使われるケースが多かったんでしょうか？<code>crypto/rand</code>の<code>Read</code>を使えとなっていますね。</p><h3 id="regexp"><a href="#regexp" class="headerlink" title="regexp"></a><code>regexp</code></h3><p>正規表現でメモリを消費しすぎるパターンの場合に<code>syntax.ErrLarge</code>が返るようになりました。Go 1.19のパッチリリースでセキュリティ対策されたのですが、そのときは新しいAPIを導入しないルールに従い、<code> syntax.ErrInternalError</code>を一時的に返していたが、1.20からは上記のエラーが新規で作られたとのことです。バージョンアップのやり方として参考になりますね。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>明日(1&#x2F;24)は真野さんの <a href="/articles/20230125a/">contextパッケージのWithCancelCauseとCause</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;フューチャーのテックブログ恒例のGoの新バージョンリリース記念のブログが始まります。この執筆時点でrc3が出ています。かつてこんな順調なことがあったでしょうか？&lt;/p&gt;
&lt;div class=&quot;scroll&quot;&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="Go1.20" scheme="https://future-architect.github.io/tags/Go1-20/"/>
    
  </entry>
  
</feed>
