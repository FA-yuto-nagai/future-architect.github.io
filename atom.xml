<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  <icon>https://future-architect.github.io/feed_icon.png</icon>
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2023-09-08T08:01:36.568Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SwiftUIのカスタムアラートダイアログについて考える</title>
    <link href="https://future-architect.github.io/articles/20230908a/"/>
    <id>https://future-architect.github.io/articles/20230908a/</id>
    <published>2023-09-07T15:00:00.000Z</published>
    <updated>2023-09-08T08:01:36.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。HealthCare Innovation Group(HIG)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>所属の清水です。</p><p>本記事は、<a href="/articles/20230830a/" title="夏の自由研究連載2023 を始めます">夏の自由研究ブログ連載2023</a>の5本目です。</p><p>SwiftUIにおけるアラートダイアログを自作で実装する場合、どんな方法があるか考えてみました。</p><p>Swiftを用いたiOSアプリ開発で、アラートを自作したいと考えたことはありませんか？Webアプリでもモバイルアプリでも、ユーザに問題を報告したり動作による影響を警告したりする上で、アラートは重要です。</p><p>SwiftUIでも<a href="https://developer.apple.com/documentation/SwiftUI/View/alert(_:isPresented:actions:)-1bkka"><code>alert</code></a>が標準で用意されています。ただし、フォントサイズやダイアログのサイズが変更できないため、iPadで利用する場合画面に対してかなり小さく扱いづらいです。</p><p>SwiftUI標準の<code>alert</code>をシミュレータ iPad Pro (12.9-inch) で表示した際の図</p><img src="/images/20230908a/68747470733a2f2.png" alt="" width="1200" height="1643" loading="lazy"><p>画面に対してかなり小さい・・・。</p><p>そこで、「自由にカスタマイズできるアラートダイアログを自作する場合、どのような実装方法があるか」を自由研究の題材とすることにしました。</p><p>今回試してみた3種類のカスタムアラートを、実装方法と共に紹介したいと思います。<br>※もっと良い実装方法をご存知でしたら、教えていただきたいです！</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>本記事では触れていませんが、カスタムアラートダイアログに関するライブラリも公開されています。合わせて確認頂けると良いと思います。（例: <a href="https://github.com/divadretlaw/CustomAlert">CustomAlert</a>）</p></div><h1 id="検証内容"><a href="#検証内容" class="headerlink" title="検証内容"></a>検証内容</h1><p>アラートは、通常の画面より手前（通常画面に重なる形）に表示します。<br>今回は、重ねて表示するためのコンポーネントの中から、以下の3種類の実装方法で比較していきたいと思います。</p><ol><li><code>fullScreenCover</code>を利用した方法</li><li><code>overlay</code>を利用した方法</li><li><code>ZStack</code>を利用した方法</li></ol><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>画面に重ねて表示するためのダイアログをViewとして用意しています。SwiftUI標準の<code>alert</code>に見た目を寄せたアラートViewを、iPad Pro (12.9-inch) 向けにサイズ調整したViewがこちらです。このViewをいくつかの方法で重ねていきます。</p><p>※実装は、記事後半に記載しています。</p><img src="/images/20230908a/68747470733a2f2_2.png" alt="" width="1140" height="1420" loading="lazy"><h2 id="1-fullScreenCoverを利用した方法"><a href="#1-fullScreenCoverを利用した方法" class="headerlink" title="1. fullScreenCoverを利用した方法"></a>1. <code>fullScreenCover</code>を利用した方法</h2><p>一つ目は、<a href="https://developer.apple.com/documentation/swiftui/view/fullscreencover(ispresented:ondismiss:content:)"><code>fullScreenCover</code></a>を利用した方法です。</p><p>引数に渡したフラグがtrueの時、全画面を覆うViewをモーダル表示します。</p><p>他の方法と比較</p><ul><li>メリット<ul><li>画面全体にモーダル表示するため、アラート表示中に他の動作ができないように制限しやすい。</li></ul></li><li>デメリット<ul><li><code>fullScreenCover</code> は表示時に画面下から上まで覆うアニメーションを伴って表示するため、アニメーションのカスタマイズが難しい。（調べた限りほぼできない。）<br>アニメーションを非活性にすることはできる。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li></ul></li></ul><img src="/images/20230908a/68747470733a2f2.gif" alt="" width="75%" loading="lazy"><h2 id="2-overlayを利用した方法"><a href="#2-overlayを利用した方法" class="headerlink" title="2. overlayを利用した方法"></a>2. <code>overlay</code>を利用した方法</h2><p>二つ目は、<a href="https://developer.apple.com/documentation/swiftui/view/overlay(alignment:content:)"><code>overlay</code></a>を利用した方法です。<br>名前の通り、親Viewより手前に指定したViewを重ねて表示します。アラートの使用用途を考えるとちょうど良さそうです。</p><p>他の方法と比較</p><ul><li>メリット<ul><li><code>overlay</code>自体は重ねて表示するだけなので、アニメーションなどをカスタマイズしやすい。</li></ul></li><li>デメリット<ul><li>あくまでも元となるViewに重ねるため、重ねて表示する範囲は呼び出すViewに依存する。<br>例えば、<code>VStack</code>に紐づけると<code>VStack</code>の範囲が重ねるViewの表示範囲となり、表示範囲外は操作できてしまう。（下のgif参照）</li></ul></li></ul><img src="/images/20230908a/68747470733a2f2_2.gif" alt="" width="75%" loading="lazy"><h2 id="3-ZStackを利用した方法"><a href="#3-ZStackを利用した方法" class="headerlink" title="3. ZStackを利用した方法"></a>3. <code>ZStack</code>を利用した方法</h2><p>三つ目は、<a href="https://developer.apple.com/documentation/swiftui/zstack"><code>ZStack</code></a>を利用した方法です。<br><code>fullScreenCover</code>や<code>overlay</code>はViewのInstance Methodを利用していたのですが、こちらは内包するViewの表示順を制御するものなので、毛色が異なります。</p><p>他の方法と比較</p><ul><li>メリット<ul><li>アプリ大元のViewに重ねることで、画面全体を覆って表示制御できる。</li></ul></li><li>デメリット<ul><li>ダイアログ表示を制御するフラグやダイアログに表示する内容を<code>App</code>階層まで伝える必要があるため、単一のView内で状態管理が完結しない。</li></ul></li></ul><img src="/images/20230908a/68747470733a2f2_3.gif" alt="" width="75%" loading="lazy"><h2 id="コード実装例"><a href="#コード実装例" class="headerlink" title="コード実装例"></a>コード実装例</h2><p>今回利用したソースコードは、こちらです。</p><h3 id="App"><a href="#App" class="headerlink" title="App"></a>App</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">IsShowAlert</span>: <span class="title class_">EnvironmentKey</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> defaultValue: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt; <span class="operator">=</span> .constant(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">EnvironmentValues</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> isShowAlert: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">self</span>[<span class="type">IsShowAlert</span>.<span class="keyword">self</span>] &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; <span class="keyword">self</span>[<span class="type">IsShowAlert</span>.<span class="keyword">self</span>] <span class="operator">=</span> newValue &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SampleApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> isShowAlert: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">ZStack</span> &#123;</span><br><span class="line">                <span class="type">ContentView</span>()</span><br><span class="line">                    .environment(\.isShowAlert, <span class="variable">$isShowAlert</span>)</span><br><span class="line">                <span class="comment">/// 3. `ZStack`を利用した実装方法</span></span><br><span class="line">                <span class="keyword">if</span> isShowAlert &#123;</span><br><span class="line">                    <span class="type">CustomAlertView</span>(alertTitle: <span class="type">Text</span>(<span class="string">&quot;タイトル&quot;</span>)) &#123;</span><br><span class="line">                        <span class="type">Button</span>(<span class="string">&quot;OK&quot;</span>) &#123;</span><br><span class="line">                            <span class="variable">$isShowAlert</span>.wrappedValue.toggle()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; message: &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;メッセージ&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ContentView"><a href="#ContentView" class="headerlink" title="ContentView"></a>ContentView</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="comment">/// 標準アラートの表示を管理するフラグ</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> isShowDefaultAlert: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">/// `fullScreenCover`を利用したカスタムアラートの表示を管理するフラグ</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> isShowFullScreenCoverAlert: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">/// `overlay`を利用したカスタムアラートの表示を管理するフラグ</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> isShowOverlayAlert: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">/// `ZStack`を利用したカスタムアラートの表示を管理するフラグ</span></span><br><span class="line">    <span class="meta">@Environment</span>(\.isShowAlert) <span class="keyword">var</span> isShowAlert</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span> &#123;</span><br><span class="line">            <span class="type">VStack</span>(spacing: <span class="number">50</span>) &#123;</span><br><span class="line">                <span class="type">Button</span>(</span><br><span class="line">                    action: &#123;</span><br><span class="line">                        isShowDefaultAlert <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    label: &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;標準アラートを表示する&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">                <span class="type">Button</span>(</span><br><span class="line">                    action: &#123;</span><br><span class="line">                        isShowFullScreenCoverAlert <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    label: &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;`fullScreenCover`のアラートを表示する&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">                <span class="type">Button</span>(</span><br><span class="line">                    action: &#123;</span><br><span class="line">                        isShowOverlayAlert <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    label: &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;`overlay`のアラートを表示する&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">                <span class="type">Button</span>(</span><br><span class="line">                    action: &#123;</span><br><span class="line">                        isShowAlert.wrappedValue <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    label: &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;`ZStack`のアラートを表示する&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .alert(<span class="type">Text</span>(<span class="string">&quot;タイトル&quot;</span>), isPresented: <span class="variable">$isShowDefaultAlert</span>) &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;OK&quot;</span>) &#123;</span><br><span class="line">                isShowDefaultAlert.toggle()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; message: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;メッセージ&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .alertFullScreenCover(<span class="type">Text</span>(<span class="string">&quot;タイトル&quot;</span>), isPresented: <span class="variable">$isShowFullScreenCoverAlert</span>) &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;OK&quot;</span>) &#123;</span><br><span class="line">                isShowFullScreenCoverAlert.toggle()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; message: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;メッセージ&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .alertOverlay(<span class="type">Text</span>(<span class="string">&quot;タイトル&quot;</span>), isPresented: <span class="variable">$isShowOverlayAlert</span>) &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;OK&quot;</span>) &#123;</span><br><span class="line">                isShowOverlayAlert.toggle()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; message: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;メッセージ&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="comment">/// 1. `fullScreenCover`を利用した実装方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">alertFullScreenCover</span>&lt;<span class="type">A</span>, <span class="type">M</span>&gt;(</span><br><span class="line">        <span class="keyword">_</span> <span class="params">title</span>: <span class="type">Text</span>,</span><br><span class="line">        <span class="params">isPresented</span>: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;,</span><br><span class="line">        <span class="meta">@ViewBuilder</span> <span class="params">actions</span>: <span class="keyword">@escaping</span> () -&gt; <span class="type">A</span>,</span><br><span class="line">        <span class="meta">@ViewBuilder</span> <span class="params">message</span>: <span class="keyword">@escaping</span> () -&gt; <span class="type">M</span></span><br><span class="line">    ) -&gt; <span class="keyword">some</span> <span class="type">View</span> <span class="keyword">where</span> <span class="type">A</span> : <span class="type">View</span>, <span class="type">M</span> : <span class="type">View</span> &#123;</span><br><span class="line">        fullScreenCover(isPresented: isPresented) &#123;</span><br><span class="line">            <span class="type">CustomAlertView</span>(alertTitle: title, actions: actions, message: message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 2. `overlay`を利用した実装方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">alertOverlay</span>&lt;<span class="type">A</span>, <span class="type">M</span>&gt;(</span><br><span class="line">        <span class="keyword">_</span> <span class="params">title</span>: <span class="type">Text</span>,</span><br><span class="line">        <span class="params">isPresented</span>: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;,</span><br><span class="line">        <span class="meta">@ViewBuilder</span> <span class="params">actions</span>: <span class="keyword">@escaping</span> () -&gt; <span class="type">A</span>,</span><br><span class="line">        <span class="meta">@ViewBuilder</span> <span class="params">message</span>: <span class="keyword">@escaping</span> () -&gt; <span class="type">M</span></span><br><span class="line">    ) -&gt; <span class="keyword">some</span> <span class="type">View</span> <span class="keyword">where</span> <span class="type">A</span> : <span class="type">View</span>, <span class="type">M</span> : <span class="type">View</span> &#123;</span><br><span class="line">        overlay &#123;</span><br><span class="line">            <span class="keyword">if</span> isPresented.wrappedValue &#123;</span><br><span class="line">                <span class="type">CustomAlertView</span>(alertTitle: title, actions: actions, message: message)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CustomAlertView"><a href="#CustomAlertView" class="headerlink" title="CustomAlertView"></a>CustomAlertView</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CustomAlertView</span>&lt;<span class="title class_">A</span>, <span class="title class_">M</span>&gt;: <span class="title class_">View</span> <span class="title class_">where</span> <span class="title class_">A</span> : <span class="title class_">View</span>, <span class="title class_">M</span> : <span class="title class_">View</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> alertTitle: <span class="type">Text</span></span><br><span class="line">    <span class="meta">@ViewBuilder</span> <span class="keyword">var</span> actions: () -&gt; <span class="type">A</span></span><br><span class="line">    <span class="meta">@ViewBuilder</span> <span class="keyword">var</span> message: () -&gt; <span class="type">M</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span> &#123;</span><br><span class="line">            <span class="comment">// 背景部分</span></span><br><span class="line">            <span class="type">Color</span>.black</span><br><span class="line">                .opacity(<span class="number">0.2</span>)</span><br><span class="line">                .edgesIgnoringSafeArea(.all)</span><br><span class="line">            <span class="comment">// ダイアログ部分</span></span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                alertTitle</span><br><span class="line">                    .font(.largeTitle)</span><br><span class="line">                    .bold()</span><br><span class="line">                    .padding(.top, <span class="number">20</span>)</span><br><span class="line">                    .padding(.bottom, <span class="number">10</span>)</span><br><span class="line">                message()</span><br><span class="line">                    .font(.title)</span><br><span class="line">                <span class="type">Divider</span>()</span><br><span class="line">                    .padding(.top, <span class="number">20</span>)</span><br><span class="line">                actions()</span><br><span class="line">                    .font(.title)</span><br><span class="line">                    .padding(.vertical, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            .frame(width: <span class="type">UIScreen</span>.main.bounds.width <span class="operator">/</span> <span class="number">2</span>)</span><br><span class="line">            .background(.white)</span><br><span class="line">            .cornerRadius(<span class="number">15</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CustomAlert_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">CustomAlertView</span>(alertTitle: <span class="type">Text</span>(<span class="string">&quot;タイトル&quot;</span>), actions: &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;OK&quot;</span>) &#123;&#125;</span><br><span class="line">        &#125;, message: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;メッセージ&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>本記事では、自由研究としてアラートダイアログを自作する際の実装方法に関して、3種類を比較してみました。</p><p>アラートダイアログは性質上、表示中他の操作ができないことが求められると思います。今回試した中では、三つ目の<code>ZStack</code>を利用した方法がアプリ大元のViewに重ねることでアラートを一番手前に表示する要件を満たしやすいと感じました。</p><p>また、今回試して分かったメリット・デメリットを以下の表にまとめました。</p><div class="scroll"><table><thead><tr><th align="left">試した実装方法</th><th align="left">メリット</th><th align="left">デメリット</th></tr></thead><tbody><tr><td align="left">1. <code>fullScreenCover</code>を利用した方法</td><td align="left">画面全体にモーダル表示するため、アラート表示中に他の動作ができないように制限しやすい。</td><td align="left"><code>fullScreenCover</code> は表示時に画面下から上まで覆うアニメーションを伴って表示するため、アニメーションのカスタマイズが難しい。（調べた限りほぼできない。）</td></tr><tr><td align="left">2. <code>overlay</code>を利用した方法</td><td align="left"><code>overlay</code>自体は重ねて表示するだけなので、アニメーションなどをカスタマイズしやすい。</td><td align="left">あくまでも元となるViewに重ねるため、重ねて表示する範囲は呼び出すViewに依存する。</td></tr><tr><td align="left">3. <code>ZStack</code>を利用した方法</td><td align="left">アプリ大元のViewに重ねることで、画面全体を覆って表示制御できる。</td><td align="left">ダイアログ表示を制御するフラグやダイアログに表示する内容を<code>App</code>階層まで伝える必要があるため、単一のView内で状態管理が完結しない。</td></tr></tbody></table></div><p>何かしらの参考になれば幸いです。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><p><a href="https://developer.apple.com/documentation/SwiftUI/View/alert(_:isPresented:actions:)-1bkka">https://developer.apple.com/documentation/SwiftUI/View/alert(_:isPresented:actions:)-1bkka</a></p><p><a href="https://developer.apple.com/documentation/swiftui/view/fullscreencover(ispresented:ondismiss:content:)">https://developer.apple.com/documentation/swiftui/view/fullscreencover(ispresented:ondismiss:content:)</a></p><p><a href="https://developer.apple.com/documentation/swiftui/view/overlay(alignment:content:)">https://developer.apple.com/documentation/swiftui/view/overlay(alignment:content:)</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">医療・ヘルスケア分野での案件や新規ビジネス創出を担う、2020年に誕生した事業部です。設立エピソードは<a href="https://note.future.co.jp/n/n8b57d4bf4604" title="新規事業の立ち上げ　フューチャーの知られざる医療・ヘルスケアへの挑戦">未来報</a>の記事をご覧ください。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://stackoverflow.com/questions/69712759/swiftui-fullscreencover-with-no-animation">SwiftUI: fullScreenCover with no animation?</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。HealthCare Innovation Group(HIG)&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="iOS" scheme="https://future-architect.github.io/tags/iOS/"/>
    
    <category term="Swift" scheme="https://future-architect.github.io/tags/Swift/"/>
    
    <category term="SwiftUI" scheme="https://future-architect.github.io/tags/SwiftUI/"/>
    
    <category term="iPad" scheme="https://future-architect.github.io/tags/iPad/"/>
    
    <category term="iPhone" scheme="https://future-architect.github.io/tags/iPhone/"/>
    
  </entry>
  
  <entry>
    <title>Sentence-Transformersを使ってみた！YouTube動画のセリフを手軽にセマンティック検索</title>
    <link href="https://future-architect.github.io/articles/20230906a/"/>
    <id>https://future-architect.github.io/articles/20230906a/</id>
    <published>2023-09-05T15:00:00.000Z</published>
    <updated>2023-09-06T05:23:23.662Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。フューチャーTIG DXユニット所属の王です。</p><p>本記事は、<a href="/articles/20230830a/">夏の自由研究ブログ連載2023</a>の4本目です。</p><p>今回はテキストの埋め込みエンコーダーを使ってセマンティック検索をおもちゃレベルで簡単に実装する方法を紹介します。分かりやすいように、YouTubeの動画のセリフをコーパスとして使用します。将来的に時間軸のメタ情報も利用したら、検索結果には動画の何分何秒に特定、遷移リンクの生成などもいろいろ面白いことができると思います。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>セマンティック検索を注目するきっかけ</li><li>セマンティック検索とは</li><li>原理<ul><li>埋め込みベクトル(Embedding Vector)</li><li>埋め込みベクトルを使ったセマンティック検索</li></ul></li><li>実装<ul><li>使ったライブラリ</li><li>Semantic Searchの実装</li></ul></li><li>まとめ</li></ul><h2 id="セマンティック検索を注目するきっかけ"><a href="#セマンティック検索を注目するきっかけ" class="headerlink" title="セマンティック検索を注目するきっかけ"></a>セマンティック検索を注目するきっかけ</h2><p>ChatGPTなどの生成AIが大ヒットしている現在、その応用場面は増加しており、自然言語で機械と会話し指示を与えたり情報を引いたりすることは今どきのトレンドになっています。しかし、生成AIを使用する際には、情報の最新性やファクトチェックの不足などの懸念点が存在します。これらの問題を低減するためには、なるべくコンテキストや背景情報など、比較的な高品質のインプットを提供し、生成式AIが得意な情報の抽出、変換、整形などのみ任せるのがうまい使い方でしょう。</p><p>生成AIに１回のクエリでインプットできる情報は限られていますので、事前に関係しそうな情報を粗く抽出するために、公開していないデータや特定のコーパスを使って、自然言語でクエリする際に、セマンティック検索が必要となります。</p><h2 id="セマンティック検索-Semantic-Search-とは"><a href="#セマンティック検索-Semantic-Search-とは" class="headerlink" title="セマンティック検索(Semantic Search)とは"></a>セマンティック検索(Semantic Search)とは</h2><p>最初に、セマンティック検索と典型的なレキシカル検索（語彙検索、字句検索、Lexical Search）を比較します。レキシカル検索は、テキスト内の文字列や単語の表面的な一致に焦点を当てます。特定の文字列や単語がテキスト内に存在するかどうかを確認し、その一致度に基づいて情報を選別します。そのため、同義語や関連語、コンテキストに対応することが難しく、意味的な関連性を欠いた検索結果になり、自然言語のクエリに対する弱点があります。</p><p>一方、セマンティック検索は、キーワードだけでなく、文脈や意味に基づいて情報を検索するアプローチです。関連性やコンテキストを考慮し、より高度な情報検索を実現でき、同義語や関連語、さらに部分的な誤字などにも対応できるため、自然言語のクエリに適しています。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>テキストの埋め込みによってセマンティック検索の原理を簡単に説明します。</p><h3 id="埋め込みベクトル-Embedding-Vector"><a href="#埋め込みベクトル-Embedding-Vector" class="headerlink" title="埋め込みベクトル(Embedding Vector)"></a>埋め込みベクトル(Embedding Vector)</h3><p>コンピュータの世界には、文字だけではなく、画像、音声、動画などすべてのデータは符号化(Encoding)での表現ができます。それと似た思想で、単語、文、段落などを表す「意味」や「関連性」を数値のベクトルの表現で符号化に変換することは「埋め込み」と言います。その変換の条件は、意味が近い原文の変換後の埋め込みベクトルも距離が近いことです。</p><p>そうすることによって、統一化された表現形式「埋め込みベクトル」で「意味」の近さが定量的に表現で切るようになります。もちろん、文に対してベクトルの埋め込みは、深層学習などの技術を使って大量な事前計算が必要ですが、自ら訓練しても良いですし、後述のSentence-Transformerを利用して、公開の事前訓練された公開のモデルを簡単に使用できます。</p><p>ところで、ここの「距離」の定義は、ベクトルのドット積、コサイン類似度、ユークリッド距離など多数の形式はできますが、予め選定したら良いです。計算の簡単さを考慮したら、ユークリッド距離よりドット積、コサイン類似度のほうがよく採用されるでしょう。そしてベクトルを正規化（長さ1に統一する）のテクニックを使ったら、みんな等価になります。</p><p>さらに、もとの情報は文字に限らず、画像や音声、マルチメディアの情報も埋め込みベクトルに変換して数値化にしたら、文字と画像の距離や画像と音声の距離なども測ることが可能になります。画像や音声の類似検索、タグや説明文との紐付けなどいろいろ応用場面が可能になります。</p><h3 id="埋め込みベクトルを使ったセマンティック検索"><a href="#埋め込みベクトルを使ったセマンティック検索" class="headerlink" title="埋め込みベクトルを使ったセマンティック検索"></a>埋め込みベクトルを使ったセマンティック検索</h3><p>余談ですが、RDF (Resource Description Framework) を使用したセマンティック検索もありましたが、高度な事前定義と複雑のアルゴリズムが必要で実装は難しいです。今回ご紹介している埋め込みベクトルの手法は、事前のモデルの訓練での大量な計算でカバーしています。ただし、そのモデルの計算は、車輪の発明のように、大手が1度作ったら、誰でも繰り返して利用できて、恩恵を受けられます。これまで以上にAIの民主化を進めていますね。</p><p>さて、埋め込みベクトルを使ったセマンティック検索の手順を簡単にまとめます。</p><ol><li>事前にデータベースやコーパスの情報を文や段落粒度を分割し、それぞれ高次元(数百から数千次元)のベクトルに埋め込みエンコーディング変換しておきます。</li><li>クエリ文も同様に埋め込みエンコーディングして、ベクトル化して、それと距離が近いものが検索の候補結果になります。</li><li>計算した距離（近似度）がの検索のランキングになります。</li><li>（Optional）そして、検索の動作を高速化するために、事前のコーパスにベクトルによってインデックスをつけることができます。後述のSimple Neighborsはインデックスの構造と高速化検索をやってくれます。</li></ol><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><h3 id="使ったライブラリ"><a href="#使ったライブラリ" class="headerlink" title="使ったライブラリ"></a>使ったライブラリ</h3><p>以下の2つのライブラリを使って実装しています。どれもシンプルなインターフェースを持って使いやすいと思います。</p><h4 id="Sentence-Transformers"><a href="#Sentence-Transformers" class="headerlink" title="Sentence-Transformers"></a>Sentence-Transformers</h4><p><a href="https://sbert.net/">https://sbert.net/</a></p><p>pipを使用して簡単にインストールできます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install sentence-transformers</span><br></pre></td></tr></table></figure><p>Sentence-Transformersは、テキストだけではなく、画像のembeddingも対応できますが、今回はテキストの検索にフォーカスしたいので割愛します。画像の検索の詳細は<a href="https://sbert.net/examples/applications/image-search/README.html">このページ</a>をご参考ください。</p><p>Sentence-Transformersのフレームワークが<a href="https://huggingface.co/sentence-transformers">huggingface</a>で多数のモデルが公開しています（執筆時点124個）。</p><p>モデルの命名について、<code>qa</code>がついているモデルは、(質問、回答) ペアのセットでトレーニングされて、セマンティック検索用です。つまり、クエリ&#x2F;質問が与えられた場合、関連する文章を見つける用途です。そして、<code>multi</code>がついているモデルは、多言語対応のモデルです。違う言語のインプットであっても、意味が似たものなら埋め込みベクトルの距離が近いようにエンコーディングしてくれます。ちなみに、最初から多言語のデータを使わず、例えばまずは英語で訓練して、そのモデルを教師モデルとして利用し、更に多言語に拡張する手法もあるらしく、興味深いです。</p><h4 id="Simple-Neighbors"><a href="#Simple-Neighbors" class="headerlink" title="Simple Neighbors"></a>Simple Neighbors</h4><p><a href="https://simpleneighbors.readthedocs.io/en/latest/">https://simpleneighbors.readthedocs.io/en/latest/</a></p><p>コーパスの項目に対して最近傍検索を実行するための簡単なインターフェイスです。<br><code>Annoy</code>、<code>Sklearn</code>、<code>BruteForcePurePython</code>の3つのバックエンドをサポートしていますが、<code>Annoy</code>が推奨していますので、それも一緒にインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install simpleneighbors annoy</span><br></pre></td></tr></table></figure><p>高速に検索するため、事前にindexのツリーをビルドする必要があります。つまり、検索対象のデータを増加したら、改めてツイリーのビルドが必要という点に要注意です。</p><p>また、N-Neighborを探す結果は近似的な結果になることにもご注意ください。とはいえ、訓練のモデルから検索結果の精度はすべて有限であるので、近似と言っても十分な精度が保証できていると思います。（参考: <a href="https://en.wikipedia.org/wiki/Nearest_neighbor_search#Approximate_nearest_neighbor">Approximate Nearest Neighbors</a>）</p><h3 id="Semantic-Searchの実装"><a href="#Semantic-Searchの実装" class="headerlink" title="Semantic Searchの実装"></a>Semantic Searchの実装</h3><p>今回はこのドキュメントを参考して、実装してみました。</p><p><a href="https://www.sbert.net/examples/applications/semantic-search/README.html">https://www.sbert.net/examples/applications/semantic-search/README.html</a></p><p>まずは、<a href="https://www.youtube.com/watch?v=9tSEByUy47o&ab_channel=FUTURERecruiting/%E3%83%95%E3%83%A5%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E6%A0%AA%E5%BC%8F%E4%BC%9A%E7%A4%BE">フューチャーの会社紹介ページ</a>のYouTube動画のセリフを<code>corpus/future.txt</code>ファイルに保存します。今回は手動で前処理として文と文の間に改行で区切りました。<br>（<em>※YouTubeから自動生成のセリフで誤字などが入っています。一旦無視します。<br>ただし、「フューチャー」が「Qちゃん」になっているのはみっともないので手修正を加えました。</em>）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">皆さん、こんにちは。</span><br><span class="line">フューチャーのWebセミナーにアクセスいただき、ありがとうございます。</span><br><span class="line">この動画ではフューチャーの会社概要とビジネスについてご紹介します。</span><br><span class="line">早速、会社概要からご紹介します。</span><br><span class="line">フューチャーは1989年にエンジニアが立ち上げたITコンサルティング企業です。</span><br><span class="line">創業時から、ITでビジネスを牽引することをコンセプトに掲げ、いわゆるDXにあたることを推進してきました。</span><br><span class="line">また、店頭公開時には日本で初めてITコンサルティング業として事業登録をされたのもフューチャーです。</span><br><span class="line">日本初のITコンサルティング企業であり、DXを30年以上推進してきた会社と覚えていただければと思います。</span><br><span class="line">業績も昨年は過去最高を更新するなど非常に順調です。</span><br><span class="line">次に、私たちが大切にしている考え方、Our Philosophyをご紹介します。</span><br><span class="line">「本質を見極める」、「大義を問う」、「初めてに挑戦する」、「難題を楽しむ」、「ないものはつくる」。</span><br><span class="line">例えば、創業当社から他の会社がなかなか手がけないような案件であったり、難しい案件に積極的にチャレンジしてきましたので、初めてに挑戦する難題を楽しむであったり、エンジニアニメが作り上げた会社というところもあり、ないものは何でも自分たちで作ってしまおう、そういったカルチャーも深く浸透しています。</span><br><span class="line">続いて、フューチャーのミッションを紹介します。</span><br><span class="line">お客様の未来活用を最大化し、自らも新たな価値を創造する。</span><br><span class="line">フューチャーグループには大きく2つの事業体があります。</span><br><span class="line">1つは、ITコンサルティング&amp;サービス事業です。</span><br><span class="line">こちらはお客様向けの課題解決をしていく事業群で、フューチャーアーキテクトがコアカンパニーとして、ITコンサルティングを牽引しています。</span><br><span class="line">もう一つはビジネスイノベーション事業です。</span><br><span class="line">こちらはこれまでのノウハウを生かして、自社でサービスを立ち上げようというもので、まさにお客様の未来活用を最大化するITコンサルティングと、自分たちでも新たな価値を創造していく両軸で事業を展開しています。</span><br><span class="line">ここからはフューチャーのビジネスについてご紹介します。</span><br><span class="line">フューチャーのお客様は、様々な業界そしてそれぞれの業界を代表するような企業様です。</span><br><span class="line">私たちは、私たちの強みであるITを用いて、それぞれのお客様の経営課題を解決したり、あるいはお客様と一緒に業界改革をIP戦略パートナーとしてになっています。</span><br><span class="line">私たちのビジネスの特徴をご紹介します。</span><br><span class="line">創業当初から、お客様の経営戦略、それを達成するための業務改革、そしてそれを支えているシステム改革。</span><br><span class="line">これらを三位一体で捉えてプロジェクトを推進してきました。</span><br><span class="line">昨今、DXと盛んに叫ばれるようになりましたが、私たちフューチャーは経営と業務、そしてその裏にあるシステムは切っても切り離せないものだと創業当初から考えて、それらを三位一体で捉えて推進するということを30年以上続けてきました。</span><br><span class="line">さらに詳細にビジネスの流れや他社との違いについてご紹介します。</span><br><span class="line">プロジェクトはどんな未来を描くのか、戦略を立て、計画に落として、その計画に則ってシステム的に具現化し、出来上がったシステムが価値を創造するという流れが一般的です。</span><br><span class="line">プロジェクトの推進体制で見てみると、一般的には得意な領域ごとに会社が複数社にまたがって行っているケースが多いです。</span><br><span class="line">例えば、未来を描くところはコンサル系の企業様が行って、具現化していくところはSIer系の企業様が行ってといった形です。</span><br><span class="line">あるいは、一つの会社であるけれど、コンサルタントとエンジニアのように職種が分かれているケースも多いかなと思います。</span><br><span class="line">では、フューチャーはどうかと言いますと、フィーチャーは図の通り、戦略からシステム構築運用まで一気通貫でになっています。</span><br><span class="line">また、職種もITコンサルタント職一触者です。</span><br><span class="line">戦略を立てるコンサルタントとしての部分と、システムを構築していくエンジニアとしての部分、どちらも一人一人のITコンサルタントが担っています。</span><br><span class="line">ソースコードレベルで相手を理解しているITコンサルタントが担うからこそ、絵に描いた餅で終わるというのではなくて、しっかりと価値を想像するところまで伴走できる。</span><br><span class="line">そしてそれを30年以上続けてきたというのはなかなか他の会社には簡単に真似できないフューチャーならではの強みになっています。</span><br><span class="line">また、皆さんのキャリアというのを考えてみていただいても、コンサルタントとエンジニア、どちらも一つの会社で経験できるというのはキャリアの幅が広がり、市場価値の高い人材に成長できると思っていただけると思います。</span><br><span class="line">最後に、フューチャーのことをもっと知りたい方に各種メディアをご紹介します。</span><br><span class="line">フューチャーのオウンドメディア未来報では、フューチャーの人に焦点を当ててキャリアやカルチャーをご紹介しています。</span><br><span class="line">フューチャーが大切にしている技術についてもっと深く知りたい方は、テックブログやテックキャストがおすすめです。</span><br><span class="line">最後までご覧いただき、ありがとうございます。</span><br><span class="line">皆さんと選考でお会いできることを楽しみにしております。</span><br></pre></td></tr></table></figure><p>今回は<a href="https://www.sbert.net/docs/pretrained_models.html">このページ</a>に紹介したモデルの中に、multi言語対応のモデルをピックアップし、予めメタデータとして用意します。モデル名<code>name</code>、ベクトルの次元<code>dims</code>、距離関数<code>metric</code>の属性を定義します。方便上、名前でモデルを引く関数<code>find_model_with_name</code>も定義します。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">models = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># Multi-lingual model of Universal Sentence Encoder for 15 languages:</span></span><br><span class="line">        <span class="comment"># Arabic, Chinese, Dutch, English, French, German, Italian, Korean, Polish, Portuguese, Russian, Spanish, Turkish.</span></span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;distiluse-base-multilingual-cased-v1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dims&quot;</span>: <span class="number">512</span>,</span><br><span class="line">        <span class="string">&quot;metric&quot;</span>: <span class="string">&quot;angular&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># Multi-lingual model of Universal Sentence Encoder for 50 languages.</span></span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;distiluse-base-multilingual-cased-v2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dims&quot;</span>: <span class="number">512</span>,</span><br><span class="line">        <span class="string">&quot;metric&quot;</span>: <span class="string">&quot;angular&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># Multi-lingual model of paraphrase-multilingual-MiniLM-L12-v2, extended to 50+ languages.</span></span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;paraphrase-multilingual-MiniLM-L12-v2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dims&quot;</span>: <span class="number">384</span>,</span><br><span class="line">        <span class="string">&quot;metric&quot;</span>: <span class="string">&quot;angular&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># Multi-lingual model of paraphrase-mpnet-base-v2, extended to 50+ languages.</span></span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;paraphrase-multilingual-mpnet-base-v2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dims&quot;</span>: <span class="number">768</span>,</span><br><span class="line">        <span class="string">&quot;metric&quot;</span>: <span class="string">&quot;angular&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># This model was tuned for semantic search:</span></span><br><span class="line">        <span class="comment"># Given a query/question, if can find relevant passages.</span></span><br><span class="line">        <span class="comment"># It was trained on a large and diverse set of (question, answer) pairs.</span></span><br><span class="line">        <span class="comment"># 215M (question, answer) pairs from diverse sources.</span></span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;multi-qa-mpnet-base-dot-v1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dims&quot;</span>: <span class="number">768</span>,</span><br><span class="line">        <span class="string">&quot;metric&quot;</span>: <span class="string">&quot;dot&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># This model was tuned for semantic search:</span></span><br><span class="line">        <span class="comment"># Given a query/question, if can find relevant passages.</span></span><br><span class="line">        <span class="comment"># It was trained on a large and diverse set of (question, answer) pairs.</span></span><br><span class="line">        <span class="comment"># 215M (question, answer) pairs from diverse sources.</span></span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;multi-qa-mpnet-base-cos-v1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dims&quot;</span>: <span class="number">768</span>,</span><br><span class="line">        <span class="string">&quot;metric&quot;</span>: <span class="string">&quot;angular&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_model_with_name</span>(<span class="params">models, name</span>):</span><br><span class="line">    <span class="keyword">for</span> model <span class="keyword">in</span> models:</span><br><span class="line">        <span class="keyword">if</span> model[<span class="string">&quot;name&quot;</span>] == name:</span><br><span class="line">            <span class="keyword">return</span> model</span><br><span class="line">    <span class="keyword">raise</span> NameError(<span class="string">f&quot;Could not find model <span class="subst">&#123;name&#125;</span>.&quot;</span>)</span><br></pre></td></tr></table></figure><p>以下はSemanticSearchクラスでシンプルにベーシックな機能（モデルを読み込み、corpusの読み込み、エンコードして文をベクトル化すし、vector tree indexのビルド、そして、N個の最近傍探索）を実装します。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sentence_transformers <span class="keyword">import</span> SentenceTransformer, util</span><br><span class="line"><span class="keyword">from</span> simpleneighbors <span class="keyword">import</span> SimpleNeighbors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SemanticSearch</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model</span>):</span><br><span class="line">        self.encoder = SentenceTransformer(model[<span class="string">&quot;name&quot;</span>])</span><br><span class="line">        self.index = SimpleNeighbors(model[<span class="string">&quot;dims&quot;</span>], model[<span class="string">&quot;metric&quot;</span>])</span><br><span class="line">        <span class="keyword">if</span> model[<span class="string">&quot;metric&quot;</span>] == <span class="string">&quot;angular&quot;</span>:</span><br><span class="line">            self.metric_func = util.cos_sim</span><br><span class="line">        <span class="keyword">elif</span> model[<span class="string">&quot;metric&quot;</span>] == <span class="string">&quot;dot&quot;</span>:</span><br><span class="line">            self.metric_func = util.dot_score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_corpus</span>(<span class="params">self, filename</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;corpus/<span class="subst">&#123;filename&#125;</span>&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.feed(f.read().split(<span class="string">&quot;\n&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">feed</span>(<span class="params">self, sentences</span>):</span><br><span class="line">        <span class="keyword">for</span> sentence <span class="keyword">in</span> sentences:</span><br><span class="line">            vector = self.encoder.encode(sentence)</span><br><span class="line">            self.index.add_one(sentence, vector)</span><br><span class="line">        self.index.build()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_nearest</span>(<span class="params">self, query, n=<span class="number">5</span></span>):</span><br><span class="line">        vector = self.encoder.encode(query)</span><br><span class="line">        nearests = self.index.nearest(vector, n)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> neighbor <span class="keyword">in</span> nearests:</span><br><span class="line">            dist = self.metric_func(vector, self.index.vec(neighbor))</span><br><span class="line">            res.append((neighbor, <span class="built_in">float</span>(dist)))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>早速、クエリを投げてみます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    model = find_model_with_name(</span><br><span class="line">        models, <span class="string">&quot;distiluse-base-multilingual-cased-v2&quot;</span>)</span><br><span class="line">    ss = SemanticSearch(model)</span><br><span class="line">    ss.load_corpus(<span class="string">&quot;future.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    res = ss.find_nearest(<span class="string">&quot;フューチャーはいつ創立されましたか。&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">        <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><p><strong>出力結果1</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;フューチャーは1989年にエンジニアが立ち上げたITコンサルティング企業です。&#x27;, 0.2547425627708435)</span><br><span class="line">(&#x27;では、フューチャーはどうかと言いますと、フィーチャーは図の通り、戦略からシステム構築運用まで一気通貫でになっています。&#x27;, 0.19687587022781372)</span><br><span class="line">(&#x27;創業時から、ITでビジネスを牽引することをコンセプトに掲げ、いわゆるDXにあたることを推進してきました。&#x27;, 0.1668681502342224)</span><br><span class="line">(&#x27;フューチャーグループには大きく2つの事業体があります。&#x27;, 0.164341002702713)</span><br><span class="line">(&#x27;昨今、DXと盛んに叫ばれるようになりましたが、私たちフューチャーは経営と業務、そしてその裏にあるシステムは切っても切り離せないものだと創業当初から考えて、それらを三位一体で捉えて推進するということを30年以上続けてきました。&#x27;, 0.16331210732460022)</span><br></pre></td></tr></table></figure><p>文章に「創立」などのキーワードが登場していないですけど、1個目近似度高い文（時間に関して述べているからかもしれません）がうまくヒットしています。</p><p>今度は他のモデルでやってみます。<br>モデル：<code>paraphrase-multilingual-MiniLM-L12-v2</code><br>クエリ：<code>フューチャーはいつ創立されましたか。</code><br><strong>出力結果2</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;昨今、DXと盛んに叫ばれるようになりましたが、私たちフューチャーは経営と業務、そしてその裏にあるシステムは切っても切り離せないものだと創業当初から考えて、それらを三位一体で捉えて推進するということを30年以上続けてきました。&#x27;, 0.45087340474128723)</span><br><span class="line">(&#x27;日本初のITコンサルティング企業であり、DXを30年以上推進してきた会社と覚えていただければと思います。&#x27;, 0.3921096622943878)</span><br><span class="line">(&#x27;フューチャーは1989年にエンジニアが立ち上げたITコンサルティング企業です。&#x27;, 0.36329418420791626)</span><br><span class="line">(&#x27;創業当初から、お客様の経営戦略、それを達成するための業務改革、そしてそれを支えているシステム改革。&#x27;, 0.3592120409011841)</span><br><span class="line">(&#x27;創業時から、ITでビジネスを牽引することをコンセプトに掲げ、いわゆるDXにあたることを推進してきました。&#x27;, 0.35177189111709595)</span><br></pre></td></tr></table></figure><p>結果が変わりましたが、「昨今」や「創業」や「30年」が含まれた文はトップになっています。まあまあ許容できる結果でしょう。</p><p>他の質問とモデルでもやってみます。</p><p>モデル：<code>paraphrase-multilingual-MiniLM-L12-v2</code><br>クエリ：<code>未来報はなんですか。</code></p><p><strong>出力結果3</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;フューチャーのオウンドメディア未来報では、フューチャーの人に焦点を当ててキャリアやカルチャーをご紹介しています。&#x27;, 0.5177506804466248)</span><br><span class="line">(&#x27;最後に、フューチャーのことをもっと知りたい方に各種メディアをご紹介します。&#x27;, 0.44624844193458557)</span><br><span class="line">(&#x27;プロジェクトはどんな未来を描くのか、戦略を立て、計画に落として、その計画に則ってシステム的に具現化し、出来上がったシステムが価値を創造するという流れが一般的です。&#x27;, 0.4249690771102905)</span><br><span class="line">(&#x27;例えば、未来を描くところはコンサル系の企業様が行って、具現化していくところはSIer系の企業様が行ってといった形です。&#x27;, 0.40904152393341064)</span><br><span class="line">(&#x27;次に、私たちが大切にしている考え方、Our&#x27;, 0.40697067975997925)</span><br></pre></td></tr></table></figure><p>モデル：<code>multi-qa-mpnet-base-dot-v1</code><br>クエリ：<code>長所はなに</code></p><p><strong>出力結果4</strong></p><p>（<em>※このモデルは、他のコサイン類似度とは違ってドット積で距離を評価しているので、1以上の距離結果がありうる</em>）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;そしてそれを30年以上続けてきたというのはなかなか他の会社には簡単に真似できないフューチャーならではの強みになっています。&#x27;, 18.705921173095703)</span><br><span class="line">(&#x27;さらに詳細にビジネスの流れや他社との違いについてご紹介します。&#x27;, 18.43102264404297)</span><br><span class="line">(&#x27;皆さん、こんにちは。&#x27;, 16.867801666259766)</span><br><span class="line">(&#x27;業績も昨年は過去最高を更新するなど非常に順調です。&#x27;, 16.38519287109375)</span><br><span class="line">(&#x27;お客様の未来活用を最大化し、自らも新たな価値を創造する。&#x27;, 15.685336112976074)</span><br></pre></td></tr></table></figure><p>今度は、英語のコーパスを利用して、日本語で質問してみます。<br>HuggingFace出品の「Text embeddings &amp; semantic search」を紹介する<a href="https://www.youtube.com/watch?v=OATCgQtNX2o&ab_channel=HuggingFace">このビデオ</a>のセリフを引っ張ってきます。<code>corpus/semantic_search.txt</code>に保存します。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Text embeddings and semantic search.</span><br><span class="line">In this video we’ll explore how Transformer models represent text as embedding vectors and how these vectors can be used to find similar documents in a corpus.</span><br><span class="line">Text embeddings are just a fancy way of saying that we can represent text as an array of numbers called a vector.</span><br><span class="line">To create these embeddings we usually use an encoder-based model like BERT.</span><br><span class="line">In this example, you can see how we feed three sentences to the encoder and get three vectors as the output.</span><br><span class="line">Reading the text, we can see that walking the dog seems to be most similar to walking the cat, but let&#x27;s see if we can quantify this.</span><br><span class="line">The trick to do the comparison is to compute a similarity metric between each pair of embedding vectors.</span><br><span class="line">These vectors usually live in a high-dimensional space, so a similarity metric can be anything that measures some sort of distance between vectors.</span><br><span class="line">One popular metric is cosine similarity, which uses the angle between two vectors to measure how close they are.</span><br><span class="line">In this example, our embedding vectors live in 3D and we can see that the orange and grey vectors are close to each other and have a smaller angle.</span><br><span class="line">Now one problem we have to deal with is that Transformer models like BERT will actually return one embedding vector per token.</span><br><span class="line">For example in the sentence &quot;I took my dog for a walk&quot;, we can expect several embedding vectors, one for each word.</span><br><span class="line">For example, here we can see the output of our model has produced 9 embedding vectors per sentence, and each vector has 384 dimensions.</span><br><span class="line">But what we really want is a single embedding vector for the whole sentence.</span><br><span class="line">To deal with this, we can use a technique called pooling.</span><br><span class="line">The simplest pooling method is to just take the token embedding of the CLS token.</span><br><span class="line">Alternatively, we can average the token embeddings which is called mean pooling.</span><br><span class="line">With mean pooling only thing we need to make sure is that we don&#x27;t include the padding tokens in the average, which is why you can see the attention mask being used here.</span><br><span class="line">This now gives us one 384 dimensional vector per sentence which is exactly what we want.</span><br><span class="line">And once we have our sentence embeddings, we can compute the cosine similarity for each pair of vectors.</span><br><span class="line">In this example we use the function from scikit-learn and you can see that the sentence &quot;I took my dog for a walk&quot; has an overlap of 0.83 with &quot;I took my cat for a walk&quot;. Hooray.</span><br><span class="line">We can take this idea one step further by comparing the similarity between a question and a corpus of documents.</span><br><span class="line">For example, suppose we embed every post in the Hugging Face forums.</span><br><span class="line">We can then ask a question, embed it, and check which forum posts are most similar.</span><br><span class="line">This process is often called semantic search, because it allows us to compare queries with context.</span><br><span class="line">To create a semantic search engine is quite simple in Datasets.</span><br><span class="line">First we need to embed all the documents.</span><br><span class="line">In this example, we take a small sample from the SQUAD dataset and apply the same embedding logic as before.</span><br><span class="line">This gives us a new column called &quot;embeddings&quot; that stores the embedding of every passage.</span><br><span class="line">Once we have our embeddings, we need a way to find nearest neighbours to a query.</span><br><span class="line">Datasets provides a special object called a FAISS index that allows you to quickly compare embedding vectors.</span><br><span class="line">So we add the FAISS index, embed a question and voila. we&#x27;ve now found the 3 most similar articles which might store the answer.</span><br></pre></td></tr></table></figure><p>同じように、それをロードして、日本語のクエリで投げてみます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    model = find_model_with_name(</span><br><span class="line">        models, <span class="string">&quot;paraphrase-multilingual-MiniLM-L12-v2&quot;</span>)</span><br><span class="line">    ss = SemanticSearch(model)</span><br><span class="line">    ss.load_corpus(<span class="string">&quot;semantic_search.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    res = ss.find_nearest(<span class="string">&quot;埋め込みベクトルでのエンコーディングについて、どんなモデルを使えますか&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">        <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><p><strong>出力結果5</strong></p><p>それなりにいい感じにヒットできていますね。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;To create these embeddings we usually use an encoder-based model like BERT.&#x27;, 0.6005619764328003)</span><br><span class="line">(&#x27;In this video we’ll explore how Transformer models represent text as embedding vectors and how these vectors can be used to find similar documents in a corpus.&#x27;, 0.5864262580871582)</span><br><span class="line">(&#x27;For example, here we can see the output of our model has produced 9 embedding vectors per sentence, and each vector has 384 dimensions.&#x27;, 0.5198760032653809)</span><br><span class="line">(&#x27;In this example, we take a small sample from the SQUAD dataset and apply the same embedding logic as before.&#x27;, 0.4749892055988312)</span><br><span class="line">(&#x27;In this example, our embedding vectors live in 3D and we can see that the orange and grey vectors are close to each other and have a smaller angle.&#x27;, 0.46906405687332153)</span><br></pre></td></tr></table></figure><p>モデル：<code>distiluse-base-multilingual-cased-v1</code><br>クエリ：<code>セマンティック検索には、どんなテクニックが使えるか</code></p><p><strong>出力結果6</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;Text embeddings and semantic search.&#x27;, 0.3169878125190735)</span><br><span class="line">(&#x27;To create a semantic search engine is quite simple in Datasets.&#x27;, 0.22516131401062012)</span><br><span class="line">(&#x27;To deal with this, we can use a technique called pooling.&#x27;, 0.19742435216903687)</span><br><span class="line">(&#x27;This process is often called semantic search, because it allows us to compare queries with context.&#x27;, 0.1717163324356079)</span><br><span class="line">(&#x27;Once we have our embeddings, we need a way to find nearest neighbours to a query.&#x27;, 0.1544724851846695)</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、セマンティック検索の概念や原理を簡単に説明しました。そして埋め込みベクトルの実装をシンプルに実現してデモしました。言語問わずにクエリを投げて、そこそこの精度の検索ランキングの結果が得ました。</p><p>AIの民主化が発展している現在、いろいろの技術のハードルが下がってきて、中小企業や一般の人々にも簡単に利用・導入可能になり、そのオポテュニティーをうまく掴める組織と人間こそ未来の勝者になるでしょう。</p><p>では、ようこそ〜　Futureへ！</p><img src="/images/20230906a/Future_Search_Semantic_HighTech.jpg" alt="Future_Search_Semantic_HighTech.jpg" width="768" height="768" loading="lazy">*Image Generated by leonardo.ai*]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。フューチャーTIG DXユニット所属の王です。&lt;/p&gt;
&lt;p&gt;本記事は、&lt;a</summary>
        
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="ChatGPT" scheme="https://future-architect.github.io/tags/ChatGPT/"/>
    
    <category term="AI" scheme="https://future-architect.github.io/tags/AI/"/>
    
    <category term="SemanticSearch" scheme="https://future-architect.github.io/tags/SemanticSearch/"/>
    
    <category term="embedding" scheme="https://future-architect.github.io/tags/embedding/"/>
    
    <category term="SentenceTransformers" scheme="https://future-architect.github.io/tags/SentenceTransformers/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry PiからArduinoに接続したLCDに文字を表示する</title>
    <link href="https://future-architect.github.io/articles/20230905a/"/>
    <id>https://future-architect.github.io/articles/20230905a/</id>
    <published>2023-09-04T15:00:00.000Z</published>
    <updated>2023-09-05T02:14:28.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>初めまして。製造（PLMソリューション）所属&#x2F;九州在住　の水田です。</p><p>夏の自由研究連載2023の第3弾の方を執筆させていただきます。</p><p>今回が技術ブログ初投稿になります。不慣れな部分もありますが、なるべく分かりやすく書くように心がけていますので、最後までお付き合いください。</p><h2 id="研究テーマについて"><a href="#研究テーマについて" class="headerlink" title="研究テーマについて"></a>研究テーマについて</h2><p>漠然と</p><ul><li>ArduinoやRaspberry Piを触ってみたい</li><li>ArduinoにWebサーバを構築してみたい</li></ul><p>…と思ったので<strong>Raspberry Piに立てたWebサーバのブラウザから好きな文字列を入力してArduinoに接続したLCDに表示する</strong> までをやっていきます。</p><p>最終的には、在宅勤務している部屋のドアに設置して、スマホ経由でブラウザにアクセスして会議中であることを表示できればいいなとか考えています。</p><p>あと、色々とハマったのでその辺りも書いておこうかと思います。</p><p>※長くなるのでRaspberry PiやArduinoの基本的な部分の話は、割愛しています。</p><h2 id="構成-予定"><a href="#構成-予定" class="headerlink" title="構成(予定)"></a>構成(予定)</h2><p>最終的に以下の図のような構成を予定しています。</p><img src="/images/20230905a/image.png" alt="" width="987" height="197" loading="lazy"><h2 id="Arduino→LCDへの表示"><a href="#Arduino→LCDへの表示" class="headerlink" title="Arduino→LCDへの表示"></a>Arduino→LCDへの表示</h2><p>まずは、LCDに任意の文字列を表示してみます。</p><h3 id="使用するArduinoについて"><a href="#使用するArduinoについて" class="headerlink" title="使用するArduinoについて"></a>使用するArduinoについて</h3><p>家にあるArduinoを使おうとしたのですが、どのLCDを買えばよいのかがよく分からなかったので、新しくスターターキットを購入しました。値段の割に基本的なセンサー類からLCDやコントローラーまでついている上にサンプルコードまでついていて分かりやすいです。</p><p><a href="https://www.amazon.co.jp/dp/B06XF2HZGT/ref=as_sl_pc_qf_sp_asin_til?tag=amazon0b2-22&linkCode=w00&linkId=e5061d4d72ecf8efbd042e6417de9ad3&creativeASIN=B06XF2HZGT">ELEGOO Arduino用UNO R3スターターキット レベルアップ チュートリアル付 mega2560 r3 nanoと互換 [並行輸入品] </a></p><p>以下、実際につないで動かしてみた画像と使用したソースコードです。</p><img src="/images/20230905a/lcd.jpg" alt="" width="1200" height="900" loading="lazy"><figure class="highlight cpp"><figcaption><span>Arduino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LCDを使用するためのライブラリをインクルード</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;LiquidCrystal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Arduinoから出力するPin番号とLCDのPin番号との対応を定義</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> rs = <span class="number">7</span>, en = <span class="number">8</span>, d4 = <span class="number">9</span>, d5 = <span class="number">10</span>, d6 = <span class="number">11</span>, d7 = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LCDの初期化（使用するPin番号の指定）</span></span><br><span class="line"><span class="function">LiquidCrystal <span class="title">lcd</span><span class="params">(rs, en, d4, d5, d6, d7)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  lcd.<span class="built_in">begin</span>(<span class="number">16</span>, <span class="number">2</span>);             <span class="comment">// 桁数と行数の指定</span></span><br><span class="line">  lcd.<span class="built_in">clear</span>();                  <span class="comment">// 画面のクリア</span></span><br><span class="line">  lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">0</span>);          <span class="comment">// カーソル位置の指定（1行目の1文字目に設定）</span></span><br><span class="line">  lcd.<span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>);   <span class="comment">// 文字出力</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);          <span class="comment">// カーソル位置の指定（2行目の1文字目に設定）</span></span><br><span class="line">  lcd.<span class="built_in">print</span>(<span class="built_in">millis</span>() / <span class="number">1000</span>);   <span class="comment">// 文字出力</span></span><br><span class="line">  lcd.<span class="built_in">print</span>(<span class="string">&quot; [sec]&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>以下の理由で少しハマりました。ハードウェアは原因の特定が難しい、、、<br></p><ul><li>可変抵抗の初期不良なのかブレッドボードにうまく刺さらない為、LCDのコントラストがうまく調整できず文字が表示できなかった。→可変にする必要もないので固定抵抗で対応<br></li><li>LCDもブレッドボードにちゃんと刺さらないので、出力されなかったり文字化けが発生したりした</li></ul></div><h2 id="Raspberry-Pi-の準備"><a href="#Raspberry-Pi-の準備" class="headerlink" title="Raspberry Pi の準備"></a>Raspberry Pi の準備</h2><p>Raspberry Piについては、昔購入したModel Bを使用。OSの状態とか覚えていないので、まずは付属のSDカードよりRaspian（wheezy）を再インストール＆以下の作業を実施</p><ul><li>packageの更新</li><li>python3とpipの更新</li><li>pyserial（＝シリアル通信で使用するpythonモジュール）のインストール</li></ul><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>wheezyはサポートが切れているので、新しいバージョン（BusterとかBullseeye）にしたかったのですがRaspberry Pi Imagerを使用して書き込むとOSが全然立ち上がってくれない為、諦めてwheezyでやっています。</p></div><h3 id="packageの更新"><a href="#packageの更新" class="headerlink" title="packageの更新"></a>packageの更新</h3><p>apt-getがうまく動かなかったので苦労しました。</p><p>色々と調べてみるとapt-getでパッケージを更新する際に使用するミラーサイトのURLが古いのが原因だったみたいです。以下に記載があるURLを最新のURLに書き換えて対応しました。</p><ul><li>&#x2F;etc&#x2F;apt&#x2F;sources.list</li><li>&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;collabora.list</li></ul><h3 id="python3とpipの更新"><a href="#python3とpipの更新" class="headerlink" title="python3とpipの更新"></a>python3とpipの更新</h3><p>apt-getでインストールしようとするとエラーになるのでこっちも苦労しました。色々と調べた結果、pyenvを使用してインストールするとうまくいきました。</p><h3 id="pyserial（＝シリアル通信で使用するpythonモジュール）のインストール"><a href="#pyserial（＝シリアル通信で使用するpythonモジュール）のインストール" class="headerlink" title="pyserial（＝シリアル通信で使用するpythonモジュール）のインストール"></a>pyserial（＝シリアル通信で使用するpythonモジュール）のインストール</h3><p>pipでインストールしたらすぐに終わりました。</p><h2 id="Raspberry-Pi-→Arduinoへシリアル通信"><a href="#Raspberry-Pi-→Arduinoへシリアル通信" class="headerlink" title="Raspberry Pi →Arduinoへシリアル通信"></a>Raspberry Pi →Arduinoへシリアル通信</h2><p>Raspberry PiとArduinoの準備が大体整ったので試しにシリアル通信を行ってみます。<br>以下のような文字列送信用のPythonを用意します。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>ser.open()時にPermissionエラーが出た場合は、portに指定しているポートに対して権限を付与すれば大丈夫です。<br>例）sudo chmod 666 &#x2F;dev&#x2F;ttyACM0</p></div><figure class="highlight python"><figcaption><span>Raspberry Pi（送信側）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"></span><br><span class="line">ser = serial.Serial()</span><br><span class="line">ser.port = <span class="string">&#x27;/dev/ttyACM0&#x27;</span></span><br><span class="line">ser.baundrate = <span class="number">9600</span></span><br><span class="line">ser.<span class="built_in">open</span>()</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;NOW MEETING...  16:30 - 17:30&#x27;</span></span><br><span class="line">ser.write(data.encode())</span><br><span class="line">ser.close()</span><br></pre></td></tr></table></figure><p>Arduino側は、上記コードを以下のように書き換えます。なお、送られてくる文字列は1文字目～16文字目までを1行目に、17文字目～32文字目までを2行目に出す想定にしています</p><figure class="highlight cpp"><figcaption><span>Arduino（受信側）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LCDを使用するためのライブラリをインクルード</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;LiquidCrystal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Arduinoから出力するPin番号とLCDのPin番号との対応を定義</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> rs = <span class="number">7</span>, en = <span class="number">8</span>, d4 = <span class="number">9</span>, d5 = <span class="number">10</span>, d6 = <span class="number">11</span>, d7 = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LCDの初期化（使用するPin番号の指定）</span></span><br><span class="line"><span class="function">LiquidCrystal <span class="title">lcd</span><span class="params">(rs, en, d4, d5, d6, d7)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  lcd.<span class="built_in">begin</span>(<span class="number">16</span>, <span class="number">2</span>);             <span class="comment">// 桁数と行数の指定</span></span><br><span class="line">  lcd.<span class="built_in">clear</span>();                  <span class="comment">// 画面のクリア</span></span><br><span class="line">  lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">0</span>);          <span class="comment">// カーソル位置の指定（1行目の1文字目に設定）</span></span><br><span class="line">  lcd.<span class="built_in">print</span>(<span class="string">&quot;INPUT...OK&quot;</span>);      <span class="comment">// 文字出力</span></span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);           <span class="comment">// ボーレートの設定</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Serial.<span class="built_in">available</span>())                         <span class="comment">// シリアル通信が有効かどうかの確認</span></span><br><span class="line">  &#123;</span><br><span class="line">    String input = Serial.<span class="built_in">readString</span>();           <span class="comment">// 文字列取得</span></span><br><span class="line">    lcd.<span class="built_in">clear</span>();                                  <span class="comment">// 画面のクリア</span></span><br><span class="line">    lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">0</span>);                          <span class="comment">// カーソル位置の指定（1行目の1文字目に設定）</span></span><br><span class="line">    lcd.<span class="built_in">print</span>(input);                             <span class="comment">// 文字出力</span></span><br><span class="line"></span><br><span class="line">    String input2 = <span class="built_in">String</span>(input.<span class="built_in">substring</span>(<span class="number">16</span>));  <span class="comment">// 文字列の後半部分を抜き出し</span></span><br><span class="line">    lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);                          <span class="comment">// カーソル位置の指定（2行目の1文字目に設定）</span></span><br><span class="line">    lcd.<span class="built_in">print</span>(input2);                            <span class="comment">// 文字出力</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下、結果です。<br><img src="/images/20230905a/2.jpg" alt="" width="1200" height="1600" loading="lazy"></p><h3 id="うまくいっているように見えますが"><a href="#うまくいっているように見えますが" class="headerlink" title="うまくいっているように見えますが"></a>うまくいっているように見えますが</h3><p>実は、うまくいっていないんです。。。笑</p><p>具体的に書くと</p><ul><li>上記Pythonファイルを叩いても、LCDが点滅するだけ</li><li>Pythonファイルの内容をPython3のコマンドラインに張り付けて実行<br>→LCDに表示される（上記は、この時の写真となります）</li></ul><p>調べてみると、Arduino Unoには「USB経由でシリアル通信した場合にDTR端子の状態がLOWであればリセットがかかる」仕様があるらしくこれが原因でLCDがリセットされているようです。DTR端子をHIGHにすればよいのでは？とは思うので設定してみてはいるのですがなぜかうまくいかない。</p><h3 id="仮説"><a href="#仮説" class="headerlink" title="仮説"></a>仮説</h3><p>open()後にsleepを入れるとうまくいくのでは？という仮説が出てきました。<br>ファイル実行では、open→writeまでの処理に間が無いので、open処理完了→DTRリセット処理　のリセット中に書き込みを行っていてうまくいっていないような気がしてきました。</p><p>コマンドライン実行では、ser.open()→数秒後にser.writeを実行という流れなので、数秒の間にリセット処理が完了→LCDへの書き込みがうまくいくという流れのような気がしています。</p><p>コマンドライン実行時のopen処理直後のLCDを見ていると、open直後のタイミングでLCDにリセットがかかっているように見えます。試す価値がありそうです。</p><p>（open＝シリアル通信開始なので当たり前と言ったら当たり前ですが、、、）</p><p>以下のようにsleepを2秒入れて実行してみました。</p><figure class="highlight python"><figcaption><span>Raspberry Pi（送信側）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">ser = serial.Serial()</span><br><span class="line">ser.port = <span class="string">&#x27;/dev/ttyACM0&#x27;</span></span><br><span class="line">ser.baundrate = <span class="number">9600</span></span><br><span class="line">ser.<span class="built_in">open</span>()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;NOW MEETING...  16:30 - 17:30&#x27;</span></span><br><span class="line">ser.write(data.encode())</span><br><span class="line">ser.close()</span><br></pre></td></tr></table></figure><p>結果としてはうまくいきました。仮説が当たっていたみたいです。</p><p>個人的には、以下の理由で上記方法は気に入らないのですがひとまず、これで進めます。</p><ul><li>本来であればDTR端子を何とかする（＝設定やらなんやらで何とかする）のが筋</li><li>sleepで解決するのが力技っぽくて、あまり好みではない</li></ul><h3 id="よくよく考えると、、、"><a href="#よくよく考えると、、、" class="headerlink" title="よくよく考えると、、、"></a>よくよく考えると、、、</h3><p>sleepを入れない方向でもいいのでは？と考えています。</p><p>まず、Webサーバの方に必要なモジュールをブラウザに表示する内容から考えると以下のようになると考えています。</p><p><strong>ブラウザ表示（仮）</strong><br><img src="/images/20230905a/image_2.png" alt="" width="597" height="301" loading="lazy"></p><ul><li>シリアル通信開始（接続ボタン押下）</li><li>シリアル通信終了（切断ボタン押下）</li><li>文字列送信（送信ボタン押下）</li></ul><p>上記のようなUIで考えると、シリアル通信開始～送信ボタン押下までには、タイムラグがあると思います。</p><p>仮に接続ボタンを無くしたようなUIであっても、文字列送信部分に入力するのに数秒はかかるはずなので、sleepは無くて良いと想像しています。<br><span style="font-size: 70%;">（接続ボタン押下からコンマ数秒で入力する超人または、RTA挑戦者は考えていないです）</span></p><p>そのため、この後の方向としては、以下のようになると考えています。</p><ul><li>文字列送信については、sleepを入れない形でひとまず実装を進める</li><li>上記実装で問題が発生した場合、改めてsleepを入れることを検討する</li></ul><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><h3 id="Webサーバは？"><a href="#Webサーバは？" class="headerlink" title="Webサーバは？"></a>Webサーバは？</h3><p>という声が聞こえてきそうですが、これ以上自由研究に作業時間が取れそうにないので今回はここまでとさせていただきます。今後執筆する機会があれば、続きを書きます。</p><p>メモ：残作業</p><ul><li>Webサーバ構築（Apache?nginx?マシンスペックが弱いので軽いのがいい）</li><li>マイコンへの書き込み及び、基盤へのはんだ付け作業</li><li>マイコンとRaspberry Piを設置するようの箱を用意（木？近所に3Dプリンターが使える店があるのでプラスチック？)</li><li>ドアへの設置</li></ul><h3 id="あとがき"><a href="#あとがき" class="headerlink" title="あとがき"></a>あとがき</h3><p>初めてArduinoやRaspberry Piに触ってみましたが色々とトラブルが続いて思うように進まなかったです。ハードウェア周りは、未経験だったので、良い経験にはなったかなと考えています。</p><p>あと、今回のような誰かに見せるようなものを書いたりすると、アウトプットの仕方を考えたりする練習にもなると思うので、書いたことが無くて二の足を踏んでいるような方がいれば、挑戦してみると良い経験になるかと思います。</p><p>では、また執筆する機会があればお会いしましょう</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
    <category term="電子工作" scheme="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/"/>
    
    <category term="RaspberryPi" scheme="https://future-architect.github.io/tags/RaspberryPi/"/>
    
    <category term="Arduino" scheme="https://future-architect.github.io/tags/Arduino/"/>
    
    <category term="初心者" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>UnityのShaderでVRプラネタリウムを作ったけどうまくいかず悔しかったので自作の星を作ったら宇宙が終わった</title>
    <link href="https://future-architect.github.io/articles/20230901a/"/>
    <id>https://future-architect.github.io/articles/20230901a/</id>
    <published>2023-08-31T15:00:00.000Z</published>
    <updated>2023-09-01T01:08:36.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG DX ユニット所属、金欠コンサルタントの藤井です。</p><p><a href="/articles/20230821a/">夏の自由研究連載</a>の第2弾です。夏休みの宿題っぽいものを題材にしてみました。</p><p>実は私、星を見るのが好きなので、天体望遠鏡を買ったり、星を撮るためにカメラを買ったりしています。せっかくならいい環境で見たいので、南は沖縄から北は北海道まで星を見に行っています。（海外も行きたい）。ただ、星を見に行くとなるとどうしても長距離移動になるので、お金もかかるし大変です。天気に左右されるのもつらいところです。</p><p>ということで今回は、遠出しなくてもいろんな星を見ることができるように、VR でプラネタリウムを作ろうと思います。</p><p>なお、本記事では Unity そのものの機能や、Shader の基本的な部分には触れず、作成したソースを参照しながら、重要な部分のみを詳細に記載しています。</p><h2 id="事前準備等"><a href="#事前準備等" class="headerlink" title="事前準備等"></a>事前準備等</h2><h3 id="大方針"><a href="#大方針" class="headerlink" title="大方針"></a>大方針</h3><p>VR プラネタリウムを作るためには、VR 空間上で星の配置を再現していく必要があります。実現方針としては概ね以下の 2 つに分かれるかと思います。</p><ol><li>実際に宇宙空間を作成し、星をオブジェクトとして配置していく<ul><li>メリット：非常にわかりやすく、実装コストが低い。</li><li>デメリット：大量のオブジェクトを作成することになるため、負荷が高い。</li></ul></li><li>天球を作成し、天球上に星の絵（テクスチャ）を描く<ul><li>メリット：オブジェクトは天球のみのため、負荷が低い。</li><li>デメリット：テクスチャの解像度に依存して厳密性が低下する。</li></ul></li></ol><p>ところで皆さんは宇宙にどれぐらいの星（恒星）があるかご存知でしょうか。星の数ほど、というぐらいなので途方もない数であるということはイメージできると思います。結論としては、宇宙の大きさが無限大なので、星の数も無限大です。とはいえ、我々が地球から観測できる星の数は有限であるため、十分な観測技術があれば星の数を数えることは原理上は可能なはずです。（現在確認可能な範囲でも数十億個はあると言われています。）</p><p>この観測できる星をすべて網羅した、星表と呼ばれるものを作りたい、という野望を天文学者は古より抱いており、紀元前から現代に至るまで様々な星表が作られてきました。ただ、これらの星表はもちろん完璧なものではなく、実際に記載されているのは数十万程度です。</p><p>母数が多いので、数十万と聞くと少なく見えますが、決して小さい値ではありません。特に今回は Meta Quest 2 を用いてプラネタリウムを作ろうと思っているので、マシンスペックもそこまで高くありません。そのため今回は、負荷を低減できる方針 2 を採用します。</p><h2 id="Shader-で-Skybox-に動的に星を描いてみる"><a href="#Shader-で-Skybox-に動的に星を描いてみる" class="headerlink" title="Shader で Skybox に動的に星を描いてみる"></a>Shader で Skybox に動的に星を描いてみる</h2><p>では、天球上に星を描いてみましょう。ただし今回は天球用のオブジェクトは作成せず、Skybox と呼ばれるものを使います。Unity にデフォルトで用意されている、オブジェクトが存在しなければ描画される背景のようなもので、ゲーム空間を取り囲むように配置されています。</p><p>Skybox に星の絵を描くに当たり、実際に星空のテクスチャを描いて貼り付けても良いのですが、今回は Shader で動的に星景を作成することにしてみました。理由は Shader を書いてみたかったからです。</p><p>Unity では、「ゲーム空間内の<code>(x,y,z)</code>という座標に hoge というオブジェクトが有るから、画面上の<code>(X,Y)</code>座標のピクセルには<code>(r,g,b)</code>という色を出力しよう」という処理を Shader と呼ばれるものが行っています。<br>つまり Shader に適切な指示を出してもらえば、実態としてはゲーム空間内に何も存在していないにも関わらず、画面上には何かが表示されている、ということができます。</p><p>これにより、単純にゲーム空間内に召喚するオブジェクトが減るという効果はもちろんあるのですが、それに加えて Unity では、C#で書かれたロジックは CPU で（ほぼ）直列に処理がされ、Shader は GPU で並列に処理がされます。基本的に描写する対象の数が多いほど、処理の並列度が重要になってくるため、星の表示はすべて Shader にまかせてしまえば、非常に軽快に宇宙を再現できるのではないか、という気がしてきました。<br>なお、結論から記載すると、これはダメでした。</p><h3 id="Shader-を書いてみる"><a href="#Shader-を書いてみる" class="headerlink" title="Shader を書いてみる"></a>Shader を書いてみる</h3><p>Unity の Shader では、HLSL と呼ばれる言語を用いて処理を記述していきます。</p><p>とりあえず試しに 2 つ、白と赤の星が表示されるようなものを作ってみたものが<a href="https://github.com/shomuMatch/VRPlanetarium/blob/master/Assets/Shader/sample1.shader">こちらの sample1.shader</a>です。</p><p>重要なのは以下のあたりです。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 星の存在する方向や色、明るさを定義</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> Star stars[<span class="number">2</span>] = &#123;</span><br><span class="line">      createStar(float3(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>), fixed3(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), <span class="number">0.5</span>),</span><br><span class="line">      createStar(float3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>), fixed3(<span class="number">1</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), <span class="number">1</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 背景色を定義</span></span><br><span class="line">fixed4 <span class="title function_">drawBackground</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="keyword">return</span> fixed4(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 星を描画</span></span><br><span class="line">fixed4 <span class="title function_">drawStars</span><span class="params">(float3 dir)</span></span><br><span class="line">&#123;</span><br><span class="line">      float3 o = float3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">      &#123;</span><br><span class="line">            float3 direction = normalize(stars[i].direction);</span><br><span class="line">            fixed3 color = normalize(stars[i].color);</span><br><span class="line">            <span class="type">float</span> angle = dot(dir, direction);</span><br><span class="line">            o += color * <span class="built_in">pow</span>(max(<span class="number">0.0</span>, angle), _radiusCoefficient * (stars[i].magnitude + <span class="number">2</span>)) * <span class="built_in">pow</span>(<span class="number">2.5</span>, <span class="number">-1</span> * stars[i].magnitude) * _brightnessCoefficient;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> float4(o, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各ピクセルごとの色を決定</span></span><br><span class="line">fixed4 <span class="title function_">frag</span><span class="params">(v2f i)</span> : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">      <span class="keyword">return</span> drawBackground() + drawStars(i.texcoord);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コメントで書いている通りなのですが、<code>frag()</code>という関数の返り値に応じて、画面上の各ピクセルごとの色が決定されます。（<code>#pragma fragment frag</code>という記述で定義しています）</p><p>この<code>frag()</code>の引数である<code>i</code>のメンバ変数<code>texcoord</code>には、画面内の各ピクセルにおける視線方向のベクトルが格納されています。この視線方向のベクトルと、別途定義している星の存在する方向を示しているベクトルとの内積を取ることで、どのピクセルに星を描画するべきかを決定しているのが<code>drawStars()</code>です。ざっくり書くと、視線方向と星の存在する方向が同じであれば星を描画し、若干ずれていたとしても、星の明るさに応じてほんの少しは描画する。みたいなことを表現しています。これを星の数だけ繰り返すようループしています。なお、shader では単純なループは適切に最適化され、並列処理が行われます。配列の要素間のやり取りなど、直列実行が不可避なものに関しては並列化されませんが、そもそもそういう処理は GPU で実施することを推奨されません。</p><p>さて、この Shader を Skybox に適用するとどのように星が見えるかというと、こんな感じです。</p><img src="/images/20230901a/image.png" alt="image.png" width="1200" height="602" loading="lazy"><p>結構それっぽい気がしますね。</p><p>ではここからどんどん星を増やしていきましょう。と思ったのですが、以下のような制約の壁にぶつかり続け、結局は断念しました。</p><ul><li>Shader では外部ファイルからデータを読み込んで描画することができない。<ul><li>そのため、星の情報をすべてハードコーディングすることになりました。</li><li>ファイル読み込みを C#で行い、Shader に結果を渡す、みたいなこともできる気がしたのですが、うまく行かず…</li></ul></li><li>Shader で利用できる配列の要素数に上限があった。<ul><li>1 配列の要素数、ではなく、全配列の要素数の合計が 4096 以下である必要があるようでした。</li><li>そのため、配列ではなく個別に変数を大量に宣言することになりました。</li></ul></li><li>10 万個の星を描こうとしたところ、Shader のコンパイルがタイムアウトした。<ul><li>個別変数の数に応じてコンパイル時間が伸びていき、やがてはタイムアウトしてしまいました。</li><li>環境変数でタイムアウト時間が設定されているようなので、伸ばすことは可能そうなのですが、とりあえずは星の数を減らして試してみることにしました。</li></ul></li><li>1 万個ぐらいの星を描いたあたりで、PC が唸りを上げ始めた。<ul><li>GPU がフル回転を始めました。</li><li>あと普通にめちゃくちゃ重たくなっていたため、ここで心が折れました。</li></ul></li></ul><p>一応ある程度は描けていたので供養のためキャプチャを掲載しておきます。</p><img src="/images/20230901a/image_2.png" alt="" width="1200" height="728" loading="lazy"><p>なんか、星空って感じではないですね？</p><p>もしかしたら色や明るさを計算するロジックにバグがあるのかもしれませんが、心が折れたのでこれ以上は深追いしません。</p><h2 id="テクスチャを描いて貼り付ける方針に切り替える"><a href="#テクスチャを描いて貼り付ける方針に切り替える" class="headerlink" title="テクスチャを描いて貼り付ける方針に切り替える"></a>テクスチャを描いて貼り付ける方針に切り替える</h2><p>Skybox に動的に星を描く方針は頓挫したし、とりあえず Shader を書いてみるという目的は達成したため、素直にテクスチャを描いて、それを貼り付ける方針に切り替えます。切り替えは大事。</p><h3 id="テクスチャを描く"><a href="#テクスチャを描く" class="headerlink" title="テクスチャを描く"></a>テクスチャを描く</h3><p>まずはテクスチャを作成するための星のデータを用意します。</p><p>今回 VR プラネタリウムを作るにあたって、とりあえずは実際の星空を再現したいので、観測データを用いることにします。冒頭で星表というものを紹介しましたが、今回はその中でも、ヒッパルコス星表というものを使っていきます。ヒッパルコス衛星により取得されたデータを編纂したもので、12 万弱の星のデータが記録されています。<a href="https://heasarc.gsfc.nasa.gov/db-perl/W3Browse/w3table.pl?tablehead=name=hipparcos&Action=More+Options">NASA がデータを公開してくれている</a>ので、こちらから必要なデータを取得していきます。</p><p>HIP 番号（name）、赤経（ra）、赤緯（dec）、等級（vmag）、B-V 色指数（bv_color）を選択してダウンロードしました。そのままだと使いづらいので、以下コマンドなどで csv に変換しておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> hip.txt | sed <span class="string">&#x27;1,5d&#x27;</span> | sed <span class="string">&#x27;s/ \+|/|/g&#x27;</span> | sed <span class="string">&#x27;s/| \+/|/g&#x27;</span> | awk -F <span class="string">&#x27;|&#x27;</span> -v <span class="string">&#x27;OFS=,&#x27;</span> <span class="string">&#x27;&#123;print $2,$3,$4,$5,$6&#125;&#x27;</span> &gt; hip.csv</span><br></pre></td></tr></table></figure><p>この csv をもとにテクスチャを描画する<a href="https://github.com/shomuMatch/VRPlanetarium/blob/master/hip/drawTexture.py">python スクリプト</a>を作成しました。</p><p>ざっくりこんな感じのことをしています。</p><ul><li>赤経・赤緯を度（degree）に変換して描画する位置を決定する。</li><li>等級と赤緯から画像上での星の大きさを決定する。<ul><li>本来星はものすごく遠いため、明るさによらず点として見えるはずですが、人の目の錯覚として明るいものは大きく見えたり、大気による散乱効果が明るいほど強いことなどを踏まえ、明るい星ほど大きく描画しています。</li><li>天球を平面のテクスチャで表現するため、赤道部分はそのままに、極地に近づくほど横に引き伸ばした描画とする必要があります。</li></ul></li><li>等級・B-V 色指数から各星の色・明るさを決定する。<ul><li>観測値である B-V 色指数から星の表面温度を推定、黒体を仮定して表面温度から RGB 値を算出しています。</li><li>等級が 1 変わると、2.5 倍明るさが変わるので、HSV 色空間における V 値が等級に応じて増減するようにしています。<ul><li>ただし、人の目が明るさ（暗さ）に慣れたり、カメラの露光時間を長くしたりすることで、絶対的な明るさと見かけの明るさは必ずしも一致しないことを考慮し、可変パラメータとしています。</li></ul></li><li>計算の根拠はスクリプト上に参考 URL を記載しています。</li></ul></li><li>ガンマ補正を行う。<ul><li>人間の目やカメラによる補正として、ガンマ補正ができるようにしています。こちらもパラメータは可変です。</li></ul></li></ul><p>スクリプトにより描画したテクスチャがこちらです。</p><img src="/images/20230901a/texture3.9_2.5.png" alt="" width="1200" height="600" loading="lazy"><p>高解像度画像に、小さな星の点を表示しているので、あまりきらびやかではないです。</p><h3 id="テクスチャを-Skybox-に適用する"><a href="#テクスチャを-Skybox-に適用する" class="headerlink" title="テクスチャを Skybox に適用する"></a>テクスチャを Skybox に適用する</h3><p>テクスチャが生成できればあとは Unity に取り込んで、適切に設定するだけです。</p><p>まずは Import して、解像度を高めに設定しておきます。</p><img src="/images/20230901a/image_3.png" alt="image.png" width="898" height="790" loading="lazy"><p>そしたら Skybox 用のマテリアルを作成し、Shader を<code>Skybox/Panoramic</code>に、Mapping を<code>Latitude Longitude Layout</code>に設定し、テクスチャのところにインポートしたテクスチャを適用します。</p><img src="/images/20230901a/image_4.png" alt="image.png" width="896" height="666" loading="lazy"><p>最後にメニューの Window -&gt; Rendering &gt; Lighting から Lighting 設定を開き、Environment タブにある Skybox Material に作成した Material をセットします。</p><p>これで準備は完了です。VR 環境で見てみましょう。</p><img src="/images/20230901a/output.gif" alt="output.gif" width="1024" height="1024" loading="lazy"><p>うーん…とりあえず、星空っぽくはある…？（なんか、オリオン座の形おかしい気がする。）</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>ここまでやっておいてなんなんですが、思ったより微妙でした。<br>考えられる要因はいくつか有ります。</p><ul><li>解像度が足りていない。<ul><li>テクスチャの解像度・VR ヘッドセットの解像度ともに、現実世界には遠く及びません。そのためどうしても星というよりは、なんか光っている点、みたいに見えてしまいます。</li></ul></li><li>星の数が少ない。<ul><li>10 万強の星を再現しているとはいえ、当然宇宙に存在するすべての星を再現できているわけではありません。</li><li>特に、天の川銀河の外にある銀河の星や、星雲などのデータはヒッパルコス星表には含まれていないため、どうしても実際の星空とは異なってしまいます。</li><li>この問題を解決するには、実際に世界各地で撮った星景写真をつなぎ合わせてテクスチャを作るしかないかなあと思います。</li></ul></li><li>臨場感がない。<ul><li>これは現実のプラネタリウムにも言えることですが、やはり現地で自然に囲まれながら見る星空、というものに、言語化できない魅力があります。気温や風、音など、単に視覚情報に限らない様々な情報が多角的に私達を魅了しているのだと実感しました。</li><li>現実のプラネタリウムでは、この問題を、魅力的なナレーションや上映内容によって補っているのだと思います。</li><li>ゲームの背景など、脇役に据えるのであれば、このぐらいでも良いのかもしれません。</li></ul></li></ul><p>頑張った割にはこんなものか、というオチになってしまい悔しいですが、ともあれある程度のプラネタリウムを再現できたので、夏の自由研究としては良しとします。<br>ちなみに、今回はヒッパルコス星表のデータを使用しましたが、同じフォーマットでデータを追加することで、自由に星を追加できます。</p><p>・・・・・・・・</p><img src="/images/20230901a/image_5.png" alt="image.png" width="1200" height="193" loading="lazy"><p>せっかくなので-75 等星である、「スーパー明るい藤井星」を追加してみました。見てみましょう。</p><img src="/images/20230901a/output2.gif" alt="output2.gif" width="1024" height="1024" loading="lazy"><p>宇宙は、なんか亀裂入ったし光に包まれて終わりました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG DX ユニット所属、金欠コンサルタントの藤井です。&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Unity" scheme="https://future-architect.github.io/tags/Unity/"/>
    
    <category term="VR" scheme="https://future-architect.github.io/tags/VR/"/>
    
    <category term="Shader" scheme="https://future-architect.github.io/tags/Shader/"/>
    
    <category term="プラネタリウム" scheme="https://future-architect.github.io/tags/%E3%83%97%E3%83%A9%E3%83%8D%E3%82%BF%E3%83%AA%E3%82%A6%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>夏の自由研究：CreateMLを使ってカブトムシを分類するミニアプリを作ってみる。</title>
    <link href="https://future-architect.github.io/articles/20230831a/"/>
    <id>https://future-architect.github.io/articles/20230831a/</id>
    <published>2023-08-30T15:00:00.000Z</published>
    <updated>2023-08-31T05:09:58.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは！HealthCare Innovation Group(HIG)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>所属の橋本です。</p><p>本記事は、<a href="/articles/20230830a/">夏の自由研究ブログ連載2023</a>の1本目です。</p><p>夏の風物詩であるカブトムシやクワガタを識別するミニアプリを作りました。</p><p>夏の自由研究ブログの連載があると聞いて、せっかくなら夏っぽい題材にしたいなと、私が小さい時にたくさん捕まえていたカブトムシを題材にしようと考えました。</p><p>「Swiftと機械学習あたりを絡めて何かできないかな？」と考えたところ、CreateMLという様々な機械学習モデルをGUIで作ることができると知ったため、カブトムシやクワガタの画像を学習させたモデルを使ったミニアプリを作ることにしました。</p><p>今回は、作成したミニアプリをもとに、CreateMLの使い方について紹介したいと思います。<br><img src="/images/20230831a/image.png" alt="" width="718" height="247" loading="lazy"></p><p><strong>作成したカブトムシ・クワガタを分類するミニアプリ</strong><br><img src="/images/20230831a/beatle_app.gif" alt="" width="177" height="384" loading="lazy"></p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>CreateML、CoreMLとは</li><li>CreateMLを使ってカブトムシ・クワガタを識別するモデルの作成からアプリへ実装まで<ul><li>学習データ、テストデータを用意する</li><li>識別モデルを作成</li><li>アプリへ実装する</li></ul></li><li>最後に</li></ul><h2 id="CreateML、CoreMLとは"><a href="#CreateML、CoreMLとは" class="headerlink" title="CreateML、CoreMLとは"></a>CreateML、CoreMLとは</h2><p>CreateMLとは、Appleが提供する機械学習のフレームワークの一つで、機械学習モデルを作成するツールです。また、このCreateMLで作成したモデルを実際にiOSアプリなどで使用ために使われるフレームワークとしてCoreMLがあります。簡単に説明すると、</p><ul><li>CreateMLが機械学習モデル（画像認識、オブジェクト認識、音声認識、文字認識など）を作成するもの</li><li>CoreMLが作成したモデルを様々な実際にアプリに組み込むもの</li></ul><p>というイメージで問題ないと思います。</p><p>以下のApple公式の機械学習に関するページにて、それぞれの説明が記載されています。</p><p><a href="https://developer.apple.com/jp/machine-learning/">https://developer.apple.com/jp/machine-learning/</a></p><p>CreateMLの説明文の引用です。</p><blockquote><p>Create MLアプリでは、コードを書かずにMac上でCore MLモデルをすばやく構築およびトレーニングすることができます。使いやすいアプリのインターフェイスとトレーニング向けに利用できるモデルにより、プロセスがこれまでになく簡単になり、トレーニングデータさえ用意すれば開始できます。モデルのトレーニングと正確性を可視化する手助けとして、スナップショットやプレビューといった機能でトレーニングプロセスをコントロールすることもできます。Create MLフレームワークおよびCreate ML Componentsを使用すると、モデル作成をより細部まで詳細にコントロールできます。</p></blockquote><p>CoreMLの説明文の引用です。</p><blockquote><p>Core MLなら、アプリに機械学習モデルを容易に組み込むことができる上、Appleデバイス上で目を見張るほど速いパフォーマンスを実現します。Core MLのAPIを使うと、構築済みの機械学習機能をアプリに追加することができます。またはCreate MLを使って、カスタムCore MLモデルをMac上で直接トレーニングすることも可能です。他のトレーニングライブラリからのモデルをCore ML Toolsを使って変換したり、すぐに使えるCore MLモデルをダウンロードしたりすることもできます。Xcodeで直接、モデルをプレビューしてそのパフォーマンスを把握することも簡単です。</p></blockquote><h2 id="CreateMLを使ってカブトムシ・クワガタを識別するモデルの作成からアプリへ実装まで"><a href="#CreateMLを使ってカブトムシ・クワガタを識別するモデルの作成からアプリへ実装まで" class="headerlink" title="CreateMLを使ってカブトムシ・クワガタを識別するモデルの作成からアプリへ実装まで"></a>CreateMLを使ってカブトムシ・クワガタを識別するモデルの作成からアプリへ実装まで</h2><p>まず、CreateMLを使って、カブトムシ・クワガタを識別する機械学習モデルを作成していきます。<br>こちらのページに学習済みのCoreMLが組み込まれたサンプルコードがあるため、こちらの中の<code>MobileNetV2</code>（画像識別のモデル）を使用してミニアプリを作成していきます。</p><p><a href="https://developer.apple.com/jp/machine-learning/models/">https://developer.apple.com/jp/machine-learning/models/</a></p><p>環境は、次のとおりです。</p><h3 id="実装環境"><a href="#実装環境" class="headerlink" title="実装環境"></a>実装環境</h3><ul><li>macOS: Ventura 13.4.1(c)</li><li>Xcode: Version 14.3.1 (14E300c)</li></ul><h4 id="学習データ、テストデータを用意する"><a href="#学習データ、テストデータを用意する" class="headerlink" title="学習データ、テストデータを用意する"></a>学習データ、テストデータを用意する</h4><p>4種類のカブトムシ・クワガタの画像を用意します。<br>学習データが100枚、テストデータが20枚それぞれ用意し、以下のフォルダ階層のように準備します。</p><h5 id="フォルダ階層"><a href="#フォルダ階層" class="headerlink" title="フォルダ階層"></a>フォルダ階層</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├trainingData</span><br><span class="line">｜├beatle <span class="comment">#カブトムシ</span></span><br><span class="line">｜├SawToothStagBeatle <span class="comment">#ノコギリクワガタ</span></span><br><span class="line">｜├GiantBeatle <span class="comment">#オオクワガタ</span></span><br><span class="line">｜└MiyamaStagBeatle <span class="comment">#ミヤマクワガタ</span></span><br><span class="line">├testData</span><br><span class="line">　├beatle <span class="comment">#カブトムシ</span></span><br><span class="line">　├SawToothStagBeatle <span class="comment">#ノコギリクワガタ</span></span><br><span class="line">　├GiantStagBeatle <span class="comment">#オオクワガタ</span></span><br><span class="line">　└MiyamaStagBeatle <span class="comment">#ミヤマクワガタ</span></span><br></pre></td></tr></table></figure><p>（飼育経験のあるこの四種類を分類することにしてみました。）</p><h3 id="識別モデルを作成"><a href="#識別モデルを作成" class="headerlink" title="識別モデルを作成"></a>識別モデルを作成</h3><p>CreateMLを<code>Xcode</code> &gt; <code>Open Developer Tool</code> &gt; <code>CreatML</code>をクリックし、ウィンドウを開きます。</p><p>先程用意したtrainingDataフォルダを以下の”＋”部分に、ドラック＆ドロップで追加します。</p><img src="/images/20230831a/image_2.png" alt="" width="1103" height="333" loading="lazy"><p>追加されると、次のようになります。</p><img src="/images/20230831a/image_3.png" alt="" width="1108" height="345" loading="lazy"><p>左上の<code>Train</code>を押下すると、渡したデータをもとに学習が始まります。</p><p>数秒で学習が完了し、以下のように学習時の様子が<code>Trainingタブ</code>で確認することができます。</p><img src="/images/20230831a/image_4.png" alt="" width="868" height="362" loading="lazy"><p>これで機械学習モデルの作成自体は完了です。</p><p>作成したモデルが未知のデータをどれほどの精度で分類できるか評価する方法として、学習時に使用していないテストデータを渡すことができます。CreateML上での実施方法は、Evaluationタブでtraining時と同様に、Testing dataにテスト用のデータをドラック＆ドロップで追加します。</p><img src="/images/20230831a/image_5.png" alt="" width="1114" height="398" loading="lazy"><p>今回の四種類のカブトムシ・クワガタの分類精度は、ノコギリクワガタが50％をわずかに下回っているが、4分類であることを考えると何もパラメータチューニングをしていない割に、オオクワガタ(giantStagBeatle)は65%とまずまずの精度となっていました。</p><h4 id="画像中のMetrics"><a href="#画像中のMetrics" class="headerlink" title="画像中のMetrics"></a>画像中のMetrics</h4><div class="scroll"><table><thead><tr><th align="left">Class</th><th align="right">Count</th><th align="right">Correct</th><th align="right">FP</th><th align="right">FN</th><th align="right">Precision</th><th align="right">Recall</th><th align="right">F1 Score</th></tr></thead><tbody><tr><td align="left">SawTooth<br>StagBeatle</td><td align="right">20</td><td align="right">9</td><td align="right">10</td><td align="right">11</td><td align="right">47%</td><td align="right">45%</td><td align="right">0.46</td></tr><tr><td align="left">Miyama<br>StagBeatle</td><td align="right">20</td><td align="right">10</td><td align="right">6</td><td align="right">10</td><td align="right">62%</td><td align="right">50%</td><td align="right">0.56</td></tr><tr><td align="left">Giant<br>StagBeatle</td><td align="right">20</td><td align="right">15</td><td align="right">8</td><td align="right">5</td><td align="right">65%</td><td align="right">75%</td><td align="right">0.7</td></tr><tr><td align="left">beatle</td><td align="right">20</td><td align="right">9</td><td align="right">7</td><td align="right">7</td><td align="right">59%</td><td align="right">65%</td><td align="right">0.62</td></tr></tbody></table></div><img src="/images/20230831a/image_6.png" alt="" width="1153" height="480" loading="lazy"><p>CreateMLで今回作ったモデルをCoreML　Model形式（<code>.mlmodel</code>）として取得します。</p><p>Outputタグに移動し、右上のGetから、<code>beatleAndStagBeatlesClassifier.mlmodel</code>を任意の場所に保存できます。</p><img src="/images/20230831a/image_7.png" alt="" width="1153" height="553" loading="lazy"><h3 id="アプリへ実装する"><a href="#アプリへ実装する" class="headerlink" title="アプリへ実装する"></a>アプリへ実装する</h3><p>こちらのサイト上部のdownloadからサンプルコード（<code>Vision+Core-ML.xcodeproj</code>）を落としてきます。</p><p><a href="https://developer.apple.com/documentation/vision/classifying_images_with_vision_and_core_ml">https://developer.apple.com/documentation/vision/classifying_images_with_vision_and_core_ml</a></p><p>サンプルコードの<code>Vision+Core-ML.xcodeproj</code>プロジェクトを開き、識別時に使用している分類器を<code>MobileNet.mlmodel</code>から<code>beatleAndStagBeatlesClassifier.mlmodel</code>に修正します。</p><p>具体的には、<code>ImagePredictor.swift</code>の中の　<code>MobileNet.mlmodel</code>から<code>beatleAndStagBeatlesClassifier.mlmodel</code>に書き換える対応のみを行います。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ImagePredictor</span> &#123;</span><br><span class="line">    <span class="comment">/// - Tag: name</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">createImageClassifier</span>() -&gt; <span class="type">VNCoreMLModel</span> &#123;</span><br><span class="line">        <span class="comment">// Use a default model configuration.</span></span><br><span class="line">        <span class="keyword">let</span> defaultConfig <span class="operator">=</span> <span class="type">MLModelConfiguration</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create an instance of the image classifier&#x27;s wrapper class.</span></span><br><span class="line">        <span class="keyword">let</span> imageClassifierWrapper <span class="operator">=</span> <span class="keyword">try?</span> beatlesAndStagBeatlesClassifier(configuration: defaultConfig)　<span class="comment">// ここを書き換えています。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> imageClassifier <span class="operator">=</span> imageClassifierWrapper <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">&quot;App failed to create an image classifier model instance.&quot;</span>)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>これで学習させたモデルで撮影した画像が『カブトムシ』か『〇〇クワガタ』かを識別することができます。</p><p><strong>作成したカブトムシ・クワガタを分類するミニアプリ(再掲)</strong></p><p>（これを使えば、道端で遭遇したカブトムシ・クワガタの種類がわかるようになる？）</p><img src="/images/20230831a/beatle_app_2.gif" alt="" width="177" height="384" loading="lazy"><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回は、CreateMLをつかって機械学習モデルを作ってみることができました。しかし、分類精度はあまり良くなかったため、細部までチューニングができるCreate ML Componentsを使用してモデル作成を行ってみたい思います。</p><p>今後もSwift周りで学習した内容を投稿していきたいと思いますので、その際もお読みいただけると嬉しいです。</p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><p><a href="https://developer.apple.com/machine-learning/create-ml/">https://developer.apple.com/machine-learning/create-ml/</a></p><p><a href="https://developer.apple.com/documentation/createml/">https://developer.apple.com/documentation/createml/</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">医療・ヘルスケア分野での案件や新規ビジネス創出を担う、2020年に誕生した事業部です。設立エピソードは<a href="https://note.future.co.jp/n/n8b57d4bf4604">未来報</a>の記事をご覧ください。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは！HealthCare Innovation Group(HIG)&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="機械学習" scheme="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/"/>
    
    <category term="iOS" scheme="https://future-architect.github.io/tags/iOS/"/>
    
    <category term="Swift" scheme="https://future-architect.github.io/tags/Swift/"/>
    
    <category term="画像認識" scheme="https://future-architect.github.io/tags/%E7%94%BB%E5%83%8F%E8%AA%8D%E8%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>夏の自由研究連載2023 を始めます</title>
    <link href="https://future-architect.github.io/articles/20230830a/"/>
    <id>https://future-architect.github.io/articles/20230830a/</id>
    <published>2023-08-29T15:00:00.000Z</published>
    <updated>2023-09-08T08:03:28.088Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230830a/IMG_3515.JPG" alt="" width="1200" height="800" loading="lazy"><p>こんにちは。技術ブログ運営の伊藤です。</p><p>今回はタイトルの通り、今年も夏の自由研究連載を始めますよ記事です。</p><h2 id="夏の自由研究連載とは"><a href="#夏の自由研究連載とは" class="headerlink" title="夏の自由研究連載とは"></a>夏の自由研究連載とは</h2><p>皆さんも一度は通ったことのある小学生の自由研究。時にはやってみたいことをテーマにして前のめりにやり続けていたり、反対に面倒なことを題材にしてしまったこともあったり、楽しかったり苦かったりする思い出のひとつかもしれません。</p><p>夏の自由研究連載とは、そんな気持ちを思い出しつつ、寄稿者の普段の興味をベースとして、</p><ul><li>普段手をつけられなかったけど、連載を機に何か手をつけてみる</li><li>童心を思い出して、何かをじっくり研究、工作してみる</li></ul><p>…などをブログにする連載です。</p><p>過去の投稿では、低音調理器を自作し、鶏胸肉まで食べるお料理記事や、実際にハードウェアまで含めて研究して記事になっていたので、本当に小学校の時やっていた自由研究のようです。</p><p>実は今年で4年目となり、技術ブログの連載の中ではそれなりに続いている連載の一つです。</p><h2 id="投稿スケジュール"><a href="#投稿スケジュール" class="headerlink" title="投稿スケジュール"></a>投稿スケジュール</h2><p>さて、今年の自由研究連載の投稿スケジュールです。</p><p>夏といえば！なネタから、「自由研究」というテーマに沿って普段自分の領域外のネタなど、幅広いネタが集まるのもこの連載の特徴であり、楽しいポイントの一つであります。</p><div class="scroll"><table><thead><tr><th>Date</th><th>Author</th><th>Title&amp;Theme</th></tr></thead><tbody><tr><td>8&#x2F;31</td><td>橋本竜我</td><td><a href="/articles/20230831a/">CreateMLでカブトムシを分類するミニアプリ開発</a></td></tr><tr><td>9&#x2F;1</td><td>藤井亮佑</td><td><a href="/articles/20230901a/">Unityを使ったVRプラネタリウム開発</a></td></tr><tr><td>9&#x2F;5</td><td>水田祐介</td><td><a href="/articles/20230905a/">Raspberry PiのブラウザからAudiuinoに接続したLCDに文字を表示する</a></td></tr><tr><td>9&#x2F;6</td><td>王紹宇</td><td><a href="/articles/20230906a/">Sentence-Transformersを使ってYouTube動画のセリフを検索する</a></td></tr><tr><td>9&#x2F;8</td><td>清水雄一郎</td><td><a href="/articles/20230908a/">SwiftUIのカスタムアラートダイアログについて考える</a></td></tr><tr><td>9&#x2F;8</td><td>真野隼記</td><td>データカタログツール</td></tr></tbody></table></div><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>当の小学生はそろそろ夏休みが終わりそう、もしくは終わってしまった子もいますが、社会人ならではのネタも楽しみですね！</p><p>ブログの投稿内容や順番については変わる可能性はございますが、今年の連載も、これまでの連載も是非読んでみてください！</p><ul><li><a href="/articles/20200726/">2020</a></li><li><a href="/articles/20210823a/">2021</a></li><li><a href="/articles/20220822a/">2022</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230830a/IMG_3515.JPG&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;800&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>クライアント/サーバ構成でみるPlaywright</title>
    <link href="https://future-architect.github.io/articles/20230829a/"/>
    <id>https://future-architect.github.io/articles/20230829a/</id>
    <published>2023-08-28T15:00:00.000Z</published>
    <updated>2023-08-29T01:19:50.241Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20230821a/">Playwright連載</a>6日目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Playwrightはさまざまな言語でテストを記述することが可能です。</p><p><a href="https://playwright.dev/docs/languages">公式ドキュメント</a>を見ると <a href="https://github.com/microsoft/playwright">JavaScript&#x2F;TypeScript</a> をはじめとし、<a href="https://github.com/microsoft/playwright-python">Python</a> &#x2F; <a href="https://github.com/microsoft/playwright-java">Java</a> &#x2F; <a href="https://github.com/microsoft/playwright-dotnet">.Net</a> がサポートされていることがわかります。<br>そのほかにも<a href="https://github.com/playwright-community/playwright-go">Go</a>や<a href="https://github.com/YusukeIwaki/playwright-ruby-client">Ruby</a>といった言語もサードパーティ製の実装によって利用することが可能です。</p><p>このように幅広い言語をサポートしているのは利用者としてとても嬉しいことです。</p><p>今回はこのような他言語展開を可能にしているPlaywrightのアーキテクチャについて調べました。</p><h2 id="環境情報"><a href="#環境情報" class="headerlink" title="環境情報"></a>環境情報</h2><p>本記事執筆時点のPlaywrightの最新バージョンはv1.37.1であり、本記事の内容及び参照しているドキュメントやソースコードは当該バージョンのものを前提としています。</p><h2 id="Playwright-Architecture"><a href="#Playwright-Architecture" class="headerlink" title="Playwright Architecture"></a>Playwright Architecture</h2><p>通常のテストランナーを利用する場合、あまり意識することはないのですが、Playwrightはクライアント&#x2F;サーバの構成で動作させることが可能です。</p><p>なぜ意識することがないかというと、通常のテストランナーにおいては明示的に指定をしない限りクライアントとサーバはプロセスとして分離せず、同一のプロセスで動作するためです。</p><p>クライアント&#x2F;サーバ構成のイメージは下記の通りです。</p><img src="/images/20230829a/Playwright_Architecture.drawio.png" alt="Playwright_Architecture" width="800" height="320" loading="lazy"><p>サーバ側はWebSocketまたは標準入出力の口をもち、クライアントからのリクエストに応じて各ブラウザに対しての操作を実行します。クライアント側はテストスクリプトに応じてサーバに対してリクエストを送信します。</p><p>図を見ればわかるとおり、クライアント側はPlaywrightが定めるリクエスト&#x2F;レスポンスの形式に従ってWebSocket通信を行うことができればE2Eテストが実行なため、複数言語のサポートが容易となっています。</p><p>クライアント&#x2F;サーバ構成のE2Eテストツールと聞くと<a href="https://www.selenium.dev/">Selenium</a>が有名ですが、こちらも同じく複数の言語をサポートするよう設計されています。</p><p>ただし、PlaywrightはSeleniumよりも遥かに効率的かつ高速に動作するよう設計されており、通常のテストランナーにおいてクライアントとサーバを分離せずに実行できるような作りになっているのは良い点だと言えそうです。</p><h2 id="Playwright-CLI"><a href="#Playwright-CLI" class="headerlink" title="Playwright CLI"></a>Playwright CLI</h2><p>Playwright CLIの<a href="https://github.com/microsoft/playwright/blob/v1.37.1/packages/playwright-core/src/cli/program.ts">ソースコード</a>を読むと、公開されていないCLIのコマンドがいくつかあります。その中でもサーバを起動するコマンドは下記の3つとなります。</p><ul><li><a href="https://github.com/microsoft/playwright/blob/v1.37.1/packages/playwright-core/src/cli/program.ts#L249">run-driver</a></li><li><a href="https://github.com/microsoft/playwright/blob/v1.37.1/packages/playwright-core/src/cli/program.ts#L255">run-server</a></li><li><a href="https://github.com/microsoft/playwright/blob/v1.37.1/packages/playwright-core/src/cli/program.ts#L276">launch-server</a></li></ul><p>簡単に違いを説明します。</p><h3 id="run-driver"><a href="#run-driver" class="headerlink" title="run-driver"></a>run-driver</h3><p>標準入出力を通信経路とするPlaywright Serverを起動します。</p><p>内部実装は<a href="https://github.com/microsoft/playwright/blob/v1.37.1/packages/playwright-core/src/cli/driver.ts#L33">このあたり</a>を見るとJSON形式のメッセージを標準入出力でやりとりしていることがわかります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npx playwright run-driver -h</span><br><span class="line">Usage: npx playwright run-driver [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --<span class="built_in">help</span>  display <span class="built_in">help</span> <span class="keyword">for</span> <span class="built_in">command</span></span><br></pre></td></tr></table></figure><h3 id="run-server"><a href="#run-server" class="headerlink" title="run-server"></a>run-server</h3><p>このコマンドはWebSocketを通信経路とするPlaywright Serverを起動します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npx playwright run-server -h</span><br><span class="line">Usage: npx playwright run-server [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --port &lt;port&gt;               Server port</span><br><span class="line">  --path &lt;path&gt;               Endpoint Path (default: <span class="string">&quot;/&quot;</span>)</span><br><span class="line">  --max-clients &lt;maxClients&gt;  Maximum clients</span><br><span class="line">  --mode &lt;mode&gt;               Server mode, either <span class="string">&quot;default&quot;</span> or <span class="string">&quot;extension&quot;</span></span><br><span class="line">  -h, --<span class="built_in">help</span>                  display <span class="built_in">help</span> <span class="keyword">for</span> <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>内部実装は<a href="https://github.com/microsoft/playwright/blob/v1.37.1/packages/playwright-core/src/remote/playwrightConnection.ts#L81">このあたり</a>を見ると、JSON形式のメッセージをWebSocketでやりとりしていることがわかります。</p><h3 id="launch-server"><a href="#launch-server" class="headerlink" title="launch-server"></a>launch-server</h3><p>このコマンドはWebSocketを通信経路するPlaywright Serverを起動します。<br><code>run-server</code> との違いとして <code>run-server</code> コマンドは複数のブラウザに対応したサーバを起動するのに対し、本コマンドは単一のブラウザに対応したサーバを起動します。</p><p>コマンドのオプションを見てもわかる通りブラウザの指定が必須となっています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npx playwright launch-server -h</span><br><span class="line">Usage: npx playwright launch-server [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --browser &lt;browserName&gt;         Browser name, one of <span class="string">&quot;chromium&quot;</span>, <span class="string">&quot;firefox&quot;</span> or <span class="string">&quot;webkit&quot;</span></span><br><span class="line">  --config &lt;path-to-config-file&gt;  JSON file with launchServer options</span><br><span class="line">  -h, --<span class="built_in">help</span>                      display <span class="built_in">help</span> <span class="keyword">for</span> <span class="built_in">command</span></span><br></pre></td></tr></table></figure><h3 id="クライアント-x2F-サーバ構成でのテスト実行"><a href="#クライアント-x2F-サーバ構成でのテスト実行" class="headerlink" title="クライアント&#x2F;サーバ構成でのテスト実行"></a>クライアント&#x2F;サーバ構成でのテスト実行</h3><p><code>npm init playwright@latest</code>で作成した初期プロジェクトでテストを実行します。</p><h4 id="サーバサイド"><a href="#サーバサイド" class="headerlink" title="サーバサイド"></a>サーバサイド</h4><p><code>run-server</code>コマンドを利用してPlaywright Serverを8008ポートで起動します。<br>なお、サーバ側のログを出力するため環境変数<code>DEBUG=pw:server</code>を指定します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG=pw:server npx playwright run-server --port 8008</span><br><span class="line">Listening on ws://127.0.0.1:8008/</span><br></pre></td></tr></table></figure><h4 id="クライアントサイド"><a href="#クライアントサイド" class="headerlink" title="クライアントサイド"></a>クライアントサイド</h4><p><code>playwright.config.ts</code> を編集し、<a href="https://playwright.dev/docs/api/class-testoptions#test-options-connect-options">connectOptions</a>に接続先となる<code>ws://localhost:8008/</code>を指定します。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// (省略)</span></span><br><span class="line">  <span class="attr">use</span>: &#123;</span><br><span class="line">    <span class="attr">connectOptions</span>: &#123;</span><br><span class="line">      <span class="attr">wsEndpoint</span>: <span class="string">&quot;ws://localhost:8008/&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>テストを実行すると6ケースのテストがパスします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npx playwright <span class="built_in">test</span></span><br><span class="line">Running 6 tests using 4 workers</span><br><span class="line">  6 passed (8.2s)</span><br></pre></td></tr></table></figure><p>サーバ側のログを見ると6ケース（3ブラウザ * 2ケース）のテストのログが出力されていることがわかります。</p><details><summary>ログを見る</summary><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">pw:server [1] serving connection: / +34s</span><br><span class="line">pw:server [2] serving connection: / +3ms</span><br><span class="line">pw:server [3] serving connection: / +2ms</span><br><span class="line">pw:server [1] engaged launch mode <span class="keyword">for</span> <span class="string">&quot;webkit&quot;</span> +12ms</span><br><span class="line">pw:server [4] serving connection: / +7ms</span><br><span class="line">pw:server [3] engaged launch mode <span class="keyword">for</span> <span class="string">&quot;chromium&quot;</span> +2ms</span><br><span class="line">pw:server [2] engaged launch mode <span class="keyword">for</span> <span class="string">&quot;webkit&quot;</span> +2ms</span><br><span class="line">pw:server [4] engaged launch mode <span class="keyword">for</span> <span class="string">&quot;chromium&quot;</span> +89ms</span><br><span class="line">pw:server [2] disconnected. error: undefined +3s</span><br><span class="line">pw:server [2] starting cleanup +1ms</span><br><span class="line">pw:server [2] finished cleanup +74ms</span><br><span class="line">pw:server [1] disconnected. error: undefined +147ms</span><br><span class="line">pw:server [1] starting cleanup +0ms</span><br><span class="line">pw:server [1] finished cleanup +56ms</span><br><span class="line">pw:server [5] serving connection: / +325ms</span><br><span class="line">pw:server [5] engaged launch mode <span class="keyword">for</span> <span class="string">&quot;firefox&quot;</span> +8ms</span><br><span class="line">pw:server [6] serving connection: / +259ms</span><br><span class="line">pw:server [6] engaged launch mode <span class="keyword">for</span> <span class="string">&quot;firefox&quot;</span> +14ms</span><br><span class="line">pw:server [6] disconnected. error: undefined +3s</span><br><span class="line">pw:server [6] starting cleanup +1ms</span><br><span class="line">pw:server [5] disconnected. error: undefined +622ms</span><br><span class="line">pw:server [5] starting cleanup +0ms</span><br><span class="line">pw:server [6] finished cleanup +234ms</span><br><span class="line">pw:server [5] finished cleanup +247ms</span><br><span class="line">pw:server [3] disconnected. error: undefined +37s</span><br><span class="line">pw:server [3] starting cleanup +1ms</span><br><span class="line">pw:server [3] finished cleanup +35ms</span><br><span class="line">pw:server [4] disconnected. error: undefined +22s</span><br><span class="line">pw:server [4] starting cleanup +0ms</span><br><span class="line">pw:server [4] finished cleanup +37ms</span><br></pre></td></tr></table></figure></details><h3 id="別言語のクライアントはどうなっているのか"><a href="#別言語のクライアントはどうなっているのか" class="headerlink" title="別言語のクライアントはどうなっているのか"></a>別言語のクライアントはどうなっているのか</h3><p>各クライアントは実行時にPlaywrightのドライバをダウンロードし、<code>run driver</code>することでPlaywright Serverを立ち上げてテストを実行しているようです。</p><p>Playwrightのドライバは<code>https://playwright.azureedge.net/builds/driver/playwright-$&#123;version&#125;-$&#123;platform&#125;.zip</code>の形式でバージョンとプラットフォームを指定することでダウンロード可能です。<br>例. <a href="https://playwright.azureedge.net/builds/driver/playwright-1.37.1-mac.zip">https://playwright.azureedge.net/builds/driver/playwright-1.37.1-mac.zip</a></p><p>例えば <code>playwright-python</code> を見てみると<a href="https://github.com/microsoft/playwright-python/blob/v1.37.0/setup.py#L45">このあたり</a>でドライバをダウンロードし、<a href="https://github.com/microsoft/playwright-python/blob/v1.37.0/playwright/_impl/_transport.py#L123">このあたり</a>で<code>run-driver</code>をサブプロセスで実行しています。</p><p>なおこのドライバは実行環境にNode.jsランタイムがなくとも実行可能なバイナリとして配布されているため、例えば <code>playwright-python</code> を利用してテストを実行する場合はPythonの実行環境さえあれば良ということになります。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>普段使う分にはあまり意識することのないPlaywrightのアーキテクチャのお話でした。</p><p>本記事で説明している内容の多くが公式のドキュメントでは明文化されていないため、筆者もソースコードを追いながら理解した結果をまとめています。そのため将来的なバージョンアップにより本記事記載の内容が変更されることも十分にあり得ることをご了承いただけますと幸いです。</p><p>もし内容に不備や補足等ありましたらSNSや<a href="https://github.com/future-architect/tech-blog/issues">こちら</a>でご意見いただけますと幸いです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20230821a/&quot;&gt;Playwright連載&lt;/a&gt;6日目です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Playwright" scheme="https://future-architect.github.io/tags/Playwright/"/>
    
  </entry>
  
  <entry>
    <title>PlaywrightをGitHubActions実行したときの初期処理についての試行錯誤</title>
    <link href="https://future-architect.github.io/articles/20230828a/"/>
    <id>https://future-architect.github.io/articles/20230828a/</id>
    <published>2023-08-27T15:00:00.000Z</published>
    <updated>2023-08-28T02:55:32.920Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20230821a/">Playwright連載</a>5日目です。</p><p>近年PlaywrightやCypressを用いたE2Eテスト（エンドツーエンドテスト）が行われるようになってきました。</p><p>E2Eテストとはソフトウェアやシステムの全体的な動作や機能をテストする手法で、ユーザーが実際に行う操作を模倣したテストを行い、アプリケーションが予想通りに機能するかどうかを確認していきます。</p><p>具体的な操作手順をテストケースとして作成し、予期される結果との整合性を確認していくわけです。バグの早期発見のためにも、E2Eテストの自動化を行い、さらにはCIに組み込み定期的に実行していきたい。そしていざ組み込んでみると、CIの実行時間が気になってきます。</p><p>テスト自体の実行時間も短縮を行っていきたいですが、テストが始まるまでのイニシャライズ、初期処理の時間もそこそこ掛かってしまうもの。</p><p>今回はどのように設定していけば処理時間が短くなるか。試行錯誤とその結果を報告したいと思います。</p><h2 id="実行するテストの記述"><a href="#実行するテストの記述" class="headerlink" title="実行するテストの記述"></a>実行するテストの記述</h2><p>はじめに以下のコマンドでテスト環境を作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> playwright-ci-test &amp;&amp; <span class="built_in">cd</span> playwright-ci-test</span><br><span class="line">$ git init</span><br><span class="line">$ npm init playwright@latest</span><br><span class="line">Initializing project <span class="keyword">in</span> <span class="string">&#x27;.&#x27;</span></span><br><span class="line">√ Do you want to use TypeScript or JavaScript? · JavaScript</span><br><span class="line">√ Where to put your end-to-end tests? · tests</span><br><span class="line">√ Add a GitHub Actions workflow? (y/N) · <span class="literal">true</span></span><br><span class="line">√ Install Playwright browsers (can be <span class="keyword">done</span> manually via <span class="string">&#x27;npx playwright install&#x27;</span>)? (Y/n) · <span class="literal">true</span></span><br><span class="line">（省略）</span><br><span class="line">Happy hacking! 🎭</span><br></pre></td></tr></table></figure><p>続いて、共通して実行するテストを用意します。以下のようなspecファイルを用意しました。フューチャー ブログのトップページにアクセスして HTMLのタイトルが適切であるかを確認するだけの簡単なテストです。また、Playwrightでは様々なブラウザでテストが行えますが、今回はChromiumのみでのテストとします。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tests/example.spec.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; test, expect &#125; <span class="keyword">from</span> <span class="string">&#x27;@playwright/test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;has title&#x27;</span>, <span class="keyword">async</span> (&#123; page &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://future-architect.github.io/&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">expect</span>(page).<span class="title function_">toHaveTitle</span>(<span class="regexp">/フューチャー技術ブログ/</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="試行錯誤-その1-NPM-インストールでの初期設定"><a href="#試行錯誤-その1-NPM-インストールでの初期設定" class="headerlink" title="試行錯誤 その1 NPM インストールでの初期設定"></a>試行錯誤 その1 NPM インストールでの初期設定</h2><p>まずはPlaywrightのドキュメントを確認してみましょう。</p><p><a href="https://playwright.dev/docs/ci-intro">CI GitHub Actions | Playwright</a> というページにGitHub ActionsでPlaywrightを実行する際のymlファイルのサンプルが記載されています。こちらに書かれているymlファイルは <code>npm init playwright@latest</code> の実行時に <code>Add a GitHub Actions workflow? (y/N)</code> で <code>y</code> を押したときに生成されるymlファイルと同一のものになります。</p><p>作成されたymlファイルは、checkoutと依存ライブラリインストール後に、Playwrightのインストールとテスト実行、最後にテストレポートのアップロードという構成になっています。<br>今回は初期処理についての比較を行いたいので、テストレポートのアップロード部分を削除して、以下のようなymlファイルを配置しました。</p><figure class="highlight yaml"><figcaption><span>name Playwright Tests 1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">timeout-minutes:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="number">18</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Playwright</span> <span class="string">Browsers</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npx</span> <span class="string">playwright</span> <span class="string">install</span> <span class="string">--with-deps</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Playwright</span> <span class="string">tests</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npx</span> <span class="string">playwright</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>こちらをGitHub Actionsで実行してみると33秒かかりました。インストール時のGitHub Action側の混み具合やDL速度によって時間は上下するかと思いますので、実行時間に関してはあくまで目安としてご覧ください。</p><img src="/images/20230828a/image.png" alt="image.png" width="654" height="457" loading="lazy"><p>今回の場合テストしか入っていないレポジトリなので、<code>npm ci</code> (Install dependencies) の時間が最小限に収まっています。例えば、フロントエンドのレポジトリにE2Eテストを相乗りさせている場合には依存ライブラリのインストール時間が余計にかかってしまいます。</p><h2 id="試行錯誤-その2-サブディレクトリでのインストール"><a href="#試行錯誤-その2-サブディレクトリでのインストール" class="headerlink" title="試行錯誤 その2 サブディレクトリでのインストール"></a>試行錯誤 その2 サブディレクトリでのインストール</h2><p>相乗りさせたレポジトリの場合に依存ライブラリのインストール時間が余計に掛かってしまうので、サブディレクトリにPlaywrightのもろもろを配置する場合は以下のようなymlファイルを用意することになります。</p><figure class="highlight yaml"><figcaption><span># .github\workflows\playwright-2.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Playwright</span> <span class="string">Tests</span> <span class="number">2</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">timeout-minutes:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="number">18</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">--prefix</span> <span class="string">./playwright</span> <span class="string">ci</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Playwright</span> <span class="string">Browsers</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">(cd</span> <span class="string">playwright</span> <span class="string">&amp;&amp;</span> <span class="string">npx</span> <span class="string">playwright</span> <span class="string">install</span> <span class="string">--with-deps</span> <span class="string">&amp;&amp;</span> <span class="string">cd</span> <span class="string">-)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Playwright</span> <span class="string">tests</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">(cd</span> <span class="string">playwright</span> <span class="string">&amp;&amp;</span> <span class="string">npx</span> <span class="string">playwright</span> <span class="string">test</span> <span class="string">&amp;&amp;</span> <span class="string">cd</span> <span class="string">-)</span></span><br></pre></td></tr></table></figure><p>そして、レポジトリに<code>playwright</code>というディレクトリを作成し、その中で<code>npm init playwright@latest</code>を実行。その1と同様にspecファイルを配置しました。</p><p>こちらをGitHub Actionsで実行してみると29秒かかりました。</p><img src="/images/20230828a/image_2.png" alt="" width="658" height="462" loading="lazy"><p>こちらも実行時間はその1とほぼ同程度。Playwightでのテストレポジトリであればその1の構成、そうでない場合は、依存ライブラリのインストール時間を削減するためにもその2の構成が良いのではと考えています。</p><h2 id="試行錯誤-その3-playwright-github-actionを使う"><a href="#試行錯誤-その3-playwright-github-actionを使う" class="headerlink" title="試行錯誤 その3 playwright-github-actionを使う"></a>試行錯誤 その3 playwright-github-actionを使う</h2><p>こちらの方法は非推奨です。</p><p>以前は <code>microsoft/playwright-github-action</code> というPlaywright用のGitHub Actionが用意されていました。</p><p><a href="https://github.com/microsoft/playwright-github-action">microsoft&#x2F;playwright-github-action: Run Playwright tests on GitHub Actions</a></p><p>現在もレポジトリは残っていますが、READMEに「❌ You don’t need this GitHub Action」と非推奨である旨が大きく書かれています。</p><p>非推奨である理由として、どのバージョンのPlaywrightが実行されているかわからないから、と書かれています。おそらくサポート上の問題があったのでしょう。</p><p>こちらの<code>microsoft/playwright-github-action</code>を動かそうとすると以下のようなymlファイルになるかと思います。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github\workflows\playwright-3.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Playwright</span> <span class="string">Tests</span> <span class="number">3</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">timeout-minutes:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="number">18</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">microsoft/playwright-github-action@v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Playwright</span> <span class="string">Browsers</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npx</span> <span class="string">playwright</span> <span class="string">install</span> <span class="string">--with-deps</span> <span class="string">chromium</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Playwright</span> <span class="string">tests</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npx</span> <span class="string">playwright</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>Playwrightのインストール部分(<code>npx playwright install --with-deps chromium</code>)は本来不要であったと思いますが、レポジトリが半年以上更新されていないため、インストールをせず実行すると <code>npx playwright test</code> のタイミングで以下のエラーが出て止まってしまいます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Error: browserType.launch: Executable doesn<span class="string">&#x27;t exist at /home/runner/.cache/ms-playwright/chromium-1071/chrome-linux/chrome</span></span><br><span class="line"><span class="string">╔═════════════════════════════════════════════════════════════════════════╗</span></span><br><span class="line"><span class="string">║ Looks like Playwright Test or Playwright was just installed or updated. ║</span></span><br><span class="line"><span class="string">║ Please run the following command to download new browsers:              ║</span></span><br><span class="line"><span class="string">║                                                                         ║</span></span><br><span class="line"><span class="string">║     npx playwright install                                              ║</span></span><br><span class="line"><span class="string">║                                                                         ║</span></span><br><span class="line"><span class="string">║ &lt;3 Playwright Team                                                      ║</span></span><br><span class="line"><span class="string">╚═════════════════════════════════════════════════════════════════════════╝</span></span><br></pre></td></tr></table></figure><p>最新版となるようインストールを行い、GitHub Actionsで実行してみると76秒かかりました。</p><img src="/images/20230828a/image_3.png" alt="" width="657" height="504" loading="lazy"><p><code>microsoft/playwright-github-action</code> と <code>npx playwright install</code> で二度手間となり長くなった、と考えることもできますが、<code>microsoft/playwright-github-action</code> 単体でもほどほどに掛かっています。</p><p>このGitHub Actionの活用を考えるよりは、現在推奨されている方法での実行を検討した方がよいでしょう。</p><h2 id="試行錯誤-その4-コンテナでの環境構築"><a href="#試行錯誤-その4-コンテナでの環境構築" class="headerlink" title="試行錯誤 その4 コンテナでの環境構築"></a>試行錯誤 その4 コンテナでの環境構築</h2><p>これまではnpmを用いて実行環境を作ってきましたが、GitHub Actionsではコンテナイメージを読みこんでその中で実行することもできます。</p><p>今回はplaywrightの用意している <code>mcr.microsoft.com/playwright</code> のコンテナを利用し、以下のようなymlファイルを配置しました。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github\workflows\playwright-4.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Playwright</span> <span class="string">Tests</span> <span class="number">4</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">timeout-minutes:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">container:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mcr.microsoft.com/playwright:v1.36.1-jammy</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="number">18</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Playwright</span> <span class="string">Browsers</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npx</span> <span class="string">playwright</span> <span class="string">install</span> <span class="string">--with-deps</span> <span class="string">chromium</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">your</span> <span class="string">tests</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npx</span> <span class="string">playwright</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>こちらをGitHub Actionsで実行してみると54秒かかりました。</p><img src="/images/20230828a/image_4.png" alt="" width="656" height="540" loading="lazy"><p>その1・その2と比較すると、<code>Install Playwright Browsers</code> の実行時間が大幅に短縮されています。</p><p>実行ログを確認してみると、コンテナ内にPlaywrightがすでに含まれているためアップデートの確認処理のみで終えられていることがわかります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Run npx playwright install --with-deps chromium</span><br><span class="line">  npx playwright install --with-deps chromium</span><br><span class="line">  shell: sh -e &#123;0&#125;</span><br><span class="line">Installing dependencies...</span><br><span class="line">（省略）</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</span><br></pre></td></tr></table></figure><p>しかしながら <code>Initialize container</code> で34秒掛かっており、他の方法と比べて大きく優位かとも言えないといったところ。</p><p>コンテナでの環境構築のメリットとしては、Playwightの実行時に大量のプラグインを必要とする場合や複数ブラウザでのテストを並列にせず実行する場合などが考えられます。つまり、依存ライブラリのインストールに時間がとても掛かってしまう場合ですね。</p><p>逆にデメリットとしては、コンテナ初期化の時間がかかってしまうこと。そして、Playwightのアップデートやコンテナのアップデートに追従してymlファイルの更新を掛けていかなければいけないことでしょうか。</p><p>一般的な環境には向かないとは思いますが、もしかするとコンテナ構築が銀の弾丸となるプロジェクトもあるのかもしれません。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>PlaywrightをCIで実行する際にどのようなymlファイルを書けばGitHub Actionsでの初期処理にかかる時間を短くできるかを試行錯誤しました。</p><p>結果的には、Playwright専用のレポジトリを作る、もしくはサブディレクトリの中で環境を構築。そのあとはnpmでの環境構築を行うのが良さそうだ、という結果になりました。</p><p>何かしらの参考になれば幸いです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="GitHubActions" scheme="https://future-architect.github.io/tags/GitHubActions/"/>
    
    <category term="Playwright" scheme="https://future-architect.github.io/tags/Playwright/"/>
    
  </entry>
  
  <entry>
    <title>Playwrightのテストランナーを他のテストライブラリと比較する</title>
    <link href="https://future-architect.github.io/articles/20230825a/"/>
    <id>https://future-architect.github.io/articles/20230825a/</id>
    <published>2023-08-24T15:00:00.000Z</published>
    <updated>2023-08-25T01:31:06.374Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20230821a/">Playwright連載</a>4日目です。</p><h1 id="APIのスタイル"><a href="#APIのスタイル" class="headerlink" title="APIのスタイル"></a>APIのスタイル</h1><p>テスティングフレームワークには大きく2つの流派があります。ひとつはJUnit、あるいはその祖先の　SUnitをベースにしたTDDスタイル(テスト駆動開発)のものです。もう１つが、RSpecをベースにしたBDD(振る舞い駆動開発)ものです。</p><p>TDDスタイルはテスト関数、もしくはメソッドを実行します。モジュールやテストクラスでグルーピングして、それぞれのメソッドで共通の準備コードを実行したり、というのが可能です。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TDDスタイルの例(JavaのJUnit)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PostTest</span> &#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">comment</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BDDスタイルのテストは<code>describe</code>と<code>it</code>というキーワードの組み合わせでテストを書いていきます。</p><p><code>describe</code>がグループを表し、<code>describe 名詞</code>で、特定の要素のテストであるという宣言を行い、その中で<code>it 振る舞い</code>というのを並べていきます。この<code>it</code>は英語的には<code>describe</code>の名詞を指します。特定の要素に対して、その振る舞いを記述するというスタイルです。</p><p>表現的には動く仕様書となることを指向していますが、実際のソフトウェアの動きとしてはTDDスタイルとほぼ同じです。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BDDスタイルの例(RubyのRSpec)</span></span><br><span class="line">RSpec.describe <span class="string">&#x27;Post&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  it <span class="string">&#x27;cannot have comments&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>JavaScript界隈のフレームワークはBDDベースのものが数多く利用されています。Playwrightはこの中間になっており、<code>describe</code>はあるが、<code>it</code>はなく、代わりに<code>test</code>を使います。</p><p>JavaScript&#x2F;TypeScriptのユニットテストのフレームワークとして高いシェアを誇ってきたのがMetaの作成したJestです。テストの書き方としてはJestを参考にしたのか、ほぼそれに近い形式となっています。Jestはまだ過去のBDDフレームワークとの互換性を考慮してか<code>it</code>でも書けるようになっていましたが、Playwrightは<code>test</code>のみになっています。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test.<span class="title function_">describe</span>(<span class="string">&quot;テスト対象&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  test.<span class="title function_">beforeAll</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    準備コード</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title function_">test</span>(<span class="string">&quot;振る舞い1&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">test</span>(<span class="string">&quot;振る舞い2&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>グルーピングを行わないことも可能です。おそらくこのようにボイラープレートが少ない書き方をしたときにも違和感が出ないように(itだけ並ぶとテストに見えない)<code>it</code>ではなく<code>test</code>を選んだのではないかと思います。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test.<span class="title function_">beforeAll</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;振る舞い1&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;振る舞い2&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Playwrightが参考にしたと思われるJest、あとはCypressが内部で利用しており、用途が近いMochaと比べると以下の通りです。それぞれ微妙に違っています。</p><div class="scroll"><table><thead><tr><th></th><th>Playwright</th><th>Jest</th><th>Mocha</th></tr></thead><tbody><tr><td>import</td><td>必要</td><td>不要</td><td>不要</td></tr><tr><td>テスト</td><td><code>test(&quot;名前&quot;, テスト)</code></td><td><code>test(&quot;名前&quot;, テスト)</code>(<code>it</code>も使える)</td><td><code>it(&quot;名前&quot;, テスト)</code></td></tr><tr><td>グルーピング</td><td><code>test.describe(&quot;名前&quot;, グループ)</code></td><td><code>describe(&quot;名前&quot;, グループ)</code></td><td><code>describe(&quot;名前&quot;, グループ)</code></td></tr><tr><td>準備(各テストごと)</td><td><code>test.beforeEach(準備)</code></td><td><code>beforeEach(準備)</code></td><td><code>beforeEach(準備)</code></td></tr><tr><td>片付け(各テストごと)</td><td><code>test.afterEach(準備)</code></td><td><code>beforeEach(準備)</code></td><td><code>beforeEach(準備)</code></td></tr><tr><td>準備(グループごと)</td><td><code>test.beforeAll(準備)</code></td><td><code>beforeAll(準備)</code></td><td><code>before(準備)</code></td></tr><tr><td>片付け(グループごと)</td><td><code>test.afterAll(準備)</code></td><td><code>afterAll(準備)</code></td><td><code>after(準備)</code></td></tr></tbody></table></div><p>Jestはユニットテスト用途でPlaywrightやCypressと同時に使うことが多いので、記述が近いのは便利です。しかし完全に一致しているわけではなく必ず<code>test.</code>の前置が必要だったりします。また、並列のテストの書き方が、Jest同等の書き方(<code>test.describe.parallel</code>)は非推奨になっていたりします。ただし、今時はコード補完ができて当たり前なので、ほぼ補完で済むのでタイプ数は逆に少なくて済みます。</p><p>なお、import不要というのはテストコードを書くときは楽ではありますが、エディタ側のコードでそのキーワードを識別できるように設定が必要だったりするため、環境構築の手間暇が増えたりします。特に、JestとMochaはそれぞれで似たようなものが導入されるため、同時に利用するために設定を工夫する必要がありますが、そのような苦労はありません。</p><h1 id="テストの便利機能"><a href="#テストの便利機能" class="headerlink" title="テストの便利機能"></a>テストの便利機能</h1><p>テストにアノテーションをつけて実行を制御することがあります。</p><p>例えば、<code>test()</code>や<code>test.describe()</code>の関数名の直後に<code>.only</code>を挟み、<code>test.only()</code>や<code>test.describe.only()</code>と付けられます。<code>.only</code>以外にも、<code>.skip</code>、<code>.fixme</code>もあります。</p><p><code>.only</code>をつけると、それがついたテストのみを実行します。テストUIで起動しているときは、再実行したいテストの▶️ボタンを押せば同じことはできますが、まさにいま機能改修をしていて、該当の機能のテストだけを高速に回して動作確認したい場合などに便利です。</p><p><code>.skip</code>は逆に特定のテストの実行をスキップする場合に使います。<code>.fixme</code>も同様ですが、名前の通り不具合で一時的に実行を中止している意図を表現するのに使います。テストUIやCLIの実行結果ではこの2つはどちらもスキップ扱いで機能的な差はありません。</p><img src="/images/20230825a/スクリーンショット_2023-07-18_15.09.32.png" alt="" width="251" height="125" loading="lazy"><p>これらはCypressやJestにも類似の機能があるため、Playwrightを使っていない人にも便利でしょう。</p><h1 id="Playwrightの固有の機能"><a href="#Playwrightの固有の機能" class="headerlink" title="Playwrightの固有の機能"></a>Playwrightの固有の機能</h1><h2 id="ステップ分け"><a href="#ステップ分け" class="headerlink" title="ステップ分け"></a>ステップ分け</h2><p>ユニットテストはなるべくテストケースを小さくしよう、というのが良いテスト設計であるとされています。1つのテストケースごとに1事象のみをテストし、1つの失敗で他のテストの失敗につながらないように、というのがよく言われます。</p><p>一方で、E2Eテストはユーザーから見た1つの機能などの単位で作っていくことになります。この場合、確定ボタンを押すまでに複数のテキストボックスに値を入れたり、ウィザードのページをいくつも操作したり、一連の長い操作になることもあります。その場合に、テストの中に<code>test.step()</code>を複数個書くことで、テストケースの中を構造化できます。テストランナーのUIではPlaywrightのAPI呼び出しが全てリストアップされているので、この機能を使わなかったとしてもトラブル発生時にどこで落ちたのかは分かるには分かるのですが、長くなった場合に見分けがつきやすくなります。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> test.<span class="title function_">step</span>(<span class="string">&quot;名前&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    テストコード</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>テストUI上ではこのような感じでステップが表現されます。</p><img src="/images/20230825a/スクリーンショット_2023-07-18_14.22.39.png" alt="" width="304" height="263" loading="lazy"><p>2段以上ネストさせることもできます。</p><h2 id="タグ付け"><a href="#タグ付け" class="headerlink" title="タグ付け"></a>タグ付け</h2><p>テストの名前に <code>@タグ</code>というテキストを入れることで<a href="https://playwright.dev/docs/test-annotations#tag-tests">タグ付けしてテストのフィルタリングが可能</a>になります。例えば、本番環境で軽い確認用に幾つかのテストをピックアップして使いたい場合はテストの名前の文字列の中に <code>@validation</code>という文字列を含めておくことで、そのテストのみを選択して実行ができます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx playwright test --grep @validation</span><br></pre></td></tr></table></figure><p><code>--grep-invert</code>で含んでいないものを実行したり、<code>|</code>でORを表現したり正規表現でANDを表現することも可能です。</p><h2 id="メタデータ"><a href="#メタデータ" class="headerlink" title="メタデータ"></a>メタデータ</h2><p>テストに何かしらの追加情報を含められます。<code>type</code>と<code>description</code>の2つの属性をいくらでもつけられます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  test.<span class="title function_">info</span>().<span class="property">annotations</span>.<span class="title function_">push</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;issue&#x27;</span>, <span class="attr">description</span>: <span class="string">&#x27;https://github.com/microsoft/playwright/issues/&lt;some-issue&gt;&#x27;</span> &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>ただし、通常の実行やUIを使った実行ではこのメタデータは表示されません。HTMLのレポート出力では表示されます。</p><img src="/images/20230825a/スクリーンショット_2023-07-18_14.54.55.png" alt="" width="1032" height="597" loading="lazy"><h2 id="タイムアウト時間を伸ばす"><a href="#タイムアウト時間を伸ばす" class="headerlink" title="タイムアウト時間を伸ばす"></a>タイムアウト時間を伸ばす</h2><p>デフォルトでは1つのテストケース全体で30秒のタイムアウト時間になっていますが、<code>test.slow()</code>を呼ぶだけで3倍に伸びます。それでは足りない場合は個別に<code>test.setTimeout()</code>で伸ばします。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;slow test&#x27;</span>, <span class="keyword">async</span> (&#123; page &#125;) =&gt; &#123;</span><br><span class="line">  test.<span class="title function_">slow</span>();</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);<span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>ts</span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;very slow test&#x27;</span>, <span class="keyword">async</span> (&#123; page &#125;) =&gt; &#123;</span><br><span class="line">  test.<span class="built_in">setTimeout</span>(<span class="number">120000</span>);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Playwrightのテストランナー機能は、既存のJest&#x2F;Mochaなどに非常に近く、JavaScript系のテスティングフレームワークを使ったことがあればそれほど迷わないでしょう。一方で、後発ならではの工夫がされていたり、E2Eテストならではの<code>slow()</code>があったり、他のフレームワークをよく使っていたのにも面白い機能がいくつかあります。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20230821a/&quot;&gt;Playwright連載&lt;/a&gt;4日目です。&lt;/p&gt;
&lt;h1 id=&quot;APIのスタイル&quot;&gt;&lt;a href=&quot;#APIのスタイル&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
    <category term="TypeScript" scheme="https://future-architect.github.io/tags/TypeScript/"/>
    
    <category term="Ruby" scheme="https://future-architect.github.io/tags/Ruby/"/>
    
    <category term="テスト" scheme="https://future-architect.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="Playwright" scheme="https://future-architect.github.io/tags/Playwright/"/>
    
    <category term="TDD" scheme="https://future-architect.github.io/tags/TDD/"/>
    
    <category term="BDD" scheme="https://future-architect.github.io/tags/BDD/"/>
    
    <category term="Jest" scheme="https://future-architect.github.io/tags/Jest/"/>
    
    <category term="Mocha" scheme="https://future-architect.github.io/tags/Mocha/"/>
    
  </entry>
  
  <entry>
    <title>イチ押し。Playwrightの快適機能</title>
    <link href="https://future-architect.github.io/articles/20230824a/"/>
    <id>https://future-architect.github.io/articles/20230824a/</id>
    <published>2023-08-23T15:00:00.000Z</published>
    <updated>2023-08-25T01:27:00.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>皆さんこんにちは。踊るエンジニア木戸です。</p><p><a href="/articles/20230821a/">Playwright連載</a>3日目の今回は、その便利機能たちをCypressと比較しながら紹介します。Cypressで馴染みの便利機能がPlaywrightではどう実現されているのか、E2Eテストに関わる関係者の悩みを解決するどんな便利機能が備わっているのか、詳しく見てみましょう。</p><h1 id="テストコード生成の補助"><a href="#テストコード生成の補助" class="headerlink" title="テストコード生成の補助"></a>テストコード生成の補助</h1><p>まずはテストコードを記述する際の便利機能について紹介します。</p><p>Playwrightでは、テストケースに沿ったアクションを実行させるために、まず操作対象のDOMを取得する必要があります。Test generator機能を使用すると、実際に対象ページをブラウザで表示させ、操作対象にマウスオーバーすることで、DOMを取得するためのコードを生成してくれます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx playwright codegen アクセス先のURL</span><br></pre></td></tr></table></figure><p>例としてGoogleのトップページにアクセスして、検索フォームのDOMを取得してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx playwright codegen https://www.google.com/</span><br></pre></td></tr></table></figure><img src="/images/20230824a/image.png" alt="" width="1200" height="566" loading="lazy"><p>検索フォームにマウスオーバーすると、</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getByLabel</span>(<span class="string">&#x27;検索&#x27;</span>, &#123; <span class="attr">exact</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><p>というコマンドでアクセスできることがわかります。</p><p>また、実はDOMの取得の補助だけでなく、ボタンクリックなどのユーザ操作も含め全てのコードを自動で生成してくれます。</p><p>例としてもう一度<code>codegen</code>コマンドを実行し、開いたブラウザ上で、</p><ul><li><a href="https://www.google.com/">https://www.google.com/</a> にアクセスする</li><li>検索フォームをクリックする</li><li>「トマト」と入力する</li></ul><p>を実際に操作します。すると、<code>codegen</code>コマンド実行時にブラウザとは別に開くもう一つのウィンドウ（Playwright Inspector）にて、上記の操作を実行するテストコードが自動生成されました。</p><img src="/images/20230824a/image_2.png" alt="" width="879" height="336" loading="lazy"><p>例えば今回生成されたコードの5行目は不要なので、生成されたコードを微修正する必要がありますが、0からコードを書くよりも圧倒的に簡単にテストコードが作れました。</p><p>Playwright Inspectorウィンドウ左上のRecordボタンで、操作履歴をコードに反映するかどうかも切り替え可能です。</p><p>さらに、<code>codegen</code>コマンド実行時に開くブラウザは、ウィンドウサイズやデバイスを指定でき、指定した条件を反映したテストコードの生成ができるようになっています。</p><ul><li><p>例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx playwright codegen --viewport-size=800,600 https://www.google.com/</span><br></pre></td></tr></table></figure></li></ul><h2 id="Cypressとの比較"><a href="#Cypressとの比較" class="headerlink" title="Cypressとの比較"></a>Cypressとの比較</h2><p>テストコードの生成補助機能は、CypressではCypress Studioという機能を用いて実現されています。Experimental機能なのでデフォルトでは使用できませんが、設定ファイルを少し編集するだけで使用できます。Playwrightの違いとしては、生成可能なコードの幅広さにありそうです。Cypress, Playwrightともに、「ページへ遷移する」「ボタンをクリックする」「文字を入力する」のようなユーザアクションのテストコード化に対応していますが、Cypressはこれに加えてアサーション（「指定の要素に〇〇という文字列が含まれるべき」のようなチェック）のテストコードまで生成できます。</p><p>とは言え、E2Eテストを書く際に大きく負担になりがちなユーザアクション部分だけでも対応しているPlaywrightは、Cypressに近しい補助機能を提供してくれていると言えるでしょう。</p><h1 id="テストを並列実行する"><a href="#テストを並列実行する" class="headerlink" title="テストを並列実行する"></a>テストを並列実行する</h1><p>Playwrightでは<code>test()</code>コマンドで記述されたテストそれぞれは基本的に独立しており、各テストケースでの操作は互いに影響しない前提で設計されています。（複数の<code>test()</code>コマンドケースをリセット無しで直列で実行するオプションもあります。）</p><p>この独立性から、テストの並列実行がしやすくなります。Playwrightでは、ワーカープロセスという単位でテストの実行環境を管理し、ワーカープロセスが複数ある場合はそれぞれが独自のブラウザを起動します。</p><p>テスト実行時にワーカープロセス数を指定することで、任意の数での並列実行が可能です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx playwright <span class="built_in">test</span> --workers 4</span><br></pre></td></tr></table></figure><p>また、デフォルトではテストファイル1つにつき1ワーカープロセスを使用し、同一ファイル内のテストは独立に順番に実行されます。ですが、同一のテストファイル内でワーカープロセスを分離したい場合は、ファイル内で</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.<span class="property">describe</span>.<span class="title function_">configure</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;parallel&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><p>の設定を記述することで実現できます。</p><p>並列実行した時のパフォーマンスはマシンの性能にもよりますが、ある一定数以上は並列数を増やしても効率はあがりません。ですが、実行環境を複数用意できる場合は、テスト実行環境の物理的な分離が可能となっています。</p><p>テスト全体を任意の数nに分離し、その1つ目のテストセットを実行したい場合は、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx playwright <span class="built_in">test</span> --shard=1/n</span><br></pre></td></tr></table></figure><p>のように実行してあげることで実現できます。</p><p>自由にスケールできるCI環境などで活用できる機能です。</p><h2 id="Cypressとの比較-1"><a href="#Cypressとの比較-1" class="headerlink" title="Cypressとの比較"></a>Cypressとの比較</h2><p>テストの並列実行機能はCypressにもありますが、CI環境でCypress Cloudと連携することで実現できます。ローカル環境で並列実行するためには外部ライブラリの使用が必要ですし、Cypress Cloudに保存可能なResultsは有限もしくは件数によって課金されます。</p><p>一方、Playwrightでは標準機能として並列実行がサポートされており、比較的使いやすいので、テストが多く並列実行で実行時間を大幅に短縮したいといった環境ではおすすめです。</p><h1 id="テストをトレースする"><a href="#テストをトレースする" class="headerlink" title="テストをトレースする"></a>テストをトレースする</h1><p>自動テストを書く際や運用に組み込む際、気になる大きなポイントの1つはそのトレースのしやすさですよね。今書いているテストが意図通りに動いているか、実行したテストに失敗した時それは何が原因か、など補助する機能が快適に自動テストライフを送るために必要です。</p><p>Playwrightでは、実行したテストを後からトレースし、デバッグに役立てるこ機能があります。トレースの方法は、「UIモードで実行しリアルタイムで確認する」方法と、「CLI環境で実行しレポートを確認する」方法とに大別されます。</p><h2 id="UIモードでテストを実行しリアルタイムでトレースする"><a href="#UIモードでテストを実行しリアルタイムでトレースする" class="headerlink" title="UIモードでテストを実行しリアルタイムでトレースする"></a>UIモードでテストを実行しリアルタイムでトレースする</h2><p>UIモードでPlaywrightを実行すると、専用のウィンドウが立ち上がり、個別にテストを実行したり、その様子を確認したりできます。<br>UIモードでPlaywrightを実行するには次のようにコマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx playwright <span class="built_in">test</span> --ui</span><br></pre></td></tr></table></figure><p>実行すると画像のように専用のウィンドウが立ち上がりました。</p><img src="/images/20230824a/image_3.png" alt="" width="1200" height="523" loading="lazy"><p>画面左に、プロジェクト内で作成したテストの一覧が並んでいます。それぞれのディレクトリやファイルの再生マークをクリックすることで、任意の単位でテストを実行できます。テスト実行の様子は画面右のウィンドウで確認でき、時間を戻したり進めたり、エラーが起きた箇所を確認したりできます。</p><img src="/images/20230824a/image_4.png" alt="" width="1038" height="669" loading="lazy"><h2 id="CLI実行し後からレポートを確認する"><a href="#CLI実行し後からレポートを確認する" class="headerlink" title="CLI実行し後からレポートを確認する"></a>CLI実行し後からレポートを確認する</h2><p>UIモードでなくCLI上でテストを実行する場合は、レポート機能を使って後からテストをトレースできます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx playwright <span class="built_in">test</span> --trace on</span><br></pre></td></tr></table></figure><p>上記のように<code>trace</code>フラグを<code>on</code>にしてテストを実行した後、下記のコマンドを実行することでトレース可能なレポートを表示できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx playwright show-report</span><br></pre></td></tr></table></figure><img src="/images/20230824a/image_5.png" alt="" width="1041" height="337" loading="lazy"><p>例えば、失敗しているテストファイルを開くと、レポートの標準機能として表示される「エラーログ」や「各テストステップごとのログ」に加えて、「トレース」欄が表示されています。</p><img src="/images/20230824a/image_6.png" alt="" width="1058" height="708" loading="lazy"><p>これをクリックするとUIモードでの実行時と同じような画面で、テストの実際の進行の様子を確認できます。</p><img src="/images/20230824a/image_7.png" alt="" width="1200" height="669" loading="lazy"><h2 id="Cypressとの比較-2"><a href="#Cypressとの比較-2" class="headerlink" title="Cypressとの比較"></a>Cypressとの比較</h2><p>CypressにもローカルのGUIでテストランナーを開いたり、Cypress Cloudと連携したりすることで、実行の様子をウォッチしたりデバッグに役立てることができます。CypressもPlaywrightも、テスト結果をトレースするための十分な機能が揃っていると言えそうです。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ここまで、Playwightのおすすめ機能をいくつか紹介しました。</p><p>以前弊社技術ブログで連載として取り上げたCypressと比べても劣らない便利機能を取り揃えているようです。</p><p>連載次回は澁川さんの<a href="/articles/20230825a/">Playwrightのテストランナーを他のテストライブラリと比較する</a>です。お楽しみに！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;皆さんこんにちは。踊るエンジニア木戸です。&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="E2Eテスト" scheme="https://future-architect.github.io/tags/E2E%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="Playwright" scheme="https://future-architect.github.io/tags/Playwright/"/>
    
  </entry>
  
  <entry>
    <title>Playwrightの環境構築（VSCode Dev Container編）</title>
    <link href="https://future-architect.github.io/articles/20230823a/"/>
    <id>https://future-architect.github.io/articles/20230823a/</id>
    <published>2023-08-22T15:00:00.000Z</published>
    <updated>2023-08-24T03:00:40.123Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20230821a/">Playwright連載</a>の2本目です。</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p><a href="https://code.visualstudio.com/docs/devcontainers/containers">VSCode Dev Container</a>を利用してPlaywrightの実行環境をコンテナ上に構築する手順を説明します。</p><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul><li>Docker</li><li>VSCode with <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers">Dev Containers</a> Extension</li></ul><h2 id="X-Window-System"><a href="#X-Window-System" class="headerlink" title="X Window System"></a>X Window System</h2><p>Playwrightをデバッグ起動したりUIモードで起動したりする場合、コンテナ上で起動するGUIをホストOS上に表示する必要があるため、X Window Systemを利用します。（Playwrightをコマンドラインのみで利用する場合、本手順は不要です。）<br>なお、何も設定をせずにコンテナ上でGUIを起動しようとすると<code>Missing X server or $DISPLAY</code>のようなエラーが発生します。</p><p>今回はホストOSとしてMacを利用しているため <a href="https://www.xquartz.org/">Xquartz</a> の導入手順を紹介します。<br>Windowsの方は<a href="http://www.straightrunning.com/XmingNotes/">Xming</a>などを利用してください。</p><p>Xquartzをインストールし、コンテナからのアクセスを許可するため「ネットワーク・クライアントからの接続を許可」します。<br>下記はコマンドラインから実行していますがGUI上から実施していただいても構いません。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install Xquartz</span></span><br><span class="line">$ brew install --cask xquartz</span><br><span class="line"><span class="comment"># Go to Preferences -&gt; Security, and check “Allow connections from network clients”</span></span><br><span class="line">$ defaults write org.xquartz.X11 nolisten_tcp 0</span><br></pre></td></tr></table></figure><p>設定後はXquartzを再起動して設定を反映させます。<br>その後ローカルホストからのアクセスを許可した状態（<code>xhost +localhost</code> or <code>xhost +</code>）で Xquartzをさせておけば準備は完了です。</p><h2 id="コンテナ構成"><a href="#コンテナ構成" class="headerlink" title="コンテナ構成"></a>コンテナ構成</h2><p><code>devcontainer.json</code> を抜粋します。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// For format details, see https://aka.ms/devcontainer.json. For config options, see the</span></span><br><span class="line"><span class="comment">// README at: https://github.com/devcontainers/templates/tree/main/src/debian</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Playwright&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile</span></span><br><span class="line">  <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mcr.microsoft.com/playwright:v1.36.1&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Configure tool-specific properties.</span></span><br><span class="line">  <span class="attr">&quot;customizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vscode&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ms-playwright.playwright&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;mounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="comment">// For node modules.</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;volume&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;localWorkspaceFolderBasename&#125;-node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;containerWorkspaceFolder&#125;/node_modules&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// For X Window System.</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bind&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/tmp/.X11-unix&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/tmp/.X11-unix&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;containerEnv&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// For X Window System.</span></span><br><span class="line">    <span class="attr">&quot;DISPLAY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;host.docker.internal:0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Container-Image"><a href="#Container-Image" class="headerlink" title="Container Image"></a>Container Image</h3><p>Playwright公式の<a href="https://playwright.dev/docs/docker">Docker Image</a>を利用するのが良いでしょう。<br><a href="https://github.com/microsoft/playwright/blob/release-1.36/utils/docker/Dockerfile.jammy#L39">Dockerfile</a>を見ると <code>playwright-core install --with-deps</code> でブラウザ含め必要な依存関係をインストールしてくれています。</p><p>利用可能なタグは<a href="https://mcr.microsoft.com/en-us/product/playwright/tags">こちら</a>から確認できます。</p><h3 id="VSCode-Extension"><a href="#VSCode-Extension" class="headerlink" title="VSCode Extension"></a>VSCode Extension</h3><p>最低限 <a href="https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright">Playwright Test for VSCode</a>は導入しておくと良いでしょう。</p><h3 id="X-Window-System-1"><a href="#X-Window-System-1" class="headerlink" title="X Window System"></a>X Window System</h3><p><code>/tmp/.X11-unix</code>をホスト側とコンテナ側で共有することにより、ドメインソケットを共有します。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;mounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="comment">// For X Window System.</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bind&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/tmp/.X11-unix&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/tmp/.X11-unix&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>ホストOSのディスプレイを利用するため <code>DISPLAY</code> 環境変数を指定します。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;containerEnv&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// For X Window System.</span></span><br><span class="line">  <span class="attr">&quot;DISPLAY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;host.docker.internal:0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="GUI起動確認"><a href="#GUI起動確認" class="headerlink" title="GUI起動確認"></a>GUI起動確認</h2><p>コンテナ上でGUIを起動すると、ホストOS側で表示されることが確認できました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx playwright <span class="built_in">test</span> --ui</span><br></pre></td></tr></table></figure><img src="/images/20230823a/Playwright.png" alt="Playwright.png" width="1200" height="738" loading="lazy"><hr><p>次は木戸さんの<a href="/articles/20230824a/">イチ押し。Playwrightの快適機能</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20230821a/&quot;&gt;Playwright連載&lt;/a&gt;の2本目です。&lt;/p&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="環境構築" scheme="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"/>
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="VSCode" scheme="https://future-architect.github.io/tags/VSCode/"/>
    
    <category term="Playwright" scheme="https://future-architect.github.io/tags/Playwright/"/>
    
  </entry>
  
  <entry>
    <title>Playwrightのインストール方法と使い方</title>
    <link href="https://future-architect.github.io/articles/20230822a/"/>
    <id>https://future-architect.github.io/articles/20230822a/</id>
    <published>2023-08-21T15:00:00.000Z</published>
    <updated>2023-08-23T04:21:50.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>藤戸四恩です。<a href="/articles/20230821a/">Playwright連載</a>の1本目は環境構築について説明します。</p><h2 id="Playwrightとは"><a href="#Playwrightとは" class="headerlink" title="Playwrightとは"></a>Playwrightとは</h2><p>Playwrightは、Microsoftが開発したE2Eテストフレームワークです。Cypressと同様に、Chromium、Firefox、Safariなどのブラウザ上でE2Eテストの実行を自動化できます。</p><h2 id="Playwrightのインストール"><a href="#Playwrightのインストール" class="headerlink" title="Playwrightのインストール"></a>Playwrightのインストール</h2><p>Playwrightをインストールするには、npm yarn pnpmのいずれを使用してインストールすることができます。</p><p>今回は、npmを使用します。</p><p>Cypressによるテストを構築したいディレクトリ下で、以下のコマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init playwright@latest</span><br></pre></td></tr></table></figure><p>実行すると初期化に伴うオプションの変更をあれこれ聞かれます。 特にこだわりがなければそのままEnterを押していってください。空白で送信した場合はデフォルト値で設定されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$ npm init playwright@latest</span><br><span class="line"></span><br><span class="line">Need to install the following packages:</span><br><span class="line">  create-playwright@1.17.128</span><br><span class="line">Ok to proceed? (y)</span><br><span class="line"></span><br><span class="line">...略...</span><br><span class="line"></span><br><span class="line">✔ Success! Created a Playwright Test project at /Users/shion/dev/playwright</span><br><span class="line"></span><br><span class="line">Inside that directory, you can run several commands:</span><br><span class="line"></span><br><span class="line">  npx playwright <span class="built_in">test</span></span><br><span class="line">    Runs the end-to-end tests.</span><br><span class="line"></span><br><span class="line">  npx playwright <span class="built_in">test</span> --ui</span><br><span class="line">    Starts the interactive UI mode.</span><br><span class="line"></span><br><span class="line">  npx playwright <span class="built_in">test</span> --project=chromium</span><br><span class="line">    Runs the tests only on Desktop Chrome.</span><br><span class="line"></span><br><span class="line">  npx playwright <span class="built_in">test</span> example</span><br><span class="line">    Runs the tests <span class="keyword">in</span> a specific file.</span><br><span class="line"></span><br><span class="line">  npx playwright <span class="built_in">test</span> --debug</span><br><span class="line">    Runs the tests <span class="keyword">in</span> debug mode.</span><br><span class="line"></span><br><span class="line">  npx playwright codegen</span><br><span class="line">    Auto generate tests with Codegen.</span><br><span class="line"></span><br><span class="line">We suggest that you begin by typing:</span><br><span class="line"></span><br><span class="line">    npx playwright <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">And check out the following files:</span><br><span class="line">  - ./tests/example.spec.ts - Example end-to-end <span class="built_in">test</span></span><br><span class="line">  - ./tests-examples/demo-todo-app.spec.ts - Demo Todo App end-to-end tests</span><br><span class="line">  - ./playwright.config.ts - Playwright Test configuration</span><br><span class="line"></span><br><span class="line">Visit https://playwright.dev/docs/intro <span class="keyword">for</span> more information. ✨</span><br><span class="line"></span><br><span class="line">Happy hacking! 🎭</span><br></pre></td></tr></table></figure><p>Happy hacking!と表示されたらインストール成功です。</p><h2 id="Playwrightの基本的な使い方"><a href="#Playwrightの基本的な使い方" class="headerlink" title="Playwrightの基本的な使い方"></a>Playwrightの基本的な使い方</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;テストケース名&#x27;</span>, <span class="keyword">async</span> (&#123; page &#125;) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 処理内容</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>test関数にテストケースを記載を行っていきます。test関数の第1引数には、テストケース名、第2引数にはテスト関数を書きます。</p><p>ここでは、よく使う基本的なコマンドをいくつか紹介します。</p><h3 id="Webサイトを訪れる"><a href="#Webサイトを訪れる" class="headerlink" title="Webサイトを訪れる"></a>Webサイトを訪れる</h3><figure class="highlight ts"><figcaption><span>test1.spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; test, expect, <span class="keyword">type</span> <span class="title class_">Page</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@playwright/test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;webサイトを訪れる&#x27;</span>, <span class="keyword">async</span> (&#123; page &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://playwright.dev/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>page.goto</code>関数内で指定したURLへ遷移します。</p><h3 id="要素の取得"><a href="#要素の取得" class="headerlink" title="要素の取得"></a>要素の取得</h3><p>要素を取得する際は、コードジェネレータを使って要素名を取得するのが便利です。</p><p>下記のコマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx playwright codegen https://playwright.dev/</span><br></pre></td></tr></table></figure><p>実行すると下図のように playwright.devが立ち上がります。</p><img src="/images/20230822a/画像2.png" alt="" width="1200" height="750" loading="lazy"><p>今回はgithubのアイコンをカーソルを当てると<code>getByLabel(&#39;GitHub repository&#39;)</code>と表示されます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.<span class="title function_">getByLabel</span>(<span class="string">&#x27;GitHub repository&#x27;</span>)</span><br></pre></td></tr></table></figure><p>getByLabel以外にも要素を取得する方法はあります。</p><ul><li><a href="https://playwright.dev/docs/locators">公式ドキュメント_locators</a></li></ul><h3 id="要素を操作"><a href="#要素を操作" class="headerlink" title="要素を操作"></a>要素を操作</h3><p>GitHubアイコンの要素を取得できたので、クリックをしたいと思います。</p><p>クリックは <code>locator.click()</code>です。</p><p>※locatorとは、ページ上の要素をいつでも見つけるための方法で先ほどのgetByLabel()などがあてはまります。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.<span class="title function_">getByLabel</span>(<span class="string">&#x27;GitHub repository&#x27;</span>).<span class="title function_">click</span>();</span><br></pre></td></tr></table></figure><p>また、画面遷移との実装を合わせると下記のようになります。</p><figure class="highlight ts"><figcaption><span>test1.spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; test, expect, <span class="keyword">type</span> <span class="title class_">Page</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@playwright/test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Githubアイコンをクリック&#x27;</span>, <span class="keyword">async</span> (&#123; page &#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://playwright.dev/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Click the get started link.</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">getByLabel</span>(<span class="string">&#x27;GitHub repository&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="チェックする"><a href="#チェックする" class="headerlink" title="チェックする"></a>チェックする</h2><p>GitHubのアイコンをクリックした際に遷移先のURLに<code>playwright</code>が含まれることをテストします。</p><p>アサーションにもいくつかの種類があります。</p><ul><li><a href="https://playwright.dev/docs/test-assertions">公式ドキュメント_assertions</a></li></ul><p>今回はURLに<code>playwright</code>が含まれているのかを確認するため<code>toHaveURL()</code>を使用します。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="title function_">expect</span>(page).<span class="title function_">toHaveURL</span>(<span class="regexp">/.*playwright/</span>);</span><br></pre></td></tr></table></figure><p>これまでの実装と合わせると下記のようになります。</p><figure class="highlight ts"><figcaption><span>test1.spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; test, expect, <span class="keyword">type</span> <span class="title class_">Page</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@playwright/test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;githubアイコンの遷移先URLにplaywrightが含まれる&#x27;</span>, <span class="keyword">async</span> (&#123; page &#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://playwright.dev/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Click the get started link.</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">getByLabel</span>(<span class="string">&#x27;GitHub repository&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Expects the URL to contain intro.</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">expect</span>(page).<span class="title function_">toHaveURL</span>(<span class="regexp">/.*playwright/</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="テストの実行"><a href="#テストの実行" class="headerlink" title="テストの実行"></a>テストの実行</h2><p>全てのテストを実行するには以下のコマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npx playwright <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">Running 9 tests using 4 workers</span><br><span class="line">  9 passed (15.1s)</span><br><span class="line"></span><br><span class="line">To open last HTML report run:</span><br><span class="line"></span><br><span class="line">  npx playwright show-report</span><br></pre></td></tr></table></figure><p>用意された9件のテストすべてに成功（passed）したことが表示されました。</p><h3 id="テストファイルの指定"><a href="#テストファイルの指定" class="headerlink" title="テストファイルの指定"></a>テストファイルの指定</h3><p>ファイル名(今回はtest1.spec.ts)を指定して実行するには以下のコマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npx playwright <span class="built_in">test</span> tests/test1.spec.ts</span><br><span class="line"></span><br><span class="line">Running 3 tests using 3 workers</span><br><span class="line">  3 passed (4.3s)</span><br><span class="line"></span><br><span class="line">To open last HTML report run:</span><br><span class="line"></span><br><span class="line">  npx playwright show-report</span><br></pre></td></tr></table></figure><p>作成した3件のテストすべてに成功（passed）したことが表示されました。</p><h2 id="テストレポートの出力"><a href="#テストレポートの出力" class="headerlink" title="テストレポートの出力"></a>テストレポートの出力</h2><p>Playwrightでは実行結果をHTMLのレポートとして表示することができます。</p><p>表示するには以下のコマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx playwright show-report</span><br></pre></td></tr></table></figure><p>実行するとブラウザ上で下図のように表示されます。</p><img src="/images/20230822a/画像1.png" alt="" width="1060" height="346" loading="lazy"><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>Playwrightのインストール方法と基本的な使い方を紹介しました。</p><p>明日は、武田さんの<a href="/articles/20230823a/">Playwrightの環境構築（VSCode Dev Container編）</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;藤戸四恩です。&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="環境構築" scheme="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"/>
    
    <category term="Playwright" scheme="https://future-architect.github.io/tags/Playwright/"/>
    
  </entry>
  
  <entry>
    <title>Playwright連載始まります</title>
    <link href="https://future-architect.github.io/articles/20230821a/"/>
    <id>https://future-architect.github.io/articles/20230821a/</id>
    <published>2023-08-20T15:00:00.000Z</published>
    <updated>2023-08-29T01:19:11.555Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230821a/playwright.png" alt="" width="800" height="379"><p>E2Eフレームワークとして高い人気を誇ってきたのがCypressです。使いやすいテストランナー、わかりやすいテスト結果、TypeScriptの組み込みサポート、プラグインによる拡張、(Seleniumと比較して)高速な実行などを提供しています。フューチャー社内でも使っているプロジェクトがいくつもあり、過去にCypress連載をブログ上で行い、それがきっかけとなってSoftware Designに連載も行いました。</p><p>一方で、現在人気が高まりつつあって、Cypressを追い抜こうとしているのがPlaywrightです。かなりCypressを意識して機能追加を行なってきている印象があります。現時点では特徴的なタイムトラベルデバッガー（過去の履歴すべてを保持しておいて気軽に前後DOMの状態を比較したりできる)、スクリーンショット、どちらもExperimentalなコンポーネントテストなど、できることはほぼ互角と言える状況です。</p><h2 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h2><p>全部で7記事を予定しています。</p><div class="scroll"><table><thead><tr><th>日付</th><th>タイトル</th><th>投稿者</th></tr></thead><tbody><tr><td>8&#x2F;22</td><td>藤戸四恩</td><td><a href="/articles/20230822a/">Playwrightのインストール方法と使い方</a></td></tr><tr><td>8&#x2F;23</td><td>武田大輝</td><td><a href="/articles/20230823a/">Playwrightの環境構築（VSCode Dev Container編）</a></td></tr><tr><td>8&#x2F;24</td><td>木戸俊輔</td><td><a href="/articles/20230824a/">イチ押し。Playwrightの快適機能</a></td></tr><tr><td>8&#x2F;25</td><td>澁川喜規</td><td><a href="/articles/20230825a/">Playwrightのテストランナーを他のテストライブラリと比較する</a></td></tr><tr><td>8&#x2F;28</td><td>枇榔晃裕</td><td><a href="/articles/20230828a/">PlaywrightをGitHubActions実行したときの初期処理についての試行錯誤</a></td></tr><tr><td>8&#x2F;29</td><td>武田大輝</td><td><a href="/articles/20230829a/">クライアント&#x2F;サーバ構成でみるPlaywright</a></td></tr><tr><td>8&#x2F;30</td><td>小澤泰河</td><td>(仮)Next.js × Playwright の E2E テスト入門ハンズオン（App Router &#x2F; Tailwind CSS &#x2F; Headless UI）</td></tr></tbody></table></div><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>どれだけ人気が高まっているかGoogleトレンドを見てみましょう。世界的傾向をみると、３年前はほとんどトレンドに表れていなかったPlaywrightですが、1.5年ほど前から徐々に伸び始めていることがわかります。直近ではCypressの半分程度まで上がってきています。</p><img src="/images/20230821a/スクリーンショット_2023-07-25_9.55.13.png" alt="" width="1173" height="699" loading="lazy"><p>日本だけに限定すると、ここ1ヶ月はCypressよりもPlaywrightの方が上となっています。</p><img src="/images/20230821a/スクリーンショット_2023-07-25_9.54.32.png" alt="" width="1174" height="443" loading="lazy"><p>本連載ではなぜPlaywrightがこれほど人気になっているのかが明らかになると思います。逆にもしかしたらライバルの良いところも見つかるかもしれません。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230821a/playwright.png&quot; alt=&quot;&quot; width=&quot;800&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="Cypress" scheme="https://future-architect.github.io/tags/Cypress/"/>
    
    <category term="E2Eテスト" scheme="https://future-architect.github.io/tags/E2E%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="Playwright" scheme="https://future-architect.github.io/tags/Playwright/"/>
    
  </entry>
  
  <entry>
    <title>Go1.21:slicesパッケージのチートシート</title>
    <link href="https://future-architect.github.io/articles/20230816a/"/>
    <id>https://future-architect.github.io/articles/20230816a/</id>
    <published>2023-08-15T15:00:00.000Z</published>
    <updated>2023-08-16T07:06:14.283Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230816a/eyecatch-20230814.png" alt="" width="1200" height="675" loading="lazy"><p>The Gopher character is based on the Go mascot designed by <a href="http://reneefrench.blogspot.com/">Renée French</a>.</p><p>Gopherのイラストは<a href="https://github.com/egonelbre/gophers">egonelbre&#x2F;gophers</a>を利用しました。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>本記事は<a href="/articles/20230731a/">Go1.21連載</a>の記事です。</p><p>こんにちは。TIG&#x2F;EXユニット所属宮永です。</p><p>先日、第一回<a href="https://nihonisankentei.com/">日本遺産検定</a>に晴れて合格し、日本遺産ソムリエになりました。夏の旅行先をまだお決めでない方は、<a href="https://japan-heritage.bunka.go.jp/ja/">日本遺産公式サイト</a>を参考にして、日本各地の魅力的なスポットを訪れてみてはいかがでしょうか。</p><blockquote><p>日本遺産については<a href="https://japan-heritage.bunka.go.jp/ja/about/">公式サイト</a>の説明が非常にわかりやすいのでご覧になってください。</p></blockquote><hr><p>さて、記事のメインテーマとは異なる事柄を挟みましたが、ここからはGo1.21に追加されたslicesパッケージの解説を行います。</p><p>Go1.21のアップデート内容に関しては、すでに多くの解説記事が公開されています。</p><p>今回注目するslicesパッケージは、Go1.21以前にはx&#x2F;exp&#x2F;slicesとして運用されていたものが正式に取り込まれ、多数の関数が追加されたものです。この記事では、それを「slicesパッケージのチートシート」としてまとめ、解説します。</p><h1 id="記事の構成"><a href="#記事の構成" class="headerlink" title="記事の構成"></a>記事の構成</h1><p>本記事ではGo1.21で追加されたslicesパッケージを以下5つのカテゴリに分類し、それぞれ使い方などを解説します。また、末尾にはソートされたスライス用の<a href="https://github.com/shibukawa/sortedslices">sortedslicesパッケージ</a>を渋川さん(<a href="https://twitter.com/shibu_jp">@shibu_jp</a>)が作成されているので簡単に紹介しています。</p><ul><li><a href="#slices%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E6%A9%9F%E8%83%BD%E7%B4%B9%E4%BB%8B">slicesパッケージ機能紹介</a><ul><li><a href="#%E6%A4%9C%E7%B4%A2%E9%96%A2%E9%80%A3">検索関連</a></li><li><a href="#%E6%93%8D%E4%BD%9C%E9%96%A2%E9%80%A3">操作関連</a></li><li><a href="#%E3%82%BD%E3%83%BC%E3%83%88%E9%96%A2%E9%80%A3">ソート関連</a></li><li><a href="#%E6%AF%94%E8%BC%83%E9%96%A2%E9%80%A3">比較関連</a></li><li><a href="#%E6%9C%80%E5%A4%A7-%E6%9C%80%E5%B0%8F%E9%96%A2%E9%80%A3">最大-最小関連</a></li></ul></li><li><a href="#%E7%95%AA%E5%A4%96%E7%B7%A8sortedslices%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8">番外編 sortedslicesパッケージ</a></li></ul><h1 id="slicesパッケージ機能紹介"><a href="#slicesパッケージ機能紹介" class="headerlink" title="slicesパッケージ機能紹介"></a>slicesパッケージ機能紹介</h1><p>関数の説明とサンプルコードを紹介します（公式のサンプルが存在する場合、原則そのまま引用しています。ない場合は適宜補完しています）</p><p>また、感想も適宜コメントしています。</p><p><a href="https://pkg.go.dev/slices@master">本家のGo Docsはこちら</a></p><h2 id="検索関連"><a href="#検索関連" class="headerlink" title="検索関連"></a>検索関連</h2><div class="scroll"><table><thead><tr><th>関数名</th><th>説明</th></tr></thead><tbody><tr><td><strong>BinarySearch</strong></td><td>スライスから要素を二分探索します</td></tr><tr><td><strong>BinarySearchFunc</strong></td><td>比較関数を使用して要素を二分探索します</td></tr><tr><td><strong>Contains</strong></td><td>スライスが要素を含むかを確認します</td></tr><tr><td><strong>ContainsFunc</strong></td><td>指定の関数を満たす要素がスライスに含まれているか確認します</td></tr><tr><td><strong>Index</strong></td><td>指定の要素のインデックスを返します</td></tr><tr><td><strong>IndexFunc</strong></td><td>指定の関数を満たす要素のインデックスを返します</td></tr></tbody></table></div><h3 id="BinarySearch-x2F-BinarySearchFunc"><a href="#BinarySearch-x2F-BinarySearchFunc" class="headerlink" title="BinarySearch&#x2F;BinarySearchFunc"></a><strong>BinarySearch&#x2F;BinarySearchFunc</strong></h3><ul><li><p>説明</p><ul><li>スライスの中に指定した要素が存在するか二分探索します</li><li>BinarySearhcを適用するスライスはソートされている必要があります</li><li>戻値として要素のインデックスと存在可否を示すboolが返却されます<ul><li>スライスに要素が含まれた場合はboolがtrueとなり、要素のインデックスを返却します</li><li>スライスに要素が含まれない場合、boolはfalseとなり、<strong>要素が存在するべきインデックスを返却します</strong></li></ul></li></ul></li><li><p>コメント</p><ul><li>要素が存在しない場合に挿入すべき箇所が即座にわかるという点で太字の機能は意外と便利な機能だと思います</li><li>適用するスライスがソートされているという前提が注意するべき点ですね</li></ul></li></ul><p>▼BinarySearchの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">names := []<span class="type">string</span>&#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Vera&quot;</span>&#125;</span><br><span class="line">n, found := slices.BinarySearch(names, <span class="string">&quot;Vera&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;Vera:&quot;</span>, n, found)</span><br><span class="line">n, found = slices.BinarySearch(names, <span class="string">&quot;Bill&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;Bill:&quot;</span>, n, found)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">Vera: 2 true</span><br><span class="line">Bill: 1 false</span><br></pre></td></tr></table></figure><p>▼BinarySearchFuncの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;cmp&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line">people := []Person&#123;</span><br><span class="line">&#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">55</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Bob&quot;</span>, <span class="number">24</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Gopher&quot;</span>, <span class="number">13</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">n, found := slices.BinarySearchFunc(people, Person&#123;<span class="string">&quot;Bob&quot;</span>, <span class="number">0</span>&#125;, <span class="function"><span class="keyword">func</span><span class="params">(a, b Person)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cmp.Compare(a.Name, b.Name)</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(<span class="string">&quot;Bob:&quot;</span>, n, found)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">Bob: 1 true</span><br></pre></td></tr></table></figure><h3 id="Contains-x2F-ContainsFunc"><a href="#Contains-x2F-ContainsFunc" class="headerlink" title="Contains&#x2F;ContainsFunc"></a><strong>Contains&#x2F;ContainsFunc</strong></h3><ul><li>説明<ul><li>スライスの中に指定した要素が存在するか探索します</li><li>戻値として存在可否を示すboolが返却されます</li><li>ContainsFuncでは指定した関数を満たす要素が存在する場合trueを返却します</li></ul></li><li>コメント<ul><li>個人的にはslicesパッケージの中で一番利用している関数です</li><li>内部的には次に説明するIndexを呼び出しています</li></ul></li></ul><p>▼Containsの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">numbers := []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">42</span>, <span class="number">-10</span>, <span class="number">8</span>&#125;</span><br><span class="line">hasNegative := slices.Contains(numbers, <span class="number">-10</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;Has a negative:&quot;</span>, hasNegative)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">Has a negative: true</span><br></pre></td></tr></table></figure><p>▼ContainsFuncの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">numbers := []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">42</span>, <span class="number">-10</span>, <span class="number">8</span>&#125;</span><br><span class="line">hasNegative := slices.ContainsFunc(numbers, <span class="function"><span class="keyword">func</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n &lt; <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(<span class="string">&quot;Has a negative:&quot;</span>, hasNegative)</span><br><span class="line">hasOdd := slices.ContainsFunc(numbers, <span class="function"><span class="keyword">func</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n%<span class="number">2</span> != <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(<span class="string">&quot;Has an odd number:&quot;</span>, hasOdd)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">Has a negative: true</span><br><span class="line">Has an odd number: false</span><br></pre></td></tr></table></figure><h3 id="Index-x2F-IndexFunc"><a href="#Index-x2F-IndexFunc" class="headerlink" title="Index&#x2F;IndexFunc"></a><strong>Index&#x2F;IndexFunc</strong></h3><ul><li>説明<ul><li>スライスの中に指定した要素が存在する場合インデックスを返却します</li><li>存在しない場合は-1を返却します</li></ul></li><li>コメント<ul><li>こちらもContains同様シンプルで使い勝手が良さそうですね</li></ul></li></ul><p>▼Indexの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">numbers := []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">42</span>, <span class="number">8</span>&#125;</span><br><span class="line">fmt.Println(slices.Index(numbers, <span class="number">8</span>))</span><br><span class="line">fmt.Println(slices.Index(numbers, <span class="number">7</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><p>▼IndexFuncの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">numbers := []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">42</span>, <span class="number">-10</span>, <span class="number">8</span>&#125;</span><br><span class="line">i := slices.IndexFunc(numbers, <span class="function"><span class="keyword">func</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n &lt; <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(<span class="string">&quot;First negative at index&quot;</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">First negative at index 2</span><br></pre></td></tr></table></figure><h2 id="操作関連"><a href="#操作関連" class="headerlink" title="操作関連"></a>操作関連</h2><div class="scroll"><table><thead><tr><th>関数名</th><th>説明</th></tr></thead><tbody><tr><td><strong>Clip</strong></td><td>スライスの未使用のキャパシティを取り除きます</td></tr><tr><td><strong>Clone</strong></td><td>スライスのクローンを作成します</td></tr><tr><td><strong>Compact</strong></td><td>連続する同じ要素を削除したスライスを返します</td></tr><tr><td><strong>CompactFunc</strong></td><td>指定の関数で重複を判定して、要素を削除したスライスを返します</td></tr><tr><td><strong>Delete</strong></td><td>スライスの範囲を削除します</td></tr><tr><td><strong>DeleteFunc</strong></td><td>指定の関数を満たす要素をスライスから削除します</td></tr><tr><td><strong>Grow</strong></td><td>スライスの容量を増やします</td></tr><tr><td><strong>Insert</strong></td><td>スライスに要素を挿入します</td></tr><tr><td><strong>Replace</strong></td><td>スライスの範囲の要素を置換します</td></tr><tr><td><strong>Reverse</strong></td><td>スライスの要素の順序を反転します</td></tr></tbody></table></div><h3 id="Clip"><a href="#Clip" class="headerlink" title="Clip"></a><strong>Clip</strong></h3><ul><li>説明<ul><li>スライスの未使用のキャパシティを取り除きます</li></ul></li><li>コメント<ul><li>英語に疎いのですが、Clipで「切り抜く」という意味なのでそのままですね<blockquote><p>《コンピュ》（画像を）切り抜く［取る］，トリミングする（out）．<br><a href="https://kotobank.jp/ejword/clip">clip(英語)の日本語訳、読み方は - コトバンク 英和辞典</a></p></blockquote></li></ul></li></ul><p>▼Clipの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;slice: %v, cap:%v , len: %v \n&quot;</span>, s, <span class="built_in">cap</span>(s), <span class="built_in">len</span>(s))</span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">0</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;slice: %v, cap:%v , len: %v \n&quot;</span>, s, <span class="built_in">cap</span>(s), <span class="built_in">len</span>(s))</span><br><span class="line">s = slices.Clip(s)</span><br><span class="line">fmt.Printf(<span class="string">&quot;slice: %v, cap:%v , len: %v \n&quot;</span>, s, <span class="built_in">cap</span>(s), <span class="built_in">len</span>(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">slice: [], cap:2 , len: 0</span><br><span class="line">slice: [0], cap:2 , len: 1</span><br><span class="line">slice: [0], cap:1 , len: 1</span><br></pre></td></tr></table></figure><h3 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a><strong>Clone</strong></h3><ul><li>説明<ul><li>スライスのコピーを作成します</li><li>コピーはShallow Copyであることに注意が必要です</li></ul></li><li>コメント<ul><li><a href="https://github.com/golang/go/wiki/SliceTricks">Slice Tricks</a>ではCopyとして説明しているのに関数名をCloneとしたのはなにか理由があるのだろうか…</li><li>↑を調べたたところ、<a href="https://github.com/golang/go/issues/45038#issuecomment-819685966">comment#45038</a>に以下のコメントがされていました<blockquote><p>Copy is no good because this is different from the builtin copy.</p></blockquote><p>Copyという名称はすでにビルトインのcopyで利用されているため避けたいということみたいですね。</p></li></ul></li></ul><p>▼Cloneの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">c := slices.Clone(s)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;s: %v \n&quot;</span>, s)</span><br><span class="line">fmt.Printf(<span class="string">&quot;c : %v \n&quot;</span>, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">s: [1 2 3 4 5]</span><br><span class="line">c : [1 2 3 4 5]</span><br></pre></td></tr></table></figure><h3 id="Delete-x2F-DeleteFunc"><a href="#Delete-x2F-DeleteFunc" class="headerlink" title="Delete&#x2F;DeleteFunc"></a><strong>Delete&#x2F;DeleteFunc</strong></h3><ul><li>説明<ul><li>指定したiからjまでを削除したスライスを返します</li><li>もとのスライスは書き換えられるため注意が必要です</li></ul></li><li>コメント<ul><li><a href="https://github.com/golang/go/wiki/SliceTricks">Slice Tricks</a>ではCutで紹介されていた内容がこのslices.Deleteです</li></ul></li></ul><p> ▼Deleteの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">d := slices.Delete(s, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;s: %v \n&quot;</span>, s)</span><br><span class="line">fmt.Printf(<span class="string">&quot;d : %v \n&quot;</span>, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">s: [1 4 5 4 5]</span><br><span class="line">d : [1 4 5]</span><br></pre></td></tr></table></figure><p>▼DeleteFuncの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">seq := []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>&#125;</span><br><span class="line">seq = slices.DeleteFunc(seq, <span class="function"><span class="keyword">func</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n%<span class="number">2</span> != <span class="number">0</span> <span class="comment">// delete the odd numbers</span></span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(seq)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">[0 2 8]</span><br></pre></td></tr></table></figure><h3 id="Compact-x2F-CompactFunc"><a href="#Compact-x2F-CompactFunc" class="headerlink" title="Compact&#x2F;CompactFunc"></a><strong>Compact&#x2F;CompactFunc</strong></h3><ul><li>説明<ul><li>連続する同じ要素を持つ値を1つの要素に置き換えます</li><li>重複排除の目的で利用する場合は適用前にソートする必要があります</li></ul></li><li>コメント<ul><li>こちらも頻繁に利用するケースがありそうな関数です</li><li>CompactFuncの利用方法は少しクセがあります</li></ul></li></ul><p>▼Compactの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">seq := []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>&#125;</span><br><span class="line">seq = slices.Compact(seq)</span><br><span class="line">fmt.Println(seq)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">[0 1 2 3 5 8]</span><br></pre></td></tr></table></figure><p>▼CompactFuncの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">names := []<span class="type">string</span>&#123;<span class="string">&quot;bob&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;alice&quot;</span>, <span class="string">&quot;Vera&quot;</span>, <span class="string">&quot;VERA&quot;</span>&#125;</span><br><span class="line">names = slices.CompactFunc(names, <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> strings.ToLower(a) == strings.ToLower(b)</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(names)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">[bob alice Vera]</span><br></pre></td></tr></table></figure><h3 id="Grow"><a href="#Grow" class="headerlink" title="Grow"></a><strong>Grow</strong></h3><ul><li>説明<ul><li>指定した分だけスライスの容量を増やします</li></ul></li></ul><p>▼Growの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;slice: %v, cap:%v , len: %v \n&quot;</span>, s, <span class="built_in">cap</span>(s), <span class="built_in">len</span>(s))</span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">0</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;slice: %v, cap:%v , len: %v \n&quot;</span>, s, <span class="built_in">cap</span>(s), <span class="built_in">len</span>(s))</span><br><span class="line">s = slices.Grow(s, <span class="number">10</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;slice: %v, cap:%v , len: %v \n&quot;</span>, s, <span class="built_in">cap</span>(s), <span class="built_in">len</span>(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">slice: [], cap:2 , len: 0</span><br><span class="line">slice: [0], cap:2 , len: 1</span><br><span class="line">slice: [0], cap:12 , len: 1</span><br></pre></td></tr></table></figure><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a><strong>Insert</strong></h3><ul><li>説明<ul><li>指定した箇所に要素を挿入します</li><li>挿入にはスライスも許容します</li></ul></li></ul><p>▼Insertの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">names := []<span class="type">string</span>&#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Vera&quot;</span>&#125;</span><br><span class="line">names = slices.Insert(names, <span class="number">1</span>, <span class="string">&quot;Bill&quot;</span>, <span class="string">&quot;Billie&quot;</span>)</span><br><span class="line">names = slices.Insert(names, <span class="built_in">len</span>(names), <span class="string">&quot;Zac&quot;</span>)</span><br><span class="line">fmt.Println(names)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">[Alice Bill Billie Bob Vera Zac]</span><br></pre></td></tr></table></figure><h3 id="Replace"><a href="#Replace" class="headerlink" title="Replace"></a><strong>Replace</strong></h3><ul><li>説明<ul><li>あるスライスの指定したiからjまでを指定したスライスで置き換えます</li></ul></li></ul><p>▼Replaceの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">names := []<span class="type">string</span>&#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Vera&quot;</span>, <span class="string">&quot;Zac&quot;</span>&#125;</span><br><span class="line">names = slices.Replace(names, <span class="number">1</span>, <span class="number">3</span>, <span class="string">&quot;Bill&quot;</span>, <span class="string">&quot;Billie&quot;</span>, <span class="string">&quot;Cat&quot;</span>)</span><br><span class="line">fmt.Println(names)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">[Alice Bill Billie Bob Vera Zac]</span><br></pre></td></tr></table></figure><h3 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a><strong>Reverse</strong></h3><ul><li>説明<ul><li>もとのスライスを反転させます</li></ul></li></ul><p>▼Reverseの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">names := []<span class="type">string</span>&#123;<span class="string">&quot;alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;VERA&quot;</span>&#125;</span><br><span class="line">slices.Reverse(names)</span><br><span class="line">fmt.Println(names)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">[Alice Bill Billie Bob Vera Zac]</span><br></pre></td></tr></table></figure><h2 id="ソート関連"><a href="#ソート関連" class="headerlink" title="ソート関連"></a>ソート関連</h2><div class="scroll"><table><thead><tr><th>関数名</th><th>説明</th></tr></thead><tbody><tr><td><strong>IsSorted</strong></td><td>スライスがソートされているか確認します</td></tr><tr><td><strong>IsSortedFunc</strong></td><td>指定の関数でスライスがソートされているか確認します</td></tr><tr><td><strong>Sort</strong></td><td>スライスをソートします。</td></tr><tr><td><strong>SortFunc</strong></td><td>指定の関数でスライスをソートします。</td></tr><tr><td><strong>SortStableFunc</strong></td><td>指定の関数でスライスを安定的にソートします。</td></tr></tbody></table></div><h3 id="IsSorted-x2F-IsSortedFunc"><a href="#IsSorted-x2F-IsSortedFunc" class="headerlink" title="IsSorted&#x2F;IsSortedFunc"></a><strong>IsSorted&#x2F;IsSortedFunc</strong></h3><ul><li>説明<ul><li>スライスが昇順にソートされている場合trueを返却します</li></ul></li></ul><p>▼IsSortedの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(slices.IsSorted([]<span class="type">string</span>&#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Vera&quot;</span>&#125;))</span><br><span class="line">fmt.Println(slices.IsSorted([]<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>▼IsSortedFuncの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;cmp&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">names := []<span class="type">string</span>&#123;<span class="string">&quot;alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;VERA&quot;</span>&#125;</span><br><span class="line">isSortedInsensitive := slices.IsSortedFunc(names, <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cmp.Compare(strings.ToLower(a), strings.ToLower(b))</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(isSortedInsensitive)</span><br><span class="line">fmt.Println(slices.IsSorted(names))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure><h3 id="Sort-x2F-SortFunc-x2F-SortStableFunc"><a href="#Sort-x2F-SortFunc-x2F-SortStableFunc" class="headerlink" title="Sort&#x2F;SortFunc&#x2F;SortStableFunc"></a><strong>Sort&#x2F;SortFunc&#x2F;SortStableFunc</strong></h3><ul><li>説明<ul><li>スライスを昇順にソートします</li></ul></li></ul><p>▼Sortの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">smallInts := []<span class="type">int8</span>&#123;<span class="number">0</span>, <span class="number">42</span>, <span class="number">-10</span>, <span class="number">8</span>&#125;</span><br><span class="line">slices.Sort(smallInts)</span><br><span class="line">fmt.Println(smallInts)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">[-10 0 8 42]</span><br></pre></td></tr></table></figure><p>▼SortFuncの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;cmp&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line">people := []Person&#123;</span><br><span class="line">&#123;<span class="string">&quot;Gopher&quot;</span>, <span class="number">13</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">55</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Bob&quot;</span>, <span class="number">24</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">20</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">slices.SortFunc(people, <span class="function"><span class="keyword">func</span><span class="params">(a, b Person)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> n := cmp.Compare(a.Name, b.Name); n != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If names are equal, order by age</span></span><br><span class="line"><span class="keyword">return</span> cmp.Compare(a.Age, b.Age)</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(people)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">[&#123;Alice 20&#125; &#123;Alice 55&#125; &#123;Bob 24&#125; &#123;Gopher 13&#125;]</span><br></pre></td></tr></table></figure><p>SortStableFuncは要素同士が等しいと判定された場合に、オリジナルの順序を変更しません</p><p>▼SortStableFuncの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;cmp&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line">people := []Person&#123;</span><br><span class="line">&#123;<span class="string">&quot;Gopher&quot;</span>, <span class="number">13</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">20</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Bob&quot;</span>, <span class="number">24</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">55</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Stable sort by name, keeping age ordering of Alices intact</span></span><br><span class="line">slices.SortStableFunc(people, <span class="function"><span class="keyword">func</span><span class="params">(a, b Person)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cmp.Compare(a.Name, b.Name)</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(people)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">[&#123;Alice 20&#125; &#123;Alice 55&#125; &#123;Bob 24&#125; &#123;Gopher 13&#125;]</span><br></pre></td></tr></table></figure><h2 id="比較関連"><a href="#比較関連" class="headerlink" title="比較関連"></a>比較関連</h2><div class="scroll"><table><thead><tr><th>関数名</th><th>説明</th></tr></thead><tbody><tr><td><strong>Compare</strong></td><td>2つのスライスを比較します。</td></tr><tr><td><strong>CompareFunc</strong></td><td>指定の関数で2つのスライスを比較します。</td></tr><tr><td><strong>Equal</strong></td><td>2つのスライスが等しいか確認します。</td></tr><tr><td><strong>EqualFunc</strong></td><td>指定の関数で2つのスライスが等しいか確認します。</td></tr></tbody></table></div><h3 id="Compare-x2F-CompareFunc"><a href="#Compare-x2F-CompareFunc" class="headerlink" title="Compare&#x2F;CompareFunc"></a><strong>Compare&#x2F;CompareFunc</strong></h3><ul><li>説明<ul><li>与えられた２つのスライスs1,s2を比較します</li><li>すべての要素が同じである場合は0を返却します</li><li>最初に一致しない要素が見つかった場合、要素の比較を行い、s1の要素&lt;s2の要素の場合は-1を返却します(その逆で1を返却します)</li><li>s1とs2の要素が異なる場合、len(s1)&lt;len(s2)で-1を返却します(その逆で1を返却します)</li></ul></li><li>コメント<ul><li>-1と1の判定がやや複雑かなという印象です</li><li>CompareFuncもやや使いこなすには工夫が必要そうです</li></ul></li></ul><p>▼Compareの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">names := []<span class="type">string</span>&#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Vera&quot;</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Equal:&quot;</span>, slices.Compare(names, []<span class="type">string</span>&#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Vera&quot;</span>&#125;))</span><br><span class="line">fmt.Println(<span class="string">&quot;V &lt; X:&quot;</span>, slices.Compare(names, []<span class="type">string</span>&#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Xena&quot;</span>&#125;))</span><br><span class="line">fmt.Println(<span class="string">&quot;V &gt; C:&quot;</span>, slices.Compare(names, []<span class="type">string</span>&#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Cat&quot;</span>&#125;))</span><br><span class="line">fmt.Println(<span class="string">&quot;3 &gt; 2:&quot;</span>, slices.Compare(names, []<span class="type">string</span>&#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">Equal: 0</span><br><span class="line">V &lt; X: -1</span><br><span class="line">V &gt; C: 1</span><br><span class="line">3 &gt; 2: 1</span><br></pre></td></tr></table></figure><p>▼CompareFuncの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;cmp&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">numbers := []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">43</span>, <span class="number">8</span>&#125;</span><br><span class="line">strings := []<span class="type">string</span>&#123;<span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;8&quot;</span>&#125;</span><br><span class="line">result := slices.CompareFunc(numbers, strings, <span class="function"><span class="keyword">func</span><span class="params">(n <span class="type">int</span>, s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">sn, err := strconv.Atoi(s)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cmp.Compare(n, sn)</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="Equal-x2F-EqualFunc"><a href="#Equal-x2F-EqualFunc" class="headerlink" title="Equal&#x2F;EqualFunc"></a><strong>Equal&#x2F;EqualFunc</strong></h3><ul><li>説明<ul><li>与えられた２つのスライスs1,s2を比較して、同じであればtrueを返却します</li></ul></li><li>コメント<ul><li>シンプルな分Compareよりも使うケースは多いのかなという印象です</li></ul></li></ul><p>▼Equalの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">numbers := []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">42</span>, <span class="number">8</span>&#125;</span><br><span class="line">fmt.Println(slices.Equal(numbers, []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">42</span>, <span class="number">8</span>&#125;))</span><br><span class="line">fmt.Println(slices.Equal(numbers, []<span class="type">int</span>&#123;<span class="number">10</span>&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>▼EqualFuncの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">numbers := []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">42</span>, <span class="number">8</span>&#125;</span><br><span class="line">strings := []<span class="type">string</span>&#123;<span class="string">&quot;000&quot;</span>, <span class="string">&quot;42&quot;</span>, <span class="string">&quot;0o10&quot;</span>&#125;</span><br><span class="line">equal := slices.EqualFunc(numbers, strings, <span class="function"><span class="keyword">func</span><span class="params">(n <span class="type">int</span>, s <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">sn, err := strconv.ParseInt(s, <span class="number">0</span>, <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n == <span class="type">int</span>(sn)</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(equal)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">true</span><br></pre></td></tr></table></figure><h2 id="最大-最小関連"><a href="#最大-最小関連" class="headerlink" title="最大-最小関連"></a>最大-最小関連</h2><div class="scroll"><table><thead><tr><th>関数名</th><th>説明</th></tr></thead><tbody><tr><td><strong>Max</strong></td><td>スライスの最大の要素を返します</td></tr><tr><td><strong>MaxFunc</strong></td><td>指定の関数でスライスの最大の要素を返します</td></tr><tr><td><strong>Min</strong></td><td>スライスの最小の要素を返します</td></tr><tr><td><strong>MinFunc</strong></td><td>指定の関数でスライスの最小の要素を返します</td></tr></tbody></table></div><h3 id="Max-x2F-MaxFunc"><a href="#Max-x2F-MaxFunc" class="headerlink" title="Max&#x2F;MaxFunc"></a><strong>Max&#x2F;MaxFunc</strong></h3><ul><li>説明<ul><li>与えられた2つのスライスの中の最大値を返却します</li></ul></li><li>コメント<ul><li>MaxFuncを使えば構造体のスライスに対してフィールドの最大値を評価することもできます</li></ul></li></ul><p>▼Maxの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">numbers := []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">42</span>, <span class="number">-10</span>, <span class="number">8</span>&#125;</span><br><span class="line">fmt.Println(slices.Max(numbers))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">42</span><br></pre></td></tr></table></figure><p>▼MaxFuncの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;cmp&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line">people := []Person&#123;</span><br><span class="line">&#123;<span class="string">&quot;Gopher&quot;</span>, <span class="number">13</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">55</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Vera&quot;</span>, <span class="number">24</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Bob&quot;</span>, <span class="number">55</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">firstOldest := slices.MaxFunc(people, <span class="function"><span class="keyword">func</span><span class="params">(a, b Person)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cmp.Compare(a.Age, b.Age)</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(firstOldest.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">Alice</span><br></pre></td></tr></table></figure><h3 id="Min-x2F-MinFunc"><a href="#Min-x2F-MinFunc" class="headerlink" title="Min&#x2F;MinFunc"></a><strong>Min&#x2F;MinFunc</strong></h3><ul><li>説明<ul><li>与えられた2つのスライスのなかの最小値を返却します</li></ul></li><li>コメント<ul><li>MinFuncを使えば構造体のスライスに対してフィールドのさいしょ値を評価することもできます</li></ul></li></ul><p>▼Minの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">numbers := []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">42</span>, <span class="number">-10</span>, <span class="number">8</span>&#125;</span><br><span class="line">fmt.Println(slices.Min(numbers))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">-10</span><br></pre></td></tr></table></figure><p>▼MinFuncの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;cmp&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line">people := []Person&#123;</span><br><span class="line">&#123;<span class="string">&quot;Gopher&quot;</span>, <span class="number">13</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Bob&quot;</span>, <span class="number">5</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Vera&quot;</span>, <span class="number">24</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Bill&quot;</span>, <span class="number">5</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">firstYoungest := slices.MinFunc(people, <span class="function"><span class="keyword">func</span><span class="params">(a, b Person)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cmp.Compare(a.Age, b.Age)</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(firstYoungest.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">Bob</span><br></pre></td></tr></table></figure><h1 id="番外編sortedslicesパッケージ"><a href="#番外編sortedslicesパッケージ" class="headerlink" title="番外編sortedslicesパッケージ"></a>番外編sortedslicesパッケージ</h1><p>渋川さん(<a href="https://twitter.com/shibu_jp">@shibu_jp</a>)が作成したsortedslicesパッケージについて簡単に紹介させてください。</p><p><a href="https://github.com/shibukawa/sortedslices">https://github.com/shibukawa/sortedslices</a></p><p>このパッケージではソートされたスライスに対しての関数群を提供しています。</p><p>例えばソートされたスライスを複数指定することで単一のソートされたスライスを返却する<code>Union</code>関数などがあります。</p><p>▼Unionの使用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/shibukawa/sortedslices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Sale <span class="keyword">struct</span> &#123;</span><br><span class="line">Date  <span class="type">string</span></span><br><span class="line">Value <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">slice1 := []Sale&#123;</span><br><span class="line">&#123;<span class="string">&quot;2023-01-01&quot;</span>, <span class="number">100</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;2023-01-03&quot;</span>, <span class="number">150</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;2023-01-05&quot;</span>, <span class="number">200</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">slice2 := []Sale&#123;</span><br><span class="line">&#123;<span class="string">&quot;2023-01-02&quot;</span>, <span class="number">120</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;2023-01-04&quot;</span>, <span class="number">170</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">slice3 := []Sale&#123;</span><br><span class="line">&#123;<span class="string">&quot;2023-01-01&quot;</span>, <span class="number">90</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;2023-01-06&quot;</span>, <span class="number">220</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">comparisonFunc := <span class="function"><span class="keyword">func</span><span class="params">(s1, s2 Sale)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> s1.Date &lt; s2.Date &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> s1.Date &gt; s2.Date &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unioned := sortedslices.UnionFunc(comparisonFunc, slice1, slice2, slice3)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> unioned &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">&#123;2023-01-01 100&#125;</span><br><span class="line">&#123;2023-01-01 90&#125;</span><br><span class="line">&#123;2023-01-02 120&#125;</span><br><span class="line">&#123;2023-01-03 150&#125;</span><br><span class="line">&#123;2023-01-04 170&#125;</span><br><span class="line">&#123;2023-01-05 200&#125;</span><br><span class="line">&#123;2023-01-06 220&#125;</span><br></pre></td></tr></table></figure><p>単一のスライスにマージしてからソートし直すのとどちらが性能が良いのでしょうか。</p><p>簡単なベンチマークを測定してみました。⤵</p><p>▼Unionのベンチマーク</p><figure class="highlight go"><figcaption><span>union_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/shibukawa/sortedslices&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkUnionFuncLarge</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">a := generateSortedSlice(<span class="number">100000</span>)      <span class="comment">// 10万の要素を持つスライス</span></span><br><span class="line">bSlice := generateSortedSlice(<span class="number">100000</span>) <span class="comment">// 同じく10万の要素を持つスライス</span></span><br><span class="line">cmp := <span class="function"><span class="keyword">func</span><span class="params">(e1, e2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> e1 &lt; e2 &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> e1 &gt; e2 &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.ResetTimer()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">_ = sortedslices.UnionFunc(cmp, a, bSlice)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkMergeAndSortLarge</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">a := generateSortedSlice(<span class="number">100000</span>)      <span class="comment">// 10万の要素を持つスライス</span></span><br><span class="line">bSlice := generateSortedSlice(<span class="number">100000</span>) <span class="comment">// 同じく10万の要素を持つスライス</span></span><br><span class="line"></span><br><span class="line">b.ResetTimer()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">merged := <span class="built_in">append</span>(a, bSlice...)</span><br><span class="line">sort.Ints(merged)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateSortedSlice</span><span class="params">(size <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="type">int</span>, size)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> slice &#123;</span><br><span class="line">slice[i] = rand.Int()</span><br><span class="line">&#125;</span><br><span class="line">sort.Ints(slice)</span><br><span class="line"><span class="keyword">return</span> slice</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">❯ go test -bench .</span><br><span class="line"></span><br><span class="line">goos: linux</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: github/sample</span><br><span class="line">cpu: AMD Ryzen 5 5600X 6-Core Processor</span><br><span class="line">BenchmarkUnionFuncLarge-12            506   2575694 ns/op</span><br><span class="line">BenchmarkMergeAndSortLarge-12          79  16547631 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok  github/sample3.005s</span><br></pre></td></tr></table></figure><p>結果からみても<code>Union</code>を利用したほうが圧倒的に性能が良いことがわかりますね。</p><p>他にもスライスから共通要素を抽出する<code>Intersection</code>関数、差分要素を抽出する<code>Difference</code>関数などもありますので、ぜひ利用してみてください。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>Go1.21では待望のslicesパッケージが追加されました。スライスやマップは頻繁に利用するので標準関数が増えるのはとても嬉しいですね。</p><p><a href="https://github.com/golang/go/issues/56353">#56353</a>ではConcat関数も提案されており、既にアクセプトされています。今後のslicesの機能追加からも目が離せないですね。</p><p>最後までお付き合いいただきありがとうございました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230816a/eyecatch-20230814.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;675&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;The Gopher character is based on</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.21" scheme="https://future-architect.github.io/tags/Go1-21/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.21 リリース連載 待望の組み込み関数min/maxと新パッケージcmpの挙動確認</title>
    <link href="https://future-architect.github.io/articles/20230815a/"/>
    <id>https://future-architect.github.io/articles/20230815a/</id>
    <published>2023-08-14T15:00:00.000Z</published>
    <updated>2023-08-15T05:09:09.266Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230815a/dice-568193_640.jpg" alt="" width="640" height="427"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Goを書き始めてから10年ほど経ちますが、最近は全然書けていない谷村です。久々にGoの新しいところに触れていこうと思いますのでお付き合いください。</p><p>本記事では、min&#x2F;max組み込み関数と、新設されたcmpパッケージについて触れます。「Goには何故min&#x2F;max関数が無いんだ」と嘆いた数々のGo初学者たちが救われるかもしれません。</p><p>※本記事のコードリーディングおよび動作確認は、go1.21rc3で実施しました。</p><h1 id="min-x2F-max-function"><a href="#min-x2F-max-function" class="headerlink" title="min&#x2F;max function"></a>min&#x2F;max function</h1><p><a href="https://tip.golang.org/doc/go1.21">Go 1.21 Relase Notes</a>では以下のように述べられています。</p><blockquote><p>The new functions min and max compute the smallest (or largest, for max) value of a fixed number of given arguments. See the language spec for details.</p></blockquote><p>要は各リポジトリで以下のように書いていたものが、組み込み関数化された、と思って良さそうです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt; y &#123;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">min := nums[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> _, n := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt; min &#123;</span><br><span class="line">min = n</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="仕様詳細"><a href="#仕様詳細" class="headerlink" title="仕様詳細"></a>仕様詳細</h2><p><a href="https://tip.golang.org/ref/spec#Min_and_max">Release NotesのDetails</a>に、いくつかの仕様詳細が記載されています。直感的ではない仕様や、記載がないけど気になる仕様もあるので、いくつか抜粋して紹介します。</p><h3 id="受け入れ可能な型の組み合わせ"><a href="#受け入れ可能な型の組み合わせ" class="headerlink" title="受け入れ可能な型の組み合わせ"></a>受け入れ可能な型の組み合わせ</h3><blockquote><p>The same type rules as for operators apply: for ordered arguments x and y, min(x, y) is valid if x + y is valid, and the type of min(x, y) is the type of x + y (and similarly for max). If all arguments are constant, the result is constant.</p></blockquote><p>受け入れ可能な変数型は複数あり、内部でGenericsを用いてることが予想されます。<br>受け入れ可能な型の組み合わせは、足し算(プラスオペレーター)が正しく実行されることが必要十分条件とのことです。min&#x2F;maxで返される型も足し算結果と同様ということです。</p><h3 id="スライスの受入れ不可"><a href="#スライスの受入れ不可" class="headerlink" title="スライスの受入れ不可"></a>スライスの受入れ不可</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_ = min(s...)               <span class="comment">// invalid: slice arguments are not permitted</span></span><br></pre></td></tr></table></figure><p>と記載があり、スライスは受け入れ不可とのことです。<br>Release Noteに記載を見つけられないのですが、今回から追加されたらしいslices pakcegeに、Min&#x2F;Maxが存在するからだと思われます。以下、利用サンプルです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">nums := []<span class="type">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">10</span>&#125;</span><br><span class="line">fmt.Println(slices.Min(nums))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>なお、公式サンプルにも記載されていますが、min&#x2F;maxは要素3つ以上でも受け入れ可能です。</p><h3 id="文字列の受け入れ"><a href="#文字列の受け入れ" class="headerlink" title="文字列の受け入れ"></a>文字列の受け入れ</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t := max(<span class="string">&quot;&quot;</span>, <span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>)  <span class="comment">// t == &quot;foo&quot; (string kind)</span></span><br></pre></td></tr></table></figure><p>とあり、文字列も受け入れ可能とのことです。<br>これだけでは仕様の詳細がわからないため、手元でも動かしてみました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t1 := max(<span class="string">&quot;&quot;</span>, <span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>)</span><br><span class="line">t2 := min(<span class="string">&quot;&quot;</span>, <span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>)</span><br><span class="line">fmt.Println(t1)</span><br><span class="line">fmt.Println(t2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行結果は、以下の通り。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo</span><br><span class="line">(空文字)</span><br></pre></td></tr></table></figure><p>アルファベット順に並べたときに後ろに来るものがmax、空文字は問答無用で最小扱いのようです。</p><h3 id="冒頭のような独自関数との競合"><a href="#冒頭のような独自関数との競合" class="headerlink" title="冒頭のような独自関数との競合"></a>冒頭のような独自関数との競合</h3><p>色んな言語を渡り歩いていると、同一の変数名と関数名や、引数の異なる同名関数などの共存可否を忘れてしまいます。(私がそうでした)<br>既存コードにはmin&#x2F;maxの文字が溢れていると思われますが、golang1.20以前から1.21以降へのバージョンアップでこのへんは懸念になりうるのでしょうか。</p><p>以下のようなコードでも動くので、既存コードへの影響はあまり考えなくても良いと思われます。<br>ただし、別pakcageに存在する独自のminと組み込みのminのどちらが優先されるかなど、状況によっては気にかける必要があるかもしれません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">max := max(<span class="string">&quot;&quot;</span>, <span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>) <span class="comment">// 組み込み関数と同名変数の利用OK</span></span><br><span class="line">min := min(<span class="string">&quot;&quot;</span>, <span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>)</span><br><span class="line">fmt.Println(max)</span><br><span class="line">fmt.Println(min)</span><br><span class="line"></span><br><span class="line">fmt.Println(min(<span class="number">5</span>, <span class="number">3</span>)) <span class="comment">// 同package内の場合、独自関数が優先される</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;my function&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> x &lt; y &#123;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="なぜライブラリではなく組み込みなのか"><a href="#なぜライブラリではなく組み込みなのか" class="headerlink" title="なぜライブラリではなく組み込みなのか"></a>なぜライブラリではなく組み込みなのか</h2><p>ポリシーによって唯一の正解はなさそうですが、この辺のコメントが決定打だったようです。<br>理由のうちの一つの「NaNの扱いの統一性」は、なるほど、と思いました。<br><a href="https://github.com/golang/go/issues/59488#issuecomment-1548505279">https://github.com/golang/go/issues/59488#issuecomment-1548505279</a></p><h2 id="実装の中身"><a href="#実装の中身" class="headerlink" title="実装の中身"></a>実装の中身</h2><p>最初は以下の <code>builtin.go</code> かなと思ったんですが、builtinのGoDocに</p><blockquote><p>The items documented here are not actually in package builtin but their descriptions here allow godoc to present documentation for the language’s special identifiers.</p></blockquote><p>と記載があり、実際にはビルドされないようです。実態はruntimeを参照しているものと思われます。</p><figure class="highlight go"><figcaption><span>src/builtin/builtin.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The max built-in function returns the largest value of a fixed number of</span></span><br><span class="line"><span class="comment">// arguments of [cmp.Ordered] types. There must be at least one argument.</span></span><br><span class="line"><span class="comment">// If T is a floating-point type and any of the arguments are NaNs,</span></span><br><span class="line"><span class="comment">// max will return NaN.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span>[<span class="title">T</span> <span class="title">cmp</span>.<span class="title">Ordered</span>]<span class="params">(x T, y ...T)</span></span> T</span><br><span class="line"></span><br><span class="line"><span class="comment">// The min built-in function returns the smallest value of a fixed number of</span></span><br><span class="line"><span class="comment">// arguments of [cmp.Ordered] types. There must be at least one argument.</span></span><br><span class="line"><span class="comment">// If T is a floating-point type and any of the arguments are NaNs,</span></span><br><span class="line"><span class="comment">// min will return NaN.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span>[<span class="title">T</span> <span class="title">cmp</span>.<span class="title">Ordered</span>]<span class="params">(x T, y ...T)</span></span> T</span><br></pre></td></tr></table></figure><h1 id="cmp-package"><a href="#cmp-package" class="headerlink" title="cmp package"></a>cmp package</h1><p>golangでcmpといえば、<a href="https://pkg.go.dev/github.com/google/go-cmp">go-cmp</a>ですよね！</p><p>go-cmpはgoogle配下に存在していたので公式みたいなものだと思ってますが、Go本体に組み込まれたのが新しい、、、と思ってたのですが、全然違いました。</p><blockquote><p>The new cmp package defines the type constraint Ordered and two new generic functions Less and Compare that are useful with ordered types.</p></blockquote><p>Release Notesの説明では、上記のように記載があり、2つの何かを比較して返してくれるジェネリクス関数のようです。<br>ただ、これだけだとサッパリわかりません。<a href="https://pkg.go.dev/cmp@master">godoc</a>を読んでみましょう。</p><p><code>func Compare[T Ordered](x, y T) int</code> は以下のようなreturnをするそうです。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1 if x is less than y,</span><br><span class="line"> 0 if x equals y,</span><br><span class="line">+1 if x is greater than y.</span><br></pre></td></tr></table></figure><p><code>func Less[T Ordered](x, y T) bool</code> は以下のように、「第一引数が第二引数未満かどうか」をboolで返すようです。つまり、同一値であればfalseが返りそうです。</p><blockquote><p>whether x is less than y</p></blockquote><p>使える型が気になるところですが、以下のように単一の値であれば何でも使える仕様です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Ordered <span class="keyword">interface</span> &#123;</span><br><span class="line">~<span class="type">int</span> | ~<span class="type">int8</span> | ~<span class="type">int16</span> | ~<span class="type">int32</span> | ~<span class="type">int64</span> |</span><br><span class="line">~<span class="type">uint</span> | ~<span class="type">uint8</span> | ~<span class="type">uint16</span> | ~<span class="type">uint32</span> | ~<span class="type">uint64</span> | ~<span class="type">uintptr</span> |</span><br><span class="line">~<span class="type">float32</span> | ~<span class="type">float64</span> |</span><br><span class="line">~<span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>structの比較定義を作ってそれに従って返してくれても良い気もしましたが、従来よりsort packageがありますし、単なる比較レベルなら個別実装で十分でしょう。</p><h2 id="挙動確認"><a href="#挙動確認" class="headerlink" title="挙動確認"></a>挙動確認</h2><p>以下3観点の確認コードを用意しました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;cmp&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">intx := <span class="type">int</span>(<span class="number">3</span>)</span><br><span class="line">inty := <span class="type">int</span>(<span class="number">4</span>)</span><br><span class="line">intz := <span class="type">int</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">float64y := <span class="type">float64</span>(<span class="number">4.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主要ケース確認</span></span><br><span class="line">fmt.Println(cmp.Compare(intx, inty))</span><br><span class="line">fmt.Println(cmp.Less(intx, inty))</span><br><span class="line"><span class="comment">// 同一値の確認</span></span><br><span class="line">fmt.Println(cmp.Compare(intx, intz))</span><br><span class="line">fmt.Println(cmp.Less(intx, intz))</span><br><span class="line"><span class="comment">// 型違いの比較</span></span><br><span class="line">fmt.Println(cmp.Compare(intx, float64y))</span><br><span class="line">fmt.Println(cmp.Less(intx, float64y))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>が、まずは型違いが以下コンパイルエラーでダメ。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./cmp.go:22:32: <span class="built_in">type</span> float64 of float64y does not match inferred <span class="built_in">type</span> int <span class="keyword">for</span> T</span><br><span class="line">./cmp.go:23:29: <span class="built_in">type</span> float64 of float64y does not match inferred <span class="built_in">type</span> int <span class="keyword">for</span> T</span><br></pre></td></tr></table></figure><p>気を取り直して型違い比較の箇所を外して実行した結果は以下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-1 // xがyより小さいので-1が返る</span><br><span class="line"><span class="literal">true</span> // xがyより小さいので<span class="literal">true</span>が返る</span><br><span class="line">0 // xとzが同一値なので0が返る</span><br><span class="line"><span class="literal">false</span> // xがz「未満ではない」ので<span class="literal">false</span>が返る</span><br></pre></td></tr></table></figure><p>なんとも面白みもありませんが、読み取った仕様通りの挙動を確認できました。</p><p>正直、 これらが無くても、自前実装で良いと思ったんですがどうなんでしょう…<br>実際の実装も以下のレベルですし。</p><figure class="highlight go"><figcaption><span>src/cmp/cmp.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compare returns</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//-1 if x is less than y,</span></span><br><span class="line"><span class="comment">// 0 if x equals y,</span></span><br><span class="line"><span class="comment">//+1 if x is greater than y.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For floating-point types, a NaN is considered less than any non-NaN,</span></span><br><span class="line"><span class="comment">// a NaN is considered equal to a NaN, and -0.0 is equal to 0.0.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Compare</span>[<span class="title">T</span> <span class="title">Ordered</span>]<span class="params">(x, y T)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">xNaN := isNaN(x)</span><br><span class="line">yNaN := isNaN(y)</span><br><span class="line"><span class="keyword">if</span> xNaN &amp;&amp; yNaN &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> xNaN || x &lt; y &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> yNaN || x &gt; y &#123;</span><br><span class="line"><span class="keyword">return</span> +<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>src/cmp/cmp.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Less reports whether x is less than y.</span></span><br><span class="line"><span class="comment">// For floating-point types, a NaN is considered less than any non-NaN,</span></span><br><span class="line"><span class="comment">// and -0.0 is not less than (is equal to) 0.0.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Less</span>[<span class="title">T</span> <span class="title">Ordered</span>]<span class="params">(x, y T)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (isNaN(x) &amp;&amp; !isNaN(y)) || x &lt; y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="既存影響"><a href="#既存影響" class="headerlink" title="既存影響"></a>既存影響</h2><p>広く使われている <code>go-cmp</code> のpackage名がcmpなので、既存コードと競合しそうだと思いました。(詳細未確認)</p><p><code>go-cmp</code> を使ってるのは主にテストコードだと思われるので本番挙動には影響ないと思いますが、go versionを上げてテストが落ちたらココを疑っても良いかもしれません。(go-cmpに異なるaliasを付けてimportすることになりそうです…)</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>min&#x2F;maxも、slicesも、cmp.Compare&#x2F;cmp.Lessも、かゆいところに手が届くかもしれない関数だと感じました。</p><p>sortやtime formatで当初はバリバリに尖っていたGoも、歳を重ねて丸くなってきたように感じます。初学者にとってわかりやすく、熟練者のタイプ数も減るのであればそれ以上のことは無いのかもしれません。</p><p>次回はオチラルさんのmaps記事です。</p><p>アイキャッチは<a href="https://pixabay.com/ja/users/blickpixel-52945/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=568193">Michael Schwarzenberger</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=568193">Pixabay</a>からの画像です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230815a/dice-568193_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;427&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.21" scheme="https://future-architect.github.io/tags/Go1-21/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.21 リリース連載 contextパッケージに追加されるWithoutCancelでクライアントとの切断に備えてみる</title>
    <link href="https://future-architect.github.io/articles/20230803a/"/>
    <id>https://future-architect.github.io/articles/20230803a/</id>
    <published>2023-08-02T15:00:00.000Z</published>
    <updated>2023-08-04T03:57:07.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG DX ユニット所属、金欠コンサルタントの藤井です。先日、Google Pixel 7aを購入しました。これまでiPhone 7 Plusを使っていたので、使用スマホの時代が7年ほど進みました。Googleは検索エンジンからAI、スマホまで作っていてすごいですね。</p><p>ということで今回は、Google発のプログラミング言語であるところのGoの1.21がリリースされることを記念した、<a href="/articles/20230731a/">Go 1.21 連載</a> の記事を書きます。</p><p>本記事では、いくつか変更の入った、<a href="https://pkg.go.dev/context@master">context</a>パッケージについて記載していきます。</p><p>contextそのものについては、フューチャー技術ブログにおいても数多く解説されていますので、詳細な説明は割愛します。数例記載しますので、ぜひご覧ください。</p><ul><li>辻さんの<a href="https://future-architect.github.io/articles/20200325/">Go1.14のRelease Partyに登壇しました</a><ul><li>記事の本質ではないですが、context自体の役割など、基礎情報が記載されています。</li></ul></li><li>伊藤さんの<a href="https://future-architect.github.io/articles/20211119a/">「Contextを完全に理解する」というテーマでGo Conference 2021 Autumnに登壇しました</a><ul><li>context自体の実装について記載されています。</li></ul></li><li>真野さんの<a href="https://future-architect.github.io/articles/20230125a/">Go1.20リリース連載 contextパッケージのWithCancelCauseとCause</a><ul><li>1つ前の1.20においてcontextに追加された関数についての解説記事です。</li></ul></li></ul><h2 id="変更点概要"><a href="#変更点概要" class="headerlink" title="変更点概要"></a>変更点概要</h2><p>Minor changes to the libraryとして、計4点の更新が加えられています。</p><ul><li><a href="https://tip.golang.org/pkg/context/#WithoutCancel">WithoutCancel</a>の追加<ul><li>親子<code>context</code>間のキャンセルの伝播を切断し、親の<code>context</code>がキャンセル&#x2F;タイムアウトした場合にも、自身の<code>context</code>がキャンセルされない子<code>context</code>を作成できるようになりました。</li><li>なお、<code>WithoutCancel</code>という名前ではありますが、文字通りのキャンセルのみではなく、タイムアウトについても伝播されなくなります。<ul><li>contextに設定した変数（ロガーやトレースID）などを利用したいけど、キャンセルは利用したくないなどの場合に利用できるとのことです</li></ul></li></ul></li><li><a href="https://tip.golang.org/pkg/context/#WithDeadlineCause">WithDeadlineCause</a>および<a href="https://tip.golang.org/pkg/context/#WithTimeoutCause">WithTimeoutCause</a>の追加<ul><li>先述の<a href="https://future-architect.github.io/articles/20230125a/">Go1.20リリース連載 contextパッケージのWithCancelCauseとCause</a>にて解説されている、<code>WithCancelCause</code>の<code>Deadline</code>と<code>Timeout</code>版です。</li></ul></li><li><a href="https://tip.golang.org/pkg/context/#AfterFunc">AfterFunc</a>の追加<ul><li>contextがキャンセル&#x2F;タイムアウトした後に実行する処理を登録するための関数です。<a href="https://pkg.go.dev/time#AfterFunc">timeパッケージのAfterFunc</a>と使い方はほとんど同じですが、使い道は大きく異なり、Exampleにあるように（当然ですが）contextに主軸をおいた物となっており、以下がExampleとして挙げられています。<ul><li>直感的な使い方として、<a href="https://pkg.go.dev/context@master#example-AfterFunc-Cond">sync.Condの待ちを中断</a>・<a href="https://pkg.go.dev/context@master#example-AfterFunc-Connection">net.Connの接続を遮断</a>等の、不要な処理を止める使い道</li><li><a href="https://pkg.go.dev/context@master#example-AfterFunc-Merge">複数のcontextをマージ</a>して、いずれかの<code>context</code>がキャンセルされると、マージ後の<code>context</code>もキャンセルされる、新たな<code>context</code>を作成する使い道<ul><li><a href="https://github.com/golang/go/issues/57928">proposal</a>によると、この使い道が発端のようです。<code>context</code>の持ち方自体に新しい手法が生まれるので、アイデア次第で化けそうです。</li></ul></li></ul></li></ul></li><li>最適化の結果として、<code>context</code>どうしを比較したときの振る舞いに変更が発生した<ul><li>比較の仕方によって、<code>context</code>どうしの比較結果が1.20以前と異なる場合があるようです。ただし、今までもこれからも、<code>context</code>どうしの比較は明確に定義されていないため、いずれにせよ<code>context</code>どうしの比較結果に依存した実装は危険かもしれません。</li><li><a href="https://github.com/golang/go/issues/60978">こちらのissue</a>で指摘が挙がったようです。</li></ul></li></ul><p>個人的には<code>WithoutCancel</code>と<code>AfterFunc</code>がインパクト大きめのアップデートかなと思います。本記事では<code>WithoutCancel</code>に着目して、実際に試してみた結果を記載していきます。</p><h2 id="試す内容"><a href="#試す内容" class="headerlink" title="試す内容"></a>試す内容</h2><p><code>context</code>を引き回すケースとして、WEB APIサーバというのは代表例の一つかと思います。<br>私の所属しているプロジェクトでも、リクエストスコープごとに<code>context</code>を引き回しています。<br>そこで、こんなコードを考えてみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">ctx := r.Context()</span><br><span class="line"></span><br><span class="line">url := <span class="string">&quot;http://localhost:8080/heavy&quot;</span></span><br><span class="line">req, err := http.NewRequestWithContext(ctx, <span class="string">&quot;POST&quot;</span>, url, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">    fmt.Println(<span class="string">&quot;COMPLETE!!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">heavyHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/api&quot;</span>, handler)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/heavy&quot;</span>, heavyHandler)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/api</code>というエンドポイントにリクエストを受けると、<code>http.Request</code>から受け取った<code>context</code>を引き回し、そのまま違うAPI <code>/heavy</code> にリクエストを送っています。<br><code>/heavy</code>はその名の通り重い処理を担当しているとし、常に10秒の処理時間がかかるようにしています。<br>今回は極めて簡易的に作っているため、自身に対してリクエストを送っています（さらにこちらでは<code>context</code>未使用）が、異なるサーバであっても本質には影響しません。</p><p>さて、このサーバに対して<code>CURL</code>等で実際にリクエストを送ってから10秒待ってみると、特にレスポンス等も定義していないため、10秒後にログに<code>COMPLETE!!</code>と出る以外全く何も起こりません。<br>しかし、耐えかねて<code>CURL</code>に<code>SIGINT</code>を送ってみたところ</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run .</span><br><span class="line">Post <span class="string">&quot;http://localhost:8080/heavy&quot;</span>: context canceled</span><br></pre></td></tr></table></figure><p>怒られてしまいました。どうやらどこかで<code>context</code>がキャンセルされてしまったようです。<br><a href="https://pkg.go.dev/net/http#Request.Context">net&#x2F;httpパッケージの仕様</a>を見てみると、クライアントとの接続が切断されると、<code>context</code>はキャンセルされる、とあり、これの仕業のようです。<br>サービスによってはクライアントの通信環境が不安定（スマートフォンがメインターゲットで、トンネルに入るたびに圏外になるなど）な場合もあり、クライアントとの接続状況には十分な考慮が必要です。</p><p>今回の例では、実質的には何の処理も行っていないため、クライアントとの切断により<code>context</code>がキャンセルされても困りませんが、実際には結構困る場面があります。<br><a href="https://github.com/golang/go/issues/40221">proposal</a>では、以下が例として挙げられています。</p><ul><li>rollback&#x2F;cleanupの処理はトリガーイベント（HTTPリクエスト等）のキャンセル状況によらず継続する必要がある</li><li>トリガーイベント（HTTPリクエスト等）の方が早く処理が完了した場合にも、処理を完遂したい</li></ul><p>上記以外にも、システム間連携が多いことなどを原因として、リクエストからレスポンスまでの処理においてAtomicityが担保されていない場合、<code>context</code>がキャンセルされるタイミングによってはデータ不整合が発生する可能性があります。<br>システム間連携も含めてAtomicであることが望ましいのは間違いないのですが、規模や要件によって、常に理想の設計ができるとは限りません。</p><img src="/images/20230803a/image.png" alt="image.png" width="768" height="549" loading="lazy"><p>ということで、今回は<code>WithoutCancel</code>を用いて、クライアントとの接続が切断した場合も、（サーバ側で問題が起きない限り）処理を継続するよう、改造してみます。</p><h2 id="試してみた"><a href="#試してみた" class="headerlink" title="試してみた"></a>試してみた</h2><p>対応内容は極めて単純で、<code>http.Request</code>から<code>context</code>を受け取る箇所を、以下のように変更し、<code>WithoutCancel</code>で新しい<code>context</code>を作成するだけです。<br>必要に応じて<code>WithCancel</code>や<code>WithTimeout</code>等を重ねて使ってももちろんOKです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx := context.WithoutCancel(r.Context())</span><br></pre></td></tr></table></figure><p>この状態で再度<code>CURL</code>を叩き、すぐさま切断すると…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run .</span><br><span class="line">COMPLETE!!</span><br></pre></td></tr></table></figure><p>親<code>context</code>はキャンセルされているにも関わらず、10秒後に正しく処理が完了したようです。<br>これで、クライアントとの接続状況に左右されず、処理を完遂できるようになりました。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Go 1.21で<code>context</code>パッケージに追加される<code>WithoutCancel</code>を試してみました。<br>伝播してほしくない親のキャンセルを極めて簡単に無視できるようになった、という話なのですが、しかしながら問答無用で無視して良いものなのか、というところは慎重に考える必要があるかと思います。<br>キャンセルやタイムアウトの伝播は、それこそAtomicityやConsistencyを担保するために非常に有用なものであり、無闇に伝播を切断すると、実質的に<code>context</code>が大量に生まれてしまい、非常に難解なものになるリスクがあります。<br><a href="https://github.com/golang/go/issues/40221#issuecomment-658573098">proposalへのコメント</a>にも、<code>context</code>の単なるKVSとしての利用を促進しかねない、といった旨の危惧が記載されています。<br>導入前に、改めて「本当にこの時点で親<code>context</code>のキャンセルは無視して良いのか？」を精査するべきかと思います。</p><p>明日は谷村さんの記事で、とうとうGoに<code>min</code>&#x2F;<code>max</code>関数が追加されるようです。お楽しみに！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG DX ユニット所属、金欠コンサルタントの藤井です。先日、Google Pixel</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.21" scheme="https://future-architect.github.io/tags/Go1-21/"/>
    
    <category term="context" scheme="https://future-architect.github.io/tags/context/"/>
    
  </entry>
  
  <entry>
    <title>Go1.21のgo/ast、go/buildあたりのマイナーチェンジ</title>
    <link href="https://future-architect.github.io/articles/20230801a/"/>
    <id>https://future-architect.github.io/articles/20230801a/</id>
    <published>2023-07-31T15:00:00.000Z</published>
    <updated>2023-08-04T04:04:38.392Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230801a/top.png" alt="" width="700" height="338"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="/articles/20230731a/">Go1.21連載</a>の2本目です。</p><p>取り上げるのは次のgo&#x2F;ast、go&#x2F;buildあたりの更新についてです。</p><ol><li>go&#x2F;ast</li><li>go&#x2F;build<ul><li>関連してToolの互換性の話も含みます</li></ul></li><li>go&#x2F;build&#x2F;constraint</li><li>go&#x2F;token</li><li>go&#x2F;types</li></ol><p><code>go/ast</code> はGoコードの抽象構文木を表現するパッケージで、<code>go/parser</code> パッケージでコード解析をすると取得できます。 <code>go/token</code> とか <code>go/types</code> は概ね解析した結果の型やトークンを表現するもので比較的セットで利用することが多いかと思います。</p><p><code>go/build</code> パッケージはGoのビルド周りの情報を集めるパッケージです。今回のアップデートは <code>go/ast</code> と関連が強かったので、この記事でまとめて紹介します。</p><p>バージョンは <code>Go 1.21rc4</code> であり、リリースまでに多少変更があるかも知れません。ご了承ください。</p><h2 id="go-x2F-ast-の-IsGenerated"><a href="#go-x2F-ast-の-IsGenerated" class="headerlink" title="go&#x2F;ast の IsGenerated()"></a>go&#x2F;ast の IsGenerated()</h2><p><code>go/ast</code> パッケージに <code>IsGenerated()</code> というそのコードが自動生成されたかどうかを判定するためのヘルパー関数が追加されました。</p><figure class="highlight go"><figcaption><span>go/astパッケージに追加されたヘルパー関数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsGenerated</span><span class="params">(file *File)</span></span> <span class="type">bool</span></span><br></pre></td></tr></table></figure><p>あるGoコードが自動生成されたかどうかは、<a href="https://go.dev/s/generatedcode">cmd&#x2F;goパッケージのドキュメント</a>に記載がある通り、以下の行を含んでいる場合（ファイルの行頭じゃなくてもOK）に、判断できるとあります。 <code>IsGenerated()</code> でこの行を含んでいるかが判断できるようになりました。</p><figure class="highlight go"><figcaption><span>自動生成を示すための一文</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^<span class="comment">// Code generated .* DO NOT EDIT\.$</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/golang/go/issues/28089">go&#x2F;ast: add func IsGenerated(*File) bool #28089</a> で議論されており、上記の自動生成の判定条件が現在広く受け入れられているのであれば、公式でAPIを提供したら便利ではという提案でした。</p><p>これ以前は起票者が開発した <a href="https://pkg.go.dev/github.com/shurcooL/go/generated">shurcooL&#x2F;go&#x2F;generated</a> というパッケージを利用したり、regexp パッケージを用いた正規表現でファイルの判定や、人によってはシェルスクリプトで判定していたようです。</p><figure class="highlight sh"><figcaption><span>自動生成を判定用するシェルスクリプト</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -Exq <span class="string">&#x27;^// Code generated .* DO NOT EDIT\.$&#x27;</span> <span class="string">&quot;<span class="variable">$file</span>&quot;</span></span><br></pre></td></tr></table></figure><p><code>IsGenerated()</code> の関数を新規に追加実装する箇所は、 <code>ast.File</code> や <code>build.Package</code> なども考えられたかと思いますが、互換性やフィールド追加は神経質に行いたいということで、ヘルパー関数となったようです。次の章で説明するGoVersionは <code>ast.File</code> へのフィールド追加なので、塩梅は分かるような分からないような。GoVersionは論理式が入って計算されるのでそれなりのロジックだけど、自動生成判定はシンプルなのでヘルパー関数になったんですかね、多分。</p><p>追加された <code>IsGenerated()</code>を試してみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;go/ast&quot;</span></span><br><span class="line"><span class="string">&quot;go/parser&quot;</span></span><br><span class="line"><span class="string">&quot;go/token&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="string">`// Code generated by My-Tool; DO NOT EDIT.</span></span><br><span class="line"><span class="string">package go121blog</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import(</span></span><br><span class="line"><span class="string">  &quot;fmt&quot;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func Show() &#123;</span></span><br><span class="line"><span class="string">  fmt.Println(&quot;hello generated&quot;)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">fset := token.NewFileSet()</span><br><span class="line">f, err := parser.ParseFile(fset, <span class="string">&quot;&quot;</span>, s, parser.ParseComments)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(ast.IsGenerated(f)) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意としては <code>ParseFile()</code> の引数に <code>parser.ParseComments</code> を渡さないと、コメントがフィールドに格納されないため、結果が <code>false</code> になります。ここは注意です。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-f, err := parser.ParseFile(fset, &quot;&quot;, s, parser.ParseComments)</span></span><br><span class="line"><span class="addition">+ f, err := parser.ParseFile(fset, &quot;&quot;, s, 0) // ast.IsGenerated(f) が falseになる</span></span><br></pre></td></tr></table></figure><p>上手く利用すれば、自動生成されたコードを除去してリントのルールを追加するなどが行いやすくなると感じました。</p><p>ちなみに実装は <code>strings.CutPrefix()</code>、<code>strings.CutSuffix()</code> で判定しており、正規表現は利用していない愚直なコードでした。</p><p><a href="https://github.com/golang/go/blob/go1.21rc4/src/go/ast/ast.go#L1092">https://github.com/golang/go/blob/go1.21rc4/src/go/ast/ast.go#L1092</a></p><h2 id="go-x2F-ast-の-File-GoVersion"><a href="#go-x2F-ast-の-File-GoVersion" class="headerlink" title="go&#x2F;ast の File.GoVersion"></a>go&#x2F;ast の File.GoVersion</h2><p><code>go/ast</code> パッケージの <code>File</code> に <code>GoVersion</code> というフィールドが追加されました。</p><figure class="highlight diff"><figcaption><span>追加されたフィールド</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type File struct &#123;</span><br><span class="line">Doc     *CommentGroup // associated documentation; or nil</span><br><span class="line">Package token.Pos     // position of &quot;package&quot; keyword</span><br><span class="line">Name    *Ident        // package name</span><br><span class="line">Decls   []Decl        // top-level declarations; or nil</span><br><span class="line"></span><br><span class="line">FileStart, FileEnd token.Pos       // start and end of entire file</span><br><span class="line">Scope              *Scope          // package scope (this file only)</span><br><span class="line">Imports            []*ImportSpec   // imports in this file</span><br><span class="line">Unresolved         []*Ident        // unresolved identifiers in this file</span><br><span class="line">Comments           []*CommentGroup // list of all comments in the source file</span><br><span class="line"><span class="addition">+GoVersion          string          // minimum Go version required by //go:build or // +build directives</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GoVersion</code> が示す意味は、 <code>//go:build</code> や <code>// +build</code> のディレクティブで示した最小のGoバージョンが入るそうです。</p><p><a href="https://github.com/golang/go/issues/59033">go&#x2F;ast, go&#x2F;build&#x2F;constraint: support for per-file Go versions using &#x2F;&#x2F;go:build lines #59033</a> によると、Goの互換性は以下の方針です。直接的には2の対応のために追加されたようです。</p><ol><li>Go 1.21から go.mod にかかれた <code>go</code> のバージョンが、最小バージョン要件となる。例えば、Go 1.21がGo 1.22とかかれたgo.modファイルをビルドできない</li><li>Goの最小バージョンが低くても、 <code>//go:build</code> タグに新しいバージョンを指定することを可能とする。また、逆に <code>//go:build</code> に古いバージョンを指定することも可能として、新しい機能をロックアウト（無効化）できるようにする。互換性のためダウングレードはGo 1.21以降のgo.mod に適用される</li></ol><p><code>//go:build</code> ディレクティブはGo1.17から導入された書き方で、従来は<code>// +build</code> でした。Build Constraintsと呼ばれ、例えば以下のように記載するとWindowsとLinux用のバイナリに対してビルド対象となります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:build windows linux</span></span><br></pre></td></tr></table></figure><p>OS名（windows, linux, solaris, darwinなど）やアーキテクチャ名（<code>386</code>, <code>arm</code>, <code>ard64</code>など）だけではなく、バージョンも指定できるようになったようですね。</p><p><code>//go:build</code> ディレクティブに <code>(linux &amp;&amp; go1.20) || (windows &amp;&amp; go1.21)</code> を追加して動かしてみます。実行環境はWindowsなので、 <code>go1.20</code> が出力されます。</p><figure class="highlight go"><figcaption><span>GoVersionの表示</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;go/parser&quot;</span></span><br><span class="line"><span class="string">&quot;go/token&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="string">`//go:build (linux &amp;&amp; go1.20) || (windows &amp;&amp; go1.21)</span></span><br><span class="line"><span class="string">package go121blog</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import(</span></span><br><span class="line"><span class="string">  &quot;fmt&quot;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func Show() &#123;</span></span><br><span class="line"><span class="string">  fmt.Println(&quot;hello goversion&quot;)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">fset := token.NewFileSet()</span><br><span class="line">f, err := parser.ParseFile(fset, <span class="string">&quot;&quot;</span>, s, parser.ParseComments)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(f.GoVersion) <span class="comment">// go1.20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ディレクティブで指定されたGoバージョンも取得できるのはマニアックに感じます。それなりの規模と歴史を持つ、コードベースを解析するような上級者向けのアップデートかなと思いました。</p><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><p>Goは下位互換性を重視していて強みの1つとしています。<a href="https://tip.golang.org/doc/go1compat">Go 1の互換性ポリシー</a>に従って破壊的変更は抑えられていますが（例えば公開されたインターフェースにメソッドを追加しないなど）、既存の実装がバグであり（既存のコードが古いアルゴリズムやバグのある動作に依存している場合）、それを修正すると、バグである挙動に依存したプログラムは壊れる可能性があるとのこと。対応としては前章にあるような <code>go.mod</code> などのgoバージョンを読み取るようになったり、GODEBUG環境変数の存在があります。</p><p>具体的に互換性でどういう課題が出たんだろうと思いましたが、<a href="https://go.googlesource.com/proposal/+/master/design/56986-godebug.md">Proposal: Extended backwards compatibility for Go</a> にいくつか例が書いてありました。Kubernetesチームでは平均で年1回ペースで問題が出たそうです。</p><p>例えば以下のような事象があったそうです。</p><ul><li>Go 1.17 では、0127.0000.0000.0001 など、先頭にゼロが付いているアドレスを拒否するように net.ParseIP が変更（BSD派生システムでは8進数として解釈するが、Goでは複数のRFCに従い10進数として解釈）<ul><li>Kubernetesクラスタは先頭ゼロのアドレスを保存している可能性があり、この変更によりノードアクセスができなくなる可能性があり、Go 1.17へのアップデートはブロックされた</li></ul></li></ul><p>上記のようなケースでもGODEBUG環境変数で過去の挙動になるように上書きしたり、 <code>go:debug</code> ディレクティブで個別に指定することを検討中だそうです。互換性にかける熱意が常に素晴らしいなと感じました。</p><h2 id="go-x2F-build"><a href="#go-x2F-build" class="headerlink" title="go&#x2F;build"></a>go&#x2F;build</h2><p><code>//go:</code> で始まるビルドディレクティブを <a href="https://pkg.go.dev/go/build@master#Package.Directives">Package</a>構造体の <code>Directives</code>, <code>TestDirectives</code>, <code>XTestDirectives</code> で参照できるようになりました。</p><h2 id="go-x2F-build-x2F-constraint"><a href="#go-x2F-build-x2F-constraint" class="headerlink" title="go&#x2F;build&#x2F;constraint"></a>go&#x2F;build&#x2F;constraint</h2><p>ビルド時に指定された、Goの最小要件バージョンを返す、<code>GoVersion()</code> が新しく追加されました。ドキュメントに書かれた例がわかりやすいです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GoVersion(linux &amp;&amp; go1<span class="number">.22</span>) = <span class="string">&quot;go1.22&quot;</span></span><br><span class="line">GoVersion((linux &amp;&amp; go1<span class="number">.22</span>) || (windows &amp;&amp; go1<span class="number">.20</span>)) = <span class="string">&quot;go1.20&quot;</span> =&gt; go1<span class="number">.20</span></span><br><span class="line">GoVersion(linux) = <span class="string">&quot;&quot;</span></span><br><span class="line">GoVersion(linux || (windows &amp;&amp; go1<span class="number">.22</span>)) = <span class="string">&quot;&quot;</span></span><br><span class="line">GoVersion(!go1<span class="number">.22</span>) = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="go-x2F-token"><a href="#go-x2F-token" class="headerlink" title="go&#x2F;token"></a>go&#x2F;token</h2><p>ファイルの行番号を返す、 <code>File.Lines()</code> のメソッドが追加されました。</p><p><a href="https://github.com/golang/go/issues/57708">go&#x2F;token: add a (*File).Lines method #57708</a>で提案された内容です。中身を読むと、すでに <code>SetLines()</code> メソッドは存在しており、getter が存在しなかったとのこと。</p><p>例としては、<a href="https://pkg.go.dev/golang.org/x/tools/go/internal/gcimporter">internal&#x2F;gcimporter</a> というパッケージで利用したいということで、おそらく goplsとの連携でコード補完などで利用したいのかなと思います。</p><h2 id="go-x2F-types"><a href="#go-x2F-types" class="headerlink" title="go&#x2F;types"></a>go&#x2F;types</h2><p><code>Package.GoVersion()</code> のメソッドが追加されました。中身は <code>go/ast.File.GoVersion()</code> と同じ。</p><p><a href="https://github.com/golang/go/issues/61175">go&#x2F;types: add Package.GoVersion method #61175</a> によると、ここのチェッカーが特定のパッケージに紐づいたGoバージョンを取得できると便利なため、追加する。厳密に言うとGo1.21には不要だが、Go 1.22では必要になるため（おそらくforループの変数の件だと思われる）、ツール作成者のためにも追加するとのこと。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>Go 1.21では自動生成したコードかどうかを判定するヘルパー関数が標準で追加されたので、自前で正規表現を書いたり、サードパーティのパッケージをインポートする必要がなくなったよ</li><li>Go 1.21でビルド時のGoバージョンを <code>//go:build</code> ディレクティブで指定できるようになりました。</li><li>ディレクティブで指定した内容は、 <code>go/ast</code> や <code>go/types</code> パッケージで合わせて取得できるようにあっているため、コード解析やツール作成者にも優しい変更です</li></ul><p>個人的には普段余り利用しない、意識しないパッケージだったので調べていて勉強になりました。最後まで読んでいただきありがとうございました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230801a/top.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;338&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="静的解析" scheme="https://future-architect.github.io/tags/%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90/"/>
    
    <category term="Go1.21" scheme="https://future-architect.github.io/tags/Go1-21/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.21連載始まります＆slogをどう使うべきか</title>
    <link href="https://future-architect.github.io/articles/20230731a/"/>
    <id>https://future-architect.github.io/articles/20230731a/</id>
    <published>2023-07-30T15:00:00.000Z</published>
    <updated>2023-08-16T07:07:40.563Z</updated>
    
    <content type="html"><![CDATA[<p>恒例のGo 1.21連載が始まります。</p><div class="scroll"><table><thead><tr><th>Date</th><th>Title</th><th>Author</th></tr></thead><tbody><tr><td>7&#x2F;31</td><td>slogをどう使うべきか(この記事)</td><td>渋川よしき</td></tr><tr><td>8&#x2F;1</td><td><a href="/articles/20230801a/">Go1.21のgo&#x2F;ast、go&#x2F;buildあたりのマイナーチェンジ</a></td><td>真野隼記</td></tr><tr><td>8&#x2F;2</td><td><a href="/articles/20230816a/">slicesパッケージのチートシート</a></td><td>宮永崇史</td></tr><tr><td>8&#x2F;3</td><td><a href="/articles/20230803a/">contextパッケージに追加されるWithoutCancelでクライアントとの切断に備えてみる</a></td><td>藤井亮佑</td></tr><tr><td>8&#x2F;4</td><td><a href="/articles/20230815a/">待望の組み込み関数min&#x2F;maxと新パッケージcmpの挙動確認</a></td><td>谷村元気</td></tr><tr><td>8&#x2F;7</td><td>maps</td><td>オチラル</td></tr></tbody></table></div><p>Go 1.21は久々の新しいライブラリが大量追加だったり、既存のパッケージへの改良の多数行われたり、あたらしい組み込み巻数が追加されたりで記事などが書きやすいリリースです。残念ながら、フューチャーで一番Goを使っているプロジェクトが山場で今回はちょっと書き手が少ないのですが、今回もお付き合いいただけるとうれしいです。</p><h1 id="1-21の更新内容のまとめダイジェスト"><a href="#1-21の更新内容のまとめダイジェスト" class="headerlink" title="1.21の更新内容のまとめダイジェスト"></a>1.21の更新内容のまとめダイジェスト</h1><ul><li>1.18の時に入るといって直前にキャンセルになった、ジェネリクスのためのパッケージslices&#x2F;mapsの復活</li><li>新しい組み込み巻数のmin&#x2F;max&#x2F;clearの追加</li><li>言語仕様の強化<ul><li>パッケージの初期化順序が仕様化</li><li>型推論ちょっぴり強力に</li><li>次期バージョンで入る予定の<a href="https://github.com/golang/go/wiki/LoopvarExperiment">ループ変数が共有されちゃうバグ対策</a>が実験実装</li></ul></li><li>ランタイムの性能改善(いつもの)<ul><li>深いスタックオーバーフロー時のトレースが見やすく(最新100ではなく、最新50と一番外側の50表示されるように)</li><li>GCの性能改善でTail Latency(レイテンシーの分布図のうち、最悪側）が最大40%減少</li><li>CGoでCとGoの間のオーバーヘッドが1&#x2F;10に</li></ul></li><li>コンパイラの改善<ul><li>1.20で入ったPGO（プロファイル結果を活用した最適化)でインタフェースを具象実装に展開して高速化</li><li>PGOがコンパイラ自体にに適用されて性能改善</li></ul></li><li>コアライブラリの追加(多数)<ul><li>slogパッケージが追加</li><li>slices&#x2F;maps&#x2F;cmpパッケージが追加</li><li>既存パッケージへの追加は大量で書ききれないので<a href="https://tip.golang.org/doc/go1.21#library">本家をご覧ください</a></li></ul></li></ul><h1 id="slogをどう使うべきか"><a href="#slogをどう使うべきか" class="headerlink" title="slogをどう使うべきか"></a>slogをどう使うべきか</h1><ul><li><a href="https://pkg.go.dev/log/slog@master">log&#x2F;slogリファレンス</a></li></ul><p>今回、新しいロガーが追加されました。ログはアプリケーションの状態を知る上で大切な手がかりを提供します。以前からあったGoのlogパッケージは、とても質素な作りで、デフォルト設定では日時を付与してテキストを出すだけのものでした。他の言語にはあるようなログレベルでのフィルタリングなどもありませんでした。</p><p>そのこともあり、zerolog、zapなど、高機能を売りとするサードパーティライブラリがいくつも登場し、人気となっています。もちろん、これらはパフォーマンス重視ということもあり、少しでも高速なものが欲しければこちらもまだ価値はあるでしょう。</p><p>自前のアプリケーションであればそれこそ自由に使えばいいのですが、自分が開発するコードがライブラリだったりすると、どういった使い方をすれば行儀が良いのか、というのが気になります。そういった観点でいろいろドキュメントやらソースコードを眺めてみて、きっとこういう使い方をすべきだろうな、というところをまとめてみました。</p><p>slogはかなり注目されている新パッケージで、解説もすでにいろいろ書かれているので簡単な使い方の解説などはそちらに譲ります。このエントリーでは実際にアプリケーションに組み込む場合に考えていかないと行けなそうなことにフォーカスします。</p><h2 id="slogの構造"><a href="#slogの構造" class="headerlink" title="slogの構造"></a>slogの構造</h2><p><a href="https://pkg.go.dev/log/slog@master">slogのドキュメント</a>を見ると、構造体やら何やらがたくさんあります。ぱっと見、どこから手をつけていいのか・・・となりますよね？</p><p><code>Handler</code>は最後の出力を担うインターフェイスです。標準ライブラリにはテキスト出力とJSON出力があります。直接ハンドラーを操作することはありません。<code>Logger</code>の初期化時に設定しておしまいです。ログ出力の最終段として、「必ず1つだけある」と考えてください。ログ出力の方式を決めるため、基本的にライブラリやアプリケーションのサブパッケージでこれをインスタンス化することはなく、アプリケーションの、いわばmain関数が作ることになると思います。</p><p><code>Handler</code>を渡して<code>Logger</code>構造体のインスタンスを作り、ログ出力はこの<code>Logger</code>のインスタンスに対して指令します。この<code>Logger</code>の<code>Info()</code>や<code>Debug()</code>や<code>Warn()</code>やら<code>Debug()</code>やらを使うと、その情報が<code>Handler</code>に渡って出力される、という流れです。ログレベルのフィルタリングなどは<code>Handler</code>の仕事です。</p><img src="/images/20230731a/slog1.png" alt="slog1.png" width="981" height="361" loading="lazy"><p>ロガーは子ロガーを作れます。親ロガーに対して、いくつかの属性（<code>Attr</code>)を付与したロガーです。このロガーで出力すると、付与した属性が毎回出力されます。Javaのlog4jなどを知っている人はMapped Diagnostic Context (MDC)を想像すればすぐに理解できるでしょう。</p><p>まあ、この図や説明はわかりやすくするための嘘が入っています。実際は親への関連などはなく、<code>Attr</code>を付与すると、<code>Attr</code>のインスタンスが設定された<code>Handler</code>のコピーと、それを参照するロガーのコピーが丸ごと作られます。このように実際にはパフォーマンスのために親をたどって属性収集を毎回したりしなくて済むようにコピーしていますが、まあ、上の図みたいにロガーに親子関係があって、ハンドラーが1つと考えた方がわかりやすいかと思います。コピーされるハンドラとかにはどうせ触れないですし。</p><p>あとは、1つのログの情報が<code>Record</code>ということぐらい知っておけば十分かと思います。</p><p>Fluentbitやsyslogに情報を流すハンドラーとか、そのままウェブアプリケーションが立ち上がってブラウザ上でログが見れるハンドラーとか、サードパーティ製のハンドラーはこれからぼちぼち登場するんじゃないかと思います。</p><h2 id="slogとcontext-Context"><a href="#slogとcontext-Context" class="headerlink" title="slogとcontext.Context"></a>slogとcontext.Context</h2><p>slogには<code>context.Context</code>を扱う関数がたくさんあります。Goのコンテキストを知っている人やOpenTelemetryのGo実装を使ってみた人、Javaのlog4jとかを知っているからすると「属性設定済みのロガーを<code>context.Context</code>に詰めて、予備先の関数でログを出した時に情報が出るようにするんでしょ？」と思うかもしれません。GoはOSスレッドがないのでスレッドローカルストレージがなく、コンテキストはその代替としてcontextのWithValue()は利用されている、というのをご存知の方も多いと思います。そのため、僕も僕もそう思っていました。</p><p>しかし、どんなにドキュメントをみても、ロガーを出し入れする関数はありません。<a href="https://github.com/golang/go/issues/58243">そういう使い方を議論するissue</a>もありましたが　現状はハンドラーにそのまま渡しているだけです。</p><img src="/images/20230731a/slog2.png" alt="slog2.png" width="981" height="461" loading="lazy"><p>よくよく考えればトレーシングIDなどは、コンテキストに格納されているはずで、ロガーにも属性として持つと2重持ちになってしまいます。出力時だけハンドラ自身がそれを取り出して書き出せば良い、という思想に思えます。</p><p>そのためにはハンドラーを自分でつくることになります。ウェブアプリケーションのミドルウェアのような構造でハンドラーをたくさん数珠繋ぎにすることになるかと思います。コンテキストに載せた情報を抽出してログに追加するハンドララッパーは次のようなコードになります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sloghelper</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;log/slog&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/shibukawa/uuid62/v2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// コンテキストにIDを設定</span></span><br><span class="line"><span class="keyword">type</span> _CtxKeyType <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ctxKey = _CtxKeyType&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithTraceID</span><span class="params">(ctx context.Context)</span></span> context.Context &#123;</span><br><span class="line">traceID, _ := uuid62.V7()</span><br><span class="line"><span class="keyword">return</span> context.WithValue(ctx, ctxKey, traceID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ハンドラーのラッパー</span></span><br><span class="line"><span class="keyword">type</span> WriteTraceIDHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">parent slog.Handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithWriteTraceIDHandler</span><span class="params">(parent slog.Handler)</span></span> *WriteTraceIDHandler &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;WriteTraceIDHandler&#123;</span><br><span class="line">parent: parent,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ログ出力に情報を付与するメソッド</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *WriteTraceIDHandler)</span></span> Handle(ctx context.Context, record slog.Record) <span class="type">error</span> &#123;</span><br><span class="line">record.Add(slog.String(<span class="string">&quot;traceID&quot;</span>, ctx.Value(ctxKey).(<span class="type">string</span>)))</span><br><span class="line"><span class="keyword">return</span> h.parent.Handle(ctx, record)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *WriteTraceIDHandler)</span></span> Enabled(ctx context.Context, level slog.Level) <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> h.parent.Enabled(ctx, level)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *WriteTraceIDHandler)</span></span> WithAttrs(attrs []slog.Attr) slog.Handler &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;WriteTraceIDHandler&#123;h.parent.WithAttrs(attrs)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *WriteTraceIDHandler)</span></span> WithGroup(name <span class="type">string</span>) slog.Handler &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;WriteTraceIDHandler&#123;h.parent.WithGroup(name)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ slog.Handler = (*WriteTraceIDHandler)(<span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ハンドラとロガーの初期化</span></span><br><span class="line">handler := WithWriteTraceIDHandler(slog.NewTextHandler(</span><br><span class="line">    os.Stdout,</span><br><span class="line">    &amp;slog.HandlerOptions&#123;</span><br><span class="line">    Level: slog.LevelDebug,</span><br><span class="line">    &#125;</span><br><span class="line">))</span><br><span class="line">slog.SetDefault(slog.New(handler))</span><br><span class="line"></span><br><span class="line"><span class="comment">// コンテキストに情報を載せてslogを呼ぶ</span></span><br><span class="line">ctx := sloghelper.WithTraceID(context.Background())</span><br><span class="line">slog.InfoContext(ctx, <span class="string">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure><p>無事トレースIDが出力されました。たぶん、アプリケーションごとにハンドララッパーは今後たくさん作られることになると思います。まあ、<code>Handle()</code>メソッドだけが関心ごとなので、http.HandlerFuncみたいにもっと軽量な書き方をするヘルパーライブラリが作られる気もします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time=2023-07-27T12:57:07.862+09:00 level=INFO msg=test traceID=2ts7gl7Y2bPmfd9L651m1</span><br></pre></td></tr></table></figure><h2 id="参考-Pythonのログのベストプラクティス"><a href="#参考-Pythonのログのベストプラクティス" class="headerlink" title="(参考)Pythonのログのベストプラクティス"></a>(参考)Pythonのログのベストプラクティス</h2><p>もうみなさんはエキスパートPythonプログラミング改訂4版を手にとっていただき、一人10冊ぐらいはお買い上げいただいたと思いますが、この中ではPythonのログのベストプラクティスというのがあります。ログのシステムはこうあるべき、というイメージを共有する上でも参考になると思うのでこちらを軽く紹介します。</p><p>まず、slogを使えば勝手に実現できることとしては以下の通りです。</p><ul><li>ログハンドラをルートロガーレベルに維持する</li><li>構造化ログメッセージを使用する</li><li>ログの設定は一箇所で行う</li><li>可能であれば、標準出力またはエラーストリームに直接ログを記録する</li></ul><p>Goのslogはトップでハンドラを1つしか持てないので、ハンドラは1つしか持てません。構造化ログも利用できます。ばっちりですね。設定もハンドラの初期化部分のみなのでこれも1箇所というのが自然と実現できます。また、Pythonには標準で<a href="https://docs.python.org/ja/3/library/logging.handlers.html">15種類のログハンドラーがあります</a>が、Goはテキスト出力とJSON出力だけです。出力先はio.Writerなのでos.Stdoutなどを指定すればすぐにコンソールに書き出せます。クラウド時代はこれだけでログコレクターが集めてくれるので必要十分と言えます。</p><p>Goでもそのまま共通で使えそうなプラクティスは以下の通りです。</p><ul><li>1つのイベントは1行に</li><li>システムのログ機能や分散ログシステムに委譲する</li><li>カスタム分散ログシステムを作成する衝動を避ける</li></ul><p>構造化ログというと、たくさんの情報が格納できますが、それぞれの行で独立したイベントを出力すると扱いやすくなります。共通の属性を持たせて、それでフィルタリングできるようにするとなお良いでしょう。</p><p>2つ目と3つ目ですが、Goだけですごく複雑なログ処理を実装するのは得策ではありません。ログをファイル出力してローテーションしつつ、定期的にどこかのファイルサーバーにバックアップなど、そう言った仕組みを作りこんだりはしない方が良いでしょう。もちろん、そういった車輪の再発明は間違いなく楽しいのですが、信頼性も要求されるため、既存のログ収集の仕組みを活用すべきです。</p><p>次の仕組みは今のslogでは利用できない機能です。</p><ul><li>モジュールごとのロガーを使用する</li></ul><p>Pythonはfuture.cool.appみたいにロガーにピリオド区切りの名前をつけられます。これが階層になっており、下の階層から上の階層にフィルタリングしながらログを集約していく、という構成になっています。ロガーごとにハンドラーを設定し、特定のパッケージのログはファイルに書くが、それ以外のログは出力しない、みたいな制御ができたりしますが、ここまでの柔軟性はslogにはありません。</p><p>slogの使い方の参考のためにもっと詳しく知りたい人はPythonの<a href="https://docs.python.org/ja/3/howto/logging.html">logging HOWTO</a>も参考になると思います。ロガーがたくさん持てたり、slogにはないフィルターというのがある以外は用語も近いし、アーキテクチャを考える人であれば何かしら得るものはあると思います。</p><h2 id="現状でのサードパーティライブラリのログ方針"><a href="#現状でのサードパーティライブラリのログ方針" class="headerlink" title="現状でのサードパーティライブラリのログ方針"></a>現状でのサードパーティライブラリのログ方針</h2><p>アプリケーションのログはハンドラの初期化も、どのようなメタデータを渡すのかも含めてなんでも自由にすれば良いのですが、ライブラリ側が好き勝手にログを出すと嫌われるでしょう。使う側のアプリケーション側からはライブラリに対して次のような情報を制御したいと思うでしょう。</p><ul><li>ログのフィルタリング</li><li>ログに渡す追加情報</li></ul><p>ログのフィルタリングは出力するログレベルの制御です。デバッグ中は細かく出したい、本番ではクリティカルなエラーの情報だけ出したい、ということが考えられます。現状はルートのハンドラ側での制御しかないため、ライブラリ側で「ライブラリごとの制御」というのは標準APIをそのまま使うだけでは実現できません。</p><p>例えば、アプリケーションがDBアクセスのライブラリだったとして、アプリケーションが持っているサーバーのインスタンスIDみたいな情報を、ライブラリから出すにも付与したい、というのが後者です。これは、前述のハンドラのラッパーを使えば実現できます。</p><p>問題は前者です。ハンドラ側でも呼び出し元情報が得られるので制御ができますが、ライブラリ側がアプリ側に特別なハンドラを使わせるのを強要するのは無理筋でしょう。そのため、ハンドラに手を加える案はこの場合利用できません。そうなると、ライブラリがロガーを呼び出す部分に干渉するしかなさそうです。</p><p>ということでロガーのメソッドをまるごとシミュレートしつつ、ライブラリ内部だけでログレベルでフィルタリングするようなものが必要になると思われます。だいたいこんなコードです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> LoggerFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">level  slog.Level</span><br><span class="line">logger *slog.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewLoggerFactory</span><span class="params">()</span></span> *LoggerFactory &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;LoggerFactory&#123;</span><br><span class="line">level: slog.Error,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lf *LoggerFactory)</span></span> SetLevel(level slog.Level) &#123;</span><br><span class="line">lf.level = level</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lf *LoggerFactory)</span></span> SetLogger(logger *slog.Logger) &#123;</span><br><span class="line">lf.logger = logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lf *LoggerFactory)</span></span> Get() *FilterLogger &#123;</span><br><span class="line"><span class="keyword">if</span> lf.logger == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;FilterLogger&#123;</span><br><span class="line">level:  lf.level,</span><br><span class="line">logger: slog.Default(),</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;FilterLogger&#123;</span><br><span class="line">level:  lf.level,</span><br><span class="line">logger: lf.logger,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FilterLogger <span class="keyword">struct</span> &#123;</span><br><span class="line">level  slog.Level</span><br><span class="line">logger *slog.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *FilterLogger)</span></span> Enabled(ctx context.Context, level slog.Level) <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> l == <span class="literal">nil</span> || l.level &gt; level &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l.logger.Enabled(ctx, level)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *FilterLogger)</span></span> Log(ctx context.Context, level slog.Level, msg <span class="type">string</span>, args ...any) &#123;</span><br><span class="line"><span class="keyword">if</span> l == <span class="literal">nil</span> || l.level &gt; level &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">l.logger.Log(ctx, level, msg, args...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *FilterLogger)</span></span> LogAttrs(ctx context.Context, level slog.Level, msg <span class="type">string</span>, attrs ...slog.Attr) &#123;</span><br><span class="line"><span class="keyword">if</span> l == <span class="literal">nil</span> || l.level &gt; level &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">l.logger.LogAttrs(ctx, level, msg, attrs...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *FilterLogger)</span></span> Debug(msg <span class="type">string</span>, args ...any) &#123;</span><br><span class="line"><span class="keyword">if</span> l == <span class="literal">nil</span> || l.level &gt; slog.LevelDebug &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">l.logger.Debug(msg, args...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:</span><br><span class="line"><span class="comment">// 以下、DebugContext, Info, InfoContext, Warn, WarnContext, Error, ErrorContextは</span></span><br><span class="line"><span class="comment">// それぞれのログレベルで比較して親ロガーを呼ぶだけでほぼ同じなのでしょうりゃく　</span></span><br></pre></td></tr></table></figure><p>利用するライブラリ側では、このファクトリー関数の初期化と、これを呼び出して2つ公開関数を追加します</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ↓ここから</span></span><br><span class="line"><span class="keyword">var</span> lf = sloghelper.NewLoggerFactory()</span><br><span class="line"></span><br><span class="line"><span class="comment">// これを公開しておく</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetLogLevel</span><span class="params">(level slog.Level)</span></span> &#123;</span><br><span class="line">lf.SetLevel(level)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetLogger</span><span class="params">(logger *slog.Logger)</span></span> &#123;</span><br><span class="line">lf.SetLogger(logger)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ↑ここまでは定型句としてパッケージごとにSetLogger()公開関数を定義する</span></span><br></pre></td></tr></table></figure><p>あとはslogではなくて、このGet()メソッドで取り出したFilterLoggerのメソッドを代わりに呼べば、制御が可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// すごい計算アルゴリズム</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Calc</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="comment">// 1からnまでの合計を計算しちゃう</span></span><br><span class="line">lf.Get().Info(<span class="string">&quot;計算開始&quot;</span>, slog.Int(<span class="string">&quot;入力値&quot;</span>, n))</span><br><span class="line">total := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n+<span class="number">1</span>; i++ &#123;</span><br><span class="line">total += i</span><br><span class="line">lf.Get().Debug(<span class="string">&quot;計算途中&quot;</span>, slog.Int(<span class="string">&quot;番目&quot;</span>, i), slog.Int(<span class="string">&quot;合計&quot;</span>, total))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> total &gt; <span class="number">256</span> &#123;</span><br><span class="line"><span class="comment">// たいへん！オーバーフローだ！</span></span><br><span class="line">lf.Get().Error(<span class="string">&quot;オーバーフロー&quot;</span>, slog.Int(<span class="string">&quot;入力値&quot;</span>, n))</span><br><span class="line">&#125;</span><br><span class="line">lf.Get().Info(<span class="string">&quot;計算結果&quot;</span>, slog.Int(<span class="string">&quot;結果&quot;</span>, total))</span><br><span class="line"><span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>さらにこのファクトリーの初期化時に環境変数からエラーレベルを変えるとか制御できるようになると夢が広がりますね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">packageName</span><span class="params">(depth <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">pc, _, _, ok := runtime.Caller(depth + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;can&#x27;t get caller&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fullName := runtime.FuncForPC(pc).Name()</span><br><span class="line">lastSlash := strings.LastIndexByte(fullName, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> lastSlash &lt; <span class="number">0</span> &#123;</span><br><span class="line">lastSlash = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">lastDot := strings.IndexByte(fullName[lastSlash:], <span class="string">&#x27;.&#x27;</span>) + lastSlash</span><br><span class="line"><span class="keyword">return</span> fullName[:lastDot]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewLoggerFactory</span><span class="params">()</span></span> *LoggerFactory &#123;</span><br><span class="line">pn := packageName(<span class="number">1</span>)</span><br><span class="line">env := os.Getenv(<span class="string">&quot;SLOG_&quot;</span> + strings.ReplaceAll(strings.ReplaceAll(pn, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;_&quot;</span>), <span class="string">&quot;.&quot;</span>, <span class="string">&quot;_&quot;</span>))</span><br><span class="line">level := slog.LevelError</span><br><span class="line"><span class="keyword">if</span> env != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">err := level.UnmarshalText([]<span class="type">byte</span>(env))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;Unknown Log Level for package %s: %s (fallback to LevelError)&quot;</span>, pn, env)</span><br><span class="line">level = slog.LevelError</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;LoggerFactory&#123;</span><br><span class="line">level: level,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>slogの基本的な使い方はすっ飛ばして、新しいアプリケーションやライブラリの開発にslogを組み込むにあたって、どのようにラッパーを作成するか、利用者側からは行儀の良いライブラリになるのか、といった観点でまとめてみました。</p><p>明日は真野隼記さんの記事になります。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;恒例のGo 1.21連載が始まります。&lt;/p&gt;
&lt;div</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="Go1.21" scheme="https://future-architect.github.io/tags/Go1-21/"/>
    
  </entry>
  
  <entry>
    <title>エキスパートPythonプログラミング改訂4版が発売されました</title>
    <link href="https://future-architect.github.io/articles/20230727a/"/>
    <id>https://future-architect.github.io/articles/20230727a/</id>
    <published>2023-07-26T15:00:00.000Z</published>
    <updated>2023-07-27T01:42:09.334Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230727a/image.png" alt="" width="500" height="642" loading="lazy"><p><a href="https://www.kadokawa.co.jp/product/302304004673/">エキスパートPythonプログラミング改訂4版</a>が本屋に並び始めました。電子版も購入できます。</p><p>改訂というと「ちょっと追加されたところを翻訳するだけで丸儲けやんけ」と思われる方もいるかもしれませんが、過去の中で一番大きく改訂されており、新規に一冊訳すのとほぼ変わらない、大変な翻訳作業になりました。</p><p>ざっと、4版の章構成と、それに該当する3版の章を並べたのがが次の表です。3版では17章あったのが、13章に整理統合されました。</p><div class="scroll"><table><thead><tr><th>4版の章</th><th>該当する3章の章</th></tr></thead><tbody><tr><td>第1章 現在のPythonのステータス</td><td>第1章 現在のPythonのステータス</td></tr><tr><td>第2章 現代的なPythonの開発環境</td><td>第2章 現代的なPythonの開発環境</td></tr><tr><td>第3章 Pythonの新しい要素</td><td>完全新規</td></tr><tr><td>第4章 Pythonと他の言語の比較</td><td>第3章 構文ベストプラクティス クラス以外, 第4章 構文ベストプラクティス クラスの世界</td></tr><tr><td>第5章 インターフェイス、パターン、モジュール化</td><td>第17章 Pythonのためのデザインパターン</td></tr><tr><td>第6章 並行処理</td><td>第15章 並行処理</td></tr><tr><td>第7章 イベント駆動プログラミング</td><td>第16章 イベント駆動型プログラミング</td></tr><tr><td>第8章 メタプログラミングの要素</td><td>第5章 メタプログラミングの要素</td></tr><tr><td>第9章 PythonとC&#x2F;C++をつなぐ</td><td>第9章 他言語によるPythonの拡張</td></tr><tr><td>第10章 テストと品質保証の自動化</td><td>第12章 テスト駆動開発</td></tr><tr><td>第11章 Pythonパッケージの作成と配布</td><td>第7章 パッケージを作る, 第8章 コードをデプロイする</td></tr><tr><td>第12章 アプリケーションの挙動とパフォーマンスの監視</td><td>第13章 最適化 一般原則とプロファイリング</td></tr><tr><td>第13章 最適化</td><td>第14章 最適化 テクニック集</td></tr></tbody></table></div><p>該当の章があっても、だいたいどの章も、文章が半分以上大きく変更されています。名前付け、ドキュメントといったPython固有でない内容は大幅にずばっと削られていますし、もう30年近く古いC++などのために作られ現代のプログラミング言語では親父の小言程度の扱いしかされないデザインパターンなどもほぼ削られています。その分、マイクロサービスなどの文脈でTwleve Factor Appとかオブザーバビリティの話題も追加されたりしています。トータルのページ数はあまり変わりませんが、かなり贅肉が削られて、よりゴツい感じにアップデートされています。</p><p>また、レビューアの方々も徹底的に（過去にあった文章かどうか関係なく）隅々まで見ていただいたりしたおかげで、過去と同じ原文にもかかわらず訳はより洗練されて見やすくなっていると思います。</p><p>今回も型ヒントについて日本語オリジナルのAppendixを追加したり、この技術ブログにも書いたコンテナ周りの話をコンパクトにして訳注として差し込んだりしていますし、書籍が説明する対象のPythonバージョンを上げて、最新のトピックの注釈を足したり、また現在サポートされなくなった3.7の情報は削ったりして、「今Pythonを書いている人」により相応しい内容にアップデートしていますし、原著にあったミスもかなり報告しながら翻訳を行なったので、原著を持っている人が改めて買っても価値を感じていただけるような翻訳になっているかと思います。</p><p>ぜひ、本屋で手に取っていただけるとうれしいと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230727a/image.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;642&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
    <category term="出版" scheme="https://future-architect.github.io/tags/%E5%87%BA%E7%89%88/"/>
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>フューチャーのSwagger（OpenAPI 2.0）規約の紹介</title>
    <link href="https://future-architect.github.io/articles/20230725a/"/>
    <id>https://future-architect.github.io/articles/20230725a/</id>
    <published>2023-07-24T15:00:00.000Z</published>
    <updated>2023-07-25T01:19:25.541Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230725a/top.png" alt="" width="409" height="11" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>フューチャーの有志メンバーでSwagger（OpenAPI Specification Version 2.0）のコーディング規約を作りました。多少の仕掛り部分はあるものの、ある程度見れるものになってきたので紹介させてください。</p><img src="/images/20230725a/example.png" alt="" width="800" height="632" loading="lazy"><p><a href="https://future-architect.github.io/coding-standards/documents/forOpenAPISpecification/OpenAPI_Specification_2.0.html">OpenAPI Specification 2.0規約 | Future Enterprise Coding Standards</a></p><p>※OpenAPI Specification バージョン3系の規約は2023年7月時点で鋭意作成中です。2系のみ先行して公開しました。2系は少し古いのでこれから開発する案件で利用するシーンは少ないかと思いますが、3系に生きる内容も多く含みますので参考にいただけるとです。</p><p>内容へのフィードバックは、<a href="https://github.com/future-architect/coding-standards/issues">Issue</a>か<a href="https://twitter.com/future_techblog">ツイッター</a>宛にメンションを入れてコメントを貰えると幸いです。</p><h2 id="Swagger（OpenAPI-2-0）とは"><a href="#Swagger（OpenAPI-2-0）とは" class="headerlink" title="Swagger（OpenAPI 2.0）とは"></a>Swagger（OpenAPI 2.0）とは</h2><p><a href="https://future-architect.github.io/articles/20191008/">本当に使ってよかったOpenAPI (Swagger) ツール</a>から引用します。</p><p>Swaggerは、<a href="https://swagger.io/specification/">OpenAPI仕様</a>（以下OAS）と言われる、REST APIを定義するための標準仕様にもとづいて構築された一連のオープンソースツールです。REST APIの設計、構築、文書化、および使用に役立つ機能を提供します。</p><p>提供されている主なツールは次のようなものがあります。</p><div class="scroll"><table><thead><tr><th align="left">Name</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://editor.swagger.io/">Swagger Editor</a></td><td align="left">OASに則ったAPI仕様を書くためのエディタ</td></tr><tr><td align="left"><a href="https://swagger.io/tools/swagger-ui/">Swagger UI</a></td><td align="left">OASに則ったAPI仕様からドキュメントを生成するツール</td></tr><tr><td align="left"><a href="https://swagger.io/tools/swagger-codegen/">Swagger Codegen</a></td><td align="left">OASに則ったAPI仕様からコードを生成するツール</td></tr></tbody></table></div><p>おそらく一般的にSwaggerと呼ばれるのはSwagger 2.0で、これは2014に公開された規約です。Swagger 2.0はOpenAPI 2.0と同義で、OpenAPI 3.0.0には2017年に、3.0.3は2020年に公開されています。</p><h2 id="なぜ作ったか"><a href="#なぜ作ったか" class="headerlink" title="なぜ作ったか"></a>なぜ作ったか</h2><p>フューチャーは常に数十の開発プロジェクトが動いており、それぞれの案件内でちょっとした開発規約が作られることもあれば、暗黙的に遵守されるルールもあります。プロジェクトの大小も様々で数名から数百人規模に及ぶこともあり、新卒採用もキャリア採用も活発なので、フレッシュなメンバーも多くジョインしてくれます。</p><p>キャッチアップをしやすいように暗黙知を減らし明文化する意味でも、一定ラインの品質を守るためのガイドラインを作る文化があります（大なり小なりどこでもそうだと思いますが）。個人的にも隣のプロジェクトが同じ技術スタックを採用しているのに、マイナールール違いが続出すると辛いので、ベースラインは整えておきたい気持ちが強いです。</p><p>OpenAPI についても複数のサービスが稼働済みのプロジェクトで導入されており、標準化していこうよとたまたま2023年の3月に話があがり、知見があるシニアなメンバーや、単純に活動に興味があるジュニアなメンバーで、ナレッジをまとめて作成がスタートしました。</p><p>そのため、規約のポリシーとしてはすべての領域に適用するというのではなく、フューチャー社内で需要が大きそうなユースケース（サードパーティ向けに広く開発するWeb APIではなく、限られたクライアントやシステムと連携することや、スキーマファーストであることなど）をターゲットにしています。</p><h2 id="規約の例"><a href="#規約の例" class="headerlink" title="規約の例"></a>規約の例</h2><p>例えば、レスポンスボディの記載で用いる <code>schema</code> ですが、この規約では <code>$ref</code> での参照を必須としています。直接の記載もSwagger文法上は許容されますが揺れが発生しないようにという意図です。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OK</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">body</span></span><br><span class="line">  <span class="attr">in:</span> <span class="string">body</span></span><br><span class="line">  <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">schema:</span></span><br><span class="line">    <span class="string">$ref:</span> <span class="string">&quot;#/definitions/PutUserAccount&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NG</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">body</span></span><br><span class="line">  <span class="attr">in:</span> <span class="string">body</span></span><br><span class="line">  <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">  <span class="attr">required:</span> [<span class="string">user_name</span>, <span class="string">account_type</span>, <span class="string">register_at</span>, <span class="string">point</span>]</span><br><span class="line">  <span class="attr">properties:</span></span><br><span class="line">    <span class="attr">user_name:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line">    <span class="attr">account_type:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="string">...</span></span><br></pre></td></tr></table></figure><p>ルールは非常に多く、HTTPメソッドの並び順、各名称のケース（camelCase, PascalCase, snake_case）、API互換性を保つためのパラメータの設定ルールなど多岐に渡ります。</p><h2 id="今後について"><a href="#今後について" class="headerlink" title="今後について"></a>今後について</h2><p>OpenAPI 3系の規約は2023年内（か年明け）に公開を目指したいです。</p><p>同時に、この規約に沿ったリンターやフォーマッタも開発していきたいと思っています（むしろそれがメイン目的でもあります）。リンターを作るに当たっては、ルールIDのようなものを採番していく必要があるため、規約の文面も番号ベースに書き直していく可能性があります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li><a href="https://future-architect.github.io/coding-standards/documents/forOpenAPISpecification/OpenAPI_Specification_2.0.html">Swaggerの規約</a>を作って公開しました</li><li>OpenAPI 3系に繋がる内容もあるので興味があればフィードバックお願いします</li><li>3系の規約も作っていくし、リンターやフォーマッターの開発も目指していきます</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230725a/top.png&quot; alt=&quot;&quot; width=&quot;409&quot; height=&quot;11&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="コーディング規約" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84/"/>
    
    <category term="Swagger" scheme="https://future-architect.github.io/tags/Swagger/"/>
    
    <category term="OpenAPI" scheme="https://future-architect.github.io/tags/OpenAPI/"/>
    
    <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
    <category term="チーム開発" scheme="https://future-architect.github.io/tags/%E3%83%81%E3%83%BC%E3%83%A0%E9%96%8B%E7%99%BA/"/>
    
  </entry>
  
  <entry>
    <title>Angularをがんばらないで書く</title>
    <link href="https://future-architect.github.io/articles/20230724a/"/>
    <id>https://future-architect.github.io/articles/20230724a/</id>
    <published>2023-07-23T15:00:00.000Z</published>
    <updated>2023-07-24T01:21:20.991Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230724a/top.png" alt="" width="783" height="391"><p>僕が案件でAngularを書きまくっていたのは、6とか8の時代ですが、最近のバージョンで気になるアップデートが入っていました。</p><ul><li>シグナル(v16から)</li><li>スタンドアローンコンポーネント(v14から)</li></ul><p>他のフレームワークをいろいろ触ると、Angularはかなり独特な雰囲気があります。隠しきれないJava感というか、他のフレームワークでは存在しない様々な概念が見え隠れして、それをキャッチアップするだけでも結構重いです。もちろん、それぞれ意味があって、「きっとこういうことをしたいんだろうな」というニーズがあってのことかとは思いますが、いろんなフレームワークをいったりきたりすると、ストレスが多少あります。</p><p>しかし、この新しい機能を使って、他のフレームワークでは見ない要素をそぎ落としてAngularを使ってみると、まあ悪くないんじゃないかと思いました。</p><h1 id="モジュールを使わない"><a href="#モジュールを使わない" class="headerlink" title="モジュールを使わない"></a>モジュールを使わない</h1><p>Angularでアプリケーションのひな型を作ると、<a href="https://angular.jp/guide/ngmodules">NgModule</a>というのがまずできあがります。自分で作ったコンポーネントなどはここに登録していきます。外部のライブラリなどもこのモジュールで提供されていたりします。アプリケーションはこのモジュールの組み合わせとして実現されています。</p><p>ただ、これはES6 modulesなどが登場する前に、非同期にページごとのソースを読み込むといった高度な機能を実現するために生まれたものだと思いますが、ES6のモジュール管理と、さらに似たようなモジュール管理と2重の管理になってしまっているのが現状かと思います。今だと、ES6モジュールベースでバンドラーが賢くモジュール分割してくれたりするのが、それとは別にAngularモジュールの管理も必要ということで余計な作業が増えてしまっています。</p><p>NgModulesで提供されている標準機能とかサードパーティの機能を利用するのはそのまま使えばよいのですが、Angular 14で入ったスタンドアローンコンポーネントを使っていくと、自分たちが作るアプリケーションに関してはもうモジュールの存在を気にしないでコードが書けます。</p><p>詳しくは<a href="https://angular.jp/guide/standalone-components">スタンドアローンコンポーネント</a>を見れば詳しく書いてあります。アプリケーションのひな型を作るといまだにモジュールを使うコードが生成されますが、以下のコマンドを実行するとモジュールを使わないコードに変更されます。起動するとメニューが出てくるので3つのコマンドを1つずつ実行すればモジュールを使わないコードができあがります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate @angular/core:standalone</span><br></pre></td></tr></table></figure><p>モジュールを使う場合、コンポーネントから使いたい部品があれば、すべて親のモジュールに登録してから使う必要がありますが、NgModuleがないすべてがスタンドアローンコンポーネントで構成されるアプリケーションであれば、自分が使いたいコンポーネントを.tsファイル内でES6 modulesのimportで取り込んで、デコレータに使いたいコンポーネントを足すだけになります。まあ、Options APIでVue.jsを使うぐらいの手間にはなったかな、と。</p><p>日本語だとlacolacoさんのZennの書籍がテストのやり方も含めてかなり詳しく書かれています。</p><ul><li>Zenn: <a href="https://zenn.dev/lacolaco/books/angular-standalone-components">実践 Angular: Standalone Components</a></li></ul><h1 id="DIを使わない"><a href="#DIを使わない" class="headerlink" title="DIを使わない"></a>DIを使わない</h1><p>Angularのマニュアルを見ると、UIに直接関係のあるコードはコンポーネントにして、そうではないコードはサービスというクラスに実装していくことが書かれています。</p><p>サービスはコンストラクタインジェクション(Javaの人にわかる表現でいうと)でUIのコンポーネントのインスタンスにインスタンスがわたってきます。サーバー通信などはそのサービスのなかで行います。なお、サーバーへのリクエストはAngularが提供する<a href="https://angular.jp/api/common/http/HttpClient">HttpClient</a>を使います。このHttpClientはレスポンスをRxJSの作法に従って返します。</p><p>DIを使ってアプリケーションを構成していくメリットとしては、細かく部品をテスト用のモック（テストダブル）に差し替えてテストできるというのがあります。テスト対象がコンポーネントであれば、そこが通信するサービスや、他のコンポーネントもすべてモックに差し替えられます。</p><p>ただ、そういう考え方自体がJava的というか、今では少数派な気がしています。単体テストの考え方&#x2F;使い方という本でも、このやり方（ロンドン学派）ではなく、一緒に動くコンポーネントのうちグローバル変数的な動きをして他のテストとの独立性を失ってしまうようなもの以外はそのままテストしてしまえ（古典学派）の方を推奨しています。</p><ul><li>マイナビ: <a href="https://book.mynavi.jp/ec/products/detail/id=134252">単体テストの考え方&#x2F;使い方</a></li><li>Future Tech Blog: <a href="https://future-architect.github.io/articles/20230220a/">単体テストの考え方&#x2F;使い方 の感想文</a></li></ul><p>実際、JestなどでもJavaScript単位でモックできたりもするのですが、今だとMock Service WorkerとかのサーバーAPIのレスポンスレベルでのモックの方がやりやすい（モックコードをミスしたときのトラブルシュートのストレスが少なくて禿げにくい）な、という実感があります。MSWをAngularと使うための詳しい説明のページもありますね。</p><ul><li><a href="https://timdeschryver.dev/blog/using-msw-in-an-angular-project#cypress-tests">Using MSW (Mock Service Worker) in an Angular project</a></li></ul><p>モックする必要がなければ、ふつうの関数やクラスとして実装して、コンポーネントクラスの.tsファイルからimportして使ってあげればいいんじゃないですかね？</p><h1 id="RxJSを使わない"><a href="#RxJSを使わない" class="headerlink" title="RxJSを使わない"></a>RxJSを使わない</h1><p>RxJSはデータの流れを細かく制御できるリアクティブなライブラリです。<a href="https://rxjs.dev/api">ものすごく豊富な機能</a>があり、使いこなせればアプリケーションコードの細かい動きの部分をフレームワークと独立したコードとして記述できます。標準のHttpClientを使うと、結果はRxJSのObservableを返してきて、RxJSの流儀データ処理できます。</p><p>ですが、今どきは<code>fetch()</code>を使って、await&#x2F;asyncで非同期を扱うのが一般的です。Angular2が最初に公開されたときは、<code>Promise</code>がJS公式になるかならないかぐらいです。まだ<code>fetch()</code>はなく、サーバー通信はコールバックのXHRでした。また、<code>fetch()</code>が出た直後も通信のキャンセルができないなど機能が足りないということもあったようです。</p><ul><li><a href="https://h5y1m141.hatenablog.com/entry/2019/02/05/131400">AngularでRxJSが使われる理由がわからず色々調べたら腹落ちした</a></li></ul><p>ですが、awaitと書けるようになって非同期の表現はとてもシンプルになりました。また、キャンセルもできるようになって <code>fetch()</code>でできないことも減りました(そもそも、他のフレームワークとかでキャンセルの有無で<code>fetch()</code>使わないとかはあんまり聞かない)。for await ofとかも追加されましたしね。</p><ul><li><a href="https://blog.jxck.io/entries/2017-07-19/aborting-fetch.html">Fetch の中断と Promise のキャンセル方法の標準化</a></li></ul><p>Promiseが言語側で積極的に使いやすくサポートされている現状を踏まえると、当時と比べてRxJSを使うメリットよりも、今はデメリットの方が大きい気がします。機能が豊富ということは、その分、その機能をある程度頭に入れておかないと他の人のコードが読めないということにもなりますし。</p><p>Angular 16から入った<a href="https://angular.jp/guide/signals">シグナル</a>は、ReactのHooksから来ている超軽量(RxJSと比べて)リアクティブなツールで、effectやcomputeを使うことで、Reactなどと近いコーディングができます。RxJSのようなデータの流れをしっかり定義していくのとは対照的です。</p><p>唯一、ちょっと惜しいなと思ったのは直接非同期なコードをシグナルで扱いにくいという点です。ただ、RxJSとの相互接続のヘルパーが用意されているので、それを使うと、シグナルと非同期を簡単につなげそうです。僕が作ってみたのはこんな感じです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toObservable, toSignal &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core/rxjs-interop&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> asyncCompute&lt;T, U&gt;(<span class="attr">source</span>: <span class="title class_">Signal</span>&lt;T&gt;, <span class="attr">convert</span>: <span class="function">(<span class="params">input: T</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;U&gt;, <span class="attr">initialValue</span>: U): <span class="title class_">Signal</span>&lt;U&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">Subject</span>&lt;U&gt;();</span><br><span class="line">  <span class="title function_">toObservable</span>(source).<span class="title function_">subscribe</span>(<span class="keyword">async</span> v =&gt; &#123;</span><br><span class="line">    result.<span class="title function_">next</span>(<span class="keyword">await</span> <span class="title function_">convert</span>(v));</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">toSignal</span>(result, &#123; initialValue &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こんな感じで何かしらのシグナルを入力に受け取って非同期で加工して結果を反映するシグナルを生成できますね。ユーザーIDを管理するシグナルを作って、サーバーにアクセスして、ユーザー情報を格納するシグナルに入れる、みたいなこともできます。</p><p>これは入力をスリープしてちょっと遅らせて2倍するだけのコードですが。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="title function_">signal</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">lazyCount = <span class="title function_">asyncCompute</span>(<span class="variable language_">this</span>.<span class="property">count</span>, <span class="keyword">async</span> (<span class="attr">input</span>: <span class="built_in">number</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">sleep</span>();</span><br><span class="line">  <span class="keyword">return</span> input * <span class="number">2</span>;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>あとでStack Overflowをみたら、<a href="https://stackoverflow.com/questions/76571331/using-async-await-in-angular-computed-signal">effectを使う事例</a>もありました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>モジュールをやめて、DIをやめて、RxJSをやめると、Angularを始めたときに学ばないといけないこと、書かなければいけないコードが、他のフレームワーク同等になりそうだな、と思ったのでブログにしてみました。これにTailwind CSSも組み合わせれば、だいぶ楽にアプリが書けそうな気がします。Angular Materialというしっかり作られた公式のUI部品がある、というのはAngularのメリットだと思いますし。</p><p>Angularも活発に開発され続けていますし、ちょっと趣味開発でも使ってみようかな、と思っています。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230724a/top.png&quot; alt=&quot;&quot; width=&quot;783&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="DI" scheme="https://future-architect.github.io/tags/DI/"/>
    
    <category term="Angular" scheme="https://future-architect.github.io/tags/Angular/"/>
    
    <category term="RxJS" scheme="https://future-architect.github.io/tags/RxJS/"/>
    
  </entry>
  
  <entry>
    <title>【SwiftUI】Swift Charts についてまとめてみた</title>
    <link href="https://future-architect.github.io/articles/20230720a/"/>
    <id>https://future-architect.github.io/articles/20230720a/</id>
    <published>2023-07-19T15:00:00.000Z</published>
    <updated>2023-08-22T02:59:06.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして！2022年5月キャリア入社、HealthCare Innovation Group(HIG)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の橋本です。技術ブログ初投稿です。</p><p>iOS16からApple標準で利用できるようになったSwift Chartsというグラフ等を作成できるフレームワークを取り上げます。</p><p>取り上げた理由としては、２点あります。</p><ol><li>現在のプロジェクトで活用する機会がありそうなため、事前にキャッチアップしておきたいと考えたため</li><li>データ分析の分野にも興味があり、後ほど投稿しよう思っているSwiftで機械学習をしたときの結果をきれいに可視化してみたいと思っているから</li></ol><p>早速本題に入っていきます。内容は次のような構成です。</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><ul><li>Swift Chartsとは<ul><li>Swift Chartsの基本的な使い方</li><li>グラフを描く要素を定義するデータ構造を設計する</li></ul></li><li>6つのMarkとその使い方<ul><li>AreaMask</li><li>LineMark</li><li>PointMark</li><li>RectangleMark</li><li>RuleMark</li><li>BarMark</li></ul></li><li>iPhoneのScreen Timeの表示をSwift Chartsで作ってみる</li></ul><h2 id="Swift-Chartsとは"><a href="#Swift-Chartsとは" class="headerlink" title="Swift Chartsとは"></a>Swift Chartsとは</h2><p>Swift Chartsとは、WWDC2022で発表されたカスタマイズされたグラフを作成できるSwiftUIフレームワークです。</p><p><a href="https://developer.apple.com/documentation/charts">https://developer.apple.com/documentation/charts</a></p><p>イメージとしては、以下のように様々なグラフを描くことができます。<br><img src="/images/20230720a/image.png" alt="" width="1200" height="424" loading="lazy"></p><p>また、WWDC2023のセッション(<a href="https://developer.apple.com/videos/play/wwdc2023/10037/">Explore pie charts and interactivity in Swift Charts</a>)で7つ目となる<code>SectorMark</code>が発表されました。<code>SectorMark</code>を使うことで簡単にPie Chartを作ることがiOS17から可能になるとのことです。</p><img src="/images/20230720a/image_2.png" alt="" width="1200" height="472" loading="lazy"><p><a href="https://developer.apple.com/videos/play/wwdc2023/10037/">https://developer.apple.com/videos/play/wwdc2023/10037/</a></p><p><a href="https://developer.apple.com/documentation/charts/sectormark">https://developer.apple.com/documentation/charts/sectormark</a></p><h3 id="Swift-Chartsの基本的な使い方"><a href="#Swift-Chartsの基本的な使い方" class="headerlink" title="Swift Chartsの基本的な使い方"></a>Swift Chartsの基本的な使い方</h3><p>簡単な棒グラフを作っていきます。<br>完成イメージは、縦軸が値段、横軸にフルーツが並ぶ棒グラフです。<br>使用する要素は以下のとおりです。</p><div class="scroll"><table><thead><tr><th>フルーツ</th><th>値段</th></tr></thead><tbody><tr><td>りんご</td><td>100円</td></tr><tr><td>オレンジ</td><td>50円</td></tr><tr><td>バナナ</td><td>200円</td></tr></tbody></table></div><p>早速作っていきます。<br>まず、Swift Chartsを利用するために、<code>Charts</code>をインポートします。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Charts</span><br></pre></td></tr></table></figure><p>これによって、Swift Chartsが使えるようになりました。</p><p>次にグラフを描画する場所を定義します。</p><p>グラフを記述する場所として、View配下に<code>Chart &#123;&#125;</code>を次のように記載します。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span> &#123;</span><br><span class="line">            <span class="comment">// ここに後述するMarkを記載します。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次に、今回は棒グラフを作成するので、棒グラフを描くことができる<code>BarMark</code>を使っていきます。</p><p>さきほどのコードに<code>BarMark</code>を追加します。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Chart</span> &#123;</span><br><span class="line">    <span class="type">BarMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;fruit&quot;</span>, <span class="string">&quot;りんご&quot;</span>),</span><br><span class="line">        y: .value(<span class="string">&quot;Price&quot;</span>, <span class="number">100</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/20230720a/5fd9a545-cb98-f283-f114-5216698e0097.png" alt="" width="564" height="432" loading="lazy"><p>BarMark内の<code>x: .value(&quot;Fruit&quot;, &quot;Apple&quot;)</code>でx軸のラベル自体を<code>Fruit</code>と定義し、表示されている一つのバー要素が<code>Apple</code>であることを示しています。<code>y: .value(&quot;Price&quot;, 100)</code>も同様に、y軸のラベル自体を<code>Price</code>と定義し、表示されている一つのバー要素が<code>100</code>であることを示しています。</p><p>”りんご” のバーを追加できましたので、オレンジ、バナナを追加します。</p><p>追加する方法は、とても簡単でオレンジ用、バナナ用のBarMarkをそれぞれ追加するだけです。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Chart</span> &#123;</span><br><span class="line">    <span class="type">BarMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;fruit&quot;</span>, <span class="string">&quot;りんご&quot;</span>),</span><br><span class="line">        y: .value(<span class="string">&quot;Price&quot;</span>, <span class="number">100</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="type">BarMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;fruit&quot;</span>, <span class="string">&quot;オレンジ&quot;</span>),</span><br><span class="line">        y: .value(<span class="string">&quot;Price&quot;</span>, <span class="number">50</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="type">BarMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;fruit&quot;</span>, <span class="string">&quot;バナナ&quot;</span>),</span><br><span class="line">        y: .value(<span class="string">&quot;Price&quot;</span>, <span class="number">200</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/20230720a/4616977c-472b-b182-8dea-58c0b452892c.png" alt="" width="558" height="430" loading="lazy"><p>これで完成イメージ通りのグラフが完成しました。しかし、この方法ですとBarMarkを要素が一つ追加するごとに増えていくので、数が多くなると大変見づらくなってしまいます。</p><p>そこで、グラフの要素を構造体で定義することで<code>View</code>内を簡潔に記載することができます。</p><h4 id="グラフを描く要素を定義するデータ構造を設計する"><a href="#グラフを描く要素を定義するデータ構造を設計する" class="headerlink" title="グラフを描く要素を定義するデータ構造を設計する"></a>グラフを描く要素を定義するデータ構造を設計する</h4><p>グラフで利用するデータ構造の一般的な設計について説明します。</p><p>Chartsでは、ForEachのようにループ文を使うことができるため、構造体を<code>Identifiable</code>プロトコルに準拠させ、一意の<code>id</code>をプロパティとして定義しておきます。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Data</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id <span class="operator">=</span> <span class="type">UUID</span>()   <span class="comment">// 一意のidを持たせる</span></span><br><span class="line">    <span class="keyword">let</span> fruitName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> price: <span class="type">Double</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを用いて、先程紹介した棒グラフを実装すると次のようになります。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 棒グラフの各要素を定義する</span></span><br><span class="line"><span class="keyword">let</span> item:[<span class="type">Item</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">Item</span>(price: <span class="number">100</span>, fruitName: <span class="string">&quot;apple&quot;</span>),</span><br><span class="line">    <span class="type">Item</span>(price: <span class="number">50</span>, fruitName: <span class="string">&quot;orange&quot;</span>),</span><br><span class="line">    <span class="type">Item</span>(price: <span class="number">200</span>, fruitName: <span class="string">&quot;Banana&quot;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(item) &#123; element <span class="keyword">in</span></span><br><span class="line">            <span class="type">BarMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;Fruit&quot;</span>, element.fruitName),</span><br><span class="line">                y: .value(<span class="string">&quot;Price&quot;</span>, element.price)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><code>Charts</code>を<code>ForEach</code>のように利用することができるため、これまでSwiftUIを触ったことがある人にはとても使いやすいと思いました。</p><h2 id="6つのMarkとその使い方"><a href="#6つのMarkとその使い方" class="headerlink" title="6つのMarkとその使い方"></a>6つのMarkとその使い方</h2><p>6つのグラフを描画するMarkの使い方について、紹介します。<br>表に6つのMark名と主に使われるグラフとそのイメージ画像を一覧化しています。</p><div class="scroll"><table><thead><tr><th>名前</th><th>説明</th><th>イメージ</th></tr></thead><tbody><tr><td>AreaMark</td><td>面グラフ</td><td><img src="/images/20230720a/image_3.png" alt="image.png" width="312" height="214" loading="lazy"></td></tr><tr><td>LineMark</td><td>折れ線グラフ</td><td><img src="/images/20230720a/image_4.png" alt="image.png" width="311" height="211" loading="lazy"></td></tr><tr><td>PointMark</td><td>散布図</td><td><img src="/images/20230720a/image_5.png" alt="image.png" width="319" height="212" loading="lazy"></td></tr><tr><td>RectangleMark</td><td>ヒートマップ</td><td><img src="/images/20230720a/image_6.png" alt="image.png" width="308" height="213" loading="lazy"></td></tr><tr><td>RuleMark</td><td>水平線、垂直線</td><td><img src="/images/20230720a/image_7.png" alt="image.png" width="320" height="218" loading="lazy"></td></tr><tr><td>BarMark</td><td>棒グラフ</td><td><img src="/images/20230720a/image_8.png" alt="image.png" width="314" height="213" loading="lazy"></td></tr></tbody></table></div><p>BarMarkの使い方は、すでに紹介しましたので、残りの5つのMarkのサンプルコードを次に記載します。</p><p>（ここでは基本的にデータ構造などのコードは省き、<code>Chart&#123;&#125;</code>内のコードのみを載せています。）</p><h3 id="Area-Markのサンプルコード"><a href="#Area-Markのサンプルコード" class="headerlink" title="Area Markのサンプルコード"></a>Area Markのサンプルコード</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Chart</span>(cheeseburgerCost) &#123;</span><br><span class="line">    <span class="type">AreaMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;Date&quot;</span>, <span class="variable">$0</span>.date),</span><br><span class="line">        y: .value(<span class="string">&quot;Price&quot;</span>, <span class="variable">$0</span>.price)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LineMarkのサンプルコード"><a href="#LineMarkのサンプルコード" class="headerlink" title="LineMarkのサンプルコード"></a>LineMarkのサンプルコード</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Chart</span>(data) &#123;</span><br><span class="line">    <span class="type">LineMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;Month&quot;</span>, <span class="variable">$0</span>.date),</span><br><span class="line">        y: .value(<span class="string">&quot;Hours of Sunshine&quot;</span>, <span class="variable">$0</span>.hoursOfSunshine)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PointMarkのサンプルコード"><a href="#PointMarkのサンプルコード" class="headerlink" title="PointMarkのサンプルコード"></a>PointMarkのサンプルコード</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Chart</span>(data) &#123;</span><br><span class="line">    <span class="type">PointMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;Wing Length&quot;</span>, <span class="variable">$0</span>.wingLength),</span><br><span class="line">        y: .value(<span class="string">&quot;Wing Width&quot;</span>, <span class="variable">$0</span>.wingWidth)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RectangleMarkのサンプルコード"><a href="#RectangleMarkのサンプルコード" class="headerlink" title="RectangleMarkのサンプルコード"></a>RectangleMarkのサンプルコード</h3><p>このサンプルコードでは、<code>width</code>と<code>height</code>でバーエリア内の比率を1.0にすることでヒートマップを作成しています。作成されるヒートマップは、上記で記載している表中のイメージのものです。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">MatrixEntry</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> positive: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> negative: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> num: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> data: [<span class="type">MatrixEntry</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">MatrixEntry</span>(positive: <span class="string">&quot;+&quot;</span>, negative: <span class="string">&quot;+&quot;</span>, num: <span class="number">125</span>),</span><br><span class="line">    <span class="type">MatrixEntry</span>(positive: <span class="string">&quot;+&quot;</span>, negative: <span class="string">&quot;-&quot;</span>, num: <span class="number">10</span>),</span><br><span class="line">    <span class="type">MatrixEntry</span>(positive: <span class="string">&quot;-&quot;</span>, negative: <span class="string">&quot;-&quot;</span>, num: <span class="number">80</span>),</span><br><span class="line">    <span class="type">MatrixEntry</span>(positive: <span class="string">&quot;-&quot;</span>, negative: <span class="string">&quot;+&quot;</span>, num: <span class="number">1</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RectangleMaskView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(data) &#123;</span><br><span class="line">            <span class="type">RectangleMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;Positive&quot;</span>, <span class="variable">$0</span>.positive),</span><br><span class="line">                y: .value(<span class="string">&quot;Negative&quot;</span>, <span class="variable">$0</span>.negative)</span><br><span class="line">                width: .ratio(<span class="number">1</span>),</span><br><span class="line">                height: .ratio(<span class="number">1</span>)</span><br><span class="line">            )</span><br><span class="line">            .foregroundStyle(by: .value(<span class="string">&quot;Number&quot;</span>, <span class="variable">$0</span>.num))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 凡例を非表示に設定</span></span><br><span class="line">        .chartLegend(.hidden)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Y軸のラベル位置を設定</span></span><br><span class="line">        .chartYAxis &#123;</span><br><span class="line">            <span class="type">AxisMarks</span>(preset: .aligned, position: .leading)</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(width: <span class="number">300</span>, height: <span class="number">200</span>)</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="RuleMarkのサンプルコード"><a href="#RuleMarkのサンプルコード" class="headerlink" title="RuleMarkのサンプルコード"></a>RuleMarkのサンプルコード</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> data: [<span class="type">Pollen</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">Pollen</span>(startMonth: <span class="number">1</span>, numMonths: <span class="number">9</span>, source: <span class="string">&quot;Trees&quot;</span>),</span><br><span class="line">    <span class="type">Pollen</span>(startMonth: <span class="number">12</span>, numMonths: <span class="number">1</span>, source: <span class="string">&quot;Trees&quot;</span>),</span><br><span class="line">    <span class="type">Pollen</span>(startMonth: <span class="number">3</span>, numMonths: <span class="number">8</span>, source: <span class="string">&quot;Grass&quot;</span>),</span><br><span class="line">    <span class="type">Pollen</span>(startMonth: <span class="number">4</span>, numMonths: <span class="number">8</span>, source: <span class="string">&quot;Weeds&quot;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RuleMaskView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(data) &#123;</span><br><span class="line">            <span class="type">RuleMark</span>(</span><br><span class="line">                xStart: .value(<span class="string">&quot;Start Date&quot;</span>, <span class="variable">$0</span>.startDate),</span><br><span class="line">                xEnd: .value(<span class="string">&quot;End Date&quot;</span>, <span class="variable">$0</span>.endDate),</span><br><span class="line">                y: .value(<span class="string">&quot;Pollen Source&quot;</span>, <span class="variable">$0</span>.source)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(width: <span class="number">300</span>, height: <span class="number">200</span>)</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SectorMarkのサンプルコード-iOS17以降"><a href="#SectorMarkのサンプルコード-iOS17以降" class="headerlink" title="SectorMarkのサンプルコード(iOS17以降)"></a>SectorMarkのサンプルコード(iOS17以降)</h3><p>WWDC2023で発表された<code>SectorMark</code>のサンプルコードです。<code>BarMark</code>等で使っていた<code>x:</code>を<code>angle</code>に変えるだけで、簡単にPie chartsに変換できます。</p><p>また、<code>innnerRadius:</code>、<code>angularInset</code>でPie chartsをカスタマイズすることができます。<code>innnerRadius:</code>を使用することで、パイチャートの内部を指定の比率だけくり抜き、ドーナッツチャートにすることもできます。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Chart</span>(data, id: \.name) &#123; name, sales <span class="keyword">in</span></span><br><span class="line">        <span class="type">SectorMark</span>(</span><br><span class="line">            angle: .value(<span class="string">&quot;Value&quot;</span>, sales),</span><br><span class="line">            innerRadius: .ratio(<span class="number">0.618</span>),  <span class="comment">// Pie charts中心から指定の比率だけくり抜ける</span></span><br><span class="line">            angularInset: <span class="number">1</span> <span class="comment">// Pie chartsの各要素の間に1 pointの隙間を与える</span></span><br><span class="line">        )</span><br><span class="line">        .cornerRadius(<span class="number">4</span>)</span><br><span class="line">        .foregroundStyle(by: .value(<span class="string">&quot;Product category&quot;</span>, name))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再掲となりますが、以下のWWDC2023のセッション動画を見ていただけると、<code>SectorMark</code>について理解が進むと思います。</p><p><a href="https://developer.apple.com/videos/play/wwdc2023/10037/">https://developer.apple.com/videos/play/wwdc2023/10037/</a></p><h1 id="スクリーンタイムのグラフを模倣して作ってみた"><a href="#スクリーンタイムのグラフを模倣して作ってみた" class="headerlink" title="スクリーンタイムのグラフを模倣して作ってみた"></a>スクリーンタイムのグラフを模倣して作ってみた</h1><p>最後に、学習してきた知識を活用して、iPhoneアプリなどに標準で搭載されているスクリーンタイムのグラフを模倣してみました。</p><h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul><li>macOS: Ventura 13.4.1</li><li>Xcode: Version 14.3.1 (14E300c)</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BarItem</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dayOfWeek: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> hour: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> category: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> data: [<span class="type">BarItem</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">BarItem</span>(dayOfWeek: <span class="string">&quot;日&quot;</span>, hour: <span class="number">1.5</span>, category: <span class="string">&quot;エンターテイメント&quot;</span>),</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ScreenTimeWidgetView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationStack</span> &#123;</span><br><span class="line">            <span class="type">List</span> &#123;</span><br><span class="line">                <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">&quot;スクリーンタイム&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">VStack</span>(alignment: .leading, spacing: <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;1日の平均&quot;</span>)</span><br><span class="line">                            .font(.footnote)</span><br><span class="line">                            .foregroundColor(.secondary)</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;3 時間 45 分&quot;</span>)</span><br><span class="line">                            .font(.title)</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// グラフを描画</span></span><br><span class="line">                        <span class="type">Chart</span> &#123;</span><br><span class="line">                            <span class="type">ForEach</span>(data) &#123;</span><br><span class="line">                                <span class="type">BarMark</span>(</span><br><span class="line">                                    x: .value(<span class="string">&quot;Category&quot;</span>, <span class="variable">$0</span>.dayOfWeek),</span><br><span class="line">                                    y: .value(<span class="string">&quot;Profit&quot;</span>, <span class="variable">$0</span>.hour)</span><br><span class="line">                                )</span><br><span class="line">                                .foregroundStyle(<span class="variable">$0</span>.color)</span><br><span class="line">                                .foregroundStyle(by: .value(<span class="string">&quot;Product Category&quot;</span>, <span class="variable">$0</span>.category))</span><br><span class="line">                                <span class="comment">// 棒グラフの角を丸くする</span></span><br><span class="line">                                .cornerRadius(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 一週間の平均利用時間(h)</span></span><br><span class="line">                                <span class="type">RuleMark</span>(y: .value(<span class="string">&quot;平均&quot;</span>, <span class="number">3.45</span>))</span><br><span class="line">                                    .foregroundStyle(.green)</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 線のスタイルを指定。ここでは点線にしている。</span></span><br><span class="line">                                    .lineStyle(<span class="type">StrokeStyle</span>(lineWidth: <span class="number">1.5</span>, lineCap: .butt, lineJoin: .miter, dash: [<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>], dashPhase: <span class="number">0</span>))</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        .chartForegroundStyleScale([</span><br><span class="line">                            <span class="string">&quot;エンターテイメント&quot;</span>: .blue, <span class="string">&quot;仕事の効率化とファイナンス&quot;</span>: .cyan, <span class="string">&quot;SNS&quot;</span>: .orange</span><br><span class="line">                        ])</span><br><span class="line">                    &#125;</span><br><span class="line">                    .frame(width: <span class="number">300</span>, height: <span class="number">250</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/20230720a/c82576c7-af28-9a39-950c-a5b1206ef480.png" alt="" width="872" height="828" loading="lazy"><p>本物にかなり似たグラフを実装できたと思います。</p><p>より本物のスクリーンタイムに合わせるには、以下をうまく実装に反映させる必要があります。</p><ul><li><code>RuleMark</code>の点線の横に、平均という文字を入れること</li><li>縦軸の目盛りを調節すること</li><li>縦軸の目盛りに単位を追加すること</li><li>日、月、などの曜日をそれぞれの要素内で左に寄せること</li></ul><p>これらの課題は、時間を見つけて改善していきたいと思います。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回は、iOS16から利用できるようになったSwift Chartsについて理解を深めました。</p><p>今後もSwift周りで学習した内容を投稿していきたいと思いますので、その際もお読みいただけると嬉しいです。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><p><a href="https://developer.apple.com/documentation/charts/areamark">https://developer.apple.com/documentation/charts/areamark</a></p><p><a href="https://developer.apple.com/documentation/charts/linemark">https://developer.apple.com/documentation/charts/linemark</a></p><p><a href="https://developer.apple.com/documentation/charts/pointmark">https://developer.apple.com/documentation/charts/pointmark</a></p><p><a href="https://developer.apple.com/documentation/charts/rectanglemark">https://developer.apple.com/documentation/charts/rectanglemark</a></p><p><a href="https://developer.apple.com/documentation/charts/rulemark">https://developer.apple.com/documentation/charts/rulemark</a></p><p><a href="https://developer.apple.com/documentation/charts/barmark">https://developer.apple.com/documentation/charts/barmark</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">医療・ヘルスケア分野での案件や新規ビジネス創出を担う、2020年に誕生した事業部です。設立エピソードは<a href="https://note.future.co.jp/n/n8b57d4bf4604">未来報</a>の記事をご覧ください。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして！2022年5月キャリア入社、HealthCare Innovation Group(HIG)&lt;sup</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="iOS" scheme="https://future-architect.github.io/tags/iOS/"/>
    
    <category term="Swift" scheme="https://future-architect.github.io/tags/Swift/"/>
    
    <category term="SwiftUI" scheme="https://future-architect.github.io/tags/SwiftUI/"/>
    
    <category term="iOS16" scheme="https://future-architect.github.io/tags/iOS16/"/>
    
  </entry>
  
  <entry>
    <title>Software Design 2023年7月号 gRPCで始めるWeb API開発 3章を寄稿しました</title>
    <link href="https://future-architect.github.io/articles/20230714a/"/>
    <id>https://future-architect.github.io/articles/20230714a/</id>
    <published>2023-07-13T15:00:00.000Z</published>
    <updated>2023-07-14T01:48:34.612Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230714a/top.png" alt="" width="400" height="564" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>2023年6月16日に発売された、<a href="https://gihyo.jp/magazine/SD/archive/2023/202307">Software Design 2023年7月号</a>の特集である、「gRPCで始めるWeb API開発」の3章をフューチャーメンバーである、渋川、武田、真野の3名で寄稿させていただきました。このような寄稿の機会をくださった技術評論社の方々には、心からお礼申し上げます。</p><h2 id="Software-Design-とは"><a href="#Software-Design-とは" class="headerlink" title="Software Design とは"></a>Software Design とは</h2><p>技術評論社が出版している月刊の技術情報誌です。Webサービスを開発するソフトウェア業界のエンジニアにとっては説明不要と言っていいくらい鉄板です。</p><p>毎月様々なテーマについて特集を組んで取り扱っており、プログラミングだけでなく、OSやネットワークまで、その内容は多岐に渡ります。入門者・初心者向けの内容から実践的な内容も多く含まれているので、新人からベテランまであらゆるエンジニアにおすすめできる雑誌です。</p><h2 id="執筆のきっかけ"><a href="#執筆のきっかけ" class="headerlink" title="執筆のきっかけ"></a>執筆のきっかけ</h2><p>寄稿の記念（と販売促進）を願って公開していた<a href="https://future-architect.github.io/tags/SoftwareDesign/">過去記事</a>によると2018年頃から、フューチャー社員も記事を寄稿することが増えたようです。</p><p>今回の直接のキッカケは2022年の<a href="https://future-architect.github.io/articles/20220622a/">サービス間通信とIDL（インタフェース記述言語）連載を始めます</a>のブログリレーにあったgRPC関連の記事です。ここから寄稿どうでしょうか？と技術評論社さんからご提案をいただきました。会社名義で発信しておくと良いことがありますね。私はフューチャーブログの運営もしているので嬉しいです。引き受けて良いですかね？と広報の石井さんと部署のボスの宮原さんに聞いたら、OK～と即レスだったので急ぎメンバーを集めてネタのディスカッションを始めました。</p><h2 id="執筆の流れ"><a href="#執筆の流れ" class="headerlink" title="執筆の流れ"></a>執筆の流れ</h2><p><a href="https://future-architect.github.io/articles/20220721b/#%E5%9F%B7%E7%AD%86%E3%81%AE%E3%83%95%E3%83%AD%E3%83%BC">武田さんの記事</a>に詳しく書かれています。今回のgRPC記事もトピックごとに役割分担して臨みました。</p><h2 id="執筆してよかったこと"><a href="#執筆してよかったこと" class="headerlink" title="執筆してよかったこと"></a>執筆してよかったこと</h2><p>私達の担当部分のテーマは「gRPC利用時のAPI設計ポイント」です。</p><p>元々フューチャーにおけるWeb API開発は、私の観測範囲では、OpenAPI、gRPC、GraphQLが使われており、諸々の事情でスキーマ駆動で行われることが大半です。この理由をいくつか挙げると、Web APIの開発本数をマネジメント上、開発に本格的に入る前にそれなりの精度で洗い出し、チームの体制を整えたり、予実管理に生かしたいなどがあるかなと思っています。また、なるべくシステムの仕様をブラックボックス化させずにオープンに引き継げるように、ドキュメントをリッチに作る傾向にあることも理由にあると思います（※これはどのエンタープライズ開発でも同様でしょうが）。引き継ぎ大事ですよね。</p><p>さて、そんな設計を大事にするフューチャーなので、Web APIスキーマも皆それなりのこだわりがあります。今回の執筆テーマも、「API設計ポイント」なので、gRPCのprotoファイルを記載する上で気をつけた方が良いことをgRPCをあまり使ったことがない方にも分かるように意識して取り組みました。</p><p>gRPCの設計標準ですがいくつかよく知られたプラクティスがあります。例えば相互運用性や互換性についてなどです。加えてドキュメント生成や、バリデーション、メタデータの扱いについて、社内メンバーにレビューもらいつつ、私たちが担当した3章はきゅっと9pにまとめました。</p><p>APIの後方互換を守るための考え方などは、gRPCに閉じた話で無いとメンバー内でも話題になっており、それこそOpenAPIでWeb APIを管理している方にもオススメできる内容です。</p><p>執筆側のメリットとしては紙面で出版後の訂正は効かないため、誤った内容を出すわけにはいかない精神で、普段の技術ブログ以上に公式&#x2F;コミュニティ問わず多くの文献をあたり、執筆する前より体系的な理解が深まったと感じます。今回は3名で臨んだのでお互い気になったトピックは議論しながら進められ、お互いの知識も補完しあえたのもの得るところがありました。</p><h2 id="Software-Design-2023年7月号-は良いぞ"><a href="#Software-Design-2023年7月号-は良いぞ" class="headerlink" title="Software Design 2023年7月号 は良いぞ"></a>Software Design 2023年7月号 は良いぞ</h2><p>特集のgRPC以外にも面白いネタがたっぷりです。偶発的（？）な出会いがあるのが、雑誌のいいところですね。Svelte、GoFデザインパターン、SBOM、Deno、話題の生成AIなどなど、幅広いテーマを扱っています。もちろんGoの記事もあります。その中で以下が雑誌でないと絶対に読むことがなかったので出会えてよかったと思っています。</p><ul><li>分散型SNS<ul><li>Twitterの代わりとなるサービスを探す動きが強まっていて、分散型SNSのプロトコルについて解説です</li><li>ActivityPubは名前だけしか知りませんでした。まったく知らない人である私にもどういうものかわかりやすく知ることができました<ul><li>MastodonとかMisskeyなどの異なるサービス間で連携できるとは..</li></ul></li><li>他にもAT ProtocolやNostr（むしろNostrが本題）についても優しく解説しています</li><li>サーバの責務の重い&#x2F;比較的軽いや、匿名性、検閲体制、データの永続性など技術的に考慮すべき点がたくさんあるということが知れて面白かったです</li></ul></li><li>民主主義を発展させるためのテクノロジー「Plurality」<ul><li>技術で民主主義の発展させ社会貢献、なかなか痺れるタイトルです</li><li>最初は「何かしらの便利な行政アプリをOSSで作る」といった感じ？と少し冷めた目線で見てしまいましたが、投票といった意思決定メカニズムに直接関与するような仕組みを設計したりと野心的な話題が紹介されており、琴線に触れました</li><li>最後に紹介された政治哲学者トクヴィルの言葉も良いですね。オーナーシップが大事だと</li></ul></li><li>瞑想<ul><li>リモートワークだと気が張りっぱなしになる瞬間がありますよね。そんなときにストレス解消や、集中職・意思決定力の向上に有効だと言われる、エクササイズとして紹介されています。ちょっと試したところ頭が気持ちスッキリした気がします</li></ul></li></ul><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><ul><li>企業ブログ（フューチャー技術ブログ）に寄稿すると執筆のチャンスに繋がることもある。これからもガンバリます</li><li>雑誌寄稿レベルまで色々な方とやり取りしながら執筆すると学びが深い</li><li>Software Design 2023年7月号、ひと段階、視野が広がり良かったです</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230714a/top.png&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;564&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="出版" scheme="https://future-architect.github.io/tags/%E5%87%BA%E7%89%88/"/>
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
    <category term="SoftwareDesign" scheme="https://future-architect.github.io/tags/SoftwareDesign/"/>
    
    <category term="寄稿" scheme="https://future-architect.github.io/tags/%E5%AF%84%E7%A8%BF/"/>
    
    <category term="gRPC" scheme="https://future-architect.github.io/tags/gRPC/"/>
    
  </entry>
  
  <entry>
    <title>リアクティブプログラミングについて考える</title>
    <link href="https://future-architect.github.io/articles/20230629a/"/>
    <id>https://future-architect.github.io/articles/20230629a/</id>
    <published>2023-06-28T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.141Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20230628a/">前回のエントリー</a>で、コンポーネント単位のステートをがちゃがちゃ更新していくという、オブジェクト指向型（オブジェクトの境界がコンポーネント）の考え方から、より小さな状態のインタラクションになっていくよ、という話を紹介しました。</p><p>ビジネスロジックのアーキテクチャとしては、DDD本には以下の2つが書かれています。</p><ul><li>ドメインオブジェクト(オブジェクト指向)</li><li>トランザクションスクリプト(手続き型)</li></ul><p>DDD本はご存知のようにドメインオブジェクト押しなのですが、現実にはトランザクションスクリプトもよく使われますね。ただ、リアクティブな設計はこの2つとも違いますね。2つの要素A, Bがあって、Aの処理の結果を受けて処理Bを走らせる場合。だれがこの関連を知っているか、というところが違います。</p><p>オブジェクト指向だと、AがBを知っていて、AからBに通知します。「オブザーバーパターン」というのはありますが、あれもBがAを監視していると見せかけて、結局中身を分解するとAがBに伝達しているに過ぎません。</p><p>トランザクションスクリプトだと、A→Bの順序を知っている神オブジェクトGがいます。</p><p>で、Recoilの<a href="https://en.wikipedia.org/wiki/Reactive_programming">リアクティブプログラミング</a>ですが、Bが処理にはAが必要だ、というのを知っていて、Aが終わったらBのロジックが実行されます。</p><div class="scroll"><table><thead><tr><th>方式</th><th>流れを制御する主体</th></tr></thead><tbody><tr><td>オブジェクト指向</td><td>A→BならA</td></tr><tr><td>トランザクションスクリプト</td><td>AとBの両方を知るS</td></tr><tr><td>リアクティブ</td><td>A→BならB</td></tr></tbody></table></div><p>クリーンアーキテクチャ的には、情報源を知っていないといけない、ということで不安で動悸と眩暈がする人もいるかもしれませんが↓の次の図を見てもらえれば次の2つの参照に分かれていることがわかります。</p><ul><li>サイドバーコンポーネント→検索条件のselector</li><li>検索条件のselector→検索処理のselector</li></ul><p>検索処理にあたって、上流のサイドバーのパネルへの依存が発生しているわけではなく、その緩衝地帯のオブジェクトがいて、相互にそれが依存している形になりますので、酷いことにはならなそうです。</p><p>なお、リアクティブプログラミングはパフォーマンス重視で並列性のための仕組みとしても発展してきています。その中には、publisher&#x2F;subscriberの仕組みで通信するものもあり、必ずしもRecoilとは依存の考え方が同じにはならないこともあります。</p><h1 id="DFDを書いてみる"><a href="#DFDを書いてみる" class="headerlink" title="DFDを書いてみる"></a>DFDを書いてみる</h1><p>雑にざっと作ったコードですが、こんな感じになりました。atom&#x2F;selectorのうち、いくつかを公開APIとしてexportして、他のコンポーネントから触れるようにしています（非公開のものはほとんどは省略しています）。</p><p>完全にコンポーネントに閉じていて、外からアクセスしないのでhooksのstateを使っているのはAppコンポーネントのGraphvizのソースとレンダリング表示の切り替えぐらいでした。</p><img src="/images/20230629a/名称未設定ファイル.drawio.png" alt="" width="868" height="571" loading="lazy"><p>「図の向き」はシンプルにatomをそのまま公開してしまっていますが、読み込み専用のselectorと、外部から変更をトリガーするイベント(Reactで使えるように<code>useCallback()</code>を作成するカスタムフック)をいくつか公開し、変更はそれぞれが属するモジュール（Reactコンポーネントやら、データロジックのコード)の中に閉じさせると、カプセル化的によさそうです。コンポーネントとRecoilの要素はファイルを分ける、というのはやる必要はない気がします。コンポーネントが読み書きの主体となっているRecoilの状態はコンポーネントの中に定義してしまった方が編集とかはしやすいです。</p><p>Reduxと比べると、他のコンポーネントから触らせるためにわざわざストアを作ってreducerを作ったりしなくてもいいのでとても楽ですね。</p><h2 id="相互依存なのではないか？"><a href="#相互依存なのではないか？" class="headerlink" title="相互依存なのではないか？"></a>相互依存なのではないか？</h2><p>単純に図だけを見ると、相互に依存しあっていて、「依存は一方通行にしよう」とか「相互参照は良くない」というよく言われる原則に反しているように思うかもしれません。</p><p>ですが、この層を新しい「レイヤー」として考えてしまえば、逆にシンプルな構成に見えるんじゃないかと思います。たとえReduxのようなものを作っても結局同じようなグローバルなデータストアが1つでき、全員がそこに依存関係で結びつくので、結局は同じことです。</p><p>むしろ、コンポーネントに閉じたこま細かいリアクティブな処理はそのままコンポーネントの中に閉じ込めておけるので、グローバルなストアのようにレイヤーが余計に太ることはありませんし、必要な相手との間にのみ依存が発生するので必要な要素同士に限定される分、「おおきな1つのストア」よりも依存度は小さくなります。</p><img src="/images/20230629a/名称未設定ファイル-ページ2.drawio.png" alt="" width="631" height="241" loading="lazy"><p>まあ大規模開発するなら、DFDのようなものは書き残しておいた方が良いですね。あるいは、コード解析してグラフ構造を図示するようなものを作るか。</p><h2 id="機能の量の割にコード量が少ない秘密"><a href="#機能の量の割にコード量が少ない秘密" class="headerlink" title="機能の量の割にコード量が少ない秘密"></a>機能の量の割にコード量が少ない秘密</h2><p>Recoilの場合は、すでに説明したように、ストアへの読み書きではストアの宣言だけをすればよく、ストアの内容変更のサンクなどを逐一実装する必要がない点がボイラープレートのコード量を減らしています。</p><p>サーバー通信に関して言えば、エラー処理、ローディング中かどうかの判断なども組み込まれた状態なのでエラー処理とか本流以外のコードが大幅に減ります。SWRを使えばコード量の増加ゼロでstale-while-revalidationという高速化＆自動更新の仕組みが得られます。</p><h2 id="サーバー実装でもこのアーキテクチャは使われるのか？"><a href="#サーバー実装でもこのアーキテクチャは使われるのか？" class="headerlink" title="サーバー実装でもこのアーキテクチャは使われるのか？"></a>サーバー実装でもこのアーキテクチャは使われるのか？</h2><p>サーバー実装の中でこれらの考え方が活用できるかというと、3つの視点があると思います。</p><p>１つ目は通常のController&#x2F;Handler&#x2F;Service(UseCase)&#x2F;Repositoryといったよくあるウェブフレームワークの構成上で活用できるかどうかです。ここに関してはまず使えないでしょう。フロントから送られてくる情報をもとにクエリーを組み立ててDBアクセスして返すだけですので、リアクティブな層を作ってやりとりをするのはCPUと電力の無駄かと思います。</p><p>2つ目はチャットなどのリアルタイムの同期処理で、この場合はオンメモリで状態を持ち続けていてやり取りをするのでリアクティブな仕組みがあると助かる気がします。複数繋がっているウェブフロントエンドに的確に情報伝達させる仕組みとか、だいたい毎回手作りになると思うので、リアクティブな考えは役にたつんじゃないかと思います。Go用のRecoilみたいなの作ってみたい気持ちがあります。</p><p>3つ目はウェブフロントエンドのリクエストを起点に、連鎖的にバッチ処理などを起動していくなど、1つのリクエストに閉じない連携では当然ありな気がします。もともとDFDもそちらからの由来なので、むしろこちらが本流で、そことシームレスにウェブフロントエンドも繋がっていくような設計になると面白そうだな、と思います。</p><h1 id="実装Tips"><a href="#実装Tips" class="headerlink" title="実装Tips"></a>実装Tips</h1><h2 id="フォームイベント処理"><a href="#フォームイベント処理" class="headerlink" title="フォームイベント処理"></a>フォームイベント処理</h2><p>フォームと関係ないロジックはがしがし繋いでいけば良いのですが、フォームと繋ぐところは多少コードが必要です。</p><p>フォームと繋げるのは<code>useState()</code>と基本的に同じです。atomを作って、それに対する書き込みイベントを呼ぶだけです。ただ、<code>useCallback()</code>でコールバックを作って変更処理を行う・・・みたいなのを何個もやるのは面倒なのでカスタムフックを1つ作りました。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> useRecoilWithReact&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>|<span class="built_in">boolean</span>&gt;(<span class="attr">state</span>: <span class="title class_">RecoilState</span>&lt;T&gt;): [T, <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> <span class="built_in">void</span>] &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setter] = <span class="title function_">useRecoilState</span>(state)</span><br><span class="line">  <span class="keyword">const</span> event = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      (setter <span class="keyword">as</span> (<span class="attr">v</span>: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span>)(e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      (setter <span class="keyword">as</span> (<span class="attr">v</span>: <span class="built_in">boolean</span>) =&gt; <span class="built_in">void</span>)(e.<span class="property">target</span>.<span class="property">checked</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [setter])</span><br><span class="line">  <span class="keyword">return</span> [value, event] <span class="keyword">as</span> [T, <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> <span class="built_in">void</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これがあれば、atomを作って、その値取得＆変更コールバックを取り出して、<code>&lt;input&gt;</code>に設定するところはかなり薄くできます。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> includesState = <span class="title function_">atom</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;includes&quot;</span>,</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">SideBar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//呼び出し</span></span><br><span class="line">  <span class="keyword">const</span> [includes, onChangeIncludes] = <span class="title function_">useRecoilWithReact</span>(includesState)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">className</span>=<span class="string">&quot;h-full basis-1/4 bg-amber-200 p-4 flex flex-col prose&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      :</span></span><br><span class="line"><span class="language-xml">      &#123;/*ここで設定*/&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;includes&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;onChangeIncludes&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      :</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="型変換"><a href="#型変換" class="headerlink" title="型変換"></a>型変換</h2><p>atomは型を決めたらそれと同じ型でないと入力ができません。effectで変換もできません。フォームは文字列で情報を扱うが、取り出す値は数値にしたい、というのはよくあると思いますが、その場合はフォームとやりとりする文字列のatomと、それを受けて数値に変換するselectorをペアにすればよさそうです。</p><p>実際に書いてみたコードでは無効な値の時の<code>null</code>も返すのでコードがちょっと複雑になっていますが、シンプルにするとこんな感じです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数値にできる文字以外がきたら過去の値を入れて元に戻すeffect。不正な文字を除外</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">keepNumberEffect</span>: <span class="title class_">AtomEffect</span>&lt;<span class="built_in">string</span>&gt; = <span class="function">(<span class="params">&#123;setSelf, onSet&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">onSet</span>(<span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(<span class="title class_">Number</span>(newValue))) &#123;</span><br><span class="line">      <span class="title function_">setSelf</span>(oldValue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// フォームから値を入れる方のatom</span></span><br><span class="line"><span class="keyword">const</span> raw = <span class="title function_">atom</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;raw&quot;</span>,</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">effects</span>: [keepNumberEffect]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 後続処理で利用する数値を返すselector</span></span><br><span class="line"><span class="keyword">const</span> numState = selector&lt;<span class="built_in">number</span>&gt;(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;num&quot;</span>,</span><br><span class="line">  <span class="attr">get</span>: <span class="function">(<span class="params">&#123;get&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(<span class="title function_">get</span>(rfcNumberFromRaw))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>こんな感じの構成ですね。全角半角変換とかも組み込んだりできますね。</p><img src="/images/20230629a/名称未設定ファイル-ページ2.drawio_2.png" alt="" width="399" height="201" loading="lazy"><h1 id="Recoilが安定版ではない問題"><a href="#Recoilが安定版ではない問題" class="headerlink" title="Recoilが安定版ではない問題"></a>Recoilが安定版ではない問題</h1><p>もっとも、Recoilはまだバージョンが0.7.7だし、リポジトリのorganizationがfacebookexperimentalだし、それが元で敬遠されたり、という話も聞きます。ただ、Reactも16.xになる前は0.16.xのままだったし、セマンティックバージョニングなにそれ？という世界であるし、APIもUNSTABLEなものは区別されていて、なおかつほぼデバッグ目的のものばかりなので、もう使ってもいいのでは？という気はしています。</p><h1 id="ReactiveXとの違い"><a href="#ReactiveXとの違い" class="headerlink" title="ReactiveXとの違い"></a>ReactiveXとの違い</h1><p>ReactiveXもリアクティブで、要素間のつながりをプログラミングする必要があります。すごい大量のデータが少しずつ流れてきてそれを間引く必要があるとか、途中で加工するとか、そいういうのに便利なオペレーターや関数はたくさんありますが、以前Angularで触った時は使いにくいしわかりにくいな、と思った記憶があり、同じリアクティブでもだいぶ体験が違うな、と思いました。改めてRecoilの使いやすさと比較して、ReactiveXを使いつつRecoilチックに使うには以下のような制約を加えればいい気がします。</p><ul><li>完了というステータスは使わない</li><li>流れる1つ1つのデータが完全なデータ(配列を分解して流したりはしない)という制約を課す</li><li>atomは<code>BehaviorSubject</code>を使って実現。next()で値を投入するだけ(他のものは使わない)しか値の投入は認めない</li><li>seledtorは<code>Subject</code>で、他の要素に<code>.pipe()</code>で繋いだ上で、<code>.subscribe()</code>に上流の値が変更されたときの処理を実装(selectorの<code>get</code>の処理)</li><li>selectorで上流の値が複数ある場合は<code>combineLatest().subscribe()</code>だけを使う</li></ul><p>これでだいぶ使い勝手が近づけられそうな気がします。もちろん、Suspense対応とかErrorBaundaryなどの機能はないので、ローディング中とかは別途作り込みが必要になりますが・・・rxjsを触ったことがありますが、ちょっとの違いでプログラミングのしやすさがだいぶ違うな、というのは印象的でした。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Reactでちょっと大規模な開発というと、たくさんの状態管理の仕組みが混ざりがちです。Recoilを使えば、既存のhooksと同じような構成の状態管理の仕組みを使いつつ、アプリケーション全体に簡単に展開できます。UIの状態管理も、ロジック内のデータの流れも、同じ仕組みの中で構成できるのは良いです。コンポーネントを跨いで状態のやりとりをするところでボイラープレートのバケツリレーコードや、中央集権のストアの読み書きをしなくても良くなります。</p><p>また、全部を同じ仕組みに載せたとしても、可視性・不可視性を考えて、exportするかしないかをきちんと定義すれば、そんなにスパゲティにならずに済みそうです。もちろん、DFDはきちんと書いてあげる方がさらに良いとは思います。hooksのstateを他のコンポーネントに渡したり、イベントで変更を行ったりするコードで、うっかり変更が無限ループになったりとかしていたのと比べると、トラブルは少ないんじゃないかな、と思います。</p><p>今回は小さいプログラムでしたが、大きなプロジェクトへの展開も問題なさそうです。ぜひ今後も使っていきたいと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
    <category term="リアクティブプログラミング" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%96%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
    <category term="Recoil" scheme="https://future-architect.github.io/tags/Recoil/"/>
    
  </entry>
  
  <entry>
    <title> RFC閲覧補助ツールを作りました + リアクティブプログラミング</title>
    <link href="https://future-architect.github.io/articles/20230628a/"/>
    <id>https://future-architect.github.io/articles/20230628a/</id>
    <published>2023-06-27T15:00:00.000Z</published>
    <updated>2023-07-11T03:40:32.140Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230628a/スクリーンショット_2023-06-08_20.11.21.png" alt="" width="1200" height="795" loading="lazy"><p>お仕事をしていて、たまにRFCを読みたくなることってよくあると思うのですが、読む対象のRFCがたくさんあると、どれから読めばいいのかな？読み落としたのはないのか？みたいなところが脳のワーキングメモリーから溢れて収集がつかなくなりがちなので、Graphvizで出力してRFCの関連を簡単に確認できるツールを作ってみました。</p><p>ソースコードは以下のところにあります。</p><p><a href="https://github.com/shibukawa/rfc-viewer/">https://github.com/shibukawa/rfc-viewer/</a></p><p>こちらのGitHub Pagesで触れるようになっています。</p><p><a href="https://shibukawa.github.io/rfc-viewer/">https://shibukawa.github.io/rfc-viewer/</a></p><p>使っている技術セットはこんな感じです。</p><ul><li>React + TypeScript</li><li>Vite.js</li><li>Tailwind CSS + DaisyUI</li><li>Recoil.js</li><li>d3-graphviz</li></ul><p>RFCを読むのも大事ですが、ちょっとRecoil.jsの素振りというか練習もする必要があって、それを兼ねて作ってみました。</p><h1 id="RFC-Viewerの使い方"><a href="#RFC-Viewerの使い方" class="headerlink" title="RFC-Viewerの使い方"></a>RFC-Viewerの使い方</h1><p>まず、RFCをリストアップしたい範囲があればfrom&#x2F;toに数値を入れます。例えばHTTPを調べる場合、　１９４５よりも古いものはないはずなので、そういう場合に使います。</p><p>起点となる用語をincludes(2段目)に入れます。それが含まれるRFCが選ばれます。3段目はexcludeで、この用語が含まれているRFCは除外されます。</p><p>最後にチェックボックスで、祖先や子孫を辿るか？というチェックボックスがあります。RFCには、updates&#x2F;obsoletesという項目があり、既存のRFCに機能追加を加えたり、既存のRFCを廃止して新しいバージョンのRFCを出す、ということができます。この情報を元にグラフ構造を作ります。</p><p>ただし、祖先と子孫の両方を辿るオプションを入れると、たまに関連が爆発して1000ぐらいのRFCが引っかかることがあります。DNSとかTLSみたいな、他のRFCから参照されまくっているものが見つかると、すごい数になってしまいます。</p><p>最後に生成ボタンを押すと、graphvizのソースを出力したり、ブラウザ上でレンダリングして見られます。いろいろいじってRFCライフにお役立ていただければと思います。</p><h1 id="リアクティブプログラミング"><a href="#リアクティブプログラミング" class="headerlink" title="リアクティブプログラミング"></a>リアクティブプログラミング</h1><p>React&#x2F;Vue&#x2F;Angularが三国志のように競っていた時代は、どれも同じようなモデルでした。コンポーネントという塊に対して、「状態」という色々な情報の塊が1つあり、それに対するデータの読み書きという世界観でした。ライフサイクルメソッドというものがあり、ステートの初期化を行い、イベントがあればステートを書き換え、最終的にそれが仮想DOMやら何やらの仕組みを使って画面に表示されます。</p><img src="/images/20230628a/スクリーンショット_2023-06-08_20.48.57.png" alt="スクリーンショット_2023-06-08_20.48.57.png" width="867" height="400" loading="lazy"><p>欠点としては、ステート管理のコードがコンポーネントと蜜結合されてしまうので、コンポーネントを分割しようとか、リファクタリングをするのは結構大変です。</p><p>コンポーネントは基本的に自分の親子としか会話できません。深い階層があるとバケツリレーが必要になり、コードが多くなってしまうのでそれを解決するための手法としてFluxという考え方がReactにより導入されました。このようなものはVueにもAngularにも導入されたりしました。Reduxが人気になりましたし、VueだとVuexとか人気ですよね。ただ、このようなグローバルな状態のストアも、基本的にでかい1つの箱（あるいはちょっとした階層）があり、そこへの読み書き、というところはコンポーネント側の思想と同様です。</p><img src="/images/20230628a/flux-diagram-white-background.png" alt="flux-diagram-white-background.png" width="1200" height="599" loading="lazy"><p>Reactは16.8になってhooksを導入しました。関数コンポーネントになってライフサイクルメソッドという考え方を完全に無くした世界を作ろうとしてます。<a href="https://react.dev/learn/lifecycle-of-reactive-effects#the-lifecycle-of-an-effect">新しくなったReactのドキュメント</a>でも、すべては副作用、という考え方を徹底しようとしています。ライフサイクルという縛りから離れて将来の最適化のために<a href="https://react.dev/blog/2022/03/29/react-v18#new-strict-mode-behaviors">StrictModeの場合はマウントとアンマウントを繰り返して、ライフサイクルメソッドの考え方で壊れやすいコードを実装しないようにさせよう、という挙動</a>が18で導入されました。</p><p>Reactの関数コンポーネントで実装すると、コンポーネントの中は「大きな1つの状態」ではなくて、小さい状態がたくさんある状態になります。イベント、他の状態の変更（propsの変更も含む)で副作用が発生し、またそれが状態を変更する・・・という構造になります。状態と副作用のセットをカスタムフックとして切り出して再利用もできるようになりました。</p><img src="/images/20230628a/スクリーンショット_2023-06-08_20.49.30.png" alt="スクリーンショット_2023-06-08_20.49.30.png" width="842" height="490" loading="lazy"><p><a href="https://future-architect.github.io/articles/20200501/">ReduxもTypeScript対応やこのhooksの副作用と繋ぎやすいような拡張がされたり</a>、それに合わせた進化はしていましたが、一方でmetaは新しい考え方の状態管理のライブラリである<a href="https://recoiljs.org/">Recoil</a>をリリースしています。</p><p>Recoilは、React Hooksの世界観をコンポーネントを跨いで使えるようにしたものに思います。atom, selectorという2つの要素でグラフ構造を作っていきます。<a href="https://future-architect.github.io/articles/20230215a/">Recoilドキュメント入門</a>というエントリーを前に書きましたが、コンポーネント間の情報伝達で、属性やイベントで行わずに、単に状態を定義しておき、exportしておくだけでコンポーネントを跨いだ状態の共有が行えます。</p><p>RFC-Viewerでは、サイドバーで検索の情報を入力させます。これはRecoilの状態管理の要素である<a href="https://github.com/shibukawa/rfc-viewer/blob/main/src/components/SideBar.tsx#L78">selector</a>にしています。この情報を使ってリアルタイムに検索を行わせることも可能です。実際、ソース生成までは直接は行っていませんが、検索ロジックを起動してヒット件数をボタン上に表示しています。</p><p>クリーンアーキテクチャは情報の流れを一方通行にするためにレイヤーを作って・・・という感じですが、すべての情報を依存グラフ上に表現し切っている感じですね。UI上のインタラクションも、UIが生成したデータをロジックが処理するのも、その結果を画面に表示するのも、すべてこの依存グラフ上でリアクティブに解決されていく、というのはなかなかおもしろ体験です。他のコンポーネントに伝達するためにpropsやイベントなどの外部I&#x2F;Fを作り込むこともなく、状態管理の副作用のコードで頑張る量も体感で1&#x2F;3ぐらいになりました。令和の時代になってようやく、亡霊のように生き続ける20年前のJ2EEとかのMVCやらレイヤーやらの考え方から、新しいアーキテクチャに一新されるチャンスなのでは、というのを感じました。</p><p>もっとも、Recoilのみがこの思想で作り切っており、他のフレームワークではまだまだコンポーネントの外までリアクティブを活用はできません。そのため、今すぐ、ウェブ開発全体がこの方向性になっていくか、というとならないとは思いますが、未来の（だと自分が信じる）アーキテクチャについて考えるのは頭の体操になりますね。いちおう、Angularが統合しているrxjsはリアクティブなフレームワークですが、Suspense対応なども含めて、Recoilの方が圧倒的に使いやすいです。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>RFCを読むための補助ツールを作りつつ、次世代のアーキテクチャをRecoilで体験しました。長くなったのでRecoilのTIPSはまた今度書こうと思います。</p><p>なお、<a href="https://en.wikipedia.org/wiki/Reactive_programming">Reactive Programming</a>という項目は日本語にはないですが英語のWikipediaにはあります。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230628a/スクリーンショット_2023-06-08_20.11.21.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;795&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Web" scheme="https://future-architect.github.io/tags/Web/"/>
    
    <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
    <category term="daisyUI" scheme="https://future-architect.github.io/tags/daisyUI/"/>
    
    <category term="Recoil" scheme="https://future-architect.github.io/tags/Recoil/"/>
    
    <category term="RFC" scheme="https://future-architect.github.io/tags/RFC/"/>
    
  </entry>
  
</feed>
