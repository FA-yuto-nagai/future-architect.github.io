<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  <icon>https://future-architect.github.io/feed_icon.png</icon>
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2024-01-18T01:45:49.106Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ウォーターフォールでもアジャイルでも「タイムラインふりかえり」をやってみたらどうでしょう？という話</title>
    <link href="https://future-architect.github.io/articles/20240118a/"/>
    <id>https://future-architect.github.io/articles/20240118a/</id>
    <published>2024-01-17T15:00:00.000Z</published>
    <updated>2024-01-18T01:45:49.106Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20240118a/image.png" alt="image.png" width="1024" height="1024" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Global Design Group所属の山本です。</p><p>フューチャーに新卒入社してこれまで、ウォーターフォール開発のプロダクトにいくつか携わっていましたが、この度はじめてアジャイル開発に関わりました。</p><p>その中で、チーム内での「振り返り」の大切さを感じたのでどんな振り返りがよいのか、個人的に考えたことをまとめます。</p><p>また、「振り返り」のひとつのアプローチとして、「タイムラインふりかえり」を主催してみたらいい感じだったのでそれについても書きます。</p><h2 id="システム開発ライフサイクルについて"><a href="#システム開発ライフサイクルについて" class="headerlink" title="システム開発ライフサイクルについて"></a>システム開発ライフサイクルについて</h2><p>そもそも、ウォーターフォール開発やアジャイル開発とはなんなのでしょうか？</p><p>どちらも、システム開発をいくつかの段階に定義して行うプロセスである、システム開発ライフサイクル（Systems Development Life Cycle）の手法の1つです。</p><p>このシステム開発ライフサイクルの分類や定義、メリット・デメリットもいくつかあるので、詳細はこの記事では触れません。</p><p>1つ大きな分類を上げると、<br>ウォーターフォール開発に代表されるような、ひとつひとつのステップを完了させて次のステップに進む「シーケンシャル開発モデル」と、<br>アジャイル開発に代表されるような、システムをいくつかの単位に分けて、単位ごとに一連のステップを徐々に開発する「インクリメンタル開発モデル」</p><p>の2つに大別するものがあります。</p><p>私が今まで関わったプロジェクトは、「シーケンシャル開発モデル」の中でも、「V字モデル」に分類されるものが多かったです。</p><p>要求定義、要件定義からはじまり、基本設計-&gt;…-&gt;コーディング-&gt;単体テスト…とステップごとに進むもので、基本的には次のステップに進んだ場合には前のステップに戻らないことを前提としています。</p><p>一般的にウォーターフォール開発として想像されるものですね。</p><p>両者を比較すると、大きな違いとしてはステップサイクルの単位や期間が異なることが挙げられます。</p><h2 id="インクリメンタル開発モデルと「振り返り」"><a href="#インクリメンタル開発モデルと「振り返り」" class="headerlink" title="インクリメンタル開発モデルと「振り返り」"></a>インクリメンタル開発モデルと「振り返り」</h2><img src="/images/20240118a/image_2.png" alt="image.png" width="879" height="398" loading="lazy"><p>今回、私ははじめてアジャイル開発でのプロジェクトに参加しました。ウォーターフォールとリリースサイクルや動き方が大きく変わるため、良い経験になりました。</p><p>その経験の中で、「振り返り」という文脈で考えると、1つの大きな特徴として「キリが良い」ということが挙げられると思います。数週間単位でサイクルを回すので、自然と1つのサイクルが終わったときに振り返りをしやすいんですね。また、類似したステップを次のサイクルでも回すことになるので、作業内容自体の振り返りがダイレクトに活用できるということがあります。</p><p>スクラム開発の著名なガイドラインである「スクラムガイド<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>」でも、スクラム開発の1サイクル(スプリント)の終了時に、レトロスペクティブ(振り返り)として「スプリントレトロスペクティブ」を行うことが定義されており、振り返りがサイクルの中でも重要なポジションを占めています。</p><p>「スプリントレトロスペクティブ」の章については、以下のように記載されています。</p><blockquote><p>スプリントレトロスペクティブの⽬的は、品質と効果を⾼める⽅法を計画することである。<br>スクラムチームは、個⼈、相互作⽤、プロセス、ツール、完成の定義に関して、今回のスプリントがどのように進んだかを検査する。多くの場合、検査する要素は作業領域によって異なる。<br>スクラムチームを迷わせた仮説があれば特定し、その真因を探求する。スクラムチームは、スプリント中に何がうまくいったか、どのような問題が発⽣したか、そしてそれらの問題がどのように解決されたか（または解決されなかったか）について話し合う。<br>スクラムチームは、⾃分たちの効果を改善するために最も役⽴つ変更を特定する。最も影響の⼤きな改善は、できるだけ早く対処する。</p></blockquote><p>スクラム開発に限らず、振り返りとして行いたいコンテンツとしては他の開発モデルにも共通する物があるのではないでしょうか？</p><p>今回の経験を通して、短期間で振り返り・フィードバックを行うことは、アジャイルに限らず有意義なことと感じました。では、ウォーターフォール開発などのスプリント単位がない場合ではどうなるのでしょうか？</p><h2 id="シーケンシャル開発モデルと「振り返り」"><a href="#シーケンシャル開発モデルと「振り返り」" class="headerlink" title="シーケンシャル開発モデルと「振り返り」"></a>シーケンシャル開発モデルと「振り返り」</h2><img src="/images/20240118a/image_3.png" alt="image.png" width="806" height="533" loading="lazy"><p>次に上の図のような、典型的なウォーターフォール開発とチーム内での「振り返り」について考えてみましょう。<br>メンバー目線での上記の特徴としては、「要件定義」や「コーディング」の1つのステップに数ヶ月、大規模なシステムでは年単位の時間がかかることが挙げられると思います。</p><p>「振り返り」の目線ではどうでしょうか？</p><p>1つ悪い特徴としては、ステップ単位でとらえると「キリが良い」と感じるタイミングまで数ヶ月〜数年単位で時間がかかるということです。また、ステップ単位で振り返りを行っても、次のステップと作業内容自体はダイレクトにはかぶらないこともあります。</p><p>他にも、受注や要件定義のタイミングで全体のスケジュールを決定してしまうため、(トラブルが発生した場合の)後半のテストフェーズなどでは、期日通りに仕事を終わらせることで頭がいっぱいで「振り返り」をしている場合ではない！といった心情になりやすいと感じています。</p><p>実際に自分が今まで参加したウォーターフォール開発のプロジェクトでは、個人に対しては定期的な1on1、360度フィードバックなどの実施はありました。(これは会社としても取り組んでいます。良いことですね)</p><p>一方で、チーム単位での「振り返り」としては受け入れテストまで完了した時点でKPT法での全体の振り返りを行う事が多かったです。</p><p>この振り返りを行うことで、個人的な学びはありますが全く同じチームではすぐに仕事はしないので悩ましいものがあると感じていました。</p><h2 id="ウォーターフォール開発でいつ振り返りをすればよいのか問題"><a href="#ウォーターフォール開発でいつ振り返りをすればよいのか問題" class="headerlink" title="ウォーターフォール開発でいつ振り返りをすればよいのか問題"></a>ウォーターフォール開発でいつ振り返りをすればよいのか問題</h2><p>チームでの振り返りをする目的の大きなひとつとして、チームレベルでの課題を洗い出し、対応・改善して次に活かすといったことが挙げられると思います。</p><p>その視点で考えると、「ステップの終了時」「すべてのステップの終了時」に行うのはそこまで良くない気がしてきますね。</p><img src="/images/20240118a/image_4.png" alt="image.png" width="885" height="551" loading="lazy"><p>例えば、基本設計終了時に、基本設計フェーズに関する課題や学びが得られても、工程自体に依存するものであった場合は次にメンバーが関わる・活かせるのは数年後とかになりかねません。<br>(※もちろん、課題が次のステップに関連があり有用なケースも考えられます)</p><p>また、振り返りの対象の期間が長くなるため、粒度としても大きくあいまいなものになりがちです。</p><p>そのため、ステップやプロジェクトの「キリの良さ」にとらわれず、数週間〜数ヶ月に1回の定期的なイベントとして組むことが1つのアプローチとして考えられます。</p><h2 id="どのような振り返りをすればよいのか？"><a href="#どのような振り返りをすればよいのか？" class="headerlink" title="どのような振り返りをすればよいのか？"></a>どのような振り返りをすればよいのか？</h2><p>さて、個人的にはアジャイル開発でも、ウォーターフォール開発でも「振り返り」を行いたいわけですが、実際にはどのような方法を行えばよいのでしょうか？</p><p>「振り返り」のフレームワーク・手法については山のようにあります。有名なものを上げるだけでも、以下のようなものがあります。</p><ul><li><strong>KPT(Keep Problem Try)</strong><br>Keep(継続すること)・Problem(課題)を洗い出し、Try(次に取り組むこと)を検討する</li><li><strong>Good &amp; New</strong><br>良かったこと（Good）と新しい発見（New）を発表して共有する</li><li><strong>FDL(Fun&#x2F;Done&#x2F;Learn)</strong><br>Fun(楽しかったこと)・Done(アウトプットしたこと)・Learn(学んだこと)で振り返りを行う</li><li><strong>SSC(Start Stop Continue)</strong><br>Start(はじめること)・Stop(やめること)・Continue(続けること)で振り返りを行う</li><li><strong>Elephants, dead fish &amp; vomit</strong><br>象(大きく、無視されている問題)・死んだ魚(放置すると問題があるもの)・吐瀉物(蓄積された考えを吐き出す)の3つの観点から課題を考える</li></ul><p>特徴・振り返りの目的に応じて選択するべきだとは思うのですが、自分のこれまでの関わりや経験上では、知名度とシンプルさから「KPT」が第一選択肢とされることが多かったです。</p><h2 id="「KPT」で振り返りをするとどうなる？"><a href="#「KPT」で振り返りをするとどうなる？" class="headerlink" title="「KPT」で振り返りをするとどうなる？"></a>「KPT」で振り返りをするとどうなる？</h2><p>KPTで振り返りをした個人の感想としては、以下のようなものがあります。</p><p>■メリット</p><ul><li>シンプルでわかりやすい。チームメンバー全員が認識している可能性が高い。</li><li>振り返りの成果として、次に繋げる(Try)ことを明文化しやすい</li></ul><p>■デメリット</p><ul><li>議論が発散しやすい、ファシリテーターの質に依存しやすい</li><li>Problemに集中していまい、反省会のようなムードになりやすい</li><li>チームメンバーが何をしていたのか分かりづらい</li></ul><p>手法の選択肢としては良いところもありなのですが、個人的にはデメリットの部分が気になってしまいます。<br>特に、Problemに話題が集中してお通夜のような雰囲気となってしまえば、「振り返り」自体にネガティブなイメージを持つことに繋がりかねません。</p><p>この課題については、チームメンバーやファシリテーションに大きく依存してしまう部分であるため、安定した解決策を求めることが難しいのではないか…？と個人的には感じてます。</p><p>なので今回チームとしては、フレームワークを変えて、「タイムラインふりかえり」 + 「KPT」での振り返りをトライしてみました。</p><h2 id="タイムラインふりかえり-KPT"><a href="#タイムラインふりかえり-KPT" class="headerlink" title="タイムラインふりかえり + KPT"></a>タイムラインふりかえり + KPT</h2><p>「タイムラインふりかえり」については、以下書籍<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>に記載されていたものを参考にアレンジして取り入れました。</p><p><a href="https://www.shoeisha.co.jp/book/detail/9784798165387">https://www.shoeisha.co.jp/book/detail/9784798165387</a></p><ul><li>社内やチームの出来事を時系列で付箋に書き出す</li><li>メンバーごとに時系列に対する「感情グラフ」を書き出す</li></ul><p>ことが大きな特徴です。今回は会議室でホワイトボードでやったのですが、イメージとしては以下のようなものとなります。</p><img src="/images/20240118a/image_5.png" alt="image.png" width="828" height="650" loading="lazy"><p>この「感情グラフ」の部分がユニークなポイントで、実際にやってみると盛り上がりやすいので、ポジティブなムードの醸成といった意味でも良かったです。</p><h2 id="具体的にやった手順"><a href="#具体的にやった手順" class="headerlink" title="具体的にやった手順"></a>具体的にやった手順</h2><p>「振り返り、次につなげる」「反省会のようなムードにしない」「チームメンバー間でのタスク内容を共有できる」ことを目的に、いくつかアレンジして振り返り会を実践しましたので、その手順などを紹介します。</p><p>■前準備</p><ul><li>振り返り会の前日、チームメンバーに時系列で発生したイベントをざっと書き出してもらう(スプレッドシートを使用しました)</li><li>振り返り会の開催直前、ホワイトボードにチーム単位&#x2F;時系列の枠を書き出す。また、時間節約のためわかっているイベントは付箋として張り出しておく</li></ul><p>■実施手順</p><ol><li>説明：アイスブレイク・振り返り会の方法を紹介する</li><li>ワーク：それぞれ思いつくイベント・個人の感想などを付箋に書き出し貼ってもらう</li><li>ワーク：感情グラフを記入してもらう</li><li>ディスカッション：感情グラフについての簡単な雑談、タイムラインでカードが少ない部分や感情グラフの起伏に対応したイベントが有る場合には、追加で付箋を貼ってもらう</li><li>ワーク：メンバーで議論しながら、付箋をGood&#x2F;Badに分類してもらう。</li><li>ディスカッション：作成された付箋や感情グラフを見て、ディスカッションを行う</li><li>ディスカッション：ディスカッション内容をもとに、KPTを抽出する</li><li>まとめ</li></ol><p>実施手順ごとの成果物のイメージとしては、以下の図のようなものとなります。</p><img src="/images/20240118a/image_6.png" alt="image.png" width="1162" height="322" loading="lazy"><p>最初はタイムラインでイベントや感想を洗い出し、次に分類し、最後にKPTとしてまとめるといった寸法ですね。</p><h2 id="やってみた感想"><a href="#やってみた感想" class="headerlink" title="やってみた感想"></a>やってみた感想</h2><p>さて、実際に上記の方法で振り返り会を実施してました。</p><p>単純にKPTで振り返りを実施することと比較すると、以下のようなGood&#x2F;Badがあったと感じてます。</p><p>■Good</p><ul><li>時系列で振り返ることで、イベント・メンバーの感想を網羅して洗い出すことができた</li><li>感情グラフを作成することで、チームのモチベーションを高く維持するためにはどうすればよいのか？ということまで検討できた</li><li>関わりが少ないチームメンバーについても、タスク内容やモチベーションを共有することができた</li><li>振り返り会の中で、極端にネガティブな雰囲気とならなかった(※実施したチームメンバーが良かったこともありますが)</li></ul><p>■Bad</p><ul><li>事前準備が必要になる</li><li>実施自体に時間がかかる。とくに、タイムラインのレンジが広いほど実施時間がかかる</li></ul><p>こうして考えると、チームメンバー間の共有や雰囲気作り、モチベーション設計の検討についてはかなり有意義な手法ではないかと思いました。</p><p>今回はアジャイル開発を行っているチームで採用したのですが、開発サイクルにとらわれず実施できる方法であると感じたので、ウォーターフォール開発でも数週間単位で積極的に取り入れたいですね。</p><p>また、Badについては、数週間単位で定期的に実行していればある程度緩和できるものとも思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>この記事では、チームの「振り返り」という部分に焦点を当てて、アジャイル開発とウォーターフォール開発での個人的な経験や取り組み、感想を紹介しました。</p><p>どうしても仕事が忙しいときには、目の前のタスクで頭が一杯になってしまい、視野が狭まりがちです。</p><p>そのような状況でも、チームでの「振り返り」は開発サイクルに関わらず、チームの改善や個人の成長につながる重要なことで、可能であれば数週間単位のスパンで取り入れたいものだと思ってます。</p><p>「振り返り」の手法・フレームワークについてはいろいろなものがありますが、今回実施した「タイムラインふりかえり + KPT」はやりやすくメリットも多いものでした。</p><p>まだまだ自分が知らない「振り返り」のフレームワークもあるので、今後どのような開発サイクルに関わる場合でも、チームの振り返りについては有意義なものとすべく勉強し続けたいものです。</p><p>最後まで読んでいただきありがとうございました。<br>※アイキャッチ画像はDALL-Eで生成しました</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf">https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">沢渡 あまね (著), 新井 剛 (著).「ここはウォーターフォール市、アジャイル町 ストーリーで学ぶアジャイルな組織のつくり方」. 2020. 翔泳社</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20240118a/image.png&quot; alt=&quot;image.png&quot; width=&quot;1024&quot; height=&quot;1024&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="アジャイル" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/"/>
    
    <category term="ふりかえり" scheme="https://future-architect.github.io/tags/%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A/"/>
    
    <category term="ウォーターフォール" scheme="https://future-architect.github.io/tags/%E3%82%A6%E3%82%A9%E3%83%BC%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A9%E3%83%BC%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>【合格記】Google Cloud Professional Developer認定資格を振り返る</title>
    <link href="https://future-architect.github.io/articles/20240117a/"/>
    <id>https://future-architect.github.io/articles/20240117a/</id>
    <published>2024-01-16T15:00:00.000Z</published>
    <updated>2024-01-16T23:55:25.382Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20240117a/Professional_Level_Google_Meets_Background.png" alt="" width="1200" height="682" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG岸下です。</p><p>Futureに中途で入社して今月で2年になります。2年前に初めてGoogle Cloudのプロジェクトに携わることになってから、ありがたいことに2年間Google Cloudに触れてきました。そこで、今回はDeveloper力を試すべくProfessional Developer認定資格を受験し、無事に合格を果たすことができました。</p><p>本記事では試験の特徴や学習内容、頻出しそうな項目について記していきたいと思います。</p><p>また本試験はGoogle Cloudパートナー企業向けのバウチャーを活用して受験しました。大変感謝しております！</p><p>Google Cloud 認定資格関連の過去記事：</p><p><a href="https://future-architect.github.io/articles/20231226a/">【合格体験記】Google Cloudの入門試験：Cloud Digital Leader</a><br><a href="https://future-architect.github.io/articles/20230921a/">【合格記】Google Cloud Professional Cloud Security Engineer認定資格を振り返る </a><br><a href="https://future-architect.github.io/articles/20211013a/">【合格記】Google Cloud Professional Data Engineer認定資格を振り返る</a><br><a href="https://future-architect.github.io/articles/20220930a/">【合格記】Google Cloud Professional Machine Learning Engineer認定資格を振り返る</a><br><a href="https://future-architect.github.io/articles/20220411a/">Google Cloud Professional Cloud Architectの再認定に合格しました</a><br><a href="https://future-architect.github.io/articles/20200902/">GCP Professional Cloud Network Engineer に合格しました</a><br><a href="https://future-architect.github.io/articles/20210625a/">GCP Associate Cloud Engineer 合格記</a></p><p>皆さんの協力のおかげで残りの合格記は</p><ul><li>Cloud Database Engineer</li><li>Cloud DevOps Engineer</li><li>Google Workspace Administrator</li></ul><p>の3つのみとなり、非常に感慨深いです。</p><h2 id="試験と出題範囲"><a href="#試験と出題範囲" class="headerlink" title="試験と出題範囲"></a>試験と出題範囲</h2><p><a href="https://cloud.google.com/learn/certification/cloud-developer?hl=ja">公式の出題範囲</a>と、実際に自分が受けた際の所感は以下になります。</p><h3 id="スケーラビリティ、可用性、信頼性に優れたクラウドネイティブ-アプリケーションの設計"><a href="#スケーラビリティ、可用性、信頼性に優れたクラウドネイティブ-アプリケーションの設計" class="headerlink" title="スケーラビリティ、可用性、信頼性に優れたクラウドネイティブ アプリケーションの設計"></a>スケーラビリティ、可用性、信頼性に優れたクラウドネイティブ アプリケーションの設計</h3><ul><li>コンテナの基礎知識<ul><li>アプリケーションのコンテナ化におけるベストプラクティス</li></ul></li><li>アーキ設計とサービスの使い分け<ul><li>Cloud Run、Google Kubernetes Engine、App Engine、Managed Instance Groupなどアプリケーションのデプロイ環境</li><li>Cloud SQL、Spanner、Bigtable、Firebaseなどのデータベース環境</li><li>内部通信のみを利用したいケース（限定公開のGoogleアクセスを利用するなど）</li></ul></li><li>GKE（Kubernetes）の基礎知識<ul><li>Ingress、Service、Deployment、Podなどの役割、何を定義するのか</li><li>Workload Identityを利用したサービスアカウントとの紐づけ</li><li>Namespaceの使い分けにおけるベストプラクティス</li><li>Pod同士の通信方法</li><li>水平スケーリングと垂直スケーリング</li><li>Istio（Google CloudマネージドであればAnthos Service Mesh）</li></ul></li><li>PubSubの基礎知識<ul><li>トピックやサブスクリプションの置き方</li><li>トピックからPushされるのか、Pullするのか</li></ul></li></ul><h3 id="アプリケーションのデプロイ"><a href="#アプリケーションのデプロイ" class="headerlink" title="アプリケーションのデプロイ"></a>アプリケーションのデプロイ</h3><ul><li>デプロイ方法の理解<ul><li>カナリアリリース、Blue&#x2F;Green、ローリングアップデートなど</li></ul></li><li>トラフィックの分割<ul><li>サービスそのものの機能としての分割（Cloud Runなど）、Kubernetesの機能としての分割</li></ul></li><li>デプロイタイミングの制御<ul><li>Cloud Buildを利用した自動化</li></ul></li></ul><h3 id="デプロイされたアプリケーションの管理"><a href="#デプロイされたアプリケーションの管理" class="headerlink" title="デプロイされたアプリケーションの管理"></a>デプロイされたアプリケーションの管理</h3><ul><li>Cloud Loggingへのログ出力<ul><li>JSON形式による吐き出しの推奨</li><li>エラー標準出力を利用した連携</li></ul></li><li>Cloud Loggingの他サービスとの連携<ul><li>ログルーターを利用したPubSub、BigQuery、Cloud Storageとの連携</li><li>Google Cloud外のサービスと連携するにはPubSubにルーティングしておくなど</li></ul></li><li>Cloud Monitoringを利用したアラートの設定<ul><li>ログベースなのか、メトリクスベースなのか</li></ul></li><li>Cloud ProfilerやTraceを利用したエラーやサービス遅延の解明</li><li>権限回り<ul><li>最小権限の法則に従う</li><li>エラー内容から足りない権限のトラブルシューティング</li></ul></li></ul><h3 id="アプリケーションのビルドとテスト"><a href="#アプリケーションのビルドとテスト" class="headerlink" title="アプリケーションのビルドとテスト"></a>アプリケーションのビルドとテスト</h3><ul><li>Cloud Buildを利用したイメージビルド<ul><li>Cloud Source Repositoryとの連携による自動化</li></ul></li><li>Artifact Registryを利用したイメージの脆弱性チェック<ul><li>Binary Authorization</li></ul></li><li>単体テストのベストプラクティス<ul><li>PubSubやCloud Runエミュレータを利用したローカルでのテスト</li></ul></li></ul><h3 id="Google-Cloud-サービスの統合"><a href="#Google-Cloud-サービスの統合" class="headerlink" title="Google Cloud サービスの統合"></a>Google Cloud サービスの統合</h3><ul><li>オンプレとGoogle Cloudサービスの統合<ul><li>Kubernetesクラスターの共存</li></ul></li><li>リフトアンドシフト<ul><li>業務影響を最小に抑えた移行戦略</li><li>データベースとして利用されているアプリケーションを考慮した移行</li></ul></li></ul><h3 id="全体的な所感"><a href="#全体的な所感" class="headerlink" title="全体的な所感"></a>全体的な所感</h3><p>やはりDeveloperということもあって、Google Cloudを利用したアプリケーション開発におけるベストプラクティスを問われる問題が多かったです。特に<strong>Kubernetesの基礎知識、GKEやCloud Runなど、アプリケーションをデプロイするためのサービスへの基礎知識</strong>は絶対に必要になります。<br>また、どの試験もあるあるな出題ですが、要求されるサービスがマネージドを希望しているのかどうか、可用性が重視されているのかなど、問いの文脈からサービスを選ぶ能力は必須です。<br>ただどの試験も4～5択なので、答えがわからなくても問いの文脈から消去法を使って選択肢を絞り込むことはできるので、サービスごとの違いを理解しておくと答えやすくなります。</p><h2 id="受験までの過程"><a href="#受験までの過程" class="headerlink" title="受験までの過程"></a>受験までの過程</h2><p>出題範囲の内容はほとんど実務で経験済みだったので、勉強期間は1週間ほどで済みました。試験への理解度を測るために、毎度おなじみのUdemyで問題集を購入し、各模擬試験セットを2周しておきました。</p><p><a href="https://www.udemy.com/course/google-professional-cloud-developer-2023/">詳解Google Professional Cloud Developer 模擬試験2024</a></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Google Cloudのサービスは多岐にわたるため数が多く、存在を知らないサービスが結構あります。<br>今回受験してみて、Cloud ProfilerやCloud Traceというサービスの存在や利用用途を知ることができました。特にデプロイされたアプリケーションの関数毎でリソースに対する使用割合を計測することができるCloud Profilerは今後使うことがでてきそうだなーと思いました。<br>また、デプロイ環境はほとんどのケースでまずCloud Runがファーストチョイスでいいのでは？ってくらいCloud Runは便利なサービスだと試験内容を復習する中で感じました。</p><p><a href="https://cloud.google.com/architecture?hl=ja">Cloud アーキテクチャセンター</a>をベースにした問題も多く、ここらへんのドキュメントを1つずつハンズオンでやっていくと、更に理解を深められそうです。<br>Developer力を試したい方は一度受けてみてはいかがでしょうか！</p><p>アイキャッチ画像は<a href="https://sites.google.com/robertsonmarketing.com/digitalassetdownloadportal/digital-toolkit">Google Cloud Certification</a>から付与されたものになります。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20240117a/Professional_Level_Google_Meets_Background.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;682&quot; loading=&quot;lazy&quot;&gt;


&lt;h2</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="合格記" scheme="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/"/>
    
    <category term="Google Cloud" scheme="https://future-architect.github.io/tags/Google-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>【合格体験記】（ドローン）二等無人航空機操縦士の振り返り</title>
    <link href="https://future-architect.github.io/articles/20240109a/"/>
    <id>https://future-architect.github.io/articles/20240109a/</id>
    <published>2024-01-08T15:00:00.000Z</published>
    <updated>2024-01-09T00:07:57.356Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。公共サービス事業部の村上一彦です。2020年フューチャーに中途入社し、これまで金融業・公共業にわたりシステム開発に従事してきました。</p><p>そんな私が、無人航空機操縦士試験（二等）に合格するまでの体験記をご紹介します。</p><p>↓著者の相棒 DJI社製 Mini3<br><img src="/images/20240109a/IMG_6263.jpg" alt="IMG_6263.jpg" width="562" height="323" loading="lazy"></p><h1 id="1-無人航空機操縦士試験（二等）とは"><a href="#1-無人航空機操縦士試験（二等）とは" class="headerlink" title="1. 無人航空機操縦士試験（二等）とは"></a>1. 無人航空機操縦士試験（二等）とは</h1><p>無人航空機操縦士試験（二等）とは、ドローン等（無人航空機）に関する唯一の国家資格になります。</p><p>2022年12月5日から技能証明制度が施行されており、ドローン等を飛行させるのに必要な技能（知識及び能力）を有することを証明する資格制度です。</p><p>資格の取得には、以下の３つの試験をクリアする必要があります。</p><p>仮免試験がない車の免許をイメージして頂くと近いと思います。</p><ul><li>学科試験</li><li>実地試験</li><li>身体検査</li></ul><p>また資格には、以下の限定(車で言うとAT限定のようなもの)があり、限定解除する場合は、通常の資格に追加して講習や試験が必要になります。</p><dl><dt>無人航空機の種類（機体の種類）</dt><dd> 回転翼航空機（マルチローター）</dd><dd> 回転翼航空機（ヘリコプター）</dd><dd> 飛行機（固定翼）</dd><dt>無人航空機の種類（機体の重量）</dt><dd>上記の機体の種類それぞれに対して最大離陸重量25kg未満</dd><dt>飛行の方法</dt><dd>目視内飛行(モニターを見ず、機体を目視しながら飛行させること)</dd><dd>昼間飛行</dd></dl><p>著者は、回転翼航空機（マルチローター）で資格を取得し、他の限定解除は行っておりません。</p><h1 id="2-無人航空機操縦士のメリットと有用性"><a href="#2-無人航空機操縦士のメリットと有用性" class="headerlink" title="2. 無人航空機操縦士のメリットと有用性"></a>2. 無人航空機操縦士のメリットと有用性</h1><p>この資格は以下のメリットがあります。</p><ol><li>認証済みの機体と合わせて申請することで、（ルールの範囲内で）自由に飛ばすことができる。</li><li>国土交通省への飛行許可申請の際に、一部手続きを省略できる。</li><li>建設業等で入札条件に含まれている。</li></ol><p>著者も飛行許可申請を出していますが、実際に手続きを一部省略して申請しています。</p><p>しかしドローンを取り巻く環境は、まだ成長途中です。国家資格を利用して、（ルールの範囲内で）自由に飛ばすことができるようになるには、以下の２つをクリアすることが必要です。</p><ul><li>操縦者技能証明（無人航空機操縦士の資格）</li><li>型式認証済みの機体 or 機体認証済みの機体</li></ul><p>現在、個人で買えるような価格帯で、型式認証をクリアしている機体が少なく、この資格が効力を発揮できない状況となっております。</p><p>今後、メーカーが基準を満たす機体を幅広く製造してくれることを願っています。</p><p>※なお、上記認証済みでない機体でも、国土交通省への飛行許可申請を実施すれば、（ルールの範囲内で）ドローン自体は飛ばせます。</p><p>著者がドローンに興味を持った経緯として、物流を担うシステムを担当したことがきっかけとなっています。物流業界は2024年問題をはじめ、あらゆる課題がある業界です。そして、ドローンはその解決策の一つであると同時に、複雑な法制度や制約に縛られているということを知り、自分で勉強してその壁を超えたいと思うようになりました。ちょうど国家資格が始まったこともあり、国家資格を取りながら体系的に学びたいと思い、今回チャレンジすることにしました。</p><h1 id="3-資格取得までの道のり"><a href="#3-資格取得までの道のり" class="headerlink" title="3. 資格取得までの道のり"></a>3. 資格取得までの道のり</h1><p>資格取得までの道のりは、以下の通りです。全体で2か月程かかりました。</p><img src="/images/20240109a/資格取得フロー.png" alt="資格取得フロー.png" width="570" height="523" loading="lazy"><p>こちらの順で詳細を紹介させて頂きます。</p><ol><li>ドローンスクールに入会</li><li>学科試験の講習→受験</li><li>実地試験の講習→受験</li><li>身体検査</li><li>証明書交付</li></ol><h3 id="1-ドローンスクールに入会"><a href="#1-ドローンスクールに入会" class="headerlink" title="1.ドローンスクールに入会"></a>1.ドローンスクールに入会</h3><p>まずは、無人航空機操縦士試験に対応しているドローンスクールを選びました。</p><p>著者は、株式会社モビリティテクノのドローンマスターズスクール(通称DMS)を選びました。</p><p>公式サイト：<a href="https://drone-school.mobility-techno.jp/">https://drone-school.mobility-techno.jp</a></p><p>選んだ理由は、「都内にある」「価格が安い」「練習場が利用できる」という理由でした。当時の基準で選んでいるため、選ぶ際は最新の情報で確認をお願いします。2023年12月22日時点では、二等資格の初学者コースは25万円(税込)に設定されておりました。</p><h3 id="2-学科試験の講習→受験"><a href="#2-学科試験の講習→受験" class="headerlink" title="2.学科試験の講習→受験"></a>2.学科試験の講習→受験</h3><p>スクールに入校後は、e-learningで学科試験の勉強が始まります。</p><p>全体で約8時間＋確認テストの内容になっています。</p><ol><li>はじめに</li><li>無人航空機操縦者の心得</li><li>無人航空機に関する規則</li><li>無人航空機のシステム</li><li>無人航空機の操縦者及び運航体制</li><li>運行上のリスク管理</li></ol><p>受験はテストセンターで受験しました。</p><p>無事、一発合格できました。</p><h3 id="3-実地試験の講習→受験"><a href="#3-実地試験の講習→受験" class="headerlink" title="3.実地試験の講習→受験"></a>3.実地試験の講習→受験</h3><p>実地試験は以下のようなスケジュールです。</p><div class="scroll"><table><thead><tr><th align="center">日数</th><th align="center">時間</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">1日目</td><td align="center">10:00～16:30</td><td align="center">机上試験対策＋実技対策</td></tr><tr><td align="center">2日目</td><td align="center">10:00～16:30</td><td align="center">机上試験対策＋実技対策</td></tr><tr><td align="center">3日目</td><td align="center">約1時間</td><td align="center">実地試験</td></tr></tbody></table></div><p>1,2日目は東京足立校で実施し、3日目の試験は埼玉浦和校で実施しました。</p><p>実施講習の中で、操縦時間が目一杯あるわけではなく、技能に不安を感じていたので、モバイルアプリで300円ほど課金して、練習もしました。</p><p>実地試験では、満点合格で試験管の人に技能を褒めて頂けました。</p><p>試験会場の様子はこちらです。</p><h3 id="4-身体検査"><a href="#4-身体検査" class="headerlink" title="4.身体検査"></a>4.身体検査</h3><p>著者は、普通自動車運転免許を持っていたため、システム上の手続きで完了しました。</p><p>検査内容は、以下のように定められています。</p><p><a href="https://ua-remote-pilot-exam.com/">https://ua-remote-pilot-exam.com/</a></p><blockquote><p>身体検査は、①有効な公的証明書の提出、②-1医療機関の診断書の提出（一等25㎏未満限定及び二等）、②-2医療機関の診断書の提出（一等25kg以上）、③指定試験機関の身体検査受検（一等25㎏未満限定及び二等）のいずれかの方法で受検ができます。</p></blockquote><div class="scroll"><table><thead><tr><th align="center">項目</th><th align="left">身体検査基準</th></tr></thead><tbody><tr><td align="center">視力</td><td align="left">視力が両眼で0.7以上、かつ、一眼でそれぞれ0.3以上であること、または一眼の視力が0.3に満たない者若しくは一眼が見えない者については、他眼の視野が左右150度以上で、視力が0.7以上であること。</td></tr><tr><td align="center">色覚</td><td align="left">赤色、青色及び黄色の識別ができること。</td></tr><tr><td align="center">聴力</td><td align="left">後方2メートルの距離から発せられた通常の強さの会話の音声が正しく聞き取れること。</td></tr><tr><td align="center">一般</td><td align="left">1．施行規則第236条の62第4項第1号または第2号にあげる身体の障害が無いこと。<br>2．1．に定めるもののほか、無人航空機の安全な飛行に必要な認知または操作のいずれかに係る能力を欠くこととなる四股又は体幹の障害があるが、法第132条の44の規定による条件を付すことにより、無人航空機の安全な飛行に支障を及ぼす恐れがないと認められること。</td></tr></tbody></table></div><h3 id="5-技能証明書交付"><a href="#5-技能証明書交付" class="headerlink" title="5.技能証明書交付"></a>5.技能証明書交付</h3><p>ここまでで、技能証明書交付までの要件が完了したため、システム上で発行手続きを行い、2週間ほどで手元に証明書が届きました。</p><h1 id="4-ドローンを飛ばしてみて"><a href="#4-ドローンを飛ばしてみて" class="headerlink" title="4. ドローンを飛ばしてみて"></a>4. ドローンを飛ばしてみて</h1><p>ドローンの飛行には、国土交通省への飛行許可申請や、関係各所への許可取り等も行う必要があります。警察署に連絡したり、土木管理事務所に使用許可申請を提出したりすることもあります。</p><p>また、著者は新たにドローンを購入したため、機体登録、リモートID（車のナンバーのようなもの）の登録など、様々な手続きを行っています。</p><p>それらを完了させて、実際に撮影した写真はこちらになります。（実際は映像ですがここでは静止画で紹介となります。）</p><img src="/images/20240109a/image.png" alt="image.png" width="889" height="504" loading="lazy"><img src="/images/20240109a/image_2.png" alt="image.png" width="1200" height="554" loading="lazy"><h1 id="5-まとめ"><a href="#5-まとめ" class="headerlink" title="5.まとめ"></a>5.まとめ</h1><p>ドローンを飛ばすのはとても楽しく、やってみたら多くの人がはまると思います。しかし、危険性も高く、法律も複雑です。何も理解しないまま飛行させると、知らぬ間に違法な飛行として、警察のお世話になる可能性や、重大な事故に発展する可能性もあります。</p><p>そのため、しっかり勉強したうえで取り組む必要があると思います。また、ドローンを飛ばしているだけではなかなか価値が生まれませんが、武器の一つになると思っています。これからも、楽しみながら、よりよいドローンの活用を考え実践していきたいと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;こんにちは。公共サービス事業部の村上一彦です。2020年フューチャーに中途入社し、これまで金融業・公共業にわたりシステム開発に従事してきました。&lt;/p&gt;
&lt;p&gt;そんな私が、無人航空機操縦士試験（二等）に合格するまでの体験記をご紹介します。&lt;/p&gt;
&lt;p&gt;↓著者の相棒</summary>
        
      
    
    
    
    <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
    <category term="合格記" scheme="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/"/>
    
    <category term="ドローン" scheme="https://future-architect.github.io/tags/%E3%83%89%E3%83%AD%E3%83%BC%E3%83%B3/"/>
    
    <category term="無人航空機操縦士" scheme="https://future-architect.github.io/tags/%E7%84%A1%E4%BA%BA%E8%88%AA%E7%A9%BA%E6%A9%9F%E6%93%8D%E7%B8%A6%E5%A3%AB/"/>
    
  </entry>
  
  <entry>
    <title>Entra IDを使うウェブサービスのバックエンドのテスト</title>
    <link href="https://future-architect.github.io/articles/20231227a/"/>
    <id>https://future-architect.github.io/articles/20231227a/</id>
    <published>2023-12-26T15:00:00.000Z</published>
    <updated>2023-12-27T07:19:15.807Z</updated>
    
    <content type="html"><![CDATA[<p>Entra ID（旧名Azure AD）は企業での利用の割合が高く、社内システムを作る場合はこれを使って認証して欲しいという要件が積まれることがほとんどでしょう。とはいえ、現物を使ってテストを作るのは都合がよくないこともあったりします。例えば処理時間が延びる（大量のE2Eテストを走らせる場合）とか、たくさんのユーザーのバリエーションを作る場合にそれだけユーザーを登録しないといけないとか、多要素認証の認証をどうするかとか。そんな感じのウェブサービスの単体テストを簡略化する方法について検討して組み込んだので紹介します。</p><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>Entra IDを組み込む方法については以前のエントリーで紹介しています。</p><ul><li><a href="https://future-architect.github.io/articles/20221118a/">MSAL.jsを使ってウェブフロントエンドだけでAzureAD認証する</a></li><li><a href="https://future-architect.github.io/articles/20221122a/">AzureAD＋MSAL for Goでバッチコマンドの認証</a></li></ul><p>後者は他の認証基盤でもだいたい同じですが、前者は、MSAL.jsのおかげでフロントエンドのみで認証が完了するということを紹介しました。多くの場合はサーバーにもコールバックがきたりとか、サーバーもログイン処理の一部に入っているのですが、そこが不要となっています。そのため、バックエンドとしては有効なJWTがリクエストについてきて、その署名の検証だけすればOKという状態となっています。</p><p>問題はその署名入りのJWTトークンをどうつくるか、という一点に絞られます。</p><p>ちなみに、JWTのTがトークンでJWTトークンと書くと「JSONウェブトークン・トークン」となってしまうのですが、毎回JWTをロングで書くのも面倒ですし、JWTだけだと不親切かと思いますJWTトークンにしています。江戸川や利根川を英語に翻訳するときに「エドガワーリバー」とか「トネガワリバー」とかになるのと同じようなものだと思っていただければ。</p><h1 id="自前で署名とJWTトークンを作る"><a href="#自前で署名とJWTトークンを作る" class="headerlink" title="自前で署名とJWTトークンを作る"></a>自前で署名とJWTトークンを作る</h1><p>Entra IDの場合、 <code>https://login.microsoftonline.com/&#123;テナントID&#125;/v2.0/.well-known/openid-configuration</code> にアクセスし、その中の <code>jwks_uri</code>というキーを見ると、署名検証のためのJWKの公開鍵が手に入ります。おそらくは<code>https://login.microsoftonline.com/&#123;テナントID&#125;/discovery/v2.0/keys</code>というURLのはずですが。ですが、この公開鍵はEntra IDが内部で保持している秘密鍵を使った署名の検証にしか使えないため、テスト用のJWTトークンを作る場合はこの鍵は使えません。そのため、まずはローカルの公開鍵と暗号鍵のペアを作ります。以下のサイトを使うのが簡単でしょう。</p><ul><li><a href="https://mkjwk.org/">https://mkjwk.org/</a></li></ul><p>RSAタブを開き以下のように入れるとEntra IDっぽくなります。KeyIDは任意です。</p><ul><li>Key Size(鍵のビット数): 2048</li><li>Key Use(鍵の用途): Signature</li><li>Algorithm(アルゴリズム): RS256</li><li>Key ID(鍵の識別子): “for test”</li><li>Show X.509(): No</li></ul><p>生成されたら、一番左と一番右をそれぞれJWTトークン作成用に保存しておきます。真ん中はサーバーで利用するのに便利な情報なのでこれも保存しておきます。</p><img src="/images/20231227a/image.png" alt="image.png" width="1200" height="986" loading="lazy"><h1 id="JWTトークンを作成"><a href="#JWTトークンを作成" class="headerlink" title="JWTトークンを作成"></a>JWTトークンを作成</h1><p>次にJWTを作ります。テナントIDとアプリケーションIDはテスト環境のEntraIDで生成したものと同じものを使う、あるいは独自に作るでもどちらでもよいですが決めておきます。UUIDの型式です。このサンプルではテナントIDを0000000-0000-0000-0000-000000000000、アプリケーションIDを1111111-1111-1111-1111-111111111111とします。</p><p>Entra ID相当のトークンを作りたいので、こんな感じのclaimを用意します。重要な項目は以下の通りです。</p><ul><li>tid: テナントIDとする</li><li>aud: クライアントID＝アプリケーションID</li><li>iss: <a href="https://login.microsoftonline.com/(%E3%83%86%E3%83%8A%E3%83%B3%E3%83%88ID)/v2.0">https://login.microsoftonline.com/(テナントID)/v2.0</a></li><li>exp: 有効日時(2035年にしてある)</li><li>iat&#x2F;nbf: ログイン日時</li><li>exp: 有効期限</li><li>sub: ユーザーのキー</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aud&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1111111-1111-1111-1111-111111111111&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://login.microsoftonline.com/0000000-0000-0000-0000-000000000000/v2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1671015703</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nbf&quot;</span><span class="punctuation">:</span> <span class="number">1671015703</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">2071019603</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;idp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://sts.windows.net/3eca0868-d511-4342-8659-e88a2e3bf9fe/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Test User(テストユーザー)&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nonce&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ce3fd167-0e5a-43ae-bb8b-11d8d003d8c6&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;oid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;daf6a6c6-d549-4421-bf71-3b59fd74d531&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;preferred_username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test.user@example.co.jp&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rh&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.AWoA733wxZg0tkymktoZGQzOJ_1Ryon2gERMsUs1n-XnFcpqAFQ.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;oXxd31705vfpTnrSPcdVCdAoalq7ZgQ_gx7Msq7OBzY&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0000000-0000-0000-0000-000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;uti&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fw7ZoF0z1UCipEF8hfwZAA&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>subはユーザーを表すユニークなキーとされていますが、Entra ID上のこのsubと、実際のシステム上のユーザーの対応付けは別途決めておく必要があります。Entra IDとHRのシステムの同期をきちんととっておくのであればこのsubを使ってユーザーを決められますが、そうでない場合はマニフェストを変更してユーザーコード相当の情報を登録したり、preferred_usernameを使うといったことが必要になります。そのあたりはサーバー側の方針に合わせて上記のclaimは修正してください。</p><p>次にjwt.ioを開きます。</p><p><a href="https://jwt.io/">https://jwt.io/</a></p><p>アルゴリズムをRS256に変更し、PAYLOADに上記のclaimを、その下の署名欄の上の公開鍵にはmkjwk.orgで作った公開鍵を、その下の秘密鍵にはmkjwk.orgで作った秘密鍵を貼り付けます。</p><p>これで左側にJWTが生成されます。</p><img src="/images/20231227a/image_2.png" alt="image.png" width="1200" height="1334" loading="lazy"><p>これはmkjws.orgで作成したjwks.orgの証明書を使って署名の確認が行えます。サーバー側でJWTトークンの検証を行うときは、Entra IDの秘密鍵ではなく、mkjwk.orgで生成した秘密鍵（真ん中のPublic and Private Keypair Setが同じ形式なので扱いやすい）を使って署名の検証が行えます。任意のユーザー情報を作ってトークンを量産できますし、実際のログインは不要なのでテストでも扱いやすいでしょう。このトークンを使えばcurlでもなんでも自由にリクエストが飛ばせるようになります。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Entra ID（旧名Azure</summary>
        
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="テスト" scheme="https://future-architect.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="AzureAD" scheme="https://future-architect.github.io/tags/AzureAD/"/>
    
    <category term="EntraID" scheme="https://future-architect.github.io/tags/EntraID/"/>
    
    <category term="JWT" scheme="https://future-architect.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>【合格体験記】Google Cloudの入門試験：Cloud Digital Leader</title>
    <link href="https://future-architect.github.io/articles/20231226a/"/>
    <id>https://future-architect.github.io/articles/20231226a/</id>
    <published>2023-12-25T15:00:00.000Z</published>
    <updated>2023-12-26T00:26:29.176Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20231226a/IMG_6276.JPG" alt="IMG_6276.JPG" width="509" height="509" loading="lazy"><p>こんにちは。<br>公共サービス事業部の村上一彦です。</p><p>先日、Google Cloudの認定資格である「Cloud Digital Leader認定資格」を受験し、取得できました。</p><p>Cloud Digital Leader認定資格の合格に至った学習過程について書いていきます。</p><h1 id="筆者のバックグラウンドについて"><a href="#筆者のバックグラウンドについて" class="headerlink" title="筆者のバックグラウンドについて"></a>筆者のバックグラウンドについて</h1><p>大学は経営学部で、会計を中心に学んでおりました。その為、ITスキルはほぼゼロに等しい状況でした。</p><p>新卒から約3年ほど金融系システム(Java)の業務に従事、1年ほどAWSに触れる機会がありました。しかし、アプリ主体のチームに所属しており、インフラは別チームでしたので、機能を少し知っている程度です。その後、2020年にフューチャーに転職しましたが、クラウドに関わる経験はなく、クラウドに関する経験はほぼゼロの状況です。</p><p>他の資格としては、応用情報技術者試験を取得していますが、今回の試験にはほぼアドバンテージはないと思います。</p><h1 id="試験と出題範囲について"><a href="#試験と出題範囲について" class="headerlink" title="試験と出題範囲について"></a>試験と出題範囲について</h1><p>Cloud Digital Leaderの試験は、Google Cloudの認定資格の中でも一番基礎的な試験として位置づけられています。<br>※ここから公式サイトの抜粋を引用しています。<br><a href="https://cloud.google.com/learn/certification/cloud-digital-leader?hl=ja">https://cloud.google.com/learn/certification/cloud-digital-leader?hl=ja</a></p><h3 id="推奨される経験"><a href="#推奨される経験" class="headerlink" title="推奨される経験"></a>推奨される経験</h3><blockquote><p>技術専門家と連携した経験<br>技術的な前提条件はありません</p></blockquote><p>自身が技術専門家として従事した業務経験を前提としていない為、私のようにインフラやクラウドが未経験の人でも目指せる資格ということがわかります。</p><h3 id="試験の形式"><a href="#試験の形式" class="headerlink" title="試験の形式"></a>試験の形式</h3><blockquote><p>試験時間: 90 分<br>登録料: $99<br>言語: 英語、日本語</p></blockquote><h3 id="出題範囲"><a href="#出題範囲" class="headerlink" title="出題範囲"></a>出題範囲</h3><div class="scroll"><table><thead><tr><th align="left">内容</th><th align="center">配点</th></tr></thead><tbody><tr><td align="left">Google Cloud によるデジタル トランスフォーメーション</td><td align="center">10%</td></tr><tr><td align="left">データと Google Cloud によるイノベーション</td><td align="center">30%</td></tr><tr><td align="left">インフラストラクチャとアプリケーションのモダナイゼーション</td><td align="center">30%</td></tr><tr><td align="left">Google Cloud のセキュリティとオペレーション</td><td align="center">30%</td></tr></tbody></table></div><p>ざっくり言うと、Google Cloudで提供している各機能の内容と、導入するメリットなどがメインの内容です。</p><h1 id="学習過程"><a href="#学習過程" class="headerlink" title="学習過程"></a>学習過程</h1><h2 id="1-「図解即戦力-Google-Cloudのしくみと技術がこれ1冊でしっかりわかる教科書」の読了"><a href="#1-「図解即戦力-Google-Cloudのしくみと技術がこれ1冊でしっかりわかる教科書」の読了" class="headerlink" title="1. 「図解即戦力 Google Cloudのしくみと技術がこれ1冊でしっかりわかる教科書」の読了"></a>1. 「図解即戦力 Google Cloudのしくみと技術がこれ1冊でしっかりわかる教科書」の読了</h2><p>私は、Google Cloudについての予備知識が全くなかったため、まず入門書の「図解即戦力 Google Cloudのしくみと技術がこれ1冊でしっかりわかる教科書」を読みました。</p><p>この本については、他の方が詳しく紹介されていますので、ぜひお読みいただければと思います。</p><blockquote><p>フューチャー技術ブログ「Google Cloudのしくみと技術がしっかりわかる教科書を読んだ感想」<br><a href="https://future-architect.github.io/articles/20230302a/">https://future-architect.github.io/articles/20230302a/</a></p></blockquote><p>こちらの本は入門書なので読みやすかったです。試験の対策としては、一部カバーしていない部分はありますが、次で紹介する模擬試験でカバーできるので、問題ありませんでした。</p><p>模擬試験がメインの試験対策になるため、本の内容は熟読せずに流し読みでも問題ないです。私は１周流し読みしました。4時間くらいかかりました。（細かい記載は飛ばしました。）</p><h2 id="2-Udemyの模擬試験の反復"><a href="#2-Udemyの模擬試験の反復" class="headerlink" title="2. Udemyの模擬試験の反復"></a>2. Udemyの模擬試験の反復</h2><p>Udemyにて、こちらの模擬試験を購入し反復しました。</p><blockquote><p>GCP：Google Cloud Digital Leader模擬試験問題集（6回分320問）<br><a href="https://www.udemy.com/course/google-cloud-digital-leader6320/">https://www.udemy.com/course/google-cloud-digital-leader6320/</a></p></blockquote><p>模擬試験は6回分収録されていますが、私は勉強時間が取れず、5回までを2周しました。</p><p>1周目を解いた後、模擬試験の解説をしっかり読み、わからない箇所については、先述の入門書に戻ったりもしました。そのように振り返りをすることで、1周目は40～50点でしたが、2周目では80点以上を取れるようになりました。</p><p>おすすめはできませんが、正直、理解を後回しにして、模擬試験の繰り返し学習で、反射的に問題を解けるようになるだけで、合格点を出せるのではないかと思います。</p><p>見直し時間も含め、20時間くらいかかりました。</p><h3 id="模擬試験のいい点"><a href="#模擬試験のいい点" class="headerlink" title="模擬試験のいい点"></a>模擬試験のいい点</h3><ul><li>本試験の内容をカバーしている。</li><li>本試験と似たような形式で出題される。</li><li>解説が非常によく、間違いの選択肢がなぜ誤りかも書いてあるため、腕試しという意味よりも、インプット学習に使用できる内容でした。</li></ul><h3 id="コツ"><a href="#コツ" class="headerlink" title="コツ"></a>コツ</h3><ul><li>各サービスとキーワードの組み合わせを覚える。</li><li>メインの機能がどのように拡張できるか(できないか)を理解する。</li><li>非推奨サービスは正答にならない。(経験則)</li><li>計算問題は答えを覚える。（理由は後述）</li></ul><h1 id="試験当日"><a href="#試験当日" class="headerlink" title="試験当日"></a>試験当日</h1><p>試験は近くのテストセンターで受験しました。</p><p><strong>ここで問題だったのが、会場内に筆記用具が持ち込めず（貸し出しもNG）、計算問題を暗算でやるしかありませんでした。</strong></p><p>試験時間は30分以上残して終了しましたので、時間配分はそれほど意識しなくても問題ないと思います。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>初めてのGoogle Cloudの認定資格の試験でしたが、業務経験を問わず、丁度いい内容と難易度だと思いました。試験内容が技術に寄りすぎておらず、「Google Cloudにはどんなメリットがあるか」ということを理解することができたので、私のように、インフラエンジニアではない人にも、生かしていける知識だと思いました。</p><p>また、AWSやAzureなど、他のクラウドサービスにもGoogle Cloudにあるような機能がある為、クラウド全般の入門としてもいいと思いました。</p><p>これからクラウドの知識やインフラの知識を身に着けたい人のスタートに良い試験だと思います。ぜひ受験してみてください！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20231226a/IMG_6276.JPG&quot; alt=&quot;IMG_6276.JPG&quot; width=&quot;509&quot; height=&quot;509&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="合格記" scheme="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/"/>
    
    <category term="CloudDigitalLeader" scheme="https://future-architect.github.io/tags/CloudDigitalLeader/"/>
    
  </entry>
  
  <entry>
    <title>ドキュメント管理を制する 陳腐化を防ぐための実践事例 Lunch LT に登壇しました</title>
    <link href="https://future-architect.github.io/articles/20231215a/"/>
    <id>https://future-architect.github.io/articles/20231215a/</id>
    <published>2023-12-14T15:00:00.000Z</published>
    <updated>2023-12-15T04:18:42.485Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20231215a/21e04bb5f66c5949239f7bfa759a38d5.png" alt="21e04bb5f66c5949239f7bfa759a38d5.png" width="560" height="238" loading="lazy"><p>2023&#x2F;12&#x2F;6、Findyさん主催の<a href="https://findy.connpass.com/event/302508/">ドキュメント管理を制する 陳腐化を防ぐための実践事例 Lunch LT</a>に「設計ドキュメント腐る問題、Git管理で運用してみた本当のところ」というタイトルで登壇しました。</p><ul><li><a href="https://togetter.com/li/2271272">togetter</a></li><li><a href="https://findy.connpass.com/event/302508/presentation/">スライドまとめ</a></li></ul><h2 id="ドキュメント管理を制する-陳腐化を防ぐための実践事例-Lunch-LT-会とは"><a href="#ドキュメント管理を制する-陳腐化を防ぐための実践事例-Lunch-LT-会とは" class="headerlink" title="ドキュメント管理を制する 陳腐化を防ぐための実践事例 Lunch LT 会とは"></a>ドキュメント管理を制する 陳腐化を防ぐための実践事例 Lunch LT 会とは</h2><p>ドキュメントの管理方法を確立、整備されてこられた方々にお話を伺い、工夫点や考え方、テクニック等を広く共有していただくことで、明日から使える技術やノウハウを共有することを目的にした勉強会です。</p><p>Lunch LTということで、お昼時に4名で10分枠、質疑応答で15分ごとに交代でした。私の家族構成的に夕方以降の勉強会参加が厳しいので、ランチLTだと視聴だけではなく登壇もできるということで、控えめに言って画期的だなと思いました。</p><h2 id="登壇"><a href="#登壇" class="headerlink" title="登壇"></a>登壇</h2><p>トップバッターで「設計ドキュメント腐る問題、Git管理で運用してみた本当のところ」というタイトルで登壇しました。登壇のきっかけが、<a href="https://future-architect.github.io/articles/20231101a/">設計ドキュメント腐る問題、Git管理で運用してみた結果</a>という記事を見たFindyさんが声をかけてくれたことですので、記事を見ていない人向けに、記事のエッセンスや書きそびれてことを話しました。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQIkC7si1x4mB4uWMtGYXQaR3oL951AEUp8B2CKoeB-yJGX1fssMgdXQlMq5dJ70eOCaTfFhH1TBIcp/embed?start=false&loop=false&delayms=3000" frameborder="0" width="100%" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p>このスライドも微妙にふわっとした内容で人によって捉え方も様々であり、ツッコミしやすいためか、SNSなどでたくさんコメントを頂いています。糧としたいと思います。</p><p>久々の勉強会の登壇で楽しかったです。他の登壇者の方の考えも聞けてよかったです。重複する部分もあれば、先に進んでいる施策を取っているところもあり、私の勉強になりました。</p><h2 id="質疑応答や反応"><a href="#質疑応答や反応" class="headerlink" title="質疑応答や反応"></a>質疑応答や反応</h2><p>勉強会で頂いた質問についてです。</p><ol><li>最初にドキュメントをGit管理へ移す際に、苦労された点はありますか？<ul><li>(回答) スライドやスプレッドシートをファイルサーバ（Google Drive)に保存する方式でしたので、それらへの記載内容をテキストベースで記載できるか、実現性を示すことが大変でした。特に、表形式の情報はどう頑張ってもExcelに記載するほうが楽なので、Markdownでも書けるとか、Diffで差分が管理できるなどをチームに説明した記憶があります</li></ul></li></ol><p>当日にもう1点、質問に答えたのですが、内容を忘れちゃいました。</p><p>Web上で上手く探せなかったのですが、発表を聞いてくれた人のコメントで、「ドキュメントを後で揃えるのは、テストコードを後から書こうとするのに似ている」というのがあって、「確かに！」と思いました。最初にどういった構成、粒度、レベル感で記載するかを定義し、リファレンス実装（ドキュメント）を用意することが重要な点も似ていますね。</p><h2 id="設計ドキュメント、主題はアーキテクチャ方針をどこで管理するか話だったかもしれない"><a href="#設計ドキュメント、主題はアーキテクチャ方針をどこで管理するか話だったかもしれない" class="headerlink" title="設計ドキュメント、主題はアーキテクチャ方針をどこで管理するか話だったかもしれない"></a>設計ドキュメント、主題はアーキテクチャ方針をどこで管理するか話だったかもしれない</h2><p>設計ドキュメントの管理ですが、「コードと設計ドキュメントを同時に更新する開発ルールにすればおしまいだよね、それで話が終わりじゃない？」みたいなリアクションがあり、一定その通りだと思います。おそらくプログラム設計書とか、アーキテクチャ図、システム間連携I&#x2F;F仕様書、DBのテーブル設計書あたりは機械的にそのルールで行ける気がします。静的解析やコード自動生成でCI的なワークフローにも組み込みしやすそうです。</p><p>逆に、システムの構成が変わるようなものの、検討経緯はそのパターンで扱いきれないときがあります。アーキテクチャ方針とかそういったものです。</p><p>いくつか例をあげます。</p><ul><li>ある処理は非同期に切り出そう<ul><li>あるファイルアップロードはいったんS3に格納して受付OKをクライアントに戻し、取り込み要求をキューイングして、非同期で処理する。なぜそうしたか？同期で全て取り込むAPIもあり、2種類あるのはなぜで、使い分けはどう考えるべきのか</li></ul></li><li>出荷指示、在庫引当などモノが動く以上、トランザクション観点で同期で処理すべきだが、非同期になっている。なぜか。もし、実在庫とシステムでズレが出た時のデータ不整合はどう救済するのか</li><li>DBのテーブルが命名体系があり多段になっている。データレイク層・正規化層・データマート層といったレイヤー分けがある。なぜそうなったのか。どういう使い分けか？</li></ul><p>最初に全てアーキテクチャ的な方針が決まっていれば良いですが、設計開発～保守運用など様々な場面で、方針を進化させる時期が出てきます。それらをコード（というより暗黙的なチームの合意事項）と同期を取るために、開発ルールを決めれば、ちゃんと書いてくれるでしょうか？ もし開発ルールを決めて自発的・自律的にアーキテクチャレベルのドキュメントを同期とってくれるチームであればかなりハッピーだと思います。良いチームですね。そういったチーム文化を作るためには通常は工夫が必要です。最初にPull requestで設計レビューを挟む（やりすぎると重厚ですが、チームメンバーの規模・スキルセットによっては厳密化する）方式でレールに乗せるまではレビューで担保するとか、色々です。</p><p>勉強会では、それらアーキテクチャデザインレコード的な内容は、イミュータブルドキュメントモデルとして切り出して管理したり、あるいはドキュメントサイトをVitePress（Vue.jsを利用した静的サイトジェネレータ）で構築したり記載する障壁を下げる工夫をしたり、各社の知見が大集合で話されていました。</p><p>勉強会名は今思うと、「アーキテクチャ方針を陳腐化させないための実践事例 Lunch LT」というのにすれば、ブレが少なかったかもなと感じます。</p><h2 id="設計ドキュメントはブログ運営に似ている"><a href="#設計ドキュメントはブログ運営に似ている" class="headerlink" title="設計ドキュメントはブログ運営に似ている"></a>設計ドキュメントはブログ運営に似ている</h2><p>アーキテクチャ方針など、決定事項の経緯や議論内容を上手く記載するにはそれなりの訓練が必要です。ブログをよく書くメンバーは筆が軽く、そうじゃないメンバーは腰が重いことがあると、発表でも伝えました。</p><p>個人的にサイト化すると、TOCを自動生成の他にも、そのページのPVや、記事に対するコメント、いいねなどのリアクションを遅れるようになると感じました。また、その記事に対する、被リンク記事を収集したり、関連性の高い記事をサジェストするなどです。人気の記事ランキング、みたいなのを出しても良いかも知れません。良い記事に多くコントリビュートした人を礼賛する、ドキュメントライター賞みたいなのを作っても良いかも知れませんね。</p><p>ドキュメントの質を上げるため、メンバーのモチベーションを上げる取り組みがあに越したことはないでしょう。この面はブログ運営のナレッジが役立つと思います。また、こうした設計ドキュメントを書く文化を整えれば、メンバーが自社の技術ブログを執筆する際の心理的障壁も取り除け、スキルセットもシームレスになります。</p><p>社内ドキュメントを書いていけば、技術ブログ執筆スキルが上がるし、逆もまたしかり。相互に影響しながら進化させれるなと気づけたので、勉強会に参加して良かったです。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>Findyさんの抜群の集客力で400名以上の方が参加申し込みしてくれ、またLunch LTという私にとって登壇しやすい時間帯・形式で勉強会に参加でき、とても嬉しかったです。</p><p>また、今後はドキュメント周りについてはプログラム設計の話をしているのか、アーキテクチャ設計の話をしているかで取り扱いノウハウが異なりそうなので、解像度を上げていきます。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20231215a/21e04bb5f66c5949239f7bfa759a38d5.png&quot; alt=&quot;21e04bb5f66c5949239f7bfa759a38d5.png&quot; width=&quot;560&quot; height=&quot;238&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="ドキュメント" scheme="https://future-architect.github.io/tags/%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88/"/>
    
    <category term="開発手法" scheme="https://future-architect.github.io/tags/%E9%96%8B%E7%99%BA%E6%89%8B%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>React Server ComponentでもContextで状態を共有する</title>
    <link href="https://future-architect.github.io/articles/20231214a/"/>
    <id>https://future-architect.github.io/articles/20231214a/</id>
    <published>2023-12-13T15:00:00.000Z</published>
    <updated>2023-12-14T02:39:04.166Z</updated>
    
    <content type="html"><![CDATA[<p>Next.jsの最近の大きな目玉機能はReact Server Component(以下サーバーコンポーネント)です。パフォーマンスアップに有効だったり、gRPCだRESTだGraphQLだ論争を終わりにするServer Actionsなど盛りだくさんです。</p><p>一方で、サーバーコンポーネントはコーディング上の制約がいろいろあります。</p><ul><li>サーバーコンポーネントではhooksが使えない</li><li>サーバーコンポーネントのソースからクライアントコンポーネントは<code>import</code>できるが逆はできない。レンダーツリーを工夫すればクライアントコンポーネントの下にサーバーコンポーネントを配置することは可能</li></ul><p>サーバーコンポーネントでは非同期コンポーネントを作成でき、<code>fetch</code>でサーバーから情報をとってきたり、DBアクセスした結果を利用できます。しかし、最近のモダンReactの場合、状態管理などはすべてhooksに寄せるので大きくコードの変更が必要になってしまいます。せっかくとってきたデータを全部propsでバケツリレーしなければならないとなると不便です。利用が必要な個所で個別にフェッチするという実装もありです。Next.jsはキャッシュして呼び出しを減らしてくれますが以下のようなケースではカバーしきれません</p><ul><li><code>fetch()</code>以外の、たとえばDB接続での取得では重複リクエストになる</li><li>利用したい箇所がクライアントコンポーネントの場合、最寄りのサーバーコンポーネントからバケツリレーが必要</li></ul><p>コード量も増え、速度も遅くなったらうれしくないですよね。</p><p>しかし、後者の制約の脱出ハッチを使えばContextを利用してサーバーから取得した値を子供のコンポーネントに流してやれるのではないか、と思ったので試してみました。これが利用できればサーバーから取得する値はコンテキストに入れておいて、バケツリレーを回避できます。サーバーコンポーネントは根っこの方に近いコンポーネントで利用されますが、そこでコンテキストが使えれば既存のコードから大幅な書き換えを減らせるはずです。</p><h1 id="Next-jsアプリケーションの作成"><a href="#Next-jsアプリケーションの作成" class="headerlink" title="Next.jsアプリケーションの作成"></a>Next.jsアプリケーションの作成</h1><p>次のコマンドでさっと作成します。いろいろオプションを聞かれますが、サーバーコンポーネントを使うためにappルーターを選びます。このサンプルはTypeScriptにしているのでTypeScriptも選んでいますが、型を外せばJSでも動くでしょう。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx create-next-app@latest</span><br></pre></td></tr></table></figure><p>さっそくトップページを書き換えていきます。まずダメだった例を紹介します。</p><figure class="highlight ts"><figcaption><span>src/state/index.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// ダメだった例</span></span><br><span class="line"><span class="keyword">import</span> &#123; createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// コンテキストに入れるデータ型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// コンテキストを作成</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">LoginContext</span> = <span class="title function_">createContext</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&quot;default@example.com&quot;</span></span><br><span class="line">&#125; <span class="keyword">as</span> <span class="title class_">User</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 値を取得するカスタムフック</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">useContext</span>(<span class="title class_">LoginContext</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><figcaption><span>src/app/page.tsx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// ダメだった例</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LoginContext</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../state&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Child</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./child&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 本当はここでDBアクセスや外部APIアクセスをしてユーザー情報をとってくる</span></span><br><span class="line">  <span class="keyword">const</span> user = &#123;<span class="attr">name</span>: <span class="string">&quot;shibukawa&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;shibukawa@example.com&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">LoginContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;user&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">LoginContext.Provider</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><figcaption><span>src/app/child.tsx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// コンテキストから値を取得して表示するクライアントコンポーネント</span></span><br><span class="line"><span class="string">&quot;use client&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useUser &#125; <span class="keyword">from</span> <span class="string">&quot;@/state&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="title function_">useUser</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(user)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;name&quot;</span>&gt;</span>name<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">output</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;email&quot;</span>&gt;</span>email<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>&gt;</span>&#123;user.email&#125;<span class="tag">&lt;/<span class="name">output</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>どこがダメでしょうか？実行してみると、<code>createContext()</code>の呼出はダメよ、とエラーになっています。このファイルに”use client”を足してもダメです。</p><img src="/images/20231214a/image.png" alt="image.png" width="1159" height="688" loading="lazy"><p>この<code>createContext()</code>を含むコードを全部クライアントコンポーネントに追い出せばOKです。次のステップでこれを直していきます。</p><h1 id="OKなコード"><a href="#OKなコード" class="headerlink" title="OKなコード"></a>OKなコード</h1><p>まず、コンテキストを作成するだけではなく、それをラップした<code>&lt;Provider&gt;</code>クライアントコンポーネントを作成します。</p><figure class="highlight tsx"><figcaption><span>src/state/index.tsx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;use client&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createContext, useContext, <span class="title class_">ReactNode</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// User, LoginContext, useUserは変化なし</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123;</span><br><span class="line">    <span class="attr">children</span>: <span class="title class_">ReactNode</span>,</span><br><span class="line">    <span class="attr">user</span>: <span class="title class_">User</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// コンテキストのProviderを呼び出すクライアントコンポーネントを作成する</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Provider</span>(<span class="params">&#123; children, user &#125;: Props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">LoginContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;user&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">LoginContext.Provider</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><figcaption><span>src/app/page.tsx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Child</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./child&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../state&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// LoginProviderの代わりに、クライアントコンポーネントのProviderを利用</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">user</span>=<span class="string">&#123;&#123;</span> <span class="attr">name:</span> &quot;<span class="attr">shibukawa</span>&quot;, <span class="attr">email:</span> &quot;<span class="attr">shibukawa</span>@<span class="attr">example.com</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これでうまく表示されます。</p><img src="/images/20231214a/image_2.png" alt="image.png" width="1004" height="469" loading="lazy"><p>レンダリングツリーとしては次のような形になります。Homeコンポーネントで、現在は即値ですがサーバーから取得した情報をProviderコンポーネントに渡し、このコンポーネントがコンテキストに格納します。Childコンポーネントはバケツリレーではなく、コンテキスト経由でユーザー情報を取得します。</p><img src="/images/20231214a/名称未設定ファイル-ページ1.drawio.png" alt="名称未設定ファイル-ページ1.drawio.png" width="339" height="211" loading="lazy"><p>ソースコードのインポートの依存関係は次の通りで、サーバー→クライアントの参照はあるが、クライアント→サーバーの参照はないため、React Server Componentの規約には反していません。</p><img src="/images/20231214a/名称未設定ファイル-ページ2.drawio.png" alt="名称未設定ファイル-ページ2.drawio.png" width="401" height="131" loading="lazy"><p>これでサーバーから取得した値もコンテキスト経由で子供のコンポーネントに参照させてあげられますね。もちろん、間に挟まるサーバーコンポーネントでは<code>useContext</code>は使えないため、サーバーコンポーネントが利用したい値はフェッチで取るか、親からPropsで渡す必要があります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>クライアントコンポーネントを経由することでコンテキストが利用できました。Reduxも、Recoilも、Jotaiも、すべて内部ではコンテキストを使って実現しています。コンテキストをクライアントコンポーネントとしてラップすることで使えるということは、これらの状態管理ライブラリもサーバーコンポーネントであろうと今まで通り使えるということです。</p><p>この手法を使えば既存のコードからの変更を小さくできるので、appルーターに移植するときに「とりあえず全部に”use client”をつけて回る、ということをしないでもよくなりますね。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Next.jsの最近の大きな目玉機能はReact Server Component(以下サーバーコンポーネント)です。パフォーマンスアップに有効だったり、gRPCだRESTだGraphQLだ論争を終わりにするServer</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
    <category term="Next.js" scheme="https://future-architect.github.io/tags/Next-js/"/>
    
    <category term="RSC" scheme="https://future-architect.github.io/tags/RSC/"/>
    
  </entry>
  
  <entry>
    <title>とちぎRuby 200回目をお祝いしてきた</title>
    <link href="https://future-architect.github.io/articles/20231213a/"/>
    <id>https://future-architect.github.io/articles/20231213a/</id>
    <published>2023-12-12T15:00:00.000Z</published>
    <updated>2023-12-13T01:21:30.650Z</updated>
    
    <content type="html"><![CDATA[<p>とちぎRubyは月に1回の読書会形式で、今月でちょうど200回目とのことで、有給をとって行ってきました。200回ということは16年8ヶ月ほど続いている計算になります。</p><p>僕の前々職は栃木の芳賀工業団地にある本田技術研究所でした。当時から趣味で使う第一言語はPythonだったのですが、栃木県にはPythonのコミュニティなどはなく、活発なコミュニティといえばとちぎRubyだったので人付き合いを求めてとちぎRubyに片道2時間ぐらいかけて下道で通っていました。最後に参加したのはホンダを辞める直前の2010年12月でちょうど13年前です。2-3年は通っていたと思うのでほぼ最初の年からは参加していたのかな、というところですかね。</p><p>僕が本田労組の職場委員なぞやっていたころの宇都宮市長選挙で争点になっていて、開通したら乗りたい！と思っていたLRTも1区間往復で乗ってきました。かっこいいし快適でした。これで通勤したかったな。</p><img src="/images/20231213a/IMG_3436.JPG" alt="" width="800" height="600" loading="lazy"><p>場所はいつもの西那須野公民館です。名札は作り直されたのか新しいですね。</p><img src="/images/20231213a/IMG_3439.JPG" alt="" width="800" height="600" loading="lazy"><img src="/images/20231213a/IMG_3440.JPG" alt="" width="800" height="600" loading="lazy"><p>残念ながら、本日はスタート時からのメンバーの半数がお休みということで、読書会は中止になって急遽食事会になってしまいましたが、その分じっくりお話ができました。</p><p>200回目ということではありますが、特に特別なことは企画しておらず、いつも通りの読書会の予定だったとのことです。とくにがんばらず、完全に習慣化して「そういえば第一水曜日だから行こう」ぐらい肩肘張らずにやる、また、今読んでいる研鑽Rubyもあと来年1年ぐらいはかかるだろう、みたいに話されていて、あせらずじっくりのんびりというのも良いですね。このあたりがここまで継続している秘訣ですね。思えば、本家Ruby会議に行っても、出張版とかいっていつもの読書会をそのままやるようなコミュニティでした。</p><p>発起人の一人の池澤さん（お休みでしたが）も、僕がいたころにはすでに還暦になられて、それから10年以上たつのですが、こういう刺激を定例化するのは自分が高齢になったあとのことを考えると素敵だな、真似したいなと思いますね。</p><p>トラディショナルでカラメルソースたっぷりの硬いプリンはとちぎRubyを祝うのに最高の料理でした（みんな車なのでお酒は飲めない）。今回はお会いできなかった方々もいたので、また近日中に、拡大版torubyかとちぎRuby会議あたりを狙ってまた来たいですね。</p><img src="/images/20231213a/IMG_3444.JPG" alt="" width="600" height="800" loading="lazy"><p>あとは会食ではリモートワークかオフラインか、というのも話題になりました。オフラインは確かに情報量が多く早いフィードバックで速度が出せるのだろうな、というのを聞いて思ったのですが、オフラインだったとしても、ウォーターフォール式の必ず仕様書などを書いてから会話、というのではその速度は出ないし、ミーティングだらけでなかなか顔を見る時間が少ないとそのオフラインのメリットは完全には出ないんだろうな、というのは思いました。</p><p>オフラインになってもストレスがあまりない、という状況自体、遅いことに慣れてしまっているということなのかな、と。もちろん個人ごとにとかうまくタスク分割がうまくいっているということもあるかもしれませんが。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;とちぎRubyは月に1回の読書会形式で、今月でちょうど200回目とのことで、有給をとって行ってきました。200回ということは16年8ヶ月ほど続いている計算になります。&lt;/p&gt;
&lt;p&gt;僕の前々職は栃木の芳賀工業団地にある本田技術研究所でした。当時から趣味で使う第一言語はPyt</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="参加レポート" scheme="https://future-architect.github.io/tags/%E5%8F%82%E5%8A%A0%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="Ruby" scheme="https://future-architect.github.io/tags/Ruby/"/>
    
    <category term="とちぎRuby" scheme="https://future-architect.github.io/tags/%E3%81%A8%E3%81%A1%E3%81%8ERuby/"/>
    
  </entry>
  
  <entry>
    <title>Dev Containersの始め方(2) : Python環境</title>
    <link href="https://future-architect.github.io/articles/20231212a/"/>
    <id>https://future-architect.github.io/articles/20231212a/</id>
    <published>2023-12-11T15:00:00.000Z</published>
    <updated>2023-12-12T00:15:18.233Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20231206a/">前回のエントリー</a>では、Dev Containersの動作原理を理解したのでそれにあわせたPython環境を作っていきます。</p><h1 id="ベースの環境"><a href="#ベースの環境" class="headerlink" title="ベースの環境"></a>ベースの環境</h1><p>まずリポジトリのフォルダを作ります。<code>python-dev</code>とします。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> python-dev</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> python-dev</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br></pre></td></tr></table></figure><p>ここをVSCodeで開き、Dev Containersの設定をしていきます。左下のリモートのボタンを押して <strong>Add Dev Container Configuration Files…</strong>　を選択します。</p><p>基本のPython3を選びます。公式を選んでおくのが吉。オプションでPythonバージョンを選びます。Apple Silliconは-busterついているのを選べって言ってますね。半年前にスクリーンショットを撮ったときは3.11までしかありませんでしたが、今は3.12も選べます。</p><img src="/images/20231212a/スクリーンショット_2023-04-17_20.53.40.png" alt="スクリーンショット_2023-04-17_20.53.40.png" width="787" height="226" loading="lazy"><p>Pythonのイメージをインストールすると、有名どころのツールはすでにインストール済みとなっていますこの辺りは特にインストールする必要はありません。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -1 /usr/local/py-utils/bin</span><br><span class="line">autopep8</span><br><span class="line">bandit</span><br><span class="line">bandit-baseline</span><br><span class="line">bandit-config-generator</span><br><span class="line">black</span><br><span class="line">blackd</span><br><span class="line">dmypy</span><br><span class="line">flake8</span><br><span class="line">mypy</span><br><span class="line">mypyc</span><br><span class="line">pipenv</span><br><span class="line">pipenv-resolver</span><br><span class="line">pipx</span><br><span class="line">py.test</span><br><span class="line">pycodestyle</span><br><span class="line">pydocstyle</span><br><span class="line">pylint</span><br><span class="line">pylint-config</span><br><span class="line">pyreverse</span><br><span class="line">pytest</span><br><span class="line">stubgen</span><br><span class="line">stubtest</span><br><span class="line">symilar</span><br><span class="line">virtualenv</span><br><span class="line">yapf</span><br><span class="line">yapf-diff</span><br></pre></td></tr></table></figure><p><a href="https://docs.astral.sh/ruff/">ruff</a>など、ここにないツールはあとから入れる必要があります。ただし、Dev Containers以外の環境、たとえばWindowsやmacOSネイティブ環境でも検証したりテストしたいのであれば、必要なツールをインストールするようにpyproject.tomlに書いておいて、別途インストールするようにした方が良いでしょう。バージョンを合わせたりもしやすいですし。</p><h1 id="パッケージの管理方法を考える"><a href="#パッケージの管理方法を考える" class="headerlink" title="パッケージの管理方法を考える"></a>パッケージの管理方法を考える</h1><p>Pythonで開発するときの開発環境作りをどうするか、というのは定期的に話題に上がるネタです。Python歴20年の経験からすると、最低限分離はするものの、必要以上の複雑な機構を持ち込まないのがコツだと考えています。特に経験が浅い人ほど、依存が複雑に絡まったツールを使うとトラブルシュートできません。情報が多く、なるべく公式に寄せる方がベストです。過去に2回ほどそういう記事を書きましたが、今でも変わりません。</p><ul><li><a href="https://qiita.com/shibukawa/items/0daab479a2fd2cb8a0e7">pyenvが必要かどうかフローチャート(2016年)</a></li><li><a href="https://future-architect.github.io/articles/20210611a/">サーバーアプリ開発環境(Python／FastAPI)(2021年)</a></li></ul><p>オプションがいくつか考えられます。が、ここではpoetryを使わずに、<code>pip isntall</code>がベストだと考えています。理由は長くなるので後述しますが、これを使うための追加のインストールは不要で、何らかの設定を入れずにVSCodeからも情報が取得できて良いことが多く、　Dev Containersを使わないローカル開発(.venv利用)とも操作が一致するからです。</p><h2 id="pip-install以外の方法を選ばない理由-読み飛ばしOK"><a href="#pip-install以外の方法を選ばない理由-読み飛ばしOK" class="headerlink" title="pip install以外の方法を選ばない理由(読み飛ばしOK)"></a><code>pip install</code>以外の方法を選ばない理由(読み飛ばしOK)</h2><p>標準のpipと、poetryで考えてみます。環境分離が2重にならずに、VSCodeからも設定いらずで参照できて、ワークフォルダを汚さなくて、普段のローカルと互換性のある都合の良い方法はありません。もちろん、VSCode参照をきちんと設定するとか、ワークフォルダのオプトアウトをきちんとするとか、ローカル開発ときちんと別のやり方を使い分けられるのであればどれもOKです。ですが、なるべく手間は減らしたいものです。</p><div class="scroll"><table><thead><tr><th align="left">方式</th><th align="left">環境分離</th><th align="left">VSCode参照</th><th align="left">インストール先</th><th align="left">ローカル互換</th></tr></thead><tbody><tr><td align="left">venv + pip</td><td align="left">2重</td><td align="left">OK</td><td align="left">$WORK&#x2F;.venv</td><td align="left">OK</td></tr><tr><td align="left">venv + poetry (デフォルト)</td><td align="left">2重</td><td align="left">NG</td><td align="left">$HOME&#x2F;.local&#x2F;share&#x2F;pypoetry</td><td align="left">OK</td></tr><tr><td align="left">venv + poetry (in-project true)</td><td align="left">2重</td><td align="left">OK</td><td align="left">$WORK&#x2F;.venv</td><td align="left">OK</td></tr><tr><td align="left">pip + <code>--user</code></td><td align="left">1重</td><td align="left">OK</td><td align="left">$HOME&#x2F;.local&#x2F;lib</td><td align="left">NG</td></tr><tr><td align="left">pip</td><td align="left">1重</td><td align="left">OK</td><td align="left">&#x2F;usr&#x2F;local&#x2F;lib (権限がない場合<code>--user</code>にフォールバック)</td><td align="left">NG(ローカルが.venvならOK）</td></tr><tr><td align="left">poetry (virtualenvs.create &#x3D; false)</td><td align="left">1重</td><td align="left">OK</td><td align="left">&#x2F;usr&#x2F;local&#x2F;lib</td><td align="left">NG</td></tr></tbody></table></div><ul><li>venvを利用するとDev Containersですでに環境分離がされているのに、2重に分離することになってしまいます。</li><li>VSCode参照NGというのはVSCodeの設定を修正しないとインストールしたパッケージが見えないということを意味しています。</li><li>インストール先は&#x2F;usr&#x2F;local&#x2F;libだとsudoが必要です。また、ワーク以下へのインストールだとホスト側のファイルシステムとのボリューム同期をしないような設定を<code>devcontainer.json</code>に入れないと、余計なファイルアクセスが発生します。</li><li>ローカル互換NGというのはローカルで実行するとプロジェクト間で共有する場所に入れてしまうので、通常はやるべきではない操作であることを意味しています。</li></ul><p>実は<code>pip install</code>はインストール先に書き込み権限がなければ、<code>--user</code>をつけたのと同じ動作にフォールバックします。そうすると、venvでpip利用の場合と同じコマンドが使えますし、追加の設定も不要でVSCodeからも読めるので、一番これがベストであると考えられます。もっとも、毎回「Defaulting to user installation because normal site-packages is not writeable」とお小言を言われますが、デメリットはそれぐらいです。</p><p>Poetryが–user相当のオプションを用意してくれれば良かったのですがね。と思ったら<a href="https://github.com/python-poetry/poetry/issues/1214#issuecomment-1397088866">ちょうどこのユースケースについて議論されていま</a>すね。みんな考えることは同じ。人類皆兄弟。</p><h2 id="pyproject-tomlを手書きする"><a href="#pyproject-tomlを手書きする" class="headerlink" title="pyproject.tomlを手書きする"></a>pyproject.tomlを手書きする</h2><p>初期のファイル作成と、パッケージの追加、パッケージ追加時のrequirements.txtの更新ぐらいの薄いツールがあれば便利だな、とも思うのですが、残念ながら今のところは見つけられませんでした。Python系のツールでも議論には上がっていますが、すぐに解決というわけにはいかなそうです。</p><ul><li><a href="https://discuss.python.org/t/manually-adding-dependencies-to-pyproject-toml/18345">https://discuss.python.org/t/manually-adding-dependencies-to-pyproject-toml/18345</a></li><li><a href="https://github.com/pypa/hatch/discussions/437">https://github.com/pypa/hatch/discussions/437</a></li></ul><p>そのため、手作業で作ってみることにします。</p><p><a href="https://marketplace.visualstudio.com/items?itemName=tamasfe.even-better-toml">Even Better TOML</a>といった拡張機能を入れると、JSON Schemaを使ってTOMLのバリデーションができます。これで多少は楽にpyproject.tomlが作成できます。インストールしてpyproject.tomlファイルを開いたら、右下のところからスキーマ選択を起動し、pyproject.jsonというのを選択します。これでOK。</p><img src="/images/20231212a/スクリーンショット_2023-11-21_20.56.27.png" alt="スクリーンショット_2023-11-21_20.56.27.png" width="932" height="323" loading="lazy"><p>大体、最小限だと内容的にはこんな感じかと思います。<a href="https://peps.python.org/pep-0621/">PEP-0621の定義</a>やら<a href="https://github.com/python-jsonschema/jsonschema/blob/main/pyproject.toml">もっと大きなサンプル</a>などもみつつ充実させていけば良いでしょう。</p><figure class="highlight toml"><figcaption><span>pyproject.toml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[project]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;sample&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;1.0&quot;</span></span><br><span class="line"><span class="attr">description</span> = <span class="string">&quot;hand written pyproject.toml sample&quot;</span></span><br><span class="line"><span class="attr">authors</span> = [</span><br><span class="line">    &#123;name=<span class="string">&quot;Yoshiki Shibukawa&quot;</span>&#125;,</span><br><span class="line">    &#123;email=<span class="string">&quot;yoshiki@shibu.jp&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="attr">license</span> = &#123;file=<span class="string">&quot;LICENSE&quot;</span>&#125;</span><br><span class="line"><span class="attr">readme</span> = <span class="string">&quot;README.md&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pip install .</span></span><br><span class="line"><span class="comment"># でインストールする利用パッケージ</span></span><br><span class="line"><span class="attr">dependencies</span> = [</span><br><span class="line">    <span class="string">&quot;django &gt;= 4.2.7, &lt; 5&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="section">[project.optional-dependencies]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pip install .[dev]</span></span><br><span class="line"><span class="comment"># でインストールする開発ツール類</span></span><br><span class="line"><span class="attr">dev</span> = [</span><br><span class="line">    <span class="string">&quot;ruff &gt;= 0.1.6, &lt; 1&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>devcontainer.jsonに以下のように書いておくと、起動のたびにパッケージを最新化してくれます。”postCreateCommand”を勧める記事なども見かけましたが、それだとイメージの再ビルドが必要になるので、こっちの方がよいかと思います。</p><figure class="highlight json"><figcaption><span>.devcontainer/devcontainer.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;postStartCommand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pip3 install --user .[dev]&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>アプリ開発で必要なライブラリを追加するときは、pyproject.tomlのproject&#x2F;dependenciesのリストに追加した後に、インストールしてlockファイル相当のrequirements.txtを作ります。このファイルはコンテナ作成やデプロイに使えます。このままだとdevセクションのものも入ってしまうのですが・・・このあたりもPythonツールチェーンが良くなって欲しいところの一つ。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip3 install --user .</span><br><span class="line">$ pip3 freeze --user &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>プロジェクトの雛形ができたら開発ツール類を整備します。必要な拡張、あとは設定などはdevcontainer.jsonに書いておくと環境を作った瞬間にチーム内で同じ設定を共有できます。</p><figure class="highlight json"><figcaption><span>.devcontainer/devcontainer.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;customizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vscode&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;ms-python.python&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;tamasfe.even-better-toml&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;oderwat.indent-rainbow&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;charliermarsh.ruff&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;[python]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;analysis.typeCheckingMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;strict&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;charliermarsh.ruff&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;source.fixAll&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;source.organizeImports&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="あえて別のプロジェクト管理ツールを使う"><a href="#あえて別のプロジェクト管理ツールを使う" class="headerlink" title="あえて別のプロジェクト管理ツールを使う"></a>あえて別のプロジェクト管理ツールを使う</h2><p>これまでの方法は全部手作りすることで、Docker&#x2F;Dev Containersによる環境分離のみでなるべくシンプルにする方法でした。</p><p>一方で、Poetryや、最近話題のryeなどを使えば、pyproject.tomlが作成されますし、実際にインストールされたバージョンをrequirements.txtのような形式で出力してくれます。前に触れたように、Dockerの環境分離とvenvの環境分離が2重でかかってしまって無駄かな、とは思いますが、SimpleよりもEasyを優先したいケースもあるでしょうし、作り込まれたEasyはそれほど悪くはない、と思っています。</p><p>ryeを使う場合はdevcontainer.jsonのpostCreateCommandに次のコマンドを入れておきます。これでコンテナビルド時にryeがインストールされます。</p><figure class="highlight json"><figcaption><span>.devcontainer/devcontainer.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;postCreateCommand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;curl -sSf https://rye-up.com/get | </span></span><br><span class="line"><span class="string">   RYE_INSTALL_OPTION=\&quot;--yes\&quot; bash &amp;&amp; echo &#x27;source \&quot;$HOME/.rye/env\&quot;&#x27; &gt;&gt;</span></span><br><span class="line"><span class="string">   ~/.bashrc&quot;</span></span><br></pre></td></tr></table></figure><p>別のプロジェクトツールはvenv環境を裏で自動で作りますが、このフォルダをどこに作るかは問題となります。ryeはワークフォルダ内に.vnevフォルダを作ります。これは作業場所ごとに独立しておくべきで、ホストとワークスペースで同期する必要がないフォルダです。ホストがmacやWindowsでゲストがLinuxのときに、Linuxバイナリをホスト側に戻す必要はないですからね。次のように、.venvを同期対象から外す設定を追加します。</p><figure class="highlight json"><figcaption><span>.devcontainer/devcontainer.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;target=$&#123;containerWorkspaceFolder&#125;/.venv,type=volume&quot;</span> <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>ここではryeを使いましたが、poetryなどでも同じように使えるでしょう。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>他の人に開発環境を気軽に配れますし、その開発環境も自体も簡単にリビルドして更新できるのがDev Containersです。Pythonを例に使い方を紹介しました。</p><p>歴史が長いPythonの場合、環境分離の方法がいくつかあり、どれを選ぶかのトレードオフがあります。本エントリーでは、Dev Containersを唯一の環境分離手段として使い、モジュールは<code>pip install --user</code>でインストールする方法と、環境分離が二重がけになってしまい複雑になってしまうが、便利なryeの設定方法を紹介しました。</p><p>pyproject.tomlを手作りするあたりはこれからツールの進歩があればだいぶマシになるかと思いますが<code>setup.py</code>を手書きしていたのと比べて別に悪化はしてないし許容範囲かな、と思っています。まあ他の言語と比べていまいち、というのはわかりますが。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20231206a/&quot;&gt;前回のエントリー&lt;/a&gt;では、Dev Containersの動作原理を理解したのでそれにあわせたPython環境を作っていきます。&lt;/p&gt;
&lt;h1 id=&quot;ベースの環境&quot;&gt;&lt;a href=&quot;#ベースの環境&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
    <category term="環境構築" scheme="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"/>
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="VSCode" scheme="https://future-architect.github.io/tags/VSCode/"/>
    
    <category term="Dev Containers" scheme="https://future-architect.github.io/tags/Dev-Containers/"/>
    
    <category term="rye" scheme="https://future-architect.github.io/tags/rye/"/>
    
  </entry>
  
  <entry>
    <title>Dev Containersの始め方(1) : 仕組み編</title>
    <link href="https://future-architect.github.io/articles/20231206a/"/>
    <id>https://future-architect.github.io/articles/20231206a/</id>
    <published>2023-12-05T15:00:00.000Z</published>
    <updated>2023-12-12T00:14:13.275Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20231206a/53296952672_95495d5f01_k.jpg" alt="53296952672_95495d5f01_k.jpg" width="1200" height="800" loading="lazy"><p>PyCon APAC 2023でDev Containersで発表してきました。写真はスタッフに撮っていただいた写真のアルバムから引用させていただきました。本エントリーではその発表の元ネタとして半年ぐらい前にいろいろ調べていた内容をお伝えします。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTwNT6bUGRiLwk2e8sgug_DQak4qUavSA5_XW32CrWKdJHyFVprWT9qosUJrtuRNItxAF94QHGVSv_i/embed?start=false&loop=false&delayms=3000" frameborder="0" width="95%" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p>個人的には、バイナリ互換とか仮想マシンってあんまり興味なくて、多くの人が努力して作り上げてきたソースコード互換のアプリでWindows&#x2F;macOS&#x2F;Linuxでネイティブで動く、という世界観が好きだったりするのですが、仕事柄、開発環境をまるっと配るというのも調べておきたいな、ということで、「俺はやらないぞ」という気持ちでいたDev Containersに触れてみて、仕組みとか使い方とか調べてみたのでそれのまとめです。</p><h1 id="普通のDockerとも違うDev-Containersの仕組み"><a href="#普通のDockerとも違うDev-Containersの仕組み" class="headerlink" title="普通のDockerとも違うDev Containersの仕組み"></a>普通のDockerとも違うDev Containersの仕組み</h1><p>devcontainerは<a href="https://code.visualstudio.com/docs/devcontainers/containers">VSCodeの持つ仕組み</a>です。この図がよく引用されていますね。ユーザーが操作しているOS上には、ソースコードと、VSCodeのみがいます。git cloneしてきてVSCodeでそのプロジェクトを開くと、<code>.devcontainer</code>というフォルダがあり、その設定を元に、VSCodeがコンテナ内部に開発環境を作ってくれます。</p><img src="/images/20231206a/image.png" alt="image.png" width="968" height="402" loading="lazy"><p>リモートで開発というと、VDI (Virtual Desktop Infrastructure)というものもあります。Amazon Workspacesとか、Azure Virtual Desktopとか、Google Virtual Desktopsとかですね。Webサービスを開発するとして、これらの代表的なVDI環境と比較するとこんな感じかと思います。</p><div class="scroll"><table><thead><tr><th align="center"></th><th align="center">通常</th><th align="center">Virtual Desktop Infrastructure</th><th align="center">Dev Containers</th></tr></thead><tbody><tr><td align="center">エディタ&#x2F;IDE</td><td align="center">ローカル</td><td align="center">仮想PC内部(RDP)</td><td align="center">ローカル</td></tr><tr><td align="center">検証用ブラウザ</td><td align="center">ローカル</td><td align="center">仮想PC内部(RDP)</td><td align="center">ローカル</td></tr><tr><td align="center">サーバー</td><td align="center">ローカル</td><td align="center">仮想PC内部</td><td align="center">Docker内部</td></tr><tr><td align="center">ソースコード</td><td align="center">ローカル</td><td align="center">仮想PC内部</td><td align="center">ローカル→Dockerにコピー</td></tr></tbody></table></div><p>VDIでもGitHub Codespacesなんかだとエディタはローカルのブラウザで動いたり、検証用ブラウザはポートフォワードでローカルのブラウザが使えたり、というのはありDev Containersとだいぶ近いのです。</p><p>ソースコードなどもローカル側が主で、そのコピーがDockerにコピーされます。実際にエディタが編集するのはコンテナ内部にコピーされたファイルだったりする（変更はローカルに同期される）のですが、基本的に通常のローカル開発と感覚はほとんど変わりません。⌘ + JとかCtrl + Jでターミナルを開くと、Docker内部に繋がっている以外は操作感覚は変わらないです。</p><p>いくつかネットで記事を見ると、いろいろコンテナを作り込んでいる記事とかも見かけるのですが、さぞ、特別なコンテナなんだろう、と<a href="https://github.com/microsoft/vscode-dev-containers/tree/main/containers">いくつかMicrosoft謹製のDev Containers用のコンテナ定義</a>を辿ってみたのですが、ユーザーを作ったり、するぐらいで、一見すると特別なことをしているようには見えません。<a href="https://github.com/microsoft/vscode-dev-containers/blob/main/containers/debian/.devcontainer/library-scripts/common-debian.sh#L77">エディタ類とかjqとかはデフォルトで入れてくれて、便利です</a>。</p><p>実は、Dockerの外でいろいろ作り込まれているのがこのDev Containersです。</p><p>Dockerのイメージのアーキテクチャとしては1つの親を持って、それに必要なファイルを追加していく作り方をします。Javaのイメージ、Pythonのイメージなど用途ごとにベースイメージを選んでいきますが、「JavaとPython両方持ったイメージが欲しい」と思うと急に便利なレールから外れます。</p><p>Dev Containersは1つベースを選ぶというのは変わらないのですが「Feature」を選んでトッピングしていきます。そうすると、それらのツール群をインストールするDockerfileが内部的に作られ、ビルドされて使えるようになります。</p><img src="/images/20231206a/devcontainer2.png" alt="devcontainer2.png" width="571" height="311" loading="lazy"><p>VSCodeのサーバー側の実装やら、拡張機能はvscodeという名前のボリュームの中に置かれて実行時にマウントしています。Dockerをいじくるソケットも内部にマウントされていて、中から結構やりたい放題できるようになっており、「完璧なイメージファイルを起動するだけ」ではなく、「必要に応じてイメージを改変して再ビルドもするし、Dockerをこき使う」感じの実装になっています。いつも引用される図からは隠されていますが、おとなしく見えて結構獰猛な作りです。もちろん、自分でイメージを作り切ってそれを利用することもできますが、この「イメージ作成機能をも内包しているツール」と考えるべきです。</p><h1 id="Dev-Containers環境の作り方・始め方"><a href="#Dev-Containers環境の作り方・始め方" class="headerlink" title="Dev Containers環境の作り方・始め方"></a>Dev Containers環境の作り方・始め方</h1><p>既存のDockerとかコンテナの知識がなまじあると、「必要なツールがそろったDockerイメージをまず作らないと」という考えになってしまい身構えがちですが（僕がそう）、Featureをバシバシ足していけば良いのだ、と思えば気軽なものです。最初からJavaとかPythonとか入っているイメージもありますが、ベースのOSイメージ（Debian, Ubuntu, Alpine)を選んで、Featureを足していくのが良さそうです。</p><p>まずは、Dev Containerの拡張を入れてから、 <strong>Add Dev Container Configuration Files…</strong> メニューを選びます。これを選ぶと、次にベースイメージとFeatureを選びます。バージョン選択などのオプションもあります。</p><img src="/images/20231206a/スクリーンショット_2023-04-16_22.45.58.png" alt="スクリーンショット_2023-04-16_22.45.58.png" width="1089" height="516" loading="lazy"><p>なお、一番目立つ <strong>New Dev Container…</strong> はイメージを作成して即座に起動するのですが、そのイメージの設定などは残りません。VSCodeの履歴にはあるのでそこから再度立ち上げ直したりもできますし、おそらくDockerの操作でイメージとしてコンテナレジストリに送ることはできて、それを起動しつつVSCodeからアタッチ、という運用は可能だと思われますが、あとでパラメータを足したり、Featureを追加したり削除したりといったことがやりにくいので、レシピが手元に残る方を選ぶ方が良いです。</p><p>ぽちぽちやると、<code>.devcontainer</code>フォルダに設定ファイルが出力され、コンテナのビルドが裏で実行され、完了するとVSCodeに表示されます。</p><p>なお、いくつかエラーに遭遇してビルドができないことがありました。</p><ul><li>Javaのオプションで17を入れると選択すると「見つからない」というエラー</li><li>FeatureでJavaを選ぶとプロキシを超えられないエラー(証明書を入れる必要がありそう)</li><li>GraalVMを選択すると、M2のMacだと「Aarch64には非対応」というエラー</li></ul><p>Dev Container関連のブログ記事とか見ると、アプリケーションで使うライブラリとかをイメージに焼き込む（Dockerfileにパッケージ一覧のファイルをADDして、RUNでインストール実行）している例もありますが、ライブラリは頻繁に追加されたりバージョンが更新されることを考えると、イメージの中には置かない方が良いでしょう。その度に再ビルドは重いですし、コンテナのビルドをしないとバージョン検証できないのは不便でしかないと思います。</p><h1 id="２回目以降"><a href="#２回目以降" class="headerlink" title="２回目以降"></a>２回目以降</h1><p>2回目以降は、一度起動したことがあるならWelcomeページで<code>[Dev Container]</code>と書いてあるプロジェクトを選択すると、Dockerコンテナが起動し、そこからの編集が開始できます。</p><img src="/images/20231206a/スクリーンショット_2023-04-17_0.15.56.png" alt="スクリーンショット_2023-04-17_0.15.56.png" width="926" height="380" loading="lazy"><p><code>.devcontainer</code>があるプロジェクトを開くと、「コンテナの中で開き直しますか？」とダイアログが出ますし、左下の緑のDev Containerアイコン<strong>Reopen in Container</strong>メニューを選んでも開けます。</p><img src="/images/20231206a/スクリーンショット_2023-04-17_0.18.00.png" alt="スクリーンショット_2023-04-17_0.18.00.png" width="564" height="149" loading="lazy"><h1 id="Dev-Containersがやってくれること・やってくれないこと"><a href="#Dev-Containersがやってくれること・やってくれないこと" class="headerlink" title="Dev Containersがやってくれること・やってくれないこと"></a>Dev Containersがやってくれること・やってくれないこと</h1><p>通常のDockerはいろいろ明示的に書かなければならないのですが、Dev Containersでは少し便利におせっかいを焼いてくれます。</p><h2 id="OK-ワークスペースのマウント"><a href="#OK-ワークスペースのマウント" class="headerlink" title="OK: ワークスペースのマウント"></a>OK: ワークスペースのマウント</h2><p>まず、Dockerのマウントとかボリューム設定をせずとも、最初にローカルで開いた（Reopenする前の)フォルダを、ワークスペースとしてマウントしてくれます。プロジェクトのフォルダ（<code>.devcontainer</code>の親フォルダ)の名前が<code>awesomeproject</code>だったとすると、<code>/workspaces/awesomeproject</code>というフォルダがコンテナ内に作られ、ローカルフォルダと同期されます。マウント設定をぽちぽちやる必要はありません。ただし、ワークフォルダに大量に自作でないファイルが作られる<code>node_modules</code>だと、ローカルとの同期が入るとかなり速度が遅くなります。これをオプトアウトする必要があります。これについてはフロントエンドの環境構築の方でまた紹介します。</p><h2 id="OK-クレデンシャルのマウント"><a href="#OK-クレデンシャルのマウント" class="headerlink" title="OK: クレデンシャルのマウント"></a>OK: クレデンシャルのマウント</h2><p>Dev Containersの設定を開発環境としてチームに配るケースやリポジトリにアップロードすることを考えると、クレデンシャルなどの情報が入るのは望ましくないことがわかります。幸い、Dev Containersはいくつかの開発者の個人設定をマウントして起動時に持ってきてくれます。イメージの内部には書き込まれないので、イメージを配布しても安全になります。ソースコードの管理はGitHubやらGitLabを使うのがだいたいエンタープライズ開発でも一般的になっているので（少なくとも僕が関わっている案件は全部）、ここが自動的に行われるとチームでの開発がスムーズです。</p><ul><li>Gitユーザーのメールアドレス: .gitconfig</li><li>Dockerのクレデンシャル: .docker&#x2F;setting.json</li></ul><p>SSHの鍵は直接インポートはしませんが、<a href="https://code.visualstudio.com/remote/advancedcontainers/sharing-git-credentials">SSH通信はホスト環境のssh-agent経由で通信しようとする</a>ので、ホスト側のエージェントに<code>ssh-add</code>で鍵を登録するだけで大丈夫です。コンテナの中に鍵を持ち込むことは不要です。</p><h2 id="NG-プロキシ設定"><a href="#NG-プロキシ設定" class="headerlink" title="NG: プロキシ設定"></a>NG: プロキシ設定</h2><p>ホストのプロキシ設定は取り込んでくれないので、もし会社にプロキシがある方は以下の設定を<code>.devcontainer/devcontainer.json</code>に入れておきましょう。ホストOSの環境変数として<code>HTTPS_PROXY</code>が定義されている想定です。認証情報をつけても大丈夫です。</p><figure class="highlight json"><figcaption><span>.devcontainer/devcontainer.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="attr">&quot;remoteEnv&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;HTTPS_PROXY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;localEnv:HTTPS_PROXY&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;https_proxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;localEnv:HTTPS_PROXY&#125;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="OK-VSCode設定"><a href="#OK-VSCode設定" class="headerlink" title="OK: VSCode設定"></a>OK: VSCode設定</h2><p><code>.devcontainer/devcontainer.json</code>にVSCodeに入れたい設定を書けます。インストールしたい拡張と、使いたい設定ですね。</p><figure class="highlight json"><figcaption><span>.devcontainer/devcontainer.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;customizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vscode&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;oderwat.indent-rainbow&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;streetsidesoftware.code-spell-checker&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;python.formatting.provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;autopep8&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>いつも使っている通常の<code>.vscode/extensions.json</code>と<code>.vscode/settings.json</code>ですが、拡張機能の推奨の方は読まれません。設定は使われ、<code>devcontainer.json</code>よりも優先されます。Dev Containersを使うと、設定がUser&#x2F;Remote&#x2F;Workspaceの3階層になりますが、<code>devcontainer.json</code>はRemoteに設定され、<code>.vscode/settings.json</code>はWorkspaceに反映されます。</p><h2 id="OK-作業ユーザー"><a href="#OK-作業ユーザー" class="headerlink" title="OK: 作業ユーザー"></a>OK: 作業ユーザー</h2><p><code>vscode</code>ユーザーも作ってくれます。Dockerコンテナでは自分以外はいない環境ではあるのですが、デフォルトではrootユーザーになってしまいます。よく使うベースイメージでは<code>vscode</code>というrootではないユーザーがデフォルトでいます。どのユーザーで起動するかは<code>devcontainer.json</code>でも上書き設定できます。</p><h2 id="OK-ポート設定"><a href="#OK-ポート設定" class="headerlink" title="OK: ポート設定"></a>OK: ポート設定</h2><p><code>devcontainer.json</code>には、フォワードするポート設定の設定があります。テストサーバーを起動したときにポートを開くと、ホストのブラウザでテストできたりするのですが、実はこのポートは設定不要です。新しいサーバーが起動すると、VSCode側で「フォワードする？」って聞いてくれます。便利ですね。</p><h2 id="OK-or-NG-GUI"><a href="#OK-or-NG-GUI" class="headerlink" title="OK or NG: GUI"></a>OK or NG: GUI</h2><p>あとは試してはないのですが、Waylandのソケットも自動のフォワードしてくれるらしいので、GUIアプリケーションを起動することも可能なようです。WindowsであればWLSgでWaylandを表示してくれる機能がデフォルトで入っているため、設定いらずで表示できるかもしれません。macOSの場合はXサーバーを入れる必要があります。</p><ul><li><a href="https://blog.mohyo.net/2022/02/11591/">G2’s Forest: WSLg を使って Docker 上で GUI アプリを動かす（GPUサポート付き）</a></li><li><a href="https://future-architect.github.io/articles/20230823a/">Futureテックブログ: Playwrightの環境構築（VSCode Dev Container編）</a></li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Dev Containersの仕組みをいろいろと調べて学びました。単にDockerコンテナの中で開発するよ、というだけでなく、その外でVSCodeがいろいろと気を利かせてくれて、認証情報をホスト側と共有したり、開発サーバーが起動したらホストのブラウザからアクセスできるようにポートを開いたりしてくれることがわかりました。</p><p>Dockerのコンテナは、UNIX的な思想を体現したもので、1アプリだけが動くミニOS環境を再現したもので、外と独立した環境が作れるのは良いのですが、プリミティブすぎる感じがありました。カスタマイズポイントもコンテナによって違い、どの環境変数を設定するか、ファイルを<code>/docker-entrypoint-initdb.d</code>にマウントするとかとか、設定ポイントやインタフェースが「契約」として定義されていません。TypeDockerが欲しいな、と常々思っていました。</p><p>一方で、Dev Containersは、カスタムポイントがウィザード化されたFeature機能でトッピングしたり、クレデンシャルをイメージに焼き込まない形で取り入れる機構が用意されていたり、自動でポートを開いたり、少し文明が進んだ感じがあります。</p><p>なお、本エントリーを書くにあたって、 <a href="https://twitter.com/lambda_sakura">@lambda_sakura</a> さん、 <a href="https://twitter.com/ryushi">@ryushi</a> さん、 <a href="https://twitter.com/tk0miya">@tk0miya</a> さんにアドバイスをいろいろ教えてもらいました。ありがとうございます。</p><p><a href="/articles/20231212a/">次回</a>はPythonの環境を作っていきます。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20231206a/53296952672_95495d5f01_k.jpg&quot; alt=&quot;53296952672_95495d5f01_k.jpg&quot; width=&quot;1200&quot; height=&quot;800&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="PyCon" scheme="https://future-architect.github.io/tags/PyCon/"/>
    
    <category term="VSCode" scheme="https://future-architect.github.io/tags/VSCode/"/>
    
    <category term="PyCon APAC 2023" scheme="https://future-architect.github.io/tags/PyCon-APAC-2023/"/>
    
    <category term="Dev Containers" scheme="https://future-architect.github.io/tags/Dev-Containers/"/>
    
  </entry>
  
  <entry>
    <title>Qiita Advent Calendar 2023 に参加します</title>
    <link href="https://future-architect.github.io/articles/20231130b/"/>
    <id>https://future-architect.github.io/articles/20231130b/</id>
    <published>2023-11-29T15:00:01.000Z</published>
    <updated>2023-12-05T23:57:39.168Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20231130b/IMG_0698.JPG" alt="" width="1181" height="1181" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。技術ブログ運営の伊藤です。</p><p>11月も終わりに差し掛かり、毎年後１ヶ月あるにも関わらず年末に急かされている気持ちになります。そんな12月ですが、エンジニアとしてはもはや風物詩となっているQiita Advent Calendarにフューチャーは今年も参加します。本記事ではこれまでの振り返りと今年の記事内容について触れます。</p><h2 id="アドベントカレンダーとは"><a href="#アドベントカレンダーとは" class="headerlink" title="アドベントカレンダーとは"></a>アドベントカレンダーとは</h2><p>アドベントカレンダーは以下のように<a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC">Wikipedia</a>には書かれています。</p><blockquote><p>アドベントカレンダー (Advent calendar) は、クリスマスまでの期間に日数を数えるために使用されるカレンダーである。待降節の期間（アドベント、イエス・キリストの降誕を待ち望む期間）に窓を毎日ひとつずつ開けていくカレンダーである。すべての窓を開け終わると迎えたことになる。</p></blockquote><p>このように、クリスマス(25日)を迎えるまでに1日1日数えるカレンダーですが、エンジニアの業界では毎年これになぞらえて、リレー形式で記事を公開していくイベントとなっています。<br>このうち<a href="https://qiita.com/advent-calendar/2023">Qiita Advent Calendar</a>については2015年からフューチャーが参加しているイベントであり、今年も社内で参加者を募りました。</p><h2 id="2023年のカレンダー"><a href="#2023年のカレンダー" class="headerlink" title="2023年のカレンダー"></a>2023年のカレンダー</h2><p><a href="https://qiita.com/advent-calendar/2023">2023年</a>は以下の参加状況になっています。</p><img src="/images/20231130b/スクリーンショット_2023-11-29_15.58.00.png" alt="スクリーンショット_2023-11-29_15.58.00.png" width="1071" height="759" loading="lazy"><p>参加者については全社から以下のような方々が集まりました。</p><ul><li>数年来毎年参加し続けている方</li><li>アドベントカレンダーを機にブログを投稿する方</li><li>今回は現在新人研修を終えてOJT期間に入ったフレッシュな新卒</li><li>他薦によって記事を執筆する方</li></ul><p>例年のアドベントカレンダーから比べると、これまで技術ブログに投稿したことのない方も多くいます。そのため、普段技術ブログでは見れないような内容も見ることができるかもしれません。</p><p>また、シリーズ1が無事全て埋まったので、シリーズ2も開けております。こちらはシリーズ1で投稿したけどまだまだ書き足りない、シリーズ1の参加を逃してしまったけど投稿したい、といった方が参加しております。シリーズ１から含めると３本投稿する予定の方もいたり、こちらもぜひご覧になってください。<br>どちらのシリーズについても本記事投稿時点ではネタが定まっていない方がいますが、当日に向けて鋭意執筆中ですので、公開当日をお待ちください。</p><h2 id="発表テーマについて"><a href="#発表テーマについて" class="headerlink" title="発表テーマについて"></a>発表テーマについて</h2><p>例年の記事で掲載している内容を改めて引用します。</p><blockquote><p>例年と同じく、IT技術であること以外はフリーテーマです。</p></blockquote><blockquote><p>ポリシーとしては基本的にはQiitaそのものに投稿していただくスタイルですが（順位も少し気にしています）、Qiitaの投稿規約に沿わない記事（エッセー過ぎるもの、プログラミングに関係ないもの）は技術ブログ側に投稿することもあります。このあたりの決めは各人にお願いしています。<br>その他、個人ブログへのリンクは非推奨で基本的にはNGとアナウンスしています。</p></blockquote><p>記事投稿については個人が気になる場合は内部で確認するなどしますが、基本はガイドラインや倫理的に反しない内容で投稿していただくようお願いしております。また、個人ブログへのリンクは原則として当社のアドベントカレンダーではNGとしているので、参加される方は注意してください。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>エンジニア業界、年末の大きなイベントになっており、当社に関わらず様々なところで外部発信が溢れて色々な記事を読むことが楽しい時期でもあるのがこのアドベントカレンダーです。<br>参加者一丸で盛り上げるので、ぜひご一読いただければと思います！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20231130b/IMG_0698.JPG&quot; alt=&quot;&quot; width=&quot;1181&quot; height=&quot;1181&quot; loading=&quot;lazy&quot;&gt;


&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="アドベントカレンダー" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC/"/>
    
    <category term="アドベントカレンダー2023" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC2023/"/>
    
  </entry>
  
  <entry>
    <title>Next.jsのServer Actionsは、サーバー側のバリデーションは不要なのか？</title>
    <link href="https://future-architect.github.io/articles/20231130a/"/>
    <id>https://future-architect.github.io/articles/20231130a/</id>
    <published>2023-11-29T15:00:00.000Z</published>
    <updated>2023-11-30T05:31:00.225Z</updated>
    
    <content type="html"><![CDATA[<p>Next.jsの新機能でTwitter(X)上でも少しバズったのがServer Actionsです。クライアントコンポーネント上にサーバー上で行うロジックを直接書き込むことが可能です。しかし、今までサーバーAPIを実装したことがあるのであれば、サーバー上のロジックであれば何かしらの認証のチェックやらCSRF対策などが必要なのではないか？という疑問を持つはずです。公式ドキュメントを見ても、ブログなどを検索してもそのあたりの話が出てこなかったので、少し動かしてみて検証してみました。</p><h1 id="Server-Actionsとは"><a href="#Server-Actionsとは" class="headerlink" title="Server Actionsとは"></a>Server Actionsとは</h1><p><a href="https://nextjs.org/docs/app/api-reference/functions/server-actions">Server Actions</a>は<code>&lt;form&gt;</code>タグの<code>action</code>に設定する特殊なイベントハンドラです。2種類の書き方があります。1つはサーバーコンポーネントの定義の中に書いてしまう方法です。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;use server&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// FormDataを受け取るasync関数を定義すると、これがServer Actionsになる</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">onAction</span>(<span class="params">formData: FormData</span>) &#123;</span><br><span class="line">    <span class="string">&quot;use server&quot;</span></span><br><span class="line">    <span class="comment">// ここのコードはサーバーの中で実行される</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* Server Actionsの関数は*/&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;onAction&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>実行<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もう1つは関数だけを作成する方法です。このファイルだけ<code>&quot;use server&quot;</code>がついていますが、この関数はクライアントコンポーネントでインポートして利用できます。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;use server&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">onAction</span>(<span class="params">formData: FormData</span>) &#123;</span><br><span class="line">  <span class="comment">// ここのコードはサーバーの中で実行される</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常、サーバー側でロジックを動かす場合、ウェブサーバーのルーターにエンドポイント（ハンドラ）を追加し、レスポンスを受け取ってパースしてそれを使って動かすといったボイラープレートを実装する必要があります。外部システムからのリクエストであるため、CSRFトークンをフォームに設定したり、バリデーションなども実装する必要があります。ですが、Server Actionsではエンドポイントを追加したりといった手間はありません。</p><h1 id="どのような通信が起きているのか確認する"><a href="#どのような通信が起きているのか確認する" class="headerlink" title="どのような通信が起きているのか確認する"></a>どのような通信が起きているのか確認する</h1><p>実際にどのような通信が起きているのか見てみましょう。通常のフォーム送信と比較するために2つフォームを作成しています。</p><figure class="highlight tsx"><figcaption><span>src/app/page.tsx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">onAction</span>(<span class="params">formData: FormData</span>) &#123;</span><br><span class="line">    <span class="string">&quot;use server&quot;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> formData.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;formData.get(key)&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/*Server Actions*/&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;onAction&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;name&quot;</span>&gt;</span>name: <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;email&quot;</span>&gt;</span>email: <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Server Action<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/*通常のPOST*/&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/api/action&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;name&quot;</span>&gt;</span>name: <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;email&quot;</span>&gt;</span>email: <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>/api/action<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常のPOST処理ではエンドポイントが必要になるため、これも実装しておきます。</p><figure class="highlight ts"><figcaption><span>src/app/api/action/route.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">POST</span>(<span class="params">req: Request</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">await</span> req.<span class="title function_">formData</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> formData.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;formData.get(key)&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&#x27;ok&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>まず通常の方を見てみると、フォームのnameがキーとして利用されており、素直なフォームデータが送られています。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: しぶかわ</span><br><span class="line">email: shibukawa@example.com</span><br></pre></td></tr></table></figure><p>次にServer Actionsを見てみます。</p><img src="/images/20231130a/image.png" alt="image.png" width="488" height="117" loading="lazy"><p>サーバー側のハンドラで受け取ったコンテンツは次の通りで、$ACTION_IDなる項目が増えています。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ACTION_ID_0826d283a8eec2e3e98a3ef9e3e4269aca493681: </span><br><span class="line">name: しぶかわ</span><br><span class="line">email: shbiukawa@example.com</span><br></pre></td></tr></table></figure><p>しかし、開発者ツールで見ると、キーの名前などが改変されていたり、ハンドラで受け取っていない値なども入っていますね。Next.jsのサーバー側のコードが、このあたりを成型してからハンドラを呼んでいるようです。</p><img src="/images/20231130a/image_2.png" alt="image.png" width="459" height="159" loading="lazy"><p>まず、送り先ですが表示しているページと同じURLにPOSTで送っています。ちょっと変わったところとしては、いくつか<code>Next-</code>がつくヘッダーフィールドを送っています。</p><img src="/images/20231130a/image_3.png" alt="image.png" width="478" height="130" loading="lazy"><p>Next-Actionの方はリロードしても値は変わらないため、Server Actionsのハンドラの識別子なのではないかと思います。別パスに同じ内容で作成しても別のIDになりました。よく見ると、Next-Actionヘッダーフィールドの値と、$ACTION_IDは同じですね。いろいろついていますが、curlで次のようなリクエストを送ったところ、外からもServer Actionsのハンドラを起動できました。CSRFトークンのようなものはなく、わかってしまえば外からリクエストが投げられてしまうというのは、パブリックに公開するAPIの場合はちょっと警戒しておいた方が良さそうですね。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -F <span class="string">&#x27;1_$ACTION_ID_0826d283a8eec2e3e98a3ef9e3e4269aca493681=&#x27;</span></span><br><span class="line">  -F <span class="string">&#x27;1_name=shibukawa&#x27;</span> -F <span class="string">&#x27;1_email=shibukawa@example.com&#x27;</span></span><br><span class="line">  -F <span class="string">&#x27;0=[&quot;$K1&quot;]&#x27;</span></span><br><span class="line">  -H <span class="string">&#x27;Next-Action: 0826d283a8eec2e3e98a3ef9e3e4269aca493681&#x27;</span></span><br><span class="line">  http://localhost:3000/</span><br></pre></td></tr></table></figure><p><a href="https://nextjs.org/docs/app/building-your-application/data-fetching/forms-and-mutations#reading-cookies">クッキーの認証情報を取得する方法</a>もサンプルにありますが、ヘッダー値も取得できます。いきなりSQLを呼ぶとか話題になっていますが、セキュリティの防護はいつも通り行う必要がありそうです。次のコードはヘッダーとクッキーをすべてダンプしています。必要な情報を取得してリクエスト元の認証や認可の検証をしたり、入力情報のバリデーションは行いましょう。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">onAction</span>(<span class="params">formData: FormData</span>) &#123;</span><br><span class="line">  <span class="string">&quot;use server&quot;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> <span class="title function_">headers</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`header: <span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> cookie <span class="keyword">of</span> <span class="title function_">cookies</span>().<span class="title function_">getAll</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`cookie: <span class="subst">$&#123;cookie.name&#125;</span>: <span class="subst">$&#123;cookie.value&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">cookies</span>().<span class="title function_">set</span>(<span class="string">&quot;sample&quot;</span>, <span class="string">&quot;test&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>お客さんから教えてもらったのですが、React-Hook-Formにはzodを使って検証できるアダプターがあるらしいので、これを使えばクライアントのフォーム検証とサーバーの検証を同じzodのモデルを使ってできそうですね。</p><ul><li>React-Hook-Formの3rd partyへのアダプタ集: <a href="https://www.npmjs.com/package/@hookform/resolvers">https://www.npmjs.com/package/@hookform/resolvers</a></li><li>React-Hook-Form公式からリンクされているサイト: <a href="https://ui.shadcn.com/docs/components/form">https://ui.shadcn.com/docs/components/form</a></li></ul><p>おまけで、<a href="https://nextjs.org/docs/app/api-reference/functions/server-actions#binding-arguments">binding arguments</a>の仕組みを使ったら簡単にCSRFトークンの実装ができるかも試してみましたが簡単にはできませんでした。厳密にやるなら、クライアントコンポーネントにしつつ公開鍵も渡しつつ、それで署名して、サーバー側で秘密鍵で検証とかでしょうか。結構大がかりになってしまいますが。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Server Actionsの実態としては、ちょっとキー名が改変されたリクエストを受け取るハンドラが生えて、そこに対するリクエストを投げるような動きをしていることが分かりました。</p><p>そのあたりの実装の手間が省けるのは便利ではありますが、外からリクエストが通ってしまうため、悪意のあるクライアントからのリクエストをチェックしてサニタイズするというロジックは別途必要なんだろうな、と思います。Next.jsのドキュメントに書いてあることとずれてしまいますが・・・</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Next.jsの新機能でTwitter(X)上でも少しバズったのがServer</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Web" scheme="https://future-architect.github.io/tags/Web/"/>
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
    <category term="Next.js" scheme="https://future-architect.github.io/tags/Next-js/"/>
    
  </entry>
  
  <entry>
    <title>MegaLinterを使ってみる</title>
    <link href="https://future-architect.github.io/articles/20231129a/"/>
    <id>https://future-architect.github.io/articles/20231129a/</id>
    <published>2023-11-28T15:00:00.000Z</published>
    <updated>2023-11-29T00:37:24.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、宮永 ( <a href="https://x.com/orangekame3">@orangekame3</a> ) と申します。</p><p>現在は大阪大学で研究員をしておりフューチャー社員ではないですが、外部寄稿という形で記事を執筆しました。</p><p>今後も機会があったら寄稿させて頂きますのでよろしくお願いいたします。</p><hr><p><a href="https://megalinter.io/latest/">MegaLinter</a>を最近個人開発のリポジトリに導入してみたので概要や使い方、所感などを記事にまとめました。<br>とても便利なツールなので本記事を機に利用してみてください。</p><h1 id="MegaLinterとは"><a href="#MegaLinterとは" class="headerlink" title="MegaLinterとは"></a>MegaLinterとは</h1><p>MegaLinterはdockerイメージをベースに各種リンターやフォーマッタを各リポジトリに導入できるOSSツールです。ローカルでも利用できますし、dockerイメージが用意されているため、各種CIサービスでも簡単に導入できます。</p><p>以下MegaLinterのHPからの引用です。</p><blockquote><p>MegaLinter is an Open-Source tool for CI&#x2F;CD workflows that analyzes the consistency of your code, IAC, configuration, and scripts in your repository sources, to ensure all your projects sources are clean and formatted whatever IDE&#x2F;toolbox is used by their developers, powered by OX Security.<br>Supporting 55 languages, 24 formats, 20 tooling formats and ready to use out of the box, as a GitHub action or any CI system highly configurable and free for all uses.</p></blockquote><p>55言語というのは55個のLinterツールが用意されている。ということみたいです。例えばGo言語であれば<code>golangci-lint</code>と<code>revive</code>がサポートされており、これを2つ分とカウントしています。他の言語に関しても1言語1ツールというわけではなく、かなり広範にサポートしているため、普通に利用する分にはMegaLinter一つ入れておけばリンターやフォーマッタはカバーできそうです。</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>基本的なフローは下図のようにコミットがある度にLinterが走り、各種レポートが作成されるというものです。</p><div align="center">▼MegaLinterの基本的なフロー<img src="/images/20231129a/属性.png" alt="属性" width="1200" height="621" loading="lazy"></div><p>レポートの形式は豊富で、Pull Requestにコメントする方式やEmailに配信する方法などが用意されています。</p><p>多くの場合はPull Requestsにコメントする方法を採用するのではないかと思います。</p><div align="center">▼Pull Requestにコメントする例<img src="/images/20231129a/属性_2.png" alt="属性" width="825" height="499" loading="lazy"></div><p>フォーマッタによってはオートフォーマットが有効なものもあるため、非常に便利です。<br>「Linterを一箇所に集約して管理したい」「メジャーどころのLinterをとりあえず揃えたい」「LinterをCIに簡単に導入したい」という方にはおすすめのツールです。</p><p>一方で、「CIにかかる時間を最適化したい」「MegaLinterにないLinterを使いたい」という方には向かないかもしれないです。</p><h2 id="実際に使ってみた"><a href="#実際に使ってみた" class="headerlink" title="実際に使ってみた"></a>実際に使ってみた</h2><p>サンプル用に”Hello, 世界”と標準出力するGoのファイルを用意します。</p><p>コミットID：<a href="https://github.com/orangekame3/megalinter-sample/commit/0af6a42e85460282b43bcbac980ea45c8cc4d79e">0af6a42</a>(<a href="https://github.com/orangekame3/megalinter-sample">こちらのリポジトリ</a>にサンプルを用意したので参考にしてください)</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello, 世界&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MegaLinterにはインタラクティブに設定ファイルを生成するコマンドが用意されているので、そちらを利用します。</p><p>以下コマンドをプロジェクト直下で実行してください。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p><a href="https://nodejs.org/en/">node.js</a>はインストールされているものとします。</p></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx mega-linter-runner --install</span><br></pre></td></tr></table></figure><p>コマンドを実行すると</p><p>下図のようなプロンプトが立ち上がるので選択をしていきます。<br><img src="/images/20231129a/image.png" alt="image.png" width="1153" height="356" loading="lazy"></p><p>今回はGoのプロジェクトを選択しています。自分の環境に合わせて選択してください。</p><p>すべて選択し終えると設定ファイルが自動生成されます。<br>以下、この断面のコミットIとディレクトリ構成です。<br>コミットID：<a href="https://github.com/orangekame3/megalinter-sample/commit/98c3d85d333584f067f3ed47da3f97e51eaf0eeb">98c3d85</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .github</span><br><span class="line">│   └── workflows</span><br><span class="line">│       └── mega-linter.yml</span><br><span class="line">├── .gitignore</span><br><span class="line">├── .jscpd.json</span><br><span class="line">├── .mega-linter.yml</span><br><span class="line">├── README.md</span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure><p>主に編集する設定ファイルは<code>.mega-linter.yml</code>です。</p><figure class="highlight yml"><figcaption><span>.megalinter.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Configuration file for MegaLinter</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See all available variables at https://megalinter.io/configuration/ and in</span></span><br><span class="line"><span class="comment"># linters documentation</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># all, none, or list of linter keys</span></span><br><span class="line"><span class="attr">APPLY_FIXES:</span> <span class="string">all</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you use ENABLE variable, all other languages/formats/tooling-formats will</span></span><br><span class="line"><span class="comment"># be disabled by default</span></span><br><span class="line"><span class="comment"># ENABLE:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you use ENABLE_LINTERS variable, all other linters will be disabled by</span></span><br><span class="line"><span class="comment"># default</span></span><br><span class="line"><span class="comment"># ENABLE_LINTERS:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DISABLE:</span></span><br><span class="line">  <span class="comment"># - COPYPASTE # Uncomment to disable checks of excessive copy-pastes</span></span><br><span class="line">  <span class="comment"># - SPELL # Uncomment to disable checks of spelling mistakes</span></span><br><span class="line"></span><br><span class="line"><span class="attr">SHOW_ELAPSED_TIME:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">FILEIO_REPORTER:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment if you want MegaLinter to detect errors but not block CI to pass</span></span><br><span class="line"><span class="comment"># DISABLE_ERRORS: true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>デフォルトの設定ではLinterが多すぎるため必要なLinterのみ有効化します。今回は初期設定時にGoのプロジェクトを選択したため、Go Flavorを利用しています。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>FlavorとはMegaLinterで用意している言語ごとのプリセットです。</p></div><p>Go Flavorに採用されているLinterは<a href="https://megalinter.io/latest/flavors/go/">こちら</a>で確認できます。</p><p>今回はGoのLinterとしてRivive、MarkdownのLinterとしてMarkdownlintを利用します。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+ENABLE_LINTERS:</span></span><br><span class="line"><span class="addition">+  - GO_REVIVE</span></span><br><span class="line"><span class="addition">+  - MARKDOWN_MARKDOWNLINT</span></span><br></pre></td></tr></table></figure><p>ではローカルでLinterを実行してみます。MegaLinterはdockerを利用するため、ローカル環境のDockerエンジンを起動して以下コマンドを実行してください。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx mega-linter-runner --flavor go</span><br></pre></td></tr></table></figure><p>コマンドを実行するとLinterが走ります。<br>以下実行結果です。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx mega-linter-runner --flavor go</span><br><span class="line">Pulling docker image oxsecurity/megalinter-go:v7 ...</span><br><span class="line">INFO: this operation can be long during the first use of mega-linter-runner</span><br><span class="line">The next runs, it will be immediate (thanks to docker cache !)</span><br><span class="line">v7: Pulling from oxsecurity/megalinter-go</span><br><span class="line">Digest: sha256:d3f363206d1f99a5b1def54ed4f6601bd6dbb03d1fd04e5731dafe9813f6ef12</span><br><span class="line">Status: Image is up to date for oxsecurity/megalinter-go:v7</span><br><span class="line">docker.io/oxsecurity/megalinter-go:v7</span><br><span class="line">Command: docker run --platform linux/amd64 -v /var/run/docker.sock:/var/run/docker.sock:rw -v C:\Users\miyao\megalinter-sample:/tmp/lint:rw oxsecurity/megalinter-go:v7</span><br><span class="line">Skipped setting git safe.directory DEFAULT_WORKSPACE:  ...</span><br><span class="line">Setting git safe.directory default: /github/workspace ...</span><br><span class="line">Setting git safe.directory to /tmp/lint ...</span><br><span class="line">[MegaLinter init] ONE-SHOT RUN</span><br><span class="line">[config] /tmp/lint/.mega-linter.yml + Environment variables</span><br><span class="line"></span><br><span class="line">    .:oool&#x27;                                  ,looo;</span><br><span class="line">    .xNXNXl                                 .dXNNXo.</span><br><span class="line">     lXXXX0c.                              &#x27;oKXXN0;</span><br><span class="line">     .oKNXNX0kxdddddddoc,.    .;lodddddddxk0XXXX0c</span><br><span class="line">      .:kKXXXXXXXXXXXXNXX0dllx0XXXXXXXXXXXXXXXKd,</span><br><span class="line">        .,cdkOOOOOOOO0KXXXXXXXXXXK0OOOOOOOkxo:&#x27;</span><br><span class="line">                      &#x27;ckKXNNNXkc&#x27;</span><br><span class="line">              &#x27;:::::;.  .c0XX0l.  .;::::;.</span><br><span class="line">              &#x27;xXXXXXx&#x27;   :kx:   ;OXXXXKd.</span><br><span class="line">               .dKNNXXO;   ..   :0XXXXKl.</span><br><span class="line">                .lKXXXX0:     .lKXXXX0:</span><br><span class="line">                  :0XXXXKl.  .dXXXXXk,</span><br><span class="line">                   ;kXXXXKd:cxXXXXXx&#x27;</span><br><span class="line">                    &#x27;xXNXXXXXXXXXKo.</span><br><span class="line">                     .oKXXXXNXXX0l.</span><br><span class="line">                      .lKNNXNNXO:</span><br><span class="line">                        ,looool&#x27;</span><br><span class="line"></span><br><span class="line">==========================================================</span><br><span class="line">=============   MegaLinter, by OX.security   =============</span><br><span class="line">=========  https://ox.security?ref=megalinter  ===========</span><br><span class="line">==========================================================</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------ MegaLinter, by OX Security ------------------------------------</span><br><span class="line">----------------------------------------------------------------------------------------------------</span><br><span class="line"> - Image Creation Date: 2023-09-22T15:10:52Z</span><br><span class="line"> - Image Revision: a87b2872713c6bdde46d2473c5d7ed23e5752dc2</span><br><span class="line"> - Image Version: v7.4.0</span><br><span class="line">----------------------------------------------------------------------------------------------------</span><br><span class="line">The MegaLinter documentation can be found at:</span><br><span class="line"> - https://megalinter.io/7.4.0</span><br><span class="line">----------------------------------------------------------------------------------------------------</span><br><span class="line">MegaLinter initialization</span><br><span class="line">MegaLinter will analyze workspace [/tmp/lint]</span><br><span class="line"></span><br><span class="line">MARKDOWN_REMARK_LINT has been temporary disabled in MegaLinter, please use a previous MegaLinter version or wait for the next one !</span><br><span class="line">Skipped linters: ACTION_ACTIONLINT, ANSIBLE_ANSIBLE_LINT, ARM_ARM_TTK, BASH_EXEC, BASH_SHELLCHECK, BASH_SHFMT, BICEP_BICEP_LINTER, CLOJURE_CLJSTYLE, CLOJURE_CLJ_KONDO, CLOUDFORMATION_CFN_LINT, COFFEE_COFFEELINT, COPYPASTE_JSCPD, CPP_CPPLINT, CSHARP_CSHARPIER, CSHARP_DOTNET_FORMAT, CSS_SCSS_LINT, CSS_STYLELINT, C_CPPLINT, DART_DARTANALYZER, DOCKERFILE_HADOLINT, EDITORCONFIG_EDITORCONFIG_CHECKER, ENV_DOTENV_LINTER, GHERKIN_GHERKIN_LINT, GO_GOLANGCI_LINT, GRAPHQL_GRAPHQL_SCHEMA_LINTER, GROOVY_NPM_GROOVY_LINT, HTML_DJLINT, HTML_HTMLHINT, JAVASCRIPT_ES, JAVASCRIPT_PRETTIER, JAVASCRIPT_STANDARD, JAVA_CHECKSTYLE, JAVA_PMD, JSON_ESLINT_PLUGIN_JSONC, JSON_JSONLINT, JSON_NPM_PACKAGE_JSON_LINT, JSON_PRETTIER, JSON_V8R, JSX_ESLINT, KOTLIN_KTLINT, KUBERNETES_HELM, KUBERNETES_KUBECONFORM, KUBERNETES_KUBESCAPE, LATEX_CHKTEX, LUA_LUACHECK, MAKEFILE_CHECKMAKE, MARKDOWN_MARKDOWN_LINK_CHECK, MARKDOWN_MARKDOWN_TABLE_FORMATTER, MARKDOWN_REMARK_LINT, OPENAPI_SPECTRAL, PERL_PERLCRITIC, PHP_PHPCS, PHP_PHPLINT, PHP_PHPSTAN, PHP_PSALM, POWERSHELL_POWERSHELL, POWERSHELL_POWERSHELL_FORMATTER, PROTOBUF_PROTOLINT, PUPPET_PUPPET_LINT, PYTHON_BANDIT, PYTHON_BLACK, PYTHON_FLAKE8, PYTHON_ISORT, PYTHON_MYPY, PYTHON_PYLINT, PYTHON_PYRIGHT, PYTHON_RUFF, RAKU_RAKU, REPOSITORY_CHECKOV, REPOSITORY_DEVSKIM, REPOSITORY_DUSTILOCK, REPOSITORY_GITLEAKS, REPOSITORY_GIT_DIFF, REPOSITORY_GRYPE, REPOSITORY_KICS, REPOSITORY_SECRETLINT, REPOSITORY_SEMGREP, REPOSITORY_SYFT, REPOSITORY_TRIVY, REPOSITORY_TRIVY_SBOM, REPOSITORY_TRUFFLEHOG, RST_RSTCHECK, RST_RSTFMT, RST_RST_LINT, RUBY_RUBOCOP, RUST_CLIPPY, R_LINTR, SALESFORCE_SFDX_SCANNER_APEX, SALESFORCE_SFDX_SCANNER_AURA, SALESFORCE_SFDX_SCANNER_LWC, SCALA_SCALAFIX, SNAKEMAKE_LINT, SNAKEMAKE_SNAKEFMT, SPELL_CSPELL, SPELL_LYCHEE, SPELL_PROSELINT, SPELL_VALE, SQL_SQLFLUFF, SQL_SQL_LINT, SQL_TSQLLINT, SWIFT_SWIFTLINT, TEKTON_TEKTON_LINT, TERRAFORM_TERRAFORM_FMT, TERRAFORM_TERRAGRUNT, TERRAFORM_TERRASCAN, TERRAFORM_TFLINT, TSX_ESLINT, TYPESCRIPT_ES, TYPESCRIPT_PRETTIER, TYPESCRIPT_STANDARD, VBDOTNET_DOTNET_FORMAT, XML_XMLLINT, YAML_PRETTIER, YAML_V8R, YAML_YAMLLINT</span><br><span class="line">To receive reports as email, please set variable EMAIL_REPORTER_EMAIL</span><br><span class="line"></span><br><span class="line">MegaLinter now collects the files to analyse</span><br><span class="line">Listing all files in directory [/tmp/lint], then filter with:</span><br><span class="line">- File extensions: .go, .md</span><br><span class="line">- Excluding .gitignored files [39]: megalinter-reports/.cspell.json, megalinter-reports/IDE-config.txt, megalinter-reports/IDE-config/.checkov.yml, megalinter-reports/IDE-config/.eslintrc-json.json, megalinter-reports/IDE-config/.gitleaks.toml, megalinter-reports/IDE-config/.golangci.yml, megalinter-reports/IDE-config/.grype.yaml, megalinter-reports/IDE-config/.idea/externalDependencies.xml, megalinter-reports/IDE-config/.markdown-link-check.json, megalinter-reports/IDE-config/.markdownlint.json,…(full list in DEBUG)</span><br><span class="line">Kept [2] files on [7] found files</span><br><span class="line"></span><br><span class="line">+----MATCHING LINTERS-------+----------+----------------+------------+</span><br><span class="line">| Descriptor | Linter       | Criteria | Matching files | Format/Fix |</span><br><span class="line">+------------+--------------+----------+----------------+------------+</span><br><span class="line">| GO         | revive       | .go      | 1              | no         |</span><br><span class="line">| MARKDOWN   | markdownlint | .md      | 1              | yes        |</span><br><span class="line">+------------+--------------+----------+----------------+------------+</span><br><span class="line"></span><br><span class="line">Processing linters on [4] parallel cores…</span><br><span class="line">✅ Linted [MARKDOWN] files with [markdownlint] successfully - (1.93s)</span><br><span class="line">- Using [markdownlint v0.37.0] https://megalinter.io/7.4.0/descriptors/markdown_markdownlint</span><br><span class="line">- MegaLinter key: [MARKDOWN_MARKDOWNLINT]</span><br><span class="line">- Rules config: [.markdownlint.json]</span><br><span class="line">- Number of files analyzed: [1]</span><br><span class="line"></span><br><span class="line">❌ Linted [GO] files with [revive]: Found 1 error(s) - (9.25s)</span><br><span class="line">- Using [revive v1.3.4] https://megalinter.io/7.4.0/descriptors/go_revive</span><br><span class="line">- MegaLinter key: [GO_REVIVE]</span><br><span class="line">- Rules config: identified by [revive]</span><br><span class="line">- Number of files analyzed: [1]</span><br><span class="line">--Error detail:</span><br><span class="line">main.go:1:1: should have a package comment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+----SUMMARY--+--------------+---------------+-------+-------+--------+--------------+</span><br><span class="line">| Descriptor  | Linter       | Mode          | Files | Fixed | Errors | Elapsed time |</span><br><span class="line">+-------------+--------------+---------------+-------+-------+--------+--------------+</span><br><span class="line">| ❌ GO       | revive       | list_of_files |     1 |       |      1 |        9.25s |</span><br><span class="line">| ✅ MARKDOWN | markdownlint | list_of_files |     1 |     0 |      0 |        1.93s |</span><br><span class="line">+-------------+--------------+---------------+-------+-------+--------+--------------+</span><br><span class="line"></span><br><span class="line">[Updated Sources Reporter] copied 1 fixed source files in folder /tmp/lint/megalinter-reports/updated_sources.</span><br><span class="line">Download it from artifacts then copy-paste it in your local repo to apply linters updates</span><br><span class="line">❌ Error(s) have been found during linting</span><br><span class="line">To disable linters or customize their checks, you can use a .mega-linter.yml file at the root of your repository</span><br><span class="line">More info at https://megalinter.io/7.4.0/configuration/</span><br></pre></td></tr></table></figure><p>Goでエラーが出ていますね。出力結果の最後にレポートが出力されるため、Linterの結果がわかりやすいです。</p><p>では該当の部分を修正して再度Linterを走らせます。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❌ Linted [GO] files with [revive]: Found 1 error(s) - (9.25s)</span><br><span class="line">- Using [revive v1.3.4] https://megalinter.io/7.4.0/descriptors/go_revive</span><br><span class="line">- MegaLinter key: [GO_REVIVE]</span><br><span class="line">- Rules config: identified by [revive]</span><br><span class="line">- Number of files analyzed: [1]</span><br><span class="line">--Error detail:</span><br><span class="line">main.go:1:1: should have a package comment</span><br></pre></td></tr></table></figure><p>reviveのログを確認すると、packageのコメントを記載していなかったことが原因そうです。</p><p>以下のようにmain.goを修正します。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Package main print &quot;Hello 世界&quot;</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello, 世界&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下再実行した結果です。エラーが解消したことを確認できます。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">+----MATCHING LINTERS-------+----------+----------------+------------+</span><br><span class="line">| Descriptor | Linter       | Criteria | Matching files | Format/Fix |</span><br><span class="line">+------------+--------------+----------+----------------+------------+</span><br><span class="line">| GO         | revive       | .go      | 1              | no         |</span><br><span class="line">| MARKDOWN   | markdownlint | .md      | 1              | yes        |</span><br><span class="line">+------------+--------------+----------+----------------+------------+</span><br><span class="line"></span><br><span class="line">Processing linters on [4] parallel cores…</span><br><span class="line">✅ Linted [MARKDOWN] files with [markdownlint] successfully - (1.3s)</span><br><span class="line">- Using [markdownlint v0.37.0] https://megalinter.io/7.4.0/descriptors/markdown_markdownlint</span><br><span class="line">- MegaLinter key: [MARKDOWN_MARKDOWNLINT]</span><br><span class="line">- Rules config: [.markdownlint.json]</span><br><span class="line">- Number of files analyzed: [1]</span><br><span class="line"></span><br><span class="line">✅ Linted [GO] files with [revive] successfully - (7.38s)</span><br><span class="line">- Using [revive v1.3.4] https://megalinter.io/7.4.0/descriptors/go_revive</span><br><span class="line">- MegaLinter key: [GO_REVIVE]</span><br><span class="line">- Rules config: identified by [revive]</span><br><span class="line">- Number of files analyzed: [1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+----SUMMARY--+--------------+---------------+-------+-------+--------+--------------+</span><br><span class="line">| Descriptor  | Linter       | Mode          | Files | Fixed | Errors | Elapsed time |</span><br><span class="line">+-------------+--------------+---------------+-------+-------+--------+--------------+</span><br><span class="line">| ✅ GO       | revive       | list_of_files |     1 |       |      0 |        7.38s |</span><br><span class="line">| ✅ MARKDOWN | markdownlint | list_of_files |     1 |     0 |      0 |         1.3s |</span><br><span class="line">+-------------+--------------+---------------+-------+-------+--------+--------------+</span><br><span class="line"></span><br><span class="line">[Updated Sources Reporter] copied 2 fixed source files in folder /tmp/lint/megalinter-reports/updated_sources.</span><br><span class="line">Download it from artifacts then copy-paste it in your local repo to apply linters updates</span><br><span class="line">✅ Successfully linted all files without errors</span><br></pre></td></tr></table></figure><h2 id="PR上のコメント機能"><a href="#PR上のコメント機能" class="headerlink" title="PR上のコメント機能"></a>PR上のコメント機能</h2><p>では、このブランチをリモートリポジトリにPushしてPR上のコメントを確認します。</p><p>以下がPR上でのコメントの様子です。</p><img src="/images/20231129a/image_2.png" alt="image.png" width="651" height="725" loading="lazy"><p>表形式にまとめてくれているため、非常にわかりやすいですね。</p><p>PRは<a href="https://github.com/orangekame3/megalinter-sample/pull/1">こちら</a>です。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>以上、 MegaLinterの紹介と簡単な利用方法を解説しました。</p><p>欲を言うと<a href="https://github.com/reviewdog/reviewdog">Reviewdog</a>のようなツールと簡単に連携できると嬉しいです。Reviewdogの<a href="https://github.com/reviewdog/reviewdog/issues/841">Issue#841</a>で議論されているようですが、まだ簡単に連携できる状態ではなさそうです。</p><p>とりあえず、Linterを導入したいと言う方には非常におすすめなツールですのでぜひ活用してみてください。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、宮永 ( &lt;a</summary>
        
      
    
    
    
    <category term="DevOps" scheme="https://future-architect.github.io/categories/DevOps/"/>
    
    
    <category term="Linter" scheme="https://future-architect.github.io/tags/Linter/"/>
    
    <category term="GitHubActions" scheme="https://future-architect.github.io/tags/GitHubActions/"/>
    
    <category term="GitHub" scheme="https://future-architect.github.io/tags/GitHub/"/>
    
    <category term="Markdownlint" scheme="https://future-architect.github.io/tags/Markdownlint/"/>
    
    <category term="MegaLinter" scheme="https://future-architect.github.io/tags/MegaLinter/"/>
    
    <category term="Rivive" scheme="https://future-architect.github.io/tags/Rivive/"/>
    
  </entry>
  
  <entry>
    <title>data-testidはいつ使うべきか？そもそも使うべきなのか？</title>
    <link href="https://future-architect.github.io/articles/20231128a/"/>
    <id>https://future-architect.github.io/articles/20231128a/</id>
    <published>2023-11-27T15:00:00.000Z</published>
    <updated>2023-11-28T06:42:19.514Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20231128a/top.png" alt="" width="329" height="153"><p>Playwrightあるいはそのロケーターの元ネタとなっているTesting Libraryでは、DOMを指定する方法として <code>data-testid</code> 属性を扱ったクエリーを提供しています。どちらでも <code>getByTestId(ID文字列)</code> メソッドを使い、この属性値を使った要素の取得が行えます。しかし、ドキュメントを見ると、PlaywrightもTesting Libraryも、「他の手法が使えないときの最終手段」としています。</p><blockquote><p>In the spirit of the guiding principles, it is recommended to use this only after the other queries don’t work for your use case. Using data-testid attributes do not resemble how your software is used and should be avoided if possible. That said, they are way better than querying based on DOM structure or styling css class names. Learn more about data-testids from the blog post “Making your UI tests resilient to change”</p><p><a href="https://testing-library.com/docs/guiding-principles">方針の原則</a>の精神に基づき、他のクエリではユースケースに合わなかった場合にのみ、これを使用することをお勧めします。 <code>data-testid</code> 属性の使用は(エンドユーザーが)ソフトウェアを使用する方法とかけ離れているため、可能であれば避けてください。とはいえ、DOM構造に基づいてクエリを実行したり、(テストのために)CSSクラス名を設定するよりもはるかに優れています。 <code>data-testid</code> の詳細については、ブログ投稿の <a href="https://kentcdodds.com/blog/making-your-ui-tests-resilient-to-change">変更に対するUIテストの回復力の強化」</a>を参照してください。</p></blockquote><ul><li><a href="https://future-architect.github.io/articles/20210226/">アクセシビリティ情報を使った壊れにくいE2Eテスト</a></li></ul><p>以前書いた技術ブログの記事では「人間に近い感覚」で要素を取得するテストが壊れにくいテストであるということを書きました。<code>data-testid</code> はHTMLを見て初めて知り得る情報ですので、E2Eテストではなるべく使うべきではありません。エンドユーザーはDOM構造を見てウェブサイトにアクセスするわけではありません。ユーザーが操作するのはブラウザで操作するウェブアプリケーションであり、レンダリングされたウェブページを見て操作します。エンドユーザーから見れば、DOMの構造は実装の詳細であって、開発者ツールを見ないとわからない情報です。実装の詳細はリファクタリング等で変更されることがありますが、より抽象度の高い操作はそれよりも「意図せぬ変更」にはなりにくいです。</p><p>単体テストでも同様に使うべきではありません。同じようにテストできるのであれば、テストコードは少ない方が良いし、ホワイトボックステストよりもブラックボックステストで公開メンバーのみに対するテストで済むならそちらの方が良いというのは多くの開発者が合意してくれる内容だと思います。公開メソッドで済むのにわざわざリフレクション機能を使うのはよくないですよね？DOM構造を使ったテストはなるべく行うべきではないホワイトボックステストです。</p><p>そうなると、Testing-Libraryの原則で説明されているように、他の方法がある場合はそちらを使うべき、というのがわかるでしょう。「<code>data-testid</code>なんて新しい属性を作らなくても、 <code>id</code> や <code>class</code> でいいのでは？」と思う方もいると思います。 <code>id</code> や <code>class</code>ははテスト専用ではなくて別の役割も持っているため、テスト以外の動機によって変更されてしまうことがあります。 <code>data-testid</code> の立ち位置は、なるべく使うべきではないが <code>id</code> や <code>class</code> よりはまし、と覚えておきましょう。</p><p>唯一、気兼ねなく使っても問題がないと思われるケースは、単体テストかつ、これが外部に公開されたAPIである場合です。次のように、省略可能な <code>data-testid</code> 属性をコンポーネントに付与し、もし指定されたらコンポーネントのルートの要素にこの属性をフォワードして付与するようにします。</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// data-testid属性をフォワードして設定するコンポーネント</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">props: &#123;[<span class="string">&quot;data-testid&quot;</span>]?: string&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-testid</span>=<span class="string">&#123;props[</span>&quot;<span class="attr">data-testid</span>&quot;]&#125;&gt;</span>My Component<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こうすれば、単体テストにおいては、テストコードの見える場所で宣言と利用が行われます。「どこで定義されたかわからない謎の属性」感はなくなり、テストコードを読んだ人からはコンポーネントの中を知らずともその利用方法が想像できて、ブラックボックステストであるべき、という原則を壊さずに利用できていることがわかるでしょう。</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// data-testidの問題ない利用例（Jest + @testing-library/react）</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;loads and displays greeting&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">data-testid</span>=<span class="string">&quot;test-target&quot;</span> /&gt;</span></span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(screen.<span class="title function_">getByTestId</span>(<span class="string">&#x27;test-target&#x27;</span>)).<span class="title function_">toHaveTextContent</span>(<span class="string">&#x27;My Component&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>どちらにせよ、E2Eテストではなるべく使わない方が良いでしょう。眼に見える要素を使ってテストを書くべきです。</p><h1 id="代わりに何を使えば良いか？"><a href="#代わりに何を使えば良いか？" class="headerlink" title="代わりに何を使えば良いか？"></a>代わりに何を使えば良いか？</h1><p>Testing LibraryもPlaywrightも、どちらもリファレンスでは同じような並びに並んでいることがわかります。アルファベット順ではないです。この順番で利用を検討していけば良いという推奨の順番と考えても良いと思います。(Testing-LibraryはByの前に、get, find, query, getAll, findAll, queryAllと6パターンの接頭辞のバリエーションがあります)</p><div class="scroll"><table><thead><tr><th align="left">Playwright</th><th align="left">Testing-Library</th><th align="left">役割</th></tr></thead><tbody><tr><td align="left"><code>getByRole()</code></td><td align="left"><code>ByRole()</code></td><td align="left">ロールで取得</td></tr><tr><td align="left"><code>getByLabel()</code></td><td align="left"><code>ByLabelText()</code></td><td align="left">ラベルテキストで取得</td></tr><tr><td align="left"><code>getByPlaceholder()</code></td><td align="left"><code>ByPlaceholderText()</code></td><td align="left">プレースホルダのテキストで取得</td></tr><tr><td align="left"><code>getByText()</code></td><td align="left"><code>ByText()</code></td><td align="left">テキスト情報で取得</td></tr><tr><td align="left"></td><td align="left"><code>ByDisplayValue()</code></td><td align="left">input&#x2F;textareaのvalue値で取得</td></tr><tr><td align="left"><code>getByAltText()</code></td><td align="left"><code>ByAltText()</code></td><td align="left">画像などの代替テキスト(alt属性)で取得</td></tr><tr><td align="left"><code>getByTitle()</code></td><td align="left"><code>ByTitle()</code></td><td align="left">HTMLのtitle属性(ツールチップで表示される)で取得</td></tr><tr><td align="left"><code>getByTestId()</code></td><td align="left"><code>ByTestId()</code></td><td align="left">data-testid属性で取得</td></tr><tr><td align="left"><code>locator()</code></td><td align="left"></td><td align="left">CSS&#x2F;XPathで取得</td></tr></tbody></table></div><p>檳榔さんから教えてもらったのですが、Cypressのベストプラクティスは<code>data-</code>属性を付与することを推奨しています。</p><ul><li><a href="https://docs.cypress.io/guides/references/best-practices#Selecting-Elements">https://docs.cypress.io/guides/references/best-practices#Selecting-Elements</a></li></ul><p>これは本エントリーとは矛盾はしません。というのも、アクセシビリティの要素での要素取得はCypress本体の機能ではなく、外部のライブラリのTesint-Libraryの機能だからです。Cypress本体の機能で実現できるのは<code>getByText()</code>と、上記の表の末尾の2つです。このうち、テキストは変更されうるので非推奨としています。</p><p>アクセシビリティ要素に関して言えば、機能を起動する起点となるものはたいていロールを使います。テキストは結果の取得程度で、たいていは入力値と同じもの、あるいはそこから算出される期待するテキストの取得に使うと思うので問題はないでしょう。そんでもって末尾の2つの中では<code>data-testid</code>の方が優先度が高いのでCypressのドキュメントで書かれていることと矛盾はしないですよね？</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20231128a/top.png&quot; alt=&quot;&quot; width=&quot;329&quot; height=&quot;153&quot;&gt;

&lt;p&gt;Playwrightあるいはそのロケーターの元ネタとなっているTesting Libraryでは、DOMを指定する方法として</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
    <category term="Cypress" scheme="https://future-architect.github.io/tags/Cypress/"/>
    
    <category term="Playwright" scheme="https://future-architect.github.io/tags/Playwright/"/>
    
  </entry>
  
  <entry>
    <title>Unreal Engine5で簡単な色塗りゲームを作ろう！</title>
    <link href="https://future-architect.github.io/articles/20231127a/"/>
    <id>https://future-architect.github.io/articles/20231127a/</id>
    <published>2023-11-26T15:00:00.000Z</published>
    <updated>2023-11-27T04:56:24.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>関根です。<br>Unreal Engine5を使って簡単な「色塗りゲーム」を作ってみます。</p><p>次の画像のような Blueprintを作成しながら、キャラクターが歩いた箇所のブロックの色を変える、2秒時間が経過したら元の色に戻す、といった簡易的なものを作成します。</p><p>この記事で作成するもの<br><img src="/images/20231127a/スクリーンショット_(159)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><h2 id="想定読者"><a href="#想定読者" class="headerlink" title="想定読者"></a>想定読者</h2><p>想定している読者は、Unreal Engine5をインストールした直後の初学者及び、Unreal Engine5の具体的な使い方は知らないけれども、何か手を動かしながら作ってみたい人向けに記事を作成しました。</p><p>それでは早速始めていこうと思います。</p><h1 id="新規プロジェクトを立ち上げる。"><a href="#新規プロジェクトを立ち上げる。" class="headerlink" title="新規プロジェクトを立ち上げる。"></a>新規プロジェクトを立ち上げる。</h1><p>それではまず新規プロジェクトを作成しましょう。</p><p>EpicGameLauncherの<code>ライブラリ</code>、<code>Engineバージョン</code>から、Unreal Engine5を起動します。</p><p>今回の記事では5.3.1のバージョンを使用します。<br>(右上の起動ボタンからでもUnreal Engineの起動は行えます。)<br><img src="/images/20231127a/スクリーンショット_(22)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>Engineを起動すると、プロジェクトを設定する画面が出てきます。</p><p>左の<code>ゲーム</code>を選択し、その中の<code>サードパーソン</code>を選択します。</p><p>そして今回は<code>GameProject</code>というフォルダの中に<code>MyProject</code>というプロジェクトを作成します。</p><p>それ以外は変更せずに作成ボタンを押します。</p><img src="/images/20231127a/スクリーンショット_(23)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>しららく待つとこちらのような画面になります。</p><p>今回は<code>サードパーソン</code>というパックを選択したため、サードパーソンゲーム(TPS)で使われる最低限のロジック(キャラクターを動かす、カメラ移動など)はすでにある状態でプロジェクトがスタートしています。</p><p>こちらの画面はデモマップなので、少しこちらでゲームを動かしてみましょう。</p><p><code>画面上部の緑色の再生ボタン</code>もしくは<code>Alt+P</code>でゲームを開始することができます。<br><img src="/images/20231127a/スクリーンショット_(32)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>するとキャラクターが出現し、ゲームをプレイすることができるようになります。</p><p>WASDで移動、Spaceキーでジャンプ、マウスでカメラ操作が行えます。</p><p>ゲームを終了する際は停止ボタン、もしくは<code>esc</code>キーを押すことで終了する事が出来ます。<br>(もしキャラクターの操作が出来ない場合は、ゲーム画面をクリックしてみてください。)<br><img src="/images/20231127a/スクリーンショット_(33)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><h1 id="新しいマップを作成する、光源の設置"><a href="#新しいマップを作成する、光源の設置" class="headerlink" title="新しいマップを作成する、光源の設置"></a>新しいマップを作成する、光源の設置</h1><p>今回はこちらのデモマップは使用せず、一からマップを作成しようと思います。</p><p>画面上部の<code>ファイル</code>から<code>新規レベル</code>を選択します。</p><img src="/images/20231127a/スクリーンショット_(34)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>何もないマップからゲームを作成していくため、<code>空のレベル</code>を選択します。<br><img src="/images/20231127a/スクリーンショット_(35)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>そうすると新規レベル(新しいマップ)が立ち上がります。</p><p>しかし文字通り空のレベルのため、光源も何もありません。そのため画面が真っ黒になってしまっています。</p><img src="/images/20231127a/スクリーンショット_(36)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>そこでまずは光源を設置しようと思います。<code>ウィンドウ</code>の<code>環境ライトミキサー</code>を選択します。</p><img src="/images/20231127a/スクリーンショット_(37)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>画面が出てきたら、<code>スカイライトを作成</code>、<code>大気ライトを作成</code>、<code>Sky Atmosphereを作成</code>、<code>ボリュメトリッククラウドを作成</code>を全てクリックします。<br><img src="/images/20231127a/スクリーンショット_(38)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>そうすると光源の他に空や雲がマップに作成されます。</p><p>細かい設定等も行えますが、今回はこちらで進めていきます。</p><img src="/images/20231127a/スクリーンショット_(39)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>ここまで行えたら、一度レベル(マップ)の保存をします。<code>Ctrl+shift+S</code>ですべてを保存します。</p><p>するとどこに保存するのかを問われるため、今回は<code>コンテンツ</code>直下に右クリックをして新たに<code>MyStuff</code>というフォルダを作成します。<br><img src="/images/20231127a/スクリーンショット_(104)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>作成したフォルダをダブルクリックし、その中に<code>ColoringMap</code>という名前で現在のレベルを保存します。<br><img src="/images/20231127a/スクリーンショット_(105)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><h1 id="ステージの床を作ろう！"><a href="#ステージの床を作ろう！" class="headerlink" title="ステージの床を作ろう！"></a>ステージの床を作ろう！</h1><p>続いて床の配置をしていきます。</p><p>今回はキャラクターが歩いたブロックの色を変えたいので、複数ブロックを使用して床を作成していきます。</p><p><code>ウィンドウ</code>から<code>アクタを配置</code>を選択します。<br><img src="/images/20231127a/スクリーンショット_(106)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>この画面からレベル上にオブジェクトを配置していくことができます。</p><p>この中から<code>キューブ</code>を選択し、ビューポート(画面中央の画面)にドラッグアンドドロップします。</p><img src="/images/20231127a/スクリーンショット_(107)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>すると白いキューブが配置されました。</p><p>今回はこのキューブに「操作キャラクターが上を歩いたら、色を変える」というロジックを入れたいです。</p><p>そのロジックを入れるためには、<code>Blueprint</code>というものを作成していく必要があります。</p><p>配置したキューブのBlueprintを作成するために、右下の<code>詳細</code>にある<code>+追加ボタンの右のアイコン</code>をクリックします。</p><img src="/images/20231127a/スクリーンショット_(108)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p><code>ブループリント名</code>を<code>BP_Cube</code>に変更し、<code>パス</code>を先ほど作成した<code>MyStuff</code>に変更します。<br>ここまで完了したら<code>選択</code>を押します。<br><img src="/images/20231127a/スクリーンショット_(109)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>すると<code>BP_Cube</code>の編集画面が表示されます。<br><img src="/images/20231127a/スクリーンショット_(110)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>すぐにBluePrintを書いていきたいところですが、まずは<code>Collision(コリジョン)</code>と呼ばれる当たり判定をCubeに追加していきます。</p><p>「CubeのこのCollisionにキャラクターが当たったら、色を変える」というロジックを作成するために必要となります。</p><p>それでは画面左の<code>コンポーネント</code>の下にある<code>+追加</code>ボタンをクリックし、検索欄に<code>box</code>と入力します。すると<code>box collision</code>が出てくるので、そちらをクリックします。そしてこのbox Collisionの名前を<code>Trigger</code>に変更します。<code>F2</code>か、右クリックをおして<code>名前変更</code>で名称を変更できます。<br><img src="/images/20231127a/スクリーンショット_(111)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>これでbox collisionがTriggerという名前で生成されました。</p><p>そうしたらこのTriggerの大きさ、位置を調整していきます。</p><p>画面右の<code>詳細</code>画面上部にある<code>トランスフォーム</code>で位置を調整できます。</p><p>今回は</p><ul><li>位置をそれぞれ<code>(x, y, z) = (0, 0, 50)</code></li><li>拡大縮小をそれぞれ<code>(x, y, z) = (1.2, 1.2, 0.2)</code><br>に変更します。</li></ul><p>これでキューブの上部にTriggerが表示されるようになります。<br><img src="/images/20231127a/スクリーンショット_(112)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>ここまで完了したら画面上部のタブから一度ColoringMapに戻ります。</p><p>そうすると先ほど作成したTriggerが、先ほど配置したキューブに反映されているのが確認できます。<br><img src="/images/20231127a/スクリーンショット_(113)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>そうしましたら、こちらのキューブの位置を調整し、複製をして床を作成していきます。<br><code>詳細</code>の<code>トランスフォーム</code>を全て0に設定します。<br><img src="/images/20231127a/スクリーンショット_(114)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>そしたらこちらを複製していきます。<code>Alt</code>を押しながら、ギズモ(3方向に延びている矢印)をドラッグします。<br>(ギズモの中央ではなく、矢印を選択するとやりやすいです。)</p><p>これでキューブを2つに複製することができました。<br><img src="/images/20231127a/スクリーンショット_(115)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>同様の作業を繰り返して床を作成します。</p><p>一つずつ複製していると大変なため、<code>Controll</code>を押しながら画面上のキューブを複数選択した状態で、<code>Alt</code>キーを使って同時に複数複製していきます。<br>数が多くなったら、画面右上の<code>アウトライナー</code>で<code>shift</code>を使って複数選択すると効率的に行えます。</p><img src="/images/20231127a/スクリーンショット_(116)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>これで床は完成しました。</p><p>しかしゲームスタート地点を設定していません。そのためこのまま再生ボタンをおすとキャラクターがそのまま落下してしまいます。<code>アクタを配置</code>から<code>Player Start</code>を選択しビューポート(中央の画面)にドラッグアンドドロップします。</p><img src="/images/20231127a/スクリーンショット_(117)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>そして<code>詳細</code>の<code>トランスフォーム</code>を変更します。<br>位置を<code>(x, y, z) = (0, 0, 150)</code><br>回転を<code>(x, y, z) = (0, 0, -135)</code><br>にします。<br><img src="/images/20231127a/スクリーンショット_(118)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>ここまできたら<code>Alt+P(もしくは上部の再生ボタン)</code>を押して、ゲームを再生します。設置した<code>Player Start</code>の位置、向きにキャラクターが出現し、WASDで移動、Spaceでジャンプ、マウスでカメラ操作が行えるようになります。<br><img src="/images/20231127a/スクリーンショット_(119)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><h1 id="色が変わる床に修正しよう！-Blueprintの作成"><a href="#色が変わる床に修正しよう！-Blueprintの作成" class="headerlink" title="色が変わる床に修正しよう！(Blueprintの作成)"></a>色が変わる床に修正しよう！(Blueprintの作成)</h1><p>それでは実際に<code>Trigger</code>に触れたら、キューブのマテリアル(色)を変えるようなBlueprintを組んでみましょう。<br><code>BP_Cube</code>を再度開きます。</p><p>BP_Cubeを既に閉じてしまっている場合は</p><ul><li><code>Ctrl+Space</code>でコンテンツドロワーを開き、<code>MyStruff</code>から<code>BP_Cube</code>を選択</li><li>ビューポートの任意のキューブを選択して、<code>Ctrl+E</code><br>のどちらかの手順で開く事ができます。<img src="/images/20231127a/スクリーンショット_(120)_R.jpg" alt="" width="1200" height="675" loading="lazy"></li></ul><p>こちらのキューブにはまだ何もマテリアルを設定していないため、マテリアルを設定しましょう。<br><code>詳細</code>の<code>マテリアル</code>から<code>M_Basic_Floor</code>を選択します。<br>(マテリアルはどれでも良いので好きな物を選んでください。)<br><img src="/images/20231127a/スクリーンショット_(141)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>するとキューブにマテリアルが適用されます。<br><img src="/images/20231127a/スクリーンショット_(142)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>ColoringMapに戻ってみると、すべてのキューブにマテリアルが適用されていることがわかります。<br><img src="/images/20231127a/スクリーンショット_(143)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>それでは再度<code>BP_Cube</code>に戻ります。<br>画面上部の<code>イベントグラフ</code>を選択します。<br><img src="/images/20231127a/スクリーンショット_(144)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>こちらの画面でBlueprintを作成していきます。<br><img src="/images/20231127a/スクリーンショット_(145)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>今回はキャラクターがCubeの上を通過したら、マテリアルを変更したいので、<code>Event ActorBeginOverlap</code>を使用します。(overlapは物体同氏が重なったときに発火するものです。詳しくは<a href="https://docs.unrealengine.com/4.27/ja/InteractiveExperiences/Physics/Collision/Overview/">overlapに関する公式ドキュメント</a>を参照ください)</p><p><code>Event ActorBeginOverlap</code>の右矢印をドラッグします。<br><img src="/images/20231127a/スクリーンショット_(146)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p>するとどのBlueprintを<code>Event ActorBeginOverlap</code>と接続したいのかを聞かれます。</p><p>今回はoverlapしたらマテリアルを変更するようにしたいので<code>Set Material(StaticMeshComponent)</code>を検索し、クリックします。検索しても出てこない場合は左上の<code>コンポーネント</code>で<code>Static Mesh Component(StaticMeshComponent)</code>をクリックするか、検索画面の右上にある<code>状況に合わせた表示</code>のチェックを外します。</p><div class="note warn" style="background: #fdf9e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p>検索すると<code>Set Material(Trigger)</code>などが出てくることもあります。<br>しかし今回overlapした後に変更したいのはキューブ自体のマテリアルです。<br>そのため、こちらは選択せずに<code>set Material(StaticMeshComponent)</code>を選択するようにしてください。</p></div><img src="/images/20231127a/スクリーンショット_(147)_R.jpg" alt="" width="1200" height="675" loading="lazy"><p>配置をするとこちらのようになります。<br>ドラッグするとBlueprintの位置を変更できるので見やすい位置に配置をしてください。<br><img src="/images/20231127a/スクリーンショット_(148)_R.jpg" alt="" width="1200" height="675" loading="lazy"></p><p><code>Set Material</code>を設置したら、どのマテリアルに変更したいのかを決める必要があります。<br><code>Set Material</code>内の<code>Material</code>から今回は<code>M_Ground_Grass</code>を選択します。</p><p>これで</p><ol><li>キャラクターがCubeのTriggerと重なったら(Event ActorBeginOverlap)</li><li><code>Static Mesh Component</code>のマテリアルを<code>M_Ground_Grass</code>に変更する(Set Material)</li></ol><p>というBlueprintを作成することができました！<br><img src="/images/20231127a/スクリーンショット_(149)_R.jpg" alt="スクリーンショット_(149)_R.jpg" width="1200" height="675" loading="lazy"></p><p>ここまで出来たら<code>再生ボタンを押す</code>もしくは<code>Alt+P</code>でゲームを再生してみましょう。<br>キャラクターが歩いた所のマテリアルが変わっていくようになっていることを確認します。<br><img src="/images/20231127a/スクリーンショット_(150)_R.jpg" alt="スクリーンショット_(150)_R.jpg" width="1200" height="675" loading="lazy"></p><h1 id="2秒経過したら元の色に戻そう"><a href="#2秒経過したら元の色に戻そう" class="headerlink" title="2秒経過したら元の色に戻そう"></a>2秒経過したら元の色に戻そう</h1><p>練習として2秒経過したらマテリアルを元に戻す、というBlueprintも作成してみましょう。</p><p>今回はoverlapが終了したら、つまりキャラクターがキューブの上から離れたら、元のマテリアルに戻す、といったBlueprintを作成しようと思います。<br>そのためには新たにイベントを追加する必要があります。</p><p>画面左下の<code>マイブループリント</code>の<code>関数</code>にある<code>オーバーライド</code>から<code>ActorEndOverlap</code>を選択します。<br><img src="/images/20231127a/スクリーンショット_(151)_R.jpg" alt="スクリーンショット_(151)_R.jpg" width="1200" height="675" loading="lazy"></p><p>すると画面に<code>Event ActorEndOverlap</code>が追加されます。<br><img src="/images/20231127a/スクリーンショット_(152)_R.jpg" alt="スクリーンショット_(152)_R.jpg" width="1200" height="675" loading="lazy"></p><p>そうしたら<code>Event ActorEndOverlap</code>の右矢印をドラッグします。<br>前述のとおり、この<code>Event ActorEndOverlap</code>が呼び出されるのはキャラクターがキューブの上から離れたとき、になります。<br>離れてから2秒後にマテリアルを変更したいため、任意秒処理を遅らせる事ができる<code>Delay</code>を選択します。<br><img src="/images/20231127a/スクリーンショット_(153)_R.jpg" alt="スクリーンショット_(153)_R.jpg" width="1200" height="675" loading="lazy"></p><p><code>Delay</code>の設置が出来たら、<code>Duration</code>を2.0に設定し、2秒間遅らせるようにします。<br><img src="/images/20231127a/スクリーンショット_(157)_R.jpg" alt="スクリーンショット_(157)_R.jpg" width="1200" height="675" loading="lazy"></p><p>その後の処理は先ほどと同じになります。<br><code>Delay</code>の右矢印をドラッグし、<code>Set Material(Static Mesh Component)</code>を選択します。<br>今回の<code>Material</code>は<a href="#%E8%89%B2%E3%81%8C%E5%A4%89%E3%82%8F%E3%82%8B%E5%BA%8A%E3%81%AB%E4%BF%AE%E6%AD%A3%E3%81%97%E3%82%88%E3%81%86%EF%BC%81(Blueprint)">こちら</a>で設定した<code>M_Basic_Floor</code>を選択します。<br><img src="/images/20231127a/スクリーンショット_(158)_R.jpg" alt="スクリーンショット_(158)_R.jpg" width="1200" height="675" loading="lazy"></p><p>これで今回作成するBlueprintは以上になります。<br><code>Alt+P</code>でゲームを再生すると、歩いた箇所が2秒後に元の色に戻るようになりました。<br>これで簡易的な色塗りゲームが完成しました。<br><img src="/images/20231127a/スクリーンショット_(159)_R_2.jpg" alt="スクリーンショット_(159)_R.jpg" width="1200" height="675" loading="lazy"></p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>この記事では以下の事を行いました。</p><ul><li>プロジェクトの立ち上げ方</li><li>レベルをどのように作るのか</li><li>空などの設置方法</li><li>アクタ(オブジェクト)の配置方法、位置の変え方など</li><li>Blueprintを使った色塗りゲームのロジック開発</li></ul><p>かなり初歩的な所ではありますが、UnrealEngineの基本的な所に触れることができたのではないかと思います。</p><p>ここから自分で拡張してみても面白いかもしれません。</p><ul><li>ステージが狭いのでもう少し広げてみる</li><li>ジャンプしたときは別のマテリアルに変える</li><li>色を変えるではなく、歩いたところのブロックが落下するようにしてみる</li></ul><p>今回使用したノード(<code>Delay</code>や<code>Set Material</code>の事)は2つだけです。ノードはまだまだ沢山あるのでぜひ調べてみてください。</p><p>最後まで読んでいただきありがとうございました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;関根です。&lt;br&gt;Unreal</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="初心者" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85/"/>
    
    <category term="UnrealEngine5" scheme="https://future-architect.github.io/tags/UnrealEngine5/"/>
    
    <category term="ゲーム制作" scheme="https://future-architect.github.io/tags/%E3%82%B2%E3%83%BC%E3%83%A0%E5%88%B6%E4%BD%9C/"/>
    
    <category term="UnrealEngine" scheme="https://future-architect.github.io/tags/UnrealEngine/"/>
    
  </entry>
  
  <entry>
    <title>学習のSHA 〜ハッシュ関数の基本と安全性について学ぶ〜</title>
    <link href="https://future-architect.github.io/articles/20231124a/"/>
    <id>https://future-architect.github.io/articles/20231124a/</id>
    <published>2023-11-23T15:00:00.000Z</published>
    <updated>2023-11-24T00:47:32.941Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20231124a/top.jpg" alt="" width="800" height="800"><p>こんにちは。ペンギンになりたいエンジニアの島ノ江です。</p><p>普段はCSIGというサイバーセキュリティのグループに所属していて、「<a href="https://vuls.biz/">FutureVuls</a>」という脆弱性管理サービスの開発・営業などを行なっています。</p><p><a href="/articles/20231030a/">秋のブログ週間</a>の連載の17本目、「学習のSHA」というタイトルです。</p><p>暗号技術について学んでいると「<strong>ハッシュ値</strong>」という言葉に出会いますが、あまり詳細を追ったことはありませんでした。そこで今回はハッシュ関数およびその代表としてSHAに関する歴史や種類についてまとめます。念のため注意しますが、本記事と某アニメとは何も関係ありません。本当に。</p><p>本記事は次の2つを一次情報として参照しています。</p><ul><li>光成滋生　（2021）. 暗号と認証のしくみと理論がこれ1冊でしっかりわかる教科書　技術評論社（<a href="https://amzn.asia/d/2z81ZzR">Amazon</a>）</li><li>NIST の 「Hash Functions」 プロジェクト（<a href="https://csrc.nist.gov/projects/hash-functions">公式webページ</a>）</li></ul><p>せっかくなので、巻末に読書感想文として簡単に書籍の紹介もします。</p><h2 id="寄稿の背景"><a href="#寄稿の背景" class="headerlink" title="寄稿の背景"></a>寄稿の背景</h2><p>本記事を書こうと思ったのは、ふと暗号技術の安全性に思いを馳せたことからでした。</p><p>11月2日(木)に斉藤さんが「<a href="/articles/20231102a/">初心者が暗号の基礎と歴史を勉強して見た</a>」というタイトルで寄稿されています。これはシーザー暗号などのいわゆる古典暗号から公開鍵暗号などへの歴史を辿っている記事です。</p><p>このように暗号技術が変化してきたのには、技術などの発展に伴い暗号技術の安全性が変わっているからです。参考書籍にも「暗号は新しい安全な方式を提案する人と、それを解読しようとする人の両輪でよりよいものになっている」と書かれています。</p><p>では、「暗号技術のセキュリティ的な安全性とは？」という興味が湧くので、暗号技術の安全性に関する理解を深めよう、という流れでした。</p><h2 id="ハッシュ関数とは"><a href="#ハッシュ関数とは" class="headerlink" title="ハッシュ関数とは"></a>ハッシュ関数とは</h2><p><strong>ハッシュ関数</strong>とは「文章や画像・動画などの任意のデータから、予め決められた範囲内の値を計算する関数」です。ハッシュ関数は決定的アルゴリズムで、同じ入力値に対して常に同じ値を返します。この入力値をメッセージ、出力のことをハッシュ値、ダイジェストなどとも言います。</p><p>ハッシュ関数は様々な場面で利用されていて、具体的には次のようなものがあります。</p><ul><li>連想配列（JavaでのHashMapなど）</li><li>データベース検索(ハッシュインデックスによる完全一致検索など）</li><li>デジタル署名（送信者の認証など）</li><li>ブロックチェーン技術（データの整合性の確認など）</li></ul><p>このハッシュ関数の中で代表的なのが、本稿のタイトルにある「<strong>SHA</strong>」(Secure Hash Algorithm)です。これはNISTにより標準化されているハッシュアルゴリズムで、現代で広く用いられています。「エス・エイチ・エー」「シャー」と読まれていて、私は読みやすさから特にSHA256などは「シャー・ニゴロ」と読んでいます。</p><p>ハッシュ関数は現代で広く利用されている技術ですが、本記事では特に「<strong>暗号学的ハッシュ関数</strong>」について述べます。<br>暗号学的ハッシュ関数とは、さらに以下のような性質を持つハッシュ関数を指します。</p><h3 id="出力サイズが一定"><a href="#出力サイズが一定" class="headerlink" title="出力サイズが一定"></a>出力サイズが一定</h3><p>入力が1バイトであろうと4ギガバイトであろうと、出力されるサイズは全く同じになる性質があります。</p><p>入力データのサイズによらずハッシュ値のサイズが同じだと、処理の効率性や互換性が向上します。</p><p>また、ハッシュ値のサイズが同じでないと、出力値から入力値の情報が得られてしまい、暗号分析にも悪用されかねません。</p><img src="/images/20231124a/Hash_1.png" alt="Hash_1.png" width="865" height="260" loading="lazy"><h3 id="一方向性（原像計算困難性）"><a href="#一方向性（原像計算困難性）" class="headerlink" title="一方向性（原像計算困難性）"></a>一方向性（原像計算困難性）</h3><p>入力値からハッシュ値を求めることは簡単だが、その逆が難しい、という性質です。</p><p>ハッシュ値は分かるが元のメッセージが分からないという性質から、パスワードを比較的安全に保護することなどに利用されています。</p><img src="/images/20231124a/Hash_2.png" alt="Hash_2.png" width="868" height="188" loading="lazy"><h3 id="衝突困難性"><a href="#衝突困難性" class="headerlink" title="衝突困難性"></a>衝突困難性</h3><p>異なる2個の入力値から同じハッシュ値を得ること（衝突）が難しい（無視できる程度の確率である）、という性質です。</p><p>この性質を利用して、データを送る際にその入力値から計算したハッシュ値を併せて送ることで、データが改竄されていないかを確認することができます。</p><p>これは、入力データが1ビットでも異なると、全く異なるハッシュ値が出力されるためです。</p><img src="/images/20231124a/Hash_3.png" alt="Hash_3.png" width="860" height="265" loading="lazy"><p>また、衝突困難性には「第二原像計算困難性」という性質があります。</p><p>これは、あるハッシュ値が与えられた時に、それと同じハッシュ値になる別のデータを見つけるのが難しい、という性質です。</p><h4 id="小噺"><a href="#小噺" class="headerlink" title="小噺"></a>小噺</h4><p>その具体例として、学生時代の確率論の授業で、こんな確率を計算したことはあるでしょうか。</p><blockquote><p>(1) N人が所属するクラスの中で、自分と同じ誕生日の人がいる確率<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.209ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2744.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(675,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1078.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1467.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2355.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>は？<br>(2) N人が所属するクラスの中で、誕生日が同じペアが存在する確率<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.209ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2744.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(675,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1078.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1467.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2355.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>は？</p></blockquote><p>(1)は自分と誕生日が同じ人を探すので第二原像を求める例、(2)はクラスの異なる2人で誕生日が一致するかを探すので衝突を見つける例になります。</p><p>計算自体は比較的単純なので、秋の夜長に学生時代に思いを馳せてやってみましょう。</p><ul><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="21.932ex" height="2.79ex" role="img" focusable="false" viewBox="0 -872.7 9693.8 1233.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(675,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1078.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1467.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2355.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3022.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4078.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4800.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(5800.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mfrac" transform="translate(6189.6,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path></g><rect width="1260.7" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(7690.2,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1666,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.439ex;" xmlns="http://www.w3.org/2000/svg" width="25.655ex" height="3.476ex" role="img" focusable="false" viewBox="0 -900.3 11339.4 1536.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(675,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1078.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1467.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2355.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3022.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4078.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4800.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5800.6,0)"><g data-mml-node="mrow" transform="translate(2140.8,394) scale(0.707)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(1500,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-459.4) scale(0.707)"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1533,393.1) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g><g data-mml-node="mo" transform="translate(2210.9,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(2988.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(3377.9,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(4877.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5655.9,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(6543.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6932.9,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g></g><rect width="5298.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></li></ul><p>です。<a href="https://ja.wikipedia.org/wiki/%E8%AA%95%E7%94%9F%E6%97%A5%E3%81%AE%E3%83%91%E3%83%A9%E3%83%89%E3%83%83%E3%82%AF%E3%82%B9">wikipedia</a>にちょうどいいグラフがあったので示します。</p><img src="/images/20231124a/image.png" alt="image" width="1200" height="773" loading="lazy"><p>おおよそ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.611ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4690.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(675,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1078.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1467.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2467.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3134.3,0)"><path data-c="223C" d="M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"></path></g><g data-mml-node="mn" transform="translate(4190.1,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></svg></mjx-container>%に対して、 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.742ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5190.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(675,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1078.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1467.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2467.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3134.3,0)"><path data-c="223C" d="M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"></path></g><g data-mml-node="mn" transform="translate(4190.1,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>%となります。</p><p>自分と同じ誕生日の人を探すと大変なのに、同じ誕生日になるペアが見つかるのはそれほど不思議ではない、というやや直感的でない結果が得られます（「誕生日のパラドックス」というそうです）。</p><p>このように、一般的には第二原像を見つけることより衝突を見つけることの方がずっと簡単です。</p><h2 id="暗号技術の標準化を目指す組織とハッシュアルゴリズムの種類"><a href="#暗号技術の標準化を目指す組織とハッシュアルゴリズムの種類" class="headerlink" title="暗号技術の標準化を目指す組織とハッシュアルゴリズムの種類"></a>暗号技術の標準化を目指す組織とハッシュアルゴリズムの種類</h2><p>このような暗号技術に関して、その安全性を監視・評価している機関が国内外にあります。</p><p>本資料で参考にしている <a href="https://www.nist.gov/">NIST</a>（National Institute of Standards and Technology：アメリカ国立標準技術研究所） は、ITL(Information Technology Laboratory：情報技術研究所) という研究部門で、このセキュリティに関する標準化をおこなっています。</p><p>日本では、<a href="https://www.cryptrec.go.jp/">CRYPTREC</a>（CRYPTography Research and Evaluation Committees：暗号技術評価委員会） という機関が、国内の電子政府推奨暗号の安全性を評価・監視しています。</p><p>NISTは標準のハッシュ関数として、 <a href="https://csrc.nist.gov/pubs/fips/180-4/upd1/final">FIPS 180-4</a> と <a href="https://csrc.nist.gov/pubs/fips/202/final">FIPS 202</a> を公開しています。日本国内でも、<a href="https://www.cryptrec.go.jp/list.html">電子政府推奨暗号リスト</a>としてこれらの利用を公開しています。</p><p>FIPS 180-4では、以下の7つが推奨されるハッシュ関数として規定されました。なお、2011年にはSHA-1の使用を非推奨にする発表を出し、2022年12月にはSHA-1を廃止する発表が出ています。（<a href="https://csrc.nist.gov/news/2022/nist-transitioning-away-from-sha-1-for-all-apps">参考</a>）</p><ul><li>SHA-1</li><li>SHA-2（SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, SHA-512/256)</li></ul><p>SHAの後ろについている数字がハッシュ関数の出力ビット数です。SHA-256は長さが256ビットのハッシュ値を返す、という形です。これらは要求されるセキュリティレベルによって使い分けられます。</p><p>FIPS-202では、SHA-2に加えてSHA-3が追加されました。SHAKEはSHA3を拡張したハッシュ関数で、出力のハッシュ値をセキュリティレベルに応じて変更することができます。</p><ul><li>固定長を返すハッシュ関数： SHA3-224, SHA3-256, SHA3-384, SHA3-512</li><li>可変長を返すハッシュ関数： SHAKE128, SHAKE256</li></ul><h2 id="ハッシュ関数の歴史"><a href="#ハッシュ関数の歴史" class="headerlink" title="ハッシュ関数の歴史"></a>ハッシュ関数の歴史</h2><p>ここでは主なハッシュ関数の歴史に触れます。画像は参考図書にも掲載されているものです。（<a href="https://www.slideshare.net/herumi/6-250590292">引用元</a>）</p><img src="/images/20231124a/hashFunction_history.png" alt="hashFunction_history.png" width="937" height="386" loading="lazy"><ul><li>1992年にMD5が登場しましたが、暗号学的ハッシュ関数ではなかったこともあり、12年後に衝突困難性が破られてしまいました。メッセージから固定値(128bit)のハッシュ値を生成します。この関数は高速で単純だったことから、メッセージの整合性確認などで広く用いられたようです。</li><li>SHA-1は1995年に標準化され、理論的な攻撃可能性の提案に10年かかり、2017年には衝突困難性が破られました。先述の通り、2011年にはSHA-1の使用を非推奨にする発表を出し、2022年12月にはSHA-1を廃止する流れになっています。</li><li>SHA-2は2001年に標準化され、その中のSHA-256は現在も推奨暗号として広く利用されています。</li><li>SHA-3は、SHA-1の攻撃突破が危惧された頃に、これまでとは異なる構造のアルゴリズムが必要になるだろうという危惧から考えられたハッシュ関数群です。しかし幸いなことにSHA-2の衝突困難性がなかなか破られておらず、あまり積極的には利用されていません。</li></ul><p>SHA-2, SHA-3の理論的な側面まで深掘りをしたかったのですが、<del>それを書くには余白が足りず</del> 細かくて時間が足りないので、ここでは割愛します。気になる方は、参考書籍やNISTのFIPSの資料、および参考書籍の巻末に掲載されている資料を参照してください。 </p><h2 id="暗号技術の安全性とは"><a href="#暗号技術の安全性とは" class="headerlink" title="暗号技術の安全性とは"></a>暗号技術の安全性とは</h2><p>暗号技術をせっかく使うなら、理想的には「どうやっても絶対に破られない暗号」を使いたいです。しかし、小さな秘密鍵を使って大きな平文を暗号化しようとする以上、理論的にこのような理想の暗号技術を作ることはできません。そこで、「理想の安全性はないけれども現実的には破れないだろう」という暗号を考え、それを測る指標として「<strong>セキュリティパラメータ</strong>」というもので計算コストを考えます。</p><p>例えば、共通鍵暗号では鍵長が N ビットであればその種類は <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.74ex" height="1.914ex" role="img" focusable="false" viewBox="0 -846 1210.9 846"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></g></svg></mjx-container> 通りあるので、ブルートフォース法（しらみつぶしにパターンを試す）での計算量が <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.226ex" height="2.48ex" role="img" focusable="false" viewBox="0 -846 2751.9 1096"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g><g data-mml-node="mo" transform="translate(2362.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> となります。例えば鍵長が 128 ビットであれば、これはおおよそ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.947ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 3512.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(1722.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container> の計算量で、これはスーパーコンピュータでも数兆年はかかる程度の計算量です。そのため、これは現実的には安全だろうと考えられます。</p><p>ハッシュ関数では、衝突困難性を破るのに必要なコストはおおよそ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.826ex" height="2.587ex" role="img" focusable="false" viewBox="0 -893.3 3459 1143.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(888,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(1388,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3070,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> になっています。SHA-256は256ビットのハッシュ値を返すため、128ビットセキュリティになります。参考図書によれば「現在は128ビットセキュリティなら数十年は安全だろう」と考えられているそうです。それもあり、SHA-256は十分なセキュリティ要件を持ちつつ使いやすいということから広く利用されているようです。</p><p>SHA-512の方が安全なのに、なぜSHA-256の方が広く利用されているのか？という点については、次のような背景があるようです。</p><ul><li>SHA-512の方がより安全ではあるが、SHA-256でも現時点では十分なセキュリティレベルがあり、かつその方がリソース使用量が小さくて済むため</li><li>広く利用されており、他のシステムやプロトコルとの互換性があるため</li><li>暗号技術が広く利用されているのはそれだけ検証が多くなされていることでもあり、信頼感があるため</li></ul><p>なお参考書籍によると、SHA-256およびSHA-512での内部構造を追っていくと、64ビットCPUで大きなデータを扱う場合には内部処理過程の関係でSHA-256よりSHA-512の方が高速に計算できるようです。これは知らなかったので、内部構造を知って驚きました。</p><p>なお、このような安全性というのはあくまで「現在の技術・攻撃手法の範囲で」安全というものであり、未来永劫安全というわけではありません。例えば、昨今発展している量子計算機を用いるとSHA-2の攻撃可能性が進展している研究もあります。また、よりよい攻撃手法が発見されて、セキュリティパラメータが下がる可能性もあります。ある日突然攻撃手法が発展し、人類は思い出した…ということになる可能性もあるので、注意は必要です。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本稿では暗号学的ハッシュ関数について整理し、その種類および歴史を追いました。自分はSHA-256には馴染みがありましたが、SHA3についてはあまり知らず、本稿を書く際に色々と学ぶことができて良い機会となりました。</p><p>あまり実装的な内容は書かないとのことなので、今回はコードについても記載していません。例えばGo言語では、SHA-256などは <a href="https://pkg.go.dev/crypto">crypto</a> パッケージに含まれているので、ご参照ください。</p><p>詳細を書ききれていないところも多くあるため、引用資料先のページなども参考にしていただけると幸いです。それでは快適なハッシュライフ(?)をお送りください。</p><h2 id="終わりに書籍の紹介"><a href="#終わりに書籍の紹介" class="headerlink" title="終わりに書籍の紹介"></a>終わりに書籍の紹介</h2><p>本書は広く「暗号と認証」をテーマに解説している参考書です。全部で9章で構成されており、各章がいくつかのセクションごとに分かれていてまとめもあるため、テンポ良く読み進めることができます。</p><p>第3章から「共通鍵暗号」「公開鍵暗号」「認証」の解説があり、最終章には「高機能な暗号技術」と題してゼロ知識証明や量子コンピュータなどの解説がされます。</p><p>個人的に思う本書の大きな特徴は、数式の解説も交えて暗号技術を解説するという点にあると思います。離散対数問題や楕円曲線暗号といった、高度な暗号技術を学ぶために必要な概念の基本も説明されています。暗号技術を学ぶにはどうしても高度な数学が絡みますが、本書はその部分をなるべく平易に解説していて、暗号技術を学習するハードルを下げている点が高評価です。</p><p>ただし、その分読み手を選んでしまう本かなという印象です。理系出身の方や、基本情報技術者試験などを経てより詳細に暗号技術について知りたい、という意欲のある方には良いかもしれません。巻末も充実しているので、本書を起点にさらに深く学習していくのに役立つ本だと思います。</p><p>本記事はこれで終わります。最後まで読んでいただきありがとうございました。</p><p>アイキャッチ画像はBing Image Creatorを利用しました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20231124a/top.jpg&quot; alt=&quot;&quot; width=&quot;800&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Security" scheme="https://future-architect.github.io/tags/Security/"/>
    
    <category term="ハッシュ関数" scheme="https://future-architect.github.io/tags/%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E9%96%A2%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>「リーダブルコード」を読んだ感想</title>
    <link href="https://future-architect.github.io/articles/20231122a/"/>
    <id>https://future-architect.github.io/articles/20231122a/</id>
    <published>2023-11-21T15:00:00.000Z</published>
    <updated>2023-11-22T02:27:31.600Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20231122a/81+3DpjuMdL._SL1500_.jpg" alt="" width="500" height="709"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、2022年4月新卒入社、流通製造グループ所属の藤戸四恩です。<br><a href="/articles/20231030a/">秋のブログ週間2023</a>の16本目は「リーダブルコード」を読んでみた感想です。</p><p>最近ソースコードを書くことが多く、可読性の高いコードを書くことを意識していますが、いまいち正解がわからず、積読してあった「リーダブルコード」を読んでみたので、印象に残った箇所を紹介したいと思います。</p><h1 id="本書について"><a href="#本書について" class="headerlink" title="本書について"></a>本書について</h1><blockquote><p>美しいコードを見ると感動する。優れたコードは見た瞬間に何をしているかが伝わってくる。そういうコードは使うのが楽しいし、自分のコードもそうあるべきだと思わせてくれる。本書の目的は、君のコードを良くすることだ。（本書「はじめに」より）<br>コードは理解しやすくなければならない。本書はこの原則を日々のコーディングの様々な場面に当てはめる方法を紹介します。名前の付け方、コメントの書き方など表面上の改善について。コードを動かすための制御フロー、論理式、変数などループとロジックについて。またコードを再構成するための方法。さらにテストの書き方などについて、楽しいイラストと共に説明しています。日本語版ではRubyやgroongaのコミッタとしても著名な須藤功平氏による解説を収録。<br><a href="https://www.oreilly.co.jp/books/9784873115658/">引用元 - O’REILLY</a></p></blockquote><p>コードを書く上で命名の考え方や適切なコメントの書き方などが説明されており、総ページ数も200ページ少しと、ちょうどよい分量です。下記の通り15章から構成されています。</p><p>第1章　理解しやすいコード<br>第2章　名前に情報を詰め込む<br>第3章　誤解されない名前<br>第4章　美しさ<br>第5章　コメントすべきことを知る<br>第6章　コメントは正確で簡潔に<br>第7章　制御フローを読みやすくする<br>第8章　巨大な式を分割する<br>第9章　変数と読みやすさ<br>第10章 無関係な下位問題を抽出する<br>第11章 一度に１つのことを<br>第12章 コードに思いを込める<br>第13章 短いコードを書く<br>第14章 テストと読みやすさ<br>第15章 「分&#x2F;時間カウンタ」を設計・実装する</p><h1 id="印象に残った箇所"><a href="#印象に残った箇所" class="headerlink" title="印象に残った箇所"></a>印象に残った箇所</h1><h2 id="不要な単語を捨てる"><a href="#不要な単語を捨てる" class="headerlink" title="不要な単語を捨てる"></a>不要な単語を捨てる</h2><blockquote><p>名前に含まれる単語を削除しても情報が全く損なわれないこともある。例えば、ConvertToString()を短くしてToString()にしても、必要な情報は何も損なわれない。同様にDoServeLoop()をServeLoop()に変えても明確さは同じだ。</p></blockquote><p>個人的には、型変換のメソッドを作成する際に、メソッド名にConvertをつけることが多かったため、命名するときに不要な情報を削除することも必要だと思いました。</p><h2 id="一貫性のある簡潔な改行位置"><a href="#一貫性のある簡潔な改行位置" class="headerlink" title="一貫性のある簡潔な改行位置"></a>一貫性のある簡潔な改行位置</h2><p>以下は、Javaで書かれた任意の速度のネットワークに接続したときに、プログラムがどのように動くかを評価するコードのサンプルです。 また横幅80文字までというコーディング規約があるという想定です。<br>※書籍P.44参考</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PerformanceTester</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">TcpConnectionSimulator</span> <span class="variable">wifi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TcpConnectionSimulator</span>(</span><br><span class="line">        <span class="number">500</span>, <span class="comment">//接続速度(Kbps)</span></span><br><span class="line">        <span class="number">80</span>,  <span class="comment">//平均遅延時間(ms)</span></span><br><span class="line">        <span class="number">200</span>,  <span class="comment">//遅延時間(ms)</span></span><br><span class="line">        <span class="number">1</span> <span class="comment">//パケットロス率(%)</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">TcpConnectionSimulator</span> <span class="variable">t3_fiber</span> <span class="operator">=</span> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TcpConnectionSimulator</span>(</span><br><span class="line">            <span class="number">4500</span>, <span class="comment">//接続速度(Kbps)</span></span><br><span class="line">            <span class="number">10</span>,  <span class="comment">//平均遅延時間(ms)</span></span><br><span class="line">            <span class="number">0</span>,  <span class="comment">//遅延時間(ms)</span></span><br><span class="line">            <span class="number">0</span> <span class="comment">//パケットロス率(%)</span></span><br><span class="line">        );</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">TcpConnectionSimulator</span> <span class="variable">cell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TcpConnectionSimulator</span>(</span><br><span class="line">        <span class="number">100</span>, <span class="comment">//接続速度(Kbps)</span></span><br><span class="line">        <span class="number">400</span>,  <span class="comment">//平均遅延時間(ms)</span></span><br><span class="line">        <span class="number">250</span>,  <span class="comment">//遅延時間(ms)</span></span><br><span class="line">        <span class="number">5</span> <span class="comment">//パケットロス率(%)</span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上記の実装だと、コーデンディング規約により、余計な改行が入っているかつ同じコメントがくり返されているため、下記のようにコメントを最上部に移動して、仮引数を一行で書くように書籍では提案されています。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PerformanceTester</span> &#123;</span><br><span class="line">    <span class="comment">// TcpConnectionSimulator(throughput, latency, jitter, packet_loss)</span></span><br><span class="line">    <span class="comment">//                          [kbps]      [ms]    [ms]    [percent]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">TcpConnectionSimulator</span> <span class="variable">wifi</span> <span class="operator">=</span> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TcpConnectionSimulator</span>(<span class="number">500</span>, <span class="number">80</span>, <span class="number">200</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">TcpConnectionSimulator</span> <span class="variable">t3_fiber</span> <span class="operator">=</span> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TcpConnectionSimulator</span>(<span class="number">4500</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">TcpConnectionSimulator</span> <span class="variable">cell</span> <span class="operator">=</span></span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">TcpConnectionSimulator</span>(<span class="number">100</span>, <span class="number">400</span>, <span class="number">250</span>, <span class="number">5</span>);</span><br><span class="line">&#125;;   </span><br></pre></td></tr></table></figure><p>個人的には、見やすくなったと感じたが、あまり見ないコメントの記載方法(自分が知らないだけかもしれないですが)だっため、</p><p>同じコメントが続くようなときは上記を参考にコメントを記載したいと思いました。</p><h2 id="制御フローを読みやすくする"><a href="#制御フローを読みやすくする" class="headerlink" title="制御フローを読みやすくする"></a>制御フローを読みやすくする</h2><p>下記の二つの実装はどちらがよみやすいでしょうか？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// No.1</span></span><br><span class="line"><span class="keyword">if</span> (length &gt;= <span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// No.2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">10</span> 　&lt;= length)</span><br></pre></td></tr></table></figure><p>書籍では、No.1の方が読みやすいと答える人が多いのではないかと言及されてます。<br>私も最初に読んだ際に直感的にNo.1の方が読みやすいなと感じました。<br>あくまで指針ですが、書籍では下記のように述べられていました。</p><blockquote><p>条件式の左側には、「調査対象」の式。変化する。<br>条件式の右側には、「比較対象」の式。あまり変化しない。</p></blockquote><p>実際に自分が実装する際には、無意識で上記のように実装していましたが、今後条件式を書く際には、上記のことを意識して実装しようと思いました。</p><h2 id="ド・モルガンの法則を使う"><a href="#ド・モルガンの法則を使う" class="headerlink" title="ド・モルガンの法則を使う"></a>ド・モルガンの法則を使う</h2><blockquote><p>論理式を等価な式に置き換える方法がある。</p></blockquote><p>先日レビュアーから受けた指摘事項で、ド・モルガンの法則を使って修正したことがありました。</p><p>具体的には、型がbooleanである変数 <code>isXXX</code>がfalseかつと<code>isYYY</code>がfalseの時にのみ特定の処理を行いたく、下記のように実装していました。</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isXXX <span class="type">bool</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> isYYY <span class="type">bool</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> !(isXXX &amp;&amp; isYYY) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ド・モルガンの法則を使って、下の実装ように修正しました。</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isXXX <span class="type">bool</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> isYYY <span class="type">bool</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> !isXXX || !isYYY &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般的には下の実装のほうが理解しやすいと言われています。</p><p>なぜ下の実装の方がわかりやすくなるのか考えてみました。</p><p>上の実装は、「isXXX と isYYY の両方が真でない場合に実行」となりisXXXとisYYYが複合的な論理演算なため理解しにくいですが、下の実装は、「isXXX が偽、または isYYY が偽の場合に実行」となり、isXXXとisYYYを分けて考えていることで単純な論理演算になるため分かやすくなるのではないかと思いました。</p><h2 id="テストに優しい開発"><a href="#テストに優しい開発" class="headerlink" title="テストに優しい開発"></a>テストに優しい開発</h2><blockquote><p>コードにはテストしやすいものとそうでないものがある。テストしやすいコードには、明確なインタフェースがある。状態や「セットアップ」がない。検査するデータが隠されていない。あとでテストを書くとおもしろいことが起きる。テストしやすいようにコードを設計するのだ！このようにコードを書いていけば、いいコードが書けるようになる！</p></blockquote><p>テストを意識して実装することでメリットはいろいろあるとは思いますが、個人的には、何を目的とするかをより明確な状態で実装できることが要因の一つではないかと思いました。</p><p>また、テスト駆動開発と呼ばれる、テストケースを先に実装することで、より堅牢でバグの少ないコードを生み出すことを目的としている手法をまだ体験したことがないので個人開発などする時に試してみたいと思いました。</p><h2 id="解決策を言葉で説明する"><a href="#解決策を言葉で説明する" class="headerlink" title="解決策を言葉で説明する"></a>解決策を言葉で説明する</h2><p>書籍では、コメントを数行書いての説明でしたが、私自身は、コードを書いている際に詰まったり悩んだりした際に、上長の方に質問をしている途中で解決策が思いうかぶことが多々あり言語化することは大切だと思っております。</p><p>そのため質問をする前に仮想の相手を用いて質問をすることを実践しているのですが、このことは、「ラバーダッキング」や「ラバーダック・デバッグ」<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>と呼ばれる技法で、名称の由来は、プログラマーがラバーダック（ゴム製のアヒル）を持ち歩き、そのダックに対してコードを一行ずつ説明しながらデバッグを行いことが由来だそうです。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>自分が実装をする上でなんとなくやっていることが言語化されており、改めて実装をする上で意識すべきことを考えさせられる良い書籍でした。</p><p>次回は、最終回で、島ノ江励さんの「人を選ぶ技術」です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%90%E3%83%BC%E3%83%80%E3%83%83%E3%82%AF%E3%83%BB%E3%83%87%E3%83%90%E3%83%83%E3%82%B0">https://ja.wikipedia.org/wiki/ラバーダック・デバッグ</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20231122a/81+3DpjuMdL._SL1500_.jpg&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;709&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
    <category term="リファクタリング" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0/"/>
    
    <category term="リーダブルコード" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%BC%E3%83%80%E3%83%96%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89/"/>
    
  </entry>
  
  <entry>
    <title>高校生だけじゃもったいない　仕事に役立つ新・必修科目「情報Ⅰ」のレビューに参加しました</title>
    <link href="https://future-architect.github.io/articles/20231121a/"/>
    <id>https://future-architect.github.io/articles/20231121a/</id>
    <published>2023-11-20T15:00:00.000Z</published>
    <updated>2023-11-21T09:42:56.594Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20231030a/">秋のブログ週間2023</a>、4週目・16本目の記事です。</p><a href="https://www.amazon.co.jp/dp/4569855318"><img src="/images/20231121a/81p3z6gOFlL._SL1500_.jpg" alt="" width="500" height="719"></a><p>中山心太氏の最新作、高校生だけじゃもったいない　仕事に役立つ新・必修科目「情報Ⅰ」のレビューに参加し、お礼に献本をいただきました。ありがとうございました。読んだ感想としては発表されたタイミングでツイートしたのがそれにあたります。結構レビューではがんばってコメントを入れました。レイアウトの都合で入りません、と言われたものもいくつかあったのですが、その反映されなかったコメントも交えて本書の紹介をしようと思います。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">レビューに参加しました！単に教科書をなぞるだけじゃなくて、ところてん節がところどころにあって、社会人であっても、ITの専門家でなくても、リテラシーとしてITが何をできるのかというのを身につける大切さが書かれています。面白かったです。 <a href="https://t.co/tOUBpGiPtN">https://t.co/tOUBpGiPtN</a></p>&mdash; 渋川よしき (@shibu_jp) <a href="https://twitter.com/shibu_jp/status/1714969014127210913?ref_src=twsrc%5Etfw">October 19, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>コンピュータが基礎教養になるというのはどういうことか、というのは最初のP19で紹介されている問題の解法の解説で明らかになります。大学で学ぶような理論であっても、プリミティブな手でも解けるシンプルな計算や数のカウントといった簡単な手順に落とし、それをCPUのパワーで繰り返すことで高速かつ大量のデータに対して解決できるようにするのがコンピュータを使った問題解決です。この例では1つ1つはとてもシンプルな事象なので、それを手でシミュレートしています。これを繰り返すことでかなり複雑な予測でもコンピュータでできそうだという気持ちにさせてくれる本です。</p><p>そのように導入部から説得力のある形で始まるのですが、作者はChatGPT本も数ヶ月前に出しており、そちらも精通しています。最後にはそちら方面の情報のキャッチアップも行えるような構成になっております。情報Iの教科書を読み進めていく上ではガイドとして道を示してくれる本だと思いますし（僕は実際は読んではないですがITパスポートなどの学習にも使えそうという感想）、他の本を読まなかったとしても、単体で「自分の仕事にどのような影響があるのか？」というのを考える大きなきっかけを与えてくれる本かと思います。それだけではなく、P200のような神Excelがなぜダメなのか、なぜこれがDXではないのか、というのが理解できるようになってくるでしょう。</p><p>神Excelの方は説明はあっさりしたものですが、おろらく、後続の事務処理にはまったく手を入れる意思がなく（もしくは権限がない）、紙の申請書を回すフローをそのまま使うために「印刷したら過去の方法と互換性が生まれる」という方式になっており、仕事の流れ自体は全く変わっていない（もしくは増える）ため、本来のDXで得られるはずのメリットが享受できないということを説明しようとしていたのでは、と思います。</p><p>「ITは基礎教養」とか「これからはインターネット」とかふわっとしたものではなく、学ぶことによって何がどう変わるのか、というのをきちんと伝えてくれる良い本かと思います。システム開発をするにあたって、予算の都合で機能（スコープ）を削っていくというのはよくある話ですが、やはりどこを新しくすることでどのようなビジネス上のメリットを得るのか、どこが費用対効果が大きいのかというのをきちんと考え抜くスキルはITにかかわるけど本業がIT出ない人にもとても大切になり、かなり大きな金額のITプロジェクトの成否を決めるポイントになります。</p><p>なお、著者のところてん氏は本に入りきらなかった内容をブログ公開しているのですが、これらも面白いです。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">情報I本の未収録原稿をブログで公開しました。これでまだ半分くらい<br><br>「豚と符号化」が割とお気に入りだったんだけど、紙面の都合でカットされて辛かったので供養<a href="https://t.co/kCsYyfvOcS">https://t.co/kCsYyfvOcS</a></p>&mdash; ところてん (@tokoroten) <a href="https://twitter.com/tokoroten/status/1721189428692127921?ref_src=twsrc%5Etfw">November 5, 2023</a></blockquote><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">情報I本の未収録原稿その２（ChatGPT関連、機械学習回り）です<a href="https://t.co/1hqlQodDPF">https://t.co/1hqlQodDPF</a></p>&mdash; ところてん (@tokoroten) <a href="https://twitter.com/tokoroten/status/1721527135293116850?ref_src=twsrc%5Etfw">November 6, 2023</a></blockquote><p>ITを仕事にしている人にも読み物として面白く、そうじゃない人には今後のビジネスを大きく飛躍させるのか、逆に時代遅れにしてしまうのかの分水嶺となる考えを学べる良い本だと思いますので多くの人に手に取ってもらえると良いのではないかと思います。実際、かなり売れているようです。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">AmazonでIT関連で1位になってた <a href="https://t.co/evVLLInyGd">pic.twitter.com/evVLLInyGd</a></p>&mdash; ところてん (@tokoroten) <a href="https://twitter.com/tokoroten/status/1720646425405710838?ref_src=twsrc%5Etfw">November 4, 2023</a></blockquote> <p>著者のところてん氏にはこのブログ原稿を見てもっと本文を引用してもいいのよ、と言われたのですが、本文を読む楽しみを最大化して欲しいのでこのままにしておきます。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20231030a/&quot;&gt;秋のブログ週間2023&lt;/a&gt;、4週目・16本目の記事です。&lt;/p&gt;
&lt;a href=&quot;https://www.amazon.co.jp/dp/4569855318&quot;&gt;
&lt;img</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
    <category term="情報Ⅰ" scheme="https://future-architect.github.io/tags/%E6%83%85%E5%A0%B1%E2%85%A0/"/>
    
    <category term="コンピュータサイエンス" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>カイゼンジャーニーを読んで新しい挑戦に備える</title>
    <link href="https://future-architect.github.io/articles/20231120b/"/>
    <id>https://future-architect.github.io/articles/20231120b/</id>
    <published>2023-11-19T15:00:01.000Z</published>
    <updated>2023-11-21T06:47:59.735Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20231120b/kaizen.jpg" alt="" width="331" height="466" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。2023年３月キャリア入社、HIG所属の寒河江です。<br><a href="/articles/20231030a/">秋のブログ週間2023</a>、4週目・15本目の記事です。</p><p>現在は新規ビジネス立ち上げのPJに挑戦しており、少人数からスタートしていくにあたり、自分が何かスタートを切る場面もあるのではないかと思い、<a href="https://www.amazon.co.jp/dp/4798153346">カイゼン・ジャーニー たった1人からはじめて、「越境」するチームをつくるまで</a>を読んでみることにしました。</p><p>読んでみて書きたい内容はいろいろあったのですが、かなり長くなりそうだったので概要と感想に留めています。気になった方はぜひ書籍を読んでいただければと思います！</p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>20代のエンジニアである江島を主人公に、様々な状況下で様々な逆境を乗り越えていくストーリーとなっています。</p><p>会社に対し不満を抱えていた江島が社外のイベントに参加した際に、『それで、あなたは何をしている人なんですか？』と問われて自分は何も行動を起こしていないことに気づくところからストーリーが始まり、「一人→二人→チーム→さらに広げて」と、様々な人数や状況で逆境を乗り越え改善していきます。<br>一人の章ではタスクマネジメントの基本が、チームの章ではスクラムなどアジャイル開発の手法とチームマネジメントの手法が記載されており、様々な役割の登場人物が性格まで見えてくる書かれ方になっているため、感情移入もしやすく、現場の雰囲気もつかみやすいです。<br>また、現場の雰囲気まで伝わるため、こういった現場ではこのやり方が合う、こんな不満や意見が出てくる、こういった効果が期待できるのだと理解することが出来ます。</p><p>最後の章では他のチームとともに逆境を乗り越えるのですが、手法は一人の時やチームでの改善活動の時のものに近く、考え方や視点を変えて応用していく様子が描かれています。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>実際の現場での経験を踏まえたうえで、その時の心情も表現しながら記載されているため、自分の過去の経験とも照らし合わせて共感出来るので読みやすかったです。</p><p>一人→二人→チーム→さらに広げてと人数や関わり方が変わっていくのですが、一人で行うものについてはタスクマネジメントの基本が書かれているため、改善項目の有無に関係なく若手の方は読んで実践すると今後タスクマネジメントがしやすくなるのではないかなと思います。</p><p>アジャイル開発の手法については広く浅くといった感じで、ゴリゴリに開発の手法を説明するというより、メンバ視点でもマネジメント視点でも、プロジェクトの課題をどう解決していくか、チームでどう進めていくかという内容になっています。</p><p>アジャイル開発未経験の方には、用語の説明に加え現場の雰囲気も伝わりやすい本となっているので、かなりわかりやすい本だと思います。</p><p>また、チームとプロダクトオーナー、チームとチームリーダー、チームと新メンバそれぞれの境界について書かれている部分もあり、他の著書と比較して<strong>信頼関係</strong>の構築について重きを置いている印象があるので、開発手法を十分理解している方でも普段信頼関係を意識してこなかった方などは読んでみると学びがあるのかなと思います。</p><p>そのため、新人の方や新しくPMになる方、異なる役割間の関係性を改善したいという方にお勧めしたいです！</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>本書で登場した『あなたは何をしている人なんですか？』という言葉は、課題に対してどんな取り組みをしている人かを問う質問で出てきています。</p><p>私は前職で色々と課題を打ち上げてはみてはいたものの、本書の主人公と同様、何かを変えるために自分一人で動いてはいなかったことに気づき主人公同様恥ずかしい気持ちになりました。</p><p>動き始める人は特別な人間ではなく、勇気を出した人（これが難しいけれど）なんだと教えてくれる本だと思うので、<strong>何かを変えたい、自分が変わりたい</strong>と思っても一歩踏み出せない方は是非読んでいただければと思います。</p><p>次は澁川さんの<a href="/articles/20231121a/">仕事に役立つ新・必修科目「情報Ⅰ」のレビューに参加しました</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20231120b/kaizen.jpg&quot; alt=&quot;&quot; width=&quot;331&quot; height=&quot;466&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Management" scheme="https://future-architect.github.io/categories/Management/"/>
    
    
    <category term="マネジメント" scheme="https://future-architect.github.io/tags/%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88/"/>
    
    <category term="アジャイル" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/"/>
    
    <category term="カイゼンジャーニー" scheme="https://future-architect.github.io/tags/%E3%82%AB%E3%82%A4%E3%82%BC%E3%83%B3%E3%82%B8%E3%83%A3%E3%83%BC%E3%83%8B%E3%83%BC/"/>
    
  </entry>
  
  <entry>
    <title>新しいSQLフォーマッターであるuroboroSQL-fmtをリリースしました</title>
    <link href="https://future-architect.github.io/articles/20231120a/"/>
    <id>https://future-architect.github.io/articles/20231120a/</id>
    <published>2023-11-19T15:00:00.000Z</published>
    <updated>2023-11-23T03:06:24.066Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20231120a/top.png" alt="" width="630" height="229"><p>コアテクノロジーグループの山田です。</p><p>先日、新しいSQLフォーマッターである<a href="https://github.com/future-architect/uroborosql-fmt">uroboroSQL-fmt</a>をリリースしました 🎉<br>このツールは弊社が公開している<a href="https://future-architect.github.io/coding-standards/documents/forSQL/SQL%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84%EF%BC%88PostgreSQL%EF%BC%89.html">PostgreSQL向けのSQLコーディング規約</a>に基づき、SQL文をフォーマットするツールです。  </p><h3 id="弊社でのSQLフォーマッター開発の取り組み"><a href="#弊社でのSQLフォーマッター開発の取り組み" class="headerlink" title="弊社でのSQLフォーマッター開発の取り組み"></a>弊社でのSQLフォーマッター開発の取り組み</h3><p>元々弊社では<a href="/articles/20170228/">uroboroSQL Formatter</a>（以下uroboroSQL Formatterを旧版、uroboroSQL-fmtを新版と呼ぶ）というSQLフォーマッターを公開していました。旧版は</p><ul><li>字句解析して得られたトークンを基にフォーマットするという設計になっていたため、SELECT句のエイリアス補完といった文法を考慮する必要のある機能の追加が困難</li><li>Pythonで書かれておりVSCodeの拡張機能として動作させるのが難しい</li></ul><p>という課題を抱えており、それを解消するため新たなSQLフォーマッターを開発していました。</p><h4 id="ANTLR-TypeScriptによるSQLフォーマッターの開発"><a href="#ANTLR-TypeScriptによるSQLフォーマッターの開発" class="headerlink" title="ANTLR+TypeScriptによるSQLフォーマッターの開発"></a>ANTLR+TypeScriptによるSQLフォーマッターの開発</h4><p><a href="/articles/20200606/">Engineer Camp2020</a>でANTLRとTypeScriptによるSQLフォーマッターを開発しました。インターンシップ中にSQLがフォーマットできるようになり、この方向性で旧版が抱えていた課題は解決できそうに思えましたが、SQLの構文解析が著しく遅いという問題点がありました。弊社太田が<a href="https://github.com/antlr/antlr4/issues/2902">ANTLRのJavaScript runtimeの不具合を発見</a>し、かなり高速化されたものの実用的な速さにはならなかったこともありANTLRを用いたSQLフォーマッターの開発はストップしました。</p><p>インターンシップで行ったことについては以下の記事をご覧ください。</p><ul><li><a href="/articles/20200919/">Engineer Camp2020でSQLフォーマッタを開発しました</a></li></ul><h4 id="RustによるSQLフォーマッターの開発"><a href="#RustによるSQLフォーマッターの開発" class="headerlink" title="RustによるSQLフォーマッターの開発"></a>RustによるSQLフォーマッターの開発</h4><p>旧版の課題を解決しつつ十分な速さでフォーマット可能なSQLフォーマッターを開発するため、<a href="https://future-architect.github.io/articles/20220606b/">Engineer Camp2022</a>でRustによるSQLフォーマッターの開発を開始しました。インターンシップ終了時点で簡単なSQLのフォーマットが可能になり、その後もアルバイトとしてSQLフォーマッター開発に参画していただき、旧版のフォーマッターでは実現できなかったSELECT句のエイリアス補完等の機能、<a href="https://marketplace.visualstudio.com/items?itemName=Future.uroborosql-fmt">vscode拡張化</a>、<a href="https://future-architect.github.io/uroborosql-fmt/">wasm化</a>を実現しリリースに至りました。</p><p>インターンシップで行ったことや開発の過程で調査したことは以下の記事をご覧ください。</p><ul><li><a href="/articles/20220916b/">Engineer Camp2022 RustでSQLフォーマッタ作成（前編）</a></li><li><a href="/articles/20220916c/">Engineer Camp2022 RustでSQLフォーマッタ作成（後編）</a></li><li><a href="/articles/20221124a/">Language Server Protocolを用いたVSCode拡張機能開発 (前編)</a></li><li><a href="/articles/20221125a/">Language Server Protocolを用いたVSCode拡張機能開発 (後編)</a></li><li><a href="/articles/20221228a/">Rust製SQLフォーマッタをnapi-rsを利用してVSCode拡張機能化</a></li><li><a href="o/articles/20230605a/">C&#x2F;C++を呼び出しているRustのWASM化</a></li></ul><h3 id="旧版と新版の比較"><a href="#旧版と新版の比較" class="headerlink" title="旧版と新版の比較"></a>旧版と新版の比較</h3><h4 id="処理時間比較"><a href="#処理時間比較" class="headerlink" title="処理時間比較"></a>処理時間比較</h4><p>新しく開発したSQLフォーマッターでは処理時間が大幅に向上しています！<br>巨大なSQLファイルと小さなSQLファイルをフォーマットしたときの処理時間を比較しました。<br>内容によってフォーマットにかかる時間は変わって変わるため、あくまで一例ですが概ね5-500倍ほど性能改善しています。</p><div class="scroll"><table><thead><tr><th></th><th>旧版</th><th>新版</th></tr></thead><tbody><tr><td>3985行のINSERT-SELECT文</td><td>1m53.651s</td><td>0m0.194s</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/crates/uroborosql-fmt/testfiles/dst/select/asterisk.sql">6行のSELECT文</a></td><td>0m0.357s</td><td>0m0.054s</td></tr></tbody></table></div><h4 id="機能比較"><a href="#機能比較" class="headerlink" title="機能比較"></a>機能比較</h4><p>字句解析ベースから構文解析ベースになったことで、下記のような構文を意識した補完やauto fixができるようになっています。</p><h5 id="カラムのAS補完"><a href="#カラムのAS補完" class="headerlink" title="カラムのAS補完"></a>カラムのAS補完</h5><h6 id="フォーマット前"><a href="#フォーマット前" class="headerlink" title="フォーマット前"></a>フォーマット前</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">COLUMN1COL1</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">TBL</span><br></pre></td></tr></table></figure><h6 id="フォーマット後"><a href="#フォーマット後" class="headerlink" title="フォーマット後"></a>フォーマット後</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">COLUMN1<span class="keyword">AS</span>COL1</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">TBL</span><br></pre></td></tr></table></figure><h5 id="カラムエイリアス補完"><a href="#カラムエイリアス補完" class="headerlink" title="カラムエイリアス補完"></a>カラムエイリアス補完</h5><h6 id="フォーマット前-1"><a href="#フォーマット前-1" class="headerlink" title="フォーマット前"></a>フォーマット前</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">COL1</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">TAB1</span><br></pre></td></tr></table></figure><h6 id="フォーマット後-1"><a href="#フォーマット後-1" class="headerlink" title="フォーマット後"></a>フォーマット後</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">COL1<span class="keyword">AS</span>COL1</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">TAB1</span><br></pre></td></tr></table></figure><h5 id="長い関数呼出の折返し"><a href="#長い関数呼出の折返し" class="headerlink" title="長い関数呼出の折返し"></a>長い関数呼出の折返し</h5><h6 id="フォーマット前-2"><a href="#フォーマット前-2" class="headerlink" title="フォーマット前"></a>フォーマット前</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong(</span><br><span class="line">short_func(</span><br><span class="line">param1</span><br><span class="line">,param2</span><br><span class="line">)</span><br><span class="line">,param2</span><br><span class="line">) <span class="keyword">as</span> func_col </span><br><span class="line">,   t.col1</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    tbl t</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong(param1,param2) <span class="operator">=</span> <span class="keyword">case</span> <span class="keyword">when</span> t.col2 <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;pattern1&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;default&#x27;</span> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h6 id="フォーマット後-2"><a href="#フォーマット後-2" class="headerlink" title="フォーマット後"></a>フォーマット後</h6><p><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/max_char_per_line.md">max_char_per_line</a>の設定は関数呼出の長さの上限を表し、デフォルトが50になっています。</p><p>この例ではlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglongは50文字超のため変数ごとに折返され、short_funcは引数入れても50文字以内のためワンライン化されています。</p><p>where句にあってもいい感じに折り返され、横スクロールが発生しにくいようになっています。</p><p>longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglongは50文字超のため変数ごとに折返され、short_funcは引数入れても50文字以内のためワンライン化されています。</p><p>where句にあってもいい感じに折り返され、横スクロールが発生しにくいようになっています。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong(</span><br><span class="line">short_func(param1, param2)</span><br><span class="line">,param2</span><br><span class="line">)<span class="keyword">as</span>func_col</span><br><span class="line">,t.col1<span class="keyword">as</span>col1</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">tblt</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong(</span><br><span class="line">param1</span><br><span class="line">,param2</span><br><span class="line">)<span class="operator">=</span></span><br><span class="line"><span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span></span><br><span class="line">t.col2<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="string">&#x27;pattern1&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="string">&#x27;default&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="新旧の機能比較"><a href="#新旧の機能比較" class="headerlink" title="新旧の機能比較"></a>新旧の機能比較</h5><p>その他新旧の機能比較は下記です。</p><p><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/remove_table_as_keyword.md">テーブルのAS除去</a>や<a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/convert_double_colon_cast.md">::によるキャストをCASTに変換</a>などPostgreSQL限定構文は等価の標準SQLに変換する機能を入れています。</p><div class="scroll"><table><thead><tr><th></th><th>旧版</th><th>新版</th></tr></thead><tbody><tr><td>対応SQL</td><td>全て</td><td>PostgreSQL</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/tab_size.md">タブサイズの設定</a></td><td>o</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/keyword_case.md">予約語</a>、<a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/identifier_case.md">識別子</a>の変換</td><td>大文字化、小文字化</td><td>大文字化、小文字化、変換なし</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/complement_alias.md">エイリアス補完</a></td><td>-</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/complement_outer_keyword.md">outer補完</a></td><td>-</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/complement_column_as_keyword.md">カラムのAS補完</a></td><td>-</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/remove_table_as_keyword.md">テーブルのAS除去</a></td><td>-</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/trim_bind_param.md">バインドパラメータの余計な空白除去</a></td><td>-</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/remove_redundant_nest.md">冗長な空白除去</a></td><td>-</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/max_char_per_line.md">1行の最大長指定</a></td><td>-</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/complement_sql_id.md">SQL ID補完</a></td><td></td><td></td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/convert_double_colon_cast.md">::によるキャストをCASTに変換</a></td><td>-</td><td>o</td></tr><tr><td><a href="https://github.com/future-architect/uroborosql-fmt/blob/main/docs/options/unify_not_equal.md">&lt;&gt;を!&#x3D;に変換</a></td><td>-</td><td>o</td></tr><tr><td>ディレクトリ内のファイルを一括フォーマット</td><td>o</td><td>-</td></tr><tr><td>予約語をファイルで指定</td><td>o</td><td>-</td></tr><tr><td>vscode拡張</td><td>-</td><td>o</td></tr><tr><td>wasm</td><td>-</td><td>o</td></tr><tr><td>eclipse plugin</td><td>o</td><td>-</td></tr><tr><td>IntelliJ plugin</td><td>o</td><td>-</td></tr><tr><td>SublimeText3 plugin</td><td>o</td><td>-</td></tr><tr><td>exe版</td><td>o</td><td>-</td></tr><tr><td>2way-sql</td><td><a href="https://future-architect.github.io/uroborosql-doc/">uroborosql</a>、<a href="https://doma.readthedocs.io/en/latest/">doma</a></td><td><a href="https://future-architect.github.io/uroborosql-doc/">uroborosql</a>、<a href="https://future-architect.github.io/articles/20210803a/">go-twowaysql</a>、<a href="https://doma.readthedocs.io/en/latest/">doma</a></td></tr><tr><td>選択範囲フォーマット</td><td>-</td><td>o  vscode拡張版のみ</td></tr></tbody></table></div><ul><li>PostgreSQL以外のSQLには対応していないため、PostgreSQL以外のSQLのフォーマットには旧版の使用をお勧めしています。</li><li>eclipse pluginとexe版は現在は用意できていないのですが、将来的には作成する予定です！</li></ul><h3 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h3><h4 id="方法1：wasm版を試してみる"><a href="#方法1：wasm版を試してみる" class="headerlink" title="方法1：wasm版を試してみる"></a>方法1：wasm版を試してみる</h4><p>wasm版は<a href="https://future-architect.github.io/uroborosql-fmt/">こちらのデモ</a>でお試しできます。<br>使い方についてはデモページ内の説明をご参照ください。</p><h5 id="wasm版の実行イメージ"><a href="#wasm版の実行イメージ" class="headerlink" title="wasm版の実行イメージ"></a>wasm版の実行イメージ</h5><img src="/images/20231120a/wasm版フォーマットデモ.gif" alt="wasm版フォーマットデモ.gif" width="1200" height="618" loading="lazy"><h4 id="方法2：vscode拡張として使用する"><a href="#方法2：vscode拡張として使用する" class="headerlink" title="方法2：vscode拡張として使用する"></a>方法2：vscode拡張として使用する</h4><ol><li>まず、他の拡張機能と同様に<a href="https://marketplace.visualstudio.com/items?itemName=Future.uroborosql-fmt">uroborosql-fmt - Visual Studio Marketplace</a>をvscodeにインストールしてください。</li><li>settings.jsonに以下の設定を入れてください <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;[sql]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Future.uroborosql-fmt&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>SQLファイルを開き、コマンドパレットから<code>Format Document</code>か、<code>format sql</code>を実行してください<br>  <code>format sql</code>では選択範囲のフォーマットをサポートしています</li></ol><h5 id="フォーマットの設定方法"><a href="#フォーマットの設定方法" class="headerlink" title="フォーマットの設定方法"></a>フォーマットの設定方法</h5><p>フォーマットの各種設定を記載したファイルのパスを指定することができます。<br>指定されなかった場合にはデフォルトのパスにある <code>./.uroborosqlfmtrc.json</code> を読み込みます。<br>設定ファイルが存在しなかった場合、デフォルト値でフォーマットされます。<br>※ 現状は設定ファイルのパスしかできませんが、個々の設定の変更もvscodeの設定画面から出来るようにする予定です。</p><p>設定ファイルは以下のような内容です。<br>個々の設定については<a href="https://marketplace.visualstudio.com/items?itemName=Future.uroborosql-fmt">uroborosql-fmt - Visual Studio Marketplace</a>をご参照ください。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tab_size&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;complement_alias&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trim_bind_param&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyword_case&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;identifier_case&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;max_char_per_line&quot;</span><span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;complement_outer_keyword&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;complement_column_as_keyword&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;remove_table_as_keyword&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;remove_redundant_nest&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;complement_sql_id&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;convert_double_colon_cast&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;unify_not_equal&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="vscode拡張版の実行イメージ"><a href="#vscode拡張版の実行イメージ" class="headerlink" title="vscode拡張版の実行イメージ"></a>vscode拡張版の実行イメージ</h5><img src="/images/20231120a/vscode版フォーマットデモ.gif" alt="vscode版フォーマットデモ.gif" width="817" height="585" loading="lazy"><h4 id="方法3：cliで使用する"><a href="#方法3：cliで使用する" class="headerlink" title="方法3：cliで使用する"></a>方法3：cliで使用する</h4><ol><li>Rustの環境を構築</li><li><code>cargo install --git https://github.com/future-architect/uroborosql-fmt</code> で <code>uroborosql-fmt-cli</code> をインストール</li><li><code>uroborosql-fmt-cli input.sql</code> で <code>input.sql</code> をフォーマットした結果が標準出力に出力されます。<code>uroborosql-fmt-cli input.sql result.sql</code> のように第2引数を渡すと、第2引数で指定したファイルにフォーマット結果が格納されます</li></ol><h3 id="チーム開発で使用する場合"><a href="#チーム開発で使用する場合" class="headerlink" title="チーム開発で使用する場合"></a>チーム開発で使用する場合</h3><ol><li><code>.vscode/settings.json</code> を作成し、以下のように<code>uroborosql-fmt.configurationFilePath</code>の設定を記載してください <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;uroborosql-fmt.configurationFilePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./.uroborosqlfmtrc.json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>チームで使用したいフォーマットの設定を<code>.uroborosqlfmtrc.json</code>に記載し、リポジトリ直下に配置してください</li></ol><h3 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h3><p>まだまだ枯れておらずフォーマットできないことも多いです。元のSQLを壊していないか検証するロジックは入っていますが、意図しない変更が入っていないか確認お願いします。不具合や要望等ございましたらお気軽にissueやPRいただければと思います。</p><p>※ ライセンスはBSLですが競合会社含め開発環境での利用は自由ですので、お気軽に使用ください</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20231120a/top.png&quot; alt=&quot;&quot; width=&quot;630&quot; height=&quot;229&quot;&gt;

&lt;p&gt;コアテクノロジーグループの山田です。&lt;/p&gt;
&lt;p&gt;先日、新しいSQLフォーマッターである&lt;a</summary>
        
      
    
    
    
    <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
    <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
    <category term="uroboroSQL" scheme="https://future-architect.github.io/tags/uroboroSQL/"/>
    
    <category term="Rust" scheme="https://future-architect.github.io/tags/Rust/"/>
    
    <category term="wasm" scheme="https://future-architect.github.io/tags/wasm/"/>
    
    <category term="フォーマッター" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%82%BF%E3%83%BC/"/>
    
  </entry>
  
  <entry>
    <title>次世代型データベース 劔&quot;Tsurugi&quot; とは何？公式サイトから調べてみた！</title>
    <link href="https://future-architect.github.io/articles/20231117a/"/>
    <id>https://future-architect.github.io/articles/20231117a/</id>
    <published>2023-11-16T15:00:00.000Z</published>
    <updated>2023-11-20T00:46:31.888Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20231030a/">秋のブログ週間2023</a>、3週目・14本目の記事です。</p><img src="/images/20231117a/剣山-e1693895394230.jpg" alt="" width="800" height="529"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。新卒入社3年目の佐藤です。</p><p>2023年10月5日にオープンソースとしてリリースされたばかりの次世代RDB“Tsurugi”について公式サイトを元に調べてみたので、特徴や感想などをつらつらと書いいきます。</p><p>気になってた人も、聞いたことがまだ無い人も、ぜひゆるりと読んでいただければと思います。</p><h1 id="次世代RDB-劔”Tsurugi”について"><a href="#次世代RDB-劔”Tsurugi”について" class="headerlink" title="次世代RDB 劔”Tsurugi”について"></a>次世代RDB 劔”Tsurugi”について</h1><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>まずは劔”Tsurugi”（以下、Tsurugi）とはなんぞやというところからですが、ジャンルとしてはRDBMS（MySQL、PostgreSQL、Microsoft SQL Serverなどの仲間）です。</p><p>RDBMSは決して入れ替わりが激しい分野ではなく、特にMySQLなどは20年も使われてきた実績があり、いわば既に完成された分野ではあるのですが、Tsurugiそんな中「純国産」「新型RDBMS」「次世代」というパワーワードをぶら下げて発表されました。</p><p>特に「次世代」がキーワードになるのですが、公式ページには</p><blockquote><p>劔”Tsurugi”は、新しいハードウェアのアーキテクチャに合うRDBMSとして開発を行っています。<br>CPUは微細化が限界に達し、メニーコア化を進めていおり、一方で、メモリーデバイスも高機能（不揮発性メモリーの登場）・高密度化（メモリー容量の伸張）が進んでいます。</p><p>既存のRDBMSは、”コア数が少ない”、”メモリー容量は制限的である”という前提で作られており、基本的なアーキテクチャの思想としては永らく変わっておらず、新しいハードウェアアーキテクチャ（メニーコア・大容量メモリー）で性能を発揮しづらくなっています。</p><p>劔”Tsurugi”は、新しいハードウェアアーキテクチャに合わせた設計思想に基づいて開発され、その上で性能を最大限に発揮するデータベースです。</p></blockquote><p>（引用元：<a href="https://www.tsurugidb.com/about.html">https://www.tsurugidb.com/about.html</a> ）</p><p>と記載があり、これを見てナルホド、要は「今までのRDBMSは省メモリ前提で作られてきたが、ハードウェアが進化してきた現代においてはその前提は古い！今こそ大容量メモリ前提で最適なRDBMSを出すぜ！」という思想なのかと合点がいきました。</p><h2 id="特徴"><a href="#特徴" class="headerlink" title="特徴"></a>特徴</h2><p>ではここからはTsurugiの具体的な特徴ですが、こちらも公式ページを見ると、</p><blockquote><p>①超高速バッチ処理が可能<br>②バッチ&#x2F;オンライン併用が可能<br>③JavaAPIが利用可能</p></blockquote><p>と書かれており、もう少し噛み砕くと、それぞれ</p><ul><li>ハードウエアの性能が向上するほどシステムの性能が高まるように設計されているため、処理速度がめちゃめちゃ速い</li><li>バッチ処理（まとめて定期的にやる処理）を行いながらオンライン処理（リアルタイムで行う処理）が併用できるため、バッチ処理は夜間で…など運用を分けなくて良い</li><li>JavaやpostgresSQLなどの別の仕組みからでも呼び出しやすいインターフェースが用意されているため、システムと連携がしやすい</li></ul><p>という特徴があるそうです。</p><p>ではどれくらい効果があるのか…?ということで、同ページ内に「実際に使ってみてどれくらい有効だったか」という例が4つ載っていたので、そちらも見ていきましょう。</p><h3 id="運用例①-…-画像処理"><a href="#運用例①-…-画像処理" class="headerlink" title="運用例① … 画像処理"></a>運用例① … 画像処理</h3><blockquote><p>点群データ解析による新しい方式の混雑状況把握<br>― 画像処理：IoTデータのリアルタイムDBにおける運用（62Complex株式会社） ―</p></blockquote><p>これは特徴②の「バッチ&#x2F;オンライン併用が可能」が活きた例で、</p><blockquote><p>通常ではデータ処理の取り込みがバッチ処理であるのに対して、劔”Tsurugi”を使用すると、リアルタイムで継続的にデータ処理・取り込みができることを確認しました。これにより、膨大なデータの格納、解析が高速化、効率化され、リアルタイムでの処理が可能になりました。</p></blockquote><p>というコメントが書かれていました。こちらは数字はないものの、データ解析をする上で<br>データが取り込まれるのを待つ⇒処理する<br>という非効率的なフローが解消されており、こういうケースにも使えるんだ…!という学びになりますね。</p><h3 id="運用例②-…-超大規模データ解析"><a href="#運用例②-…-超大規模データ解析" class="headerlink" title="運用例② … 超大規模データ解析"></a>運用例② … 超大規模データ解析</h3><blockquote><p>大量のデータを用いた探索的データ分析（大規模データ解析）<br>― 超大規模データ解析：e-Scienceへの適用（大学共同利用機関法人 自然科学研究機構国立天文台） ―</p></blockquote><p>こちらは特徴①の「超高速バッチ処理が可能」が活きた例で、</p><blockquote><p>従来システムに対して、分散クラスターでの速度の向上（10-100倍）の有効性が確認された</p></blockquote><p>とのこと。<br>大分幅はあるものの、<em>最大で100倍</em>効率化されるというのはもはやロマンを感じてしまいます。シンプルにめっちゃ速くなってますね。</p><h3 id="運用例③-…-災害対応"><a href="#運用例③-…-災害対応" class="headerlink" title="運用例③ … 災害対応"></a>運用例③ … 災害対応</h3><blockquote><p>大規模災害発生後の初動・応急対策段階における情報整理のためのプラットフォームに適用<br>― 災害対応：災害発生後の初動・応急対策段階での活用（株式会社パスコ） ―</p></blockquote><p>こちらも特徴①の「超高速バッチ処理が可能」が活きた例で、</p><blockquote><p>膨大な空間情報の収集データを利用した検証で、登録・処理時間などの大幅な短縮につながることを確認しました。<br>大規模災害発生後の初動・応急対策段階における情報整理のためのプラットフォームへの適用・活用が期待</p></blockquote><p>と記載されていました。<br>Tsurugiは「ハードウエアの性能が向上するほどシステムの性能が高まる」ため、緊急時などの「リソースは多く割いても良いから、とにかく速く」というケースに非常にマッチしていて良い例と思いました。<br>そういったケースが想定される場合は一考ですね。</p><h3 id="運用例④-…-業務管理"><a href="#運用例④-…-業務管理" class="headerlink" title="運用例④ … 業務管理"></a>運用例④ … 業務管理</h3><blockquote><p>原材料の計算・シミュレーションに適用で為替の変動にも対応<br>― 業務管理：生産性向上への適用（株式会社アンデルセンサービス） ―</p></blockquote><p>こちらも特徴①の「超高速バッチ処理が可能」の例ですね。</p><blockquote><p>分散処理のSparkで約50分かかっているところ、劔”Tsurugi”では25分の1となる約2分間で終了</p></blockquote><p>最早コメントの余地すらないです。速くなりすぎです。。。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>最後まで読んでいただいて、ありがとうございました。</p><p>今回は秋の読書感想文ということでしたが、電車でたまたま「純国産!?のRDBMS!?」と目に入ったのをきっかけに記事にしてみました。</p><p>概要程度でさくっと読めるように書いてみたつもりなので「なんか超速いらしい！」程度に伝わっていれば幸いです。</p><p>日ごろ日本発のIT技術がもっとグローバルになれば…と考えているので、このTsurugiに使えそうなケースがあれば、導入を考えたいですね。</p><p>ありがとうございました。</p><h1 id="気になった人向け"><a href="#気になった人向け" class="headerlink" title="気になった人向け"></a>気になった人向け</h1><p>今回は書籍ではなく公式ページから情報を仕入れましたが、書籍も出版されているので紹介しておきます。</p><ul><li>次世代高速オープンソースRDB Tsurugi</li></ul><p><a href="https://amzn.asia/d/j4ScwcY">https://amzn.asia/d/j4ScwcY</a></p><p>また、公式ページからも辿れますが、GitHubのリンクも掲載しておきます。</p><p><a href="https://github.com/project-tsurugi/tsurugidb">https://github.com/project-tsurugi/tsurugidb</a></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://www.tsurugidb.com/about.html">https://www.tsurugidb.com/about.html</a></p><p>※本記事の引用文は全て↑からの引用となります</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20231030a/&quot;&gt;秋のブログ週間2023&lt;/a&gt;、3週目・14本目の記事です。&lt;/p&gt;
&lt;img src=&quot;/images/20231117a/剣山-e1693895394230.jpg&quot; alt=&quot;&quot; width=&quot;800&quot;</summary>
        
      
    
    
    
    <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
    <category term="DB" scheme="https://future-architect.github.io/tags/DB/"/>
    
    <category term="Tsurugi" scheme="https://future-architect.github.io/tags/Tsurugi/"/>
    
  </entry>
  
  <entry>
    <title>Python Distilledは幅広い人にPythonの基礎を叩き込む本</title>
    <link href="https://future-architect.github.io/articles/20231116a/"/>
    <id>https://future-architect.github.io/articles/20231116a/</id>
    <published>2023-11-15T15:00:00.000Z</published>
    <updated>2023-11-20T00:45:54.666Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20231116a/image.png" alt="" width="516" height="660" loading="lazy"><p><a href="/articles/20231030a/">秋のブログ週間2023</a>、3週目・13本目です。</p><p>Python Distilledという本がオライリーから出版されました。作者のDave Beazleyはかなり昔からPythonを使い込んでいる人ですので、この本には信頼しかない、と思い読んでみました。Daveは大学の教授をしていて、コンピュータサイエンスで表彰もされている筋金入りです。本家PyConでも何度も発表されているようです。Python歴は27年でOSSとしてはC&#x2F;C++をラップして他の言語で使えるようにコードを生成するSWIGはすでに20年以上の歴史がありますし、パーサージェネレータのPLYとSLY。curioというコルーチンのライブラリなどを作っています。僕は以前、SWIGのドキュメント翻訳をしてCマガジンに特集記事を書かせていただいたこともあり、僕の大学時代の顔写真がSWIGのウェブサイトに公開されていたりします。</p><img src="/images/20231116a/スクリーンショット_2023-11-04_19.52.36.png" alt="" width="1173" height="1252" loading="lazy"><p>そういう世の中のほぼすべてのPython本の著者よりも長いPython歴を持つ著者で、大学やそれ以外の場でPythonを20年以上教え続けているということを考えると、この本の重みがつたわってくるかと思います。</p><h1 id="誰におすすめな本なのか？"><a href="#誰におすすめな本なのか？" class="headerlink" title="誰におすすめな本なのか？"></a>誰におすすめな本なのか？</h1><p>さっと読んでみたところ、本当にプログラミング言語を学ぶのが初めてで、1つ目の言語としてPythonを覚悟を持って学ぶ人(学問の基礎として)、あるいは長らくPythonを書いてきて、現代のPythonの知識にリフレッシュしたい人に最適な気がしました。また、他の言語を大学の授業のような場で学んだ人がPythonを学ぶのにも良いと思います。</p><p>趣味でプログラミングを触ってみたいが、すぐにWebサービスを作ったり動くものにフォーカスしたい人とかとりあえずちょっと触ってみたい人には教科書然としたところがちょっとあたりが強めに感じるかもしれませんが、僕は逆に大学の授業のプログラミングを思い出しては懐かしい気持ちを覚えたりもしました。</p><p>現在サポートがまだ行われている最低限のバージョンがこの本のターゲットとほぼ同じため、ここに書いてあることはすべて「今使えるPythonの文法」を完全に内包しています。</p><p>僕が翻訳したエキスパートPythonプログラミング改訂4版などは、テストの仕方や実践向けのパフォーマンスチューニング、大規模開発に向けたアーキテクチャの話なども入っています。この本はそのようにPythonでお金を稼ぐための本というよりは、Pythonの知識をがつっとインストールする人向けの本という趣です。まさに教科書という感じです。</p><p>PyCon APAC 2023の基調講演でも紹介のあった<a href="https://utokyo-ipp.github.io/course/">京都大学&#x2F;東京大学のPython講座の教科書</a>と比べると、こちらの方はよりPythonの原則である特殊メソッドによるカスタマイズ、非同期I&#x2F;Oなど、Pythonの言語コアへの説明が手厚いと感じます。一方で、京都大学・東京大学の方は、おおむね60%ぐらいはオーバーラップしているものの、AI教育を見据えてそちらのライブラリの使い方を学ぶ、それを扱うための文法にフォーカスしている気がします。こちらはITが専門の学科じゃない人も学ぶための本ということだったので、そちらを読んだ人がもう少し言語力を鍛えるのにも良い気がします。</p><h1 id="どういう知識のリフレッシュがあるのか？"><a href="#どういう知識のリフレッシュがあるのか？" class="headerlink" title="どういう知識のリフレッシュがあるのか？"></a>どういう知識のリフレッシュがあるのか？</h1><p>言語知識って単にカタログ的に追加していけばいいというわけではなく、周辺機能とのトレードオフが発生したりもします。例えば、本書で説明されている内容で「なるほど」と思ったのが、ジェネレータの用途です。これはループ構文という多くのPython開発者が慣れているインタフェースを通じて高度な処理を書くための文法だったりもしますが、「async&#x2F;awaitが入ったことで、ジェネレータが過去に必要とされた用途の一部はasync&#x2F;awaitの方がよくなったよ」というものがありました。</p><p>このように、新しい文法要素が入った結果の現在の適切な書き方などは、単にバージョンの差分を追いかけていくだけでは身につきにくいと言えます。あとは、yieldの返り値を使うとループ構文としては使えないよとか、ジェネレータはエンドユーザーからは隠されるライブラリの内部実装として使われるケースも多くなってきているよ（コンテキストマネージャの実装I&#x2F;Fとして）とかは、確かに言われてみるとそうだな、と思わされるなどしました。</p><p>あとは、僕自身もそうですが、以前からPythonを書いていて、Python歴が長くなった人には、こういう頭の整理や知識のリフレッシュができるという本書の使い方も有用だと思います。最初の方のファイルオープンのコーディングも、コンテキストマネージャを使い、セイウチ演算子も使ったサンプルがさっとでてきたりします。どちらも僕がPythonを学んだときにはなくて、コンテキストマネージャぐらいは使うものの、セイウチ演算子を使ったファイル読み込みのイディオムはこうなっているのか、というところは新鮮に感じました。</p><p>それ以外にも僕が知らなかった（追いかけきれてなかった）ものでメモしたのは以下のものとかですね。</p><ul><li>例外の連鎖(<code>raise ApplicationError() from e</code>)と<code>__cause__</code>属性</li><li><code>lambda</code>のデフォルト引数で変数を先行束縛</li><li><code>async with</code></li><li><code>yield from</code></li><li><code>from module import *</code>は名前空間のトップでしか使えない</li><li><code>pkgutil.get_data()</code></li><li><code>bytearray</code></li></ul><p>データクラス周りは少し言及があってもいいのにな、とちょっと思いました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>着実にPythonを自らの血肉にしていきたい人向けの本です。特殊メソッドが列挙されてたり、組み込み関数を全部紹介とかちょっとストイックだな、と思う部分もあるものの、Pythonの地力を上げるにはおそらくいつかはやることになるものだと思うので、こういうのを若いうちにしっかりやっておくというのはすごく良いと思います。</p><p>次は佐藤さんの <a href="/articles/20231117a/">次世代型データベース 劔”Tsurugi” とは何？公式サイトから調べてみた！</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20231116a/image.png&quot; alt=&quot;&quot; width=&quot;516&quot; height=&quot;660&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
    <category term="Python Distilled" scheme="https://future-architect.github.io/tags/Python-Distilled/"/>
    
  </entry>
  
  <entry>
    <title>アプリエンジニアがコンテナ開発の基本を読んで学ぶ</title>
    <link href="https://future-architect.github.io/articles/20231115a/"/>
    <id>https://future-architect.github.io/articles/20231115a/</id>
    <published>2023-11-14T15:00:00.000Z</published>
    <updated>2023-11-16T00:07:03.536Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20231115a/image.png" alt="" width="520" height="663" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。HealthCare Innovation Group(HIG)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>所属の清水です。</p><p><a href="/articles/20231030a/">秋のブログ週間2023</a>、3週目・12本目の記事です。</p><p>Kubernetesクラスタ上で構築された学習基盤<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>を業務で利用することをきっかけに、「<a href="https://book.impress.co.jp/books/1120101031">Dockerコンテナ開発・環境構築の基本</a>」という書籍を読んでみました。</p><p><a href="https://book.impress.co.jp/books/1120101031">https://book.impress.co.jp/books/1120101031</a></p><p>これまでDocker・Kubernetesをあまり触ったことがないエンジニアが、書籍を読んだ感想を書いていきます。</p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span><p><a href="https://ja.wikipedia.org/wiki/Kubernetes">Wikipedia</a>によると、「クバネティス&#x2F;クバネテス&#x2F;クーべネティス」と読まれているようです。<br>「クーベネティス」だと予測変換にKubernetesが出てくる（手元のiOS、macOS）ため、「クーベネティス」と打っています。</p></div><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>本書は、Dockerをベースにコンテナ技術の理解・実践からKubernetesクラスタ上でアプリケーションを稼働させる仕組みを解説した書籍です。<br>サンプルのソースコード付きで、書籍の中でも概要の説明→コマンドで実現する方法という流れで分かりやすかったです。<br>各コマンドで何をしているのか、コマンドの書式付きで解説があったので初心者にも理解しやすい内容になっていました。</p><p>読む前は、Docker・Kubernetesのコマンドを調べて業務を進めることはできるものの、理解が浅いためコンテナを利用して開発を進める際に抵抗感がありました。<br>書籍を通して、普段使っているコマンドの中でどんなことを実現しているか・マニフェストを用意する上で考慮すべきことを理解したことで、気持ちの問題ですが臆せず開発できるようになりました。</p><p>また、実行環境の統一のため、使用した実行環境がローカルPCではなくGoogle Cloud Platform（以降GCP）であったのが普段ほぼローカルで開発している私にとっては印象的でした。<br>Docker・Kubernetesの勉強になったのはもちろん、サンプル中にTrivy<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>やGitHub Actionsを使うシーンもあり、名前は知っているけどまだ使ったことない技術に触れたのもいい機会でした。</p><h1 id="概要と気になった内容"><a href="#概要と気になった内容" class="headerlink" title="概要と気になった内容"></a>概要と気になった内容</h1><h2 id="コンテナアプリケーション開発について（第1章）"><a href="#コンテナアプリケーション開発について（第1章）" class="headerlink" title="コンテナアプリケーション開発について（第1章）"></a>コンテナアプリケーション開発について（第1章）</h2><p>既存のアプリケーション開発及び仮想化の仕組みについて説明した上で、コンテナアプリケーション開発におけるサイクルを説明されています。</p><p>本章では、主に以下の点を解説されています。</p><ul><li>仮想マシンとコンテナイメージの違い</li><li>コンテナイメージの構造</li></ul><p>「アプリを動かす土台を共有して、その土台の上でアプリを動かすことで環境差異を減らす」というイメージは元々ありましたが、<br>上記2点を押さえることで、仕組みやメリットの理解が深まりました。</p><p>また、コンテナ技術を利用することによるメリットだけではなく、コンテナアプリケーション開発スタイルが「銀の弾丸ではない」ことを、章の最後に触れていたことが印象的です。</p><h2 id="コンテナアプリケーション開発のライフサイクル（第2章・第3章）"><a href="#コンテナアプリケーション開発のライフサイクル（第2章・第3章）" class="headerlink" title="コンテナアプリケーション開発のライフサイクル（第2章・第3章）"></a>コンテナアプリケーション開発のライフサイクル（第2章・第3章）</h2><p>GCPを用いてにDocker環境をセットアップして、実際に動かしながらコンテナアプリケーション開発におけるライフサイクル「Build・Ship・Run」を説明されています。</p><p>「Build・Ship・Run」はそれぞれ、</p><ol><li>Build: 実行ファイル及びそれを動かすために必要なOS・ライブラリをパッケージ化</li><li>Ship: Buildしたコンテナイメージの配布及び共有</li><li>Run: Shipしたコンテナイメージの起動と操作</li></ol><p>を指します。</p><p>本章を読むことで、以下の気になっていたことがすっきり分かりました！</p><ul><li>Dockerfileで、ローカルのファイルなどをコンテナイメージに含める<code>ADD</code>と<code>COPY</code>の使い分け</li><li>Dockerfileで、<code>&amp;&amp;</code>で結合した<code>RUN</code>命令が多い理由</li><li>コンテナとコンテナホスト（Dockerを動かしているマシン）間でのデータのやり取り</li></ul><h2 id="Kubernetesの仕組みと利用の流れ（第4章・第5章）"><a href="#Kubernetesの仕組みと利用の流れ（第4章・第5章）" class="headerlink" title="Kubernetesの仕組みと利用の流れ（第4章・第5章）"></a>Kubernetesの仕組みと利用の流れ（第4章・第5章）</h2><p>Kubernetesの概要から<code>kubectl</code>コマンドを利用してコンテナアプリケーションを動かす流れを説明されています。</p><p>本章では、以下の点が記載されています。</p><ul><li>なぜコンテナオーケストラレータが必要か</li><li>Kubernetesにおける自動修復（セルフヒーリング）の仕組み</li><li>Kubernetesのリソースとマニフェスト（コンテナアプリケーションを実行するための手順を記載したyamlファイル）の結びつき</li></ul><p>第4章では主に説明を、第5章では実際に手を動かす部分を主に記載しています。<br>第5章で実際に手を動かしつつ、第4章に戻って確認することで仕組みがどう実現されているか理解が深まりました。</p><h2 id="ローカル開発とCI-x2F-CD（第6章・第7章）"><a href="#ローカル開発とCI-x2F-CD（第6章・第7章）" class="headerlink" title="ローカル開発とCI&#x2F;CD（第6章・第7章）"></a>ローカル開発とCI&#x2F;CD（第6章・第7章）</h2><p>ローカル開発を効率的にするツールの紹介及びコンテナアプリケーション開発におけるCI&#x2F;CDについて説明されています。</p><p>本章では、以下の点を学ぶことができます。</p><ul><li>DokcerfileやKubernetesのマニフェストを加味したCI&#x2F;CD</li><li>CIOpsとは？GitOpsとは？</li><li>GitHub Actionsを利用したコンテナアプリケーション開発のCI&#x2F;CD</li></ul><p>普段、業務ではGitLabを利用しているため、GitHub Actionsワークフローの作成と実行が丁寧に記載あって助かりました。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>Docker・Kubernetesに関する基礎を固めるためには、とても良い書籍だと思いました。<br>サンプル付きで、<code>docker</code>コマンドや<code>kubectl</code>コマンドとコンテナ技術の仕組みを結びつけながら理解することができました。<br>DockerやKubernetesを少し触ったことがあり、もう一歩理解したい方におすすめです。</p><p>次は澁川さんの<a href="/articles/20231116a/">Python Distillesは幅広い人にPythonの基礎を叩き込む本</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">医療・ヘルスケア分野での案件や新規ビジネス創出を担う、2020年に誕生した事業部です。設立エピソードは、以下記事をご覧ください。<a href="https://note.future.co.jp/n/n8b57d4bf4604">&quot;新規事業の立ち上げ　フューチャーの知られざる医療・ヘルスケアへの挑戦&quot;</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">学習基盤に関する記事は、以下記事をご覧ください。<a href="https://future-architect.github.io/articles/20210115/">MLOpsことはじめ ～実験管理導入と学習基盤の構築～</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">Trivy. Dockerイメージの脆弱性を検知するOSS<a href="https://github.com/aquasecurity/trivy">https://github.com/aquasecurity/trivy</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20231115a/image.png&quot; alt=&quot;&quot; width=&quot;520&quot; height=&quot;663&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
    <category term="Dockerコンテナ開発・環境構築の基本" scheme="https://future-architect.github.io/tags/Docker%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E9%96%8B%E7%99%BA%E3%83%BB%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E3%81%AE%E5%9F%BA%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>「TEAM GEEK」を読んでメンバー視点で良いチームについて考える</title>
    <link href="https://future-architect.github.io/articles/20231114b/"/>
    <id>https://future-architect.github.io/articles/20231114b/</id>
    <published>2023-11-13T15:00:01.000Z</published>
    <updated>2023-11-14T06:04:03.297Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20231030a/">秋のブログ週間2023</a>、11本目です。</p><p>ITコンサルタントになって2年目。自分のタスクだけでなく周りも見えるようになってきた中で、「個人の技術」だけでなく「チームとしての地力」がプロジェクトの成功にとって、大きな役割を占めていると改めて感じることが増えてきました。そのため今回は、ITの現場におけるチームワークについての本を読もうとアマゾンを開いて一番に出てきた<a href="https://www.oreilly.co.jp/books/9784873116303/">Team Geek</a>を読んだ感想や自分の思考を共有します。</p><h2 id="本を読む前に考えていたこと"><a href="#本を読む前に考えていたこと" class="headerlink" title="本を読む前に考えていたこと"></a>本を読む前に考えていたこと</h2><p>実際にITの現場に参画するまでは、他の業界よりドライで対面のコミュニケーションは少なく、成果物がより多くのことをものがたる現場だと思っていましたが、いざ飛び込んでみるとむしろ他の業界よりもより強力なチームとしての力が求められているのではないかということをひしひしと感じています。</p><p>他業界に進んだ友人の話を聞いていると営業などでは個人としての成績が全てで、お客さんとのコミュニケーションは重要なものですが、それはサービスを購入してもらうために関係づくりの一環で、チームとしてのそれとは違うものです。</p><p>それに対して、ITの現場では一つの成果物を大勢で作るにあたっての協力体制としての性質を持ったコミュニケーションが必要になるため、チームワークとしてどのように人と関わるかが重要になってきます。<br>ではそこで、「１メンバーである自分がどのようにチームにいい影響を与えられるのか？」、そう言ったことを求めてこの本を手に取りました。</p><p><strong>今回の目的</strong></p><ul><li>ITの現場における「いいチーム」を確認する</li><li>理想のリーダー像からチームにとって優良なメンバーを逆算する</li></ul><h2 id="結論ファースト：いいチームの定義"><a href="#結論ファースト：いいチームの定義" class="headerlink" title="結論ファースト：いいチームの定義"></a>結論ファースト：いいチームの定義</h2><p><em><strong>いいチームとは『強い文化』があるチーム</strong></em><br><em><strong>その文化はHRT(Humility:謙虚、Respect:尊敬、Trust:信頼)がベースになっている必要がある</strong></em></p><h2 id="ITの現場における「いいチーム」とは何か？"><a href="#ITの現場における「いいチーム」とは何か？" class="headerlink" title="ITの現場における「いいチーム」とは何か？"></a>ITの現場における「いいチーム」とは何か？</h2><h3 id="誰がチームを作ってる？"><a href="#誰がチームを作ってる？" class="headerlink" title="誰がチームを作ってる？"></a>誰がチームを作ってる？</h3><p>多くの人がいいチームとは、高いスキルを持ち合わせたメンバーを、さらに優秀かつ統率力に長けたリーダーがまとめ上げることで、できると考えているかもしれません。（あるいは自分のタスクだけを考えていて、チームとしてのそもそも完成度は意識していないかも…）</p><p>個々のメンバーが与えられたタスクをミス無くこなし、最終段階で全員が作ったものを機械的に組み合わせることで良いプロダクトが完成するならそれで問題ないかもしれません。</p><p>しかし多くの人が経験しているように、メンバーはミスをするし、バグの修正、結合のゴタゴタなどで現実はそう甘くありません。</p><p>筆者は優秀なチームを作り上げるのは優秀なリーダーではなく、「強い文化」だと言います。</p><h3 id="強い文化とは"><a href="#強い文化とは" class="headerlink" title="強い文化とは"></a>強い文化とは</h3><p>本書で定義されている「強い文化」はHRT(Humility:謙虚、Respect:尊敬、Trust:信頼)が根付いている状態とされています。こうした文化はチームリーダーが作るわけではなくメンバー全員んが作るべきものであり、そのようにして作られた文化は、チームが同じミスを犯すことを防ぎ、チームにとって有害な人からチームの生産性を守ってくれます。さらには望ましい文化を持ったチームには似た性質を持つ優秀な人材が引き寄せられるため、より生産的で強固なチームが出来上がります。</p><p>上記に挙げられたHRTの３項目はごく当たり前のように聞こえます。大人として当然のことでしょうと。ただ、反例を探せと言われたら、身近にすぐに見つかるのではないでしょうか？（私はあります…）</p><p>問題にぶつかっても一人で抱え込んでしまうメンバーがいたり、コードへのレビューを自分への攻撃を思い込んで凹んでしまったり..。</p><p>それではどうのように対処し、「強い文化」を作ればいいのでしょうか？</p><h2 id="強い文化を作るには"><a href="#強い文化を作るには" class="headerlink" title="強い文化を作るには"></a>強い文化を作るには</h2><p>先に定義された「強い文化」をチームに根付かせるために意識必要なポイントについていくつか抜粋して紹介させていただきます。</p><ul><li><strong>エゴを捨てる</strong><br>わかりやすい例は、コードレビューの時に、指摘を建設的なものにするために自己主張を捨てる（技術の差を見せつけるようなマウントまがいのレビューはしない）、逆に指摘をもらう際に「自分は自分が書いたコードではない」と認識して、過剰に反応することなく、謙虚に受け入れる、といったことです。個人ではなくチームとしてのミッションにフォーカスすることが必要とされています　</li><li><strong>非同期のコミュニケーション</strong><br>ミーティングの参加人数を減らし、チャットや課題管理ツールを広く共有することで情報の風通しと効率が向上し、よりチームが集中すべきものに力を注げるようになります。ただ筆者は対面でのコミュニケーションをおろそかにすべきではないとも注意喚起しています。情報の共有を広げることはツールを利用することで可能になりますが、よりメンバー間に文化を染み込ませ強固にるために対面でのコミュニケーションは必要なものとされています。</li><li><strong>合意ベースでプロジェクトを進める</strong><br>意思決定プロセスでメンバーが責任を持てるようにすることで文化の根付きを強化することができます。トップダウン型のチームでは、優秀なリーダーがそうでないメンバーにオーダーする形になり、メンバーの自己選択機会が奪われてしまい、各メンバーが文化を作ることに役割を持てなくなるため、「強い文化」は育ちません。また、優秀なメンバーは裁量範囲の広いチームを好むため、チームのレベルがますます上がる傾向になります。</li></ul><h2 id="強い文化を作れるチームリーダーとメンバーとは？"><a href="#強い文化を作れるチームリーダーとメンバーとは？" class="headerlink" title="強い文化を作れるチームリーダーとメンバーとは？"></a>強い文化を作れるチームリーダーとメンバーとは？</h2><p>ここまでいいチームの定義とその中核である「強い文化」について確認してきましたが、ここからさらに解像度を上げて、強い文化を作れるチームリーダーとはどのようなリーダなのかを掘り下げながら、そこから逆算して、リーダーと化学反応を起こし「強い文化」づくりに貢献できるメンバー像について考えていきたいと思います。</p><h3 id="エゴを捨てる"><a href="#エゴを捨てる" class="headerlink" title="エゴを捨てる"></a>エゴを捨てる</h3><p>エゴからの脱却は強い文化づくりの中で言及されていましたが、いいチームリーダーについて語る際にも再度登場します。それほどチームにとって大事なことであり、リーダーにとってはメンバーを信頼してマイクロマネジメントしないことがこれに当たります。</p><p>いいチームリーダーになるために、すべての事象を正しく把握して、ことごとく正していく必要はなく、メンバーへの「質問」を駆使することで、メンバーに責任感を芽生えさせろとあります。</p><ul><li>逆算される理想のメンバー像<ul><li>不安を抱かせず、やり切る力を持っているメンバー</li></ul></li><li>説明<ul><li>リーダーが不安になりそうなポイントを先回りして解消し、いちいち確認されずとも何を行なっているかが伝わる透明性を保ち、自分でタスクを推進できる姿を見せることでリーダーは意思決定に集中でき、メンバーはより裁量を持って仕事ができるようになります</li></ul></li></ul><h3 id="振る舞って欲しいように人を扱う"><a href="#振る舞って欲しいように人を扱う" class="headerlink" title="振る舞って欲しいように人を扱う"></a>振る舞って欲しいように人を扱う</h3><p>筆者はメンバーを信頼していないことを伝えたいのなら、メンバーを子供のように扱いなさい、と言っています。人は扱われたように振る舞ってしまう習性があるためです。</p><p>そのためリーダーが子供のように扱えば言われたことしかせず、自立性を持った人間として扱えば期待以上の成果を持ってくることもあるとされています。</p><ul><li>逆算される理想のメンバー像<ul><li>一段階上の働きを想像させられるメンバー</li></ul></li><li>説明<ul><li>逆に言えば、意識的に扱われたいように振る舞うことが重要になります。任せられたタスクを期待以上の成果で応えることができれば、自分の能力を示し、リーダーがより大きな裁量権を与えたときにそのメンバーがどのような働きをしてくれるか想像できるようになます。書籍の中でも、自分の責任範囲を広げようとすることで、自分とチームのレベルの底上げにつながるとされています</li></ul></li></ul><h3 id="幸せを追い求める"><a href="#幸せを追い求める" class="headerlink" title="幸せを追い求める"></a>幸せを追い求める</h3><p>「強い文化」を作るリーダーはメンバーの心理状態を良い状態で保つことが上手いアマチュアの心理学者であると本書では言われています。</p><p>定期的なレクリエーションや、すれ違った際の会話でメンバーのストレスやプレッシャーを解消することがリーダーには求められます。</p><ul><li>逆算される理想のメンバー像<ul><li>感情を発信するメンバー</li></ul></li><li>説明<ul><li>メンタル面のケアをする側にとって難しいことは、ケアの手段が適切かどうかが受け取る人間によって変わる点です。メンバー側から現在の状態を発信することで、チームの中の適切なコミュニケションの形を双方から擦り合わせることができ、各個人の負担軽減やチームのパフォーマンス向上につながります</li></ul></li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>「Team Geek」を通して理想のチームの姿とリーダー像を再確認し、そこから逆算してメンバーに求められるものについて考えてみました。</p><p>チームを題材にした書籍ではリーダーの責務やミッションステートメントのような大きなテーマについて主に語られることが多い気がしていて、読み終わった後に、「結局何からすればいいんだ？」となりがちでしたが、ITという領域に絞り、さらにチームの文化に焦点を当てられていたこの本はチームのレベルを上げるために１メンバーができることをイメージしやすかったです。</p><p>技術力を上げていくのはもちろんんですが、チームとして捉えた時に、貢献できる余白を明確に見つけることができたので、曖昧にながちなチーム力に対しての取り組みですが、一つずつ実践して効果があるか確かめていきたいと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Management" scheme="https://future-architect.github.io/categories/Management/"/>
    
    
    <category term="マネジメント" scheme="https://future-architect.github.io/tags/%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
    <category term="リーダーシップ" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%BC%E3%83%80%E3%83%BC%E3%82%B7%E3%83%83%E3%83%97/"/>
    
    <category term="TeamGeek" scheme="https://future-architect.github.io/tags/TeamGeek/"/>
    
    <category term="メンバーシップ" scheme="https://future-architect.github.io/tags/%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC%E3%82%B7%E3%83%83%E3%83%97/"/>
    
  </entry>
  
  <entry>
    <title>CloudWatch Logsサブスクリプションフィルター・SQSを用いたログ監視</title>
    <link href="https://future-architect.github.io/articles/20231114a/"/>
    <id>https://future-architect.github.io/articles/20231114a/</id>
    <published>2023-11-13T15:00:00.000Z</published>
    <updated>2023-11-14T03:28:53.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>アルバイトとしてTIGに所属しております内田です。</p><p>当チームでは、従来はCloudWatch Logsに出力されたエラーや警告ログを数分毎にポーリング監視し、特定の文字列を検知することをトリガーにBacklogに起票することにより、いち早くエラーの対応ができるようにしていました。</p><p>しかし、監視対象のロググループなどは、そのログ監視ツールの環境変数に個別で設定する必要があり、デプロイするリソースが増えるたびにTerraform側の環境変数を追加するといった、同期を取る必要があり面倒でした。また、Backlog起票対象の文字列が存在しない場合もLambdaが着火し続けるため、コスト的にも問題がありました。</p><p>これをCloudWatch LogsサブスクリプションフィルターとSQSを用いることにより、課題だった環境変数の個別指定をなくすように仕様に改修しました。</p><p>この開発を通して得た、SQSとCloudWatchの連携についての知見を共有したいと思います。</p><h1 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h1><img src="/images/20231114a/fig.drawio.png" alt="fig.drawio.png" width="941" height="467" loading="lazy"><p>サブスクリプションフィルターで抽出されたログを、Lambda関数経由でSQSに挿入します。</p><p>Backlogに課題を追加するLambda関数は、一定時間おきにSQSに格納されているログを確認しに行き、全てのメッセージを読み込みます。</p><p>読み込んだメッセージは、所定のフォーマットに従ってBacklogに追加します。</p><h3 id="なぜSQSを経由させたのか？"><a href="#なぜSQSを経由させたのか？" class="headerlink" title="なぜSQSを経由させたのか？"></a>なぜSQSを経由させたのか？</h3><p>サブスクリプションフィルターの機能だけをみると、わざわざSQSを経由する必要はないように思えます。</p><p>ところが、実際にSQSを使わないとログが出力される度に逐一Lambda関数が立ち上がり、Backlog APIのアクセス数が急劇に増えてしまう危険性があります。</p><p>また、ログの各行に対して課題が起票されるため、ログの量によってはとんでもない数の課題が増えてしまいます。今回のBacklogの起票方針としては、1エラー（警告）文字列に付き1件ではなく、同一のエラー（警告）コードであれば、1つだけチケットを起票し、内容はそのチケット内になるべく追記していきたいという要件のため、逐次起動ではミスマッチでした。</p><p>そこで、ログを一旦キューに保管し、ある程度時間が経った後に別のLambda関数に渡す設計にしています。</p><h1 id="CloudWatch-Logsサブスクリプションフィルターの設定"><a href="#CloudWatch-Logsサブスクリプションフィルターの設定" class="headerlink" title="CloudWatch Logsサブスクリプションフィルターの設定"></a>CloudWatch Logsサブスクリプションフィルターの設定</h1><p>当然ですが、ログが出力されたらなんでもかんでもBacklogに通知すればよいというものではありません。</p><p>状況にもよりますが、よくあるケースとしては、エラーや警告など対応が必要なものだけ通知したいケースが挙げられます。ここで、サブスクリプションフィルターにフィルターパターンを登録することにより、条件を満たしたログのみをトリガーにすることができます。</p><p>当プロジェクトでは、<a href="https://github.com/rs/zerolog">zerolog</a>というロギングライブラリを用いてログを出力しているため、ログは以下のようなjson形式であることが保証されています。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;traceID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx-xxx-xxx&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span><span class="string">&quot;1970-01-01T00:00:00Z&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;info&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;Hello, world!&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>level</code>の値が<code>warn</code>、<code>error</code>、<code>fatal</code>の何れかのものを対象とするにはフィルターパターンを以下のように設定します。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;$.level = %warn|error|fatal%&#125;</span><br></pre></td></tr></table></figure><p>正規表現を用いているため、状況によってより複雑な条件を指定することもできます。</p><p>送信先はSQSにプッシュするLambda関数に設定します。</p><h1 id="SQSのキューの種類"><a href="#SQSのキューの種類" class="headerlink" title="SQSのキューの種類"></a>SQSのキューの種類</h1><p>SQSには、「標準キュー」と「FIFOキュー」があり、違いは以下の通りです。</p><div class="scroll"><table><thead><tr><th>#</th><th>標準キュー</th><th>FIFOキュー</th></tr></thead><tbody><tr><td>順序性</td><td>順序の保証なし</td><td>First In First Out</td></tr><tr><td>メッセージの配信回 数</td><td>1回以上（2回以上配信される場合も多い）</td><td>1回のみ</td></tr><tr><td>コスト</td><td>USD 0.24~0.40 &#x2F; 100万回</td><td>USD 0.35~0.50 &#x2F; 100万回</td></tr></tbody></table></div><p>ここでは標準キューを採用しました。</p><p>ログの重複に関しては、コード内で重複を削除すれば良いです。また、ログには時間が含まれているため、これを用いることによりログの順序が分かります。</p><h1 id="メッセージを取得"><a href="#メッセージを取得" class="headerlink" title="メッセージを取得"></a>メッセージを取得</h1><p>AWS SDKで用意されている<code>ReceiveMessage</code>関数を用いればよいですが、1回あたり10件までしかメッセージを取得できないので、ループで回し続けます。</p><p>Simple Queue Serviceという名前をしていますが、キューからメッセージを取得してもメッセージはすぐには消えません。メッセージ保持期間が過ぎるまでは、キュー内にメッセージは残り続けます。従って、別途削除する処理が必要です。</p><p>削除するには、メッセージを取得した際にデータに含まれている<code>ReceiptHandle</code>を渡す必要があります。</p><p>以下は一連の処理をまとめたものです。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sqs := sqs.New(session.Must(session.NewSession()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> messages []*sqs.Message</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    res, err := sqs.ReceiveMessage(&amp;sqs.ReceiveMessageInput&#123;</span><br><span class="line">        QueueUrl:            &amp;queueUrl,</span><br><span class="line">        MaxNumberOfMessages: aws.Int64(<span class="number">10</span>),</span><br><span class="line">        WaitTimeSeconds:     aws.Int64(<span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(res.Messages) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, res.Messages...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, message := <span class="keyword">range</span> messages &#123;</span><br><span class="line">    _, err := sqs.DeleteMessage(&amp;sqs.DeleteMessageInput&#123;</span><br><span class="line">        QueueUrl:      &amp;queueUrl,</span><br><span class="line">        ReceiptHandle: &amp;receiptHandle,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>あとは、Backlog APIを用いて取得したデータを送信するだけです。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>CloudWatch LogsサブスクリプションフィルターとSQSの連携について紹介いたしました。</p><p>SQSに関しては、別途データを削除する処理が必要な点が初見だとわかりにくいところだったので、その点も含めて参考になれば幸いです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;アルバイトとしてTIGに所属しております内田です。&lt;/p&gt;
&lt;p&gt;当チームでは、従来はCloudWatch</summary>
        
      
    
    
    
    <category term="DevOps" scheme="https://future-architect.github.io/categories/DevOps/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="SQS" scheme="https://future-architect.github.io/tags/SQS/"/>
    
    <category term="ログ監視" scheme="https://future-architect.github.io/tags/%E3%83%AD%E3%82%B0%E7%9B%A3%E8%A6%96/"/>
    
    <category term="CloudWatch" scheme="https://future-architect.github.io/tags/CloudWatch/"/>
    
  </entry>
  
</feed>
