<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  <icon>https://future-architect.github.io/feed_icon.png</icon>
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2023-04-28T05:59:26.563Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初心者による初心者のための Git 入門</title>
    <link href="https://future-architect.github.io/articles/20230428a/"/>
    <id>https://future-architect.github.io/articles/20230428a/</id>
    <published>2023-04-27T15:00:00.000Z</published>
    <updated>2023-04-28T05:59:26.563Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230428a/top.png" alt="" width="588" height="200"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="/articles/20230417a/">春の入門祭り連載</a> 10 日目です。</p><p>はじめまして。</p><p>フューチャーアーキテクト TIG の石野です。2022&#x2F;10 に IT 未経験でフューチャーに新卒入社しました。</p><p>フューチャーの新人研修ではじめて GitLab を触ったので、初心者目線で学んだことをまとめてみました。</p><p>本記事では Git についてなにも知らない人・初めて触る人向けにフューチャーの新人研修で必要になった知識という観点で説明していきます。<br>これからフューチャーの新人研修を受ける方はもちろん、Git についての基礎知識を学びたい方にぜひ読んでいただきたいと思います。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>Git はバージョン管理ツールと呼ばれるものですが、バージョン管理ツールとは一体何かというところから基本的な Git コマンドについて以下の順番で説明します。</p><ul><li>バージョン管理ツールとは</li><li>集中型と分散型</li><li>GitLab と GitHub について</li><li>Git 基本用語</li><li>プル</li><li>ブランチ</li><li>コミット<ul><li>プッシュ</li></ul></li><li>基本の Git コマンド</li></ul><p>また、私が新人研修で大変お世話になった研修リーダーも研修について<a href="/articles/20230306a/">技術ブログ</a>を書いています。ぜひご覧ください。</p><h2 id="バージョン管理ツールとは"><a href="#バージョン管理ツールとは" class="headerlink" title="バージョン管理ツールとは"></a>バージョン管理ツールとは</h2><p>大学で卒業論文を書いた方ならきっと共感してもらえると思うのですが、私のパソコンでは卒論を書いたワードファイルが量産されていました。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">卒業論文.docx</span><br><span class="line">卒業論文_修正版.docx</span><br><span class="line">卒業論文_完成.docx</span><br><span class="line">卒業論文_完成2.docx</span><br><span class="line">卒業論文_最終版.docx</span><br></pre></td></tr></table></figure><p>これじゃどのファイルがどの順番でいつ作られたのか分かりませんね…</p><p>このようなファイルの変更履歴の管理をどうにかしてくれるのがバージョン管理ツールです。</p><p>ソースコードを複数人で開発するときに便利なため開発の現場でよく使われています。</p><h2 id="集中型と分散型"><a href="#集中型と分散型" class="headerlink" title="集中型と分散型"></a>集中型と分散型</h2><p>バージョン管理ツールには集中型と分散型が存在します。<br>以下では集中型と分散型のバージョン管理ツールそれぞれについて特徴を説明します。</p><h3 id="集中型"><a href="#集中型" class="headerlink" title="集中型"></a>集中型</h3><p>集中型のバージョン管理ツールでは、専用のサーバー上にあるリポジトリ（バージョン管理するファイルの保管場所）でファイルを管理します。</p><p>ファイルをバージョン管理する場合はリポジトリのあるサーバーに接続する必要があります。</p><p>集中型のバージョン管理ツールの例としては Subversion が挙げられます。</p><h3 id="分散型"><a href="#分散型" class="headerlink" title="分散型"></a>分散型</h3><p>分散型のバージョン管理ツールでは、サーバー上にあるリモートリポジトリのコピーをユーザーがローカルリポジトリに持つことができます。ユーザーはローカルリポジトリで開発を進め、ある程度作業が進んだらサーバーに接続しサーバー上のリモートリポジトリに変更を反映させます。集中型に比べて、複数人で作業をする際に非常に便利です。</p><p>Git はこの分散型のバージョン管理ツールのひとつです。</p><h2 id="GitLab-と-GitHub-について"><a href="#GitLab-と-GitHub-について" class="headerlink" title="GitLab と GitHub について"></a>GitLab と GitHub について</h2><p>Git については分かったけど、GitLab とか GitHub って言葉も聞いたことがあるな。Git と何が違うんだ？と思った方もいるかも知れません。</p><p>GitLab と GitHub はどちらも Git のホスティングサービスで、リモートリポジトリを提供しています。この 2 つ以外にも Git のホスティングサービスはいろいろあります。</p><h2 id="Git-基本用語"><a href="#Git-基本用語" class="headerlink" title="Git 基本用語"></a>Git 基本用語</h2><p>次に、Git の基本用語 4 つを説明します。</p><h3 id="プル"><a href="#プル" class="headerlink" title="プル"></a>プル</h3><p>分散型のバージョン管理ツールである Git にはリモートリポジトリとローカルリポジトリがあると説明しました。</p><p>プルはリモートリポジトリの内容をローカルリポジトリにコピーすることです。厳密には fetch と merge の 2 段階があり、単純にリモートリポジトリの内容をローカルリポジトリにコピーしているわけではないですが、慣れるまではコピーしていると考えてもよさそうです。</p><h3 id="ブランチ"><a href="#ブランチ" class="headerlink" title="ブランチ"></a>ブランチ</h3><p>ブランチとは枝という意味であり、Git ではソースコードを枝分かれして編集することができます。</p><p>たとえば、新機能である a を A さんが開発するとします。</p><p>その場合、A さんはリモートリポジトリからプルしてきたリーカルリポジトリ上で、 main ブランチから a ブランチを作って（ブランチを切るといいます）そのブランチ上で作業をします。そうすることで、A さんの作業中も main ブランチは常に安定した状態を保つことができます。</p><p>そして、機能 a の開発中に別の機能 b のバグ修正を B さんが行うことになった場合は、B さんは B さんのローカルリポジトリ上で main ブランチから fix_b ブランチを切ることで B さんは A さんとは独立して作業をすることができます。</p><p>fix_b ブランチでの修正が完了し、機能 b が問題なく動くことを確認できたら、 fix_bブランチを main ブランチに統合（マージ）することで main ブランチが更新されます。</p><h3 id="コミット"><a href="#コミット" class="headerlink" title="コミット"></a>コミット</h3><p>コミットするとはゲームでセーブデータを作るようなものです。</p><p>と先輩社員に教わったのですが、私はゲームに疎いのでちょっと理解に苦しみました。私のようにゲームに疎い人向けに説明すると、”コミットする”とは「あとあとこの時点に戻れたらうれしいな」というポイントに名前をつけて記録することです。</p><p>コミットした時点には後から戻ったり、コミット同士の違いを参照したりすることもできるのでうまく活用できると非常に便利です。</p><p>コミットはあとから消すこともできるので、いつコミットすれば分からないという方は迷ったらコミットしましょう。</p><p>コミットの頻度についてはいろいろ流派があるみたいなので、気になったら調べてみてください。私はまだ模索中です。</p><h3 id="プッシュ"><a href="#プッシュ" class="headerlink" title="プッシュ"></a>プッシュ</h3><p>プッシュとはプルとは逆にローカルリポジトリでの変更内容をリモートリポジトリに反映させることです。</p><p>リモートリポジトリにプッシュすることで自分が変更した内容を他の人も見ることができます。</p><h2 id="基本の-Git-コマンド"><a href="#基本の-Git-コマンド" class="headerlink" title="基本の Git コマンド"></a>基本の Git コマンド</h2><p>今紹介した、プル、ブランチ、コミット、プッシュを CLI （マウスなどではなくキーボードから入力するコマンドで PC を操作すること）で行う際の Git コマンドを紹介していきます。</p><ul><li><code>git pull origin &lt;ブランチ名&gt;</code><ul><li>リモートリポジトリにある指定したブランチをローカルリポジトリ上の現在のブランチにプルすることができます</li><li><code>origin</code> はリモートリポジトリの意味です</li></ul></li><li><code>git pull</code><ul><li>ブランチを指定しなかった場合は、現在のブランチに紐づいたブランチをプルします</li><li>あるブランチに紐づいたブランチを upstream branch と言い、明示的に設定できます</li><li>設定せずに <code>git pull</code> を実行するとプルはできません</li></ul></li></ul><p>git pull は前述の通り git fetch と git merge の 2 つのコマンドの組み合わせですが、新人研修のレベルではここまでの理解は必要ないので説明は割愛します。<br>本格的に Git を使うことになったら調べてみてください。</p><ul><li><code>git switch &lt;ブランチ名&gt;</code><ul><li>変更を加えるブランチが指定したブランチに切り替わります</li><li>他にもブランチを切り替えるコマンドとして <code>git checkout</code> というコマンドも存在します</li><li>私は、新人研修で最初に使ったのが <code>git switch</code> だったため <code>git checkout</code> はよく分かっていないですがどっちを使っても大丈夫です</li></ul></li><li><code>git switch -c &lt;ブランチ名&gt;</code><ul><li>指定したブランチ名のブランチを新しく作ります</li><li>このコマンドを実行した後は、変更を加えるブランチが作成されたブランチに切り替わります</li></ul></li><li><code>git add &lt;ファイルパス&gt;</code><ul><li>ステージエリアにファイルを追加します</li><li>ステージエリアがよく分からない方は、コミットの前に、<code>git add</code> コマンドでコミットするファイルを選んでると考えたら良いと思います</li></ul></li><li><code>git add --all</code><ul><li><code>--all</code> オプションを指定することで、変更した全てのファイルをコミットの対象とすることができます</li><li>いちいちファイルパスを指定するより楽ですが関係ないファイルも含まれてしまうので注意が必要です</li></ul></li><li><code>git add -u</code><ul><li><code>-u</code> オプションを指定することで、すでにバージョン管理されているファイルの中で変更があったもののみをコミットの対象とすることができます</li><li>新規に作成したファイルはコミットの対象となりません</li></ul></li><li><code>git commit -m &lt;コミットメッセージ&gt;</code><ul><li>ステージエリアにあるファイルをコミットメッセージを指定して、コミットすることができます</li></ul></li><li><code>git commit</code><ul><li>オプションを省略するとコミットメッセージを入力するためのテキストエディタが開きます</li><li>この際に開くテキストエディタは設定することができるので使い慣れたものを設定するのがおすすめです</li><li>よく分からんという方は <code>-m</code> でメッセージを指定しておきましょう</li></ul></li><li><code>git status</code><ul><li>ファイルの状態が確認できるので、<code>git add</code> する前後に使うことが多いコマンドです</li><li>確認できるのは<ul><li>変更された&#x2F;新規作成されたファイル一覧</li><li><code>git add</code> 済みのファイル一覧　です</li></ul></li></ul></li><li><code>git push origin &lt;ブランチ名&gt;</code><ul><li>指定したブランチに現在のブランチをプッシュします</li></ul></li></ul><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>バージョン管理ツールに馴染みがない方は、このような記事を読んでもなかなか理解が進まないと思うので、実際に手元で動かしてみるのが一番良い習得方法だと思います。</p><p>また、本記事ではフューチャーの新人研修で必要になる知識という観点で絞って説明しましたが、開発の現場で使うとなるともちろんこれらの知識だけでは足りないので、他のコマンドやブランチ運用なども調べてみてください。（私は絶賛勉強中です。）</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230428a/top.png&quot; alt=&quot;&quot; width=&quot;588&quot; height=&quot;200&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="Git" scheme="https://future-architect.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>CDN 入門とエッジでのアプリケーション実行</title>
    <link href="https://future-architect.github.io/articles/20230427a/"/>
    <id>https://future-architect.github.io/articles/20230427a/</id>
    <published>2023-04-26T15:00:00.000Z</published>
    <updated>2023-04-28T05:59:24.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。Technology Inovation Group（TIG）所属の小澤です。<br><a href="/articles/20230417a/">春の入門祭り連載</a> 9 日目を担当します。</p><p>私は、通常の業務とは別に社員有志で集まるクラウド勉強会に参加しています。まだ経験が浅い（2022年10月新卒入社）こともあり、クラウド勉強会では入門的な内容を中心に発表しています。</p><p>この記事では、私がクラウド勉強会で発表した <strong>CDN の入門とエッジロケーションでのアプリケーション実行</strong>について説明します。</p><h2 id="CDN-とは？"><a href="#CDN-とは？" class="headerlink" title="CDN とは？"></a>CDN とは？</h2><p><strong>CDN</strong> （content delivery network, コンテンツ配信ネットワーク）は、Web アプリを含めた Web サイトのコンテンツ（HTML&#x2F;CSS&#x2F;JS&#x2F;画像など）を高速配信するための仕組みです。</p><p>通常、 Web サイトの静的コンテンツ（HTML&#x2F;CSS&#x2F;JS&#x2F;画像など）は Web サーバーに配置します。この場合、例えば全てのアクセスを単一の Web サーバーで担当するように構成すると、アクセスが集中するような時間帯や、通信する場所によって反応が遅くなってしまうことがあります。</p><p>これを解消する 1 つの方法は、Webサーバーの前に<strong>ロードバランサー</strong>を入れて負荷分散を実現することです。 しかし、単にロードバランサーを導入するだけでは、世界中からのアクセスがある場合など、<strong>地理的な距離に起因する遅延</strong>は解消できません。この課題は、オンプレミスでもクラウドでも同様に生じます。</p><p>そこで、サーバーへの負荷分散と地理的な制約による遅延軽減を同時に実現できるのが CDN です。</p><p>CDN では、コンテンツが入っている元の Web サーバー（<strong>オリジンサーバー</strong>）へのアクセス集中を防ぎ、地理的に近い<strong>エッジロケーション</strong>（エッジサーバー）に誘導します。エッジロケーションはデータセンターの一種ですが、世界中に配置され、クラウドの通常リージョンのデータセンターよりも多く設置されています。CDN の標準的な方法では、エッジロケーションはユーザーからのアクセスがあると、オリジンサーバを参照して次回以降のアクセスのためにコンテンツをキャッシュしておきます。次回以降のアクセスでは、キャッシュしたコンテンツをユーザーに配信します。</p><p>こうすることで、<strong>本来はオリジンサーバーにアクセスするはずだったリクエストを、エッジロケーションが代理して担当する</strong>ことで、負荷分散と地理的な高速配信を実現できます。</p><p>なお、エッジロケーションはオリジンサーバーのコンテンツをキャッシュしているだけなので、当然データの整合性は一時的に取れなります。そのため、通常の CDN サービスでは、キャッシュを保持する期間（<strong>TTL</strong>, time to live）を設定できるようになっています。 整合性を高く保ちたい場合はキャッシュの保持期間を短くすればよいわけです。 もちろん短くしすぎると、CDN の負荷分散の利点は弱くなるので、要件に応じてバランスを判断する必要があります。</p><h2 id="CDN-の仕組み"><a href="#CDN-の仕組み" class="headerlink" title="CDN の仕組み"></a>CDN の仕組み</h2><p>CDN は、<strong>地理的に近いエッジロケーションに誘導する</strong>と説明しましたが、実際はどのようにこの仕組みを実現しているのでしょうか？</p><p>CDN 利用時も、クライアント（Web ブラウザなど）は、通常時と同じくオリジンサーバーに向けたリクエストを送信します。 当然、クライアントはサーバーが CDN を使っているかどうかを意識する必要はありません。クライアントは飽くまでオリジンサーバーに向けたリクエストを発するわけです。</p><p>そこで、 CDN の実現のためには、オリジンサーバーに向かっているリクエストを、エッジロケーションに向ける仕組みが必要です。</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>その方法として、通常は <strong>DNS</strong>（domain name system） の仕組みを利用することで、地理的に近いエッジロケーションへのリクエストを実現します。DNS は、クライアントがアクセスしようとしているドメインを IP アドレスに名前解決（変換）する仕組みです。例えば、<code>google.com</code> をドメインを <code>172.217.31.174</code> という IP アドレスに変換します。</p><p>一般的に、クライアントがリクエストを送るとき、まず組織内や ISP などの DNS サーバーにドメインの名前解決を要求します。 組織内や ISP などの DNS サーバーは通常、<strong>DNS キャッシュサーバー</strong>と呼ばれ、自分自身での名前解決ができないため、別の DNS サーバーに再問合せをします。 このように問合せを繰り返し（<strong>反復的問合せ</strong>）、最終的に<strong>権威 DNS サーバー</strong>にたどり着きます。 権威 DNS サーバーは、対象のドメインと IP アドレスの対応を管理しているので、それを元にクライアントへ IP アドレスを応答できます。</p><h3 id="オリジンサーバーのドメインと-CDN-用ドメインの紐づけ"><a href="#オリジンサーバーのドメインと-CDN-用ドメインの紐づけ" class="headerlink" title="オリジンサーバーのドメインと CDN 用ドメインの紐づけ"></a>オリジンサーバーのドメインと CDN 用ドメインの紐づけ</h3><p>CDN を実現するための設定として、通常は CNAME レコードを用いてオリジンサーバーのドメインと CDN 用ドメインを紐づけます。</p><p>CNAME レコードは、ドメインと IP アドレスではなく、ドメインと別名ドメインを紐づける仕組みです。</p><p>例えば、<code>example.com</code> というオリジンサーバーに対して、<code>cdn.example.com</code> といった CDN 用ドメインを紐づけます。 ただし、CDN 用ドメインは通常 CDN ベンダーが発行するため、この例のようにシンプルな形式とは限りません。</p><p>※example.com は例示に利用できるドメインです。</p><h3 id="CDN-用ドメインに対応する-IP-アドレスの動的な名前解決"><a href="#CDN-用ドメインに対応する-IP-アドレスの動的な名前解決" class="headerlink" title="CDN 用ドメインに対応する IP アドレスの動的な名前解決"></a>CDN 用ドメインに対応する IP アドレスの動的な名前解決</h3><p>CDN を実現する肝となる仕組みがここです。 CDN 用ドメインは CDN ベンダーが管理しているため、権威 DNS サーバーの挙動は CDN ベンダーで決めることができます。</p><p>CDN を構成しない場合、権威 DNS サーバーは通常固定の IP アドレスを応答します。 しかしながら、CDN を構成する場合、固定の IP アドレスでは、地理的に近いエッジロケーションにアクセスさせるという要件を達成できません。</p><p>そこで、 <strong>CDN ベンダーの権威 DNS サーバーは、CDN 用ドメインに対応する IP アドレスを動的に変換して応答します</strong>。</p><p>その際、一般的には送信元の IP アドレスや AS （Autonomous System, ネットワーク群）を読み取り利用することで、最寄りのエッジロケーションを導出します。</p><p>例えば、</p><div class="scroll"><table><thead><tr><th>送信元の IP アドレス（範囲）</th><th>最短のエッジロケーション</th><th>最短のエッジロケーションの IP アドレス</th></tr></thead><tbody><tr><td>192.0.2.0</td><td>エッジロケーション A</td><td>203.0.113.0</td></tr><tr><td>192.0.2.1</td><td>エッジロケーション A</td><td>203.0.113.0</td></tr><tr><td>192.0.2.25</td><td>エッジロケーション A</td><td>203.0.113.0</td></tr><tr><td>198.51.100.0</td><td>エッジロケーション B</td><td>203.0.113.50</td></tr><tr><td>198.51.100.33</td><td>エッジロケーション B</td><td>203.0.113.50</td></tr></tbody></table></div><p>のようなイメージです。</p><p>※192.0.2.0&#x2F;24、198.51.100.0&#x2F;24、203.0.113.0&#x2F;24 は例示に利用できる IP アドレスブロックです。 実在する IP アドレスではありません。</p><p>以上のように、CDN では</p><ul><li>オリジンサーバーのドメインと CDN 用ドメインの紐づけ</li><li>CDN 用ドメインに対応する IP アドレスの動的な名前解決</li></ul><p>を用いて、オリジンサーバーへのリクエストを地理的に近いエッジロケーションへのリクエストに振り替るのが一般的です。</p><h2 id="CDN-サービスの例"><a href="#CDN-サービスの例" class="headerlink" title="CDN サービスの例"></a>CDN サービスの例</h2><p>ここでは、CDN サービスの例を各クラウドベンダーごとに簡単に紹介します。</p><h3 id="AWS-Amazon-CloudFront"><a href="#AWS-Amazon-CloudFront" class="headerlink" title="AWS - Amazon CloudFront"></a>AWS - Amazon CloudFront</h3><p>AWS の提供する CDN サービスは Amazon CloudFront です。</p><p>Amazon CloudFront では、CDN のオリジンサーバーとして EC2 や S3、ELB などの他、オンプレミスのサーバーも指定できます。</p><h3 id="Google-Cloud-Cloud-CDN"><a href="#Google-Cloud-Cloud-CDN" class="headerlink" title="Google Cloud - Cloud CDN"></a>Google Cloud - Cloud CDN</h3><p>Google Cloud の提供する CDN サービスは Cloud CDN です。</p><p>Cloud CDN は他の CDN サービスと構成が異なり、Cloud Load Balancing に CDN 機能を付けるという方式で設定します。すなわち、Cloud CDN はロードバランサーと CDN が一体化している形です。</p><p>現在は CDN 機能付きロードバランサーのバックエンドとして、Cloud Storage やオンプレミスなど、HTTP 対応のあらゆる送信元を指定できるようになっているので、方式の違いをそこまで意識することなく、他の CDN サービスと同様に利用できます。</p><h3 id="Cloudflare"><a href="#Cloudflare" class="headerlink" title="Cloudflare"></a>Cloudflare</h3><p>Cloudflare はクラウドベンダーのひとつです。</p><p>もとは CDN をメインで提供するクラウドベンダーとして知られていましたが、純粋な CDN だけではなく、WAF（Web Application Firewall）などのセキュリティ機能も合わせて提供しています。</p><h2 id="モダンな-Web-アプリケーションと-CDN"><a href="#モダンな-Web-アプリケーションと-CDN" class="headerlink" title="モダンな Web アプリケーションと CDN"></a>モダンな Web アプリケーションと CDN</h2><p>近年の Web アプリケーションは、Web フロントエンドと Web API サーバーを分離した構成が主流です。 Web フロントエンドは、サーバー側で HTML を動的に生成するサーバーサイドレンダリング（SSR）ではなく、ブラウザの JavaScript が DOM を操作して軽量の HTML を書き換えるシングルページアプリケーション（SPA）の方式が一般的です。</p><p>また、SPA のデメリットを克服するために SPA と SSR を組み合わせた方式も主流になってきました。例えば、React ベースのフレームワークである Next.js や、Vue.js ベースのフレームワークである Nuxt.js を使えば、SPA と SSR の組み合わせを簡単に実現できます。</p><p>このようなモダンな Web アプリケーションの構成では、ブラウザ側の JavaScript の役割が大きくなり、必然的に JS ファイルのサイズが大きくなります。また静的サイトジェネレータ（SSG）を用いて Web サイトをビルドした場合も、HTML と JavaScript のサイズが大きくなります。</p><p>こうしたモダンな構成は、静的コンテンツとしての HTML&#x2F;JavaScript を高速に配信する CDN との相性が良く、広く使われています。</p><h2 id="CDN-は意識して設定しなくても使える"><a href="#CDN-は意識して設定しなくても使える" class="headerlink" title="CDN は意識して設定しなくても使える"></a>CDN は意識して設定しなくても使える</h2><p>SPA からなるモダンな Web アプリケーションを開発する場合、CDN の設定を意識しなくても CDN を適用したデプロイが簡単にできる仕組みが整っています。</p><h3 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h3><p>Next.js 開発元の Vercel 社が提供するクラウドサービスの Vercel は、Next.js をはじめとするモダン Web アプリケーションのデプロイ先として優れています。</p><p>GitHub 等のリモートリポジトリに Next.js アプリがコミットされるだけで、自動デプロイされ Next.js の機能をサーバーの設定なしに使用できます。その 1 つの機能として、<strong>CDN も自動で構成されます</strong>。</p><h3 id="AWS-Amplify"><a href="#AWS-Amplify" class="headerlink" title="AWS Amplify"></a>AWS Amplify</h3><p>AWS の提供する AWS Amplify は、モダンな Web アプリケーションを高速に開発しデプロイするための一連の機能を集めたサービスです。 AWS Amplify は、フルマネージド型のウェブアプリケーションホスティングサービスとして利用できます。</p><p>AWS Amplify は、<strong>利用されているフロントエンドフレームワークを自動で判別して CDN を構成します</strong>。 Vercel と同様、リモートリポジトリを指定すれば CI&#x2F;CD も面倒な設定なしに構成できます。</p><p>AWS Amplify でデプロイした Web フロントエンドと、Amazon API Gateway や AWS Lambda と組み合わせてサーバーレスな Web アプリケーションを構成できます。</p><h2 id="CDN-の活用とビジネス形態"><a href="#CDN-の活用とビジネス形態" class="headerlink" title="CDN の活用とビジネス形態"></a>CDN の活用とビジネス形態</h2><p>CDN は、その特徴から</p><ul><li>地理的に離れた場所にユーザーがいる</li><li>厳しい低遅延性が求められる</li></ul><p>という場面に有益です。</p><p>このような場面にまず当てはまるのが、toC の Web サービスでしょう。世界的なサービスはもちろんのこと、日本国内向けのサービスであったとしても CDN は広く利用されています。テック系スタートアップ企業においても、現在は資金が少ない時点で柔軟にクラウドリソースを利用できるため、CDN サービスを活用して UX を高めることは有効です。</p><p>他方で、フューチャーのような IT コンサルティング企業やいわゆる SI 企業では、業務アプリケーション開発の割合が高いでしょう。 toB の業務アプリケーションでは、そもそもインターネットアクセスを遮断することがあり、また toC サービスとは求められる非機能要件が異なる場合も多く、CDN が有益な場面は少なそうに思えます。</p><p>しかしながら、現在は業務アプリケーションであってもインターネットアクセスを前提とするものが増えています。例えばグローバル企業の業務システムで拠点が全世界にあるような場合は、CDN を用いた配信が有益になります。 さらには、BtoBtoC の開発や自社サービスの開発を行うことも少なくないため、CDN は私たちのビジネスにも重要な技術要素です。</p><p>以下では、これまでの CDN とは異なる新しい活用法の可能性を紹介します。</p><h2 id="CDN-のエッジサーバーでアプリケーションを実行する"><a href="#CDN-のエッジサーバーでアプリケーションを実行する" class="headerlink" title="CDN のエッジサーバーでアプリケーションを実行する"></a>CDN のエッジサーバーでアプリケーションを実行する</h2><p>ここまで、CDN は静的コンテンツ（HTML&#x2F;CSS&#x2F;ブラウザで動く JavaScript など）を配信する仕組みとして紹介してきました。</p><p>しかし、<strong>近年はこの CDN のエッジサーバーでアプリケーションを実行するサービスが複数登場しています</strong>。</p><p>さきほど説明した React ベースの Web フロントエンドフレームワークである Next.js には Web API を実現する API Routes という機能が含まれています。Next.js アプリケーションを Vercel にデプロイした場合、通常の API Routes は、Vercel が提供する関数実行環境（データセンター）で実行されます。しかし近年、新たに Edge API Routes という機能が追加され、エッジサーバー上で関数を実行できるようになりました。これは Vercel の Edge Runtime というエッジ環境で動作します。</p><p>このようにエッジサーバーでアプリケーションを実行するサービスには、次のようなものがあります:</p><ul><li>Vercel Edge Functions</li><li>Cloudflare Workers</li><li>AWS CloudFront Functions</li><li>AWS Lambda@Edge</li></ul><p>なお、下 2 つの AWS サービスは似ていますが、CloudFront Functions は AWS における「エッジロケーション」、Lambda@Edge は AWS における「リージョンエッジ」で実行されます。そのため、CloudFront Functions の方がクライアントに近い場所で実行されます。</p><p>これらのサービスは、例えば次のようなユースケースをエッジサーバー上で利用できる（すなわち、通常のクラウドより低遅延である）ことが強みとされています:</p><ul><li>ヘッダの書き換え</li><li>トークンの検証と認可</li><li>デバイス判定</li><li>A&#x2F;B テスト</li><li>IP ブロック</li><li>リダイレクト</li></ul><h2 id="Cloudflare-Workers-とは？"><a href="#Cloudflare-Workers-とは？" class="headerlink" title="Cloudflare Workers とは？"></a>Cloudflare Workers とは？</h2><p>ここでは、エッジでアプリケーションを実行する環境としてシンプルで試しやすい Cloudflare Workers を紹介します。</p><p>Cloudflare Workers は Cloudflare 社が提供するサーバレスのサービスです。通常の AWS Lambda や Google Cloud Functions などとは異なり、データセンターではなく CDN のエッジサーバーでコードを実行することができます。</p><p>Cloudflare Workers の特徴として</p><ul><li>0ms cold starts のサポート<ul><li>すなわち、<strong>通常のサーバーレス環境で発生するコールドスタートが発生しない</strong></li><li>Cloudflare workers では内部的にコンテナではなく、isolate と呼ばれる環境を使用しているため実現可能</li></ul></li><li>CPU runtime の 10ms 制限<ul><li>そのため、重い処理は実行できない</li></ul></li></ul><p>を挙げることができます。</p><h3 id="Cloudflare-Workers-のストレージ"><a href="#Cloudflare-Workers-のストレージ" class="headerlink" title="Cloudflare Workers のストレージ"></a>Cloudflare Workers のストレージ</h3><p>Cloudflare Workers では、<strong>エッジロケーションでストレージを利用できます</strong>:</p><ul><li>Cloudflare Workers KV<ul><li>Key-Value ストレージ</li><li>結果整合性</li></ul></li><li>Durable Objects<ul><li>Key-Value ストレージ</li><li><strong>強い</strong>整合性</li></ul></li></ul><h3 id="RDB-サービスの-Cloudflare-D1"><a href="#RDB-サービスの-Cloudflare-D1" class="headerlink" title="RDB サービスの Cloudflare D1"></a>RDB サービスの Cloudflare D1</h3><p>また、<strong>エッジロケーションで RDB が動く Cloudflare D1 も登場しています</strong>。</p><p>D1 は SQLite をベースに構築されています。</p><p>ストレージと同様に、Cloudflare Workers のロジックから操作することができます。</p><h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><p>Cloudflare Workers では、 <strong><a href="https://developer.mozilla.org/ja/docs/Web/API/Service_Worker_API">Service Worker の API</a> が利用できます</strong> 。<br>※ここでいう「API」は「Web API」ではありません（「ライブラリ」に似た本来の広い意味です）。</p><p>Service Worker とは、Web ブラウザがメインの JS の処理とは別のスレッドで、JS をバックグラウンド実行する仕組み（Web Worker）の一つです。Service Worker は、ブラウザとサーバーの間のプロキシサーバーのように利用することができます。<br>（本記事とは別の文脈で、Service Worker のハンズオン記事を執筆予定です。）</p><p>Cloudflare 独自の API ではなく、<strong>Service Worker API という標準的な記法をすべて使えるのが利点です</strong>。<br>もちろん Service Worker がクライアント（Web ブラウザ）の中で実行されるのに対し、Cloudflare Workers はエッジサーバーで実行される点が異なります。</p><h3 id="Cloudflare-Workers-の開発例"><a href="#Cloudflare-Workers-の開発例" class="headerlink" title="Cloudflare Workers の開発例"></a>Cloudflare Workers の開発例</h3><p>Cloudflare Workers の開発例を試してみましょう。</p><p><strong>注意</strong> Cloudflare は、他のクラウドサービスと同じく、アプリケーションやその他のリソースをインターネットに公開できるサービスです。個人環境以外で試す場合は、所属組織のルールを確認してください。</p><h4 id="基本的な手順"><a href="#基本的な手順" class="headerlink" title="基本的な手順"></a>基本的な手順</h4><p>Cloudflare Workers の開発では、Wrangler（ラングラー）と呼ばれる Cloudflare Workers のための CLI ツールを使います。</p><p>Node.js のインストールされたローカル環境で</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx wrangler init my-project</span><br><span class="line"><span class="built_in">cd</span> my-project</span><br></pre></td></tr></table></figure><p>を実行すればひな形が作成されます。<code>my-project</code> は自由に変えてください。<br>なお、Would you like to use TypeScript? に対して Yes を返せば、TypeScript の準備が自動で完了し、すぐに使えるようになります！</p><p><code>src/index.js</code> または <code>src/index.ts</code> が Cloudflare Workers のロジックを実装するファイルです。<br>TypeScript を選択したとして、シンプルな文字列を返す Web API を次のように実装します:</p><figure class="highlight ts"><figcaption><span>src/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="attr">request</span>: <span class="title class_">Request</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Response</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ローカル環境の起動は</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx wrangler dev --<span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>で行い、動作確認できます。 localhost:8787 に Hello World と表示されたら成功です。<br>通常の Web API と同じく、ブラウザや curl コマンド等で確認してください。</p><img src="/images/20230427a/スクリーンショット_2023-04-27_16.47.46.png" alt="" width="586" height="206" loading="lazy"><figure class="highlight ts"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="attr">request</span>: <span class="title class_">Request</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Response</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>この <code>fetch</code> が Service Worker API の 1 つです。</p><p>fetch イベント（クライアントからの HTTP リクエスト）を検知するとこのメソッドを実行します。<code>fetch</code> の引数には <code>Request</code> 型で、HTTP リクエストの <code>body</code> や <code>headers</code>、<code>method</code> などのプロパティが含まれています。こうしたプロパティを使えば、通常の Web API と同じようなロジックを記述することができます。</p><p>例えば、GET リクエストのクエリパラメータの <code>message</code> 属性でメッセージを送り、それを読み取ってレスポンスを返す処理を書いてみましょう。</p><figure class="highlight ts"><figcaption><span>src/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="attr">request</span>: <span class="title class_">Request</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Response</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span>(request.<span class="property">method</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">const</span> &#123; searchParams &#125; = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>)</span><br><span class="line">        <span class="keyword">const</span> message = searchParams.<span class="title function_">get</span>(<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">          <span class="string">`送信されたメッセージは「<span class="subst">$&#123;message&#125;</span>」です。`</span>,</span><br><span class="line">          &#123;<span class="attr">status</span>: <span class="number">200</span>&#125;</span><br><span class="line">        )</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">          <span class="string">&#x27;許可されていないHTTPメソッドです。&#x27;</span>,</span><br><span class="line">          &#123;<span class="attr">status</span>: <span class="number">405</span>&#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>クエリパラメータに <code>message=こんにちは</code> を含めてリクエストすると、正しくメッセージが読み込まれ表示されました。</p><img src="/images/20230427a/スクリーンショット_2023-04-27_16.31.52.png" alt="" width="934" height="240" loading="lazy"><p>Wrangler では、デプロイも次のコマンドで簡単に行えます（インターネット公開されるので十分注意してください）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx wrangler publish</span><br></pre></td></tr></table></figure><p>このように数行のコマンドで、ローカルの動作確認とエッジへのデプロイが完結します。</p><h4 id="様々な活用例"><a href="#様々な活用例" class="headerlink" title="様々な活用例"></a>様々な活用例</h4><p>他の実装例は、<a href="https://developers.cloudflare.com/workers/examples/">公式ドキュメント</a>に記載されています。</p><ul><li>JSON の取得</li><li>リダイレクト</li><li>A&#x2F;B テスト</li><li>CORS ヘッダープロキシ</li><li>トークンの検証と認可</li><li>Basic 認証</li><li>ストレージや DB へのアクセス</li></ul><p>など、<strong>このページが実質的にユースケースのカタログのようになっています</strong>。エッジのアプリケーション実行の可能性を模索し、ぜひ新しい使い道を見つけていきましょう！</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>この記事では、社内のクラウド勉強会での発表をもとに、CDN の入門的解説と、エッジでのアプリケーション実行の紹介を行いました。</p><p>春の入門祭り連載はまだまだ続きます！ 引き続きどうぞよろしくお願いいたします。</p><p>次は石野さんの<a href="/articles/20230428a/">初心者による初心者のためのGit入門</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。Technology Inovation Group（TIG）所属の小澤です。&lt;br&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="cdn" scheme="https://future-architect.github.io/tags/cdn/"/>
    
    <category term="cloudflare" scheme="https://future-architect.github.io/tags/cloudflare/"/>
    
    <category term="CDN Edge" scheme="https://future-architect.github.io/tags/CDN-Edge/"/>
    
    <category term="Cloudflare Workers" scheme="https://future-architect.github.io/tags/Cloudflare-Workers/"/>
    
  </entry>
  
  <entry>
    <title>Pulumiで始めるIaC入門</title>
    <link href="https://future-architect.github.io/articles/20230426a/"/>
    <id>https://future-architect.github.io/articles/20230426a/</id>
    <published>2023-04-25T15:00:00.000Z</published>
    <updated>2023-04-27T09:24:01.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Technology Inovation Group(TIG)所属の筋肉エンジニアの渡邉です。</p><p><a href="/articles/20230417a/">春の入門連載2023</a> 8日目を担当します。</p><p>普段はクラウドインフラを中心に業務を行なっていますが、インフラリソースを管理するにあたってはIaC（主にTerraform）を使用しています。春の入門ということで、改めてIaCのメリット・デメリットについて整理してみました。また、PulumiというIaCツールに入門してみたので、皆さんと一緒にPulumiについて理解していきたいと思います。</p><h1 id="IaC-Infrastructure-as-Code-とは"><a href="#IaC-Infrastructure-as-Code-とは" class="headerlink" title="IaC(Infrastructure as Code)とは"></a>IaC(Infrastructure as Code)とは</h1><p>IaC (Infrastructure as Code)とは、ネットワーク、サーバ、データベースなどのインフラリソースをコードによって管理しプロビジョニングできることを言います。<br>クラウドを利用している場合、マネジメントコンソールからボタンポチポチでリソースを作成・更新・削除することができます。手動で操作する場合、手順書を用意し手順書に沿ってマネジメントコンソールを操作すると思いますが、手順書を確認していてもオペミスによって意図せずリソースを更新・削除してしまう可能性やマネジメントコンソールは定期的にアップデートされるため、手順書が古くなってしまい意味を成さなくなってくる時もあると思います。</p><p>IaCを利用する場合、インフラリソースのあるべき姿をコードで定義・管理するためインフラリソースの変更前にレビューを挟むことができるので、意図せずリソースを作成・更新・削除してしまう可能性を少なくすることができます。</p><p>IaCで有名なツールとしては以下があります。</p><ul><li>Ansible（主にサーバ内のミドルウェアなどを管理する構成管理ツール）</li><li>Terraform（各クラウドのリソースを管理する構成管理ツール）</li><li>CloudFormation（AWSのリソースを管理する構成管理ツール）</li></ul><h1 id="IaCのメリット"><a href="#IaCのメリット" class="headerlink" title="IaCのメリット"></a>IaCのメリット</h1><h2 id="既存コードの使い回し・各環境への迅速なプロビジョニング"><a href="#既存コードの使い回し・各環境への迅速なプロビジョニング" class="headerlink" title="既存コードの使い回し・各環境への迅速なプロビジョニング"></a>既存コードの使い回し・各環境への迅速なプロビジョニング</h2><p>インフラリソースの構成をコードで管理できるため、一度コードを作成してしまえば同じインフラ構成を作成したい場合、既存のコードを使いまわして構築することができます。また、terraformであればworkspaceという機能を利用することで開発環境・検証環境・本番環境と各環境を同じコードで作成することができます。例えば、咄嗟に性能環境が欲しいとなった場合でも迅速に環境を用意することができます。</p><h2 id="オペレーションミスの防止"><a href="#オペレーションミスの防止" class="headerlink" title="オペレーションミスの防止"></a>オペレーションミスの防止</h2><p>IaCではコードに基づいてプログラムがインフラリソースの作成・更新・削除を行うため、手作業に比べるとオペレーションミスを減らせることができます。主に同じ作業を複数回行う場合であったり、各環境に対して同じ作業を行う場合などは手作業だとミスが起こりやすいので、IaCを用いる場合はミスを減らせると思います。</p><p>また、コードで管理されているためコードの実行前にレビューを挟むことができるため、品質を担保した状態を保つことができます。</p><h2 id="DevOpsツールとの相性がよい"><a href="#DevOpsツールとの相性がよい" class="headerlink" title="DevOpsツールとの相性がよい"></a>DevOpsツールとの相性がよい</h2><p>コード管理されていることによって、Githubなどのリポジトリサービスでバージョン管理することができます。CI&#x2F;CDとも相性が良いので、CI機能を利用してインフラリソースの命名規則をチェックしたり、linterを使用して整形したりなど、たくさんのDevOpsツールを利用して開発・運用効率を上げることが可能になります。</p><h1 id="IaCのデメリット"><a href="#IaCのデメリット" class="headerlink" title="IaCのデメリット"></a>IaCのデメリット</h1><h2 id="IaCツールごとの言語-x2F-ルールが異なるためキャッチアップが必要"><a href="#IaCツールごとの言語-x2F-ルールが異なるためキャッチアップが必要" class="headerlink" title="IaCツールごとの言語&#x2F;ルールが異なるためキャッチアップが必要"></a>IaCツールごとの言語&#x2F;ルールが異なるためキャッチアップが必要</h2><p>IaCツールはTerraformやAnsibleなどがありますが、TerraformはHCL(HashiCorp Configuration Language)という独自言語でインフラリソースの状態をコード化する宣言型のツールとなり、Ansibleはplaybookと呼ばれるファイルにYAMLで構成手順を記述する手続き型ツールになります。各ツールごとのルールや記載方法などをキャッチアップする学習コストがかかります。</p><h2 id="コードと実態で差分が発生するリスク"><a href="#コードと実態で差分が発生するリスク" class="headerlink" title="コードと実態で差分が発生するリスク"></a>コードと実態で差分が発生するリスク</h2><p>IaCのコードによって管理されているインフラリソースに対して、例えば、手作業で変更を加えてしまった場合はコードとの差分が発生します。この差分によって、コードを使用してインフラリソースを更新しようとした際に、エラーが発生し、インフラが更新できなくなる可能性があったり、どちらが正しい構成なのかわからなくなってしまったりします。<br>簡単なインフラリソースの変更であれば、コードから変更するよりもコンソール画面から行ったほうが速い場合があるので、そういう場合にこの事象は発生しやすいと思います。</p><h1 id="Pulumiとは"><a href="#Pulumiとは" class="headerlink" title="Pulumiとは"></a>Pulumiとは</h1><p><a href="https://www.pulumi.com/">Pulumi</a>とは、OSSのIaCツールの一つであり、Terraformは独自のHCL言語でコードを記述しなければなりませんが、Pulumiの場合、アプリケーション開発者がよく使用する言語(Go&#x2F;Java&#x2F;Python&#x2F;Typescript&#x2F;C#&#x2F;Yaml)などでコードを記述することができるため、普段アプリケーションコード書いているエンジニアでも学習コストが低く、使い慣れた言語でインフラリソースをループ処理で作成したりすることができます。AWS&#x2F;GCP&#x2F;Azureなど各クラウドプロバイダーやKubernetesやServerlessにも幅広く対応しています。また、<a href="https://www.pulumi.com/tf2pulumi/">TerraformやCloudFormationからPulumiに変換する</a>ことも可能なため、Pulumiに移行することも可能です。</p><p>Pulumiは無料で利用することができますが、複数人での利用や、企業単位、ミッションクリティカルなシステムを扱う方向けに有償プランもあり、追加機能や充実したサポートを利用することができます。</p><p>詳しくは<a href="https://www.pulumi.com/pricing/">公式ドキュメント</a>を参照ください。</p><img src="/images/20230426a/image.png" alt="" width="1200" height="779" loading="lazy"><p>Pulumiは以下の構成をとります。詳しくは<a href="https://www.pulumi.com/docs/intro/concepts/">公式ドキュメント</a>を参照ください。<br><img src="/images/20230426a/image_2.png" alt="" width="617" height="440" loading="lazy"></p><ul><li>Project：Programや他ファイルを含むディレクトリ</li><li>Program：インフラリソースのあるべき姿を定義したもの</li><li>Resource：インフラリソースを構成するオブジェクト。オブジェクトのプロパティ（設定値）に関しては、Inputs&#x2F;OutPutsによりの別のオブジェクトで利用することが可能</li><li>Stack：Programをデプロイした後のインスタンス。同一のProgramから開発環境&#x2F;検証環境など、用途に応じて複数の環境用にインスタンスを作成が可能</li></ul><p>とにかく、触ってみないと理解することができないので、さっそくさわってみたいとおもいます</p><h1 id="Pulumiを使用してGoogle-Cloudのリソースを作ってみる"><a href="#Pulumiを使用してGoogle-Cloudのリソースを作ってみる" class="headerlink" title="Pulumiを使用してGoogle Cloudのリソースを作ってみる"></a>Pulumiを使用してGoogle Cloudのリソースを作ってみる</h1><p><a href="https://www.pulumi.com/docs/get-started/gcp/">公式チュートリアル</a>に沿って進めていきたいと思います。</p><h2 id="Pulumiのインストール"><a href="#Pulumiのインストール" class="headerlink" title="Pulumiのインストール"></a>Pulumiのインストール</h2><p>Pulumiを利用するため、ローカルのWSL2にPulumiをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://get.pulumi.com | sh</span><br><span class="line">$ pulumi version</span><br><span class="line">v3.64.0</span><br></pre></td></tr></table></figure><h2 id="言語ランタイムのインストール"><a href="#言語ランタイムのインストール" class="headerlink" title="言語ランタイムのインストール"></a>言語ランタイムのインストール</h2><p>Pulumiでは、Goを利用しようと思うのでGoをインストールします。<br>こちらは<a href="https://go.dev/dl/">公式ドキュメント</a>を参照ください</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.20.2 linux/amd64</span><br></pre></td></tr></table></figure><h2 id="GCP初期設定"><a href="#GCP初期設定" class="headerlink" title="GCP初期設定"></a>GCP初期設定</h2><p>ローカルにGoogle Cloud SDKはインストールされている前提で進めます。<br>PulumiはGoogle Cloud リソースとやり取りするためにデフォルトのアプリケーション資格情報を必要とするため、<code>gcloud auth application-default login</code>コマンドを実行して資格情報を取得します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud auth application-default login</span><br><span class="line">Go to the following <span class="built_in">link</span> <span class="keyword">in</span> your browser:</span><br><span class="line"></span><br><span class="line">    https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=xxxxxxxxx&amp;redirect_uri=xxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">Enter authorization code:</span><br></pre></td></tr></table></figure><p>表示されたURLをブラウザに入力すると、「Googleログイン画面」に遷移します。</p><img src="/images/20230426a/image_3.png" alt="" width="449" height="503" loading="lazy"><p>「許可」をクリックします。<br><img src="/images/20230426a/image_4.png" alt="" width="453" height="833" loading="lazy"></p><p>表示された認証コードをコピーします。<br><img src="/images/20230426a/image_5.png" alt="" width="360" height="558" loading="lazy"></p><p>コピーした認証情報を入力し、「Enter」を押します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Enter authorization code: xxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">Credentials saved to file: [/home/xxxxxxxxx/.config/gcloud/application_default_credentials.json]</span><br><span class="line"></span><br><span class="line">These credentials will be used by any library that requests Application Default Credentials (ADC).</span><br></pre></td></tr></table></figure><p>環境変数を介して GCPのデフォルトプロジェクトを設定します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOOGLE_PROJECT=xxxxxxxx</span><br></pre></td></tr></table></figure><h2 id="Pulumiプロジェクトの作成"><a href="#Pulumiプロジェクトの作成" class="headerlink" title="Pulumiプロジェクトの作成"></a>Pulumiプロジェクトの作成</h2><p>Pulumiを利用するためPulumiプロジェクトを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> pulumi &amp;&amp; <span class="built_in">cd</span> pulumi</span><br><span class="line"></span><br><span class="line">$ pulumi new gcp-go</span><br><span class="line">Manage your Pulumi stacks by logging <span class="keyword">in</span>.</span><br><span class="line">Run `pulumi login --<span class="built_in">help</span>` <span class="keyword">for</span> alternative login options.</span><br><span class="line">Enter your access token from https://app.pulumi.com/account/tokens</span><br><span class="line">    or hit &lt;ENTER&gt; to <span class="built_in">log</span> <span class="keyword">in</span> using your browser                   :</span><br></pre></td></tr></table></figure><p>アクセストークンの入力を求められました。<br><code>https://app.pulumi.com/account/tokens</code>にアクセスしてPulumi Cloudの初期設定を行います。</p><p>上記のURLへアクセスするとPulumiのSign In画面へ遷移します。<br>まだ、アカウントを作成していないので<code>Create an accout</code>をクリックします。<br><img src="/images/20230426a/image_6.png" alt="" width="1200" height="888" loading="lazy"></p><p>アカウントを作成するため、今回はE-Mailを利用してアカウントを作成しようと思います。</p><ul><li>Username</li><li>Email</li><li>Password</li></ul><p>を入力し<code>Create Account</code>をクリックします。</p><img src="/images/20230426a/image_7.png" alt="" width="1200" height="895" loading="lazy"><p><code>Personal access tokens</code>の作成を求められるので、<code>Create Token</code>をクリックします。<br><img src="/images/20230426a/image_8.png" alt="" width="1191" height="382" loading="lazy"></p><p><code>description</code>に任意の値を入力します。<br><img src="/images/20230426a/image_9.png" alt="" width="241" height="252" loading="lazy"></p><p>アクセストークンが生成されるので、メモしておきます。<br><img src="/images/20230426a/image_10.png" alt="" width="1200" height="481" loading="lazy"></p><p>先ほどのCLI画面に戻り、生成したアクセストークンを入力します。<br>するとWelcome to Pulumi!と表示されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi new gcp-go</span><br><span class="line">Manage your Pulumi stacks by logging <span class="keyword">in</span>.</span><br><span class="line">Run `pulumi login --<span class="built_in">help</span>` <span class="keyword">for</span> alternative login options.</span><br><span class="line">Enter your access token from https://app.pulumi.com/account/tokens</span><br><span class="line">    or hit &lt;ENTER&gt; to <span class="built_in">log</span> <span class="keyword">in</span> using your browser                   : xxxxxxxxxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Welcome to Pulumi!</span><br><span class="line"></span><br><span class="line">  Pulumi helps you create, deploy, and manage infrastructure on any cloud using</span><br><span class="line">  your favorite language. You can get started today with Pulumi at:</span><br><span class="line"></span><br><span class="line">      https://www.pulumi.com/docs/get-started/</span><br><span class="line"></span><br><span class="line">  Tip: Resources you create with Pulumi are given unique names (a randomly</span><br><span class="line">  generated suffix) by default. To learn more about auto-naming or customizing resource</span><br><span class="line">  names see https://www.pulumi.com/docs/intro/concepts/resources/<span class="comment">#autonaming.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This <span class="built_in">command</span> will walk you through creating a new Pulumi project.</span><br><span class="line"></span><br><span class="line">Enter a value or leave blank to accept the (default), and press &lt;ENTER&gt;.</span><br><span class="line">Press ^C at any time to quit.</span><br></pre></td></tr></table></figure><p>Pulumiのプロジェクト名とプロジェクトの説明を求められるので、任意の値を入力していきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">project name: (pulum) gcp-test</span><br><span class="line">project description: (A minimal Google Cloud Go Pulumi program) gcp-test</span><br><span class="line">Created project <span class="string">&#x27;gcp-test&#x27;</span></span><br></pre></td></tr></table></figure><p>次に、スタック名を尋ねられます。<code>dev</code>と入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Please enter your desired stack name.</span><br><span class="line">To create a stack <span class="keyword">in</span> an organization, use the format &lt;org-name&gt;/&lt;stack-name&gt; (e.g. `acmecorp/dev`).</span><br><span class="line">stack name: (dev) dev</span><br><span class="line">Created stack <span class="string">&#x27;dev&#x27;</span></span><br></pre></td></tr></table></figure><p>最後に、Google Cloud プロジェクトの場合、Google Cloud プロジェクトを選択するよう求められます。Google Cloud プロジェクト ID を入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcp:project: The Google Cloud project to deploy into: xxxxxxxx</span><br><span class="line">Saved config</span><br></pre></td></tr></table></figure><p>上記の設定が完了すると、作業ディレクトリに以下のファイルが生成されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── Pulumi.dev.yaml <span class="comment"># 初期化したスタックの構成値が記載されています。</span></span><br><span class="line">├── Pulumi.yaml <span class="comment"># Pulumiプロジェクトの情報が記載されています。</span></span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">└── main.go <span class="comment"># スタッリソースを定義する Pulumi のプログラムです。</span></span><br></pre></td></tr></table></figure><p>main.goの見ていきましょう。<br>このPulumiのプログラムは</p><ul><li>USリージョンにGCSバケットを作成</li><li>GCSバケット名をExportする</li></ul><p>内容になっています。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi/sdk/v3/go/pulumi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pulumi.Run(<span class="function"><span class="keyword">func</span><span class="params">(ctx *pulumi.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Create a GCP resource (Storage Bucket)</span></span><br><span class="line">bucket, err := storage.NewBucket(ctx, <span class="string">&quot;my-bucket&quot;</span>, &amp;storage.BucketArgs&#123;</span><br><span class="line">Location: pulumi.String(<span class="string">&quot;US&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export the DNS name of the bucket</span></span><br><span class="line">ctx.Export(<span class="string">&quot;bucketName&quot;</span>, bucket.Url)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="リソースの作成"><a href="#リソースの作成" class="headerlink" title="リソースの作成"></a>リソースの作成</h2><p>上記の内容でPulumiを実行してGoogle Cloudのリソースを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi up</span><br></pre></td></tr></table></figure><p>上記のコマンドを実行すると、Goのプログラムを評価し、実行するリソースの更新を決定します。変更の概要を示すプレビューが表示されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Previewing update (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxx/gcp-test/dev/previews/xxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">Downloading plugin: 47.96 MiB / 47.96 MiB [=========================] 100.00% 2s</span><br><span class="line">                                                                                [resource plugin gcp-6.52.0] installing</span><br><span class="line">     Type                   Name          Plan</span><br><span class="line"> +   pulumi:pulumi:Stack    gcp-test-dev  create</span><br><span class="line"> +   └─ gcp:storage:Bucket  my-bucket     create</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">    bucketName: output&lt;string&gt;</span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 2 to create</span><br><span class="line"></span><br><span class="line">Do you want to perform this update?  [Use arrows to move, <span class="built_in">type</span> to filter]</span><br><span class="line">  <span class="built_in">yes</span></span><br><span class="line">&gt; no</span><br><span class="line">  details</span><br></pre></td></tr></table></figure><p><code>details</code>を選択すると、変更内容の詳細な差分が表示されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Do you want to perform this update? details</span><br><span class="line">+ pulumi:pulumi:Stack: (create)</span><br><span class="line">    [urn=urn:pulumi:dev::gcp-test::pulumi:pulumi:Stack::gcp-test-dev]</span><br><span class="line">    + gcp:storage/bucket:Bucket: (create)</span><br><span class="line">        [urn=urn:pulumi:dev::gcp-test::gcp:storage/bucket:Bucket::my-bucket]</span><br><span class="line">        forceDestroy: <span class="literal">false</span></span><br><span class="line">        location    : <span class="string">&quot;US&quot;</span></span><br><span class="line">        name        : <span class="string">&quot;my-bucket-f077c87&quot;</span></span><br><span class="line">        storageClass: <span class="string">&quot;STANDARD&quot;</span></span><br><span class="line">    --outputs:--</span><br><span class="line">    bucketName: output&lt;string&gt;</span><br></pre></td></tr></table></figure><p><code>yes</code>を選択するとGoogle Cloud に新しいストレージ バケットが作成されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Do you want to perform this update? <span class="built_in">yes</span></span><br><span class="line">Updating (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxx/gcp-test/dev/updates/1</span><br><span class="line"></span><br><span class="line">     Type                   Name          Status</span><br><span class="line"> +   pulumi:pulumi:Stack    gcp-test-dev  created (3s)</span><br><span class="line"> +   └─ gcp:storage:Bucket  my-bucket     created (1s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">    bucketName: <span class="string">&quot;gs://my-bucket-0cae339&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 2 created</span><br><span class="line"></span><br><span class="line">Duration: 5s</span><br></pre></td></tr></table></figure><p>Google Cloudのコンソール画面からCloud Storageを確認すると、バケットが作成されていることが確認できました。<br><img src="/images/20230426a/image_11.png" alt="" width="1200" height="631" loading="lazy"></p><p>スタックのアウトプットを確認したい場合は、以下のコマンドを実行すると確認することができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi stack output bucketName</span><br><span class="line">gs://my-bucket-0cae339</span><br></pre></td></tr></table></figure><p>また、自身のPulumi Cloudのアカウントを確認しに行くと以下のように、Web上でもリソースの状態を確認することができます。</p><img src="/images/20230426a/image_12.png" alt="" width="1200" height="670" loading="lazy"><h1 id="リソースの変更"><a href="#リソースの変更" class="headerlink" title="リソースの変更"></a>リソースの変更</h1><p>GCSバケットを作成することができたので、バケットにオブジェクトを追加してみます。<br>作業ディレクトリに<code>index.html</code>を追加します。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, Pulumi!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>main.goにオブジェクトを追加するコード<code>コメントアウト部分：Add index.html Object</code>を追加します。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi/sdk/v3/go/pulumi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pulumi.Run(<span class="function"><span class="keyword">func</span><span class="params">(ctx *pulumi.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Create a GCP resource (Storage Bucket)</span></span><br><span class="line">bucket, err := storage.NewBucket(ctx, <span class="string">&quot;my-bucket&quot;</span>, &amp;storage.BucketArgs&#123;</span><br><span class="line">Location: pulumi.String(<span class="string">&quot;US&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add index.html Object</span></span><br><span class="line">bucketObject, err := storage.NewBucketObject(ctx, <span class="string">&quot;index.html&quot;</span>, &amp;storage.BucketObjectArgs&#123;</span><br><span class="line">Bucket: bucket.Name,</span><br><span class="line">Source: pulumi.NewFileAsset(<span class="string">&quot;index.html&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export the DNS name of the bucket</span></span><br><span class="line">ctx.Export(<span class="string">&quot;bucketName&quot;</span>, bucket.Url)</span><br><span class="line">ctx.Export(<span class="string">&quot;ObjectName&quot;</span>, bucketObject.Name)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.goの修正が完了したので、変更分をデプロイしていきましょう。<br>再度<code>pulumi up</code>を実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi up</span><br><span class="line">Previewing update (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxx/gcp-test/dev/previews/xxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                         Name          Plan</span><br><span class="line">     pulumi:pulumi:Stack          gcp-test-dev</span><br><span class="line"> +   └─ gcp:storage:BucketObject  index.html    create</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  + ObjectName: <span class="string">&quot;index.html-6b14a12&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 1 to create</span><br><span class="line">    2 unchanged</span><br><span class="line"></span><br><span class="line">Do you want to perform this update?  [Use arrows to move, <span class="built_in">type</span> to filter]</span><br><span class="line">&gt; <span class="built_in">yes</span></span><br><span class="line">  no</span><br><span class="line">  details</span><br></pre></td></tr></table></figure><p><code>yes</code>を入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Do you want to perform this update? <span class="built_in">yes</span></span><br><span class="line">Updating (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxx/gcp-test/dev/updates/2</span><br><span class="line"></span><br><span class="line">     Type                         Name          Status</span><br><span class="line">     pulumi:pulumi:Stack          gcp-test-dev</span><br><span class="line"> +   └─ gcp:storage:BucketObject  index.html    created (0.74s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  + ObjectName: <span class="string">&quot;index.html-5c30f0c&quot;</span></span><br><span class="line">    bucketName: <span class="string">&quot;gs://my-bucket-0cae339&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 1 created</span><br><span class="line">    2 unchanged</span><br><span class="line"></span><br><span class="line">Duration: 3s</span><br></pre></td></tr></table></figure><p>更新作業が完了したので、<code>gsutilコマンド</code>でオブジェクトのアップロードを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gsutil <span class="built_in">ls</span> $(pulumi stack output bucketName)</span><br><span class="line">gs://my-bucket-0cae339/index.html-5c30f0c</span><br></pre></td></tr></table></figure><p>オブジェクトがアップロードできていることが確認できました。</p><p><code>index.html</code> がバケットにあるので、main.goを変更して、バケットが <code>index.html</code> を静的 Web サイトとして機能するように設定します。</p><p>変更内容は以下になります。</p><ul><li>websiteバケットにプロパティを設定します。</li><li>Google Cloud Storage の推奨事項に合わせて、バケットに対する均一なバケットレベルのアクセスをtrueに設定します。</li><li>バケットのコンテンツをインターネット経由でアクセスできるようにします。</li><li>オブジェクトのコンテンツタイプ<code>text/html</code>に変更して、HTMLとして提供されるようにします。</li><li>バケットのエンドポイントURLをエクスポートします。</li></ul><p><code>コメントアウト：//Settings for publishing content to the Internet</code>が修正部分になります。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/pulumi/pulumi/sdk/v3/go/pulumi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pulumi.Run(<span class="function"><span class="keyword">func</span><span class="params">(ctx *pulumi.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Create a GCP resource (Storage Bucket)</span></span><br><span class="line">bucket, err := storage.NewBucket(ctx, <span class="string">&quot;my-bucket&quot;</span>, &amp;storage.BucketArgs&#123;</span><br><span class="line">Location: pulumi.String(<span class="string">&quot;US&quot;</span>),</span><br><span class="line"><span class="comment">// Settings for publishing content to the Internet</span></span><br><span class="line">Website: storage.BucketWebsiteArgs&#123;</span><br><span class="line">MainPageSuffix: pulumi.String(<span class="string">&quot;index.html&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">UniformBucketLevelAccess: pulumi.Bool(<span class="literal">true</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add index.html Object</span></span><br><span class="line">bucketObject, err := storage.NewBucketObject(ctx, <span class="string">&quot;index.html&quot;</span>, &amp;storage.BucketObjectArgs&#123;</span><br><span class="line">Bucket: bucket.Name,</span><br><span class="line">ContentType: pulumi.String(<span class="string">&quot;text/html&quot;</span>), <span class="comment">// Settings for publishing content to the Internet</span></span><br><span class="line">Source: pulumi.NewFileAsset(<span class="string">&quot;index.html&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Settings for publishing content to the Internet</span></span><br><span class="line">_, err = storage.NewBucketIAMBinding(ctx, <span class="string">&quot;my-bucket-IAMBinding&quot;</span>, &amp;storage.BucketIAMBindingArgs&#123;</span><br><span class="line">Bucket: bucket.Name,</span><br><span class="line">Role:   pulumi.String(<span class="string">&quot;roles/storage.objectViewer&quot;</span>),</span><br><span class="line">Members: pulumi.StringArray&#123;</span><br><span class="line">pulumi.String(<span class="string">&quot;allUsers&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export the DNS name of the bucket</span></span><br><span class="line">ctx.Export(<span class="string">&quot;bucketName&quot;</span>, bucket.Url)</span><br><span class="line">ctx.Export(<span class="string">&quot;ObjectName&quot;</span>, bucketObject.Name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Settings for publishing content to the Internet</span></span><br><span class="line">bucketEndpoint := pulumi.Sprintf(<span class="string">&quot;http://storage.googleapis.com/%s/%s&quot;</span>, bucket.Name, bucketObject.Name)</span><br><span class="line">ctx.Export(<span class="string">&quot;bucketEndpoint&quot;</span>, bucketEndpoint)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.goの設定が完了しましたので、<code>pulumi up</code>を実行し<code>yes</code>を選択しデプロイします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi up</span><br><span class="line">Previewing update (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxx/gcp-test/dev/previews/xxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                             Name                  Plan        Info</span><br><span class="line">     pulumi:pulumi:Stack              gcp-test-dev</span><br><span class="line"> ~   ├─ gcp:storage:Bucket            my-bucket             update      [diff: +website~uniformBucketLevelAccess]</span><br><span class="line"> +   ├─ gcp:storage:BucketIAMBinding  my-bucket-IAMBinding  create</span><br><span class="line"> +-  └─ gcp:storage:BucketObject      index.html            replace     [diff: ~contentType]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  ~ ObjectName    : <span class="string">&quot;index.html-5c30f0c&quot;</span> =&gt; <span class="string">&quot;index.html-0bac7da&quot;</span></span><br><span class="line">  + bucketEndpoint: <span class="string">&quot;http://storage.googleapis.com/my-bucket-0cae339/index.html-0bac7da&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 1 to create</span><br><span class="line">    ~ 1 to update</span><br><span class="line">    +-1 to replace</span><br><span class="line">    3 changes. 1 unchanged</span><br><span class="line"></span><br><span class="line">Do you want to perform this update?  [Use arrows to move, <span class="built_in">type</span> to filter]</span><br><span class="line">&gt; <span class="built_in">yes</span></span><br><span class="line">  no</span><br><span class="line">  details</span><br></pre></td></tr></table></figure><p>デプロイが完了しましたので、<code>curlコマンド</code>を実行し、バケットエンドポイントへアクセスします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl $(pulumi stack output bucketEndpoint)</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;Hello, Pulumi!&lt;/h1&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>オブジェクトを取得することができました。<br>ChromeでアクセスするとWebブラウザ上でindex.htmlの内容が表示されることも確認することができました。</p><img src="/images/20230426a/image_13.png" alt="" width="296" height="57" loading="lazy"><h2 id="リソースの削除"><a href="#リソースの削除" class="headerlink" title="リソースの削除"></a>リソースの削除</h2><p>それでは作成したリソースたちを削除していきます。<br>リソースの一括削除もできることもIaCのいいところですね。（本番環境では注意です。）</p><p><code>pulumi destroy</code>を実行します。<br>リソースを本当に削除するかどうかを確認するプロンプトが表示されます。問題なければ<code>yes</code>を選択し、リソースが削除されるまで待機します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi destroy</span><br><span class="line">Previewing destroy (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxx/gcp-test/dev/previews/xxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                             Name                  Plan</span><br><span class="line"> -   pulumi:pulumi:Stack              gcp-test-dev          delete</span><br><span class="line"> -   ├─ gcp:storage:BucketIAMBinding  my-bucket-IAMBinding  delete</span><br><span class="line"> -   ├─ gcp:storage:BucketObject      index.html            delete</span><br><span class="line"> -   └─ gcp:storage:Bucket            my-bucket             delete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  - ObjectName    : <span class="string">&quot;index.html-debb576&quot;</span></span><br><span class="line">  - bucketEndpoint: <span class="string">&quot;http://storage.googleapis.com/my-bucket-0cae339/index.html-debb576&quot;</span></span><br><span class="line">  - bucketName    : <span class="string">&quot;gs://my-bucket-0cae339&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    - 4 to delete</span><br><span class="line"></span><br><span class="line">Do you want to perform this destroy?  [Use arrows to move, <span class="built_in">type</span> to filter]</span><br><span class="line">&gt; <span class="built_in">yes</span></span><br><span class="line">  no</span><br><span class="line">  details</span><br></pre></td></tr></table></figure><p>なぜか、バケットが削除されなくてエラーになりました。</p><p>pulumi上からオブジェクトは削除されていましたが、Google Cloudのコンソール画面を見るとオブジェクトが削除されていませんでした。。。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Do you want to perform this destroy? <span class="built_in">yes</span></span><br><span class="line">Destroying (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxx/gcp-test/dev/updates/5</span><br><span class="line"></span><br><span class="line">     Type                             Name                  Status                  Info</span><br><span class="line">     pulumi:pulumi:Stack              gcp-test-dev          **failed**              1 error</span><br><span class="line"> -   ├─ gcp:storage:BucketIAMBinding  my-bucket-IAMBinding  deleted (6s)</span><br><span class="line"> -   ├─ gcp:storage:BucketObject      index.html            deleted (0.90s)</span><br><span class="line"> -   └─ gcp:storage:Bucket            my-bucket             **deleting failed**     1 error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Diagnostics:</span><br><span class="line">  pulumi:pulumi:Stack (gcp-test-dev):</span><br><span class="line">    error: update failed</span><br><span class="line"></span><br><span class="line">  gcp:storage:Bucket (my-bucket):</span><br><span class="line">    error: deleting urn:pulumi:dev::gcp-test::gcp:storage/bucket:Bucket::my-bucket: 1 error occurred:</span><br><span class="line">        * Error trying to delete bucket my-bucket-0cae339 containing objects without `force_destroy` <span class="built_in">set</span> to <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    - 2 deleted</span><br><span class="line"></span><br><span class="line">Duration: 8s</span><br></pre></td></tr></table></figure><p>Google Cloudのコンソール画面から手動でオブジェクトを削除し、再度<code>pulumi destroy</code>を実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi destroy</span><br><span class="line">Previewing destroy (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxx/gcp-test/dev/previews/xxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                   Name          Plan</span><br><span class="line"> -   pulumi:pulumi:Stack    gcp-test-dev  delete</span><br><span class="line"> -   └─ gcp:storage:Bucket  my-bucket     delete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  - ObjectName    : <span class="string">&quot;index.html-debb576&quot;</span></span><br><span class="line">  - bucketEndpoint: <span class="string">&quot;http://storage.googleapis.com/my-bucket-0cae339/index.html-debb576&quot;</span></span><br><span class="line">  - bucketName    : <span class="string">&quot;gs://my-bucket-0cae339&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    - 2 to delete</span><br><span class="line"></span><br><span class="line">Do you want to perform this destroy? <span class="built_in">yes</span></span><br><span class="line">Destroying (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxxxxx/gcp-test/dev/updates/9</span><br><span class="line"></span><br><span class="line">     Type                   Name          Status</span><br><span class="line"> -   pulumi:pulumi:Stack    gcp-test-dev  deleted</span><br><span class="line"> -   └─ gcp:storage:Bucket  my-bucket     deleted (1s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">  - ObjectName    : <span class="string">&quot;index.html-debb576&quot;</span></span><br><span class="line">  - bucketEndpoint: <span class="string">&quot;http://storage.googleapis.com/my-bucket-0cae339/index.html-debb576&quot;</span></span><br><span class="line">  - bucketName    : <span class="string">&quot;gs://my-bucket-0cae339&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    - 2 deleted</span><br><span class="line"></span><br><span class="line">Duration: 3s</span><br><span class="line"></span><br><span class="line">The resources <span class="keyword">in</span> the stack have been deleted, but the <span class="built_in">history</span> and configuration associated with the stack are still maintained.</span><br><span class="line">If you want to remove the stack completely, run `pulumi stack <span class="built_in">rm</span> dev`.</span><br></pre></td></tr></table></figure><p>無事削除されました。</p><img src="/images/20230426a/image_14.png" alt="" width="1200" height="624" loading="lazy"><p>スタック自体を削除するには、<code>pulumi stack rm</code>を実行します。このコマンドによりすべての更新履歴とともに、Pulumi Cloud からスタックが完全に削除されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi stack <span class="built_in">rm</span></span><br><span class="line">This will permanently remove the <span class="string">&#x27;dev&#x27;</span> stack!</span><br><span class="line">Please confirm that this is what you<span class="string">&#x27;d like to do by typing `dev`: dev</span></span><br><span class="line"><span class="string">Stack &#x27;</span>dev<span class="string">&#x27; has been removed!</span></span><br></pre></td></tr></table></figure><p>Pulumi Cloudを確認すると、dev stackが削除されていることが確認できました。<br><img src="/images/20230426a/image_15.png" alt="" width="1200" height="474" loading="lazy"></p><h1 id="外伝-Pulumi-AI"><a href="#外伝-Pulumi-AI" class="headerlink" title="[外伝] Pulumi AI"></a>[外伝] Pulumi AI</h1><p>ちょうど一週間ほど前に、自然言語からIaC（インフラ構成コード）を自動生成する「Pulumi AI」を含む、AIを活用した新サービス群「Pulumi Insights」が発表されました。<br>タイムリーな内容なので、本記事でも試してみたいと思います</p><p><a href="https://www.publickey1.jp/blog/23/pulumipulumi_aiawsazurecloudflarekubernetesdatadog130infra-as-code.html">https://www.publickey1.jp/blog/23/pulumipulumi_aiawsazurecloudflarekubernetesdatadog130infra-as-code.html</a></p><p><a href="https://www.pulumi.com/ai/">https://www.pulumi.com/ai/</a></p><h2 id="早速使ってみた。"><a href="#早速使ってみた。" class="headerlink" title="早速使ってみた。"></a>早速使ってみた。</h2><p>Pulumi AIの入力に以下の情報を渡してみました。日本語にも対応しています。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Create GCP Resource.</span><br><span class="line">・VPC and The CIDR of the subnet is 192.168.0.0/24 and the region uses us-central1.</span><br><span class="line">・Create a firewall that allows ssh with iap using the iap-ssh tag.</span><br><span class="line">・Build a GCE using ubuntu 20.04 using the FIrewall you just created.</span><br><span class="line">・Export of InstanceName</span><br></pre></td></tr></table></figure><p>上記の入力を与えたときには下記のようにPulumi AIが入力内容をもとにPulumiのGoのコードを生成していきます。（す、すごい。。。）</p><img src="/images/20230426a/ezgif.com-video-to-gif_(4).gif" alt="ezgif.com-video-to-gif_(4).gif" width="600" height="338" loading="lazy"><p>以下が、Pulumi AIによって生成されたコードになります。<br>きちんと作成するリソースごとにコメントアウトも入れてくれて助かります。</p><figure class="highlight go"><figcaption><span>Pulumi AIによって自動生成されたコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/compute&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/pulumi/pulumi/sdk/v3/go/pulumi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    pulumi.Run(<span class="function"><span class="keyword">func</span><span class="params">(ctx *pulumi.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">        <span class="comment">// Create a GCP VPC network</span></span><br><span class="line">        vpc, err := compute.NewNetwork(ctx, <span class="string">&quot;my-vpc&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a GCP subnet in the us-central1 region</span></span><br><span class="line">        subnet, err := compute.NewSubnetwork(ctx, <span class="string">&quot;my-subnet&quot;</span>, &amp;compute.SubnetworkArgs&#123;</span><br><span class="line">            Network: vpc.ID(),</span><br><span class="line">            Region:  pulumi.String(<span class="string">&quot;us-central1&quot;</span>),</span><br><span class="line">            IpCidrRange: pulumi.String(<span class="string">&quot;192.168.0.0/24&quot;</span>),</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create firewall rule</span></span><br><span class="line">        firewall, err := compute.NewFirewall(ctx, <span class="string">&quot;allow-ssh-with-iap&quot;</span>, &amp;compute.FirewallArgs&#123;</span><br><span class="line">            Network: vpc.ID(),</span><br><span class="line">            Allows: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;tcp:22&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            SourceRanges: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;35.235.240.0/20&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            TargetTags: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;iap-ssh&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create GCE instance</span></span><br><span class="line">        instance, err := compute.NewInstance(ctx, <span class="string">&quot;my-instance&quot;</span>, &amp;compute.InstanceArgs&#123;</span><br><span class="line">            MachineType: pulumi.String(<span class="string">&quot;e2-small&quot;</span>),</span><br><span class="line">            BootDisk: &amp;compute.InstanceBootDiskArgs&#123;</span><br><span class="line">                InitializeParams: &amp;compute.InstanceBootDiskInitializeParamsArgs&#123;</span><br><span class="line">                    ImageFamily: pulumi.String(<span class="string">&quot;ubuntu-2004-lts&quot;</span>),</span><br><span class="line">                    ImageProject: pulumi.String(<span class="string">&quot;ubuntu-os-cloud&quot;</span>),</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            NetworkInterfaces: compute.InstanceNetworkInterfaceArray&#123;</span><br><span class="line">                &amp;compute.InstanceNetworkInterfaceArgs&#123;</span><br><span class="line">                    Subnetwork: subnet.ID(),</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            Tags: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;iap-ssh&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Export InstanceName</span></span><br><span class="line">        ctx.Export(<span class="string">&quot;InstanceName&quot;</span>, instance.Name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>とりあえず、脳死コピーをして<code>pulumi up</code>を実行すると下記のようにエラーになりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi up</span><br><span class="line">Previewing update (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxxx/gcp-test/dev/previews/xxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                 Name          Plan     Info</span><br><span class="line">     pulumi:pulumi:Stack  gcp-test-dev           1 error; 5 messages</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Diagnostics:</span><br><span class="line">  pulumi:pulumi:Stack (gcp-test-dev):</span><br><span class="line">    <span class="comment"># gcp-test</span></span><br><span class="line">    ./main.go:27:9: firewall declared and not used</span><br><span class="line">    ./main.go:29:21: cannot use pulumi.StringArray&#123;…&#125; (value of <span class="built_in">type</span> pulumi.StringArray) as compute.FirewallAllowArrayInput value <span class="keyword">in</span> struct literal: pulumi.StringArray does not implement compute.FirewallAllowArrayInput (missing method ToFirewallAllowArrayOutput)</span><br><span class="line">    ./main.go:48:21: unknown field ImageFamily <span class="keyword">in</span> struct literal of <span class="built_in">type</span> compute.InstanceBootDiskInitializeParamsArgs</span><br><span class="line">    ./main.go:49:21: unknown field ImageProject <span class="keyword">in</span> struct literal of <span class="built_in">type</span> compute.InstanceBootDiskInitializeParamsArgs</span><br><span class="line"></span><br><span class="line">    error: error <span class="keyword">in</span> compiling Go: unable to run `go build`: <span class="built_in">exit</span> status 1</span><br></pre></td></tr></table></figure><p>GCE&#x2F;Firewallのgoの記載方法が誤っていそうなので<a href="https://www.pulumi.com/registry/packages/gcp/api-docs/compute/instance/">GCEについての公式ドキュメント</a>と<a href="https://www.pulumi.com/registry/packages/gcp/api-docs/compute/firewall/">Firewallについての公式ドキュメント</a>を確認し、エラーを修正します。</p><p>また、GCEを構築するゾーン指定が漏れていたので、48行目に追加します。</p><figure class="highlight go"><figcaption><span>修正後</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/compute&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/pulumi/pulumi/sdk/v3/go/pulumi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    pulumi.Run(<span class="function"><span class="keyword">func</span><span class="params">(ctx *pulumi.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">        <span class="comment">// Create a GCP VPC network</span></span><br><span class="line">        vpc, err := compute.NewNetwork(ctx, <span class="string">&quot;my-vpc&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a GCP subnet in the us-central1 region</span></span><br><span class="line">        subnet, err := compute.NewSubnetwork(ctx, <span class="string">&quot;my-subnet&quot;</span>, &amp;compute.SubnetworkArgs&#123;</span><br><span class="line">            Network: vpc.ID(),</span><br><span class="line">            Region:  pulumi.String(<span class="string">&quot;us-central1&quot;</span>),</span><br><span class="line">            IpCidrRange: pulumi.String(<span class="string">&quot;192.168.0.0/24&quot;</span>),</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create firewall rule</span></span><br><span class="line">        _, err = compute.NewFirewall(ctx, <span class="string">&quot;allow-ssh-with-iap&quot;</span>, &amp;compute.FirewallArgs&#123;</span><br><span class="line">            Network: vpc.ID(),</span><br><span class="line">Allows: compute.FirewallAllowArray&#123;</span><br><span class="line">&amp;compute.FirewallAllowArgs&#123;</span><br><span class="line">Protocol: pulumi.String(<span class="string">&quot;tcp&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">            SourceRanges: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;35.235.240.0/20&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            TargetTags: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;iap-ssh&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create GCE instance</span></span><br><span class="line">        instance, err := compute.NewInstance(ctx, <span class="string">&quot;my-instance&quot;</span>, &amp;compute.InstanceArgs&#123;</span><br><span class="line">            MachineType: pulumi.String(<span class="string">&quot;e2-small&quot;</span>),</span><br><span class="line">Zone:        pulumi.String(<span class="string">&quot;us-central1-a&quot;</span>),</span><br><span class="line">            BootDisk: &amp;compute.InstanceBootDiskArgs&#123;</span><br><span class="line">                InitializeParams: &amp;compute.InstanceBootDiskInitializeParamsArgs&#123;</span><br><span class="line">                    Image: pulumi.String(<span class="string">&quot;ubuntu-2004-lts&quot;</span>),</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            NetworkInterfaces: compute.InstanceNetworkInterfaceArray&#123;</span><br><span class="line">                &amp;compute.InstanceNetworkInterfaceArgs&#123;</span><br><span class="line">                    Subnetwork: subnet.ID(),</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            Tags: pulumi.StringArray&#123;</span><br><span class="line">                pulumi.String(<span class="string">&quot;iap-ssh&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Export InstanceName</span></span><br><span class="line">        ctx.Export(<span class="string">&quot;InstanceName&quot;</span>, instance.Name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修正後、再度<code>pulumi up</code>コマンドを実行し、yesをクリックします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ pulumi up</span><br><span class="line">Previewing update (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxxxxxx/gcp-test/dev/previews/xxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">     Type                       Name                Plan</span><br><span class="line"> +   pulumi:pulumi:Stack        gcp-test-dev        create</span><br><span class="line"> +   ├─ gcp:compute:Network     my-vpc              create</span><br><span class="line"> +   ├─ gcp:compute:Subnetwork  my-subnet           create</span><br><span class="line"> +   ├─ gcp:compute:Firewall    allow-ssh-with-iap  create</span><br><span class="line"> +   └─ gcp:compute:Instance    my-instance         create</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">    InstanceName: <span class="string">&quot;my-instance-1e6164c&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 5 to create</span><br><span class="line"></span><br><span class="line">Do you want to perform this update?  [Use arrows to move, <span class="built_in">type</span> to filter]</span><br><span class="line">&gt; <span class="built_in">yes</span></span><br><span class="line">  no</span><br><span class="line">  details</span><br></pre></td></tr></table></figure><p>下記のように、成功しました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Do you want to perform this update? <span class="built_in">yes</span></span><br><span class="line">Updating (dev)</span><br><span class="line"></span><br><span class="line">View <span class="keyword">in</span> Browser (Ctrl+O): https://app.pulumi.com/xxxxxxxxxxxxx/gcp-test/dev/updates/12</span><br><span class="line"></span><br><span class="line">     Type                       Name                Status</span><br><span class="line"> +   pulumi:pulumi:Stack        gcp-test-dev        created (76s)</span><br><span class="line"> +   ├─ gcp:compute:Network     my-vpc              created (43s)</span><br><span class="line"> +   ├─ gcp:compute:Subnetwork  my-subnet           created (14s)</span><br><span class="line"> +   ├─ gcp:compute:Firewall    allow-ssh-with-iap  created (12s)</span><br><span class="line"> +   └─ gcp:compute:Instance    my-instance         created (17s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line">    InstanceName: <span class="string">&quot;my-instance-a5cb493&quot;</span></span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">    + 5 created</span><br><span class="line"></span><br><span class="line">Duration: 1m19s</span><br></pre></td></tr></table></figure><p>Google Cloudのマネジメントコンソールから「VMインスタンス」に作成されたVMインスタンスの「SSHボタン」をクリックします。</p><p>ブラウザがたちが上がり、しばらくすると無事にIAP経由でSSHできることを確認できました。</p><img src="/images/20230426a/image.jpg" alt="image.jpg" width="1200" height="841" loading="lazy"><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回は、PulumiでのIaC入門について記載しました。</p><p>IaCはインフラリソースをコードで管理できるため、インフラリソースの迅速なデプロイや、品質の担保、オペミスの削減など様々なメリットがありますが、運用上のつらみもあるので利用するにはコードを管理するディレクトリ設計や、コーディング規約などを設けて利用していきましょう。</p><p>Pulumiにも入門してみましたが、いかがだったでしょうか。普段Terraformを利用している筆者からすると、アプリケーションコード(Go)を使用してインフラリソースが構築できるのは新鮮でした。普段アプリケーションコードを書いているアプリエンジニアからするとだいぶインフラリソースを構築するハードルが下がったのではと思います。</p><p>また、外伝としてPulumi AIにも触れてみましたが、入力する内容が良くなかったのか一発で<code>Pulumi up</code>を成功させることができなかったです。しかし、コンソールで対話型で構築したいインフラリソースを入力することでコードが自動生成されたるのは画期的だと思いました。まだまだ精度の問題はあるかと思いますが、いつかコードを自身で0から書かなくなる日もすぐそこなのだろうなと危機感を持ちました。</p><p>春の入門祭り2023、次回は小澤泰河さんの<a href="/articles/20230427a/">CDN 入門とエッジでのアプリケーション実行</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;Technology Inovation Group(TIG)所属の筋肉エンジニアの渡邉です。&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="IaC" scheme="https://future-architect.github.io/tags/IaC/"/>
    
    <category term="Pulumi" scheme="https://future-architect.github.io/tags/Pulumi/"/>
    
    <category term="Infrastructure_as_code" scheme="https://future-architect.github.io/tags/Infrastructure-as-code/"/>
    
  </entry>
  
  <entry>
    <title>Hack The Box Oopsie を解いてみた</title>
    <link href="https://future-architect.github.io/articles/20230425a/"/>
    <id>https://future-architect.github.io/articles/20230425a/</id>
    <published>2023-04-24T15:00:00.000Z</published>
    <updated>2023-04-26T02:18:58.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>金融グループ所属、2022年4月入社の藤戸四恩です。<a href="/articles/20230417a/">春の入門ブログ連載</a>の7本目です。</p><p>2022年のアドベントカレンダーで<a href="https://qiita.com/fujito_shion/items/6a4475fc8784d2e77d4c">Hack The Boxのstarting pointを解いてみた</a>の記事を書きました。今回も「Hack The Box」のStarting PointのTIER2のOopsieを解いてみたので感想を書きたいと思います。</p><h2 id="Hack-The-Boxとは"><a href="#Hack-The-Boxとは" class="headerlink" title="Hack The Boxとは"></a>Hack The Boxとは</h2><p>Hack The Boxとは、サイバーセキュリティスキルの向上トレーニングができるオンラインプラットフォームです。</p><p>仮想の環境が用意されており、脆弱性をついてflagの取得を目的としています。</p><h2 id="Starting-Pointとは"><a href="#Starting-Pointとは" class="headerlink" title="Starting Pointとは"></a>Starting Pointとは</h2><p>Starting Pointとは、Hack The Boxを行う上での基礎的なことを学ぶことができる、チュートリアルです。Starting Pointには、TIER0、TIER1、TIER2の3つあります。各問題にTASKが複数あり、最後にflagを取るための誘導になっています。</p><h2 id="Oopsie"><a href="#Oopsie" class="headerlink" title="Oopsie"></a>Oopsie</h2><p>TIER2の問題から<code>root.txt</code>と<code>user.txt</code>の二つフラグを取得する必要があります。</p><p>問題はTASK1 ~ TASK10と<code>root.txt</code>と<code>user.txt</code>の中身を提出する12問から構成されています。</p><h3 id="TASK1"><a href="#TASK1" class="headerlink" title="TASK1"></a>TASK1</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">With what kind of tool can intercept web traffic?</span><br></pre></td></tr></table></figure><p>どのようなツールでWebトラフィックを傍受できるか?　と問われています。<br>こちらは、<code>proxy</code>と回答すればよいです。</p><h3 id="TASK2"><a href="#TASK2" class="headerlink" title="TASK2"></a>TASK2</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What is the path to the directory on the webserver that returns a login page?</span><br></pre></td></tr></table></figure><p>ログインページを返す Web サーバー上のディレクトリへのパスは何ですか?　と問われています。</p><p><code>http://&#123;IPアドレス&#125;</code> にアクセスしBurp Suiteを使用しながらリクエストを眺めます。</p><p>内容は下図のようになります。</p><img src="/images/20230425a/image.png" alt="" width="1200" height="526" loading="lazy"><p><code>cdn-cgi/login</code> ディレクトリが存在しているのがわかるので、<code>http://&#123;IPアドレス&#125;/cdn-cgi/login</code> にアクセスしてみます。</p><img src="/images/20230425a/image_2.png" alt="" width="1200" height="889" loading="lazy"><p>Loginページを見つけることができました。</p><p>よって、<code>cdn-cgi/login</code>と回答すればよいです。</p><h3 id="TASK3-4"><a href="#TASK3-4" class="headerlink" title="TASK3, 4"></a>TASK3, 4</h3><p>TASK3の問題</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What can be modified in Firefox to get access to the upload page?</span><br></pre></td></tr></table></figure><p>TASK４の問題</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What is the access ID of the admin user?`</span><br></pre></td></tr></table></figure><p>TASK3は、アップロードページにアクセスするには、Firefoxで何を変更できますか?と問われており、TASK４は、admin ユーザーのアクセスIDを問われています。TASK2のログインページでLogin as Guestのリンクがあるのでクリックしてみます。</p><img src="/images/20230425a/image_3.png" alt="" width="1200" height="690" loading="lazy"><p>ヘッダーのAccountをクリックしてみます。<br><img src="/images/20230425a/image_4.png" alt="" width="1200" height="690" loading="lazy"></p><p>URLが<code>http://&#123;IPアドレス&#125;/cdn-cgi/login/admin.php?content=accounts&amp;id=2</code>とguestの時idが2となっています。そこでid&#x3D;1にしてURLを叩いてみます。</p><img src="/images/20230425a/image_5.png" alt="" width="1200" height="686" loading="lazy"><p>adminユーザのIDがわかりました。</p><p>よって、TASK3の回答が<code>cookie</code>で、TASK4の回答が<code>34322</code>となります。</p><h3 id="TASK5"><a href="#TASK5" class="headerlink" title="TASK5"></a>TASK5</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">On uploading a file, what directory does that file appear in on the server?</span><br></pre></td></tr></table></figure><p>ファイルをアップロードすると、そのファイルはサーバー上のどのディレクトリに表示されますか?と問われています。</p><p>TASK3,4でadminユーザはID34322と分かったので、cookieのuserを34322、roleをadminに変更し、uploadsをクリックします。</p><img src="/images/20230425a/image_6.png" alt="" width="1200" height="743" loading="lazy"><p>ファイルをアップロードすると<code>The file &#123;ファイル名&#125; has been uploaded.</code>と表示されます。</p><p>gobusterをつかって、探索してみます。</p><img src="/images/20230425a/image_7.png" alt="" width="751" height="410" loading="lazy"><p><code>uploads</code>がありました。よって、回答は<code>uploads</code>です。また、ファイルをアップロードすると<code>uploads</code>配下にファイルが格納されそうと推測できます。</p><h3 id="TASK6"><a href="#TASK6" class="headerlink" title="TASK6"></a>TASK6</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What is the file that contains the password that is shared with the robert user?</span><br></pre></td></tr></table></figure><p>robert ユーザーと共有されているパスワードを含むファイルは何ですか?と問われています。</p><p>実際にアクセスしてみます。</p><img src="/images/20230425a/image_8.png" alt="image.png" width="751" height="410" loading="lazy"><p>権限がないと怒られます。</p><p><a href="https://github.com/BlackArch/webshells">php-reverse-shell</a>をファイルアップロードして、reverse-shellを試みます。</p><img src="/images/20230425a/image_9.png" alt="" width="908" height="138" loading="lazy"><p>lsコマンドで色々探してると、<code>/var/www/html/cdn-cgi/login</code>配下にdb.phpファイルが存在します。<br>db.phpファイルをcatしてみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> db.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;robert&#x27;</span>,<span class="string">&#x27;M3g4C0rpUs3r!&#x27;</span>,<span class="string">&#x27;garage&#x27;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>mysqlへの接続情報が記載されています。よって、設問の解答は<code>db.php</code>になります。</p><h3 id="TASK7"><a href="#TASK7" class="headerlink" title="TASK7"></a>TASK7</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What executible is run with the option &quot;-group bugtracker&quot; to identify all files owned by the bugtracker group?</span><br></pre></td></tr></table></figure><p>bugtrackerグループが所有するすべてのファイルを特定するために、オプション “-group bugtracker” を付けて実行される実行ファイルは何か？ と問われています。</p><p>whoamiコマンドを実行すると <code>www-data</code>と表示されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">whoami</span></span><br><span class="line">www-data</span><br></pre></td></tr></table></figure><p>robertに切り替えたいと考えたのですが、ここで詰まってしまい、walkthroughを確認してしまいました。</p><ul><li>Hack The Box は Starting Pointの問題は、walkthroughという回答が用意されています。</li></ul><img src="/images/20230425a/image_10.png" alt="" width="725" height="105" loading="lazy"><p>walkthroughを確認すると、どうやらPythonの実行環境があるらしいので、上図のように実行します。</p><p>※なぜptyをimportしているかはこちらの記事が参考になりました。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>robertにユーザを変更します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ su robert</span><br></pre></td></tr></table></figure><p>パスワードはmysqlの接続情報に記載されていた<code>M3g4C0rpUs3r!</code>を入力するとユーザを切り替えすることができました。<br>bugtrackerに属するファイルを探します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find / -group bugtracker 2&gt;/dev/null</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">/usr/bin/bugtracker</span></span><br></pre></td></tr></table></figure><p>何やら怪しげなファイルがありました。設問の回答としては、<code>find</code>です。</p><h3 id="TASK8"><a href="#TASK8" class="headerlink" title="TASK8"></a>TASK8</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Regardless of which user starts running the bugtracker executable, what&#x27;s user privileges will use to run?</span><br></pre></td></tr></table></figure><p>どのユーザーがbugtracker実行ファイルを実行し始めたかに関わらず、実行するために使用するユーザー権限は何ですか？と問われています。こちらの回答は<code>root</code>になります。</p><h3 id="TASK9"><a href="#TASK9" class="headerlink" title="TASK9"></a>TASK9</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What SUID stands for?</span><br></pre></td></tr></table></figure><p>SUIDは何を表すかを問われています。SUIDについて知らなかったため調べてみました。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><p>SUIDとは、Set owner User IDの略で、セットしたUserIDでファイルが実行されるそうです。</p><p>よって回答としては、<code>Set owner User ID</code>になります。</p><h3 id="TASK10"><a href="#TASK10" class="headerlink" title="TASK10"></a>TASK10</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What is the name of the executable being called in an insecure manner?</span><br></pre></td></tr></table></figure><p>安全でない方法で呼び出されている実行ファイルの名前は何ですか？と問われています。</p><p>TASK7でbugtracker　グループに属しているファイルを実行してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/bugtracker</span><br><span class="line"></span><br><span class="line">------------------</span><br><span class="line">: EV Bug Tracker :</span><br><span class="line">------------------</span><br><span class="line"></span><br><span class="line">Provide Bug ID: hoge</span><br><span class="line">---------------</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span>: /root/reports/hoge: No such file or directory</span><br></pre></td></tr></table></figure><p>実行するとidを聞かれ、hogeと入力すると出力結果には、<code>cat: /root/reports/hoge: No such file or directory</code> と表示されていることがわかります。</p><p>つまり、このファイルは <code>/root/reports/</code> 入力値のファイルを <code>cat</code> していることがわかります。</p><p>設問の解答としては、<code>cat</code>になります。</p><h3 id="user-txtの取得"><a href="#user-txtの取得" class="headerlink" title="user.txtの取得"></a>user.txtの取得</h3><p><code>user.txt</code> は既に <code>/home/robert/</code> 配下に存在しているのでその中身を取得すればよいです。</p><h3 id="root-txtの取得"><a href="#root-txtの取得" class="headerlink" title="root.txtの取得"></a>root.txtの取得</h3><p><code>/usr/bin/bugtrancker</code> は <code>root</code> ユーザとして実行される。<br><code>cat</code> を自分の作成したファイルを呼び出したい。<br>そこで、 <code>/tmp</code> 配下に <code>cat</code> ファイルを作成し、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="built_in">touch</span> <span class="built_in">cat</span></span><br><span class="line"><span class="built_in">chmod</span> +x <span class="built_in">cat</span></span><br></pre></td></tr></table></figure><p>また、 <code>cat</code> ファイルの中身に <code>/bin/bash</code> を書き込みます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/bin/bash&quot;</span> &gt; <span class="built_in">cat</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/tmp:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure><p>これにより、<code>/usr/bin/bugtracker</code>を実行し、 <code>whoami</code> を実行すると <code>root</code> ユーザでシェルが立ち上がっているのが確認できます。</p><img src="/images/20230425a/image_11.png" alt="" width="338" height="197" loading="lazy"><p>あとは <code>/root</code> 配下のフラグを提出すれば完了です。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回は権限昇格がポイントでした。</p><p>権限昇格の部分で非常に詰まりました。</p><p>TIER2以降では権限昇格は必要な知識なので、しっかり使えるようになることが大切だと感じました。</p><p>明日の記事は、渡邉さんの<a href="/articles/20230426a/">Pulumiで始めるIaC入門</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://qiita.com/kasei-san/items/3edb52359ff288d2f435">https://qiita.com/kasei-san/items/3edb52359ff288d2f435</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://eng-entrance.com/linux-permission-suid">https://eng-entrance.com/linux-permission-suid</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;金融グループ所属、2022年4月入社の藤戸四恩です。&lt;a</summary>
        
      
    
    
    
    <category term="Security" scheme="https://future-architect.github.io/categories/Security/"/>
    
    
    <category term="競技プログラミング" scheme="https://future-architect.github.io/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
    <category term="HackTheBox" scheme="https://future-architect.github.io/tags/HackTheBox/"/>
    
  </entry>
  
  <entry>
    <title>初めての画像処理〜OpenCVって何ができるの？〜</title>
    <link href="https://future-architect.github.io/articles/20230424a/"/>
    <id>https://future-architect.github.io/articles/20230424a/</id>
    <published>2023-04-23T15:00:00.000Z</published>
    <updated>2023-04-25T05:30:27.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>この記事は<a href="/articles/20230417a/">春の入門ブログ連載2023</a>6日目です。</p><p>新卒未経験でIT業界に飛び込んではや一年。だんだんと普段使うJavaに関しては余裕が出てきたところで他の言語にも手を出そうと思い、以前から気になっていた画像処理にチャレンジしました。</p><p>普段はコーディングしてもテストがうまくいく or いかないのどちらかでしか成果物を見ることができなかったので、視覚的に動いてる！を感じてみたく、新宿の紀伊國屋で分かりやすそうな書籍を買い、いろいろ試したので同じように画像処理にちょっと興味があるような人に読んでいてもらたらうれしいです。（入門編ということでセットアップなどに具体的に触れるよりも、いじっていみた面白さを伝える方に寄せています）</p><p>参考書籍：<a href="https://www.amazon.co.jp/dp/4877834605">実践　OpenCV 4 for Python 画像映像情報処理と機械学習</a></p><h2 id="実際にPythonで画像処理を体験した感想"><a href="#実際にPythonで画像処理を体験した感想" class="headerlink" title="実際にPythonで画像処理を体験した感想"></a>実際にPythonで画像処理を体験した感想</h2><p>「めっちゃ簡単なのにめっちゃ楽しいじゃん!」<br>…素直にこの感想が最初に出てきます。笑</p><p>今までJavaしか触ったことがなく、数値や文字列をやりくりする処理は慣れ親しんでいたのですが、だからこそ、画像や映像を処理するのはあまり想像できていなくて、複雑なメソッドやロジックで処理が必要なのかなと漠然と考えていたら、真逆でした！</p><p>構文がシンプルで、ライブラリとして多数の関数が用意されているため、それらを使用することですぐにやりたいことができてしまうので学習がとてもスムーズに進みました。</p><p>驚いたのが、自動運転のCMなどで車を認識すると四角い枠で追う映像を見たことがあると思うのですが、あの処理を50行ほどのコードで実現できてしまうことです。（書籍の最後の方に解説と一緒に載っています）</p><p>すごく遠いもののように感じていた実際に使われている技術を自分でできたのですごい興奮しました！！</p><h2 id="画像処理の基本的な考え方"><a href="#画像処理の基本的な考え方" class="headerlink" title="画像処理の基本的な考え方"></a>画像処理の基本的な考え方</h2><p>画像処理を学ぶ上で一番最初に身につけるべき考え方が、画像処理と言っても画像や映像を数字に変換して処理しているということです。</p><p>画像は小さいコマ（ピクセル）の集まりからなるもので、それらは色や明るさを数値化した情報を持っています。例えば、明るさの情報は最小値0が黒を表し、最大値255が白を表すといった具合です。色の場合は赤、緑、青の三原色の強弱を0〜255で表してそのピクセルの色の情報としています。</p><p>そのため画像一枚をどうこう処理する、というわけではなく、その小さいコマ（ピクセル）ごとに色や明るさを数値化し、それらに対して計算処理などを施すことによって画像処理などを行なっているのです。<br>例で言うと、中心線を軸に左右のピクセルが持つ数値を入れ替えることで「画像の左右反転」が実現できます。映像は我有の連続なので同じような考え方で処理できます。</p><p>正直、簡単ですが、この考え方さえ理解できていればあとはライブラリを使いこなすだけなので7割学習が終わったといっても過言ではありません。（本当に）</p><h2 id="OpenCVの基本的なアルゴリズム"><a href="#OpenCVの基本的なアルゴリズム" class="headerlink" title="OpenCVの基本的なアルゴリズム"></a>OpenCVの基本的なアルゴリズム</h2><p>OpenCVで実現できる画像処理をいくつか紹介します。</p><h3 id="エッジ検出"><a href="#エッジ検出" class="headerlink" title="エッジ検出"></a>エッジ検出</h3><p>輪郭を抽出する処理です。</p><p>内部で行われている処理としては、各ピクセルで左側のピクセルとの明るさの数値の差を出すことで差が大きな部分＝輪郭という認識で差が大きいピクセルを明るさ255の白、それ以外を明るさ0の黒にすることで輪郭を抽出します。エッジ検出のアルゴリズムがいくつかある中で性能が高いものとしてcv2.Canny()が紹介されていました。</p><p>それぞれの引数の意味は、srcは読み込んだ画像、150が輪郭として認識するためのピクセルの明さの差、50が輪郭は繋がっているという前提で、どこまで差が小さくなっても輪郭として認識するかの設定です。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 画像の読み込み処理</span></span><br><span class="line"><span class="comment"># --------------</span></span><br><span class="line"><span class="comment"># Cannyエッジ検出</span></span><br><span class="line">dst = cv2.Canny(src, <span class="number">50</span>, <span class="number">150</span>)</span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 画像の表示処理</span></span><br></pre></td></tr></table></figure><img src="/images/20230424a/dumbbell.jpeg" alt="" width="400" height="267" loading="lazy"><img src="/images/20230424a/image_dst.jpeg" alt="" width="400" height="267" loading="lazy"><h3 id="テンプレートマッチング"><a href="#テンプレートマッチング" class="headerlink" title="テンプレートマッチング"></a>テンプレートマッチング</h3><p>画像の中からテンプレートと完全に一致する物体を検出する処理です。</p><p>テンプレートマッチングの基本的な考え方としては、テンプレート画像をを対象の画像上でスライドさせながら、各位置におけるピクセルの値の類似度を計算し、最も類似した場所を見つけるというものです。</p><p>計算方法は難しかったので割愛させてもらいます。（計算式がわからなくてもアルゴリズムを知っていれば超簡単に実践できます！）</p><p>以下の処理はcv2.matchTemplate()で類似度を算出、cv2.minMaxLoc()で類似度の最小値点、最大値点を取得し、その座標をもとにcv2.rectangle()でテンプレート画像の大きさの四角形を描画して一致する箇所を示しています。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 画像の読み込み処理</span></span><br><span class="line"><span class="comment"># --------------</span></span><br><span class="line"><span class="comment"># テンプレートマッチングの実行</span></span><br><span class="line">result = cv2.matchTemplate(img, template, cv2.TM_CCOEFF_NORMED)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大のマッチング位置を取得</span></span><br><span class="line">min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)</span><br><span class="line">top_left = max_loc</span><br><span class="line">h, w = template.shape[:<span class="number">2</span>]</span><br><span class="line">bottom_right = (top_left[<span class="number">0</span>] + w, top_left[<span class="number">1</span>] + h)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元画像にマッチング位置を描画</span></span><br><span class="line">cv2.rectangle(img, top_left, bottom_right, <span class="number">255</span>, <span class="number">2</span>)</span><br><span class="line">cv2.putText(img, name, (top_left[<span class="number">0</span>]+<span class="number">10</span>, bottom_right[<span class="number">1</span>]-<span class="number">30</span>),</span><br><span class="line">            cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 画像の表示処理</span></span><br></pre></td></tr></table></figure><p>↓対象画像<br><img src="/images/20230424a/muscular_man.jpeg" alt="muscular_man.jpeg" width="1200" height="725" loading="lazy"></p><p>↓テンプレート画像<br><img src="/images/20230424a/muscular_man_abs.jpeg" alt="muscular_man_abs.jpeg" width="267" height="222" loading="lazy"></p><p>↓処理後<br><img src="/images/20230424a/man_abs.jpeg" alt="man_abs.jpeg" width="1200" height="725" loading="lazy"></p><h3 id="特徴点検出"><a href="#特徴点検出" class="headerlink" title="特徴点検出"></a>特徴点検出</h3><p>テンプレートマッチングではピクセルの値の類似度で一致しているかどうかを確認しているため、対象が回転したり、サイズが変わるだけで正しく検出ができなくなります。その弱点を補うのが特徴点検出です。これは形状に着目し判別します。具体的には検出したい物の角（特徴点）を検出し、対象画像の中から同じ特徴点（特徴点が持つ情報を特徴量という）が多く発見されれば、検出するというロジックです。<br>（添付は画像ですが、実際には左の窓に動画が再生されながら特徴点を検出し、右の窓に表示されている動画内の1フレームに存在する特徴点と一致した際にその点が繋がるようになっっています）</p><p>orb.detectAndCompute()で特徴点と特徴量を取得し、matcher.match()で特徴点同士のマッチングを行ったあと、精度の高い特徴点のペアの数がどれほどあるかによって検出を判断するようになっています。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 読み込み処理</span></span><br><span class="line"><span class="comment"># --------------</span></span><br><span class="line"><span class="comment"># 入力フレームとテンプレートフレームの特徴点と特徴量を抽出する</span></span><br><span class="line">kp1, des1 = orb.detectAndCompute(frame, <span class="literal">None</span>)</span><br><span class="line">kp2, des2 = orb.detectAndCompute(template_frame, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 入力フレームとテンプレートフレームの特徴量をマッチングする</span></span><br><span class="line">matches = matcher.match(des1, des2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 良いマッチング点を選択する</span></span><br><span class="line">good_matches = []</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> matches:</span><br><span class="line">    <span class="keyword">if</span> m.distance &lt; <span class="number">30</span>:</span><br><span class="line">        good_matches.append(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># マッチング結果を描画する</span></span><br><span class="line">result = cv2.drawMatches(frame, kp1, template_frame, kp2, good_matches, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># マッチング点の数が一定以上であれば、特定のフレームと同じと判断する</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(good_matches) &gt; <span class="number">50</span>:</span><br><span class="line">    cv2.putText(result, <span class="string">&#x27;Detect&#x27;</span>, (<span class="number">50</span>, <span class="number">50</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 表示処理</span></span><br></pre></td></tr></table></figure><img src="/images/20230424a/B805E443-C23C-4378-91A0-39E8D0078698.jpeg" alt="" width="1200" height="1046" loading="lazy"><img src="/images/20230424a/60A3F31F-C05E-4BBD-98F0-9D089DDB83A0.jpeg" alt="" width="1200" height="1051" loading="lazy"><img src="/images/20230424a/2084DA2A-A519-4EFD-8AB5-775F54F18486.jpeg" alt="" width="1200" height="1059" loading="lazy"><h3 id="物体認識"><a href="#物体認識" class="headerlink" title="物体認識"></a>物体認識</h3><p>この書籍の最終章にはディープラーニングについても解説がありました。</p><p>ディープラーニングというと、とんでもなく複雑なプログラミングを組まなければいけないと思っていたのですが、用意されているフレームワークを利用することで簡単に実現できます。</p><p>ディープラーニングによる物体認識は、画像の入力値に重みをかけたり、バイアス値を足した結果がある数値よりも高い場合に特定のクラス（犬、車など）と判断する流れになっています。そのため、既に画像を何回も読み込み、計算を行うことで重みやバイアス値を調節したもの（ニューラルネットワーク）があればすぐに物体認識を行うことができます。</p><p>イメージ：以下画像の左の矢印が画像の入力値で丸部分が重みやバイアス値の計算部分、最終的に右の矢印に出力された値でクラスの判別を行う<br><img src="/images/20230424a/2563742.jpg" alt="" width="1200" height="900" loading="lazy"></p><h2 id="ではOpenCVを使って何をするか"><a href="#ではOpenCVを使って何をするか" class="headerlink" title="ではOpenCVを使って何をするか"></a>ではOpenCVを使って何をするか</h2><h4 id="アームカールフォームチェック"><a href="#アームカールフォームチェック" class="headerlink" title="アームカールフォームチェック"></a>アームカールフォームチェック</h4><p>今回参考にした書籍でOpenCVの基本を抑えられたので、自分の普段している活動に落とし込めないかと思い、今までの処理紹介に使っている素材を見てもらえればわかるかもしれませんが、私は筋トレが好きなので、画像処理を使ってトレーニングの簡単なフォームチェックを実装してみました。</p><p>やっていることはアームカールをしっかりと最後まで追い込んでできているかチェックするプログラムです。<br>ロジックとしてはダンベルの赤を色範囲指定して輪郭を抽出、その輪郭に外接する矩形の底面が一定の高さを超えた場合にウィンドウに『OK』を表示するという流れです。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 動画の読み込み処理</span></span><br><span class="line"><span class="comment"># --------------</span></span><br><span class="line"><span class="comment"># 赤色領域を抽出</span></span><br><span class="line">mask = cv2.inRange(frame, red_lower, red_upper)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 輪郭を抽出</span></span><br><span class="line">contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(contours) &gt; <span class="number">0</span>:</span><br><span class="line"><span class="comment"># 最大面積を持つ輪郭を抽出</span></span><br><span class="line">max_contour = <span class="built_in">max</span>(contours, key=cv2.contourArea)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 輪郭の外接矩形を取得</span></span><br><span class="line">x, y, w, h = cv2.boundingRect(max_contour)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ダンベルの最下部のy座標を取得</span></span><br><span class="line">bottom_y = y + h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高さ180の位置に来たらOKを描画</span></span><br><span class="line"><span class="keyword">if</span> bottom_y &lt;= <span class="number">180</span>:</span><br><span class="line">    cv2.putText(frame, <span class="string">&#x27;OK&#x27;</span>, (<span class="number">10</span>, <span class="number">50</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">2</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>, cv2.LINE_AA)</span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 動画の表示処理</span></span><br></pre></td></tr></table></figure><p>使用ライブラリ紹介：</p><ul><li>cv2.inRange()<ul><li>引数の色範囲に該当するピクセルをマスクで戻してくれる</li></ul></li><li>cv2.findContours()<ul><li>オブジェクトの輪郭を返してくれる。第2、第3の引数は輪郭の検出モード、検出方法を指定する</li></ul></li><li>max()<ul><li>最大の面積を持つ輪郭を返してくれる。第2引数は比較関数</li></ul></li></ul><img src="/images/20230424a/スクリーンショット_2023-04-22_18.31.34.png" alt="" width="1200" height="675" loading="lazy"><img src="/images/20230424a/スクリーンショット_2023-04-22_19.01.33.png" alt="" width="1200" height="674" loading="lazy"><img src="/images/20230424a/スクリーンショット_2023-04-22_19.01.14.png" alt=" width="1200" height="673" loading="lazy"><h4 id="体の仕上がりチェック（ボツ）"><a href="#体の仕上がりチェック（ボツ）" class="headerlink" title="体の仕上がりチェック（ボツ）"></a>体の仕上がりチェック（ボツ）</h4><p>特徴点検出を使えば、体の仕上がりを憧れのプロのフィジーク選手と比較できるんじゃないかと思い、チャレンジしてみたのですが、以下のような要因で断念しました。。。</p><ol><li>関係ない背景・髪型などで特徴点が出てしまう<ul><li>比較したい筋肉とは関係ない背景・髪型などで特徴点を検出してしまい、一致率が下がることで正確な比較ができなくなってしまいました。</li></ul></li><li>比較の基準設定が難しい<ul><li>特徴点検出を行う場合は全く同じもの（例：前述のダンベル）であっても一致率は100%にならないため、それを考慮して一致と判断する基準を下げています。筋肉のように人それぞれでそもそも、そもそもつき方が違うようなものを比較する際にはどの程度の一致を基準にするかの設定が難しくなります</li></ul></li></ol><p>今回は試していませんが、先にHSV色空間などでマスキングして人体のみの検出を行い、さらには比較時にも、特徴点検出ではなく、体の仕上がりの良さについてS~Dまでラベル付したフィジーカーの画像を学習させて、一致率でなく、ランク付という方法ならうまくいくのかななどと考えておりました。機会があったら挑戦してみたいです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>OpenCVで初めて画像処理に触ってみたということで画像処理の概念と基本的な処理がどのように機能するか、またそれらを使って著者がいじってみた体験を書かせていただきました。</p><p>先に述べたように、pythonもOpenCVも触ってみたのは初めてですが、Javaの経験が軽くあるだけの私でも１日で理解して、自分なりにいろいろ試すことができたのでとても初心者に優しい言語だったと感じました。</p><p>この記事を読んで興味を持って、OpenCVを触ってもらえたら嬉しいです！！</p><p>次は藤戸さんの<a href="/articles/20230425a/">Hack The Box Oopsie を解いてみた</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;この記事は&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
    <category term="画像処理" scheme="https://future-architect.github.io/tags/%E7%94%BB%E5%83%8F%E5%87%A6%E7%90%86/"/>
    
    <category term="OpenCV" scheme="https://future-architect.github.io/tags/OpenCV/"/>
    
    <category term="筋トレ" scheme="https://future-architect.github.io/tags/%E7%AD%8B%E3%83%88%E3%83%AC/"/>
    
    <category term="初心者" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>『「技術書」の読書術』読書感想文</title>
    <link href="https://future-architect.github.io/articles/20230421a/"/>
    <id>https://future-architect.github.io/articles/20230421a/</id>
    <published>2023-04-20T15:00:00.000Z</published>
    <updated>2023-04-25T05:18:45.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>HealthCare Innovation Group(HIG)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の永井優斗です。</p><p>この記事は<a href="/articles/20230417a/">「春の入門連載2023」</a>5日目です。昨日は市川浩暉さんの<a href="/articles/20230420a/">「Cloud Data Fusionで始めるETL入門」</a>でした。<br>※<a href="/articles/20220422a/">昨年も5日目に書いていた</a>ようです。</p><p>技術の世界は日進月歩で進んでいることから、他の業界以上に、日頃から知識を入れ続けることが求められるのがIT業界です。そんなIT業界にITコンサルタント&#x2F;エンジニアとして身を置く決意を持った新人さんにも楽しく学習してほしいなと思います。</p><p>学習のツールとしてインターネット上に公開されているQiitaなどの技術記事、このFuture Tech Blogのような技術ブログを読むことも有用ではありますが、技術書を１冊読むとその本で取り上げられているテーマを体系的に学ぶことができます。先輩社員から本は読もうね、とアドバイスされた方も多いのではないでしょうか。</p><p>今回は『「技術書」の読書術』という本を取り上げていきます。</p><img src="/images/20230421a/L.png" alt="" width="240" height="352" loading="lazy"><p><a href="https://www.shoeisha.co.jp/book/detail/9784798171548">https://www.shoeisha.co.jp/book/detail/9784798171548</a></p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><p>本書の目次は下記のとおりです。</p><h3 id="第１部-選び方"><a href="#第１部-選び方" class="headerlink" title="第１部　選び方"></a>第１部　選び方</h3><h4 id="1-1-あらゆる手段で本を見つける！書店の歩き方からITツールの活用法まで"><a href="#1-1-あらゆる手段で本を見つける！書店の歩き方からITツールの活用法まで" class="headerlink" title="1-1　あらゆる手段で本を見つける！書店の歩き方からITツールの活用法まで"></a>1-1　あらゆる手段で本を見つける！書店の歩き方からITツールの活用法まで</h4><ul><li>何を読んだらいいのかわからない？ ～書店での選び方のヒント～</li><li>本の種類別に考える選び方 ～技術書の種類を知る～</li><li>新刊の発売に気づく工夫 ～エンジニアなら自動化しよう～</li><li>“名著”の罠 ～「よい」本を選ぶのは難しい～</li><li>図書館の活用 ～貴重な本に出会う～</li><li>本を読む目的と選び方の関係 ～目指すゴールによって選ぶ本は変わる～</li></ul><h4 id="1-2-世界が広がる！貪欲に本を求めれば、出会うはずがない本にも出会える"><a href="#1-2-世界が広がる！貪欲に本を求めれば、出会うはずがない本にも出会える" class="headerlink" title="1-2　世界が広がる！貪欲に本を求めれば、出会うはずがない本にも出会える"></a>1-2　世界が広がる！貪欲に本を求めれば、出会うはずがない本にも出会える</h4><ul><li>悪書・良書を気にする必要はない</li><li>レベル感の合った本を選ぶ</li><li>くじ引き読書法</li><li>英語の技術書という選択肢</li></ul><h3 id="第2部-読み方"><a href="#第2部-読み方" class="headerlink" title="第2部　読み方"></a>第2部　読み方</h3><h4 id="2-1-比べて、使い分ける。時間をムダにせず理解を深める"><a href="#2-1-比べて、使い分ける。時間をムダにせず理解を深める" class="headerlink" title="2-1　比べて、使い分ける。時間をムダにせず理解を深める"></a>2-1　比べて、使い分ける。時間をムダにせず理解を深める</h4><ul><li>「『3』の発想」 ～1つのテーマで3冊の本を読む～</li><li>分類とリンク ～読んだ本を整理する～</li><li>電子書籍と紙書籍を使い分ける ～それぞれのメリット・デメリットを把握する～</li><li>読書にかける時間 ～本の価値を時給換算する～</li><li>プログラミング書の読み方 ～動くコードを自分で書く～</li><li>数学書の読み方 ～文系・理系それぞれのアプローチ～</li><li>積読の解消法 ～優先順位を設定する～</li></ul><h4 id="2-2-ルール無用。精読、多読、乱読し、読書の枠を超えてゆけ"><a href="#2-2-ルール無用。精読、多読、乱読し、読書の枠を超えてゆけ" class="headerlink" title="2-2　ルール無用。精読、多読、乱読し、読書の枠を超えてゆけ"></a>2-2　ルール無用。精読、多読、乱読し、読書の枠を超えてゆけ</h4><ul><li>読書にルールなし</li><li>過去に読んだ本をもう一度読んで成長を実感する</li><li>読書の枠を超えて学習を加速する</li><li>ページを破って持ち歩く分冊化読書法</li><li>1冊90分で読む時間制限読書法</li><li>マーキング読書法で脳に刻み込む</li><li>オーディオブックでインプット量を増大させる</li><li>電子書籍のメモやノートを取る</li><li>DeepL翻訳で英語の技術資料を読む</li><li>読書記録のすすめ</li><li>3年で成果を出すための一点突破読書法</li><li>1年で1,000冊を読破する超多読法</li><li>読書を助ける便利なグッズやアプリ</li></ul><h3 id="第3部-情報発信＆共有"><a href="#第3部-情報発信＆共有" class="headerlink" title="第3部　情報発信＆共有"></a>第3部　情報発信＆共有</h3><h4 id="3-1-成長のチャンスはアウトプットにあり"><a href="#3-1-成長のチャンスはアウトプットにあり" class="headerlink" title="3-1　成長のチャンスはアウトプットにあり"></a>3-1　成長のチャンスはアウトプットにあり</h4><ul><li>アウトプットは最大の成長 ～講演や勉強会でスキルアップ～</li><li>発信するテーマの選び方 ～「自分ならこうする」を発信する～</li><li>執筆における工夫 ～「便利なツール」を活用する～</li></ul><h4 id="3-2-アウトプットも「遅すぎる」ことはない"><a href="#3-2-アウトプットも「遅すぎる」ことはない" class="headerlink" title="3-2　アウトプットも「遅すぎる」ことはない"></a>3-2　アウトプットも「遅すぎる」ことはない</h4><ul><li>技術書の読書におけるアウトプット</li><li>たくさんアウトプットしよう</li><li>いつでもどこでもアウトプット</li><li>レビューの有効性<br>（詳しい目次は<a href="https://www.shoeisha.co.jp/book/detail/9784798171548">翔泳社のサイト</a>をご覧ください）</li></ul><h2 id="特徴と感想"><a href="#特徴と感想" class="headerlink" title="特徴と感想"></a>特徴と感想</h2><p>目次からも伝わるかなと思うのですが、技術書をどのように選ぶか、どのように読むか、そして読んだ内容をどのように活用していくか、技術書への付き合い方を丁寧に解説した１冊です。</p><p>また、この本は2人のエンジニア（増井敏克氏・IPUSIRON氏）によって書かれた本ですが、例えば、第１部は「選び方」について、1-1を増井氏、1-2をIPUSIRON氏が記述する、という形でそれぞれの部を構成しています。本の読み方は人それぞれで正解があるものではないという考え方のもと、お二人の見解が異なる部分もあえて残す編集をしているそうです。</p><p>第1部では選び方をテーマにしています。よく先輩社員が「思わぬ出会いがあるから技術書は（ネットではなくて）書店で買うといいよ」、というアドバイスをされることがありますが、具体的に書店に行ってなにしたらいいの？という問いに答えてくれています。<br>個人的に1-2のくじ引き読書法は面白いなと思いました。①関心の<strong>なかった</strong>ジャンルの本棚の前に立ち、②目をつぶって手を伸ばして触れた本を、③できれば制限時間を定めて読破するという方法です。<br>このくじ引き読書法のランダム性を上げるためにNDC（図書館で利用されている分類番号）を2桁乱数で絞り込んで①の棚決めをしたり、ISBN（書籍の世界共通の識別子）をランダム生成するという方法も紹介されているのですが、エンジニアらしい遊び心のある手法だなと思わず感心しました。</p><p>第2部の「読み方」編が本書のメインどころでもあるのですが、紙の本をマーキングしながら読む古典的な方法から、DeepL翻訳やオーディオブックなどの現代のテクノロジーを駆使した方法まで様々な手法が紹介されており、試しながら自分にあった読み方を模索するといいかなと思いました。</p><p>また、第3部でアウトプットの紹介をしているところも推せるポイントで、新人のみなさんにもぜひアウトプットを実践してほしいなと思います。本書内でも「とりあえずアウトプットする」ことで他の人からフォードバックをもらえる、言い換えれば、自分にわかっていない部分があることを他人に気づいてもらえ、さらなる学習への好循環が生まれると記載されています。<br>ライトなものであれば、仲間内や同期で勉強会を開いてもいいですし、社内外の勉強会やカンファレンスに参加してみるのも良いかと思います。</p><p>さらに本書の内容に加えて個人的におすすめなのは、アウトプット駆動学習です。「何月何日にブログに書くぞ、そのためにXXXを学習する！」とか、「半年後の資格試験に向けて勉強するぞ！」というものです。<br>なかなか本を買ったけど読まずに積読してしまったりしますが、アウトプット駆動学習は、モチベーションを焚き付け、また、締切効果もあって短期集中して学習することができます。<br>（実はこのブログも、春の入門記事連載の募集に「何か書きます（内容未定）」と手を挙げたところから始まってますし、ここ2年ほどはある国家資格の取得のためにずっと学習漬けの日々を送ってました。無事合格した資格の話は別途記事を書くことを予定しています。）</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>新人のみなさんにはぜひ一度手に取ってほしいなと思う１冊でした。ぜひ書店で出会ってみてください。<br>また、フューチャー社員の方は「とりあえずアウトプットする」ことを目標に、ぜひ技術ブログ執筆にチャレンジしてみてください。（新人の方は研修終了後からブログ執筆可能です。）</p><p>次は工藤さんの<a href="/articles/20230424a/">初めての画像処理〜OpenCVって何ができるの？〜</a> です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">医療・ヘルスケア分野での案件や新規ビジネス創出を担う、2020年に誕生した事業部です。設立エピソードは<a href="https://note.future.co.jp/n/n8b57d4bf4604">未来報の記事</a>をご覧ください。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;HealthCare Innovation Group(HIG)&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
    <category term="技術書の読書術" scheme="https://future-architect.github.io/tags/%E6%8A%80%E8%A1%93%E6%9B%B8%E3%81%AE%E8%AA%AD%E6%9B%B8%E8%A1%93/"/>
    
  </entry>
  
  <entry>
    <title>Cloud Data Fusionで始めるETL入門</title>
    <link href="https://future-architect.github.io/articles/20230420a/"/>
    <id>https://future-architect.github.io/articles/20230420a/</id>
    <published>2023-04-19T15:00:00.000Z</published>
    <updated>2023-04-21T08:37:10.490Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230420a/image.png" alt="" width="220" height="220" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIG (Technology Innovation Group)の市川です。<br><a href="/articles/20230417a/">春の入門祭り</a>4日目の記事です。</p><p>本日の入門記事は「Cloud Data Fusionで始めるETL入門」ということで、Google CloudでETL&#x2F;ELTを構築できる「<a href="https://cloud.google.com/data-fusion?hl=ja">Cloud Data Fusion</a>」を利用して、ETLを作成します。</p><h2 id="ETLとは"><a href="#ETLとは" class="headerlink" title="ETLとは"></a>ETLとは</h2><p>そもそもETLとはなんでしょうか。</p><p>ETLはExtract Transform Loadの略で、データ分析のプロセスの中で重要な役割を果たしています。</p><p>データ分析は一般的には、「収集」「加工」「蓄積」「利活用」の順序で行われます。</p><div class="scroll"><table><thead><tr><th align="left">プロセス</th><th align="left">内容</th><th align="left">利用する主なサービス</th></tr></thead><tbody><tr><td align="left">収集</td><td align="left">企業が保有するさまざまなデータソース(主にRAWデータ)をデータレイクに格納</td><td align="left">Cloud Stoarge, S3 等</td></tr><tr><td align="left">加工</td><td align="left">データレイクに格納されているデータのクレンジング、整形、および変換を行い、ビジネス上有用な情報を得るためのデータを生成する</td><td align="left">Cloud Data Fusion, Dataflow 等</td></tr><tr><td align="left">蓄積</td><td align="left">加工されたデータをデータウェアハウス（DWH）に格納する</td><td align="left">BigQuery, Redshift 等</td></tr><tr><td align="left">利活用</td><td align="left">DWHのデータを利用してBIから参照したり、マーケティング等に利用する。</td><td align="left">各種MAツール</td></tr></tbody></table></div><p>この流れの中で、ETLを利用するのは「加工」のフェーズです。</p><p>「収集」フェーズでデータレイクに格納されたRAWデータを、データウェアハウスにETLでに取り込みやすいようデータを加工します。</p><h2 id="Cloud-Data-Fusionとは何か"><a href="#Cloud-Data-Fusionとは何か" class="headerlink" title="Cloud Data Fusionとは何か"></a>Cloud Data Fusionとは何か</h2><p>Cloud Data FusionはGoogle Cloudが提供しているETL&#x2F;ELTを行うためのサービスです。</p><p>特徴は以下の通りです。</p><ul><li>OSSの<a href="https://cdap.atlassian.net/wiki/spaces">CDAP</a>を使って構築されたサーバーレスかつフルマネージドなサービスを提供</li><li>視覚的に操作できるGUIでエンジニアでなくてもデータ加工パイプラインが作成できる</li><li><a href="https://cloud.google.com/data-fusion/plugins?hl=ja">プラグイン</a>が豊富に用意されていて、拡張性が高い</li></ul><p>Google Cloudでは、ETLツールとしてDataflowやDataprep、Dataform等多くのサービスが提供されていますが、Dataflowは基本的にコーディングが必要であるためエンジニアがいないと構築が難しかったりします。</p><p>Cloud Data FusionはGUIベースでETL&#x2F;ELT処理を作成できるため、普段開発作業を担当しないような方にもとっつきやすく、プラグインが豊富なので拡張性が高いのが他のサービスと異なる特徴です。</p><h2 id="簡単なパイプラインを作ってみよう"><a href="#簡単なパイプラインを作ってみよう" class="headerlink" title="簡単なパイプラインを作ってみよう"></a>簡単なパイプラインを作ってみよう</h2><p>それでは、早速簡単なパイプラインを作ってみましょう。</p><h3 id="セットアップ"><a href="#セットアップ" class="headerlink" title="セットアップ"></a>セットアップ</h3><p>セットアップ方法はGoogle Cloudのドキュメントをご参照ください。<br><a href="https://cloud.google.com/data-fusion/docs/how-to/create-instance?hl=ja">https://cloud.google.com/data-fusion/docs/how-to/create-instance?hl=ja</a></p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>CLoud Data Fusionは少しデプロイに時間がかかり、大体立ち上がるまでに20分~30分ほどかかります。<br>また、Cloud Data Fusionでは3つのエディションが展開されていますが、使用感を試してみたい程度であれば月120時間の無料枠が用意されている「Basic」を選ぶと費用が抑えられると思います。（Developer　Editionには無料枠が存在しないため）</p><p>参考：<a href="https://cloud.google.com/data-fusion/pricing?hl=ja">https://cloud.google.com/data-fusion/pricing?hl=ja</a></p><p>以下のようにインスタンスが立ち上がったら準備完了です。</p><img src="/images/20230420a/image_2.png" alt="" width="1057" height="212" loading="lazy"><h3 id="パイプラインを作ってみる"><a href="#パイプラインを作ってみる" class="headerlink" title="パイプラインを作ってみる"></a>パイプラインを作ってみる</h3><p>今回は入門編ということで、すでに用意されているパイプラインを利用したいと思います。<br>コンソール画面から「インスタンスを表示」をクリックし、Cloud Data Fusionの画面にアクセスし、ヘッダーの「HUB」をクリックします</p><img src="/images/20230420a/image_3.png" alt="" width="1200" height="945" loading="lazy"><p>その後、「Pipelines」の「Cloud Data Fusion Quickstart」をクリックし、</p><img src="/images/20230420a/image_4.png" alt="" width="1200" height="691" loading="lazy"><p>Finishを押下して、パイプラインを作成します。</p><img src="/images/20230420a/image_5.png" alt="" width="1200" height="773" loading="lazy"><p>すると、以下のような画面にアクセスできるようになります。</p><p>この画面はPipelineのStudioの画面で、GUI形式でパイプラインを作成&#x2F;編集することができます。</p><img src="/images/20230420a/image_6.png" alt="" width="1200" height="874" loading="lazy"><p>Studio画面の構成を大きく3つに分けて説明します。</p><h3 id="①ノードに使うプラグインを選択"><a href="#①ノードに使うプラグインを選択" class="headerlink" title="①ノードに使うプラグインを選択"></a>①ノードに使うプラグインを選択</h3><p>サイドバーにはData Fusionで利用できるプラグインを選択し、利用することができます。<br>プラグインは大きく分けて、以下のような種類が用意されています。</p><ul><li>Source：　起点となるデータソースを指定するプラグイン</li><li>Transform・Analytics：各種データ変換を行うプラグイン</li><li>Sink：データの流れの終端として、データの格納先を指定するプラグイン</li><li>Conditions and Actions：データ変換とは関係ない何らかのアクション（ファイル移動や削除 等）を行えるプラグイン</li><li>Error Handlers and Alerts：エラーハンドリングを行うプラグイン</li></ul><h3 id="②Studio"><a href="#②Studio" class="headerlink" title="②Studio"></a>②Studio</h3><p>メインとなるStudioでパイプラインを組み立てます。</p><ul><li>パイプラインの編集エリア。</li><li>１つ１つの箱が、データソースや変換処理、データの格納先を示す”ノード”であり、実行順に線で繋がっている。</li><li>ノードは上述したプラグインの種別ごとに色分けされている</li></ul><h3 id="③各種設定"><a href="#③各種設定" class="headerlink" title="③各種設定"></a>③各種設定</h3><p>ここでは、作成したパイプラインの設定やデプロイを行うことができます。</p><ul><li>パイプライン定義をJSON形式でImport＆Export</li><li>プレビュー（テスト）の実行メニューを開く</li><li>編集中のパイプラインをDraftとして保存</li><li>Draftのパイプラインをデプロイ</li></ul><h2 id="各ノードの処理内容"><a href="#各ノードの処理内容" class="headerlink" title="各ノードの処理内容"></a>各ノードの処理内容</h2><h3 id="GCSからファイルを読み込み"><a href="#GCSからファイルを読み込み" class="headerlink" title="GCSからファイルを読み込み"></a>GCSからファイルを読み込み</h3><img src="/images/20230420a/image_7.png" alt="" width="1200" height="573" loading="lazy"><p>各ノードの設定内容を確認する際は、マウスオーバーした際に表示される「Properties」をクリックして内容を確認します。</p><p>GCS Propertiesをクリックすると以下のような画面が表示されます。</p><p>以下の「Path」部分でGCSのオブジェクトを指定しています。<br>（デフォルトで設定されているファイルはサンプルファイルとして公開されているため、動かす上で変更の必要はありません）</p><img src="/images/20230420a/image_8.png" alt="" width="1200" height="930" loading="lazy"><h3 id="データ加工"><a href="#データ加工" class="headerlink" title="データ加工"></a>データ加工</h3><p>データ加工は主に、Wranglerと呼ばれるプラグインで行います。</p><p>Wranglerでは、記載されたDirectivesを元にデータ加工を行います。<br>（個人的にこれがCloud Data Fusionの一番便利な機能だと思っています。）</p><img src="/images/20230420a/image_9.png" alt="" width="1200" height="559" loading="lazy"><p>Directivesを作成する際は、以下のような形でクリックをするだけでファイルの加工（Parse処理やデータ型の変換等）を行うことができます。</p><p>以下のようなファイルをWranglerで読み込んだ際に、</p><img src="/images/20230420a/image_10.png" alt="" width="1200" height="850" loading="lazy"><p>次の画像のように操作することで、</p><img src="/images/20230420a/image_11.png" alt="" width="1200" height="655" loading="lazy"><p>データ加工した際のイメージと、先ほど定義されたDirectivesが画面上に作成されます。</p><img src="/images/20230420a/image_12.png" alt="" width="1200" height="503" loading="lazy"><p>このように、Wranglerを利用することで、実際にどのようなデータ加工が行われるかをイメージしながら、簡単にETLの処理を作成することができます。</p><h3 id="BigQueryへのインサート"><a href="#BigQueryへのインサート" class="headerlink" title="BigQueryへのインサート"></a>BigQueryへのインサート</h3><p>加工したデータは最終的にデータウェアハウスであるBigQueryにInsertされます。</p><p>サンプルでは、「GCPQuickStart」というデータセットの「top_rated_inexpensive」というテーブルにデータがInsertされるような設定になっています。</p><p>今回はデータセット&#x2F;テーブルが既存の環境に存在しない場合に新規作成されるような形になっているので、別途作成する対応は不要です。</p><img src="/images/20230420a/image_13.png" alt="" width="1200" height="952" loading="lazy"><h2 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h2><p>今回は入門編ということもあるので設定値はデフォルトのままで、<br>以下画像の「Deploy」をを押下し、パイプラインをデプロイします。</p><img src="/images/20230420a/image_14.png" alt="" width="1200" height="542" loading="lazy"><h2 id="実行してみる"><a href="#実行してみる" class="headerlink" title="実行してみる"></a>実行してみる</h2><p>デプロイしたパイプラインを実行してみましょう。<br>以下画像で差している「Run」を押下する事で、パイプラインが実行できます。</p><img src="/images/20230420a/image_15.png" alt="" width="1200" height="596" loading="lazy"><h2 id="BigQueryにInsertされた結果を確認する"><a href="#BigQueryにInsertされた結果を確認する" class="headerlink" title="BigQueryにInsertされた結果を確認する"></a>BigQueryにInsertされた結果を確認する</h2><p>パイプラインのStatusが「Succeed」になったら処理は成功です。<br>Cloud Data Fusionを作成したプロジェクトのBigQueryの画面にアクセスしてみましょう。</p><p>すると、BigQuery側でデータがInsertされていることが確認できました。</p><img src="/images/20230420a/image_16.png" alt="" width="1200" height="651" loading="lazy"><h3 id="開発する際のちょっとしたTips"><a href="#開発する際のちょっとしたTips" class="headerlink" title="開発する際のちょっとしたTips"></a>開発する際のちょっとしたTips</h3><p>Cloud Data Fusionの画面から実行した際のログを確認したい時があります。<br>その際に、「Logs」という部分をクリックしても一部のログのみしか確認することができないため、<br>少し見にくいのですが、以下画像の「View Raw Logs」をクリックすると、ログの全量を確認することができます。</p><img src="/images/20230420a/image_17.png" alt="" width="1200" height="471" loading="lazy"><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回はCloud Data Fusionを利用して、簡単に使用感を確認してみました。</p><p>ETL&#x2F;ELTの作成を非エンジニアが担当する場合、GUI形式でパイプラインが組めるので、そういった際には採用候補になりうるサービスだと感じました。</p><p>明日は<a href="https://future-architect.github.io/authors/%E6%B0%B8%E4%BA%95%E5%84%AA%E6%96%97/">永井優斗</a>さんの、<a href="/articles/20230421a/">「技術書」の読書術 読書感想文</a> です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230420a/image.png&quot; alt=&quot;&quot; width=&quot;220&quot; height=&quot;220&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="ETL" scheme="https://future-architect.github.io/tags/ETL/"/>
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="clouddatafusion" scheme="https://future-architect.github.io/tags/clouddatafusion/"/>
    
  </entry>
  
  <entry>
    <title>初めてのセキュリティ情報収集（mjckeck4）</title>
    <link href="https://future-architect.github.io/articles/20230419a/"/>
    <id>https://future-architect.github.io/articles/20230419a/</id>
    <published>2023-04-18T15:00:00.000Z</published>
    <updated>2023-04-20T07:58:57.895Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちわ。Cyber Security Innovation Group（CSIG）の井上です。</p><p>部門名の通り、サイバーセキュリティに関する部署で、セキュリティコンサルティングやFutureVuls（ <a href="https://vuls.biz/">https://vuls.biz</a> ）という脆弱性対策サービスのコンサルティングやサポートをしています。</p><h2 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h2><p><a href="/articles/20230417a/">春の入門祭り2023</a> という事で、<strong>初めて脆弱性対応をする方</strong>に向けた記事を書いてみようと思います。<br>この時期になると、部門移動等で情報システム部に移動し「何をやっていいのか分からない…」という話も時々聞きます。</p><p>今回は、IPAの「mjcheck4」（ <a href="https://jvndb.jvn.jp/apis/myjvn/mjcheck4.html">https://jvndb.jvn.jp/apis/myjvn/mjcheck4.html</a> ）というツールを使った、<strong>セキュリティ情報の収集</strong>についてお話しようと思います。</p><h2 id="セキュリティ情報収集とは"><a href="#セキュリティ情報収集とは" class="headerlink" title="セキュリティ情報収集とは"></a>セキュリティ情報収集とは</h2><p>世の中にはセキュリティ情報はいろいろあります。<br>例えば、雑に説明すると以下のようなものがあります。</p><ul><li>攻撃手法、攻撃者の動向に関する情報<ul><li>攻撃がどのように進むのかや、攻撃者グループの動向などの情報を示します。</li><li>これらの情報は、例えば、MITRE ATT&amp;CKのGroups（ <a href="https://attack.mitre.org/groups/">https://attack.mitre.org/groups/</a> ）などにも記載されています。</li></ul></li><li>IoC（Indicator of Compromise：侵害指標）の情報<ul><li>マルウェアのファイル名や攻撃者の通信先IPアドレスなど、攻撃時に残された痕跡情報を示します。</li><li>例えば、「特定のIPがIoCとして公開されたので ProxyやFirewallのブロック対象に追加する」、「ネットワーク機器のログに該当のIPが存在すれば、攻撃を受けている可能性がある」、のような使い方をします</li></ul></li><li>脆弱性に関する情報<ul><li>ソフトウェア等の脆弱性に関する、発見やPoC&#x2F;Exploit（検証や悪用ができる実証コード）、更新プログラムの提供や回避策などの情報を示します。</li><li>一般的に、脆弱性情報はNIST（<a href="https://www.nist.gov/">National Insitute of Standards and Technology</a>：米国立標準技術研究所）のNVD（<a href="https://nvd.nist.gov/">National Vulnerability Database</a>：脆弱性情報データベース）に登録され、日本国内で主に使われる製品はJVN（<a href="https://jvn.jp/">Japan Vulnerability Notes</a>）に登録されていきます。<ul><li>例えば、Log4Shellとして有名な脆弱性 CVE-2021-44228 の情報は、 <a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228">https://nvd.nist.gov/vuln/detail/CVE-2021-44228</a> のように公開されています。</li></ul></li><li>これらを、「いろいろなソースを集約」して「自分が利用している製品に絞って閲覧」するためには、何らかのツールや製品が必要になります。<ul><li><strong>今回紹介する mjcheck4 もそのツールのうちの一つです</strong></li></ul></li></ul></li><li>インシデントに関する情報<ul><li>実際に発生した被害の状況や傾向に関する情報です。</li><li>一般的には、セキュリティ系のネットニュースなどを参考にすることが多いと思います。</li></ul></li><li>etc</li></ul><p>今回は、「<strong>初めてのセキュリティ情報収集</strong>」という事で、一番身近で活用しやすい「<strong>脆弱性情報の収集</strong>」について書いていきます。</p><p>IPA（<a href="https://www.ipa.go.jp/">独立行政法人 情報処理推進機構</a>）とJPCERT&#x2F;CC（<a href="https://www.jpcert.or.jp/">JPCERTコーディネーションセンター</a>）が共同運営している脆弱性対策情報 JVN iPedia（ <a href="https://jvndb.jvn.jp/apis/myjvn/">https://jvndb.jvn.jp/apis/myjvn/</a> ）のデータを基に使う、脆弱性対策情報収集ツール mjcheck4 を見ていきます。</p><h2 id="mjcheck4とは"><a href="#mjcheck4とは" class="headerlink" title="mjcheck4とは"></a>mjcheck4とは</h2><img src="/images/20230419a/image.png" alt="" width="601" height="255" loading="lazy"><p>ツールのページ <a href="https://jvndb.jvn.jp/apis/myjvn/mjcheck4.html">https://jvndb.jvn.jp/apis/myjvn/mjcheck4.html</a> を確認すると、「<strong>M</strong>y<strong>J</strong>VN脆弱性対策情報フィルタリング収集ツール（<strong>check</strong>）の<strong>4</strong>番目」の略称と思われます。<br>日本国内向け製品の脆弱性情報も含まれる「JVN iPedia」の情報を簡単に利用するためのツールです</p><ul><li>脆弱性対策情報収集対象製品を、、<ul><li>グラフィカルに選択可能</li><li>SBOMでの入力も可能</li></ul></li><li>収集した脆弱性情報を、、<ul><li>画面上で閲覧可能</li><li>メール、SBOM、での出力が可能</li></ul></li></ul><p>今回はこのツールを使い、自組織が利用している製品の脆弱性を自動的に収集してみましょう。</p><h2 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h2><p>導入自体は MyJVNのページ（ <a href="https://jvndb.jvn.jp/apis/myjvn/mjcheck4.html#mjcheck4_install">https://jvndb.jvn.jp/apis/myjvn/mjcheck4.html#mjcheck4_install</a> ）通りですので、省略します。</p><ul><li>利用規約について同意する</li><li>対象のファイルをダウンロードし、<code>setup.exe</code>を用いてインストールする</li><li>収集対象製品を選定し、データのダウンロード</li><li>収集した脆弱性情報を閲覧</li></ul><p>Windowsアプリケーションとして実装されているので、特に難しい事は無いと思います。<br>利用している製品を登録することで、JVN iPediaに脆弱性が登録されていれば通知がされる仕組みになっています。</p><ul><li>バージョン番号は使わず、特定日以降の日付で発見されたもの、というチェック方法です。<ul><li>そのため、まずは該当製品の過去の脆弱性を全件抽出し、現状を把握する必要があります。「収集起点日（最終更新日）」で指定ができます。</li><li>一度チェックが終われば、あとは「新しく報告された脆弱性」を確認するだけになります。</li></ul></li></ul><p>設定<br><img src="/images/20230419a/image_2.png" alt="" width="700" height="395" loading="lazy"></p><p>収集状況概要<br><img src="/images/20230419a/image_3.png" alt="" width="600" height="338" loading="lazy"></p><p>脆弱性情報詳細<br><img src="/images/20230419a/image_4.png" alt="" width="600" height="338" loading="lazy"></p><p>本ツールももそうですが、脆弱性検出の為にはソフトウェアの一意の特定が必要で、PCEという表記を利用しています。今回はこれについても説明します。</p><h2 id="CPEとは"><a href="#CPEとは" class="headerlink" title="CPEとは"></a>CPEとは</h2><p>CPEは「<strong>C</strong>ommon <strong>P</strong>latform <strong>E</strong>numeration：共通プラットフォーム一覧」と呼ばれる、ソフトウェアやファームウェアを一意で識別するための仕組みです。詳細はIPAの <a href="https://www.ipa.go.jp/security/vuln/">https://www.ipa.go.jp/security/vuln/</a><br>scap&#x2F;cpe.html で解説がされています。</p><ul><li><code>cpe:2.3:&#123;種別&#125;:&#123;ベンダ名&#125;:&#123;製品名&#125;:&#123;バージョン&#125;:&#123;アップデート&#125;:&#123;エディション&#125;:&#123;言語&#125;</code>の構造です</li><li>脆弱性管理製品にCPEを登録することで、OSベンダパッケージ提供以外の製品の脆弱性を検知することを想定しています<ul><li>CPE登録 -&gt; 脆弱性情報で「影響を受ける製品」として登録されるCPEとマッチング -&gt; 該当すれば、その脆弱性が内包されると判断します</li></ul></li></ul><p>NVDであれば<a href="https://nvd.nist.gov/products/cpe/search">SearchCommonPlatformEnumerations</a>というページで検索ができるのですが、例えば以下のようになります。</p><ul><li>FortiOS（ForinetのFortigate製品のOS）<ul><li><code>cpe:2.3:o:fortinet:fortios:7.2.4:*:*:*:*:*:*:*</code>で表現されます</li><li>後半の<code>*</code>は、エディションや言語などが想定され、通常は<code>*</code>のままで利用されています</li></ul></li><li>Fortigate 1000e（ハードウェア）<ul><li><code>cpe:2.3:h:fortinet:fortigate-1100e:-:*:*:*:*:*:*:*</code>で表現されます</li></ul></li></ul><p>mjcheck4はバージョン2.2の表記方法を使っているようで、アップデート以降の表記が上記と異なっていますが、意図としては同じものです。<br>以下にFortiOSの例を示します。</p><ul><li>version 2.2<ul><li><code>cpe:/o:fortinet:fortios:7.2.4</code></li><li>シンプルに、バージョンまでを表現しています</li><li>mjcheck4のCPEはこのタイプです</li></ul></li><li>version 2.3<ul><li><code>cpe:2.3:o:fortinet:fortios:7.2.4:*:*:*:*:*:*:*</code></li><li>CPEのバージョンを示す<code>:2.3:</code>部分が追加されています</li><li>製品バージョン以降に、詳細な分類をするための項目（<code>:&#123;アップデート&#125;:&#123;エディション&#125;:&#123;言語&#125;</code>）が用意されています<ul><li>用意されていますが…、あまり使われていない印象です。しかしながら、項目として用意されていること、が重要です。</li></ul></li></ul></li></ul><p>OS標準パッケージ以外の製品（ソフトウェアだけではなく、ハードウェアも含めて）の脆弱性管理をする場合、この<strong>CPE</strong>というものをよく使うので、おおよそのフォーマットは覚えておいた方が良いです。</p><h2 id="脆弱性情報収集後の対応"><a href="#脆弱性情報収集後の対応" class="headerlink" title="脆弱性情報収集後の対応"></a>脆弱性情報収集後の対応</h2><p>検出後の対応については本ツールの範囲外ですが、概要を書いておきます。</p><p>一般的には下図のようなフローを随時回していくことになります。（状況により諸説あります）<br><img src="/images/20230419a/image_5.png" alt="" width="854" height="488" loading="lazy"></p><p>簡略化すると以下のようになり、本ツールは「脆弱性情報の収集」部分となります。</p><ul><li>対象のソフトウェアを設定する部分が「対象の把握」に該当します</li><li>ツールによるチェックが「脆弱性情報の取集」に該当します</li></ul><img src="/images/20230419a/image_6.png" alt="" width="736" height="215" loading="lazy"><p>収集した脆弱性情報を確認し、適用要否を判断し、実際に適用&#x2F;回避策の適用 を行います。</p><ul><li>クライアントな端末の場合、多くは判断不要でアップデートができると思います。<ul><li>例：Windows自身のアップデートや、Google Chromeなどのアプリケーションのアップデート</li></ul></li><li>サービス提供をしているネットワーク機器やサーバの場合、適用要否を検討して対応を決めます。<ul><li>アップデートによる挙動変化が無い、若しくは許容できることを確認するために、検証が必要です。</li><li>アップデートを行わないことにより発生する損害リスクを考慮し、許容できる場合は対応保留とする場合もあります。</li><li>これらの判断の為に、「脆弱性対策情報」の詳細項目を確認します。<ul><li>CVSSの情報などを基に、システムが置かれている環境などを考慮して決定します。</li></ul></li></ul></li></ul><p>本ツール mjcheck4 は、脆弱性対策情報の内容が少し分かりづらいかもしれませんが、「<strong>脆弱性対策のはじめの一歩</strong>」としては有効だと思われます。</p><ul><li>Pros<ul><li>無償で、JVN iPediaの情報を収集&#x2F;選別できる<ul><li>きちんと設定できれば、一旦は問題ない範囲を対象と出来る</li></ul></li><li>メールでの通知機能がある</li><li>対象製品登録が、GUI的に比較的楽</li></ul></li><li>Cons<ul><li>脆弱性対策情報が少ない<ul><li>JVN iPediaの情報のみで、CVSSでしか判断できない（慣れてくると、物足りない）</li></ul></li><li>自動運行が難しい<ul><li>アプリ起動時にチェックが走る為、例えば毎日起動しなおす必要がある</li></ul></li><li>ソースがJVN iPediaである<ul><li>NVDやベンダの脆弱性情報が全てあるわけではない<ul><li>これにより、例えば UbuntuやRedHatなどのLinuxサーバの脆弱性を確認するのは難しい</li></ul></li></ul></li><li>バージョン比較はできない<ul><li>mjcheck4のUIでは、対象製品のバージョンまでは登録できない<ul><li>例えば、<code>cpe:/a:oracle:java_se</code>のような記載となり、java SEのバージョンまでは記載しない</li></ul></li><li>特定バージョンのみ影響を受けるような脆弱性の場合、バージョンを考慮していないので手動で影響対象かを判別する必要がある</li></ul></li></ul></li></ul><p>まだ脆弱性情報収集と対策を本格的に実施していない組織においては、以下のステップを踏んだ方がよさそうです。</p><ul><li>まずはmjcheck4でを使う<ul><li>mjcheck4 で、主要なクライアント&#x2F;サーバ&#x2F;ネットワーク機器 などを登録して、現状を把握する<ul><li>登録するために、現状を確認するというアクションが行える</li></ul></li></ul></li><li>一部に於いて、脆弱性対応を始めてみる<ul><li>前述の対応フローを参考に、脆弱性情報を読みながら、できるところから対応をしてみる</li><li>一部ずつ始め、できる範囲を増やし、対応に関する知見を得る</li></ul></li><li>商用製品の脆弱性管理ツールを検討する<ul><li>商用製品であれば、mjcheck4で不足していると感じる部分が提供されていることが多いので、乗り換える<ul><li>対応のタスク管理機能、バージョンによる脆弱性の有無判断、対応優先度決め、多数の環境への対応、等</li></ul></li></ul></li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>mjcheck4は、比較的簡易にセキュリティ情報収集を始められることが確認できました。</p><p>脆弱性情報を収集した後の「脆弱性対応」をするには少し物足りないものですが、「まずはやってみる」という点では良いのではないかと思います。</p><p>こういうツールでまずはセキュリティ情報収集&#x2F;脆弱性対応の必要性を感じつつ、大規模且つ重要なシステムは <a href="https://vuls.biz/">FutureVuls</a> などの脆弱性管理サービスを使うのが良いかと思います。</p><p>もし、脆弱性対応についてお困りのことがあれば、井上までご相談ください。<br>製品ありきではなく、何らかの知見を共有できるかもしれません。</p><p>以上です。</p><p>次は市川さんの<a href="/articles/20230420a/">Cloud Data Fusionで始めるETL入門</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;こんにちわ。Cyber Security Innovation Group（CSIG）の井上です。&lt;/p&gt;
&lt;p&gt;部門名の通り、サイバーセキュリティに関する部署で、セキュリティコンサルティングやFutureVuls（ &lt;a</summary>
        
      
    
    
    
    <category term="Security" scheme="https://future-architect.github.io/categories/Security/"/>
    
    
    <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="脆弱性" scheme="https://future-architect.github.io/tags/%E8%84%86%E5%BC%B1%E6%80%A7/"/>
    
    <category term="mjcheck4" scheme="https://future-architect.github.io/tags/mjcheck4/"/>
    
    <category term="JVN" scheme="https://future-architect.github.io/tags/JVN/"/>
    
  </entry>
  
  <entry>
    <title>お家で電子工作入門 ～上空のフライト情報を可視化する🛫～</title>
    <link href="https://future-architect.github.io/articles/20230418a/"/>
    <id>https://future-architect.github.io/articles/20230418a/</id>
    <published>2023-04-17T15:00:00.000Z</published>
    <updated>2023-04-19T02:26:08.364Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230418a/j413_6_2_(1).png" alt="" width="500" height="281" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>本記事は<a href="/articles/20230417a/">春の入門祭り</a>2日目の記事となります。<br>今日はM5Stackを使ったお家電子工作の沼へ誘いたいと思います。</p><p>過去にも電子工作連載があり、Futureでは活発にお家電子工作をやっております。</p><p><a href="https://future-architect.github.io/articles/20220404a/">https://future-architect.github.io/articles/20220404a/</a></p><h2 id="何を作るか考える"><a href="#何を作るか考える" class="headerlink" title="何を作るか考える"></a>何を作るか考える</h2><img src="/images/20230418a/427ad433-320a-a7a1-a967-4122190b4765.png" alt="" width="632" height="750" loading="lazy"><p>お家電子工作はワクワクが原動力なので、何かワクワクするものを作りたいなーと考えてみました。</p><p>うーんと考えてみたところ、この3年間コロナもあり海外に全然行ってないなーと。</p><p>海外に行くときのワクワクはまず空港に到着してフライト情報を眺めることから始まります。</p><p>じゃあ、<strong>自分の住んでいる周辺を飛ぶ飛行機の情報を表示</strong>することで、その飛行機に思いを馳せてワクワクするんじゃないかと考えました。</p><h2 id="必要なもの"><a href="#必要なもの" class="headerlink" title="必要なもの"></a>必要なもの</h2><ul><li><a href="https://www.switch-science.com/products/7362">M5Stack Basic</a></li><li>SDカード（16GB以下）</li><li>WiFi環境</li><li>VSCode</li></ul><h3 id="M5Stackはいいゾ"><a href="#M5Stackはいいゾ" class="headerlink" title="M5Stackはいいゾ"></a>M5Stackはいいゾ</h3><p>とりあえずお家で電子工作やIoTをやってみたい方はぜひ1台持っておくとよいです。ほぼ何でもできます。</p><ul><li>ESP32ベース<ul><li>簡単にWiFiが使えるのでIoTにもってこいです。<ul><li>処理も早いです。</li></ul></li></ul></li><li>ノーコードでもいける<ul><li>GUIで簡単に作ることもできます。</li><li><a href="https://flow.m5stack.com/">https://flow.m5stack.com/</a></li></ul></li><li>公式が凄い（語彙力）<ul><li>とりあえず、公式がM5Stack売り始めからめっちゃ頑張ってます。</li><li>めっちゃ拡張機能出してます。<ul><li><a href="https://www.switch-science.com/collections/m5stack">https://www.switch-science.com/collections/m5stack</a></li></ul></li><li>自動水やりとかできます。<ul><li><a href="https://www.switch-science.com/products/6913">https://www.switch-science.com/products/6913</a></li></ul></li></ul></li></ul><p>学生時代にM5Stack拡張して、赤外線サバゲー作ってたりもしました。</p><p><a href="https://www.youtube.com/watch?v=deW3GmdMe_M">https://www.youtube.com/watch?v=deW3GmdMe_M</a></p><h2 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h2><p>VSCodeは<a href="https://azure.microsoft.com/ja-jp/products/visual-studio-code">公式ページ</a>からインストールして下さい。<br>VSCodeの拡張機能であるPlatformIO IDEを使って開発を行います。<br>PlatformIO IDEの導入は<a href="https://zenn.dev/kotaproj/articles/esp32_vscode_pio">こちらの記事</a>を参考にして下さい。</p><h3 id="プロジェクトの作成"><a href="#プロジェクトの作成" class="headerlink" title="プロジェクトの作成"></a>プロジェクトの作成</h3><p>拡張機能のインストールが終わると、Welcome画面が出てきます。<br>「New Project」からプロジェクトを作成しましょう。</p><img src="/images/20230418a/b5e37c37-c91d-85c8-da5a-5bc95ed16254.png" alt="" width="1200" height="511" loading="lazy"><ul><li>Name: Future_Tech_Blog（なんでもよいです。）</li><li>Board: M5Stack Core ESP32</li><li>Framework: Arduino</li></ul><img src="/images/20230418a/1467bebc-58ea-f16d-6211-13c5d0fd8134.png" alt="" width="1200" height="869" loading="lazy"><p>以下のようなディレクトリ構成でプロジェクトが作成されます。</p><img src="/images/20230418a/c53220d7-0840-3663-c777-dae6b227a8d6.png" alt="" width="491" height="460" loading="lazy"><h3 id="ライブラリのインストール"><a href="#ライブラリのインストール" class="headerlink" title="ライブラリのインストール"></a>ライブラリのインストール</h3><p>今回は以下のライブラリを使用します。</p><ul><li>M5Stack.h<ul><li>M5Stackの各種機能を使うためのライブラリ</li></ul></li><li>WiFi.h<ul><li>WiFiに接続するためのライブラリ</li></ul></li><li>HTTPClient.h<ul><li>GETリクエストを送るためのライブラリ</li></ul></li><li>ArduinoJson.h<ul><li>JSONを扱うためのライブラリ</li></ul></li><li>time.h<ul><li>時刻を扱ったり、変換したりするためのライブラリ</li></ul></li></ul><p>PlatformIOでのライブラリインストールは以下の手順で行っていきます。</p><p>PlatformIO Home画面から「Libraries」を選択します。</p><img src="/images/20230418a/c217b591-431a-d565-6747-f4361dfd5f88.png" alt="" width="1200" height="938" loading="lazy"><p>M5Stack.hを例にライブラリを検索します。</p><img src="/images/20230418a/f61e15fa-deac-9968-eab7-0ed288999b39.png" alt="" width="1200" height="409" loading="lazy"><p>該当のライブラリをクリックします。</p><img src="/images/20230418a/e6ea510f-ad6f-d4df-bb3f-e0451de648cd.png" alt="" width="1175" height="330" loading="lazy"><p>「Add to Project」からプロジェクトへ追加します。<br><img src="/images/20230418a/cea2ae68-5753-78b3-49e1-0d13e4365174.png" alt="" width="1188" height="526" loading="lazy"></p><p>「Select a project」から作成したプロジェクトを選択し、「Add」を押すことで追加できます。</p><img src="/images/20230418a/0cb18834-4f55-7a54-c889-6a76e4ff5fc2.png" alt="" width="1200" height="748" loading="lazy"><p>これをあとArduinoJsonとTimeに対して行うことで準備完了です。<br>HTTPClientやWiFiに対しては不要です。</p><h2 id="Flightrader24を理解する"><a href="#Flightrader24を理解する" class="headerlink" title="Flightrader24を理解する"></a>Flightrader24を理解する</h2><img src="/images/20230418a/f53f1045-f749-5372-1bbc-f23471d484a9.png" alt="" width="1200" height="568" loading="lazy"><p><a href="https://www.flightradar24.com/51.5,-0.12/6">Flightrader24</a>は世界中のフライト情報を取得することができます。</p><p>iOSやAndroidのアプリもあり、触ったことがある人も居るのではないでしょうか？</p><p>Flightrader24ではREST APIも公開していて、以下のURLにGETリクエストするとJSONでデータを取得することができます。</p><p><code>http://data-live.flightradar24.com/zones/fcgi/feed.js?adsb=1&amp;mlat=1&amp;faa=1&amp;flarm=1&amp;estimated=1&amp;air=1&amp;gnd=1&amp;vehicles=1&amp;gliders=1&amp;array=1</code></p><p>各クエリパラメータの説明は以下に詳しく書いてあります。<br><a href="https://www.mk-mode.com/blog/2016/02/08/fr24-getting-flight-info/">JSON - Flightradar24 から飛行中の航空機情報を取得！</a></p><p>ここで<code>bounds=</code>というクエリパラメータを追加し、緯度（北）・緯度（南）・経度（西）・経度（東）の順で値を入れていくとフライト情報を取得するエリアを指定することができます。</p><p>今回は大崎がある品川区の端から端を指定してみます。</p><p>どうやって緯度・経度を取得するかって？それはChat-GPTにお任せです。</p><img src="/images/20230418a/4d540cca-b35a-ee19-1e69-b3138553e2df.png" alt="" width="958" height="612" loading="lazy"><p>こういう調べても出てきそうにない情報は初手Chat-GPTがおススメです。<br>緯度・経度が得られたのでクエリパラメータを指定したURLが以下になります。</p><p><code>http://data-live.flightradar24.com/zones/fcgi/feed.js?bounds=35.63,35.59,139.71,139.76&amp;adsb=1&amp;mlat=1&amp;faa=1&amp;flarm=1&amp;estimated=1&amp;air=1&amp;gnd=1&amp;vehicles=1&amp;gliders=1&amp;array=1</code></p><p>これでGETしてみたところ、取得できませんでした。<br>さすがに範囲が狭すぎたようなので小数点第二位を四捨五入して取得したところ、以下のようなフライト情報が取得できました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;2fe70675&#x27;</span>, <span class="string">&#x27;4D23DB&#x27;</span>, 35.5631, 139.7589, 329, 0, 1, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;T-RJTT172&#x27;</span>, <span class="string">&#x27;GL7T&#x27;</span>, <span class="string">&#x27;9H-VIL&#x27;</span>, 1681552816, <span class="string">&#x27;XSP&#x27;</span>, <span class="string">&#x27;HND&#x27;</span>, <span class="string">&#x27;VJT735&#x27;</span>, 1, 0, <span class="string">&#x27;VJT735&#x27;</span>, 0]</span><br></pre></td></tr></table></figure><p>各項目の意味は先ほどのリンクを参考にしてください。<br><a href="https://www.mk-mode.com/blog/2016/02/08/fr24-getting-flight-info/">JSON - Flightradar24 から飛行中の航空機情報を取得！</a></p><p>とりあえず、10: 便名、11: 時刻、12: 出発空港, 13: 到着空港がわかれば楽しめそうです。</p><h2 id="M5Stack側のコードを作成"><a href="#M5Stack側のコードを作成" class="headerlink" title="M5Stack側のコードを作成"></a>M5Stack側のコードを作成</h2><p>M5Stackは<code>setup()</code>と<code>loop()</code>の2つの大きな関数による構造となっております。<br><code>setup()</code>は最初の1度しか呼ばれず、残りは<code>loop()</code>が名前の通り永遠に呼ばれるようになっています。</p><p>コード全体はこちらのGitHubに置いてあります。</p><p><a href="https://github.com/bigface0202/flightM5rader">https://github.com/bigface0202/flightM5rader</a></p><h3 id="setup側"><a href="#setup側" class="headerlink" title="setup側"></a>setup側</h3><p>setup側は起動後の1度しか呼ばれないため、主に接続を確立したり、画面の初期設定を行うなどの処理を記述します。</p><h4 id="M5Stackのディスプレイ設定"><a href="#M5Stackのディスプレイ設定" class="headerlink" title="M5Stackのディスプレイ設定"></a>M5Stackのディスプレイ設定</h4><p>M5Stackのディスプレイには文字や画像を表示することができます。<br>その初期設定を以下のように記述します。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// M5Stackの初期化</span></span><br><span class="line">M5.<span class="built_in">begin</span>();</span><br><span class="line"><span class="comment">// フォントサイズ</span></span><br><span class="line">M5.Lcd.<span class="built_in">setTextFont</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// フォントカラー</span></span><br><span class="line">M5.Lcd.<span class="built_in">setTextColor</span>(WHITE);</span><br><span class="line"><span class="comment">// 文字の初期位置</span></span><br><span class="line">M5.Lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="WiFiへ接続"><a href="#WiFiへ接続" class="headerlink" title="WiFiへ接続"></a>WiFiへ接続</h4><p>今回はHTTPリクエストを投げる必要があるため、WiFiへの接続は必須となります。<br><code>WIFI_SSID</code>と<code>WIFI_PASSWORD</code>を自宅のWiFiの情報に書き換えることで接続できるようになります。<br>また、5GHz帯は接続不可能なため2.4GHz帯のWiFiを選んで下さい。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WiFiに接続</span></span><br><span class="line">WiFi.<span class="built_in">begin</span>(WIFI_SSID, WIFI_PASSWORD);</span><br><span class="line"><span class="type">int</span> _cursorX = <span class="number">0</span>;</span><br><span class="line">M5.Lcd.<span class="built_in">print</span>(<span class="string">&quot;Connecting to Wi-Fi&quot;</span>);</span><br><span class="line"><span class="comment">// 接続を試みている状態を画面に表示</span></span><br><span class="line"><span class="keyword">while</span> (WiFi.<span class="built_in">status</span>() != WL_CONNECTED) &#123;</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    M5.Lcd.<span class="built_in">setCursor</span>(<span class="number">0</span> + <span class="number">5</span> * _cursorX, <span class="number">30</span>);</span><br><span class="line">    M5.Lcd.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">300</span>);</span><br><span class="line">    _cursorX++;</span><br><span class="line">    <span class="keyword">if</span> (_cursorX &gt; <span class="number">320</span>) &#123;</span><br><span class="line">      _cursorX = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="loop側"><a href="#loop側" class="headerlink" title="loop側"></a>loop側</h3><p>loop側は主に処理をさせたい内容を記述していきます。<br>今回の場合だと、フライト情報の取得とその情報の変換・表示になります。</p><h4 id="リクエストを投げる"><a href="#リクエストを投げる" class="headerlink" title="リクエストを投げる"></a>リクエストを投げる</h4><p>GETリクエストは以下のように投げることができます。<br>毎回、取得できるとは限らないので<code>HTTP_CODE_OK</code>以外の時はエラーコードを表示するにようにしています。<br>また、GETリクエストを送る際は<code>delay</code>を最後に挟むようにしてください。<br><code>delay</code>を入れないとマシンガンリクエストを送ることになり、APIサーバーに対して負荷をかけてしまうため大変よろしくないです。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">HTTPClient http;</span><br><span class="line">String apiAddress = <span class="string">&quot;http://data-live.flightradar24.com/zones/fcgi/feed.js?bounds=35.6,35.5,139.7,139.8&amp;adsb=1&amp;mlat=1&amp;faa=1&amp;flarm=1&amp;estimated=1&amp;air=1&amp;gnd=1&amp;vehicles=1&amp;gliders=1&amp;array=1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String payload;</span><br><span class="line">    http.<span class="built_in">begin</span>(apiAddress);</span><br><span class="line">    <span class="type">int</span> httpCode = http.<span class="built_in">GET</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (httpCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (httpCode == HTTP_CODE_OK) &#123;</span><br><span class="line">            <span class="comment">// 以下、取得したデータの処理</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        M5.Lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        M5.Lcd.<span class="built_in">print</span>(<span class="string">&quot;HTTP GET ERROR: &quot;</span>);</span><br><span class="line">        M5.Lcd.<span class="built_in">println</span>(httpCode);</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// delayを入れ忘れるとマシンガンリクエストになるので、忘れずに</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="取得したJSONの処理と表示"><a href="#取得したJSONの処理と表示" class="headerlink" title="取得したJSONの処理と表示"></a>取得したJSONの処理と表示</h4><p>Flightrader24にリクエストを送って取得した情報を表示していきます。<br>基本的に取得した配列に対して、ループで3秒ごとに表示していく処理になります。<br>1点だけ注意したいのが、リクエストを投げて得られる時刻がUNIX時間なので人間が読める時間に変換する必要があり、そちらの関数<code>unix2datetime</code>は後述します。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSON取得用の変数</span></span><br><span class="line"><span class="function">DynamicJsonDocument <span class="title">doc</span><span class="params">(<span class="number">4096</span>)</span></span>;</span><br><span class="line"><span class="comment">// リクエストで取得した情報を格納</span></span><br><span class="line">payload = http.<span class="built_in">getString</span>();</span><br><span class="line"><span class="comment">// String -&gt; JSON</span></span><br><span class="line"><span class="built_in">deserializeJson</span>(doc, payload);</span><br><span class="line"><span class="comment">// 配列の大きさを取得</span></span><br><span class="line"><span class="type">int</span> len = doc[<span class="string">&quot;aircraft&quot;</span>].<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">// 配列の数だけフライト情報を表示</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    String flightName = doc[<span class="string">&quot;aircraft&quot;</span>][i][<span class="number">10</span>];</span><br><span class="line">    <span class="type">time_t</span> unixTimeUTC = doc[<span class="string">&quot;aircraft&quot;</span>][i][<span class="number">11</span>];</span><br><span class="line">    String departure = doc[<span class="string">&quot;aircraft&quot;</span>][i][<span class="number">12</span>];</span><br><span class="line">    String arrival = doc[<span class="string">&quot;aircraft&quot;</span>][i][<span class="number">13</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unix timeから日本時間へ変換</span></span><br><span class="line">    String dateTimeString = <span class="built_in">unix2datetime</span>(unixTimeUTC);</span><br><span class="line">    <span class="comment">// 表示</span></span><br><span class="line">    M5.Lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    M5.Lcd.<span class="built_in">print</span>(<span class="string">&quot;Flight Name: &quot;</span>);</span><br><span class="line">    M5.Lcd.<span class="built_in">println</span>(flightName);</span><br><span class="line">    M5.Lcd.<span class="built_in">print</span>(<span class="string">&quot;Time: &quot;</span>);</span><br><span class="line">    M5.Lcd.<span class="built_in">println</span>(dateTimeString);</span><br><span class="line">    M5.Lcd.<span class="built_in">print</span>(<span class="string">&quot;Departure: &quot;</span>);</span><br><span class="line">    M5.Lcd.<span class="built_in">println</span>(departure);</span><br><span class="line">    M5.Lcd.<span class="built_in">print</span>(<span class="string">&quot;arrival: &quot;</span>);</span><br><span class="line">    M5.Lcd.<span class="built_in">println</span>(arrival);</span><br><span class="line">    <span class="comment">// 3秒待つ</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">3000</span>);</span><br><span class="line">    <span class="comment">// 画面初期化</span></span><br><span class="line">    M5.Lcd.<span class="built_in">fillScreen</span>(BLACK);</span><br></pre></td></tr></table></figure><h4 id="UNIX時間を変換する"><a href="#UNIX時間を変換する" class="headerlink" title="UNIX時間を変換する"></a>UNIX時間を変換する</h4><p>Chat-GPTマジ便利。<br>要所要所で詰まったらChat-GPT先生にお任せしたほうが早いです。</p><img src="/images/20230418a/637f864f-c784-1683-86fe-56959601377c.png" alt="" width="1032" height="1138" loading="lazy"><figure class="highlight cpp"><figcaption><span>unix2datetime</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">unix2datetime</span><span class="params">(<span class="type">time_t</span> unixTime)</span> </span>&#123;</span><br><span class="line">  <span class="type">time_t</span> unixTimeJTC = unixTime + <span class="number">32400</span>;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">tm</span> *tmTime = <span class="built_in">localtime</span>(&amp;unixTimeJTC);</span><br><span class="line">  <span class="type">char</span> dateTimeString[<span class="number">20</span>];</span><br><span class="line">  <span class="built_in">strftime</span>(dateTimeString, <span class="built_in">sizeof</span>(dateTimeString), <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, tmTime);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dateTimeString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="画像を表示する（おまけ）"><a href="#画像を表示する（おまけ）" class="headerlink" title="画像を表示する（おまけ）"></a>画像を表示する（おまけ）</h3><p>ここからは機能的にはあまり関係ないのでおまけになりますが、こうやって遊びを入れることで自分のプロダクトに愛着が沸きます。<br>現在の状態だと画面にフライト情報の文字だけが表示されて味気ないので、フライト情報のAPIをGETする際に飛行機の画像を表示します。</p><p>画像はこちらのフリー素材をサイズ変更（幅160px）してダウンロードし、SDカードにフォルダ（フォルダ名：img）を作成して取り込んで下さい。<br>取り込み終わったSDカードはM5Stackに挿しましょう。</p><p><a href="https://jitanda.com/2014/02/07/j413_6/">https://jitanda.com/2014/02/07/j413_6/</a></p><p>また、LavyanGFXをライブラリインストールの手順でやったようにインストールして下さい。</p><img src="/images/20230418a/0dabb105-0d88-ed15-a015-7e3aa6b39624.png" alt="" width="1200" height="231" loading="lazy"><p>コードでは画像を<code>sprite.pushRotateZoom()</code>で徐々に拡大させることで、近づいてきているようなエフェクトを作ってみます。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LGFX_AUTODETECT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;LovyanGFX.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;LGFX_AUTODETECT.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> LGFX lcd;</span><br><span class="line"><span class="function"><span class="type">static</span> LGFX_Sprite <span class="title">sprite</span><span class="params">(&amp;lcd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画像サイズが違うかもなので、ここはよしなに変えて下さい</span></span><br><span class="line"><span class="type">int</span> width = <span class="number">160</span>;</span><br><span class="line"><span class="type">int</span> height = <span class="number">120</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初期化処理</span></span><br><span class="line">    lcd.<span class="built_in">init</span>();</span><br><span class="line">    lcd.<span class="built_in">clear</span>(TFT_BLACK);</span><br><span class="line">    SD.<span class="built_in">begin</span>(TFCARD_CS_PIN, SPI, <span class="number">20000000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画像の読み込み</span></span><br><span class="line">    sprite.<span class="built_in">createSprite</span>(width, height);</span><br><span class="line">    sprite.<span class="built_in">drawPngFile</span>(SD, <span class="string">&quot;/img/airplane.png&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 画像を徐々にズーム</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</span><br><span class="line">        sprite.<span class="built_in">pushRotateZoom</span>(width, height, <span class="number">0</span>, i, i);</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="できあがったもの"><a href="#できあがったもの" class="headerlink" title="できあがったもの"></a>できあがったもの</h2><img src="/images/20230418a/m5stack_airplane3.gif" alt="m5stack_airplane3.gif" width="284" height="274" loading="lazy"><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>こうやってハードウェア込みで自分がワクワクするものを開発できるのがお家電子工作の良いところですね。GPSモジュールなんかもあるので、位置情報のあたりも自動化するなど色々工夫もできそうです。</p><p>ぜひ皆さんもLet’s enjoy お家電子工作してください。</p><p>明日は井上さんで<a href="/articles/20230419a/">初めてのセキュリティ情報収集（mjckeck4)</a>です。</p><p>アイキャッチは<a href="https://jitanda.com/">時短だ</a>の<a href="https://jitanda.com/2014/02/07/j413_6/">飛行機38</a>を使わせていただきました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230418a/j413_6_2_(1).png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;281&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</summary>
        
      
    
    
    
    <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
    <category term="IoT" scheme="https://future-architect.github.io/tags/IoT/"/>
    
    <category term="電子工作" scheme="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/"/>
    
    <category term="M5stack" scheme="https://future-architect.github.io/tags/M5stack/"/>
    
    <category term="flightrader24" scheme="https://future-architect.github.io/tags/flightrader24/"/>
    
  </entry>
  
  <entry>
    <title>markdownlintで設計書の品質を高める</title>
    <link href="https://future-architect.github.io/articles/20230417b/"/>
    <id>https://future-architect.github.io/articles/20230417b/</id>
    <published>2023-04-16T15:00:01.000Z</published>
    <updated>2023-04-19T02:32:20.392Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230417b/Microsoft.VisualStudio.Services.Icons.png" alt="" width="128" height="128"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>フューチャー技術ブログのリレー形式の連載である、<a href="/articles/20230417a/">春の入門祭り2023</a>の1日目です。TIG真野です。</p><p>ここ数年、Markdownで設計書をチームで書き、GitHub（GitLab）上でレビューするフローを採用しています。なるべくテキストベースで設計開発フローを統一するため、私の所属するチームでは以下のようなツールを採用しています。</p><ul><li>シーケンス図、業務フロー図<ul><li>Markdown中にPlantUMLで記載</li><li>参照はGitHub上からも見れるように、<a href="https://chrome.google.com/webstore/detail/pegmatite/jegkfbnfbfnohncpcfcimepibmhlkldo">pegmatite</a> を利用</li></ul></li><li>システム構成図など画像系<ul><li>Diagrams.net（draw.io）で作成し、<code>.drawio.png</code> の拡張子でMarkdownから参照</li><li>これだけは目視で差分チェックとなる</li></ul></li><li>Web API定義<ul><li>OpenAPI SpecのYAMLファイル</li><li>参照はGitHub上からも見れるように、<a href="https://chrome.google.com/webstore/detail/swagger-viewer/nfmkaonpdmaglhjjlggfhlndofdldfag">swagger-viewer</a> を利用</li></ul></li><li>ERD<ul><li><a href="https://a5m2.mmatsubara.com/index.html">A5:SQL Mk-2</a> の <code>.a5er</code> 拡張子のファイルをコミット</li><li>ini形式のテキストファイルであるため、差分がわかりやすい</li></ul></li></ul><p>単体テストデータ管理や区分値管理など、一部Excelを利用する場面はありますが、このようなファイルを同時に複数のブランチで変更することは今の私の環境においては、あまりありません。したがって、Git上でConflictが発生するのはテキストファイルのみとなり、Conflictの解消に大きな手間はかかりません。</p><p>Markdownのフォーマッタは<a href="https://prettier.io/">Prettier</a> と、<a href="https://editorconfig.org/">EditorConfig</a>を利用し、<a href="https://textlint.github.io/">textlint</a> はリンク切れチェックのみを利用しています（他のよくあるチェック項目は、あまりにも検知件数が多かったため）。</p><p>Markdownに関しては上記のPrettier、EdictorConfig、textlintを通して最低限の品質はカバーできており、個人的には開発者体験が悪くなく気に入っています。</p><p>しかし、Markdownで設計書を充実させようとすればするほど、設計書間やメンバー間のちょっとした揺れで、本質的なレビューがしにくく感じるようになりました。そこでMarkdownのLintツールを導入するモチベーションが高まりました。typoチェックの話は別の記事でしたいので今回は割愛します。</p><h2 id="Markdown-のスタイルガイド"><a href="#Markdown-のスタイルガイド" class="headerlink" title="Markdown のスタイルガイド"></a>Markdown のスタイルガイド</h2><p>いくつか存在しますが、掲題のMarkdownlint もチェック内容のインプットにしているのが、以下のスタイルガイドです。</p><p><a href="https://cirosantilli.com/markdown-style-guide/">https://cirosantilli.com/markdown-style-guide/</a></p><p>これをきっちり読み込んで、高い意識をもって手動で守るのは大変なので、これをベースに作られたツールを利用します。</p><h2 id="MarkdownのLintツール"><a href="#MarkdownのLintツール" class="headerlink" title="MarkdownのLintツール"></a>MarkdownのLintツール</h2><p><a href="https://github.com/DavidAnson/markdownlint">DavidAnson&#x2F;markdownlint</a> が有名で、CLIツールだと<a href="https://github.com/DavidAnson/markdownlint-cli2">DavidAnson&#x2F;markdownlint-cli2</a>が今から導入する際には良さそうです。VS Code拡張にも<a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint">markdownlint</a>という名前で存在し、リアルタイムでチェックができます。</p><p>チェック項目は <code>v0.28.1</code> で<a href="https://github.com/DavidAnson/markdownlint/blob/v0.28.1/doc/Rules.md">53のルール</a>が存在します。</p><p><a href="https://github.com/DavidAnson/markdownlint/blob/main/CHANGELOG.md">CHANGELOG</a>を見る限り、バージョンアップとともにルールが毎回追加されるという開発スタイルではなく、既存のルールのブラッシュアップが継続的に行われていました。</p><p>コマンドラインからのインストールと実行は以下です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># インストール</span></span><br><span class="line">npm install --save-dev markdownlint-cli2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 実行</span></span><br><span class="line">markdownlint-cli2 <span class="string">&quot;**/*.md&quot;</span></span><br></pre></td></tr></table></figure><p>それなりのリポジトリであれば大量に検知されるかも知れませんが、設定ファイルを用いて重要なチェックのみに絞ると良いかと思います。また、デフォルトでは <code>.git</code> や <code>node_modules</code> もチェックするので、検査対象から外す設定も入れます。私は一通り見てみて、以下の設定にしています。</p><figure class="highlight json"><figcaption><span>.markdownlint-cli2.jsonc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;line-length&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span> <span class="comment">// MD013  行の長さ</span></span><br><span class="line">    <span class="attr">&quot;no-hard-tabs&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span> <span class="comment">// MD010 Markdown中にTSVを書くとエラーになるため</span></span><br><span class="line">    <span class="attr">&quot;no-trailing-punctuation&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span> <span class="comment">// MD026 ヘディングに句読点（.,;:!?）を許容したい</span></span><br><span class="line">    <span class="attr">&quot;no-inline-html&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span> <span class="comment">// MD033 HTMLは許容</span></span><br><span class="line">    <span class="attr">&quot;no-bare-urls&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span> <span class="comment">// MD034 URLのリンク化条件</span></span><br><span class="line">    <span class="attr">&quot;no-space-in-emphasis&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="punctuation">,</span> <span class="comment">// MD037  $$など数式で問題になったため外す</span></span><br><span class="line">    <span class="attr">&quot;link-fragments&quot;</span><span class="punctuation">:</span><span class="keyword">false</span> <span class="comment">// MD051 相対パス設定</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ignores&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;.git&quot;</span><span class="punctuation">,</span> <span class="string">&quot;node_modules&quot;</span><span class="punctuation">]</span> <span class="comment">// 無視するディレクトリ</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="検知された内容"><a href="#検知された内容" class="headerlink" title="検知された内容"></a>検知された内容</h2><p>実際にとあるリポジトリで動かしてみて、200件ほど検知され全て修正してみました。観測範囲がそこだけですが、チームの癖が見えてきて面白かったです。</p><h3 id="ヘディング周り"><a href="#ヘディング周り" class="headerlink" title="ヘディング周り"></a>ヘディング周り</h3><p>MD001 というチェックは、ヘディング（見出し、ヘッダー）のレベルは 1つずつだけしか増加させてはならないというものです。</p><p> <code>###</code> → <code>#####</code> といった、おそらくフォントサイズなどの装飾を調整するため、細かくレベルを調整する人がいて、なるほどなと思いました。まずレビューでは指摘しない細かい内容なので、まさにLinter向きです。</p><figure class="highlight txt"><figcaption><span>NG.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">### Header 3</span><br><span class="line"></span><br><span class="line">xxx</span><br><span class="line"></span><br><span class="line">##### Header 4</span><br><span class="line"></span><br><span class="line">xxx</span><br></pre></td></tr></table></figure><p>このヘディング周りは他にもチェックが多く、例えば以下があります。トップレベルが <code>##</code> で始まるファイルはたくさんありました。</p><ul><li>MD002 最初のヘディングは <code>#</code> から始まる必要がある</li><li>MD003 ヘディングのマークアップを行頭 <code>#</code> かアンダーライン形式 <code>=====</code> のどちらかに統一する必要がある<ul><li>これに類似して、MD004 は箇条書きの <code>*</code>、<code>-</code>、<code>+</code> などが、同じレベルで異なる文字を使っている場合に検知するものです。おそらくPrettierで強制的に書き換えてくれる内容なため、今まで気にしたことが無かったので新鮮でした</li></ul></li></ul><p>地味に多かったのは、MD022 です。これはヘディングの周りに空行が必須というものです。</p><figure class="highlight text"><figcaption><span>NG.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 見出し1</span><br><span class="line">Some text</span><br><span class="line"></span><br><span class="line">Some more text</span><br><span class="line">## 見出し2</span><br></pre></td></tr></table></figure><figure class="highlight text"><figcaption><span>OK.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 見出し1</span><br><span class="line"></span><br><span class="line">Some text</span><br><span class="line"></span><br><span class="line">Some more text</span><br><span class="line"></span><br><span class="line">## 見出し 2</span><br></pre></td></tr></table></figure><p>根拠は、一部のパーサーが前後に空行が存在しないとうまく解析できないためとのこと。類似で、MD031 はコードブロックを空行で囲む必要が、MD032 はリストを空行で囲む必要があるなど、チェック数は多く感じるかも知れませんが、内容は1つ覚えれば応用が効く物が多いので、それほど難しいものではありません。</p><h3 id="ハードタブ"><a href="#ハードタブ" class="headerlink" title="ハードタブ"></a>ハードタブ</h3><p>インデントをタブ文字（\t）で揃えるファイルがありませんでしたが、ファイル中に <code>tsv</code> のコードブロックでサンプルデータを表現している設計書があり、誤検知されました。意図した動作なのかは調べていないため、回避方法があるかもしれません。</p><h3 id="リンク系"><a href="#リンク系" class="headerlink" title="リンク系"></a>リンク系</h3><p>MD011 はリンクのマークアップ誤りを検知してくれます。こんなの存在しないだろうと思っていたら、1件あります。意外と気が付かないものですね。</p><figure class="highlight md"><figcaption><span>NG.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Incorrect link syntax)[http://www.example.com/]</span><br></pre></td></tr></table></figure><figure class="highlight md"><figcaption><span>OK.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Correct link syntax</span>](<span class="link">http://www.example.com/</span>)</span><br></pre></td></tr></table></figure><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>MD034 は 生のURLを許容するかどうかです。</p><p>以下だとリンクが機能しないパーサがあるということが理由です。</p><figure class="highlight md"><figcaption><span>NG.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">For more information, see http://www.example.com/.</span><br></pre></td></tr></table></figure><p>回避するためには <code>&lt;&gt;</code> でURLを囲みます。</p><figure class="highlight md"><figcaption><span>OK.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">For more information, see <span class="language-xml">&lt;http://www.example.com/&gt;</span>.</span><br></pre></td></tr></table></figure><p>ただ、GitHub Flavored Markdownの場合は<code>&lt;&gt;</code>が無くても、リンクとして認識してくれるため、その前提の場合は除外しても良いかなと個人的には感じます。</p><h3 id="コードブロック"><a href="#コードブロック" class="headerlink" title="コードブロック"></a>コードブロック</h3><p>今回一番学びだと思ったのがこれです。</p><p>MD014 は実行するコマンドの表記に使用される行頭ドル記号をチェックします。コマンドの出力結果は記載せず、コマンドだけをドル記号付きで記載していると検知されます。</p><p>例えば、手順書において以下のように実行するシェルコマンドだけを記載することがあります。</p><figure class="highlight txt"><figcaption><span>NG.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">$ cat foo</span><br><span class="line">$ less bar</span><br></pre></td></tr></table></figure><p>このような場合、 $ を外すべきだというチェックです。</p><figure class="highlight txt"><figcaption><span>OK.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">cat foo</span><br><span class="line">less bar</span><br></pre></td></tr></table></figure><p>根拠としては、<code>$</code> を外したほうが、コピー＆ペーストが簡単になるためということ。これはなるほどと思いました。</p><p>面白いのは、以下のようにコマンドと出力が混ざるケースは除外されるということです。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">foo bar</span><br><span class="line">$ cat foo</span><br><span class="line">Hello world</span><br><span class="line">$ cat bar</span><br><span class="line">baz</span><br></pre></td></tr></table></figure><h2 id="fixコマンド"><a href="#fixコマンド" class="headerlink" title="fixコマンド"></a>fixコマンド</h2><p>さきほど200件ほど検知されたと記載しましたが、その大部分は以下のコマンドを実行すると自動で修正してくれます（対象のファイルが直接書き換えられるため、事実上フォーマッターのような動きをします）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">markdownlint-cli2-fix <span class="string">&quot;**/*.md&quot;</span></span><br></pre></td></tr></table></figure><p>全ての検知結果を修正してくれるわけではなく<a href="https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md">ドキュメント</a>に <code>Fixable</code> とついたもののみ修正してくれるようです。動作もコミット前後で差し込む程度であれば何ら気にならない速度ですので、開発フローに組み込んでしまえば良さそうです。</p><p>この<code>markdownlint-cli2-fix</code> は Prettierでも修正されないルールがあるため、併せて設定しておくと良さそうです。</p><h2 id="所感とまとめ"><a href="#所感とまとめ" class="headerlink" title="所感とまとめ"></a>所感とまとめ</h2><p>Markdownlintを導入してみた結果、ドキュメントの一貫性も上がり、リンク切れなど機能していない記法も検知でき品質を上げることができます。個人的には動作が高速であり、VS Codeで随時チェックもできつつ、CLIでも簡単に導入できるため、使わない手は無いなと思いました。</p><p>そして <code>fix</code> が最高すぎます。とりあえず <code>fix</code> で修正させて、GitHubなどのPull Request上のFile diffsで想定外の変換が行われていないかをチェックすれば、生産性と品質を良いバランスで実現できそうです。</p><p>次は岸下さんの<a href="/articles/20230418a/">お家で電子工作入門 ～上空のフライト情報を可視化する🛫～</a>です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230417b/Microsoft.VisualStudio.Services.Icons.png&quot; alt=&quot;&quot; width=&quot;128&quot; height=&quot;128&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</summary>
        
      
    
    
    
    <category term="DevOps" scheme="https://future-architect.github.io/categories/DevOps/"/>
    
    
    <category term="Linter" scheme="https://future-architect.github.io/tags/Linter/"/>
    
    <category term="ドキュメント" scheme="https://future-architect.github.io/tags/%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88/"/>
    
    <category term="Markdown" scheme="https://future-architect.github.io/tags/Markdown/"/>
    
    <category term="Markdownlint" scheme="https://future-architect.github.io/tags/Markdownlint/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り</title>
    <link href="https://future-architect.github.io/articles/20230417a/"/>
    <id>https://future-architect.github.io/articles/20230417a/</id>
    <published>2023-04-16T15:00:00.000Z</published>
    <updated>2023-04-28T05:59:11.730Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230417a/アイキャッチ画像.jpg" alt="" width="1200" height="800" loading="lazy"><p>Photo taken by <a href="https://twitter.com/kaedemalu">@kaedemalu</a></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。技術ブログ運営の藤戸四恩です。</p><p>新年度も始まり、2週間が経ち、桜が散りはじめ暖かい日々が続いておりますね。新人の方も徐々に会社に慣れてきた頃ではないかと思います。ちなみに、私はスギ花粉アレルギーを持っているのですが、落ち着いてきました。</p><p>落ち着いてきたこの時期に、2023年もフューチャーは春の入門祭りを始めます！！</p><h2 id="春の入門連載について"><a href="#春の入門連載について" class="headerlink" title="春の入門連載について"></a>春の入門連載について</h2><p>春の入門連載とは、4年連続の開催となるリレー形式で行う技術ブログの連載で、テーマは以下の3つに寄稿者を募っております。</p><ul><li>今まで触って無かった技術のやってみた記事</li><li>先輩・同期・後輩宛に、知っておいて欲しい技術沼へ落とす記事</li><li>好きな技術の布教活動をする記事</li></ul><p>今年は23名が参加します。これはフューチャーブログ史上、過去最高の人数です。</p><p>また、2022年入社が9名が参加するなど若手がたくさん参加してます。</p><p>こういった企画を通して有益な情報をカジュアルに発信する文化が、もっと広がれば良いなと願っています。</p><h2 id="投稿スケジュール・タイトル"><a href="#投稿スケジュール・タイトル" class="headerlink" title="投稿スケジュール・タイトル"></a>投稿スケジュール・タイトル</h2><p>本連載は以下のスケジュールで進めます。</p><div class="scroll"><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>4&#x2F;17</td><td>真野隼記</td><td><a href="/articles/20230417b/">markdownlintで設計書の品質を高める</a></td></tr><tr><td>4&#x2F;18</td><td>岸下優介</td><td><a href="/articles/20230418a/">お家で電子工作入門 ～上空のフライト情報を可視化する🛫～</a></td></tr><tr><td>4&#x2F;19</td><td>井上圭</td><td><a href="/articles/20230419a/">初めてのセキュリティ情報収集（mjckeck4)</a></td></tr><tr><td>4&#x2F;20</td><td>市川浩暉</td><td><a href="/articles/20230420a/">Cloud Data Fusionで始めるETL入門</a></td></tr><tr><td>4&#x2F;21</td><td>永井優斗</td><td><a href="/articles/20230421a/">「技術書」の読書術 読書感想文</a></td></tr><tr><td>4&#x2F;24</td><td>工藤駿泰</td><td><a href="/articles/20230424a/">初めての画像処理〜OpenCVって何ができるの？〜</a></td></tr><tr><td>4&#x2F;25</td><td>藤戸四恩</td><td><a href="/articles/20230425a/">Hack The Box Oopsie を解いてみた</a></td></tr><tr><td>4&#x2F;26</td><td>渡邉光</td><td><a href="/articles/20230426a/">Pulumiで始めるIaC入門</a></td></tr><tr><td>4&#x2F;27</td><td>小澤泰河</td><td><a href="/articles/20230427a/">CDN 入門とエッジでのアプリケーション実行</a></td></tr><tr><td>4&#x2F;28</td><td>石野可南子</td><td><a href="/articles/20230428a/">初心者による初心者のためのGit入門</a></td></tr><tr><td>5&#x2F;1</td><td>棚井龍之介</td><td>TBD</td></tr><tr><td>5&#x2F;2</td><td>伊藤太斉</td><td>Cloudflare</td></tr><tr><td>5&#x2F;8</td><td>齊藤英比古</td><td>『CAREER SKILLS ソフトウェア開発者の完全キャリアガイド』 の 初心者向け に知っておくと良さそうなところ</td></tr><tr><td>5&#x2F;9</td><td>佐藤更星</td><td>TBD</td></tr><tr><td>5&#x2F;10</td><td>高世駿</td><td>TBD</td></tr><tr><td>5&#x2F;11</td><td>市川加伊斗</td><td>TBD</td></tr><tr><td>5&#x2F;12</td><td>栗栖大樹</td><td>TBD</td></tr><tr><td>5&#x2F;15</td><td>寒河江功悟</td><td>「Swiftの自動テスト」</td></tr><tr><td>5&#x2F;16</td><td>斎藤賢太</td><td>TBD</td></tr><tr><td>5&#x2F;17</td><td>森直也</td><td>TBD</td></tr><tr><td>5&#x2F;18</td><td>佐々木駿</td><td>「ネットワーク入門にCCNA良いという話」</td></tr><tr><td>5&#x2F;19</td><td>小橋昌明</td><td>technology radarを見てみよう</td></tr><tr><td>5&#x2F;22</td><td>吉岡朋哉</td><td>TBD</td></tr><tr><td>5&#x2F;23</td><td>清水雄一郎</td><td>SwiftのCI</td></tr></tbody></table></div><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>寄稿者も今回が初だったり、記事の内容を初めて触る方もいるので、是非読んでいただき、シェアしていただけると嬉しいです！</p><ul><li><a href="/articles/20220418a/">2022年の連載記事</a></li><li><a href="/articles/20210414a/">2021年の連載記事</a></li><li><a href="/articles/20200529/">2020年の連載記事</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230417a/アイキャッチ画像.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;800&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;Photo taken by &lt;a</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="春の入門祭り" scheme="https://future-architect.github.io/tags/%E6%98%A5%E3%81%AE%E5%85%A5%E9%96%80%E7%A5%AD%E3%82%8A/"/>
    
  </entry>
  
  <entry>
    <title>Vertex AI Model MonitoringとEvidently AIで運用中のモデル・データを監視する【Output Metrics編】</title>
    <link href="https://future-architect.github.io/articles/20230414a/"/>
    <id>https://future-architect.github.io/articles/20230414a/</id>
    <published>2023-04-13T15:00:00.000Z</published>
    <updated>2023-04-14T09:29:36.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-はじめに"><a href="#1-はじめに" class="headerlink" title="1. はじめに"></a>1. はじめに</h1><p>こんにちは、フューチャーでアルバイトをしている板野です。</p><p>データ&#x2F;モデル監視ツールであるVertex AI Model MonitoringとEvidently AIを利用して両者を様々な観点で検証していきます。</p><p>本記事は、前回の記事：<a href="/articles/20230413a/">Vertex AI Model MonitoringとEvidently AIで運用中のモデル・データを監視する【Input Metrics編】</a>の続きです。</p><p>データ&#x2F;モデルの監視項目については主に<strong>Input Metrics</strong>と<strong>Output Metrics</strong>があることを前回の記事でお伝えし、Input Metricsの監視について検証しました。</p><p>今回は、Vertex AIとEvidently AIのそれぞれにおける<strong>Output Metrics</strong>の監視について検証します。</p><p>※データ&#x2F;モデル監視の基本については、以前に投稿された記事：<a href="/articles/20230412a/">MLシステムにおけるモデル・データの監視【概要編】</a>をご参照ください。</p><h1 id="2-Output-Metricsの監視項目"><a href="#2-Output-Metricsの監視項目" class="headerlink" title="2. Output Metricsの監視項目"></a>2. Output Metricsの監視項目</h1><p>Output Metricsを監視するには<strong>モデルからの出力</strong>が必要となります。</p><p>主に以下の項目を監視します。</p><ul><li>①モデル精度<ul><li>モデルの性能をダイレクトに把握できる指標<ul><li>回帰モデル：決定係数(R^2), 二乗平均平方根誤差(RMSE), 平均絶対誤差(MAE), 等</li><li>分類モデル：正解率(Accuracy), 適合率(Precision), ROC, AUC, 等</li></ul></li></ul></li><li>②特徴量寄与率<ul><li>各特徴量がどの程度モデルの予測結果に対してどの程度影響を与えているかを示す指標<ul><li>各説明変数-目的変数間の相関係数, Shapley値, 等</li></ul></li><li>特徴量寄与率が変化した場合、モデルの精度に影響を与えることがあるため、監視する</li><li>AIモデルの説明性が必要となるケースも多々ある<ul><li>例）なぜこの薬が処方されたか？等</li><li>「説明性の保証」のため、特徴量寄与率が変化していないか監視する</li></ul></li></ul></li><li>③予測結果の偏り<ul><li>予測結果の偏りが大きくなってしまうこと<ul><li>例）予測結果の分布が時間とともに大きく変化した等</li></ul></li></ul></li></ul><p>「モデル精度」については正解データが必要なため、ユースケースによっては指標が出るまでに遅れがあります。<br>例えば、人力で正解ラベルを付与しなければならない場合はその分待たなくてはなりません。</p><h1 id="3-前提条件"><a href="#3-前提条件" class="headerlink" title="3. 前提条件"></a>3. 前提条件</h1><p><a href="/articles/20230413a/">前回の記事</a>の<code>今回想定するユースケース</code>の部分と合わせてあるので、詳細は割愛しますが、以下の前提条件で検証を行います。</p><ul><li>天気や気温等の特徴からその日のシェアバイク利用数を予測する<strong>回帰モデル</strong>を構築している</li><li>Vertex AIのAutoML(表形式)で訓練している</li></ul><h1 id="4-Vertex-AIでOutput-Metricsを監視"><a href="#4-Vertex-AIでOutput-Metricsを監視" class="headerlink" title="4. Vertex AIでOutput Metricsを監視"></a>4. Vertex AIでOutput Metricsを監視</h1><p>Vertex AI自体にバージョンの概念はありませんが、2023&#x2F;3&#x2F;29時点の操作画面となります。</p><h2 id="4-1-監視できる項目"><a href="#4-1-監視できる項目" class="headerlink" title="4.1. 監視できる項目"></a>4.1. 監視できる項目</h2><p>Vertex AIでは、以下のような指標を監視することができます。</p><ul><li>①モデル精度<ul><li>MAE：平均絶対値誤差</li><li>MAPE：平均絶対パーセント誤差</li><li>RMSE：二乗平均平方根誤差</li><li>RMSLE：対数平均平方二乗誤差</li><li>R^2：決定係数（説明変数が目的変数をどれくらい説明できるかを示す値）</li></ul></li><li>②特徴量寄与率<ul><li>Shapleyのサンプリング近似値（<a href="https://cloud.google.com/ai-platform/prediction/docs/ai-explanations/overview?hl=ja#compare-methods">詳細</a>）</li></ul></li></ul><h2 id="4-2-監視設定と監視結果"><a href="#4-2-監視設定と監視結果" class="headerlink" title="4.2. 監視設定と監視結果"></a>4.2. 監視設定と監視結果</h2><h3 id="4-2-1-必要なもの"><a href="#4-2-1-必要なもの" class="headerlink" title="4.2.1. 必要なもの"></a>4.2.1. 必要なもの</h3><ul><li>[★1] 説明変数列（特徴量データの列）, 目的変数列（正解データの列）を含むデータ<ul><li>Google Cloud Strage上のCSVファイル or BigQuery上のデータ であること</li></ul></li></ul><h3 id="4-2-2-手順"><a href="#4-2-2-手順" class="headerlink" title="4.2.2. 手順"></a>4.2.2. 手順</h3><p>Moder Registryから作成したモデル・バージョンの詳細画面に行き、「評価を作成」をクリックします。</p><img src="/images/20230414a/2023-04-03-09-41-52.png" alt="" width="1200" height="464" loading="lazy"><p>設定項目がいくつか出てくるので、ターゲット列、ソース（[★1]）、バッチ予測の出力先を指定します。</p><p>説明可能性のオプションで、「モデル特徴量の重要度を有効にする」にチェックを入れたら「②特徴量寄与率」も監視できます。</p><p>今回は、以下の画像のように設定します。</p><img src="/images/20230414a/2023-04-03-09-53-15.png" alt="" width="764" height="1834" loading="lazy"><p>評価を開始すると、内部でバッチ予測ジョブが自動的に開始され、約20分ほどで評価が完了します。</p><p>評価や特徴量寄与率計算のための予測（推論）はここで動いています。</p><h3 id="4-2-3-監視結果"><a href="#4-2-3-監視結果" class="headerlink" title="4.2.3. 監視結果"></a>4.2.3. 監視結果</h3><p>評価の結果は以下のように見ることができます。特徴量の重要度もヒストグラムで確認することができます。</p><img src="/images/20230414a/2023-04-03-09-47-27.png" alt="" width="1200" height="730" loading="lazy"><h3 id="4-2-4-自動化とアラート"><a href="#4-2-4-自動化とアラート" class="headerlink" title="4.2.4. 自動化とアラート"></a>4.2.4. 自動化とアラート</h3><p>今回の記事には含まれていませんが、以上の手順を自動化する場合、<a href="https://cloud.google.com/vertex-ai/docs/tabular-data/forecasting/evaluate-model?hl=ja#api">Vertex AI API</a>を利用して自動で定期実行することができると考えられます。</p><p>Vertex AI自体に、評価結果が悪くなった際のアラート発生機能はありませんが、REST APIの結果を受け取り、前回の評価結果と比較するシステムを構築すればアラートを発生させることも可能と考えられます。</p><h2 id="4-3-コスト"><a href="#4-3-コスト" class="headerlink" title="4.3. コスト"></a>4.3. コスト</h2><ul><li>実装コスト<ul><li>評価を行うこと自体はVertex AIのコンソール画面から設定できるのでほぼ実装コストは掛かりません</li><li>自動化する場合は、Vertex AI APIを使って処理を実装する必要があります</li></ul></li><li>金銭的コスト<ul><li>評価ジョブ自体にどのくらいのノード時間を費やしているか不明ですが、少なくとも評価ジョブに含まれるバッチ予測ジョブには<a href="https://cloud.google.com/vertex-ai/pricing?hl=ja#prediction-prices">こちら</a>に示されている費用が掛かると考えられます</li><li>Vertex AI APIを動かすサーバ・関数等のコストが掛かります</li></ul></li></ul><h1 id="5-Evidently-AIでOutput-Metricsを監視"><a href="#5-Evidently-AIでOutput-Metricsを監視" class="headerlink" title="5. Evidently AIでOutput Metricsを監視"></a>5. Evidently AIでOutput Metricsを監視</h1><p>Evidently AIのバージョンは<code>0.2.6</code>を使用しています。</p><h2 id="5-1-監視できる項目"><a href="#5-1-監視できる項目" class="headerlink" title="5.1. 監視できる項目"></a>5.1. 監視できる項目</h2><p>Evidently AIでは、以下のような指標を監視することができます。</p><ul><li>①モデル精度<ul><li>ME：平均誤差</li><li>MAE：平均絶対値誤差</li><li>MAPE：平均絶対パーセント誤差</li></ul></li><li>②特徴量寄与率<ul><li>各説明変数-目的変数間の相関係数</li></ul></li><li>③予測結果の偏り<ul><li>過去の予測結果と現在の予測結果の分布の違い</li></ul></li></ul><p>また、Evidently AIでは視覚的にモデルの精度変化を把握できるようなグラフも出力することができます。</p><h2 id="5-2-監視設定と監視結果"><a href="#5-2-監視設定と監視結果" class="headerlink" title="5.2. 監視設定と監視結果"></a>5.2. 監視設定と監視結果</h2><h3 id="5-2-1-必要なもの"><a href="#5-2-1-必要なもの" class="headerlink" title="5.2.1 必要なもの"></a>5.2.1 必要なもの</h3><ul><li>[★2] 説明変数列（特徴量データの列）, 正解データ列(<code>target</code>), 予測結果データ列(<code>prediction</code>) を含むデータ<ul><li>DataFrame型として読み取れる形式</li><li>予測結果データ列はVertex AIで手動でバッチ予測を行い、その結果を新たに<code>prediction</code>列として追加する</li><li>すなわち、予測（推論）処理はこのデータを用意する段階で行う</li></ul></li></ul><p>※[★2]について「②特徴量寄与率」を算出しなくて良い場合は、以下のように、<code>target</code>列と<code>prediction</code>列があればよい</p><img src="/images/20230414a/2023-03-22-14-50-10.png" alt="" width="199" height="197" loading="lazy"><h3 id="5-2-2-手順"><a href="#5-2-2-手順" class="headerlink" title="5.2.2. 手順"></a>5.2.2. 手順</h3><p>Evidently AIのライブラリが入っている環境下で以下のコードを実行する。</p><p>備考：</p><ul><li>過去・現在の2つのデータで評価して結果をを比較したい場合は[★3]と[★4]ように別のCSVファイルを指定する</li><li>現在の1つのデータのみで評価したい場合は[★5]のメソッドで<code>reference_data = None</code>とする</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_california_housing</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> evidently <span class="keyword">import</span> ColumnMapping</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> evidently.report <span class="keyword">import</span> Report</span><br><span class="line"><span class="keyword">from</span> evidently.metrics.base_metric <span class="keyword">import</span> generate_column_metrics</span><br><span class="line"><span class="keyword">from</span> evidently.metric_preset <span class="keyword">import</span> DataDriftPreset, TargetDriftPreset</span><br><span class="line"><span class="keyword">from</span> evidently.metrics <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> evidently.test_suite <span class="keyword">import</span> TestSuite</span><br><span class="line"><span class="keyword">from</span> evidently.tests.base_test <span class="keyword">import</span> generate_column_tests</span><br><span class="line"><span class="keyword">from</span> evidently.test_preset <span class="keyword">import</span> DataStabilityTestPreset, NoTargetPerformanceTestPreset</span><br><span class="line"><span class="keyword">from</span> evidently.tests <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">df1 = pd.read_csv(<span class="string">&#x27;hour-2011-target-pred.csv&#x27;</span>) <span class="comment">#[★3]</span></span><br><span class="line">df2 = pd.read_csv(<span class="string">&#x27;hour-2012-target-pred.csv&#x27;</span>) <span class="comment">#[★4]</span></span><br><span class="line"></span><br><span class="line">report = Report(metrics=[</span><br><span class="line">    RegressionQualityMetric(),<span class="comment"># ①モデル精度（数値指標の表示）</span></span><br><span class="line">    ColumnCorrelationsMetric(column_name=<span class="string">&#x27;target&#x27;</span>), <span class="comment"># ②特徴量寄与率（相関係数の表示）</span></span><br><span class="line">    ColumnDistributionMetric(column_name=<span class="string">&quot;prediction&quot;</span>), <span class="comment"># ③予測結果の偏り（予測結果の分布表示）</span></span><br><span class="line">    RegressionPredictedVsActualScatter(), <span class="comment"># 予測結果と正解データの分布表示</span></span><br><span class="line">    RegressionErrorPlot(), <span class="comment"># 誤差の時間的推移を視覚的に表示</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">report.run(current_data=df2, reference_data=df1,column_mapping=<span class="literal">None</span>) <span class="comment">#[★5]</span></span><br><span class="line">report.show(mode=<span class="string">&#x27;inline&#x27;</span>) <span class="comment"># Notebookのセル出力で結果を表示する</span></span><br></pre></td></tr></table></figure><h3 id="5-2-3-監視結果"><a href="#5-2-3-監視結果" class="headerlink" title="5.2.3. 監視結果"></a>5.2.3. 監視結果</h3><p>「①モデル精度」として、以下のようにMAE等の基本的な数値指標を出力することができます。</p><img src="/images/20230414a/2023-03-22-14-57-34.png" alt="" width="1200" height="556" loading="lazy"><p>※以降、赤色と灰色のグラフが出てきますが、次のような区別です。</p><ul><li>current（赤色）：訓練に使ったものとは違うデータ(評価用データ)をモデルに入力した場合の予測結果</li><li>reference（灰色）：訓練に使ったデータをモデルに入力した場合の予測結果</li></ul><p>「②特徴量寄与率」として、以下のように各説明変数-目的変数(target列)間の相関係数を出力することができます。<br>説明変数-目的変数間の相関係数が大きいほど特徴量寄与率が大きいことを示します。</p><img src="/images/20230414a/2023-04-05-09-36-51.png" alt="" width="1200" height="669" loading="lazy"><p>「③予測結果の偏り」として、以下のように予測結果の分布表示をすることができます。</p><p>訓練用データに対する予測結果(reference)と評価用データに対する予測結果(current)の分布を表示したものです。</p><p>両者の分布を比較することで、予測結果の偏りを監視することができます。</p><img src="/images/20230414a/2023-04-03-14-15-06.png" alt="" width="1200" height="559" loading="lazy"><p>加えて、Evidently AIでは以下のような視覚的出力もできます。</p><p>次の画像は、予測結果と正解データの分布表示を表しています。</p><p>直線に近い見た目になるほど高精度であることを視覚的に示します。</p><img src="/images/20230414a/2023-03-22-14-58-19.png" alt="" width="1200" height="421" loading="lazy"><p>また、誤差の時間的推移を視覚的に表示することもできます。</p><img src="/images/20230414a/2023-03-22-15-03-00.png" alt="" width="1200" height="426" loading="lazy"><p>今回出力したグラフは一例ですが、Evidently AIでは他にも様々なグラフを出力することができます。<br>詳しくは<a href="https://docs.evidentlyai.com/reference/all-metrics#regression">公式ドキュメント</a>を参照してください。</p><h3 id="5-2-4-自動化とアラート"><a href="#5-2-4-自動化とアラート" class="headerlink" title="5.2.4. 自動化とアラート"></a>5.2.4. 自動化とアラート</h3><p>以上の手順を自動化するための実装コストは大きいと考えられます。<br>まず、<a href="https://cloud.google.com/vertex-ai/docs/tabular-data/classification-regression/get-batch-predictions?hl=ja#api:-csv">Vertex AI API</a>からバッチ予測をリクエストし、その結果をCSVファイル形式等で受け取ります。<br>受け取ったCSVファイルから、予測結果データ列(prediction)を取り出し、 正解データ列(target)と合わせたテーブルを作成し、Evidently AIに入力します。</p><p>アラートについて、Evidently AIのTestの結果はJSON形式で受け取れるため、<br>その結果を受け取り、前回の評価結果と比較するシステムを構築すればアラートを発生させることが可能と考えられます。<br>※Evidently AIのTestについては<a href="%E2%98%85%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%8A%E9%A1%98%E3%81%84%E3%81%97%E3%81%BE%E3%81%99">前回の記事</a>に詳細があります。</p><h2 id="5-3-コスト"><a href="#5-3-コスト" class="headerlink" title="5.3. コスト"></a>5.3. コスト</h2><ul><li>実装コスト<ul><li>ユースケースに合わせてPythonコードを実装する必要がありますが、コードは単純でドキュメントも分かりやすく、評価自体はローコードで実装可能です</li><li>自動化する場合、Vertex AI APIを駆使する必要があり、実装コストは大きいです</li></ul></li><li>金銭的コスト<ul><li>Evidently AIを動かすサーバ・関数等のコストが掛かります</li></ul></li></ul><h2 id="6-まとめ"><a href="#6-まとめ" class="headerlink" title="6. まとめ"></a>6. まとめ</h2><p>本記事ではVertex AIとEvidently AIを用いたOutput Metrics監視の検証を行いました。<br>検証の結果を以下の表にまとめます。様々な観点で両者を比較しているので、ご参考になれば幸いです。</p><div class="scroll"><table><thead><tr><th>比較の観点</th><th>Vertex AI</th><th>Evidently AI</th></tr></thead><tbody><tr><td>①モデル精度</td><td>◎（5種の評価指標）</td><td>〇（3種の評価指標）</td></tr><tr><td>②特徴量寄与率</td><td>〇（Shaplay値）</td><td>〇（相関係数）</td></tr><tr><td>③予測の偏り</td><td>機能は提供されていない</td><td>〇 （予測結果の分布を比較）</td></tr><tr><td>実装コスト</td><td>ノーコードで実装可能</td><td>ローコードで実装可能。一部手作業</td></tr><tr><td>金銭的コスト</td><td>VertexAIのバッチ予測 + 評価のコスト</td><td>VertexAIのバッチ予測のコストのみ</td></tr><tr><td>メリット</td><td>モデルと連携して特徴量寄与率を算出可能</td><td>可視化機能が充実している</td></tr><tr><td>デメリット</td><td>可視化機能が充実していない</td><td>手動でVertex AIのバッチ予測を行う必要がある</td></tr></tbody></table></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;1-はじめに&quot;&gt;&lt;a href=&quot;#1-はじめに&quot; class=&quot;headerlink&quot; title=&quot;1. はじめに&quot;&gt;&lt;/a&gt;1.</summary>
        
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="MLOps" scheme="https://future-architect.github.io/tags/MLOps/"/>
    
    <category term="Evidently AI" scheme="https://future-architect.github.io/tags/Evidently-AI/"/>
    
    <category term="Vertex AI Model Monitoring" scheme="https://future-architect.github.io/tags/Vertex-AI-Model-Monitoring/"/>
    
    <category term="AI監視" scheme="https://future-architect.github.io/tags/AI%E7%9B%A3%E8%A6%96/"/>
    
  </entry>
  
  <entry>
    <title>Vertex AI Model MonitoringとEvidently AIで運用中のモデル・データを監視する【Input Metrics編】</title>
    <link href="https://future-architect.github.io/articles/20230413a/"/>
    <id>https://future-architect.github.io/articles/20230413a/</id>
    <published>2023-04-12T15:00:00.000Z</published>
    <updated>2023-04-14T09:29:40.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-はじめに"><a href="#1-はじめに" class="headerlink" title="1. はじめに"></a>1. はじめに</h1><p>こんにちは、フューチャーでアルバイトをしている板野です。</p><p>今回は、データ&#x2F;モデル監視ツールであるVertex AI Model MonitoringとEvidently AIを利用し、両者を様々な観点で検証していきたいと思います。</p><p><strong>Vertex AIのAutoMLで作成した回帰モデルの監視を想定</strong>し、ユースケースを交えて両者をそれぞれ検証していきます。オープンデータを用いてモデルを学習させ、それに対して監視設定をして運用を試してみたので、その一連の手順と検証結果を記載します。</p><p>データ&#x2F;モデル監視の基本については、以前に投稿された記事：<a href="/articles/20230412a/">MLシステムにおけるモデル・データの監視（概要編）</a>をご参照ください。</p><h1 id="2-監視の必要性"><a href="#2-監視の必要性" class="headerlink" title="2. 監視の必要性"></a>2. 監視の必要性</h1><p>データ&#x2F;モデルを監視するモチベーションとして、例えば以下のような事項が挙げられます。</p><ul><li>刻々と変わる世界の中で、モデルが期待通りに動作し続けるようにしたい</li><li>モデルが出す結果の精度の変化にいち早く気づきたい</li><li>定期的にモデルの更新が必要だと思うがそのタイミングが分からない</li></ul><p>※モデルとは、機械学習システムにおいて、訓練データを用いて訓練したAIモデルのことを指します。</p><h1 id="3-今回想定するユースケース"><a href="#3-今回想定するユースケース" class="headerlink" title="3. 今回想定するユースケース"></a>3. 今回想定するユースケース</h1><p>上記の監視の必要性に対するソリューション例を示すため、具体的なユースケースを想定します。<br>今回は、<strong>天気や気温等の特徴からその日のシェアバイク利用数を予測する回帰モデルを構築する</strong>ことを想定します。</p><h2 id="3-1-監視の背景"><a href="#3-1-監視の背景" class="headerlink" title="3.1. 監視の背景"></a>3.1. 監視の背景</h2><p>シェアバイク屋さんは精度の高い利用数予測モデルを導入し、業務の効率化に役立てたいと考えています。</p><p>しかし、季節やトレンドの時季的な変化は必ず訪れるため、同じモデルを使い続けていると精度は低下していきます。また、機能や仕様の変更でデータの形式が変わり、モデルが役に立たなくなることもあります。</p><p>このようにモデルの精度を低下させる要因は様々あります。</p><p>そこで、モデルを監視することにより精度の低下を防ぐソリューションを考えます。</p><h2 id="3-2-監視項目"><a href="#3-2-監視項目" class="headerlink" title="3.2. 監視項目"></a>3.2. 監視項目</h2><p>では、一体何を監視すれば良いのでしょうか。</p><p>監視の対象は様々ありますが、大きく以下の2つに分かれます。</p><ul><li>Output Metrics<ul><li>出力データに関する監視</li><li>例）精度・特徴量寄与率・予測の偏り等</li></ul></li><li>Input Metrics<ul><li>入力データに関する監視</li><li>例）データドリフト・外れ値・データ数の極端な低下等</li></ul></li></ul><p>精度の低下を直接監視するにはOutput Metricsを見れば良いのですが、モデルの予測結果を評価するための正解データが必要な場合があります。実運用では正解データが手に入るまでにはラグがあるので、Output Metricsではモデルの精度低下に気づくのが遅れる恐れがあります。</p><p>一方、Input Metricsはモデルに入力されるデータに異常や傾向の変化が無いかを確認し、間接的にモデルの精度低下を監視します。この場合、モデルの出力や正解データを待たずとも精度低下の予兆に気づくことができます。</p><p>今回は<strong>Input Metrics</strong>を監視するツールを検証し、AI運用にどのように役に立つのか検証していきます。</p><p>Output Metricsについては、本記事を読んだ上で、こちらの記事：[Vertex AI Model MonitoringとEvidently AIで運用中のモデル・データを監視する【Output Metrics編】(※2023.4.13公開予定)]をご覧ください。</p><h4 id="補足：データドリフトとは？"><a href="#補足：データドリフトとは？" class="headerlink" title="補足：データドリフトとは？"></a>補足：データドリフトとは？</h4><p>データドリフトとは、主に「データの傾向が時間の経過とともに変化すること」を表します。訓練データと推論データの性質が違い、本番で良い精度が発揮できない場合や、最初は良い精度でもデータの性質変化により徐々に精度が下がっていく場合があります。</p><h1 id="4-事前準備-データ準備・モデル構築"><a href="#4-事前準備-データ準備・モデル構築" class="headerlink" title="4. 事前準備: データ準備・モデル構築"></a>4. 事前準備: データ準備・モデル構築</h1><p>監視ツールを比較検証するための事前準備として、Vertex AIのAutoMLを使用して回帰モデルを作成します。<br>※本章はAI監視とは関係ありません。既にVertex AIでモデルのエンドポイントを作成している場合はこの章を飛ばすことができます。</p><h2 id="4-1-使用するデータセット"><a href="#4-1-使用するデータセット" class="headerlink" title="4.1. 使用するデータセット"></a>4.1. 使用するデータセット</h2><p>データセットは<a href="https://archive.ics.uci.edu/ml/datasets/bike+sharing+dataset">Bike Sharing Dataset</a>を利用します。<br>このデータセットには2011年と2012年のシェアバイク利用データが入っており、以下のファイルが含まれています。</p><ul><li><code>day.csv</code>: 日ごとのシェアバイク利用者数が記録されている（全731行）</li><li><code>hour.csv</code>: 時間ごとのシェアバイク利用者数が記録されている（全17379行）</li></ul><p><code>day.csv</code>ではデータ数が少ないので、<code>hour.csv</code>を使うことにします。<br>データの内容は以下のようになっています。（最初の5行のみ表示）</p><img src="/images/20230413a/image.png" alt="" width="1200" height="107" loading="lazy"><p>主な説明変数として、気温(tmp), 湿度(hum), 風速(windspeed)等があります。目的変数はその時間のシェアバイク利用数(cnt)です。</p><p>今回は2011年分のデータのみで学習し、2012年のデータを入れたときの挙動を確かめます。</p><p>hour.csvには2011~2012年のデータがまとめて入っているので以下のように分割したcsvファイルを手作業で作成します。</p><ul><li>hour-2011.csv: 2011年の時間毎シェアバイク利用者数（全8645行）</li><li>hour-2012.csv: 2012年の時間毎シェアバイク利用者数（全8734行）</li></ul><p>更に、月毎に特徴量の分布も変わってくるため、推論に使う2012年のデータについては以下のように月毎に分けたデータも作成しておきました。</p><ul><li>hour-2012-01.csv: 2012年1月の時間毎シェアバイク利用者数（全741行）</li><li>hour-2012-02.csv: 2012年2月の時間毎シェアバイク利用者数（全692行）<br>︙</li></ul><h2 id="4-2-Vertex-AIのデータセットを作成する"><a href="#4-2-Vertex-AIのデータセットを作成する" class="headerlink" title="4.2. Vertex AIのデータセットを作成する"></a>4.2. Vertex AIのデータセットを作成する</h2><p>AutoMLで学習するためにはデータセットを作成する必要があります。<br>左メニューの「データセット」から作成できます。</p><img src="/images/20230413a/image_2.png" alt="" width="1200" height="821" loading="lazy"><p>次に、いずれかの方法でCSVファイルをアップロードします。<br>BigQueryのデータをそのままデータセットにすることもできます。</p><img src="/images/20230413a/image_3.png" alt="" width="1200" height="547" loading="lazy"><p>これでVertex AIのデータセット作成は完了です。</p><h2 id="4-3-AutoMLでモデルの学習を行う"><a href="#4-3-AutoMLでモデルの学習を行う" class="headerlink" title="4.3. AutoMLでモデルの学習を行う"></a>4.3. AutoMLでモデルの学習を行う</h2><p>作成したデータセット（2011年の時間毎シェアバイク利用者数のデータ）で学習を行います。<br>左メニューの「トレーニング」からAutoMLでの学習設定ができます。</p><img src="/images/20230413a/image_4.png" alt="" width="1200" height="690" loading="lazy"><p>モデルの名前は適宜設定し、Target columnには<code>cnt(INTEGER)</code>を選択します。<br>目的変数はシェアバイク利用数(cnt)だからです。</p><img src="/images/20230413a/image_5.png" alt="" width="1200" height="637" loading="lazy"><p>AutoMLでは学習に使う特徴量（説明変数）を選択するといった前処理のようなことができます。<br>今回入手したデータセットには必要のない特徴量もあるため、この画面で特徴量選択しておきます。</p><img src="/images/20230413a/image_6.png" alt="" width="1200" height="702" loading="lazy"><p>最後に、トレーニングに費やす予算を設定します。</p><p>Vertex AIではこの予算の単位には「トレーニング時間」というものが使われています。</p><p>1トレーニング時間当たり2000~3000円掛かります。（<a href="https://cloud.google.com/vertex-ai/pricing?_ga=2.100859905.-1083087641.1678234233&_gac=1.161532622.1678234235.CjwKCAiA3pugBhAwEiwAWFzwdV87TWSYMsS7XAUXked_GSRNHRLhPL2skos9L6jwACckfFioeizOvBoCVf0QAvD_BwE&hl=ja#automl_models">参考</a>）</p><img src="/images/20230413a/image_7.png" alt="" width="1200" height="449" loading="lazy"><p>約2時間程で学習が完了し、モデルが完成します。</p><h2 id="4-4-エンドポイントの作成"><a href="#4-4-エンドポイントの作成" class="headerlink" title="4.4. エンドポイントの作成"></a>4.4. エンドポイントの作成</h2><p>モデルは完成しましたが、そのモデルを使って予測を行う窓口（エンドポイント）を作成する必要があります。<br>左メニューの「エンドポイント」よりエンドポイントを作成することができます。</p><img src="/images/20230413a/image_8.png" alt="" width="1200" height="651" loading="lazy"><p>モデルの設定は以下の通りにします。</p><p>エンドポイントを設定すると、オンライン予測のリクエストを受け付けるので、マシンを常時起動し続けることになります（課金されます！！）。</p><p>従って、まずは最も低スペックのマシンタイプを選択することをお勧めします。</p><img src="/images/20230413a/image_9.png" alt="" width="1200" height="1475" loading="lazy"><p>モデルのモニタリングは後で設定できるので、事前準備中の今は設定しません。</p><img src="/images/20230413a/image_10.png" alt="" width="1196" height="458" loading="lazy"><p>「作成」を押すと、10分程待てばエンドポイントが作成されます。</p><p><a href="https://github.com/googleapis/python-aiplatform/blob/main/samples/snippets/prediction_service/predict_tabular_classification_sample.py">こちら</a>のPythonソースコードを参考にし、試しにエンドポイントにリクエストを投げてみます。<br>※リクエストの投げ方については割愛</p><img src="/images/20230413a/image_11.png" alt="" width="1200" height="85" loading="lazy"><p>上画像のように予測結果が辞書型（REST API経由でリクエストしたらJSON型）で返ってきます。<br>※モデルを実運用している現場ではこのような予測リクエストを大量に投げることになります。</p><p>これで事前準備は完了です。</p><h1 id="5-Vertex-AI-Model-Monitoringでの監視"><a href="#5-Vertex-AI-Model-Monitoringでの監視" class="headerlink" title="5. Vertex AI Model Monitoringでの監視"></a>5. Vertex AI Model Monitoringでの監視</h1><p><a href="https://cloud.google.com/vertex-ai/docs/model-monitoring/overview?hl=ja">Vertex AI Model Monitoring</a>は、AutoML等で訓練したモデルの監視をVertex AI内で完結できるサービスです。</p><p>コンソール画面から監視設定ができ、ノーコードで実現できることが特徴です。</p><p>Vertex AI自体にバージョンの概念はありませんが、<code>2023/3/29</code>時点の操作画面となります。</p><h2 id="5-1-監視できること"><a href="#5-1-監視できること" class="headerlink" title="5.1. 監視できること"></a>5.1. 監視できること</h2><p>Vertex AIではInput Metricsとして<strong>トレーニング &#x2F; サービング スキュー</strong>と<strong>予測ドリフト</strong>を検出することができます。</p><p>Vertex AIでは二者を以下のように定義しています。（<a href="https://cloud.google.com/vertex-ai/docs/model-monitoring/overview?hl=ja">公式サイト</a>）</p><ul><li>トレーニング &#x2F; サービング スキュー（スキュー）<ul><li>訓練データと推論データ間で特徴の分布が異なること</li><li>訓練データの特徴の分布情報が必要</li></ul></li><li>予測ドリフト（ドリフト）<ul><li>推論データの特徴の分布が時間の経過とともに変化すること</li><li>訓練データの特徴の分布情報は不要</li></ul></li></ul><p><a href="https://cloud.google.com/vertex-ai/docs/model-monitoring/overview?hl=ja#calculating-skew-and-drift">公式サイト</a>によると、分布間の距離は以下のアルゴリズムにより計算されます。</p><blockquote><p>カテゴリ特徴の場合、距離スコアはチェビシェフ距離を使用して計算されます。<br>数値特徴の場合、距離スコアはジェンセン・シャノン ダイバージェンスを使用して計算されます。</p></blockquote><h2 id="5-2-監視設定と監視結果"><a href="#5-2-監視設定と監視結果" class="headerlink" title="5.2. 監視設定と監視結果"></a>5.2. 監視設定と監視結果</h2><h3 id="5-2-1-スキューを監視する"><a href="#5-2-1-スキューを監視する" class="headerlink" title="5.2.1. スキューを監視する"></a>5.2.1. スキューを監視する</h3><p>トレーニング &#x2F; サービングスキューを監視するために、エンドポイントの設定を変更します。<br>「このエンドポイントのモデルのモニタリングを有効にする」をオンにして設定していきます。以下は設定項目です。</p><ul><li>モニタリング間隔<ul><li>モニタリングを実行する時間間隔</li><li>短いほど計算リソースを使うため、あまりデータの変化に敏感にならなくて良い場合は長めに設定</li><li>今回は検証のため、かなり短めの1時間に設定</li></ul></li><li>モニタリング データ時間<ul><li>モニタリングを実行するタイミングからどの程度リクエストを遡るか</li><li>例えば1時間に設定すると、モニタリングを実行する1時間前からのリクエストデータを収集し、特徴量分布の計算等を行い、訓練データと比較してスキューがあるか調べる。</li><li>予測リクエストの履歴は自動でBigQueryに保存されているため、このような機能が実現できているようです。</li></ul></li><li>通知メール<ul><li>スキューを検出した際にアラートを出すメールアドレスを複数指定できる</li><li>Slack等への通知はできない</li></ul></li><li>サンプリングレート<ul><li>「モニタリング データ時間」の間に溜まった予測リクエスト履歴のうち何パーセントを特徴量分布の計算に利用するか</li><li>大量の予測リクエストが来る環境下では低めに設定</li></ul></li></ul><img src="/images/20230413a/image_12.png" alt="" width="1200" height="1137" loading="lazy"><p>モニタリングの目的は「トレーニング サービングスキューの検出」を選択します。<br>トレーニング データソースにはモデルの訓練に使用したデータを選択します。<br>Cloud Strage上のCSVファイル、BigQueryテーブル、Vertex AIデータセットの中から選べます。</p><img src="/images/20230413a/image_13.png" alt="" width="1200" height="1478" loading="lazy"><p>「更新」をクリックすると、モニタリングが有効になります。</p><p>試しに、1時間ごとに2012年のひと月分のデータを予測リクエストとして投げてみました。</p><p>すると、いくつかアラートが発生したようです。</p><p>訓練データ分布との距離が大きく開いているため、アラートが発生しています。</p><img src="/images/20230413a/image_14.png" alt="" width="1200" height="388" loading="lazy"><p>特徴量のうち、temp(気温)をクリックしてみると、分布を可視化できます。</p><p>以下は2011年の1~12月の気温の分布（訓練データ）と、2012年のとあるひと月の分布（推論データ）が違っていることを表しています。</p><p>※今回はこのようにスキューが起こるように意図的にデータの与え方を工夫しています。</p><img src="/images/20230413a/image_15.png" alt="" width="1200" height="1289" loading="lazy"><p>アラートが発生すると以下のようなメールが届きます。</p><img src="/images/20230413a/image_16.png" alt="" width="1200" height="591" loading="lazy"><h3 id="5-2-2-ドリフトを監視する"><a href="#5-2-2-ドリフトを監視する" class="headerlink" title="5.2.2. ドリフトを監視する"></a>5.2.2. ドリフトを監視する</h3><p>予測ドリフトを監視するために、エンドポイントの設定を変更します。</p><p>といっても、<code>5.2. トレーニング / サービング スキューを監視する</code>で行った設定とほぼ同じです。</p><p>モニタリングの目的で「予測ドリフト検出」を選択して「更新」ボタンを押すだけです。</p><p>※比較用の訓練データを指定する必要はありません。</p><img src="/images/20230413a/image_17.png" alt="" width="1200" height="866" loading="lazy"><p>先程と同様、1時間ごとに2012年のひと月分のデータを予測リクエストとして投げてみました。</p><p>すると以下画像のようにアラートが確認できます。</p><p>1時間前にリクエストされたデータの分布との距離が大きく開いているため、アラートが発生しています。</p><img src="/images/20230413a/image_18.png" alt="" width="1200" height="391" loading="lazy"><p>スキュー検出と同様に、特徴量のうちtemp(気温)をクリックすると、分布を可視化できます。</p><p>ただし、予測ドリフト検出の場合は比較対象は訓練データではなく、以前の推論データとなります。</p><p>このため、トレーニング統計の分布は表示されていません。</p><p>右側にモニタリングが実施された時間が表示されており、クリックすることで各時間の分布を表示することができます。</p><img src="/images/20230413a/image_19.png" alt="" width="1200" height="918" loading="lazy"><h2 id="5-3-コスト"><a href="#5-3-コスト" class="headerlink" title="5.3. コスト"></a>5.3. コスト</h2><p>監視設定はVertex AIのコンソール画面から設定できるので、<strong>実装コスト</strong>はほぼ必要ないと言ってもいいでしょう。<br>また、モニタリングも自動で定期的に行ってくれるため、<strong>運用コスト</strong>も必要ありません。</p><p>ただし、Vertex AI Model Monitoringを使用するには以下の<strong>金銭的コスト</strong>が発生します。（<a href="https://cloud.google.com/vertex-ai/pricing?hl=ja#modelmonitoring">引用元</a>）<br>大規模なデータを扱う時には金銭的コストに注意が必要です。</p><blockquote><ul><li>Vertex AI Model Monitoring を使用すると、以下に対して課金されます。</li><li>BigQuery テーブルに記録されたトレーニング データと予測データを含め、分析するすべてのデータに対して <strong>1 GB あたり $3.50</strong>。</li><li>アトリビューション モニタリングが有効にされている場合、BigQuery Monitoring や Batch Explain など、Model Monitoring で使用する他の Google Cloud プロダクトに対する課金。</li></ul></blockquote><h1 id="6-Evidently-AIでの監視"><a href="#6-Evidently-AIでの監視" class="headerlink" title="6. Evidently AIでの監視"></a>6. Evidently AIでの監視</h1><p><a href="https://docs.evidentlyai.com/">Evidently AI</a>はオープンソースのPythonライブラリで、ML監視に関わるあらゆる機能を提供してくれます。<br>監視の結果はHTMLファイルやJSONファイルで確認することができます。</p><p>Input Metricsだけでなく、Output Metricsの監視まで支援してくれる機能もありますが、<br>今回はInput Metricsに限定して紹介します。</p><p>Evidently AIのバージョンは<code>0.2.6</code>を使用しています。</p><h2 id="6-1-監視できること"><a href="#6-1-監視できること" class="headerlink" title="6.1. 監視できること"></a>6.1. 監視できること</h2><p>Evidently AIでの監視はVertex AI Model Monitoringのようにノーコードで実現することはできませんが、<br>以下のような、より多くの項目を監視できます。</p><ul><li>ドリフト</li><li>スキュー</li><li>欠損値</li><li>外れ値</li><li>値が正常な範囲内か</li><li>列の不足は無いか</li><li>列(特徴量)同士の相関</li></ul><p>Evidently AIには大きく以下の2種類の機能があります。<br>両者とも監視項目としては似ていますが、その結果の扱い方に違いがあります。</p><ul><li>Report<ul><li>データの品質調査の結果を可視化することができる</li><li>データの傾向を分析したいときに活用</li><li>例）ドリフト検出にて特徴量分布を可視化して傾向を分析する</li></ul></li><li>Test<ul><li>データ品質の異常をテストすることができる</li><li>予め基準を定めておき、それを満たすか否か自動で判別したいときに活用</li><li>例）ドリフト検出にて自動で異常を検知してアラートを発する</li></ul></li></ul><h2 id="6-2-監視設定と監視結果"><a href="#6-2-監視設定と監視結果" class="headerlink" title="6.2. 監視設定と監視結果"></a>6.2. 監視設定と監視結果</h2><h3 id="6-2-1-Evidently-AIのインストール"><a href="#6-2-1-Evidently-AIのインストール" class="headerlink" title="6.2.1. Evidently AIのインストール"></a>6.2.1. Evidently AIのインストール</h3><p>まずはpipコマンドでEvidently AIをインストールします。</p><p><code>pip install evidently</code></p><p>また、Notebook上で使用する場合は次の2つのコマンドを打つとセル出力から直接結果を表示できるようになります。<br>※Notebookを使用しない場合はHTMLファイルを出力することになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jupyter nbextension install --sys-prefix --symlink --overwrite --py evidently</span><br><span class="line">jupyter nbextension <span class="built_in">enable</span> evidently --py --sys-prefix</span><br></pre></td></tr></table></figure><h3 id="6-2-2-データの準備"><a href="#6-2-2-データの準備" class="headerlink" title="6.2.2. データの準備"></a>6.2.2. データの準備</h3><p>Evidently AIを使うのに大きな準備は必要ありません。</p><p>Input Metricsの監視では2つの異なるデータセット間の分布を調べるため、2つのデータを用意するだけです。</p><p>Evidently AIはPandasのDataFrame形式でデータを渡す必要があります。したがって、DataFrameで読み取れる形式のデータならどのようなデータソースでも大丈夫です。ただし、大規模データを扱う際は処理に時間やリソースを要する可能性があります。</p><p>CSVファイルならそのまま読み取るだけ、BigQueryならAPIを使ってDataFrameとして読み込むこともできます。</p><p>ここでは、2012年1月分と2月分の時間毎シェアバイク利用者数のデータを利用しました。</p><h3 id="6-2-3-Reportを使う"><a href="#6-2-3-Reportを使う" class="headerlink" title="6.2.3. Reportを使う"></a>6.2.3. Reportを使う</h3><p><a href="https://docs.evidentlyai.com/get-started/hello-world">公式のBasic Example</a>を参考に、以下のコードを作成し、Notebook上で実行してみました。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> evidently.report <span class="keyword">import</span> Report</span><br><span class="line"><span class="keyword">from</span> evidently.metric_preset <span class="keyword">import</span> DataDriftPreset, DataQualityPreset</span><br><span class="line"></span><br><span class="line">data1 = pd.read_csv(<span class="string">&#x27;hour-2012-01.csv&#x27;</span>) <span class="comment"># 比較する1つ目のデータ</span></span><br><span class="line">data2 = pd.read_csv(<span class="string">&#x27;hour-2012-02.csv&#x27;</span>) <span class="comment"># 比較する2つ目のデータ</span></span><br><span class="line"></span><br><span class="line">report = Report(metrics=[</span><br><span class="line">    DataDriftPreset(), <span class="comment"># [★1]ここは適宜変更可能</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">report.run(current_data=data1, reference_data=data2, column_mapping=<span class="literal">None</span>)</span><br><span class="line">report.show(mode=<span class="string">&#x27;inline&#x27;</span>) <span class="comment"># Notebookのセル出力で結果を表示する</span></span><br><span class="line"><span class="comment"># report.save_html(&#x27;report.html&#x27;) # HTML形式で出力したい場合</span></span><br></pre></td></tr></table></figure><p>すると、以下のように各特徴量の分布が可視化されたものが出力されます。</p><p>一度に複数の特徴量分布の差を比較できる、分かりやすいレポートです。分布間の距離計算アルゴリズムは、データの数や種類に応じて適切なものを自動で選択しているようです。（<a href="https://docs.evidentlyai.com/reference/data-drift-algorithm">公式の解説</a>）</p><img src="/images/20230413a/image_20.png" alt="" width="1200" height="934" loading="lazy"><p>今回は、ソースコードの<code>[★1]</code>の部分に<code>DataDriftPreset()</code>を入れてレポートを出力しました。<br><code>DataDriftPreset()</code>は、データのドリフトを検出するためのプリセットであり、これをReportで出力しました。<br>Evidently AIではこのようなプリセットが複数用意されてあります。</p><p>試しに、<code>DataDriftPreset()</code>を<code>DataQualityPreset()</code>に書き換えてみると、次のようなレポートが得られます。<br>データの統計的情報が可視化されていることが分かります。</p><img src="/images/20230413a/image_21.png" alt="" width="1200" height="560" loading="lazy"><img src="/images/20230413a/image_22.png" alt="" width="1200" height="580" loading="lazy"><p>他に用意されているプリセットなど、詳しくは<a href="https://docs.evidentlyai.com/reference/all-metrics">公式ドキュメント</a>をご覧ください。</p><h3 id="6-2-4-Testを使う"><a href="#6-2-4-Testを使う" class="headerlink" title="6.2.4. Testを使う"></a>6.2.4. Testを使う</h3><p><code>6.2.3. Reportを使ってみる</code>と似ていますが、以下のコードを作成し、実行してみました。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> evidently.test_suite <span class="keyword">import</span> TestSuite</span><br><span class="line"><span class="keyword">from</span> evidently.test_preset <span class="keyword">import</span> DataStabilityTestPreset</span><br><span class="line"></span><br><span class="line">data1 = pd.read_csv(<span class="string">&#x27;hour-2012-01.csv&#x27;</span>) <span class="comment"># 比較する1つ目のデータ</span></span><br><span class="line">data2 = pd.read_csv(<span class="string">&#x27;hour-2012-02.csv&#x27;</span>) <span class="comment"># 比較する2つ目のデータ</span></span><br><span class="line"></span><br><span class="line">test = TestSuite(tests=[</span><br><span class="line">    DataStabilityTestPreset(), <span class="comment"># [★2]ここは適宜変更可能</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">test.run(current_data=data1, reference_data=data2, column_mapping=<span class="literal">None</span>)</span><br><span class="line">test.show(mode=<span class="string">&#x27;inline&#x27;</span>) <span class="comment"># Notebookのセル出力で結果を表示する</span></span><br><span class="line"><span class="comment"># test.save_html(&#x27;test.html&#x27;) # HTML形式で出力したい場合</span></span><br></pre></td></tr></table></figure><p>すると、以下のようなテスト結果が返ってきます。<br>今回は53個のテスト項目があり、そのうち42件が合格、11件が不合格だったようです。</p><img src="/images/20230413a/image_23.png" alt="" width="1200" height="946" loading="lazy"><p>Share of Out-of-Range Values（範囲外の値が含まれる割合が一定値を超えていた）という理由で不合格でした。</p><img src="/images/20230413a/image_24.png" alt="" width="1200" height="368" loading="lazy"><p>今回は<code>[★2]</code>で<code>DataStabilityTestPreset()</code>を指定しただけで、「完全お任せでテストして！」と言っているようなものなのでいくつか不合格が出てきました。もちろん、使用状況に合わせて合格と不合格の閾値などはカスタマイズできます。</p><p>また、今回はHTMLファイル（or Notebookのセル出力）でTestの結果を表示しましたが、結果をJSONファイルとして出力することもできます。</p><p>JSONファイルはソースコードで処理しやすいのでアラート通知の仕方や通知先は自由自在です。</p><p>詳しくは<a href="https://docs.evidentlyai.com/reference/all-tests">公式ドキュメント</a>をご覧ください。</p><h2 id="6-3-コスト"><a href="#6-3-コスト" class="headerlink" title="6.3. コスト"></a>6.3. コスト</h2><p>Evidently AIは、クラウドやオンプレミスの環境での自己運用型Pythonライブラリで、OSSとして提供されます。</p><p>このため、ソフトウェアを利用するライセンス料は発生しません。Evidently AIにかかる<strong>金銭的コスト</strong>は、定期的にモニタリングジョブを動かすマシンの料金です。</p><p>Evidently AIは、Vertex AI Model Monitoringのようにノーコードで実現することはできません。簡素ではありますが、Pythonコードを書く<strong>実装コスト</strong>、及び定期的にモニタリングを実行する仕組み（<strong>運用コスト</strong>）が必要です。</p><h1 id="7-まとめ"><a href="#7-まとめ" class="headerlink" title="7. まとめ"></a>7. まとめ</h1><p>本記事では、Vertex AIのAutoMLで学習したモデルを監視することを前提に、<br>AI監視ツールである、Vertex AI Model Monitoring及びEvidently AIを具体的に利用し、その使用感を検証しました。</p><p>以下に両者の特徴をまとめました。</p><div class="scroll"><table><thead><tr><th>比較ポイント</th><th>Vertex AI Model Monitoring</th><th>Evidently AI</th></tr></thead><tbody><tr><td>監視項目の範囲</td><td>スキュー&#x2F;ドリフトのみ</td><td>スキュー&#x2F;ドリフトに加え、データ品質まで</td></tr><tr><td>実装コスト</td><td>ノーコードで実現可能</td><td>Pythonコードを書く</td></tr><tr><td>運用コスト</td><td>設定するだけでほぼ掛からない</td><td>モニタリングを定期的に実行する仕組みの構築が必要</td></tr><tr><td>金銭的コスト</td><td>1 GB のデータあたり $3.50の課金</td><td>モニタリングジョブを動かすマシンの料金</td></tr><tr><td>アラートの拡張性</td><td>メール通知のみ</td><td>JSON形式を読み取って通知をカスタマイズ</td></tr><tr><td>大規模データの注意点</td><td>金銭的コストの増加</td><td>処理の遅れ・マシンのリソース不足</td></tr></tbody></table></div><p>両者とも機械学習モデルのパフォーマンスを監視するためのプラットフォームですが、Vertex AI Model MonitoringはGoogle Cloud上で提供されるマネージドサービスの一部であり、Googleが提供する機械学習インフラストラクチャの一部です。</p><p>一方、Evidently AIは、クラウドやオンプレミスの環境で自己運用型のOSSとして提供されます。</p><p>Vertex AI Model Monitoringは、ドリフト&#x2F;スキューを監視することができますが、Evidently AIは、ドリフト&#x2F;スキューだけでなく、入力データの品質等、より広範な指標を監視することができます。</p><p>Vertex AI Model Monitoringよりも幅広い項目を監視したいと思う場合、Evidently AIを検討することをおすすめします。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;1-はじめに&quot;&gt;&lt;a href=&quot;#1-はじめに&quot; class=&quot;headerlink&quot; title=&quot;1. はじめに&quot;&gt;&lt;/a&gt;1.</summary>
        
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="MLOps" scheme="https://future-architect.github.io/tags/MLOps/"/>
    
    <category term="Evidently AI" scheme="https://future-architect.github.io/tags/Evidently-AI/"/>
    
    <category term="Vertex AI Model Monitoring" scheme="https://future-architect.github.io/tags/Vertex-AI-Model-Monitoring/"/>
    
    <category term="AI監視" scheme="https://future-architect.github.io/tags/AI%E7%9B%A3%E8%A6%96/"/>
    
  </entry>
  
  <entry>
    <title>MLシステムにおけるモデル・データの監視【概要編】</title>
    <link href="https://future-architect.github.io/articles/20230412a/"/>
    <id>https://future-architect.github.io/articles/20230412a/</id>
    <published>2023-04-11T15:00:00.000Z</published>
    <updated>2023-04-13T09:11:01.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、フューチャーでアルバイトをしている平野です。</p><p>今回は「モデル・データの監視」について、なぜ監視が必要なのか、監視するべき項目は何か、監視するにはどのようなツールがあるのかについてご紹介します。</p><p>注意点として、今回のブログでのツールの紹介は、「各ツールでどのようなことができるのか」について書いているので、各ツールの使い方などは各公式サイトなどをご参照ください。</p><p>Vertex AI Model MonitoringとEvidently AIについては、<a href="/articles/20230413a/">Vertex AI Model MonitoringとEvidently AIで運用中のモデル・データを監視する【Input Metrics編】</a>で具体的な使い方まで解説しているため、ご覧いただけると幸いです。</p><h1 id="なぜ監視するのか"><a href="#なぜ監視するのか" class="headerlink" title="なぜ監視するのか"></a>なぜ監視するのか</h1><p>モデルの学習が完了し、そのモデルを本番環境にデプロイし、運用が開始されればそれでミッション完了といえるのでしょうか？答えはNOです。なぜなら、モデルが本番環境で期待通り稼働するか分からないからです。</p><p>例えば、学習データと本番データが大きく乖離している場合、モデルの予測は大きく外れてしまう可能性があります。また、現実世界は時々刻々と変化します。そのため、運用開始時には想定通りの本番データが得られていたのに、徐々に学習データと乖離していくことも考えられます。</p><p>この場合、運用開始時には期待通りに稼働していたのに、時間が経つにつれてモデルの精度が低下していくことになります。定期的にモデルを再学習させることによってこの状況を回避することもできますが、モデルの再学習には時間やコストがかかるため、再学習の回数は可能な限り少なく抑えたい所です。</p><p>そこで、<strong>本番環境でモデルが期待通りに稼働しているかを監視</strong>する必要が出てきます。本番環境での入力データやモデルのパフォーマンスを監視し、入力データが学習データと大きく乖離した場合やモデルの精度が大きく低下した場合にモデルを更新することで、モデルを常に期待通りに稼働させつつ、再学習のコストを下げることができます。</p><h1 id="監視する項目"><a href="#監視する項目" class="headerlink" title="監視する項目"></a>監視する項目</h1><p>監視すべき項目はモデルに求める精度や運用状況によって変わるとは思いますが、ここでは一般的に監視する必要があると考えられる項目を紹介します。</p><ol><li>Software Metrics<br> リソースの使用率やデータ量、データの更新頻度などです。リソースの使用率が100%に近い場合、リソースのスケールを考える必要があります。また、そもそもMLシステムが正しく稼働できているかを確認するため、システムログも監視する必要があります。<div class="scroll"><table><thead><tr><th align="left">項目</th><th align="left">説明</th></tr></thead><tbody><tr><td align="left">リソース使用率</td><td align="left">メモリ・CPU・GPUなどのハードウェアリソースの使用率</td></tr><tr><td align="left">リクエスト数</td><td align="left">予測リクエストの頻度など</td></tr><tr><td align="left">レスポンスタイム</td><td align="left">予測リクエストから予測を返すまでの時間やその平均など</td></tr><tr><td align="left">更新頻度</td><td align="left">データが定期的に入ってくるか</td></tr><tr><td align="left">データ量</td><td align="left">更新時に想定通りの量のデータが入ってきているか</td></tr></tbody></table></div></li><li>Input Metrics<br> モデルのパフォーマンスを監視するためには次に紹介するOutput metricsを監視することが重要なのですが、本番環境では入力データに対する正解データがすぐには手に入らない場合が多くあります。そこで入力データを監視することで間接的にモデル精度の低下を検出します。<div class="scroll"><table><thead><tr><th align="left">項目</th><th align="left">説明</th></tr></thead><tbody><tr><td align="left">欠損値</td><td align="left">欠損値が含まれているかや欠損値の割合など</td></tr><tr><td align="left">値が範囲内か</td><td align="left">正の値が来るべきところに負の値が来ているなど</td></tr><tr><td align="left">columnが増減していないか</td><td align="left">アップデートなどで入力形式が変わっていないかなど</td></tr><tr><td align="left">統計量が範囲内か</td><td align="left">平均、分散などの統計量が期待する範囲内に収まっているか</td></tr><tr><td align="left">ドリフト</td><td align="left">入力データの分布が時間とともに変化していないか</td></tr><tr><td align="left">スキュー</td><td align="left">学習データの分布と本番環境でのデータの分布に乖離がないか</td></tr><tr><td align="left">外れ値</td><td align="left">平均から標準偏差の3倍以上離れているなど</td></tr><tr><td align="left">列同士の相関</td><td align="left">学習データでの相関と本番環境のデータでの相関に違いがみられないかなど</td></tr></tbody></table></div></li><li>Output Metrics<br> 正解データが手に入る場合にはモデルの予測の正解率を監視することで、精度の低下を検出できます。また、入力と出力の関係（特徴量寄与率）や予測の偏りなども監視することで、より正確にモデルの再学習のタイミングを計ることができます。<div class="scroll"><table><thead><tr><th align="left">項目</th><th align="left">説明</th></tr></thead><tbody><tr><td align="left">モデル精度</td><td align="left">Accuracy、Precision、ROC AUCなど</td></tr><tr><td align="left">予測の偏り</td><td align="left">歪度、尖度など。学習時と本番環境時で予測の分布に変化がある場合には、学習データセットが本番環境でのデータをうまく再現できていない可能性がある。</td></tr><tr><td align="left">特徴量寄与率</td><td align="left">入出力の相関やShapleyなど。特徴量寄与率が時間経過とともに変化している場合には、精度が低下している可能性がある。</td></tr><tr><td align="left">ビジネス指標</td><td align="left">CTRやCVRなど</td></tr></tbody></table></div></li></ol><h1 id="ツールの紹介"><a href="#ツールの紹介" class="headerlink" title="ツールの紹介"></a>ツールの紹介</h1><h2 id="Great-Expectations"><a href="#Great-Expectations" class="headerlink" title="Great Expectations"></a>Great Expectations</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>Great Expectationsは、ユーザー独自のデータ品質テストの作成、テストの実行、テスト結果の可視化を可能とするOSS Pythonライブラリです。<strong>用意されているテストが豊富でデータの品質チェックに特化している</strong>ことが特徴です（<a href="https://greatexpectations.io/expectations/">用意されているテスト一覧</a>）。</p><h3 id="監視できる項目例"><a href="#監視できる項目例" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Input Metrics<br>  欠損値、各値が範囲内か、columnの増減、統計値が範囲内か、データドリフト&#x2F;スキュー、外れ値など</li></ul><h3 id="詳細"><a href="#詳細" class="headerlink" title="詳細"></a>詳細</h3><p>データの品質テスト（テストのことをexpectation）、エラーの文章化（html形式でどのテストをパスし、どのテストでエラーを起こしたかが見れる）、プロファイリング（統計量の計算）が可能となっています。</p><p><img src="https://docs.greatexpectations.io/assets/images/datadocs-8d8bc71d8aec770a38656ce60cc1e073.png" alt="Great Expectations"></p><p>※<a href="https://docs.greatexpectations.io/docs/">Great Expectations 公式Docs</a>より画像引用</p><p>懸念点としては、モデル精度の監視や特徴量寄与率などのOutput Metricsについては監視ができないと思われます。また、テストの定期的な実行やリアルタイム監視などもGreat Expectations単体では難しいと思われます。</p><h2 id="whylogs"><a href="#whylogs" class="headerlink" title="whylogs"></a>whylogs</h2><h3 id="概要-1"><a href="#概要-1" class="headerlink" title="概要"></a>概要</h3><p>whylogsは、データベースに保存されているデータに対してスキーマチェック、ドリフト&#x2F;スキュー検出、解析を可能とするOSS Pythonライブラリです。<strong>テーブルデータやテキストデータ以外に画像や埋め込み表現も扱うことができる</strong>のが特徴です。</p><h3 id="監視できる項目例-1"><a href="#監視できる項目例-1" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Input Metrics<br>  欠損値、各値が範囲内か、統計値が範囲内か、データドリフト&#x2F;スキューなど</li></ul><h3 id="詳細-1"><a href="#詳細-1" class="headerlink" title="詳細"></a>詳細</h3><p>データの統計値の計算、条件を満たしているかのテスト、分布の可視化、別データセットとの比較が可能です。profileと呼ばれる統計値のセット（カスタマイズ可能）を作成し、それをもとに可視化や条件を満たすかのテストを行うという流れになります。また、有償のWhyLabsと組み合わせれば、データの自動監視も可能となります。</p><p><img src="https://github.com/whylabs/whylogs/blob/assets/images/NotebookProfileVisualizer.gif?raw=true" alt="WhyLogs"></p><p>※<a href="https://github.com/whylabs/whylogs">whylogs GitHub</a>より画像引用</p><p>懸念点としては、WhyLabsを用いない場合には、Notebookを使うことでしか可視化ができないと思われます。また、profileを保存することができるのですが、現状ではローカル、AWS S3、WhyLabsへ保存する機能しか提供されていない点も懸念点となり得そうです。</p><h2 id="Alibi-Detect"><a href="#Alibi-Detect" class="headerlink" title="Alibi Detect"></a>Alibi Detect</h2><h3 id="概要-2"><a href="#概要-2" class="headerlink" title="概要"></a>概要</h3><p>Alibi Detectは、モデルの学習に用いたデータセットや本番データをDetectorに学習させ、Detectorに外れ値、Adversarial Example、ドリフト検出をさせるOSS Pythonライブラリです。<strong>用意されているアルゴリズムが多く、複数のアルゴリズムを併用して検出精度を上げたい場合</strong>などに有用です。また、機械学習モデルを用いて監視するため、単純な統計量からは検出できないような異常を検出したい場合などにも使えそうです。</p><h3 id="監視できる項目例-2"><a href="#監視できる項目例-2" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Input Metrics<br>  データドリフト&#x2F;スキュー、外れ値など</li></ul><h3 id="詳細-2"><a href="#詳細-2" class="headerlink" title="詳細"></a>詳細</h3><p>バックエンドにPyTorch、TensorFlowが使われており、機械学習のモデルを使って外れ値、Adversarial Example、データドリフトを検出できます。また、公式のドキュメントにサンプルが豊富に用意されているため、使いやすさは高そうです。</p><p>一方で、機械学習モデルを使った検出方法となるため、検出精度と速度のトレードオフや、学習に用いるデータセットの質によって精度が変化することが考えられます。また、Pythonライブラリであるため、他に紹介しているツールのような、GUIやコマンドですぐに監視を始めるといったことはできず、しっかりとコードを書く必要があります（<a href="https://github.com/SeldonIO/alibi-detect/blob/40f4121ce6df2e11451036f1edc2976c63fed1fe/doc/source/examples/od_ae_cifar10.ipynb">コード例</a>）。またPythonを実行して初めて検出結果が得られるため、定期実行やリアルタイム監視といったことはAlibi Detect単体では難しく、これらを行いたい場合には別のツールと併用する必要があると思われます。</p><h2 id="Monte-Carlo"><a href="#Monte-Carlo" class="headerlink" title="Monte Carlo"></a>Monte Carlo</h2><h3 id="概要-3"><a href="#概要-3" class="headerlink" title="概要"></a>概要</h3><p>Monte Carloは、データベースに接続することで、自動でデータベースの異常検知、通知を行い、また原因解明のためのツールを提供するプラットフォームです。<strong>機械学習を利用してデータを解析してくれるので、ユーザー側で詳細な設定やコーディングをせずとも、データの監視が可能です。</strong></p><h3 id="監視できる項目例-3"><a href="#監視できる項目例-3" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Software Metrics<br>  データ量、更新頻度など</li><li>Input Metrics<br>  欠損値、columnの増減、データドリフト&#x2F;スキュー、外れ値など</li></ul><h3 id="詳細-3"><a href="#詳細-3" class="headerlink" title="詳細"></a>詳細</h3><p>利用を開始した時点で、データの更新頻度、データ量（どの程度追加&#x2F;削除&#x2F;更新されたか）、スキーマが自動でチェックされます。そのほか、<a href="https://docs.getmontecarlo.com/docs/field-health-metrics#field-health-monitor-metrics">こちら</a>に記載されている項目の監視も追加で行うことができます。また、ユーザーが独自の設定を行うことも可能で、SQLでルールを設定することで特定の条件でのデータを監視したり、APIやSDKで監視を設定したりできます。</p><p><img src="https://files.readme.io/bea0e38-Screen_Shot_2021-07-22_at_9.53.02_PM.png" alt="Monte Carlo"></p><p>※<a href="https://docs.getmontecarlo.com/docs/quick-start-guide">Monte Carlo 公式Docs</a>より画像引用</p><p>懸念点としては、Great Expectationsと同様にOutput Metricsについては監視できないと思われます。Intput Metricsについての監視で十分な場合にMonte Carloは使えるかと思います。</p><h2 id="Evidently-AI"><a href="#Evidently-AI" class="headerlink" title="Evidently AI"></a>Evidently AI</h2><h3 id="概要-4"><a href="#概要-4" class="headerlink" title="概要"></a>概要</h3><p>Evidently AIは50以上の用意されたテスト（スキーマチェックからドリフト&#x2F;スキュー検出まで）からテストセットを作成、作成したテストセットでデータを検証、検証結果の可視化、本番環境のモデルのリアルタイム監視を可能とするOSS Pythonライブラリです。<strong>OSSでありながら、データの品質チェック、ドリフト&#x2F;スキュー検出、可視化、リアルタイム監視が可能となっています。</strong></p><p><img src="https://2040421098-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FeE67gM4508ESQxkbpOxj%2Fuploads%2Fgit-blob-a8ab3ebb39a6dc1e624db45cde83454ab00bd79d%2Fevidently_reports_main-min.png?alt=media" alt="Evidently AI"></p><p>※<a href="https://docs.evidentlyai.com/">Evidently AI 公式Docs</a>より画像引用</p><h3 id="監視できる項目例-4"><a href="#監視できる項目例-4" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Input Metrics<br>  欠損値、各値が範囲内か、columnの増減、統計値が範囲内か、データドリフト&#x2F;スキュー、相関係数など</li><li>Output Metrics<br>  モデル精度、特徴量寄与率など</li></ul><h3 id="詳細-4"><a href="#詳細-4" class="headerlink" title="詳細"></a>詳細</h3><p>TestとReportの2つがあり、Testでは条件を設定することでデータがその条件を満たしているかのチェックができます。Testは50以上のものが用意されており、それらを組み合わせたり、プリセットを利用することができます。notebookで実行することでテスト結果を可視化することができます。</p><p>Reportではデータの統計値や分布、ドリフト、モデルのパフォーマンスを可視化することができます。結果はHTML形式、json形式、Pythonの辞書型で出力可能で、HTML形式の場合、ダッシュボード上からGUIでいろいろと操作することが可能です。また、Grafana dashboardを使って本番環境で稼働しているモデルを監視することもできます。</p><p>ただし、HTML形式の場合、インタラクティブな処理に対応するために、全データを取り込んでおく必要があり、大規模なデータセットの場合、ロードに時間がかかってしまうようです。</p><blockquote><p>HTML reports may take time to load. This is because they store some of the data inside the HTML to generate the interactive plots. The exact limitation depends on your infrastructure (e.g., memory).</p></blockquote><h2 id="Citadel-AI"><a href="#Citadel-AI" class="headerlink" title="Citadel AI"></a>Citadel AI</h2><h3 id="概要-5"><a href="#概要-5" class="headerlink" title="概要"></a>概要</h3><p>Citadel AIは、モデル開発のサポート（モデルの診断レポート、検証、弱点の原因解明と改善）を行うCitadel Lensと、本番環境での監視（モニタリング、異常入力のフィルタリング、モデルの判断根拠の可視化）を行ってくれるCitadel Radarの2つの機能を提供しています。<br><strong>モデル開発から本番環境までを1つのサービスでカバーすることができます。</strong></p><h3 id="監視できる項目例-5"><a href="#監視できる項目例-5" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Input Metrics<br>  欠損値、データドリフト&#x2F;スキュー、外れ値など</li><li>Output Metrics<br>  特徴量寄与率など</li></ul><h3 id="詳細-5"><a href="#詳細-5" class="headerlink" title="詳細"></a>詳細</h3><ol><li>Citadel Lens<br> モデル開発時やPoCにおいて、モデルのテストを行い、モデルの即時診断レポートを生成してくれます。数値データを扱うモデルや画像を扱うモデルなど様々なモデルに適用することができ、バージョンの異なるモデルの性能比較や原因分析が可能です。</li></ol><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2842903/36e437bf-2742-4ea0-41cc-d4fa1fc37635.gif" alt="citadel_lens.gif"></p><p>※<a href="https://www.citadel.co.jp/">Citadel AIの公式ページ</a>より動画引用</p><ol start="2"><li>Citadel Radar<br> 本番環境のデータを常時モニタリングすることで、データドリフトやスキューをリアルタイムに検知してくれます。また、入出力データをテストし、不正データや異常値、Adversarial Attackなどをブロックしたり、タグ付けしたりなども可能です。特徴量寄与率や反実仮想分析などでモデルの判断根拠の可視化も可能となっています。</li></ol><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2842903/2542cc65-03a3-d60f-9462-936cf7be4039.gif" alt="citadel_radar.gif"></p><p>※<a href="https://www.citadel.co.jp/">Citadel AIの公式ページ</a>より動画引用</p><p>懸念点としては、製品であるため、検証するためにはフォームの登録かEmailでの連絡が必要そうな点です。</p><h2 id="TensorFlow-Data-Validation"><a href="#TensorFlow-Data-Validation" class="headerlink" title="TensorFlow Data Validation"></a>TensorFlow Data Validation</h2><h3 id="概要-6"><a href="#概要-6" class="headerlink" title="概要"></a>概要</h3><p>Tensorflow Data Validationは学習データ&#x2F;本番データの統計量計算、スキーマチェック、ドリフト&#x2F;スキューの検知を可能とするOSS Pythonライブラリです。内部でApache Beamが使われているため、<strong>データ量に応じてスケーリングが可能で、大量のデータに対して監視したい場合や監視したいデータの量が変化する可能性がある場合に使えそうです。</strong></p><img src="/images/20230412a/Tensorflow_Data_Validation.png" alt="Tensorflow_Data_Validation" width="1124" height="531" loading="lazy"><blockquote><p><a href="https://www.tensorflow.org/tfx/data_validation/get_started">Tensorflowデータ検証を開始する</a>より画像引用</p></blockquote><h3 id="監視できる項目例-6"><a href="#監視できる項目例-6" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Input Metrics<br>  欠損値、各値が範囲内か、columnの増減、統計値が範囲内か、データドリフト&#x2F;スキュー、外れ値など</li><li>Output Metrics<br>  モデル精度など</li></ul><h3 id="詳細-6"><a href="#詳細-6" class="headerlink" title="詳細"></a>詳細</h3><p>統計量の計算、データのスキーマチェック、ドリフト・スキュー検出、可視化&#x2F;比較などが可能です。<br>学習データをもとに統計量のベースライン、各特徴量の型（スキーマ）を推論してくれ、本番データをそれらと比較することでドリフト・スキュー検出、型チェックを行います。スキーマは学習データから自動で作成されますが、変更することも可能です。また、MLパイプラインの中にTensorFlow Data Validationの機能を組み込むことが可能で、例えば、データ生成パイプラインの最後に統計計算を付け加えることなどができます。</p><p>懸念点としては、利用のためにはApache BeamとApache Arrowが必要で、スケーリングの利点を活かそうと思うと、少々コーディングが必要となってしまう点がありそうです。<a href="https://www.tensorflow.org/tfx/data_validation/get_started?hl=ja#running_on_google_cloud">こちら</a>はTensorFlow Data ValidationをGCPで利用する場合の例ですが、GUIからスケーリングの設定や監視項目の変更などはできず、コードを変更する必要がありそうです。</p><h2 id="Vertex-AI-Model-Monitoring"><a href="#Vertex-AI-Model-Monitoring" class="headerlink" title="Vertex AI Model Monitoring"></a>Vertex AI Model Monitoring</h2><h3 id="概要-7"><a href="#概要-7" class="headerlink" title="概要"></a>概要</h3><p>Vertex AI Model MonitoringはGCPのサービスであるVertex AIの機能の1つで、コードを書くことなく、モデルの予測入力データをモニタリングし、特徴量のスキューとドリフトをモニタリングするための機能です。<strong>GCPでMLシステムを運用している場合に、最も手軽に導入できる監視システムです。</strong></p><p><img src="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/show_distro_skews.gif" alt="Vertex AI Model Monitoring demo"></p><p>※<a href="https://cloud.google.com/blog/topics/developers-practitioners/monitor-models-training-serving-skew-vertex-ai?hl=en">Google Could Blog: Monitor models for training-serving skew with Vertex AI</a>より画像引用</p><h3 id="監視できる項目例-7"><a href="#監視できる項目例-7" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Input Metrics<br>  データドリフト&#x2F;スキューなど</li><li>Output Metrics<br>  モデル精度、特徴量寄与率など</li></ul><h3 id="詳細-7"><a href="#詳細-7" class="headerlink" title="詳細"></a>詳細</h3><p>本番環境の入力データをサンプリングしてベースライン（トレーニングデータや直近の本番環境入力データ）と比較し、閾値を超えるとスキューやドリフトとみなします。</p><p>また、Vertex AIの別の機能であるVertex Explainable AIと組み合わせることで特徴アトリビューション（上でいう特徴量寄与率）を監視することができます。</p><p><img src="https://cloud.google.com/static/vertex-ai/docs/explainable-ai/images/expl_bike.png?hl=ja" alt="Vertex Explainable AI"></p><p>※<a href="https://cloud.google.com/vertex-ai/docs/explainable-ai/overview?hl=ja">Vertex Explainable AI の概要</a>より画像引用</p><p>また、Model Registoryの機能では、MAE, MAPE, RMSEなどといったモデル精度を監視できます。</p><p>一方で、モニタリングのカスタマイズ性（例えば、ドリフト検出のアルゴリズムを変えるなど）は低く、現状では検出の閾値を変える程度しかできなさそうです。通知の機能も現状ではメール通知、Cloud Loggingのアラートだけのようで、単独ではSlackへの通知などは難しそうです。</p><p>しかし、<a href="https://cloud.google.com/blog/topics/developers-practitioners/monitor-models-training-serving-skew-vertex-ai?hl=en">Google Cloud Blog</a>に以下のような記述があったため、今後はメール通知やCloud Loggingのアラート以外の通知やドリフト&#x2F;スキュー検出をトリガーにモデルの再学習を自動でスタートさせることも可能になるかもしれません。</p><blockquote><p>When skew is detected for a feature, an alert is sent via email. (More ways of receiving alerts will be added in the near future, including mechanisms to trigger a model retraining pipeline).</p></blockquote><h2 id="Amazon-SageMaker"><a href="#Amazon-SageMaker" class="headerlink" title="Amazon SageMaker"></a>Amazon SageMaker</h2><h3 id="概要-8"><a href="#概要-8" class="headerlink" title="概要"></a>概要</h3><p>Amazon SageMakerはAWSのサービスで、MLシステムの監視の機能として以下の2つを提供しています。<strong>AWSでMLシステムを運用している場合に、最も手軽に導入できる監視システムです。</strong></p><h3 id="監視できる項目例-8"><a href="#監視できる項目例-8" class="headerlink" title="監視できる項目例"></a>監視できる項目例</h3><ul><li>Input Metrics<br>  欠損値、各値が範囲内か、データドリフト&#x2F;スキューなど</li><li>Output Metrics<br>  特徴量寄与率、予測の偏りなど</li></ul><h3 id="詳細-8"><a href="#詳細-8" class="headerlink" title="詳細"></a>詳細</h3><ol><li>SageMaker Model Monitor<br>  コードを書くことなく、予測入力データの品質チェック、入力データおよびモデル出力の分析、ドリフト&#x2F;スキューの検出が可能となっています。監視のタイミングはスケジュールすることができ、定期的に監視ジョブを走らせることができます。異常を検知すれば通知、モデルの再トレーニングやデータの監査などの修正アクションを実行できます。各データはAmazon SageMaker Studioで可視化することができますし、そのほか、Tensorboard、Amazon QuickSight、Tableau などの他の可視化ツールも使うことができます。 <img src="/images/20230412a/Amazon_SageMaker_Model_Monitor.png" alt="Amazon_SageMaker_Model_Monitor" width="910" height="597" loading="lazy"> ※<a href="https://aws.amazon.com/jp/sagemaker/model-monitor/">Amazon SageMaker Model Monitor</a> より画像引用</li><li>SageMaker Clarify<br>  データのバイアス（特定の年齢層のデータが少ないなど）やモデルのバイアス（あるグループに対して他のグループよりも否定的な結果を出すことが多いなど）の特定・確認や特徴量寄与率のリアルタイムな監視などが可能となっています。こちらもAmazon SageMaker Studioと組み合わせることで各データを見やすい形でまとめることができます。 <img src="/images/20230412a/Amazon_SageMaker_Clarify.png" alt="Amazon_SageMaker_Clarify" width="1200" height="706" loading="lazy"> ※<a href="https://aws.amazon.com/jp/sagemaker/clarify/?sagemaker-data-wrangler-whats-new.sort-by=item.additionalFields.postDateTime&sagemaker-data-wrangler-whats-new.sort-order=desc">Amazon SageMaker Clarify</a> より画像引用</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><div class="scroll"><table><thead><tr><th>ツール名</th><th>リンク集</th></tr></thead><tbody><tr><td>Great Expectations</td><td><a href="https://greatexpectations.io/">公式サイト</a>・<a href="https://docs.greatexpectations.io/docs/">Docs</a>・<a href="https://github.com/great-expectations/great_expectations">GitHub</a></td></tr><tr><td>whylogs</td><td><a href="https://whylabs.ai/whylogs">公式サイト</a>・<a href="https://whylogs.readthedocs.io/en/latest/">Docs</a>・<a href="https://github.com/whylabs/whylogs">GitHub</a></td></tr><tr><td>Alibi Detect</td><td><a href="https://docs.seldon.io/projects/alibi-detect/en/stable/">Docs</a>・<a href="https://github.com/SeldonIO/alibi-detect">GitHub</a></td></tr><tr><td>Monte Carlo</td><td><a href="https://www.montecarlodata.com/">公式サイト</a>・<a href="https://docs.getmontecarlo.com/docs">Docs</a></td></tr><tr><td>Evidently AI</td><td><a href="https://www.evidentlyai.com/">公式サイト</a>・<a href="https://docs.evidentlyai.com/">Docs</a>・<a href="https://github.com/evidentlyai/evidently">GitHub</a></td></tr><tr><td>Citadel AI</td><td><a href="https://www.citadel.co.jp/">公式サイト</a></td></tr><tr><td>TensorFlow Data Validation</td><td><a href="https://www.tensorflow.org/tfx/guide/tfdv?hl=ja">Docs</a>・<a href="https://github.com/tensorflow/data-validation">GitHub</a></td></tr><tr><td>Vertex AI Model Monitoring</td><td><a href="https://cloud.google.com/vertex-ai/docs/model-monitoring?hl=ja">Docs</a></td></tr><tr><td>Amazon SageMaker</td><td><a href="https://aws.amazon.com/jp/sagemaker/">公式サイト</a></td></tr></tbody></table></div><h1 id="各課題に対するおすすめツール"><a href="#各課題に対するおすすめツール" class="headerlink" title="各課題に対するおすすめツール"></a>各課題に対するおすすめツール</h1><p>ここでは、いくつかの例を想定して、その場合におけるツールの組わせの例を紹介します。</p><h2 id="まずクイックに監視を開始したい場合"><a href="#まずクイックに監視を開始したい場合" class="headerlink" title="まずクイックに監視を開始したい場合"></a>まずクイックに監視を開始したい場合</h2><p>GCPやAWSのクラウドサービスを用いてMLシステムを運用している場合には、まずは各クラウドサービスに用意されている監視サービス（Vertex AI Model MonitoringやAmazon SageMakerなど）を利用するのが簡単です。この場合にはGUIから利用を開始することができるため、コーディングの必要もなく、素早く監視を開始できます。その上で足りない部分を他のツールで補っていく形が良いかと思います。</p><p>例えば、GCPでMLシステムを運用している場合にInput Metricsを監視したいとなれば、Great ExpectationsやMonte Carloなどを追加で使うことでInput Metricsについても監視できるようになります。</p><p>OSSのツールのみで監視を済ませたい場合には、Evidently AIが良いかと思います。Evidently AI単体で、Input Metrics、Output Metricsの監視が可能で、プリセットも用意されているため、監視を容易に開始することができます。可視化やリアルタイム監視にも対応しているため、監視の結果も簡単に把握することができます。</p><h2 id="監視の設定を細かく指定・作り込みたい場合"><a href="#監視の設定を細かく指定・作り込みたい場合" class="headerlink" title="監視の設定を細かく指定・作り込みたい場合"></a>監視の設定を細かく指定・作り込みたい場合</h2><p>Great Expectations、whylogs、Evidently AI、TensorFlow Data Validationなどが良いかと思います。</p><p>Input Metricsのみの監視で十分な場合には、Great Expectationsやwhylogsがおすすめです。どちらもテストが豊富に用意されており、また、独自のテストを作成することも可能なため、カスタマイズ性は高いかと思います。</p><p>Apache Beam等でパイプラインを組んでいる場合には、TensorFlow Data Validationが良いかと思います。TensorFlow Data Validationはパイプラインの中に組み込むことができるため、パイプラインの中間データの監視や監視結果に応じてパイプライン処理を分岐させるといった使い方が考えられます。</p><p>Evidently AIは上の「手っ取り早く監視を開始したい場合」でもおすすめしましたが、独自のテストやメトリクスの作成や、ドリフト検知の手法をカスタマイズすることなども可能なため、監視設定を細かく設定したい場合にも十分用いることができます。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回は、モデル・データ監視について、監視の必要性、監視項目、ツールの紹介をしました。<br>各ツールの使い方については説明できていませんが、Vertex AI Model MonitoringおよびEvidently AIは、<a href="/articles/20230413a/">Vertex AI Model MonitoringとEvidently AIで運用中のモデル・データを監視する【Input Metrics編】</a>で解説されています。</p><p>ご参考になれば幸いです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="MLOps" scheme="https://future-architect.github.io/tags/MLOps/"/>
    
    <category term="Great Expectations" scheme="https://future-architect.github.io/tags/Great-Expectations/"/>
    
    <category term="whylogs" scheme="https://future-architect.github.io/tags/whylogs/"/>
    
    <category term="Alibi Detect" scheme="https://future-architect.github.io/tags/Alibi-Detect/"/>
    
    <category term="Monte Carlo" scheme="https://future-architect.github.io/tags/Monte-Carlo/"/>
    
    <category term="Evidently AI" scheme="https://future-architect.github.io/tags/Evidently-AI/"/>
    
    <category term="Citadel AI" scheme="https://future-architect.github.io/tags/Citadel-AI/"/>
    
    <category term="TensorFlow Data Validation" scheme="https://future-architect.github.io/tags/TensorFlow-Data-Validation/"/>
    
    <category term="Vertex AI Model Monitoring" scheme="https://future-architect.github.io/tags/Vertex-AI-Model-Monitoring/"/>
    
    <category term="Amazon SageMaker" scheme="https://future-architect.github.io/tags/Amazon-SageMaker/"/>
    
    <category term="AI監視" scheme="https://future-architect.github.io/tags/AI%E7%9B%A3%E8%A6%96/"/>
    
  </entry>
  
  <entry>
    <title>RDS Proxy環境下でpg_hint_planを導入する際の注意点</title>
    <link href="https://future-architect.github.io/articles/20230411a/"/>
    <id>https://future-architect.github.io/articles/20230411a/</id>
    <published>2023-04-10T15:00:00.000Z</published>
    <updated>2023-04-11T02:28:36.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Technogoly Innovation Group 辻です。</p><p>PostgreSQL を使用する際、最適な実行計画が選択されず、クエリの速度が遅くなることがあります。オプティマイザが最適な実行計画を選択できない理由はいくつかありますが、たとえばバッチ処理で大量のデータを投入した直後、統計情報と実データの乖離により、少ないデータに適した計画が大量のデータでは不適切になることがあります。このような場合、PostgreSQL の拡張モジュールである <a href="https://pghintplan.osdn.jp/pg_hint_plan-ja.html"><code>pg_hint_plan</code></a> を用いた SQL ヒントや <a href="https://pgdbmsstats.osdn.jp/pg_dbms_stats-ja.html"><code>pg_dbms_stats</code></a> により実行計画を固定することで、チューニングが可能です。</p><p>私たちのユースケースでは <code>pg_hint_plan</code> を使った SQL ヒントによりクエリをチューニングしましたが、 Aurora PostgreSQL と RDS Proxy を使っている環境下で <code>pg_hint_plan</code> を導入する際にいくつかの問題が発生しました。本記事では <a href="https://aws.amazon.com/jp/rds/aurora/">Amazon Aurora for PostgreSQL</a> と <a href="https://aws.amazon.com/jp/rds/proxy/">Amazon RDS Proxy</a> 環境下で <code>pg_hint_plan</code> を導入した際の問題点、原因とその解決方法について紹介します。</p><p>以下に説明する環境の概要を示します。PostgreSQL のバージョンは 13.7 、<code>pg_hint_plan</code> のバージョンは 1.3.7 です。なお、Aurora インスタンス上に構築したデータベースは <code>sampledb</code> としています。</p><img src="/images/20230411a/image.png" alt="image.png" width="600" height="208" loading="lazy"><h2 id="pg-hint-plan-の導入方法"><a href="#pg-hint-plan-の導入方法" class="headerlink" title="pg_hint_plan の導入方法"></a><code>pg_hint_plan</code> の導入方法</h2><p>導入方法は<a href="https://pghintplan.osdn.jp/pg_hint_plan-ja.html#install">pg_hint_plan 日本語マニュアルのインストール</a>に記載がある手順が基本ですが、Aurora PostgreSQL 環境ではいくつか手順が異なります。以下の手順で <code>pg_hint_plan</code> を利用できるようにしました。</p><p>1.マスターユーザーで <code>sampledb</code> データベースにログインし、<code>pg_hint_plan</code> の拡張を有効にする</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql <span class="operator">-</span>h $&#123;接続先インスタンス名&#125; <span class="operator">-</span>U $&#123;マスターユーザー名&#125; <span class="operator">-</span>d sampledb <span class="operator">-</span>c &quot;CREATE EXTENSION pg_hint_plan;&quot;</span><br></pre></td></tr></table></figure><p>2.DBインスタンスのパラメータグループで以下のパラメータを設定する</p><div class="scroll"><table><thead><tr><th>パラメータ</th><th>設定値</th></tr></thead><tbody><tr><td>pg_hint_plan.enable_hint</td><td>1</td></tr><tr><td>pg_hint_plan.enable_hint_table</td><td>1</td></tr><tr><td>pg_hint_plan.parse_messages</td><td>info</td></tr><tr><td>pg_hint_plan.message_level</td><td>info</td></tr><tr><td>pg_hint_plan.debug_print</td><td>on</td></tr><tr><td>shared_preload_libraries</td><td>pg_stat_statements<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>,pg_hint_plan</td></tr></tbody></table></div><p>なお shared_preload_libraries の設定値の反映はDBインスタンスの再起動が必要です。その他のパラメータは起動したまま順次反映されます。</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><h3 id="発生した事象"><a href="#発生した事象" class="headerlink" title="発生した事象"></a>発生した事象</h3><p><code>pg_hint_plan.enable_hint</code> などのパラメータを <code>1</code> にして有効にした直後から、データベースに接続できなくなる事象が発生しました。リソースモニター上からは接続数が突如10000を超えていました。</p><img src="/images/20230411a/image_2.png" alt="image.png" width="706" height="280" loading="lazy"><p>また、PostgreSQL のサーバーログを確認すると、以下のようなログが大量に出力されていました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2023-03-15 09:01:27 UTC:10.182.44.174(15965):rdsproxyadmin@postgres:[1095]:ERROR:  relation &quot;hint_plan.hints&quot; does not exist at character 21</span><br><span class="line">2023-03-15 09:01:27 UTC:10.182.44.174(15965):rdsproxyadmin@postgres:[1095]:QUERY:  SELECT hints   FROM hint_plan.hints  WHERE norm_query_string = $1    AND ( application_name = $2     OR application_name = &#x27;&#x27; )  ORDER BY application_name DESC</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">2023-03-15 09:17:28 UTC:10.182.46.151(47361):rdsproxyadmin@postgres:[16740]:ERROR:  relation &quot;hint_plan.hints&quot; does not exist at character 21</span><br><span class="line">2023-03-15 09:17:28 UTC:10.182.46.151(47361):rdsproxyadmin@postgres:[16740]:QUERY:  SELECT hints   FROM hint_plan.hints  WHERE norm_query_string = $1    AND ( application_name = $2     OR application_name = &#x27;&#x27; )  ORDER BY application_name DESC</span><br></pre></td></tr></table></figure><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>社内の有識者から、<strong>RDS Proxy が DB インスタンスの <code>postgres</code> データベースにも接続する仕組みになっている</strong>、と教えていただきました。たしかに上記のログからも <code>rdsproxyadmin</code> ユーザーで <code>postgres</code> データベースで実行しているクエリがエラーになっていることがわかります<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p><img src="/images/20230411a/image_3.png" alt="image.png" width="926" height="318" loading="lazy"><h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><p><code>postgres</code> データベースに接続して <code>pg_hint_plan</code> の拡張を有効にします。以下のコマンドを実行します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql <span class="operator">-</span>h $&#123;接続先インスタンス名&#125; <span class="operator">-</span>U $&#123;マスターユーザー名&#125; <span class="operator">-</span>d postgres <span class="operator">-</span>c &quot;CREATE EXTENSION pg_hint_plan;&quot;</span><br></pre></td></tr></table></figure><p>このコマンドを実行後に <code>pg_hint_plan.enable_hint</code> などのパラメータを <code>1</code> などにして機能を有効にしたら、エラーなく <code>pg_hint_plan</code> のヒントが利用できるようになりました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Aurora PostgreSQL と RDS Proxy の環境で <code>pg_hint_plan</code> 拡張を利用する際に遭遇した問題、その原因、そして解決方法を説明しました。ポイントは、<code>postgres</code> データベースにも <code>pg_hint_plan</code> の拡張を適用することが必要である、ということです。Aurora PostgreSQL と RDS Proxy の環境下で SQL ヒントを利用するために <code>pg_hint_plan</code> の拡張を導入する方の参考になれば幸いです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">pg_stat_statements はデフォルトで設定されています</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">実際、このエラーはデータベースに <code>pg_hint_plan</code> の拡張が登録されていないときに発生します。<a href="https://pghintplan.osdn.jp/pg_hint_plan-ja.html#install">https://pghintplan.osdn.jp/pg_hint_plan-ja.html#install</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;Technogoly Innovation Group 辻です。&lt;/p&gt;
&lt;p&gt;PostgreSQL</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="RDS" scheme="https://future-architect.github.io/tags/RDS/"/>
    
    <category term="RDSProxy" scheme="https://future-architect.github.io/tags/RDSProxy/"/>
    
  </entry>
  
  <entry>
    <title>Terraform v1.4のリリースノートを眺める</title>
    <link href="https://future-architect.github.io/articles/20230407a/"/>
    <id>https://future-architect.github.io/articles/20230407a/</id>
    <published>2023-04-06T15:00:00.000Z</published>
    <updated>2023-04-07T08:51:32.450Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230407a/top.png" alt="" width="700" height="239"><p>こんにちは。TIGの伊藤です。</p><p>本記事は<a href="/articles/20230327a/">Terraform連載2023</a>の9リソース目です。</p><p>Terraformのv1.0が出て約2年弱、ついにv1.4までやってきました。v0.xの時代に比べて、バージョンアップ時の検討内容も比較的少なくなっており、日々継続的に運用する身としては非常に嬉しい限りです。また、機能追加も日々されて、使いやすくなってきてもいます。</p><p>とはいえ、リリースノートを見るたび、「ユースケースがわからない」から斜め読みになって自分の対象外としてしまった、など本来的には使えるものまで見逃していることも私自身は少なくないので、今回はTerraformのv1.4のリリースノートの、<code>ENHANCEMENT</code>のうち、私個人が特に気になった機能を見つつ、ユースケースが考えられるものについて探れればと思います。</p><p>なお、本連載でもいくつかテーマとしている記事がありますので、その内容については割愛します。</p><h2 id="null-resourceに変わるビルトインリソースができた"><a href="#null-resourceに変わるビルトインリソースができた" class="headerlink" title="null_resourceに変わるビルトインリソースができた"></a>null_resourceに変わるビルトインリソースができた</h2><p><code>null_resource</code>は、実行するホストマシンでシェルコマンドを実行したり、するために取り入れられているリソースですが、これがもう少し汎用性が高まる形で<code>terraform_data</code>というビルトインリソースができました。</p><p>ビルトインということもあって、本来の機能からは逸れますが、<code>terraform init</code>コマンドをそれぞれ利用する前提で実行した時にinitにかかる時間や、実際の<code>terraform init</code>の中で行われている内容に違いが現れています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># null_resourceを扱う時</span></span><br><span class="line">$ terraform init</span><br><span class="line"></span><br><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">- Finding latest version of hashicorp/null...</span><br><span class="line">- Installing hashicorp/null v3.2.1...</span><br><span class="line">- Installed hashicorp/null v3.2.1 (signed by HashiCorp)</span><br><span class="line"></span><br><span class="line">Terraform has created a lock file .terraform.lock.hcl to record the provider</span><br><span class="line">selections it made above. Include this file <span class="keyword">in</span> your version control repository</span><br><span class="line">so that Terraform can guarantee to make the same selections by default when</span><br><span class="line">you run <span class="string">&quot;terraform init&quot;</span> <span class="keyword">in</span> the future.</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># terraform_dataを扱う時</span></span><br><span class="line">$ terraform init</span><br><span class="line"></span><br><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">- terraform.io/builtin/terraform is built <span class="keyword">in</span> to Terraform</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>こんな形で、<code>terraform_data</code>を利用するときはProviderを取りにいっていないことがわかります。</p><p>さて、本題に戻り、<code>null_resource</code>と重複する部分が多い機能として<code>terraform_data</code>が出たのか、機能の違いについて考えます。<br>まず、リソースとして利用できるパラメータです。各々何があるかみていきましょう。</p><p><strong><code>null_resource</code></strong></p><div class="scroll"><table><thead><tr><th>パラメータ名</th><th>型</th><th>説明</th></tr></thead><tbody><tr><td>triggers</td><td>map</td><td>Mapで渡している文字列に変更が入ると、リソース内部に記述されているprovisionersを再実行する</td></tr></tbody></table></div><p><strong><code>terraform_data</code></strong></p><div class="scroll"><table><thead><tr><th>パラメータ名</th><th>型</th><th>説明</th></tr></thead><tbody><tr><td>input</td><td>any</td><td>inputパラメータとして渡された値を保存し、outputとして利用する時にapply後に再利用できる</td></tr><tr><td>triggers_replace</td><td>list</td><td>定義された値に変更があったらリソースを再作成する</td></tr></tbody></table></div><p><code>null_resource</code>でいう<code>triggers</code>が<code>terraform_data</code>では<code>list</code>になりました。どちらも、渡されたパラメータに対して変更が入った場合はトリガーとしてリソースが再作成になる、という点ではないので、ここはmapで扱った方が取り回しやすいのか、　listが良いのか分かれてくるように感じました。<br>例えば、<code>terraform_data</code>でLambdaに利用するPythonスクリプトのライブラリを都度更新する形を考えてみます。<br>以下の方に、<code>main.py</code>に変更が入った場合には自動的に<code>terraform_data</code>が再作成され、<code>pip install</code>コマンドが再実行されるようになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;terraform_data&quot;</span> <span class="string">&quot;pip_install&quot;</span> &#123;</span><br><span class="line">  triggers_replace = [filesha256(<span class="string">&quot;lambda_functions/sample/main.py&quot;</span>)]</span><br><span class="line"></span><br><span class="line">  provisioner <span class="string">&quot;local-exec&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">command</span> = <span class="string">&quot;pip install -r lambda_functions/sampple/requirements.txt -t lambda_functions/sampple/site-packages&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="terraform-workspace-selectコマンドにオプションが追加"><a href="#terraform-workspace-selectコマンドにオプションが追加" class="headerlink" title="terraform workspace selectコマンドにオプションが追加"></a><code>terraform workspace select</code>コマンドにオプションが追加</h2><p><code>terraform workspace select</code>に新しいオプションとして<code>-or-create</code>というオプションが使えるようになりました。実際にhelpを実行しても見えるようになりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ terraform workspace select --<span class="built_in">help</span></span><br><span class="line">Usage: terraform [global options] workspace select NAME</span><br><span class="line"></span><br><span class="line">  Select a different Terraform workspace.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">    -or-create=<span class="literal">false</span>    Create the Terraform workspace <span class="keyword">if</span> it doesn<span class="string">&#x27;t exist.</span></span><br></pre></td></tr></table></figure><p>helpを読んでみると、<code>terraform workspace select</code>コマンドで指定したworkspaceがない時にこのオプションを渡すことで作成してくれるようです。<br>例えば、以下のように、<code>dev</code>、<code>stg</code>というworkspaceがあったとします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ terraform workspace list</span><br><span class="line">  default</span><br><span class="line">  dev</span><br><span class="line">* stg</span><br></pre></td></tr></table></figure><p>ここに、さらに<code>prd</code>というworkspaceを選択して、本番環境を作成するとしましょう。現在であれば、<code>terraform workspace select</code>コマンドはないworkspaceを指定するので、エラーになってしまいます。しかし、<code>-or-create</code>オプションがあることで、ない場合でもエラーにならずに、新しいworkspaceが作成されるようになります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># オプションがない時</span></span><br><span class="line">$ terraform workspace select prd</span><br><span class="line"></span><br><span class="line">Workspace <span class="string">&quot;prd&quot;</span> doesn<span class="string">&#x27;t exist.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">You can create this workspace with the &quot;new&quot; subcommand</span></span><br><span class="line"><span class="string">or include the &quot;-or-create&quot; flag with the &quot;select&quot; subcommand.</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># オプションがある時</span></span><br><span class="line">terraform workspace select -or-create prd</span><br><span class="line">Created and switched to workspace <span class="string">&quot;prd&quot;</span>!</span><br><span class="line"></span><br><span class="line">You<span class="string">&#x27;re now on a new, empty workspace. Workspaces isolate their state,</span></span><br><span class="line"><span class="string">so if you run &quot;terraform plan&quot; Terraform will not see any existing state</span></span><br><span class="line"><span class="string">for this configuration.</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workspaceがあるか確認</span></span><br><span class="line">terraform workspace list</span><br><span class="line">  default</span><br><span class="line">  dev</span><br><span class="line">* prd</span><br><span class="line">  stg</span><br></pre></td></tr></table></figure><p>このアップデートのユースケースを考えてみると、上記の例のように、実際に人が実行するパターンではなく、CIでテストする場合に有効かなと思います。</p><p>実際のIssue(<a href="https://github.com/hashicorp/terraform/pull/31633">#31633</a>)には以下のような一文がありました。</p><blockquote><p>We currently get this behavior using the following script: <code>terraform workspace select test || terraform workspace new test</code>; however, this does not work well when attempting to use the official terraform docker image as it does not handle shell scripts by design.</p></blockquote><p>既存で存在するTerraformコンテナにおいては <code>terraform workspace select test || terraform workspace new test</code>が実行できない問題があること、また、CIでworkspaceを新規作成する時に上記コマンドを実行することに不都合が生じる、というケースの解決を目的としているようです。</p><h2 id="terraform-showのメッセージ"><a href="#terraform-showのメッセージ" class="headerlink" title="terraform showのメッセージ"></a><code>terraform show</code>のメッセージ</h2><p><code>teraform show</code>コマンドは、そのStateで管理されているリソースを全て展開して表示してくれるコマンドですが、そのStateで管理しているリソースがない場合もあり得ます。この時に、「なぜ何も表示されないのか」をメッセージとして表示してくれるようになりました。<br>従来では、Stateがそもそもないときはコメントが返ってくるものの、Stateはある状態で中身がないときは何もでませんでした。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Stateがない時</span></span><br><span class="line">$ terraform show</span><br><span class="line">No state.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Stateはある時</span></span><br><span class="line">$ terraform show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 何も出力されない</span></span><br></pre></td></tr></table></figure><p>後者のStateはあって、リソースがないケースについて、メッセージが出るようになりました。　</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform show</span><br><span class="line">The state file is empty. No resources are represented.</span><br></pre></td></tr></table></figure><p>上記は、一度<code>terraform apply</code>コマンドでリソースを作った後に、<code>terraform destroy</code>コマンドでリソースを全て削除した後に実行しました。そのため、表示される文章としても「表示するリソースがない」というものになります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回は、Terraform v1.4のリリース内容の一部をかいつまんで紹介しました。今回はすごく大きな変更、影響があるものは少ないものの、細かい要求に対してフィットしたような印象でした。今回紹介した機能追加も、「あると嬉しい」だったと感じているので、今後もより使いやすくなればと思います。</p><p>その他のリリース内容</p><ul><li><a href="/articles/20230327b/">Terraform 1.4 Update:Private Service Connectを利用したbackend&#x2F;gcsへのアクセス</a></li><li><a href="/articles/20230331a/">Terraformでの機密情報の取り扱い on Google Cloud</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230407a/top.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;239&quot;&gt;

&lt;p&gt;こんにちは。TIGの伊藤です。&lt;/p&gt;
&lt;p&gt;本記事は&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="Terraform1.4" scheme="https://future-architect.github.io/tags/Terraform1-4/"/>
    
  </entry>
  
  <entry>
    <title>Terraformに入門して1ヶ月経ったので、初心者が気をつけるべきポイントを書いてみる</title>
    <link href="https://future-architect.github.io/articles/20230406a/"/>
    <id>https://future-architect.github.io/articles/20230406a/</id>
    <published>2023-04-05T15:00:00.000Z</published>
    <updated>2023-04-06T07:23:34.170Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230406a/top.png" alt="" width="500" height="286"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="/articles/20230327a/">Terraform連載2023</a> の8リソース目の記事は、Terraform初心者向けの記事です！</p><p>こんにちは、TIG DXユニット所属の大岩と申します。</p><p>去年の7月に新卒で入社し、新卒研修を終えた後、実際のプロジェクトに配属されました。このプロジェクトでは、Terraformを使ってAWSのインフラ構築を自動化する業務に携わりました。これまでTerraformはおろか、インフラもネットワークの知識もほとんど無い未経験の状態からのスタートです。日々インフラの知識を脳に叩き込み、それをコードの形でアウトプットしていく、なんとも目まぐるしい毎日を過ごしております。</p><p>当記事では、初心者がTerraformを扱う際に気をつけるべきポイントについて、自分が1ヶ月間みっちりTerraformを触った経験をもとに紹介します。</p><p>動作環境は以下のとおりです。</p><ul><li>Terraform v1.4.1</li><li>terraform-provider-aws v4.60.0</li><li>Windows 10 Pro 21H2(19044.2728)</li><li>Ubuntu 20.04.6 LTS on WSL2</li></ul><h2 id="気をつけるべきポイント4選"><a href="#気をつけるべきポイント4選" class="headerlink" title="気をつけるべきポイント4選"></a>気をつけるべきポイント4選</h2><ol><li>何よりまずは公式ドキュメントを読もう</li><li><code>terraform</code> コマンドを使いこなそう</li><li>効率よく書こう</li><li>これはバグ？と思ったらIssueを見に行こう</li></ol><h3 id="1-何よりまずは公式ドキュメントを読もう"><a href="#1-何よりまずは公式ドキュメントを読もう" class="headerlink" title="1. 何よりまずは公式ドキュメントを読もう"></a>1. 何よりまずは公式ドキュメントを読もう</h3><p>これはTerraformに限った話ではないのですが、 <strong>まずは公式ドキュメントをしっかり読むこと</strong> を挙げたいと思います。</p><p>Terraformの公式サイトには、プロパイダごとのドキュメントが非常に丁寧に記載されています。各 <code>resource</code> ごとにページが分けられており、使い方や各引数のリファレンス、実装例などが記載されています。</p><p><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs">AWSプロパイダのドキュメント</a></p><h4 id="Terraformのドキュメントはすべて英語"><a href="#Terraformのドキュメントはすべて英語" class="headerlink" title="Terraformのドキュメントはすべて英語"></a>Terraformのドキュメントはすべて英語</h4><p>初心者にとって一番取っ付きにくく感じてしまう原因が言語の壁です。残念ながら、Terraform公式サイトのドキュメントはすべてが英語です。専門用語も多く、機械翻訳に通しても綺麗な日本語に翻訳してくれないため、読む気が削がれがちです。</p><p>ここはもう頑張って英語を読む、というのが解決策になってしまいます。今から紹介する「Note」をしっかり読むことは特に重要です。</p><h4 id="Noteを見逃さない"><a href="#Noteを見逃さない" class="headerlink" title="Noteを見逃さない"></a>Noteを見逃さない</h4><p>Terraformのドキュメントには、至るところに黄背景の「Note」が記載されており、これを見逃すとエラーが発生したり、上手く構築できないことが多くありました。これは私の失敗談をもとに紹介します。</p><p>LambdaにアタッチするIAMロールを用意する際、自分が書いたJSONによるIAMポリシーと、AWSのマネージドポリシーである <code>AWSLambdaVPCAccessExecutionRole</code> ポリシーの両方をアタッチしたい場面がありました。そこで、以下のように記載しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_iam_role&quot;</span> <span class="string">&quot;lambda&quot;</span> &#123;</span><br><span class="line">  name                = <span class="string">&quot;iam_role-lambda&quot;</span></span><br><span class="line">  assume_role_policy  = templatefile(<span class="string">&quot;./lambda_assume_role.json&quot;</span>, &#123;&#125;)</span><br><span class="line">  managed_policy_arns = [<span class="string">&quot;arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole&quot;</span>] <span class="comment"># マネージドポリシーのアタッチ</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_iam_policy&quot;</span> <span class="string">&quot;lambda&quot;</span> &#123;</span><br><span class="line">  name   = <span class="string">&quot;iam_policy-lambda&quot;</span></span><br><span class="line">  policy = templatefile(<span class="string">&quot;./lambda.json&quot;</span>, &#123;&#125;) <span class="comment"># 自分で書いたカスタマー管理ポリシーを読み込む</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_iam_role_policy_attachment&quot;</span> <span class="string">&quot;lambda&quot;</span> &#123; <span class="comment"># カスタマー管理ポリシーのアタッチ</span></span><br><span class="line">  role       = aws_iam_role.lambda.name</span><br><span class="line">  policy_arn = aws_iam_policy.lambda.arn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda側のリソースにIAMロールをアタッチして、 <code>terraform plan</code> および <code>terraform apply</code> を実施します。初回は正常に完了するように見えるのですが、再度 <code>terraform plan</code> をしてみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the</span><br><span class="line">following symbols:</span><br><span class="line">  ~ update in-place</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># module.iam_role_lambda.aws_iam_role.lambda will be updated in-place</span></span><br><span class="line">  ~ resource <span class="string">&quot;aws_iam_role&quot;</span> <span class="string">&quot;lambda&quot;</span> &#123;</span><br><span class="line">        <span class="built_in">id</span>                    = <span class="string">&quot;iam_role-lambda&quot;</span></span><br><span class="line">      ~ managed_policy_arns   = [</span><br><span class="line">          - <span class="string">&quot;arn:aws:iam::xxxxxxxxxxxx:policy/iam_policy-lambda&quot;</span>,</span><br><span class="line">            <span class="comment"># (1 unchanged element hidden)</span></span><br><span class="line">        ]</span><br><span class="line">        name                  = <span class="string">&quot;iam_role-lambda&quot;</span></span><br><span class="line">        tags                  = &#123;&#125;</span><br><span class="line">        <span class="comment"># (8 unchanged attributes hidden)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 0 to add, 1 to change, 0 to destroy.</span><br></pre></td></tr></table></figure><p>本来 <code>terraform apply</code> 直後に <code>terraform plan</code> を実行すると、変更差分無し（<code>No changes</code>）になるべきです。しかし、 <code>managed_policy_arns</code> から、アタッチしたカスタマー管理ポリシーが削除される変更が生じています。</p><p>このまま <code>terraform apply</code> を実行すると、たしかにAWSマネージドポリシーである <code>AWSLambdaVPCAccessExecutionRole</code> のみがアタッチされている状態となってしまいます。</p><img src="/images/20230406a/image.png" alt="" width="1200" height="583" loading="lazy"><p>ここで公式ドキュメントの記述を見てみましょう。<a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_role">aws_iam_role</a>のページ冒頭に、黄色で「NOTE」が書かれているようです。</p><img src="/images/20230406a/image_2.png" alt="" width="750" height="259" loading="lazy"><blockquote><p>NOTE:<br>If you use this resource’s managed_policy_arns argument or inline_policy configuration blocks, this resource will take over exclusive management of the role’s respective policy types (e.g., both policy types if both arguments are used).<br>These arguments are incompatible with other ways of managing a role’s policies, such as aws_iam_policy_attachment, aws_iam_role_policy_attachment, and aws_iam_role_policy. If you attempt to manage a role’s policies by multiple means, you will get resource cycling and&#x2F;or errors.<br><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_role#:~:text=If%20you%20use,and/or%20errors.">引用元</a></p></blockquote><p>DeepLに日本語訳してもらいます。</p><p>「このリソースの <code>managed_policy_arns</code> 引数または <code>inline_policy</code> 設定ブロックを使用すると、このリソースはロールのそれぞれのポリシータイプ（例えば、両方の引数を使用した場合は両方のポリシータイプ）の排他的管理を引き受けます。これらの引数は、<code>aws_iam_policy_attachment</code> 、<code>aws_iam_role_policy_attachment</code> 、<code>aws_iam_role_policy</code> といったロールのポリシーを管理する他の方法と互換性がありません。複数の手段でロールのポリシーを管理しようとすると、リソースの循環やエラーが発生します。」</p><p>確かに今回の例では、 <code>aws_iam_role</code> リソースの引数として <code>managed_policy_arns</code> を設定し <code>AWSLambdaVPCAccessExecutionRole</code> ポリシーをアタッチすると同時に、 <code>aws_iam_role_policy_attachment</code> リソースも記述し、カスタマー管理ポリシーをアタッチしようとしています。まさに、「<strong>複数の手段でロールのポリシーを管理しようとすると、リソースの循環やエラーが発生します。</strong>」という部分に該当します。</p><p>初回apply時は <code>aws_iam_role</code> リソースと <code>aws_iam_role_policy_attachment</code> リソースを両方とも作成するため、2つのポリシーが正常に紐付きます。しかし再度planを実施すると、今度は <code>aws_iam_role</code> リソースの <code>managed_policy_arns</code> を見てカスタマー管理ポリシーは不必要であると判定し、AWSマネージドポリシーのみになるよう修正を加えてしまいます。結果、想定していない変更が生じてしまいます。要するに、ロールのポリシーを管理する方法を1つに絞りなさい、という警告でした。</p><p>今回の場合は、 <code>AWSLambdaVPCAccessExecutionRole</code> をアタッチするのではなく、 <code>managed_policy_arns</code> を削除し、<code>AWSLambdaVPCAccessExecutionRole</code> の中身をカスタマー管理ポリシーの中に記載してしまうことで解決しました。解決するまでに色々なサイトを渡り歩き、1時間ほど無駄にしてしまいました。もっと早く気づいていれば……と後悔しました。</p><p>ポイント: <strong>公式ドキュメントは英語でもしっかり読むべし。特にNOTEに気をつけろ！</strong></p><h3 id="2-terraform-コマンドを使いこなそう"><a href="#2-terraform-コマンドを使いこなそう" class="headerlink" title="2. terraform コマンドを使いこなそう"></a>2. <code>terraform</code> コマンドを使いこなそう</h3><p><code>terraform</code> コマンドでよく使うのは、 <code>plan</code> 、 <code>apply</code> 、 <code>destroy</code> の3つだと思います。それぞれのコマンドには多数のオプションがあることをご存知でしょうか？ここでは、私が1ヶ月間の間に非常にお世話になったコマンド・オプションを3つピックアップして紹介します。</p><h4 id="terraform-apply-target-リソース名"><a href="#terraform-apply-target-リソース名" class="headerlink" title="terraform apply -target=(リソース名)"></a><code>terraform apply -target=(リソース名)</code></h4><p><a href="https://developer.hashicorp.com/terraform/tutorials/state/resource-targeting">https://developer.hashicorp.com/terraform/tutorials/state/resource-targeting</a></p><p><code>plan</code> 、 <code>apply</code> 、 <code>destroy</code> ともに、 <code>-target</code> オプションをつけると、指定したリソースのみを対象として各操作を実施できます。例えば、 <code>terraform apply -target=aws_s3_bucket.hoge</code> コマンドを実施することで、 <code>hoge</code> という名前のS3バケットのみをapplyできます。</p><p>複数のリソースを指定したい場合は、一つずつ <code>-target</code> 引数を追加するか、 <code>&#123;&#125;</code> の中にコンマ区切りで指定します。例えば、 <code>fuga</code> と <code>piyo</code> という名前のS3バケットのみをdestroyしたい場合は、このように記載します。</p><ul><li><code>terraform destroy -target=aws_s3_bucket.fuga -target=aws_s3_bucket.piyo</code></li><li><code>terraform destroy -target=&#123;aws_s3_bucket.fuga,aws_s3_bucket.piyo&#125;</code></li></ul><p>このオプションは開発時に特定のリソースのみを作り直したり、引数を変更して試したいときなどに便利です。しかしTerraform公式では、 <code>target</code> オプションを通常のユースケースで用いることはおすすめしていません。</p><blockquote><p>Targeting individual resources can be useful for troubleshooting errors, but should not be part of your normal workflow.<br><a href="https://developer.hashicorp.com/terraform/tutorials/state/resource-targeting#:~:text=Targeting%20individual%20resources%20can%20be%20useful%20for%20troubleshooting%20errors%2C%20but%20should%20not%20be%20part%20of%20your%20normal%20workflow.">引用元</a></p></blockquote><p>また、Terraform連載3リソース目の宮永さんが、<a href="https://github.com/future-architect/tftarget/releases">tftarget</a>というCLIツールを開発されています。このツールを使うことで、ターゲットの対象とするリソースをチェックを入れるように選択できるため、より簡単に・ミスなく指定できるようになります。こちらの記事もぜひご覧ください！</p><ul><li><a href="https://future-architect.github.io/articles/20230329a/">tftarget:Terraformターゲットを選択的に実行するためのGo製CLIツール</a></li></ul><h4 id="terraform-apply-parallelism-並列実行数"><a href="#terraform-apply-parallelism-並列実行数" class="headerlink" title="terraform apply -parallelism=(並列実行数)"></a><code>terraform apply -parallelism=(並列実行数)</code></h4><p><a href="https://developer.hashicorp.com/terraform/cli/commands/apply#parallelism-n">https://developer.hashicorp.com/terraform/cli/commands/apply#parallelism-n</a></p><p>リソースを構築する際の実行を並列にするオプションです。デフォルトは <code>10</code> のため、この数字を増やすことで、applyやdestroyの速度を上げる事ができます。とはいえ、apply完了までの時間はリソース同士の依存関係やリソースの構築時間にもよるので、よっぽど大量のリソースを構築する場合でなければ、そこまで恩恵は得られないと思います。</p><h4 id="terraform-fmt-recursive"><a href="#terraform-fmt-recursive" class="headerlink" title="terraform fmt -recursive"></a><code>terraform fmt -recursive</code></h4><p><a href="https://developer.hashicorp.com/terraform/cli/commands/fmt#usage">https://developer.hashicorp.com/terraform/cli/commands/fmt#usage</a></p><p><code>fmt</code> コマンドはその名の通り、記述のコード整形を行うコマンドですが、そのオプションに <code>-recursive</code> というものがあります。オプションなしではカレントディレクトリ内のファイルのみを対象としますが、 <code>-recursive</code> をつけることで、サブディレクトリも含め、再帰的にフォーマットを実行してくれます。</p><p>私の携わっていたプロジェクトでは、CI&#x2F;CDにて <code>terraform fmt -recursive -check</code> を実施し、pushされたものが全ファイルフォーマットされていなければエラーとして弾くWorkflowを構築していました。複数人でTerraformを記載する際にコードの一貫性を担保するためにも、ぜひ導入しておきましょう。</p><p>（TerraformとDevOps・CI&#x2F;CDに関しては、<a href="https://future-architect.github.io/articles/20230403a/">Terraform連載6リソース目の川口さんの記事</a>や、<a href="https://future-architect.github.io/articles/20230405a/">7リソース目の前原さんの記事</a>をご覧ください！）</p><p>ポイント: <strong>terraformのコマンドは便利なオプションも知って、開発を効率よく進めよう！</strong></p><h3 id="3-効率よく書こう"><a href="#3-効率よく書こう" class="headerlink" title="3. 効率よく書こう"></a>3. 効率よく書こう</h3><p>Terraformの記法として、 <code>for_each</code> や <code>count</code> を利用して、複数のリソースを1回の記述で作成できます。</p><p>私がプロジェクトで初めて提出したPRは、「利用するサービス分のVPCエンドポイントを構築する」TerraformのPRでした。私は愚直にも一つ一つ丁寧に <code>aws_vpc_endpoint</code> リソースをサービス分作成しており、レビュアーである<a href="https://future-architect.github.io/authors/%E5%89%8D%E5%8E%9F%E5%BF%9C%E5%85%89/">ゆるふわエンジニア前原さん</a>から「 <code>for_each</code> を使おうね！」と諭されてしまいました。</p><p>具体例を見てみましょう。今回は、S3とSecrets ManagerのVPC Endpointに接続するための、Interface型のVPC Endpointを構築します。</p><h4 id="for-each-を使わない例"><a href="#for-each-を使わない例" class="headerlink" title="for_each を使わない例"></a><code>for_each</code> を使わない例</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_vpc_endpoint&quot;</span> <span class="string">&quot;s3&quot;</span> &#123;</span><br><span class="line">  vpc_id             = aws_vpc.api_service.id</span><br><span class="line">  service_name       = <span class="string">&quot;com.amazonaws.ap-northeast-1.s3&quot;</span></span><br><span class="line">  vpc_endpoint_type  = <span class="string">&quot;Interface&quot;</span></span><br><span class="line">  subnet_ids         = local.subnet_ids.private <span class="comment"># local変数に記載</span></span><br><span class="line">  security_group_ids = [</span><br><span class="line">    aws_security_group.vpc_endpoint.id, <span class="comment"># Security Groupの記載は割愛します</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_vpc_endpoint&quot;</span> <span class="string">&quot;secrets_manager&quot;</span> &#123;</span><br><span class="line">  vpc_id             = aws_vpc.api_service.id</span><br><span class="line">  service_name       = <span class="string">&quot;com.amazonaws.ap-northeast-1.secretsmanager&quot;</span></span><br><span class="line">  vpc_endpoint_type  = <span class="string">&quot;Interface&quot;</span></span><br><span class="line">  subnet_ids         = local.subnet_ids.private <span class="comment"># local変数に記載</span></span><br><span class="line">  security_group_ids = [</span><br><span class="line">    aws_security_group.vpc_endpoint.id, <span class="comment"># Security Groupの記載は割愛します</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>確かに2つぐらいでしたらそこまで煩雑ではないのですが、10個・20個というレベルになると大分厳しいです。</p><h4 id="for-each-を使う例"><a href="#for-each-を使う例" class="headerlink" title="for_each を使う例"></a><code>for_each</code> を使う例</h4><p>まずは、Local変数(Local Value)に使うサービスを、 <code>map</code> の形式で列挙しておきます。Keyにはそのサービスの識別子となる文字列を、Valueにはサービス名を記載します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  vpc_endpoints = &#123;</span><br><span class="line">    <span class="string">&quot;s3&quot;</span>  = <span class="string">&quot;com.amazonaws.ap-northeast-1.s3&quot;</span></span><br><span class="line">    <span class="string">&quot;asm&quot;</span> = <span class="string">&quot;com.amazonaws.ap-northeast-1.secretsmanager&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを <code>for_each</code> を使って展開します。KeyとValueは、それぞれ <code>each.key</code> と <code>each.value</code> で取得できます。ここでは、 <code>service_name</code> に、Valueとして格納したサービス名を指定したいため、 <code>each.value</code> を指定しています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_vpc_endpoint&quot;</span> <span class="string">&quot;vpc_endpoints&quot;</span> &#123;</span><br><span class="line">  for_each = local.vpc_endpoints</span><br><span class="line"></span><br><span class="line">  vpc_id             = aws_vpc.api_service.id</span><br><span class="line">  service_name       = each.value</span><br><span class="line">  vpc_endpoint_type  = <span class="string">&quot;Interface&quot;</span></span><br><span class="line">  subnet_ids         = local.subnet_ids.private <span class="comment"># local変数に記載</span></span><br><span class="line">  security_group_ids = [</span><br><span class="line">    aws_security_group.vpc_endpoint.id, <span class="comment"># Security Groupの記載は割愛します</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これまで2つリソースを記載していた部分が、1回の記述のみで済みました。このように、繰り返し同じものを作成する場合などは、Local変数に値を切り出して <code>for_each</code> を利用して効率よく記載することで、単純なミスや視認性の悪化を防ぐなどのメリットがあります。</p><p>ポイント: <strong>エンジニアなら楽すべし！ <code>for_each</code> を使いこなそう！</strong></p><h3 id="4-これはバグ？と思ったらIssueを見に行こう"><a href="#4-これはバグ？と思ったらIssueを見に行こう" class="headerlink" title="4. これはバグ？と思ったらIssueを見に行こう"></a>4. これはバグ？と思ったらIssueを見に行こう</h3><p>Terraform本体や、各サービスのプロバイダーはOSSとして公開されています。日々世界中の有志の開発者たちによって、各種クラウド環境のアップデートへの追従や、コードの改善が繰り返されています。</p><p>移り変わりが激しい業界であるからこそ、最新仕様への追従の遅れや、バグを踏み抜いて動作しないという場面に多く出くわします。正しく書いたことは間違いないのに正常に動作しない、謎のエラーが出るときは、一度GitHub上のIssueページを覗いてみましょう。以下、自分の経験を記載します。</p><p>AWS Pinpointを構築するリソースを作成し、apply・動作確認が完了したため、destroyしました。すると、Pinpoint自体は削除されているものの、Terraformは以下のエラーが出て終了しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: deleting Pinpoint Application (xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx): %!s(&lt;nil&gt;)</span><br></pre></td></tr></table></figure><p>普段は <code>%!s(&lt;nil&gt;)</code> の部分にエラーメッセージが表示されるはずですが、このメッセージでは <code>nil</code> と書かれています。Terraform自体はGolangで書かれているので、 <code>nil</code> はメッセージとなる文字列が正常に渡されなかったと推測できます。つまりこれはバグであると判断しました。</p><p>terraform-provider-aws のGitHubにアクセスし、Issueの検索から<a href="https://github.com/hashicorp/terraform-provider-aws/issues?q=pinpoint+nil">「pinpoint nil」で検索します</a>。すると……ヒットしました！すでにCloseされていましたが、<a href="https://github.com/hashicorp/terraform-provider-aws/issues/29341">「[Bug]: Unable to delete Application PinPoint, destroy command error」</a> というタイトルのIssueを発見しました。</p><img src="/images/20230406a/image_3.png" alt="image.png" width="1200" height="664" loading="lazy"><p>一番下を見ると、<a href="https://github.com/hashicorp/terraform-provider-aws/pull/30101">MergedとなっているPR</a>があることが分かります。</p><img src="/images/20230406a/image_4.png" alt="image.png" width="1077" height="160" loading="lazy"><p>さらにその先には、<code>v4.60.0</code> で修正がリリースされるとの文言がありました。記事執筆時点で2週間前となっていますが、このバグを踏んで調べた時点ではまだ数日しか経っていない、修正したての出来事でした。</p><blockquote><p>This functionality has been released in v4.60.0 of the Terraform AWS Provider.</p></blockquote><img src="/images/20230406a/image_5.png" alt="" width="1155" height="298" loading="lazy"><p>すぐにterraform-provider-awsのバージョンをv4.60.0に上げ、<code>terraform init -upgrade</code> を実施し、apply・destroyを実施すると、今度はエラーを出さずに正常終了しました。</p><p>実はその前にも<a href="https://github.com/hashicorp/terraform-provider-aws/issues/29236">Security Groupの削除中にプログラムがクラッシュするバグ</a>にあたり、その時もIssueを見つけ、バージョンアップで解決したことがありました。世界中の開発者がバグを報告し、リアルタイムに修正していく様子を見ることができるOSSの強みを自分の開発にも取り入れていけば、バグの解決のために数時間をネットサーフィンに費やす失態を無くすことができるでしょう。</p><p>また、もし起票されていないバグを発見したら、自分でIssueを起票しましょう！</p><p>ポイント: <strong>バグを踏んだらまずIssueを見よ！世界中の開発者たちに感謝しつつ、最新情報をキャッチせよ！</strong></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>いかがだったでしょうか。ほとんどTerraformに限らない話だったかもしれませんが、この記事が少しでも私と同じTerraform初心者のお役に立つことができれば幸いです。<br>私もまだまだ勉強中の身であるので、間違ったことを言っているようでしたら、優しくご指摘ください！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230406a/top.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;286&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
  </entry>
  
  <entry>
    <title>Terraform とGitHub Actions</title>
    <link href="https://future-architect.github.io/articles/20230405a/"/>
    <id>https://future-architect.github.io/articles/20230405a/</id>
    <published>2023-04-04T15:00:00.000Z</published>
    <updated>2023-04-05T01:15:11.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20230327a/">Terraform連載</a>の7リソース目です。</p><p>こんにちは。TIG DX チームのゆるふわエンジニアの前原です。</p><p>今までは、GitLab でTerraform を利用する機会が多かったのですが、今回は、GitHub Actions を利用することになりました。</p><p>そこで実施した内容をこの記事に書いていきたいと思います。</p><h1 id="GitHub-Actions-の設定"><a href="#GitHub-Actions-の設定" class="headerlink" title="GitHub Actions の設定"></a>GitHub Actions の設定</h1><p>GitHub Actions などを利用してAWS リソースを操作する場合にクレデンシャルを利用してきた方が多いのではないでしょうか。<br>クレデンシャル利用は便利ですが、何かとリスクを抱えています。<br>そこで一時的なトークンを受け取りGitHub Actions を実行する環境を作りたいと思います。</p><h2 id="OIDC-プロバイダの設定"><a href="#OIDC-プロバイダの設定" class="headerlink" title="OIDC プロバイダの設定"></a>OIDC プロバイダの設定</h2><p>OIDC プロバイダの追加をTerraform で行います。</p><ul><li>プロバイダタイプ: OpenID Connect</li><li>プロバイダ URL: <a href="https://token.actions.githubusercontent.com/">https://token.actions.githubusercontent.com</a></li><li>対象者: sts.amazonaws.com</li></ul><p>参考: <a href="https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services">Configuring OpenID Connect in Amazon Web Services</a></p><figure class="highlight sh"><figcaption><span>openid_connect_provider.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data <span class="string">&quot;http&quot;</span> <span class="string">&quot;github_actions_openid_configuration&quot;</span> &#123;</span><br><span class="line">  url = <span class="string">&quot;https://token.actions.githubusercontent.com/.well-known/openid-configuration&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">&quot;tls_certificate&quot;</span> <span class="string">&quot;github_actions&quot;</span> &#123;</span><br><span class="line">  url = jsondecode(data.http.github_actions_openid_configuration.body).jwks_uri</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_iam_openid_connect_provider&quot;</span> <span class="string">&quot;github_actions&quot;</span> &#123;</span><br><span class="line">  url             = <span class="string">&quot;https://token.actions.githubusercontent.com&quot;</span></span><br><span class="line">  client_id_list  = [<span class="string">&quot;sts.amazonaws.com&quot;</span>]</span><br><span class="line">  thumbprint_list = [data.tls_certificate.github_actions.certificates[0].sha1_fingerprint]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Terraform 実行後、IAM コンソールにアクセスします。<br>ID プロバイダ設定をクリックし、追加されていることを確認します。</p><img src="/images/20230405a/image.png" alt="image.png" width="1200" height="659" loading="lazy"><h2 id="IAM-Role-追加"><a href="#IAM-Role-追加" class="headerlink" title="IAM Role 追加"></a>IAM Role 追加</h2><p>次にGitHub Actions に割り当てるIAM Role を作成します。<br>ここではサンプル的に作成しておりますので、管理者権限を付与しています。<br>実際には、運用に合わせてポリシの設定をして頂ければと思います。</p><figure class="highlight sh"><figcaption><span>module_iam_github_actions.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module <span class="string">&quot;iam_role_github_actions&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;&#123;任意の場所指定&#125;/modules/github_actions&quot;</span></span><br><span class="line"></span><br><span class="line">  project_name = local.project_name</span><br><span class="line">  account_id   = data.aws_caller_identity.current.account_id</span><br><span class="line">  github_org   = local.github_org</span><br><span class="line">  github_repo  = local.github_repo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">variable <span class="string">&quot;project_name&quot;</span> &#123;&#125;</span><br><span class="line">variable <span class="string">&quot;account_id&quot;</span> &#123;&#125;</span><br><span class="line">variable <span class="string">&quot;github_org&quot;</span> &#123;&#125;</span><br><span class="line">variable <span class="string">&quot;github_repo&quot;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_iam_role&quot;</span> <span class="string">&quot;github_actions&quot;</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;var.project_name&#125;</span>-github-actions&quot;</span></span><br><span class="line">  assume_role_policy = templatefile(<span class="string">&quot;&#123;任意の場所指定&#125;/assume_role.json&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      account_id  = var.account_id,</span><br><span class="line">      github_org  = var.github_org,</span><br><span class="line">      github_repo = var.github_repo</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_iam_policy&quot;</span> <span class="string">&quot;github_actions&quot;</span> &#123;</span><br><span class="line">  name   = <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;var.project_name&#125;</span>-github-actions&quot;</span></span><br><span class="line">  policy = templatefile(<span class="string">&quot;&#123;任意の場所指定&#125;/administrator.json&quot;</span>, &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_iam_role_policy_attachment&quot;</span> <span class="string">&quot;github_actions&quot;</span> &#123;</span><br><span class="line">  role       = aws_iam_role.github_actions.name</span><br><span class="line">  policy_arn = aws_iam_policy.github_actions.arn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>assume_role.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Statement&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Principal&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Federated&quot;</span>: <span class="string">&quot;arn:aws:iam::<span class="variable">$&#123;account_id&#125;</span>:oidc-provider/token.actions.githubusercontent.com&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;sts:AssumeRoleWithWebIdentity&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Condition&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;StringLike&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;token.actions.githubusercontent.com:sub&quot;</span>: <span class="string">&quot;repo:<span class="variable">$&#123;github_org&#125;</span>/<span class="variable">$&#123;github_repo&#125;</span>:*&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>administrator.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Statement&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">          <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">          <span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="シークレット変数の設定"><a href="#シークレット変数の設定" class="headerlink" title="シークレット変数の設定"></a>シークレット変数の設定</h2><p>GitHub の[Settings] &gt; [Secrets and variables]からシークレット変数を設定します。</p><ul><li>Name: AWS_IAM_ROLE_ARN</li><li>Secret: {IAM_ROLE_ARN}</li></ul><img src="/images/20230405a/image_2.png" alt="image.png" width="1200" height="658" loading="lazy"><p>これで設定が完了です。</p><h1 id="Terraform-実行用のワークフロー"><a href="#Terraform-実行用のワークフロー" class="headerlink" title="Terraform 実行用のワークフロー"></a>Terraform 実行用のワークフロー</h1><p>ここでは実際にワークフローを作成していきます。<br>以下のディレクトリ構成とします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">terraform</span><br><span class="line">├── network</span><br><span class="line">│   ├── backend.tf</span><br><span class="line">│   ├── local.tf</span><br><span class="line">│   ├── hoge.tf</span><br><span class="line">│   └── versions.tf</span><br><span class="line">└── main</span><br><span class="line">    ├── backend.tf</span><br><span class="line">    ├── local.tf</span><br><span class="line">    ├── fuga.tf</span><br><span class="line">    └── versions.tf</span><br></pre></td></tr></table></figure><p>以下にサンプルコードを記載します。</p><figure class="highlight yaml"><figcaption><span>workflow_tf.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">workflow</span> <span class="string">terraform</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">terraform/*</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TF_VERSION:</span> <span class="number">1.4</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">AWS_REGION:</span> <span class="string">ap-northeast-1</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">terraform:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">terraform</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">workdir:</span> [<span class="string">terraform/main</span>, <span class="string">terraform/network</span>]</span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">id-token:</span> <span class="string">write</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">read</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">aws-actions/configure-aws-credentials@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">role-to-assume:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.AWS_IAM_ROLE_ARN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">aws-region:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.AWS_REGION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">terraform</span> <span class="string">setup</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">hashicorp/setup-terraform@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">terraform_version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.TF_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">init</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Terraform</span> <span class="string">fmt</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">fmt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plan:</span> <span class="string">Terraform</span> <span class="string">plan</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">plan</span> <span class="string">-no-color</span></span><br></pre></td></tr></table></figure><p>上記のワークフローは、Terraform validate, init, plan までを実行するワークフローです。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">push:</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">terraform/*</span></span><br></pre></td></tr></table></figure><p>Push 時に<code>terraform/*</code>でファイルの変更があった際にワークフローが実行されます。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">strategy:</span></span><br><span class="line">  <span class="attr">matrix:</span></span><br><span class="line">    <span class="attr">workdir:</span> [<span class="string">terraform/main</span>, <span class="string">terraform/network</span>]</span><br></pre></td></tr></table></figure><p><code>workdir</code>は、実行したいディレクトリを指定します。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">aws-actions/configure-aws-credentials@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">role-to-assume:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.AWS_IAM_ROLE_ARN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">aws-region:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.AWS_REGION</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p><code>aws-actions/configure-aws-credentials</code>を利用し、クレデンシャルを取得します。<br>先ほど設定したシークレット変数を<code>secrets.AWS_IAM_ROLE_ARN</code>で取得します。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">terraform</span> <span class="string">setup</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">hashicorp/setup-terraform@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">terraform_version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.TF_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">init</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Terraform</span> <span class="string">fmt</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">fmt</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">plan:</span> <span class="string">Terraform</span> <span class="string">plan</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">plan</span> <span class="string">-no-color</span></span><br></pre></td></tr></table></figure><p>Terraform を実行する際には、<a href="https://github.com/hashicorp/setup-terraform">setup-terraform</a>を利用することで容易に実行することができます。<br>ここでは、Terraform の実行内容を簡略化して記載しています。</p><h2 id="ワークフロー手動実行"><a href="#ワークフロー手動実行" class="headerlink" title="ワークフロー手動実行"></a>ワークフロー手動実行</h2><p><code>Terraform apply</code>を自動実行するのは怖いと思う方はいると思います。<br>そこで、手動で実行するための方法を記載したいと思います。</p><figure class="highlight yaml"><figcaption><span>workflow_tf.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">network:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">        <span class="attr">default:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">description:</span> <span class="number">1.</span><span class="string">network</span></span><br><span class="line">      <span class="attr">main:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">        <span class="attr">default:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">description:</span> <span class="number">2.</span><span class="string">main</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TF_VERSION:</span> <span class="number">1.4</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">AWS_REGION:</span> <span class="string">ap-northeast-1</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">network:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">inputs.api_service_network</span> <span class="string">==</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api_service_network</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">workdir:</span> [<span class="string">terraform/network</span>]</span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">id-token:</span> <span class="string">write</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">read</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">aws-actions/configure-aws-credentials@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">role-to-assume:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.AWS_IAM_ROLE_ARN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">aws-region:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.AWS_REGION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">terraform</span> <span class="string">setup</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">hashicorp/setup-terraform@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">terraform_version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.TF_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">init</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plan:</span> <span class="string">Terraform</span> <span class="string">plan</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">plan</span> <span class="string">-no-color</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plan:</span> <span class="string">Terraform</span> <span class="string">apply</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">apply</span> <span class="string">-auto-approve</span> <span class="string">-no-color</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">inputs.main</span> <span class="string">==</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">main</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">network</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">workdir:</span> [<span class="string">terraform/api_services/main</span>]</span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">id-token:</span> <span class="string">write</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">read</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">aws-actions/configure-aws-credentials@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">role-to-assume:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.AWS_IAM_ROLE_ARN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">aws-region:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.AWS_REGION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">terraform</span> <span class="string">setup</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">hashicorp/setup-terraform@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">terraform_version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.TF_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">init</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plan:</span> <span class="string">Terraform</span> <span class="string">plan</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">plan</span> <span class="string">-no-color</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plan:</span> <span class="string">Terraform</span> <span class="string">apply</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">terraform</span> <span class="string">apply</span> <span class="string">-auto-approve</span> <span class="string">-no-color</span></span><br></pre></td></tr></table></figure><p>手動実行する際は、<a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows">workflow_dispatch</a>を利用します。<br>Input タイプは、string、choice、boolean、environment　などが存在します。</p><ul><li>参考: <a href="https://docs.github.com/en/actions/learn-github-actions/contexts#inputs-context">GitHub Actions: Input types for manual workflows</a></li></ul><p>ワークフローを手動実行する際に<code>env</code>を指定したい場合は、<code>environment</code>を利用します。<br>利用する際は、事前に[Settings] &gt; [Environments]で設定を行います。</p><img src="/images/20230405a/image_3.png" alt="image.png" width="1200" height="658" loading="lazy"><p>注意点として手動実行は、デフォルトブランチでのみ実行可能です。<br>ただし、CLI を利用することでデフォルトブランチ以外でも実行が可能です。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">  <span class="attr">default:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">description:</span> <span class="number">1.</span><span class="string">network</span></span><br><span class="line"><span class="attr">main:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">  <span class="attr">default:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">description:</span> <span class="number">2.</span><span class="string">main</span></span><br></pre></td></tr></table></figure><p>タイプを<code>boolean</code>とすることでチェックボックスで実行するジョブを選択できます。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">main:</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">inputs.main</span> <span class="string">==</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">needs:</span> <span class="string">network</span></span><br></pre></td></tr></table></figure><p><code>if: inputs.main == true</code>で手動実行時にチェックを入れた場合は、実行するという条件にしています。<br>また、<code>needs: network</code>とすることで、<code>network</code>ジョブが実行されていないとスキップする条件としています。<br>この設定をする理由は、<code>network</code>ディレクトリ内のリソースを作成しないと<code>main</code>ディレクトリ内のリソースを作成できないと言った依存関係が発生している場合に利用するケースです。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>GitHub Actions を利用することでTerraform の実行環境を容易に作成できるかと思います。</p><p>また、ここで説明した内容以外にもたくさんの方法があるので色々試して頂ければ幸いです。</p><p>ありがとうございました！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="DevOps" scheme="https://future-architect.github.io/categories/DevOps/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="CI/CD" scheme="https://future-architect.github.io/tags/CI-CD/"/>
    
    <category term="GitHubActions" scheme="https://future-architect.github.io/tags/GitHubActions/"/>
    
  </entry>
  
  <entry>
    <title>ChatGPTなどの大規模言語モデルが労働市場に与える影響の分析</title>
    <link href="https://future-architect.github.io/articles/20230404a/"/>
    <id>https://future-architect.github.io/articles/20230404a/</id>
    <published>2023-04-03T15:00:00.000Z</published>
    <updated>2023-04-04T06:21:33.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニットの村上です。<br>世界中で話題となっているChatGPTですが、その開発元であるOpenAIから大規模言語モデル(LLM)が労働市場に与える影響について分析した論文が公開されました。</p><p><a href="https://arxiv.org/abs/2303.10130">https://arxiv.org/abs/2303.10130</a></p><p>この論文ではLLMの影響度を評価する方法を提案し、それによって評価した結果を分析しています。</p><p>今回はこの論文で述べられたLLMの影響についてご紹介したいと思います。これから世界の労働市場がAIによってどのように変わっていくのか、自分は一人の労働者としてどのように動くべきかを考える参考なれば幸いです。</p><h1 id="主要な結果"><a href="#主要な結果" class="headerlink" title="主要な結果"></a>主要な結果</h1><p>先に主要な結果を掲載します。<br>以下の表はLLMの影響を受けない可能性の高い職種です。逆にこれら以外の職種は少なからず影響を受けると考えられます。</p><img src="/images/20230404a/image.png" alt="" width="737" height="1004" loading="lazy"><p>影響を職種全体で集計すると以下のようになります。</p><ul><li>米国の労働者の約80%がLLMの導入により少なくとも10%の業務に影響を受ける可能性がある</li><li>約19%の労働者は少なくとも50%の業務に影響を受ける可能性がある</li><li>高所得の職種ほどLLMの機能やLLMを搭載したプロダクトに触れる機会が多くなる可能性がある</li><li>米国の労働者の全タスクの約15%が同じ品質で大幅に早く完了できる可能性がある。LLMのさらに上に構築したシステムを用いる場合はこの割合が47%~56%に増加する</li></ul><h1 id="LLMの影響の評価方法"><a href="#LLMの影響の評価方法" class="headerlink" title="LLMの影響の評価方法"></a>LLMの影響の評価方法</h1><p>本論文では評価方法の提案が主要な内容の一つになります。前提とする条件から順に見ていきたいと思います。</p><h2 id="用語の定義"><a href="#用語の定義" class="headerlink" title="用語の定義"></a>用語の定義</h2><ul><li>論文では <strong>「品質を保った状態でタスクを完了するのにかかる時間を50%削減できる可能性があること」</strong> を <strong>「LLMの影響がある」</strong> と定義しています。実際にはもう少し削減率が減少すると考えて大きめの値で設定したという背景があるようです。</li><li><strong>「品質を保った状態」</strong> とは、<strong>「人間が自力で完成させたのか、LLMの支援を受けて完成させたのか、レビューする人が見わけがつかない」</strong> ことを指します。</li></ul><h2 id="想定するLLMの仕様"><a href="#想定するLLMの仕様" class="headerlink" title="想定するLLMの仕様"></a>想定するLLMの仕様</h2><ul><li>テキストの入力と出力が存在し、入力には最大2000語を与えることができる</li><li>モデルの獲得している知識には直近1年以内のものが存在しないが、入力に直近1年以内の情報を含めることでそれを考慮した処理を行うことはできる</li></ul><h2 id="想定する労働者"><a href="#想定する労働者" class="headerlink" title="想定する労働者"></a>想定する労働者</h2><ul><li>与えられたタスクを完了するために必要なスキルを平均的なレベルで習得済み</li><li>LLMとタスクで必要とされるあらゆる道具を利用することができる</li><li>一般的なノートパソコンに備わっているマイクやスピーカーなどのハードウェアを利用することができる</li><li>上記以外の物理的な道具は用いることができない</li></ul><h2 id="タスクのカテゴリ分け"><a href="#タスクのカテゴリ分け" class="headerlink" title="タスクのカテゴリ分け"></a>タスクのカテゴリ分け</h2><p>LLMとそれに付随するシステムを仮定し、LLMの影響を受けるかどうかで分類を行います。</p><div class="scroll"><table><thead><tr><th>カテゴリ</th><th>概要</th><th>タスクの例</th></tr></thead><tbody><tr><td>E1</td><td>LLMのみで影響を与える</td><td>仕様に沿ったソースコードの編集や生成、テキスト翻訳や文章の要約など</td></tr><tr><td>E2</td><td>LLMだけでは影響を与えることはないが、LLMを搭載したアプリケーションなら影響を与える</td><td>プレゼンテーション資料の作成、データベース管理など</td></tr><tr><td>E3</td><td>LLMに加えて画像の閲覧、説明、生成ができるシステムを利用可能であれば影響を与えることができる</td><td>PDFからテキストを読み取る、指示に従って画像の編集や生成を行うなど</td></tr><tr><td>E0</td><td>上記のいずれのカテゴリにも該当しないタスク。どのカテゴリか迷った場合はこれになる</td><td>ハードウェアの修理や清掃、雇用の決定や試験の採点など</td></tr></tbody></table></div><p>E0の例について補足します。雇用の決定や試験の採点など、人間の人生を大きく左右するようなタスクには影響があってはならないという考えが導入されています。LLMはあくまで推奨にとどまり、最終的な決定を行うのは人間であるべきという考え方です。</p><h2 id="評価方法"><a href="#評価方法" class="headerlink" title="評価方法"></a>評価方法</h2><p>OpenAIの誇る人間のアノテーターと分類器としてのGPT-4を用意し、それぞれにE0~E3のカテゴリ分けを行ってもらい、人間とGPT-4の分類結果をもとに影響の有無を分析していきます。人間だけのカテゴリ分けではその作業者の主観が少なからず反映されてしまうため、GPT-4のカテゴリ分けも合わせて考慮します。</p><h2 id="データセット"><a href="#データセット" class="headerlink" title="データセット"></a>データセット</h2><p>米国の職業とタスクのデータを用います。データソースはO*NETデータベースです。このデータセットには職業に関する情報とその職業のあるタスクを完了するための包括的な行動が含まれています。<br>また、職業データに加えて賃金、雇用、人口統計のデータも利用します。このデータセットには各職の労働者数や職で必要とされる教育、OJTなどの情報が含まれています。</p><h1 id="LLMによる影響の分析結果"><a href="#LLMによる影響の分析結果" class="headerlink" title="LLMによる影響の分析結果"></a>LLMによる影響の分析結果</h1><p>この章ではLLMやそれを搭載したアプリケーションによる影響の分析結果を解説します。</p><h2 id="人間とGPT-4の評価結果の比較"><a href="#人間とGPT-4の評価結果の比較" class="headerlink" title="人間とGPT-4の評価結果の比較"></a>人間とGPT-4の評価結果の比較</h2><p>人間とGPT-4の評価結果を比較してみると、両者で高い一致率を示しました。</p><img src="/images/20230404a/image_2.png" alt="" width="750" height="340" loading="lazy"><p>表の<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.229ex" height="1.486ex" role="img" focusable="false" viewBox="0 -441 543 657"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g></g></g></svg></mjx-container>の列の説明は以下です。</p><div class="scroll"><table><thead><tr><th><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.229ex" height="1.486ex" role="img" focusable="false" viewBox="0 -441 543 657"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g></g></g></svg></mjx-container></th><th>説明</th></tr></thead><tbody><tr><td><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container></td><td>E1だけの評価</td></tr><tr><td><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 566 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container></td><td>E1に加えてE2を半分考慮した評価</td></tr><tr><td><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="1.066ex" height="2.054ex" role="img" focusable="false" viewBox="0 -704 471 908"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D701" d="M296 643Q298 704 324 704Q342 704 342 687Q342 682 339 664T336 633Q336 623 337 618T338 611Q339 612 341 612Q343 614 354 616T374 618L384 619H394Q471 619 471 586Q467 548 386 546H372Q338 546 320 564L311 558Q235 506 175 398T114 190Q114 171 116 155T125 127T137 104T153 86T171 72T192 61T213 53T235 46T256 39L322 16Q389 -10 389 -80Q389 -119 364 -154T300 -202Q292 -204 274 -204Q247 -204 225 -196Q210 -192 193 -182T172 -167Q167 -159 173 -148Q180 -139 191 -139Q195 -139 221 -153T283 -168Q298 -166 310 -152T322 -117Q322 -91 302 -75T250 -51T183 -29T116 4T65 62T44 160Q44 287 121 410T293 590L302 595Q296 613 296 643Z"></path></g></g></g></svg></mjx-container></td><td>E1とE2の両方を考慮した評価</td></tr></tbody></table></div><p>Agreementの項目に注目すると、人間とGPT-4の評価の一致率が高いことが分かります。<br>ピアソンの相関係数も正の値を示しているため、全体的な傾向として人間とGPT-4が同じような評価をしていることが分かります。</p><h2 id="賃金と影響の関係"><a href="#賃金と影響の関係" class="headerlink" title="賃金と影響の関係"></a>賃金と影響の関係</h2><p>賃金と影響の関係は以下のような結果になりました。</p><img src="/images/20230404a/賃金とLLM影響度の関係.png" alt="賃金とLLM影響度の関係" width="1200" height="495" loading="lazy"><p>横軸が賃金(logスケール)、縦軸が影響度です。<br>人間、GPT-4ともに賃金が高くなるにつれて影響が大きいと判断しています。</p><h2 id="ジョブゾーンごとの影響分析"><a href="#ジョブゾーンごとの影響分析" class="headerlink" title="ジョブゾーンごとの影響分析"></a>ジョブゾーンごとの影響分析</h2><p>ジョブゾーンとは以下の観点に従って職種をグループ分けしたものになります。</p><ul><li>その職業に就くために必要な教育レベル</li><li>その職業に就くために必要な経験</li><li>その仕事をこなせるようになるために必要なOJTの量</li></ul><p>O*NETデータセットではジョブゾーンが5段階に分類されており、ジョブゾーン1からジョブゾーン5にかけて上記3点の必要量が増加します。つまり、ジョブゾーン5が最も求められる知識や能力が高く、参入障壁の高い職業であるということになります。</p><img src="/images/20230404a/image_3.png" alt="" width="1200" height="610" loading="lazy"><p>こちらのグラフはジョブゾーンごとに見た影響度を示しています。縦軸がジョブゾーンごとの職業の割合、横軸が影響を受けるタスクの割合の最小値です。つまり、右に行くほどLLMの影響を受けるタスクの割合が多いことになります。</p><p>基本的にジョブゾーンの数値が大きくなるほど（参入障壁の高い職種ほど）影響を受けるということになりますが、ジョブゾーン5はジョブゾーン4よりも影響が小さいという結果になりました。</p><h2 id="特に影響を受ける職業の分析"><a href="#特に影響を受ける職業の分析" class="headerlink" title="特に影響を受ける職業の分析"></a>特に影響を受ける職業の分析</h2><p>各カテゴリで特に影響を受ける職業のリストは以下になります。</p><img src="/images/20230404a/特にLLM影響を受ける職業リスト.png" alt="特にLLM影響を受ける職業リスト" width="754" height="1039" loading="lazy"><p>これらはあくまで「影響がある」の定義に特に当てはまることを示しており、その職業のタスクが完全に人間からLLMに代替されることを示唆しているわけではありません。</p><h2 id="その他論文で示唆された事実"><a href="#その他論文で示唆された事実" class="headerlink" title="その他論文で示唆された事実"></a>その他論文で示唆された事実</h2><ul><li>科学やクリティカルシンキングスキルは影響を受けにくい</li><li>プログラミングとライティングのスキルは強く影響を受ける</li><li>IT業界は影響が大きい</li><li>製造業、農業、鉱業は影響が小さい</li></ul><h1 id="現在のLLMの課題と補完技術の重要性"><a href="#現在のLLMの課題と補完技術の重要性" class="headerlink" title="現在のLLMの課題と補完技術の重要性"></a>現在のLLMの課題と補完技術の重要性</h1><p>現在のLLMには以下のような特徴が存在することで、総じて信憑性の観点で課題が残っています。</p><ul><li>LLMが不正確な事実を知識として獲得する可能性がある</li><li>RLHFの性質上、少なからずバイアスが存在する</li><li>プライバシー周りが整っていない</li><li>LLMが意図的な偽情報をつかまされる可能性がある</li></ul><p>上記考察から、これらの課題を補完する技術を組み合わせることは非常に重要であり、LLMの影響を飛躍的に拡大することにつながります。</p><h1 id="GPTはGPTなのか"><a href="#GPTはGPTなのか" class="headerlink" title="GPTはGPTなのか"></a>GPTはGPTなのか</h1><p>最後に論文のタイトルでもある「Generative Pre-trained Transformers (GPT) は General Purpose Technology (GPT) なのか」という観点の考察です。</p><p>ここまでの議論からLLMは労働市場に多大な影響を与えることが分かったため、総合的に見て <strong>Generative Pre-trained Transformers は General Purpose Technologyである</strong> と著者らは結論付けています。</p><p>また、<a href="https://mackinstitute.wharton.upenn.edu/wp-content/uploads/2021/03/Teodoridis-Florenta-Goldfarb-Avi-and-Taska-Bledi_Could-machine-learning-be-a-general-purpose-technology.pdf">Goldfarbらの研究</a>では広義の意味での機械学習は汎用技術である可能性が高いと主張していますが、今回の研究はそれを支持する結果となりました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>最後まで読んでいただきありがとうございました！</p><p>確かに今回の研究でGPT-4を分類器として機能させたことは汎用技術という主張の材料になりますので、納得感がありました。事前学習済みモデルの威力が発揮された形です。</p><p>また、確かにもともと機械学習はどちらかと言うとある特定領域に特化したモデルで人間を代替することを期待されていた節があるため、本研究によって機械学習が汎用技術になりうると主張することには意義があるように思いました。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://arxiv.org/abs/2303.10130">GPTs are GPTs: An Early Look at the Labor Market Impact Potential of Large Language Models</a></li><li><a href="https://mackinstitute.wharton.upenn.edu/wp-content/uploads/2021/03/Teodoridis-Florenta-Goldfarb-Avi-and-Taska-Bledi_Could-machine-learning-be-a-general-purpose-technology.pdf">Could machine learning be a general purpose technology? A comparison of emerging technologies using data from online job postings</a></li><li><a href="https://www.soumu.go.jp/johotsusintokei/whitepaper/ja/h30/html/nd121120.html#:~:text=%E7%B5%84%E7%B9%94%E3%82%84%E5%88%B6%E5%BA%A6%E3%81%AE%E6%94%B9%E9%9D%A9,%E3%81%A8%E5%91%BC%E3%81%B0%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%80%82">第1部　特集　人口減少時代のICTによる持続的成長</a></li><li><a href="https://arxiv.org/pdf/2203.02155.pdf">Training language models to follow instructions with human feedback</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG</summary>
        
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="機械学習" scheme="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/"/>
    
    <category term="NLP" scheme="https://future-architect.github.io/tags/NLP/"/>
    
    <category term="OpenAI" scheme="https://future-architect.github.io/tags/OpenAI/"/>
    
    <category term="ChatGPT" scheme="https://future-architect.github.io/tags/ChatGPT/"/>
    
    <category term="LLM" scheme="https://future-architect.github.io/tags/LLM/"/>
    
  </entry>
  
  <entry>
    <title>Terraform x GitOps</title>
    <link href="https://future-architect.github.io/articles/20230403a/"/>
    <id>https://future-architect.github.io/articles/20230403a/</id>
    <published>2023-04-02T15:00:00.000Z</published>
    <updated>2023-04-03T01:42:05.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！TIG コアテクの川口です。</p><p>こちらは、 <a href="/articles/20230327a/">Terraform 連載</a> の6日目の記事になります！<br>今回は <strong>Terraform x GitOps</strong> について調査しました。</p><h2 id="Terraform-x-GitOps"><a href="#Terraform-x-GitOps" class="headerlink" title="Terraform x GitOps?"></a>Terraform x GitOps?</h2><p>そもそも <strong>Terraform x GitOps</strong> とはなんぞやということからですが。<br>まず <strong>GitOps</strong> という概念は、 <a href="https://www.weave.works/technologies/gitops/">Weaveworks 社によってはじめに提唱されたもの</a> です。</p><p>主に Kubernetes リソースを管理する文脈で登場した概念で、4つの主要な原則として以下のように定義しています。</p><blockquote><p><strong>#1. Declarative: The entire system has to be described declaratively</strong><br>~ システム全体を宣言的に記述する。~<br><strong>#2. Versioned and immutable: The canonical desired system state is versioned in Git</strong><br>~ 望ましいシステムの基準の状態は、Git でバージョン管理されてイミュータブルとする。 ~<br><strong>#3. Pulled automatically: Approved changes are automatically applied to the system</strong><br>~ 承認された変更はシステムに自動的に適用される。 ~<br><strong>#4. Continuously reconciled: Software agents to ensure correctness and alert on divergence</strong><br>~ 正確性を確保して、相違点を警告するソフトウェアエージェント。 ~</p></blockquote><p>今回は、Terraform 連載ということで Terraform を運用するうえでこのような考え方を取り入れる方法について述べていきます。</p><h2 id="利用するサービス"><a href="#利用するサービス" class="headerlink" title="利用するサービス"></a>利用するサービス</h2><p>それでは早速 GitOps を実現するうえで利用するサービスについて考えていきます。</p><h2 id="一般的な-CI-x2F-CD-サービス"><a href="#一般的な-CI-x2F-CD-サービス" class="headerlink" title="一般的な CI&#x2F;CD サービス"></a>一般的な CI&#x2F;CD サービス</h2><p>一般的なとは？というお話ですが…。「後述の2つのものとは違うよ。」といった意味合いで用いています。<br>具体的なものでいうと以下のようなものを指しています。</p><ul><li><strong>GitHub Actions</strong></li><li><strong>Jenkins</strong> （<a href="https://future-architect.github.io/articles/20230330a/">4日目の渡邉さんの記事</a>でも詳細に紹介されていましたね！）</li><li><strong>GitLab CI&#x2F;CD</strong></li><li><strong>CircleCI</strong></li><li><strong>Travis CI</strong></li><li><strong>Google Cloud Build</strong></li><li><strong>AWS CodePipeline</strong></li><li><strong>Azure DevOps Pipelines</strong></li><li>…</li></ul><p>今回の記事でどれを取り上げるか悩みましたが、広く利用されている <strong>GitHub Actions</strong> を取り上げようと思います。</p><h3 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions?"></a>GitHub Actions?</h3><p><strong>GitHub Actions</strong> とは、GitHub上で自動化されたワークフローを作成・実行できる機能です。GitHub を開発時に利用している場合には、扱いやすさの観点で採用されやすいサービスだと個人的には思っています。</p><p>また、<a href="https://docs.github.com/en/actions/using-workflows/triggering-a-workflow#using-filters-to-target-specific-paths-for-pull-request-or-push-events">変更されたファイルをもとにイベントを発火する</a> 機能はなかなかユニークだなーとなった記憶があります。（最近だと、他サービスも拡張機能等で実現できるようにしていそうですが。）</p><p>GitHub Actions でいうところのいわゆる拡張機能は、<strong>Actions</strong> と呼ばれるもので様々な開発者が提供してくれています。どのようなものがあるかを調べるには、<a href="https://github.com/marketplace?type=actions">こちら</a> の <strong>Actions MarcketPlace</strong> が参考になると思います。その他詳細に関しては、 <a href="https://docs.github.com/en/actions">ドキュメント</a> を参照してください。</p><h3 id="GitOps-に特化した-CD-サービス"><a href="#GitOps-に特化した-CD-サービス" class="headerlink" title="GitOps に特化した CD サービス"></a>GitOps に特化した CD サービス</h3><p>次に GitOps に特化した CD サービスということで以下のようなサービスを対象とします。</p><p>以下は、Kubernetes リソースを管理する際によく名前にあがるものかなと思いますが、Terraform の各種リソースに関しても管理ができるように対応されているようです。</p><ul><li><strong><a href="https://pipecd.dev/docs/user-guide/managing-application/defining-app-configuration/terraform/">PipeCD（Terraform x GitOps）</a></strong></li><li><strong><a href="https://fluxcd.io/blog/2022/09/how-to-gitops-your-terraform/">FluxCD（Terraform x GitOps）</a></strong></li><li>…</li></ul><p>今回の記事では Terraform x GitOps をやるうえで、その周辺の開発が最も進んでいそうな <strong>PipeCD</strong> を取り上げてみようと思います！</p><h2 id="PipeCD"><a href="#PipeCD" class="headerlink" title="PipeCD?"></a>PipeCD?</h2><p><strong>PipeCD</strong> とは、GitOps を実現するための CD ツールの1つです。Kubernetes x GitOps の文脈で見かけることが多いかなと思っています。他 GitOps CD ツールとの差異としては、Kubernetes リソースの他に、各種クラウドサービス（Cloud Run, Amazon ECS, AWS Lambda）を利用できることと <a href="https://pipecd.dev/docs-dev/faq/">しているよう</a>  です。</p><p>また、下記のように GitOps という用語が説明にあるサービスなだけあって上記の GitOps の原則を守るための機能は一通り有しているようです。</p><blockquote><p>A GitOps style continuous delivery platform that provides<br>consistent deployment and operations experience for any applications</p></blockquote><p>詳細は、 <a href="https://pipecd.dev/">ドキュメント</a> を参照してください。</p><h2 id="Terraform-管理に特化したサービス"><a href="#Terraform-管理に特化したサービス" class="headerlink" title="Terraform 管理に特化したサービス"></a>Terraform 管理に特化したサービス</h2><p>最後は Terraform 管理に特化したサービスということで以下のようなサービスを対象とします。</p><ul><li><strong><a href="https://developer.hashicorp.com/terraform/cloud-docs">Terraform Cloud</a></strong></li><li><strong><a href="https://www.runatlantis.io/">Atlantis</a></strong></li><li>…</li></ul><p>今回の記事ではこちらの2つのサービス <strong>Terraform Cloud</strong> と <strong>Atlantis</strong> を取り上げてみようと思います！</p><h2 id="Terraform-Cloud"><a href="#Terraform-Cloud" class="headerlink" title="Terraform Cloud?"></a>Terraform Cloud?</h2><p><strong>Terraform Cloud</strong> とは、Terraform をクラウド上で管理するためのツールです。<br>plan, apply 等の各種作業をクラウド上でできるようになります。</p><p>それだと GitOps は？といったことになりそうですが、様々な <a href="https://developer.hashicorp.com/terraform/cloud-docs/vcs">VCS Integration</a> を提供しているため、こちらを使えば実現できます。<br>ただし、ユーザー数や利用する機能によっては <a href="https://www.hashicorp.com/products/terraform/pricing">有料になる</a> ためそこには注意が必要そうです。</p><p>ドキュメントは、 <a href="https://developer.hashicorp.com/terraform/cloud-docs">こちら</a> になります。</p><h2 id="Atlantis"><a href="#Atlantis" class="headerlink" title="Atlantis?"></a>Atlantis?</h2><p>最後に取り上げるのは <strong>Atlantis</strong> です。<a href="https://www.runatlantis.io/guide/#enable-collaboration-with-everyone">こちら</a> でわかりやすく概念等について述べられていました。</p><p>イメージとしては Git の PR 上で ChatOps 的に <a href="https://www.runatlantis.io/docs/using-atlantis.html">plan, apply 等</a> の実行を行えるツールといったものになりそうですかね！<br>個人的には、plan には成功したけれど apply で失敗する…。といったこともまあまあ起こりうるのかなーと思っているので、main に merge されたら apply するというよりかは、PR 上で apply まで担保できるようにするといった運用が取れるのはなかなか良さそうなのカナーと思いました。</p><p>さらに <a href="https://www.runatlantis.io/docs/locking.html">独自のロックの機構</a> も持っているようで、この機能によりチーム単位で修正を行う際でも安全に plan や apply を行えそうです。<br>このロックは、もちろんリポジトリ単位ではなくディレクトリ単位や Terraform Workspace 単位でロックがかかるようになっているようです。（そもそもどのようなディレクトリ構成の Terraform を扱えるかは <a href="https://www.runatlantis.io/docs/requirements.html#repository-structure">こちら</a> に記載があります。）<br>GitHub Actions 等でもいわゆる ChatOps 的な運用を実現することは可能ではあるのですが、なかなかここまで厳密なロックの機構を実現するのは難しそうなのかなと思います。</p><p>その他詳細は、<a href="https://www.runatlantis.io/docs/">ドキュメント</a> を参照してください。</p><h1 id="GitOps-やっていき！"><a href="#GitOps-やっていき！" class="headerlink" title="GitOps やっていき！"></a>GitOps やっていき！</h1><p>それでは早速上述のサービスについて触れていきます。</p><p>今回は Git ホスティングサービスとしては、 <strong>GitHub</strong> を対象とします。<br>また Terraform の管理対象としては <strong>Google Cloud の各種リソース</strong> とします。</p><p>改めてですが GitOps の原則に忠実に則るということであれば、<strong>「コンソール等からシステムの状態・構成を変更するような作業は一切禁止とする。」</strong> ことにも注意です。上述の #1, #2 の原則に反するからですね！</p><h1 id="GitHub-Actions-を使った-GitOps"><a href="#GitHub-Actions-を使った-GitOps" class="headerlink" title="GitHub Actions を使った GitOps"></a>GitHub Actions を使った GitOps</h1><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p><a href="https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners"><strong>Self Hosted Runners</strong></a>（ランナーを自分でホスティングする） を使わずに、 <a href="https://docs.github.com/ja/actions/using-github-hosted-runners/about-github-hosted-runners"><strong>GitHub Hosted Runners</strong></a>（ランナーを GitHub にホスティングしてもらう）を使うということであれば、特にインストール作業は必要にはなりません。</p><p>これらの違いに関しては、 <a href="https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners#differences-between-github-hosted-and-self-hosted-runners">こちら</a> にわかりやすくまとめられていました。他サービスの類似概念とほぼ同様かなと思いますが、主にメンテナンスコスト・カスタマイズ性・プライシングの面で差異があるようです。</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>上述の通りに GitHub Actions では様々な Actions が公開されており、 Terraform を管理するためのものもありました。<br>基本的に今回の用途であれば、以下の二つの Actions を使用してワークフローを組むとよさそうです。</p><ul><li><a href="https://github.com/hashicorp/setup-terraform">setup terraform</a>: Terraform をよしなに扱えるようにする Action。</li><li><a href="https://github.com/google-github-actions/auth">google auth</a>: Google Cloud の認証を行う Action。（Wokload Identity による認証とサービスアカウントのキーを使った認証のどちらにも対応している様子。）</li></ul><p>GitHub Actions では、<a href="https://docs.github.com/en/actions/using-workflows/triggering-a-workflow">こちら</a> のように様々なトリガーが設定できます。また、先ほどのパスの概念も用いれば柔軟に運用はできそうですね！</p><p>原則 #4 に従うとなるとなかなか難しそうですが、厳密に相違点が出た場合に検知したいということであれば、 <a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule">schedule workflow</a> を使ってチェックする感じですかね。（そこまで厳密にやらなければならないケースがあるかは悩ましいところですが。）</p><p>また、排他制御に関しても、<a href="https://docs.github.com/en/actions/using-jobs/using-concurrency">concurrency</a> という概念がある程度利用できそうです。</p><h1 id="PipeCD-を使った-GitOps"><a href="#PipeCD-を使った-GitOps" class="headerlink" title="PipeCD を使った GitOps"></a>PipeCD を使った GitOps</h1><h2 id="Install-1"><a href="#Install-1" class="headerlink" title="Install"></a>Install</h2><p>PipeCD を扱うためには、 <strong>Control Plane</strong> と <strong>Piped</strong> を <a href="https://pipecd.dev/docs-dev/installation">インストールする必要があります</a>。そもそも Control Plane とは？ Piped とは？といったところは <a href="https://pipecd.dev/docs-dev/concepts/">PipeCD の Concepts</a> に記載されています。</p><p>イメージとしては、Control Plane が集中管理用のコンポーネント（Web コンソール等を含む）でおおよそ組織単位で1つできるもの。Piped が GitOps を行いたい各種対象と疎通をするためのステートレスエージェントでおおよそ開発環境単位で1つできるものといったものになるのかなと思います。（諸々運用によっては変わりそうではありそうな気配はありますが、本筋から逸れるのでそこまでは言及しません！）</p><p>以下は上記リンクに記載がありました概念図になります。</p><img src="/images/20230403a/image.png" alt="" width="1200" height="761" loading="lazy"><p>Control Plane をインストールするには状態を永続化する必要があるため、Kubernetes Cluster の他に <strong><a href="https://pipecd.dev/docs-dev/user-guide/managing-controlplane/architecture-overview/#data-store">Data Store（Firestore, MySQL etc…）</a>, <a href="https://pipecd.dev/docs-dev/user-guide/managing-controlplane/architecture-overview/#file-store">File Store（GCS, S3, Minio etc…）</a></strong> が <a href="https://pipecd.dev/docs-dev/installation/install-controlplane/">必要のようです</a>。他にも Web コンソールに円滑にアクセスしようとなった場合には、いくつかのネットワークの設定（静的IP アドレスの付与や DNS の設定 etc…）もする必要がありそうですね！</p><p>Piped のインストールは Piped 自体がステートレスなエージェントということで、そこまで複雑ではなさそうです。Kubernetes Cluster に helm でインストールする他にも、 <a href="https://pipecd.dev/docs-dev/installation/install-piped">いくつか方法がある</a> ようです。</p><h2 id="Setup-1"><a href="#Setup-1" class="headerlink" title="Setup"></a>Setup</h2><p>上記の手順が完了したら、PipeCD を実際に試せる状態になっているはずです。ただ実際に、Terraform リソースを扱おうとなった場合には、さらに以下の手順を実行することになります。</p><h3 id="Terraform-Application-の作成"><a href="#Terraform-Application-の作成" class="headerlink" title="Terraform Application の作成"></a>Terraform Application の作成</h3><p>はじめにやることは Terraform Application の作成です。そもそも Application とは？といったところも、 <a href="https://pipecd.dev/docs-dev/concepts/#application">Concepts</a> に記載がありました。</p><p><a href="https://pipecd.dev/docs-dev/user-guide/managing-application/adding-an-application">https://pipecd.dev/docs-dev/user-guide/managing-application/adding-an-application</a></p><p>こちらを作成することにより、PipeCD と Git リポジトリの対応するディレクトリとのマッピングを行っているのですね。</p><p>またそのディレクトリ内に、 <code>app.pipecd.yaml</code> というファイルを配置することにより、<a href="https://pipecd.dev/docs/user-guide/managing-application/defining-app-configuration/terraform/">詳細な CD の手順を組んでいく</a> ようです。</p><p>Terraform を設定する際の example もいくつか <a href="https://github.com/pipe-cd/examples/tree/master/terraform">公開されていました</a>。また GitOps を謳っているサービスなだけあって、<a href="https://pipecd.dev/docs-dev/user-guide/managing-application/configuration-drift-detection/">Application のドリフト検出</a> が提供されているのはよいですね！</p><h3 id="Secret-Management-の設定"><a href="#Secret-Management-の設定" class="headerlink" title="Secret Management の設定"></a>Secret Management の設定</h3><p>次にやることは、 <a href="https://pipecd.dev/docs-dev/user-guide/managing-application/secret-management/">Secret Management の設定</a> です。Secret Management とは、各種秘匿情報を Git 上で管理できるようにするための機能です。</p><p>上記の Terraform Application の例を参照すると、 <a href="https://github.com/pipe-cd/examples/tree/master/terraform/simple/.credentials">credentials ディレクトリ</a> があり、そこでコマンド実行用の Service Account のキー配置を行っているようですね。ただセキュリティの観点からそのままキーを Git の管理下に置くことはできないため、この Secret Management の機能を利用して適切に暗号化の処理を行なっているようです。</p><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><p>その他の設定として必須ではないにせよ、やると便利そうなこととしては以下がありそうでした。</p><ul><li><strong>Slack 通知の設定:</strong> <a href="https://pipecd.dev/docs-dev/user-guide/managing-piped/configuring-notifications">https://pipecd.dev/docs-dev/user-guide/managing-piped/configuring-notifications</a><ul><li>いくつかのイベントを Slack 通知してくれる機能です。</li></ul></li><li><strong>GitHub 上での Plan Preview の設定:</strong> <a href="https://pipecd.dev/docs-dev/user-guide/plan-preview">https://pipecd.dev/docs-dev/user-guide/plan-preview</a><ul><li>PR 上で、Plan の Preview を行ってくれる機能です。（GitHub Actions にも、公式の <a href="https://github.com/pipe-cd/actions-plan-preview">Actions</a> が公開されているようでした。）</li></ul></li></ul><h1 id="Terraform-Cloud-を使った-GitOps"><a href="#Terraform-Cloud-を使った-GitOps" class="headerlink" title="Terraform Cloud を使った GitOps"></a>Terraform Cloud を使った GitOps</h1><h2 id="Install-2"><a href="#Install-2" class="headerlink" title="Install"></a>Install</h2><p>すべてクラウド上で管理できるようになっているため、特別何かをインストールする必要はありません。（ただし GitHub と連携する際に、GitHub Actions を使用することになるため、先述の Self Hosted Runner を使う場合にはその設定が必要になります。）</p><h2 id="Setup-2"><a href="#Setup-2" class="headerlink" title="Setup"></a>Setup</h2><p>GitHub と連携する際の各種セットアップに関しては、 <a href="https://developer.hashicorp.com/terraform/tutorials/automation/github-actions">こちら</a> にチュートリアルとして記載がありました。<br>このセットアップ手順により構築できる運用フローは以下のようなものになりそうで、わかりやすいですね！</p><img src="/images/20230403a/image_2.png" alt="" width="1006" height="265" loading="lazy"><p>PR 上でのプレビューもあり、運用のイメージもしやすいです。</p><img src="/images/20230403a/assets.gif" alt="" width="800" height="599" loading="lazy"><p>もちろん履歴は、Terraform Cloud 上から（この場合だと GitHub Actions 上からも。）わかりやすく確認できるようになっています。</p><p>その他 Terraform Cloud のユニークな機能について、下記にあげておきます。</p><h3 id="Policy-Enforcemnt"><a href="#Policy-Enforcemnt" class="headerlink" title="Policy Enforcemnt"></a>Policy Enforcemnt</h3><p><a href="https://developer.hashicorp.com/terraform/cloud-docs/policy-enforcement"><strong>Policy Enforcement</strong></a> は、あらかじめ設定したポリシーを実行時に適用してセキュリティルールやベストプラクティスに準拠できているかを検証する機能です。<br>※ 現在 Cloud Team &amp; Governance 以上のプランでのみ使える機能です。</p><p>以下の2つの policy-as-code フレームワークを用いることができます。</p><ul><li><strong><a href="https://docs.hashicorp.com/sentinel/concepts/language">Sentinel</a></strong></li><li><strong><a href="https://www.openpolicyagent.org/docs/latest/policy-language/">OPA</a></strong></li></ul><h3 id="Cost-Estimation"><a href="#Cost-Estimation" class="headerlink" title="Cost Estimation"></a>Cost Estimation</h3><p><a href="https://developer.hashicorp.com/terraform/cloud-docs/cost-estimation"><strong>Cost Estimation</strong></a> は、コストの見積もりを行い、可視化する機能です。<br>※ 現在 Cloud Team &amp; Governance 以上のプランでのみ使える機能です。</p><p>なかなか魅力的な機能ではありそうですが、<strong>サポートされるリソースに関しては、<a href="https://developer.hashicorp.com/terraform/cloud-docs/cost-estimation#supported-resources">制限があるよう</a> なのでそちらは注意が必要そうです。</strong></p><h3 id="Drift-Detection"><a href="#Drift-Detection" class="headerlink" title="Drift Detection"></a>Drift Detection</h3><p><a href="https://www.hashicorp.com/campaign/drift-detection-for-terraform-cloud"><strong>Drift Detection</strong></a> は、差分検知を行い、差分があれば可視化、必要に応じて通知を飛ばせる機能です。（GitOps の原則 #4 を実現するための機能とも言えますね！）<br>※ 現在 Cloud Business 以上のプランでのみ使える機能です。</p><h1 id="Atlantis-を使った-GitOps"><a href="#Atlantis-を使った-GitOps" class="headerlink" title="Atlantis を使った GitOps"></a>Atlantis を使った GitOps</h1><h2 id="Install-Setup"><a href="#Install-Setup" class="headerlink" title="Install, Setup"></a>Install, Setup</h2><p>Atlantis のインストールや各種セットアップは、<a href="https://www.runatlantis.io/docs/installation-guide.html">こちら</a> にわかりやすくまとめられていました。</p><p>Atlantis も PipeCD と同じように自身で Atlantis の各種コンポーネントを <a href="https://www.runatlantis.io/docs/deployment.html">デプロイする必要</a> があります。デプロイの方法には様々なやり方があるようですが、すでに Kubernetes Cluster を飼っている場合には、Helm で一気にインストールできそうなのでそこまで負担もなさそうかなと思いました。</p><p>基本的なセットアップを行ったのちの運用イメージとしては、ホーム画面にプレビューがありました。</p><img src="/images/20230403a/image_3.png" alt="image.png" width="1200" height="2412" loading="lazy"><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回は、<strong>Terraform x GitOps</strong> を実現するにあたっていくつかの手法について調査をしてみました。</p><p>いくつかのサービスの所感としては以下のようになります。</p><ul><li><strong>GitHub Actions:</strong><ul><li>他のサービスと比べて、取り入れやすい。（すでに取り入れられているケースも多そう。）</li><li>任意のスクリプトが実行できて、かつ様々なトリガーを設定できるのでカスタマイズ性は豊富。</li><li>ただし、詳細なワークフローは自身で記載する必要があるので GitHub Actions そのものや、利用する Actions、各種 Terraform コマンドについての詳細な理解が必要になる。</li></ul></li><li><strong>PipeCD:</strong><ul><li>やや取り入れやすさは他と比べると見劣りしそう。ただし、すでに Kubernetes Cluster がある場合や、Kubernetes リソースを管理するサービスを探している場合には十分候補に上がりそう。</li><li>GitOps を忠実に再現できるところはメリット。</li></ul></li><li><strong>Terraform Cloud:</strong><ul><li>特別にインストール等の手順が必要なわけではないので取り入れやすくはあるが、ユーザー数や利用する機能によって有料になる点が注意。（マシン代等はかかるので、他のものが厳密に無料でできるということでもないですが。）</li><li>基本的な機能の他、Policy Enforcement や、Cost Estimation、Drift Detection 等のユニークな機能を有している。</li></ul></li><li><strong>Atlantis</strong><ul><li>様々なデプロイの方法があるとはいったもののデプロイの手間は一定かかってしまいそう。</li><li>ChatOps による運用ができる点や、独自のロック機能は個人的には魅力。</li></ul></li></ul><p>次は棚井さんの記事になりますー！お楽しみに〜！！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは！TIG コアテクの川口です。&lt;/p&gt;
&lt;p&gt;こちらは、 &lt;a</summary>
        
      
    
    
    
    <category term="DevOps" scheme="https://future-architect.github.io/categories/DevOps/"/>
    
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="GitOps" scheme="https://future-architect.github.io/tags/GitOps/"/>
    
    <category term="CI/CD" scheme="https://future-architect.github.io/tags/CI-CD/"/>
    
    <category term="GitHubActions" scheme="https://future-architect.github.io/tags/GitHubActions/"/>
    
    <category term="PipeCD" scheme="https://future-architect.github.io/tags/PipeCD/"/>
    
    <category term="TerraformCloud" scheme="https://future-architect.github.io/tags/TerraformCloud/"/>
    
    <category term="Atlantis" scheme="https://future-architect.github.io/tags/Atlantis/"/>
    
  </entry>
  
  <entry>
    <title>Terraformでの機密情報の取り扱い on Google Cloud</title>
    <link href="https://future-architect.github.io/articles/20230331a/"/>
    <id>https://future-architect.github.io/articles/20230331a/</id>
    <published>2023-03-30T15:00:00.000Z</published>
    <updated>2023-04-03T01:42:46.109Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230331a/mozillasops.png" alt="" width="711" height="411"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG岸下です。<a href="/articles/20230327a/">Terraform連載</a>の5リソース目の記事です。</p><h2 id="Terraform-v1-4-Release🎉"><a href="#Terraform-v1-4-Release🎉" class="headerlink" title="Terraform v1.4 Release🎉"></a>Terraform v1.4 Release🎉</h2><p>Terraformのv1.4が今月リリースされました。<br><a href="https://github.com/hashicorp/terraform/releases/tag/v1.4.0">https://github.com/hashicorp/terraform/releases/tag/v1.4.0</a></p><p>最近、Terraform内での機密情報の取り扱いについて触れることがあり、</p><blockquote><p>Interactive input for sensitive variables is now masked in the UI <a href="https://github.com/hashicorp/terraform/issues/29520">(#29520)</a></p></blockquote><p>こちらのENHANCEMENTを取り上げつつ、Terraform環境上での機密情報の取り扱いについて記載します。</p><h3 id="sensitive指定されたvariableの取り扱い"><a href="#sensitive指定されたvariableの取り扱い" class="headerlink" title="sensitive指定されたvariableの取り扱い"></a>sensitive指定されたvariableの取り扱い</h3><p>plan&#x2F;apply時にインタラクティブに入力を求めることができるvariableですが、以下のように<code>sensitive</code>フラグを指定することができます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_sql_user&quot;</span> <span class="string">&quot;test_user&quot;</span> &#123;</span><br><span class="line">  project  = google_project.project_one.project_id</span><br><span class="line">  name     = <span class="string">&quot;test-user&quot;</span></span><br><span class="line">  instance = google_sql_database_instance.test_db.name</span><br><span class="line">  host     = <span class="string">&quot;%&quot;</span></span><br><span class="line">  password = var.db_password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable <span class="string">&quot;db_password&quot;</span> &#123;</span><br><span class="line">  description = <span class="string">&quot;Database user password&quot;</span></span><br><span class="line">  <span class="built_in">type</span>        = string</span><br><span class="line">  sensitive   = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回のリリースにて<code>sensitive=true</code>にされたvariableは、入力する際にターミナル上で表示されなくなりました。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># これまで</span></span><br><span class="line">$ terraform apply</span><br><span class="line">var.db_password</span><br><span class="line">  Database user password</span><br><span class="line"></span><br><span class="line">  Enter a value:abcdefg</span><br><span class="line"></span><br><span class="line"><span class="comment"># Terraoform v1.4以降</span></span><br><span class="line">$ terraform apply</span><br><span class="line">var.db_password</span><br><span class="line">  Database user password</span><br><span class="line"></span><br><span class="line">  Enter a value:</span><br></pre></td></tr></table></figure><p>これまでのsensitive機能はapply&#x2F;plan結果やtfstateファイル内のマスキングのみでしたが、今回のリリースにて入力時にもマスキングされるようになった形です。</p><figure class="highlight sh"><figcaption><span>plan/apply結果やtfstateが(sensitive value)でマスキングされる（これまでの機能）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># google_sql_user.photo_app will be created</span></span><br><span class="line">  + resource <span class="string">&quot;google_sql_user&quot;</span> <span class="string">&quot;test_user&quot;</span> &#123;</span><br><span class="line">      + host                    = <span class="string">&quot;%&quot;</span></span><br><span class="line">      + <span class="built_in">id</span>                      = (known after apply)</span><br><span class="line">      + instance                = <span class="string">&quot;test-db&quot;</span></span><br><span class="line">      + name                    = <span class="string">&quot;test-user&quot;</span></span><br><span class="line">      + password                = (sensitive value)</span><br><span class="line">      + project                 = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">      + sql_server_user_details = (known after apply)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 1 to add, 0 to change, 0 to destroy.</span><br></pre></td></tr></table></figure><h2 id="実運用での機密情報の取り扱い"><a href="#実運用での機密情報の取り扱い" class="headerlink" title="実運用での機密情報の取り扱い"></a>実運用での機密情報の取り扱い</h2><p>ただ、このインタラクティブマスキング機能はあまり日の目を見ないかもしれません…😢<br>（plan&#x2F;apply時に毎回入力しないといけないのは面倒…）</p><p>実運用上では、<strong>関係者のみに閲覧権限の与えられたプライベートリポジトリを前提</strong>としてDBの認証情報やAPI key、証明書など共有リポジトリ上に置いておきたい機密情報があると思います。</p><p>その場合は、sopsを使って暗号化します。</p><h3 id="sops"><a href="#sops" class="headerlink" title="sops"></a>sops</h3><p>sopsはmozillaが開発している暗号化ツールです。</p><p><a href="https://github.com/mozilla/sops">https://github.com/mozilla/sops</a></p><p>YAML、JSON、ENV、INI、BINARYフォーマットに対応し、Google CLoud KMS、AWS KMS、Azure Key Vault、age、PGPにて利用することが可能です。</p><h3 id="sops-provider"><a href="#sops-provider" class="headerlink" title="sops-provider"></a>sops-provider</h3><p>また、Terraformではsopsのproviderを公開されており、こちらを利用することで暗号化されたファイルをplan&#x2F;apply時に自動で復号化してくれます。<br><a href="https://github.com/carlpett/terraform-provider-sops">https://github.com/carlpett/terraform-provider-sops</a></p><p>また、復号化した内容も先ほど取り上げた<code>(sensitive value)</code>として自動でマスキングしてくれるので、安心して取り扱うことができます。<br><strong>※(sensitive value)として自動でマスキングしてくれる機能はTerraform v0.15以上での対応となります。</strong></p><h3 id="Cloud-Key-Management-Service-Cloud-KMS"><a href="#Cloud-Key-Management-Service-Cloud-KMS" class="headerlink" title="Cloud Key Management Service(Cloud KMS)"></a>Cloud Key Management Service(Cloud KMS)</h3><p><a href="https://cloud.google.com/kms/docs/key-management-service?hl=ja">Cloud Key Management Service（Cloud KMS）</a>はGoogle Cloudの鍵作成・管理サービスで、鍵を生成したり、既存の鍵をCloud KMSへインポートして管理することができます。<br>また暗号化するための鍵をキーリングという形でグルーピングして管理することができます。</p><p>今回はsopsの暗号化に利用する鍵にKMSの鍵を利用します。<br>また、暗号化・復号化には以下のIAMロールが必要となります。</p><ul><li>roles&#x2F;cloudkms.cryptoKeyEncrypterDecrypter</li></ul><figure class="highlight sh"><figcaption><span>kms.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_kms_key_ring&quot;</span> <span class="string">&quot;key_ring&quot;</span> &#123;</span><br><span class="line">  project  = google_project.project_one.project_id</span><br><span class="line">  name     = <span class="string">&quot;test-key-ring&quot;</span></span><br><span class="line">  location = <span class="string">&quot;global&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_kms_crypto_key&quot;</span> <span class="string">&quot;test_key&quot;</span> &#123;</span><br><span class="line">  name     = <span class="string">&quot;test-key&quot;</span></span><br><span class="line">  key_ring = google_kms_key_ring.key_ring.id</span><br><span class="line">  purpose  = <span class="string">&quot;ENCRYPT_DECRYPT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">&quot;google_iam_policy&quot;</span> <span class="string">&quot;encrypter_and_decrypter&quot;</span> &#123;</span><br><span class="line">  binding &#123;</span><br><span class="line">    role    = <span class="string">&quot;roles/cloudkms.cryptoKeyEncrypterDecrypter&quot;</span></span><br><span class="line">    members = [<span class="string">&quot;user:xxx@test.com&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_kms_key_ring_iam_policy&quot;</span> <span class="string">&quot;key_ring_iam&quot;</span> &#123;</span><br><span class="line">  key_ring_id = google_kms_key_ring.key_ring.id</span><br><span class="line">  policy_data = data.google_iam_policy.encrypter_and_decrypter.policy_data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>リソース作成後、テスト用のAPI key（test-apikey.json）を用意しておき、sopsにて暗号化を行います。</p><figure class="highlight json"><figcaption><span>secrets/test-apikey.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span><span class="string">&quot;aaa&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>（sopsのインストールは公式のgoを利用した方法ではうまくいかず、<a href="https://docs.technotim.live/posts/install-mozilla-sops/">こちら</a>を参考にバイナリからインストールしました。）</p><figure class="highlight sh"><figcaption><span>sopsによる暗号化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sops --input-type json --encrypt --gcp-kms projects/&lt;PROJECT_ID&gt;/locations/global/keyRings/test-key-ring/cryptoKeys/test-key secrets/test-apikey.json &gt; secrets/test-apikey_encrypted.json</span><br></pre></td></tr></table></figure><p>今回、sops-providerを利用して自動で復号化を行うため、providerの追加を行います（terraform initを忘れずに）。</p><figure class="highlight sh"><figcaption><span>versions.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    google = &#123;</span><br><span class="line">      <span class="built_in">source</span>  = <span class="string">&quot;hashicorp/google&quot;</span></span><br><span class="line">      version = <span class="string">&quot;~&gt; 4.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># sopsを追加</span></span><br><span class="line">    sops = &#123;</span><br><span class="line">      <span class="built_in">source</span>  = <span class="string">&quot;carlpett/sops&quot;</span></span><br><span class="line">      version = <span class="string">&quot;~&gt; 0.7&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで準備が整ったので、API Keyを使うCloud Functionを書いてみます。</p><figure class="highlight sh"><figcaption><span>cloud_function.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_cloudfunctions_function&quot;</span> <span class="string">&quot;test-fnc&quot;</span> &#123;</span><br><span class="line">  project     = google_project.project_one.project_id</span><br><span class="line">  name        = <span class="string">&quot;test-fnc&quot;</span></span><br><span class="line">  region      = <span class="string">&quot;asia-northeast1&quot;</span></span><br><span class="line">  description = <span class="string">&quot;test function&quot;</span></span><br><span class="line"></span><br><span class="line">  runtime      = <span class="string">&quot;go119&quot;</span></span><br><span class="line">  <span class="built_in">timeout</span>      = 120</span><br><span class="line">  entry_point  = <span class="string">&quot;TEST&quot;</span></span><br><span class="line">  trigger_http = <span class="literal">true</span></span><br><span class="line">  source_archive_bucket = google_storage_bucket.bucket.name</span><br><span class="line">  source_archive_object = google_storage_bucket_object.archive.name</span><br><span class="line"></span><br><span class="line">  environment_variables = &#123;</span><br><span class="line">    APIKEY = data.sops_file.api_key.data[<span class="string">&quot;test&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">&quot;sops_file&quot;</span> <span class="string">&quot;api_key&quot;</span> &#123;</span><br><span class="line">  source_file = <span class="string">&quot;./secrets/test-apikey_encrypted.json&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>terraform planを打ってみると、</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># google_cloudfunctions_function.test-fnc will be created</span></span><br><span class="line">  + resource <span class="string">&quot;google_cloudfunctions_function&quot;</span> <span class="string">&quot;test-fnc&quot;</span> &#123;</span><br><span class="line">      + available_memory_mb           = 256</span><br><span class="line">      + description                   = <span class="string">&quot;test function&quot;</span></span><br><span class="line">      + docker_registry               = (known after apply)</span><br><span class="line">      + entry_point                   = <span class="string">&quot;TEST&quot;</span></span><br><span class="line">      + environment_variables         = &#123;</span><br><span class="line">          + <span class="string">&quot;APIKEY&quot;</span> = (sensitive value)</span><br><span class="line">        &#125;</span><br><span class="line">      + https_trigger_security_level  = (known after apply)</span><br><span class="line">      + https_trigger_url             = (known after apply)</span><br><span class="line">      + <span class="built_in">id</span>                            = (known after apply)</span><br><span class="line">      + ingress_settings              = <span class="string">&quot;ALLOW_ALL&quot;</span></span><br><span class="line">      + max_instances                 = 0</span><br><span class="line">      + name                          = <span class="string">&quot;test-fnc&quot;</span></span><br><span class="line">      + project                       = <span class="string">&quot;ksst-project-one&quot;</span></span><br><span class="line">      + region                        = <span class="string">&quot;asia-northeast1&quot;</span></span><br><span class="line">      + runtime                       = <span class="string">&quot;go119&quot;</span></span><br><span class="line">      + service_account_email         = (known after apply)</span><br><span class="line">      + source_archive_bucket         = <span class="string">&quot;go-test-function-bucket&quot;</span></span><br><span class="line">      + source_archive_object         = <span class="string">&quot;test.zip&quot;</span></span><br><span class="line">      + <span class="built_in">timeout</span>                       = 120</span><br><span class="line">      + trigger_http                  = <span class="literal">true</span></span><br><span class="line">      + vpc_connector_egress_settings = (known after apply)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>APIKEY</code>の箇所が<code>(sensitive value)</code>でマスキングされていることがわかります。</p><p>また、コンソールから復号化されたAPIKEYがちゃんと入っているかどうかも確認してみると、ちゃんと入ってますね🎊</p><img src="/images/20230331a/d02d879d-a94b-e788-ccc0-cffad344e32c.png" alt="" width="628" height="218" loading="lazy"><p>このようにCloud KMSを利用することで、機密情報を一々入力する必要がなくなり、更に機密情報の内容は追加した本人のみしか知らない状態でTerraform上の運用が可能になります。</p><p>ここでくれぐれも気を付けたいのが、<strong>暗号化前のファイルをgitでpushしないようにしましょう</strong>。暗号化はGitのリポジトリ内でやらないなどの運用ルール作りが大切です。</p><p>また、Google CloudのSDKが利用な環境であればSecret Managerを使うなど、<strong>できる限りGitには機密情報をあげないようにして運用する工夫</strong>は大切です。</p><p>明日は川口さんの<a href="/articles/20230403a/">Terraform x GitOps</a>です。お楽しみに！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230331a/mozillasops.png&quot; alt=&quot;&quot; width=&quot;711&quot; height=&quot;411&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Security" scheme="https://future-architect.github.io/categories/Security/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="Terraform1.4" scheme="https://future-architect.github.io/tags/Terraform1-4/"/>
    
    <category term="sops" scheme="https://future-architect.github.io/tags/sops/"/>
    
  </entry>
  
  <entry>
    <title>JenkinsでのTerraform CI/CD</title>
    <link href="https://future-architect.github.io/articles/20230330a/"/>
    <id>https://future-architect.github.io/articles/20230330a/</id>
    <published>2023-03-29T15:00:00.000Z</published>
    <updated>2023-03-31T01:39:21.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>こんにちは！筋肉エンジニアのTIG渡邉です。最近ヘルニアになってしまい筋トレが思うようにできずくすぶっています。</p><p><a href="/articles/20230327a/">Terraform連載</a> の4リソース目の記事になります！</p><p>さて、今回はプロジェクトでJenikisを利用する機会があり、初めてJenkinsfileでTerraformのCI&#x2F;CD環境を構築する機会があったので記事に残そうと思います。クラウドを使っているとAWSではCodeBuild、Google CloudではCloudBuildのサービスをCI&#x2F;CD環境として利用するのでyamlでのCI&#x2F;CDスクリプトには慣れていましたが、今回はJenkinsでCI&#x2F;CDを構築する要件でしたのでJenkinsfileでCI&#x2F;CDスクリプトには苦戦しました。</p><p>以下、今回利用したクラウドやTerraform、Jenkinsのバージョンを記載しておきます。</p><ul><li>クラウド：Google Cloud</li><li>Terraform : 1.4.0</li><li>Jenkins : 2.375.3</li></ul><h1 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h1><p>今回のアーキテクチャ図は以下の通りです。</p><img src="/images/20230330a/architecture.drawio.png" alt="architecture.drawio.png" width="1200" height="492" loading="lazy"><p>まず、JenkinsサーバやJenkinsサーバに付随するリソース（Cloud Load Balancing&#x2F;Cloud Armorなど）はローカルPCからTerraformを実行して作成していきます。Jenkinsサーバを構築後、諸々Jenkinsの設定を終えたのちはJenkins Consoleからボタンポチポチでterraform planからterraform applyを実行してほかのGoogle Cloudのリソースたちを構築することができるようになります。</p><h1 id="Jenkinsサーバを構築するTerraformコード"><a href="#Jenkinsサーバを構築するTerraformコード" class="headerlink" title="Jenkinsサーバを構築するTerraformコード"></a>Jenkinsサーバを構築するTerraformコード</h1><p>ローカルPCからJenkinsサーバを構築するためのTerraformコードを記載します。<br>前提としてGoogle CloudのプロジェクトやVPC、Subnetなどのネットワークリソースはすでに構築されているものとします。</p><h2 id="ディレクトリ構成"><a href="#ディレクトリ構成" class="headerlink" title="ディレクトリ構成"></a>ディレクトリ構成</h2><p>本ディレクトリ構成は以下の通りです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── backend.tf</span><br><span class="line">├── build</span><br><span class="line">│   ├── Jenkinsfile.deploy</span><br><span class="line">│   └── Jenkinsfile.<span class="built_in">test</span></span><br><span class="line">├── compute_engine.tf</span><br><span class="line">├── compute_firewall.tf</span><br><span class="line">├── compute_network.tf</span><br><span class="line">├── locals.tf</span><br><span class="line">├── project_iam_member.tf</span><br><span class="line">├── provider.tf</span><br><span class="line">├── security_policy.tf</span><br><span class="line">├── service_account.tf</span><br><span class="line">├── startup-scripts</span><br><span class="line">│   └── jenkins.sh</span><br><span class="line">└── versions.tf</span><br></pre></td></tr></table></figure><p>locals.tfの中身はGoogle Cloudのプロジェクト名や、自宅外部IPが含まれるので省略させていただきます。また、GCEのStartup Scriptを利用してGCEの構築時にJenkinsのインストールやGKEを操作するためのkubectlなどの諸々の設定も行っています（今回はGKEについては記載しませんがkubectlのインストールだけは一緒に行っています。）。</p><details><summary>backend.tf</summary><figure class="highlight sh"><figcaption><span>backend.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line"> backend <span class="string">&quot;gcs&quot;</span> &#123;</span><br><span class="line">   bucket  = <span class="string">&quot;xxxxxxxxxxxxx&quot;</span></span><br><span class="line">   prefix  = <span class="string">&quot;terraform/state&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>comute_engine.tf</summary><figure class="highlight sh"><figcaption><span>comute_engine.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_compute_instance&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name         = local.jenkins.name</span><br><span class="line">  machine_type = local.jenkins.machine_type</span><br><span class="line">  zone         = local.jenkins.zone</span><br><span class="line"></span><br><span class="line">  tags = local.jenkins.tags</span><br><span class="line"></span><br><span class="line">  metadata = &#123;</span><br><span class="line">    <span class="string">&quot;enable-oslogin&quot;</span> = <span class="string">&quot;TRUE&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  boot_disk &#123;</span><br><span class="line">    initialize_params &#123;</span><br><span class="line">      image = <span class="string">&quot;ubuntu-os-cloud/ubuntu-2204-lts&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  network_interface &#123;</span><br><span class="line">    subnetwork = data.google_compute_subnetwork.pri.self_link</span><br><span class="line">    access_config &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  service_account &#123;</span><br><span class="line">    email  = google_service_account.jenkins.email</span><br><span class="line">    scopes = [<span class="string">&quot;cloud-platform&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  metadata_startup_script = file(<span class="string">&quot;./startup-scripts/jenkins.sh&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_instance_group&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name        = local.jenkins.name</span><br><span class="line">  description = local.jenkins.instance_group_description</span><br><span class="line"></span><br><span class="line">  instances = [</span><br><span class="line">    google_compute_instance.jenkins.id</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  named_port &#123;</span><br><span class="line">    name = local.jenkins.name</span><br><span class="line">    port = local.jenkins.instance_group_port</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  zone = local.jenkins.zone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_http_health_check&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name         = local.jenkins.name</span><br><span class="line">  request_path = <span class="string">&quot;/login&quot;</span></span><br><span class="line">  port         = 8080</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_backend_service&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name                  = local.jenkins.name</span><br><span class="line">  protocol              = <span class="string">&quot;HTTP&quot;</span></span><br><span class="line">  port_name             = local.jenkins.name</span><br><span class="line">  load_balancing_scheme = <span class="string">&quot;EXTERNAL&quot;</span></span><br><span class="line">  timeout_sec           = 10</span><br><span class="line">  health_checks         = [google_compute_http_health_check.jenkins.id]</span><br><span class="line">  security_policy       = google_compute_security_policy.jenkins.id</span><br><span class="line">  backend &#123;</span><br><span class="line">    group           = google_compute_instance_group.jenkins.id</span><br><span class="line">    balancing_mode  = <span class="string">&quot;UTILIZATION&quot;</span></span><br><span class="line">    max_utilization = 1.0</span><br><span class="line">    capacity_scaler = 1.0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_url_map&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name            = local.jenkins.name</span><br><span class="line">  default_service = google_compute_backend_service.jenkins.id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_target_https_proxy&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name             = local.jenkins.name</span><br><span class="line">  url_map          = google_compute_url_map.jenkins.id</span><br><span class="line">  ssl_certificates = [google_compute_managed_ssl_certificate.jenkins.id]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">&quot;google_compute_global_address&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name = local.jenkins.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_global_forwarding_rule&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name                  = local.jenkins.name</span><br><span class="line">  ip_protocol           = <span class="string">&quot;TCP&quot;</span></span><br><span class="line">  load_balancing_scheme = <span class="string">&quot;EXTERNAL&quot;</span></span><br><span class="line">  port_range            = <span class="string">&quot;443&quot;</span></span><br><span class="line">  target                = google_compute_target_https_proxy.jenkins.id</span><br><span class="line">  ip_address            = data.google_compute_global_address.jenkins.address</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_managed_ssl_certificate&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name = local.jenkins.name</span><br><span class="line"></span><br><span class="line">  managed &#123;</span><br><span class="line">    domains = [<span class="string">&quot;<span class="variable">$&#123;data.google_compute_global_address.jenkins.address&#125;</span>.nip.io&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>comute_firewall.tf</summary><figure class="highlight sh"><figcaption><span>comute_firewall.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_compute_firewall&quot;</span> <span class="string">&quot;jenkins_iap&quot;</span> &#123;</span><br><span class="line">  name    = <span class="string">&quot;allow-iap-jenkins-instance-ssh&quot;</span></span><br><span class="line">  network = data.google_compute_network.vpc.self_link</span><br><span class="line"></span><br><span class="line">  allow &#123;</span><br><span class="line">    protocol = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">    ports    = [<span class="string">&quot;22&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  direction     = <span class="string">&quot;INGRESS&quot;</span></span><br><span class="line">  priority      = 1000</span><br><span class="line">  target_tags   = [<span class="string">&quot;jenkins&quot;</span>]</span><br><span class="line">  source_ranges = [<span class="string">&quot;35.235.240.0/20&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_firewall&quot;</span> <span class="string">&quot;jenkins_health&quot;</span> &#123;</span><br><span class="line">  name    = <span class="string">&quot;allow-jenkins-health-check&quot;</span></span><br><span class="line">  network = data.google_compute_network.vpc.self_link</span><br><span class="line"></span><br><span class="line">  allow &#123;</span><br><span class="line">    protocol = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  direction     = <span class="string">&quot;INGRESS&quot;</span></span><br><span class="line">  priority      = 1000</span><br><span class="line">  target_tags   = [<span class="string">&quot;jenkins&quot;</span>]</span><br><span class="line">  source_ranges = [<span class="string">&quot;35.191.0.0/16&quot;</span>, <span class="string">&quot;130.211.0.0/22&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>comute_network.tf</summary><figure class="highlight sh"><figcaption><span>comute_network.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data <span class="string">&quot;google_compute_network&quot;</span> <span class="string">&quot;vpc&quot;</span> &#123;</span><br><span class="line">  name = local.vpc_name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">&quot;google_compute_subnetwork&quot;</span> <span class="string">&quot;pub&quot;</span> &#123;</span><br><span class="line">  name   = local.subnet.pub.name</span><br><span class="line">  region = local.region_name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">&quot;google_compute_subnetwork&quot;</span> <span class="string">&quot;pri&quot;</span> &#123;</span><br><span class="line">  name   = local.subnet.pri.name</span><br><span class="line">  region = local.region_name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>project_iam_member.tf</summary><figure class="highlight sh"><figcaption><span>project_iam_member.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_project_iam_member&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  project = local.project.project_id</span><br><span class="line">  for_each = toset([</span><br><span class="line">    <span class="string">&quot;roles/owner&quot;</span>,</span><br><span class="line">  ])</span><br><span class="line">  role   = each.value</span><br><span class="line">  member = <span class="string">&quot;serviceAccount:<span class="variable">$&#123;google_service_account.jenkins.email&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>security_policy.tf</summary><figure class="highlight sh"><figcaption><span>security_policy.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_compute_security_policy&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name = local.jenkins.name</span><br><span class="line"></span><br><span class="line">  rule &#123;</span><br><span class="line">    action   = <span class="string">&quot;allow&quot;</span></span><br><span class="line">    priority = <span class="string">&quot;10&quot;</span></span><br><span class="line">    match &#123;</span><br><span class="line">      versioned_expr = <span class="string">&quot;SRC_IPS_V1&quot;</span></span><br><span class="line">      config &#123;</span><br><span class="line">        src_ip_ranges = [local.security_policy.home_ip]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    description = <span class="string">&quot;allow home ip address&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  rule &#123;</span><br><span class="line">    action   = <span class="string">&quot;deny(403)&quot;</span></span><br><span class="line">    priority = <span class="string">&quot;2147483647&quot;</span></span><br><span class="line">    match &#123;</span><br><span class="line">      versioned_expr = <span class="string">&quot;SRC_IPS_V1&quot;</span></span><br><span class="line">      config &#123;</span><br><span class="line">        src_ip_ranges = [<span class="string">&quot;*&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    description = <span class="string">&quot;deny all ip address except home ip&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>service_account.tf</summary><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_service_account&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  account_id   = <span class="string">&quot;tky-jenkins-sa&quot;</span></span><br><span class="line">  display_name = <span class="string">&quot;tky-jenkins-sa&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>versions.tf</summary><figure class="highlight sh"><figcaption><span>versions.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_version = <span class="string">&quot;~&gt; 1.4.0&quot;</span></span><br><span class="line">  required_providers &#123;</span><br><span class="line">    google = &#123;</span><br><span class="line">      version = <span class="string">&quot;~&gt; 4.47.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>provider.tf</summary><figure class="highlight sh"><figcaption><span>provider.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">provider <span class="string">&quot;google&quot;</span> &#123;</span><br><span class="line">  project = local.project.name</span><br><span class="line">  region  = local.region_name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">&quot;google-beta&quot;</span> &#123;</span><br><span class="line">  project = local.project.name</span><br><span class="line">  region  = local.region_name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details></details><details><summary>startup-scripts/jenkins.sh</summary><figure class="highlight sh"><figcaption><span>startup-scripts/jenkins.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line">apt update -y</span><br><span class="line">apt install -y git apt-transport-https ca-certificates software-properties-common gnupg</span><br><span class="line">apt install -y openjdk-17-jdk openjdk-17-jre</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Kubectl</span></span><br><span class="line">curl -LO <span class="string">&quot;https://storage.googleapis.com/kubernetes-release/release/<span class="subst">$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)</span>/bin/linux/amd64/kubectl&quot;</span></span><br><span class="line"><span class="built_in">chmod</span> +x ./kubectl</span><br><span class="line"><span class="built_in">mv</span> ./kubectl /usr/local/bin/kubectl</span><br><span class="line">kubectl version</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install google-cloud-sdk-gke-gcloud-auth-plugin</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/apt/sources.list.d/google-cloud-sdk.list</span><br><span class="line">curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install google-cloud-cli</span><br><span class="line">apt-get install google-cloud-sdk-gke-gcloud-auth-plugin</span><br><span class="line"><span class="built_in">export</span> USE_GKE_GCLOUD_AUTH_PLUGIN=True</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Jenkins</span></span><br><span class="line">curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | <span class="built_in">tee</span> /usr/share/keyrings/jenkins-keyring.asc &gt; /dev/null</span><br><span class="line"><span class="built_in">echo</span> deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ | <span class="built_in">tee</span> /etc/apt/sources.list.d/jenkins.list &gt; /dev/null</span><br><span class="line">apt update -y</span><br><span class="line">apt install -y jenkins</span><br><span class="line">sed -i -e <span class="string">&#x27;s/JENKINS_ENABLE_ACCESS_LOG=&quot;no&quot;/JENKINS_ENABLE_ACCESS_LOG=&quot;yes&quot;/g&#x27;</span> /etc/default/jenkins</span><br><span class="line">systemctl restart jenkins</span><br><span class="line">systemctl <span class="built_in">enable</span> jenkins</span><br></pre></td></tr></table></figure></details><h1 id="Jenkins初期設定"><a href="#Jenkins初期設定" class="headerlink" title="Jenkins初期設定"></a>Jenkins初期設定</h1><p>Jenkinsサーバが構築出来たら、ローカルPCからCloud Load Balancingに設定されたURLからJenkins Consoleにアクセスします。</p><p>初回アクセス時にAdministrator passwordを求められるのでJenkinsサーバにSSHで入り、以下のコマンドを実行してAdministrator passwardを確認して画面に入力します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cat</span> /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><img src="/images/20230330a/jenkins_setting_1.png" alt="" width="991" height="911" loading="lazy"><p>次にJenkins Pluginの設定を求められるので、Jenkinsが推奨している「Install suggested plugins」を選択します。</p><img src="/images/20230330a/jenkins_setting_2.png" alt="" width="995" height="910" loading="lazy"><p>Jenkinsが推奨しているPluginをインストールされるまで待ちます。<br><img src="/images/20230330a/jenkins_setting_3.png" alt="" width="993" height="915" loading="lazy"></p><p>次に、Jenkins初期Admin Userの設定を求められるので</p><ul><li>ユーザ名</li><li>パスワード</li><li>パスワードの確認</li><li>フルネーム</li><li>メールアドレス</li></ul><p>を入力して「Save and Continue」をクリックします。<br><img src="/images/20230330a/jenkins_setting_4.png" alt="" width="987" height="911" loading="lazy"></p><p>Jenkins ルートURLの確認が求められるので、変更がなければ「Save and Finish」をクリックします。<br><img src="/images/20230330a/jenkins_setting_5.png" alt="" width="994" height="909" loading="lazy"></p><p>これでJenkinsの初期設定が完了したので、「Start using Jenkins」をクリックします。</p><img src="/images/20230330a/jenkins_setting_6.png" alt="" width="992" height="912" loading="lazy"><p>その後、Jenkins Consoleの画面にアクセスできるようになります。</p><img src="/images/20230330a/jenkins_setting_7.png" alt="" width="1200" height="890" loading="lazy"><h1 id="Terraform-x2F-AnsiColor-プラグインのインストール"><a href="#Terraform-x2F-AnsiColor-プラグインのインストール" class="headerlink" title="Terraform&#x2F;AnsiColor プラグインのインストール"></a>Terraform&#x2F;AnsiColor プラグインのインストール</h1><p>「Jenkinsの管理」をクリックし、「プライグインの管理」をクリックします。<br><img src="/images/20230330a/global_tool_configuration_1.png" alt="" width="1200" height="895" loading="lazy"></p><p>JenkinsからTerraformを実行するためにTerraformをインストールします。</p><p>「Availavle plugins」をクリックし、検索欄から「terraform」を入力、Installにチェックし、「Download now and install after restart」をクリックします。</p><p>Jenkins実行ログに色を付けたいので、AnsiColorをインストールします。</p><p>「Availavle plugins」をクリックし、検索欄から「AnsiColor」を入力、Installにチェックし、「Download now and install after restart」をクリックします。</p><img src="/images/20230330a/global_tool_configuration_2.png" alt="" width="1200" height="890" loading="lazy"><img src="/images/20230330a/global_tool_configuration_8.png" alt="" width="1200" height="893" loading="lazy"><p>その後、「Installed plugins」をクリックし、「ジョブが実行中でなければ再起動」をクリックし、Jenkinsサーバを再起動します。</p><img src="/images/20230330a/global_tool_configuration_4.png" alt="" width="1200" height="892" loading="lazy"><p>再起動すると、再度ログインが求められるのでログイン情報を入力し、ログインします。</p><img src="/images/20230330a/global_tool_configuration_5.png" alt="" width="1200" height="896" loading="lazy"><h1 id="Global-Tool-Configurationの設定"><a href="#Global-Tool-Configurationの設定" class="headerlink" title="Global Tool Configurationの設定"></a>Global Tool Configurationの設定</h1><p>「Jenkinsの管理」をクリックし、「Global Tool Configuration」をクリックします。</p><img src="/images/20230330a/image.png" alt="" width="1200" height="899" loading="lazy"><p>Terraformプラグインをインストールしている状態だと、Global Tool ConfigurationにTerraformが表示されるので、設定します。</p><ul><li>Name : Terraform-1.4.0　（Jenkinsfileで使用するためこの名前にします）</li><li>install from bintray.com：バージョン（Terraform 1.4.0 linux (amd64)）</li></ul><p>を設定し、「Save」をクリックします。</p><img src="/images/20230330a/image_2.png" alt="" width="1200" height="899" loading="lazy"><h1 id="Terraform-Plan-x2F-Applyジョブの作成"><a href="#Terraform-Plan-x2F-Applyジョブの作成" class="headerlink" title="Terraform Plan&#x2F;Applyジョブの作成"></a>Terraform Plan&#x2F;Applyジョブの作成</h1><h2 id="Terraformジョブ管理フォルダの作成"><a href="#Terraformジョブ管理フォルダの作成" class="headerlink" title="Terraformジョブ管理フォルダの作成"></a>Terraformジョブ管理フォルダの作成</h2><p>ここまでの設定で、Jenkins上でTerraformを実行する環境が整ったので、Terraform実行ジョブ管理フォルダの作成を行っていきます。</p><p>「新規ジョブ作成」をクリックします。</p><img src="/images/20230330a/jenkins_job_setting_1.png" alt="" width="1200" height="893" loading="lazy"><p>まず、Terraformジョブをまとめるフォルダを作成します。<br>ジョブ名「terraform」と入力し、「フォルダ」を選択し、「OK」を入力します。<br><img src="/images/20230330a/jenkins_job_setting_8.png" alt="" width="1200" height="893" loading="lazy"></p><p>ConfigurationでGeneralから</p><ul><li>表示名：terraform</li><li>説明：terraform planジョブとterraform applyジョブを管理します</li></ul><p>と入力し「保存」をクリックします。<br><img src="/images/20230330a/jenkins_job_setting_9.png" alt="" width="1200" height="895" loading="lazy"></p><h2 id="Terraform-planジョブの作成"><a href="#Terraform-planジョブの作成" class="headerlink" title="Terraform planジョブの作成"></a>Terraform planジョブの作成</h2><p>terraformフォルダが作成されたので、terraform planジョブの作成を行っていきます。<br>「新規アイテムの作成」をクリックします。<br><img src="/images/20230330a/jenkins_job_setting_10.png" alt="" width="1200" height="894" loading="lazy"></p><p>ジョブ名「terraform-plan」と入力し、「Multibranch Pipeline」を選択し、「OK」と入力します。<br><img src="/images/20230330a/jenkins_job_setting_2.png" alt="" width="1200" height="894" loading="lazy"></p><p>ConfigurationでGeneralから</p><ul><li>表示名：terraform-plan</li><li>説明：terraform planを実行するジョブです。</li></ul><img src="/images/20230330a/jenkins_job_setting_3.png" alt="jenkins_job_setting_3.png" width="923" height="410" loading="lazy"><p>Branch SorucesでGitHubとの連携の設定を行っていきます。<br>Credentialsから「追加」をクリックし、GitHub認証情報の設定を行います。</p><img src="/images/20230330a/jenkins_job_setting_4.png" alt="jenkins_job_setting_4.png" width="849" height="608" loading="lazy"><p>Folder Credentials Providerで</p><ul><li>Domain：グローバルドメイン</li><li>種類：ユーザ名とパスワード</li><li>ユーザ名：GitHubのユーザ名</li><li>パスワード：GitHubのPersonal Access Token</li></ul><p>を入力します。</p><img src="/images/20230330a/jenkins_job_setting_5.png" alt="" width="948" height="712" loading="lazy"><p>上記設定後、Credentialsに設定したCredentialが表示されるので選択します。<br>Repository Scan - Deprecated Visualization　から</p><ul><li>Owner：Githubユーザ名</li><li>Repository：対象リポジトリ</li></ul><p>を選択します。</p><p>Behavioursは</p><ul><li>Strategy：All branches</li></ul><p>を選択します。</p><img src="/images/20230330a/jenkins_job_setting_6.png" alt="" width="888" height="845" loading="lazy"><p>Build Configurationから</p><ul><li>Mode：by Jenkinsfile</li><li>script Path：Jenkinsfileが存在するパス<br>を入力して「保存」をクリックします。</li></ul><img src="/images/20230330a/jenkins_job_setting_7.png" alt="" width="908" height="291" loading="lazy"><p>設定後、terraform-planジョブが作成されます。<br><img src="/images/20230330a/jenkins_job_setting_12.png" alt="" width="1200" height="903" loading="lazy"><br>実際のJenkinsfileはこちらです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    // 環境変数を定義</span><br><span class="line">    environment &#123;</span><br><span class="line">        TERRAFORM_PATH = tool(name: <span class="string">&#x27;terraform-1.4.0&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;org.jenkinsci.plugins.terraform.TerraformInstallation&#x27;</span>)</span><br><span class="line">        PATH = <span class="string">&quot;<span class="variable">$&#123;TERRAFORM_PATH&#125;</span>:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">        TERRAFORM_HOME = <span class="string">&quot;gcp/jenkins&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ansiエスケープシーケンスでログに色をつける</span><br><span class="line">    options &#123;</span><br><span class="line">        ansiColor(<span class="string">&#x27;xterm&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Initialize&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // terraformコードがあるディレクトリで処理</span><br><span class="line">                <span class="built_in">dir</span>(TERRAFORM_HOME) &#123;</span><br><span class="line">                    script &#123;</span><br><span class="line">                        // terraformのバージョン確認</span><br><span class="line">                        sh <span class="string">&quot;terraform -v&quot;</span></span><br><span class="line">                        // 前回のジョブ実行時のファイルを削除</span><br><span class="line">                        <span class="keyword">if</span> (fileExists(<span class="string">&quot;.terraform/terraform.tfstate&quot;</span>)) &#123;</span><br><span class="line">                            sh <span class="string">&quot;rm -rf .terraform/terraform.tfstate&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (fileExists(<span class="string">&quot;.terraform.lock.hcl&quot;</span>)) &#123;</span><br><span class="line">                            sh <span class="string">&quot;rm -rf .terraform.lock.hcl&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (fileExists(<span class="string">&quot;status&quot;</span>)) &#123;</span><br><span class="line">                            sh <span class="string">&quot;rm status&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        // terraform initの実行</span><br><span class="line">                        sh <span class="string">&quot;terraform init&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;plan&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // terraformコードがあるディレクトリで処理</span><br><span class="line">                <span class="built_in">dir</span>(TERRAFORM_HOME) &#123;</span><br><span class="line">                    script &#123;</span><br><span class="line">                        // terraform planの実行</span><br><span class="line">                        sh <span class="string">&quot;set +e; terraform plan -out=plan.out -detailed-exitcode; echo \$? &gt; status&quot;</span></span><br><span class="line">                        def exitcode = readFile(<span class="string">&#x27;status&#x27;</span>).trim()</span><br><span class="line">                        <span class="built_in">echo</span> <span class="string">&quot;Terraform Plan Exit Code: <span class="variable">$&#123;exitcode&#125;</span>&quot;</span></span><br><span class="line">                        // 成功時</span><br><span class="line">                        <span class="keyword">if</span> (exitcode == <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">                            currentBuild.result = <span class="string">&#x27;SUCCESS&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        // 失敗時</span><br><span class="line">                        <span class="keyword">if</span> (exitcode == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">                            currentBuild.result = <span class="string">&#x27;FAILURE&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Terraform-Applyジョブの作成"><a href="#Terraform-Applyジョブの作成" class="headerlink" title="Terraform Applyジョブの作成"></a>Terraform Applyジョブの作成</h2><p>terraform-planジョブが作成できたので、同様の設定でterraform-applyジョブを作成していきます。</p><img src="/images/20230330a/jenkins_job_setting_13.png" alt="" width="1200" height="895" loading="lazy"><p>実際のJenkinsfileはこちらです。</p><figure class="highlight sh"><figcaption><span>Jenkinsfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">// 変数を定義</span><br><span class="line">def apply = <span class="string">&quot;0&quot;</span></span><br><span class="line">def planExitCode</span><br><span class="line">def applyExitCode</span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    // 環境変数を定義</span><br><span class="line">    environment &#123;</span><br><span class="line">        TERRAFORM_PATH = tool(name: <span class="string">&#x27;terraform-1.4.0&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;org.jenkinsci.plugins.terraform.TerraformInstallation&#x27;</span>)</span><br><span class="line">        PATH = <span class="string">&quot;<span class="variable">$&#123;TERRAFORM_PATH&#125;</span>:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">        TERRAFORM_HOME = <span class="string">&quot;gcp/jenkins&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ansiエスケープシーケンスでログに色をつける</span><br><span class="line">    options &#123;</span><br><span class="line">        ansiColor(<span class="string">&#x27;xterm&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Initialize&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // terraformコードがあるディレクトリで処理</span><br><span class="line">                <span class="built_in">dir</span>(TERRAFORM_HOME) &#123;</span><br><span class="line">                    script &#123;</span><br><span class="line">                        // terraformのバージョン確認</span><br><span class="line">                        sh <span class="string">&quot;terraform -v&quot;</span></span><br><span class="line">                        // 前回のジョブ実行時のファイルを削除</span><br><span class="line">                        <span class="keyword">if</span> (fileExists(<span class="string">&quot;.terraform/terraform.tfstate&quot;</span>)) &#123;</span><br><span class="line">                            sh <span class="string">&quot;rm -rf .terraform/terraform.tfstate&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (fileExists(<span class="string">&quot;.terraform.lock.hcl&quot;</span>)) &#123;</span><br><span class="line">                            sh <span class="string">&quot;rm -rf .terraform.lock.hcl&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (fileExists(<span class="string">&quot;status&quot;</span>)) &#123;</span><br><span class="line">                            sh <span class="string">&quot;rm status&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        // terraform initの実行</span><br><span class="line">                        sh <span class="string">&quot;terraform init&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;plan&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // terraformコードがあるディレクトリで処理</span><br><span class="line">                <span class="built_in">dir</span>(TERRAFORM_HOME) &#123;</span><br><span class="line">                    script &#123;</span><br><span class="line">                        // terraform planの実行</span><br><span class="line">                        sh <span class="string">&quot;set +e; terraform plan -out=plan.out -detailed-exitcode; echo \$? &gt; status&quot;</span></span><br><span class="line">                        planExitCode = readFile(<span class="string">&#x27;status&#x27;</span>).trim()</span><br><span class="line">                        println <span class="string">&quot;Terraform Plan Exit Code: <span class="variable">$&#123;planExitCode&#125;</span>&quot;</span></span><br><span class="line">                        // plan成功時かつ差分がない場合</span><br><span class="line">                        <span class="keyword">if</span> (planExitCode == <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">                            currentBuild.result = <span class="string">&#x27;SUCCESS&#x27;</span></span><br><span class="line">                            apply = <span class="string">&quot;0&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        // plan失敗時</span><br><span class="line">                        <span class="keyword">if</span> (planExitCode == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">                            currentBuild.result = <span class="string">&#x27;FAILURE&#x27;</span></span><br><span class="line">                            apply = <span class="string">&quot;0&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        // plan成功時かつ差分がある場合</span><br><span class="line">                        <span class="keyword">if</span> (planExitCode == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">                            stash name: <span class="string">&quot;plan&quot;</span>, includes: <span class="string">&quot;plan.out&quot;</span></span><br><span class="line">                            try &#123;</span><br><span class="line">                                // 承認フェーズ</span><br><span class="line">                                <span class="keyword">if</span> (apply != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">                                    input message: <span class="string">&#x27;Apply Plan?&#x27;</span>, ok: <span class="string">&#x27;Apply&#x27;</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                apply = <span class="string">&quot;1&quot;</span></span><br><span class="line">                            &#125; catch (err) &#123;</span><br><span class="line">                                currentBuild.result = <span class="string">&#x27;UNSTABLE&#x27;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;Apply&#x27;</span>) &#123;</span><br><span class="line">            // apply変数が1の場合、apply実行</span><br><span class="line">            when &#123;</span><br><span class="line">                expression &#123; apply == <span class="string">&quot;1&quot;</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // terraformコードがあるディレクトリで処理</span><br><span class="line">                <span class="built_in">dir</span>(TERRAFORM_HOME) &#123;</span><br><span class="line">                    script &#123;</span><br><span class="line">                        unstash <span class="string">&#x27;plan&#x27;</span></span><br><span class="line">                        // 前回のジョブ実行時のファイルを削除</span><br><span class="line">                        <span class="keyword">if</span> (fileExists(<span class="string">&quot;status.apply&quot;</span>)) &#123;</span><br><span class="line">                            sh <span class="string">&quot;rm status.apply&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        // terraform applyの実行</span><br><span class="line">                        ansiColor(<span class="string">&#x27;xterm&#x27;</span>) &#123;</span><br><span class="line">                            sh <span class="string">&quot;set +e; terraform apply plan.out; echo \$? &gt; status.apply&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        applyExitCode = readFile(<span class="string">&#x27;status.apply&#x27;</span>).trim()</span><br><span class="line">                        println <span class="string">&quot;applyExit Code: &quot;</span> + applyExitCode</span><br><span class="line">                        // apply成功時</span><br><span class="line">                        <span class="keyword">if</span> (applyExitCode == <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">                            currentBuild.result = <span class="string">&#x27;SUCCESS&#x27;</span></span><br><span class="line">                        &#125; // apply失敗時</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            currentBuild.result = <span class="string">&#x27;FAILURE&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        println <span class="string">&quot;currentBuild.result :&quot;</span> + currentBuild.result</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>terraform plan実行時に、-detailed-exitcodeオプションをつけることでexit codeで処理の分岐を実現しています。</p><ul><li>exit code 0 : No changesでplanが成功</li><li>exit code 1 : planがError</li><li>exit code 2 : 差分ありでplanが成功</li></ul><h1 id="Terraform-Plan-x2F-Applyジョブの実行"><a href="#Terraform-Plan-x2F-Applyジョブの実行" class="headerlink" title="Terraform Plan&#x2F;Applyジョブの実行"></a>Terraform Plan&#x2F;Applyジョブの実行</h1><p>Terraform Plan&#x2F;Applyジョブが作成できたので、ジョブを実際に実行していきます。<br>gcsバケットを作成するtfファイルを準備して、commit、リポジトリにpushします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_storage_bucket&quot;</span> <span class="string">&quot;bucket&quot;</span> &#123;</span><br><span class="line">  name          = <span class="string">&quot;test-bucket0101&quot;</span></span><br><span class="line">  location      = <span class="string">&quot;ASIA&quot;</span></span><br><span class="line">  force_destroy = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  public_access_prevention = <span class="string">&quot;enforced&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Terraform-Planジョブの実行"><a href="#Terraform-Planジョブの実行" class="headerlink" title="Terraform Planジョブの実行"></a>Terraform Planジョブの実行</h2><p>作成したTerraform Planジョブを実行してみましょう。<br>「ビルド実行」をクリックします。</p><img src="/images/20230330a/image_3.png" alt="" width="1200" height="901" loading="lazy"><p>ジョブが実行されています。<br><img src="/images/20230330a/image_4.png" alt="" width="1200" height="893" loading="lazy"></p><p>ジョブが正常終了したので、ログを確認するとplan結果が表示されています。<br>事前準備でgcsバケットを作成するtfファイルを準備したので、plan結果に「1 to add」と表示されました。<br><img src="/images/20230330a/plan.png" alt="" width="1200" height="904" loading="lazy"></p><h2 id="Terraform-Applyジョブの実行"><a href="#Terraform-Applyジョブの実行" class="headerlink" title="Terraform Applyジョブの実行"></a>Terraform Applyジョブの実行</h2><p>次に、作成したTerraform Applyジョブを実行してみましょう。</p><p>「ビルド実行」をクリックします。</p><img src="/images/20230330a/image_5.png" alt="" width="1200" height="907" loading="lazy"><p>ジョブが実行されています。</p><img src="/images/20230330a/image_6.png" alt="" width="1200" height="904" loading="lazy"><p>planフェーズでジョブが一時停止し、Apply Plan？と表示されます。</p><img src="/images/20230330a/image_7.png" alt="" width="772" height="236" loading="lazy"><p>ここでジョブのログを確認しに行き、Applyする前の内容を確認し、問題ないければ「Apply」をクリックしてTerraform Applyを実行します。もし、ここで問題があれば「Abort」をクリックすればジョブはTerraform Applyを実行することなく停止します。</p><img src="/images/20230330a/image_8.png" alt="" width="1200" height="858" loading="lazy"><p>「Apply」をクリックしてジョブが正常終了しました。<br><img src="/images/20230330a/image_9.png" alt="" width="782" height="222" loading="lazy"></p><p>ここでジョブのログを確認しに行くと「Apply complete! Resources: 1 added, 0 changed, 0 destroyed.」と表示され、正常終了したことが確認できました。<br><img src="/images/20230330a/image_10.png" alt="" width="1200" height="899" loading="lazy"></p><p>Google Cloudのコンソール画面を確認すると、Terraform Applyを実行したときに作成されたGCSバケットが確認できました。<br><img src="/images/20230330a/image_11.png" alt="png" width="1200" height="846" loading="lazy"></p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>JenkinsでのTerraform CI&#x2F;CDの記事を書きました。Jenkinsの設定や、Jenkinsfileを書くことも初めてだったので、Jenkins自体やJenkinsfileの文法などいろいろ勉強になりました。</p><p>各Cloud Providerのマネージドサービス（AWS CodeBuild &#x2F; Google Cloud Build）にJenkinsのビルド実行環境を委譲することが主流になっていますが、まだまだJenkinsを利用することもあると思いますので参考になれば幸いです。</p><p>次は岸下さんの<a href="/articles/20230331a/">Terraformでの機密情報の取り扱い on Google Cloud</a>記事です。</p><p>お楽しみを！！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="DevOps" scheme="https://future-architect.github.io/categories/DevOps/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="CI/CD" scheme="https://future-architect.github.io/tags/CI-CD/"/>
    
    <category term="Jenkins" scheme="https://future-architect.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>tftarget:Terraformターゲットを選択的に実行するためのGo製CLIツール</title>
    <link href="https://future-architect.github.io/articles/20230329a/"/>
    <id>https://future-architect.github.io/articles/20230329a/</id>
    <published>2023-03-28T15:00:00.000Z</published>
    <updated>2023-03-29T04:50:07.149Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230329a/tftarget-eyecatch.jpg" alt="" width="960" height="540" loading="lazy"><h1 id="1-はじめに"><a href="#1-はじめに" class="headerlink" title="1 はじめに"></a>1 はじめに</h1><p>こんにちは。フューチャーアーキテクト株式会社のTIG&#x2F;EXユニット所属、宮永です。</p><p><a href="/articles/20230327a/">Terraform連載2023</a>の3リソース目の記事です</p><p>本記事では、Terraformのtargetオプションを簡単に実行するためのCLIツールを紹介します。<br>また、このCLIツールを開発するきっかけとなった経緯もご紹介します。</p><h2 id="Terraformのtarget指定に関する課題"><a href="#Terraformのtarget指定に関する課題" class="headerlink" title="Terraformのtarget指定に関する課題"></a>Terraformのtarget指定に関する課題</h2><p>チームで開発を行っている際、Terraformのtargetオプションを使ってリソースを適用するケースはしばしばあるかと思います。</p><p>私のチームでは、環境を本番環境、検証環境、開発環境の3つに分けています。本番環境と検証環境では、差分が出ないようにtargetオプションを使用せず、常にクラウド環境とTerraformの記述が同期された状態に保っています。</p><p>一方で、開発環境ではtargetオプションを頻繁に利用します。機能開発時に開発者それぞれがTerraformのmainブランチからブランチを切って開発を進めるため、クラウドの開発環境にはそれぞれの.tfファイルに定義されていないリソースが生成されるからです。</p><p>この状況下で、各開発者が無条件で<code>terraform apply</code>を実行すると、リソースが突然消えることがあります。</p><p>▼開発環境における各人の開発の様子<br><img src="/images/20230329a/image.png" alt="" width="1200" height="826" loading="lazy"></p><p>そこで、新しい機能を作成する際は、まず<code>terraform plan</code>を実行し、自分の変更点以外の差分が出た場合は<code>terraform apply -target=</code>コマンドを用意するようにしていました。</p><p>特定のリソースにのみapplyをしたいだけなのに、自分の差分だけをgrepして<code>terraform apply -target=</code>コマンドを準備するのは大変です。terraformのtargetオプションを簡単に実行したいとSlackで呟いたところ、共感を得たため、今回CLIツールとして開発することにしました。</p><h2 id="tftargetの紹介"><a href="#tftargetの紹介" class="headerlink" title="tftargetの紹介"></a>tftargetの紹介</h2><p>作成したツールはtftargetと命名し、こちらで公開しています。</p><p><a href="https://github.com/future-architect/tftarget/releases">https://github.com/future-architect/tftarget/releases</a></p><div class="note info" style="background: #e5f8e2; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-check-circle"></span>このCLIツールはTerraformコマンドのラッパーであり、内部でTerraformコマンドを呼び出しています。そのため、TerraformのCLIコマンドのインストールが必須です。</div><h1 id="2-tftargetの概要"><a href="#2-tftargetの概要" class="headerlink" title="2 tftargetの概要"></a>2 tftargetの概要</h1><h2 id="Terraformターゲットを選択的に実行する機能"><a href="#Terraformターゲットを選択的に実行する機能" class="headerlink" title="Terraformターゲットを選択的に実行する機能"></a>Terraformターゲットを選択的に実行する機能</h2><p>動作を直接見る方がわかりやすいと思いますので、tftargetを利用して<code>terraform apply</code>を実行するデモ画像を添付します。</p><img src="/images/20230329a/tftarget-apply.gif" alt="tftarget-apply.gif" width="854" height="431" loading="lazy"><p><code>terraform apply</code>の代わりに<code>tftarget apply</code>を実行します。<br>実行後、しばらく待つと<code>terraform plan</code>によって出力された差分がリソース名とアクション（<code>create</code>や<code>destroy</code>など）ともに表示されます。ユーザーは、<code>terraform apply</code>を適用したいリソースにチェックを入れてEnterを押すことで、選択的に<code>terraform apply</code>を実行できます。</p><p><code>apply</code>だけではなく、<code>plan</code>と<code>destroy</code>にも対応しています。</p><h2 id="どのようなシチュエーションで役立つか"><a href="#どのようなシチュエーションで役立つか" class="headerlink" title="どのようなシチュエーションで役立つか"></a>どのようなシチュエーションで役立つか</h2><p>冒頭で述べたように、複数人で開発を行い、各人が個別に定義したリソースに影響を与えずに開発を進める際に役立ちます。<code>terraform target</code>を簡単に実行したい場面全般で利用価値があるおもいます。</p><div class="note alert" style="background: #feebee; padding:16px; margin:24px 12px; border-radius:8px;">  <span class="fa fa-fw fa-times-circle"></span>動作検証はAWS環境でしか行っていないため、GCPやAzure環境で利用する際は事前に動作確認をお願いします。</div><h1 id="3-tftargetのインストール方法"><a href="#3-tftargetのインストール方法" class="headerlink" title="3 tftargetのインストール方法"></a>3 tftargetのインストール方法</h1><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><p>Go製のCLIツールであるtftargetは、<code>go install</code>コマンドを使ってインストールできます。次のコマンドを実行してください。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/future-architect/tftarget@latest</span><br></pre></td></tr></table></figure><h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>Homebrewを利用している場合も、tftargetをインストールできます。以下のコマンドでインストールできます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install future-architect/tap/tftarget</span><br></pre></td></tr></table></figure><h2 id="マニュアルインストール"><a href="#マニュアルインストール" class="headerlink" title="マニュアルインストール"></a>マニュアルインストール</h2><p>各OS向けのバイナリファイルも提供されています。以下のリンクから、適切なシステムに対応するバイナリをダウンロードし、パスを設定して利用できます。</p><p><a href="https://github.com/future-architect/tftarget/releases">https://github.com/future-architect/tftarget/releases</a></p><h1 id="4-tftargetの使い方"><a href="#4-tftargetの使い方" class="headerlink" title="4 tftargetの使い方"></a>4 tftargetの使い方</h1><h2 id="基本的なコマンドの紹介"><a href="#基本的なコマンドの紹介" class="headerlink" title="基本的なコマンドの紹介"></a>基本的なコマンドの紹介</h2><p>tftargetには、<code>plan</code>、<code>apply</code>、<code>destroy</code>の3つのコマンドが用意されています。基本的な使い方は、これらのコマンドに共通しています。まず、<code>plan</code>コマンドの使い方を紹介します。</p><h3 id="tftarget-plan"><a href="#tftarget-plan" class="headerlink" title="tftarget plan"></a>tftarget plan</h3><p>通常の<code>plan</code>と同様に、以下のコマンドを実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tftarget plan</span><br></pre></td></tr></table></figure><p>しばらく待つと、チェックボックスが表示されます。これは、<code>terraform plan</code>を実行した結果をリソース名とアクションとして表示したものです。</p><img src="/images/20230329a/simple-usage-1.png" alt="simple-usage-1.png" width="1079" height="297" loading="lazy"><p>Spaceキーを押すことでチェックを付けることができます。右方向キーで全選択、左方向キーで選択解除ができます。上下方向キーとスペースキーで、<code>plan</code>を実行したいリソースを選択してください。</p><p>赤字で示しているexitのチェックを選択すると、何も実行せずに処理が終了します。</p><img src="/images/20230329a/simple-usage-2.png" alt="simple-usage-2.png" width="1079" height="297" loading="lazy"><p>リソースの選択が完了したら、Enterキーを押して処理を進めます。</p><img src="/images/20230329a/simple-usage-3.png" alt="simple-usage-3.png" width="1074" height="165" loading="lazy"><p><code>plan</code>の場合は、<code>terraform plan</code>の実行だけが行われます。そのため、処理はここで終了します。通常の<code>terraform plan</code>を実行した際の出力結果と共に、最後に選択したリソースのサマリが表示されます。</p><p>このサマリは、後述する<code>--summary</code>オプションを<code>false</code>に設定することで非表示にすることもできます。</p><p><code>tftarget plan</code>の説明は以上です。次に、<code>tftarget apply</code>について説明します。</p><h3 id="tftarget-apply"><a href="#tftarget-apply" class="headerlink" title="tftarget apply"></a>tftarget apply</h3><p><code>tftarget plan</code>とリソース選択する部分までは同じです。</p><p>リソースを選択してEnterキーを押すと、通常の<code>terraform apply</code>のように実行確認のプロンプトが表示されます。内容に問題がなければ、<code>yes</code>を選択してください。<br><img src="/images/20230329a/simple-usage-4.png" alt="simple-usage-4.png" width="1074" height="134" loading="lazy"></p><p><code>apply</code>が成功すると、<code>plan</code>の時と同様に、通常の<code>terraform apply</code>の出力結果に加えて、以下のようなサマリが出力されます。</p><img src="/images/20230329a/simple-usage-5.png" alt="simple-usage-5.png" width="1074" height="147" loading="lazy"><h3 id="tftarget-destroy"><a href="#tftarget-destroy" class="headerlink" title="tftarget destroy"></a>tftarget destroy</h3><p><code>tftarget apply</code>と利用方法は全く同じですので、ここでは説明を省略します。</p><h2 id="オプション"><a href="#オプション" class="headerlink" title="オプション"></a>オプション</h2><p>それぞれのコマンドには、以下のオプションが用意されています。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Flags:</span><br><span class="line">  -f, --filter string   filter by action. You can select create, destroy, update, or replace</span><br><span class="line">  -i, --items int       check box item size (default 25)</span><br><span class="line">  -p, --parallel int    limit the number of concurrent operations (default 10)</span><br><span class="line">  -s, --summary         summary of selected items (default true)</span><br></pre></td></tr></table></figure><h3 id="–filter-f"><a href="#–filter-f" class="headerlink" title="–filter, -f"></a>–filter, -f</h3><p><code>--filter</code>オプションでは、最初の選択肢表示画面でアクション別にフィルタリングを追加できます。例えば、新規作成のリソースの場合、<code>create</code>と指定することで選択肢に<code>create</code>のリソースのみを表示できます。利用可能なアクションは、<code>create</code>、<code>destroy</code>、<code>update</code>、<code>replace</code>の4つです。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tftarget apply -f create</span><br></pre></td></tr></table></figure><p>このオプションは、複数のアクションを指定することはできません。そのため、以下のようなコマンドはエラーとなります。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tftarget apply -f create destroy</span><br></pre></td></tr></table></figure><h3 id="–items-i"><a href="#–items-i" class="headerlink" title="–items, -i"></a>–items, -i</h3><p><code>--items</code>オプションでは、チェックボックスの表示数を指定できます。デフォルトでは25個のリソースが表示されますが、このオプションを使用して表示数を増減させることができます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tftarget apply -i 50</span><br></pre></td></tr></table></figure><p>このコマンドは、最初の選択肢表示画面で最大50個のリソースが表示されるように設定します。</p><h3 id="–parallel-p"><a href="#–parallel-p" class="headerlink" title="–parallel, -p"></a>–parallel, -p</h3><p><code>--parallel</code>オプションはTerraform CLIで実装されている<code>-parallelism</code>に並列数を渡すためのオプションです。デフォルトでは10が設定されています。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tftarget apply -p 30</span><br></pre></td></tr></table></figure><h3 id="–summary-s"><a href="#–summary-s" class="headerlink" title="–summary, -s"></a>–summary, -s</h3><p><code>--summary</code>オプションでは、選択したリソースのサマリ表示を有効または無効にすることができます。デフォルトでは、<code>plan</code>や<code>apply</code>の結果にサマリが表示されますが、このオプションを使用してサマリ表示をオフにすることができます。</p><img src="/images/20230329a/simple-usage-5_2.png" alt="simple-usage-5.png" width="1074" height="147" loading="lazy"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tftarget apply -s false</span><br></pre></td></tr></table></figure><p>このコマンドは、<code>apply</code>の結果にサマリが表示されないように設定します。</p><p>以上で、tftargetの使い方についての説明を終了します。</p><h1 id="5-バグ報告や機能提案の受付方法"><a href="#5-バグ報告や機能提案の受付方法" class="headerlink" title="5 バグ報告や機能提案の受付方法"></a>5 バグ報告や機能提案の受付方法</h1><p>開発してまだ日が浅いのでバグや機能提案がある際はこちらに起票のほどよろしくお願いします。</p><p><a href="https://github.com/future-architect/tftarget/issues">https://github.com/future-architect/tftarget/issues</a></p><h1 id="6-まとめ"><a href="#6-まとめ" class="headerlink" title="6 まとめ"></a>6 まとめ</h1><h2 id="tftargetが解決する問題点"><a href="#tftargetが解決する問題点" class="headerlink" title="tftargetが解決する問題点"></a>tftargetが解決する問題点</h2><p>tftargetを使用することで、簡単に<code>terraform target</code>を実行できます。特に、複数のメンバーが開発を行う際、各メンバーが定義したリソースを破壊することなく、安全に運用できるようになります。</p><h2 id="今後の展望やアップデート予定"><a href="#今後の展望やアップデート予定" class="headerlink" title="今後の展望やアップデート予定"></a>今後の展望やアップデート予定</h2><p>現在、tftargetはAWS環境でのみ動作検証が行われています。今後は、GCPやAzureでの動作確認や改善を行っていく予定です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230329a/tftarget-eyecatch.jpg&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;540&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;1-はじめに&quot;&gt;&lt;a href=&quot;#1-はじめに&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
  </entry>
  
  <entry>
    <title>TerraCurl でProviderがサポートしていないリソースを作成する</title>
    <link href="https://future-architect.github.io/articles/20230328a/"/>
    <id>https://future-architect.github.io/articles/20230328a/</id>
    <published>2023-03-27T15:00:00.000Z</published>
    <updated>2023-03-28T02:59:38.270Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20230328a/top.png" alt="" width="600" height="356" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Terraformがv1.4のリリースおめでとうございます。<a href="/articles/20230327a/">Terraform連載2023</a> の2リソース目の記事です。</p><p>v1.4リリースとは関係ないですが、<a href="https://registry.terraform.io/providers/devops-rob/terracurl/latest/docs">TerraCurl</a>というツールが面白そうだったので触ってみました。TerraCurlは以下の2023.2.22 のHashiCorpさんのブログで紹介されています。</p><ul><li><a href="https://www.hashicorp.com/blog/writing-terraform-for-unsupported-resources">Writing Terraform for unsupported resources - HashiCorp Blog</a></li></ul><p>リポジトリは<a href="https://github.com/devops-rob/terraform-provider-terracurl">devops-rob&#x2F;terraform-provider-terracurl</a>です。</p><h2 id="TerraCurlの使いどころ"><a href="#TerraCurlの使いどころ" class="headerlink" title="TerraCurlの使いどころ"></a>TerraCurlの使いどころ</h2><p>AWS、Google Cloud、Azureなど、日進月歩で新しいサービス、新機能が追加されています。例えば以下は <a href="https://www.itmedia.co.jp/enterprise/articles/2103/08/news067.html">ITmediaさんのページ</a> から引用した、AWSの機能追加の推移ですがその勢いは加速しています。</p><img src="/images/20230328a/kz_wk220322_02_MASK.jpg" alt="kz_wk220322_02_MASK.jpg" width="590" height="333" loading="lazy"><p>クラウドベンダー、SaaSサービス側の機能追加に合わせて、Terraform Provider側の開発が進むので、新しい機能を利用しようとしても、まだ対応していない、といった場面がまれに発生します。Provider側へPull Requestを出しOSSコントリビュートして推進に関与するというのがあるべきアプローチの1つだと思いますが、業務スケジュール上、できるだけ急ぎで対応したいということが多いでしょう。</p><p>こういった場面で役立つのが今回紹介するTerraCurlです。</p><h2 id="local-exec"><a href="#local-exec" class="headerlink" title="local-exec"></a>local-exec</h2><p>従来、Providerが対応していないとか、そもそもProviderが存在しないリソースを管理したい時、頼りにしていたのは <a href="https://developer.hashicorp.com/terraform/language/resources/provisioners/local-exec#example-usage">local-exec</a> Provisioner でした。Provisionerというのは、Terraform側が用意した脱出ハッチのような仕組みで、任意のスクリプトをTerraformコマンド経由で呼び出せる機能です<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。<a href="https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax#provisioners-are-a-last-resort">ドキュメント</a>にも a Last Resort（最終手段）と書いてある奥の手です。</p><p>通常は <code>terraform apply</code>で呼ばれるスクリプトを定義できますが、 <code>when=destory</code> と合わせると <code>terraform destroy</code> に対応させることもできます。さらにがんばるなら <code>null_resource</code>の<code>triggers</code> で実行スクリプトなどのハッシュ値を管理しておくことで、実行スクリプトに更新をトリガーにすることもできます（もちろん、実行スクリプトは冪等に作る必要があります）。書き出してみると複雑に見えますが、大部分は <code>local-exec</code> で初期作成時に呼び出すスクリプトを作れば事足りることが多いため、こだわらず簡易的にリソースをTerraform管理下に置くときは、よく使われると思います。</p><figure class="highlight sh"><figcaption><span>local-execイメージ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;my_custom_resource&quot;</span> &#123;</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">  triggers = &#123;</span><br><span class="line">    my_custom_resource_id = <span class="string">&quot;<span class="variable">$&#123;sha256(file(&quot;my_custom_resource.sh&quot;))&#125;</span>&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  provisioner <span class="string">&quot;local-exec&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">command</span> = <span class="string">&quot;./my_custom_resource.sh create&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  provisioner <span class="string">&quot;local-exec&quot;</span> &#123;</span><br><span class="line">    when    = destroy</span><br><span class="line">    <span class="built_in">command</span> = <span class="string">&quot;./my_custom_resource.sh destroy&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>私の観測上、よく見るやり方としては、<code>local-exec</code> で一時的にしのぎ（AWSであれば<code>awscli</code>をラップしたシェルスクリプトを用意して）、Providerが新機能の追加されたタイミングで <code>local-exec</code> から Providerが提供する機能に置き換えていくというものです。GUIや個別のスクリプトを用意する方法と違い、 <code>terraform apply</code> で書く環境にリリースできるため、CI&#x2F;CD定義もシンプルに、オペミスも減らせるということでした。</p><p>今回紹介するTerraCurlも、上記で説明した脱出ハッチ的な <code>local-exec</code>の使い方と似たようなユースケースになります。ネイティブのProviderではサポートされていないけど、サービス側のAPIではサポートされている場合に利用します。Provider側ですでにリソース作成が提供されていればTerraCurlを使う必要はありません。</p><h2 id="TerraCurlでAPI呼び出し"><a href="#TerraCurlでAPI呼び出し" class="headerlink" title="TerraCurlでAPI呼び出し"></a>TerraCurlでAPI呼び出し</h2><p><a href="https://registry.terraform.io/providers/devops-rob/terracurl/latest/docs/resources/request">TerraCurlドキュメントのExcample</a> を元に、Qiita APIを用いてダミーの記事を作成しています。Qiita記事をTerraform管理する対象したいユースケースは皆無だと思います。TerraCurlを使うという1点のみが理由です。</p><p>利用しているトークンは<a href="https://qiita.com/settings/tokens/new">アクセストークンの発行</a>ページから取得します。<code>write_qiita</code> のスコープも必要です。</p><p>取得したQiitaトークンは環境変数にセットして参照できるようにしておきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> TF_VAR_qiita_token=xxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    terracurl = &#123;</span><br><span class="line">      <span class="built_in">source</span>  = <span class="string">&quot;devops-rob/terracurl&quot;</span></span><br><span class="line">      version = <span class="string">&quot;1.1.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider <span class="string">&quot;terracurl&quot;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">variable <span class="string">&quot;qiita_token&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">type</span>      = string</span><br><span class="line">  sensitive = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;terracurl_request&quot;</span> <span class="string">&quot;qiita_article&quot;</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;qiita-article&quot;</span></span><br><span class="line"></span><br><span class="line">  url          = <span class="string">&quot;https://qiita.com/api/v2/items&quot;</span></span><br><span class="line">  method       = <span class="string">&quot;POST&quot;</span></span><br><span class="line">  request_body = &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;&quot;title&quot;:&quot;TerraCurl投稿テスト2023.3.27&quot;, &quot;body&quot;:&quot;# Example\nTerraCurlやってみた&quot;, &quot;private&quot;:true, &quot;tags&quot;:[&#123;&quot;name&quot;:&quot;TerraCurl&quot;&#125;]&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">  headers = &#123;</span><br><span class="line">    Authorization = <span class="string">&quot;Bearer <span class="variable">$&#123;var.qiita_token&#125;</span>&quot;</span></span><br><span class="line">    Content-Type  = <span class="string">&quot;application/json&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  response_codes = [</span><br><span class="line">    201</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output <span class="string">&quot;qiita_article_response&quot;</span> &#123;</span><br><span class="line">  value = <span class="built_in">basename</span>(jsondecode(terracurl_request.qiita_article.response).url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行すると最後に output の内容が表示されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">$ terraform apply</span><br><span class="line">2023-03-27T10:59:30.450+0900 [INFO]  Terraform version: 1.3.3</span><br><span class="line">2023-03-27T10:59:30.522+0900 [INFO]  Go runtime version: go1.19.1</span><br><span class="line">2023-03-27T10:59:30.527+0900 [INFO]  CLI args: []string&#123;<span class="string">&quot;terraform&quot;</span>, <span class="string">&quot;apply&quot;</span>&#125;</span><br><span class="line">(中略)</span><br><span class="line"></span><br><span class="line">Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:</span><br><span class="line">  + create</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># terracurl_request.qiita_article will be created</span></span><br><span class="line">  + resource <span class="string">&quot;terracurl_request&quot;</span> <span class="string">&quot;qiita_article&quot;</span> &#123;</span><br><span class="line">      + destroy_retry_interval = 10</span><br><span class="line">      + headers                = &#123;</span><br><span class="line">          + <span class="string">&quot;Authorization&quot;</span> = (sensitive)</span><br><span class="line">          + <span class="string">&quot;Content-Type&quot;</span>  = <span class="string">&quot;application/json&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      + <span class="built_in">id</span>                     = (known after apply)</span><br><span class="line">      + method                 = <span class="string">&quot;POST&quot;</span></span><br><span class="line">      + name                   = <span class="string">&quot;qiita-article&quot;</span></span><br><span class="line">      + request_body           = jsonencode(</span><br><span class="line">            &#123;</span><br><span class="line">              + body    = &lt;&lt;-<span class="string">EOT</span></span><br><span class="line"><span class="string">                    # Example</span></span><br><span class="line"><span class="string">                    TerraCurlやってみた</span></span><br><span class="line"><span class="string">                EOT</span></span><br><span class="line">              + private = <span class="literal">true</span></span><br><span class="line">              + tags    = [</span><br><span class="line">                  + &#123;</span><br><span class="line">                      + name = <span class="string">&quot;TerraCurl&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">              + title   = <span class="string">&quot;TerraCurl投稿テスト2023.3.27&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">      + request_url_string     = (known after apply)</span><br><span class="line">      + response               = (known after apply)</span><br><span class="line">      + response_codes         = [</span><br><span class="line">          + <span class="string">&quot;201&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">      + retry_interval         = 10</span><br><span class="line">      + status_code            = (known after apply)</span><br><span class="line">      + url                    = <span class="string">&quot;https://qiita.com/api/v2/items&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 1 to add, 0 to change, 0 to destroy.</span><br><span class="line"></span><br><span class="line">Changes to Outputs:</span><br><span class="line">  + qiita_article_response = (known after apply)</span><br><span class="line"></span><br><span class="line">Do you want to perform these actions?</span><br><span class="line">  Terraform will perform the actions described above.</span><br><span class="line">  Only <span class="string">&#x27;yes&#x27;</span> will be accepted to approve.</span><br><span class="line"></span><br><span class="line">  Enter a value: <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">Apply complete! Resources: 1 added, 0 changed, 0 destroyed.</span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line"></span><br><span class="line">qiita_article_response = <span class="string">&quot;6410f22e585d0907005e&quot;</span></span><br></pre></td></tr></table></figure><p>限定公開で記事を作成したのでブラウザで確認します。URLのIDが出力された値と一致していることがわかります。</p><img src="/images/20230328a/response.png" alt="" width="1200" height="924" loading="lazy"><p>※URLまでキャプチャに載せていますが、テスト投稿した記事は削除済みです</p><h2 id="Destoryする時どうするの？"><a href="#Destoryする時どうするの？" class="headerlink" title="Destoryする時どうするの？"></a>Destoryする時どうするの？</h2><p>Qiita APIの記事投稿に関して、IDは公開後に分かります（APIで指定すれば固定できるかも知れませんが）。そのため、以下のような <code>output</code> で取得した値を、<code>destory_url</code> に指定できると良いのですが、これは <code>terraform apply</code> に決定する値ですので、循環参照となり指定できません。このあたりはどうするか一工夫が必要そうです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;terracurl_request&quot;</span> <span class="string">&quot;qiita_article&quot;</span> &#123;</span><br><span class="line">  <span class="comment"># 中略</span></span><br><span class="line"></span><br><span class="line">  destroy_url    = <span class="string">&quot;https://qiita.com/api/v2/items/<span class="variable">$&#123;output.qiita_article_response.value&#125;</span>&quot;</span> // ★これが使えたら良いが..</span><br><span class="line">  destroy_method = <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">  destroy_headers = &#123;</span><br><span class="line">      Authorization = <span class="string">&quot;Bearer <span class="variable">$&#123;var.qiita_token&#125;</span>&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="TerraCurl所感"><a href="#TerraCurl所感" class="headerlink" title="TerraCurl所感"></a>TerraCurl所感</h2><p>ドキュメントを見ると、相互TLS認証やリトライなど作り込みが良さそうな部分が見られ、フィットするのであれば非常に有用そうでした。</p><p>一方で、ことAWSに関しては、 <code>awscli</code> が対応していない部分を探すのが難しく、<code>awscli</code> がサポートしているなら若干の移植性は下がるものの、 <code>local-exec</code> 経由で<code>awscli</code> を利用するほうが保守性が高まりそうだなと思いました。一方で、プラットフォーム側が意図的にサポートしない機能（ブログではVault Providerはあえて、クラスタのunsealコマンドをサポートしていないとある）の場合は、有用だなと思いました。</p><p>また、前章のDestoryにも書きましたが作成時のレスポンスに含まれる値を保持したいときの取り扱いは面倒そうと思います。Createだけの限定された条件とか、Destory時のURLやパラメータが apply する前に分かるのであれば便利そうだという印象です。</p><p>もし、上記に一致するような条件で、従来 <code>local-exec</code> で実行していたけど、内部的には <code>curl</code> コマンドだけだった場合には、 <code>tf</code> ファイルで完結するので素晴らしいツールだと思います。スクリプトを別途用意しなくてよいのは開発、保守的にも嬉しいと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>TerraCurlを使ってみました。ツールの命名が素晴らしくcurlで済ませられるようなリソースに関してはシンデレラフィットしそうなProviderです。</p><p>作成時のレスポンスの値を、Destory時などに使いまわしたい場合などは少し取り回しが難しそうなので、取り扱いに注意して導入したいと思います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">他にも <code>file</code> や <code>remote-exec</code> のProvisionerがあります。過去にはChef、Habitat、Puppet、Salt Masterless のProvisionerがあったようですが、 Terraform v0.15.0で削除されたようです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20230328a/top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;356&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="TerraCurl" scheme="https://future-architect.github.io/tags/TerraCurl/"/>
    
  </entry>
  
  <entry>
    <title>Terraform 1.4 Update:Private Service Connectを利用したbackend/gcsへのアクセス</title>
    <link href="https://future-architect.github.io/articles/20230327b/"/>
    <id>https://future-architect.github.io/articles/20230327b/</id>
    <published>2023-03-26T15:00:01.000Z</published>
    <updated>2023-03-27T03:05:45.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>こんにちは！筋肉エンジニアのTIG渡邉です。<a href="/articles/20230327a/">Terraform連載2023</a> の1リソース目の記事です。</p><p>Terraform 1.4.0の<code>ENHANCEMENTS</code>で以下の機能が追加されました。</p><blockquote><p>backend&#x2F;gcs: Add storage_custom_endpoint argument, to allow communication with the backend via a Private Service Connect endpoint.</p></blockquote><p>内容はtfstateが保存されているGCSへのアクセスがインターネット経由ではなく、Private Service Connectエンドポイントを利用したプライベートネットワーク経由でbackendに指定したGCSへアクセスすることができる機能です。今回はこの機能を検証します。</p><p>以下のリソースは構築済みとします。</p><ul><li>Google Cloud Project</li><li>Network系リソース（VPC&#x2F;Subnet&#x2F;Cloud Nat&#x2F;Cloud Router&#x2F;Firewall）</li><li>GCE</li><li>GCS</li></ul><h1 id="Private-Service-Connectを利用しない構成"><a href="#Private-Service-Connectを利用しない構成" class="headerlink" title="Private Service Connectを利用しない構成"></a>Private Service Connectを利用しない構成</h1><p>Private Service Connectを利用しない構成はこちらです。</p><p>GCEにTerraformをインストールし、Terraform Serverとしています。Terraform Serverでterraform initを実行するとVPCに構築済みのCloud Nat&#x2F;インターネット経由でGCSへアクセスされます。</p><p>この構成は皆さんお使いのいつもの構成だと思います。</p><img src="/images/20230327b/architecture01.drawio.png" alt="" width="772" height="591" loading="lazy"><h1 id="Private-Service-Connectを利用した構成"><a href="#Private-Service-Connectを利用した構成" class="headerlink" title="Private Service Connectを利用した構成"></a>Private Service Connectを利用した構成</h1><p>Private Service Connectを利用した構成はこちらになります。</p><p>こちらもGCEにTerraformをインストールし、Terraform Serverとしています。Terraform Serverでterraform initを実行するとVPCに構築済みのCloud Nat&#x2F;インターネットを経由するのではなく、Private Service Connect Endpoint(10.0.3.0)を経由してGCSへアクセスされます。</p><p>今回はこの構成を検証します。</p><img src="/images/20230327b/architecture02.drawio.png" alt="architecture02.drawio.png" width="772" height="591" loading="lazy"><h2 id="Private-Service-Connectとは"><a href="#Private-Service-Connectとは" class="headerlink" title="Private Service Connectとは"></a>Private Service Connectとは</h2><p>Private Service Connectとは一言でいうと、Google Cloud API にプライベートネットワーク経由でアクセスするための機能になります。</p><p>詳しくはG-genの杉村さんの技術ブログがすごくわかりやすくまとまっているのでこちらを参照ください。</p><ul><li><a href="https://blog.g-gen.co.jp/entry/google-api-private-service-connect-explained">https://blog.g-gen.co.jp/entry/google-api-private-service-connect-explained</a></li></ul><h2 id="Private-Service-Connectの作成"><a href="#Private-Service-Connectの作成" class="headerlink" title="Private Service Connectの作成"></a>Private Service Connectの作成</h2><p>以下公式ドキュメントを参考にPrivate Service Connectを作成します。</p><p><a href="https://cloud.google.com/vpc/docs/configure-private-service-connect-apis?hl=ja#console_1">https://cloud.google.com/vpc/docs/configure-private-service-connect-apis?hl=ja#console_1</a></p><p>ネットワークサービス→Private Service Connectをクリックします。<br>Private Service Connectから「エンドポイントを接続」をクリックします。</p><img src="/images/20230327b/image.png" alt="" width="1200" height="856" loading="lazy"><ul><li>対象：すべてのGoogle API</li><li>エンドポイント名：sampleendpoint</li><li>ネットワーク：my-stg-environment01-vpc</li><li>sample-endpoint-ip (10.0.3.0)</li><li>リージョン：asia-northeast1</li><li>名前空間：自動割り当て済みのものを設定</li></ul><p>を設定し、「エンドポイントを追加」をクリックします。</p><img src="/images/20230327b/image_2.png" alt="" width="1200" height="847" loading="lazy"><p>するとPrivate Service Connectの接続エンドポイントが作成されます。</p><img src="/images/20230327b/image_3.png" alt="" width="1200" height="855" loading="lazy"><p>Service Directoryも作成されています。</p><img src="/images/20230327b/image_4.png" alt="" width="1200" height="851" loading="lazy"><p>限定公開DNSゾーンも作成されています。<br><img src="/images/20230327b/image_5.png" alt="" width="1200" height="852" loading="lazy"></p><p>ここまででPrivate Service Connectの設定は完了です。</p><p>Private Service Connectエンドポイントが正しく機能しているかを確認するために、GCEへSSHしてcurlコマンドを実行してエンドポイントへアクセスします。</p><p>エンドポイントが機能している場合は、HTTP 204 レスポンス コードが表示されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ curl -v 10.0.3.0/generate_204</span><br><span class="line">*   Trying 10.0.3.0:80...</span><br><span class="line">* TCP_NODELAY <span class="built_in">set</span></span><br><span class="line">* Connected to 10.0.3.0 (10.0.3.0) port 80 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET /generate_204 HTTP/1.1</span><br><span class="line">&gt; Host: 10.0.3.0</span><br><span class="line">&gt; User-Agent: curl/7.68.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">* Mark bundle as not supporting multiuse</span><br><span class="line">&lt; HTTP/1.1 204 No Content　★204のレスポンスを確認</span><br><span class="line">&lt; Content-Length: 0</span><br><span class="line">&lt; Cross-Origin-Resource-Policy: cross-origin</span><br><span class="line">&lt; Date: Sat, 25 Mar 2023 05:02:30 GMT</span><br><span class="line">&lt;</span><br><span class="line">* Connection <span class="comment">#0 to host 10.0.3.0 left intact</span></span><br></pre></td></tr></table></figure><h2 id="Terraform-の設定"><a href="#Terraform-の設定" class="headerlink" title="Terraform の設定"></a>Terraform の設定</h2><p>準備ができたのでTerraform 1.4.0の追加機能を検証していきます。<br>Terraform公式ドキュメント(1.4.0)のBackend&#x2F;gcsにstorage_custom_endpointが追加されていることが確認できます。</p><p><a href="https://developer.hashicorp.com/terraform/language/settings/backends/gcs">https://developer.hashicorp.com/terraform/language/settings/backends/gcs</a></p><blockquote><p>storage_custom_endpoint &#x2F; GOOGLE_BACKEND_STORAGE_CUSTOM_ENDPOINT &#x2F; GOOGLE_STORAGE_CUSTOM_ENDPOINT - (Optional) A URL containing three parts: the protocol, the DNS name pointing to a Private Service Connect endpoint, and the path for the Cloud Storage API (&#x2F;storage&#x2F;v1&#x2F;b, see here). You can either use a DNS name automatically made by the Service Directory or a custom DNS name made by you. For example, if you create an endpoint called xyz and want to use the automatically-created DNS name, you should set the field value as <a href="https://storage-xyz.p.googleapis.com/storage/v1/b">https://storage-xyz.p.googleapis.com/storage/v1/b</a>. For help creating a Private Service Connect endpoint using Terraform, see this guide.</p></blockquote><h2 id="Private-Service-Connect経由のGCSアクセス確認"><a href="#Private-Service-Connect経由のGCSアクセス確認" class="headerlink" title="Private Service Connect経由のGCSアクセス確認"></a>Private Service Connect経由のGCSアクセス確認</h2><h3 id="Terraform-Backendの設定"><a href="#Terraform-Backendの設定" class="headerlink" title="Terraform Backendの設定"></a>Terraform Backendの設定</h3><p>backend.tfにterraform 1.4で追加された<code>storage_custom_endpoint</code>を追加してみます。</p><p>こちらの設定を追加することで、tfstateが保存されているbackendのGCSへのアクセスをPrivate Service Connectのエンドポイント経由にすることができます。<br><code>https://storage-xyz.p.googleapis.com/storage/v1/b</code>をベースに値の置き換えをします。</p><ul><li>xyz→sampleendpoint（Private Service Connectのエンドポイント名）</li></ul><figure class="highlight plaintext"><figcaption><span>backend.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  backend &quot;gcs&quot; &#123;</span><br><span class="line">    bucket                  = &quot;xxxxxxxxxxxxxxxxx&quot;</span><br><span class="line">    prefix                  = &quot;terraform/state&quot;</span><br><span class="line">    storage_custom_endpoint = &quot;https://storage-sampleendpoint.p.googleapis.com/storage/v1/b&quot; ★追加</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tcpdumpを利用したPrivate-Service-Connect経由のGCSアクセス確認"><a href="#tcpdumpを利用したPrivate-Service-Connect経由のGCSアクセス確認" class="headerlink" title="tcpdumpを利用したPrivate Service Connect経由のGCSアクセス確認"></a>tcpdumpを利用したPrivate Service Connect経由のGCSアクセス確認</h3><p>tcpdumpを利用してPrivate Service Connectのエンドポイント(10.0.3.0)を経由してbackendのgcsへアクセスできていることを確認します。</p><p>コンソールを2つ開きます。</p><ul><li>terraform initを実行するコンソール</li><li>tcpdumpを実行するコンソール</li></ul><p>先にtcpdumpを実行するコンソールからtcpdumpコマンド<code>sudo tcpdump dst 10.0.3.0</code>を実行し、Private Service Connectのエンドポイント(10.0.3.0)を経由するパケットをキャプチャする準備をします。</p><p>tcpdumpコマンドを実行後に、terraform initを実行するコンソールからterraform initを実行するとPrivate Service Connectのエンドポイント(10.0.3.0)を経由するパケットがキャプチャされていることが確認できました。Private Service Connectのエンドポイント(10.0.3.0)を経由して無事GCSにアクセスできたようです。</p><figure class="highlight bash"><figcaption><span>terraform init実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ <span class="built_in">date</span> &amp;&amp; terraform init</span><br><span class="line">Sat Mar 25 02:13:50 UTC 2023</span><br><span class="line"></span><br><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">- Reusing previous version of hashicorp/google from the dependency lock file</span><br><span class="line">- Using previously-installed hashicorp/google v4.57.0</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br><span class="line"></span><br><span class="line">You may now begin working with Terraform. Try running <span class="string">&quot;terraform plan&quot;</span> to see</span><br><span class="line">any changes that are required <span class="keyword">for</span> your infrastructure. All Terraform commands</span><br><span class="line">should now work.</span><br><span class="line"></span><br><span class="line">If you ever <span class="built_in">set</span> or change modules or backend configuration <span class="keyword">for</span> Terraform,</span><br><span class="line">rerun this <span class="built_in">command</span> to reinitialize your working directory. If you forget, other</span><br><span class="line">commands will detect it and remind you to <span class="keyword">do</span> so <span class="keyword">if</span> necessary.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>tcpdumpの実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~$ <span class="built_in">date</span> &amp;&amp; sudo tcpdump dst 10.0.3.0</span><br><span class="line">Sat Mar 25 02:13:49 UTC 2023</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on ens4, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">02:13:50.920469 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [S], <span class="built_in">seq</span> 665228907, win 65320, options [mss 1420,sackOK,TS val 3343093648 ecr 0,nop,wscale 7], length 0</span><br><span class="line">02:13:50.921158 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 692049395, win 511, options [nop,nop,TS val 3343093649 ecr 2560562916], length 0</span><br><span class="line">02:13:50.921387 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 0:305, ack 1, win 511, options [nop,nop,TS val 3343093649 ecr 2560562916], length 305</span><br><span class="line">02:13:50.959772 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 7041, win 479, options [nop,nop,TS val 3343093687 ecr 2560562955], length 0</span><br><span class="line">02:13:50.959781 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 9820, win 467, options [nop,nop,TS val 3343093687 ecr 2560562955], length 0</span><br><span class="line">02:13:50.975543 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 305:369, ack 9820, win 501, options [nop,nop,TS val 3343093703 ecr 2560562955], length 64</span><br><span class="line">02:13:50.975657 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 369:455, ack 9820, win 501, options [nop,nop,TS val 3343093703 ecr 2560562955], length 86</span><br><span class="line">02:13:50.975798 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 9913, win 501, options [nop,nop,TS val 3343093703 ecr 2560562971], length 0</span><br><span class="line">02:13:50.975857 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 455:1659, ack 9913, win 501, options [nop,nop,TS val 3343093703 ecr 2560562971], length 1204</span><br><span class="line">02:13:50.976394 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 1659:1690, ack 9913, win 501, options [nop,nop,TS val 3343093704 ecr 2560562971], length 31</span><br><span class="line">02:13:50.993635 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 11081, win 501, options [nop,nop,TS val 3343093721 ecr 2560562989], length 0</span><br><span class="line">02:13:50.993983 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 11151, win 501, options [nop,nop,TS val 3343093722 ecr 2560562989], length 0</span><br><span class="line">02:13:50.994012 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 1690:1729, ack 11151, win 501, options [nop,nop,TS val 3343093722 ecr 2560562989], length 39</span><br><span class="line">02:13:51.194072 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 1729:1854, ack 11151, win 501, options [nop,nop,TS val 3343093922 ecr 2560562994], length 125</span><br><span class="line">02:13:51.213234 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 11863, win 501, options [nop,nop,TS val 3343093941 ecr 2560563208], length 0</span><br><span class="line">02:13:51.213423 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 1854:1893, ack 11863, win 501, options [nop,nop,TS val 3343093941 ecr 2560563208], length 39</span><br><span class="line">02:13:51.213662 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 1893:2137, ack 11863, win 501, options [nop,nop,TS val 3343093941 ecr 2560563208], length 244</span><br><span class="line">02:13:51.237109 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 12963, win 501, options [nop,nop,TS val 3343093965 ecr 2560563232], length 0</span><br><span class="line">02:13:51.237265 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 2137:2176, ack 12963, win 501, options [nop,nop,TS val 3343093965 ecr 2560563232], length 39</span><br><span class="line">02:13:51.237810 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 2176:2256, ack 12963, win 501, options [nop,nop,TS val 3343093965 ecr 2560563232], length 80</span><br><span class="line">02:13:51.257360 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 13326, win 501, options [nop,nop,TS val 3343093985 ecr 2560563253], length 0</span><br><span class="line">02:13:51.257569 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 13396, win 501, options [nop,nop,TS val 3343093985 ecr 2560563253], length 0</span><br><span class="line">02:13:51.257665 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 2256:2295, ack 13396, win 501, options [nop,nop,TS val 3343093985 ecr 2560563253], length 39</span><br><span class="line">02:13:51.257755 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 2295:2450, ack 13396, win 501, options [nop,nop,TS val 3343093985 ecr 2560563253], length 155</span><br><span class="line">02:13:51.273998 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 14405, win 501, options [nop,nop,TS val 3343094002 ecr 2560563269], length 0</span><br><span class="line">02:13:51.274108 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 14475, win 501, options [nop,nop,TS val 3343094002 ecr 2560563269], length 0</span><br><span class="line">02:13:51.274127 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [P.], <span class="built_in">seq</span> 2450:2489, ack 14475, win 501, options [nop,nop,TS val 3343094002 ecr 2560563269], length 39</span><br><span class="line">02:13:51.707967 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [F.], <span class="built_in">seq</span> 2489, ack 14475, win 501, options [nop,nop,TS val 3343094436 ecr 2560563274], length 0</span><br><span class="line">02:13:51.708100 IP tky-bastion.asia-northeast1-c.c.xxxxxxxxxxxxx.internal.44474 &gt; 10.0.3.0.https: Flags [.], ack 14476, win 501, options [nop,nop,TS val 3343094436 ecr 2560563703], length 0</span><br></pre></td></tr></table></figure><p>また、nslookupコマンドでbackend.tfのstorage_custom_endpointに設定している<code>storage-sampleendpoint.p.googleapis.com</code>を指定して実行すると10.0.3.0で名前解決されることも確認できました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ nslookup storage-sampleendpoint.p.googleapis.com</span><br><span class="line">Server:         127.0.0.53</span><br><span class="line">Address:        127.0.0.53<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:   storage-sampleendpoint.p.googleapis.com</span><br><span class="line">Address: 10.0.3.0</span><br></pre></td></tr></table></figure><h1 id="余談"><a href="#余談" class="headerlink" title="余談"></a>余談</h1><p>余談ですが、<code>tcpdump -n -vv dst port 443</code>コマンドを実行してterraform initを実施し、GCEから443ポートへアクセスしたパケットをキャプチャしてみました。</p><figure class="highlight bash"><figcaption><span>tcpdump -n -vv dst port 443コマンド実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ sudo tcpdump -n -vv dst port 443</span><br><span class="line">tcpdump: listening on ens4, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">05:14:59.618319 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11848, offset 0, flags [DF], proto TCP (6), length 60)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [S], <span class="built_in">cksum</span> 0x1730 (incorrect -&gt; 0xad7d), <span class="built_in">seq</span> 1890652633, win 65320, options [mss 1420,sackOK,TS val 3353962346 ecr 0,nop,wscale 7], length 0</span><br><span class="line">05:14:59.618778 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11849, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x3d3b), <span class="built_in">seq</span> 1890652634, ack 3216389491, win 511, options [nop,nop,TS val 3353962346 ecr 1133339465], length 0</span><br><span class="line">05:14:59.619011 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11850, offset 0, flags [DF], proto TCP (6), length 357)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x1859 (incorrect -&gt; 0x80b7), <span class="built_in">seq</span> 0:305, ack 1, win 511, options [nop,nop,TS val 3353962347 ecr 1133339465], length 305</span><br><span class="line">05:14:59.655194 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11851, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x2063), <span class="built_in">seq</span> 305, ack 7041, win 477, options [nop,nop,TS val 3353962383 ecr 1133339501], length 0</span><br><span class="line">05:14:59.655208 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11852, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x1596), <span class="built_in">seq</span> 305, ack 9822, win 461, options [nop,nop,TS val 3353962383 ecr 1133339501], length 0</span><br><span class="line">05:14:59.671136 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11853, offset 0, flags [DF], proto TCP (6), length 116)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x1768 (incorrect -&gt; 0x3471), <span class="built_in">seq</span> 305:369, ack 9822, win 501, options [nop,nop,TS val 3353962399 ecr 1133339501], length 64</span><br><span class="line">05:14:59.671287 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11854, offset 0, flags [DF], proto TCP (6), length 138)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x177e (incorrect -&gt; 0x3286), <span class="built_in">seq</span> 369:455, ack 9822, win 501, options [nop,nop,TS val 3353962399 ecr 1133339501], length 86</span><br><span class="line">05:14:59.671463 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11855, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x145b), <span class="built_in">seq</span> 455, ack 9915, win 501, options [nop,nop,TS val 3353962399 ecr 1133339517], length 0</span><br><span class="line">05:14:59.671615 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11856, offset 0, flags [DF], proto TCP (6), length 1246)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x1bd2 (incorrect -&gt; 0xb465), <span class="built_in">seq</span> 455:1649, ack 9915, win 501, options [nop,nop,TS val 3353962399 ecr 1133339517], length 1194</span><br><span class="line">05:14:59.671989 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11857, offset 0, flags [DF], proto TCP (6), length 83)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x1747 (incorrect -&gt; 0xfb7a), <span class="built_in">seq</span> 1649:1680, ack 9915, win 501, options [nop,nop,TS val 3353962400 ecr 1133339517], length 31</span><br><span class="line">05:14:59.695902 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11858, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x0ab2), <span class="built_in">seq</span> 1680, ack 11114, win 501, options [nop,nop,TS val 3353962423 ecr 1133339542], length 0</span><br><span class="line">05:14:59.696324 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11859, offset 0, flags [DF], proto TCP (6), length 91)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x174f (incorrect -&gt; 0x000a), <span class="built_in">seq</span> 1680:1719, ack 11153, win 501, options [nop,nop,TS val 3353962424 ecr 1133339542], length 39</span><br><span class="line">05:14:59.896847 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11860, offset 0, flags [DF], proto TCP (6), length 177)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x17a5 (incorrect -&gt; 0x7c61), <span class="built_in">seq</span> 1719:1844, ack 11153, win 501, options [nop,nop,TS val 3353962624 ecr 1133339548], length 125</span><br><span class="line">05:14:59.919871 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11861, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x0577), <span class="built_in">seq</span> 1844, ack 11841, win 501, options [nop,nop,TS val 3353962647 ecr 1133339766], length 0</span><br><span class="line">05:14:59.920025 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11862, offset 0, flags [DF], proto TCP (6), length 91)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x174f (incorrect -&gt; 0xf0a1), <span class="built_in">seq</span> 1844:1883, ack 11841, win 501, options [nop,nop,TS val 3353962648 ecr 1133339766], length 39</span><br><span class="line">05:14:59.920303 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11863, offset 0, flags [DF], proto TCP (6), length 296)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x181c (incorrect -&gt; 0x465c), <span class="built_in">seq</span> 1883:2127, ack 11841, win 501, options [nop,nop,TS val 3353962648 ecr 1133339766], length 244</span><br><span class="line">05:14:59.935230 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11864, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0x001d), <span class="built_in">seq</span> 2127, ack 12897, win 501, options [nop,nop,TS val 3353962663 ecr 1133339781], length 0</span><br><span class="line">05:14:59.935406 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11865, offset 0, flags [DF], proto TCP (6), length 91)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x174f (incorrect -&gt; 0x01e6), <span class="built_in">seq</span> 2127:2166, ack 12936, win 501, options [nop,nop,TS val 3353962663 ecr 1133339781], length 39</span><br><span class="line">05:14:59.935919 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11866, offset 0, flags [DF], proto TCP (6), length 133)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x1779 (incorrect -&gt; 0x2c27), <span class="built_in">seq</span> 2166:2247, ack 12936, win 501, options [nop,nop,TS val 3353962663 ecr 1133339781], length 81</span><br><span class="line">05:14:59.959617 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11867, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0xfde0), <span class="built_in">seq</span> 2247, ack 13300, win 501, options [nop,nop,TS val 3353962687 ecr 1133339806], length 0</span><br><span class="line">05:14:59.959735 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11868, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0xfd9a), <span class="built_in">seq</span> 2247, ack 13370, win 501, options [nop,nop,TS val 3353962687 ecr 1133339806], length 0</span><br><span class="line">05:14:59.959759 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11869, offset 0, flags [DF], proto TCP (6), length 91)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x174f (incorrect -&gt; 0x5782), <span class="built_in">seq</span> 2247:2286, ack 13370, win 501, options [nop,nop,TS val 3353962687 ecr 1133339806], length 39</span><br><span class="line">05:14:59.959992 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11870, offset 0, flags [DF], proto TCP (6), length 208)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x17c4 (incorrect -&gt; 0x4db0), <span class="built_in">seq</span> 2286:2442, ack 13370, win 501, options [nop,nop,TS val 3353962688 ecr 1133339806], length 156</span><br><span class="line">05:14:59.975804 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11871, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0xf8ac), <span class="built_in">seq</span> 2442, ack 14405, win 501, options [nop,nop,TS val 3353962703 ecr 1133339822], length 0</span><br><span class="line">05:14:59.975974 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11872, offset 0, flags [DF], proto TCP (6), length 91)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [P.], <span class="built_in">cksum</span> 0x174f (incorrect -&gt; 0x1781), <span class="built_in">seq</span> 2442:2481, ack 14444, win 501, options [nop,nop,TS val 3353962704 ecr 1133339822], length 39</span><br><span class="line">05:14:59.990384 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49768, offset 0, flags [DF], proto TCP (6), length 60)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [S], <span class="built_in">cksum</span> 0xe6c8 (incorrect -&gt; 0x3154), <span class="built_in">seq</span> 804049769, win 65320, options [mss 1420,sackOK,TS val 118988064 ecr 0,nop,wscale 7], length 0</span><br><span class="line">05:14:59.992174 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49769, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x36cd), <span class="built_in">seq</span> 804049770, ack 2881392399, win 511, options [nop,nop,TS val 118988066 ecr 3287754621], length 0</span><br><span class="line">05:14:59.992465 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49770, offset 0, flags [DF], proto TCP (6), length 339)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [P.], <span class="built_in">cksum</span> 0xe7df (incorrect -&gt; 0xcbaf), <span class="built_in">seq</span> 0:287, ack 1, win 511, options [nop,nop,TS val 118988066 ecr 3287754621], length 287</span><br><span class="line">05:14:59.994083 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49771, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x1fc4), <span class="built_in">seq</span> 287, ack 5633, win 485, options [nop,nop,TS val 118988068 ecr 3287754623], length 0</span><br><span class="line">05:14:59.995701 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49772, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x1dd9), <span class="built_in">seq</span> 287, ack 6105, win 501, options [nop,nop,TS val 118988069 ecr 3287754625], length 0</span><br><span class="line">05:14:59.996879 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49773, offset 0, flags [DF], proto TCP (6), length 116)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [P.], <span class="built_in">cksum</span> 0xe700 (incorrect -&gt; 0x0739), <span class="built_in">seq</span> 287:351, ack 6105, win 501, options [nop,nop,TS val 118988070 ecr 3287754625], length 64</span><br><span class="line">05:14:59.996970 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49774, offset 0, flags [DF], proto TCP (6), length 138)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [P.], <span class="built_in">cksum</span> 0xe716 (incorrect -&gt; 0x6424), <span class="built_in">seq</span> 351:437, ack 6105, win 501, options [nop,nop,TS val 118988071 ecr 3287754625], length 86</span><br><span class="line">05:14:59.997049 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49775, offset 0, flags [DF], proto TCP (6), length 184)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [P.], <span class="built_in">cksum</span> 0xe744 (incorrect -&gt; 0xeaa5), <span class="built_in">seq</span> 437:569, ack 6105, win 501, options [nop,nop,TS val 118988071 ecr 3287754625], length 132</span><br><span class="line">05:14:59.998619 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49776, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x1be0), <span class="built_in">seq</span> 569, ack 6322, win 501, options [nop,nop,TS val 118988072 ecr 3287754628], length 0</span><br><span class="line">05:14:59.998648 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49777, offset 0, flags [DF], proto TCP (6), length 83)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [P.], <span class="built_in">cksum</span> 0xe6df (incorrect -&gt; 0x4699), <span class="built_in">seq</span> 569:600, ack 6322, win 501, options [nop,nop,TS val 118988072 ecr 3287754628], length 31</span><br><span class="line">05:15:00.001052 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27837, offset 0, flags [DF], proto TCP (6), length 60)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [S], <span class="built_in">cksum</span> 0xe6d1 (incorrect -&gt; 0xe0d7), <span class="built_in">seq</span> 4293780694, win 65320, options [mss 1420,sackOK,TS val 2768777777 ecr 0,nop,wscale 7], length 0</span><br><span class="line">05:15:00.002878 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27838, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x5b53), <span class="built_in">seq</span> 4293780695, ack 1618472241, win 511, options [nop,nop,TS val 2768777778 ecr 4104875756], length 0</span><br><span class="line">05:15:00.003079 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27839, offset 0, flags [DF], proto TCP (6), length 339)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe7e8 (incorrect -&gt; 0xa7d9), <span class="built_in">seq</span> 0:287, ack 1, win 511, options [nop,nop,TS val 2768777779 ecr 4104875756], length 287</span><br><span class="line">05:15:00.015189 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27840, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x4435), <span class="built_in">seq</span> 287, ack 5633, win 485, options [nop,nop,TS val 2768777791 ecr 4104875768], length 0</span><br><span class="line">05:15:00.019172 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27841, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x4245), <span class="built_in">seq</span> 287, ack 6105, win 501, options [nop,nop,TS val 2768777795 ecr 4104875772], length 0</span><br><span class="line">05:15:00.020132 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27842, offset 0, flags [DF], proto TCP (6), length 116)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe709 (incorrect -&gt; 0x4fa9), <span class="built_in">seq</span> 287:351, ack 6105, win 501, options [nop,nop,TS val 2768777796 ecr 4104875772], length 64</span><br><span class="line">05:15:00.020226 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27843, offset 0, flags [DF], proto TCP (6), length 138)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe71f (incorrect -&gt; 0xbc63), <span class="built_in">seq</span> 351:437, ack 6105, win 501, options [nop,nop,TS val 2768777796 ecr 4104875772], length 86</span><br><span class="line">05:15:00.020313 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27844, offset 0, flags [DF], proto TCP (6), length 171)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe740 (incorrect -&gt; 0x1e38), <span class="built_in">seq</span> 437:556, ack 6105, win 501, options [nop,nop,TS val 2768777796 ecr 4104875772], length 119</span><br><span class="line">05:15:00.025659 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27845, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x4052), <span class="built_in">seq</span> 556, ack 6322, win 501, options [nop,nop,TS val 2768777801 ecr 4104875779], length 0</span><br><span class="line">05:15:00.025711 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27846, offset 0, flags [DF], proto TCP (6), length 83)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe6e8 (incorrect -&gt; 0xd5e8), <span class="built_in">seq</span> 556:587, ack 6322, win 501, options [nop,nop,TS val 2768777801 ecr 4104875779], length 31</span><br><span class="line">05:15:00.043638 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49778, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x1665), <span class="built_in">seq</span> 600, ack 7648, win 501, options [nop,nop,TS val 118988117 ecr 3287754629], length 0</span><br><span class="line">05:15:00.233601 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27847, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x2bd4), <span class="built_in">seq</span> 587, ack 11121, win 501, options [nop,nop,TS val 2768778009 ecr 4104875987], length 0</span><br><span class="line">05:15:00.234626 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27848, offset 0, flags [DF], proto TCP (6), length 87)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [P.], <span class="built_in">cksum</span> 0xe6ec (incorrect -&gt; 0x6bac), <span class="built_in">seq</span> 587:622, ack 11152, win 501, options [nop,nop,TS val 2768778010 ecr 4104875987], length 35</span><br><span class="line">05:15:00.434281 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27849, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [F.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x2ac5), <span class="built_in">seq</span> 622, ack 11152, win 501, options [nop,nop,TS val 2768778210 ecr 4104875990], length 0</span><br><span class="line">05:15:00.434304 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49779, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [F.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x14dd), <span class="built_in">seq</span> 600, ack 7648, win 501, options [nop,nop,TS val 118988508 ecr 3287754629], length 0</span><br><span class="line">05:15:00.434314 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11873, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [F.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0xf68d), <span class="built_in">seq</span> 2481, ack 14444, win 501, options [nop,nop,TS val 3353963162 ecr 1133339827], length 0</span><br><span class="line">05:15:00.434467 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 11874, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [.], <span class="built_in">cksum</span> 0x1728 (incorrect -&gt; 0xf4c6), <span class="built_in">seq</span> 2482, ack 14445, win 501, options [nop,nop,TS val 3353963162 ecr 1133340281], length 0</span><br><span class="line">05:15:00.436252 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27850, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.50122 &gt; 18.65.202.96.443: Flags [.], <span class="built_in">cksum</span> 0xe6c9 (incorrect -&gt; 0x29fb), <span class="built_in">seq</span> 623, ack 11153, win 501, options [nop,nop,TS val 2768778212 ecr 4104876189], length 0</span><br><span class="line">05:15:00.436271 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 49780, offset 0, flags [DF], proto TCP (6), length 52)</span><br><span class="line">    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], <span class="built_in">cksum</span> 0xe6c0 (incorrect -&gt; 0x1325), <span class="built_in">seq</span> 601, ack 7649, win 501, options [nop,nop,TS val 118988510 ecr 3287755066], length 0</span><br></pre></td></tr></table></figure><p>以下はGCE(10.0.0.2)からPrivate Service Connectエンドポイント(10.0.3.0)へのアクセスしてGCSへアクセスしているパケットのキャプチャだと思います。</p><blockquote><p>05:14:59.618319 IP (tos 0x0, ttl 64, id 11848, offset 0, flags [DF], proto TCP (6), length 60)<br>    10.0.0.2.53478 &gt; 10.0.3.0.443: Flags [S], cksum 0x1730 (incorrect -&gt; 0xad7d), seq 1890652633, win 65320, options [mss 1420,sackOK,TS val 3353962346 ecr 0,nop,wscale 7], length 0</p></blockquote><p>もう一つterraform init時にGCE(10.0.0.2)から18.65.202.87へアクセスしているパケットをキャプチャすることができました。</p><blockquote><p>05:15:00.436271 IP (tos 0x0, ttl 64, id 49780, offset 0, flags [DF], proto TCP (6), length 52)<br>    10.0.0.2.34760 &gt; 18.65.202.87.443: Flags [.], cksum 0xe6c0 (incorrect -&gt; 0x1325), seq 601, ack 7649, win 501, options [nop,nop,TS val 118988510 ecr 3287755066], length 0</p></blockquote><p>こちらについてもう少し調べてみます。<br>tcpdump -n -vv dst port 53コマンドを実行してterraform initを実施し、GCEから53ポートへアクセスしたパケットをキャプチャしてみました。</p><figure class="highlight bash"><figcaption><span>tcpdump -n -vv dst port 53コマンド実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ sudo tcpdump -n -vv dst port 53</span><br><span class="line">tcpdump: listening on ens4, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">05:28:31.201384 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 52411, offset 0, flags [DF], proto UDP (17), length 96)</span><br><span class="line">    10.0.0.2.59890 &gt; 169.254.169.254.53: [bad udp <span class="built_in">cksum</span> 0x5e5c -&gt; 0xa496!] 31699+ [1au] AAAA? storage-sampleendpoint.p.googleapis.com. ar: . OPT UDPsize=512 (68)</span><br><span class="line">05:28:31.201482 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 37003, offset 0, flags [DF], proto UDP (17), length 96)</span><br><span class="line">    10.0.0.2.52697 &gt; 169.254.169.254.53: [bad udp <span class="built_in">cksum</span> 0x5e5c -&gt; 0x3727!] 8284+ [1au] A? storage-sampleendpoint.p.googleapis.com. ar: . OPT UDPsize=512 (68)</span><br><span class="line">05:28:31.596564 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 831, offset 0, flags [DF], proto UDP (17), length 78)</span><br><span class="line">    10.0.0.2.43466 &gt; 169.254.169.254.53: [bad udp <span class="built_in">cksum</span> 0x5e4a -&gt; 0x143a!] 35627+ [1au] A? registry.terraform.io. ar: . OPT UDPsize=512 (50)</span><br><span class="line">05:28:31.596653 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 27444, offset 0, flags [DF], proto UDP (17), length 78)</span><br><span class="line">    10.0.0.2.58257 &gt; 169.254.169.254.53: [bad udp <span class="built_in">cksum</span> 0x5e4a -&gt; 0x126e!] 14384+ [1au] AAAA? registry.terraform.io. ar: . OPT UDPsize=512 (50)</span><br></pre></td></tr></table></figure><p>すると、<code>storage-sampleendpoint.p.googleapis.com</code>のほかに<code>registry.terraform.io</code>を名前解決していることがわかりました。</p><blockquote><p>05:28:31.596564 IP (tos 0x0, ttl 64, id 831, offset 0, flags [DF], proto UDP (17), length 78)<br>    10.0.0.2.43466 &gt; 169.254.169.254.53: [bad udp cksum 0x5e4a -&gt; 0x143a!] 35627+ [1au] A? registry.terraform.io. ar: . OPT UDPsize&#x3D;512 (50)<br>05:28:31.596653 IP (tos 0x0, ttl 64, id 27444, offset 0, flags [DF], proto UDP (17), length 78)<br>    10.0.0.2.58257 &gt; 169.254.169.254.53: [bad udp cksum 0x5e4a -&gt; 0x126e!] 14384+ [1au] AAAA? registry.terraform.io. ar: . OPT UDPsize&#x3D;512 (50</p></blockquote><p>今度はdigコマンドを利用して<code>registry.terraform.io</code>を名前解決してみます。<br>すると先ほどの<code>tcpdump -n -vv dst port 443</code>コマンドを実行して出力されたIPアドレス<code>18.65.202.87</code>が存在することがわかりました。<br>registry.terraform.io(18.65.202.87)への通信はCloud Nat&#x2F;インターネット経由でアクセスしています。</p><figure class="highlight bash"><figcaption><span>dig registry.terraform.ioコマンド実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx@tky-bastion:~/terraform$ dig registry.terraform.io</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; registry.terraform.io</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 7463</span></span><br><span class="line"><span class="string">;; flags: qr rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 65494</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;registry.terraform.io.         IN      A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">registry.terraform.io.  80      IN      CNAME   d3rdzqodp6w8cx.cloudfront.net.</span></span><br><span class="line"><span class="string">d3rdzqodp6w8cx.cloudfront.net. 60 IN    A       18.65.202.96</span></span><br><span class="line"><span class="string">d3rdzqodp6w8cx.cloudfront.net. 60 IN    A       18.65.202.27</span></span><br><span class="line"><span class="string">d3rdzqodp6w8cx.cloudfront.net. 60 IN    A       18.65.202.107</span></span><br><span class="line"><span class="string">d3rdzqodp6w8cx.cloudfront.net. 60 IN    A       18.65.202.87　★該当IPアドレス</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 52 msec</span></span><br><span class="line"><span class="string">;; SERVER: 127.0.0.53#53(127.0.0.53)</span></span><br><span class="line"><span class="string">;; WHEN: Sat Mar 25 05:32:10 UTC 2023</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 157</span></span><br></pre></td></tr></table></figure><p>このことからTerraform 1.4.0で追加されたPrivate Service Connectを利用したbackend&#x2F;gcsへのアクセスの機能を利用してもbackendのGCSへの通信のみプライベート接続され、Terraformのgoogle providerなどを利用するためにregistry.terraform.ioへのインターネットアクセスは避けられず完全プライベートではterraformは利用できないことが分かりました（当たり前か…）</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回はTerraform 1.4で追加されたPrivate Service Connectエンドポイント経由でbackendに指定したGCSへアクセスできることができる機能を検証しました。</p><p>Private Service Connect自体も実務で使用したことがなかったので、勉強になりました。Private Service Connectを利用しプライベートネットワーク経由で backendのGCSへアクセスすることは確認できましたが、結局Terraformを利用するためには、インターネットへ接続できることが条件なので、Private Service Connectの構築・運用コストを考えるとよほどのセキュリティ要件がなければ通常のインターネット経由でbackendのGCSへアクセスする構成が無難かと思いました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot; title=&quot;初めに&quot;&gt;&lt;/a&gt;初めに&lt;/h1&gt;&lt;p&gt;こんにちは！筋肉エンジニアのTIG渡邉です。&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="Terraform1.4" scheme="https://future-architect.github.io/tags/Terraform1-4/"/>
    
  </entry>
  
</feed>
